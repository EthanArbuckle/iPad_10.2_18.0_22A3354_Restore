void sub_224DB2BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

id _DateTimeFormatRegularExpressionYearMonthDayTime()
{
  if (_DateTimeFormatRegularExpressionYearMonthDayTime_onceToken != -1)
    dispatch_once(&_DateTimeFormatRegularExpressionYearMonthDayTime_onceToken, &__block_literal_global_614);
  return (id)_DateTimeFormatRegularExpressionYearMonthDayTime_regex;
}

void sub_224DB7338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _RegularExpressionFromPattern(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  id v5;

  v5 = 0;
  objc_msgSend(MEMORY[0x24BDD1798], "regularExpressionWithPattern:options:error:", a1, 0, &v5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v5;
  if (!v1)
  {
    _HKInitializeLogging();
    v3 = *MEMORY[0x24BDD2FF8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x24BDD2FF8], OS_LOG_TYPE_ERROR))
      _RegularExpressionFromPattern_cold_1((uint64_t)v2, v3);
  }

  return v1;
}

uint64_t UIFoundationLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v1 = 0;
  if (!UIFoundationLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_24ECF55C0;
    v3 = 0;
    UIFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!UIFoundationLibraryCore_frameworkLibrary)
    UIFoundationLibrary_cold_1(&v1);
  return UIFoundationLibraryCore_frameworkLibrary;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;

  _os_log_debug_impl(a1, v5, OS_LOG_TYPE_DEBUG, a4, v4, 0xCu);
}

id OUTLINED_FUNCTION_1_0(uint64_t a1, void *a2)
{
  return a2;
}

void sub_224DBC77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

void sub_224DBCC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

id OUTLINED_FUNCTION_3(uint64_t a1, void *a2)
{
  return a2;
}

void sub_224DBD27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_2_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

id OUTLINED_FUNCTION_3_0(id a1)
{
  return a1;
}

void sub_224DC4DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_224DCA09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  id v59;
  void *v60;

  if (a2 == 1)
  {
    v59 = objc_begin_catch(exception_object);
    v60 = (void *)MEMORY[0x24BDD1540];
    objc_opt_class();
    objc_msgSend(v60, "hk_assignError:code:format:", a18, 3, CFSTR("%@ keypath %@ exception %@"));

    objc_end_catch();
    JUMPOUT(0x224DC9ABCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_224DCA8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_224DD1178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

uint64_t Meta.security.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Meta.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (!*v1)
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static Meta.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      v3 = swift_bridgeObjectRetain();
      v4 = sub_224DD6A64(v3, v2, (void (*)(_QWORD))type metadata accessor for Coding, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction6CodingV2eeoiySbAC_ACtFZ_0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v4 & 1) != 0)
        return 1;
    }
  }
  else if (!v2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_224DD5F9C()
{
  return 1;
}

uint64_t sub_224DD5FA4()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224DD5FE4()
{
  return sub_224F6851C();
}

uint64_t sub_224DD6008()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224DD6044()
{
  return 0x7974697275636573;
}

uint64_t sub_224DD605C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7974697275636573 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_224F683CC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_224DD60F0()
{
  return 0;
}

void sub_224DD60FC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_224DD6108()
{
  sub_224DDAB58();
  return sub_224F685B8();
}

uint64_t sub_224DD6130()
{
  sub_224DDAB58();
  return sub_224F685C4();
}

uint64_t Meta.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  sub_224DDABC0(0, &qword_2557E01D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - v6;
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DDAB58();
  sub_224F68594();
  v10[1] = v8;
  sub_224DDEA0C(0, &qword_2557E01E0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224DDAC3C(&qword_2557E01E8, &qword_2557E01F0, (uint64_t)&protocol conformance descriptor for Coding, MEMORY[0x24BEE12A0]);
  sub_224F68330();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Meta.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_224F68510();
  sub_224F68528();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_224DDA83C((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_224F6854C();
}

uint64_t Meta.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  sub_224DDABC0(0, &qword_2557E01F8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DDAB58();
  sub_224F6857C();
  if (!v2)
  {
    sub_224DDEA0C(0, &qword_2557E01E0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DDAC3C(&qword_2557E0200, &qword_2557E0208, (uint64_t)&protocol conformance descriptor for Coding, MEMORY[0x24BEE12D0]);
    sub_224F68294();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_224DD6484@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Meta.init(from:)(a1, a2);
}

uint64_t sub_224DD6498(_QWORD *a1)
{
  return Meta.encode(to:)(a1);
}

uint64_t sub_224DD64AC()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_224F68510();
  sub_224F68528();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_224DDA83C((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_224F6854C();
}

uint64_t sub_224DD651C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (!*v1)
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_224DD6588()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_224F68510();
  sub_224F68528();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_224DDA83C((uint64_t)v3, v1);
    swift_bridgeObjectRelease();
  }
  return sub_224F6854C();
}

uint64_t sub_224DD65F4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      v3 = swift_bridgeObjectRetain();
      v4 = sub_224DD6A64(v3, v2, (void (*)(_QWORD))type metadata accessor for Coding, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction6CodingV2eeoiySbAC_ACtFZ_0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v4 & 1) != 0)
        return 1;
    }
  }
  else if (!v2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_224DD6674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 48);
    for (i = (uint64_t *)(a2 + 48); ; i += 9)
    {
      v6 = *(v3 - 1);
      v7 = *v3;
      v8 = v3[1];
      v9 = v3[2];
      v10 = v3[3];
      v11 = v3[5];
      v39 = v3[6];
      v12 = *(i - 1);
      v13 = *i;
      v14 = i[1];
      v15 = i[2];
      v16 = i[3];
      v37 = v3[4];
      v38 = i[4];
      v18 = i[5];
      v17 = i[6];
      if (v6)
      {
        if (!v12)
          return 0;
        if (*(v3 - 2) != *(i - 2) || v6 != v12)
        {
          v35 = i[6];
          v36 = v3[2];
          v33 = v3[5];
          v34 = *v3;
          v19 = v3[3];
          v20 = i[3];
          v21 = *i;
          v22 = sub_224F683CC();
          v13 = v21;
          v11 = v33;
          v7 = v34;
          v16 = v20;
          v10 = v19;
          v17 = v35;
          v9 = v36;
          if ((v22 & 1) == 0)
            return 0;
        }
      }
      else if (v12)
      {
        return 0;
      }
      if (v8)
      {
        if (!v14)
          return 0;
        if (v7 != v13 || v8 != v14)
        {
          v23 = v11;
          v24 = v18;
          v25 = v10;
          v26 = v16;
          v27 = sub_224F683CC();
          v16 = v26;
          v10 = v25;
          v18 = v24;
          v11 = v23;
          if ((v27 & 1) == 0)
            return 0;
        }
      }
      else if (v14)
      {
        return 0;
      }
      if (v10)
      {
        if (!v16)
          return 0;
        if (v9 != v15 || v10 != v16)
        {
          v28 = v11;
          v29 = sub_224F683CC();
          v11 = v28;
          if ((v29 & 1) == 0)
            return 0;
        }
      }
      else if (v16)
      {
        return 0;
      }
      if (v11)
      {
        v30 = v39;
        if (!v18 || (v37 != v38 || v11 != v18) && (sub_224F683CC() & 1) == 0)
          return 0;
      }
      else
      {
        v30 = v39;
        if (v18)
          return 0;
      }
      if (v30)
      {
        if (!v17)
          return 0;
        swift_bridgeObjectRetain();
        v31 = swift_bridgeObjectRetain();
        v32 = sub_224DD6674(v31, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0)
          return 0;
      }
      else if (v17)
      {
        return 0;
      }
      v3 += 9;
      result = 1;
      if (!--v2)
        return result;
    }
  }
  return 1;
}

uint64_t sub_224DD68A0(uint64_t a1, uint64_t a2)
{
  return sub_224DD6A64(a1, a2, (void (*)(_QWORD))type metadata accessor for Extension, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction9ExtensionV2eeoiySbAC_ACtFZ_0);
}

BOOL sub_224DD68B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  BOOL v15;
  _OWORD v17[8];
  uint64_t v18;
  _OWORD v19[8];
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        v7 = *(_OWORD *)(v3 + 112);
        v19[6] = *(_OWORD *)(v3 + 96);
        v19[7] = v7;
        v20 = *(_QWORD *)(v3 + 128);
        v8 = *(_OWORD *)(v3 + 48);
        v19[2] = *(_OWORD *)(v3 + 32);
        v19[3] = v8;
        v9 = *(_OWORD *)(v3 + 80);
        v19[4] = *(_OWORD *)(v3 + 64);
        v19[5] = v9;
        v10 = *(_OWORD *)(v3 + 16);
        v19[0] = *(_OWORD *)v3;
        v19[1] = v10;
        v11 = *(_OWORD *)(v4 + 112);
        v17[6] = *(_OWORD *)(v4 + 96);
        v17[7] = v11;
        v18 = *(_QWORD *)(v4 + 128);
        v12 = *(_OWORD *)(v4 + 48);
        v17[2] = *(_OWORD *)(v4 + 32);
        v17[3] = v12;
        v13 = *(_OWORD *)(v4 + 80);
        v17[4] = *(_OWORD *)(v4 + 64);
        v17[5] = v13;
        v14 = *(_OWORD *)(v4 + 16);
        v17[0] = *(_OWORD *)v4;
        v17[1] = v14;
        v15 = _s23HealthRecordsExtraction5VCJWKV2eeoiySbAC_ACtFZ_0((uint64_t)v19, (uint64_t)v17);
        if (!v15)
          break;
        v5 = v6 - 1;
        v4 += 136;
        v3 += 136;
      }
      while (v6);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

uint64_t sub_224DD698C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_224F683CC(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_224F683CC() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_224DD6A50(uint64_t a1, uint64_t a2)
{
  return sub_224DD6A64(a1, a2, (void (*)(_QWORD))type metadata accessor for ModelsR4.HumanName, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction8ModelsR4V9HumanNameV2eeoiySbAE_AEtFZ_0);
}

uint64_t sub_224DD6A64(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v20;
  uint64_t v22;

  a3(0);
  v8 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v22 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14 == *(_QWORD *)(a2 + 16))
  {
    if (!v14 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v16 = *(_QWORD *)(v11 + 72);
      v17 = v14 - 1;
      do
      {
        sub_224DDB408(a1 + v15, (uint64_t)v13, (uint64_t (*)(_QWORD))a3);
        sub_224DDB408(a2 + v15, (uint64_t)v10, (uint64_t (*)(_QWORD))a3);
        v18 = a4(v13, v10);
        sub_224DDEAA0((uint64_t)v10, (uint64_t (*)(_QWORD))a3);
        sub_224DDEAA0((uint64_t)v13, (uint64_t (*)(_QWORD))a3);
        v20 = v17-- != 0;
        if ((v18 & 1) == 0)
          break;
        v15 += v16;
      }
      while (v20);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_224DD6BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 56);
    v4 = (uint64_t *)(a2 + 56);
    do
    {
      v5 = *(v3 - 2);
      v6 = *(v3 - 1);
      v7 = *v3;
      v8 = *(v4 - 2);
      v9 = *(v4 - 1);
      v10 = *v4;
      if (v5)
      {
        if (!v8)
          return 0;
        v11 = *(v3 - 3) == *(v4 - 3) && v5 == v8;
        if (!v11 && (sub_224F683CC() & 1) == 0)
          return 0;
      }
      else if (v8)
      {
        return 0;
      }
      if (v7)
      {
        if (!v10 || (v6 != v9 || v7 != v10) && (sub_224F683CC() & 1) == 0)
          return 0;
      }
      else if (v10)
      {
        return 0;
      }
      v3 += 4;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_224DD6C8C(uint64_t a1, uint64_t a2)
{
  return sub_224DD6A64(a1, a2, (void (*)(_QWORD))type metadata accessor for Identifier, (uint64_t (*)(char *, char *))static Identifier.== infix(_:_:));
}

BOOL sub_224DD6CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  BOOL v15;
  _OWORD v17[8];
  uint64_t v18;
  _OWORD v19[8];
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        v7 = *(_OWORD *)(v3 + 112);
        v19[6] = *(_OWORD *)(v3 + 96);
        v19[7] = v7;
        v20 = *(_QWORD *)(v3 + 128);
        v8 = *(_OWORD *)(v3 + 48);
        v19[2] = *(_OWORD *)(v3 + 32);
        v19[3] = v8;
        v9 = *(_OWORD *)(v3 + 80);
        v19[4] = *(_OWORD *)(v3 + 64);
        v19[5] = v9;
        v10 = *(_OWORD *)(v3 + 16);
        v19[0] = *(_OWORD *)v3;
        v19[1] = v10;
        v11 = *(_OWORD *)(v4 + 112);
        v17[6] = *(_OWORD *)(v4 + 96);
        v17[7] = v11;
        v18 = *(_QWORD *)(v4 + 128);
        v12 = *(_OWORD *)(v4 + 48);
        v17[2] = *(_OWORD *)(v4 + 32);
        v17[3] = v12;
        v13 = *(_OWORD *)(v4 + 80);
        v17[4] = *(_OWORD *)(v4 + 64);
        v17[5] = v13;
        v14 = *(_OWORD *)(v4 + 16);
        v17[0] = *(_OWORD *)v4;
        v17[1] = v14;
        v15 = _s23HealthRecordsExtraction7AddressV2eeoiySbAC_ACtFZ_0(v19, v17);
        if (!v15)
          break;
        v5 = v6 - 1;
        v4 += 136;
        v3 += 136;
      }
      while (v6);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

uint64_t sub_224DD6D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = type metadata accessor for Identifier();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v48 - v9;
  sub_224DDE904(0, (unint64_t *)&qword_2557E02C8, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  v12 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v48 - v13;
  v15 = type metadata accessor for ModelsR4.PatientLink(0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = a1;
  v23 = (uint64_t *)((char *)&v48 - v22);
  v24 = *(_QWORD *)(v21 + 16);
  if (v24 != *(_QWORD *)(a2 + 16))
    return 0;
  v52 = v12;
  v50 = v10;
  v57 = v5;
  if (!v24 || v21 == a2)
    return 1;
  v53 = v19;
  v54 = a2;
  v55 = v4;
  v56 = v21;
  v25 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v51 = *(_QWORD *)(v20 + 72);
  v49 = v7;
  v26 = v52;
  while (1)
  {
    sub_224DDB408(v56 + v25, (uint64_t)v23, type metadata accessor for ModelsR4.PatientLink);
    sub_224DDB408(a2 + v25, (uint64_t)v18, type metadata accessor for ModelsR4.PatientLink);
    v28 = v23[1];
    v29 = v18[1];
    if (v28)
    {
      if (!v29)
        goto LABEL_34;
      v30 = *v23 == *v18 && v28 == v29;
      if (!v30 && (sub_224F683CC() & 1) == 0)
        goto LABEL_34;
    }
    else if (v29)
    {
      goto LABEL_34;
    }
    v31 = v23[3];
    v32 = v18[3];
    if (v31)
    {
      if (!v32 || (v23[2] != v18[2] || v31 != v32) && (sub_224F683CC() & 1) == 0)
        goto LABEL_34;
    }
    else if (v32)
    {
      goto LABEL_34;
    }
    v33 = *(int *)(type metadata accessor for Reference() + 24);
    v34 = (uint64_t)v18 + v33;
    v35 = (uint64_t)&v14[*(int *)(v26 + 48)];
    sub_224DDB4B4((uint64_t)v23 + v33, (uint64_t)v14, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    sub_224DDB4B4(v34, v35, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
    v37 = v14;
    v38 = (uint64_t)v14;
    v39 = v55;
    if (v36(v37, 1, v55) != 1)
      break;
    if (v36((char *)v35, 1, v39) != 1)
      goto LABEL_33;
    v14 = (char *)v38;
    sub_224DDB50C(v38, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    a2 = v54;
LABEL_28:
    v43 = *(int *)(v53 + 20);
    v44 = *(_QWORD *)((char *)v23 + v43);
    v45 = *(_QWORD *)((char *)v23 + v43 + 8);
    v46 = (_QWORD *)((char *)v18 + v43);
    if (v44 == *v46 && v45 == v46[1])
    {
      sub_224DDEAA0((uint64_t)v18, type metadata accessor for ModelsR4.PatientLink);
      sub_224DDEAA0((uint64_t)v23, type metadata accessor for ModelsR4.PatientLink);
    }
    else
    {
      v27 = sub_224F683CC();
      sub_224DDEAA0((uint64_t)v18, type metadata accessor for ModelsR4.PatientLink);
      sub_224DDEAA0((uint64_t)v23, type metadata accessor for ModelsR4.PatientLink);
      if ((v27 & 1) == 0)
        return 0;
    }
    v25 += v51;
    if (!--v24)
      return 1;
  }
  v40 = (uint64_t)v50;
  sub_224DDB4B4(v38, (uint64_t)v50, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  if (v36((char *)v35, 1, v39) != 1)
  {
    v41 = (uint64_t)v49;
    sub_224DDEADC(v35, (uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    v42 = static Identifier.== infix(_:_:)(v40, v41);
    sub_224DDEAA0(v41, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    sub_224DDEAA0(v40, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    sub_224DDB50C(v38, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    a2 = v54;
    v26 = v52;
    v14 = (char *)v38;
    if ((v42 & 1) == 0)
      goto LABEL_34;
    goto LABEL_28;
  }
  sub_224DDEAA0(v40, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
LABEL_33:
  sub_224DDEA64(v38, (unint64_t *)&qword_2557E02C8, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
LABEL_34:
  sub_224DDEAA0((uint64_t)v18, type metadata accessor for ModelsR4.PatientLink);
  sub_224DDEAA0((uint64_t)v23, type metadata accessor for ModelsR4.PatientLink);
  return 0;
}

uint64_t sub_224DD7200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for Identifier();
  v44 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v41 = (uint64_t)&v35 - v8;
  sub_224DDE904(0, (unint64_t *)&qword_2557E02C8, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  v43 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v35 - v10;
  v42 = type metadata accessor for Reference();
  v12 = MEMORY[0x24BDAC7A8](v42);
  v14 = (uint64_t *)((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v17 = (uint64_t *)((char *)&v35 - v16);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v18 || a1 == a2)
    return 1;
  v36 = v6;
  v40 = v4;
  v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = *(_QWORD *)(v15 + 72);
  v37 = a2;
  v38 = a1;
  v39 = v14;
  while (1)
  {
    sub_224DDB408(a1 + v19, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
    sub_224DDB408(a2 + v19, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
    v21 = v17[1];
    v22 = v14[1];
    if (v21)
    {
      if (!v22)
        goto LABEL_31;
      v23 = *v17 == *v14 && v21 == v22;
      if (!v23 && (sub_224F683CC() & 1) == 0)
        goto LABEL_31;
    }
    else if (v22)
    {
      goto LABEL_31;
    }
    v24 = v17[3];
    v25 = v14[3];
    if (v24)
    {
      if (!v25 || (v17[2] != v14[2] || v24 != v25) && (sub_224F683CC() & 1) == 0)
        goto LABEL_31;
    }
    else if (v25)
    {
      goto LABEL_31;
    }
    v26 = *(int *)(v42 + 24);
    v27 = (uint64_t)v14 + v26;
    v28 = (uint64_t)&v11[*(int *)(v43 + 48)];
    sub_224DDB4B4((uint64_t)v17 + v26, (uint64_t)v11, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    sub_224DDB4B4(v27, v28, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    v30 = v40;
    if (v29(v11, 1, v40) != 1)
      break;
    if (v29((char *)v28, 1, v30) != 1)
      goto LABEL_30;
    sub_224DDB50C((uint64_t)v11, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    a2 = v37;
    a1 = v38;
    v14 = v39;
LABEL_5:
    sub_224DDEAA0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
    sub_224DDEAA0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
    v19 += v20;
    if (!--v18)
      return 1;
  }
  v31 = v41;
  sub_224DDB4B4((uint64_t)v11, v41, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  if (v29((char *)v28, 1, v30) != 1)
  {
    v32 = (uint64_t)v36;
    sub_224DDEADC(v28, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    v33 = static Identifier.== infix(_:_:)(v31, v32);
    sub_224DDEAA0(v32, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    sub_224DDEAA0(v31, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    sub_224DDB50C((uint64_t)v11, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    a2 = v37;
    a1 = v38;
    v14 = v39;
    if ((v33 & 1) == 0)
      goto LABEL_31;
    goto LABEL_5;
  }
  sub_224DDEAA0(v31, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
LABEL_30:
  sub_224DDEA64((uint64_t)v11, (unint64_t *)&qword_2557E02C8, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  v14 = v39;
LABEL_31:
  sub_224DDEAA0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224DDEAA0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  return 0;
}

uint64_t sub_224DD761C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  char *v51;
  char v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v4 = sub_224F675D4();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v86 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v85 = (uint64_t)&v69 - v9;
  sub_224DDE904(0, (unint64_t *)&qword_2557E02B0, (unint64_t *)&qword_2557E02A8, v5);
  v84 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v69 - v11;
  v83 = type metadata accessor for Coding();
  v13 = MEMORY[0x24BDAC7A8](v83);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v69 - v17;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v19 || a1 == a2)
    return 1;
  v77 = v7;
  v81 = v4;
  v20 = 0;
  v21 = a1 + 32;
  v22 = a2 + 32;
  v74 = v19;
  v75 = v16;
  while (1)
  {
    v24 = (_QWORD *)(v21 + 24 * v20);
    v25 = v24[1];
    v26 = v24[2];
    v27 = (_QWORD *)(v22 + 24 * v20);
    v28 = v27[1];
    v29 = v27[2];
    if (v25)
    {
      if (!v28)
        return 0;
      if (*v24 != *v27 || v25 != v28)
      {
        v31 = v24[1];
        v32 = v22;
        v33 = sub_224F683CC();
        v25 = v31;
        v22 = v32;
        v19 = v74;
        v16 = v75;
        if ((v33 & 1) == 0)
          return 0;
      }
    }
    else if (v28)
    {
      return 0;
    }
    if (!v26)
    {
      if (v29)
        return 0;
      goto LABEL_7;
    }
    if (!v29)
      return 0;
    v34 = *(_QWORD *)(v26 + 16);
    if (v34 != *(_QWORD *)(v29 + 16))
      return 0;
    if (v34 && v26 != v29)
      break;
LABEL_7:
    ++v20;
    result = 1;
    if (v20 == v19)
      return result;
  }
  v79 = *(_QWORD *)(v26 + 16);
  v69 = v22;
  v70 = v21;
  v71 = v20;
  v35 = v26;
  v36 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v73 = v28;
  v37 = v16;
  v38 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v78 = *(_QWORD *)(v37 + 72);
  v72 = v38;
  swift_bridgeObjectRetain();
  v82 = v35;
  swift_bridgeObjectRetain();
  v39 = 0;
  v76 = v18;
  v80 = v29;
  while (1)
  {
    result = sub_224DDB408(v82 + v36, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    if (v39 >= *(_QWORD *)(v29 + 16))
      break;
    sub_224DDB408(v29 + v36, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    v40 = (uint64_t)&v12[*(int *)(v84 + 48)];
    v41 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
    sub_224DDB4B4((uint64_t)v18, (uint64_t)v12, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    sub_224DDB4B4((uint64_t)v15, v40, (unint64_t *)&qword_2557E02A8, v41);
    v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
    v43 = v81;
    if (v42((uint64_t)v12, 1, v81) == 1)
    {
      if (v42(v40, 1, v43) != 1)
        goto LABEL_53;
      sub_224DDB50C((uint64_t)v12, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v44 = (int *)v83;
    }
    else
    {
      sub_224DDB4B4((uint64_t)v12, v85, (unint64_t *)&qword_2557E02A8, v41);
      if (v42(v40, 1, v43) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v43);
LABEL_53:
        sub_224DDEA64((uint64_t)v12, (unint64_t *)&qword_2557E02B0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
LABEL_54:
        sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        return 0;
      }
      v45 = v85;
      v46 = v86;
      v47 = v15;
      v48 = v12;
      v49 = v41;
      v50 = v43;
      v51 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v77, v40, v50);
      sub_224DDACD4((unint64_t *)&qword_2557E02B8, v49, MEMORY[0x24BDCDB00]);
      v52 = sub_224F67B50();
      v53 = *(void (**)(char *, uint64_t))(v46 + 8);
      v12 = v48;
      v15 = v47;
      v18 = v76;
      v53(v51, v50);
      v53((char *)v45, v50);
      sub_224DDB50C((uint64_t)v12, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v44 = (int *)v83;
      if ((v52 & 1) == 0)
        goto LABEL_54;
    }
    v54 = v44[5];
    v55 = &v18[v54];
    v56 = *(_QWORD *)&v18[v54 + 8];
    v57 = &v15[v54];
    v58 = *((_QWORD *)v57 + 1);
    if (v56)
    {
      if (!v58 || (*(_QWORD *)v55 != *(_QWORD *)v57 || v56 != v58) && (sub_224F683CC() & 1) == 0)
        goto LABEL_54;
    }
    else if (v58)
    {
      goto LABEL_54;
    }
    v59 = v44[6];
    v60 = &v18[v59];
    v61 = *(_QWORD *)&v18[v59 + 8];
    v62 = &v15[v59];
    v63 = *((_QWORD *)v62 + 1);
    if (v61)
    {
      if (!v63 || (*(_QWORD *)v60 != *(_QWORD *)v62 || v61 != v63) && (sub_224F683CC() & 1) == 0)
        goto LABEL_54;
    }
    else if (v63)
    {
      goto LABEL_54;
    }
    v64 = v44[7];
    v65 = &v18[v64];
    v66 = *(_QWORD *)&v18[v64 + 8];
    v67 = &v15[v64];
    v68 = *((_QWORD *)v67 + 1);
    if (v66)
    {
      if (!v68 || (*(_QWORD *)v65 != *(_QWORD *)v67 || v66 != v68) && (sub_224F683CC() & 1) == 0)
        goto LABEL_54;
    }
    else if (v68)
    {
      goto LABEL_54;
    }
    ++v39;
    sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    v36 += v78;
    v29 = v80;
    if (v79 == v39)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v19 = v74;
      v16 = v75;
      v21 = v70;
      v20 = v71;
      v22 = v69;
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_224DD7C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;

  v4 = sub_224F675D4();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v89 = (uint64_t)&v74 - v10;
  sub_224DDE904(0, (unint64_t *)&qword_2557E02B0, (unint64_t *)&qword_2557E02A8, v5);
  v90 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v93 = (uint64_t)&v74 - v12;
  v94 = (int *)type metadata accessor for Coding();
  v13 = *((_QWORD *)v94 - 1);
  v14 = MEMORY[0x24BDAC7A8](v94);
  v95 = (uint64_t)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v91 = (char *)&v74 - v16;
  v17 = type metadata accessor for ModelsR4.DocumentReferenceContent(0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v96 = (uint64_t)&v74 - v22;
  v23 = *(_QWORD *)(a1 + 16);
  if (v23 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v23 || a1 == a2)
    return 1;
  v78 = v13;
  v79 = v8;
  v84 = v4;
  v24 = 0;
  v25 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v87 = a2 + v25;
  v88 = a1 + v25;
  v86 = *(_QWORD *)(v21 + 72);
  v85 = v23;
  while (1)
  {
    v27 = v86 * v24;
    v28 = v96;
    sub_224DDB408(v88 + v86 * v24, v96, type metadata accessor for ModelsR4.DocumentReferenceContent);
    sub_224DDB408(v87 + v27, (uint64_t)v20, type metadata accessor for ModelsR4.DocumentReferenceContent);
    if ((static Attachment.== infix(_:_:)(v28, v20) & 1) == 0)
      goto LABEL_73;
    v29 = *(int *)(v17 + 20);
    v30 = *(_QWORD *)(v96 + v29);
    v31 = *(_QWORD *)(v96 + v29 + 8);
    v92 = *(_QWORD *)(v96 + v29 + 16);
    v32 = (uint64_t *)&v20[v29];
    v34 = *v32;
    v33 = v32[1];
    v35 = v32[2];
    if (v31 != 1)
      break;
    if (v33 != 1)
      goto LABEL_63;
LABEL_6:
    ++v24;
    sub_224DDEAA0((uint64_t)v20, type metadata accessor for ModelsR4.DocumentReferenceContent);
    sub_224DDEAA0(v96, type metadata accessor for ModelsR4.DocumentReferenceContent);
    result = 1;
    if (v24 == v85)
      return result;
  }
  if (v33 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_63:
    sub_224DDB44C(v34, v33);
    sub_224DDB480(v30, v31);
    v72 = v34;
    v73 = v33;
LABEL_72:
    sub_224DDB480(v72, v73);
LABEL_73:
    sub_224DDEAA0((uint64_t)v20, type metadata accessor for ModelsR4.DocumentReferenceContent);
    sub_224DDEAA0(v96, type metadata accessor for ModelsR4.DocumentReferenceContent);
    return 0;
  }
  if (v31)
  {
    if (!v33 || (v30 == v34 ? (v36 = v31 == v33) : (v36 = 0), !v36 && (sub_224F683CC() & 1) == 0))
    {
LABEL_61:
      v70 = v30;
      v71 = v31;
      goto LABEL_65;
    }
  }
  else if (v33)
  {
    goto LABEL_61;
  }
  v37 = v92;
  if (!v92)
  {
    sub_224DDB44C(v30, v31);
    swift_bridgeObjectRetain();
    if (v35)
      goto LABEL_71;
    goto LABEL_58;
  }
  if (!v35)
  {
    v70 = v30;
    v71 = v31;
LABEL_65:
    sub_224DDB44C(v70, v71);
    swift_bridgeObjectRetain();
    goto LABEL_70;
  }
  v38 = *(_QWORD *)(v92 + 16);
  if (v38 != *(_QWORD *)(v35 + 16))
  {
    sub_224DDB44C(v30, v31);
    swift_bridgeObjectRetain();
LABEL_70:
    swift_bridgeObjectRetain();
LABEL_71:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v72 = v30;
    v73 = v31;
    goto LABEL_72;
  }
  if (!v38)
  {
    sub_224DDB44C(v30, v31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_58:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDB480(v30, v31);
    goto LABEL_6;
  }
  v77 = v17;
  v39 = v78;
  v40 = *(unsigned __int8 *)(v78 + 80);
  sub_224DDB44C(v30, v31);
  if (v37 == v35)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_57:
    v17 = v77;
    goto LABEL_58;
  }
  v81 = v38;
  v41 = (v40 + 32) & ~v40;
  v75 = v30;
  v76 = v31;
  sub_224DDB44C(v30, v31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v42 = 0;
  v80 = *(_QWORD *)(v39 + 72);
  v43 = (uint64_t)v91;
  v44 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v82 = v35;
  v83 = v20;
  while (1)
  {
    result = sub_224DDB408(v92 + v41, v43, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    if (v42 >= *(_QWORD *)(v35 + 16))
      break;
    v45 = v95;
    sub_224DDB408(v35 + v41, v95, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    v46 = v93;
    v47 = v93 + *(int *)(v90 + 48);
    sub_224DDB4B4(v43, v93, (unint64_t *)&qword_2557E02A8, v44);
    sub_224DDB4B4(v45, v47, (unint64_t *)&qword_2557E02A8, v44);
    v48 = v6;
    v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v50 = v84;
    if (v49(v46, 1, v84) == 1)
    {
      if (v49(v47, 1, v50) != 1)
        goto LABEL_67;
      v44 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
      sub_224DDB50C(v93, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v6 = v48;
      v35 = v82;
      v20 = v83;
      v43 = (uint64_t)v91;
    }
    else
    {
      sub_224DDB4B4(v93, v89, (unint64_t *)&qword_2557E02A8, v44);
      if (v49(v47, 1, v50) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v89, v50);
LABEL_67:
        sub_224DDEA64(v93, (unint64_t *)&qword_2557E02B0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        v20 = v83;
        v43 = (uint64_t)v91;
LABEL_68:
        sub_224DDEAA0(v95, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        sub_224DDEAA0(v43, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = v76;
        v30 = v75;
        goto LABEL_71;
      }
      v51 = v89;
      v52 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v79, v47, v50);
      sub_224DDACD4((unint64_t *)&qword_2557E02B8, v44, MEMORY[0x24BDCDB00]);
      v53 = sub_224F67B50();
      v54 = *(void (**)(char *, uint64_t))(v48 + 8);
      v54(v52, v50);
      v54((char *)v51, v50);
      v6 = v48;
      sub_224DDB50C(v93, (unint64_t *)&qword_2557E02A8, v44);
      v35 = v82;
      v20 = v83;
      v43 = (uint64_t)v91;
      if ((v53 & 1) == 0)
        goto LABEL_68;
    }
    v55 = v94[5];
    v56 = (_QWORD *)(v43 + v55);
    v57 = *(_QWORD *)(v43 + v55 + 8);
    v58 = (_QWORD *)(v95 + v55);
    v59 = v58[1];
    if (v57)
    {
      if (!v59 || (*v56 != *v58 || v57 != v59) && (sub_224F683CC() & 1) == 0)
        goto LABEL_68;
    }
    else if (v59)
    {
      goto LABEL_68;
    }
    v60 = v94[6];
    v61 = (_QWORD *)(v43 + v60);
    v62 = *(_QWORD *)(v43 + v60 + 8);
    v63 = (_QWORD *)(v95 + v60);
    v64 = v63[1];
    if (v62)
    {
      if (!v64 || (*v61 != *v63 || v62 != v64) && (sub_224F683CC() & 1) == 0)
        goto LABEL_68;
    }
    else if (v64)
    {
      goto LABEL_68;
    }
    v65 = v94[7];
    v66 = (_QWORD *)(v43 + v65);
    v67 = *(_QWORD *)(v43 + v65 + 8);
    v68 = (_QWORD *)(v95 + v65);
    v69 = v68[1];
    if (v67)
    {
      if (!v69 || (*v66 != *v68 || v67 != v69) && (sub_224F683CC() & 1) == 0)
        goto LABEL_68;
    }
    else if (v69)
    {
      goto LABEL_68;
    }
    ++v42;
    sub_224DDEAA0(v95, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    sub_224DDEAA0(v43, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
    v41 += v80;
    if (v81 == v42)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = v76;
      v30 = v75;
      goto LABEL_57;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_224DD84D4(uint64_t a1, uint64_t a2)
{
  return sub_224DD6A64(a1, a2, (void (*)(_QWORD))type metadata accessor for Attachment, (uint64_t (*)(char *, char *))static Attachment.== infix(_:_:));
}

uint64_t sub_224DD84E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = type metadata accessor for FHIRDateTime();
  v4 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v35 - v8;
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v11 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v35 - v12;
  v14 = type metadata accessor for Annotation();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15);
  v21 = (uint64_t *)((char *)&v35 - v20);
  v22 = *(_QWORD *)(a1 + 16);
  if (v22 == *(_QWORD *)(a2 + 16))
  {
    v36 = v6;
    v37 = v9;
    v43 = v4;
    if (!v22 || a1 == a2)
      return 1;
    v41 = v18;
    v42 = v11;
    v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v38 = *(_QWORD *)(v19 + 72);
    v24 = v43;
    v39 = a2;
    v40 = a1;
    while (1)
    {
      sub_224DDB408(a1 + v23, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
      sub_224DDB408(a2 + v23, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
      v25 = *v21 == *v17 && v21[1] == v17[1];
      if (!v25 && (sub_224F683CC() & 1) == 0)
        break;
      v26 = *(int *)(v41 + 20);
      v27 = (uint64_t)v17 + v26;
      v28 = (uint64_t)&v13[*(int *)(v42 + 48)];
      sub_224DDB4B4((uint64_t)v21 + v26, (uint64_t)v13, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDB4B4(v27, v28, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
      v30 = v44;
      if (v29((uint64_t)v13, 1, v44) == 1)
      {
        if (v29(v28, 1, v30) != 1)
          goto LABEL_19;
        sub_224DDB50C((uint64_t)v13, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v24 = v43;
      }
      else
      {
        v31 = (uint64_t)v37;
        sub_224DDB4B4((uint64_t)v13, (uint64_t)v37, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        if (v29(v28, 1, v30) == 1)
        {
          sub_224DDEAA0(v31, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
LABEL_19:
          sub_224DDEA64((uint64_t)v13, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          break;
        }
        v32 = (uint64_t)v36;
        sub_224DDEADC(v28, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v33 = static FHIRDateTime.== infix(_:_:)(v31, v32);
        sub_224DDEAA0(v31, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224DDEAA0(v32, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224DDB50C((uint64_t)v13, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v24 = v43;
        if ((v33 & 1) == 0)
          break;
      }
      sub_224DDEAA0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
      sub_224DDEAA0((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
      a2 = v39;
      v23 += v38;
      --v22;
      a1 = v40;
      if (!v22)
        return 1;
    }
    sub_224DDEAA0((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
    sub_224DDEAA0((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
  }
  return 0;
}

BOOL sub_224DD889C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  BOOL v17;
  BOOL v19;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v5 = 0;
      v6 = v2 - 1;
      do
      {
        v7 = *(_BYTE *)(a1 + v5 + 40);
        v8 = *(_QWORD *)(a1 + v5 + 64);
        v9 = *(_BYTE *)(a1 + v5 + 72);
        v10 = *(_QWORD *)(a1 + v5 + 112);
        v29 = *(_QWORD *)(a1 + v5 + 32);
        v30 = v7;
        v31 = *(_OWORD *)(a1 + v5 + 48);
        v32 = v8;
        v33 = v9;
        v11 = *(_OWORD *)(a1 + v5 + 96);
        v34 = *(_OWORD *)(a1 + v5 + 80);
        v35 = v11;
        v36 = v10;
        v12 = *(_BYTE *)(a2 + v5 + 40);
        v13 = *(_QWORD *)(a2 + v5 + 64);
        v14 = *(_BYTE *)(a2 + v5 + 72);
        v15 = *(_QWORD *)(a2 + v5 + 112);
        v21 = *(_QWORD *)(a2 + v5 + 32);
        v22 = v12;
        v23 = *(_OWORD *)(a2 + v5 + 48);
        v24 = v13;
        v25 = v14;
        v16 = *(_OWORD *)(a2 + v5 + 96);
        v26 = *(_OWORD *)(a2 + v5 + 80);
        v27 = v16;
        v28 = v15;
        v17 = _s23HealthRecordsExtraction8ModelsR4V20ImmunizationProtocolV2eeoiySbAE_AEtFZ_0((uint64_t)&v29, (uint64_t)&v21);
        v19 = v6-- != 0;
        if (!v17)
          break;
        v5 += 88;
      }
      while (v19);
    }
  }
  else
  {
    return 0;
  }
  return v17;
}

uint64_t sub_224DD89A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;

  v4 = type metadata accessor for Identifier();
  v76 = *(_QWORD *)(v4 - 8);
  v77 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v70 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v71 = (uint64_t)&v69 - v8;
  sub_224DDE904(0, (unint64_t *)&qword_2557E02C8, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  v78 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v69 - v10;
  v12 = type metadata accessor for Reference();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t (*)(uint64_t, uint64_t))v6;
  v17 = a2;
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v16);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v69 - v19;
  sub_224DDE904(0, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v22 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v69 - v23;
  v25 = type metadata accessor for ModelsR4.ImmunizationPerformer(0);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v32 = (char *)&v69 - v31;
  v33 = *(_QWORD *)(a1 + 16);
  if (v33 != *(_QWORD *)(v17 + 16))
    return 0;
  v72 = v13;
  v83 = v15;
  v84 = v20;
  if (!v33 || v30 == v17)
    return 1;
  v82 = v22;
  v34 = (uint64_t)v32;
  v35 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v73 = *(_QWORD *)(v29 + 72);
  v36 = &qword_2557E0308;
  v69 = v11;
  v80 = v28;
  v81 = v12;
  v37 = v72;
  v74 = v30;
  v75 = v17;
  v79 = v32;
  while (1)
  {
    sub_224DDB408(v30 + v35, v34, type metadata accessor for ModelsR4.ImmunizationPerformer);
    sub_224DDB408(v17 + v35, (uint64_t)v28, type metadata accessor for ModelsR4.ImmunizationPerformer);
    v38 = (uint64_t)v28;
    v39 = (uint64_t)&v24[*(int *)(v82 + 48)];
    sub_224DDB4B4(v34, (uint64_t)v24, v36, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_224DDB4B4(v38, v39, v36, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    v41 = v81;
    v42 = v36;
    if (v40(v24, 1, v81) != 1)
      break;
    if (v40((char *)v39, 1, v41) != 1)
      goto LABEL_31;
LABEL_6:
    sub_224DDB50C((uint64_t)v24, v42, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    v28 = v80;
    sub_224DDEAA0((uint64_t)v80, type metadata accessor for ModelsR4.ImmunizationPerformer);
    v34 = (uint64_t)v79;
    sub_224DDEAA0((uint64_t)v79, type metadata accessor for ModelsR4.ImmunizationPerformer);
    v30 = v74;
    v35 += v73;
    --v33;
    v17 = v75;
    v36 = v42;
    if (!v33)
      return 1;
  }
  v43 = v84;
  sub_224DDB4B4((uint64_t)v24, (uint64_t)v84, v36, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v44 = v40((char *)v39, 1, v41);
  v45 = v78;
  if (v44 == 1)
  {
    sub_224DDEAA0((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
LABEL_31:
    sub_224DDEA64((uint64_t)v24, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    goto LABEL_35;
  }
  v46 = v39;
  v47 = v83;
  sub_224DDEADC(v46, (uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  v48 = v43[1];
  v49 = v47[1];
  if (v48)
  {
    if (!v49)
      goto LABEL_34;
    if (*v43 != *v47 || v48 != v49)
    {
      v50 = sub_224F683CC();
      v43 = v84;
      if ((v50 & 1) == 0)
        goto LABEL_34;
    }
  }
  else if (v49)
  {
    goto LABEL_34;
  }
  v51 = v43[3];
  v52 = v47[3];
  if (v51)
  {
    if (!v52)
      goto LABEL_34;
    if (v43[2] != v47[2] || v51 != v52)
    {
      v53 = sub_224F683CC();
      v43 = v84;
      if ((v53 & 1) == 0)
        goto LABEL_34;
    }
  }
  else if (v52)
  {
    goto LABEL_34;
  }
  v54 = *(int *)(v41 + 24);
  v55 = (uint64_t)v47 + v54;
  v56 = (uint64_t)v69;
  v57 = (uint64_t)&v69[*(int *)(v45 + 48)];
  sub_224DDB4B4((uint64_t)v43 + v54, (uint64_t)v69, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  sub_224DDB4B4(v55, v57, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  v58 = v77;
  v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  if (v59(v56, 1, v77) == 1)
  {
    if (v59(v57, 1, v58) != 1)
      goto LABEL_33;
    sub_224DDB50C(v56, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    v47 = v83;
    v43 = v84;
    goto LABEL_28;
  }
  v60 = v42;
  v61 = v56;
  v62 = v56;
  v63 = v71;
  sub_224DDB4B4(v61, v71, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  if (v59(v57, 1, v58) != 1)
  {
    v64 = v57;
    v65 = v70;
    sub_224DDEADC(v64, v70, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    v66 = static Identifier.== infix(_:_:)(v63, v65);
    sub_224DDEAA0(v65, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    sub_224DDEAA0(v63, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
    sub_224DDB50C(v62, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
    v47 = v83;
    v43 = v84;
    v42 = v60;
    if ((v66 & 1) == 0)
      goto LABEL_34;
LABEL_28:
    sub_224DDEAA0((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
    sub_224DDEAA0((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
    v37 = v72;
    goto LABEL_6;
  }
  sub_224DDEAA0(v63, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
  v56 = v62;
LABEL_33:
  sub_224DDEA64(v56, (unint64_t *)&qword_2557E02C8, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  v47 = v83;
  v43 = v84;
LABEL_34:
  sub_224DDEAA0((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224DDEAA0((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224DDB50C((uint64_t)v24, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
LABEL_35:
  v68 = (uint64_t)v79;
  sub_224DDEAA0((uint64_t)v80, type metadata accessor for ModelsR4.ImmunizationPerformer);
  sub_224DDEAA0(v68, type metadata accessor for ModelsR4.ImmunizationPerformer);
  return 0;
}

uint64_t sub_224DD9044(uint64_t a1, uint64_t a2)
{
  return sub_224DD6A64(a1, a2, (void (*)(_QWORD))type metadata accessor for ReferenceRange, (uint64_t (*)(char *, char *))static ReferenceRange.== infix(_:_:));
}

uint64_t sub_224DD9058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    v3 = a2;
    if (a1 != a2)
    {
      v4 = 0;
      v14 = a1;
      while (1)
      {
        v5 = *(_QWORD *)(a1 + v4 + 48);
        v6 = *(_QWORD *)(a1 + v4 + 56);
        v8 = *(_QWORD *)(a1 + v4 + 64);
        v7 = *(_QWORD *)(a1 + v4 + 72);
        v30 = *(_QWORD *)(a1 + v4 + 88);
        v31 = *(_QWORD *)(a1 + v4 + 80);
        v26 = *(_QWORD *)(a1 + v4 + 104);
        v27 = *(_QWORD *)(a1 + v4 + 96);
        v22 = *(_QWORD *)(a1 + v4 + 120);
        v23 = *(_QWORD *)(a1 + v4 + 112);
        v18 = *(_QWORD *)(a1 + v4 + 136);
        v19 = *(_QWORD *)(a1 + v4 + 128);
        v9 = *(_QWORD *)(v3 + v4 + 48);
        v10 = *(_QWORD *)(v3 + v4 + 56);
        v12 = *(_QWORD *)(v3 + v4 + 64);
        v11 = *(_QWORD *)(v3 + v4 + 72);
        v28 = *(_QWORD *)(v3 + v4 + 80);
        v29 = *(_QWORD *)(v3 + v4 + 88);
        v24 = *(_QWORD *)(v3 + v4 + 104);
        v25 = *(_QWORD *)(v3 + v4 + 96);
        v20 = *(_QWORD *)(v3 + v4 + 120);
        v21 = *(_QWORD *)(v3 + v4 + 112);
        v16 = *(_QWORD *)(v3 + v4 + 136);
        v17 = *(_QWORD *)(v3 + v4 + 128);
        if ((*(_QWORD *)(a1 + v4 + 32) != *(_QWORD *)(v3 + v4 + 32)
           || *(_QWORD *)(a1 + v4 + 40) != *(_QWORD *)(v3 + v4 + 40))
          && (sub_224F683CC() & 1) == 0)
        {
          break;
        }
        if ((v5 != v9 || v6 != v10) && (sub_224F683CC() & 1) == 0
          || (v8 != v12 || v7 != v11) && (sub_224F683CC() & 1) == 0
          || (v31 != v28 || v30 != v29) && (sub_224F683CC() & 1) == 0
          || (v27 != v25 || v26 != v24) && (sub_224F683CC() & 1) == 0
          || (v23 != v21 || v22 != v20) && (sub_224F683CC() & 1) == 0
          || (v19 != v17 || v18 != v16) && (sub_224F683CC() & 1) == 0)
        {
          break;
        }
        v4 += 112;
        --v2;
        a1 = v14;
        v3 = a2;
        if (!v2)
          return 1;
      }
      return 0;
    }
  }
  return 1;
}

uint64_t sub_224DD9268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  _OWORD v19[10];
  _OWORD v20[10];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v3 = (_OWORD *)(a1 + 32);
      v4 = (_OWORD *)(a2 + 32);
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        v7 = v3[7];
        v20[6] = v3[6];
        v20[7] = v7;
        v8 = v3[9];
        v20[8] = v3[8];
        v20[9] = v8;
        v9 = v3[3];
        v20[2] = v3[2];
        v20[3] = v9;
        v10 = v3[5];
        v20[4] = v3[4];
        v20[5] = v10;
        v11 = v3[1];
        v20[0] = *v3;
        v20[1] = v11;
        v12 = v4[7];
        v19[6] = v4[6];
        v19[7] = v12;
        v13 = v4[9];
        v19[8] = v4[8];
        v19[9] = v13;
        v14 = v4[3];
        v19[2] = v4[2];
        v19[3] = v14;
        v15 = v4[5];
        v19[4] = v4[4];
        v19[5] = v15;
        v16 = v4[1];
        v19[0] = *v4;
        v19[1] = v16;
        v17 = _s23HealthRecordsExtraction28SignedClinicalDataEUDCCEntryV10LaboratoryV2eeoiySbAE_AEtFZ_0(v20, v19);
        if ((v17 & 1) == 0)
          break;
        v5 = v6 - 1;
        v4 += 10;
        v3 += 10;
      }
      while (v6);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_224DD9340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a1 + 88);
    for (i = (uint64_t *)(a2 + 88); ; i += 18)
    {
      v5 = *(v3 - 5);
      v6 = *(v3 - 4);
      v7 = *(v3 - 3);
      v38 = *(v3 - 1);
      v39 = *(v3 - 2);
      v35 = v3[1];
      v36 = *v3;
      v31 = v3[3];
      v32 = v3[2];
      v27 = v3[5];
      v28 = v3[4];
      v24 = v3[6];
      v21 = v3[8];
      v22 = v3[7];
      v17 = v3[10];
      v18 = v3[9];
      v8 = *(i - 5);
      v9 = *(i - 4);
      v11 = *(i - 3);
      v10 = *(i - 2);
      v37 = *(i - 1);
      v34 = *i;
      v33 = i[1];
      v29 = i[3];
      v30 = i[2];
      v25 = i[5];
      v26 = i[4];
      v23 = i[6];
      v19 = i[8];
      v20 = i[7];
      v15 = i[10];
      v16 = i[9];
      if ((*(v3 - 7) != *(i - 7) || *(v3 - 6) != *(i - 6)) && (sub_224F683CC() & 1) == 0)
        break;
      if (v5 == v8 && v6 == v9)
      {
        if (v7 != v11)
          return 0;
      }
      else
      {
        v12 = sub_224F683CC();
        result = 0;
        if ((v12 & 1) == 0 || v7 != v11)
          return result;
      }
      if ((v39 != v10 || v38 != v37) && (sub_224F683CC() & 1) == 0
        || (v36 != v34 || v35 != v33) && (sub_224F683CC() & 1) == 0
        || (v32 != v30 || v31 != v29) && (sub_224F683CC() & 1) == 0)
      {
        break;
      }
      if (v28 == v26 && v27 == v25)
      {
        if (v24 != v23)
          return 0;
      }
      else
      {
        v14 = sub_224F683CC();
        result = 0;
        if ((v14 & 1) == 0 || v24 != v23)
          return result;
      }
      if ((v22 != v20 || v21 != v19) && (sub_224F683CC() & 1) == 0
        || (v18 != v16 || v17 != v15) && (sub_224F683CC() & 1) == 0)
      {
        break;
      }
      v3 += 18;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_224DD95E4(uint64_t a1, uint64_t a2)
{
  return sub_224DD973C(a1, a2, type metadata accessor for ModelsR4.ResourceProxy, &qword_2557E0330, &qword_2557E0338, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t (*)(_BYTE *, _BYTE *))_s23HealthRecordsExtraction8ModelsR4V13ResourceProxyO2eeoiySbAE_AEtFZ_0);
}

BOOL sub_224DD9650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  v3 = (unsigned __int8 *)(a1 + 33);
  v4 = (unsigned __int8 *)(a2 + 33);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_224DD96BC(uint64_t a1, uint64_t a2)
{
  return sub_224DD6A64(a1, a2, (void (*)(_QWORD))type metadata accessor for ModelsDSTU2.HumanName, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction11ModelsDSTU2V9HumanNameV2eeoiySbAE_AEtFZ_0);
}

uint64_t sub_224DD96D0(uint64_t a1, uint64_t a2)
{
  return sub_224DD973C(a1, a2, type metadata accessor for ModelsDSTU2.ResourceProxy, &qword_2557E02E0, &qword_2557E02E8, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry, (uint64_t (*)(_BYTE *, _BYTE *))static ModelsDSTU2.ResourceProxy.== infix(_:_:));
}

uint64_t sub_224DD973C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, unint64_t *a5, uint64_t (*a6)(_QWORD), uint64_t (*a7)(_BYTE *, _BYTE *))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  unint64_t *v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  _BYTE v47[16];
  unint64_t *v48;
  uint64_t (*v49)(_QWORD);
  uint64_t (*v50)(_BYTE *, _BYTE *);
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  _BYTE *v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v14 = a3(0);
  v57 = *(_QWORD *)(v14 - 8);
  v58 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v54 = &v47[-v15];
  sub_224DDEA0C(0, a4, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v47[-v17];
  sub_224DDE904(0, a5, a4, a3);
  v56 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v47[-v20];
  v63 = a6(0);
  v22 = MEMORY[0x24BDAC7A8](v63);
  v24 = &v47[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v22);
  v60 = &v47[-v26];
  v61 = a1;
  v27 = *(_QWORD *)(a1 + 16);
  v62 = a2;
  if (v27 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v27 || v61 == v62)
    return 1;
  v55 = a3;
  v50 = a7;
  v48 = a5;
  v51 = 0;
  v28 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v52 = *(_QWORD *)(v25 + 72);
  v53 = a4;
  v29 = v60;
  v49 = a6;
  v59 = v27;
  sub_224DDB408(v61 + v28, (uint64_t)v60, a6);
  sub_224DDB408(v62 + v28, (uint64_t)v24, a6);
  v30 = v29[1];
  v31 = v24[1];
  if (v30)
  {
    if (!v31)
      goto LABEL_22;
    v32 = *v29 == *v24 && v30 == v31;
    if (!v32 && (sub_224F683CC() & 1) == 0)
      goto LABEL_22;
  }
  else if (v31)
  {
    goto LABEL_22;
  }
  v33 = *(int *)(v63 + 20);
  v34 = (uint64_t)v29 + v33;
  v35 = v24;
  v36 = (uint64_t)v24 + v33;
  v37 = v55;
  v38 = (uint64_t)&v21[*(int *)(v56 + 48)];
  v39 = v53;
  sub_224DDB4B4(v34, (uint64_t)v21, v53, v55);
  sub_224DDB4B4(v36, v38, v39, v37);
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  v41 = v21;
  v42 = (uint64_t)v21;
  v43 = v58;
  if (v40((uint64_t)v41, 1, v58) == 1)
  {
    if (v40(v38, 1, v43) == 1)
    {
      sub_224DDB50C(v42, v39, v55);
      v29 = v60;
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  sub_224DDB4B4(v42, (uint64_t)v18, v39, v37);
  if (v40(v38, 1, v43) == 1)
  {
    sub_224DDEAA0((uint64_t)v18, v37);
LABEL_21:
    sub_224DDEA64(v42, v48, v39, v55);
    v24 = v35;
    v29 = v60;
    goto LABEL_22;
  }
  v44 = v54;
  sub_224DDEADC(v38, (uint64_t)v54, v37);
  v45 = v50(v18, v44);
  sub_224DDEAA0((uint64_t)v44, v37);
  sub_224DDEAA0((uint64_t)v18, v37);
  sub_224DDB50C(v42, v39, v37);
  v24 = v35;
  v29 = v60;
  if ((v45 & 1) != 0)
LABEL_18:
    __asm { BR              X10 }
LABEL_22:
  sub_224DDEAA0((uint64_t)v24, a6);
  sub_224DDEAA0((uint64_t)v29, a6);
  return 0;
}

uint64_t sub_224DD9E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  _BYTE *i;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (char *)(a2 + 48);
    for (i = (_BYTE *)(a1 + 48); *((_QWORD *)i - 2) == *((_QWORD *)v3 - 2); i += 24)
    {
      v5 = *v3;
      if ((*i & 1) != 0)
      {
        if (!*v3)
          return 0;
      }
      else
      {
        if (*((_QWORD *)i - 1) != *((_QWORD *)v3 - 1))
          v5 = 1;
        if ((v5 & 1) != 0)
          return 0;
      }
      v3 += 24;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_224DD9ED8(uint64_t a1, uint64_t a2)
{
  return sub_224DD6A64(a1, a2, (void (*)(_QWORD))type metadata accessor for Coding, (uint64_t (*)(char *, char *))_s23HealthRecordsExtraction6CodingV2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_224DD9EEC()
{
  sub_224DDACD4(&qword_2557E0258, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A844);
  return sub_224F684BC();
}

uint64_t sub_224DD9F2C()
{
  sub_224DDACD4(&qword_2557E0258, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A844);
  return sub_224F684B0();
}

uint64_t sub_224DD9F70()
{
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  return sub_224F674E4();
}

id sub_224DD9FB0()
{
  id *v0;

  return *v0;
}

uint64_t sub_224DD9FB8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_224DD9FC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_224F67B80();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_224DD9FE8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_224DD9FF0()
{
  return sub_224F68084();
}

void sub_224DDA008(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_224DDA014@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_224DDA020@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_224DDA034@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_224DDA048@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_224DDA05C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_224DDA08C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_224DDA0B8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_224DDA0DC(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_224DDA0F0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_224DDA104(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_224DDA118@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_224DDA12C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_224DDA140(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_224DDA154(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_224DDA168()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_224DDA178(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL sub_224DDA18C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_224DDA1A0(uint64_t a1, uint64_t a2)
{
  return sub_224DDA6C8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_224DDA1B8(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_224F67B68();
  *a2 = 0;
  return result;
}

uint64_t sub_224DDA22C(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_224F67B74();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_224DDA2A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_224F67B80();
  v2 = sub_224F67B5C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_224DDA2E8(uint64_t a1, uint64_t a2)
{
  return sub_224DDA6C8(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_224DDA2FC()
{
  return sub_224F67B80();
}

uint64_t sub_224DDA30C()
{
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  return sub_224F67520();
}

uint64_t sub_224DDA34C()
{
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  return sub_224F674FC();
}

uint64_t sub_224DDA38C(void *a1)
{
  id v2;

  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  v2 = a1;
  return sub_224F674F0();
}

uint64_t sub_224DDA3F0()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_224F67F40();

  return v2;
}

uint64_t sub_224DDA424()
{
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  return sub_224F67514();
}

uint64_t sub_224DDA474()
{
  sub_224F68510();
  sub_224F67B20();
  return sub_224F6854C();
}

_QWORD *sub_224DDA4D0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_224DDA4E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_224DDEE58(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_224DDA520()
{
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  return sub_224F67508();
}

uint64_t sub_224DDA57C()
{
  sub_224DDACD4(&qword_2557E0400, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_224F6AFA4);
  sub_224DDACD4(&qword_2557E0408, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_224F6AF44);
  return sub_224F68234();
}

uint64_t sub_224DDA600@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_224F67B5C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_224DDA644()
{
  sub_224DDACD4(&qword_2557E03F0, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_224F6B150);
  sub_224DDACD4(&qword_2557E03F8, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_224F6B0A4);
  return sub_224F68234();
}

uint64_t sub_224DDA6C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_224F67B80();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_224DDA704()
{
  sub_224F67B80();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224DDA744()
{
  uint64_t v0;

  sub_224F67B80();
  sub_224F68510();
  sub_224F67C34();
  v0 = sub_224F6854C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_224DDA7B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_224F67B80();
  v2 = v1;
  if (v0 == sub_224F67B80() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_224F683CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_224DDA83C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = sub_224F675D4();
  v3 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8]();
  v17 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v17 - v6;
  v8 = (int *)type metadata accessor for Coding();
  v9 = *((_QWORD *)v8 - 1);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v12)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v19 = *(_QWORD *)(v9 + 72);
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
    v18 = v3;
    do
    {
      sub_224DDB408(v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      sub_224DDB4B4((uint64_t)v11, (uint64_t)v7, (unint64_t *)&qword_2557E02A8, v15);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v20) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v16 = v17;
        (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v17, v7, v20);
        sub_224F68528();
        sub_224DDACD4(&qword_2557E02F0, v15, MEMORY[0x24BDCDAF0]);
        sub_224F67B20();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v16, v20);
      }
      if (*(_QWORD *)&v11[v8[5] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      if (*(_QWORD *)&v11[v8[6] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      if (*(_QWORD *)&v11[v8[7] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      v3 = v18;
      v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
      result = sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
      v14 += v19;
      --v12;
    }
    while (v12);
  }
  return result;
}

unint64_t sub_224DDAB58()
{
  unint64_t result;

  result = qword_2557E01D8;
  if (!qword_2557E01D8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6A998, &type metadata for Meta.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E01D8);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void sub_224DDABC0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224DDAB58();
    v7 = a3(a1, &type metadata for Meta.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_224DDAC3C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_224DDEA0C(255, &qword_2557E01E0, (uint64_t (*)(uint64_t))type metadata accessor for Coding, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v10 = v9;
    v11 = sub_224DDACD4(a2, (uint64_t (*)(uint64_t))type metadata accessor for Coding, a3);
    result = MEMORY[0x22768ED24](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_224DDACD4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22768ED24](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_224DDAD14(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224DDAD48();
  a1[2] = sub_224DDAD8C();
  result = sub_224DDADD0();
  a1[3] = result;
  return result;
}

unint64_t sub_224DDAD48()
{
  unint64_t result;

  result = qword_2557E0210;
  if (!qword_2557E0210)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Meta, &type metadata for Meta);
    atomic_store(result, (unint64_t *)&qword_2557E0210);
  }
  return result;
}

unint64_t sub_224DDAD8C()
{
  unint64_t result;

  result = qword_2557E0218;
  if (!qword_2557E0218)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Meta, &type metadata for Meta);
    atomic_store(result, (unint64_t *)&qword_2557E0218);
  }
  return result;
}

unint64_t sub_224DDADD0()
{
  unint64_t result;

  result = qword_2557E0220;
  if (!qword_2557E0220)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Meta, &type metadata for Meta);
    atomic_store(result, (unint64_t *)&qword_2557E0220);
  }
  return result;
}

unint64_t sub_224DDAE18()
{
  unint64_t result;

  result = qword_2557E0228;
  if (!qword_2557E0228)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Meta, &type metadata for Meta);
    atomic_store(result, (unint64_t *)&qword_2557E0228);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Meta(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Meta()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for Meta(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for Meta(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Meta(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Meta(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Meta()
{
  return &type metadata for Meta;
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_224DDAFD8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_224DDAFF8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0230);
}

void type metadata accessor for HDHRExtractionError(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0238);
}

uint64_t getEnumTagSinglePayload for Meta.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for Meta.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_224DDB0E0 + 4 * byte_224F6A530[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_224DDB100 + 4 * byte_224F6A535[v4]))();
}

_BYTE *sub_224DDB0E0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_224DDB100(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224DDB108(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224DDB110(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224DDB118(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224DDB120(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_224DDB12C()
{
  return 0;
}

ValueMetadata *type metadata accessor for Meta.CodingKeys()
{
  return &type metadata for Meta.CodingKeys;
}

unint64_t sub_224DDB14C()
{
  unint64_t result;

  result = qword_2557E0240;
  if (!qword_2557E0240)
  {
    result = MEMORY[0x22768ED24](&unk_224F6A734, &type metadata for Meta.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0240);
  }
  return result;
}

uint64_t sub_224DDB190()
{
  return sub_224DDACD4(&qword_2557E0248, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A75C);
}

uint64_t sub_224DDB1BC()
{
  return sub_224DDACD4(&qword_2557E0250, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A788);
}

uint64_t sub_224DDB1E8()
{
  return sub_224DDACD4(&qword_2557E0258, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A844);
}

uint64_t sub_224DDB214()
{
  return sub_224DDACD4(&qword_2557E0260, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A810);
}

uint64_t sub_224DDB240()
{
  return sub_224DDACD4(&qword_2557E0268, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A7CC);
}

uint64_t sub_224DDB26C()
{
  return sub_224DDACD4(&qword_2557E0270, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_224F6A930);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0368);
}

uint64_t sub_224DDB2AC()
{
  return sub_224DDACD4(&qword_2557E0278, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_224F6A8F4);
}

unint64_t sub_224DDB2DC()
{
  unint64_t result;

  result = qword_2557E0280;
  if (!qword_2557E0280)
  {
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2557E0280);
  }
  return result;
}

uint64_t sub_224DDB320()
{
  return sub_224DDACD4(&qword_2557E0288, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_224F6A96C);
}

uint64_t sub_224DDB34C()
{
  return sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
}

unint64_t sub_224DDB37C()
{
  unint64_t result;

  result = qword_2557E0298;
  if (!qword_2557E0298)
  {
    result = MEMORY[0x22768ED24](&unk_224F6A6A4, &type metadata for Meta.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0298);
  }
  return result;
}

unint64_t sub_224DDB3C4()
{
  unint64_t result;

  result = qword_2557E02A0;
  if (!qword_2557E02A0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6A6CC, &type metadata for Meta.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E02A0);
  }
  return result;
}

uint64_t sub_224DDB408(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_224DDB44C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_224DDB480(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_224DDB4B4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_224DDEA0C(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_224DDB50C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_224DDEA0C(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_224DDB550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v4)
  {
    v6 = (_QWORD *)(a2 + 48);
    do
    {
      v7 = v6[1];
      v8 = v6[3];
      v9 = v6[5];
      v10 = v6[6];
      if (*(v6 - 1))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (v7)
          goto LABEL_7;
      }
      else
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v7)
        {
LABEL_7:
          sub_224F68528();
          swift_bridgeObjectRetain();
          sub_224F67C34();
          swift_bridgeObjectRelease();
          if (v8)
            goto LABEL_8;
          goto LABEL_13;
        }
      }
      sub_224F68528();
      if (v8)
      {
LABEL_8:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (v9)
          goto LABEL_9;
        goto LABEL_14;
      }
LABEL_13:
      sub_224F68528();
      if (v9)
      {
LABEL_9:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (v10)
          goto LABEL_15;
        goto LABEL_3;
      }
LABEL_14:
      sub_224F68528();
      if (v10)
      {
LABEL_15:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDB550(a1, v10);
        swift_bridgeObjectRelease_n();
        goto LABEL_4;
      }
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRelease();
LABEL_4:
      v6 += 9;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_224DDB75C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for Attachment();
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0310, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - v9;
  v11 = sub_224F675D4();
  v43 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v38 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v13, v6);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v36 - v15;
  v17 = (int *)type metadata accessor for Extension();
  v18 = *((_QWORD *)v17 - 1);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (uint64_t *)((char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v21)
  {
    v23 = a2 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    v42 = *(_QWORD *)(v18 + 72);
    v40 = v11;
    v41 = v10;
    v37 = v20;
    while (1)
    {
      sub_224DDB408(v23, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      v25 = *v20;
      if (*v20)
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDB75C(a1, v25);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      v26 = v43;
      v27 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
      sub_224DDB4B4((uint64_t)v20 + v17[5], (uint64_t)v16, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v16, 1, v11) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v28 = v38;
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v38, v16, v11);
        sub_224F68528();
        v20 = v37;
        sub_224DDACD4(&qword_2557E02F0, v27, MEMORY[0x24BDCDAF0]);
        sub_224F67B20();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v11);
      }
      if (*(_QWORD *)((char *)v20 + v17[6] + 8))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      if (*((_BYTE *)v20 + v17[7] + 8) == 1)
      {
        sub_224F68528();
      }
      else
      {
        sub_224F68528();
        sub_224F68540();
      }
      if (*(_QWORD *)((char *)v20 + v17[8] + 8))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      sub_224DF2764();
      v29 = (_QWORD *)((char *)v20 + v17[10]);
      v30 = v29[1];
      if (v30 != 1)
        break;
      sub_224F68528();
LABEL_28:
      v11 = v40;
      v35 = (uint64_t)v41;
      sub_224DDB4B4((uint64_t)v20 + v17[11], (uint64_t)v41, &qword_2557E0310, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v45) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v24 = v39;
        sub_224DDEADC(v35, v39, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
        sub_224F68528();
        Attachment.hash(into:)();
        sub_224DDEAA0(v24, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
      }
      result = sub_224DDEAA0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Extension);
      v23 += v42;
      if (!--v21)
        return result;
    }
    v31 = *v29;
    v32 = v29[2];
    sub_224F68528();
    if (v30)
    {
      sub_224F68528();
      sub_224DDB44C(v31, v30);
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v32)
      {
LABEL_24:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDA83C(a1, v32);
        swift_bridgeObjectRelease();
        v33 = v31;
        v34 = v30;
LABEL_27:
        sub_224DDB480(v33, v34);
        goto LABEL_28;
      }
    }
    else
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      if (v32)
        goto LABEL_24;
    }
    sub_224F68528();
    v33 = v31;
    v34 = v30;
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_224DDBCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = sub_224F67874();
  v4 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  v48 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v40 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0318, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v39 - v9;
  v10 = type metadata accessor for FHIRDateTime();
  v52 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02D0, v13, v6);
  MEMORY[0x24BDAC7A8](v14);
  v51 = (uint64_t)&v39 - v15;
  v50 = type metadata accessor for Annotation();
  v16 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v19)
  {
    v21 = a2 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v22 = *(_QWORD *)(v16 + 72);
    v49 = v10;
    v45 = v22;
    do
    {
      sub_224DDB408(v21, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
      sub_224F67C34();
      v23 = v51;
      sub_224DDB4B4((uint64_t)&v18[*(int *)(v50 + 20)], v51, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v23, 1, v10) == 1)
      {
        sub_224F68528();
      }
      else
      {
        sub_224DDEADC(v23, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224F68528();
        sub_224F68528();
        v24 = v12[17];
        v25 = v12[19];
        sub_224F6851C();
        if ((v24 & 1) == 0)
          sub_224F68528();
        v10 = v49;
        sub_224F68528();
        if ((v25 & 1) == 0)
          sub_224F68528();
        v26 = v48;
        sub_224F68528();
        v27 = *((_QWORD *)v12 + 7);
        if (v27 == 1)
        {
          sub_224F68528();
          v28 = (uint64_t)v46;
          v29 = v47;
        }
        else
        {
          v30 = *((_QWORD *)v12 + 3);
          v31 = *((_QWORD *)v12 + 4);
          v32 = *((_QWORD *)v12 + 5);
          v41 = *((_QWORD *)v12 + 6);
          v42 = v30 >> 8;
          v43 = v30 >> 16;
          v44 = HIDWORD(v32);
          sub_224F68528();
          sub_224F68528();
          sub_224F68528();
          sub_224F68528();
          sub_224F67FA0();
          sub_224F68528();
          if (v27)
          {
            swift_bridgeObjectRetain();
            v33 = v41;
            sub_224F67C34();
            sub_224DDE9F8(v30, v31, v32, v33, v27);
          }
          v29 = v47;
          v26 = v48;
          v28 = (uint64_t)v46;
          v10 = v49;
        }
        v34 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510];
        sub_224DDB4B4((uint64_t)&v12[*(int *)(v10 + 28)], v28, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1, v29) == 1)
        {
          sub_224F68528();
        }
        else
        {
          v35 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
          v36 = v26;
          v37 = v40;
          v35(v40, v28, v29);
          sub_224F68528();
          sub_224DDACD4(&qword_2557E0320, v34, MEMORY[0x24BDCF530]);
          sub_224F67B20();
          v38 = *(void (**)(char *, uint64_t))(v36 + 8);
          v10 = v49;
          v38(v37, v29);
        }
        if (*(_QWORD *)&v12[*(int *)(v10 + 32) + 8])
        {
          sub_224F68528();
          swift_bridgeObjectRetain();
          sub_224F67C34();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_224F68528();
        }
        v22 = v45;
        sub_224DDEAA0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      }
      result = sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Annotation);
      v21 += v22;
      --v19;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_224DDC1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t (*v25)(uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = sub_224F675D4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v35 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v28 - v8;
  v10 = (int *)type metadata accessor for Coding();
  v30 = *((_QWORD *)v10 - 1);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v13)
  {
    v15 = 0;
    v32 = a2 + 32;
    v37 = v4;
    v29 = v13;
    do
    {
      v16 = v32 + 24 * v15;
      v17 = *(_QWORD *)(v16 + 8);
      v34 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        sub_224F68528();
        v18 = v34;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (v18)
          goto LABEL_7;
      }
      else
      {
        sub_224F68528();
        v27 = v34;
        swift_bridgeObjectRetain();
        if (v27)
        {
LABEL_7:
          v33 = v15;
          sub_224F68528();
          sub_224F6851C();
          v19 = *(_QWORD *)(v34 + 16);
          if (v19)
          {
            v31 = v17;
            v20 = v30;
            v21 = v34 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
            swift_bridgeObjectRetain();
            v36 = *(_QWORD *)(v20 + 72);
            v22 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
            v23 = v37;
            do
            {
              sub_224DDB408(v21, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
              sub_224DDB4B4((uint64_t)v12, (uint64_t)v9, (unint64_t *)&qword_2557E02A8, v22);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v9, 1, v3) == 1)
              {
                sub_224F68528();
              }
              else
              {
                v24 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
                v25 = v22;
                v26 = v35;
                v24(v35, v9, v3);
                sub_224F68528();
                sub_224DDACD4(&qword_2557E02F0, v25, MEMORY[0x24BDCDAF0]);
                sub_224F67B20();
                (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v3);
              }
              if (*(_QWORD *)&v12[v10[5] + 8])
              {
                sub_224F68528();
                swift_bridgeObjectRetain();
                sub_224F67C34();
                swift_bridgeObjectRelease();
              }
              else
              {
                sub_224F68528();
              }
              if (*(_QWORD *)&v12[v10[6] + 8])
              {
                sub_224F68528();
                swift_bridgeObjectRetain();
                sub_224F67C34();
                swift_bridgeObjectRelease();
              }
              else
              {
                sub_224F68528();
              }
              if (*(_QWORD *)&v12[v10[7] + 8])
              {
                sub_224F68528();
                swift_bridgeObjectRetain();
                sub_224F67C34();
                swift_bridgeObjectRelease();
              }
              else
              {
                sub_224F68528();
              }
              v23 = v37;
              v22 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
              sub_224DDEAA0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
              v21 += v36;
              --v19;
            }
            while (v19);
            swift_bridgeObjectRelease_n();
            v13 = v29;
            v15 = v33;
          }
          else
          {
            swift_bridgeObjectRelease();
            v15 = v33;
          }
          goto LABEL_4;
        }
      }
      sub_224F68528();
      swift_bridgeObjectRelease();
LABEL_4:
      result = swift_bridgeObjectRelease();
      ++v15;
    }
    while (v15 != v13);
  }
  return result;
}

uint64_t sub_224DDC604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for ModelsR4.PatientLink(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v8)
  {
    v10 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_224DDB408(v10, (uint64_t)v7, type metadata accessor for ModelsR4.PatientLink);
      if (*((_QWORD *)v7 + 1))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)v7 + 3))
          goto LABEL_9;
      }
      else
      {
        sub_224F68528();
        if (!*((_QWORD *)v7 + 3))
        {
LABEL_9:
          sub_224F68528();
          goto LABEL_4;
        }
      }
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
LABEL_4:
      type metadata accessor for Reference();
      sub_224DF235C(a1);
      sub_224F67C34();
      result = sub_224DDEAA0((uint64_t)v7, type metadata accessor for ModelsR4.PatientLink);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_224DDC7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = sub_224F675D4();
  v4 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v27 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - v8;
  v30 = type metadata accessor for Identifier();
  v10 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v12 = (char **)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(_QWORD *)(a2 + 16);
  v32 = a1;
  result = sub_224F6851C();
  if (v13)
  {
    v15 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v29 = *(_QWORD *)(v10 + 72);
    v28 = v4;
    v16 = v31;
    while (1)
    {
      sub_224DDB408(v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      if (v12[1])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      v17 = v12[3];
      if (v17 != 1)
        break;
      sub_224F68528();
LABEL_16:
      v23 = v28;
      v24 = v30;
      v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
      sub_224DDB4B4((uint64_t)v12 + *(int *)(v30 + 24), (uint64_t)v9, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v9, 1, v31) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v26 = v27;
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v27, v9, v16);
        sub_224F68528();
        sub_224DDACD4(&qword_2557E02F0, v25, MEMORY[0x24BDCDAF0]);
        sub_224F67B20();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v16);
      }
      if (*(_QWORD *)((char *)v12 + *(int *)(v24 + 28) + 8))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      result = sub_224DDEAA0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v15 += v29;
      if (!--v13)
        return result;
    }
    v18 = v12[2];
    v19 = v12[4];
    sub_224F68528();
    if (v17)
    {
      sub_224F68528();
      sub_224DDB44C(v18, v17);
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v19)
      {
LABEL_12:
        v20 = v32;
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDA83C(v20, v19);
        swift_bridgeObjectRelease();
        v21 = v18;
        v22 = v17;
LABEL_15:
        sub_224DDB480(v21, v22);
        goto LABEL_16;
      }
    }
    else
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      if (v19)
        goto LABEL_12;
    }
    sub_224F68528();
    v21 = v18;
    v22 = v17;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_224DDCB50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v3)
  {
    v5 = (uint64_t *)(a2 + 56);
    do
    {
      v6 = *v5;
      if (*(v5 - 2))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (v6)
          goto LABEL_9;
      }
      else
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        if (v6)
        {
LABEL_9:
          sub_224F68528();
          swift_bridgeObjectRetain();
          sub_224F67C34();
          swift_bridgeObjectRelease_n();
          goto LABEL_4;
        }
      }
      sub_224F68528();
      swift_bridgeObjectRelease();
LABEL_4:
      v5 += 4;
      result = swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_224DDCC54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for Reference();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v8)
  {
    v10 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_224DDB408(v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      if (*((_QWORD *)v7 + 1))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)v7 + 3))
          goto LABEL_9;
      }
      else
      {
        sub_224F68528();
        if (!*((_QWORD *)v7 + 3))
        {
LABEL_9:
          sub_224F68528();
          goto LABEL_4;
        }
      }
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
LABEL_4:
      sub_224DF235C(a1);
      result = sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_224DDCDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  int *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = sub_224F675D4();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v24 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - v7;
  v27 = type metadata accessor for ModelsR4.DocumentReferenceContent(0);
  v9 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  v29 = v12;
  if (v12)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v25 = *(_QWORD *)(v9 + 72);
    v15 = v28;
    do
    {
      sub_224DDB408(v14, (uint64_t)v11, type metadata accessor for ModelsR4.DocumentReferenceContent);
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)v11 + 3))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      v16 = v26;
      v17 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
      v18 = (int *)type metadata accessor for Attachment();
      sub_224DDB4B4((uint64_t)&v11[v18[6]], (uint64_t)v8, (unint64_t *)&qword_2557E02A8, v17);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v28) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v19 = v24;
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v24, v8, v15);
        sub_224F68528();
        sub_224DDACD4(&qword_2557E02F0, v17, MEMORY[0x24BDCDAF0]);
        sub_224F67B20();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      }
      if (v11[v18[7] + 4] == 1)
      {
        sub_224F68528();
      }
      else
      {
        sub_224F68528();
        sub_224F68534();
      }
      if (*(_QWORD *)&v11[v18[8] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      if (*(_QWORD *)&v11[v18[9] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      sub_224DF2AC8();
      if (*(_QWORD *)&v11[v18[11] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      v20 = (uint64_t *)&v11[*(int *)(v27 + 20)];
      v21 = v20[1];
      if (v21 == 1)
      {
        sub_224F68528();
      }
      else
      {
        v22 = *v20;
        v23 = v20[2];
        sub_224F68528();
        if (v21)
        {
          sub_224F68528();
          sub_224DDB44C(v22, v21);
          swift_bridgeObjectRetain();
          sub_224F67C34();
          swift_bridgeObjectRelease();
          if (!v23)
            goto LABEL_28;
        }
        else
        {
          sub_224F68528();
          swift_bridgeObjectRetain();
          if (!v23)
          {
LABEL_28:
            sub_224F68528();
            sub_224DDB480(v22, v21);
            goto LABEL_4;
          }
        }
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDA83C(a1, v23);
        swift_bridgeObjectRelease();
        sub_224DDB480(v22, v21);
      }
LABEL_4:
      result = sub_224DDEAA0((uint64_t)v11, type metadata accessor for ModelsR4.DocumentReferenceContent);
      v14 += v25;
      --v29;
    }
    while (v29);
  }
  return result;
}

uint64_t sub_224DDD2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = sub_224F675D4();
  v22 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v19 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - v7;
  v9 = (int *)type metadata accessor for Attachment();
  v10 = *((_QWORD *)v9 - 1);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v13)
  {
    v15 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v21 = *(_QWORD *)(v10 + 72);
    do
    {
      sub_224DDB408(v15, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)v12 + 3))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      v16 = v22;
      v17 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0];
      sub_224DDB4B4((uint64_t)&v12[v9[6]], (uint64_t)v8, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v3) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v18 = v19;
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v8, v3);
        v20 = v15;
        sub_224F68528();
        v15 = v20;
        sub_224DDACD4(&qword_2557E02F0, v17, MEMORY[0x24BDCDAF0]);
        sub_224F67B20();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v3);
      }
      if (v12[v9[7] + 4] == 1)
      {
        sub_224F68528();
      }
      else
      {
        sub_224F68528();
        sub_224F68534();
      }
      if (*(_QWORD *)&v12[v9[8] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      if (*(_QWORD *)&v12[v9[9] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      sub_224DF2AC8();
      if (*(_QWORD *)&v12[v9[11] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      result = sub_224DDEAA0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
      v15 += v21;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_224DDD6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = type metadata accessor for Reference();
  v4 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E0308, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - v9;
  v11 = type metadata accessor for ModelsR4.ImmunizationPerformer(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v15)
  {
    v17 = a2 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v18 = *(_QWORD *)(v12 + 72);
    v19 = v4;
    while (1)
    {
      sub_224DDB408(v17, (uint64_t)v14, type metadata accessor for ModelsR4.ImmunizationPerformer);
      sub_224DDB4B4((uint64_t)v14, (uint64_t)v10, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v20) != 1)
        break;
      sub_224F68528();
LABEL_4:
      result = sub_224DDEAA0((uint64_t)v14, type metadata accessor for ModelsR4.ImmunizationPerformer);
      v17 += v18;
      if (!--v15)
        return result;
    }
    sub_224DDEADC((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
    sub_224F68528();
    if (*((_QWORD *)v6 + 1))
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)v6 + 3))
      {
LABEL_8:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
LABEL_11:
        v4 = v19;
        sub_224DF235C(a1);
        sub_224DDEAA0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
        goto LABEL_4;
      }
    }
    else
    {
      sub_224F68528();
      if (*((_QWORD *)v6 + 3))
        goto LABEL_8;
    }
    sub_224F68528();
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_224DDD944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v4)
  {
    v6 = (uint64_t *)(a2 + 56);
    do
    {
      v7 = *v6;
      v8 = v6[4];
      v10 = v6[5];
      v9 = v6[6];
      v11 = v6[7];
      v12 = *((unsigned __int8 *)v6 + 16);
      if (*((_BYTE *)v6 - 16) == 1)
      {
        sub_224F68528();
        if (v7)
          goto LABEL_7;
      }
      else
      {
        sub_224F68528();
        sub_224F6851C();
        if (v7)
        {
LABEL_7:
          sub_224F68528();
          swift_bridgeObjectRetain();
          sub_224F67C34();
          swift_bridgeObjectRelease();
          if (v12)
            goto LABEL_8;
          goto LABEL_13;
        }
      }
      sub_224F68528();
      if (v12)
      {
LABEL_8:
        sub_224F68528();
        if (v8)
          goto LABEL_9;
        goto LABEL_14;
      }
LABEL_13:
      sub_224F68528();
      sub_224F6851C();
      if (v8)
      {
LABEL_9:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (v9 == 1)
          goto LABEL_3;
        goto LABEL_15;
      }
LABEL_14:
      sub_224F68528();
      if (v9 == 1)
      {
LABEL_3:
        result = sub_224F68528();
        goto LABEL_4;
      }
LABEL_15:
      sub_224F68528();
      if (v9)
      {
        sub_224F68528();
        sub_224DDB44C(v10, v9);
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (!v11)
          goto LABEL_19;
      }
      else
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        if (!v11)
        {
LABEL_19:
          sub_224F68528();
          result = sub_224DDB480(v10, v9);
          goto LABEL_4;
        }
      }
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v11);
      swift_bridgeObjectRelease();
      result = sub_224DDB480(v10, v9);
LABEL_4:
      v6 += 11;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_224DDDB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;

  v70 = type metadata accessor for Range();
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v69 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E02F8, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v64 = (uint64_t)&v59 - v8;
  v72 = type metadata accessor for Quantity();
  v66 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v68 = (uint64_t)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E0300, v10, v5);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v60 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v61 = (uint64_t)&v59 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v59 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v65 = (uint64_t)&v59 - v19;
  v20 = (int *)type metadata accessor for ReferenceRange();
  v21 = *((_QWORD *)v20 - 1);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v24)
  {
    v26 = a2 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v63 = *(_QWORD *)(v21 + 72);
    v62 = v18;
    do
    {
      sub_224DDB408(v26, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
      v27 = v65;
      sub_224DDB4B4((uint64_t)v23, v65, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
      v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
      v29 = v28(v27, 1, v72);
      v71 = v28;
      if (v29 == 1)
      {
        sub_224F68528();
      }
      else
      {
        v30 = v68;
        sub_224DDEADC(v27, v68, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
        sub_224F68528();
        Quantity.hash(into:)();
        v31 = v30;
        v28 = v71;
        sub_224DDEAA0(v31, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      }
      sub_224DDB4B4((uint64_t)&v23[v20[5]], (uint64_t)v18, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
      if (v28((uint64_t)v18, 1, v72) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v32 = v68;
        sub_224DDEADC((uint64_t)v18, v68, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
        sub_224F68528();
        Quantity.hash(into:)();
        sub_224DDEAA0(v32, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      }
      v33 = (uint64_t *)&v23[v20[6]];
      v34 = v33[1];
      if (v34 == 1)
      {
        sub_224F68528();
        goto LABEL_19;
      }
      v35 = *v33;
      v36 = v33[2];
      sub_224F68528();
      if (v34)
      {
        sub_224F68528();
        sub_224DDB44C(v35, v34);
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (!v36)
          goto LABEL_17;
      }
      else
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        if (!v36)
        {
LABEL_17:
          sub_224F68528();
          v37 = v35;
          v38 = v34;
          goto LABEL_18;
        }
      }
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v36);
      swift_bridgeObjectRelease();
      v37 = v35;
      v38 = v34;
LABEL_18:
      sub_224DDB480(v37, v38);
LABEL_19:
      v39 = (uint64_t *)&v23[v20[7]];
      v40 = v39[1];
      if (v40 == 1)
      {
        sub_224F68528();
        goto LABEL_27;
      }
      v41 = *v39;
      v42 = v39[2];
      sub_224F68528();
      if (v40)
      {
        sub_224F68528();
        sub_224DDB44C(v41, v40);
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        if (!v42)
          goto LABEL_25;
      }
      else
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        if (!v42)
        {
LABEL_25:
          sub_224F68528();
          v43 = v41;
          v44 = v40;
          goto LABEL_26;
        }
      }
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v42);
      swift_bridgeObjectRelease();
      v43 = v41;
      v44 = v40;
LABEL_26:
      sub_224DDB480(v43, v44);
LABEL_27:
      v45 = (uint64_t *)&v23[v20[8]];
      v46 = v45[1];
      if (v46 != 1)
      {
        v47 = *v45;
        v48 = v45[2];
        sub_224F68528();
        if (v46)
        {
          sub_224F68528();
          sub_224DDB44C(v47, v46);
          swift_bridgeObjectRetain();
          sub_224F67C34();
          swift_bridgeObjectRelease();
          if (v48)
            goto LABEL_31;
LABEL_33:
          sub_224F68528();
          v49 = v47;
          v50 = v46;
        }
        else
        {
          sub_224F68528();
          swift_bridgeObjectRetain();
          if (!v48)
            goto LABEL_33;
LABEL_31:
          sub_224F68528();
          swift_bridgeObjectRetain();
          sub_224DDA83C(a1, v48);
          swift_bridgeObjectRelease();
          v49 = v47;
          v50 = v46;
        }
        sub_224DDB480(v49, v50);
        goto LABEL_35;
      }
      sub_224F68528();
LABEL_35:
      v51 = v64;
      sub_224DDB4B4((uint64_t)&v23[v20[9]], v64, &qword_2557E02F8, (uint64_t (*)(uint64_t))type metadata accessor for Range);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v51, 1, v70) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v52 = v69;
        sub_224DDEADC(v51, v69, (uint64_t (*)(_QWORD))type metadata accessor for Range);
        sub_224F68528();
        v53 = v61;
        sub_224DDB4B4(v52, v61, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
        v54 = v71;
        if (v71(v53, 1, v72) == 1)
        {
          sub_224F68528();
        }
        else
        {
          v55 = v68;
          sub_224DDEADC(v53, v68, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
          sub_224F68528();
          Quantity.hash(into:)();
          v56 = v55;
          v54 = v71;
          sub_224DDEAA0(v56, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
        }
        v57 = v60;
        sub_224DDB4B4(v69 + *(int *)(v70 + 20), v60, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
        if (v54(v57, 1, v72) == 1)
        {
          sub_224F68528();
        }
        else
        {
          v58 = v68;
          sub_224DDEADC(v57, v68, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
          sub_224F68528();
          Quantity.hash(into:)();
          sub_224DDEAA0(v58, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
        }
        sub_224DDEAA0(v69, (uint64_t (*)(_QWORD))type metadata accessor for Range);
      }
      if (*(_QWORD *)&v23[v20[10] + 8])
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      v18 = v62;
      result = sub_224DDEAA0((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ReferenceRange);
      v26 += v63;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t sub_224DDE3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (uint64_t)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E0330, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - v8;
  v10 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v14)
  {
    v16 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v22 = *(_QWORD *)(v11 + 72);
    do
    {
      sub_224DDB408(v16, (uint64_t)v13, type metadata accessor for ModelsR4.Bundle.BundleEntry);
      if (*((_QWORD *)v13 + 1))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      sub_224DDB4B4((uint64_t)&v13[*(int *)(v10 + 20)], (uint64_t)v9, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v9, 1, v24) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v17 = v21;
        sub_224DDEADC((uint64_t)v9, v21, type metadata accessor for ModelsR4.ResourceProxy);
        sub_224F68528();
        ModelsR4.ResourceProxy.hash(into:)(a1);
        sub_224DDEAA0(v17, type metadata accessor for ModelsR4.ResourceProxy);
      }
      v18 = (uint64_t *)&v13[*(int *)(v10 + 24)];
      v19 = *v18;
      v20 = v18[1];
      sub_224DDE970(*v18, v20);
      sub_224F67664();
      sub_224DDE9B4(v19, v20);
      result = sub_224DDEAA0((uint64_t)v13, type metadata accessor for ModelsR4.Bundle.BundleEntry);
      v16 += v22;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_224DDE624(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = type metadata accessor for ModelsDSTU2.ResourceProxy(0);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v17 = (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02E0, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - v7;
  v9 = type metadata accessor for ModelsDSTU2.Bundle.BundleEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v13)
  {
    v15 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v18 = *(_QWORD *)(v10 + 72);
    do
    {
      sub_224DDB408(v15, (uint64_t)v12, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
      if (*((_QWORD *)v12 + 1))
      {
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_224F68528();
      }
      sub_224DDB4B4((uint64_t)&v12[*(int *)(v9 + 20)], (uint64_t)v8, &qword_2557E02E0, type metadata accessor for ModelsDSTU2.ResourceProxy);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v8, 1, v20) == 1)
      {
        sub_224F68528();
      }
      else
      {
        v16 = v17;
        sub_224DDEADC((uint64_t)v8, v17, type metadata accessor for ModelsDSTU2.ResourceProxy);
        sub_224F68528();
        ModelsDSTU2.ResourceProxy.hash(into:)();
        sub_224DDEAA0(v16, type metadata accessor for ModelsDSTU2.ResourceProxy);
      }
      sub_224F67664();
      result = sub_224DDEAA0((uint64_t)v12, type metadata accessor for ModelsDSTU2.Bundle.BundleEntry);
      v15 += v18;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_224DDE880(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_224F6851C();
  if (v3)
  {
    v5 = (unsigned __int8 *)(a2 + 48);
    do
    {
      v6 = *v5;
      sub_224F6851C();
      if (v6 == 1)
      {
        result = sub_224F68528();
      }
      else
      {
        sub_224F68528();
        result = sub_224F6851C();
      }
      v5 += 24;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_224DDE904(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_224DDEA0C(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_224DDE970(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_224DDE9B4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_224DDE9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_224DDEA0C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_224DDEA64(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  sub_224DDE904(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_224DDEAA0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_224DDEADC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0340);
}

void type metadata accessor for VNImageOption(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0348);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0350);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0358);
}

void type metadata accessor for HKSignedClinicalDataSourceType(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0360);
}

void type metadata accessor for HKSignedClinicalDataProcessingOptions(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0370);
}

void type metadata accessor for HDFHIRResourceExtractionHints(uint64_t a1)
{
  sub_224DDEBAC(a1, &qword_2557E0378);
}

void sub_224DDEBAC(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_224DDEBF0()
{
  return sub_224DDACD4(&qword_2557E0380, (uint64_t (*)(uint64_t))type metadata accessor for HDFHIRResourceExtractionHints, (uint64_t)&unk_224F6AB5C);
}

uint64_t sub_224DDEC1C()
{
  return sub_224DDACD4(&qword_2557E0388, (uint64_t (*)(uint64_t))type metadata accessor for HDFHIRResourceExtractionHints, (uint64_t)&unk_224F6AB28);
}

uint64_t sub_224DDEC48()
{
  return sub_224DDACD4(&qword_2557E0390, (uint64_t (*)(uint64_t))type metadata accessor for HDFHIRResourceExtractionHints, (uint64_t)&unk_224F6AB88);
}

uint64_t sub_224DDEC74()
{
  return sub_224DDACD4(&qword_2557E0398, (uint64_t (*)(uint64_t))type metadata accessor for HDFHIRResourceExtractionHints, (uint64_t)&unk_224F6ABC4);
}

uint64_t sub_224DDECA0()
{
  return sub_224DDACD4(&qword_2557E03A0, (uint64_t (*)(uint64_t))type metadata accessor for HKSignedClinicalDataProcessingOptions, (uint64_t)&unk_224F6AD00);
}

uint64_t sub_224DDECCC()
{
  return sub_224DDACD4(&qword_2557E03A8, (uint64_t (*)(uint64_t))type metadata accessor for HKSignedClinicalDataProcessingOptions, (uint64_t)&unk_224F6ACCC);
}

uint64_t sub_224DDECF8()
{
  return sub_224DDACD4(&qword_2557E03B0, (uint64_t (*)(uint64_t))type metadata accessor for HKSignedClinicalDataProcessingOptions, (uint64_t)&unk_224F6AD2C);
}

uint64_t sub_224DDED24()
{
  return sub_224DDACD4(&qword_2557E03B8, (uint64_t (*)(uint64_t))type metadata accessor for HKSignedClinicalDataProcessingOptions, (uint64_t)&unk_224F6AD68);
}

uint64_t sub_224DDED50()
{
  return sub_224DDACD4(&qword_2557E03C0, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_224F6AF08);
}

uint64_t sub_224DDED7C()
{
  return sub_224DDACD4(&qword_2557E03C8, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_224F6AEDC);
}

uint64_t sub_224DDEDA8()
{
  return sub_224DDACD4(&qword_2557E03D0, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_224F6AF78);
}

uint64_t sub_224DDEDD4()
{
  return sub_224DDACD4(&qword_2557E03D8, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_224F6B068);
}

uint64_t sub_224DDEE00()
{
  return sub_224DDACD4(&qword_2557E03E0, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_224F6B03C);
}

uint64_t sub_224DDEE2C()
{
  return sub_224DDACD4(&qword_2557E03E8, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_224F6B0D8);
}

uint64_t sub_224DDEE58(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void ModelsR4.ResourceProxy.get()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for ModelsR4.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v1);
  sub_224DDB408(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_224DDEF7C + 4 * byte_224F6B1A0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224DDEF7C()
{
  uint64_t *v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;

  v3 = *v1;
  *(_OWORD *)(v2 - 64) = v1[1];
  *(_OWORD *)(v2 - 48) = v3;
  *(_OWORD *)(v2 - 80) = v1[2];
  v5 = *((_QWORD *)v1 + 6);
  v4 = *((_QWORD *)v1 + 7);
  v0[3] = (uint64_t)&type metadata for ModelsR4.Binary;
  v0[4] = sub_224DDF444();
  result = swift_allocObject();
  *v0 = result;
  v7 = *(_OWORD *)(v2 - 64);
  *(_OWORD *)(result + 16) = *(_OWORD *)(v2 - 48);
  *(_OWORD *)(result + 32) = v7;
  *(_OWORD *)(result + 48) = *(_OWORD *)(v2 - 80);
  *(_QWORD *)(result + 64) = v5;
  *(_QWORD *)(result + 72) = v4;
  return result;
}

void sub_224DDF128()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v0[3] = (uint64_t)&type metadata for ModelsR4.Patient;
  v0[4] = sub_224DDF264();
  v2 = swift_allocObject();
  *v0 = v2;
  v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v2 + 112) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v2 + 128) = v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(v1 + 128);
  *(_QWORD *)(v2 + 160) = *(_QWORD *)(v1 + 144);
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v2 + 64) = v4;
  v5 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v2 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v2 + 96) = v5;
  v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v6;
  JUMPOUT(0x224DDF114);
}

void sub_224DDF188()
{
  uint64_t *v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *v1;
  *(_OWORD *)(v2 - 64) = v1[1];
  *(_OWORD *)(v2 - 48) = v3;
  v5 = *((_QWORD *)v1 + 4);
  v4 = *((_QWORD *)v1 + 5);
  v0[3] = (uint64_t)&type metadata for UnknownResource;
  v0[4] = sub_224DDF1EC();
  v6 = swift_allocObject();
  *v0 = v6;
  v7 = *(_OWORD *)(v2 - 64);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v2 - 48);
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 48) = v5;
  *(_QWORD *)(v6 + 56) = v4;
  JUMPOUT(0x224DDF114);
}

uint64_t type metadata accessor for ModelsR4.ResourceProxy(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E0B08);
}

unint64_t sub_224DDF1EC()
{
  unint64_t result;

  result = qword_2557E0410;
  if (!qword_2557E0410)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for UnknownResource, &type metadata for UnknownResource);
    atomic_store(result, (unint64_t *)&qword_2557E0410);
  }
  return result;
}

uint64_t sub_224DDF230()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_224DDF264()
{
  unint64_t result;

  result = qword_2557E0418;
  if (!qword_2557E0418)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Patient, &type metadata for ModelsR4.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E0418);
  }
  return result;
}

uint64_t sub_224DDF2A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 120) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ModelsR4.Observation(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E1108);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for ModelsR4.Immunization(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E0FA8);
}

uint64_t type metadata accessor for ModelsR4.DocumentReference(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E0DC8);
}

uint64_t type metadata accessor for ModelsR4.DiagnosticReport(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E0D08);
}

uint64_t type metadata accessor for ModelsR4.Condition(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E0C30);
}

unint64_t sub_224DDF3CC()
{
  unint64_t result;

  result = qword_2557E0448;
  if (!qword_2557E0448)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Bundle, &type metadata for ModelsR4.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E0448);
  }
  return result;
}

uint64_t sub_224DDF410()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_224DDF444()
{
  unint64_t result;

  result = qword_2557E0450;
  if (!qword_2557E0450)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Binary, &type metadata for ModelsR4.Binary);
    atomic_store(result, (unint64_t *)&qword_2557E0450);
  }
  return result;
}

uint64_t sub_224DDF488()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t ModelsR4.ResourceProxy.get<A>(if:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4;

  ModelsR4.ResourceProxy.get()();
  sub_224DDF538();
  v4 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v4 ^ 1u, 1, a1);
}

unint64_t sub_224DDF538()
{
  unint64_t result;

  result = qword_2557E0458;
  if (!qword_2557E0458)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E0458);
  }
  return result;
}

uint64_t sub_224DDF58C()
{
  sub_224F68510();
  sub_224F67C34();
  return sub_224F6854C();
}

uint64_t sub_224DDF5E4()
{
  return sub_224F67C34();
}

uint64_t sub_224DDF604()
{
  sub_224F68510();
  sub_224F67C34();
  return sub_224F6854C();
}

uint64_t sub_224DDF658@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_224DDF6A8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "resourceType");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_224DDF6CC()
{
  return 0x656372756F736572;
}

uint64_t sub_224DDF6EC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_224DDF740()
{
  sub_224DE5E44();
  return sub_224F685B8();
}

uint64_t sub_224DDF768()
{
  sub_224DE5E44();
  return sub_224F685C4();
}

uint64_t ModelsR4.ResourceProxy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  char *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  _QWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;

  v76 = a2;
  sub_224DFB77C(0, &qword_2557E0460, (uint64_t (*)(void))sub_224DE5E44, (uint64_t)&type metadata for ModelsR4.ResourceProxy.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v79 = v3;
  v77 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v69 - v4;
  v75 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v6 = MEMORY[0x24BDAC7A8](v75);
  v71 = (uint64_t *)((char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = MEMORY[0x24BDAC7A8](v6);
  v72 = (char *)&v69 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v73 = (uint64_t)&v69 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v74 = (uint64_t)&v69 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v78 = (char *)&v69 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v69 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v69 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v69 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v69 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v69 - v28;
  v30 = a1[3];
  v93 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v30);
  sub_224DE5E44();
  v80 = v5;
  v31 = (uint64_t)v81;
  sub_224F6857C();
  if (!v31)
  {
    v32 = v27;
    v70 = v21;
    v33 = (uint64_t)v78;
    v81 = v29;
    v34 = v79;
    v35 = v80;
    v36 = sub_224F682AC();
    v40 = v36;
    if (v36 == 0x7972616E6942 && v37 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    v42 = v37;
    if ((sub_224F683CC() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v35 = v80;
LABEL_12:
      v43 = v77;
      v38 = (uint64_t)v93;
      sub_224DE5E88((uint64_t)v93, (uint64_t)&v92);
      ModelsR4.Binary.init(from:)(&v92, (uint64_t *)&v82);
      v44 = (uint64_t)v81;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v34);
      v45 = *((_QWORD *)&v82 + 1);
      *(_QWORD *)v32 = v82;
      *((_QWORD *)v32 + 1) = v45;
      v46 = v84;
      *((_OWORD *)v32 + 1) = v83;
      *((_OWORD *)v32 + 2) = v46;
      *((_OWORD *)v32 + 3) = v85;
      swift_storeEnumTagMultiPayload();
      v47 = (uint64_t)v32;
LABEL_13:
      sub_224DDEADC(v47, v44, type metadata accessor for ModelsR4.ResourceProxy);
LABEL_14:
      v48 = v76;
LABEL_31:
      sub_224DDEADC(v44, v48, type metadata accessor for ModelsR4.ResourceProxy);
      return __swift_destroy_boxed_opaque_existential_1(v38);
    }
    if (v40 == 0x656C646E7542 && v42 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      v48 = v76;
      v51 = v80;
      goto LABEL_22;
    }
    v50 = sub_224F683CC();
    v51 = v80;
    if ((v50 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v48 = v76;
LABEL_22:
      v38 = (uint64_t)v93;
      sub_224DE5E88((uint64_t)v93, (uint64_t)&v92);
      ModelsR4.Bundle.init(from:)(&v92, (uint64_t *)&v82);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v51, v34);
      v52 = *((_QWORD *)&v82 + 1);
      v53 = v84;
      *(_QWORD *)v24 = v82;
      *((_QWORD *)v24 + 1) = v52;
      *((_OWORD *)v24 + 1) = v83;
      *((_QWORD *)v24 + 4) = v53;
      swift_storeEnumTagMultiPayload();
      v54 = (uint64_t)v24;
      v44 = (uint64_t)v81;
LABEL_30:
      sub_224DDEADC(v54, v44, type metadata accessor for ModelsR4.ResourceProxy);
      goto LABEL_31;
    }
    v55 = v40 == 0x6F697469646E6F43 && v42 == 0xE90000000000006ELL;
    if (v55 || (sub_224F683CC() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v44 = (uint64_t)v81;
      v38 = (uint64_t)v93;
      sub_224DE5E88((uint64_t)v93, (uint64_t)&v82);
      v33 = (uint64_t)v70;
      ModelsR4.Condition.init(from:)(&v82, (uint64_t)v70);
      v48 = v76;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v34);
LABEL_29:
      swift_storeEnumTagMultiPayload();
      v54 = v33;
      goto LABEL_30;
    }
    if (v40 == 0xD000000000000010 && v42 == 0x8000000224F6B350 || (sub_224F683CC() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v38 = (uint64_t)v93;
      sub_224DE5E88((uint64_t)v93, (uint64_t)&v82);
      v56 = v18;
      ModelsR4.DiagnosticReport.init(from:)(&v82, (uint64_t)v18);
      v44 = (uint64_t)v81;
      v48 = v76;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v34);
      swift_storeEnumTagMultiPayload();
      v54 = (uint64_t)v56;
      goto LABEL_30;
    }
    if (v40 == 0xD000000000000011 && v42 == 0x8000000224F6B370)
    {
      swift_bridgeObjectRelease();
      v44 = (uint64_t)v81;
LABEL_41:
      v38 = (uint64_t)v93;
      sub_224DE5E88((uint64_t)v93, (uint64_t)&v82);
      ModelsR4.DocumentReference.init(from:)(&v82, v33);
      v48 = v76;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v34);
      goto LABEL_29;
    }
    v57 = sub_224F683CC();
    v44 = (uint64_t)v81;
    if ((v57 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    if (v40 == 0x617A696E756D6D49 && v42 == 0xEC0000006E6F6974 || (sub_224F683CC() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v38 = (uint64_t)v93;
      sub_224DE5E88((uint64_t)v93, (uint64_t)&v82);
      v58 = v74;
      ModelsR4.Immunization.init(from:)(&v82, v74);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v34);
      swift_storeEnumTagMultiPayload();
      v47 = v58;
      v44 = (uint64_t)v81;
      goto LABEL_13;
    }
    if (v40 == 0x746176726573624FLL && v42 == 0xEB000000006E6F69 || (sub_224F683CC() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_224DE5E88((uint64_t)v93, (uint64_t)&v82);
      ModelsR4.Observation.init(from:)(&v82, v73);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v34);
      v59 = v73;
      swift_storeEnumTagMultiPayload();
      v60 = v59;
LABEL_57:
      v44 = (uint64_t)v81;
      sub_224DDEADC(v60, (uint64_t)v81, type metadata accessor for ModelsR4.ResourceProxy);
      v38 = (uint64_t)v93;
      goto LABEL_14;
    }
    if (v40 == 0x746E6569746150 && v42 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v61 = sub_224F683CC();
      swift_bridgeObjectRelease();
      if ((v61 & 1) == 0)
      {
        sub_224DE5E88((uint64_t)v93, (uint64_t)&v92);
        UnknownResource.init(from:)(&v92, (uint64_t *)&v82);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v34);
        v67 = *((_QWORD *)&v82 + 1);
        v63 = v71;
        *v71 = v82;
        v63[1] = v67;
        v68 = v84;
        *((_OWORD *)v63 + 1) = v83;
        *((_OWORD *)v63 + 2) = v68;
        goto LABEL_56;
      }
    }
    sub_224DE5E88((uint64_t)v93, (uint64_t)&v92);
    ModelsR4.Patient.init(from:)(&v92, (uint64_t)&v82);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v80, v34);
    v62 = v89;
    v63 = v72;
    *((_OWORD *)v72 + 6) = v88;
    *((_OWORD *)v63 + 7) = v62;
    *((_OWORD *)v63 + 8) = v90;
    v63[18] = v91;
    v64 = v85;
    *((_OWORD *)v63 + 2) = v84;
    *((_OWORD *)v63 + 3) = v64;
    v65 = v87;
    *((_OWORD *)v63 + 4) = v86;
    *((_OWORD *)v63 + 5) = v65;
    v66 = v83;
    *(_OWORD *)v63 = v82;
    *((_OWORD *)v63 + 1) = v66;
LABEL_56:
    swift_storeEnumTagMultiPayload();
    v60 = (uint64_t)v63;
    goto LABEL_57;
  }
  v38 = (uint64_t)v93;
  return __swift_destroy_boxed_opaque_existential_1(v38);
}

uint64_t ModelsR4.Binary.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  char v33;
  char v34;
  char v35;
  char v36;
  ValueMetadata *v37;

  v31 = a2;
  sub_224DFB77C(0, &qword_2557E0470, (uint64_t (*)(void))sub_224DE5ECC, (uint64_t)&type metadata for ModelsR4.Binary.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - v7;
  v37 = &type metadata for ModelsR4.Binary;
  sub_224DE5F10();
  sub_224F67BC8();
  v9 = a1[3];
  v32 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_224DE5ECC();
  sub_224F6857C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  }
  else
  {
    v10 = v6;
    v36 = 0;
    v11 = v5;
    v13 = sub_224F682AC();
    v15 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v35 = 1;
    v16 = sub_224F68264();
    v18 = v17;
    v30 = v13;
    v34 = 2;
    swift_bridgeObjectRetain();
    v19 = sub_224F68264();
    v21 = v20;
    v29 = v19;
    v33 = 3;
    swift_bridgeObjectRetain();
    v22 = sub_224F68264();
    v24 = v23;
    v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v26 = v22;
    v25(v8, v11);
    swift_bridgeObjectRetain();
    v27 = v31;
    *v31 = v30;
    v27[1] = v15;
    v27[2] = v16;
    v27[3] = v18;
    v27[4] = v29;
    v27[5] = v21;
    v27[6] = v26;
    v27[7] = v24;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsR4.Bundle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ValueMetadata *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  ValueMetadata *v22;

  v19 = a2;
  sub_224DFB77C(0, &qword_2557E0488, (uint64_t (*)(void))sub_224DE5F48, (uint64_t)&type metadata for ModelsR4.Bundle.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v20 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - v6;
  v22 = &type metadata for ModelsR4.Bundle;
  sub_224DE5F8C();
  sub_224F67BC8();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE5F48();
  sub_224F6857C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v22) = 0;
    v8 = v20;
    v10 = sub_224F682AC();
    v12 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_224DDEA0C(0, &qword_2557E04A0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v21 = 1;
    sub_224DE5FD8();
    sub_224F68294();
    v18 = v10;
    v13 = v22;
    LOBYTE(v22) = 2;
    swift_bridgeObjectRetain();
    v14 = sub_224F68264();
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v8);
    swift_bridgeObjectRetain();
    v17 = v19;
    *v19 = v18;
    v17[1] = v12;
    v17[2] = (uint64_t)v13;
    v17[3] = v14;
    v17[4] = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t ModelsR4.Condition.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t *v41;
  uint64_t result;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  int *v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  char v91;

  v79 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v78 = (uint64_t)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v77 = (uint64_t)&v75 - v7;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v3);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v81 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v82 = (uint64_t)&v75 - v11;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v80 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v75 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v75 - v18;
  sub_224DFB77C(0, &qword_2557E04C0, (uint64_t (*)(void))sub_224DE6068, (uint64_t)&type metadata for ModelsR4.Condition.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v84 = v20;
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v75 - v22;
  v24 = type metadata accessor for ModelsR4.Condition(0);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (uint64_t *)((char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v86 = (int *)v25;
  *(_QWORD *)&v89 = v25;
  sub_224DE6244(0, (unint64_t *)&qword_2557E04D0, v28);
  *v27 = sub_224F67BC8();
  v27[1] = v29;
  v27[2] = 0;
  v27[3] = 0;
  v87 = v27;
  v30 = a1[3];
  v85 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v30);
  sub_224DE6068();
  v83 = v23;
  v31 = v88;
  sub_224F6857C();
  if (v31)
  {
    v88 = v31;
    LODWORD(v76) = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    LODWORD(v77) = 0;
    LODWORD(v78) = 0;
    LODWORD(v79) = 0;
    LODWORD(v80) = 0;
    LODWORD(v81) = 0;
    LODWORD(v82) = 0;
    LODWORD(v83) = 0;
    LODWORD(v84) = 0;
  }
  else
  {
    v32 = (uint64_t)v19;
    v76 = v17;
    v33 = v21;
    LOBYTE(v89) = 0;
    v44 = sub_224F682AC();
    v46 = v45;
    swift_bridgeObjectRelease();
    v47 = v87;
    *v87 = v44;
    v47[1] = v46;
    LOBYTE(v89) = 1;
    v47[2] = sub_224F68264();
    v47[3] = v48;
    v91 = 2;
    sub_224DDAD48();
    sub_224F68294();
    v47[4] = v89;
    v91 = 3;
    sub_224DE60BC();
    sub_224F68294();
    v49 = v90;
    *(_OWORD *)(v47 + 5) = v89;
    v47[7] = v49;
    v91 = 4;
    sub_224F68294();
    v50 = v90;
    *((_OWORD *)v47 + 4) = v89;
    v47[10] = v50;
    sub_224DFB644(0, &qword_2557E04E0);
    v91 = 5;
    sub_224DE6100();
    sub_224F68294();
    v47[11] = v89;
    v91 = 6;
    sub_224F68294();
    v51 = v90;
    *((_OWORD *)v47 + 6) = v89;
    v47[14] = v51;
    v91 = 7;
    sub_224F68294();
    v52 = v90;
    *(_OWORD *)(v47 + 15) = v89;
    v47[17] = v52;
    v91 = 8;
    sub_224F68294();
    v88 = 0;
    v47[18] = v89;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v89) = 9;
    sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    v53 = v88;
    sub_224F68294();
    v88 = v53;
    if (v53)
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
      v40 = 0;
      LODWORD(v77) = 0;
      LODWORD(v78) = 0;
      LODWORD(v79) = 0;
      LODWORD(v80) = 0;
      LODWORD(v81) = 0;
      LODWORD(v82) = 0;
      LODWORD(v83) = 0;
      LODWORD(v84) = 0;
      LODWORD(v76) = 1;
      v34 = 1;
      v35 = 1;
      v36 = 1;
      v37 = 1;
      v38 = 1;
      v39 = 1;
    }
    else
    {
      sub_224DFAC88(v32, (uint64_t)v87 + v86[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      type metadata accessor for Period();
      LOBYTE(v89) = 10;
      sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
      v54 = v88;
      sub_224F68294();
      v88 = v54;
      if (v54)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
        LODWORD(v77) = 0;
        LODWORD(v78) = 0;
        LODWORD(v79) = 0;
        LODWORD(v80) = 0;
        LODWORD(v81) = 0;
        LODWORD(v82) = 0;
        LODWORD(v83) = 0;
        LODWORD(v84) = 0;
        LODWORD(v76) = 1;
        v34 = 1;
        v35 = 1;
        v36 = 1;
        v37 = 1;
        v38 = 1;
        v39 = 1;
        v40 = 1;
      }
      else
      {
        sub_224DFAC88(v82, (uint64_t)v87 + v86[14], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        LOBYTE(v89) = 11;
        v55 = v88;
        v56 = sub_224F68264();
        v88 = v55;
        if (v55)
        {
          (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
          LODWORD(v78) = 0;
          LODWORD(v79) = 0;
          LODWORD(v80) = 0;
          LODWORD(v81) = 0;
          LODWORD(v82) = 0;
          LODWORD(v83) = 0;
          LODWORD(v84) = 0;
          LODWORD(v76) = 1;
          v34 = 1;
          v35 = 1;
          v36 = 1;
          v37 = 1;
          v38 = 1;
          v39 = 1;
          v40 = 1;
          LODWORD(v77) = 1;
        }
        else
        {
          v58 = (uint64_t *)((char *)v87 + v86[15]);
          *v58 = v56;
          v58[1] = v57;
          LOBYTE(v89) = 12;
          v59 = v88;
          sub_224F68294();
          v88 = v59;
          if (v59)
          {
            (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
            LODWORD(v79) = 0;
            LODWORD(v80) = 0;
            LODWORD(v81) = 0;
            LODWORD(v82) = 0;
            LODWORD(v83) = 0;
            LODWORD(v84) = 0;
            LODWORD(v76) = 1;
            v34 = 1;
            v35 = 1;
            v36 = 1;
            v37 = 1;
            v38 = 1;
            v39 = 1;
            v40 = 1;
            LODWORD(v77) = 1;
            LODWORD(v78) = 1;
          }
          else
          {
            sub_224DFAC88((uint64_t)v76, (uint64_t)v87 + v86[16], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            LOBYTE(v89) = 13;
            v60 = v88;
            sub_224F68294();
            v88 = v60;
            if (v60)
            {
              (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
              LODWORD(v80) = 0;
              LODWORD(v81) = 0;
              LODWORD(v82) = 0;
              LODWORD(v83) = 0;
              LODWORD(v84) = 0;
              LODWORD(v76) = 1;
              v34 = 1;
              v35 = 1;
              v36 = 1;
              v37 = 1;
              v38 = 1;
              v39 = 1;
              v40 = 1;
              LODWORD(v77) = 1;
              LODWORD(v78) = 1;
              LODWORD(v79) = 1;
            }
            else
            {
              sub_224DFAC88(v81, (uint64_t)v87 + v86[17], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
              LOBYTE(v89) = 14;
              v61 = v88;
              v62 = sub_224F68264();
              v88 = v61;
              if (v61)
              {
                (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
                LODWORD(v81) = 0;
                LODWORD(v82) = 0;
                LODWORD(v83) = 0;
                LODWORD(v84) = 0;
                LODWORD(v76) = 1;
                v34 = 1;
                v35 = 1;
                v36 = 1;
                v37 = 1;
                v38 = 1;
                v39 = 1;
                v40 = 1;
                LODWORD(v77) = 1;
                LODWORD(v78) = 1;
                LODWORD(v79) = 1;
                LODWORD(v80) = 1;
              }
              else
              {
                v64 = (uint64_t *)((char *)v87 + v86[18]);
                *v64 = v62;
                v64[1] = v63;
                LOBYTE(v89) = 15;
                v65 = v88;
                sub_224F68294();
                v88 = v65;
                if (v65)
                {
                  (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
                  LODWORD(v82) = 0;
                  LODWORD(v83) = 0;
                  LODWORD(v84) = 0;
                  LODWORD(v76) = 1;
                  v34 = 1;
                  v35 = 1;
                  v36 = 1;
                  v37 = 1;
                  v38 = 1;
                  v39 = 1;
                  v40 = 1;
                  LODWORD(v77) = 1;
                  LODWORD(v78) = 1;
                  LODWORD(v79) = 1;
                  LODWORD(v80) = 1;
                  LODWORD(v81) = 1;
                }
                else
                {
                  sub_224DFAC88(v80, (uint64_t)v87 + v86[19], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                  type metadata accessor for Reference();
                  LOBYTE(v89) = 16;
                  sub_224DDACD4(&qword_2557E0500, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
                  v66 = v88;
                  sub_224F68294();
                  v88 = v66;
                  if (v66)
                  {
                    (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
                    LODWORD(v83) = 0;
                    LODWORD(v84) = 0;
                    LODWORD(v76) = 1;
                    v34 = 1;
                    v35 = 1;
                    v36 = 1;
                    v37 = 1;
                    v38 = 1;
                    v39 = 1;
                    v40 = 1;
                    LODWORD(v77) = 1;
                    LODWORD(v78) = 1;
                    LODWORD(v79) = 1;
                    LODWORD(v80) = 1;
                    LODWORD(v81) = 1;
                    LODWORD(v82) = 1;
                  }
                  else
                  {
                    sub_224DFAC88(v77, (uint64_t)v87 + v86[20], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    LOBYTE(v89) = 17;
                    v67 = v88;
                    sub_224F68294();
                    v88 = v67;
                    if (v67)
                    {
                      (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
                      LODWORD(v84) = 0;
                      LODWORD(v76) = 1;
                      v34 = 1;
                      v35 = 1;
                      v36 = 1;
                      v37 = 1;
                      v38 = 1;
                      v39 = 1;
                      v40 = 1;
                      LODWORD(v77) = 1;
                      LODWORD(v78) = 1;
                      LODWORD(v79) = 1;
                      LODWORD(v80) = 1;
                      LODWORD(v81) = 1;
                      LODWORD(v82) = 1;
                      LODWORD(v83) = 1;
                    }
                    else
                    {
                      sub_224DFAC88(v78, (uint64_t)v87 + v86[21], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                      sub_224DDEA0C(0, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
                      v91 = 18;
                      sub_224DE6170();
                      v68 = v88;
                      sub_224F68294();
                      v88 = v68;
                      if (!v68)
                      {
                        *(uint64_t *)((char *)v87 + v86[22]) = v89;
                        LOBYTE(v89) = 19;
                        v69 = sub_224F68264();
                        v88 = 0;
                        v70 = v69;
                        v72 = v71;
                        (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
                        v73 = (uint64_t)v87;
                        v74 = (uint64_t *)((char *)v87 + v86[23]);
                        *v74 = v70;
                        v74[1] = v72;
                        sub_224DDB408(v73, v79, type metadata accessor for ModelsR4.Condition);
                        __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
                        return sub_224DDEAA0(v73, type metadata accessor for ModelsR4.Condition);
                      }
                      (*(void (**)(char *, uint64_t))(v33 + 8))(v83, v84);
                      LODWORD(v76) = 1;
                      v34 = 1;
                      v35 = 1;
                      v36 = 1;
                      v37 = 1;
                      v38 = 1;
                      v39 = 1;
                      v40 = 1;
                      LODWORD(v77) = 1;
                      LODWORD(v78) = 1;
                      LODWORD(v79) = 1;
                      LODWORD(v80) = 1;
                      LODWORD(v81) = 1;
                      LODWORD(v82) = 1;
                      LODWORD(v83) = 1;
                      LODWORD(v84) = 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v41 = v87;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((_DWORD)v76)
  {
    result = sub_224DE60AC(v41[4]);
    if (!v34)
    {
LABEL_6:
      if (!v35)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  result = sub_224DDB480(v41[5], v41[6]);
  if (!v35)
  {
LABEL_7:
    if (!v36)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  result = sub_224DDB480(v41[8], v41[9]);
  if (!v36)
  {
LABEL_8:
    if (!v37)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  result = swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_9:
    if (!v38)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  result = sub_224DDB480(v41[12], v41[13]);
  if (!v38)
  {
LABEL_10:
    v43 = v86;
    if (!v39)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  result = sub_224DDB480(v41[15], v41[16]);
  v43 = v86;
  if (!v39)
  {
LABEL_11:
    if (!v40)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  result = swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_12:
    if (!(_DWORD)v77)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  result = sub_224DDB50C((uint64_t)v41 + v43[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!(_DWORD)v77)
  {
LABEL_13:
    if (!(_DWORD)v78)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  result = sub_224DDB50C((uint64_t)v41 + v43[14], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (!(_DWORD)v78)
  {
LABEL_14:
    if (!(_DWORD)v79)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  result = swift_bridgeObjectRelease();
  if (!(_DWORD)v79)
  {
LABEL_15:
    if (!(_DWORD)v80)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  result = sub_224DDB50C((uint64_t)v41 + v43[16], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!(_DWORD)v80)
  {
LABEL_16:
    if (!(_DWORD)v81)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  result = sub_224DDB50C((uint64_t)v41 + v43[17], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (!(_DWORD)v81)
  {
LABEL_17:
    if (!(_DWORD)v82)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  result = swift_bridgeObjectRelease();
  if (!(_DWORD)v82)
  {
LABEL_18:
    if (!(_DWORD)v83)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  result = sub_224DDB50C((uint64_t)v41 + v43[19], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!(_DWORD)v83)
  {
LABEL_19:
    if (!(_DWORD)v84)
      return result;
    return sub_224DDB50C((uint64_t)v41 + v43[21], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  }
LABEL_35:
  result = sub_224DDB50C((uint64_t)v41 + v43[20], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if ((_DWORD)v84)
    return sub_224DDB50C((uint64_t)v41 + v43[21], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  return result;
}

uint64_t ModelsR4.DiagnosticReport.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t *v31;
  int *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int *v64;
  uint64_t *v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  char v69;

  v57 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v59 = (char *)v56 - v5;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v58 = (uint64_t)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v56 - v9;
  sub_224DFB77C(0, &qword_2557E0520, (uint64_t (*)(void))sub_224DE6200, (uint64_t)&type metadata for ModelsR4.DiagnosticReport.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v61 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v56 - v13;
  v15 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (_QWORD *)((char *)v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v67 = v16;
  sub_224DE6244(0, &qword_2557E0530, v19);
  *v18 = sub_224F67BC8();
  v18[1] = v20;
  v18[2] = 0;
  v18[3] = 0;
  v21 = *(int *)(v15 + 60);
  v62 = a1;
  v63 = v21;
  v65 = v18;
  *(uint64_t *)((char *)v18 + v21) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE6200();
  v60 = v14;
  v22 = v66;
  sub_224F6857C();
  v64 = (int *)v15;
  if (v22)
  {
    v66 = v22;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    LODWORD(v61) = 0;
    goto LABEL_4;
  }
  v66 = v10;
  LOBYTE(v67) = 0;
  v34 = sub_224F682AC();
  v36 = v35;
  swift_bridgeObjectRelease();
  v37 = v65;
  *v65 = v34;
  v37[1] = v36;
  LOBYTE(v67) = 1;
  v37[2] = sub_224F68264();
  v37[3] = v38;
  sub_224DDEA0C(0, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v69 = 2;
  sub_224DE627C();
  sub_224F68294();
  v39 = v15;
  v37[4] = v67;
  LOBYTE(v67) = 3;
  v37[5] = sub_224F682AC();
  v37[6] = v40;
  sub_224DFB644(0, &qword_2557E04E0);
  v69 = 4;
  sub_224DE6100();
  sub_224F68294();
  v37[7] = v67;
  v69 = 5;
  sub_224DE60BC();
  sub_224F682DC();
  v41 = v68;
  *((_OWORD *)v37 + 4) = v67;
  v37[10] = v41;
  LOBYTE(v67) = 6;
  v37[11] = sub_224F68264();
  v37[12] = v42;
  v43 = type metadata accessor for FHIRDateTime();
  LOBYTE(v67) = 7;
  v44 = sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
  v45 = (uint64_t)v66;
  v56[1] = v44;
  sub_224F68294();
  v56[0] = v43;
  sub_224DFAC88(v45, (uint64_t)v37 + *(int *)(v39 + 44), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  type metadata accessor for Period();
  LOBYTE(v67) = 8;
  sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
  v46 = (uint64_t)v59;
  sub_224F68294();
  v66 = 0;
  sub_224DFAC88(v46, (uint64_t)v37 + v64[12], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  LOBYTE(v67) = 9;
  v47 = v66;
  sub_224F68294();
  v66 = v47;
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v60, v61);
    v30 = 0;
    LODWORD(v61) = 0;
    v23 = 1;
    v24 = 1;
    v25 = 1;
    v26 = 1;
    v27 = 1;
    v28 = 1;
    v29 = 1;
    goto LABEL_4;
  }
  sub_224DFAC88(v58, (uint64_t)v65 + v64[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v69 = 10;
  sub_224DE630C();
  v48 = v66;
  sub_224F68294();
  v66 = v48;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v60, v61);
    LODWORD(v61) = 0;
    v23 = 1;
    v24 = 1;
    v25 = 1;
    v26 = 1;
    v27 = 1;
    v28 = 1;
    v29 = 1;
    v30 = 1;
    goto LABEL_4;
  }
  *(uint64_t *)((char *)v65 + v64[14]) = v67;
  sub_224DDEA0C(0, &qword_2557E0560, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v69 = 11;
  sub_224DE639C();
  v49 = v66;
  sub_224F68294();
  v66 = v49;
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v60, v61);
    v23 = 1;
    v24 = 1;
    v25 = 1;
    v26 = 1;
    v27 = 1;
    v28 = 1;
    v29 = 1;
    v30 = 1;
    LODWORD(v61) = 1;
LABEL_4:
    v31 = v65;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23)
    {
      swift_bridgeObjectRelease();
      if (!v24)
      {
LABEL_6:
        if (!v25)
          goto LABEL_7;
        goto LABEL_17;
      }
    }
    else if (!v24)
    {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    if (!v25)
    {
LABEL_7:
      if (!v26)
        goto LABEL_8;
      goto LABEL_18;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    if (!v26)
    {
LABEL_8:
      v32 = v64;
      if (!v27)
        goto LABEL_9;
      goto LABEL_19;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = v64;
    if (!v27)
    {
LABEL_9:
      if (!v28)
        goto LABEL_10;
      goto LABEL_20;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    if (!v28)
    {
LABEL_10:
      if (!v29)
        goto LABEL_11;
      goto LABEL_21;
    }
LABEL_20:
    sub_224DDB50C((uint64_t)v31 + v32[11], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (!v29)
    {
LABEL_11:
      if (!v30)
        goto LABEL_12;
      goto LABEL_22;
    }
LABEL_21:
    sub_224DDB50C((uint64_t)v31 + v32[12], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (!v30)
    {
LABEL_12:
      if (!(_DWORD)v61)
        return swift_bridgeObjectRelease();
LABEL_13:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_22:
    sub_224DDB50C((uint64_t)v31 + v32[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    if (!(_DWORD)v61)
      return swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  *(uint64_t *)((char *)v65 + v63) = v67;
  LOBYTE(v67) = 12;
  v50 = sub_224F68264();
  v66 = 0;
  v51 = v50;
  v53 = v52;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v60, v61);
  v54 = (uint64_t)v65;
  v55 = (uint64_t *)((char *)v65 + v64[16]);
  *v55 = v51;
  v55[1] = v53;
  sub_224DDB408(v54, v57, type metadata accessor for ModelsR4.DiagnosticReport);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  return sub_224DDEAA0(v54, type metadata accessor for ModelsR4.DiagnosticReport);
}

uint64_t ModelsR4.DocumentReference.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t *v28;
  uint64_t result;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  int *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  char v63;

  v53 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v54 = (uint64_t)&v53 - v5;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v53 - v7;
  sub_224DFB77C(0, &qword_2557E0580, (uint64_t (*)(void))sub_224DE6440, (uint64_t)&type metadata for ModelsR4.DocumentReference.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v56 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v53 - v11;
  v13 = type metadata accessor for ModelsR4.DocumentReference(0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (uint64_t *)((char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v61 = v14;
  sub_224DE6244(0, &qword_2557E0590, v17);
  *v16 = sub_224F67BC8();
  v16[1] = v18;
  v16[2] = 0;
  v16[3] = 0;
  v57 = a1;
  v58 = v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE6440();
  v55 = v12;
  v19 = v60;
  sub_224F6857C();
  v59 = (int *)v13;
  if (v19)
  {
    v60 = v19;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    LODWORD(v55) = 0;
    LODWORD(v56) = 0;
  }
  else
  {
    v60 = v8;
    LOBYTE(v61) = 0;
    v31 = sub_224F682AC();
    v33 = v32;
    swift_bridgeObjectRelease();
    v34 = v58;
    *v58 = v31;
    v34[1] = v33;
    LOBYTE(v61) = 1;
    v34[2] = sub_224F68264();
    v34[3] = v35;
    v63 = 2;
    sub_224DDAD48();
    sub_224F68294();
    v34[4] = v61;
    LOBYTE(v61) = 3;
    v34[5] = sub_224F682AC();
    v34[6] = v36;
    LOBYTE(v61) = 4;
    v34[7] = sub_224F68264();
    v34[8] = v37;
    v63 = 5;
    sub_224DE60BC();
    sub_224F682DC();
    v38 = v62;
    *(_OWORD *)(v34 + 9) = v61;
    v34[11] = v38;
    sub_224DFB644(0, &qword_2557E04E0);
    v63 = 6;
    sub_224DE6100();
    sub_224F682DC();
    v34[12] = v61;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v61) = 7;
    sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    v39 = (uint64_t)v60;
    sub_224F68294();
    sub_224DFAC88(v39, (uint64_t)v34 + *(int *)(v13 + 44), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    LOBYTE(v61) = 8;
    v40 = sub_224F68264();
    v60 = 0;
    v42 = (uint64_t *)((char *)v34 + v59[12]);
    *v42 = v40;
    v42[1] = v41;
    sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v63 = 9;
    sub_224DE630C();
    v43 = v60;
    sub_224F68294();
    v60 = v43;
    if (v43)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v55, v56);
      v27 = 0;
      LODWORD(v55) = 0;
      LODWORD(v56) = 0;
      v20 = 1;
      v21 = 1;
      v22 = 1;
      v23 = 1;
      v24 = 1;
      v25 = 1;
      v26 = 1;
    }
    else
    {
      *(uint64_t *)((char *)v58 + v59[13]) = v61;
      sub_224DDEA0C(0, &qword_2557E0598, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
      v63 = 10;
      sub_224DE6498();
      v44 = v60;
      sub_224F682DC();
      v60 = v44;
      if (v44)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v55, v56);
        LODWORD(v55) = 0;
        LODWORD(v56) = 0;
        v20 = 1;
        v21 = 1;
        v22 = 1;
        v23 = 1;
        v24 = 1;
        v25 = 1;
        v26 = 1;
        v27 = 1;
      }
      else
      {
        *(uint64_t *)((char *)v58 + v59[14]) = v61;
        type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        LOBYTE(v61) = 11;
        sub_224DDACD4(&qword_2557E05B0, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContext);
        v45 = v60;
        sub_224F68294();
        v60 = v45;
        if (v45)
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v55, v56);
          LODWORD(v56) = 0;
          v20 = 1;
          v21 = 1;
          v22 = 1;
          v23 = 1;
          v24 = 1;
          v25 = 1;
          v26 = 1;
          v27 = 1;
          LODWORD(v55) = 1;
        }
        else
        {
          sub_224DFAC88(v54, (uint64_t)v58 + v59[15], &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
          LOBYTE(v61) = 12;
          v46 = v60;
          v47 = sub_224F68264();
          v60 = v46;
          if (!v46)
          {
            v49 = v47;
            v50 = v48;
            (*(void (**)(char *, uint64_t))(v10 + 8))(v55, v56);
            v51 = (uint64_t)v58;
            v52 = (uint64_t *)((char *)v58 + v59[16]);
            *v52 = v49;
            v52[1] = v50;
            sub_224DDB408(v51, v53, type metadata accessor for ModelsR4.DocumentReference);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
            return sub_224DDEAA0(v51, type metadata accessor for ModelsR4.DocumentReference);
          }
          (*(void (**)(char *, uint64_t))(v10 + 8))(v55, v56);
          v20 = 1;
          v21 = 1;
          v22 = 1;
          v23 = 1;
          v24 = 1;
          v25 = 1;
          v26 = 1;
          v27 = 1;
          LODWORD(v55) = 1;
          LODWORD(v56) = 1;
        }
      }
    }
  }
  v28 = v58;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v20)
  {
    result = sub_224DE60AC(v28[4]);
    if (!v21)
    {
LABEL_6:
      if (!v22)
        goto LABEL_7;
      goto LABEL_17;
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  result = swift_bridgeObjectRelease();
  if (!v22)
  {
LABEL_7:
    if (!v23)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = swift_bridgeObjectRelease();
  if (!v23)
  {
LABEL_8:
    if (!v24)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_9:
    v30 = v59;
    if (!v25)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = swift_bridgeObjectRelease();
  v30 = v59;
  if (!v25)
  {
LABEL_10:
    if (!v26)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  result = sub_224DDB50C((uint64_t)v28 + v30[11], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v26)
  {
LABEL_11:
    if (!v27)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  result = swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_12:
    if (!(_DWORD)v55)
      goto LABEL_13;
LABEL_23:
    result = swift_bridgeObjectRelease();
    if (!(_DWORD)v56)
      return result;
    return sub_224DDB50C((uint64_t)v28 + v30[15], &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
  }
LABEL_22:
  result = swift_bridgeObjectRelease();
  if ((_DWORD)v55)
    goto LABEL_23;
LABEL_13:
  if (!(_DWORD)v56)
    return result;
  return sub_224DDB50C((uint64_t)v28 + v30[15], &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
}

uint64_t ModelsR4.Immunization.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t result;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  int *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  char v83;

  v70 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v71 = (uint64_t)v69 - v5;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v72 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v69 - v9;
  sub_224DFB77C(0, &qword_2557E05B8, (uint64_t (*)(void))sub_224DE6528, (uint64_t)&type metadata for ModelsR4.Immunization.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v74 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v69 - v13;
  v15 = type metadata accessor for ModelsR4.Immunization(0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (_QWORD *)((char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v79 = v16;
  sub_224DE6244(0, (unint64_t *)&qword_2557E05C8, v19);
  *v18 = sub_224F67BC8();
  v18[1] = v20;
  v18[2] = 0;
  v18[3] = 0;
  v75 = a1;
  v76 = v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE6528();
  v73 = v14;
  v21 = (uint64_t)v78;
  sub_224F6857C();
  v77 = (int *)v15;
  if (v21)
  {
    v78 = (char *)v21;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    LODWORD(v72) = 0;
    LODWORD(v73) = 0;
    LODWORD(v74) = 0;
  }
  else
  {
    v78 = v10;
    v22 = v15;
    LOBYTE(v79) = 0;
    v34 = sub_224F682AC();
    v36 = v35;
    swift_bridgeObjectRelease();
    v37 = v76;
    *v76 = v34;
    v37[1] = v36;
    LOBYTE(v79) = 1;
    v37[2] = sub_224F68264();
    v37[3] = v38;
    v83 = 2;
    sub_224DDAD48();
    sub_224F68294();
    v39 = v22;
    v37[4] = v79;
    LOBYTE(v79) = 3;
    v37[5] = sub_224F682AC();
    v37[6] = v40;
    v83 = 4;
    sub_224DE65D4();
    sub_224F68294();
    v41 = DWORD2(v79);
    v42 = BYTE12(v79);
    v37[7] = v79;
    *((_DWORD *)v37 + 16) = v41;
    *((_BYTE *)v37 + 68) = v42;
    sub_224DDEA0C(0, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v83 = 5;
    sub_224DE6170();
    sub_224F68294();
    v37[9] = v79;
    v43 = type metadata accessor for FHIRDateTime();
    LOBYTE(v79) = 6;
    v44 = sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68294();
    v69[1] = v44;
    v69[2] = v43;
    sub_224DFAC88((uint64_t)v78, (uint64_t)v37 + *(int *)(v39 + 40), &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    sub_224DFB644(0, &qword_2557E05D8);
    v83 = 7;
    sub_224DE6618();
    sub_224F68294();
    *(uint64_t *)((char *)v37 + *(int *)(v39 + 44)) = v79;
    LOBYTE(v79) = 8;
    v45 = (uint64_t)v72;
    sub_224F68294();
    v78 = 0;
    sub_224DFAC88(v45, (uint64_t)v37 + v77[12], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v83 = 9;
    sub_224DE60BC();
    v46 = (uint64_t)v78;
    sub_224F682DC();
    v78 = (char *)v46;
    if (v46)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v74);
      v29 = 0;
      v30 = 0;
      LODWORD(v72) = 0;
      LODWORD(v73) = 0;
      LODWORD(v74) = 0;
      v23 = 1;
      v24 = 1;
      v25 = 1;
      v26 = 1;
      v27 = 1;
      v28 = 1;
    }
    else
    {
      v47 = v80;
      v48 = (char *)v76 + v77[13];
      *(_OWORD *)v48 = v79;
      *((_QWORD *)v48 + 2) = v47;
      type metadata accessor for Reference();
      LOBYTE(v79) = 10;
      sub_224DDACD4(&qword_2557E0500, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
      v49 = (uint64_t)v78;
      sub_224F68294();
      v78 = (char *)v49;
      if (v49)
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v74);
        v30 = 0;
        LODWORD(v72) = 0;
        LODWORD(v73) = 0;
        LODWORD(v74) = 0;
        v23 = 1;
        v24 = 1;
        v25 = 1;
        v26 = 1;
        v27 = 1;
        v28 = 1;
        v29 = 1;
      }
      else
      {
        sub_224DFAC88(v71, (uint64_t)v76 + v77[14], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
        LOBYTE(v79) = 11;
        v50 = (uint64_t)v78;
        v51 = sub_224F68270();
        v78 = (char *)v50;
        if (v50
          || (*((_BYTE *)v76 + v77[15]) = v51,
              LOBYTE(v79) = 12,
              v52 = (uint64_t)v78,
              v53 = sub_224F68264(),
              (v78 = (char *)v52) != 0))
        {
          (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v74);
          LODWORD(v72) = 0;
          LODWORD(v73) = 0;
          LODWORD(v74) = 0;
          v23 = 1;
          v24 = 1;
          v25 = 1;
          v26 = 1;
          v27 = 1;
          v28 = 1;
          v29 = 1;
          v30 = 1;
        }
        else
        {
          v55 = (uint64_t *)((char *)v76 + v77[16]);
          *v55 = v53;
          v55[1] = v54;
          sub_224DDEA0C(0, &qword_2557E05F0, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
          v83 = 13;
          sub_224DE66E0();
          v56 = (uint64_t)v78;
          sub_224F68294();
          v78 = (char *)v56;
          if (v56)
          {
            (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v74);
            LODWORD(v73) = 0;
            LODWORD(v74) = 0;
            v23 = 1;
            v24 = 1;
            v25 = 1;
            v26 = 1;
            v27 = 1;
            v28 = 1;
            v29 = 1;
            v30 = 1;
            LODWORD(v72) = 1;
          }
          else
          {
            *(uint64_t *)((char *)v76 + v77[17]) = v79;
            LOBYTE(v79) = 14;
            v57 = sub_224F68270();
            v78 = 0;
            *((_BYTE *)v76 + v77[18]) = v57;
            v83 = 15;
            sub_224DE6770();
            v58 = (uint64_t)v78;
            sub_224F68294();
            v78 = (char *)v58;
            if (v58)
            {
              (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v74);
              LODWORD(v74) = 0;
              v23 = 1;
              v24 = 1;
              v25 = 1;
              v26 = 1;
              v27 = 1;
              v28 = 1;
              v29 = 1;
              v30 = 1;
              LODWORD(v72) = 1;
              LODWORD(v73) = 1;
            }
            else
            {
              v59 = v82;
              v60 = (char *)v76 + v77[19];
              v61 = v80;
              *(_OWORD *)v60 = v79;
              *((_OWORD *)v60 + 1) = v61;
              *((_OWORD *)v60 + 2) = v81;
              *((_QWORD *)v60 + 6) = v59;
              LOBYTE(v79) = 16;
              v62 = (uint64_t)v78;
              v63 = sub_224F68264();
              v78 = (char *)v62;
              if (!v62)
              {
                v65 = v63;
                v66 = v64;
                (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v74);
                v67 = (uint64_t)v76;
                v68 = (uint64_t *)((char *)v76 + v77[20]);
                *v68 = v65;
                v68[1] = v66;
                sub_224DDB408(v67, v70, type metadata accessor for ModelsR4.Immunization);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
                return sub_224DDEAA0(v67, type metadata accessor for ModelsR4.Immunization);
              }
              (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v74);
              v23 = 1;
              v24 = 1;
              v25 = 1;
              v26 = 1;
              v27 = 1;
              v28 = 1;
              v29 = 1;
              v30 = 1;
              LODWORD(v72) = 1;
              LODWORD(v73) = 1;
              LODWORD(v74) = 1;
            }
          }
        }
      }
    }
  }
  v31 = v76;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v23)
  {
    result = sub_224DE60AC(v31[4]);
    if (!v24)
    {
LABEL_6:
      if (!v25)
        goto LABEL_7;
      goto LABEL_18;
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  result = swift_bridgeObjectRelease();
  if (!v25)
  {
LABEL_7:
    v33 = v77;
    if (!v26)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = swift_bridgeObjectRelease();
  v33 = v77;
  if (!v26)
  {
LABEL_8:
    if (!v27)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = sub_224DDB50C((uint64_t)v31 + v33[10], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v27)
  {
LABEL_9:
    if (!v28)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_10:
    if (!v29)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = sub_224DDB50C((uint64_t)v31 + v33[12], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v29)
  {
LABEL_11:
    if (!v30)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v30)
  {
LABEL_12:
    if (!(_DWORD)v72)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = sub_224DDB50C((uint64_t)v31 + v33[14], &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (!(_DWORD)v72)
  {
LABEL_13:
    if (!(_DWORD)v73)
      goto LABEL_14;
LABEL_25:
    result = swift_bridgeObjectRelease();
    if (!(_DWORD)v74)
      return result;
    return sub_224DE656C(*(uint64_t *)((char *)v31 + v33[19]), *(uint64_t *)((char *)v31 + v33[19] + 8), *(uint64_t *)((char *)v31 + v33[19] + 16));
  }
LABEL_24:
  result = swift_bridgeObjectRelease();
  if ((_DWORD)v73)
    goto LABEL_25;
LABEL_14:
  if (!(_DWORD)v74)
    return result;
  return sub_224DE656C(*(uint64_t *)((char *)v31 + v33[19]), *(uint64_t *)((char *)v31 + v33[19] + 8), *(uint64_t *)((char *)v31 + v33[19] + 16));
}

uint64_t ModelsR4.Observation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t *v35;
  int *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t *v75;
  int *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char v80;

  v68 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v69 = (uint64_t)v66 - v5;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v3);
  MEMORY[0x24BDAC7A8](v6);
  v71 = (char *)v66 - v7;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v70 = (uint64_t)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v66 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v66 - v14;
  sub_224DFB77C(0, &qword_2557E0610, (uint64_t (*)(void))sub_224DE67B4, (uint64_t)&type metadata for ModelsR4.Observation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v72 = v16;
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v66 - v18;
  v20 = type metadata accessor for ModelsR4.Observation(0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (_QWORD *)((char *)v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = (int *)v21;
  *(_QWORD *)&v78 = v21;
  sub_224DE6244(0, (unint64_t *)&qword_2557E0620, v24);
  *v23 = sub_224F67BC8();
  v23[1] = v25;
  v23[2] = 0;
  v23[3] = 0;
  v74 = a1;
  v75 = v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE67B4();
  v73 = v19;
  v26 = v77;
  sub_224F6857C();
  if (v26)
  {
    v77 = v26;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    LODWORD(v67) = 0;
    LODWORD(v68) = 0;
    LODWORD(v69) = 0;
    LODWORD(v70) = 0;
    LODWORD(v71) = 0;
    LODWORD(v72) = 0;
    LODWORD(v73) = 0;
  }
  else
  {
    v27 = (uint64_t)v13;
    v67 = v17;
    LOBYTE(v78) = 0;
    v38 = sub_224F682AC();
    v40 = v39;
    swift_bridgeObjectRelease();
    v41 = v75;
    *v75 = v38;
    v41[1] = v40;
    LOBYTE(v78) = 1;
    v42 = sub_224F68264();
    v43 = v76;
    v41[2] = v42;
    v41[3] = v44;
    v80 = 2;
    sub_224DDAD48();
    sub_224F68294();
    v41[4] = v78;
    LOBYTE(v78) = 3;
    v41[5] = sub_224F682AC();
    v41[6] = v45;
    sub_224DFB644(0, &qword_2557E04E0);
    v80 = 4;
    sub_224DE6100();
    sub_224F68294();
    v41[7] = v78;
    v80 = 5;
    v46 = sub_224DE60BC();
    sub_224F682DC();
    v66[1] = v46;
    v47 = v79;
    *((_OWORD *)v41 + 4) = v78;
    v41[10] = v47;
    type metadata accessor for FHIRDateTime();
    LOBYTE(v78) = 6;
    v66[2] = sub_224DDACD4(&qword_2557E04F0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68294();
    sub_224DFAC88((uint64_t)v15, (uint64_t)v41 + v43[10], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    LOBYTE(v78) = 7;
    sub_224F68294();
    sub_224DFAC88(v27, (uint64_t)v41 + v43[11], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    type metadata accessor for Period();
    LOBYTE(v78) = 8;
    sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    v48 = (uint64_t)v71;
    sub_224F68294();
    v77 = 0;
    sub_224DFAC88(v48, (uint64_t)v41 + v43[12], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    LOBYTE(v78) = 9;
    v49 = v77;
    sub_224F68294();
    v77 = v49;
    if (v49)
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v72);
      LODWORD(v67) = 0;
      LODWORD(v68) = 0;
      LODWORD(v69) = 0;
      LODWORD(v70) = 0;
      LODWORD(v71) = 0;
      LODWORD(v72) = 0;
      LODWORD(v73) = 0;
      v28 = 1;
      v29 = 1;
      v30 = 1;
      v31 = 1;
      v32 = 1;
      v33 = 1;
      v34 = 1;
    }
    else
    {
      sub_224DFAC88(v70, (uint64_t)v75 + v76[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEA0C(0, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
      v80 = 10;
      sub_224DE6170();
      v50 = v77;
      sub_224F68294();
      v77 = v50;
      if (v50)
      {
        (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v72);
        LODWORD(v68) = 0;
        LODWORD(v69) = 0;
        LODWORD(v70) = 0;
        LODWORD(v71) = 0;
        LODWORD(v72) = 0;
        LODWORD(v73) = 0;
        v28 = 1;
        v29 = 1;
        v30 = 1;
        v31 = 1;
        v32 = 1;
        v33 = 1;
        v34 = 1;
        LODWORD(v67) = 1;
      }
      else
      {
        *(uint64_t *)((char *)v75 + v76[14]) = v78;
        sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
        v80 = 11;
        sub_224DE630C();
        v51 = v77;
        sub_224F68294();
        v77 = v51;
        if (v51)
        {
          (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v72);
          LODWORD(v69) = 0;
          LODWORD(v70) = 0;
          LODWORD(v71) = 0;
          LODWORD(v72) = 0;
          LODWORD(v73) = 0;
          v28 = 1;
          v29 = 1;
          v30 = 1;
          v31 = 1;
          v32 = 1;
          v33 = 1;
          v34 = 1;
          LODWORD(v67) = 1;
          LODWORD(v68) = 1;
        }
        else
        {
          *(uint64_t *)((char *)v75 + v76[15]) = v78;
          LOBYTE(v78) = 12;
          v52 = sub_224F68264();
          v77 = 0;
          v53 = (uint64_t *)((char *)v75 + v76[16]);
          *v53 = v52;
          v53[1] = v54;
          v80 = 13;
          v55 = v77;
          sub_224F68294();
          v77 = v55;
          if (v55)
          {
            (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v72);
            LODWORD(v71) = 0;
            LODWORD(v72) = 0;
            LODWORD(v73) = 0;
            v28 = 1;
            v29 = 1;
            v30 = 1;
            v31 = 1;
            v32 = 1;
            v33 = 1;
            v34 = 1;
            LODWORD(v67) = 1;
            LODWORD(v68) = 1;
            LODWORD(v69) = 1;
            LODWORD(v70) = 1;
          }
          else
          {
            v56 = v79;
            v57 = (char *)v75 + v76[17];
            *(_OWORD *)v57 = v78;
            *((_QWORD *)v57 + 2) = v56;
            type metadata accessor for Quantity();
            LOBYTE(v78) = 14;
            sub_224DDACD4(&qword_2557E0628, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
            v58 = v77;
            sub_224F68294();
            v77 = v58;
            if (v58)
            {
              (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v72);
              LODWORD(v72) = 0;
              LODWORD(v73) = 0;
              v28 = 1;
              v29 = 1;
              v30 = 1;
              v31 = 1;
              v32 = 1;
              v33 = 1;
              v34 = 1;
              LODWORD(v67) = 1;
              LODWORD(v68) = 1;
              LODWORD(v69) = 1;
              LODWORD(v70) = 1;
              LODWORD(v71) = 1;
            }
            else
            {
              sub_224DFAC88(v69, (uint64_t)v75 + v76[18], &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
              sub_224DDEA0C(0, &qword_2557E0630, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
              v80 = 15;
              sub_224DE67F8();
              v59 = v77;
              sub_224F68294();
              v77 = v59;
              if (!v59)
              {
                *(uint64_t *)((char *)v75 + v76[19]) = v78;
                LOBYTE(v78) = 16;
                v60 = sub_224F68264();
                v77 = 0;
                v61 = v60;
                v63 = v62;
                (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v72);
                v64 = (uint64_t)v75;
                v65 = (uint64_t *)((char *)v75 + v76[20]);
                *v65 = v61;
                v65[1] = v63;
                sub_224DDB408(v64, v68, type metadata accessor for ModelsR4.Observation);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
                return sub_224DDEAA0(v64, type metadata accessor for ModelsR4.Observation);
              }
              (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v72);
              LODWORD(v73) = 0;
              v28 = 1;
              v29 = 1;
              v30 = 1;
              v31 = 1;
              v32 = 1;
              v33 = 1;
              v34 = 1;
              LODWORD(v67) = 1;
              LODWORD(v68) = 1;
              LODWORD(v69) = 1;
              LODWORD(v70) = 1;
              LODWORD(v71) = 1;
              LODWORD(v72) = 1;
            }
          }
        }
      }
    }
  }
  v35 = v75;
  v36 = v76;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v28)
  {
    result = sub_224DE60AC(v35[4]);
    if (!v29)
    {
LABEL_6:
      if (!v30)
        goto LABEL_7;
      goto LABEL_22;
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  result = swift_bridgeObjectRelease();
  if (!v30)
  {
LABEL_7:
    if (!v31)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  result = swift_bridgeObjectRelease();
  if (!v31)
  {
LABEL_8:
    if (!v32)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (!v32)
  {
LABEL_9:
    if (!v33)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = sub_224DDB50C((uint64_t)v35 + v36[10], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v33)
  {
LABEL_10:
    if (!v34)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = sub_224DDB50C((uint64_t)v35 + v36[11], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if (!v34)
  {
LABEL_11:
    if (!(_DWORD)v67)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_26:
  result = sub_224DDB50C((uint64_t)v35 + v36[12], &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((_DWORD)v67)
LABEL_12:
    result = sub_224DDB50C((uint64_t)v35 + v36[13], &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_13:
  if ((_DWORD)v68)
  {
    result = swift_bridgeObjectRelease();
    if (!(_DWORD)v69)
    {
LABEL_15:
      if (!(_DWORD)v70)
        goto LABEL_16;
      goto LABEL_30;
    }
  }
  else if (!(_DWORD)v69)
  {
    goto LABEL_15;
  }
  result = swift_bridgeObjectRelease();
  if (!(_DWORD)v70)
  {
LABEL_16:
    if (!(_DWORD)v71)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  result = swift_bridgeObjectRelease();
  if (!(_DWORD)v71)
  {
LABEL_17:
    if (!(_DWORD)v72)
      goto LABEL_18;
LABEL_32:
    result = sub_224DDB50C((uint64_t)v35 + v36[18], &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
    if (!(_DWORD)v73)
      return result;
    return swift_bridgeObjectRelease();
  }
LABEL_31:
  result = sub_224DDB480(*(uint64_t *)((char *)v35 + v36[17]), *(uint64_t *)((char *)v35 + v36[17] + 8));
  if ((_DWORD)v72)
    goto LABEL_32;
LABEL_18:
  if (!(_DWORD)v73)
    return result;
  return swift_bridgeObjectRelease();
}

uint64_t ModelsR4.Patient.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  ValueMetadata *v28;
  ValueMetadata *v29;
  ValueMetadata *v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  ValueMetadata *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  ValueMetadata *v49;
  ValueMetadata *v50;
  ValueMetadata *v51;
  ValueMetadata *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  ValueMetadata *v63;
  ValueMetadata *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  ValueMetadata *v70;
  ValueMetadata *v71;
  ValueMetadata *v72;
  ValueMetadata *v73;
  ValueMetadata *v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  ValueMetadata *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  ValueMetadata *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  ValueMetadata *v94;
  int v95;
  char v96;
  __int16 v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  ValueMetadata *v101;
  ValueMetadata *v102;
  ValueMetadata *v103;
  ValueMetadata *v104;
  __int128 v105;
  uint64_t v106;
  ValueMetadata *v107;
  ValueMetadata *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int16 v112;
  char v113;
  char v114;
  uint64_t v115;

  sub_224DFB77C(0, &qword_2557E0648, (uint64_t (*)(void))sub_224DE6888, (uint64_t)&type metadata for ModelsR4.Patient.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v76 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v57 - v7;
  v90 = &type metadata for ModelsR4.Patient;
  sub_224DE68CC();
  sub_224F67BC8();
  v115 = v9;
  v10 = a1[3];
  v77 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_224DE6888();
  v75 = v8;
  sub_224F6857C();
  if (v2)
  {
    v79 = v2;
    v78 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    goto LABEL_4;
  }
  v11 = v6;
  LOBYTE(v90) = 0;
  v19 = sub_224F682AC();
  v21 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  LOBYTE(v90) = 1;
  v22 = sub_224F68264();
  v24 = v23;
  v115 = v22;
  LOBYTE(v80) = 2;
  sub_224DE65D4();
  swift_bridgeObjectRetain();
  sub_224F68294();
  v66 = v24;
  v67 = v21;
  v64 = v90;
  v65 = v91;
  LODWORD(v24) = BYTE4(v91);
  v114 = BYTE4(v91);
  LOBYTE(v90) = 3;
  v25 = sub_224F68264();
  v61 = v24;
  v62 = v25;
  v63 = (ValueMetadata *)v19;
  v27 = v26;
  sub_224DDEA0C(0, &qword_2557E0660, type metadata accessor for ModelsR4.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  LOBYTE(v80) = 4;
  sub_224DE6918();
  swift_bridgeObjectRetain();
  sub_224F682DC();
  v28 = v90;
  sub_224DFB644(0, &qword_2557E0678);
  LOBYTE(v80) = 5;
  sub_224DE69A8();
  swift_bridgeObjectRetain();
  sub_224F68294();
  v70 = v28;
  v29 = v90;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E0690, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  LOBYTE(v80) = 6;
  sub_224DE6A5C();
  swift_bridgeObjectRetain();
  sub_224F68294();
  v74 = v29;
  v30 = v90;
  sub_224DFB644(0, &qword_2557E06A8);
  LOBYTE(v80) = 7;
  sub_224DE6AEC();
  v73 = v30;
  swift_bridgeObjectRetain();
  sub_224F68294();
  v31 = v90;
  LOBYTE(v80) = 8;
  sub_224DE60BC();
  swift_bridgeObjectRetain();
  sub_224F68294();
  v79 = 0;
  v72 = v31;
  v60 = v27;
  v32 = (uint64_t)v90;
  v33 = v91;
  v34 = v92;
  sub_224DDEA0C(0, &qword_2557E06C0, type metadata accessor for ModelsR4.PatientLink, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  LOBYTE(v80) = 9;
  *(_QWORD *)&v68 = v32;
  *((_QWORD *)&v68 + 1) = v33;
  v69 = v34;
  sub_224DDB44C(v32, v33);
  sub_224DE6BE8();
  v35 = v79;
  sub_224F68294();
  v79 = v35;
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v75, v76);
    sub_224DDB480(v68, *((uint64_t *)&v68 + 1));
    v36 = v67;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v78 = 0;
LABEL_22:
    v17 = 0;
    v12 = 1;
    v115 = v36;
    v13 = 1;
    v14 = 1;
    v15 = 1;
    v16 = 1;
    goto LABEL_4;
  }
  v37 = v90;
  sub_224DDEA0C(0, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  LOBYTE(v80) = 10;
  sub_224DE627C();
  v78 = v37;
  swift_bridgeObjectRetain();
  v38 = v79;
  sub_224F68294();
  v79 = v38;
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v75, v76);
    swift_bridgeObjectRelease();
    sub_224DDB480(v68, *((uint64_t *)&v68 + 1));
    v36 = v67;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v111 = 11;
  v71 = v90;
  swift_bridgeObjectRetain();
  v39 = v79;
  v40 = sub_224F68264();
  v79 = v39;
  if (!v39)
  {
    v43 = v40;
    v44 = v41;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v75, v76);
    *(_QWORD *)&v80 = v63;
    *((_QWORD *)&v80 + 1) = v67;
    *(_QWORD *)&v81 = v115;
    *((_QWORD *)&v81 + 1) = v66;
    *(_QWORD *)&v82 = v64;
    DWORD2(v82) = v65;
    BYTE12(v82) = v61;
    *(_QWORD *)&v83 = v62;
    *((_QWORD *)&v83 + 1) = v60;
    *(_QWORD *)&v84 = v70;
    *((_QWORD *)&v84 + 1) = v74;
    *(_QWORD *)&v85 = v73;
    *((_QWORD *)&v85 + 1) = v72;
    v45 = v68;
    v86 = v68;
    *(_QWORD *)&v87 = v69;
    *((_QWORD *)&v87 + 1) = v78;
    *(_QWORD *)&v88 = v71;
    *((_QWORD *)&v88 + 1) = v43;
    v58 = v44;
    v59 = v43;
    v89 = v44;
    sub_224DE6C78((uint64_t)&v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDB480(v45, *((uint64_t *)&v45 + 1));
    v46 = v67;
    swift_bridgeObjectRelease();
    v47 = v66;
    swift_bridgeObjectRelease();
    v48 = v60;
    swift_bridgeObjectRelease();
    v49 = v70;
    swift_bridgeObjectRelease();
    v50 = v74;
    swift_bridgeObjectRelease();
    v51 = v73;
    swift_bridgeObjectRelease();
    v52 = v72;
    swift_bridgeObjectRelease();
    v53 = v87;
    *(_OWORD *)(a2 + 96) = v86;
    *(_OWORD *)(a2 + 112) = v53;
    *(_OWORD *)(a2 + 128) = v88;
    *(_QWORD *)(a2 + 144) = v89;
    v54 = v83;
    *(_OWORD *)(a2 + 32) = v82;
    *(_OWORD *)(a2 + 48) = v54;
    v55 = v85;
    *(_OWORD *)(a2 + 64) = v84;
    *(_OWORD *)(a2 + 80) = v55;
    v56 = v81;
    *(_OWORD *)a2 = v80;
    *(_OWORD *)(a2 + 16) = v56;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
    v90 = v63;
    v91 = v46;
    v92 = v115;
    v93 = v47;
    v94 = v64;
    v95 = v65;
    v96 = v114;
    v97 = v112;
    v98 = v113;
    v99 = v62;
    v100 = v48;
    v101 = v49;
    v102 = v50;
    v103 = v51;
    v104 = v52;
    v105 = v68;
    v106 = v69;
    v107 = v78;
    v108 = v71;
    v109 = v59;
    v110 = v58;
    return sub_224DE6D48((uint64_t)&v90);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v75, v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDB480(v68, *((uint64_t *)&v68 + 1));
  v42 = v67;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = 1;
  v115 = v42;
  v13 = 1;
  v14 = 1;
  v15 = 1;
  v16 = 1;
  v17 = 1;
LABEL_4:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
    swift_bridgeObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRelease();
    if (!v14)
    {
LABEL_8:
      if (!v15)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if (!v14)
  {
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  if (!v15)
  {
LABEL_9:
    if (!v16)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  if (v16)
LABEL_10:
    sub_224DDB480(v68, *((uint64_t *)&v68 + 1));
LABEL_11:
  swift_bridgeObjectRelease();
  result = (uint64_t)v71;
  if (v17)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t ModelsR4.ResourceProxy.encode(to:)()
{
  _QWORD v1[4];

  ModelsR4.ResourceProxy.get()();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_224F67B08();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

void ModelsR4.ResourceProxy.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for ModelsR4.Observation(0);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for ModelsR4.Immunization(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for ModelsR4.DocumentReference(0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for ModelsR4.Condition(0);
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for ModelsR4.ResourceProxy(0);
  MEMORY[0x24BDAC7A8](v6);
  sub_224DDB408(v0, (uint64_t)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v9 = (char *)sub_224DE57C8 + 4 * byte_224F6B1A9[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224DE57C8()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v2 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[7];
  *v0 = v1[6];
  v0[1] = v6;
  sub_224F6851C();
  v0[22] = v3;
  v0[23] = v2;
  v0[24] = v5;
  v0[25] = v4;
  v0[26] = v0[1];
  v0[27] = v7;
  v0[28] = *v0;
  v0[29] = v8;
  ModelsR4.Binary.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ModelsR4.ResourceProxy.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.ResourceProxy.hash(into:));
}

uint64_t sub_224DE5B64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.ResourceProxy.init(from:)(a1, a2);
}

uint64_t sub_224DE5B78()
{
  _QWORD v1[4];

  ModelsR4.ResourceProxy.get()();
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_224F67B08();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t sub_224DE5BF0(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.ResourceProxy.hash(into:));
}

uint64_t sub_224DE5C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.ResourceProxy.hash(into:));
}

uint64_t ModelsR4.Binary.resourceType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Binary.resourceType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsR4.Binary.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Binary.contentType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Binary.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Binary.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Binary.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[3];
  v2 = v0[5];
  v3 = v0[7];
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
LABEL_6:
    sub_224F68528();
    if (v3)
      goto LABEL_4;
    return sub_224F68528();
  }
  sub_224F68528();
  if (!v2)
    goto LABEL_6;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_4:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    return swift_bridgeObjectRelease();
  }
  return sub_224F68528();
}

unint64_t sub_224DE5E44()
{
  unint64_t result;

  result = qword_2557E0468;
  if (!qword_2557E0468)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D85C, &type metadata for ModelsR4.ResourceProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0468);
  }
  return result;
}

uint64_t sub_224DE5E88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_224DE5ECC()
{
  unint64_t result;

  result = qword_2557E0478;
  if (!qword_2557E0478)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D80C, &type metadata for ModelsR4.Binary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0478);
  }
  return result;
}

unint64_t sub_224DE5F10()
{
  unint64_t result;

  result = qword_2557E0480;
  if (!qword_2557E0480)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E0480);
  }
  return result;
}

unint64_t sub_224DE5F48()
{
  unint64_t result;

  result = qword_2557E0490;
  if (!qword_2557E0490)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D7BC, &type metadata for ModelsR4.Bundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0490);
  }
  return result;
}

unint64_t sub_224DE5F8C()
{
  unint64_t result;

  result = qword_2557E0498;
  if (!qword_2557E0498)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E0498);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.Bundle.BundleEntry(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E0B98);
}

unint64_t sub_224DE5FD8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E04A8;
  if (!qword_2557E04A8)
  {
    sub_224DDEA0C(255, &qword_2557E04A0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E04B0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsR4.Bundle.BundleEntry);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E04A8);
  }
  return result;
}

unint64_t sub_224DE6068()
{
  unint64_t result;

  result = qword_2557E04C8;
  if (!qword_2557E04C8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D76C, &type metadata for ModelsR4.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E04C8);
  }
  return result;
}

uint64_t sub_224DE60AC(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_224DE60BC()
{
  unint64_t result;

  result = qword_2557E04D8;
  if (!qword_2557E04D8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for CodeableConcept, &type metadata for CodeableConcept);
    atomic_store(result, (unint64_t *)&qword_2557E04D8);
  }
  return result;
}

unint64_t sub_224DE6100()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E04E8;
  if (!qword_2557E04E8)
  {
    sub_224DFB644(255, &qword_2557E04E0);
    v2 = v1;
    v3 = sub_224DE60BC();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E04E8);
  }
  return result;
}

unint64_t sub_224DE6170()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0510;
  if (!qword_2557E0510)
  {
    sub_224DDEA0C(255, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0518, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t)&protocol conformance descriptor for Annotation);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0510);
  }
  return result;
}

unint64_t sub_224DE6200()
{
  unint64_t result;

  result = qword_2557E0528;
  if (!qword_2557E0528)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D71C, &type metadata for ModelsR4.DiagnosticReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0528);
  }
  return result;
}

uint64_t sub_224DE6244(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    result = swift_getMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_224DE627C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0540;
  if (!qword_2557E0540)
  {
    sub_224DDEA0C(255, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0548, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t)&protocol conformance descriptor for Extension);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0540);
  }
  return result;
}

unint64_t sub_224DE630C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0558;
  if (!qword_2557E0558)
  {
    sub_224DDEA0C(255, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0500, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0558);
  }
  return result;
}

unint64_t sub_224DE639C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0568;
  if (!qword_2557E0568)
  {
    sub_224DDEA0C(255, &qword_2557E0560, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0570, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0568);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.DocumentReferenceContext(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E0F18);
}

unint64_t sub_224DE6440()
{
  unint64_t result;

  result = qword_2557E0588;
  if (!qword_2557E0588)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D6CC, &type metadata for ModelsR4.DocumentReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0588);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.DocumentReferenceContent(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E0E88);
}

unint64_t sub_224DE6498()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E05A0;
  if (!qword_2557E05A0)
  {
    sub_224DDEA0C(255, &qword_2557E0598, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E05A8, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContent);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E05A0);
  }
  return result;
}

unint64_t sub_224DE6528()
{
  unint64_t result;

  result = qword_2557E05C0;
  if (!qword_2557E05C0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D67C, &type metadata for ModelsR4.Immunization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E05C0);
  }
  return result;
}

uint64_t sub_224DE656C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    sub_224DDB480(a2, a3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_224DE65D4()
{
  unint64_t result;

  result = qword_2557E05D0;
  if (!qword_2557E05D0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for FHIRDate, &type metadata for FHIRDate);
    atomic_store(result, (unint64_t *)&qword_2557E05D0);
  }
  return result;
}

unint64_t sub_224DE6618()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E05E0;
  if (!qword_2557E05E0)
  {
    sub_224DFB644(255, &qword_2557E05D8);
    v2 = v1;
    v3 = sub_224DE6688();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E05E0);
  }
  return result;
}

unint64_t sub_224DE6688()
{
  unint64_t result;

  result = qword_2557E05E8;
  if (!qword_2557E05E8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.ImmunizationProtocol, &type metadata for ModelsR4.ImmunizationProtocol);
    atomic_store(result, (unint64_t *)&qword_2557E05E8);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.ImmunizationPerformer(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E1078);
}

unint64_t sub_224DE66E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E05F8;
  if (!qword_2557E05F8)
  {
    sub_224DDEA0C(255, &qword_2557E05F0, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0600, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t)&protocol conformance descriptor for ModelsR4.ImmunizationPerformer);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E05F8);
  }
  return result;
}

unint64_t sub_224DE6770()
{
  unint64_t result;

  result = qword_2557E0608;
  if (!qword_2557E0608)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Location, &type metadata for Location);
    atomic_store(result, (unint64_t *)&qword_2557E0608);
  }
  return result;
}

unint64_t sub_224DE67B4()
{
  unint64_t result;

  result = qword_2557E0618;
  if (!qword_2557E0618)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D62C, &type metadata for ModelsR4.Observation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0618);
  }
  return result;
}

unint64_t sub_224DE67F8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0638;
  if (!qword_2557E0638)
  {
    sub_224DDEA0C(255, &qword_2557E0630, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0640, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t)&protocol conformance descriptor for ReferenceRange);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0638);
  }
  return result;
}

unint64_t sub_224DE6888()
{
  unint64_t result;

  result = qword_2557E0650;
  if (!qword_2557E0650)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D5DC, &type metadata for ModelsR4.Patient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0650);
  }
  return result;
}

unint64_t sub_224DE68CC()
{
  unint64_t result;

  result = qword_2557E0658;
  if (!qword_2557E0658)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E0658);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.HumanName(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E11D8);
}

unint64_t sub_224DE6918()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0668;
  if (!qword_2557E0668)
  {
    sub_224DDEA0C(255, &qword_2557E0660, type metadata accessor for ModelsR4.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0670, type metadata accessor for ModelsR4.HumanName, (uint64_t)&protocol conformance descriptor for ModelsR4.HumanName);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0668);
  }
  return result;
}

unint64_t sub_224DE69A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E0680;
  if (!qword_2557E0680)
  {
    sub_224DFB644(255, &qword_2557E0678);
    v2 = v1;
    v3 = sub_224DE6A18();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0680);
  }
  return result;
}

unint64_t sub_224DE6A18()
{
  unint64_t result;

  result = qword_2557E0688;
  if (!qword_2557E0688)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ContactPoint, &type metadata for ContactPoint);
    atomic_store(result, (unint64_t *)&qword_2557E0688);
  }
  return result;
}

unint64_t sub_224DE6A5C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0698;
  if (!qword_2557E0698)
  {
    sub_224DDEA0C(255, (unint64_t *)&qword_2557E0690, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E06A0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&protocol conformance descriptor for Identifier);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0698);
  }
  return result;
}

unint64_t sub_224DE6AEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E06B0;
  if (!qword_2557E06B0)
  {
    sub_224DFB644(255, &qword_2557E06A8);
    v2 = v1;
    v3 = sub_224DE6B5C();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E06B0);
  }
  return result;
}

unint64_t sub_224DE6B5C()
{
  unint64_t result;

  result = qword_2557E06B8;
  if (!qword_2557E06B8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Address, &type metadata for Address);
    atomic_store(result, (unint64_t *)&qword_2557E06B8);
  }
  return result;
}

uint64_t type metadata accessor for ModelsR4.PatientLink(uint64_t a1)
{
  return sub_224DE6BB4(a1, qword_2557E1280);
}

uint64_t sub_224DE6BB4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_224DE6BE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E06C8;
  if (!qword_2557E06C8)
  {
    sub_224DDEA0C(255, &qword_2557E06C0, type metadata accessor for ModelsR4.PatientLink, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E06D0, type metadata accessor for ModelsR4.PatientLink, (uint64_t)&protocol conformance descriptor for ModelsR4.PatientLink);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E06C8);
  }
  return result;
}

uint64_t sub_224DE6C78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224DDB44C(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_224DE6D48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDB480(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_224DE6E20()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224DE6E58 + 4 * byte_224F6B1B2[*v0]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224DE6E58()
{
  return 0x54746E65746E6F63;
}

uint64_t sub_224DE6E78()
{
  return 1635017060;
}

uint64_t sub_224DE6E88()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224DE6EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E4E6D4(a1, a2);
  *a3 = result;
  return result;
}

void sub_224DE6EC4(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_224DE6ED0()
{
  sub_224DE5ECC();
  return sub_224F685B8();
}

uint64_t sub_224DE6EF8()
{
  sub_224DE5ECC();
  return sub_224F685C4();
}

uint64_t ModelsR4.Binary.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];
  char v14;
  char v15;
  char v16;
  char v17;

  sub_224DFB77C(0, &qword_2557E06D8, (uint64_t (*)(void))sub_224DE5ECC, (uint64_t)&type metadata for ModelsR4.Binary.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v13 - v6;
  v8 = v1[2];
  v13[5] = v1[3];
  v13[6] = v8;
  v9 = v1[4];
  v13[3] = v1[5];
  v13[4] = v9;
  v10 = v1[6];
  v13[1] = v1[7];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE5ECC();
  sub_224F68594();
  v17 = 0;
  v11 = v13[7];
  sub_224F68348();
  if (!v11)
  {
    v16 = 1;
    sub_224F68300();
    v15 = 2;
    sub_224F68300();
    v14 = 3;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsR4.Binary.hashValue.getter()
{
  sub_224F68510();
  ModelsR4.Binary.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224DE7138()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_224DE7164()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_224DE7190@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ModelsR4.Binary.init(from:)(a1, a2);
}

uint64_t sub_224DE71A4(_QWORD *a1)
{
  return ModelsR4.Binary.encode(to:)(a1);
}

uint64_t sub_224DE71B8()
{
  sub_224F68510();
  ModelsR4.Binary.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224DE7214()
{
  sub_224F68510();
  ModelsR4.Binary.hash(into:)();
  return sub_224F6854C();
}

uint64_t ModelsR4.Bundle.resourceType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Bundle.resourceType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsR4.Bundle.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t sub_224DE72DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_224F16580(*a1, *a2);
}

uint64_t sub_224DE72E8()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224DE7368()
{
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224DE73C4()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224DE7440@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_224DE749C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6C72556C6C7566;
  if (*v1)
    v2 = 0x656372756F736572;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_224DE74DC()
{
  _BYTE *v0;

  if (*v0)
    return 0x656372756F736572;
  else
    return 0x6C72556C6C7566;
}

uint64_t sub_224DE7518@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_224DE7578(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_224DE7584()
{
  sub_224DFAC44();
  return sub_224F685B8();
}

uint64_t sub_224DE75AC()
{
  sub_224DFAC44();
  return sub_224F685C4();
}

uint64_t ModelsR4.Bundle.BundleEntry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unsigned __int8 v41;
  char v42;

  v36 = a2;
  sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v37 = (char *)&v34 - v4;
  sub_224DFB77C(0, &qword_2557E06E0, (uint64_t (*)(void))sub_224DFAC44, (uint64_t)&type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *((_QWORD *)v5 - 1);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v34 - v8;
  v10 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFAC44();
  v13 = v38;
  sub_224F6857C();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v14 = (uint64_t)v37;
  v38 = v7;
  LOBYTE(v39) = 0;
  v16 = v12;
  *v12 = sub_224F68264();
  v12[1] = v17;
  type metadata accessor for ModelsR4.ResourceProxy(0);
  LOBYTE(v39) = 1;
  sub_224DDACD4((unint64_t *)&qword_2557E06F0, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsR4.ResourceProxy);
  sub_224F68294();
  v18 = v10;
  sub_224DFAC88(v14, (uint64_t)v16 + *(int *)(v10 + 20), &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
  v42 = 1;
  sub_224DFACE0();
  sub_224F68294();
  v19 = (uint64_t)v16;
  v35 = v9;
  v37 = v6;
  v21 = v39;
  v20 = v40;
  v22 = v41;
  v23 = (uint64_t)a1;
  if (qword_2557E0120 != -1)
  {
    v33 = v40;
    swift_once();
    v20 = v33;
  }
  if (v22 == 255)
    v24 = 0;
  else
    v24 = v21;
  if (v22 == 255)
    v25 = 0;
  else
    v25 = v20;
  if (v22 == 255)
    v26 = 5;
  else
    v26 = v22;
  v39 = v24;
  v40 = v25;
  v41 = v26;
  v27 = v20;
  sub_224DFAD24(v21, v20, v22);
  sub_224DFAD74();
  v28 = sub_224F672D4();
  v29 = v38;
  v34 = v28;
  v31 = v30;
  sub_224DFADB8(v21, v27, v22);
  sub_224DFADB8(v21, v27, v22);
  (*(void (**)(char *, char *))(v29 + 8))(v35, v37);
  v32 = (uint64_t *)(v19 + *(int *)(v18 + 24));
  *v32 = v34;
  v32[1] = v31;
  sub_224DDB408(v19, v36, type metadata accessor for ModelsR4.Bundle.BundleEntry);
  __swift_destroy_boxed_opaque_existential_1(v23);
  return sub_224DDEAA0(v19, type metadata accessor for ModelsR4.Bundle.BundleEntry);
}

uint64_t ModelsR4.Bundle.BundleEntry.fullURL.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Bundle.BundleEntry.resource.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEBE98(type metadata accessor for ModelsR4.Bundle.BundleEntry, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, a1);
}

uint64_t ModelsR4.Bundle.BundleEntry.rawResourceData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for ModelsR4.Bundle.BundleEntry(0) + 24);
  v2 = *(_QWORD *)v1;
  sub_224DDE970(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t ModelsR4.Bundle.BundleEntry.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E0330, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  if (*(_QWORD *)(v0 + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v9 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
  sub_224DDB4B4(v0 + *(int *)(v9 + 20), (uint64_t)v8, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v8, (uint64_t)v4, type metadata accessor for ModelsR4.ResourceProxy);
    sub_224F68528();
    ModelsR4.ResourceProxy.hash(into:)();
    sub_224DDEAA0((uint64_t)v4, type metadata accessor for ModelsR4.ResourceProxy);
  }
  v10 = (uint64_t *)(v0 + *(int *)(v9 + 24));
  v11 = *v10;
  v12 = v10[1];
  sub_224DDE970(*v10, v12);
  sub_224F67664();
  return sub_224DDE9B4(v11, v12);
}

uint64_t ModelsR4.Bundle.BundleEntry.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;

  sub_224DFB77C(0, &qword_2557E0708, (uint64_t (*)(void))sub_224DFAC44, (uint64_t)&type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFAC44();
  sub_224F68594();
  v11 = 0;
  sub_224F68300();
  if (!v1)
  {
    type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
    v10 = 1;
    type metadata accessor for ModelsR4.ResourceProxy(0);
    sub_224DDACD4(&qword_2557E0710, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsR4.ResourceProxy);
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsR4.Bundle.BundleEntry.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.Bundle.BundleEntry.hash(into:));
}

uint64_t sub_224DE7DF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Bundle.BundleEntry.init(from:)(a1, a2);
}

uint64_t sub_224DE7E04(_QWORD *a1)
{
  return ModelsR4.Bundle.BundleEntry.encode(to:)(a1);
}

uint64_t sub_224DE7E18(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.Bundle.BundleEntry.hash(into:));
}

uint64_t sub_224DE7E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.Bundle.BundleEntry.hash(into:));
}

uint64_t ModelsR4.Bundle.entry.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Bundle.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Bundle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v3)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDE3B0(a1, v3);
    swift_bridgeObjectRelease();
    if (v4)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_224F68528();
    if (v4)
      goto LABEL_3;
  }
  return sub_224F68528();
}

uint64_t sub_224DE7F58()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7972746E65;
  if (*v0 != 1)
    v1 = 0x65676175676E616CLL;
  if (*v0)
    return v1;
  else
    return 0x656372756F736572;
}

uint64_t sub_224DE7FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E4E8AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_224DE7FDC(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_224DE7FE8()
{
  sub_224DE5F48();
  return sub_224F685B8();
}

uint64_t sub_224DE8010()
{
  sub_224DE5F48();
  return sub_224F685C4();
}

uint64_t ModelsR4.Bundle.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  sub_224DFB77C(0, &qword_2557E0718, (uint64_t (*)(void))sub_224DE5F48, (uint64_t)&type metadata for ModelsR4.Bundle.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v11 - v6;
  v8 = v1[2];
  v11[2] = v1[3];
  v12 = v8;
  v11[1] = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE5F48();
  sub_224F68594();
  v17 = 0;
  v9 = v13;
  sub_224F68348();
  if (!v9)
  {
    v14 = v12;
    v16 = 1;
    sub_224DDEA0C(0, &qword_2557E04A0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFAE08();
    sub_224F68330();
    v15 = 2;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsR4.Bundle.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE3B0((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224DE82D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_224DE8300@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ModelsR4.Bundle.init(from:)(a1, a2);
}

uint64_t sub_224DE8314(_QWORD *a1)
{
  return ModelsR4.Bundle.encode(to:)(a1);
}

uint64_t sub_224DE8330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE3B0((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t (*ModelsR4.Condition.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsR4.Condition.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Condition.clinicalStatus.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[5];
  v3 = v1[6];
  v4 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t ModelsR4.Condition.verificationStatus.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[8];
  v3 = v1[9];
  v4 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t ModelsR4.Condition.category.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Condition.severity.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[12];
  v3 = v1[13];
  v4 = v1[14];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t ModelsR4.Condition.code.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[15];
  v3 = v1[16];
  v4 = v1[17];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t ModelsR4.Condition.bodySite.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Condition.onsetDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DE9C84(type metadata accessor for ModelsR4.Condition, a1);
}

uint64_t ModelsR4.Condition.onsetPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEC768(type metadata accessor for ModelsR4.Condition, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsR4.Condition.onsetString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsR4.Condition(0) + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Condition.abatementDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 64), a1, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsR4.Condition.abatementPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 68), a1, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
}

uint64_t ModelsR4.Condition.abatementString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsR4.Condition(0) + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Condition.recordedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 76), a1, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsR4.Condition.recorder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 80), a1, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsR4.Condition.asserter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsR4.Condition(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 84), a1, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsR4.Condition.note.getter()
{
  type metadata accessor for ModelsR4.Condition(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Condition.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsR4.Condition(0) + 92));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Condition.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;

  v2 = v1;
  v67 = type metadata accessor for Reference();
  v63 = *(_QWORD *)(v67 - 8);
  v4 = MEMORY[0x24BDAC7A8](v67);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v65 = (char *)&v60 - v7;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v66 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v62 = (char *)&v60 - v13;
  v14 = type metadata accessor for Period();
  v64 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E04B8, v17, v8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v60 - v22;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v24 = v2[3];
  v61 = v6;
  sub_224F68528();
  if (v24)
  {
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  v25 = v2[4];
  if (v25 == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68528();
    if (v25)
    {
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v25);
      v26 = v25;
    }
    else
    {
      sub_224DE60AC(0);
      v26 = 0;
    }
    sub_224DE60AC(v26);
  }
  v27 = v2[6];
  if (v27 == 1)
  {
    sub_224F68528();
    goto LABEL_17;
  }
  v28 = v2[5];
  v29 = v2[7];
  sub_224F68528();
  if (!v27)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v29)
      goto LABEL_13;
LABEL_15:
    sub_224F68528();
    v30 = v28;
    v31 = v27;
    goto LABEL_16;
  }
  sub_224F68528();
  sub_224DDB44C(v28, v27);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v29)
    goto LABEL_15;
LABEL_13:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v29);
  swift_bridgeObjectRelease();
  v30 = v28;
  v31 = v27;
LABEL_16:
  sub_224DDB480(v30, v31);
LABEL_17:
  v32 = v2[9];
  if (v32 != 1)
  {
    v34 = v2[8];
    v35 = v2[10];
    sub_224F68528();
    if (v32)
    {
      sub_224F68528();
      sub_224DDB44C(v34, v32);
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v35)
      {
LABEL_22:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDA83C(a1, v35);
        swift_bridgeObjectRelease();
        v36 = v34;
        v37 = v32;
        goto LABEL_25;
      }
    }
    else
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      if (v35)
        goto LABEL_22;
    }
    sub_224F68528();
    v36 = v34;
    v37 = v32;
LABEL_25:
    sub_224DDB480(v36, v37);
    v33 = v2[11];
    if (!v33)
      goto LABEL_19;
    goto LABEL_26;
  }
  sub_224F68528();
  v33 = v2[11];
  if (!v33)
  {
LABEL_19:
    sub_224F68528();
    goto LABEL_27;
  }
LABEL_26:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDC1C0(a1, v33);
  swift_bridgeObjectRelease();
LABEL_27:
  v38 = v2[13];
  if (v38 == 1)
  {
    sub_224F68528();
    goto LABEL_35;
  }
  v39 = v2[12];
  v40 = v2[14];
  sub_224F68528();
  if (!v38)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v40)
      goto LABEL_31;
LABEL_33:
    sub_224F68528();
    v41 = v39;
    v42 = v38;
    goto LABEL_34;
  }
  sub_224F68528();
  sub_224DDB44C(v39, v38);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v40)
    goto LABEL_33;
LABEL_31:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v40);
  swift_bridgeObjectRelease();
  v41 = v39;
  v42 = v38;
LABEL_34:
  sub_224DDB480(v41, v42);
LABEL_35:
  v43 = v2[16];
  if (v43 != 1)
  {
    v45 = v2[15];
    v46 = v2[17];
    sub_224F68528();
    if (v43)
    {
      sub_224F68528();
      sub_224DDB44C(v45, v43);
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v46)
      {
LABEL_40:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDA83C(a1, v46);
        swift_bridgeObjectRelease();
        v47 = v45;
        v48 = v43;
        goto LABEL_43;
      }
    }
    else
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      if (v46)
        goto LABEL_40;
    }
    sub_224F68528();
    v47 = v45;
    v48 = v43;
LABEL_43:
    sub_224DDB480(v47, v48);
    v44 = v2[18];
    if (v44)
      goto LABEL_37;
    goto LABEL_44;
  }
  sub_224F68528();
  v44 = v2[18];
  if (v44)
  {
LABEL_37:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDC1C0(a1, v44);
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
LABEL_44:
  sub_224F68528();
LABEL_45:
  v49 = (int *)type metadata accessor for ModelsR4.Condition(0);
  sub_224DF2AC8();
  sub_224DDB4B4((uint64_t)v2 + v49[14], (uint64_t)v23, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
  if (v50(v23, 1, v14) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v23, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224F68528();
    sub_224DF2AC8();
    sub_224DF2AC8();
    sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  if (*(_QWORD *)((char *)v2 + v49[15] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  sub_224DF2AC8();
  sub_224DDB4B4((uint64_t)v2 + v49[17], (uint64_t)v21, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v50(v21, 1, v14) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v21, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224F68528();
    sub_224DF2AC8();
    sub_224DF2AC8();
    sub_224DDEAA0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  v51 = v67;
  v52 = (uint64_t)v65;
  if (*(_QWORD *)((char *)v2 + v49[18] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v54 = (uint64_t)v62;
  v53 = v63;
  sub_224DF2AC8();
  sub_224DDB4B4((uint64_t)v2 + v49[20], v54, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v55(v54, 1, v51) == 1)
  {
    sub_224F68528();
    goto LABEL_65;
  }
  sub_224DDEADC(v54, v52, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224F68528();
  if (!*(_QWORD *)(v52 + 8))
  {
    sub_224F68528();
    if (*(_QWORD *)(v52 + 24))
      goto LABEL_61;
LABEL_63:
    sub_224F68528();
    goto LABEL_64;
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v52 + 24))
    goto LABEL_63;
LABEL_61:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
LABEL_64:
  sub_224DF235C(a1);
  sub_224DDEAA0(v52, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
LABEL_65:
  v56 = v66;
  sub_224DDB4B4((uint64_t)v2 + v49[21], v66, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v55(v56, 1, v51) == 1)
  {
    sub_224F68528();
    goto LABEL_73;
  }
  v57 = (uint64_t)v61;
  sub_224DDEADC(v56, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224F68528();
  if (!*(_QWORD *)(v57 + 8))
  {
    sub_224F68528();
    if (*(_QWORD *)(v57 + 24))
      goto LABEL_69;
LABEL_71:
    sub_224F68528();
    goto LABEL_72;
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v57 + 24))
    goto LABEL_71;
LABEL_69:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
LABEL_72:
  sub_224DF235C(a1);
  sub_224DDEAA0(v57, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
LABEL_73:
  v58 = *(_QWORD *)((char *)v2 + v49[22]);
  sub_224F68528();
  if (v58)
  {
    swift_bridgeObjectRetain();
    sub_224DDBCDC(a1, v58);
    swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)((char *)v2 + v49[23] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224DE927C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224DE92B8 + 4 * byte_224F6B1B6[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224DE92B8()
{
  return 25705;
}

uint64_t sub_224DE92C4()
{
  return 1635018093;
}

uint64_t sub_224DE92D4()
{
  return 0x6C6163696E696C63;
}

unint64_t sub_224DE92F8()
{
  return 0xD000000000000012;
}

uint64_t sub_224DE9318()
{
  return 0x79726F6765746163;
}

uint64_t sub_224DE9330()
{
  return 0x7974697265766573;
}

uint64_t sub_224DE9348()
{
  return 1701080931;
}

uint64_t sub_224DE9358()
{
  return 0x6574695379646F62;
}

uint64_t sub_224DE9370()
{
  return 0x7461447465736E6FLL;
}

uint64_t sub_224DE9394()
{
  return 0x7265507465736E6FLL;
}

uint64_t sub_224DE93B4()
{
  return 0x7274537465736E6FLL;
}

unint64_t sub_224DE93D4()
{
  return 0xD000000000000011;
}

uint64_t sub_224DE93F0()
{
  return 0x6E656D6574616261;
}

uint64_t sub_224DE9428()
{
  return 0x646564726F636572;
}

uint64_t sub_224DE9448()
{
  return 0x726564726F636572;
}

uint64_t sub_224DE9460()
{
  return 0x7265747265737361;
}

uint64_t sub_224DE9478()
{
  return 1702129518;
}

uint64_t sub_224DE9488()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224DE94A0()
{
  unsigned __int8 *v0;

  return sub_224DE927C(*v0);
}

uint64_t sub_224DE94A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E4EA10(a1, a2);
  *a3 = result;
  return result;
}

void sub_224DE94CC(_BYTE *a1@<X8>)
{
  *a1 = 20;
}

uint64_t sub_224DE94D8()
{
  sub_224DE6068();
  return sub_224F685B8();
}

uint64_t sub_224DE9500()
{
  sub_224DE6068();
  return sub_224F685C4();
}

uint64_t ModelsR4.Condition.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char v21;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E0730, (uint64_t (*)(void))sub_224DE6068, (uint64_t)&type metadata for ModelsR4.Condition.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE6068();
  sub_224F68594();
  LOBYTE(v19) = 0;
  sub_224F68348();
  if (!v2)
  {
    LOBYTE(v19) = 1;
    sub_224F68300();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + 32);
    v21 = 2;
    sub_224DDAD8C();
    sub_224F68330();
    v10 = *(_QWORD *)(v3 + 56);
    v19 = *(_OWORD *)(v3 + 40);
    v20 = v10;
    v21 = 3;
    sub_224DFAEA8();
    sub_224F68330();
    v11 = *(_QWORD *)(v3 + 80);
    v19 = *(_OWORD *)(v3 + 64);
    v20 = v11;
    v21 = 4;
    sub_224F68330();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + 88);
    v21 = 5;
    sub_224DFB644(0, &qword_2557E04E0);
    sub_224DFAEEC();
    sub_224F68330();
    v12 = *(_QWORD *)(v3 + 112);
    v19 = *(_OWORD *)(v3 + 96);
    v20 = v12;
    v21 = 6;
    sub_224F68330();
    v13 = *(_QWORD *)(v3 + 136);
    v19 = *(_OWORD *)(v3 + 120);
    v20 = v13;
    v21 = 7;
    sub_224F68330();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + 144);
    v21 = 8;
    sub_224F68330();
    v14 = type metadata accessor for ModelsR4.Condition(0);
    LOBYTE(v19) = 9;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    v18 = v14;
    LOBYTE(v19) = 10;
    v15 = type metadata accessor for Period();
    sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    v17 = v15;
    sub_224F68330();
    LOBYTE(v19) = 11;
    sub_224F68300();
    LOBYTE(v19) = 12;
    sub_224F68330();
    LOBYTE(v19) = 13;
    sub_224F68330();
    LOBYTE(v19) = 14;
    sub_224F68300();
    LOBYTE(v19) = 15;
    sub_224F68330();
    LOBYTE(v19) = 16;
    type metadata accessor for Reference();
    sub_224DDACD4(&qword_2557E0758, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
    sub_224F68330();
    LOBYTE(v19) = 17;
    sub_224F68330();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + *(int *)(v18 + 88));
    v21 = 18;
    sub_224DDEA0C(0, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFAF5C();
    sub_224F68330();
    LOBYTE(v19) = 19;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.Condition.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.Condition.hash(into:));
}

uint64_t sub_224DE9B78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Condition.init(from:)(a1, a2);
}

uint64_t sub_224DE9B8C(_QWORD *a1)
{
  return ModelsR4.Condition.encode(to:)(a1);
}

uint64_t sub_224DE9BA0(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.Condition.hash(into:));
}

uint64_t sub_224DE9BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.Condition.hash(into:));
}

uint64_t sub_224DE9BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 92));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t (*ModelsR4.DiagnosticReport.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsR4.DiagnosticReport.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.DiagnosticReport.extension.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DiagnosticReport.conclusion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.DiagnosticReport.effectiveDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEA934(type metadata accessor for ModelsR4.DiagnosticReport, a1);
}

uint64_t ModelsR4.DiagnosticReport.effectivePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEC6B8(type metadata accessor for ModelsR4.DiagnosticReport, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsR4.DiagnosticReport.issued.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DE9C84(type metadata accessor for ModelsR4.DiagnosticReport, a1);
}

uint64_t sub_224DE9C84@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return sub_224DDB4B4(v2 + *(int *)(v4 + 52), a2, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsR4.DiagnosticReport.performer.getter()
{
  return sub_224DEEBD4((void (*)(_QWORD))type metadata accessor for ModelsR4.DiagnosticReport);
}

uint64_t ModelsR4.DiagnosticReport.presentedForm.getter()
{
  return sub_224DEEC04((void (*)(_QWORD))type metadata accessor for ModelsR4.DiagnosticReport);
}

uint64_t ModelsR4.DiagnosticReport.presentedForm.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ModelsR4.DiagnosticReport(0) + 60);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ModelsR4.DiagnosticReport.presentedForm.modify())()
{
  type metadata accessor for ModelsR4.DiagnosticReport(0);
  return nullsub_1;
}

uint64_t ModelsR4.DiagnosticReport.language.getter()
{
  return sub_224DEAAAC(type metadata accessor for ModelsR4.DiagnosticReport);
}

uint64_t ModelsR4.DiagnosticReport.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = type metadata accessor for Period();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E04B8, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - v9;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v1[3])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    v11 = v1[4];
    if (v11)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDB75C(a1, v11);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_224F68528();
    v11 = v1[4];
    if (v11)
      goto LABEL_3;
  }
  sub_224F68528();
LABEL_6:
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v12 = v1[7];
  if (v12)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDC1C0(a1, v12);
    swift_bridgeObjectRelease();
    v13 = v1[10];
    if (v1[9])
      goto LABEL_8;
LABEL_11:
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_9;
    goto LABEL_12;
  }
  sub_224F68528();
  v13 = v1[10];
  if (!v1[9])
    goto LABEL_11;
LABEL_8:
  sub_224F68528();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_9:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDA83C(a1, v13);
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
LABEL_12:
  sub_224F68528();
  swift_bridgeObjectRelease();
LABEL_13:
  swift_bridgeObjectRelease();
  if (v1[12])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v14 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
  sub_224DF2AC8();
  sub_224DDB4B4((uint64_t)v1 + v14[12], (uint64_t)v10, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224F68528();
    sub_224DF2AC8();
    sub_224DF2AC8();
    sub_224DDEAA0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  sub_224DF2AC8();
  v15 = *(_QWORD *)((char *)v1 + v14[14]);
  sub_224F68528();
  if (v15)
  {
    swift_bridgeObjectRetain();
    sub_224DDCC54(a1, v15);
    swift_bridgeObjectRelease();
  }
  v16 = *(_QWORD *)((char *)v1 + v14[15]);
  sub_224F68528();
  if (v16)
  {
    swift_bridgeObjectRetain();
    sub_224DDD2B8(a1, v16);
    swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)((char *)v1 + v14[16] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224DEA1C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224DEA200 + 4 * byte_224F6B1CA[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224DEA200()
{
  return 25705;
}

uint64_t sub_224DEA20C()
{
  return 0x6F69736E65747865;
}

uint64_t sub_224DEA228()
{
  return 0x737574617473;
}

uint64_t sub_224DEA23C()
{
  return 0x79726F6765746163;
}

uint64_t sub_224DEA254()
{
  return 1701080931;
}

uint64_t sub_224DEA264()
{
  return 0x6973756C636E6F63;
}

unint64_t sub_224DEA280()
{
  return 0xD000000000000011;
}

uint64_t sub_224DEA29C()
{
  return 0x7669746365666665;
}

uint64_t sub_224DEA2C0()
{
  return 0x646575737369;
}

uint64_t sub_224DEA2D4()
{
  return 0x656D726F66726570;
}

uint64_t sub_224DEA2F4()
{
  return 0x65746E6573657270;
}

uint64_t sub_224DEA318()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224DEA330()
{
  unsigned __int8 *v0;

  return sub_224DEA1C4(*v0);
}

uint64_t sub_224DEA338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E4F294(a1, a2);
  *a3 = result;
  return result;
}

void sub_224DEA35C(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_224DEA368()
{
  sub_224DE6200();
  return sub_224F685B8();
}

uint64_t sub_224DEA390()
{
  sub_224DE6200();
  return sub_224F685C4();
}

uint64_t ModelsR4.DiagnosticReport.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E0770, (uint64_t (*)(void))sub_224DE6200, (uint64_t)&type metadata for ModelsR4.DiagnosticReport.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE6200();
  sub_224F68594();
  LOBYTE(v16) = 0;
  sub_224F68348();
  if (!v2)
  {
    LOBYTE(v16) = 1;
    sub_224F68300();
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + 32);
    v18 = 2;
    sub_224DDEA0C(0, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFAFEC();
    sub_224F68330();
    LOBYTE(v16) = 3;
    sub_224F68348();
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + 56);
    v18 = 4;
    sub_224DFB644(0, &qword_2557E04E0);
    sub_224DFAEEC();
    sub_224F68330();
    v10 = *(_QWORD *)(v3 + 80);
    v16 = *(_OWORD *)(v3 + 64);
    v17 = v10;
    v18 = 5;
    sub_224DFAEA8();
    sub_224F68378();
    LOBYTE(v16) = 6;
    sub_224F68300();
    v11 = type metadata accessor for ModelsR4.DiagnosticReport(0);
    LOBYTE(v16) = 7;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    v15 = v11;
    LOBYTE(v16) = 8;
    type metadata accessor for Period();
    sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    sub_224F68330();
    v12 = v15;
    LOBYTE(v16) = 9;
    sub_224F68330();
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + *(int *)(v12 + 56));
    v18 = 10;
    sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFB07C();
    sub_224F68330();
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + *(int *)(v15 + 60));
    v18 = 11;
    sub_224DDEA0C(0, &qword_2557E0560, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFB10C();
    sub_224F68330();
    LOBYTE(v16) = 12;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.DiagnosticReport.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.DiagnosticReport.hash(into:));
}

uint64_t sub_224DEA854@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.DiagnosticReport.init(from:)(a1, a2);
}

uint64_t sub_224DEA868(_QWORD *a1)
{
  return ModelsR4.DiagnosticReport.encode(to:)(a1);
}

uint64_t sub_224DEA87C(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.DiagnosticReport.hash(into:));
}

uint64_t sub_224DEA88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.DiagnosticReport.hash(into:));
}

uint64_t (*ModelsR4.DocumentReference.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsR4.DocumentReference.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.DocumentReference.docStatus.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.DocumentReference.type.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[10];
  v3 = v1[11];
  *a1 = v1[9];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReference.category.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReference.date.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEA934(type metadata accessor for ModelsR4.DocumentReference, a1);
}

uint64_t sub_224DEA934@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return sub_224DDB4B4(v2 + *(int *)(v4 + 44), a2, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
}

uint64_t ModelsR4.DocumentReference.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsR4.DocumentReference(0) + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.DocumentReference.author.getter()
{
  type metadata accessor for ModelsR4.DocumentReference(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReference.content.getter()
{
  type metadata accessor for ModelsR4.DocumentReference(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReference.content.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ModelsR4.DocumentReference(0) + 56);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ModelsR4.DocumentReference.content.modify())()
{
  type metadata accessor for ModelsR4.DocumentReference(0);
  return nullsub_1;
}

uint64_t ModelsR4.DocumentReference.context.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsR4.DocumentReference(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 60), a1, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
}

uint64_t ModelsR4.DocumentReference.language.getter()
{
  return sub_224DEAAAC(type metadata accessor for ModelsR4.DocumentReference);
}

uint64_t sub_224DEAAAC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 64));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsR4.DocumentReference.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v36 = type metadata accessor for Period();
  v4 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E04B8, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v34 = (uint64_t)&v33 - v10;
  v11 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224DDEA0C(0, &qword_2557E0578, v15, v7);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v33 - v17;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v19 = v2[3];
  v35 = v4;
  sub_224F68528();
  if (v19)
  {
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  v20 = v2[4];
  if (v20 == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68528();
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v20);
      v21 = v20;
    }
    else
    {
      sub_224DE60AC(0);
      v21 = 0;
    }
    sub_224DE60AC(v21);
  }
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v2[8])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v23 = v2[10];
  v22 = v2[11];
  v33 = v6;
  if (v23)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v22)
    {
LABEL_14:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v22);
      swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v22)
      goto LABEL_14;
  }
  sub_224F68528();
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  v24 = v2[12];
  swift_bridgeObjectRetain();
  sub_224DDC1C0(a1, v24);
  swift_bridgeObjectRelease();
  v25 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
  sub_224DF2AC8();
  if (*(_QWORD *)((char *)v2 + v25[12] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v26 = *(_QWORD *)((char *)v2 + v25[13]);
  sub_224F68528();
  if (v26)
  {
    swift_bridgeObjectRetain();
    sub_224DDCC54(a1, v26);
    swift_bridgeObjectRelease();
  }
  v27 = *(_QWORD *)((char *)v2 + v25[14]);
  swift_bridgeObjectRetain();
  sub_224DDCDD4(a1, v27);
  swift_bridgeObjectRelease();
  sub_224DDB4B4((uint64_t)v2 + v25[15], (uint64_t)v18, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v18, 1, v11) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v18, (uint64_t)v14, type metadata accessor for ModelsR4.DocumentReferenceContext);
    sub_224F68528();
    v28 = *v14;
    if (*v14)
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDCC54(a1, v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_224F68528();
    }
    v29 = v36;
    v30 = v34;
    sub_224DDB4B4((uint64_t)v14 + *(int *)(v11 + 20), v34, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v30, 1, v29) == 1)
    {
      sub_224F68528();
    }
    else
    {
      v31 = (uint64_t)v33;
      sub_224DDEADC(v30, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      sub_224F68528();
      sub_224DF2AC8();
      sub_224DF2AC8();
      sub_224DDEAA0(v31, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    }
    sub_224DDEAA0((uint64_t)v14, type metadata accessor for ModelsR4.DocumentReferenceContext);
  }
  if (!*(_QWORD *)((char *)v2 + v25[16] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224DEB0DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224DEB118 + 4 * byte_224F6B1D7[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224DEB118()
{
  return 25705;
}

uint64_t sub_224DEB124()
{
  return 1635018093;
}

uint64_t sub_224DEB134()
{
  return 0x737574617473;
}

uint64_t sub_224DEB148()
{
  return 0x7574617453636F64;
}

uint64_t sub_224DEB164()
{
  return 1701869940;
}

uint64_t sub_224DEB174()
{
  return 0x79726F6765746163;
}

uint64_t sub_224DEB18C()
{
  return 1702125924;
}

uint64_t sub_224DEB19C()
{
  return 0x7470697263736564;
}

uint64_t sub_224DEB1BC()
{
  return 0x726F68747561;
}

uint64_t sub_224DEB1D0()
{
  return 0x746E65746E6F63;
}

uint64_t sub_224DEB1E8()
{
  return 0x747865746E6F63;
}

uint64_t sub_224DEB200()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224DEB218()
{
  unsigned __int8 *v0;

  return sub_224DEB0DC(*v0);
}

uint64_t sub_224DEB220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E4F80C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224DEB244()
{
  sub_224DE6440();
  return sub_224F685B8();
}

uint64_t sub_224DEB26C()
{
  sub_224DE6440();
  return sub_224F685C4();
}

uint64_t ModelsR4.DocumentReference.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  char v15;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E07A0, (uint64_t (*)(void))sub_224DE6440, (uint64_t)&type metadata for ModelsR4.DocumentReference.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE6440();
  sub_224F68594();
  LOBYTE(v13) = 0;
  sub_224F68348();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_224F68300();
    *(_QWORD *)&v13 = *(_QWORD *)(v3 + 32);
    v15 = 2;
    sub_224DDAD8C();
    sub_224F68330();
    LOBYTE(v13) = 3;
    sub_224F68348();
    LOBYTE(v13) = 4;
    sub_224F68300();
    v10 = *(_QWORD *)(v3 + 88);
    v13 = *(_OWORD *)(v3 + 72);
    v14 = v10;
    v15 = 5;
    sub_224DFAEA8();
    sub_224F68378();
    *(_QWORD *)&v13 = *(_QWORD *)(v3 + 96);
    v15 = 6;
    sub_224DFB644(0, &qword_2557E04E0);
    sub_224DFAEEC();
    sub_224F68378();
    v11 = type metadata accessor for ModelsR4.DocumentReference(0);
    LOBYTE(v13) = 7;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    LOBYTE(v13) = 8;
    sub_224F68300();
    *(_QWORD *)&v13 = *(_QWORD *)(v3 + *(int *)(v11 + 52));
    v15 = 9;
    sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFB07C();
    sub_224F68330();
    *(_QWORD *)&v13 = *(_QWORD *)(v3 + *(int *)(v11 + 56));
    v15 = 10;
    sub_224DDEA0C(0, &qword_2557E0598, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFB19C();
    sub_224F68378();
    LOBYTE(v13) = 11;
    type metadata accessor for ModelsR4.DocumentReferenceContext(0);
    sub_224DDACD4(&qword_2557E07B8, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContext);
    sub_224F68330();
    LOBYTE(v13) = 12;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.DocumentReference.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.DocumentReference.hash(into:));
}

uint64_t sub_224DEB6F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.DocumentReference.init(from:)(a1, a2);
}

uint64_t sub_224DEB70C(_QWORD *a1)
{
  return ModelsR4.DocumentReference.encode(to:)(a1);
}

uint64_t sub_224DEB720(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.DocumentReference.hash(into:));
}

uint64_t sub_224DEB730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.DocumentReference.hash(into:));
}

uint64_t sub_224DEB73C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 64));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsR4.DocumentReferenceContent.attachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_224DDB408(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
}

uint64_t ModelsR4.DocumentReferenceContent.attachment.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_224DFB6F4(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
}

uint64_t (*ModelsR4.DocumentReferenceContent.attachment.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.DocumentReferenceContent.format.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_224DDB44C(v4, v5);
}

uint64_t ModelsR4.DocumentReferenceContent.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  Attachment.hash(into:)();
  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) + 20));
  v4 = v3[1];
  if (v4 == 1)
    return sub_224F68528();
  v6 = *v3;
  v7 = v3[2];
  sub_224F68528();
  if (!v4)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_5;
LABEL_7:
    sub_224F68528();
    v8 = v6;
    v9 = v4;
    return sub_224DDB480(v8, v9);
  }
  sub_224F68528();
  sub_224DDB44C(v6, v4);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_7;
LABEL_5:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v7);
  swift_bridgeObjectRelease();
  v8 = v6;
  v9 = v4;
  return sub_224DDB480(v8, v9);
}

uint64_t sub_224DEB934()
{
  _BYTE *v0;

  if (*v0)
    return 0x74616D726F66;
  else
    return 0x656D686361747461;
}

uint64_t sub_224DEB970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E4FD2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224DEB994()
{
  sub_224DFB22C();
  return sub_224F685B8();
}

uint64_t sub_224DEB9BC()
{
  sub_224DFB22C();
  return sub_224F685C4();
}

uint64_t ModelsR4.DocumentReferenceContent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  char v15;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E07C0, (uint64_t (*)(void))sub_224DFB22C, (uint64_t)&type metadata for ModelsR4.DocumentReferenceContent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB22C();
  sub_224F68594();
  LOBYTE(v13) = 0;
  type metadata accessor for Attachment();
  sub_224DDACD4(&qword_2557E0798, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
  sub_224F68378();
  if (!v2)
  {
    v10 = (__int128 *)(v3 + *(int *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) + 20));
    v11 = *((_QWORD *)v10 + 2);
    v13 = *v10;
    v14 = v11;
    v15 = 1;
    sub_224DFAEA8();
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.DocumentReferenceContent.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.DocumentReferenceContent.hash(into:));
}

uint64_t ModelsR4.DocumentReferenceContent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;

  v20 = a2;
  v21 = type metadata accessor for Attachment();
  MEMORY[0x24BDAC7A8](v21);
  v22 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DFB77C(0, &qword_2557E07D0, (uint64_t (*)(void))sub_224DFB22C, (uint64_t)&type metadata for ModelsR4.DocumentReferenceContent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v23 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - v6;
  v8 = type metadata accessor for ModelsR4.DocumentReferenceContent(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB22C();
  v11 = v24;
  sub_224F6857C();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = v8;
  v12 = (uint64_t)v10;
  v13 = v20;
  LOBYTE(v25) = 0;
  sub_224DDACD4(&qword_2557E0570, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
  v14 = (uint64_t)v22;
  v15 = v23;
  sub_224F682DC();
  sub_224DDEADC(v14, v12, (uint64_t (*)(_QWORD))type metadata accessor for Attachment);
  v27 = 1;
  sub_224DE60BC();
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v15);
  v16 = v26;
  v17 = v12 + *(int *)(v24 + 20);
  *(_OWORD *)v17 = v25;
  *(_QWORD *)(v17 + 16) = v16;
  sub_224DDB408(v12, v13, type metadata accessor for ModelsR4.DocumentReferenceContent);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_224DDEAA0(v12, type metadata accessor for ModelsR4.DocumentReferenceContent);
}

uint64_t sub_224DEBE2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.DocumentReferenceContent.init(from:)(a1, a2);
}

uint64_t sub_224DEBE40(_QWORD *a1)
{
  return ModelsR4.DocumentReferenceContent.encode(to:)(a1);
}

uint64_t sub_224DEBE54(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.DocumentReferenceContent.hash(into:));
}

uint64_t sub_224DEBE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.DocumentReferenceContent.hash(into:));
}

uint64_t ModelsR4.DocumentReferenceContext.encounter.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.DocumentReferenceContext.period.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEBE98(type metadata accessor for ModelsR4.DocumentReferenceContext, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t sub_224DEBE98@<X0>(uint64_t (*a1)(_QWORD)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return sub_224DDB4B4(v4 + *(int *)(v8 + 20), a4, a2, a3);
}

uint64_t ModelsR4.DocumentReferenceContext.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = type metadata accessor for Period();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E04B8, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  v11 = *v1;
  if (*v1)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDCC54(a1, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v12 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  sub_224DDB4B4((uint64_t)v1 + *(int *)(v12 + 20), (uint64_t)v10, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
    return sub_224F68528();
  sub_224DDEADC((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  sub_224F68528();
  sub_224DF2AC8();
  sub_224DF2AC8();
  return sub_224DDEAA0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Period);
}

uint64_t sub_224DEC088()
{
  _BYTE *v0;

  if (*v0)
    return 0x646F69726570;
  else
    return 0x65746E756F636E65;
}

uint64_t sub_224DEC0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E4FE20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224DEC0E8()
{
  sub_224DFB270();
  return sub_224F685B8();
}

uint64_t sub_224DEC110()
{
  sub_224DFB270();
  return sub_224F685C4();
}

uint64_t ModelsR4.DocumentReferenceContext.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E07D8, (uint64_t (*)(void))sub_224DFB270, (uint64_t)&type metadata for ModelsR4.DocumentReferenceContext.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB270();
  sub_224F68594();
  v12 = *v3;
  v11[15] = 0;
  sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224DFB07C();
  sub_224F68330();
  if (!v2)
  {
    type metadata accessor for ModelsR4.DocumentReferenceContext(0);
    v11[14] = 1;
    type metadata accessor for Period();
    sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    sub_224F68330();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.DocumentReferenceContext.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.DocumentReferenceContext.hash(into:));
}

uint64_t ModelsR4.DocumentReferenceContext.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  char v25;
  uint64_t v26;

  v19 = a2;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v20 = (char *)&v17 - v4;
  sub_224DFB77C(0, &qword_2557E07E8, (uint64_t (*)(void))sub_224DFB270, (uint64_t)&type metadata for ModelsR4.DocumentReferenceContext.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - v7;
  v9 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB270();
  v21 = v8;
  v12 = (uint64_t)v23;
  sub_224F6857C();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v18 = v9;
  v23 = a1;
  v13 = (uint64_t)v20;
  sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v25 = 0;
  sub_224DE630C();
  v14 = v22;
  v15 = v21;
  sub_224F68294();
  *v11 = v26;
  type metadata accessor for Period();
  v24 = 1;
  sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v14);
  sub_224DFAC88(v13, (uint64_t)v11 + *(int *)(v18 + 20), &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB408((uint64_t)v11, v19, type metadata accessor for ModelsR4.DocumentReferenceContext);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return sub_224DDEAA0((uint64_t)v11, type metadata accessor for ModelsR4.DocumentReferenceContext);
}

uint64_t sub_224DEC5D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.DocumentReferenceContext.init(from:)(a1, a2);
}

uint64_t sub_224DEC5E4(_QWORD *a1)
{
  return ModelsR4.DocumentReferenceContext.encode(to:)(a1);
}

uint64_t sub_224DEC5F8(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.DocumentReferenceContext.hash(into:));
}

uint64_t sub_224DEC608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.DocumentReferenceContext.hash(into:));
}

uint64_t (*ModelsR4.Immunization.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t (*ModelsR4.Immunization.id.modify())()
{
  return nullsub_1;
}

void ModelsR4.Immunization.expirationDate.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *(_DWORD *)(v1 + 64);
  v3 = *(_BYTE *)(v1 + 68);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 56);
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 12) = v3;
}

uint64_t ModelsR4.Immunization.note.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Immunization.occurrenceDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEEB44(type metadata accessor for ModelsR4.Immunization, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, a1);
}

uint64_t ModelsR4.Immunization.protocolApplied.getter()
{
  type metadata accessor for ModelsR4.Immunization(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Immunization.recorded.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEC6B8(type metadata accessor for ModelsR4.Immunization, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, a1);
}

uint64_t sub_224DEC6B8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return sub_224DDB4B4(v4 + *(int *)(v8 + 48), a4, a2, a3);
}

uint64_t ModelsR4.Immunization.vaccineCode.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 52));
  v4 = v3[1];
  v5 = v3[2];
  *a1 = *v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Immunization.manufacturer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEC768(type metadata accessor for ModelsR4.Immunization, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, a1);
}

uint64_t sub_224DEC768@<X0>(uint64_t (*a1)(_QWORD)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return sub_224DDB4B4(v4 + *(int *)(v8 + 56), a4, a2, a3);
}

uint64_t ModelsR4.Immunization.primarySource.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 60));
}

uint64_t ModelsR4.Immunization.lotNumber.getter()
{
  return sub_224DEAAAC(type metadata accessor for ModelsR4.Immunization);
}

uint64_t ModelsR4.Immunization.performer.getter()
{
  type metadata accessor for ModelsR4.Immunization(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Immunization.isSubpotent.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 72));
}

uint64_t ModelsR4.Immunization.location.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsR4.Immunization(0) + 76));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  return sub_224DFB2B4(v4, v5, v6);
}

uint64_t ModelsR4.Immunization.language.getter()
{
  return sub_224DEECE0(type metadata accessor for ModelsR4.Immunization);
}

uint64_t ModelsR4.Immunization.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v3 = type metadata accessor for Reference();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E0308, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v25 - v9;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + 24))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v11 = *(_QWORD *)(v1 + 32);
  if (v11 == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68528();
    if (v11)
    {
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v11);
      v12 = v11;
    }
    else
    {
      sub_224DE60AC(0);
      v12 = 0;
    }
    sub_224DE60AC(v12);
  }
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v1 + 68) & 1) == 0)
  {
    v13 = *(_DWORD *)(v1 + 64);
    sub_224F68528();
    sub_224F6851C();
    if ((v13 & 0x100) == 0)
      sub_224F68528();
    sub_224F68528();
    if ((v13 & 0x1000000) == 0)
      sub_224F68528();
  }
  sub_224F68528();
  v14 = *(_QWORD *)(v1 + 72);
  sub_224F68528();
  if (v14)
  {
    swift_bridgeObjectRetain();
    sub_224DDBCDC(a1, v14);
    swift_bridgeObjectRelease();
  }
  v15 = type metadata accessor for ModelsR4.Immunization(0);
  sub_224DF2AC8();
  v16 = *(_QWORD *)(v1 + *(int *)(v15 + 44));
  sub_224F68528();
  if (v16)
  {
    swift_bridgeObjectRetain();
    sub_224DDD944(a1, v16);
    swift_bridgeObjectRelease();
  }
  sub_224DF2AC8();
  v17 = v1 + *(int *)(v15 + 52);
  v18 = *(_QWORD *)(v17 + 8);
  v19 = *(_QWORD *)(v17 + 16);
  v25[0] = v15;
  if (v18)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v19)
    {
LABEL_21:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v19);
      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v19)
      goto LABEL_21;
  }
  sub_224F68528();
  swift_bridgeObjectRelease();
LABEL_24:
  v20 = (int *)v25[0];
  swift_bridgeObjectRelease();
  sub_224DDB4B4(v1 + v20[14], (uint64_t)v10, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    sub_224F68528();
    goto LABEL_32;
  }
  sub_224DDEADC((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224F68528();
  if (!*((_QWORD *)v6 + 1))
  {
    sub_224F68528();
    if (*((_QWORD *)v6 + 3))
      goto LABEL_28;
LABEL_30:
    sub_224F68528();
    goto LABEL_31;
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)v6 + 3))
    goto LABEL_30;
LABEL_28:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
LABEL_31:
  sub_224DF235C(a1);
  sub_224DDEAA0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
LABEL_32:
  if (*(_BYTE *)(v1 + v20[15]) != 2)
    sub_224F68528();
  sub_224F68528();
  if (*(_QWORD *)(v1 + v20[16] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v21 = *(_QWORD *)(v1 + v20[17]);
  sub_224F68528();
  if (v21)
  {
    swift_bridgeObjectRetain();
    sub_224DDD6B4(a1, v21);
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v1 + v20[18]) != 2)
    sub_224F68528();
  sub_224F68528();
  v22 = v1 + v20[19];
  if (*(_QWORD *)v22 == 1)
  {
    sub_224F68528();
  }
  else
  {
    v25[1] = *(_QWORD *)v22;
    v23 = *(_OWORD *)(v22 + 24);
    v26 = *(_OWORD *)(v22 + 8);
    v27 = v23;
    v28 = *(_OWORD *)(v22 + 40);
    sub_224F68528();
    Location.hash(into:)(a1);
  }
  if (!*(_QWORD *)(v1 + v20[20] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224DECF04(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224DECF40 + 4 * byte_224F6B1E4[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224DECF40()
{
  return 25705;
}

uint64_t sub_224DECF4C()
{
  return 1635018093;
}

uint64_t sub_224DECF5C()
{
  return 0x737574617473;
}

uint64_t sub_224DECF70()
{
  return 0x6974617269707865;
}

uint64_t sub_224DECF94()
{
  return 1702129518;
}

unint64_t sub_224DECFA4()
{
  return 0xD000000000000012;
}

uint64_t sub_224DECFC0()
{
  return 0x6C6F636F746F7270;
}

uint64_t sub_224DECFE4()
{
  return 0x646564726F636572;
}

uint64_t sub_224DECFFC()
{
  return 0x43656E6963636176;
}

uint64_t sub_224DED01C()
{
  return 0x74636166756E616DLL;
}

uint64_t sub_224DED03C()
{
  return 0x537972616D697270;
}

uint64_t sub_224DED060()
{
  return 0x65626D754E746F6CLL;
}

uint64_t sub_224DED090()
{
  return 0x746F706275537369;
}

uint64_t sub_224DED0B0()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_224DED0C8()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224DED0E0()
{
  unsigned __int8 *v0;

  return sub_224DECF04(*v0);
}

uint64_t sub_224DED0E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E4FF14(a1, a2);
  *a3 = result;
  return result;
}

void sub_224DED10C(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_224DED118()
{
  sub_224DE6528();
  return sub_224F685B8();
}

uint64_t sub_224DED140()
{
  sub_224DE6528();
  return sub_224F685C4();
}

uint64_t ModelsR4.Immunization.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  char v11;
  int *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E07F0, (uint64_t (*)(void))sub_224DE6528, (uint64_t)&type metadata for ModelsR4.Immunization.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v19 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE6528();
  sub_224F68594();
  LOBYTE(v19) = 0;
  sub_224F68348();
  if (!v2)
  {
    LOBYTE(v19) = 1;
    sub_224F68300();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + 32);
    v23 = 2;
    sub_224DDAD8C();
    sub_224F68330();
    LOBYTE(v19) = 3;
    sub_224F68348();
    v10 = *(_DWORD *)(v3 + 64);
    v11 = *(_BYTE *)(v3 + 68);
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + 56);
    DWORD2(v19) = v10;
    BYTE12(v19) = v11;
    v23 = 4;
    sub_224DFB31C();
    sub_224F68330();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + 72);
    v23 = 5;
    sub_224DDEA0C(0, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFAF5C();
    sub_224F68330();
    v12 = (int *)type metadata accessor for ModelsR4.Immunization(0);
    LOBYTE(v19) = 6;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + v12[11]);
    v23 = 7;
    sub_224DFB644(0, &qword_2557E05D8);
    sub_224DFB360();
    sub_224F68330();
    LOBYTE(v19) = 8;
    sub_224F68330();
    v13 = (__int128 *)(v3 + v12[13]);
    v14 = *((_QWORD *)v13 + 2);
    v19 = *v13;
    *(_QWORD *)&v20 = v14;
    v23 = 9;
    sub_224DFAEA8();
    sub_224F68378();
    LOBYTE(v19) = 10;
    type metadata accessor for Reference();
    sub_224DDACD4(&qword_2557E0758, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
    sub_224F68330();
    LOBYTE(v19) = 11;
    sub_224F6830C();
    LOBYTE(v19) = 12;
    sub_224F68300();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + v12[17]);
    v23 = 13;
    sub_224DDEA0C(0, &qword_2557E05F0, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFB414();
    sub_224F68330();
    LOBYTE(v19) = 14;
    sub_224F6830C();
    v15 = (__int128 *)(v3 + v12[19]);
    v16 = *((_QWORD *)v15 + 6);
    v17 = v15[1];
    v19 = *v15;
    v20 = v17;
    v21 = v15[2];
    v22 = v16;
    v23 = 15;
    sub_224DFB4A4();
    sub_224F68330();
    LOBYTE(v19) = 16;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.Immunization.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.Immunization.hash(into:));
}

uint64_t sub_224DED6E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Immunization.init(from:)(a1, a2);
}

uint64_t sub_224DED6F8(_QWORD *a1)
{
  return ModelsR4.Immunization.encode(to:)(a1);
}

uint64_t sub_224DED70C(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.Immunization.hash(into:));
}

uint64_t sub_224DED71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.Immunization.hash(into:));
}

uint64_t ModelsR4.ImmunizationProtocol.doseNumberPositiveInt.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ModelsR4.ImmunizationProtocol.doseNumberString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.ImmunizationProtocol.seriesDosesPositiveInt.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ModelsR4.ImmunizationProtocol.seriesDosesString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.ImmunizationProtocol.targetedDisease.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[8];
  v3 = v1[9];
  v4 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t ModelsR4.ImmunizationProtocol.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(unsigned __int8 *)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 56);
  v8 = *(_QWORD *)(v2 + 64);
  v7 = *(_QWORD *)(v2 + 72);
  v9 = *(_QWORD *)(v2 + 80);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    sub_224F68528();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    sub_224F68528();
    sub_224F6851C();
    if (v4)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  sub_224F68528();
  if (v5)
  {
LABEL_4:
    sub_224F68528();
    if (v6)
      goto LABEL_5;
LABEL_10:
    sub_224F68528();
    if (v7 == 1)
      return sub_224F68528();
    goto LABEL_11;
  }
LABEL_9:
  sub_224F68528();
  sub_224F6851C();
  if (!v6)
    goto LABEL_10;
LABEL_5:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v7 == 1)
    return sub_224F68528();
LABEL_11:
  sub_224F68528();
  if (v7)
  {
    sub_224F68528();
    sub_224DDB44C(v8, v7);
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_13:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v9);
      swift_bridgeObjectRelease();
      return sub_224DDB480(v8, v7);
    }
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_13;
  }
  sub_224F68528();
  return sub_224DDB480(v8, v7);
}

uint64_t sub_224DED9E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_224DEDA24 + 4 * byte_224F6B1F5[a1]))(0xD000000000000015, 0x8000000224F815A0);
}

unint64_t sub_224DEDA24()
{
  return 0xD000000000000010;
}

uint64_t sub_224DEDA40()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t sub_224DEDA68()
{
  return 0x6465746567726174;
}

uint64_t sub_224DEDA8C()
{
  unsigned __int8 *v0;

  return sub_224DED9E4(*v0);
}

uint64_t sub_224DEDA94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E5067C(a1, a2);
  *a3 = result;
  return result;
}

void sub_224DEDAB8(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_224DEDAC4()
{
  sub_224DFB4E8();
  return sub_224F685B8();
}

uint64_t sub_224DEDAEC()
{
  sub_224DFB4E8();
  return sub_224F685C4();
}

uint64_t ModelsR4.ImmunizationProtocol.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;

  sub_224DFB77C(0, &qword_2557E0828, (uint64_t (*)(void))sub_224DFB4E8, (uint64_t)&type metadata for ModelsR4.ImmunizationProtocol.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - v5;
  v7 = *(_QWORD *)(v1 + 16);
  v23 = *(_QWORD *)(v1 + 24);
  v24 = v7;
  v8 = *(_QWORD *)(v1 + 32);
  v29 = *(unsigned __int8 *)(v1 + 40);
  v21 = *(_QWORD *)(v1 + 48);
  v22 = v8;
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 72);
  v17 = *(_QWORD *)(v1 + 64);
  v18 = v10;
  v19 = *(_QWORD *)(v1 + 80);
  v20 = v9;
  v11 = a1[3];
  v12 = a1;
  v14 = v13;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  sub_224DFB4E8();
  sub_224F68594();
  LOBYTE(v26) = 0;
  v15 = v25;
  sub_224F68324();
  if (!v15)
  {
    LOBYTE(v26) = 1;
    sub_224F68300();
    LOBYTE(v26) = 2;
    sub_224F68324();
    LOBYTE(v26) = 3;
    sub_224F68300();
    v26 = v17;
    v27 = v18;
    v28 = v19;
    v30 = 4;
    sub_224DFAEA8();
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v14);
}

uint64_t ModelsR4.ImmunizationProtocol.hashValue.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v7[10];
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 80);
  v7[9] = *(_QWORD *)v0;
  v8 = v1;
  v9 = *(_OWORD *)(v0 + 16);
  v10 = v2;
  v11 = v3;
  v5 = *(_OWORD *)(v0 + 64);
  v12 = *(_OWORD *)(v0 + 48);
  v13 = v5;
  v14 = v4;
  sub_224F68510();
  ModelsR4.ImmunizationProtocol.hash(into:)((uint64_t)v7);
  return sub_224F6854C();
}

uint64_t ModelsR4.ImmunizationProtocol.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;

  sub_224DFB77C(0, &qword_2557E0838, (uint64_t (*)(void))sub_224DFB4E8, (uint64_t)&type metadata for ModelsR4.ImmunizationProtocol.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v32 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB4E8();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  LOBYTE(v33) = 0;
  v10 = sub_224F68288();
  v12 = v11;
  LOBYTE(v33) = 1;
  v13 = sub_224F68264();
  v15 = v14;
  v31 = v13;
  LOBYTE(v33) = 2;
  swift_bridgeObjectRetain();
  v16 = sub_224F68288();
  v36 = v17;
  v30 = v16;
  LOBYTE(v33) = 3;
  v18 = sub_224F68264();
  v20 = v19;
  v28 = v18;
  v37 = 4;
  sub_224DE60BC();
  v29 = v20;
  swift_bridgeObjectRetain();
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v32);
  v21 = v33;
  v32 = v33;
  v22 = v15;
  v23 = v34;
  v24 = v35;
  swift_bridgeObjectRetain();
  v25 = v29;
  swift_bridgeObjectRetain();
  sub_224DDB44C(v21, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v12 & 1;
  v26 = v32;
  *(_QWORD *)(a2 + 16) = v31;
  *(_QWORD *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 32) = v30;
  *(_BYTE *)(a2 + 40) = v36 & 1;
  *(_QWORD *)(a2 + 48) = v28;
  *(_QWORD *)(a2 + 56) = v25;
  *(_QWORD *)(a2 + 64) = v26;
  *(_QWORD *)(a2 + 72) = v23;
  *(_QWORD *)(a2 + 80) = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_224DDB480(v26, v23);
}

uint64_t sub_224DEE0EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.ImmunizationProtocol.init(from:)(a1, a2);
}

uint64_t sub_224DEE100(_QWORD *a1)
{
  return ModelsR4.ImmunizationProtocol.encode(to:)(a1);
}

uint64_t sub_224DEE114()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v7[10];
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 80);
  v7[9] = *(_QWORD *)v0;
  v8 = v1;
  v9 = *(_OWORD *)(v0 + 16);
  v10 = v2;
  v11 = v3;
  v5 = *(_OWORD *)(v0 + 64);
  v12 = *(_OWORD *)(v0 + 48);
  v13 = v5;
  v14 = v4;
  sub_224F68510();
  ModelsR4.ImmunizationProtocol.hash(into:)((uint64_t)v7);
  return sub_224F6854C();
}

uint64_t sub_224DEE194()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v7[10];
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 80);
  v7[9] = *(_QWORD *)v0;
  v8 = v1;
  v9 = *(_OWORD *)(v0 + 16);
  v10 = v2;
  v11 = v3;
  v5 = *(_OWORD *)(v0 + 64);
  v12 = *(_OWORD *)(v0 + 48);
  v13 = v5;
  v14 = v4;
  sub_224F68510();
  ModelsR4.ImmunizationProtocol.hash(into:)((uint64_t)v7);
  return sub_224F6854C();
}

uint64_t ModelsR4.ImmunizationPerformer.actor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_224DDB4B4(v1, a1, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t ModelsR4.ImmunizationPerformer.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for Reference();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v12 - v9;
  sub_224DDB4B4(v2, (uint64_t)&v12 - v9, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
    return sub_224F68528();
  sub_224DDEADC((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224F68528();
  if (!*((_QWORD *)v7 + 1))
  {
    sub_224F68528();
    if (*((_QWORD *)v7 + 3))
      goto LABEL_5;
LABEL_7:
    sub_224F68528();
    goto LABEL_8;
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)v7 + 3))
    goto LABEL_7;
LABEL_5:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
LABEL_8:
  sub_224DF235C(a1);
  return sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
}

uint64_t sub_224DEE418()
{
  return 0x726F746361;
}

uint64_t sub_224DEE42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x726F746361 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_224F683CC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_224DEE4B8()
{
  sub_224DFB52C();
  return sub_224F685B8();
}

uint64_t sub_224DEE4E0()
{
  sub_224DFB52C();
  return sub_224F685C4();
}

uint64_t ModelsR4.ImmunizationPerformer.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_224DFB77C(0, &qword_2557E0840, (uint64_t (*)(void))sub_224DFB52C, (uint64_t)&type metadata for ModelsR4.ImmunizationPerformer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB52C();
  sub_224F68594();
  type metadata accessor for Reference();
  sub_224DDACD4(&qword_2557E0758, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
  sub_224F68330();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ModelsR4.ImmunizationPerformer.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.ImmunizationPerformer.hash(into:));
}

uint64_t ModelsR4.ImmunizationPerformer.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v19 = a2;
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v20 = (char *)&v18 - v5;
  sub_224DFB77C(0, &qword_2557E0850, (uint64_t (*)(void))sub_224DFB52C, (uint64_t)&type metadata for ModelsR4.ImmunizationPerformer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v18 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - v8;
  v10 = type metadata accessor for ModelsR4.ImmunizationPerformer(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB52C();
  sub_224F6857C();
  if (!v2)
  {
    v13 = (uint64_t)v12;
    v14 = v19;
    type metadata accessor for Reference();
    sub_224DDACD4(&qword_2557E0500, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
    v15 = (uint64_t)v20;
    v16 = v18;
    sub_224F68294();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v16);
    sub_224DFAC88(v15, v13, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_224DDEADC(v13, v14, type metadata accessor for ModelsR4.ImmunizationPerformer);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_224DEE86C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.ImmunizationPerformer.init(from:)(a1, a2);
}

uint64_t sub_224DEE880(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_224DFB77C(0, &qword_2557E0840, (uint64_t (*)(void))sub_224DFB52C, (uint64_t)&type metadata for ModelsR4.ImmunizationPerformer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB52C();
  sub_224F68594();
  type metadata accessor for Reference();
  sub_224DDACD4(&qword_2557E0758, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
  sub_224F68330();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_224DEE9B0(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.ImmunizationPerformer.hash(into:));
}

uint64_t sub_224DEE9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.ImmunizationPerformer.hash(into:));
}

uint64_t ModelsR4.Observation.resourceType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Observation.resourceType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsR4.Observation.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Observation.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V9ConditionV2idSSSgvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ModelsR4.Observation.id.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Observation.meta.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *a1 = v2;
  return sub_224DFAE98(v2);
}

uint64_t ModelsR4.Observation.status.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Observation.category.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V16DiagnosticReportV4codeAA15CodeableConceptVvg_0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[9];
  v3 = v1[10];
  *a1 = v1[8];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Observation.effectiveDateTime.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEEB44(type metadata accessor for ModelsR4.Observation, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, a1);
}

uint64_t sub_224DEEB44@<X0>(uint64_t (*a1)(_QWORD)@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return sub_224DDB4B4(v4 + *(int *)(v8 + 40), a4, a2, a3);
}

uint64_t ModelsR4.Observation.effectiveInstant.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEA934(type metadata accessor for ModelsR4.Observation, a1);
}

uint64_t ModelsR4.Observation.effectivePeriod.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEC6B8(type metadata accessor for ModelsR4.Observation, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsR4.Observation.issued.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DE9C84(type metadata accessor for ModelsR4.Observation, a1);
}

uint64_t ModelsR4.Observation.note.getter()
{
  return sub_224DEEBD4((void (*)(_QWORD))type metadata accessor for ModelsR4.Observation);
}

uint64_t sub_224DEEBD4(void (*a1)(_QWORD))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Observation.performer.getter()
{
  return sub_224DEEC04((void (*)(_QWORD))type metadata accessor for ModelsR4.Observation);
}

uint64_t sub_224DEEC04(void (*a1)(_QWORD))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Observation.valueString.getter()
{
  return sub_224DEAAAC(type metadata accessor for ModelsR4.Observation);
}

uint64_t ModelsR4.Observation.valueCodeableConcept.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ModelsR4.Observation(0) + 68));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  return sub_224DDB44C(v4, v5);
}

uint64_t ModelsR4.Observation.valueQuantity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ModelsR4.Observation(0);
  return sub_224DDB4B4(v1 + *(int *)(v3 + 72), a1, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
}

uint64_t ModelsR4.Observation.referenceRange.getter()
{
  type metadata accessor for ModelsR4.Observation(0);
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Observation.language.getter()
{
  return sub_224DEECE0(type metadata accessor for ModelsR4.Observation);
}

uint64_t sub_224DEECE0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 80));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsR4.Observation.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = v1;
  v4 = type metadata accessor for Quantity();
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0300, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v42 = (uint64_t)&v39 - v10;
  v11 = type metadata accessor for Period();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E04B8, v15, v7);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v39 - v17;
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v2[3])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v19 = v2[4];
  if (v19 == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    sub_224F68528();
    if (v19)
    {
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v19);
      v20 = v19;
    }
    else
    {
      sub_224DE60AC(0);
      v20 = 0;
    }
    sub_224DE60AC(v20);
  }
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  v21 = v2[7];
  sub_224F68528();
  if (v21)
  {
    swift_bridgeObjectRetain();
    sub_224DDC1C0(a1, v21);
    swift_bridgeObjectRelease();
  }
  v23 = v2[9];
  v22 = v2[10];
  v39 = v6;
  if (v23)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v22)
    {
LABEL_14:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDA83C(a1, v22);
      swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v22)
      goto LABEL_14;
  }
  sub_224F68528();
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  v24 = (int *)type metadata accessor for ModelsR4.Observation(0);
  sub_224DF2AC8();
  sub_224DF2AC8();
  sub_224DDB4B4((uint64_t)v2 + v24[12], (uint64_t)v18, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v18, 1, v11) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224DDEADC((uint64_t)v18, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224F68528();
    sub_224DF2AC8();
    sub_224DF2AC8();
    sub_224DDEAA0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  }
  sub_224DF2AC8();
  v25 = *(_QWORD *)((char *)v2 + v24[14]);
  sub_224F68528();
  if (v25)
  {
    swift_bridgeObjectRetain();
    sub_224DDBCDC(a1, v25);
    swift_bridgeObjectRelease();
  }
  v26 = *(_QWORD *)((char *)v2 + v24[15]);
  sub_224F68528();
  if (v26)
  {
    swift_bridgeObjectRetain();
    sub_224DDCC54(a1, v26);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)((char *)v2 + v24[16] + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v28 = v40;
  v27 = v41;
  v29 = (_QWORD *)((char *)v2 + v24[17]);
  v30 = v29[1];
  if (v30 == 1)
  {
    sub_224F68528();
    goto LABEL_35;
  }
  v31 = *v29;
  v32 = v29[2];
  sub_224F68528();
  if (!v30)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    if (v32)
      goto LABEL_31;
LABEL_33:
    sub_224F68528();
    v33 = v31;
    v34 = v30;
    goto LABEL_34;
  }
  sub_224F68528();
  sub_224DDB44C(v31, v30);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v32)
    goto LABEL_33;
LABEL_31:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDA83C(a1, v32);
  swift_bridgeObjectRelease();
  v33 = v31;
  v34 = v30;
LABEL_34:
  sub_224DDB480(v33, v34);
LABEL_35:
  v35 = v42;
  sub_224DDB4B4((uint64_t)v2 + v24[18], v42, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v35, 1, v27) == 1)
  {
    sub_224F68528();
  }
  else
  {
    v36 = (uint64_t)v39;
    sub_224DDEADC(v35, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0(v36, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  v37 = *(_QWORD *)((char *)v2 + v24[19]);
  sub_224F68528();
  if (v37)
  {
    swift_bridgeObjectRetain();
    sub_224DDDB8C(a1, v37);
    swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)((char *)v2 + v24[20] + 8))
    return sub_224F68528();
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224DEF418(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224DEF454 + 4 * byte_224F6B1FA[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224DEF454()
{
  return 25705;
}

uint64_t sub_224DEF460()
{
  return 1635018093;
}

uint64_t sub_224DEF470()
{
  return 0x737574617473;
}

uint64_t sub_224DEF484()
{
  return 0x79726F6765746163;
}

uint64_t sub_224DEF49C()
{
  return 1701080931;
}

unint64_t sub_224DEF4AC()
{
  return 0xD000000000000011;
}

uint64_t sub_224DEF584()
{
  return 0x61755165756C6176;
}

uint64_t sub_224DEF5A8()
{
  return 0x636E657265666572;
}

uint64_t sub_224DEF5CC()
{
  return 0x65676175676E616CLL;
}

BOOL sub_224DEF5E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_224DEF5F8()
{
  return sub_224F6851C();
}

uint64_t sub_224DEF620()
{
  unsigned __int8 *v0;

  return sub_224DEF418(*v0);
}

uint64_t sub_224DEF628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E5089C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224DEF64C()
{
  sub_224DE67B4();
  return sub_224F685B8();
}

uint64_t sub_224DEF674()
{
  sub_224DE67B4();
  return sub_224F685C4();
}

uint64_t ModelsR4.Observation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v14;
  int *v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E0858, (uint64_t (*)(void))sub_224DE67B4, (uint64_t)&type metadata for ModelsR4.Observation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE67B4();
  sub_224F68594();
  LOBYTE(v16) = 0;
  sub_224F68348();
  if (!v2)
  {
    LOBYTE(v16) = 1;
    sub_224F68300();
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + 32);
    v18 = 2;
    sub_224DDAD8C();
    sub_224F68330();
    LOBYTE(v16) = 3;
    sub_224F68348();
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + 56);
    v18 = 4;
    sub_224DFB644(0, &qword_2557E04E0);
    sub_224DFAEEC();
    sub_224F68330();
    v10 = *(_QWORD *)(v3 + 80);
    v16 = *(_OWORD *)(v3 + 64);
    v17 = v10;
    v18 = 5;
    sub_224DFAEA8();
    sub_224F68378();
    v15 = (int *)type metadata accessor for ModelsR4.Observation(0);
    LOBYTE(v16) = 6;
    type metadata accessor for FHIRDateTime();
    sub_224DDACD4(&qword_2557E0748, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t)&protocol conformance descriptor for FHIRDateTime);
    sub_224F68330();
    LOBYTE(v16) = 7;
    sub_224F68330();
    v14 = v3 + v15[12];
    LOBYTE(v16) = 8;
    type metadata accessor for Period();
    sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    sub_224F68330();
    LOBYTE(v16) = 9;
    sub_224F68330();
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + v15[14]);
    v18 = 10;
    sub_224DDEA0C(0, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFAF5C();
    sub_224F68330();
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + v15[15]);
    v18 = 11;
    sub_224DDEA0C(0, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFB07C();
    sub_224F68330();
    LOBYTE(v16) = 12;
    sub_224F68300();
    v11 = (__int128 *)(v3 + v15[17]);
    v12 = *((_QWORD *)v11 + 2);
    v16 = *v11;
    v17 = v12;
    v18 = 13;
    sub_224F68330();
    LOBYTE(v16) = 14;
    type metadata accessor for Quantity();
    sub_224DDACD4(&qword_2557E0860, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
    sub_224F68330();
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + v15[19]);
    v18 = 15;
    sub_224DDEA0C(0, &qword_2557E0630, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_224DFB570();
    sub_224F68330();
    LOBYTE(v16) = 16;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.Observation.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.Observation.hash(into:));
}

uint64_t sub_224DEFC84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_224DEFCB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Observation.init(from:)(a1, a2);
}

uint64_t sub_224DEFCC4(_QWORD *a1)
{
  return ModelsR4.Observation.encode(to:)(a1);
}

uint64_t sub_224DEFCD8(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.Observation.hash(into:));
}

uint64_t sub_224DEFCE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.Observation.hash(into:));
}

uint64_t sub_224DEFCF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 80));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ModelsR4.HumanName.prefix.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.HumanName.family.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.HumanName.given.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.HumanName.suffix.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.HumanName.period.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_224DEEB44(type metadata accessor for ModelsR4.HumanName, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, a1);
}

uint64_t ModelsR4.HumanName.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for Period();
  v20 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E04B8, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - v6;
  if (v0[1])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    v8 = v0[2];
    if (v8)
      goto LABEL_3;
LABEL_21:
    sub_224F68528();
    if (v0[4])
      goto LABEL_8;
    goto LABEL_22;
  }
  sub_224F68528();
  v8 = v0[2];
  if (!v8)
    goto LABEL_21;
LABEL_3:
  sub_224F68528();
  sub_224F6851C();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = v8 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  if (v0[4])
  {
LABEL_8:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    v11 = v0[5];
    if (v11)
      goto LABEL_9;
LABEL_23:
    sub_224F68528();
    v14 = v0[6];
    if (v14)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_22:
  sub_224F68528();
  v11 = v0[5];
  if (!v11)
    goto LABEL_23;
LABEL_9:
  sub_224F68528();
  sub_224F6851C();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    v13 = v11 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      v13 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
  v14 = v0[6];
  if (v14)
  {
LABEL_14:
    sub_224F68528();
    sub_224F6851C();
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain();
      v16 = v14 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        v16 += 16;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
    }
    if (v0[8])
      goto LABEL_19;
    goto LABEL_25;
  }
LABEL_24:
  sub_224F68528();
  if (v0[8])
  {
LABEL_19:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
LABEL_25:
  sub_224F68528();
LABEL_26:
  v17 = type metadata accessor for ModelsR4.HumanName(0);
  sub_224DDB4B4((uint64_t)v0 + *(int *)(v17 + 40), (uint64_t)v7, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v1) == 1)
    return sub_224F68528();
  sub_224DDEADC((uint64_t)v7, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  sub_224F68528();
  sub_224DF2AC8();
  sub_224DF2AC8();
  return sub_224DDEAA0((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for Period);
}

uint64_t sub_224DF0154()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224DF017C + 4 * byte_224F6B20B[*v0]))(6648693, 0xE300000000000000);
}

uint64_t sub_224DF017C()
{
  return 0x786966657270;
}

uint64_t sub_224DF0190()
{
  return 0x796C696D6166;
}

uint64_t sub_224DF01A4()
{
  return 0x6E65766967;
}

uint64_t sub_224DF01B8()
{
  return 0x786966667573;
}

uint64_t sub_224DF01CC()
{
  return 1954047348;
}

uint64_t sub_224DF01DC()
{
  return 0x646F69726570;
}

uint64_t sub_224DF01F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E50FA4(a1, a2);
  *a3 = result;
  return result;
}

void sub_224DF0214(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_224DF0220()
{
  sub_224DFB600();
  return sub_224F685B8();
}

uint64_t sub_224DF0248()
{
  sub_224DFB600();
  return sub_224F685C4();
}

uint64_t ModelsR4.HumanName.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v3 = v1;
  sub_224DFB77C(0, &qword_2557E0878, (uint64_t (*)(void))sub_224DFB600, (uint64_t)&type metadata for ModelsR4.HumanName.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB600();
  sub_224F68594();
  LOBYTE(v13) = 0;
  sub_224F68300();
  if (!v2)
  {
    v13 = v3[2];
    v12 = 1;
    sub_224DFB644(0, (unint64_t *)&qword_2557E0888);
    sub_224DFB688(&qword_2557E0890, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_224F68330();
    LOBYTE(v13) = 2;
    sub_224F68300();
    v13 = v3[5];
    v12 = 3;
    sub_224F68330();
    v13 = v3[6];
    v12 = 4;
    sub_224F68330();
    LOBYTE(v13) = 5;
    sub_224F68300();
    type metadata accessor for ModelsR4.HumanName(0);
    LOBYTE(v13) = 6;
    type metadata accessor for Period();
    sub_224DDACD4(&qword_2557E0750, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
    sub_224F68330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ModelsR4.HumanName.hashValue.getter()
{
  return sub_224DF0524((void (*)(_BYTE *))ModelsR4.HumanName.hash(into:));
}

uint64_t sub_224DF0524(void (*a1)(_BYTE *))
{
  _BYTE v3[72];

  sub_224F68510();
  a1(v3);
  return sub_224F6854C();
}

uint64_t ModelsR4.HumanName.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v18 = a2;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v19 = (char *)&v18 - v4;
  sub_224DFB77C(0, &qword_2557E0898, (uint64_t (*)(void))sub_224DFB600, (uint64_t)&type metadata for ModelsR4.HumanName.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v20 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = type metadata accessor for ModelsR4.HumanName(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = a1[3];
  v21 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_224DFB600();
  v11 = v22;
  sub_224F6857C();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  v22 = v7;
  v12 = (uint64_t)v19;
  v13 = v20;
  LOBYTE(v24) = 0;
  *v9 = sub_224F68264();
  v9[1] = v14;
  sub_224DFB644(0, (unint64_t *)&qword_2557E0888);
  v23 = 1;
  sub_224DFB688(&qword_2557E08A0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_224F68294();
  v9[2] = v24;
  LOBYTE(v24) = 2;
  v9[3] = sub_224F68264();
  v9[4] = v15;
  v23 = 3;
  sub_224F68294();
  v9[5] = v24;
  v23 = 4;
  sub_224F68294();
  v9[6] = v24;
  LOBYTE(v24) = 5;
  v9[7] = sub_224F68264();
  v9[8] = v16;
  type metadata accessor for Period();
  LOBYTE(v24) = 6;
  sub_224DDACD4(&qword_2557E04F8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t)&protocol conformance descriptor for Period);
  sub_224F68294();
  (*(void (**)(_QWORD, uint64_t))(v6 + 8))(0, v13);
  sub_224DFAC88(v12, (uint64_t)v9 + *(int *)(v22 + 40), &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB408((uint64_t)v9, v18, type metadata accessor for ModelsR4.HumanName);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return sub_224DDEAA0((uint64_t)v9, type metadata accessor for ModelsR4.HumanName);
}

uint64_t sub_224DF0A14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.HumanName.init(from:)(a1, a2);
}

uint64_t sub_224DF0A28(_QWORD *a1)
{
  return ModelsR4.HumanName.encode(to:)(a1);
}

uint64_t sub_224DF0A3C(uint64_t a1, uint64_t a2)
{
  return sub_224DF0A48(a1, a2, (void (*)(_BYTE *))ModelsR4.HumanName.hash(into:));
}

uint64_t sub_224DF0A48(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  _BYTE v5[72];

  sub_224F68510();
  a3(v5);
  return sub_224F6854C();
}

uint64_t sub_224DF0A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DF0A98(a1, a2, a3, (void (*)(_BYTE *))ModelsR4.HumanName.hash(into:));
}

uint64_t sub_224DF0A98(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  sub_224F68510();
  a4(v6);
  return sub_224F6854C();
}

uint64_t ModelsR4.PatientLink.other.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_224DDB408(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
}

uint64_t ModelsR4.PatientLink.other.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_224DFB6F4(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
}

uint64_t (*ModelsR4.PatientLink.other.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.PatientLink.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ModelsR4.PatientLink(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.PatientLink.type.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ModelsR4.PatientLink(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ModelsR4.PatientLink.type.modify())()
{
  type metadata accessor for ModelsR4.PatientLink(0);
  return nullsub_1;
}

uint64_t ModelsR4.PatientLink.hash(into:)(uint64_t a1)
{
  Reference.hash(into:)(a1);
  type metadata accessor for ModelsR4.PatientLink(0);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t static ModelsR4.PatientLink.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (!_s23HealthRecordsExtraction9ReferenceV2eeoiySbAC_ACtFZ_0(a1, a2))
    return 0;
  v4 = *(int *)(type metadata accessor for ModelsR4.PatientLink(0) + 20);
  v5 = *(_QWORD *)((char *)a1 + v4);
  v6 = *(_QWORD *)((char *)a1 + v4 + 8);
  v7 = (_QWORD *)((char *)a2 + v4);
  if (v5 == *v7 && v6 == v7[1])
    return 1;
  else
    return sub_224F683CC();
}

BOOL sub_224DF0C98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_224DF0CB0()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224DF0CF4()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224DF0D34()
{
  _BYTE *v0;

  if (*v0)
    return 1701869940;
  else
    return 0x726568746FLL;
}

uint64_t sub_224DF0D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E51240(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224DF0D88()
{
  sub_224DFB738();
  return sub_224F685B8();
}

uint64_t sub_224DF0DB0()
{
  sub_224DFB738();
  return sub_224F685C4();
}

uint64_t ModelsR4.PatientLink.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;

  sub_224DFB77C(0, &qword_2557E08A8, (uint64_t (*)(void))sub_224DFB738, (uint64_t)&type metadata for ModelsR4.PatientLink.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB738();
  sub_224F68594();
  v11 = 0;
  type metadata accessor for Reference();
  sub_224DDACD4(&qword_2557E0758, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
  sub_224F68378();
  if (!v1)
  {
    type metadata accessor for ModelsR4.PatientLink(0);
    v10 = 1;
    sub_224F68348();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ModelsR4.PatientLink.hashValue.getter()
{
  _BYTE v1[72];

  sub_224F68510();
  Reference.hash(into:)((uint64_t)v1);
  type metadata accessor for ModelsR4.PatientLink(0);
  sub_224F67C34();
  return sub_224F6854C();
}

uint64_t ModelsR4.PatientLink.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v21 = a2;
  v22 = type metadata accessor for Reference();
  MEMORY[0x24BDAC7A8](v22);
  v23 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DFB77C(0, &qword_2557E08B8, (uint64_t (*)(void))sub_224DFB738, (uint64_t)&type metadata for ModelsR4.PatientLink.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v24 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - v6;
  v8 = type metadata accessor for ModelsR4.PatientLink(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DFB738();
  v11 = v25;
  sub_224F6857C();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v25 = v8;
  v12 = (uint64_t)v10;
  v27 = 0;
  sub_224DDACD4(&qword_2557E0500, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
  v13 = (uint64_t)v23;
  v14 = v24;
  sub_224F682DC();
  sub_224DDEADC(v13, v12, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  v26 = 1;
  v15 = sub_224F682AC();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v14);
  v18 = (uint64_t *)(v12 + *(int *)(v25 + 20));
  *v18 = v15;
  v18[1] = v17;
  sub_224DDB408(v12, v21, type metadata accessor for ModelsR4.PatientLink);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_224DDEAA0(v12, type metadata accessor for ModelsR4.PatientLink);
}

uint64_t sub_224DF1228@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.PatientLink.init(from:)(a1, a2);
}

uint64_t sub_224DF123C(_QWORD *a1)
{
  return ModelsR4.PatientLink.encode(to:)(a1);
}

uint64_t sub_224DF1250()
{
  _BYTE v1[72];

  sub_224F68510();
  Reference.hash(into:)((uint64_t)v1);
  sub_224F67C34();
  return sub_224F6854C();
}

uint64_t sub_224DF12A4(uint64_t a1)
{
  Reference.hash(into:)(a1);
  return sub_224F67C34();
}

uint64_t sub_224DF12E0()
{
  _BYTE v1[72];

  sub_224F68510();
  Reference.hash(into:)((uint64_t)v1);
  sub_224F67C34();
  return sub_224F6854C();
}

uint64_t sub_224DF1330(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (!static Reference.== infix(_:_:)(a1, a2))
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(_QWORD *)((char *)a1 + v6);
  v8 = *(_QWORD *)((char *)a1 + v6 + 8);
  v9 = (_QWORD *)((char *)a2 + v6);
  if (v7 == *v9 && v8 == v9[1])
    return 1;
  else
    return sub_224F683CC();
}

uint64_t ModelsR4.Patient.resourceType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Patient.resourceType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ModelsR4.Patient.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Patient.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Patient.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ModelsR4.Patient.id.modify())()
{
  return nullsub_1;
}

void ModelsR4.Patient.birthDate.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *(_DWORD *)(v1 + 40);
  v3 = *(_BYTE *)(v1 + 44);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 12) = v3;
}

uint64_t ModelsR4.Patient.gender.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Patient.gender.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*ModelsR4.Patient.gender.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Patient.name.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.telecom.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.identifier.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.address.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.maritalStatus.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[12];
  v3 = v1[13];
  v4 = v1[14];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return sub_224DDB44C(v2, v3);
}

uint64_t ModelsR4.Patient.link.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.link.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 120) = a1;
  return result;
}

uint64_t (*ModelsR4.Patient.link.modify())()
{
  return nullsub_1;
}

uint64_t ModelsR4.Patient.extension.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelsR4.Patient.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ModelsR4.Patient.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v3 = type metadata accessor for ModelsR4.HumanName(0);
  v42 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + 24);
  v40 = *(_QWORD *)(v1 + 16);
  v38 = *(_QWORD *)(v1 + 32);
  v7 = *(_DWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 44);
  v41 = *(_QWORD *)(v1 + 48);
  v44 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v49 = *(_QWORD *)(v1 + 72);
  v50 = v9;
  v45 = *(_QWORD *)(v1 + 80);
  v51 = *(_QWORD *)(v1 + 88);
  v10 = *(_QWORD *)(v1 + 104);
  v39 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 120);
  v46 = *(_QWORD *)(v1 + 112);
  v47 = *(_QWORD *)(v1 + 128);
  v43 = *(_QWORD *)(v1 + 136);
  v48 = *(_QWORD *)(v1 + 144);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  sub_224F68528();
  if (v6)
  {
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  v12 = v11;
  v13 = v10;
  v14 = v51;
  if ((v8 & 1) != 0)
  {
    v15 = v46;
  }
  else
  {
    sub_224F68528();
    sub_224F6851C();
    if ((v7 & 0x100) == 0)
      sub_224F68528();
    v15 = v46;
    sub_224F68528();
    if ((v7 & 0x1000000) == 0)
      sub_224F68528();
  }
  v16 = v44;
  sub_224F68528();
  sub_224F68528();
  if (v16)
  {
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  v17 = v50;
  sub_224F6851C();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v19 = v17 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    v20 = *(_QWORD *)(v42 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_224DDB408(v19, (uint64_t)v5, type metadata accessor for ModelsR4.HumanName);
      ModelsR4.HumanName.hash(into:)();
      sub_224DDEAA0((uint64_t)v5, type metadata accessor for ModelsR4.HumanName);
      v19 += v20;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    v14 = v51;
  }
  v21 = v49;
  if (v49)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDCB50(a1, v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v22 = v48;
  v23 = v47;
  v24 = v45;
  if (v45)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDC7A0(a1, v24);
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_20;
LABEL_31:
    sub_224F68528();
    if (v13 == 1)
      goto LABEL_26;
LABEL_32:
    sub_224F68528();
    if (v13)
    {
      sub_224F68528();
      v37 = v39;
      sub_224DDB44C(v39, v13);
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v15)
        goto LABEL_34;
    }
    else
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      v37 = v39;
      if (v15)
      {
LABEL_34:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDA83C(a1, v15);
        swift_bridgeObjectRelease();
        sub_224DDB480(v37, v13);
        if (v12)
          goto LABEL_38;
        goto LABEL_27;
      }
    }
    sub_224F68528();
    sub_224DDB480(v37, v13);
    if (v12)
      goto LABEL_38;
LABEL_27:
    sub_224F68528();
    if (!v23)
      goto LABEL_28;
LABEL_39:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDB75C(a1, v23);
    swift_bridgeObjectRelease();
    if (!v22)
      return sub_224F68528();
    goto LABEL_40;
  }
  sub_224F68528();
  if (!v14)
    goto LABEL_31;
LABEL_20:
  sub_224F68528();
  v25 = *(_QWORD *)(v14 + 16);
  sub_224F6851C();
  if (v25)
  {
    swift_bridgeObjectRetain();
    v26 = *(_OWORD *)(v14 + 144);
    v58 = *(_OWORD *)(v14 + 128);
    v59 = v26;
    v60 = *(_QWORD *)(v14 + 160);
    v27 = *(_OWORD *)(v14 + 80);
    v54 = *(_OWORD *)(v14 + 64);
    v55 = v27;
    v28 = *(_OWORD *)(v14 + 112);
    v56 = *(_OWORD *)(v14 + 96);
    v57 = v28;
    v29 = *(_OWORD *)(v14 + 48);
    v52 = *(_OWORD *)(v14 + 32);
    v53 = v29;
    Address.hash(into:)();
    v30 = v25 - 1;
    if (v30)
    {
      v31 = (__int128 *)(v14 + 168);
      do
      {
        v32 = v31[7];
        v58 = v31[6];
        v59 = v32;
        v60 = *((_QWORD *)v31 + 16);
        v33 = v31[3];
        v54 = v31[2];
        v55 = v33;
        v34 = v31[5];
        v56 = v31[4];
        v57 = v34;
        v35 = v31[1];
        v52 = *v31;
        v53 = v35;
        Address.hash(into:)();
        v31 = (__int128 *)((char *)v31 + 136);
        --v30;
      }
      while (v30);
    }
    swift_bridgeObjectRelease();
  }
  if (v13 != 1)
    goto LABEL_32;
LABEL_26:
  sub_224F68528();
  if (!v12)
    goto LABEL_27;
LABEL_38:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDC604(a1, v12);
  swift_bridgeObjectRelease();
  if (v23)
    goto LABEL_39;
LABEL_28:
  sub_224F68528();
  if (!v22)
    return sub_224F68528();
LABEL_40:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224DF1B88(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224DF1BC4 + 4 * byte_224F6B212[a1]))(0x656372756F736572, 0xEC00000065707954);
}

uint64_t sub_224DF1BC4()
{
  return 25705;
}

uint64_t sub_224DF1BD0()
{
  return 0x7461446874726962;
}

uint64_t sub_224DF1BEC()
{
  return 0x7265646E6567;
}

uint64_t sub_224DF1C00()
{
  return 1701667182;
}

uint64_t sub_224DF1C10()
{
  return 0x6D6F63656C6574;
}

uint64_t sub_224DF1C28()
{
  return 0x696669746E656469;
}

uint64_t sub_224DF1C44()
{
  return 0x73736572646461;
}

uint64_t sub_224DF1C5C()
{
  return 0x536C61746972616DLL;
}

uint64_t sub_224DF1C80()
{
  return 1802398060;
}

uint64_t sub_224DF1C90()
{
  return 0x6F69736E65747865;
}

uint64_t sub_224DF1CB0()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_224DF1CC8()
{
  unsigned __int8 *v0;

  return sub_224DF1B88(*v0);
}

uint64_t sub_224DF1CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E51318(a1, a2);
  *a3 = result;
  return result;
}

void sub_224DF1CF4(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_224DF1D00()
{
  sub_224DE6888();
  return sub_224F685B8();
}

uint64_t sub_224DF1D28()
{
  sub_224DE6888();
  return sub_224F685C4();
}

uint64_t ModelsR4.Patient.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;

  sub_224DFB77C(0, &qword_2557E08C0, (uint64_t (*)(void))sub_224DE6888, (uint64_t)&type metadata for ModelsR4.Patient.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v21 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  v35 = *(_QWORD *)(v1 + 24);
  v36 = v8;
  v34 = *(_QWORD *)(v1 + 32);
  v41 = *(_DWORD *)(v1 + 40);
  v33 = *(unsigned __int8 *)(v1 + 44);
  v9 = *(_QWORD *)(v1 + 48);
  v31 = *(_QWORD *)(v1 + 56);
  v32 = v9;
  v10 = *(_QWORD *)(v1 + 64);
  v29 = *(_QWORD *)(v1 + 72);
  v30 = v10;
  v11 = *(_QWORD *)(v1 + 80);
  v27 = *(_QWORD *)(v1 + 88);
  v28 = v11;
  v12 = *(_QWORD *)(v1 + 104);
  v24 = *(_QWORD *)(v1 + 96);
  v25 = v12;
  v26 = *(_QWORD *)(v1 + 112);
  v13 = *(_QWORD *)(v1 + 120);
  v22 = *(_QWORD *)(v1 + 128);
  v23 = v13;
  v14 = *(_QWORD *)(v1 + 144);
  v21[0] = *(_QWORD *)(v1 + 136);
  v21[1] = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224DE6888();
  v15 = v4;
  sub_224F68594();
  LOBYTE(v38) = 0;
  v16 = v37;
  sub_224F68348();
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v17 = v33;
  v18 = v41;
  v19 = v34;
  LOBYTE(v38) = 1;
  sub_224F68300();
  v38 = v19;
  LODWORD(v39) = v18;
  BYTE4(v39) = v17;
  v42 = 2;
  sub_224DFB31C();
  sub_224F68330();
  v37 = v5;
  LOBYTE(v38) = 3;
  sub_224F68300();
  v38 = v30;
  v42 = 4;
  sub_224DDEA0C(0, &qword_2557E0660, type metadata accessor for ModelsR4.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224DFB7D8();
  sub_224F68378();
  v38 = v29;
  v42 = 5;
  sub_224DFB644(0, &qword_2557E0678);
  sub_224DFB868();
  sub_224F68330();
  v38 = v28;
  v42 = 6;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E0690, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224DFB91C();
  sub_224F68330();
  v38 = v27;
  v42 = 7;
  sub_224DFB644(0, &qword_2557E06A8);
  sub_224DFB9AC();
  sub_224F68330();
  v38 = v24;
  v39 = v25;
  v40 = v26;
  v42 = 8;
  sub_224DFAEA8();
  sub_224F68330();
  v38 = v23;
  v42 = 9;
  sub_224DDEA0C(0, &qword_2557E06C0, type metadata accessor for ModelsR4.PatientLink, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224DFBA60();
  sub_224F68330();
  v38 = v22;
  v42 = 10;
  sub_224DDEA0C(0, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224DFAFEC();
  sub_224F68330();
  LOBYTE(v38) = 11;
  sub_224F68300();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
}

uint64_t ModelsR4.Patient.hashValue.getter()
{
  _BYTE v1[72];

  sub_224F68510();
  ModelsR4.Patient.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224DF228C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ModelsR4.Patient.init(from:)(a1, a2);
}

uint64_t sub_224DF22A0(_QWORD *a1)
{
  return ModelsR4.Patient.encode(to:)(a1);
}

uint64_t sub_224DF22B4()
{
  _BYTE v1[72];

  sub_224F68510();
  ModelsR4.Patient.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224DF22F4()
{
  _BYTE v1[72];

  sub_224F68510();
  ModelsR4.Patient.hash(into:)((uint64_t)v1);
  return sub_224F6854C();
}

uint64_t sub_224DF232C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_224DF235C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v31 = a1;
  v1 = sub_224F675D4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for Identifier();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v5);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v31 - v15;
  sub_224DDB4B4((uint64_t)v32, (uint64_t)&v31 - v15, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
    return sub_224F68528();
  v32 = v9;
  sub_224DDEADC((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
  v18 = v31;
  sub_224F68528();
  if (v13[1])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  v19 = v2;
  v20 = v1;
  v21 = v4;
  v22 = v13[3];
  if (v22 != 1)
  {
    v23 = v13[2];
    v24 = v18;
    v25 = v13;
    v26 = v13[4];
    sub_224F68528();
    if (v22)
    {
      sub_224F68528();
      sub_224DDB44C(v23, v22);
      swift_bridgeObjectRetain();
      v27 = v24;
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v26)
      {
LABEL_10:
        sub_224F68528();
        swift_bridgeObjectRetain();
        sub_224DDA83C(v27, v26);
        swift_bridgeObjectRelease();
        v28 = v23;
        v29 = v22;
LABEL_13:
        sub_224DDB480(v28, v29);
        v13 = v25;
        goto LABEL_14;
      }
    }
    else
    {
      v27 = v24;
      sub_224F68528();
      swift_bridgeObjectRetain();
      if (v26)
        goto LABEL_10;
    }
    sub_224F68528();
    v28 = v23;
    v29 = v22;
    goto LABEL_13;
  }
  sub_224F68528();
LABEL_14:
  v30 = (uint64_t)v32;
  sub_224DDB4B4((uint64_t)v13 + *(int *)(v10 + 24), (uint64_t)v32, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v30, 1, v20) == 1)
  {
    sub_224F68528();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v21, v30, v20);
    sub_224F68528();
    sub_224DDACD4(&qword_2557E02F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_224F67B20();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v20);
  }
  if (*(_QWORD *)((char *)v13 + *(int *)(v10 + 28) + 8))
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  return sub_224DDEAA0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
}

uint64_t sub_224DF2764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v1 = sub_224F675D4();
  v19 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v18 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - v6;
  v8 = (int *)type metadata accessor for Coding();
  v9 = *((_QWORD *)v8 - 1);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding, v3);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - v13;
  sub_224DDB4B4(v0, (uint64_t)&v18 - v13, &qword_2557E1438, (uint64_t (*)(uint64_t))type metadata accessor for Coding);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v9 + 48))(v14, 1, v8) == 1)
    return sub_224F68528();
  sub_224DDEADC((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
  sub_224F68528();
  sub_224DDB4B4((uint64_t)v11, (uint64_t)v7, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v16 = v19;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v7, 1, v1) == 1)
  {
    sub_224F68528();
  }
  else
  {
    v17 = v18;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v7, v1);
    sub_224F68528();
    sub_224DDACD4(&qword_2557E02F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_224F67B20();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v1);
  }
  if (*(_QWORD *)&v11[v8[5] + 8])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  if (*(_QWORD *)&v11[v8[6] + 8])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  if (*(_QWORD *)&v11[v8[7] + 8])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  return sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Coding);
}

uint64_t sub_224DF2AC8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[2];
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v31 = sub_224F67874();
  v0 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v2 = (char *)v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0318, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v28 - v6;
  v8 = type metadata accessor for FHIRDateTime();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v3);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v28 - v13;
  sub_224DDB4B4(v32, (uint64_t)v28 - v13, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
    return sub_224F68528();
  v29 = v7;
  v30 = v2;
  v32 = v0;
  sub_224DDEADC((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
  sub_224F68528();
  sub_224F68528();
  v16 = v11[17];
  v17 = v11[19];
  sub_224F6851C();
  if ((v16 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  if ((v17 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  v18 = *((_QWORD *)v11 + 7);
  if (v18 == 1)
    goto LABEL_10;
  v20 = *((_QWORD *)v11 + 3);
  v19 = *((_QWORD *)v11 + 4);
  v21 = *((_QWORD *)v11 + 5);
  v28[0] = *((_QWORD *)v11 + 6);
  v28[1] = HIDWORD(v21);
  sub_224F68528();
  sub_224F68528();
  sub_224F68528();
  sub_224F68528();
  sub_224F67FA0();
  if (!v18)
  {
LABEL_10:
    sub_224F68528();
  }
  else
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    v22 = v28[0];
    sub_224F67C34();
    sub_224DDE9F8(v20, v19, v21, v22, v18);
  }
  v23 = v32;
  v24 = (uint64_t)v29;
  sub_224DDB4B4((uint64_t)&v11[*(int *)(v8 + 28)], (uint64_t)v29, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510]);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v31);
  v26 = v30;
  if (v25 == 1)
  {
    sub_224F68528();
  }
  else
  {
    v27 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v30, v24, v31);
    sub_224F68528();
    sub_224DDACD4(&qword_2557E0320, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF530]);
    sub_224F67B20();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v27);
  }
  if (*(_QWORD *)&v11[*(int *)(v8 + 32) + 8])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_224F68528();
  }
  return sub_224DDEAA0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
}

uint64_t sub_224DF2EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v2 = type metadata accessor for Quantity();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v27 = (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0300, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v26 = (uint64_t)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - v10;
  v12 = type metadata accessor for Range();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E02F8, (uint64_t (*)(uint64_t))type metadata accessor for Range, v5);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v25 - v17;
  sub_224DDB4B4(v1, (uint64_t)&v25 - v17, &qword_2557E02F8, (uint64_t (*)(uint64_t))type metadata accessor for Range);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
    return sub_224F68528();
  sub_224DDEADC((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Range);
  sub_224F68528();
  sub_224DDB4B4((uint64_t)v15, (uint64_t)v11, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v20(v11, 1, v2) == 1)
  {
    sub_224F68528();
  }
  else
  {
    v21 = (uint64_t)v11;
    v22 = v27;
    sub_224DDEADC(v21, v27, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0(v22, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  v23 = v26;
  sub_224DDB4B4((uint64_t)&v15[*(int *)(v12 + 20)], v26, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  if (v20((char *)v23, 1, v2) == 1)
  {
    sub_224F68528();
  }
  else
  {
    v24 = v27;
    sub_224DDEADC(v23, v27, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0(v24, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  return sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Range);
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V6BinaryV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v6 = a1[7];
  v8 = a2[2];
  v7 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11 = a2[7];
  v16 = a2[6];
  v17 = a1[6];
  if (*a1 == *a2 && a1[1] == a2[1] || (v12 = sub_224F683CC(), result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (!v7)
        return 0;
      if (v2 != v8 || v4 != v7)
      {
        v14 = sub_224F683CC();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (v5)
    {
      if (!v9)
        return 0;
      if (v3 != v10 || v5 != v9)
      {
        v15 = sub_224F683CC();
        result = 0;
        if ((v15 & 1) == 0)
          return result;
      }
    }
    else if (v9)
    {
      return 0;
    }
    if (v6)
    {
      if (v11 && (v17 == v16 && v6 == v11 || (sub_224F683CC() & 1) != 0))
        return 1;
    }
    else if (!v11)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V9HumanNameV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BOOL8 result;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  char v39;
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for Period();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - v10;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v40 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v40 - v19;
  v21 = a1[1];
  v22 = a2[1];
  if (!v21)
  {
    if (v22)
      return 0;
    goto LABEL_8;
  }
  if (!v22)
    return 0;
  if (*a1 == *a2 && v21 == v22 || (v23 = sub_224F683CC(), result = 0, (v23 & 1) != 0))
  {
LABEL_8:
    v25 = (_QWORD *)a1[2];
    v26 = (_QWORD *)a2[2];
    if (v25)
    {
      if (!v26 || (sub_224DD698C(v25, v26) & 1) == 0)
        return 0;
    }
    else if (v26)
    {
      return 0;
    }
    v27 = a1[4];
    v28 = a2[4];
    if (v27)
    {
      if (!v28)
        return 0;
      if (a1[3] != a2[3] || v27 != v28)
      {
        v29 = sub_224F683CC();
        result = 0;
        if ((v29 & 1) == 0)
          return result;
      }
    }
    else if (v28)
    {
      return 0;
    }
    v30 = (_QWORD *)a1[5];
    v31 = (_QWORD *)a2[5];
    if (v30)
    {
      if (!v31 || (sub_224DD698C(v30, v31) & 1) == 0)
        return 0;
    }
    else if (v31)
    {
      return 0;
    }
    v32 = (_QWORD *)a1[6];
    v33 = (_QWORD *)a2[6];
    if (v32)
    {
      if (!v33 || (sub_224DD698C(v32, v33) & 1) == 0)
        return 0;
    }
    else if (v33)
    {
      return 0;
    }
    v34 = a1[8];
    v35 = a2[8];
    if (v34)
    {
      if (!v35)
        return 0;
      if (a1[7] != a2[7] || v34 != v35)
      {
        v36 = sub_224F683CC();
        result = 0;
        if ((v36 & 1) == 0)
          return result;
      }
    }
    else if (v35)
    {
      return 0;
    }
    v41 = type metadata accessor for ModelsR4.HumanName(0);
    sub_224DDB4B4((uint64_t)a1 + *(int *)(v41 + 40), (uint64_t)v20, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB4B4((uint64_t)a2 + *(int *)(v41 + 40), (uint64_t)v18, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    v37 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_224DDB4B4((uint64_t)v20, (uint64_t)v11, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB4B4((uint64_t)v18, v37, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v38((uint64_t)v11, 1, v4) == 1)
    {
      sub_224DDB50C((uint64_t)v18, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_224DDB50C((uint64_t)v20, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      if (v38(v37, 1, v4) == 1)
      {
        sub_224DDB50C((uint64_t)v11, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        return 1;
      }
      goto LABEL_42;
    }
    sub_224DDB4B4((uint64_t)v11, (uint64_t)v15, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v38(v37, 1, v4) == 1)
    {
      sub_224DDB50C((uint64_t)v18, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_224DDB50C((uint64_t)v20, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Period);
LABEL_42:
      sub_224DDEA64((uint64_t)v11, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      return 0;
    }
    sub_224DDEADC(v37, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    v39 = static Period.== infix(_:_:)(v15, v7);
    sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224DDB50C((uint64_t)v18, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB50C((uint64_t)v20, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    sub_224DDB50C((uint64_t)v11, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    return (v39 & 1) != 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V7PatientV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  _BOOL8 result;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 44);
  v48 = *(_QWORD *)(a1 + 48);
  v50 = *(_QWORD *)(a1 + 56);
  v46 = *(_QWORD *)(a1 + 64);
  v44 = *(_QWORD *)(a1 + 72);
  v42 = *(_QWORD *)(a1 + 80);
  v39 = *(_QWORD *)(a1 + 96);
  v40 = *(_QWORD *)(a1 + 88);
  v37 = *(_QWORD *)(a1 + 104);
  v35 = *(_QWORD *)(a1 + 112);
  v32 = *(_QWORD *)(a1 + 120);
  v30 = *(_QWORD *)(a1 + 128);
  v26 = *(_QWORD *)(a1 + 136);
  v28 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a2 + 44);
  v47 = *(_QWORD *)(a2 + 48);
  v49 = *(_QWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 64);
  v43 = *(_QWORD *)(a2 + 72);
  v41 = *(_QWORD *)(a2 + 80);
  v38 = *(_QWORD *)(a2 + 88);
  v36 = *(_QWORD *)(a2 + 104);
  v33 = *(_QWORD *)(a2 + 96);
  v34 = *(_QWORD *)(a2 + 112);
  v31 = *(_QWORD *)(a2 + 120);
  v29 = *(_QWORD *)(a2 + 128);
  v25 = *(_QWORD *)(a2 + 136);
  v27 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = sub_224F683CC(), result = 0, (v12 & 1) != 0))
  {
    if (v4)
    {
      if (!v7)
        return 0;
      if (v2 != v8 || v4 != v7)
      {
        v14 = sub_224F683CC();
        result = 0;
        if ((v14 & 1) == 0)
          return result;
      }
    }
    else if (v7)
    {
      return 0;
    }
    if ((v6 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        return 0;
    }
    else
    {
      v54 = v3;
      LODWORD(v55) = v5;
      BYTE4(v55) = 0;
      if ((v11 & 1) != 0)
        return 0;
      v51 = v9;
      LOWORD(v52) = v10 & 0x1FF;
      BYTE2(v52) = BYTE2(v10);
      BYTE3(v52) = HIBYTE(v10) & 1;
      if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v54, (uint64_t)&v51) & 1) == 0)
        return 0;
    }
    if (v50)
    {
      if (!v49)
        return 0;
      if (v48 != v47 || v50 != v49)
      {
        v15 = sub_224F683CC();
        result = 0;
        if ((v15 & 1) == 0)
          return result;
      }
    }
    else if (v49)
    {
      return 0;
    }
    if ((sub_224DD6A50(v46, v45) & 1) == 0)
      return 0;
    if (v44)
    {
      if (!v43 || (sub_224DD6BA0(v44, v43) & 1) == 0)
        return 0;
    }
    else if (v43)
    {
      return 0;
    }
    if (v42)
    {
      if (!v41)
        return 0;
      swift_bridgeObjectRetain();
      v16 = swift_bridgeObjectRetain();
      v17 = sub_224DD6C8C(v16, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
        return 0;
    }
    else if (v41)
    {
      return 0;
    }
    if (v40)
    {
      v18 = v39;
      if (!v38 || !sub_224DD6CA0(v40, v38))
        return 0;
    }
    else
    {
      v18 = v39;
      if (v38)
        return 0;
    }
    if (v37 == 1)
    {
      v19 = v36;
      if (v36 == 1)
      {
LABEL_48:
        if (v32)
        {
          if (!v31)
            return 0;
          swift_bridgeObjectRetain();
          v21 = swift_bridgeObjectRetain();
          v22 = sub_224DD6D78(v21, v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
            return 0;
        }
        else if (v31)
        {
          return 0;
        }
        if (v30)
        {
          if (!v29)
            return 0;
          swift_bridgeObjectRetain();
          v23 = swift_bridgeObjectRetain();
          v24 = sub_224DD68A0(v23, v29);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0)
            return 0;
        }
        else if (v29)
        {
          return 0;
        }
        if (v28)
          return v27 && (v26 == v25 && v28 == v27 || (sub_224F683CC() & 1) != 0);
        return !v27;
      }
    }
    else
    {
      v54 = v18;
      v55 = v37;
      v56 = v35;
      if (v36 != 1)
      {
        v51 = v33;
        v52 = v36;
        v53 = v34;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v20 = static CodeableConcept.== infix(_:_:)(&v54, &v51);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_224DDB480(v18, v37);
        if ((v20 & 1) == 0)
          return 0;
        goto LABEL_48;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = 1;
    }
    sub_224DDB44C(v33, v19);
    sub_224DDB480(v18, v37);
    sub_224DDB480(v33, v19);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V6BundleV0F5EntryV2eeoiySbAG_AGtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v32;
  char v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;

  v4 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E0338, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - v10;
  sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v35 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v35 - v19;
  v21 = a1[1];
  v22 = a2[1];
  if (!v21)
  {
    if (v22)
      goto LABEL_14;
    goto LABEL_8;
  }
  if (!v22)
    goto LABEL_14;
  if (*a1 == *a2 && v21 == v22 || (v23 = sub_224F683CC(), v24 = 0, (v23 & 1) != 0))
  {
LABEL_8:
    v40 = v15;
    v36 = v7;
    v25 = type metadata accessor for ModelsR4.Bundle.BundleEntry(0);
    v26 = *(int *)(v25 + 20);
    v38 = a1;
    sub_224DDB4B4((uint64_t)a1 + v26, (uint64_t)v20, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    v37 = v25;
    v27 = *(int *)(v25 + 20);
    v39 = a2;
    sub_224DDB4B4((uint64_t)a2 + v27, (uint64_t)v18, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    v28 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_224DDB4B4((uint64_t)v20, (uint64_t)v11, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    sub_224DDB4B4((uint64_t)v18, v28, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v29((uint64_t)v11, 1, v4) == 1)
    {
      sub_224DDB50C((uint64_t)v18, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
      sub_224DDB50C((uint64_t)v20, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
      if (v29(v28, 1, v4) == 1)
      {
        sub_224DDB50C((uint64_t)v11, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
LABEL_17:
        sub_224EECC78(*(_QWORD *)((char *)v38 + *(int *)(v37 + 24)), *(_QWORD *)((char *)v38 + *(int *)(v37 + 24) + 8));
        return v24 & 1;
      }
      goto LABEL_13;
    }
    v30 = (uint64_t)v40;
    sub_224DDB4B4((uint64_t)v11, (uint64_t)v40, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    if (v29(v28, 1, v4) == 1)
    {
      sub_224DDB50C((uint64_t)v18, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
      sub_224DDB50C((uint64_t)v20, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
      sub_224DDEAA0(v30, type metadata accessor for ModelsR4.ResourceProxy);
LABEL_13:
      sub_224DDEA64((uint64_t)v11, &qword_2557E0338, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
      goto LABEL_14;
    }
    v32 = v36;
    sub_224DDEADC(v28, (uint64_t)v36, type metadata accessor for ModelsR4.ResourceProxy);
    _s23HealthRecordsExtraction8ModelsR4V13ResourceProxyO2eeoiySbAE_AEtFZ_0(v30, v32);
    v34 = v33;
    sub_224DDEAA0((uint64_t)v32, type metadata accessor for ModelsR4.ResourceProxy);
    sub_224DDB50C((uint64_t)v18, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    sub_224DDB50C((uint64_t)v20, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    sub_224DDEAA0(v30, type metadata accessor for ModelsR4.ResourceProxy);
    sub_224DDB50C((uint64_t)v11, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy);
    if ((v34 & 1) != 0)
      goto LABEL_17;
LABEL_14:
    v24 = 0;
  }
  return v24 & 1;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V24DocumentReferenceContextV2eeoiySbAE_AEtFZ_0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = type metadata accessor for Period();
  v4 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v33 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v7 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v31 - v8;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v31 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v31 - v16;
  v18 = *a2;
  if (*a1)
  {
    if (!v18)
      return 0;
    v32 = v15;
    swift_bridgeObjectRetain();
    v19 = swift_bridgeObjectRetain();
    v20 = sub_224DD7200(v19, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
      return 0;
  }
  else
  {
    v32 = v15;
    if (v18)
      return 0;
  }
  v21 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  sub_224DDB4B4((uint64_t)a1 + *(int *)(v21 + 20), (uint64_t)v17, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB4B4((uint64_t)a2 + *(int *)(v21 + 20), (uint64_t)v14, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v22 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_224DDB4B4((uint64_t)v17, (uint64_t)v9, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB4B4((uint64_t)v14, v22, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  v24 = v34;
  if (v23((uint64_t)v9, 1, v34) == 1)
  {
    sub_224DDB50C((uint64_t)v14, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB50C((uint64_t)v17, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    if (v23(v22, 1, v24) == 1)
    {
      sub_224DDB50C((uint64_t)v9, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
      return 1;
    }
    goto LABEL_11;
  }
  v25 = v32;
  sub_224DDB4B4((uint64_t)v9, v32, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  if (v23(v22, 1, v24) == 1)
  {
    sub_224DDB50C((uint64_t)v14, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDB50C((uint64_t)v17, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    sub_224DDEAA0(v25, (uint64_t (*)(_QWORD))type metadata accessor for Period);
LABEL_11:
    sub_224DDEA64((uint64_t)v9, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
    return 0;
  }
  v26 = v22;
  v27 = v25;
  v28 = v33;
  sub_224DDEADC(v26, v33, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  v29 = static Period.== infix(_:_:)(v27, v28);
  sub_224DDEAA0(v28, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  sub_224DDB50C((uint64_t)v14, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDB50C((uint64_t)v17, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  sub_224DDEAA0(v27, (uint64_t (*)(_QWORD))type metadata accessor for Period);
  sub_224DDB50C((uint64_t)v9, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  return (v29 & 1) != 0;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V24DocumentReferenceContentV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v15[3];
  _QWORD v16[3];

  if ((static Attachment.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for ModelsR4.DocumentReferenceContent(0) + 20);
  v5 = a1 + v4;
  v7 = *(_QWORD *)(a1 + v4);
  v6 = *(_QWORD *)(a1 + v4 + 8);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = (uint64_t *)(a2 + v4);
  v11 = *v9;
  v10 = v9[1];
  v12 = v9[2];
  if (v6 == 1)
  {
    if (v10 == 1)
      return 1;
    goto LABEL_7;
  }
  v16[0] = v7;
  v16[1] = v6;
  v16[2] = v8;
  if (v10 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_7:
    sub_224DDB44C(v11, v10);
    sub_224DDB480(v7, v6);
    sub_224DDB480(v11, v10);
    return 0;
  }
  v15[0] = v11;
  v15[1] = v10;
  v15[2] = v12;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v13 = static CodeableConcept.== infix(_:_:)(v16, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDB480(v7, v6);
  return (v13 & 1) != 0;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V21ImmunizationPerformerV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  _QWORD *v21;
  BOOL v22;
  _QWORD *v24;
  uint64_t v25;

  v25 = a2;
  v3 = type metadata accessor for Reference();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v24 = (_QWORD **)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224DDE904(0, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v7 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - v8;
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (_QWORD **)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v24 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v24 - v17;
  sub_224DDB4B4(a1, (uint64_t)&v24 - v17, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_224DDB4B4(v25, (uint64_t)v16, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v19 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_224DDB4B4((uint64_t)v18, (uint64_t)v9, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_224DDB4B4((uint64_t)v16, v19, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) == 1)
  {
    sub_224DDB50C((uint64_t)v16, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_224DDB50C((uint64_t)v18, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    if (v20(v19, 1, v3) == 1)
    {
      sub_224DDB50C((uint64_t)v9, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
      return 1;
    }
    goto LABEL_6;
  }
  sub_224DDB4B4((uint64_t)v9, (uint64_t)v13, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  if (v20(v19, 1, v3) == 1)
  {
    sub_224DDB50C((uint64_t)v16, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_224DDB50C((uint64_t)v18, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    sub_224DDEAA0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
LABEL_6:
    sub_224DDEA64((uint64_t)v9, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
    return 0;
  }
  v21 = v24;
  sub_224DDEADC(v19, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  v22 = static Reference.== infix(_:_:)(v13, v21);
  sub_224DDEAA0((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224DDB50C((uint64_t)v16, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_224DDB50C((uint64_t)v18, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  sub_224DDEAA0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
  sub_224DDB50C((uint64_t)v9, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  return v22;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V20ImmunizationProtocolV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  _BOOL8 result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD v44[3];

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(unsigned __int8 *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a2 + 72);
  v21 = *(_QWORD *)(a2 + 80);
  if ((v4 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 == *(_QWORD *)a2)
      v22 = *(_BYTE *)(a2 + 8);
    else
      v22 = 1;
    if ((v22 & 1) != 0)
      return 0;
  }
  if (!v6)
  {
    if (v14)
      return 0;
    goto LABEL_15;
  }
  if (!v14)
    return 0;
  if (v5 == *(_QWORD *)(a2 + 16) && v6 == v14)
    goto LABEL_15;
  v41 = v12;
  v42 = v11;
  v39 = v13;
  v40 = *(_QWORD *)(a2 + 72);
  v23 = *(_QWORD *)(a2 + 80);
  v24 = *(_QWORD *)(a2 + 64);
  v25 = sub_224F683CC();
  v20 = v24;
  v13 = v39;
  v19 = v40;
  v21 = v23;
  v12 = v41;
  v11 = v42;
  v26 = v25;
  result = 0;
  if ((v26 & 1) != 0)
  {
LABEL_15:
    if ((v8 & 1) != 0)
    {
      if (!v16)
        return 0;
    }
    else
    {
      if (v7 == v15)
        v28 = v16;
      else
        v28 = 1;
      if ((v28 & 1) != 0)
        return 0;
    }
    if (v10)
    {
      if (!v17)
        return 0;
      if (v9 != v18 || v10 != v17)
      {
        v29 = v13;
        v30 = v21;
        v31 = v19;
        v32 = v20;
        v33 = sub_224F683CC();
        v20 = v32;
        v19 = v31;
        v21 = v30;
        v13 = v29;
        v34 = v33;
        result = 0;
        if ((v34 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (v12 == 1)
    {
      if (v19 == 1)
        return 1;
      goto LABEL_34;
    }
    v44[0] = v11;
    v44[1] = v12;
    v44[2] = v13;
    if (v19 == 1)
    {
      v35 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20 = v35;
      v19 = 1;
LABEL_34:
      v36 = v19;
      v37 = v20;
      sub_224DDB44C(v20, v19);
      sub_224DDB480(v11, v12);
      sub_224DDB480(v37, v36);
      return 0;
    }
    v43[0] = v20;
    v43[1] = v19;
    v43[2] = v21;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v38 = static CodeableConcept.== infix(_:_:)(v44, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDB480(v11, v12);
    return (v38 & 1) != 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V12ImmunizationV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  BOOL v89;
  uint64_t v90;
  int v91;
  int v92;
  _BOOL4 v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  int v105;
  int v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  int *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;

  v135 = type metadata accessor for Reference();
  v134 = *(_QWORD *)(v135 - 8);
  MEMORY[0x24BDAC7A8](v135);
  v131 = (int **)((char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224DDE904(0, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v133 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v127 - v6;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v132 = (int **)((char *)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x24BDAC7A8](v10);
  v136 = (uint64_t)&v127 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v137 = (uint64_t)&v127 - v14;
  v142 = type metadata accessor for FHIRDateTime();
  v15 = *(_QWORD *)(v142 - 8);
  MEMORY[0x24BDAC7A8](v142);
  v139 = (uint64_t)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v18 = v17;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v138 = (uint64_t)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v127 - v21;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v24);
  v140 = (char *)&v127 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v141 = (uint64_t)&v127 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v127 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v127 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v127 - v37;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v39 = sub_224F683CC(), result = 0, (v39 & 1) != 0))
  {
    v41 = *(_QWORD *)(a1 + 24);
    v42 = *(_QWORD *)(a2 + 24);
    if (v41)
    {
      if (!v42)
        return 0;
      if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16) || v41 != v42)
      {
        v43 = sub_224F683CC();
        result = 0;
        if ((v43 & 1) == 0)
          return result;
      }
    }
    else if (v42)
    {
      return 0;
    }
    v130 = v26;
    v129 = v7;
    v44 = *(_QWORD *)(a1 + 32);
    v45 = *(_QWORD *)(a2 + 32);
    if (v44 == 1)
    {
      if (v45 == 1)
        goto LABEL_13;
    }
    else
    {
      if (v45 != 1)
      {
        if (v44)
        {
          v48 = *(_QWORD *)(a1 + 32);
          if (!v45)
          {
            sub_224DFAE98(v48);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_224DFAE98(v48);
          sub_224DFAE98(v44);
          sub_224DFAE98(v45);
          v49 = swift_bridgeObjectRetain();
          LODWORD(v128) = sub_224DD9ED8(v49, v45);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v45);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v44);
          if ((v128 & 1) == 0)
            return 0;
        }
        else if (v45)
        {
          return 0;
        }
LABEL_13:
        if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
        {
          v46 = sub_224F683CC();
          result = 0;
          if ((v46 & 1) == 0)
            return result;
        }
        v47 = *(_BYTE *)(a2 + 68);
        if ((*(_BYTE *)(a1 + 68) & 1) != 0)
        {
          if ((*(_BYTE *)(a2 + 68) & 1) == 0)
            return 0;
        }
        else
        {
          v50 = *(_QWORD *)(a2 + 56);
          v51 = *(_DWORD *)(a2 + 64);
          v52 = *(_DWORD *)(a1 + 64);
          *(_QWORD *)&v149 = *(_QWORD *)(a1 + 56);
          DWORD2(v149) = v52;
          BYTE12(v149) = 0;
          if ((v47 & 1) != 0)
            return 0;
          *(_QWORD *)&v143 = v50;
          WORD4(v143) = v51 & 0x1FF;
          BYTE10(v143) = BYTE2(v51);
          BYTE11(v143) = HIBYTE(v51) & 1;
          if ((_s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0((uint64_t)&v149, (uint64_t)&v143) & 1) == 0)
            return 0;
        }
        v53 = *(_QWORD *)(a2 + 72);
        if (*(_QWORD *)(a1 + 72))
        {
          if (!v53)
            return 0;
          swift_bridgeObjectRetain();
          v54 = swift_bridgeObjectRetain();
          LODWORD(v128) = sub_224DD84E8(v54, v53);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v128 & 1) == 0)
            return 0;
        }
        else if (v53)
        {
          return 0;
        }
        v55 = type metadata accessor for ModelsR4.Immunization(0);
        sub_224DDB4B4(a1 + *(int *)(v55 + 40), (uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v127 = (int *)v55;
        sub_224DDB4B4(a2 + *(int *)(v55 + 40), (uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v56 = (uint64_t)&v22[*(int *)(v18 + 48)];
        sub_224DDB4B4((uint64_t)v38, (uint64_t)v22, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v128 = v56;
        sub_224DDB4B4((uint64_t)v36, v56, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
        v58 = v142;
        if (v57((uint64_t)v22, 1, v142) == 1)
        {
          sub_224DDB50C((uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v57(v128, 1, v142) == 1)
          {
            sub_224DDB50C((uint64_t)v22, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            goto LABEL_45;
          }
        }
        else
        {
          sub_224DDB4B4((uint64_t)v22, (uint64_t)v33, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          v59 = v128;
          if (v57(v128, 1, v58) != 1)
          {
            v60 = v59;
            v61 = v139;
            sub_224DDEADC(v60, v139, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            LODWORD(v128) = static FHIRDateTime.== infix(_:_:)(v33, v61);
            sub_224DDEAA0(v61, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDEAA0((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v22, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v128 & 1) == 0)
              return 0;
LABEL_45:
            v62 = v127;
            v63 = v127[11];
            v64 = *(_QWORD *)(a2 + v63);
            if (*(_QWORD *)(a1 + v63))
            {
              v65 = (uint64_t)v140;
              v66 = v141;
              if (!v64)
                return 0;
              swift_bridgeObjectRetain();
              v67 = swift_bridgeObjectRetain();
              v68 = sub_224DD889C(v67, v64);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (!v68)
                return 0;
            }
            else
            {
              v65 = (uint64_t)v140;
              v66 = v141;
              if (v64)
                return 0;
            }
            sub_224DDB4B4(a1 + v62[12], v66, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB4B4(a2 + v62[12], v65, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v69 = *(int *)(v18 + 48);
            v70 = v138;
            v71 = v138 + v69;
            sub_224DDB4B4(v66, v138, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB4B4(v65, v71, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v72 = v142;
            if (v57(v70, 1, v142) == 1)
            {
              sub_224DDB50C(v65, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C(v66, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v57(v71, 1, v72) == 1)
              {
                sub_224DDB50C(v70, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                goto LABEL_57;
              }
            }
            else
            {
              v73 = (uint64_t)v130;
              sub_224DDB4B4(v70, (uint64_t)v130, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v57(v71, 1, v72) != 1)
              {
                v74 = v139;
                sub_224DDEADC(v71, v139, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                v75 = static FHIRDateTime.== infix(_:_:)(v73, v74);
                sub_224DDEAA0(v74, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v65, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v141, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDEAA0(v73, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v70, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v75 & 1) == 0)
                  return 0;
LABEL_57:
                v76 = v62[13];
                v77 = *(_QWORD *)(a1 + v76 + 16);
                v149 = *(_OWORD *)(a1 + v76);
                v150 = v77;
                v78 = (__int128 *)(a2 + v76);
                v79 = *((_QWORD *)v78 + 2);
                v143 = *v78;
                v144 = v79;
                if ((static CodeableConcept.== infix(_:_:)(&v149, &v143) & 1) == 0)
                  return 0;
                v80 = v137;
                sub_224DDB4B4(a1 + v62[14], v137, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                v81 = v136;
                sub_224DDB4B4(a2 + v62[14], v136, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                v82 = (uint64_t)v129;
                v83 = (uint64_t)&v129[*(int *)(v133 + 48)];
                sub_224DDB4B4(v80, (uint64_t)v129, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                sub_224DDB4B4(v81, v83, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                v84 = v82;
                v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
                v86 = v135;
                if (v85(v84, 1, v135) == 1)
                {
                  sub_224DDB50C(v136, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_224DDB50C(v137, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  if (v85(v83, 1, v86) == 1)
                  {
                    sub_224DDB50C((uint64_t)v129, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    goto LABEL_65;
                  }
                }
                else
                {
                  v87 = v132;
                  sub_224DDB4B4((uint64_t)v129, (uint64_t)v132, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  if (v85(v83, 1, v86) != 1)
                  {
                    v88 = v131;
                    sub_224DDEADC(v83, (uint64_t)v131, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                    v89 = static Reference.== infix(_:_:)(v87, v88);
                    sub_224DDEAA0((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                    sub_224DDB50C(v136, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_224DDB50C(v137, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    sub_224DDEAA0((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                    sub_224DDB50C((uint64_t)v129, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                    if (!v89)
                      return 0;
LABEL_65:
                    v90 = v127[15];
                    v91 = *(unsigned __int8 *)(a1 + v90);
                    v92 = *(unsigned __int8 *)(a2 + v90);
                    if (v91 == 2)
                    {
                      if (v92 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v93 = (v91 & 1) == 0;
                      if (v92 == 2 || ((v93 ^ v92) & 1) == 0)
                        return result;
                    }
                    v94 = v127[16];
                    v95 = (_QWORD *)(a1 + v94);
                    v96 = *(_QWORD *)(a1 + v94 + 8);
                    v97 = (_QWORD *)(a2 + v94);
                    v98 = v97[1];
                    if (v96)
                    {
                      if (!v98)
                        return 0;
                      if (*v95 != *v97 || v96 != v98)
                      {
                        v99 = sub_224F683CC();
                        result = 0;
                        if ((v99 & 1) == 0)
                          return result;
                      }
                    }
                    else if (v98)
                    {
                      return 0;
                    }
                    v100 = v127[17];
                    v101 = *(_QWORD *)(a2 + v100);
                    if (*(_QWORD *)(a1 + v100))
                    {
                      if (!v101)
                        return 0;
                      swift_bridgeObjectRetain();
                      v102 = swift_bridgeObjectRetain();
                      v103 = sub_224DD89A8(v102, v101);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v103 & 1) == 0)
                        return 0;
                    }
                    else if (v101)
                    {
                      return 0;
                    }
                    v104 = v127[18];
                    v105 = *(unsigned __int8 *)(a1 + v104);
                    v106 = *(unsigned __int8 *)(a2 + v104);
                    if (v105 == 2)
                    {
                      if (v106 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v107 = (v105 & 1) == 0;
                      if (v106 == 2 || ((v107 ^ v106) & 1) == 0)
                        return result;
                    }
                    v108 = v127[19];
                    v109 = *(_QWORD *)(a1 + v108);
                    v110 = *(_QWORD *)(a1 + v108 + 8);
                    v112 = *(_QWORD *)(a1 + v108 + 16);
                    v111 = *(_QWORD *)(a1 + v108 + 24);
                    v140 = *(char **)(a1 + v108 + 32);
                    v113 = *(_QWORD *)(a1 + v108 + 48);
                    v139 = *(_QWORD *)(a1 + v108 + 40);
                    v141 = v113;
                    v142 = v111;
                    v114 = (uint64_t *)(a2 + v108);
                    v116 = *v114;
                    v115 = v114[1];
                    v117 = v114[2];
                    v135 = v114[3];
                    v136 = v114[4];
                    v119 = v114[5];
                    v118 = v114[6];
                    v137 = v119;
                    v138 = v118;
                    if (v109 == 1)
                    {
                      if (v116 == 1)
                      {
LABEL_94:
                        v122 = v127[20];
                        v123 = (_QWORD *)(a1 + v122);
                        v124 = *(_QWORD *)(a1 + v122 + 8);
                        v125 = (_QWORD *)(a2 + v122);
                        v126 = v125[1];
                        if (v124)
                        {
                          if (v126 && (*v123 == *v125 && v124 == v126 || (sub_224F683CC() & 1) != 0))
                            return 1;
                        }
                        else if (!v126)
                        {
                          return 1;
                        }
                        return 0;
                      }
                    }
                    else
                    {
                      *(_QWORD *)&v149 = v109;
                      *((_QWORD *)&v149 + 1) = v110;
                      v150 = v112;
                      v151 = v142;
                      v152 = v140;
                      v153 = v139;
                      v154 = v141;
                      if (v116 != 1)
                      {
                        *(_QWORD *)&v143 = v116;
                        *((_QWORD *)&v143 + 1) = v115;
                        v144 = v117;
                        v145 = v135;
                        v146 = v136;
                        v147 = v137;
                        v148 = v138;
                        swift_bridgeObjectRetain();
                        v134 = v110;
                        sub_224DDB44C(v110, v112);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        sub_224DDB44C(v110, v112);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        LODWORD(v138) = static Location.== infix(_:_:)(&v149, &v143);
                        v120 = *((_QWORD *)&v149 + 1);
                        v121 = v150;
                        swift_bridgeObjectRelease();
                        sub_224DDB480(v120, v121);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_224DE656C(v109, v134, v112);
                        if ((v138 & 1) == 0)
                          return 0;
                        goto LABEL_94;
                      }
                      swift_bridgeObjectRetain();
                      v133 = v112;
                      sub_224DDB44C(v110, v112);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      sub_224DDB44C(v110, v112);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRelease();
                      sub_224DDB480(v110, v133);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    sub_224DFB2B4(v116, v115, v117);
                    sub_224DE656C(v109, v110, v112);
                    sub_224DE656C(v116, v115, v117);
                    return 0;
                  }
                  sub_224DDB50C(v136, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_224DDB50C(v137, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                  sub_224DDEAA0((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                }
                sub_224DDEA64((uint64_t)v129, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                return 0;
              }
              sub_224DDB50C(v65, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C(v141, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDEAA0(v73, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            }
            sub_224DDEA64(v70, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            return 0;
          }
          sub_224DDB50C((uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDEAA0((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        }
        sub_224DDEA64((uint64_t)v22, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_224DFAE98(v45);
    sub_224DE60AC(v44);
    sub_224DE60AC(v45);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V11ObservationV2eeoiySbAE_AEtFZ_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  char v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  BOOL v131;
  _QWORD *v132;
  uint64_t v133;
  char v134;
  char v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int (*v165)(uint64_t, uint64_t, uint64_t);
  int *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;

  v176 = type metadata accessor for Quantity();
  v173 = *(_QWORD *)(v176 - 8);
  MEMORY[0x24BDAC7A8](v176);
  v170 = (uint64_t)&v164 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E1448, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
  v172 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v177 = (uint64_t)&v164 - v6;
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v171 = (uint64_t)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v174 = (uint64_t)&v164 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v175 = (uint64_t)&v164 - v13;
  v14 = type metadata accessor for Period();
  v183 = *(_QWORD *)(v14 - 8);
  v184 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v179 = (uint64_t)&v164 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v182 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v187 = (uint64_t)&v164 - v17;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v7);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v181 = (uint64_t)&v164 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v188 = (uint64_t)&v164 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v189 = (uint64_t)&v164 - v23;
  v192 = type metadata accessor for FHIRDateTime();
  v24 = *(_QWORD *)(v192 - 8);
  MEMORY[0x24BDAC7A8](v192);
  v190 = (uint64_t)&v164 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v193 = v26;
  v27 = MEMORY[0x24BDAC7A8](v26);
  v180 = (uint64_t)&v164 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v191 = (uint64_t)&v164 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v164 - v31;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v7);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v178 = (uint64_t)&v164 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v34);
  v185 = (char *)&v164 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v186 = (char *)&v164 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v164 - v41;
  v43 = MEMORY[0x24BDAC7A8](v40);
  v45 = (char *)&v164 - v44;
  v46 = MEMORY[0x24BDAC7A8](v43);
  v48 = (char *)&v164 - v47;
  v49 = MEMORY[0x24BDAC7A8](v46);
  v51 = (char *)&v164 - v50;
  v52 = MEMORY[0x24BDAC7A8](v49);
  v54 = (char *)&v164 - v53;
  MEMORY[0x24BDAC7A8](v52);
  v55 = a1;
  v57 = (char *)&v164 - v56;
  if (*(_QWORD *)v55 == *a2 && *(_QWORD *)(v55 + 8) == a2[1]
    || (v58 = v55, v59 = sub_224F683CC(), v55 = v58, v60 = v59, result = 0, (v60 & 1) != 0))
  {
    v62 = *(_QWORD *)(v55 + 24);
    v63 = a2[3];
    if (v62)
    {
      if (!v63)
        return 0;
      if (*(_QWORD *)(v55 + 16) != a2[2] || v62 != v63)
      {
        v64 = v55;
        v65 = sub_224F683CC();
        v55 = v64;
        v66 = v65;
        result = 0;
        if ((v66 & 1) == 0)
          return result;
      }
    }
    else if (v63)
    {
      return 0;
    }
    v67 = a2;
    v68 = *(_QWORD *)(v55 + 32);
    v169 = v67;
    v69 = v67[4];
    if (v68 == 1)
    {
      if (v69 == 1)
        goto LABEL_13;
    }
    else
    {
      if (v69 != 1)
      {
        if (v68)
        {
          if (!v69)
          {
            sub_224DFAE98(v68);
            swift_bridgeObjectRelease();
            return 0;
          }
          v168 = v55;
          sub_224DFAE98(v68);
          sub_224DFAE98(v68);
          sub_224DFAE98(v69);
          v76 = swift_bridgeObjectRetain();
          LODWORD(v167) = sub_224DD9ED8(v76, v69);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v69);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v68);
          v55 = v168;
          if ((v167 & 1) == 0)
            return 0;
        }
        else if (v69)
        {
          return 0;
        }
LABEL_13:
        v70 = v169;
        if (*(_QWORD *)(v55 + 40) != v169[5] || *(_QWORD *)(v55 + 48) != v169[6])
        {
          v71 = v55;
          v72 = sub_224F683CC();
          v55 = v71;
          v73 = v72;
          result = 0;
          if ((v73 & 1) == 0)
            return result;
        }
        v74 = v70[7];
        if (*(_QWORD *)(v55 + 56))
        {
          if (!v74)
            return 0;
          v168 = v55;
          swift_bridgeObjectRetain();
          v75 = swift_bridgeObjectRetain();
          LODWORD(v167) = sub_224DD761C(v75, v74);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v55 = v168;
          if ((v167 & 1) == 0)
            return 0;
        }
        else if (v74)
        {
          return 0;
        }
        v77 = *(_QWORD *)(v55 + 80);
        v196 = *(_OWORD *)(v55 + 64);
        v197 = v77;
        v78 = v169;
        v79 = v169[10];
        v194 = *((_OWORD *)v169 + 4);
        v195 = v79;
        v80 = v55;
        if ((static CodeableConcept.== infix(_:_:)(&v196, &v194) & 1) == 0)
          return 0;
        v81 = type metadata accessor for ModelsR4.Observation(0);
        v82 = v80;
        v83 = (int *)v81;
        v84 = *(int *)(v81 + 40);
        v168 = v82;
        sub_224DDB4B4(v82 + v84, (uint64_t)v57, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v166 = v83;
        sub_224DDB4B4((uint64_t)v78 + v83[10], (uint64_t)v54, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v85 = (uint64_t)&v32[*(int *)(v193 + 48)];
        sub_224DDB4B4((uint64_t)v57, (uint64_t)v32, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v167 = v85;
        sub_224DDB4B4((uint64_t)v54, v85, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
        v87 = v192;
        if (v86((uint64_t)v32, 1, v192) == 1)
        {
          sub_224DDB50C((uint64_t)v54, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDB50C((uint64_t)v57, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v86(v167, 1, v87) == 1)
          {
            v165 = v86;
            sub_224DDB50C((uint64_t)v32, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            goto LABEL_41;
          }
        }
        else
        {
          sub_224DDB4B4((uint64_t)v32, (uint64_t)v51, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v86(v167, 1, v87) != 1)
          {
            v165 = v86;
            v88 = v190;
            sub_224DDEADC(v167, v190, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            LODWORD(v167) = static FHIRDateTime.== infix(_:_:)(v51, v88);
            sub_224DDEAA0(v88, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v54, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v57, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDEAA0((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v32, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v167 & 1) == 0)
              return 0;
LABEL_41:
            v89 = v166;
            sub_224DDB4B4(v168 + v166[11], (uint64_t)v48, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB4B4((uint64_t)v169 + v89[11], (uint64_t)v45, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v90 = v191;
            v91 = v191 + *(int *)(v193 + 48);
            sub_224DDB4B4((uint64_t)v48, v191, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB4B4((uint64_t)v45, v91, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v92 = v165;
            if (v165(v90, 1, v87) == 1)
            {
              sub_224DDB50C((uint64_t)v45, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C((uint64_t)v48, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v92(v91, 1, v87) == 1)
              {
                sub_224DDB50C(v90, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                goto LABEL_48;
              }
            }
            else
            {
              sub_224DDB4B4(v90, (uint64_t)v42, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v92(v91, 1, v87) != 1)
              {
                v93 = v190;
                sub_224DDEADC(v91, v190, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                v94 = static FHIRDateTime.== infix(_:_:)(v42, v93);
                sub_224DDEAA0(v93, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C((uint64_t)v45, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDB50C((uint64_t)v48, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDEAA0((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v90, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v94 & 1) == 0)
                  return 0;
LABEL_48:
                v95 = v189;
                sub_224DDB4B4(v168 + v89[12], v189, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                v96 = v169;
                v97 = v188;
                sub_224DDB4B4((uint64_t)v169 + v89[12], v188, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                v98 = v187;
                v99 = v187 + *(int *)(v182 + 48);
                sub_224DDB4B4(v95, v187, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                sub_224DDB4B4(v97, v99, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                v100 = v184;
                v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 48);
                if (v101(v98, 1, v184) == 1)
                {
                  sub_224DDB50C(v97, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_224DDB50C(v95, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  v102 = v101(v99, 1, v100);
                  v104 = (uint64_t)v185;
                  v103 = (uint64_t)v186;
                  if (v102 == 1)
                  {
                    sub_224DDB50C(v98, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    goto LABEL_55;
                  }
                }
                else
                {
                  v105 = v181;
                  sub_224DDB4B4(v98, v181, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  v106 = v101(v99, 1, v100);
                  v104 = (uint64_t)v185;
                  v103 = (uint64_t)v186;
                  if (v106 != 1)
                  {
                    v107 = v179;
                    sub_224DDEADC(v99, v179, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                    v108 = static Period.== infix(_:_:)(v105, v107);
                    sub_224DDEAA0(v107, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                    sub_224DDB50C(v188, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_224DDB50C(v189, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_224DDEAA0(v105, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                    sub_224DDB50C(v98, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    if ((v108 & 1) == 0)
                      return 0;
LABEL_55:
                    sub_224DDB4B4(v168 + v89[13], v103, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    sub_224DDB4B4((uint64_t)v96 + v89[13], v104, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    v109 = v180;
                    v110 = v180 + *(int *)(v193 + 48);
                    sub_224DDB4B4(v103, v180, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    sub_224DDB4B4(v104, v110, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    v111 = v192;
                    v112 = v165;
                    if (v165(v109, 1, v192) == 1)
                    {
                      sub_224DDB50C(v104, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_224DDB50C(v103, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v112(v110, 1, v111) == 1)
                      {
                        sub_224DDB50C(v109, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        goto LABEL_62;
                      }
                    }
                    else
                    {
                      v113 = v178;
                      sub_224DDB4B4(v109, v178, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v112(v110, 1, v111) != 1)
                      {
                        v114 = v113;
                        v115 = v190;
                        sub_224DDEADC(v110, v190, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                        v116 = static FHIRDateTime.== infix(_:_:)(v114, v115);
                        sub_224DDEAA0(v115, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                        sub_224DDB50C(v104, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_224DDB50C(v103, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_224DDEAA0(v114, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                        sub_224DDB50C(v109, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        if ((v116 & 1) == 0)
                          return 0;
LABEL_62:
                        v117 = v89[14];
                        v118 = v169;
                        v119 = *(_QWORD *)((char *)v169 + v117);
                        if (*(_QWORD *)(v168 + v117))
                        {
                          if (!v119)
                            return 0;
                          swift_bridgeObjectRetain();
                          v120 = swift_bridgeObjectRetain();
                          v121 = sub_224DD84E8(v120, v119);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v121 & 1) == 0)
                            return 0;
                        }
                        else if (v119)
                        {
                          return 0;
                        }
                        v122 = v89[15];
                        v123 = *(_QWORD *)((char *)v118 + v122);
                        if (*(_QWORD *)(v168 + v122))
                        {
                          if (!v123)
                            return 0;
                          swift_bridgeObjectRetain();
                          v124 = swift_bridgeObjectRetain();
                          v125 = sub_224DD7200(v124, v123);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if ((v125 & 1) == 0)
                            return 0;
                        }
                        else if (v123)
                        {
                          return 0;
                        }
                        v126 = v166[16];
                        v127 = (_QWORD *)(v168 + v126);
                        v128 = *(_QWORD *)(v168 + v126 + 8);
                        v129 = (_QWORD *)((char *)v169 + v126);
                        v130 = v129[1];
                        if (v128)
                        {
                          if (!v130)
                            return 0;
                          v131 = *v127 == *v129;
                          v132 = v169;
                          v133 = v168;
                          if (!v131 || v128 != v130)
                          {
                            v134 = sub_224F683CC();
                            v133 = v168;
                            v135 = v134;
                            result = 0;
                            if ((v135 & 1) == 0)
                              return result;
                          }
                        }
                        else
                        {
                          v132 = v169;
                          v133 = v168;
                          if (v130)
                            return 0;
                        }
                        v136 = v166[17];
                        v137 = (uint64_t *)(v133 + v136);
                        v139 = *v137;
                        v138 = v137[1];
                        v140 = v137[2];
                        v141 = (_QWORD *)((char *)v132 + v136);
                        v143 = *v141;
                        v142 = v141[1];
                        v144 = v141[2];
                        if (v138 == 1)
                        {
                          if (v142 == 1)
                            goto LABEL_87;
                        }
                        else
                        {
                          *(_QWORD *)&v196 = *v137;
                          *((_QWORD *)&v196 + 1) = v138;
                          v197 = v140;
                          if (v142 != 1)
                          {
                            *(_QWORD *)&v194 = v143;
                            *((_QWORD *)&v194 + 1) = v142;
                            v195 = v144;
                            swift_bridgeObjectRetain_n();
                            swift_bridgeObjectRetain_n();
                            v145 = static CodeableConcept.== infix(_:_:)(&v196, &v194);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            sub_224DDB480(v139, v138);
                            if ((v145 & 1) == 0)
                              return 0;
LABEL_87:
                            v146 = v166;
                            v147 = v175;
                            sub_224DDB4B4(v168 + v166[18], v175, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            v148 = v174;
                            sub_224DDB4B4((uint64_t)v169 + v146[18], v174, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            v149 = v177;
                            v150 = v177 + *(int *)(v172 + 48);
                            sub_224DDB4B4(v147, v177, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            sub_224DDB4B4(v148, v150, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            v151 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48);
                            if (v151(v149, 1, v176) == 1)
                            {
                              sub_224DDB50C(v174, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_224DDB50C(v175, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              if (v151(v150, 1, v176) == 1)
                              {
                                sub_224DDB50C(v177, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
LABEL_94:
                                v155 = v166[19];
                                v156 = *(_QWORD *)((char *)v169 + v155);
                                if (*(_QWORD *)(v168 + v155))
                                {
                                  if (!v156)
                                    return 0;
                                  swift_bridgeObjectRetain();
                                  v157 = swift_bridgeObjectRetain();
                                  v158 = sub_224DD9044(v157, v156);
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  if ((v158 & 1) == 0)
                                    return 0;
                                }
                                else if (v156)
                                {
                                  return 0;
                                }
                                v159 = v166[20];
                                v160 = (_QWORD *)(v168 + v159);
                                v161 = *(_QWORD *)(v168 + v159 + 8);
                                v162 = (_QWORD *)((char *)v169 + v159);
                                v163 = v162[1];
                                if (v161)
                                {
                                  if (v163 && (*v160 == *v162 && v161 == v163 || (sub_224F683CC() & 1) != 0))
                                    return 1;
                                }
                                else if (!v163)
                                {
                                  return 1;
                                }
                                return 0;
                              }
                            }
                            else
                            {
                              sub_224DDB4B4(v177, v171, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              if (v151(v150, 1, v176) != 1)
                              {
                                v152 = v170;
                                sub_224DDEADC(v150, v170, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
                                v153 = v171;
                                v154 = static Quantity.== infix(_:_:)(v171, v152);
                                sub_224DDEAA0(v152, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
                                sub_224DDB50C(v174, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                sub_224DDB50C(v175, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                sub_224DDEAA0(v153, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
                                sub_224DDB50C(v177, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                                if ((v154 & 1) == 0)
                                  return 0;
                                goto LABEL_94;
                              }
                              sub_224DDB50C(v174, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_224DDB50C(v175, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                              sub_224DDEAA0(v171, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
                            }
                            sub_224DDEA64(v177, (unint64_t *)&qword_2557E1448, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity);
                            return 0;
                          }
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        sub_224DDB44C(v143, v142);
                        sub_224DDB480(v139, v138);
                        sub_224DDB480(v143, v142);
                        return 0;
                      }
                      sub_224DDB50C(v104, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_224DDB50C(v103, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      v109 = v180;
                      sub_224DDEAA0(v113, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                    }
                    sub_224DDEA64(v109, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    return 0;
                  }
                  sub_224DDB50C(v188, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_224DDB50C(v189, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_224DDEAA0(v105, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                }
                sub_224DDEA64(v98, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                return 0;
              }
              sub_224DDB50C((uint64_t)v45, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C((uint64_t)v48, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDEAA0((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            }
            sub_224DDEA64(v90, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            return 0;
          }
          sub_224DDB50C((uint64_t)v54, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDB50C((uint64_t)v57, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDEAA0((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        }
        sub_224DDEA64((uint64_t)v32, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_224DFAE98(v69);
    sub_224DE60AC(v68);
    sub_224DE60AC(v69);
    return 0;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V17DocumentReferenceV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char v52;
  int *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  _QWORD *v71;
  uint64_t *v72;
  BOOL v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;

  v4 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  v86 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v83 = (uint64_t *)((char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224DDE904(0, &qword_2557E1450, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
  v85 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v79 - v7;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v84 = (int **)((char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x24BDAC7A8](v11);
  v87 = (uint64_t)&v79 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v88 = (uint64_t)&v79 - v15;
  v89 = type metadata accessor for FHIRDateTime();
  v16 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v20 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v90 = (uint64_t)&v79 - v21;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v9);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v79 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v79 - v29;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v31 = sub_224F683CC(), result = 0, (v31 & 1) != 0))
  {
    v33 = *(_QWORD *)(a1 + 24);
    v34 = *(_QWORD *)(a2 + 24);
    if (v33)
    {
      if (!v34)
        return 0;
      if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16) || v33 != v34)
      {
        v35 = sub_224F683CC();
        result = 0;
        if ((v35 & 1) == 0)
          return result;
      }
    }
    else if (v34)
    {
      return 0;
    }
    v81 = v4;
    v82 = v8;
    v36 = *(_QWORD *)(a1 + 32);
    v37 = *(_QWORD *)(a2 + 32);
    if (v36 == 1)
    {
      if (v37 == 1)
        goto LABEL_13;
    }
    else
    {
      if (v37 != 1)
      {
        if (v36)
        {
          v42 = *(_QWORD *)(a1 + 32);
          if (!v37)
          {
            sub_224DFAE98(v42);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_224DFAE98(v42);
          sub_224DFAE98(v36);
          sub_224DFAE98(v37);
          v43 = swift_bridgeObjectRetain();
          LODWORD(v80) = sub_224DD9ED8(v43, v37);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v37);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v36);
          if ((v80 & 1) == 0)
            return 0;
        }
        else if (v37)
        {
          return 0;
        }
LABEL_13:
        if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40) || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
        {
          v38 = sub_224F683CC();
          result = 0;
          if ((v38 & 1) == 0)
            return result;
        }
        v39 = *(_QWORD *)(a1 + 64);
        v40 = *(_QWORD *)(a2 + 64);
        if (v39)
        {
          if (!v40)
            return 0;
          if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56) || v39 != v40)
          {
            v41 = sub_224F683CC();
            result = 0;
            if ((v41 & 1) == 0)
              return result;
          }
        }
        else if (v40)
        {
          return 0;
        }
        v44 = *(_QWORD *)(a1 + 88);
        v93 = *(_OWORD *)(a1 + 72);
        v94 = v44;
        v45 = *(_QWORD *)(a2 + 88);
        v91 = *(_OWORD *)(a2 + 72);
        v92 = v45;
        if ((static CodeableConcept.== infix(_:_:)(&v93, &v91) & 1) == 0
          || (sub_224DD761C(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 96)) & 1) == 0)
        {
          return 0;
        }
        v46 = type metadata accessor for ModelsR4.DocumentReference(0);
        sub_224DDB4B4(a1 + *(int *)(v46 + 44), (uint64_t)v30, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v79 = (int *)v46;
        sub_224DDB4B4(a2 + *(int *)(v46 + 44), (uint64_t)v28, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v47 = v90;
        v48 = v90 + *(int *)(v20 + 48);
        sub_224DDB4B4((uint64_t)v30, v90, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v80 = v48;
        sub_224DDB4B4((uint64_t)v28, v48, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
        v50 = v89;
        if (v49(v47, 1, v89) == 1)
        {
          sub_224DDB50C((uint64_t)v28, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDB50C((uint64_t)v30, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          if (v49(v80, 1, v50) == 1)
          {
            sub_224DDB50C(v47, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            goto LABEL_44;
          }
        }
        else
        {
          sub_224DDB4B4(v47, (uint64_t)v25, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          v51 = v80;
          if (v49(v80, 1, v50) != 1)
          {
            sub_224DDEADC(v51, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            v52 = static FHIRDateTime.== infix(_:_:)(v25, v18);
            sub_224DDEAA0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v28, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB50C((uint64_t)v30, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDEAA0((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            sub_224DDB50C(v47, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            if ((v52 & 1) == 0)
              return 0;
LABEL_44:
            v53 = v79;
            v54 = v79[12];
            v55 = (_QWORD *)(a1 + v54);
            v56 = *(_QWORD *)(a1 + v54 + 8);
            v57 = (_QWORD *)(a2 + v54);
            v58 = v57[1];
            if (v56)
            {
              v60 = v81;
              v59 = (uint64_t)v82;
              if (!v58)
                return 0;
              if (*v55 != *v57 || v56 != v58)
              {
                v61 = sub_224F683CC();
                result = 0;
                if ((v61 & 1) == 0)
                  return result;
              }
            }
            else
            {
              v60 = v81;
              v59 = (uint64_t)v82;
              if (v58)
                return 0;
            }
            v62 = v53[13];
            v63 = *(_QWORD *)(a2 + v62);
            if (*(_QWORD *)(a1 + v62))
            {
              if (!v63)
                return 0;
              swift_bridgeObjectRetain();
              v64 = swift_bridgeObjectRetain();
              v65 = sub_224DD7200(v64, v63);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v65 & 1) == 0)
                return 0;
            }
            else if (v63)
            {
              return 0;
            }
            if ((sub_224DD7C60(*(_QWORD *)(a1 + v53[14]), *(_QWORD *)(a2 + v53[14])) & 1) == 0)
              return 0;
            v66 = v88;
            sub_224DDB4B4(a1 + v53[15], v88, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
            v67 = a2 + v53[15];
            v68 = v87;
            sub_224DDB4B4(v67, v87, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
            v69 = v59 + *(int *)(v85 + 48);
            sub_224DDB4B4(v66, v59, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
            sub_224DDB4B4(v68, v69, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
            v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
            if (v70(v59, 1, v60) == 1)
            {
              sub_224DDB50C(v87, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
              sub_224DDB50C(v88, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
              if (v70(v69, 1, v60) == 1)
              {
                sub_224DDB50C(v59, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
LABEL_64:
                v74 = v79[16];
                v75 = (_QWORD *)(a1 + v74);
                v76 = *(_QWORD *)(a1 + v74 + 8);
                v77 = (_QWORD *)(a2 + v74);
                v78 = v77[1];
                if (v76)
                {
                  if (v78 && (*v75 == *v77 && v76 == v78 || (sub_224F683CC() & 1) != 0))
                    return 1;
                }
                else if (!v78)
                {
                  return 1;
                }
                return 0;
              }
            }
            else
            {
              v71 = v84;
              sub_224DDB4B4(v59, (uint64_t)v84, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
              if (v70(v69, 1, v60) != 1)
              {
                v72 = v83;
                sub_224DDEADC(v69, (uint64_t)v83, type metadata accessor for ModelsR4.DocumentReferenceContext);
                v73 = _s23HealthRecordsExtraction8ModelsR4V24DocumentReferenceContextV2eeoiySbAE_AEtFZ_0(v71, v72);
                sub_224DDEAA0((uint64_t)v72, type metadata accessor for ModelsR4.DocumentReferenceContext);
                sub_224DDB50C(v87, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
                sub_224DDB50C(v88, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
                sub_224DDEAA0((uint64_t)v71, type metadata accessor for ModelsR4.DocumentReferenceContext);
                sub_224DDB50C(v59, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
                if (!v73)
                  return 0;
                goto LABEL_64;
              }
              sub_224DDB50C(v87, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
              sub_224DDB50C(v88, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
              sub_224DDEAA0((uint64_t)v71, type metadata accessor for ModelsR4.DocumentReferenceContext);
            }
            sub_224DDEA64(v59, &qword_2557E1450, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext);
            return 0;
          }
          sub_224DDB50C((uint64_t)v28, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDB50C((uint64_t)v30, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
          sub_224DDEAA0((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        }
        sub_224DDEA64(v47, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        return 0;
      }
      swift_bridgeObjectRetain();
    }
    sub_224DFAE98(v37);
    sub_224DE60AC(v36);
    sub_224DE60AC(v37);
    return 0;
  }
  return result;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V16DiagnosticReportV2eeoiySbAE_AEtFZ_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char v39;
  _BOOL8 result;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  int *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t (*v72)();
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char v84;
  int *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int (*v112)(uint64_t, uint64_t, uint64_t);
  int *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;

  v4 = type metadata accessor for Period();
  v124 = *(_QWORD *)(v4 - 8);
  v125 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v119 = (uint64_t)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v123 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v126 = (uint64_t)&v111 - v7;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v121 = (uint64_t)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v127 = (uint64_t)&v111 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v128 = (uint64_t)&v111 - v14;
  v15 = type metadata accessor for FHIRDateTime();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v130 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v129 = (uint64_t)&v111 - v23;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v8);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v118 = (uint64_t)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v122 = (uint64_t)&v111 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v120 = (uint64_t)&v111 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v111 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v111 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v111 - v37;
  if (*a1 == *(_QWORD *)a2 && a1[1] == *(_QWORD *)(a2 + 8) || (v39 = sub_224F683CC(), result = 0, (v39 & 1) != 0))
  {
    v41 = a1[3];
    v42 = *(_QWORD *)(a2 + 24);
    if (v41)
    {
      if (!v42)
        return 0;
      if (a1[2] != *(_QWORD *)(a2 + 16) || v41 != v42)
      {
        v43 = sub_224F683CC();
        result = 0;
        if ((v43 & 1) == 0)
          return result;
      }
    }
    else if (v42)
    {
      return 0;
    }
    v116 = v18;
    v117 = a1;
    v44 = *(_QWORD *)(a2 + 32);
    if (a1[4])
    {
      if (!v44)
        return 0;
      v45 = v15;
      v46 = v22;
      swift_bridgeObjectRetain();
      v47 = swift_bridgeObjectRetain();
      v48 = sub_224DD68A0(v47, v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0)
        return 0;
    }
    else
    {
      v45 = v15;
      v46 = v22;
      if (v44)
        return 0;
    }
    v49 = v117;
    v50 = (uint64_t)v46;
    v51 = v45;
    if (v117[5] != *(_QWORD *)(a2 + 40) || v117[6] != *(_QWORD *)(a2 + 48))
    {
      v52 = sub_224F683CC();
      result = 0;
      if ((v52 & 1) == 0)
        return result;
    }
    v53 = v49[7];
    v54 = *(_QWORD *)(a2 + 56);
    if (v53)
    {
      if (!v54)
        return 0;
      v115 = v50;
      swift_bridgeObjectRetain();
      v55 = swift_bridgeObjectRetain();
      v56 = sub_224DD761C(v55, v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v56 & 1) == 0)
        return 0;
    }
    else
    {
      v115 = v50;
      if (v54)
        return 0;
    }
    v57 = v117;
    v58 = v117[10];
    v133 = *((_OWORD *)v117 + 4);
    v134 = v58;
    v59 = *(_QWORD *)(a2 + 80);
    v131 = *(_OWORD *)(a2 + 64);
    v132 = v59;
    if ((static CodeableConcept.== infix(_:_:)(&v133, &v131) & 1) == 0)
      return 0;
    v60 = v57[12];
    v61 = *(_QWORD *)(a2 + 96);
    if (v60)
    {
      v62 = v115;
      if (!v61)
        return 0;
      if (v57[11] != *(_QWORD *)(a2 + 88) || v60 != v61)
      {
        v63 = sub_224F683CC();
        result = 0;
        if ((v63 & 1) == 0)
          return result;
      }
    }
    else
    {
      v62 = v115;
      if (v61)
        return 0;
    }
    v115 = v62;
    v64 = type metadata accessor for ModelsR4.DiagnosticReport(0);
    sub_224DDB4B4((uint64_t)v57 + *(int *)(v64 + 44), (uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v113 = (int *)v64;
    sub_224DDB4B4(a2 + *(int *)(v64 + 44), (uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v65 = v129;
    v66 = v129 + *(int *)(v130 + 48);
    sub_224DDB4B4((uint64_t)v38, v129, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v114 = v66;
    sub_224DDB4B4((uint64_t)v36, v66, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
    v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    if (v67(v65, 1, v51) == 1)
    {
      sub_224DDB50C((uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      if (v67(v114, 1, v51) == 1)
      {
        v112 = v67;
        sub_224DDB50C(v65, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        v68 = v113;
        goto LABEL_39;
      }
    }
    else
    {
      sub_224DDB4B4(v65, (uint64_t)v33, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      v69 = v65;
      if (v67(v114, 1, v51) != 1)
      {
        v112 = v67;
        v74 = (uint64_t)v116;
        sub_224DDEADC(v114, (uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        LODWORD(v114) = static FHIRDateTime.== infix(_:_:)(v33, v74);
        sub_224DDEAA0(v74, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        sub_224DDB50C((uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        sub_224DDEAA0((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v68 = v113;
        sub_224DDB50C(v69, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
        if ((v114 & 1) == 0)
          return 0;
LABEL_39:
        v75 = v128;
        sub_224DDB4B4((uint64_t)v117 + v68[12], v128, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        v76 = a2 + v68[12];
        v77 = v127;
        sub_224DDB4B4(v76, v127, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        v78 = v126;
        v79 = v126 + *(int *)(v123 + 48);
        sub_224DDB4B4(v75, v126, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        sub_224DDB4B4(v77, v79, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
        v80 = v125;
        v81 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
        if (v81(v78, 1, v125) == 1)
        {
          sub_224DDB50C(v77, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_224DDB50C(v75, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          if (v81(v79, 1, v80) == 1)
          {
            sub_224DDB50C(v78, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
LABEL_46:
            v85 = v113;
            v86 = v117;
            v87 = v120;
            sub_224DDB4B4((uint64_t)v117 + v113[13], v120, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v88 = v122;
            sub_224DDB4B4(a2 + v85[13], v122, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v89 = v115;
            v90 = v115 + *(int *)(v130 + 48);
            sub_224DDB4B4(v87, v115, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v91 = v89;
            sub_224DDB4B4(v88, v90, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v92 = v89;
            v93 = v112;
            if (v112(v92, 1, v51) == 1)
            {
              sub_224DDB50C(v88, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              v91 = v115;
              sub_224DDB50C(v87, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v93(v90, 1, v51) == 1)
              {
                sub_224DDB50C(v91, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
LABEL_56:
                v98 = v85[14];
                v99 = *(_QWORD *)(a2 + v98);
                if (*(_QWORD *)((char *)v86 + v98))
                {
                  if (!v99)
                    return 0;
                  swift_bridgeObjectRetain();
                  v100 = swift_bridgeObjectRetain();
                  v101 = sub_224DD7200(v100, v99);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v101 & 1) == 0)
                    return 0;
                }
                else if (v99)
                {
                  return 0;
                }
                v102 = v85[15];
                v103 = *(_QWORD *)(a2 + v102);
                if (*(_QWORD *)((char *)v86 + v102))
                {
                  if (!v103)
                    return 0;
                  swift_bridgeObjectRetain();
                  v104 = swift_bridgeObjectRetain();
                  v105 = sub_224DD84D4(v104, v103);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v105 & 1) == 0)
                    return 0;
                }
                else if (v103)
                {
                  return 0;
                }
                v106 = v113[16];
                v107 = (_QWORD *)((char *)v117 + v106);
                v108 = *(_QWORD *)((char *)v117 + v106 + 8);
                v109 = (_QWORD *)(a2 + v106);
                v110 = v109[1];
                if (v108)
                  return v110 && (*v107 == *v109 && v108 == v110 || (sub_224F683CC() & 1) != 0);
                return !v110;
              }
            }
            else
            {
              v94 = v118;
              sub_224DDB4B4(v91, v118, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v93(v90, 1, v51) != 1)
              {
                v95 = v91;
                v96 = (uint64_t)v116;
                sub_224DDEADC(v90, (uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                v97 = static FHIRDateTime.== infix(_:_:)(v94, v96);
                sub_224DDEAA0(v96, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v122, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v87, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDEAA0(v94, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C(v95, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v97 & 1) == 0)
                  return 0;
                goto LABEL_56;
              }
              sub_224DDB50C(v122, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C(v87, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDEAA0(v94, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            }
            v70 = (unint64_t *)&qword_2557E02D8;
            v71 = &qword_2557E02D0;
            v72 = type metadata accessor for FHIRDateTime;
            v73 = v91;
LABEL_52:
            sub_224DDEA64(v73, v70, v71, (uint64_t (*)(uint64_t))v72);
            return 0;
          }
        }
        else
        {
          v82 = v121;
          sub_224DDB4B4(v78, v121, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          if (v81(v79, 1, v80) != 1)
          {
            v83 = v119;
            sub_224DDEADC(v79, v119, (uint64_t (*)(_QWORD))type metadata accessor for Period);
            v84 = static Period.== infix(_:_:)(v82, v83);
            sub_224DDEAA0(v83, (uint64_t (*)(_QWORD))type metadata accessor for Period);
            sub_224DDB50C(v127, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            sub_224DDB50C(v128, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            sub_224DDEAA0(v82, (uint64_t (*)(_QWORD))type metadata accessor for Period);
            sub_224DDB50C(v78, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
            if ((v84 & 1) == 0)
              return 0;
            goto LABEL_46;
          }
          sub_224DDB50C(v127, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_224DDB50C(v128, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
          sub_224DDEAA0(v82, (uint64_t (*)(_QWORD))type metadata accessor for Period);
        }
        v70 = &qword_2557E1440;
        v71 = &qword_2557E04B8;
        v72 = type metadata accessor for Period;
        v73 = v78;
        goto LABEL_52;
      }
      sub_224DDB50C((uint64_t)v36, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDB50C((uint64_t)v38, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
      sub_224DDEAA0((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
    }
    v70 = (unint64_t *)&qword_2557E02D8;
    v71 = &qword_2557E02D0;
    v72 = type metadata accessor for FHIRDateTime;
    v73 = v65;
    goto LABEL_52;
  }
  return result;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V9ConditionV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t *v113;
  uint64_t (*v114)();
  uint64_t *v115;
  uint64_t v116;
  char v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  char v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  char v162;
  int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int (*v177)(uint64_t, uint64_t, uint64_t);
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  BOOL v181;
  int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  BOOL v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  int *v200;
  char *v201;
  char *v202;
  _QWORD *v203;
  char *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;

  v217 = type metadata accessor for Reference();
  v210 = *(_QWORD *)(v217 - 8);
  MEMORY[0x24BDAC7A8](v217);
  v207 = (int **)((char *)&v200 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224DDE904(0, &qword_2557E0328, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
  v213 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v212 = (uint64_t)&v200 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v216 = (uint64_t)&v200 - v8;
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v206 = (int **)((char *)&v200 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x24BDAC7A8](v11);
  v208 = (uint64_t)&v200 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v209 = (uint64_t)&v200 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v211 = (int **)((char *)&v200 - v18);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v214 = (uint64_t)&v200 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v215 = (uint64_t)&v200 - v21;
  v234 = type metadata accessor for Period();
  v231 = *(_QWORD *)(v234 - 8);
  MEMORY[0x24BDAC7A8](v234);
  v226 = (uint64_t)&v200 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
  v233 = v23;
  v24 = MEMORY[0x24BDAC7A8](v23);
  v224 = (uint64_t)&v200 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v200 - v26;
  sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v9);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v221 = (uint64_t)&v200 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v222 = (uint64_t)&v200 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v223 = (uint64_t)&v200 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v232 = (uint64_t)&v200 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v235 = (uint64_t)&v200 - v38;
  MEMORY[0x24BDAC7A8](v37);
  v236 = (uint64_t)&v200 - v39;
  v238 = type metadata accessor for FHIRDateTime();
  v40 = *(_QWORD *)(v238 - 8);
  MEMORY[0x24BDAC7A8](v238);
  v230 = (uint64_t)&v200 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDE904(0, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
  v237 = v42;
  v43 = MEMORY[0x24BDAC7A8](v42);
  v220 = (uint64_t)&v200 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x24BDAC7A8](v43);
  v229 = (uint64_t)&v200 - v46;
  MEMORY[0x24BDAC7A8](v45);
  v48 = (char *)&v200 - v47;
  sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v9);
  v50 = MEMORY[0x24BDAC7A8](v49);
  v52 = (char *)&v200 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = MEMORY[0x24BDAC7A8](v50);
  v218 = (uint64_t)&v200 - v54;
  v55 = MEMORY[0x24BDAC7A8](v53);
  v219 = (uint64_t)&v200 - v56;
  v57 = MEMORY[0x24BDAC7A8](v55);
  v225 = (uint64_t)&v200 - v58;
  v59 = MEMORY[0x24BDAC7A8](v57);
  v227 = (uint64_t)&v200 - v60;
  v61 = MEMORY[0x24BDAC7A8](v59);
  v228 = (uint64_t)&v200 - v62;
  v63 = MEMORY[0x24BDAC7A8](v61);
  v65 = (char *)&v200 - v64;
  v66 = MEMORY[0x24BDAC7A8](v63);
  v68 = (char *)&v200 - v67;
  MEMORY[0x24BDAC7A8](v66);
  v70 = (char *)&v200 - v69;
  if (*a1 == *a2 && a1[1] == a2[1] || (v71 = sub_224F683CC(), result = 0, (v71 & 1) != 0))
  {
    v73 = a1[3];
    v74 = a2[3];
    if (v73)
    {
      if (!v74)
        return 0;
      if (a1[2] != a2[2] || v73 != v74)
      {
        v75 = sub_224F683CC();
        result = 0;
        if ((v75 & 1) == 0)
          return result;
      }
    }
    else if (v74)
    {
      return 0;
    }
    v204 = v27;
    v205 = a1;
    v76 = a1[4];
    v77 = a2[4];
    if (v76 == 1)
    {
      if (v77 == 1)
      {
LABEL_13:
        v202 = v48;
        v201 = v52;
        v78 = v205[5];
        v79 = v205[6];
        v80 = v205[7];
        v81 = a2;
        v82 = a2[5];
        v83 = a2[6];
        v203 = v81;
        v84 = v81[7];
        if (v79 == 1)
        {
          if (v83 != 1)
            goto LABEL_32;
          goto LABEL_25;
        }
        v242 = v78;
        v243 = v79;
        v244 = v80;
        if (v83 == 1)
          goto LABEL_31;
        v239 = v82;
        v240 = v83;
        v241 = v84;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v87 = static CodeableConcept.== infix(_:_:)(&v242, &v239);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_224DDB480(v78, v79);
        if ((v87 & 1) != 0)
        {
LABEL_25:
          v78 = v205[8];
          v79 = v205[9];
          v88 = v205[10];
          v82 = v203[8];
          v83 = v203[9];
          v89 = v203[10];
          if (v79 == 1)
          {
            if (v83 != 1)
              goto LABEL_32;
          }
          else
          {
            v242 = v205[8];
            v243 = v79;
            v244 = v88;
            if (v83 == 1)
              goto LABEL_31;
            v239 = v82;
            v240 = v83;
            v241 = v89;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v90 = static CodeableConcept.== infix(_:_:)(&v242, &v239);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_224DDB480(v78, v79);
            if ((v90 & 1) == 0)
              return 0;
          }
          v91 = v205;
          v92 = v203[11];
          if (v205[11])
          {
            if (!v92)
              return 0;
            swift_bridgeObjectRetain();
            v93 = swift_bridgeObjectRetain();
            v94 = sub_224DD761C(v93, v92);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v94 & 1) == 0)
              return 0;
          }
          else if (v92)
          {
            return 0;
          }
          v95 = v91;
          v78 = v91[12];
          v79 = v91[13];
          v96 = v95[14];
          v82 = v203[12];
          v83 = v203[13];
          v97 = v203[14];
          if (v79 == 1)
          {
            if (v83 != 1)
              goto LABEL_32;
          }
          else
          {
            v242 = v78;
            v243 = v79;
            v244 = v96;
            if (v83 == 1)
              goto LABEL_31;
            v239 = v82;
            v240 = v83;
            v241 = v97;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v98 = static CodeableConcept.== infix(_:_:)(&v242, &v239);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_224DDB480(v78, v79);
            if ((v98 & 1) == 0)
              return 0;
          }
          v78 = v205[15];
          v79 = v205[16];
          v99 = v205[17];
          v82 = v203[15];
          v83 = v203[16];
          v100 = v203[17];
          if (v79 == 1)
          {
            if (v83 == 1)
              goto LABEL_52;
LABEL_32:
            sub_224DDB44C(v82, v83);
            sub_224DDB480(v78, v79);
            sub_224DDB480(v82, v83);
            return 0;
          }
          v242 = v205[15];
          v243 = v79;
          v244 = v99;
          if (v83 != 1)
          {
            v239 = v82;
            v240 = v83;
            v241 = v100;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v101 = static CodeableConcept.== infix(_:_:)(&v242, &v239);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_224DDB480(v78, v79);
            if ((v101 & 1) == 0)
              return 0;
LABEL_52:
            v102 = v205;
            v103 = v203[18];
            if (v205[18])
            {
              if (!v103)
                return 0;
              swift_bridgeObjectRetain();
              v104 = swift_bridgeObjectRetain();
              v105 = sub_224DD761C(v104, v103);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v105 & 1) == 0)
                return 0;
            }
            else if (v103)
            {
              return 0;
            }
            v106 = type metadata accessor for ModelsR4.Condition(0);
            sub_224DDB4B4((uint64_t)v102 + *(int *)(v106 + 52), (uint64_t)v70, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v200 = (int *)v106;
            sub_224DDB4B4((uint64_t)v203 + *(int *)(v106 + 52), (uint64_t)v68, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v107 = (uint64_t)v202;
            v108 = (uint64_t)&v202[*(int *)(v237 + 48)];
            sub_224DDB4B4((uint64_t)v70, (uint64_t)v202, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            sub_224DDB4B4((uint64_t)v68, v108, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
            v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
            v110 = v107;
            v111 = v238;
            if (v109(v110, 1, v238) == 1)
            {
              sub_224DDB50C((uint64_t)v68, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C((uint64_t)v70, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v109(v108, 1, v111) == 1)
              {
                sub_224DDB50C((uint64_t)v202, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                goto LABEL_64;
              }
            }
            else
            {
              sub_224DDB4B4((uint64_t)v202, (uint64_t)v65, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              if (v109(v108, 1, v111) != 1)
              {
                v116 = v230;
                sub_224DDEADC(v108, v230, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                v117 = static FHIRDateTime.== infix(_:_:)(v65, v116);
                sub_224DDEAA0(v116, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C((uint64_t)v68, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDB50C((uint64_t)v70, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                sub_224DDEAA0((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                sub_224DDB50C((uint64_t)v202, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                if ((v117 & 1) == 0)
                  return 0;
LABEL_64:
                v118 = v200;
                v119 = v236;
                sub_224DDB4B4((uint64_t)v205 + v200[14], v236, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                v120 = v235;
                sub_224DDB4B4((uint64_t)v203 + v118[14], v235, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                v121 = (uint64_t)v204;
                v122 = (uint64_t)&v204[*(int *)(v233 + 48)];
                sub_224DDB4B4(v119, (uint64_t)v204, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                sub_224DDB4B4(v120, v122, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                v123 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v231 + 48);
                v124 = v121;
                v125 = v234;
                if (v123(v124, 1, v234) == 1)
                {
                  sub_224DDB50C(v235, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_224DDB50C(v236, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  if (v123(v122, 1, v125) == 1)
                  {
                    sub_224DDB50C((uint64_t)v204, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    goto LABEL_72;
                  }
                }
                else
                {
                  sub_224DDB4B4((uint64_t)v204, v232, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  if (v123(v122, 1, v125) != 1)
                  {
                    v126 = v226;
                    sub_224DDEADC(v122, v226, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                    v127 = v232;
                    v128 = static Period.== infix(_:_:)(v232, v126);
                    sub_224DDEAA0(v126, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                    sub_224DDB50C(v235, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_224DDB50C(v236, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    sub_224DDEAA0(v127, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                    sub_224DDB50C((uint64_t)v204, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                    if ((v128 & 1) == 0)
                      return 0;
LABEL_72:
                    v129 = v200[15];
                    v130 = (_QWORD *)((char *)v205 + v129);
                    v131 = *(_QWORD *)((char *)v205 + v129 + 8);
                    v132 = (_QWORD *)((char *)v203 + v129);
                    v133 = v132[1];
                    if (v131)
                    {
                      if (!v133)
                        return 0;
                      v134 = v203;
                      v135 = v205;
                      if (*v130 != *v132 || v131 != v133)
                      {
                        v136 = sub_224F683CC();
                        result = 0;
                        if ((v136 & 1) == 0)
                          return result;
                      }
                    }
                    else
                    {
                      v134 = v203;
                      v135 = v205;
                      if (v133)
                        return 0;
                    }
                    v137 = v200;
                    v138 = v228;
                    sub_224DDB4B4((uint64_t)v135 + v200[16], v228, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    v139 = v227;
                    sub_224DDB4B4((uint64_t)v134 + v137[16], v227, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    v140 = v229;
                    v141 = v229 + *(int *)(v237 + 48);
                    sub_224DDB4B4(v138, v229, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    sub_224DDB4B4(v139, v141, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    if (v109(v140, 1, v238) == 1)
                    {
                      sub_224DDB50C(v227, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_224DDB50C(v228, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v109(v141, 1, v238) == 1)
                      {
                        sub_224DDB50C(v229, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        goto LABEL_86;
                      }
                    }
                    else
                    {
                      sub_224DDB4B4(v229, v225, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      if (v109(v141, 1, v238) != 1)
                      {
                        v142 = v141;
                        v143 = v230;
                        sub_224DDEADC(v142, v230, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                        v144 = v225;
                        v145 = static FHIRDateTime.== infix(_:_:)(v225, v143);
                        sub_224DDEAA0(v143, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                        sub_224DDB50C(v227, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_224DDB50C(v228, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        sub_224DDEAA0(v144, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                        sub_224DDB50C(v229, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                        if ((v145 & 1) == 0)
                          return 0;
LABEL_86:
                        v146 = v200;
                        v147 = v223;
                        sub_224DDB4B4((uint64_t)v205 + v200[17], v223, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                        v148 = v222;
                        sub_224DDB4B4((uint64_t)v203 + v146[17], v222, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                        v149 = v224;
                        v150 = v224 + *(int *)(v233 + 48);
                        sub_224DDB4B4(v147, v224, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                        sub_224DDB4B4(v148, v150, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                        if (v123(v149, 1, v234) == 1)
                        {
                          sub_224DDB50C(v222, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          sub_224DDB50C(v223, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          if (v123(v150, 1, v234) == 1)
                          {
                            sub_224DDB50C(v224, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                            goto LABEL_93;
                          }
                        }
                        else
                        {
                          sub_224DDB4B4(v224, v221, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          if (v123(v150, 1, v234) != 1)
                          {
                            v151 = v150;
                            v152 = v226;
                            sub_224DDEADC(v151, v226, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                            v153 = v221;
                            v154 = static Period.== infix(_:_:)(v221, v152);
                            sub_224DDEAA0(v152, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                            sub_224DDB50C(v222, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                            sub_224DDB50C(v223, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                            sub_224DDEAA0(v153, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                            sub_224DDB50C(v224, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                            if ((v154 & 1) == 0)
                              return 0;
LABEL_93:
                            v155 = v200[18];
                            v156 = (_QWORD *)((char *)v205 + v155);
                            v157 = *(_QWORD *)((char *)v205 + v155 + 8);
                            v158 = (_QWORD *)((char *)v203 + v155);
                            v159 = v158[1];
                            if (v157)
                            {
                              if (!v159)
                                return 0;
                              v160 = v203;
                              v161 = v205;
                              if (*v156 != *v158 || v157 != v159)
                              {
                                v162 = sub_224F683CC();
                                result = 0;
                                if ((v162 & 1) == 0)
                                  return result;
                              }
                            }
                            else
                            {
                              v160 = v203;
                              v161 = v205;
                              if (v159)
                                return 0;
                            }
                            v163 = v200;
                            v164 = v219;
                            sub_224DDB4B4((uint64_t)v161 + v200[19], v219, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                            v165 = v218;
                            sub_224DDB4B4((uint64_t)v160 + v163[19], v218, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                            v166 = v220;
                            v167 = v220 + *(int *)(v237 + 48);
                            sub_224DDB4B4(v164, v220, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                            sub_224DDB4B4(v165, v167, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                            if (v109(v166, 1, v238) == 1)
                            {
                              sub_224DDB50C(v218, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              sub_224DDB50C(v219, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              if (v109(v167, 1, v238) == 1)
                              {
                                sub_224DDB50C(v220, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                                goto LABEL_107;
                              }
                            }
                            else
                            {
                              sub_224DDB4B4(v220, (uint64_t)v201, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              if (v109(v167, 1, v238) != 1)
                              {
                                v168 = v167;
                                v169 = v230;
                                sub_224DDEADC(v168, v230, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                                v170 = (uint64_t)v201;
                                v171 = static FHIRDateTime.== infix(_:_:)(v201, v169);
                                sub_224DDEAA0(v169, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                                sub_224DDB50C(v218, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                                sub_224DDB50C(v219, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                                sub_224DDEAA0(v170, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                                sub_224DDB50C(v220, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                                if ((v171 & 1) == 0)
                                  return 0;
LABEL_107:
                                v172 = v200;
                                v173 = v215;
                                sub_224DDB4B4((uint64_t)v205 + v200[20], v215, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                v174 = v214;
                                sub_224DDB4B4((uint64_t)v203 + v172[20], v214, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                v175 = v216;
                                v176 = v216 + *(int *)(v213 + 48);
                                sub_224DDB4B4(v173, v216, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                sub_224DDB4B4(v174, v176, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                v177 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v210 + 48);
                                if (v177(v175, 1, v217) == 1)
                                {
                                  sub_224DDB50C(v214, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  sub_224DDB50C(v215, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  if (v177(v176, 1, v217) == 1)
                                  {
                                    sub_224DDB50C(v216, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
LABEL_114:
                                    v182 = v200;
                                    v183 = v209;
                                    sub_224DDB4B4((uint64_t)v205 + v200[21], v209, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    v184 = v208;
                                    sub_224DDB4B4((uint64_t)v203 + v182[21], v208, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    v185 = v212;
                                    v186 = v212 + *(int *)(v213 + 48);
                                    sub_224DDB4B4(v183, v212, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    sub_224DDB4B4(v184, v186, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    if (v177(v185, 1, v217) == 1)
                                    {
                                      sub_224DDB50C(v208, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      sub_224DDB50C(v209, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      if (v177(v186, 1, v217) == 1)
                                      {
                                        sub_224DDB50C(v212, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                        goto LABEL_121;
                                      }
                                    }
                                    else
                                    {
                                      sub_224DDB4B4(v212, (uint64_t)v206, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      if (v177(v186, 1, v217) != 1)
                                      {
                                        v187 = v186;
                                        v188 = v207;
                                        sub_224DDEADC(v187, (uint64_t)v207, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                                        v189 = v206;
                                        v190 = static Reference.== infix(_:_:)(v206, v188);
                                        sub_224DDEAA0((uint64_t)v188, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                                        sub_224DDB50C(v208, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                        sub_224DDB50C(v209, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                        sub_224DDEAA0((uint64_t)v189, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                                        sub_224DDB50C(v212, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                        if (!v190)
                                          return 0;
LABEL_121:
                                        v191 = v200[22];
                                        v192 = *(_QWORD *)((char *)v203 + v191);
                                        if (*(_QWORD *)((char *)v205 + v191))
                                        {
                                          if (!v192)
                                            return 0;
                                          swift_bridgeObjectRetain();
                                          v193 = swift_bridgeObjectRetain();
                                          v194 = sub_224DD84E8(v193, v192);
                                          swift_bridgeObjectRelease();
                                          swift_bridgeObjectRelease();
                                          if ((v194 & 1) == 0)
                                            return 0;
                                        }
                                        else if (v192)
                                        {
                                          return 0;
                                        }
                                        v195 = v200[23];
                                        v196 = (_QWORD *)((char *)v205 + v195);
                                        v197 = *(_QWORD *)((char *)v205 + v195 + 8);
                                        v198 = (_QWORD *)((char *)v203 + v195);
                                        v199 = v198[1];
                                        if (v197)
                                        {
                                          if (!v199 || (*v196 != *v198 || v197 != v199) && (sub_224F683CC() & 1) == 0)
                                            return 0;
                                        }
                                        else if (v199)
                                        {
                                          return 0;
                                        }
                                        return 1;
                                      }
                                      sub_224DDB50C(v208, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      sub_224DDB50C(v209, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                      sub_224DDEAA0((uint64_t)v206, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                                    }
                                    v112 = &qword_2557E0328;
                                    v113 = &qword_2557E0308;
                                    v114 = type metadata accessor for Reference;
                                    v115 = &v244;
LABEL_70:
                                    sub_224DDEA64(*(v115 - 32), v112, v113, (uint64_t (*)(uint64_t))v114);
                                    return 0;
                                  }
                                }
                                else
                                {
                                  sub_224DDB4B4(v216, (uint64_t)v211, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  if (v177(v176, 1, v217) != 1)
                                  {
                                    v178 = v176;
                                    v179 = v207;
                                    sub_224DDEADC(v178, (uint64_t)v207, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                                    v180 = v211;
                                    v181 = static Reference.== infix(_:_:)(v211, v179);
                                    sub_224DDEAA0((uint64_t)v179, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                                    sub_224DDB50C(v214, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    sub_224DDB50C(v215, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    sub_224DDEAA0((uint64_t)v180, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                                    sub_224DDB50C(v216, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                    if (!v181)
                                      return 0;
                                    goto LABEL_114;
                                  }
                                  sub_224DDB50C(v214, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  sub_224DDB50C(v215, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
                                  sub_224DDEAA0((uint64_t)v211, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
                                }
                                v112 = &qword_2557E0328;
                                v113 = &qword_2557E0308;
                                v114 = type metadata accessor for Reference;
                                v115 = &v245;
                                goto LABEL_70;
                              }
                              sub_224DDB50C(v218, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              sub_224DDB50C(v219, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                              sub_224DDEAA0((uint64_t)v201, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                            }
                            v112 = (unint64_t *)&qword_2557E02D8;
                            v113 = &qword_2557E02D0;
                            v114 = type metadata accessor for FHIRDateTime;
                            v115 = &v246;
                            goto LABEL_70;
                          }
                          sub_224DDB50C(v222, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          sub_224DDB50C(v223, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                          sub_224DDEAA0(v221, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                        }
                        sub_224DDEA64(v224, &qword_2557E1440, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                        return 0;
                      }
                      sub_224DDB50C(v227, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_224DDB50C(v228, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                      sub_224DDEAA0(v225, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
                    }
                    sub_224DDEA64(v229, (unint64_t *)&qword_2557E02D8, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
                    return 0;
                  }
                  sub_224DDB50C(v235, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_224DDB50C(v236, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period);
                  sub_224DDEAA0(v232, (uint64_t (*)(_QWORD))type metadata accessor for Period);
                }
                v112 = &qword_2557E1440;
                v113 = &qword_2557E04B8;
                v114 = type metadata accessor for Period;
                v115 = &v236;
                goto LABEL_70;
              }
              sub_224DDB50C((uint64_t)v68, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDB50C((uint64_t)v70, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime);
              sub_224DDEAA0((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
            }
            v112 = (unint64_t *)&qword_2557E02D8;
            v113 = &qword_2557E02D0;
            v114 = type metadata accessor for FHIRDateTime;
            v115 = &v234;
            goto LABEL_70;
          }
LABEL_31:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_32;
        }
        return 0;
      }
    }
    else
    {
      if (v77 != 1)
      {
        if (v76)
        {
          if (!v77)
          {
            sub_224DFAE98(v76);
            swift_bridgeObjectRelease();
            return 0;
          }
          sub_224DFAE98(v76);
          sub_224DFAE98(v76);
          sub_224DFAE98(v77);
          v85 = swift_bridgeObjectRetain();
          v86 = sub_224DD9ED8(v85, v77);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v77);
          swift_bridgeObjectRelease();
          sub_224DE60AC(v76);
          if ((v86 & 1) == 0)
            return 0;
        }
        else if (v77)
        {
          return 0;
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRetain();
    }
    sub_224DFAE98(v77);
    sub_224DE60AC(v76);
    sub_224DE60AC(v77);
    return 0;
  }
  return result;
}

void _s23HealthRecordsExtraction8ModelsR4V13ResourceProxyO2eeoiySbAE_AEtFZ_0(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _QWORD v31[10];
  uint64_t v32;
  char *v33;

  v33 = a2;
  v32 = a1;
  v2 = type metadata accessor for ModelsR4.Observation(0);
  MEMORY[0x24BDAC7A8](v2);
  v31[5] = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ModelsR4.Immunization(0);
  MEMORY[0x24BDAC7A8](v4);
  v31[4] = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ModelsR4.DocumentReference(0);
  MEMORY[0x24BDAC7A8](v6);
  v31[3] = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ModelsR4.DiagnosticReport(0);
  MEMORY[0x24BDAC7A8](v8);
  v31[2] = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModelsR4.Condition(0);
  MEMORY[0x24BDAC7A8](v10);
  v31[1] = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v31[9] = (char *)v31 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v31[8] = (char *)v31 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v31[7] = (char *)v31 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v31[6] = (char *)v31 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v24 = MEMORY[0x24BDAC7A8](v23);
  MEMORY[0x24BDAC7A8](v24);
  sub_224E51808();
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)v31 + *(int *)(v26 + 48) - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDB408(v32, (uint64_t)v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ModelsR4.ResourceProxy);
  v29 = (uint64_t)v33;
  v33 = v28;
  sub_224DDB408(v29, (uint64_t)v28, type metadata accessor for ModelsR4.ResourceProxy);
  v30 = (char *)sub_224DFA514 + 4 * word_224F6B21E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_224DFA514()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  sub_224DDB408(v2, (uint64_t)v1, type metadata accessor for ModelsR4.ResourceProxy);
  v4 = v1[1];
  v5 = v1[3];
  v6 = v1[5];
  v7 = v1[7];
  v8 = *(uint64_t **)(v0 + 96);
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDEAA0(v2, (uint64_t (*)(_QWORD))sub_224E51808);
    v9 = 0;
  }
  else
  {
    v10 = v1[6];
    v11 = v1[4];
    v12 = v1[2];
    v13 = *v1;
    v14 = *v8;
    v15 = v8[1];
    v16 = v8[2];
    v17 = v8[7];
    *(_QWORD *)(v3 - 256) = v13;
    *(_QWORD *)(v3 - 248) = v4;
    *(_QWORD *)(v3 - 240) = v12;
    *(_QWORD *)(v3 - 232) = v5;
    *(_QWORD *)(v3 - 224) = v11;
    *(_QWORD *)(v3 - 216) = v6;
    *(_QWORD *)(v3 - 208) = v10;
    *(_QWORD *)(v3 - 200) = v7;
    *(_QWORD *)(v0 + 432) = v14;
    *(_QWORD *)(v0 + 440) = v15;
    v18 = *(_OWORD *)(v8 + 3);
    *(_OWORD *)(v0 + 80) = v18;
    *(_OWORD *)(v0 + 456) = v18;
    v19 = *(_OWORD *)(v8 + 5);
    *(_OWORD *)(v0 + 96) = v19;
    *(_OWORD *)(v0 + 472) = v19;
    *(_QWORD *)(v0 + 448) = v16;
    *(_QWORD *)(v0 + 488) = v17;
    v9 = _s23HealthRecordsExtraction8ModelsR4V6BinaryV2eeoiySbAE_AEtFZ_0((_QWORD *)(v3 - 256), (_QWORD *)(v0 + 432));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDEAA0(v2, type metadata accessor for ModelsR4.ResourceProxy);
  }
  return v9 & 1;
}

BOOL _s23HealthRecordsExtraction8ModelsR4V6BundleV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;
  uint64_t v11;
  char v12;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = sub_224F683CC(), result = 0, (v9 & 1) != 0))
  {
    if (v2)
    {
      if (!v6)
        return 0;
      swift_bridgeObjectRetain();
      v11 = swift_bridgeObjectRetain();
      v12 = sub_224DD95E4(v11, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
        return 0;
    }
    else if (v6)
    {
      return 0;
    }
    if (v4)
      return v7 && (v3 == v5 && v4 == v7 || (sub_224F683CC() & 1) != 0);
    return !v7;
  }
  return result;
}

unint64_t sub_224DFAC44()
{
  unint64_t result;

  result = qword_2557E06E8;
  if (!qword_2557E06E8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D58C, &type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E06E8);
  }
  return result;
}

uint64_t sub_224DFAC88(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_224DDEA0C(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

unint64_t sub_224DFACE0()
{
  unint64_t result;

  result = qword_2557E06F8;
  if (!qword_2557E06F8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for JSON, &type metadata for JSON);
    atomic_store(result, (unint64_t *)&qword_2557E06F8);
  }
  return result;
}

id sub_224DFAD24(id result, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_224DFAD38(result, a2, a3);
  return result;
}

id sub_224DFAD38(id result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
      result = result;
      break;
    case 2:
    case 3:
    case 4:
      result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_224DFAD74()
{
  unint64_t result;

  result = qword_2557E0700;
  if (!qword_2557E0700)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for JSON, &type metadata for JSON);
    atomic_store(result, (unint64_t *)&qword_2557E0700);
  }
  return result;
}

void sub_224DFADB8(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    sub_224DFADCC(a1, a2, a3);
}

void sub_224DFADCC(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:

      break;
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

unint64_t sub_224DFAE08()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0720;
  if (!qword_2557E0720)
  {
    sub_224DDEA0C(255, &qword_2557E04A0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0728, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsR4.Bundle.BundleEntry);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0720);
  }
  return result;
}

uint64_t sub_224DFAE98(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t sub_224DFAEA8()
{
  unint64_t result;

  result = qword_2557E0738;
  if (!qword_2557E0738)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for CodeableConcept, &type metadata for CodeableConcept);
    atomic_store(result, (unint64_t *)&qword_2557E0738);
  }
  return result;
}

unint64_t sub_224DFAEEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E0740;
  if (!qword_2557E0740)
  {
    sub_224DFB644(255, &qword_2557E04E0);
    v2 = v1;
    v3 = sub_224DFAEA8();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0740);
  }
  return result;
}

unint64_t sub_224DFAF5C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0760;
  if (!qword_2557E0760)
  {
    sub_224DDEA0C(255, &qword_2557E0508, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0768, (uint64_t (*)(uint64_t))type metadata accessor for Annotation, (uint64_t)&protocol conformance descriptor for Annotation);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0760);
  }
  return result;
}

unint64_t sub_224DFAFEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0778;
  if (!qword_2557E0778)
  {
    sub_224DDEA0C(255, &qword_2557E0538, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0780, (uint64_t (*)(uint64_t))type metadata accessor for Extension, (uint64_t)&protocol conformance descriptor for Extension);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0778);
  }
  return result;
}

unint64_t sub_224DFB07C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0788;
  if (!qword_2557E0788)
  {
    sub_224DDEA0C(255, &qword_2557E0550, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0758, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t)&protocol conformance descriptor for Reference);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0788);
  }
  return result;
}

unint64_t sub_224DFB10C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0790;
  if (!qword_2557E0790)
  {
    sub_224DDEA0C(255, &qword_2557E0560, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0798, (uint64_t (*)(uint64_t))type metadata accessor for Attachment, (uint64_t)&protocol conformance descriptor for Attachment);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0790);
  }
  return result;
}

unint64_t sub_224DFB19C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E07A8;
  if (!qword_2557E07A8)
  {
    sub_224DDEA0C(255, &qword_2557E0598, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E07B0, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContent);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E07A8);
  }
  return result;
}

unint64_t sub_224DFB22C()
{
  unint64_t result;

  result = qword_2557E07C8;
  if (!qword_2557E07C8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D53C, &type metadata for ModelsR4.DocumentReferenceContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E07C8);
  }
  return result;
}

unint64_t sub_224DFB270()
{
  unint64_t result;

  result = qword_2557E07E0;
  if (!qword_2557E07E0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D4EC, &type metadata for ModelsR4.DocumentReferenceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E07E0);
  }
  return result;
}

uint64_t sub_224DFB2B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    sub_224DDB44C(a2, a3);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_224DFB31C()
{
  unint64_t result;

  result = qword_2557E07F8;
  if (!qword_2557E07F8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for FHIRDate, &type metadata for FHIRDate);
    atomic_store(result, (unint64_t *)&qword_2557E07F8);
  }
  return result;
}

unint64_t sub_224DFB360()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E0800;
  if (!qword_2557E0800)
  {
    sub_224DFB644(255, &qword_2557E05D8);
    v2 = v1;
    v3 = sub_224DFB3D0();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0800);
  }
  return result;
}

unint64_t sub_224DFB3D0()
{
  unint64_t result;

  result = qword_2557E0808;
  if (!qword_2557E0808)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.ImmunizationProtocol, &type metadata for ModelsR4.ImmunizationProtocol);
    atomic_store(result, (unint64_t *)&qword_2557E0808);
  }
  return result;
}

unint64_t sub_224DFB414()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0810;
  if (!qword_2557E0810)
  {
    sub_224DDEA0C(255, &qword_2557E05F0, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0818, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t)&protocol conformance descriptor for ModelsR4.ImmunizationPerformer);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0810);
  }
  return result;
}

unint64_t sub_224DFB4A4()
{
  unint64_t result;

  result = qword_2557E0820;
  if (!qword_2557E0820)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Location, &type metadata for Location);
    atomic_store(result, (unint64_t *)&qword_2557E0820);
  }
  return result;
}

unint64_t sub_224DFB4E8()
{
  unint64_t result;

  result = qword_2557E0830;
  if (!qword_2557E0830)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D49C, &type metadata for ModelsR4.ImmunizationProtocol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0830);
  }
  return result;
}

unint64_t sub_224DFB52C()
{
  unint64_t result;

  result = qword_2557E0848;
  if (!qword_2557E0848)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D44C, &type metadata for ModelsR4.ImmunizationPerformer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0848);
  }
  return result;
}

unint64_t sub_224DFB570()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0868;
  if (!qword_2557E0868)
  {
    sub_224DDEA0C(255, &qword_2557E0630, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0870, (uint64_t (*)(uint64_t))type metadata accessor for ReferenceRange, (uint64_t)&protocol conformance descriptor for ReferenceRange);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0868);
  }
  return result;
}

unint64_t sub_224DFB600()
{
  unint64_t result;

  result = qword_2557E0880;
  if (!qword_2557E0880)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D3FC, &type metadata for ModelsR4.HumanName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E0880);
  }
  return result;
}

void sub_224DFB644(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_224F67DB4();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_224DFB688(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_224DFB644(255, (unint64_t *)&qword_2557E0888);
    v8 = a2;
    result = MEMORY[0x22768ED24](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_224DFB6F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_224DFB738()
{
  unint64_t result;

  result = qword_2557E08B0;
  if (!qword_2557E08B0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D3AC, &type metadata for ModelsR4.PatientLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E08B0);
  }
  return result;
}

void sub_224DFB77C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_224DFB7D8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E08C8;
  if (!qword_2557E08C8)
  {
    sub_224DDEA0C(255, &qword_2557E0660, type metadata accessor for ModelsR4.HumanName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E08D0, type metadata accessor for ModelsR4.HumanName, (uint64_t)&protocol conformance descriptor for ModelsR4.HumanName);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E08C8);
  }
  return result;
}

unint64_t sub_224DFB868()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E08D8;
  if (!qword_2557E08D8)
  {
    sub_224DFB644(255, &qword_2557E0678);
    v2 = v1;
    v3 = sub_224DFB8D8();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E08D8);
  }
  return result;
}

unint64_t sub_224DFB8D8()
{
  unint64_t result;

  result = qword_2557E08E0;
  if (!qword_2557E08E0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ContactPoint, &type metadata for ContactPoint);
    atomic_store(result, (unint64_t *)&qword_2557E08E0);
  }
  return result;
}

unint64_t sub_224DFB91C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E08E8;
  if (!qword_2557E08E8)
  {
    sub_224DDEA0C(255, (unint64_t *)&qword_2557E0690, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E08F0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t)&protocol conformance descriptor for Identifier);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E08E8);
  }
  return result;
}

unint64_t sub_224DFB9AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_2557E08F8;
  if (!qword_2557E08F8)
  {
    sub_224DFB644(255, &qword_2557E06A8);
    v2 = v1;
    v3 = sub_224DFBA1C();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E08F8);
  }
  return result;
}

unint64_t sub_224DFBA1C()
{
  unint64_t result;

  result = qword_2557E0900;
  if (!qword_2557E0900)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Address, &type metadata for Address);
    atomic_store(result, (unint64_t *)&qword_2557E0900);
  }
  return result;
}

unint64_t sub_224DFBA60()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_2557E0908;
  if (!qword_2557E0908)
  {
    sub_224DDEA0C(255, &qword_2557E06C0, type metadata accessor for ModelsR4.PatientLink, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v2 = v1;
    v3 = sub_224DDACD4(&qword_2557E0910, type metadata accessor for ModelsR4.PatientLink, (uint64_t)&protocol conformance descriptor for ModelsR4.PatientLink);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_2557E0908);
  }
  return result;
}

uint64_t sub_224DFBAF0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4((unint64_t *)&qword_2557E06F0, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsR4.ResourceProxy);
  a1[2] = sub_224DDACD4(&qword_2557E0710, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsR4.ResourceProxy);
  result = sub_224DDACD4(&qword_2557E0918, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsR4.ResourceProxy);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFBB68()
{
  return sub_224DDACD4(&qword_2557E0920, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t)&protocol conformance descriptor for ModelsR4.ResourceProxy);
}

uint64_t sub_224DFBB94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224DFBBB0, (uint64_t (*)(void))sub_224DFBBF4, (uint64_t (*)(void))sub_224DFBC38);
}

unint64_t sub_224DFBBB0()
{
  unint64_t result;

  result = qword_2557E0928;
  if (!qword_2557E0928)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Binary, &type metadata for ModelsR4.Binary);
    atomic_store(result, (unint64_t *)&qword_2557E0928);
  }
  return result;
}

unint64_t sub_224DFBBF4()
{
  unint64_t result;

  result = qword_2557E0930;
  if (!qword_2557E0930)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Binary, &type metadata for ModelsR4.Binary);
    atomic_store(result, (unint64_t *)&qword_2557E0930);
  }
  return result;
}

unint64_t sub_224DFBC38()
{
  unint64_t result;

  result = qword_2557E0938;
  if (!qword_2557E0938)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Binary, &type metadata for ModelsR4.Binary);
    atomic_store(result, (unint64_t *)&qword_2557E0938);
  }
  return result;
}

uint64_t sub_224DFBC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFCA74(a1, a2, a3, (uint64_t (*)(void))sub_224DFBBB0, (uint64_t (*)(void))sub_224DFBBF4);
}

unint64_t sub_224DFBC94()
{
  unint64_t result;

  result = qword_2557E0940;
  if (!qword_2557E0940)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Binary, &type metadata for ModelsR4.Binary);
    atomic_store(result, (unint64_t *)&qword_2557E0940);
  }
  return result;
}

uint64_t sub_224DFBCD8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E04B0, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsR4.Bundle.BundleEntry);
  a1[2] = sub_224DDACD4(&qword_2557E0728, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsR4.Bundle.BundleEntry);
  result = sub_224DDACD4(&qword_2557E0948, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsR4.Bundle.BundleEntry);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFBD50()
{
  return sub_224DDACD4(&qword_2557E0950, type metadata accessor for ModelsR4.Bundle.BundleEntry, (uint64_t)&protocol conformance descriptor for ModelsR4.Bundle.BundleEntry);
}

uint64_t sub_224DFBD7C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224DFBD98, (uint64_t (*)(void))sub_224DFBDDC, (uint64_t (*)(void))sub_224DFBE20);
}

unint64_t sub_224DFBD98()
{
  unint64_t result;

  result = qword_2557E0958;
  if (!qword_2557E0958)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Bundle, &type metadata for ModelsR4.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E0958);
  }
  return result;
}

unint64_t sub_224DFBDDC()
{
  unint64_t result;

  result = qword_2557E0960;
  if (!qword_2557E0960)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Bundle, &type metadata for ModelsR4.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E0960);
  }
  return result;
}

unint64_t sub_224DFBE20()
{
  unint64_t result;

  result = qword_2557E0968;
  if (!qword_2557E0968)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Bundle, &type metadata for ModelsR4.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E0968);
  }
  return result;
}

uint64_t sub_224DFBE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFCA74(a1, a2, a3, (uint64_t (*)(void))sub_224DFBD98, (uint64_t (*)(void))sub_224DFBDDC);
}

unint64_t sub_224DFBE7C()
{
  unint64_t result;

  result = qword_2557E0970;
  if (!qword_2557E0970)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Bundle, &type metadata for ModelsR4.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E0970);
  }
  return result;
}

uint64_t sub_224DFBEC0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0978, type metadata accessor for ModelsR4.Condition, (uint64_t)&protocol conformance descriptor for ModelsR4.Condition);
  a1[2] = sub_224DDACD4((unint64_t *)&qword_2557E0980, type metadata accessor for ModelsR4.Condition, (uint64_t)&protocol conformance descriptor for ModelsR4.Condition);
  result = sub_224DDACD4(&qword_2557E0988, type metadata accessor for ModelsR4.Condition, (uint64_t)&protocol conformance descriptor for ModelsR4.Condition);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFBF38(uint64_t a1)
{
  uint64_t result;

  result = sub_224DDACD4(&qword_2557E0440, type metadata accessor for ModelsR4.Condition, (uint64_t)&protocol conformance descriptor for ModelsR4.Condition);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_224DFBF74()
{
  return sub_224DDACD4(&qword_2557E0990, type metadata accessor for ModelsR4.Condition, (uint64_t)&protocol conformance descriptor for ModelsR4.Condition);
}

uint64_t sub_224DFBFA0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224DDACD4(&qword_2557E0978, type metadata accessor for ModelsR4.Condition, (uint64_t)&protocol conformance descriptor for ModelsR4.Condition);
  result = sub_224DDACD4((unint64_t *)&qword_2557E0980, type metadata accessor for ModelsR4.Condition, (uint64_t)&protocol conformance descriptor for ModelsR4.Condition);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_224DFBFFC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0998, type metadata accessor for ModelsR4.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsR4.DiagnosticReport);
  a1[2] = sub_224DDACD4(&qword_2557E09A0, type metadata accessor for ModelsR4.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsR4.DiagnosticReport);
  result = sub_224DDACD4(&qword_2557E09A8, type metadata accessor for ModelsR4.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsR4.DiagnosticReport);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFC074(uint64_t a1)
{
  uint64_t result;

  result = sub_224DDACD4(&qword_2557E0438, type metadata accessor for ModelsR4.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsR4.DiagnosticReport);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_224DFC0B0()
{
  return sub_224DDACD4(&qword_2557E09B0, type metadata accessor for ModelsR4.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsR4.DiagnosticReport);
}

uint64_t sub_224DFC0DC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224DDACD4(&qword_2557E0998, type metadata accessor for ModelsR4.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsR4.DiagnosticReport);
  result = sub_224DDACD4(&qword_2557E09A0, type metadata accessor for ModelsR4.DiagnosticReport, (uint64_t)&protocol conformance descriptor for ModelsR4.DiagnosticReport);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_224DFC138(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E09B8, type metadata accessor for ModelsR4.DocumentReference, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReference);
  a1[2] = sub_224DDACD4(&qword_2557E09C0, type metadata accessor for ModelsR4.DocumentReference, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReference);
  result = sub_224DDACD4(&qword_2557E09C8, type metadata accessor for ModelsR4.DocumentReference, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReference);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFC1B0(uint64_t a1)
{
  uint64_t result;

  result = sub_224DDACD4(&qword_2557E0430, type metadata accessor for ModelsR4.DocumentReference, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReference);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_224DFC1EC()
{
  return sub_224DDACD4(&qword_2557E09D0, type metadata accessor for ModelsR4.DocumentReference, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReference);
}

uint64_t sub_224DFC218(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224DDACD4(&qword_2557E09B8, type metadata accessor for ModelsR4.DocumentReference, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReference);
  result = sub_224DDACD4(&qword_2557E09C0, type metadata accessor for ModelsR4.DocumentReference, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReference);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_224DFC274(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E05A8, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContent);
  a1[2] = sub_224DDACD4(&qword_2557E07B0, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContent);
  result = sub_224DDACD4(&qword_2557E09D8, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContent);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFC2EC()
{
  return sub_224DDACD4(&qword_2557E09E0, type metadata accessor for ModelsR4.DocumentReferenceContent, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContent);
}

uint64_t sub_224DFC318(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E05B0, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContext);
  a1[2] = sub_224DDACD4(&qword_2557E07B8, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContext);
  result = sub_224DDACD4(&qword_2557E09E8, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContext);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFC390()
{
  return sub_224DDACD4(&qword_2557E09F0, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t)&protocol conformance descriptor for ModelsR4.DocumentReferenceContext);
}

uint64_t sub_224DFC3BC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E09F8, type metadata accessor for ModelsR4.Immunization, (uint64_t)&protocol conformance descriptor for ModelsR4.Immunization);
  a1[2] = sub_224DDACD4((unint64_t *)&qword_2557E0A00, type metadata accessor for ModelsR4.Immunization, (uint64_t)&protocol conformance descriptor for ModelsR4.Immunization);
  result = sub_224DDACD4(&qword_2557E0A08, type metadata accessor for ModelsR4.Immunization, (uint64_t)&protocol conformance descriptor for ModelsR4.Immunization);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFC434(uint64_t a1)
{
  uint64_t result;

  result = sub_224DDACD4(&qword_2557E0428, type metadata accessor for ModelsR4.Immunization, (uint64_t)&protocol conformance descriptor for ModelsR4.Immunization);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_224DFC470()
{
  return sub_224DDACD4(&qword_2557E0A10, type metadata accessor for ModelsR4.Immunization, (uint64_t)&protocol conformance descriptor for ModelsR4.Immunization);
}

uint64_t sub_224DFC49C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224DDACD4(&qword_2557E09F8, type metadata accessor for ModelsR4.Immunization, (uint64_t)&protocol conformance descriptor for ModelsR4.Immunization);
  result = sub_224DDACD4((unint64_t *)&qword_2557E0A00, type metadata accessor for ModelsR4.Immunization, (uint64_t)&protocol conformance descriptor for ModelsR4.Immunization);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_224DFC4F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224DE6688, (uint64_t (*)(void))sub_224DFB3D0, (uint64_t (*)(void))sub_224DFC514);
}

unint64_t sub_224DFC514()
{
  unint64_t result;

  result = qword_2557E0A18;
  if (!qword_2557E0A18)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.ImmunizationProtocol, &type metadata for ModelsR4.ImmunizationProtocol);
    atomic_store(result, (unint64_t *)&qword_2557E0A18);
  }
  return result;
}

unint64_t sub_224DFC55C()
{
  unint64_t result;

  result = qword_2557E0A20;
  if (!qword_2557E0A20)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.ImmunizationProtocol, &type metadata for ModelsR4.ImmunizationProtocol);
    atomic_store(result, (unint64_t *)&qword_2557E0A20);
  }
  return result;
}

uint64_t sub_224DFC5A0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0600, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t)&protocol conformance descriptor for ModelsR4.ImmunizationPerformer);
  a1[2] = sub_224DDACD4(&qword_2557E0818, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t)&protocol conformance descriptor for ModelsR4.ImmunizationPerformer);
  result = sub_224DDACD4(&qword_2557E0A28, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t)&protocol conformance descriptor for ModelsR4.ImmunizationPerformer);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFC618()
{
  return sub_224DDACD4(&qword_2557E0A30, type metadata accessor for ModelsR4.ImmunizationPerformer, (uint64_t)&protocol conformance descriptor for ModelsR4.ImmunizationPerformer);
}

uint64_t sub_224DFC644(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0A38, type metadata accessor for ModelsR4.Observation, (uint64_t)&protocol conformance descriptor for ModelsR4.Observation);
  a1[2] = sub_224DDACD4((unint64_t *)&qword_2557E0A40, type metadata accessor for ModelsR4.Observation, (uint64_t)&protocol conformance descriptor for ModelsR4.Observation);
  result = sub_224DDACD4(&qword_2557E0A48, type metadata accessor for ModelsR4.Observation, (uint64_t)&protocol conformance descriptor for ModelsR4.Observation);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFC6BC(uint64_t a1)
{
  uint64_t result;

  result = sub_224DDACD4(&qword_2557E0420, type metadata accessor for ModelsR4.Observation, (uint64_t)&protocol conformance descriptor for ModelsR4.Observation);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_224DFC6F8()
{
  return sub_224DDACD4(&qword_2557E0A50, type metadata accessor for ModelsR4.Observation, (uint64_t)&protocol conformance descriptor for ModelsR4.Observation);
}

uint64_t sub_224DFC724(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224DDACD4(&qword_2557E0A38, type metadata accessor for ModelsR4.Observation, (uint64_t)&protocol conformance descriptor for ModelsR4.Observation);
  result = sub_224DDACD4((unint64_t *)&qword_2557E0A40, type metadata accessor for ModelsR4.Observation, (uint64_t)&protocol conformance descriptor for ModelsR4.Observation);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_224DFC780(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E0670, type metadata accessor for ModelsR4.HumanName, (uint64_t)&protocol conformance descriptor for ModelsR4.HumanName);
  a1[2] = sub_224DDACD4(&qword_2557E08D0, type metadata accessor for ModelsR4.HumanName, (uint64_t)&protocol conformance descriptor for ModelsR4.HumanName);
  result = sub_224DDACD4(&qword_2557E0A58, type metadata accessor for ModelsR4.HumanName, (uint64_t)&protocol conformance descriptor for ModelsR4.HumanName);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFC7F8()
{
  return sub_224DDACD4(&qword_2557E0A60, type metadata accessor for ModelsR4.HumanName, (uint64_t)&protocol conformance descriptor for ModelsR4.HumanName);
}

uint64_t sub_224DFC824(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E06D0, type metadata accessor for ModelsR4.PatientLink, (uint64_t)&protocol conformance descriptor for ModelsR4.PatientLink);
  a1[2] = sub_224DDACD4(&qword_2557E0910, type metadata accessor for ModelsR4.PatientLink, (uint64_t)&protocol conformance descriptor for ModelsR4.PatientLink);
  result = sub_224DDACD4(&qword_2557E0A68, type metadata accessor for ModelsR4.PatientLink, (uint64_t)&protocol conformance descriptor for ModelsR4.PatientLink);
  a1[3] = result;
  return result;
}

uint64_t sub_224DFC89C()
{
  return sub_224DDACD4(&qword_2557E0A70, type metadata accessor for ModelsR4.PatientLink, (uint64_t)&protocol conformance descriptor for ModelsR4.PatientLink);
}

uint64_t sub_224DFC8C8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFC8E4(a1, a2, a3, (uint64_t (*)(void))sub_224DFC928, (uint64_t (*)(void))sub_224DFC96C, (uint64_t (*)(void))sub_224DFC9B0);
}

uint64_t sub_224DFC8E4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_224DFC928()
{
  unint64_t result;

  result = qword_2557E0A78;
  if (!qword_2557E0A78)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Patient, &type metadata for ModelsR4.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E0A78);
  }
  return result;
}

unint64_t sub_224DFC96C()
{
  unint64_t result;

  result = qword_2557E0A80;
  if (!qword_2557E0A80)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Patient, &type metadata for ModelsR4.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E0A80);
  }
  return result;
}

unint64_t sub_224DFC9B0()
{
  unint64_t result;

  result = qword_2557E0A88;
  if (!qword_2557E0A88)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Patient, &type metadata for ModelsR4.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E0A88);
  }
  return result;
}

unint64_t sub_224DFC9F4(uint64_t a1)
{
  unint64_t result;

  result = sub_224DDF264();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_224DFCA1C()
{
  unint64_t result;

  result = qword_2557E0A90;
  if (!qword_2557E0A90)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsR4.Patient, &type metadata for ModelsR4.Patient);
    atomic_store(result, (unint64_t *)&qword_2557E0A90);
  }
  return result;
}

uint64_t sub_224DFCA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224DFCA74(a1, a2, a3, (uint64_t (*)(void))sub_224DFC928, (uint64_t (*)(void))sub_224DFC96C);
}

uint64_t sub_224DFCA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4()
{
  return &type metadata for ModelsR4;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelsR4.ResourceProxy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_224DFCB14 + 4 * word_224F6B238[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for ModelsR4.ResourceProxy(_QWORD *a1)
{
  uint64_t result;
  int *v3;
  char *v4;
  uint64_t v5;
  unsigned int (*v6)(char *, uint64_t, uint64_t);
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  char *v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  int *v85;
  char *v86;
  uint64_t v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  int *v104;
  char *v105;
  uint64_t v106;
  unsigned int (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_181;
    case 1:
    case 8:
      goto LABEL_184;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1)
        swift_bridgeObjectRelease();
      if (a1[6] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (a1[9] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (a1[13] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (a1[16] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v3 = (int *)type metadata accessor for ModelsR4.Condition(0);
      v4 = (char *)a1 + v3[13];
      v5 = type metadata accessor for FHIRDateTime();
      v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
      if (!v6(v4, 1, v5))
      {
        if (*((_QWORD *)v4 + 7) != 1)
          swift_bridgeObjectRelease();
        v7 = &v4[*(int *)(v5 + 28)];
        v8 = sub_224F67874();
        v9 = *(_QWORD *)(v8 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
          (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
        swift_bridgeObjectRelease();
      }
      v10 = (char *)a1 + v3[14];
      v11 = type metadata accessor for Period();
      v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
      if (!v12(v10, 1, v11))
      {
        if (!v6(v10, 1, v5))
        {
          if (*((_QWORD *)v10 + 7) != 1)
            swift_bridgeObjectRelease();
          v13 = &v10[*(int *)(v5 + 28)];
          v14 = sub_224F67874();
          v15 = *(_QWORD *)(v14 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
            (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
          swift_bridgeObjectRelease();
        }
        v16 = &v10[*(int *)(v11 + 20)];
        if (!v6(v16, 1, v5))
        {
          if (*((_QWORD *)v16 + 7) != 1)
            swift_bridgeObjectRelease();
          v17 = &v16[*(int *)(v5 + 28)];
          v18 = sub_224F67874();
          v19 = *(_QWORD *)(v18 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
            (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      v20 = (char *)a1 + v3[16];
      if (!v6(v20, 1, v5))
      {
        if (*((_QWORD *)v20 + 7) != 1)
          swift_bridgeObjectRelease();
        v21 = &v20[*(int *)(v5 + 28)];
        v22 = sub_224F67874();
        v23 = *(_QWORD *)(v22 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
          (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
        swift_bridgeObjectRelease();
      }
      v24 = (char *)a1 + v3[17];
      if (!v12(v24, 1, v11))
      {
        if (!v6(v24, 1, v5))
        {
          if (*((_QWORD *)v24 + 7) != 1)
            swift_bridgeObjectRelease();
          v25 = &v24[*(int *)(v5 + 28)];
          v26 = sub_224F67874();
          v27 = *(_QWORD *)(v26 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
            (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v26);
          swift_bridgeObjectRelease();
        }
        v28 = &v24[*(int *)(v11 + 20)];
        if (!v6(v28, 1, v5))
        {
          if (*((_QWORD *)v28 + 7) != 1)
            swift_bridgeObjectRelease();
          v29 = &v28[*(int *)(v5 + 28)];
          v30 = sub_224F67874();
          v31 = *(_QWORD *)(v30 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
            (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      v32 = (char *)a1 + v3[19];
      if (!v6(v32, 1, v5))
      {
        if (*((_QWORD *)v32 + 7) != 1)
          swift_bridgeObjectRelease();
        v33 = &v32[*(int *)(v5 + 28)];
        v34 = sub_224F67874();
        v35 = *(_QWORD *)(v34 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
          (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
        swift_bridgeObjectRelease();
      }
      v36 = (char *)a1 + v3[20];
      v37 = type metadata accessor for Reference();
      v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48);
      if (!v38(v36, 1, v37))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v39 = &v36[*(int *)(v37 + 24)];
        v40 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v39, 1, v40))
        {
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v39 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v41 = &v39[*(int *)(v40 + 24)];
          v42 = sub_224F675D4();
          v43 = *(_QWORD *)(v42 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
            (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
          swift_bridgeObjectRelease();
        }
      }
      v44 = (char *)a1 + v3[21];
      if (!v38(v44, 1, v37))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = &v44[*(int *)(v37 + 24)];
        v46 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46))
        {
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v45 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v47 = &v45[*(int *)(v46 + 24)];
          v48 = sub_224F675D4();
          v49 = *(_QWORD *)(v48 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
            (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v48);
          swift_bridgeObjectRelease();
        }
      }
      goto LABEL_180;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
      v51 = (char *)a1 + v50[11];
      v52 = type metadata accessor for FHIRDateTime();
      v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48);
      if (!v53(v51, 1, v52))
      {
        if (*((_QWORD *)v51 + 7) != 1)
          swift_bridgeObjectRelease();
        v54 = &v51[*(int *)(v52 + 28)];
        v55 = sub_224F67874();
        v56 = *(_QWORD *)(v55 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
          (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v55);
        swift_bridgeObjectRelease();
      }
      v57 = (char *)a1 + v50[12];
      v58 = type metadata accessor for Period();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v57, 1, v58))
      {
        if (!v53(v57, 1, v52))
        {
          if (*((_QWORD *)v57 + 7) != 1)
            swift_bridgeObjectRelease();
          v59 = &v57[*(int *)(v52 + 28)];
          v60 = sub_224F67874();
          v61 = *(_QWORD *)(v60 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
            (*(void (**)(char *, uint64_t))(v61 + 8))(v59, v60);
          swift_bridgeObjectRelease();
        }
        v62 = &v57[*(int *)(v58 + 20)];
        if (!v53(v62, 1, v52))
        {
          if (*((_QWORD *)v62 + 7) != 1)
            swift_bridgeObjectRelease();
          v63 = &v62[*(int *)(v52 + 28)];
          v64 = sub_224F67874();
          v65 = *(_QWORD *)(v64 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
            (*(void (**)(char *, uint64_t))(v65 + 8))(v63, v64);
          swift_bridgeObjectRelease();
        }
      }
      v66 = (char *)a1 + v50[13];
      if (!v53(v66, 1, v52))
      {
        if (*((_QWORD *)v66 + 7) != 1)
          swift_bridgeObjectRelease();
        v67 = &v66[*(int *)(v52 + 28)];
        v68 = sub_224F67874();
        v69 = *(_QWORD *)(v68 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
          (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v68);
        swift_bridgeObjectRelease();
      }
      goto LABEL_179;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v70 = type metadata accessor for ModelsR4.DocumentReference(0);
      v71 = (char *)a1 + *(int *)(v70 + 44);
      v72 = type metadata accessor for FHIRDateTime();
      v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 48);
      if (!v73(v71, 1, v72))
      {
        if (*((_QWORD *)v71 + 7) != 1)
          swift_bridgeObjectRelease();
        v74 = &v71[*(int *)(v72 + 28)];
        v75 = sub_224F67874();
        v76 = *(_QWORD *)(v75 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
          (*(void (**)(char *, uint64_t))(v76 + 8))(v74, v75);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v77 = (char *)a1 + *(int *)(v70 + 60);
      v78 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 48))(v77, 1, v78))
        goto LABEL_181;
      swift_bridgeObjectRelease();
      v79 = &v77[*(int *)(v78 + 20)];
      v80 = type metadata accessor for Period();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 48))(v79, 1, v80))
        goto LABEL_181;
      if (!v73(v79, 1, v72))
      {
        if (*((_QWORD *)v79 + 7) != 1)
          swift_bridgeObjectRelease();
        v81 = &v79[*(int *)(v72 + 28)];
        v82 = sub_224F67874();
        v83 = *(_QWORD *)(v82 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
          (*(void (**)(char *, uint64_t))(v83 + 8))(v81, v82);
        swift_bridgeObjectRelease();
      }
      v84 = &v79[*(int *)(v80 + 20)];
      if (v73(v84, 1, v72))
        goto LABEL_181;
      if (*((_QWORD *)v84 + 7) != 1)
        swift_bridgeObjectRelease();
      v133 = &v84[*(int *)(v72 + 28)];
      v134 = sub_224F67874();
      v135 = *(_QWORD *)(v134 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v133, 1, v134))
        (*(void (**)(char *, uint64_t))(v135 + 8))(v133, v134);
      goto LABEL_180;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v85 = (int *)type metadata accessor for ModelsR4.Immunization(0);
      v86 = (char *)a1 + v85[10];
      v87 = type metadata accessor for FHIRDateTime();
      v88 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 48);
      if (!v88(v86, 1, v87))
      {
        if (*((_QWORD *)v86 + 7) != 1)
          swift_bridgeObjectRelease();
        v89 = &v86[*(int *)(v87 + 28)];
        v90 = sub_224F67874();
        v91 = *(_QWORD *)(v90 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
          (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v90);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v92 = (char *)a1 + v85[12];
      if (!v88(v92, 1, v87))
      {
        if (*((_QWORD *)v92 + 7) != 1)
          swift_bridgeObjectRelease();
        v93 = &v92[*(int *)(v87 + 28)];
        v94 = sub_224F67874();
        v95 = *(_QWORD *)(v94 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v93, 1, v94))
          (*(void (**)(char *, uint64_t))(v95 + 8))(v93, v94);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v96 = (char *)a1 + v85[14];
      v97 = type metadata accessor for Reference();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 48))(v96, 1, v97))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v98 = &v96[*(int *)(v97 + 24)];
        v99 = type metadata accessor for Identifier();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 48))(v98, 1, v99))
        {
          swift_bridgeObjectRelease();
          if (*((_QWORD *)v98 + 3) != 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v100 = &v98[*(int *)(v99 + 24)];
          v101 = sub_224F675D4();
          v102 = *(_QWORD *)(v101 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
            (*(void (**)(char *, uint64_t))(v102 + 8))(v100, v101);
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v103 = (_QWORD *)((char *)a1 + v85[19]);
      if (*v103 == 1)
        goto LABEL_181;
      swift_bridgeObjectRelease();
      if (v103[2] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_179;
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[4] != 1)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v104 = (int *)type metadata accessor for ModelsR4.Observation(0);
      v105 = (char *)a1 + v104[10];
      v106 = type metadata accessor for FHIRDateTime();
      v107 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 48);
      if (!v107(v105, 1, v106))
      {
        if (*((_QWORD *)v105 + 7) != 1)
          swift_bridgeObjectRelease();
        v108 = &v105[*(int *)(v106 + 28)];
        v109 = sub_224F67874();
        v110 = *(_QWORD *)(v109 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
          (*(void (**)(char *, uint64_t))(v110 + 8))(v108, v109);
        swift_bridgeObjectRelease();
      }
      v111 = (char *)a1 + v104[11];
      if (!v107(v111, 1, v106))
      {
        if (*((_QWORD *)v111 + 7) != 1)
          swift_bridgeObjectRelease();
        v112 = &v111[*(int *)(v106 + 28)];
        v113 = sub_224F67874();
        v114 = *(_QWORD *)(v113 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
          (*(void (**)(char *, uint64_t))(v114 + 8))(v112, v113);
        swift_bridgeObjectRelease();
      }
      v115 = (char *)a1 + v104[12];
      v116 = type metadata accessor for Period();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 48))(v115, 1, v116))
      {
        if (!v107(v115, 1, v106))
        {
          if (*((_QWORD *)v115 + 7) != 1)
            swift_bridgeObjectRelease();
          v117 = &v115[*(int *)(v106 + 28)];
          v118 = sub_224F67874();
          v119 = *(_QWORD *)(v118 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
            (*(void (**)(char *, uint64_t))(v119 + 8))(v117, v118);
          swift_bridgeObjectRelease();
        }
        v120 = &v115[*(int *)(v116 + 20)];
        if (!v107(v120, 1, v106))
        {
          if (*((_QWORD *)v120 + 7) != 1)
            swift_bridgeObjectRelease();
          v121 = &v120[*(int *)(v106 + 28)];
          v122 = sub_224F67874();
          v123 = *(_QWORD *)(v122 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
            (*(void (**)(char *, uint64_t))(v123 + 8))(v121, v122);
          swift_bridgeObjectRelease();
        }
      }
      v124 = (char *)a1 + v104[13];
      if (!v107(v124, 1, v106))
      {
        if (*((_QWORD *)v124 + 7) != 1)
          swift_bridgeObjectRelease();
        v125 = &v124[*(int *)(v106 + 28)];
        v126 = sub_224F67874();
        v127 = *(_QWORD *)(v126 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v125, 1, v126))
          (*(void (**)(char *, uint64_t))(v127 + 8))(v125, v126);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)((char *)a1 + v104[17] + 8) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v128 = (char *)a1 + v104[18];
      v129 = type metadata accessor for Quantity();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 48))(v128, 1, v129))
        goto LABEL_180;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v130 = &v128[*(int *)(v129 + 28)];
      v131 = sub_224F675D4();
      v132 = *(_QWORD *)(v131 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
        (*(void (**)(char *, uint64_t))(v132 + 8))(v130, v131);
LABEL_179:
      swift_bridgeObjectRelease();
LABEL_180:
      swift_bridgeObjectRelease();
      goto LABEL_181;
    case 7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1[13] != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_184:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_181:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for ModelsR4.ResourceProxy()
{
  char *v0;

  v0 = (char *)sub_224E01560 + 4 * word_224F6B25C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_224E01560(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__dst, void *a14, void *__src, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = v33[3];
  v32[2] = v33[2];
  v32[3] = v35;
  v36 = v33[5];
  v32[4] = v33[4];
  v32[5] = v36;
  v37 = v33[6];
  v38 = v33[7];
  v32[6] = v37;
  v32[7] = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v32;
}

uint64_t assignWithCopy for ModelsR4.ResourceProxy(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_224DDEAA0(result, type metadata accessor for ModelsR4.ResourceProxy);
    v2 = (char *)&loc_224E04BB4 + 4 * word_224F6B26E[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

char *initializeWithTake for ModelsR4.ResourceProxy(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD, _QWORD, _QWORD);
  uint64_t v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __int128 v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  __int128 v43;
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unsigned int (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unsigned int (*v84)(_QWORD, _QWORD, _QWORD);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unsigned int (**v91)(_BYTE *, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unsigned int (**v98)(_QWORD *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (**v106)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  int *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unsigned int (**v155)(_OWORD *, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  _QWORD *v289;
  unsigned int (*v290)(char *, uint64_t, uint64_t);
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  unsigned int (**v297)(_OWORD *, uint64_t, uint64_t);
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  char *v310;
  char *v311;
  uint64_t v312;
  unsigned int (**v313)(_OWORD *, uint64_t, uint64_t);
  uint64_t v314;
  __int128 v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  int *v341;
  void *v342;
  char *v343;
  void (**v344)(char *, _QWORD, uint64_t, uint64_t);
  void (**v345)(void *, const void *, uint64_t);
  _QWORD *v346;
  char *v347;
  char *v348;
  void (**v349)(void *, void *, _QWORD);
  char *v350;
  char *v351;
  char *v352;
  void (**v353)(char *, _QWORD, uint64_t, uint64_t);
  void *__src;
  void (**__srca)(char *, _QWORD, uint64_t, uint64_t);
  void *__srcb;
  void (**__srcc)(char *, _QWORD, uint64_t, uint64_t);
  void *__srcd;
  void *__srce;
  char *__srcf;
  char *__srcg;
  void *__dst;
  void *__dsta;
  void *__dstb;
  _QWORD *__dstc;
  char *__dstd;
  void (**__dste)(void *, _QWORD, uint64_t, uint64_t);
  void *__dstf;
  void *__dstg;
  void *__dsth;
  _QWORD *__dsti;
  _QWORD *__dstj;
  _QWORD *v373;
  _QWORD *v374;
  unsigned int (*v375)(char *, uint64_t, uint64_t);
  _QWORD *v376;
  _QWORD *v377;
  void (**v378)(char *, _QWORD, uint64_t, uint64_t);
  char *v379;
  char *v380;
  int *v381;
  char *v382;
  char *v383;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      v7 = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      *((_QWORD *)a1 + 11) = v7;
      v8 = *((_OWORD *)a2 + 6);
      *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
      *((_OWORD *)a1 + 6) = v8;
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      v9 = *((_QWORD *)a2 + 18);
      *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
      *((_QWORD *)a1 + 18) = v9;
      v10 = (int *)type metadata accessor for ModelsR4.Condition(0);
      v11 = v10[13];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = type metadata accessor for FHIRDateTime();
      v373 = *(_QWORD **)(v14 - 8);
      v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v373[6];
      __dst = v15;
      if (v15(v13, 1, v14))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        *v12 = *v13;
        *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
        *((_DWORD *)v12 + 4) = *((_DWORD *)v13 + 4);
        *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
        *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
        *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
        v51 = *(int *)(v14 + 28);
        v52 = &v12[v51];
        v53 = &v13[v51];
        v54 = sub_224F67874();
        v55 = *(_QWORD *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v53, v54);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        *(_OWORD *)&v12[*(int *)(v14 + 32)] = *(_OWORD *)&v13[*(int *)(v14 + 32)];
        v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v373[7])(v12, 0, 1, v14);
      }
      v80 = v10[14];
      v81 = &a1[v80];
      v82 = &a2[v80];
      v83 = type metadata accessor for Period();
      v346 = *(_QWORD **)(v83 - 8);
      v84 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v346[6];
      __src = (void *)v83;
      if (v84(v82, 1, v83))
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        v340 = v84;
        if (v15(v82, 1, v14))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          *v81 = *v82;
          *((_QWORD *)v81 + 1) = *((_QWORD *)v82 + 1);
          *((_DWORD *)v81 + 4) = *((_DWORD *)v82 + 4);
          *(_OWORD *)(v81 + 24) = *(_OWORD *)(v82 + 24);
          *(_OWORD *)(v81 + 40) = *(_OWORD *)(v82 + 40);
          *((_QWORD *)v81 + 7) = *((_QWORD *)v82 + 7);
          v127 = *(int *)(v14 + 28);
          v128 = &v81[v127];
          v129 = &v82[v127];
          v130 = sub_224F67874();
          v131 = *(_QWORD *)(v130 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v128, v129, v130);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
          }
          *(_OWORD *)&v81[*(int *)(v14 + 32)] = *(_OWORD *)&v82[*(int *)(v14 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v373[7])(v81, 0, 1, v14);
          v83 = (uint64_t)__src;
          v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
        }
        v176 = *(int *)(v83 + 20);
        v177 = &v81[v176];
        v178 = &v82[v176];
        if (v15(&v82[v176], 1, v14))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
        }
        else
        {
          *v177 = *v178;
          *((_QWORD *)v177 + 1) = *((_QWORD *)v178 + 1);
          *((_DWORD *)v177 + 4) = *((_DWORD *)v178 + 4);
          *(_OWORD *)(v177 + 24) = *(_OWORD *)(v178 + 24);
          *(_OWORD *)(v177 + 40) = *(_OWORD *)(v178 + 40);
          *((_QWORD *)v177 + 7) = *((_QWORD *)v178 + 7);
          v180 = *(int *)(v14 + 28);
          v336 = &v177[v180];
          v181 = &v178[v180];
          v182 = sub_224F67874();
          v183 = *(_QWORD *)(v182 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48))(v181, 1, v182))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v336, v181, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v183 + 32))(v336, v181, v182);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v336, 0, 1, v182);
          }
          *(_OWORD *)&v177[*(int *)(v14 + 32)] = *(_OWORD *)&v178[*(int *)(v14 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v373[7])(v177, 0, 1, v14);
          v83 = (uint64_t)__src;
          v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
        }
        v84 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v340;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v346[7])(v81, 0, 1, v83);
      }
      *(_OWORD *)&a1[v10[15]] = *(_OWORD *)&a2[v10[15]];
      v211 = v10[16];
      v212 = &a1[v211];
      v213 = &a2[v211];
      if (v15(&a2[v211], 1, v14))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
      }
      else
      {
        v342 = v84;
        *v212 = *v213;
        *((_QWORD *)v212 + 1) = *((_QWORD *)v213 + 1);
        *((_DWORD *)v212 + 4) = *((_DWORD *)v213 + 4);
        *(_OWORD *)(v212 + 24) = *(_OWORD *)(v213 + 24);
        *(_OWORD *)(v212 + 40) = *(_OWORD *)(v213 + 40);
        *((_QWORD *)v212 + 7) = *((_QWORD *)v213 + 7);
        v215 = *(int *)(v14 + 28);
        v216 = &v212[v215];
        v217 = &v213[v215];
        v218 = sub_224F67874();
        v219 = *(_QWORD *)(v218 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v217, 1, v218))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v219 + 32))(v216, v217, v218);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v219 + 56))(v216, 0, 1, v218);
        }
        v83 = (uint64_t)__src;
        v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
        v84 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v342;
        *(_OWORD *)&v212[*(int *)(v14 + 32)] = *(_OWORD *)&v213[*(int *)(v14 + 32)];
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v373[7])(v212, 0, 1, v14);
      }
      v221 = v10[17];
      v222 = &a1[v221];
      v223 = &a2[v221];
      if (v84(&a2[v221], 1, v83))
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v222, v223, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
      }
      else
      {
        if (v15(v223, 1, v14))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v222, v223, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
        }
        else
        {
          *v222 = *v223;
          *((_QWORD *)v222 + 1) = *((_QWORD *)v223 + 1);
          *((_DWORD *)v222 + 4) = *((_DWORD *)v223 + 4);
          *(_OWORD *)(v222 + 24) = *(_OWORD *)(v223 + 24);
          *(_OWORD *)(v222 + 40) = *(_OWORD *)(v223 + 40);
          *((_QWORD *)v222 + 7) = *((_QWORD *)v223 + 7);
          v226 = *(int *)(v14 + 28);
          v227 = &v222[v226];
          v228 = &v223[v226];
          v229 = sub_224F67874();
          v230 = *(_QWORD *)(v229 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v230 + 48))(v228, 1, v229))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v227, v228, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v230 + 32))(v227, v228, v229);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v230 + 56))(v227, 0, 1, v229);
          }
          v83 = (uint64_t)__src;
          *(_OWORD *)&v222[*(int *)(v14 + 32)] = *(_OWORD *)&v223[*(int *)(v14 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v373[7])(v222, 0, 1, v14);
          v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
        }
        v266 = *(int *)(v83 + 20);
        v267 = &v222[v266];
        v268 = &v223[v266];
        if (v15(&v223[v266], 1, v14))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v267, v268, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
        }
        else
        {
          *v267 = *v268;
          *((_QWORD *)v267 + 1) = *((_QWORD *)v268 + 1);
          *((_DWORD *)v267 + 4) = *((_DWORD *)v268 + 4);
          *(_OWORD *)(v267 + 24) = *(_OWORD *)(v268 + 24);
          *(_OWORD *)(v267 + 40) = *(_OWORD *)(v268 + 40);
          *((_QWORD *)v267 + 7) = *((_QWORD *)v268 + 7);
          v270 = *(int *)(v14 + 28);
          v343 = &v267[v270];
          v271 = &v268[v270];
          v272 = sub_224F67874();
          v273 = *(_QWORD *)(v272 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v273 + 48))(v271, 1, v272))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v343, v271, *(_QWORD *)(*(_QWORD *)(v274 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v273 + 32))(v343, v271, v272);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v273 + 56))(v343, 0, 1, v272);
          }
          *(_OWORD *)&v267[*(int *)(v14 + 32)] = *(_OWORD *)&v268[*(int *)(v14 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v373[7])(v267, 0, 1, v14);
          v83 = (uint64_t)__src;
          v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v346[7])(v222, 0, 1, v83);
      }
      *(_OWORD *)&a1[v10[18]] = *(_OWORD *)&a2[v10[18]];
      v275 = v10[19];
      v276 = &a1[v275];
      v277 = &a2[v275];
      if (v15(&a2[v275], 1, v14))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v278 - 8) + 64));
      }
      else
      {
        *v276 = *v277;
        *((_QWORD *)v276 + 1) = *((_QWORD *)v277 + 1);
        *((_DWORD *)v276 + 4) = *((_DWORD *)v277 + 4);
        *(_OWORD *)(v276 + 24) = *(_OWORD *)(v277 + 24);
        *(_OWORD *)(v276 + 40) = *(_OWORD *)(v277 + 40);
        *((_QWORD *)v276 + 7) = *((_QWORD *)v277 + 7);
        v279 = *(int *)(v14 + 28);
        v280 = &v276[v279];
        v281 = &v277[v279];
        v282 = sub_224F67874();
        v283 = *(_QWORD *)(v282 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v283 + 48))(v281, 1, v282))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v280, v281, *(_QWORD *)(*(_QWORD *)(v284 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v283 + 32))(v280, v281, v282);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v283 + 56))(v280, 0, 1, v282);
        }
        *(_OWORD *)&v276[*(int *)(v14 + 32)] = *(_OWORD *)&v277[*(int *)(v14 + 32)];
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v373[7])(v276, 0, 1, v14);
      }
      v285 = v10[20];
      v286 = &a1[v285];
      v287 = &a2[v285];
      v288 = type metadata accessor for Reference();
      v289 = *(_QWORD **)(v288 - 8);
      v290 = (unsigned int (*)(char *, uint64_t, uint64_t))v289[6];
      if (v290(v287, 1, v288))
      {
        sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v286, v287, *(_QWORD *)(*(_QWORD *)(v291 - 8) + 64));
      }
      else
      {
        v381 = v10;
        v292 = *((_OWORD *)v287 + 1);
        *(_OWORD *)v286 = *(_OWORD *)v287;
        *((_OWORD *)v286 + 1) = v292;
        v293 = *(int *)(v288 + 24);
        v294 = &v286[v293];
        v295 = &v287[v293];
        v296 = type metadata accessor for Identifier();
        v297 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v296 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v297)[6](v295, 1, v296))
        {
          sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v294, v295, *(_QWORD *)(*(_QWORD *)(v298 - 8) + 64));
          v10 = v381;
        }
        else
        {
          v344 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v297;
          v299 = *((_OWORD *)v295 + 1);
          *(_OWORD *)v294 = *(_OWORD *)v295;
          *((_OWORD *)v294 + 1) = v299;
          *((_QWORD *)v294 + 4) = *((_QWORD *)v295 + 4);
          v300 = *(int *)(v296 + 24);
          __srcf = &v294[v300];
          __dsti = v289;
          v301 = &v295[v300];
          v302 = sub_224F675D4();
          v339 = *(_QWORD *)(v302 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v339 + 48))(v301, 1, v302))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__srcf, v301, *(_QWORD *)(*(_QWORD *)(v303 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v339 + 32))(__srcf, v301, v302);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v339 + 56))(__srcf, 0, 1, v302);
          }
          v289 = __dsti;
          v10 = v381;
          *(_OWORD *)&v294[*(int *)(v296 + 28)] = *(_OWORD *)&v295[*(int *)(v296 + 28)];
          v344[7](v294, 0, 1, v296);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v289[7])(v286, 0, 1, v288);
      }
      v304 = v10[21];
      v305 = &a1[v304];
      v306 = &a2[v304];
      if (v290(&a2[v304], 1, v288))
      {
        sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v305, v306, *(_QWORD *)(*(_QWORD *)(v307 - 8) + 64));
      }
      else
      {
        v308 = *((_OWORD *)v306 + 1);
        *(_OWORD *)v305 = *(_OWORD *)v306;
        *((_OWORD *)v305 + 1) = v308;
        v309 = *(int *)(v288 + 24);
        v310 = &v305[v309];
        v311 = &v306[v309];
        v312 = type metadata accessor for Identifier();
        v313 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v312 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v313)[6](v311, 1, v312))
        {
          sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v310, v311, *(_QWORD *)(*(_QWORD *)(v314 - 8) + 64));
        }
        else
        {
          v353 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v313;
          v315 = *((_OWORD *)v311 + 1);
          *(_OWORD *)v310 = *(_OWORD *)v311;
          *((_OWORD *)v310 + 1) = v315;
          *((_QWORD *)v310 + 4) = *((_QWORD *)v311 + 4);
          v316 = *(int *)(v312 + 24);
          __dstj = v289;
          v382 = &v310[v316];
          v317 = &v311[v316];
          v318 = sub_224F675D4();
          v345 = *(void (***)(void *, const void *, uint64_t))(v318 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v345[6])(v317, 1, v318))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v382, v317, *(_QWORD *)(*(_QWORD *)(v319 - 8) + 64));
          }
          else
          {
            v345[4](v382, v317, v318);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v345[7])(v382, 0, 1, v318);
          }
          v289 = __dstj;
          *(_OWORD *)&v310[*(int *)(v312 + 28)] = *(_OWORD *)&v311[*(int *)(v312 + 28)];
          v353[7](v310, 0, 1, v312);
        }
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v289[7])(v305, 0, 1, v288);
      }
      *(_QWORD *)&a1[v10[22]] = *(_QWORD *)&a2[v10[22]];
      *(_OWORD *)&a1[v10[23]] = *(_OWORD *)&a2[v10[23]];
      goto LABEL_185;
    case 3u:
      v17 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v17;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      v18 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
      v19 = v18[11];
      v20 = &a1[v19];
      v21 = &a2[v19];
      v22 = type metadata accessor for FHIRDateTime();
      v374 = *(_QWORD **)(v22 - 8);
      v23 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v374[6];
      if (v23(v21, 1, v22))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        __dstb = v23;
        *v20 = *v21;
        *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
        *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
        *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
        *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
        *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
        v57 = *(int *)(v22 + 28);
        v58 = &v20[v57];
        v59 = &v21[v57];
        v60 = sub_224F67874();
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
        }
        *(_OWORD *)&v20[*(int *)(v22 + 32)] = *(_OWORD *)&v21[*(int *)(v22 + 32)];
        v23 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstb;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v374[7])(v20, 0, 1, v22);
      }
      v87 = v18[12];
      v88 = &a1[v87];
      v89 = &a2[v87];
      v90 = type metadata accessor for Period();
      v91 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v90 - 8);
      if (v91[6](v89, 1, v90))
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
      }
      else
      {
        __srca = (void (**)(char *, _QWORD, uint64_t, uint64_t))v91;
        if (v23(v89, 1, v22))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
        }
        else
        {
          __dstf = v23;
          *v88 = *v89;
          *((_QWORD *)v88 + 1) = *((_QWORD *)v89 + 1);
          *((_DWORD *)v88 + 4) = *((_DWORD *)v89 + 4);
          *(_OWORD *)(v88 + 24) = *(_OWORD *)(v89 + 24);
          *(_OWORD *)(v88 + 40) = *(_OWORD *)(v89 + 40);
          *((_QWORD *)v88 + 7) = *((_QWORD *)v89 + 7);
          v133 = *(int *)(v22 + 28);
          v347 = &v88[v133];
          v134 = &v89[v133];
          v135 = sub_224F67874();
          v136 = *(_QWORD *)(v135 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v347, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v347, v134, v135);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v347, 0, 1, v135);
          }
          *(_OWORD *)&v88[*(int *)(v22 + 32)] = *(_OWORD *)&v89[*(int *)(v22 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v374[7])(v88, 0, 1, v22);
          v23 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstf;
        }
        v185 = *(int *)(v90 + 20);
        v186 = &v88[v185];
        v187 = &v89[v185];
        if (v23(&v89[v185], 1, v22))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
        }
        else
        {
          __dsth = v23;
          *v186 = *v187;
          *((_QWORD *)v186 + 1) = *((_QWORD *)v187 + 1);
          *((_DWORD *)v186 + 4) = *((_DWORD *)v187 + 4);
          *(_OWORD *)(v186 + 24) = *(_OWORD *)(v187 + 24);
          *(_OWORD *)(v186 + 40) = *(_OWORD *)(v187 + 40);
          *((_QWORD *)v186 + 7) = *((_QWORD *)v187 + 7);
          v189 = *(int *)(v22 + 28);
          v351 = &v186[v189];
          v190 = &v187[v189];
          v191 = sub_224F67874();
          v337 = *(_QWORD *)(v191 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v337 + 48))(v190, 1, v191))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v351, v190, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v337 + 32))(v351, v190, v191);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v337 + 56))(v351, 0, 1, v191);
          }
          *(_OWORD *)&v186[*(int *)(v22 + 32)] = *(_OWORD *)&v187[*(int *)(v22 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v374[7])(v186, 0, 1, v22);
          v23 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsth;
        }
        __srca[7](v88, 0, 1, v90);
      }
      v232 = v18[13];
      v233 = &a1[v232];
      v234 = &a2[v232];
      if (v23(&a2[v232], 1, v22))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
      }
      else
      {
        *v233 = *v234;
        *((_QWORD *)v233 + 1) = *((_QWORD *)v234 + 1);
        *((_DWORD *)v233 + 4) = *((_DWORD *)v234 + 4);
        *(_OWORD *)(v233 + 24) = *(_OWORD *)(v234 + 24);
        *(_OWORD *)(v233 + 40) = *(_OWORD *)(v234 + 40);
        *((_QWORD *)v233 + 7) = *((_QWORD *)v234 + 7);
        v236 = *(int *)(v22 + 28);
        v237 = &v233[v236];
        v238 = &v234[v236];
        v239 = sub_224F67874();
        v240 = *(_QWORD *)(v239 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v240 + 48))(v238, 1, v239))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v240 + 32))(v237, v238, v239);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v240 + 56))(v237, 0, 1, v239);
        }
        *(_OWORD *)&v233[*(int *)(v22 + 32)] = *(_OWORD *)&v234[*(int *)(v22 + 32)];
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v374[7])(v233, 0, 1, v22);
      }
      *(_QWORD *)&a1[v18[14]] = *(_QWORD *)&a2[v18[14]];
      *(_QWORD *)&a1[v18[15]] = *(_QWORD *)&a2[v18[15]];
      *(_OWORD *)&a1[v18[16]] = *(_OWORD *)&a2[v18[16]];
      goto LABEL_185;
    case 4u:
      v25 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v25;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v26 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 12) = v26;
      v27 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
      v28 = v27[11];
      v29 = &a1[v28];
      v30 = &a2[v28];
      v31 = type metadata accessor for FHIRDateTime();
      v32 = *(_QWORD **)(v31 - 8);
      v375 = (unsigned int (*)(char *, uint64_t, uint64_t))v32[6];
      if (v375(v30, 1, v31))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        __dstc = v32;
        *v29 = *v30;
        *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
        *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
        *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
        *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
        *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
        v63 = *(int *)(v31 + 28);
        v64 = &v29[v63];
        v65 = &v30[v63];
        v66 = sub_224F67874();
        v67 = *(_QWORD *)(v66 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v64, v65, v66);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
        }
        v32 = __dstc;
        *(_OWORD *)&v29[*(int *)(v31 + 32)] = *(_OWORD *)&v30[*(int *)(v31 + 32)];
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstc[7])(v29, 0, 1, v31);
      }
      *(_OWORD *)&a1[v27[12]] = *(_OWORD *)&a2[v27[12]];
      *(_QWORD *)&a1[v27[13]] = *(_QWORD *)&a2[v27[13]];
      *(_QWORD *)&a1[v27[14]] = *(_QWORD *)&a2[v27[14]];
      v94 = v27[15];
      v95 = &a1[v94];
      v96 = &a2[v94];
      v97 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
      v98 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v97 - 8);
      if (((unsigned int (**)(char *, uint64_t, uint64_t))v98)[6](v96, 1, v97))
      {
        sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      }
      else
      {
        __srcb = v98;
        __dste = (void (**)(void *, _QWORD, uint64_t, uint64_t))v32;
        *(_QWORD *)v95 = *(_QWORD *)v96;
        v100 = *(int *)(v97 + 20);
        v101 = &v95[v100];
        v102 = &v96[v100];
        v103 = type metadata accessor for Period();
        v104 = *(_QWORD *)(v103 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
          v106 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__srcb;
        }
        else
        {
          v335 = v104;
          v341 = (int *)v103;
          v348 = v101;
          if (v375(v102, 1, v31))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v139 = v101;
            memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
            v140 = v341;
            v106 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__srcb;
          }
          else
          {
            *v101 = *v102;
            *((_QWORD *)v101 + 1) = *((_QWORD *)v102 + 1);
            *((_DWORD *)v101 + 4) = *((_DWORD *)v102 + 4);
            *(_OWORD *)(v101 + 24) = *(_OWORD *)(v102 + 24);
            *(_OWORD *)(v101 + 40) = *(_OWORD *)(v102 + 40);
            *((_QWORD *)v101 + 7) = *((_QWORD *)v102 + 7);
            v193 = *(int *)(v31 + 28);
            v333 = &v101[v193];
            v194 = &v102[v193];
            v195 = sub_224F67874();
            v331 = *(_QWORD *)(v195 - 8);
            v332 = v194;
            v196 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v331 + 48))(v194, 1, v195);
            v140 = v341;
            v106 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__srcb;
            if (v196)
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v333, v332, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v331 + 32))(v333, v332, v195);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v331 + 56))(v333, 0, 1, v195);
            }
            v139 = v348;
            *(_OWORD *)&v348[*(int *)(v31 + 32)] = *(_OWORD *)&v102[*(int *)(v31 + 32)];
            __dste[7](v348, 0, 1, v31);
          }
          v320 = v140[5];
          v321 = &v139[v320];
          v322 = &v102[v320];
          if (v375(v322, 1, v31))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v321, v322, *(_QWORD *)(*(_QWORD *)(v323 - 8) + 64));
          }
          else
          {
            *v321 = *v322;
            *((_QWORD *)v321 + 1) = *((_QWORD *)v322 + 1);
            *((_DWORD *)v321 + 4) = *((_DWORD *)v322 + 4);
            *(_OWORD *)(v321 + 24) = *(_OWORD *)(v322 + 24);
            *(_OWORD *)(v321 + 40) = *(_OWORD *)(v322 + 40);
            *((_QWORD *)v321 + 7) = *((_QWORD *)v322 + 7);
            v324 = *(int *)(v31 + 28);
            v383 = &v321[v324];
            v325 = &v322[v324];
            v326 = sub_224F67874();
            v334 = *(_QWORD *)(v326 - 8);
            __srcg = v325;
            v327 = v325;
            v328 = v326;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v334 + 48))(v327, 1, v326))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v383, __srcg, *(_QWORD *)(*(_QWORD *)(v329 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v334 + 32))(v383, __srcg, v328);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v334 + 56))(v383, 0, 1, v328);
            }
            *(_OWORD *)&v321[*(int *)(v31 + 32)] = *(_OWORD *)&v322[*(int *)(v31 + 32)];
            __dste[7](v321, 0, 1, v31);
            v140 = v341;
          }
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v335 + 56))(v348, 0, 1, v140);
        }
        ((void (**)(char *, _QWORD, uint64_t, uint64_t))v106)[7](v95, 0, 1, v97);
      }
      *(_OWORD *)&a1[v27[16]] = *(_OWORD *)&a2[v27[16]];
      goto LABEL_185;
    case 5u:
      v34 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v34;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
      *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      v35 = (int *)type metadata accessor for ModelsR4.Immunization(0);
      v36 = v35[10];
      v37 = &a1[v36];
      v38 = &a2[v36];
      v39 = type metadata accessor for FHIRDateTime();
      v40 = *(_QWORD **)(v39 - 8);
      v41 = (unsigned int (*)(char *, uint64_t, uint64_t))v40[6];
      if (v41(v38, 1, v39))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        *v37 = *v38;
        *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
        *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
        *(_OWORD *)(v37 + 40) = *(_OWORD *)(v38 + 40);
        *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
        v69 = *(int *)(v39 + 28);
        __dstd = &v37[v69];
        v377 = v40;
        v70 = &v38[v69];
        v71 = sub_224F67874();
        v72 = *(_QWORD *)(v71 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dstd, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v72 + 32))(__dstd, v70, v71);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dstd, 0, 1, v71);
        }
        v40 = v377;
        *(_OWORD *)&v37[*(int *)(v39 + 32)] = *(_OWORD *)&v38[*(int *)(v39 + 32)];
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v377[7])(v37, 0, 1, v39);
      }
      *(_QWORD *)&a1[v35[11]] = *(_QWORD *)&a2[v35[11]];
      v107 = v35[12];
      v108 = &a1[v107];
      v109 = &a2[v107];
      if (v41(&a2[v107], 1, v39))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
      }
      else
      {
        v378 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v40;
        *v108 = *v109;
        *((_QWORD *)v108 + 1) = *((_QWORD *)v109 + 1);
        *((_DWORD *)v108 + 4) = *((_DWORD *)v109 + 4);
        *(_OWORD *)(v108 + 24) = *(_OWORD *)(v109 + 24);
        *(_OWORD *)(v108 + 40) = *(_OWORD *)(v109 + 40);
        *((_QWORD *)v108 + 7) = *((_QWORD *)v109 + 7);
        v111 = *(int *)(v39 + 28);
        v112 = &v108[v111];
        v113 = &v109[v111];
        v114 = sub_224F67874();
        v115 = *(_QWORD *)(v114 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v112, v113, v114);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
        }
        *(_OWORD *)&v108[*(int *)(v39 + 32)] = *(_OWORD *)&v109[*(int *)(v39 + 32)];
        v378[7](v108, 0, 1, v39);
      }
      v141 = v35[13];
      v142 = &a1[v141];
      v143 = &a2[v141];
      *(_OWORD *)v142 = *(_OWORD *)v143;
      *((_QWORD *)v142 + 2) = *((_QWORD *)v143 + 2);
      v144 = v35[14];
      v145 = &a1[v144];
      v146 = &a2[v144];
      v147 = type metadata accessor for Reference();
      v148 = *(_QWORD *)(v147 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
      {
        sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
      }
      else
      {
        v150 = *((_OWORD *)v146 + 1);
        *(_OWORD *)v145 = *(_OWORD *)v146;
        *((_OWORD *)v145 + 1) = v150;
        v151 = *(int *)(v147 + 24);
        v152 = &v145[v151];
        v153 = &v146[v151];
        v154 = type metadata accessor for Identifier();
        v155 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v154 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v155)[6](v153, 1, v154))
        {
          sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
        }
        else
        {
          __srcc = (void (**)(char *, _QWORD, uint64_t, uint64_t))v155;
          v164 = *((_OWORD *)v153 + 1);
          *(_OWORD *)v152 = *(_OWORD *)v153;
          *((_OWORD *)v152 + 1) = v164;
          *((_QWORD *)v152 + 4) = *((_QWORD *)v153 + 4);
          v165 = *(int *)(v154 + 24);
          v379 = &v152[v165];
          v166 = &v153[v165];
          v167 = sub_224F675D4();
          v349 = *(void (***)(void *, void *, _QWORD))(v167 - 8);
          __dstg = v166;
          v168 = v166;
          v169 = v167;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v349[6])(v168, 1, v167))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v379, __dstg, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
          }
          else
          {
            v349[4](v379, __dstg, v169);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v349[7])(v379, 0, 1, v169);
          }
          *(_OWORD *)&v152[*(int *)(v154 + 28)] = *(_OWORD *)&v153[*(int *)(v154 + 28)];
          __srcc[7](v152, 0, 1, v154);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
      }
      a1[v35[15]] = a2[v35[15]];
      *(_OWORD *)&a1[v35[16]] = *(_OWORD *)&a2[v35[16]];
      *(_QWORD *)&a1[v35[17]] = *(_QWORD *)&a2[v35[17]];
      a1[v35[18]] = a2[v35[18]];
      v198 = v35[19];
      v199 = &a1[v198];
      v200 = &a2[v198];
      *((_QWORD *)v199 + 6) = *((_QWORD *)v200 + 6);
      v201 = *((_OWORD *)v200 + 2);
      v202 = *(_OWORD *)v200;
      *((_OWORD *)v199 + 1) = *((_OWORD *)v200 + 1);
      *((_OWORD *)v199 + 2) = v201;
      *(_OWORD *)v199 = v202;
      *(_OWORD *)&a1[v35[20]] = *(_OWORD *)&a2[v35[20]];
      goto LABEL_185;
    case 6u:
      v43 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v43;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      v44 = (int *)type metadata accessor for ModelsR4.Observation(0);
      v45 = v44[10];
      v46 = &a1[v45];
      v47 = &a2[v45];
      v48 = type metadata accessor for FHIRDateTime();
      v376 = *(_QWORD **)(v48 - 8);
      v49 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v376[6];
      __dsta = v49;
      if (v49(v47, 1, v48))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        *v46 = *v47;
        *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
        *((_DWORD *)v46 + 4) = *((_DWORD *)v47 + 4);
        *(_OWORD *)(v46 + 24) = *(_OWORD *)(v47 + 24);
        *(_OWORD *)(v46 + 40) = *(_OWORD *)(v47 + 40);
        *((_QWORD *)v46 + 7) = *((_QWORD *)v47 + 7);
        v74 = *(int *)(v48 + 28);
        v75 = &v46[v74];
        v76 = &v47[v74];
        v77 = sub_224F67874();
        v78 = *(_QWORD *)(v77 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v75, v76, v77);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        *(_OWORD *)&v46[*(int *)(v48 + 32)] = *(_OWORD *)&v47[*(int *)(v48 + 32)];
        v49 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v46, 0, 1, v48);
      }
      v117 = v44[11];
      v118 = &a1[v117];
      v119 = &a2[v117];
      if (v49(&a2[v117], 1, v48))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
      }
      else
      {
        *v118 = *v119;
        *((_QWORD *)v118 + 1) = *((_QWORD *)v119 + 1);
        *((_DWORD *)v118 + 4) = *((_DWORD *)v119 + 4);
        *(_OWORD *)(v118 + 24) = *(_OWORD *)(v119 + 24);
        *(_OWORD *)(v118 + 40) = *(_OWORD *)(v119 + 40);
        *((_QWORD *)v118 + 7) = *((_QWORD *)v119 + 7);
        v121 = *(int *)(v48 + 28);
        v122 = &v118[v121];
        v123 = &v119[v121];
        v124 = sub_224F67874();
        v125 = *(_QWORD *)(v124 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v122, v123, v124);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
        }
        *(_OWORD *)&v118[*(int *)(v48 + 32)] = *(_OWORD *)&v119[*(int *)(v48 + 32)];
        v49 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v118, 0, 1, v48);
      }
      v157 = v44[12];
      v158 = &a1[v157];
      v159 = &a2[v157];
      v160 = type metadata accessor for Period();
      v161 = *(void **)(v160 - 8);
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v161 + 6))(v159, 1, v160))
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
      }
      else
      {
        if (v49(v159, 1, v48))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
        }
        else
        {
          *v158 = *v159;
          *((_QWORD *)v158 + 1) = *((_QWORD *)v159 + 1);
          *((_DWORD *)v158 + 4) = *((_DWORD *)v159 + 4);
          *(_OWORD *)(v158 + 24) = *(_OWORD *)(v159 + 24);
          *(_OWORD *)(v158 + 40) = *(_OWORD *)(v159 + 40);
          *((_QWORD *)v158 + 7) = *((_QWORD *)v159 + 7);
          v171 = *(int *)(v48 + 28);
          v350 = &v158[v171];
          __srcd = v161;
          v172 = &v159[v171];
          v173 = sub_224F67874();
          v174 = *(_QWORD *)(v173 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v172, 1, v173))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v350, v172, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v174 + 32))(v350, v172, v173);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v174 + 56))(v350, 0, 1, v173);
          }
          *(_OWORD *)&v158[*(int *)(v48 + 32)] = *(_OWORD *)&v159[*(int *)(v48 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v158, 0, 1, v48);
          v161 = __srcd;
          v49 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta;
        }
        v203 = *(int *)(v160 + 20);
        v204 = &v158[v203];
        v205 = &v159[v203];
        if (v49(v205, 1, v48))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
        }
        else
        {
          *v204 = *v205;
          *((_QWORD *)v204 + 1) = *((_QWORD *)v205 + 1);
          *((_DWORD *)v204 + 4) = *((_DWORD *)v205 + 4);
          *(_OWORD *)(v204 + 24) = *(_OWORD *)(v205 + 24);
          *(_OWORD *)(v204 + 40) = *(_OWORD *)(v205 + 40);
          *((_QWORD *)v204 + 7) = *((_QWORD *)v205 + 7);
          v207 = *(int *)(v48 + 28);
          v352 = &v204[v207];
          __srce = v161;
          v208 = &v205[v207];
          v209 = sub_224F67874();
          v338 = *(_QWORD *)(v209 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v338 + 48))(v208, 1, v209))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v352, v208, *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v338 + 32))(v352, v208, v209);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v338 + 56))(v352, 0, 1, v209);
          }
          v161 = __srce;
          *(_OWORD *)&v204[*(int *)(v48 + 32)] = *(_OWORD *)&v205[*(int *)(v48 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v204, 0, 1, v48);
          v49 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta;
        }
        (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v161 + 7))(v158, 0, 1, v160);
      }
      v242 = v44[13];
      v243 = &a1[v242];
      v244 = &a2[v242];
      if (v49(&a2[v242], 1, v48))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v243, v244, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
      }
      else
      {
        *v243 = *v244;
        *((_QWORD *)v243 + 1) = *((_QWORD *)v244 + 1);
        *((_DWORD *)v243 + 4) = *((_DWORD *)v244 + 4);
        *(_OWORD *)(v243 + 24) = *(_OWORD *)(v244 + 24);
        *(_OWORD *)(v243 + 40) = *(_OWORD *)(v244 + 40);
        *((_QWORD *)v243 + 7) = *((_QWORD *)v244 + 7);
        v246 = *(int *)(v48 + 28);
        v247 = &v243[v246];
        v248 = &v244[v246];
        v249 = sub_224F67874();
        v250 = *(_QWORD *)(v249 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v250 + 48))(v248, 1, v249))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v250 + 32))(v247, v248, v249);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v250 + 56))(v247, 0, 1, v249);
        }
        *(_OWORD *)&v243[*(int *)(v48 + 32)] = *(_OWORD *)&v244[*(int *)(v48 + 32)];
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v243, 0, 1, v48);
      }
      *(_QWORD *)&a1[v44[14]] = *(_QWORD *)&a2[v44[14]];
      *(_QWORD *)&a1[v44[15]] = *(_QWORD *)&a2[v44[15]];
      *(_OWORD *)&a1[v44[16]] = *(_OWORD *)&a2[v44[16]];
      v252 = v44[17];
      v253 = &a1[v252];
      v254 = &a2[v252];
      *((_QWORD *)v253 + 2) = *((_QWORD *)v254 + 2);
      *(_OWORD *)v253 = *(_OWORD *)v254;
      v255 = v44[18];
      v256 = &a1[v255];
      v257 = &a2[v255];
      v258 = type metadata accessor for Quantity();
      v259 = *(_QWORD *)(v258 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v259 + 48))(v257, 1, v258))
      {
        sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v256, v257, *(_QWORD *)(*(_QWORD *)(v260 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v256 = *(_OWORD *)v257;
        *(_QWORD *)(v256 + 13) = *(_QWORD *)(v257 + 13);
        *(_OWORD *)(v256 + 24) = *(_OWORD *)(v257 + 24);
        *(_OWORD *)(v256 + 40) = *(_OWORD *)(v257 + 40);
        v261 = *(int *)(v258 + 28);
        v380 = &v256[v261];
        v262 = &v257[v261];
        v263 = sub_224F675D4();
        v264 = *(_QWORD *)(v263 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v264 + 48))(v262, 1, v263))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v380, v262, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v264 + 32))(v380, v262, v263);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v380, 0, 1, v263);
        }
        *(_OWORD *)&v256[*(int *)(v258 + 32)] = *(_OWORD *)&v257[*(int *)(v258 + 32)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v259 + 56))(v256, 0, 1, v258);
      }
      *(_QWORD *)&a1[v44[19]] = *(_QWORD *)&a2[v44[19]];
      *(_OWORD *)&a1[v44[20]] = *(_OWORD *)&a2[v44[20]];
LABEL_185:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for ModelsR4.ResourceProxy(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD, _QWORD, _QWORD);
  uint64_t v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int (*v24)(_QWORD, _QWORD, _QWORD);
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  __int128 v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unsigned int (*v50)(_QWORD, _QWORD, _QWORD);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unsigned int (*v85)(_QWORD, _QWORD, _QWORD);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unsigned int (**v92)(_BYTE *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unsigned int (**v99)(_QWORD *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (**v107)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  int *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  unsigned int (**v155)(_OWORD *, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  _QWORD *v288;
  unsigned int (*v289)(char *, uint64_t, uint64_t);
  uint64_t v290;
  __int128 v291;
  uint64_t v292;
  char *v293;
  char *v294;
  uint64_t v295;
  unsigned int (**v296)(_OWORD *, uint64_t, uint64_t);
  uint64_t v297;
  __int128 v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  unsigned int (**v312)(_OWORD *, uint64_t, uint64_t);
  uint64_t v313;
  __int128 v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v330;
  char *v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  void (**v340)(void *, const void *, uint64_t);
  int *v341;
  void (**v342)(void *, const void *, uint64_t);
  void *v343;
  void *v344;
  char *v345;
  void (**v346)(void *, const void *, uint64_t);
  _QWORD *__src;
  char *__srca;
  void (**__srcb)(void *, void *, _QWORD);
  char *__srcc;
  char *__srcd;
  void (**__srce)(char *, _QWORD, uint64_t, uint64_t);
  void *v353;
  void (**v354)(char *, _QWORD, uint64_t, uint64_t);
  void *v355;
  void *v356;
  void *v357;
  void *v358;
  char *v359;
  void (**v360)(char *, _QWORD, uint64_t, uint64_t);
  char *v361;
  void *__dst;
  void *__dsta;
  _QWORD *__dstb;
  char *__dstc;
  void *__dstd;
  void (**__dste)(void *, _QWORD, uint64_t, uint64_t);
  void *__dstf;
  void *__dstg;
  void (**__dsth)(char *, _QWORD, uint64_t, uint64_t);
  char *__dsti;
  void *__dstj;
  void *__dstk;
  _QWORD *__dstl;
  _QWORD *__dstm;
  _QWORD *v376;
  unsigned int (*v377)(char *, uint64_t, uint64_t);
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  void (**v381)(char *, _QWORD, uint64_t, uint64_t);
  char *v382;
  char *v383;
  _QWORD *v384;
  void (**v385)(char *, _QWORD, uint64_t, uint64_t);
  char *v386;
  int *v387;
  char *v388;
  char *v389;

  if (a1 != a2)
  {
    sub_224DDEAA0((uint64_t)a1, type metadata accessor for ModelsR4.ResourceProxy);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        v6 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v6;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        v7 = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *((_QWORD *)a1 + 11) = v7;
        v8 = *((_OWORD *)a2 + 6);
        *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
        *((_OWORD *)a1 + 6) = v8;
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        v9 = *((_QWORD *)a2 + 18);
        *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
        *((_QWORD *)a1 + 18) = v9;
        v10 = (int *)type metadata accessor for ModelsR4.Condition(0);
        v11 = v10[13];
        v12 = &a1[v11];
        v13 = &a2[v11];
        v14 = type metadata accessor for FHIRDateTime();
        v376 = *(_QWORD **)(v14 - 8);
        v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v376[6];
        __dst = v15;
        if (v15(v13, 1, v14))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          *v12 = *v13;
          *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
          *((_DWORD *)v12 + 4) = *((_DWORD *)v13 + 4);
          *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
          *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
          v52 = *(int *)(v14 + 28);
          v53 = &v12[v52];
          v54 = &v13[v52];
          v55 = sub_224F67874();
          v56 = *(_QWORD *)(v55 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v53, v54, v55);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
          }
          *(_OWORD *)&v12[*(int *)(v14 + 32)] = *(_OWORD *)&v13[*(int *)(v14 + 32)];
          v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v12, 0, 1, v14);
        }
        v81 = v10[14];
        v82 = &a1[v81];
        v83 = &a2[v81];
        v84 = type metadata accessor for Period();
        __src = *(_QWORD **)(v84 - 8);
        v85 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__src[6];
        v353 = (void *)v84;
        if (v85(v83, 1, v84))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        }
        else
        {
          if (v15(v83, 1, v14))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
          }
          else
          {
            v339 = v85;
            *v82 = *v83;
            *((_QWORD *)v82 + 1) = *((_QWORD *)v83 + 1);
            *((_DWORD *)v82 + 4) = *((_DWORD *)v83 + 4);
            *(_OWORD *)(v82 + 24) = *(_OWORD *)(v83 + 24);
            *(_OWORD *)(v82 + 40) = *(_OWORD *)(v83 + 40);
            *((_QWORD *)v82 + 7) = *((_QWORD *)v83 + 7);
            v128 = *(int *)(v14 + 28);
            v129 = &v82[v128];
            v130 = &v83[v128];
            v131 = sub_224F67874();
            v132 = *(_QWORD *)(v131 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v129, v130, v131);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
            }
            *(_OWORD *)&v82[*(int *)(v14 + 32)] = *(_OWORD *)&v83[*(int *)(v14 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v82, 0, 1, v14);
            v84 = (uint64_t)v353;
            v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
            v85 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v339;
          }
          v175 = *(int *)(v84 + 20);
          v176 = &v82[v175];
          v177 = &v83[v175];
          if (v15(v177, 1, v14))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v176, v177, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
          }
          else
          {
            *v176 = *v177;
            *((_QWORD *)v176 + 1) = *((_QWORD *)v177 + 1);
            *((_DWORD *)v176 + 4) = *((_DWORD *)v177 + 4);
            *(_OWORD *)(v176 + 24) = *(_OWORD *)(v177 + 24);
            *(_OWORD *)(v176 + 40) = *(_OWORD *)(v177 + 40);
            *((_QWORD *)v176 + 7) = *((_QWORD *)v177 + 7);
            v179 = *(int *)(v14 + 28);
            v335 = &v176[v179];
            v343 = v85;
            v180 = &v177[v179];
            v181 = sub_224F67874();
            v182 = *(_QWORD *)(v181 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v180, 1, v181))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v335, v180, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v335, v180, v181);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v335, 0, 1, v181);
            }
            v85 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v343;
            *(_OWORD *)&v176[*(int *)(v14 + 32)] = *(_OWORD *)&v177[*(int *)(v14 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v176, 0, 1, v14);
            v84 = (uint64_t)v353;
            v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v82, 0, 1, v84);
        }
        *(_OWORD *)&a1[v10[15]] = *(_OWORD *)&a2[v10[15]];
        v210 = v10[16];
        v211 = &a1[v210];
        v212 = &a2[v210];
        if (v15(&a2[v210], 1, v14))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
        }
        else
        {
          v344 = v85;
          *v211 = *v212;
          *((_QWORD *)v211 + 1) = *((_QWORD *)v212 + 1);
          *((_DWORD *)v211 + 4) = *((_DWORD *)v212 + 4);
          *(_OWORD *)(v211 + 24) = *(_OWORD *)(v212 + 24);
          *(_OWORD *)(v211 + 40) = *(_OWORD *)(v212 + 40);
          *((_QWORD *)v211 + 7) = *((_QWORD *)v212 + 7);
          v214 = *(int *)(v14 + 28);
          v215 = &v211[v214];
          v216 = &v212[v214];
          v217 = sub_224F67874();
          v218 = *(_QWORD *)(v217 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48))(v216, 1, v217))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v219 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v218 + 32))(v215, v216, v217);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v218 + 56))(v215, 0, 1, v217);
          }
          v84 = (uint64_t)v353;
          v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
          v85 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v344;
          *(_OWORD *)&v211[*(int *)(v14 + 32)] = *(_OWORD *)&v212[*(int *)(v14 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v211, 0, 1, v14);
        }
        v220 = v10[17];
        v221 = &a1[v220];
        v222 = &a2[v220];
        if (v85(&a2[v220], 1, v84))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v223 - 8) + 64));
        }
        else
        {
          if (v15(v222, 1, v14))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
          }
          else
          {
            *v221 = *v222;
            *((_QWORD *)v221 + 1) = *((_QWORD *)v222 + 1);
            *((_DWORD *)v221 + 4) = *((_DWORD *)v222 + 4);
            *(_OWORD *)(v221 + 24) = *(_OWORD *)(v222 + 24);
            *(_OWORD *)(v221 + 40) = *(_OWORD *)(v222 + 40);
            *((_QWORD *)v221 + 7) = *((_QWORD *)v222 + 7);
            v225 = *(int *)(v14 + 28);
            v226 = &v221[v225];
            v227 = &v222[v225];
            v228 = sub_224F67874();
            v229 = *(_QWORD *)(v228 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v229 + 48))(v227, 1, v228))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v226, v227, *(_QWORD *)(*(_QWORD *)(v230 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v229 + 32))(v226, v227, v228);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v229 + 56))(v226, 0, 1, v228);
            }
            v84 = (uint64_t)v353;
            *(_OWORD *)&v221[*(int *)(v14 + 32)] = *(_OWORD *)&v222[*(int *)(v14 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v221, 0, 1, v14);
            v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
          }
          v265 = *(int *)(v84 + 20);
          v266 = &v221[v265];
          v267 = &v222[v265];
          if (v15(v267, 1, v14))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v266, v267, *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64));
          }
          else
          {
            *v266 = *v267;
            *((_QWORD *)v266 + 1) = *((_QWORD *)v267 + 1);
            *((_DWORD *)v266 + 4) = *((_DWORD *)v267 + 4);
            *(_OWORD *)(v266 + 24) = *(_OWORD *)(v267 + 24);
            *(_OWORD *)(v266 + 40) = *(_OWORD *)(v267 + 40);
            *((_QWORD *)v266 + 7) = *((_QWORD *)v267 + 7);
            v269 = *(int *)(v14 + 28);
            v345 = &v266[v269];
            v270 = &v267[v269];
            v271 = sub_224F67874();
            v272 = *(_QWORD *)(v271 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v270, 1, v271))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v345, v270, *(_QWORD *)(*(_QWORD *)(v273 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v272 + 32))(v345, v270, v271);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v272 + 56))(v345, 0, 1, v271);
            }
            *(_OWORD *)&v266[*(int *)(v14 + 32)] = *(_OWORD *)&v267[*(int *)(v14 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v266, 0, 1, v14);
            v84 = (uint64_t)v353;
            v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v221, 0, 1, v84);
        }
        *(_OWORD *)&a1[v10[18]] = *(_OWORD *)&a2[v10[18]];
        v274 = v10[19];
        v275 = &a1[v274];
        v276 = &a2[v274];
        if (v15(&a2[v274], 1, v14))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v275, v276, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
        }
        else
        {
          *v275 = *v276;
          *((_QWORD *)v275 + 1) = *((_QWORD *)v276 + 1);
          *((_DWORD *)v275 + 4) = *((_DWORD *)v276 + 4);
          *(_OWORD *)(v275 + 24) = *(_OWORD *)(v276 + 24);
          *(_OWORD *)(v275 + 40) = *(_OWORD *)(v276 + 40);
          *((_QWORD *)v275 + 7) = *((_QWORD *)v276 + 7);
          v278 = *(int *)(v14 + 28);
          v279 = &v275[v278];
          v280 = &v276[v278];
          v281 = sub_224F67874();
          v282 = *(_QWORD *)(v281 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v282 + 48))(v280, 1, v281))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v279, v280, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v279, v280, v281);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v282 + 56))(v279, 0, 1, v281);
          }
          *(_OWORD *)&v275[*(int *)(v14 + 32)] = *(_OWORD *)&v276[*(int *)(v14 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v376[7])(v275, 0, 1, v14);
        }
        v284 = v10[20];
        v285 = &a1[v284];
        v286 = &a2[v284];
        v287 = type metadata accessor for Reference();
        v288 = *(_QWORD **)(v287 - 8);
        v289 = (unsigned int (*)(char *, uint64_t, uint64_t))v288[6];
        if (v289(v286, 1, v287))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v285, v286, *(_QWORD *)(*(_QWORD *)(v290 - 8) + 64));
        }
        else
        {
          v387 = v10;
          v291 = *((_OWORD *)v286 + 1);
          *(_OWORD *)v285 = *(_OWORD *)v286;
          *((_OWORD *)v285 + 1) = v291;
          v292 = *(int *)(v287 + 24);
          v293 = &v285[v292];
          v294 = &v286[v292];
          v295 = type metadata accessor for Identifier();
          v296 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v295 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v296)[6](v294, 1, v295))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v293, v294, *(_QWORD *)(*(_QWORD *)(v297 - 8) + 64));
            v10 = v387;
          }
          else
          {
            __dstl = v288;
            v298 = *((_OWORD *)v294 + 1);
            *(_OWORD *)v293 = *(_OWORD *)v294;
            *((_OWORD *)v293 + 1) = v298;
            *((_QWORD *)v293 + 4) = *((_QWORD *)v294 + 4);
            v299 = *(int *)(v295 + 24);
            __srce = (void (**)(char *, _QWORD, uint64_t, uint64_t))v296;
            v359 = &v293[v299];
            v300 = &v294[v299];
            v301 = sub_224F675D4();
            v338 = *(_QWORD *)(v301 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v338 + 48))(v300, 1, v301))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v359, v300, *(_QWORD *)(*(_QWORD *)(v302 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v338 + 32))(v359, v300, v301);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v338 + 56))(v359, 0, 1, v301);
            }
            v288 = __dstl;
            v10 = v387;
            *(_OWORD *)&v293[*(int *)(v295 + 28)] = *(_OWORD *)&v294[*(int *)(v295 + 28)];
            __srce[7](v293, 0, 1, v295);
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v288[7])(v285, 0, 1, v287);
        }
        v303 = v10[21];
        v304 = &a1[v303];
        v305 = &a2[v303];
        if (v289(&a2[v303], 1, v287))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v304, v305, *(_QWORD *)(*(_QWORD *)(v306 - 8) + 64));
        }
        else
        {
          v307 = *((_OWORD *)v305 + 1);
          *(_OWORD *)v304 = *(_OWORD *)v305;
          *((_OWORD *)v304 + 1) = v307;
          v308 = *(int *)(v287 + 24);
          v309 = &v304[v308];
          v310 = &v305[v308];
          v311 = type metadata accessor for Identifier();
          v312 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v311 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v312)[6](v310, 1, v311))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v309, v310, *(_QWORD *)(*(_QWORD *)(v313 - 8) + 64));
          }
          else
          {
            v360 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v312;
            __dstm = v288;
            v314 = *((_OWORD *)v310 + 1);
            *(_OWORD *)v309 = *(_OWORD *)v310;
            *((_OWORD *)v309 + 1) = v314;
            *((_QWORD *)v309 + 4) = *((_QWORD *)v310 + 4);
            v315 = *(int *)(v311 + 24);
            v388 = &v309[v315];
            v316 = &v310[v315];
            v317 = sub_224F675D4();
            v346 = *(void (***)(void *, const void *, uint64_t))(v317 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v346[6])(v316, 1, v317))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v388, v316, *(_QWORD *)(*(_QWORD *)(v318 - 8) + 64));
            }
            else
            {
              v346[4](v388, v316, v317);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v346[7])(v388, 0, 1, v317);
            }
            *(_OWORD *)&v309[*(int *)(v311 + 28)] = *(_OWORD *)&v310[*(int *)(v311 + 28)];
            v288 = __dstm;
            v360[7](v309, 0, 1, v311);
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v288[7])(v304, 0, 1, v287);
        }
        *(_QWORD *)&a1[v10[22]] = *(_QWORD *)&a2[v10[22]];
        *(_OWORD *)&a1[v10[23]] = *(_OWORD *)&a2[v10[23]];
        goto LABEL_186;
      case 3u:
        v17 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v17;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        v18 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
        v19 = v18[11];
        v20 = &a1[v19];
        v21 = &a2[v19];
        v22 = type metadata accessor for FHIRDateTime();
        v23 = *(_QWORD **)(v22 - 8);
        v24 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v23[6];
        if (v24(v21, 1, v22))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          __dsta = v24;
          v379 = v23;
          *v20 = *v21;
          *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
          *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
          *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
          *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
          *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
          v58 = *(int *)(v22 + 28);
          v59 = &v20[v58];
          v60 = &v21[v58];
          v61 = sub_224F67874();
          v62 = *(_QWORD *)(v61 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
          }
          v24 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta;
          v23 = v379;
          *(_OWORD *)&v20[*(int *)(v22 + 32)] = *(_OWORD *)&v21[*(int *)(v22 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v379[7])(v20, 0, 1, v22);
        }
        v88 = v18[12];
        v89 = &a1[v88];
        v90 = &a2[v88];
        v91 = type metadata accessor for Period();
        v92 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v91 - 8);
        if (v92[6](v90, 1, v91))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
        }
        else
        {
          v354 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v92;
          if (v24(v90, 1, v22))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
          }
          else
          {
            *v89 = *v90;
            *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
            *((_DWORD *)v89 + 4) = *((_DWORD *)v90 + 4);
            *(_OWORD *)(v89 + 24) = *(_OWORD *)(v90 + 24);
            *(_OWORD *)(v89 + 40) = *(_OWORD *)(v90 + 40);
            *((_QWORD *)v89 + 7) = *((_QWORD *)v90 + 7);
            v134 = *(int *)(v22 + 28);
            __dstg = v24;
            v382 = &v89[v134];
            v135 = &v90[v134];
            v136 = sub_224F67874();
            v340 = *(void (***)(void *, const void *, uint64_t))(v136 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v340[6])(v135, 1, v136))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v382, v135, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
            }
            else
            {
              v340[4](v382, v135, v136);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v340[7])(v382, 0, 1, v136);
            }
            *(_OWORD *)&v89[*(int *)(v22 + 32)] = *(_OWORD *)&v90[*(int *)(v22 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v23[7])(v89, 0, 1, v22);
            v24 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstg;
          }
          v184 = *(int *)(v91 + 20);
          v185 = &v89[v184];
          v186 = &v90[v184];
          if (v24(v186, 1, v22))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
          }
          else
          {
            __dstj = v24;
            v384 = v23;
            *v185 = *v186;
            *((_QWORD *)v185 + 1) = *((_QWORD *)v186 + 1);
            *((_DWORD *)v185 + 4) = *((_DWORD *)v186 + 4);
            *(_OWORD *)(v185 + 24) = *(_OWORD *)(v186 + 24);
            *(_OWORD *)(v185 + 40) = *(_OWORD *)(v186 + 40);
            *((_QWORD *)v185 + 7) = *((_QWORD *)v186 + 7);
            v188 = *(int *)(v22 + 28);
            __srcc = &v185[v188];
            v189 = &v186[v188];
            v190 = sub_224F67874();
            v336 = *(_QWORD *)(v190 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v336 + 48))(v189, 1, v190))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__srcc, v189, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v336 + 32))(__srcc, v189, v190);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(__srcc, 0, 1, v190);
            }
            *(_OWORD *)&v185[*(int *)(v22 + 32)] = *(_OWORD *)&v186[*(int *)(v22 + 32)];
            v23 = v384;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v384[7])(v185, 0, 1, v22);
            v24 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstj;
          }
          v354[7](v89, 0, 1, v91);
        }
        v231 = v18[13];
        v232 = &a1[v231];
        v233 = &a2[v231];
        if (v24(&a2[v231], 1, v22))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v232, v233, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
        }
        else
        {
          v385 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v23;
          *v232 = *v233;
          *((_QWORD *)v232 + 1) = *((_QWORD *)v233 + 1);
          *((_DWORD *)v232 + 4) = *((_DWORD *)v233 + 4);
          *(_OWORD *)(v232 + 24) = *(_OWORD *)(v233 + 24);
          *(_OWORD *)(v232 + 40) = *(_OWORD *)(v233 + 40);
          *((_QWORD *)v232 + 7) = *((_QWORD *)v233 + 7);
          v235 = *(int *)(v22 + 28);
          v236 = &v232[v235];
          v237 = &v233[v235];
          v238 = sub_224F67874();
          v239 = *(_QWORD *)(v238 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48))(v237, 1, v238))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v240 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v239 + 32))(v236, v237, v238);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v236, 0, 1, v238);
          }
          *(_OWORD *)&v232[*(int *)(v22 + 32)] = *(_OWORD *)&v233[*(int *)(v22 + 32)];
          v385[7](v232, 0, 1, v22);
        }
        *(_QWORD *)&a1[v18[14]] = *(_QWORD *)&a2[v18[14]];
        *(_QWORD *)&a1[v18[15]] = *(_QWORD *)&a2[v18[15]];
        *(_OWORD *)&a1[v18[16]] = *(_OWORD *)&a2[v18[16]];
        goto LABEL_186;
      case 4u:
        v26 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v26;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        v27 = *((_QWORD *)a2 + 12);
        *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
        *((_QWORD *)a1 + 12) = v27;
        v28 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
        v29 = v28[11];
        v30 = &a1[v29];
        v31 = &a2[v29];
        v32 = type metadata accessor for FHIRDateTime();
        v33 = *(_QWORD **)(v32 - 8);
        v377 = (unsigned int (*)(char *, uint64_t, uint64_t))v33[6];
        if (v377(v31, 1, v32))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        else
        {
          __dstb = v33;
          *v30 = *v31;
          *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
          *((_DWORD *)v30 + 4) = *((_DWORD *)v31 + 4);
          *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
          *(_OWORD *)(v30 + 40) = *(_OWORD *)(v31 + 40);
          *((_QWORD *)v30 + 7) = *((_QWORD *)v31 + 7);
          v64 = *(int *)(v32 + 28);
          v65 = &v30[v64];
          v66 = &v31[v64];
          v67 = sub_224F67874();
          v68 = *(_QWORD *)(v67 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v65, v66, v67);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
          }
          v33 = __dstb;
          *(_OWORD *)&v30[*(int *)(v32 + 32)] = *(_OWORD *)&v31[*(int *)(v32 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v30, 0, 1, v32);
        }
        *(_OWORD *)&a1[v28[12]] = *(_OWORD *)&a2[v28[12]];
        *(_QWORD *)&a1[v28[13]] = *(_QWORD *)&a2[v28[13]];
        *(_QWORD *)&a1[v28[14]] = *(_QWORD *)&a2[v28[14]];
        v95 = v28[15];
        v96 = &a1[v95];
        v97 = &a2[v95];
        v98 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        v99 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v98 - 8);
        if (((unsigned int (**)(char *, uint64_t, uint64_t))v99)[6](v97, 1, v98))
        {
          sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
        }
        else
        {
          v355 = v99;
          __dste = (void (**)(void *, _QWORD, uint64_t, uint64_t))v33;
          *(_QWORD *)v96 = *(_QWORD *)v97;
          v101 = *(int *)(v98 + 20);
          v102 = &v96[v101];
          v103 = &v97[v101];
          v104 = type metadata accessor for Period();
          v105 = *(_QWORD *)(v104 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
            v107 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v355;
          }
          else
          {
            v334 = v105;
            v341 = (int *)v104;
            __srca = v102;
            if (v377(v103, 1, v32))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              v139 = v102;
              memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
              v140 = v341;
              v107 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v355;
            }
            else
            {
              *v102 = *v103;
              *((_QWORD *)v102 + 1) = *((_QWORD *)v103 + 1);
              *((_DWORD *)v102 + 4) = *((_DWORD *)v103 + 4);
              *(_OWORD *)(v102 + 24) = *(_OWORD *)(v103 + 24);
              *(_OWORD *)(v102 + 40) = *(_OWORD *)(v103 + 40);
              *((_QWORD *)v102 + 7) = *((_QWORD *)v103 + 7);
              v192 = *(int *)(v32 + 28);
              v332 = &v102[v192];
              v193 = &v103[v192];
              v194 = sub_224F67874();
              v330 = *(_QWORD *)(v194 - 8);
              v331 = v193;
              v195 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v330 + 48))(v193, 1, v194);
              v140 = v341;
              v107 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v355;
              if (v195)
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v332, v331, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v330 + 32))(v332, v331, v194);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v330 + 56))(v332, 0, 1, v194);
              }
              v139 = __srca;
              *(_OWORD *)&__srca[*(int *)(v32 + 32)] = *(_OWORD *)&v103[*(int *)(v32 + 32)];
              __dste[7](__srca, 0, 1, v32);
            }
            v319 = v140[5];
            v320 = &v139[v319];
            v321 = &v103[v319];
            if (v377(v321, 1, v32))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v320, v321, *(_QWORD *)(*(_QWORD *)(v322 - 8) + 64));
            }
            else
            {
              *v320 = *v321;
              *((_QWORD *)v320 + 1) = *((_QWORD *)v321 + 1);
              *((_DWORD *)v320 + 4) = *((_DWORD *)v321 + 4);
              *(_OWORD *)(v320 + 24) = *(_OWORD *)(v321 + 24);
              *(_OWORD *)(v320 + 40) = *(_OWORD *)(v321 + 40);
              *((_QWORD *)v320 + 7) = *((_QWORD *)v321 + 7);
              v323 = *(int *)(v32 + 28);
              v389 = &v320[v323];
              v324 = &v321[v323];
              v325 = sub_224F67874();
              v333 = *(_QWORD *)(v325 - 8);
              v361 = v324;
              v326 = v324;
              v327 = v325;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v333 + 48))(v326, 1, v325))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v389, v361, *(_QWORD *)(*(_QWORD *)(v328 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v333 + 32))(v389, v361, v327);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v333 + 56))(v389, 0, 1, v327);
              }
              *(_OWORD *)&v320[*(int *)(v32 + 32)] = *(_OWORD *)&v321[*(int *)(v32 + 32)];
              __dste[7](v320, 0, 1, v32);
              v140 = v341;
            }
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v334 + 56))(__srca, 0, 1, v140);
          }
          ((void (**)(char *, _QWORD, uint64_t, uint64_t))v107)[7](v96, 0, 1, v98);
        }
        *(_OWORD *)&a1[v28[16]] = *(_OWORD *)&a2[v28[16]];
        goto LABEL_186;
      case 5u:
        v35 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v35;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        v36 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        v37 = v36[10];
        v38 = &a1[v37];
        v39 = &a2[v37];
        v40 = type metadata accessor for FHIRDateTime();
        v41 = *(_QWORD **)(v40 - 8);
        v42 = (unsigned int (*)(char *, uint64_t, uint64_t))v41[6];
        if (v42(v39, 1, v40))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          *v38 = *v39;
          *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
          *((_DWORD *)v38 + 4) = *((_DWORD *)v39 + 4);
          *(_OWORD *)(v38 + 24) = *(_OWORD *)(v39 + 24);
          *(_OWORD *)(v38 + 40) = *(_OWORD *)(v39 + 40);
          *((_QWORD *)v38 + 7) = *((_QWORD *)v39 + 7);
          v70 = *(int *)(v40 + 28);
          __dstc = &v38[v70];
          v380 = v41;
          v71 = &v39[v70];
          v72 = sub_224F67874();
          v73 = *(_QWORD *)(v72 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dstc, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v73 + 32))(__dstc, v71, v72);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(__dstc, 0, 1, v72);
          }
          v41 = v380;
          *(_OWORD *)&v38[*(int *)(v40 + 32)] = *(_OWORD *)&v39[*(int *)(v40 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v380[7])(v38, 0, 1, v40);
        }
        *(_QWORD *)&a1[v36[11]] = *(_QWORD *)&a2[v36[11]];
        v108 = v36[12];
        v109 = &a1[v108];
        v110 = &a2[v108];
        if (v42(&a2[v108], 1, v40))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
        }
        else
        {
          v381 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v41;
          *v109 = *v110;
          *((_QWORD *)v109 + 1) = *((_QWORD *)v110 + 1);
          *((_DWORD *)v109 + 4) = *((_DWORD *)v110 + 4);
          *(_OWORD *)(v109 + 24) = *(_OWORD *)(v110 + 24);
          *(_OWORD *)(v109 + 40) = *(_OWORD *)(v110 + 40);
          *((_QWORD *)v109 + 7) = *((_QWORD *)v110 + 7);
          v112 = *(int *)(v40 + 28);
          v113 = &v109[v112];
          v114 = &v110[v112];
          v115 = sub_224F67874();
          v116 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v113, v114, v115);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
          }
          *(_OWORD *)&v109[*(int *)(v40 + 32)] = *(_OWORD *)&v110[*(int *)(v40 + 32)];
          v381[7](v109, 0, 1, v40);
        }
        v141 = v36[13];
        v142 = &a1[v141];
        v143 = &a2[v141];
        *(_OWORD *)v142 = *(_OWORD *)v143;
        *((_QWORD *)v142 + 2) = *((_QWORD *)v143 + 2);
        v144 = v36[14];
        v145 = &a1[v144];
        v146 = &a2[v144];
        v147 = type metadata accessor for Reference();
        v148 = *(_QWORD *)(v147 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
        }
        else
        {
          v150 = *((_OWORD *)v146 + 1);
          *(_OWORD *)v145 = *(_OWORD *)v146;
          *((_OWORD *)v145 + 1) = v150;
          v151 = *(int *)(v147 + 24);
          v152 = &v145[v151];
          v153 = &v146[v151];
          v154 = type metadata accessor for Identifier();
          v155 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v154 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v155)[6](v153, 1, v154))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
          }
          else
          {
            v164 = *((_OWORD *)v153 + 1);
            *(_OWORD *)v152 = *(_OWORD *)v153;
            *((_OWORD *)v152 + 1) = v164;
            *((_QWORD *)v152 + 4) = *((_QWORD *)v153 + 4);
            v165 = *(int *)(v154 + 24);
            __dsth = (void (**)(char *, _QWORD, uint64_t, uint64_t))v155;
            v383 = &v152[v165];
            v166 = &v153[v165];
            v167 = sub_224F675D4();
            __srcb = *(void (***)(void *, void *, _QWORD))(v167 - 8);
            v356 = v166;
            v168 = v166;
            v169 = v167;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))__srcb[6])(v168, 1, v167))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v383, v356, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
            }
            else
            {
              __srcb[4](v383, v356, v169);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcb[7])(v383, 0, 1, v169);
            }
            *(_OWORD *)&v152[*(int *)(v154 + 28)] = *(_OWORD *)&v153[*(int *)(v154 + 28)];
            __dsth[7](v152, 0, 1, v154);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
        }
        a1[v36[15]] = a2[v36[15]];
        *(_OWORD *)&a1[v36[16]] = *(_OWORD *)&a2[v36[16]];
        *(_QWORD *)&a1[v36[17]] = *(_QWORD *)&a2[v36[17]];
        a1[v36[18]] = a2[v36[18]];
        v197 = v36[19];
        v198 = &a1[v197];
        v199 = &a2[v197];
        *((_QWORD *)v198 + 6) = *((_QWORD *)v199 + 6);
        v200 = *((_OWORD *)v199 + 2);
        v201 = *(_OWORD *)v199;
        *((_OWORD *)v198 + 1) = *((_OWORD *)v199 + 1);
        *((_OWORD *)v198 + 2) = v200;
        *(_OWORD *)v198 = v201;
        *(_OWORD *)&a1[v36[20]] = *(_OWORD *)&a2[v36[20]];
        goto LABEL_186;
      case 6u:
        v44 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v44;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        v45 = (int *)type metadata accessor for ModelsR4.Observation(0);
        v46 = v45[10];
        v47 = &a1[v46];
        v48 = &a2[v46];
        v49 = type metadata accessor for FHIRDateTime();
        v378 = *(_QWORD **)(v49 - 8);
        v50 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v378[6];
        if (v50(v48, 1, v49))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        }
        else
        {
          __dstd = v50;
          *v47 = *v48;
          *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
          *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
          *(_OWORD *)(v47 + 24) = *(_OWORD *)(v48 + 24);
          *(_OWORD *)(v47 + 40) = *(_OWORD *)(v48 + 40);
          *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
          v75 = *(int *)(v49 + 28);
          v76 = &v47[v75];
          v77 = &v48[v75];
          v78 = sub_224F67874();
          v79 = *(_QWORD *)(v78 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v76, v77, v78);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
          }
          *(_OWORD *)&v47[*(int *)(v49 + 32)] = *(_OWORD *)&v48[*(int *)(v49 + 32)];
          v50 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstd;
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v378[7])(v47, 0, 1, v49);
        }
        v118 = v45[11];
        v119 = &a1[v118];
        v120 = &a2[v118];
        if (v50(&a2[v118], 1, v49))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
        }
        else
        {
          __dstf = v50;
          *v119 = *v120;
          *((_QWORD *)v119 + 1) = *((_QWORD *)v120 + 1);
          *((_DWORD *)v119 + 4) = *((_DWORD *)v120 + 4);
          *(_OWORD *)(v119 + 24) = *(_OWORD *)(v120 + 24);
          *(_OWORD *)(v119 + 40) = *(_OWORD *)(v120 + 40);
          *((_QWORD *)v119 + 7) = *((_QWORD *)v120 + 7);
          v122 = *(int *)(v49 + 28);
          v123 = &v119[v122];
          v124 = &v120[v122];
          v125 = sub_224F67874();
          v126 = *(_QWORD *)(v125 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v124, 1, v125))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v123, v124, v125);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
          }
          *(_OWORD *)&v119[*(int *)(v49 + 32)] = *(_OWORD *)&v120[*(int *)(v49 + 32)];
          v50 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstf;
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v378[7])(v119, 0, 1, v49);
        }
        v157 = v45[12];
        v158 = &a1[v157];
        v159 = &a2[v157];
        v160 = type metadata accessor for Period();
        v161 = *(void **)(v160 - 8);
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v161 + 6))(v159, 1, v160))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
        }
        else
        {
          if (v50(v159, 1, v49))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
          }
          else
          {
            *v158 = *v159;
            *((_QWORD *)v158 + 1) = *((_QWORD *)v159 + 1);
            *((_DWORD *)v158 + 4) = *((_DWORD *)v159 + 4);
            *(_OWORD *)(v158 + 24) = *(_OWORD *)(v159 + 24);
            *(_OWORD *)(v158 + 40) = *(_OWORD *)(v159 + 40);
            *((_QWORD *)v158 + 7) = *((_QWORD *)v159 + 7);
            v171 = *(int *)(v49 + 28);
            v357 = v161;
            __dsti = &v158[v171];
            v172 = &v159[v171];
            v173 = sub_224F67874();
            v342 = *(void (***)(void *, const void *, uint64_t))(v173 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v342[6])(v172, 1, v173))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dsti, v172, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
            }
            else
            {
              v342[4](__dsti, v172, v173);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v342[7])(__dsti, 0, 1, v173);
            }
            *(_OWORD *)&v158[*(int *)(v49 + 32)] = *(_OWORD *)&v159[*(int *)(v49 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v378[7])(v158, 0, 1, v49);
            v161 = v357;
          }
          v202 = *(int *)(v160 + 20);
          v203 = &v158[v202];
          v204 = &v159[v202];
          if (v50(v204, 1, v49))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
          }
          else
          {
            v358 = v161;
            __dstk = v50;
            *v203 = *v204;
            *((_QWORD *)v203 + 1) = *((_QWORD *)v204 + 1);
            *((_DWORD *)v203 + 4) = *((_DWORD *)v204 + 4);
            *(_OWORD *)(v203 + 24) = *(_OWORD *)(v204 + 24);
            *(_OWORD *)(v203 + 40) = *(_OWORD *)(v204 + 40);
            *((_QWORD *)v203 + 7) = *((_QWORD *)v204 + 7);
            v206 = *(int *)(v49 + 28);
            __srcd = &v203[v206];
            v207 = &v204[v206];
            v208 = sub_224F67874();
            v337 = *(_QWORD *)(v208 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v337 + 48))(v207, 1, v208))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__srcd, v207, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v337 + 32))(__srcd, v207, v208);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v337 + 56))(__srcd, 0, 1, v208);
            }
            v161 = v358;
            *(_OWORD *)&v203[*(int *)(v49 + 32)] = *(_OWORD *)&v204[*(int *)(v49 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v378[7])(v203, 0, 1, v49);
            v50 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstk;
          }
          (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v161 + 7))(v158, 0, 1, v160);
        }
        v241 = v45[13];
        v242 = &a1[v241];
        v243 = &a2[v241];
        if (v50(&a2[v241], 1, v49))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
        }
        else
        {
          *v242 = *v243;
          *((_QWORD *)v242 + 1) = *((_QWORD *)v243 + 1);
          *((_DWORD *)v242 + 4) = *((_DWORD *)v243 + 4);
          *(_OWORD *)(v242 + 24) = *(_OWORD *)(v243 + 24);
          *(_OWORD *)(v242 + 40) = *(_OWORD *)(v243 + 40);
          *((_QWORD *)v242 + 7) = *((_QWORD *)v243 + 7);
          v245 = *(int *)(v49 + 28);
          v246 = &v242[v245];
          v247 = &v243[v245];
          v248 = sub_224F67874();
          v249 = *(_QWORD *)(v248 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v249 + 48))(v247, 1, v248))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v246, v247, *(_QWORD *)(*(_QWORD *)(v250 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v249 + 32))(v246, v247, v248);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v249 + 56))(v246, 0, 1, v248);
          }
          *(_OWORD *)&v242[*(int *)(v49 + 32)] = *(_OWORD *)&v243[*(int *)(v49 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v378[7])(v242, 0, 1, v49);
        }
        *(_QWORD *)&a1[v45[14]] = *(_QWORD *)&a2[v45[14]];
        *(_QWORD *)&a1[v45[15]] = *(_QWORD *)&a2[v45[15]];
        *(_OWORD *)&a1[v45[16]] = *(_OWORD *)&a2[v45[16]];
        v251 = v45[17];
        v252 = &a1[v251];
        v253 = &a2[v251];
        *((_QWORD *)v252 + 2) = *((_QWORD *)v253 + 2);
        *(_OWORD *)v252 = *(_OWORD *)v253;
        v254 = v45[18];
        v255 = &a1[v254];
        v256 = &a2[v254];
        v257 = type metadata accessor for Quantity();
        v258 = *(_QWORD *)(v257 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v258 + 48))(v256, 1, v257))
        {
          sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v255, v256, *(_QWORD *)(*(_QWORD *)(v259 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v255 = *(_OWORD *)v256;
          *(_QWORD *)(v255 + 13) = *(_QWORD *)(v256 + 13);
          *(_OWORD *)(v255 + 24) = *(_OWORD *)(v256 + 24);
          *(_OWORD *)(v255 + 40) = *(_OWORD *)(v256 + 40);
          v260 = *(int *)(v257 + 28);
          v386 = &v255[v260];
          v261 = &v256[v260];
          v262 = sub_224F675D4();
          v263 = *(_QWORD *)(v262 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48))(v261, 1, v262))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v386, v261, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v386, v261, v262);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v263 + 56))(v386, 0, 1, v262);
          }
          *(_OWORD *)&v255[*(int *)(v257 + 32)] = *(_OWORD *)&v256[*(int *)(v257 + 32)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v258 + 56))(v255, 0, 1, v257);
        }
        *(_QWORD *)&a1[v45[19]] = *(_QWORD *)&a2[v45[19]];
        *(_OWORD *)&a1[v45[20]] = *(_OWORD *)&a2[v45[20]];
LABEL_186:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.ResourceProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ModelsR4.ResourceProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_224E0D8FC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_224E0D90C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = type metadata accessor for ModelsR4.Condition(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ModelsR4.DiagnosticReport(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for ModelsR4.DocumentReference(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for ModelsR4.Immunization(319);
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for ModelsR4.Observation(319);
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t destroy for ModelsR4.Binary()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsR4.Binary(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.Binary(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for ModelsR4.Binary(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Binary(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Binary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Binary()
{
  return &type metadata for ModelsR4.Binary;
}

uint64_t destroy for ModelsR4.Bundle()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsR4.Bundle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.Bundle(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ModelsR4.Bundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Bundle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Bundle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Bundle()
{
  return &type metadata for ModelsR4.Bundle;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.Bundle.BundleEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ModelsR4.ResourceProxy(0);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
    swift_bridgeObjectRetain();
    if (!v12(v10, 1, v11))
    {
      v15 = (char *)&loc_224E0DF84 + 4 * word_224F6B28A[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    v16 = *(int *)(a3 + 24);
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    v20 = v18[1];
    sub_224DDE970(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
  }
  return v4;
}

uint64_t destroy for ModelsR4.Bundle.BundleEntry(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD, _QWORD, _QWORD);
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  char *v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  int *v83;
  char *v84;
  uint64_t v85;
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  int *v102;
  char *v103;
  uint64_t v104;
  unsigned int (*v105)(char *, uint64_t, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int (*v136)(char *, uint64_t, uint64_t);
  unsigned int (*v137)(char *, uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int (*v142)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v143)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v144)(_QWORD, _QWORD, _QWORD);

  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = type metadata accessor for ModelsR4.ResourceProxy(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_182;
      case 1u:
      case 8u:
        goto LABEL_186;
      case 2u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1)
          swift_bridgeObjectRelease();
        if (v4[6] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (v4[9] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        if (v4[13] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (v4[16] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v6 = (int *)type metadata accessor for ModelsR4.Condition(0);
        v7 = (char *)v4 + v6[13];
        v8 = type metadata accessor for FHIRDateTime();
        v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
        if (!v9(v7, 1, v8))
        {
          if (*((_QWORD *)v7 + 7) != 1)
            swift_bridgeObjectRelease();
          v10 = &v7[*(int *)(v8 + 28)];
          v11 = sub_224F67874();
          v12 = *(_QWORD *)(v11 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
            (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
          swift_bridgeObjectRelease();
        }
        v13 = (char *)v4 + v6[14];
        v14 = type metadata accessor for Period();
        v15 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v14 - 8) + 48);
        if (!v15(v13, 1, v14))
        {
          if (!v9(v13, 1, v8))
          {
            v142 = v15;
            if (*((_QWORD *)v13 + 7) != 1)
              swift_bridgeObjectRelease();
            v16 = &v13[*(int *)(v8 + 28)];
            v17 = sub_224F67874();
            v134 = *(_QWORD *)(v17 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v16, 1, v17))
              (*(void (**)(char *, uint64_t))(v134 + 8))(v16, v17);
            swift_bridgeObjectRelease();
            v15 = v142;
          }
          v18 = &v13[*(int *)(v14 + 20)];
          if (!v9(v18, 1, v8))
          {
            v143 = v15;
            if (*((_QWORD *)v18 + 7) != 1)
              swift_bridgeObjectRelease();
            v19 = &v18[*(int *)(v8 + 28)];
            v20 = sub_224F67874();
            v135 = *(_QWORD *)(v20 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v19, 1, v20))
              (*(void (**)(char *, uint64_t))(v135 + 8))(v19, v20);
            swift_bridgeObjectRelease();
            v15 = v143;
          }
        }
        swift_bridgeObjectRelease();
        v21 = (char *)v4 + v6[16];
        if (!v9(v21, 1, v8))
        {
          v136 = v9;
          v144 = v15;
          if (*((_QWORD *)v21 + 7) != 1)
            swift_bridgeObjectRelease();
          v22 = &v21[*(int *)(v8 + 28)];
          v23 = sub_224F67874();
          v24 = *(_QWORD *)(v23 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
            (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
          swift_bridgeObjectRelease();
          v9 = v136;
          v15 = v144;
        }
        v25 = (char *)v4 + v6[17];
        if (!v15(v25, 1, v14))
        {
          if (!v9(v25, 1, v8))
          {
            v137 = v9;
            if (*((_QWORD *)v25 + 7) != 1)
              swift_bridgeObjectRelease();
            v26 = &v25[*(int *)(v8 + 28)];
            v27 = sub_224F67874();
            v28 = *(_QWORD *)(v27 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
              (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
            swift_bridgeObjectRelease();
            v9 = v137;
          }
          v29 = &v25[*(int *)(v14 + 20)];
          if (!v9(v29, 1, v8))
          {
            if (*((_QWORD *)v29 + 7) != 1)
              swift_bridgeObjectRelease();
            v30 = &v29[*(int *)(v8 + 28)];
            v31 = sub_224F67874();
            v32 = *(_QWORD *)(v31 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
              (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        v33 = (char *)v4 + v6[19];
        if (!v9(v33, 1, v8))
        {
          if (*((_QWORD *)v33 + 7) != 1)
            swift_bridgeObjectRelease();
          v34 = &v33[*(int *)(v8 + 28)];
          v35 = sub_224F67874();
          v36 = *(_QWORD *)(v35 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
            (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
          swift_bridgeObjectRelease();
        }
        v37 = (char *)v4 + v6[20];
        v38 = type metadata accessor for Reference();
        v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48);
        if (!v39(v37, 1, v38))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v40 = &v37[*(int *)(v38 + 24)];
          v41 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41))
          {
            swift_bridgeObjectRelease();
            if (*((_QWORD *)v40 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v42 = &v40[*(int *)(v41 + 24)];
            v43 = sub_224F675D4();
            v138 = *(_QWORD *)(v43 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v42, 1, v43))
              (*(void (**)(char *, uint64_t))(v138 + 8))(v42, v43);
            swift_bridgeObjectRelease();
          }
        }
        v44 = (char *)v4 + v6[21];
        if (!v39(v44, 1, v38))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v45 = &v44[*(int *)(v38 + 24)];
          v46 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46))
          {
            swift_bridgeObjectRelease();
            if (*((_QWORD *)v45 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v47 = &v45[*(int *)(v46 + 24)];
            v48 = sub_224F675D4();
            v49 = *(_QWORD *)(v48 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
              (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v48);
            swift_bridgeObjectRelease();
          }
        }
        goto LABEL_181;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v50 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
        v51 = (char *)v4 + v50[11];
        v52 = type metadata accessor for FHIRDateTime();
        v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48);
        if (!v53(v51, 1, v52))
        {
          if (*((_QWORD *)v51 + 7) != 1)
            swift_bridgeObjectRelease();
          v54 = &v51[*(int *)(v52 + 28)];
          v55 = sub_224F67874();
          v56 = *(_QWORD *)(v55 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
            (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v55);
          swift_bridgeObjectRelease();
        }
        v57 = (char *)v4 + v50[12];
        v58 = type metadata accessor for Period();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v57, 1, v58))
        {
          if (!v53(v57, 1, v52))
          {
            if (*((_QWORD *)v57 + 7) != 1)
              swift_bridgeObjectRelease();
            v59 = &v57[*(int *)(v52 + 28)];
            v60 = sub_224F67874();
            v139 = *(_QWORD *)(v60 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v59, 1, v60))
              (*(void (**)(char *, uint64_t))(v139 + 8))(v59, v60);
            swift_bridgeObjectRelease();
          }
          v61 = &v57[*(int *)(v58 + 20)];
          if (!v53(v61, 1, v52))
          {
            if (*((_QWORD *)v61 + 7) != 1)
              swift_bridgeObjectRelease();
            v62 = &v61[*(int *)(v52 + 28)];
            v63 = sub_224F67874();
            v64 = *(_QWORD *)(v63 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
              (*(void (**)(char *, uint64_t))(v64 + 8))(v62, v63);
            swift_bridgeObjectRelease();
          }
        }
        v65 = (char *)v4 + v50[13];
        if (!v53(v65, 1, v52))
        {
          if (*((_QWORD *)v65 + 7) != 1)
            swift_bridgeObjectRelease();
          v66 = &v65[*(int *)(v52 + 28)];
          v67 = sub_224F67874();
          v68 = *(_QWORD *)(v67 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
            (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
          swift_bridgeObjectRelease();
        }
        goto LABEL_180;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1)
          swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v69 = type metadata accessor for ModelsR4.DocumentReference(0);
        v70 = (char *)v4 + *(int *)(v69 + 44);
        v71 = type metadata accessor for FHIRDateTime();
        v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48);
        if (!v72(v70, 1, v71))
        {
          if (*((_QWORD *)v70 + 7) != 1)
            swift_bridgeObjectRelease();
          v73 = &v70[*(int *)(v71 + 28)];
          v74 = sub_224F67874();
          v75 = *(_QWORD *)(v74 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
            (*(void (**)(char *, uint64_t))(v75 + 8))(v73, v74);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v76 = (char *)v4 + *(int *)(v69 + 60);
        v77 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48))(v76, 1, v77))
          goto LABEL_182;
        swift_bridgeObjectRelease();
        v78 = &v76[*(int *)(v77 + 20)];
        v79 = type metadata accessor for Period();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 48))(v78, 1, v79))
          goto LABEL_182;
        if (!v72(v78, 1, v71))
        {
          if (*((_QWORD *)v78 + 7) != 1)
            swift_bridgeObjectRelease();
          v80 = &v78[*(int *)(v71 + 28)];
          v81 = sub_224F67874();
          v140 = *(_QWORD *)(v81 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v80, 1, v81))
            (*(void (**)(char *, uint64_t))(v140 + 8))(v80, v81);
          swift_bridgeObjectRelease();
        }
        v82 = &v78[*(int *)(v79 + 20)];
        if (v72(v82, 1, v71))
          goto LABEL_182;
        if (*((_QWORD *)v82 + 7) != 1)
          swift_bridgeObjectRelease();
        v131 = &v82[*(int *)(v71 + 28)];
        v132 = sub_224F67874();
        v133 = *(_QWORD *)(v132 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
          (*(void (**)(char *, uint64_t))(v133 + 8))(v131, v132);
        goto LABEL_181;
      case 5u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1)
          swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v83 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        v84 = (char *)v4 + v83[10];
        v85 = type metadata accessor for FHIRDateTime();
        v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 48);
        if (!v86(v84, 1, v85))
        {
          if (*((_QWORD *)v84 + 7) != 1)
            swift_bridgeObjectRelease();
          v87 = &v84[*(int *)(v85 + 28)];
          v88 = sub_224F67874();
          v89 = *(_QWORD *)(v88 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
            (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v88);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v90 = (char *)v4 + v83[12];
        if (!v86(v90, 1, v85))
        {
          if (*((_QWORD *)v90 + 7) != 1)
            swift_bridgeObjectRelease();
          v91 = &v90[*(int *)(v85 + 28)];
          v92 = sub_224F67874();
          v93 = *(_QWORD *)(v92 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
            (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v92);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v94 = (char *)v4 + v83[14];
        v95 = type metadata accessor for Reference();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 48))(v94, 1, v95))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v96 = &v94[*(int *)(v95 + 24)];
          v97 = type metadata accessor for Identifier();
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 48))(v96, 1, v97))
          {
            swift_bridgeObjectRelease();
            if (*((_QWORD *)v96 + 3) != 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v98 = &v96[*(int *)(v97 + 24)];
            v99 = sub_224F675D4();
            v100 = *(_QWORD *)(v99 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
              (*(void (**)(char *, uint64_t))(v100 + 8))(v98, v99);
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v101 = (_QWORD *)((char *)v4 + v83[19]);
        if (*v101 == 1)
          goto LABEL_182;
        swift_bridgeObjectRelease();
        if (v101[2] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        goto LABEL_180;
      case 6u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[4] != 1)
          swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v102 = (int *)type metadata accessor for ModelsR4.Observation(0);
        v103 = (char *)v4 + v102[10];
        v104 = type metadata accessor for FHIRDateTime();
        v105 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 48);
        if (!v105(v103, 1, v104))
        {
          if (*((_QWORD *)v103 + 7) != 1)
            swift_bridgeObjectRelease();
          v106 = &v103[*(int *)(v104 + 28)];
          v107 = sub_224F67874();
          v108 = *(_QWORD *)(v107 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
            (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v107);
          swift_bridgeObjectRelease();
        }
        v109 = (char *)v4 + v102[11];
        if (!v105(v109, 1, v104))
        {
          if (*((_QWORD *)v109 + 7) != 1)
            swift_bridgeObjectRelease();
          v110 = &v109[*(int *)(v104 + 28)];
          v111 = sub_224F67874();
          v112 = *(_QWORD *)(v111 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
            (*(void (**)(char *, uint64_t))(v112 + 8))(v110, v111);
          swift_bridgeObjectRelease();
        }
        v113 = (char *)v4 + v102[12];
        v114 = type metadata accessor for Period();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 48))(v113, 1, v114))
        {
          if (!v105(v113, 1, v104))
          {
            if (*((_QWORD *)v113 + 7) != 1)
              swift_bridgeObjectRelease();
            v115 = &v113[*(int *)(v104 + 28)];
            v116 = sub_224F67874();
            v141 = *(_QWORD *)(v116 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v115, 1, v116))
              (*(void (**)(char *, uint64_t))(v141 + 8))(v115, v116);
            swift_bridgeObjectRelease();
          }
          v117 = &v113[*(int *)(v114 + 20)];
          if (!v105(v117, 1, v104))
          {
            if (*((_QWORD *)v117 + 7) != 1)
              swift_bridgeObjectRelease();
            v118 = &v117[*(int *)(v104 + 28)];
            v119 = sub_224F67874();
            v120 = *(_QWORD *)(v119 - 8);
            if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119))
              (*(void (**)(char *, uint64_t))(v120 + 8))(v118, v119);
            swift_bridgeObjectRelease();
          }
        }
        v121 = (char *)v4 + v102[13];
        if (!v105(v121, 1, v104))
        {
          if (*((_QWORD *)v121 + 7) != 1)
            swift_bridgeObjectRelease();
          v122 = &v121[*(int *)(v104 + 28)];
          v123 = sub_224F67874();
          v124 = *(_QWORD *)(v123 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
            (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v123);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)((char *)v4 + v102[17] + 8) != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v125 = (char *)v4 + v102[18];
        v126 = type metadata accessor for Quantity();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 48))(v125, 1, v126))
          goto LABEL_181;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v127 = &v125[*(int *)(v126 + 28)];
        v128 = sub_224F675D4();
        v129 = *(_QWORD *)(v128 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
          (*(void (**)(char *, uint64_t))(v129 + 8))(v127, v128);
LABEL_180:
        swift_bridgeObjectRelease();
LABEL_181:
        swift_bridgeObjectRelease();
        goto LABEL_182;
      case 7u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4[13] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_186:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_182:
        swift_bridgeObjectRelease();
        break;
      default:
        return sub_224DDE9B4(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
    }
  }
  return sub_224DDE9B4(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *initializeWithCopy for ModelsR4.Bundle.BundleEntry(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  swift_bridgeObjectRetain();
  if (!v11(v9, 1, v10))
  {
    v13 = (char *)&loc_224E12CB8 + 4 * word_224F6B2AE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  v14 = *(int *)(a3 + 24);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_224DDE970(*v16, v18);
  *v15 = v17;
  v15[1] = v18;
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.Bundle.BundleEntry(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  v26 = (uint64_t)v7;
  LODWORD(v7) = v10(v7, 1, v9);
  v11 = v10(v8, 1, v9);
  if ((_DWORD)v7)
  {
    if (!v11)
    {
      v16 = (char *)&loc_224E16668 + 4 * word_224F6B2C0[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
    v14 = (void *)v26;
    goto LABEL_6;
  }
  if (v11)
  {
    sub_224DDEAA0(v26, type metadata accessor for ModelsR4.ResourceProxy);
    sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v13 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    v14 = (void *)v26;
LABEL_6:
    memcpy(v14, v8, v13);
    goto LABEL_10;
  }
  if (a1 != a2)
  {
    sub_224DDEAA0(v26, type metadata accessor for ModelsR4.ResourceProxy);
    v17 = (char *)&loc_224E16710 + 4 * word_224F6B2D2[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_10:
  v18 = *(int *)(a3 + 24);
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_224DDE970(*v20, v22);
  v23 = *v19;
  v24 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  sub_224DDE9B4(v23, v24);
  return a1;
}

_OWORD *initializeWithTake for ModelsR4.Bundle.BundleEntry(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int (*v45)(_QWORD, _QWORD, _QWORD);
  uint64_t v46;
  __int128 v47;
  int *v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned int (*v53)(_QWORD, _QWORD, _QWORD);
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int (**v100)(_QWORD *, uint64_t, uint64_t);
  uint64_t v101;
  int *v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  unsigned int (**v107)(_BYTE *, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void (**v111)(void *, _QWORD, uint64_t, uint64_t);
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  _OWORD *v149;
  _OWORD *v150;
  uint64_t v151;
  unsigned int (**v152)(_OWORD *, uint64_t, uint64_t);
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  _OWORD *v156;
  _OWORD *v157;
  uint64_t v158;
  void (**v159)(void);
  uint64_t v160;
  void (**v161)(void *, _QWORD, uint64_t, uint64_t);
  void *v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE *v165;
  uint64_t v166;
  unsigned int (**v167)(_BYTE *, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  __int128 v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE *v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  _BYTE *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  _BYTE *v216;
  _BYTE *v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _BYTE *v225;
  _BYTE *v226;
  uint64_t v227;
  _OWORD *v228;
  uint64_t v229;
  _BYTE *v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int *v235;
  uint64_t v236;
  _BYTE *v237;
  _BYTE *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  _BYTE *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int *v247;
  uint64_t v248;
  _BYTE *v249;
  _BYTE *v250;
  uint64_t v251;
  uint64_t v252;
  _BYTE *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE *v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  _OWORD *v270;
  _OWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _BYTE *v281;
  _BYTE *v282;
  uint64_t v283;
  uint64_t v284;
  _BYTE *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  _BYTE *v291;
  uint64_t v292;
  uint64_t v293;
  _BYTE *v294;
  _BYTE *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _OWORD *v300;
  _OWORD *v301;
  uint64_t v302;
  _QWORD *v303;
  unsigned int (*v304)(_QWORD, _QWORD, _QWORD);
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  _OWORD *v308;
  _OWORD *v309;
  uint64_t v310;
  unsigned int (**v311)(_OWORD *, uint64_t, uint64_t);
  uint64_t v312;
  __int128 v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _OWORD *v322;
  _OWORD *v323;
  uint64_t v324;
  __int128 v325;
  uint64_t v326;
  _OWORD *v327;
  _OWORD *v328;
  uint64_t v329;
  unsigned int (**v330)(_OWORD *, uint64_t, uint64_t);
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  _BYTE *v342;
  uint64_t v343;
  uint64_t v344;
  _BYTE *v345;
  uint64_t v346;
  uint64_t v347;
  _BYTE *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v352;
  void (**v353)(void *, _QWORD, uint64_t, void *);
  _BYTE *v354;
  _QWORD *__src;
  char *__srca;
  void *__srcb;
  _OWORD *v358;
  unsigned int (*v359)(char *, uint64_t, int *);
  void *v360;
  int *v361;
  int *v362;
  void (**v363)(void *, void *, _QWORD);
  _BYTE *v364;
  _BYTE *v365;
  char *v366;
  void *v367;
  void (**v368)(void *, _QWORD, uint64_t, uint64_t);
  void *v369;
  void (**v370)(void);
  void *v371;
  char *v372;
  void *v373;
  void *v374;
  int *__dst;
  _BYTE *__dsta;
  void *__dstb;
  void *__dstc;
  _BYTE *__dstd;
  _BYTE *__dste;
  int *__dstf;
  _BYTE *__dstg;
  void *__dsth;
  void *__dsti;
  _QWORD *v385;
  _QWORD *v386;
  unsigned int (*v387)(_BYTE *, uint64_t, uint64_t);
  void *v388;
  char *v389;
  _BYTE *v390;
  void *v391;
  char *v392;
  char *v393;
  int *v394;
  _QWORD *v395;
  int *v396;
  _BYTE *v397;
  int *v398;
  _BYTE *v399;
  void *v400;
  _QWORD *v401;
  void *v402;
  int *v403;
  unsigned int (*v404)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v405;
  int *v406;
  _QWORD *v407;
  int *v408;
  void *v409;
  void (**v410)(void *, _QWORD, uint64_t, uint64_t);
  _BYTE *v411;
  char *v412;
  int *v413;
  _OWORD *v414;
  _OWORD *v415;
  _OWORD *v416;
  _OWORD *v417;
  _OWORD *v418;
  _OWORD *v419;
  _OWORD *v420;
  _OWORD *v421;
  _OWORD *v422;
  _OWORD *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v426 = v9;
    v424 = v10;
    v425 = v3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        v12 = v8[1];
        *v7 = *v8;
        v7[1] = v12;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        v7[4] = v8[4];
        v13 = *((_QWORD *)v8 + 11);
        *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
        *((_QWORD *)v7 + 11) = v13;
        v14 = v8[6];
        *((_QWORD *)v7 + 14) = *((_QWORD *)v8 + 14);
        v7[6] = v14;
        *(_OWORD *)((char *)v7 + 120) = *(_OWORD *)((char *)v8 + 120);
        v15 = *((_QWORD *)v8 + 18);
        *((_QWORD *)v7 + 17) = *((_QWORD *)v8 + 17);
        *((_QWORD *)v7 + 18) = v15;
        v16 = (int *)type metadata accessor for ModelsR4.Condition(0);
        v17 = v16[13];
        v18 = (char *)v7 + v17;
        v19 = (char *)v8 + v17;
        v20 = type metadata accessor for FHIRDateTime();
        v385 = *(_QWORD **)(v20 - 8);
        v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v385[6];
        v403 = v16;
        v367 = v21;
        __dst = (int *)v20;
        if (v21(v19, 1, v20))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
        }
        else
        {
          *v18 = *v19;
          *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
          *((_DWORD *)v18 + 4) = *((_DWORD *)v19 + 4);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(v19 + 24);
          *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 40);
          *((_QWORD *)v18 + 7) = *((_QWORD *)v19 + 7);
          v55 = *(int *)(v20 + 28);
          v56 = &v18[v55];
          v57 = &v19[v55];
          v58 = sub_224F67874();
          v59 = *(_QWORD *)(v58 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 32))(v56, v57, v58);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
          }
          v16 = v403;
          v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v367;
          v20 = (uint64_t)__dst;
          *(_OWORD *)&v18[__dst[8]] = *(_OWORD *)&v19[__dst[8]];
          ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v385[7])(v18, 0, 1, __dst);
        }
        v83 = v16[14];
        v84 = (char *)v7 + v83;
        v85 = (char *)v8 + v83;
        v86 = type metadata accessor for Period();
        __src = *(_QWORD **)(v86 - 8);
        v398 = (int *)v86;
        v359 = (unsigned int (*)(char *, uint64_t, int *))__src[6];
        if (((unsigned int (*)(_BYTE *, uint64_t))v359)(v85, 1))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        }
        else
        {
          if (v21(v85, 1, v20))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          }
          else
          {
            v417 = v4;
            *v84 = *v85;
            *((_QWORD *)v84 + 1) = *((_QWORD *)v85 + 1);
            *((_DWORD *)v84 + 4) = *((_DWORD *)v85 + 4);
            *(_OWORD *)(v84 + 24) = *(_OWORD *)(v85 + 24);
            *(_OWORD *)(v84 + 40) = *(_OWORD *)(v85 + 40);
            *((_QWORD *)v84 + 7) = *((_QWORD *)v85 + 7);
            v132 = *(int *)(v20 + 28);
            v133 = &v84[v132];
            v134 = &v85[v132];
            v135 = sub_224F67874();
            v136 = *(_QWORD *)(v135 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v136 + 32))(v133, v134, v135);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
            }
            v20 = (uint64_t)__dst;
            *(_OWORD *)&v84[__dst[8]] = *(_OWORD *)&v85[__dst[8]];
            ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v385[7])(v84, 0, 1, __dst);
            v4 = v417;
            v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v367;
          }
          v185 = v398[5];
          v186 = &v84[v185];
          v187 = &v85[v185];
          if (v21(v187, 1, v20))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
          }
          else
          {
            v419 = v4;
            *v186 = *v187;
            *((_QWORD *)v186 + 1) = *((_QWORD *)v187 + 1);
            *((_DWORD *)v186 + 4) = *((_DWORD *)v187 + 4);
            *(_OWORD *)(v186 + 24) = *(_OWORD *)(v187 + 24);
            *(_OWORD *)(v186 + 40) = *(_OWORD *)(v187 + 40);
            *((_QWORD *)v186 + 7) = *((_QWORD *)v187 + 7);
            v189 = *(int *)(v20 + 28);
            v354 = &v186[v189];
            v190 = &v187[v189];
            v191 = sub_224F67874();
            v192 = *(_QWORD *)(v191 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v192 + 48))(v190, 1, v191))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v354, v190, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v192 + 32))(v354, v190, v191);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v192 + 56))(v354, 0, 1, v191);
            }
            v4 = v419;
            v20 = (uint64_t)__dst;
            *(_OWORD *)&v186[__dst[8]] = *(_OWORD *)&v187[__dst[8]];
            ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v385[7])(v186, 0, 1, __dst);
            v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v367;
          }
          ((void (*)(_BYTE *, _QWORD, uint64_t, int *))__src[7])(v84, 0, 1, v398);
        }
        *(_OWORD *)((char *)v7 + v16[15]) = *(_OWORD *)((char *)v8 + v16[15]);
        v224 = v16[16];
        v225 = (char *)v7 + v224;
        v226 = (char *)v8 + v224;
        if (v21((char *)v8 + v224, 1, v20))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v225, v226, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
        }
        else
        {
          v228 = v4;
          *v225 = *v226;
          *((_QWORD *)v225 + 1) = *((_QWORD *)v226 + 1);
          *((_DWORD *)v225 + 4) = *((_DWORD *)v226 + 4);
          *(_OWORD *)(v225 + 24) = *(_OWORD *)(v226 + 24);
          *(_OWORD *)(v225 + 40) = *(_OWORD *)(v226 + 40);
          *((_QWORD *)v225 + 7) = *((_QWORD *)v226 + 7);
          v229 = *(int *)(v20 + 28);
          v230 = &v225[v229];
          v231 = &v226[v229];
          v232 = sub_224F67874();
          v233 = *(_QWORD *)(v232 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v233 + 48))(v231, 1, v232))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v233 + 32))(v230, v231, v232);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v233 + 56))(v230, 0, 1, v232);
          }
          v4 = v228;
          v16 = v403;
          v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v367;
          v20 = (uint64_t)__dst;
          *(_OWORD *)&v225[__dst[8]] = *(_OWORD *)&v226[__dst[8]];
          ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v385[7])(v225, 0, 1, __dst);
        }
        v235 = v398;
        v236 = v16[17];
        v237 = (char *)v7 + v236;
        v238 = (char *)v8 + v236;
        if (v359((char *)v8 + v236, 1, v398))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v239 - 8) + 64));
        }
        else
        {
          if (v21(v238, 1, v20))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v240 - 8) + 64));
          }
          else
          {
            *v237 = *v238;
            *((_QWORD *)v237 + 1) = *((_QWORD *)v238 + 1);
            *((_DWORD *)v237 + 4) = *((_DWORD *)v238 + 4);
            *(_OWORD *)(v237 + 24) = *(_OWORD *)(v238 + 24);
            *(_OWORD *)(v237 + 40) = *(_OWORD *)(v238 + 40);
            *((_QWORD *)v237 + 7) = *((_QWORD *)v238 + 7);
            v241 = *(int *)(v20 + 28);
            v242 = &v237[v241];
            v243 = &v238[v241];
            v244 = sub_224F67874();
            v245 = *(_QWORD *)(v244 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v245 + 48))(v243, 1, v244))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v242, v243, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v245 + 32))(v242, v243, v244);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v245 + 56))(v242, 0, 1, v244);
            }
            v20 = (uint64_t)__dst;
            *(_OWORD *)&v237[__dst[8]] = *(_OWORD *)&v238[__dst[8]];
            ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v385[7])(v237, 0, 1, __dst);
            v235 = v398;
            v16 = v403;
            v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v367;
          }
          v280 = v235[5];
          v281 = &v237[v280];
          v282 = &v238[v280];
          if (v21(v282, 1, v20))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
          }
          else
          {
            *v281 = *v282;
            *((_QWORD *)v281 + 1) = *((_QWORD *)v282 + 1);
            *((_DWORD *)v281 + 4) = *((_DWORD *)v282 + 4);
            *(_OWORD *)(v281 + 24) = *(_OWORD *)(v282 + 24);
            *(_OWORD *)(v281 + 40) = *(_OWORD *)(v282 + 40);
            *((_QWORD *)v281 + 7) = *((_QWORD *)v282 + 7);
            v284 = *(int *)(v20 + 28);
            v365 = &v281[v284];
            v285 = &v282[v284];
            v286 = sub_224F67874();
            v287 = *(_QWORD *)(v286 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v287 + 48))(v285, 1, v286))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v365, v285, *(_QWORD *)(*(_QWORD *)(v288 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v287 + 32))(v365, v285, v286);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v287 + 56))(v365, 0, 1, v286);
            }
            v16 = v403;
            v20 = (uint64_t)__dst;
            *(_OWORD *)&v281[__dst[8]] = *(_OWORD *)&v282[__dst[8]];
            ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v385[7])(v281, 0, 1, __dst);
            v21 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v367;
          }
          ((void (*)(_BYTE *, _QWORD, uint64_t, int *))__src[7])(v237, 0, 1, v398);
        }
        *(_OWORD *)((char *)v7 + v16[18]) = *(_OWORD *)((char *)v8 + v16[18]);
        v289 = v16[19];
        v290 = (char *)v7 + v289;
        v291 = (char *)v8 + v289;
        if (v21((char *)v8 + v289, 1, v20))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v290, v291, *(_QWORD *)(*(_QWORD *)(v292 - 8) + 64));
        }
        else
        {
          *v290 = *v291;
          *((_QWORD *)v290 + 1) = *((_QWORD *)v291 + 1);
          *((_DWORD *)v290 + 4) = *((_DWORD *)v291 + 4);
          *(_OWORD *)(v290 + 24) = *(_OWORD *)(v291 + 24);
          *(_OWORD *)(v290 + 40) = *(_OWORD *)(v291 + 40);
          *((_QWORD *)v290 + 7) = *((_QWORD *)v291 + 7);
          v293 = *(int *)(v20 + 28);
          v294 = &v290[v293];
          v295 = &v291[v293];
          v296 = sub_224F67874();
          v297 = *(_QWORD *)(v296 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v297 + 48))(v295, 1, v296))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v294, v295, *(_QWORD *)(*(_QWORD *)(v298 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v297 + 32))(v294, v295, v296);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v297 + 56))(v294, 0, 1, v296);
          }
          v16 = v403;
          *(_OWORD *)&v290[__dst[8]] = *(_OWORD *)&v291[__dst[8]];
          ((void (*)(_BYTE *, _QWORD, uint64_t))v385[7])(v290, 0, 1);
        }
        v9 = v426;
        v299 = v16[20];
        v300 = (_OWORD *)((char *)v7 + v299);
        v301 = (_OWORD *)((char *)v8 + v299);
        v302 = type metadata accessor for Reference();
        v303 = *(_QWORD **)(v302 - 8);
        v304 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v303[6];
        if (v304(v301, 1, v302))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v300, v301, *(_QWORD *)(*(_QWORD *)(v305 - 8) + 64));
        }
        else
        {
          v391 = v304;
          v401 = v303;
          v306 = v301[1];
          *v300 = *v301;
          v300[1] = v306;
          v307 = *(int *)(v302 + 24);
          v308 = (_OWORD *)((char *)v300 + v307);
          v309 = (_OWORD *)((char *)v301 + v307);
          v310 = type metadata accessor for Identifier();
          v311 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v310 - 8);
          if (v311[6](v309, 1, v310))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v308, v309, *(_QWORD *)(*(_QWORD *)(v312 - 8) + 64));
            v9 = v426;
            v304 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v391;
            v303 = v401;
          }
          else
          {
            v422 = v4;
            v313 = v309[1];
            *v308 = *v309;
            v308[1] = v313;
            *((_QWORD *)v308 + 4) = *((_QWORD *)v309 + 4);
            v314 = *(int *)(v310 + 24);
            v372 = (char *)v308 + v314;
            __dsth = v311;
            v315 = (char *)v309 + v314;
            v316 = sub_224F675D4();
            v317 = *(_QWORD *)(v316 - 8);
            v366 = v315;
            __srcb = (void *)v316;
            v318 = (*(uint64_t (**)(char *, uint64_t))(v317 + 48))(v315, 1);
            v319 = v310;
            if (v318)
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v372, v366, *(_QWORD *)(*(_QWORD *)(v320 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(v317 + 32))(v372, v366, __srcb);
              (*(void (**)(char *, _QWORD, uint64_t, void *))(v317 + 56))(v372, 0, 1, __srcb);
            }
            v4 = v422;
            *(_OWORD *)((char *)v308 + *(int *)(v310 + 28)) = *(_OWORD *)((char *)v309 + *(int *)(v310 + 28));
            v304 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v391;
            (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))__dsth + 7))(v308, 0, 1, v319);
            v9 = v426;
            v303 = v401;
          }
          ((void (*)(_OWORD *, _QWORD, uint64_t, uint64_t))v303[7])(v300, 0, 1, v302);
        }
        v321 = v403[21];
        v322 = (_OWORD *)((char *)v7 + v321);
        v323 = (_OWORD *)((char *)v8 + v321);
        if (v304((char *)v8 + v321, 1, v302))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v322, v323, *(_QWORD *)(*(_QWORD *)(v324 - 8) + 64));
        }
        else
        {
          v402 = v303;
          v325 = v323[1];
          *v322 = *v323;
          v322[1] = v325;
          v326 = *(int *)(v302 + 24);
          v327 = (_OWORD *)((char *)v322 + v326);
          v328 = (_OWORD *)((char *)v323 + v326);
          v329 = type metadata accessor for Identifier();
          v330 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v329 - 8);
          if (v330[6](v328, 1, v329))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v327, v328, *(_QWORD *)(*(_QWORD *)(v331 - 8) + 64));
          }
          else
          {
            v373 = v330;
            v423 = v4;
            v332 = v328[1];
            *v327 = *v328;
            v327[1] = v332;
            *((_QWORD *)v327 + 4) = *((_QWORD *)v328 + 4);
            v333 = *(int *)(v329 + 24);
            v392 = (char *)v327 + v333;
            v334 = (char *)v328 + v333;
            v335 = sub_224F675D4();
            v336 = *(_QWORD *)(v335 - 8);
            __dsti = v334;
            v337 = v334;
            v338 = v335;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v336 + 48))(v337, 1, v335))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v392, __dsti, *(_QWORD *)(*(_QWORD *)(v339 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(v336 + 32))(v392, __dsti, v338);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v392, 0, 1, v338);
            }
            v4 = v423;
            *(_OWORD *)((char *)v327 + *(int *)(v329 + 28)) = *(_OWORD *)((char *)v328 + *(int *)(v329 + 28));
            (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v373 + 7))(v327, 0, 1, v329);
          }
          v9 = v426;
          (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v402 + 7))(v322, 0, 1, v302);
        }
        v10 = v424;
        v3 = v425;
        *(_QWORD *)((char *)v7 + v403[22]) = *(_QWORD *)((char *)v8 + v403[22]);
        *(_OWORD *)((char *)v7 + v403[23]) = *(_OWORD *)((char *)v8 + v403[23]);
        goto LABEL_187;
      case 3u:
        v23 = v8[1];
        *v7 = *v8;
        v7[1] = v23;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        v7[4] = v8[4];
        *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
        *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
        v24 = type metadata accessor for ModelsR4.DiagnosticReport(0);
        v25 = *(int *)(v24 + 44);
        v26 = (char *)v7 + v25;
        v27 = (char *)v8 + v25;
        v28 = type metadata accessor for FHIRDateTime();
        v386 = *(_QWORD **)(v28 - 8);
        v404 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v386[6];
        v394 = (int *)v24;
        if (v404(v27, 1, v28))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          *v26 = *v27;
          *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
          *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
          *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 24);
          *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
          *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
          v61 = *(int *)(v28 + 28);
          __dsta = &v26[v61];
          v62 = &v27[v61];
          v63 = sub_224F67874();
          v64 = *(_QWORD *)(v63 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dsta, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v64 + 32))(__dsta, v62, v63);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v64 + 56))(__dsta, 0, 1, v63);
          }
          *(_OWORD *)&v26[*(int *)(v28 + 32)] = *(_OWORD *)&v27[*(int *)(v28 + 32)];
          v24 = (uint64_t)v394;
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v386[7])(v26, 0, 1, v28);
        }
        v89 = *(int *)(v24 + 48);
        v90 = (char *)v7 + v89;
        v91 = (char *)v8 + v89;
        v92 = type metadata accessor for Period();
        v93 = *(void **)(v92 - 8);
        if ((*((unsigned int (**)(_BYTE *, uint64_t, uint64_t))v93 + 6))(v91, 1, v92))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
        }
        else
        {
          if (v404(v91, 1, v28))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          }
          else
          {
            v360 = v93;
            v418 = v4;
            *v90 = *v91;
            *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
            *((_DWORD *)v90 + 4) = *((_DWORD *)v91 + 4);
            *(_OWORD *)(v90 + 24) = *(_OWORD *)(v91 + 24);
            *(_OWORD *)(v90 + 40) = *(_OWORD *)(v91 + 40);
            *((_QWORD *)v90 + 7) = *((_QWORD *)v91 + 7);
            v138 = *(int *)(v28 + 28);
            __dstd = &v90[v138];
            v139 = &v91[v138];
            v140 = sub_224F67874();
            v141 = *(_QWORD *)(v140 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dstd, v139, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v141 + 32))(__dstd, v139, v140);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v141 + 56))(__dstd, 0, 1, v140);
            }
            *(_OWORD *)&v90[*(int *)(v28 + 32)] = *(_OWORD *)&v91[*(int *)(v28 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v386[7])(v90, 0, 1, v28);
            v4 = v418;
            v93 = v360;
          }
          v194 = *(int *)(v92 + 20);
          v195 = &v90[v194];
          v196 = &v91[v194];
          if (v404(v196, 1, v28))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
          }
          else
          {
            v420 = v4;
            *v195 = *v196;
            *((_QWORD *)v195 + 1) = *((_QWORD *)v196 + 1);
            *((_DWORD *)v195 + 4) = *((_DWORD *)v196 + 4);
            *(_OWORD *)(v195 + 24) = *(_OWORD *)(v196 + 24);
            *(_OWORD *)(v195 + 40) = *(_OWORD *)(v196 + 40);
            *((_QWORD *)v195 + 7) = *((_QWORD *)v196 + 7);
            v198 = *(int *)(v28 + 28);
            __dstg = &v195[v198];
            v199 = &v196[v198];
            v200 = sub_224F67874();
            v363 = *(void (***)(void *, void *, _QWORD))(v200 - 8);
            v371 = v199;
            v201 = v199;
            v202 = v200;
            if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v363[6])(v201, 1, v200))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dstg, v371, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
            }
            else
            {
              v363[4](__dstg, v371, v202);
              ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v363[7])(__dstg, 0, 1, v202);
            }
            v4 = v420;
            *(_OWORD *)&v195[*(int *)(v28 + 32)] = *(_OWORD *)&v196[*(int *)(v28 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v386[7])(v195, 0, 1, v28);
          }
          (*((void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))v93 + 7))(v90, 0, 1, v92);
        }
        v3 = v425;
        v247 = v394;
        v248 = v394[13];
        v249 = (char *)v7 + v248;
        v250 = (char *)v8 + v248;
        if (v404((_BYTE *)v8 + v248, 1, v28))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v249, v250, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
        }
        else
        {
          *v249 = *v250;
          *((_QWORD *)v249 + 1) = *((_QWORD *)v250 + 1);
          *((_DWORD *)v249 + 4) = *((_DWORD *)v250 + 4);
          *(_OWORD *)(v249 + 24) = *(_OWORD *)(v250 + 24);
          *(_OWORD *)(v249 + 40) = *(_OWORD *)(v250 + 40);
          *((_QWORD *)v249 + 7) = *((_QWORD *)v250 + 7);
          v252 = *(int *)(v28 + 28);
          v411 = &v249[v252];
          v253 = &v250[v252];
          v254 = sub_224F67874();
          v255 = *(_QWORD *)(v254 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v255 + 48))(v253, 1, v254))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v411, v253, *(_QWORD *)(*(_QWORD *)(v256 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v255 + 32))(v411, v253, v254);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v255 + 56))(v411, 0, 1, v254);
          }
          v3 = v425;
          *(_OWORD *)&v249[*(int *)(v28 + 32)] = *(_OWORD *)&v250[*(int *)(v28 + 32)];
          v247 = v394;
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v386[7])(v249, 0, 1, v28);
        }
        v9 = v426;
        v10 = v424;
        *(_QWORD *)((char *)v7 + v247[14]) = *(_QWORD *)((char *)v8 + v247[14]);
        *(_QWORD *)((char *)v7 + v247[15]) = *(_QWORD *)((char *)v8 + v247[15]);
        *(_OWORD *)((char *)v7 + v247[16]) = *(_OWORD *)((char *)v8 + v247[16]);
        goto LABEL_187;
      case 4u:
        v30 = v8[1];
        *v7 = *v8;
        v7[1] = v30;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)((char *)v8 + 56);
        *(_OWORD *)((char *)v7 + 72) = *(_OWORD *)((char *)v8 + 72);
        v31 = *((_QWORD *)v8 + 12);
        *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
        *((_QWORD *)v7 + 12) = v31;
        v32 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
        v33 = v32[11];
        v34 = (char *)v7 + v33;
        v35 = (char *)v8 + v33;
        v36 = type metadata accessor for FHIRDateTime();
        v395 = *(_QWORD **)(v36 - 8);
        v387 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v395[6];
        if (v387(v35, 1, v36))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          v406 = (int *)v36;
          v416 = v4;
          *v34 = *v35;
          *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
          *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
          *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
          *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
          *((_QWORD *)v34 + 7) = *((_QWORD *)v35 + 7);
          v66 = *(int *)(v36 + 28);
          v67 = &v34[v66];
          v68 = &v35[v66];
          v69 = sub_224F67874();
          v70 = *(_QWORD *)(v69 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v70 + 32))(v67, v68, v69);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
          }
          v36 = (uint64_t)v406;
          v4 = v416;
          *(_OWORD *)&v34[v406[8]] = *(_OWORD *)&v35[v406[8]];
          ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v395[7])(v34, 0, 1, v406);
        }
        v3 = v425;
        *(_OWORD *)((char *)v7 + v32[12]) = *(_OWORD *)((char *)v8 + v32[12]);
        *(_QWORD *)((char *)v7 + v32[13]) = *(_QWORD *)((char *)v8 + v32[13]);
        *(_QWORD *)((char *)v7 + v32[14]) = *(_QWORD *)((char *)v8 + v32[14]);
        v408 = v32;
        v96 = v32[15];
        v97 = (_QWORD *)((char *)v7 + v96);
        v98 = (_QWORD *)((char *)v8 + v96);
        v99 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        v100 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v99 - 8);
        if (v100[6](v98, 1, v99))
        {
          sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
          v9 = v426;
          v10 = v424;
          v102 = v408;
        }
        else
        {
          v368 = (void (**)(void *, _QWORD, uint64_t, uint64_t))v100;
          __dstc = v97;
          *v97 = *v98;
          v103 = *(int *)(v99 + 20);
          v104 = (char *)v97 + v103;
          v105 = (char *)v98 + v103;
          v106 = type metadata accessor for Period();
          v107 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v106 - 8);
          if (v107[6](v105, 1, v106))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
            v109 = v99;
            v3 = v425;
            v9 = v426;
            v111 = v368;
            v110 = __dstc;
            v102 = v408;
          }
          else
          {
            v352 = v99;
            v353 = (void (**)(void *, _QWORD, uint64_t, void *))v107;
            v361 = (int *)v106;
            __srca = v104;
            if (v387(v105, 1, v36))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
              v144 = v104;
              v111 = v368;
              v102 = v408;
            }
            else
            {
              v421 = v4;
              *v104 = *v105;
              *((_QWORD *)v104 + 1) = *((_QWORD *)v105 + 1);
              *((_DWORD *)v104 + 4) = *((_DWORD *)v105 + 4);
              *(_OWORD *)(v104 + 24) = *(_OWORD *)(v105 + 24);
              *(_OWORD *)(v104 + 40) = *(_OWORD *)(v105 + 40);
              *((_QWORD *)v104 + 7) = *((_QWORD *)v105 + 7);
              v204 = *(int *)(v36 + 28);
              v205 = &v104[v204];
              v206 = &v105[v204];
              v207 = sub_224F67874();
              v208 = *(_QWORD *)(v207 - 8);
              if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v208 + 48))(v206, 1, v207))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v205, v206, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
              }
              else
              {
                (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v208 + 32))(v205, v206, v207);
                (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v205, 0, 1, v207);
              }
              v102 = v408;
              v4 = v421;
              v111 = v368;
              v144 = __srca;
              *(_OWORD *)&__srca[*(int *)(v36 + 32)] = *(_OWORD *)&v105[*(int *)(v36 + 32)];
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v395[7])(__srca, 0, 1, v36);
            }
            v340 = v361[5];
            v341 = &v144[v340];
            v342 = &v105[v340];
            if (v387(v342, 1, v36))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v341, v342, *(_QWORD *)(*(_QWORD *)(v343 - 8) + 64));
              v110 = __dstc;
            }
            else
            {
              *v341 = *v342;
              *((_QWORD *)v341 + 1) = *((_QWORD *)v342 + 1);
              *((_DWORD *)v341 + 4) = *((_DWORD *)v342 + 4);
              *(_OWORD *)(v341 + 24) = *(_OWORD *)(v342 + 24);
              *(_OWORD *)(v341 + 40) = *(_OWORD *)(v342 + 40);
              *((_QWORD *)v341 + 7) = *((_QWORD *)v342 + 7);
              v413 = (int *)v36;
              v344 = *(int *)(v36 + 28);
              v393 = &v341[v344];
              v345 = &v342[v344];
              v346 = sub_224F67874();
              v347 = *(_QWORD *)(v346 - 8);
              v374 = v345;
              v348 = v345;
              v349 = v346;
              if ((*(unsigned int (**)(_BYTE *, uint64_t))(v347 + 48))(v348, 1))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v393, v374, *(_QWORD *)(*(_QWORD *)(v350 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, void *, uint64_t))(v347 + 32))(v393, v374, v349);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v347 + 56))(v393, 0, 1, v349);
              }
              v110 = __dstc;
              *(_OWORD *)&v341[v413[8]] = *(_OWORD *)&v342[v413[8]];
              ((void (*)(char *, _QWORD, uint64_t))v395[7])(v341, 0, 1);
            }
            v353[7](__srca, 0, 1, v361);
            v3 = v425;
            v9 = v426;
            v109 = v352;
          }
          v111[7](v110, 0, 1, v109);
          v10 = v424;
        }
        *(_OWORD *)((char *)v7 + v102[16]) = *(_OWORD *)((char *)v8 + v102[16]);
        goto LABEL_187;
      case 5u:
        v414 = v4;
        v38 = v8[1];
        *v7 = *v8;
        v7[1] = v38;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        *(_QWORD *)((char *)v7 + 61) = *(_QWORD *)((char *)v8 + 61);
        *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
        v39 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        v40 = v39[10];
        v41 = (char *)v7 + v40;
        v42 = (char *)v8 + v40;
        v43 = type metadata accessor for FHIRDateTime();
        v44 = *(_QWORD **)(v43 - 8);
        v45 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v44[6];
        if (v45(v42, 1, v43))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          __dstb = v45;
          *v41 = *v42;
          *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
          *((_DWORD *)v41 + 4) = *((_DWORD *)v42 + 4);
          *(_OWORD *)(v41 + 24) = *(_OWORD *)(v42 + 24);
          *(_OWORD *)(v41 + 40) = *(_OWORD *)(v42 + 40);
          *((_QWORD *)v41 + 7) = *((_QWORD *)v42 + 7);
          v72 = *(int *)(v43 + 28);
          v397 = &v41[v72];
          v407 = v44;
          v73 = &v42[v72];
          v74 = sub_224F67874();
          v75 = *(_QWORD *)(v74 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v397, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v75 + 32))(v397, v73, v74);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v397, 0, 1, v74);
          }
          v44 = v407;
          v45 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstb;
          *(_OWORD *)&v41[*(int *)(v43 + 32)] = *(_OWORD *)&v42[*(int *)(v43 + 32)];
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v407[7])(v41, 0, 1, v43);
        }
        *(_QWORD *)((char *)v7 + v39[11]) = *(_QWORD *)((char *)v8 + v39[11]);
        v112 = v39[12];
        v113 = (char *)v7 + v112;
        v114 = (char *)v8 + v112;
        if (v45((char *)v8 + v112, 1, v43))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
          v4 = v414;
        }
        else
        {
          *v113 = *v114;
          *((_QWORD *)v113 + 1) = *((_QWORD *)v114 + 1);
          *((_DWORD *)v113 + 4) = *((_DWORD *)v114 + 4);
          *(_OWORD *)(v113 + 24) = *(_OWORD *)(v114 + 24);
          *(_OWORD *)(v113 + 40) = *(_OWORD *)(v114 + 40);
          *((_QWORD *)v113 + 7) = *((_QWORD *)v114 + 7);
          v116 = *(int *)(v43 + 28);
          v399 = &v113[v116];
          v409 = v44;
          v117 = &v114[v116];
          v118 = sub_224F67874();
          v119 = *(_QWORD *)(v118 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v399, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v119 + 32))(v399, v117, v118);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v399, 0, 1, v118);
          }
          v4 = v414;
          *(_OWORD *)&v113[*(int *)(v43 + 32)] = *(_OWORD *)&v114[*(int *)(v43 + 32)];
          (*((void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))v409 + 7))(v113, 0, 1, v43);
        }
        v145 = v39[13];
        v146 = (char *)v7 + v145;
        v147 = (char *)v8 + v145;
        *(_OWORD *)v146 = *(_OWORD *)v147;
        *((_QWORD *)v146 + 2) = *((_QWORD *)v147 + 2);
        v148 = v39[14];
        v149 = (_OWORD *)((char *)v7 + v148);
        v150 = (_OWORD *)((char *)v8 + v148);
        v151 = type metadata accessor for Reference();
        v152 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v151 - 8);
        if (v152[6](v150, 1, v151))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
          v3 = v425;
        }
        else
        {
          v400 = v149;
          v410 = (void (**)(void *, _QWORD, uint64_t, uint64_t))v152;
          v154 = v150[1];
          *v149 = *v150;
          v149[1] = v154;
          v155 = *(int *)(v151 + 24);
          v156 = (_OWORD *)((char *)v149 + v155);
          v157 = (_OWORD *)((char *)v150 + v155);
          v158 = type metadata accessor for Identifier();
          v159 = *(void (***)(void))(v158 - 8);
          if (((unsigned int (*)(_OWORD *, uint64_t, uint64_t))v159[6])(v157, 1, v158))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
            v3 = v425;
            v162 = v400;
            v161 = v410;
          }
          else
          {
            v370 = v159;
            __dstf = (int *)v158;
            v172 = v157[1];
            *v156 = *v157;
            v156[1] = v172;
            *((_QWORD *)v156 + 4) = *((_QWORD *)v157 + 4);
            v173 = *(int *)(v158 + 24);
            v389 = (char *)v156;
            v174 = (char *)v156 + v173;
            v175 = (char *)v157 + v173;
            v176 = sub_224F675D4();
            v177 = *(_QWORD *)(v176 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v177 + 48))(v175, 1, v176))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v177 + 32))(v174, v175, v176);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v177 + 56))(v174, 0, 1, v176);
            }
            v161 = v410;
            v4 = v414;
            v162 = v400;
            *(_OWORD *)&v389[__dstf[7]] = *(_OWORD *)((char *)v157 + __dstf[7]);
            v370[7]();
            v3 = v425;
          }
          v161[7](v162, 0, 1, v151);
        }
        v9 = v426;
        v10 = v424;
        *((_BYTE *)v7 + v39[15]) = *((_BYTE *)v8 + v39[15]);
        *(_OWORD *)((char *)v7 + v39[16]) = *(_OWORD *)((char *)v8 + v39[16]);
        *(_QWORD *)((char *)v7 + v39[17]) = *(_QWORD *)((char *)v8 + v39[17]);
        *((_BYTE *)v7 + v39[18]) = *((_BYTE *)v8 + v39[18]);
        v210 = v39[19];
        v211 = (char *)v7 + v210;
        v212 = (char *)v8 + v210;
        *((_QWORD *)v211 + 6) = *((_QWORD *)v212 + 6);
        v213 = *((_OWORD *)v212 + 2);
        v214 = *(_OWORD *)v212;
        *((_OWORD *)v211 + 1) = *((_OWORD *)v212 + 1);
        *((_OWORD *)v211 + 2) = v213;
        *(_OWORD *)v211 = v214;
        *(_OWORD *)((char *)v7 + v39[20]) = *(_OWORD *)((char *)v8 + v39[20]);
        goto LABEL_187;
      case 6u:
        v47 = v8[1];
        *v7 = *v8;
        v7[1] = v47;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *(_OWORD *)((char *)v7 + 40) = *(_OWORD *)((char *)v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        v7[4] = v8[4];
        *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
        v48 = (int *)type metadata accessor for ModelsR4.Observation(0);
        v49 = v48[10];
        v50 = (char *)v7 + v49;
        v51 = (char *)v8 + v49;
        v52 = type metadata accessor for FHIRDateTime();
        v405 = *(_QWORD **)(v52 - 8);
        v53 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v405[6];
        v388 = v53;
        v396 = v48;
        v415 = v4;
        if (v53(v51, 1, v52))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          *v50 = *v51;
          *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
          *((_DWORD *)v50 + 4) = *((_DWORD *)v51 + 4);
          *(_OWORD *)(v50 + 24) = *(_OWORD *)(v51 + 24);
          *(_OWORD *)(v50 + 40) = *(_OWORD *)(v51 + 40);
          *((_QWORD *)v50 + 7) = *((_QWORD *)v51 + 7);
          v77 = *(int *)(v52 + 28);
          v78 = &v50[v77];
          v79 = &v51[v77];
          v80 = sub_224F67874();
          v81 = *(_QWORD *)(v80 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v81 + 32))(v78, v79, v80);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
          }
          v53 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v388;
          v48 = v396;
          *(_OWORD *)&v50[*(int *)(v52 + 32)] = *(_OWORD *)&v51[*(int *)(v52 + 32)];
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v405[7])(v50, 0, 1, v52);
        }
        v121 = v48[11];
        v122 = (char *)v7 + v121;
        v123 = (char *)v8 + v121;
        v358 = v5;
        if (v53((char *)v8 + v121, 1, v52))
        {
          v124 = v52;
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
        }
        else
        {
          *v122 = *v123;
          *((_QWORD *)v122 + 1) = *((_QWORD *)v123 + 1);
          *((_DWORD *)v122 + 4) = *((_DWORD *)v123 + 4);
          *(_OWORD *)(v122 + 24) = *(_OWORD *)(v123 + 24);
          *(_OWORD *)(v122 + 40) = *(_OWORD *)(v123 + 40);
          *((_QWORD *)v122 + 7) = *((_QWORD *)v123 + 7);
          v126 = *(int *)(v52 + 28);
          v127 = &v122[v126];
          v128 = &v123[v126];
          v129 = sub_224F67874();
          v130 = *(_QWORD *)(v129 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v130 + 32))(v127, v128, v129);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
          }
          v53 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v388;
          v48 = v396;
          *(_OWORD *)&v122[*(int *)(v52 + 32)] = *(_OWORD *)&v123[*(int *)(v52 + 32)];
          v124 = v52;
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v405[7])(v122, 0, 1, v52);
        }
        v163 = v48[12];
        v164 = (char *)v7 + v163;
        v165 = (char *)v8 + v163;
        v166 = type metadata accessor for Period();
        v167 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v166 - 8);
        if (v167[6](v165, 1, v166))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
          v169 = v124;
          v5 = v358;
        }
        else
        {
          v362 = (int *)v166;
          v369 = v167;
          v169 = v124;
          __dste = v164;
          if (v53(v165, 1, v124))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
            v171 = v362;
          }
          else
          {
            *v164 = *v165;
            *((_QWORD *)v164 + 1) = *((_QWORD *)v165 + 1);
            *((_DWORD *)v164 + 4) = *((_DWORD *)v165 + 4);
            *(_OWORD *)(v164 + 24) = *(_OWORD *)(v165 + 24);
            *(_OWORD *)(v164 + 40) = *(_OWORD *)(v165 + 40);
            *((_QWORD *)v164 + 7) = *((_QWORD *)v165 + 7);
            v179 = *(int *)(v124 + 28);
            v180 = &v164[v179];
            v181 = &v165[v179];
            v182 = sub_224F67874();
            v183 = *(_QWORD *)(v182 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v183 + 48))(v181, 1, v182))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v183 + 32))(v180, v181, v182);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v180, 0, 1, v182);
            }
            v171 = v362;
            v169 = v124;
            v164 = __dste;
            *(_OWORD *)&__dste[*(int *)(v124 + 32)] = *(_OWORD *)&v165[*(int *)(v124 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v405[7])(__dste, 0, 1, v124);
            v53 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v388;
            v48 = v396;
          }
          v5 = v358;
          v215 = v171[5];
          v216 = &v164[v215];
          v217 = &v165[v215];
          if (v53(v217, 1, v169))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v216, v217, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
          }
          else
          {
            *v216 = *v217;
            *((_QWORD *)v216 + 1) = *((_QWORD *)v217 + 1);
            *((_DWORD *)v216 + 4) = *((_DWORD *)v217 + 4);
            *(_OWORD *)(v216 + 24) = *(_OWORD *)(v217 + 24);
            *(_OWORD *)(v216 + 40) = *(_OWORD *)(v217 + 40);
            *((_QWORD *)v216 + 7) = *((_QWORD *)v217 + 7);
            v219 = *(int *)(v169 + 28);
            v364 = &v216[v219];
            v220 = &v217[v219];
            v221 = sub_224F67874();
            v222 = *(_QWORD *)(v221 - 8);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v222 + 48))(v220, 1, v221))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v364, v220, *(_QWORD *)(*(_QWORD *)(v223 - 8) + 64));
            }
            else
            {
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v222 + 32))(v364, v220, v221);
              (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v222 + 56))(v364, 0, 1, v221);
            }
            *(_OWORD *)&v216[*(int *)(v169 + 32)] = *(_OWORD *)&v217[*(int *)(v169 + 32)];
            ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v405[7])(v216, 0, 1, v169);
            v53 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v388;
            v48 = v396;
          }
          (*((void (**)(_BYTE *, _QWORD, uint64_t, int *))v369 + 7))(__dste, 0, 1, v171);
        }
        v257 = v48[13];
        v258 = (char *)v7 + v257;
        v259 = (char *)v8 + v257;
        if (v53((char *)v8 + v257, 1, v169))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v258, v259, *(_QWORD *)(*(_QWORD *)(v260 - 8) + 64));
        }
        else
        {
          *v258 = *v259;
          *((_QWORD *)v258 + 1) = *((_QWORD *)v259 + 1);
          *((_DWORD *)v258 + 4) = *((_DWORD *)v259 + 4);
          *(_OWORD *)(v258 + 24) = *(_OWORD *)(v259 + 24);
          *(_OWORD *)(v258 + 40) = *(_OWORD *)(v259 + 40);
          *((_QWORD *)v258 + 7) = *((_QWORD *)v259 + 7);
          v261 = *(int *)(v169 + 28);
          v390 = &v258[v261];
          v262 = &v259[v261];
          v263 = sub_224F67874();
          v264 = *(_QWORD *)(v263 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v264 + 48))(v262, 1, v263))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v390, v262, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v264 + 32))(v390, v262, v263);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v264 + 56))(v390, 0, 1, v263);
          }
          *(_OWORD *)&v258[*(int *)(v169 + 32)] = *(_OWORD *)&v259[*(int *)(v169 + 32)];
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v405[7])(v258, 0, 1, v169);
        }
        *(_QWORD *)((char *)v7 + v48[14]) = *(_QWORD *)((char *)v8 + v48[14]);
        *(_QWORD *)((char *)v7 + v48[15]) = *(_QWORD *)((char *)v8 + v48[15]);
        *(_OWORD *)((char *)v7 + v48[16]) = *(_OWORD *)((char *)v8 + v48[16]);
        v266 = v48[17];
        v267 = (char *)v7 + v266;
        v268 = (char *)v8 + v266;
        *((_QWORD *)v267 + 2) = *((_QWORD *)v268 + 2);
        *(_OWORD *)v267 = *(_OWORD *)v268;
        v269 = v48[18];
        v270 = (_OWORD *)((char *)v7 + v269);
        v271 = (_OWORD *)((char *)v8 + v269);
        v272 = type metadata accessor for Quantity();
        v273 = *(_QWORD *)(v272 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v273 + 48))(v271, 1, v272))
        {
          sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v270, v271, *(_QWORD *)(*(_QWORD *)(v274 - 8) + 64));
        }
        else
        {
          *v270 = *v271;
          *(_QWORD *)((char *)v270 + 13) = *(_QWORD *)((char *)v271 + 13);
          *(_OWORD *)((char *)v270 + 24) = *(_OWORD *)((char *)v271 + 24);
          *(_OWORD *)((char *)v270 + 40) = *(_OWORD *)((char *)v271 + 40);
          v275 = *(int *)(v272 + 28);
          v412 = (char *)v270 + v275;
          v276 = (char *)v271 + v275;
          v277 = sub_224F675D4();
          v278 = *(_QWORD *)(v277 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v278 + 48))(v276, 1, v277))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v412, v276, *(_QWORD *)(*(_QWORD *)(v279 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v278 + 32))(v412, v276, v277);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v278 + 56))(v412, 0, 1, v277);
          }
          v48 = v396;
          *(_OWORD *)((char *)v270 + *(int *)(v272 + 32)) = *(_OWORD *)((char *)v271 + *(int *)(v272 + 32));
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v273 + 56))(v270, 0, 1, v272);
        }
        v4 = v415;
        v10 = v424;
        v3 = v425;
        v9 = v426;
        *(_QWORD *)((char *)v7 + v48[19]) = *(_QWORD *)((char *)v8 + v48[19]);
        *(_OWORD *)((char *)v7 + v48[20]) = *(_OWORD *)((char *)v8 + v48[20]);
LABEL_187:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(v10 + 64));
        break;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)v5 + *(int *)(v3 + 24)) = *(_OWORD *)((char *)v4 + *(int *)(v3 + 24));
  return v5;
}

_QWORD *assignWithTake for ModelsR4.Bundle.BundleEntry(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  size_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned int (*v61)(_QWORD, _QWORD, _QWORD);
  uint64_t v62;
  __int128 v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unsigned int (*v69)(_QWORD, _QWORD, _QWORD);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  int *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  __int128 v93;
  int *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(_QWORD, _QWORD, _QWORD);
  uint64_t v101;
  __int128 v102;
  int *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unsigned int (*v108)(_QWORD, _QWORD, _QWORD);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int (*v138)(char *, uint64_t, uint64_t);
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unsigned int (**v184)(_BYTE *, uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  _OWORD *v224;
  char *v225;
  uint64_t v226;
  unsigned int (**v227)(_OWORD *, uint64_t, uint64_t);
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  _OWORD *v231;
  char *v232;
  uint64_t v233;
  void (**v234)(void);
  uint64_t v235;
  void (**v236)(_OWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  unsigned int (**v241)(_BYTE *, uint64_t, uint64_t);
  uint64_t v242;
  int *v243;
  uint64_t v244;
  int *v245;
  __int128 v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int (*v258)(char *, uint64_t, uint64_t);
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int *v278;
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  _OWORD *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  _OWORD *v368;
  char *v369;
  uint64_t v370;
  void (**v371)(void);
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  char *v376;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  char *v393;
  int *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  char *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  char *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  _OWORD *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  __int128 v436;
  uint64_t v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  char *v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  char *v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  char *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  _OWORD *v468;
  char *v469;
  uint64_t v470;
  _QWORD *v471;
  unsigned int (*v472)(_QWORD, _QWORD, _QWORD);
  uint64_t v473;
  __int128 v474;
  uint64_t v475;
  _OWORD *v476;
  char *v477;
  uint64_t v478;
  unsigned int (**v479)(_OWORD *, uint64_t, uint64_t);
  uint64_t v480;
  __int128 v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _OWORD *v490;
  char *v491;
  uint64_t v492;
  __int128 v493;
  uint64_t v494;
  _OWORD *v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  __int128 v500;
  uint64_t v501;
  char *v502;
  uint64_t v503;
  uint64_t v504;
  char *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  char *v509;
  char *v510;
  uint64_t v511;
  char *v512;
  uint64_t v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  uint64_t v519;
  uint64_t v520;
  char *v521;
  char *v522;
  uint64_t v523;
  uint64_t v524;
  char *v525;
  char *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  char *v531;
  char *v532;
  uint64_t v533;
  uint64_t v534;
  char *v535;
  uint64_t v536;
  char *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  char *v547;
  __int128 v548;
  __int128 v549;
  uint64_t v550;
  char *v551;
  char *v552;
  uint64_t v553;
  uint64_t v554;
  char *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v563;
  char *v564;
  char *v565;
  uint64_t v566;
  uint64_t v567;
  char *v568;
  char *v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  char *v574;
  char *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  char *v580;
  char *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  char *v586;
  char *v587;
  uint64_t v588;
  uint64_t v589;
  char *v590;
  char *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  char *v596;
  char *v597;
  uint64_t v598;
  uint64_t v599;
  char *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  char *v606;
  uint64_t v607;
  _OWORD *v608;
  char *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  char *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  char *v619;
  char *v620;
  uint64_t v621;
  uint64_t v622;
  char *v623;
  char *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  char *v629;
  char *v630;
  uint64_t v631;
  uint64_t v632;
  char *v633;
  char *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  _OWORD *v639;
  char *v640;
  uint64_t v641;
  uint64_t v642;
  unsigned int (*v643)(_QWORD, _QWORD, _QWORD);
  uint64_t v644;
  __int128 v645;
  uint64_t v646;
  _OWORD *v647;
  char *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  __int128 v652;
  uint64_t v653;
  char *v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  _OWORD *v661;
  char *v662;
  uint64_t v663;
  __int128 v664;
  uint64_t v665;
  _OWORD *v666;
  char *v667;
  uint64_t v668;
  unsigned int (**v669)(_OWORD *, uint64_t, uint64_t);
  uint64_t v670;
  __int128 v671;
  uint64_t v672;
  char *v673;
  uint64_t v674;
  uint64_t v675;
  char *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  char *v680;
  char *v681;
  uint64_t v682;
  uint64_t v683;
  char *v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  uint64_t v688;
  char *__src;
  char *__srca;
  void *__srcb;
  void (**v692)(char *, _QWORD, uint64_t, uint64_t);
  char *v693;
  char *v694;
  uint64_t v695;
  _QWORD *v696;
  char *v697;
  int *v698;
  char *v699;
  int *v700;
  void *v701;
  unsigned int (*v702)(char *, uint64_t);
  void *v703;
  void (**v704)(char *, _QWORD, uint64_t, int *);
  void *v705;
  _QWORD *v706;
  void (**v707)(void *, const void *, _QWORD);
  char *v708;
  char *v709;
  void *v710;
  void *v711;
  uint64_t v712;
  uint64_t v713;
  char *v714;
  char *v715;
  unsigned int (*v716)(char *, uint64_t);
  uint64_t v717;
  char *v718;
  uint64_t v719;
  uint64_t v720;
  char *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  int *__dst;
  _QWORD *__dsta;
  char *__dstb;
  _QWORD *__dstc;
  int *__dstd;
  void *__dste;
  char *__dstf;
  void *__dstg;
  char *__dsth;
  _QWORD *__dsti;
  void (**__dstj)(void);
  char *__dstk;
  void *__dstl;
  void *__dstm;
  void (**__dstn)(char *, _QWORD, uint64_t);
  char *__dsto;
  char *__dstp;
  char *__dstq;
  void *__dstr;
  unsigned int (*v744)(char *, uint64_t, uint64_t);
  int *v745;
  int *v746;
  void *v747;
  int *v748;
  char *v749;
  char *v750;
  _QWORD *v751;
  char *v752;
  void (**v753)(void);
  char *v754;
  int *v755;
  char *v756;
  char *v757;
  char *v758;
  void *v759;
  char *v760;
  int *v761;
  char *v762;
  _QWORD *v763;
  char *v764;
  void *v765;
  void (**v766)(char *, _QWORD, uint64_t);
  int *v767;
  unsigned int (*v768)(char *, uint64_t, uint64_t);
  _QWORD *v769;
  unsigned int (*v770)(char *, uint64_t, uint64_t);
  _QWORD *v771;
  _QWORD *v772;
  void *v773;
  void *v774;
  int *v775;
  char *v776;
  char *v777;
  char *v778;
  char *v779;
  char *v780;
  int *v781;
  char *v782;
  void *v783;
  char *v784;
  int *v785;
  int *v786;
  unsigned int (*v787)(char *, uint64_t, uint64_t);
  int *v788;
  int *v789;
  unsigned int (*v790)(char *, uint64_t, uint64_t);
  _QWORD *v791;
  _QWORD *v792;
  int *v793;
  void *v794;
  int *v795;
  void (**v796)(char *, _QWORD, uint64_t, uint64_t);
  void *v797;
  char *v798;
  char *v799;
  char *v800;
  _QWORD *v801;
  void *v802;
  char *v803;
  char *v804;
  uint64_t v805;
  unsigned int (*v806)(char *, uint64_t, uint64_t);
  int *v807;
  uint64_t v808;
  uint64_t v809;
  int *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  _QWORD *v816;
  _QWORD *v817;
  uint64_t v818;
  uint64_t v819;

  v4 = a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t)a1 + v7;
  v9 = (char *)v4 + v7;
  v10 = type metadata accessor for ModelsR4.ResourceProxy(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v805 = v11;
      v816 = v4;
      v818 = a3;
      v815 = v10;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          v18 = *((_OWORD *)v9 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v18;
          *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
          *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
          v19 = *((_QWORD *)v9 + 11);
          *(_QWORD *)(v8 + 80) = *((_QWORD *)v9 + 10);
          *(_QWORD *)(v8 + 88) = v19;
          v20 = *((_OWORD *)v9 + 6);
          *(_QWORD *)(v8 + 112) = *((_QWORD *)v9 + 14);
          *(_OWORD *)(v8 + 96) = v20;
          *(_OWORD *)(v8 + 120) = *(_OWORD *)(v9 + 120);
          v21 = *((_QWORD *)v9 + 18);
          *(_QWORD *)(v8 + 136) = *((_QWORD *)v9 + 17);
          *(_QWORD *)(v8 + 144) = v21;
          v22 = (int *)type metadata accessor for ModelsR4.Condition(0);
          v23 = v22[13];
          v24 = (char *)(v8 + v23);
          v25 = &v9[v23];
          v26 = type metadata accessor for FHIRDateTime();
          v712 = *(_QWORD *)(v26 - 8);
          v744 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v712 + 48);
          v767 = v22;
          __dst = (int *)v26;
          if (v744(v25, 1, v26))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
          }
          else
          {
            *v24 = *v25;
            *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
            *((_DWORD *)v24 + 4) = *((_DWORD *)v25 + 4);
            *(_OWORD *)(v24 + 24) = *(_OWORD *)(v25 + 24);
            *(_OWORD *)(v24 + 40) = *(_OWORD *)(v25 + 40);
            *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
            v71 = *(int *)(v26 + 28);
            v72 = &v24[v71];
            v73 = &v25[v71];
            v74 = sub_224F67874();
            v75 = *(_QWORD *)(v74 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v72, v73, v74);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
            }
            v26 = (uint64_t)__dst;
            *(_OWORD *)&v24[__dst[8]] = *(_OWORD *)&v25[__dst[8]];
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v712 + 56))(v24, 0, 1, __dst);
            v22 = v767;
          }
          v138 = v744;
          v139 = v22[14];
          v140 = (char *)(v8 + v139);
          v141 = &v9[v139];
          v142 = type metadata accessor for Period();
          v696 = *(_QWORD **)(v142 - 8);
          v793 = (int *)v142;
          v702 = (unsigned int (*)(char *, uint64_t))v696[6];
          if (v702(v141, 1))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
          }
          else
          {
            if (v744(v141, 1, v26))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
            }
            else
            {
              *v140 = *v141;
              *((_QWORD *)v140 + 1) = *((_QWORD *)v141 + 1);
              *((_DWORD *)v140 + 4) = *((_DWORD *)v141 + 4);
              *(_OWORD *)(v140 + 24) = *(_OWORD *)(v141 + 24);
              *(_OWORD *)(v140 + 40) = *(_OWORD *)(v141 + 40);
              *((_QWORD *)v140 + 7) = *((_QWORD *)v141 + 7);
              v207 = *(int *)(v26 + 28);
              v208 = &v140[v207];
              v209 = &v141[v207];
              v210 = sub_224F67874();
              v211 = *(_QWORD *)(v210 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48))(v209, 1, v210))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v211 + 32))(v208, v209, v210);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v211 + 56))(v208, 0, 1, v210);
              }
              v26 = (uint64_t)__dst;
              *(_OWORD *)&v140[__dst[8]] = *(_OWORD *)&v141[__dst[8]];
              (*(void (**)(char *, _QWORD, uint64_t, int *))(v712 + 56))(v140, 0, 1, __dst);
              v22 = v767;
            }
            v305 = v793[5];
            v306 = &v140[v305];
            v307 = &v141[v305];
            if (v744(v307, 1, v26))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v306, v307, *(_QWORD *)(*(_QWORD *)(v308 - 8) + 64));
            }
            else
            {
              *v306 = *v307;
              *((_QWORD *)v306 + 1) = *((_QWORD *)v307 + 1);
              *((_DWORD *)v306 + 4) = *((_DWORD *)v307 + 4);
              *(_OWORD *)(v306 + 24) = *(_OWORD *)(v307 + 24);
              *(_OWORD *)(v306 + 40) = *(_OWORD *)(v307 + 40);
              *((_QWORD *)v306 + 7) = *((_QWORD *)v307 + 7);
              v309 = *(int *)(v26 + 28);
              v310 = &v306[v309];
              v311 = &v307[v309];
              v312 = sub_224F67874();
              v313 = *(_QWORD *)(v312 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v313 + 48))(v311, 1, v312))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v310, v311, *(_QWORD *)(*(_QWORD *)(v314 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v313 + 32))(v310, v311, v312);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v313 + 56))(v310, 0, 1, v312);
              }
              v22 = v767;
              v26 = (uint64_t)__dst;
              *(_OWORD *)&v306[__dst[8]] = *(_OWORD *)&v307[__dst[8]];
              (*(void (**)(char *, _QWORD, uint64_t, int *))(v712 + 56))(v306, 0, 1, __dst);
              v138 = v744;
            }
            ((void (*)(char *, _QWORD, uint64_t, int *))v696[7])(v140, 0, 1, v793);
          }
          *(_OWORD *)(v8 + v22[15]) = *(_OWORD *)&v9[v22[15]];
          v381 = v22[16];
          v382 = (char *)(v8 + v381);
          v383 = &v9[v381];
          if (v138(&v9[v381], 1, v26))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v382, v383, *(_QWORD *)(*(_QWORD *)(v384 - 8) + 64));
          }
          else
          {
            *v382 = *v383;
            *((_QWORD *)v382 + 1) = *((_QWORD *)v383 + 1);
            *((_DWORD *)v382 + 4) = *((_DWORD *)v383 + 4);
            *(_OWORD *)(v382 + 24) = *(_OWORD *)(v383 + 24);
            *(_OWORD *)(v382 + 40) = *(_OWORD *)(v383 + 40);
            *((_QWORD *)v382 + 7) = *((_QWORD *)v383 + 7);
            v385 = *(int *)(v26 + 28);
            v386 = &v382[v385];
            v387 = &v383[v385];
            v388 = sub_224F67874();
            v389 = *(_QWORD *)(v388 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v389 + 48))(v387, 1, v388))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v386, v387, *(_QWORD *)(*(_QWORD *)(v390 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v389 + 32))(v386, v387, v388);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v389 + 56))(v386, 0, 1, v388);
            }
            v26 = (uint64_t)__dst;
            *(_OWORD *)&v382[__dst[8]] = *(_OWORD *)&v383[__dst[8]];
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v712 + 56))(v382, 0, 1, __dst);
            v138 = v744;
            v22 = v767;
          }
          v391 = v22[17];
          v392 = (char *)(v8 + v391);
          v393 = &v9[v391];
          v394 = v793;
          if (((unsigned int (*)(char *, uint64_t, int *))v702)(&v9[v391], 1, v793))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v392, v393, *(_QWORD *)(*(_QWORD *)(v395 - 8) + 64));
          }
          else
          {
            if (v138(v393, 1, v26))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v392, v393, *(_QWORD *)(*(_QWORD *)(v396 - 8) + 64));
            }
            else
            {
              *v392 = *v393;
              *((_QWORD *)v392 + 1) = *((_QWORD *)v393 + 1);
              *((_DWORD *)v392 + 4) = *((_DWORD *)v393 + 4);
              *(_OWORD *)(v392 + 24) = *(_OWORD *)(v393 + 24);
              *(_OWORD *)(v392 + 40) = *(_OWORD *)(v393 + 40);
              *((_QWORD *)v392 + 7) = *((_QWORD *)v393 + 7);
              v397 = *(int *)(v26 + 28);
              v398 = &v392[v397];
              v399 = &v393[v397];
              v400 = sub_224F67874();
              v401 = *(_QWORD *)(v400 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v401 + 48))(v399, 1, v400))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v398, v399, *(_QWORD *)(*(_QWORD *)(v402 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v401 + 32))(v398, v399, v400);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v401 + 56))(v398, 0, 1, v400);
              }
              v26 = (uint64_t)__dst;
              *(_OWORD *)&v392[__dst[8]] = *(_OWORD *)&v393[__dst[8]];
              (*(void (**)(char *, _QWORD, uint64_t, int *))(v712 + 56))(v392, 0, 1, __dst);
              v138 = v744;
              v22 = v767;
              v394 = v793;
            }
            v447 = v394[5];
            v448 = &v392[v447];
            v449 = &v393[v447];
            if (v138(v449, 1, v26))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v448, v449, *(_QWORD *)(*(_QWORD *)(v450 - 8) + 64));
            }
            else
            {
              *v448 = *v449;
              *((_QWORD *)v448 + 1) = *((_QWORD *)v449 + 1);
              *((_DWORD *)v448 + 4) = *((_DWORD *)v449 + 4);
              *(_OWORD *)(v448 + 24) = *(_OWORD *)(v449 + 24);
              *(_OWORD *)(v448 + 40) = *(_OWORD *)(v449 + 40);
              *((_QWORD *)v448 + 7) = *((_QWORD *)v449 + 7);
              v451 = *(int *)(v26 + 28);
              v452 = &v448[v451];
              v453 = &v449[v451];
              v454 = sub_224F67874();
              v455 = *(_QWORD *)(v454 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v455 + 48))(v453, 1, v454))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v452, v453, *(_QWORD *)(*(_QWORD *)(v456 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v455 + 32))(v452, v453, v454);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v455 + 56))(v452, 0, 1, v454);
              }
              v22 = v767;
              v26 = (uint64_t)__dst;
              *(_OWORD *)&v448[__dst[8]] = *(_OWORD *)&v449[__dst[8]];
              (*(void (**)(char *, _QWORD, uint64_t, int *))(v712 + 56))(v448, 0, 1, __dst);
              v138 = v744;
            }
            ((void (*)(char *, _QWORD, uint64_t, int *))v696[7])(v392, 0, 1, v793);
          }
          *(_OWORD *)(v8 + v22[18]) = *(_OWORD *)&v9[v22[18]];
          v457 = v22[19];
          v458 = (char *)(v8 + v457);
          v459 = &v9[v457];
          if (v138(&v9[v457], 1, v26))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v458, v459, *(_QWORD *)(*(_QWORD *)(v460 - 8) + 64));
          }
          else
          {
            *v458 = *v459;
            *((_QWORD *)v458 + 1) = *((_QWORD *)v459 + 1);
            *((_DWORD *)v458 + 4) = *((_DWORD *)v459 + 4);
            *(_OWORD *)(v458 + 24) = *(_OWORD *)(v459 + 24);
            *(_OWORD *)(v458 + 40) = *(_OWORD *)(v459 + 40);
            *((_QWORD *)v458 + 7) = *((_QWORD *)v459 + 7);
            v461 = *(int *)(v26 + 28);
            v462 = &v458[v461];
            v463 = &v459[v461];
            v464 = sub_224F67874();
            v465 = *(_QWORD *)(v464 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v465 + 48))(v463, 1, v464))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v462, v463, *(_QWORD *)(*(_QWORD *)(v466 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v465 + 32))(v462, v463, v464);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v465 + 56))(v462, 0, 1, v464);
            }
            *(_OWORD *)&v458[__dst[8]] = *(_OWORD *)&v459[__dst[8]];
            (*(void (**)(char *, _QWORD, uint64_t))(v712 + 56))(v458, 0, 1);
            v22 = v767;
          }
          v467 = v22[20];
          v468 = (_OWORD *)(v8 + v467);
          v469 = &v9[v467];
          v470 = type metadata accessor for Reference();
          v471 = *(_QWORD **)(v470 - 8);
          v472 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v471[6];
          if (v472(v469, 1, v470))
          {
            sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v468, v469, *(_QWORD *)(*(_QWORD *)(v473 - 8) + 64));
          }
          else
          {
            v759 = v472;
            v801 = v471;
            v474 = *((_OWORD *)v469 + 1);
            *v468 = *(_OWORD *)v469;
            v468[1] = v474;
            v475 = *(int *)(v470 + 24);
            v476 = (_OWORD *)((char *)v468 + v475);
            v477 = &v469[v475];
            v478 = type metadata accessor for Identifier();
            v479 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v478 - 8);
            if (((unsigned int (**)(char *, uint64_t, uint64_t))v479)[6](v477, 1, v478))
            {
              sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v476, v477, *(_QWORD *)(*(_QWORD *)(v480 - 8) + 64));
              v472 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v759;
            }
            else
            {
              v481 = *((_OWORD *)v477 + 1);
              *v476 = *(_OWORD *)v477;
              v476[1] = v481;
              *((_QWORD *)v476 + 4) = *((_QWORD *)v477 + 4);
              v482 = *(int *)(v478 + 24);
              v721 = (char *)v476 + v482;
              __dstl = v479;
              v483 = &v477[v482];
              v484 = sub_224F675D4();
              v485 = *(_QWORD *)(v484 - 8);
              v701 = (void *)v484;
              v709 = v483;
              v486 = (*(uint64_t (**)(char *, uint64_t))(v485 + 48))(v483, 1);
              v487 = v478;
              if (v486)
              {
                sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v721, v709, *(_QWORD *)(*(_QWORD *)(v488 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(v485 + 32))(v721, v709, v701);
                (*(void (**)(char *, _QWORD, uint64_t, void *))(v485 + 56))(v721, 0, 1, v701);
              }
              *(_OWORD *)((char *)v476 + *(int *)(v478 + 28)) = *(_OWORD *)&v477[*(int *)(v478 + 28)];
              v472 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v759;
              (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))__dstl + 7))(v476, 0, 1, v487);
              v22 = v767;
            }
            v471 = v801;
            ((void (*)(_OWORD *, _QWORD, uint64_t, uint64_t))v801[7])(v468, 0, 1, v470);
          }
          v489 = v22[21];
          v490 = (_OWORD *)(v8 + v489);
          v491 = &v9[v489];
          if (v472(&v9[v489], 1, v470))
          {
            sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v490, v491, *(_QWORD *)(*(_QWORD *)(v492 - 8) + 64));
            a3 = v818;
          }
          else
          {
            v802 = v471;
            v493 = *((_OWORD *)v491 + 1);
            *v490 = *(_OWORD *)v491;
            v490[1] = v493;
            v494 = *(int *)(v470 + 24);
            v495 = (_OWORD *)((char *)v490 + v494);
            v496 = &v491[v494];
            v497 = type metadata accessor for Identifier();
            v498 = *(_QWORD *)(v497 - 8);
            a3 = v818;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v498 + 48))(v496, 1, v497))
            {
              sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v495, v496, *(_QWORD *)(*(_QWORD *)(v499 - 8) + 64));
            }
            else
            {
              v722 = v498;
              v500 = *((_OWORD *)v496 + 1);
              *v495 = *(_OWORD *)v496;
              v495[1] = v500;
              *((_QWORD *)v495 + 4) = *((_QWORD *)v496 + 4);
              v501 = *(int *)(v497 + 24);
              v760 = (char *)v495 + v501;
              v502 = &v496[v501];
              v503 = sub_224F675D4();
              v504 = *(_QWORD *)(v503 - 8);
              __dstm = v502;
              v505 = v502;
              v506 = v503;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v504 + 48))(v505, 1, v503))
              {
                sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v760, __dstm, *(_QWORD *)(*(_QWORD *)(v507 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, void *, uint64_t))(v504 + 32))(v760, __dstm, v506);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v504 + 56))(v760, 0, 1, v506);
              }
              a3 = v818;
              *(_OWORD *)((char *)v495 + *(int *)(v497 + 28)) = *(_OWORD *)&v496[*(int *)(v497 + 28)];
              (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v722 + 56))(v495, 0, 1, v497);
            }
            (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v802 + 7))(v490, 0, 1, v470);
            v22 = v767;
          }
          *(_QWORD *)(v8 + v22[22]) = *(_QWORD *)&v9[v22[22]];
          *(_OWORD *)(v8 + v22[23]) = *(_OWORD *)&v9[v22[23]];
          v10 = v815;
          goto LABEL_256;
        case 3u:
          v38 = *((_OWORD *)v9 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v38;
          *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
          *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
          *(_QWORD *)(v8 + 80) = *((_QWORD *)v9 + 10);
          *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
          v39 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
          v40 = v39[11];
          v41 = (char *)(v8 + v40);
          v42 = &v9[v40];
          v43 = type metadata accessor for FHIRDateTime();
          v769 = *(_QWORD **)(v43 - 8);
          v787 = (unsigned int (*)(char *, uint64_t, uint64_t))v769[6];
          v746 = v39;
          if (v787(v42, 1, v43))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          }
          else
          {
            *v41 = *v42;
            *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
            *((_DWORD *)v41 + 4) = *((_DWORD *)v42 + 4);
            *(_OWORD *)(v41 + 24) = *(_OWORD *)(v42 + 24);
            *(_OWORD *)(v41 + 40) = *(_OWORD *)(v42 + 40);
            *((_QWORD *)v41 + 7) = *((_QWORD *)v42 + 7);
            v110 = *(int *)(v43 + 28);
            __dstb = &v41[v110];
            v111 = &v42[v110];
            v112 = sub_224F67874();
            v113 = *(_QWORD *)(v112 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dstb, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v113 + 32))(__dstb, v111, v112);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(__dstb, 0, 1, v112);
            }
            *(_OWORD *)&v41[*(int *)(v43 + 32)] = *(_OWORD *)&v42[*(int *)(v43 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v769[7])(v41, 0, 1, v43);
            v39 = v746;
          }
          v166 = v39[12];
          v167 = (char *)(v8 + v166);
          v168 = &v9[v166];
          v169 = type metadata accessor for Period();
          v170 = *(void **)(v169 - 8);
          if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v170 + 6))(v168, 1, v169))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
          }
          else
          {
            if (v787(v168, 1, v43))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
            }
            else
            {
              *v167 = *v168;
              *((_QWORD *)v167 + 1) = *((_QWORD *)v168 + 1);
              *((_DWORD *)v167 + 4) = *((_DWORD *)v168 + 4);
              *(_OWORD *)(v167 + 24) = *(_OWORD *)(v168 + 24);
              *(_OWORD *)(v167 + 40) = *(_OWORD *)(v168 + 40);
              *((_QWORD *)v167 + 7) = *((_QWORD *)v168 + 7);
              v213 = *(int *)(v43 + 28);
              v714 = &v167[v213];
              __dste = v170;
              v214 = &v168[v213];
              v215 = sub_224F67874();
              v216 = *(_QWORD *)(v215 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v216 + 48))(v214, 1, v215))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v714, v214, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v216 + 32))(v714, v214, v215);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v714, 0, 1, v215);
              }
              *(_OWORD *)&v167[*(int *)(v43 + 32)] = *(_OWORD *)&v168[*(int *)(v43 + 32)];
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v769[7])(v167, 0, 1, v43);
              v170 = __dste;
              v39 = v746;
            }
            v315 = *(int *)(v169 + 20);
            v316 = &v167[v315];
            v317 = &v168[v315];
            if (v787(v317, 1, v43))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v316, v317, *(_QWORD *)(*(_QWORD *)(v318 - 8) + 64));
            }
            else
            {
              *v316 = *v317;
              *((_QWORD *)v316 + 1) = *((_QWORD *)v317 + 1);
              *((_DWORD *)v316 + 4) = *((_DWORD *)v317 + 4);
              *(_OWORD *)(v316 + 24) = *(_OWORD *)(v317 + 24);
              *(_OWORD *)(v316 + 40) = *(_OWORD *)(v317 + 40);
              *((_QWORD *)v316 + 7) = *((_QWORD *)v317 + 7);
              v319 = *(int *)(v43 + 28);
              __dsth = &v316[v319];
              v320 = &v317[v319];
              v321 = sub_224F67874();
              v707 = *(void (***)(void *, const void *, _QWORD))(v321 - 8);
              v718 = v320;
              v322 = v320;
              v323 = v321;
              if (((unsigned int (*)(char *, uint64_t, uint64_t))v707[6])(v322, 1, v321))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(__dsth, v718, *(_QWORD *)(*(_QWORD *)(v324 - 8) + 64));
              }
              else
              {
                v707[4](__dsth, v718, v323);
                ((void (*)(char *, _QWORD, uint64_t, uint64_t))v707[7])(__dsth, 0, 1, v323);
              }
              *(_OWORD *)&v316[*(int *)(v43 + 32)] = *(_OWORD *)&v317[*(int *)(v43 + 32)];
              v39 = v746;
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v769[7])(v316, 0, 1, v43);
            }
            (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v170 + 7))(v167, 0, 1, v169);
          }
          v403 = v39[13];
          v404 = (char *)(v8 + v403);
          v405 = &v9[v403];
          v4 = v816;
          a3 = v818;
          if (v787(&v9[v403], 1, v43))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v404, v405, *(_QWORD *)(*(_QWORD *)(v406 - 8) + 64));
          }
          else
          {
            *v404 = *v405;
            *((_QWORD *)v404 + 1) = *((_QWORD *)v405 + 1);
            *((_DWORD *)v404 + 4) = *((_DWORD *)v405 + 4);
            *(_OWORD *)(v404 + 24) = *(_OWORD *)(v405 + 24);
            *(_OWORD *)(v404 + 40) = *(_OWORD *)(v405 + 40);
            *((_QWORD *)v404 + 7) = *((_QWORD *)v405 + 7);
            v407 = *(int *)(v43 + 28);
            v799 = &v404[v407];
            v408 = &v405[v407];
            v409 = sub_224F67874();
            v410 = *(_QWORD *)(v409 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v410 + 48))(v408, 1, v409))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v799, v408, *(_QWORD *)(*(_QWORD *)(v411 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v410 + 32))(v799, v408, v409);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v410 + 56))(v799, 0, 1, v409);
            }
            v4 = v816;
            *(_OWORD *)&v404[*(int *)(v43 + 32)] = *(_OWORD *)&v405[*(int *)(v43 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v769[7])(v404, 0, 1, v43);
            v39 = v746;
          }
          *(_QWORD *)(v8 + v39[14]) = *(_QWORD *)&v9[v39[14]];
          *(_QWORD *)(v8 + v39[15]) = *(_QWORD *)&v9[v39[15]];
          *(_OWORD *)(v8 + v39[16]) = *(_OWORD *)&v9[v39[16]];
          v10 = v815;
          goto LABEL_292;
        case 4u:
          v45 = *((_OWORD *)v9 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v45;
          *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
          *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
          v46 = *((_QWORD *)v9 + 12);
          *(_QWORD *)(v8 + 88) = *((_QWORD *)v9 + 11);
          *(_QWORD *)(v8 + 96) = v46;
          v47 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
          v48 = v47[11];
          v49 = (char *)(v8 + v48);
          v50 = &v9[v48];
          v51 = type metadata accessor for FHIRDateTime();
          v52 = *(_QWORD **)(v51 - 8);
          v770 = (unsigned int (*)(char *, uint64_t, uint64_t))v52[6];
          if (v770(v50, 1, v51))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
          }
          else
          {
            __dstc = v52;
            v748 = (int *)v51;
            *v49 = *v50;
            *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
            *((_DWORD *)v49 + 4) = *((_DWORD *)v50 + 4);
            *(_OWORD *)(v49 + 24) = *(_OWORD *)(v50 + 24);
            *(_OWORD *)(v49 + 40) = *(_OWORD *)(v50 + 40);
            *((_QWORD *)v49 + 7) = *((_QWORD *)v50 + 7);
            v115 = *(int *)(v51 + 28);
            v116 = &v49[v115];
            v117 = &v50[v115];
            v118 = sub_224F67874();
            v119 = *(_QWORD *)(v118 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v116, v117, v118);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
            }
            v52 = __dstc;
            v51 = (uint64_t)v748;
            *(_OWORD *)&v49[v748[8]] = *(_OWORD *)&v50[v748[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))__dstc[7])(v49, 0, 1, v748);
          }
          *(_OWORD *)(v8 + v47[12]) = *(_OWORD *)&v9[v47[12]];
          *(_QWORD *)(v8 + v47[13]) = *(_QWORD *)&v9[v47[13]];
          *(_QWORD *)(v8 + v47[14]) = *(_QWORD *)&v9[v47[14]];
          v795 = v47;
          v173 = v47[15];
          v174 = (_QWORD *)(v8 + v173);
          v175 = &v9[v173];
          v176 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
          v177 = *(_QWORD *)(v176 - 8);
          v4 = v816;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v177 + 48))(v175, 1, v176))
          {
            sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
            a3 = v818;
            v179 = v795;
          }
          else
          {
            v703 = v174;
            v713 = v177;
            *v174 = *(_QWORD *)v175;
            v180 = *(int *)(v176 + 20);
            v181 = (char *)v174 + v180;
            v182 = &v175[v180];
            v183 = type metadata accessor for Period();
            v184 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v183 - 8);
            if (v184[6](v182, 1, v183))
            {
              sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
              v4 = v816;
              a3 = v818;
              v187 = v703;
              v186 = v713;
              v179 = v795;
            }
            else
            {
              v692 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v184;
              v695 = v183;
              v697 = v181;
              v179 = v795;
              if (v770(v182, 1, v51))
              {
                sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                v219 = v697;
                memcpy(v697, v182, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
              }
              else
              {
                __dsti = v52;
                v755 = (int *)v51;
                *v697 = *v182;
                *((_QWORD *)v697 + 1) = *((_QWORD *)v182 + 1);
                *((_DWORD *)v697 + 4) = *((_DWORD *)v182 + 4);
                *(_OWORD *)(v697 + 24) = *(_OWORD *)(v182 + 24);
                *(_OWORD *)(v697 + 40) = *(_OWORD *)(v182 + 40);
                *((_QWORD *)v697 + 7) = *((_QWORD *)v182 + 7);
                v325 = *(int *)(v51 + 28);
                __src = &v697[v325];
                v326 = &v182[v325];
                v327 = sub_224F67874();
                v328 = *(_QWORD *)(v327 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v328 + 48))(v326, 1, v327))
                {
                  sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                  memcpy(__src, v326, *(_QWORD *)(*(_QWORD *)(v329 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v328 + 32))(__src, v326, v327);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v328 + 56))(__src, 0, 1, v327);
                }
                v52 = __dsti;
                v51 = (uint64_t)v755;
                v219 = v697;
                *(_OWORD *)&v697[v755[8]] = *(_OWORD *)&v182[v755[8]];
                ((void (*)(char *, _QWORD, uint64_t, int *))__dsti[7])(v697, 0, 1, v755);
              }
              v508 = *(int *)(v695 + 20);
              v509 = &v219[v508];
              v510 = &v182[v508];
              if (v770(v510, 1, v51))
              {
                sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v509, v510, *(_QWORD *)(*(_QWORD *)(v511 - 8) + 64));
                a3 = v818;
                v512 = v697;
                v187 = v703;
              }
              else
              {
                __dstn = (void (**)(char *, _QWORD, uint64_t))v52;
                v761 = (int *)v51;
                *v509 = *v510;
                *((_QWORD *)v509 + 1) = *((_QWORD *)v510 + 1);
                *((_DWORD *)v509 + 4) = *((_DWORD *)v510 + 4);
                *(_OWORD *)(v509 + 24) = *(_OWORD *)(v510 + 24);
                *(_OWORD *)(v509 + 40) = *(_OWORD *)(v510 + 40);
                *((_QWORD *)v509 + 7) = *((_QWORD *)v510 + 7);
                v513 = *(int *)(v51 + 28);
                v780 = &v509[v513];
                v514 = &v510[v513];
                v515 = sub_224F67874();
                v516 = *(_QWORD *)(v515 - 8);
                __srca = v514;
                v517 = v515;
                v518 = (*(uint64_t (**)(char *, uint64_t))(v516 + 48))(v514, 1);
                a3 = v818;
                if (v518)
                {
                  sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                  memcpy(v780, __srca, *(_QWORD *)(*(_QWORD *)(v519 - 8) + 64));
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v516 + 32))(v780, __srca, v517);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v516 + 56))(v780, 0, 1, v517);
                }
                v512 = v697;
                v187 = v703;
                *(_OWORD *)&v509[v761[8]] = *(_OWORD *)&v510[v761[8]];
                __dstn[7](v509, 0, 1);
              }
              v692[7](v512, 0, 1, v695);
              v4 = v816;
              v186 = v713;
            }
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v187, 0, 1, v176);
          }
          *(_OWORD *)(v8 + v179[16]) = *(_OWORD *)&v9[v179[16]];
          v10 = v815;
LABEL_292:
          swift_storeEnumTagMultiPayload();
          goto LABEL_293;
        case 5u:
          v54 = *((_OWORD *)v9 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v54;
          *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
          *(_QWORD *)(v8 + 61) = *(_QWORD *)(v9 + 61);
          *(_QWORD *)(v8 + 72) = *((_QWORD *)v9 + 9);
          v55 = (int *)type metadata accessor for ModelsR4.Immunization(0);
          v56 = v55[10];
          v57 = (char *)(v8 + v56);
          v58 = &v9[v56];
          v59 = type metadata accessor for FHIRDateTime();
          v60 = *(_QWORD **)(v59 - 8);
          v61 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v60[6];
          if (v61(v58, 1, v59))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
          }
          else
          {
            v774 = v61;
            v792 = v60;
            *v57 = *v58;
            *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
            *((_DWORD *)v57 + 4) = *((_DWORD *)v58 + 4);
            *(_OWORD *)(v57 + 24) = *(_OWORD *)(v58 + 24);
            *(_OWORD *)(v57 + 40) = *(_OWORD *)(v58 + 40);
            *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
            v121 = *(int *)(v59 + 28);
            v749 = &v57[v121];
            v122 = &v58[v121];
            v123 = sub_224F67874();
            v124 = *(_QWORD *)(v123 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v122, 1, v123))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v749, v122, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v749, v122, v123);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v749, 0, 1, v123);
            }
            *(_OWORD *)&v57[*(int *)(v59 + 32)] = *(_OWORD *)&v58[*(int *)(v59 + 32)];
            v60 = v792;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v792[7])(v57, 0, 1, v59);
            v61 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v774;
          }
          *(_QWORD *)(v8 + v55[11]) = *(_QWORD *)&v9[v55[11]];
          v188 = v55[12];
          v189 = (char *)(v8 + v188);
          v190 = &v9[v188];
          if (v61(&v9[v188], 1, v59))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
          }
          else
          {
            *v189 = *v190;
            *((_QWORD *)v189 + 1) = *((_QWORD *)v190 + 1);
            *((_DWORD *)v189 + 4) = *((_DWORD *)v190 + 4);
            *(_OWORD *)(v189 + 24) = *(_OWORD *)(v190 + 24);
            *(_OWORD *)(v189 + 40) = *(_OWORD *)(v190 + 40);
            *((_QWORD *)v189 + 7) = *((_QWORD *)v190 + 7);
            v192 = *(int *)(v59 + 28);
            v777 = &v189[v192];
            v796 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v60;
            v193 = &v190[v192];
            v194 = sub_224F67874();
            v195 = *(_QWORD *)(v194 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v195 + 48))(v193, 1, v194))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v777, v193, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v195 + 32))(v777, v193, v194);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v195 + 56))(v777, 0, 1, v194);
            }
            *(_OWORD *)&v189[*(int *)(v59 + 32)] = *(_OWORD *)&v190[*(int *)(v59 + 32)];
            v796[7](v189, 0, 1, v59);
          }
          v220 = v55[13];
          v221 = v8 + v220;
          v222 = &v9[v220];
          *(_OWORD *)v221 = *(_OWORD *)v222;
          *(_QWORD *)(v221 + 16) = *((_QWORD *)v222 + 2);
          v223 = v55[14];
          v224 = (_OWORD *)(v8 + v223);
          v225 = &v9[v223];
          v226 = type metadata accessor for Reference();
          v227 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v226 - 8);
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v227)[6](v225, 1, v226))
          {
            sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v224, v225, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
          }
          else
          {
            v797 = v227;
            v229 = *((_OWORD *)v225 + 1);
            *v224 = *(_OWORD *)v225;
            v224[1] = v229;
            v230 = *(int *)(v226 + 24);
            v231 = (_OWORD *)((char *)v224 + v230);
            v232 = &v225[v230];
            v233 = type metadata accessor for Identifier();
            v234 = *(void (***)(void))(v233 - 8);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v234[6])(v232, 1, v233))
            {
              sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v231, v232, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
              v236 = (void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v797;
            }
            else
            {
              v753 = v234;
              v778 = (char *)v231;
              v246 = *((_OWORD *)v232 + 1);
              *v231 = *(_OWORD *)v232;
              v231[1] = v246;
              *((_QWORD *)v231 + 4) = *((_QWORD *)v232 + 4);
              v247 = *(int *)(v233 + 24);
              __dstf = (char *)v231 + v247;
              v248 = &v232[v247];
              v249 = sub_224F675D4();
              v250 = *(_QWORD *)(v249 - 8);
              v705 = (void *)v249;
              if ((*(unsigned int (**)(char *, uint64_t))(v250 + 48))(v248, 1))
              {
                sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(__dstf, v248, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(v250 + 32))(__dstf, v248, v705);
                (*(void (**)(char *, _QWORD, uint64_t, void *))(v250 + 56))(__dstf, 0, 1, v705);
              }
              v236 = (void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v797;
              *(_OWORD *)&v778[*(int *)(v233 + 28)] = *(_OWORD *)&v232[*(int *)(v233 + 28)];
              v753[7]();
            }
            v236[7](v224, 0, 1, v226);
          }
          v4 = v816;
          *(_BYTE *)(v8 + v55[15]) = v9[v55[15]];
          *(_OWORD *)(v8 + v55[16]) = *(_OWORD *)&v9[v55[16]];
          *(_QWORD *)(v8 + v55[17]) = *(_QWORD *)&v9[v55[17]];
          *(_BYTE *)(v8 + v55[18]) = v9[v55[18]];
          v330 = v55[19];
          v331 = v8 + v330;
          v332 = &v9[v330];
          *(_QWORD *)(v331 + 48) = *((_QWORD *)v332 + 6);
          v333 = *((_OWORD *)v332 + 2);
          v334 = *(_OWORD *)v332;
          *(_OWORD *)(v331 + 16) = *((_OWORD *)v332 + 1);
          *(_OWORD *)(v331 + 32) = v333;
          *(_OWORD *)v331 = v334;
          *(_OWORD *)(v8 + v55[20]) = *(_OWORD *)&v9[v55[20]];
          v10 = v815;
          swift_storeEnumTagMultiPayload();
          a3 = v818;
          goto LABEL_293;
        case 6u:
          v63 = *((_OWORD *)v9 + 1);
          *(_OWORD *)v8 = *(_OWORD *)v9;
          *(_OWORD *)(v8 + 16) = v63;
          *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
          *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
          *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
          *(_QWORD *)(v8 + 80) = *((_QWORD *)v9 + 10);
          v64 = (int *)type metadata accessor for ModelsR4.Observation(0);
          v65 = v64[10];
          v66 = (char *)(v8 + v65);
          v67 = &v9[v65];
          v68 = type metadata accessor for FHIRDateTime();
          v771 = *(_QWORD **)(v68 - 8);
          v69 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v771[6];
          v788 = v64;
          v747 = v69;
          if (v69(v67, 1, v68))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          }
          else
          {
            *v66 = *v67;
            *((_QWORD *)v66 + 1) = *((_QWORD *)v67 + 1);
            *((_DWORD *)v66 + 4) = *((_DWORD *)v67 + 4);
            *(_OWORD *)(v66 + 24) = *(_OWORD *)(v67 + 24);
            *(_OWORD *)(v66 + 40) = *(_OWORD *)(v67 + 40);
            *((_QWORD *)v66 + 7) = *((_QWORD *)v67 + 7);
            v126 = *(int *)(v68 + 28);
            v127 = &v66[v126];
            v128 = &v67[v126];
            v129 = sub_224F67874();
            v130 = *(_QWORD *)(v129 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v127, v128, v129);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
            }
            *(_OWORD *)&v66[*(int *)(v68 + 32)] = *(_OWORD *)&v67[*(int *)(v68 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v771[7])(v66, 0, 1, v68);
            a3 = v818;
            v64 = v788;
            v69 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v747;
          }
          v197 = v64[11];
          v198 = (char *)(v8 + v197);
          v199 = &v9[v197];
          __dstd = (int *)v68;
          if (v69(&v9[v197], 1, v68))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
          }
          else
          {
            *v198 = *v199;
            *((_QWORD *)v198 + 1) = *((_QWORD *)v199 + 1);
            *((_DWORD *)v198 + 4) = *((_DWORD *)v199 + 4);
            *(_OWORD *)(v198 + 24) = *(_OWORD *)(v199 + 24);
            *(_OWORD *)(v198 + 40) = *(_OWORD *)(v199 + 40);
            *((_QWORD *)v198 + 7) = *((_QWORD *)v199 + 7);
            v201 = *(int *)(v68 + 28);
            v202 = &v198[v201];
            v203 = &v199[v201];
            v204 = sub_224F67874();
            v205 = *(_QWORD *)(v204 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v205 + 48))(v203, 1, v204))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v205 + 32))(v202, v203, v204);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v202, 0, 1, v204);
            }
            *(_OWORD *)&v198[*(int *)(v68 + 32)] = *(_OWORD *)&v199[*(int *)(v68 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v771[7])(v198, 0, 1, v68);
            a3 = v818;
            v64 = v788;
            v69 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v747;
          }
          v237 = v64[12];
          v238 = (char *)(v8 + v237);
          v239 = &v9[v237];
          v240 = type metadata accessor for Period();
          v241 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v240 - 8);
          if (v241[6](v239, 1, v240))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v242 - 8) + 64));
            v243 = __dstd;
          }
          else
          {
            v698 = (int *)v240;
            v704 = (void (**)(char *, _QWORD, uint64_t, int *))v241;
            v243 = __dstd;
            v715 = v238;
            if (v69(v239, 1, __dstd))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v238, v239, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
              v245 = v698;
            }
            else
            {
              *v238 = *v239;
              *((_QWORD *)v238 + 1) = *((_QWORD *)v239 + 1);
              *((_DWORD *)v238 + 4) = *((_DWORD *)v239 + 4);
              *(_OWORD *)(v238 + 24) = *(_OWORD *)(v239 + 24);
              *(_OWORD *)(v238 + 40) = *(_OWORD *)(v239 + 40);
              *((_QWORD *)v238 + 7) = *((_QWORD *)v239 + 7);
              v252 = __dstd[7];
              v253 = &v238[v252];
              v254 = &v239[v252];
              v255 = sub_224F67874();
              v256 = *(_QWORD *)(v255 - 8);
              v245 = v698;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v256 + 48))(v254, 1, v255))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v253, v254, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v256 + 32))(v253, v254, v255);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v256 + 56))(v253, 0, 1, v255);
              }
              v243 = __dstd;
              v238 = v715;
              *(_OWORD *)&v715[__dstd[8]] = *(_OWORD *)&v239[__dstd[8]];
              ((void (*)(char *, _QWORD, uint64_t, int *))v771[7])(v715, 0, 1, __dstd);
              a3 = v818;
              v64 = v788;
              v69 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v747;
            }
            v335 = v245[5];
            v336 = &v238[v335];
            v337 = &v239[v335];
            if (v69(v337, 1, v243))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v336, v337, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
            }
            else
            {
              *v336 = *v337;
              *((_QWORD *)v336 + 1) = *((_QWORD *)v337 + 1);
              *((_DWORD *)v336 + 4) = *((_DWORD *)v337 + 4);
              *(_OWORD *)(v336 + 24) = *(_OWORD *)(v337 + 24);
              *(_OWORD *)(v336 + 40) = *(_OWORD *)(v337 + 40);
              *((_QWORD *)v336 + 7) = *((_QWORD *)v337 + 7);
              v339 = v243[7];
              v699 = &v336[v339];
              v340 = &v337[v339];
              v341 = sub_224F67874();
              v342 = *(_QWORD *)(v341 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v342 + 48))(v340, 1, v341))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v699, v340, *(_QWORD *)(*(_QWORD *)(v343 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v342 + 32))(v699, v340, v341);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v342 + 56))(v699, 0, 1, v341);
              }
              a3 = v818;
              *(_OWORD *)&v336[v243[8]] = *(_OWORD *)&v337[v243[8]];
              ((void (*)(char *, _QWORD, uint64_t, int *))v771[7])(v336, 0, 1, v243);
              v64 = v788;
              v69 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v747;
            }
            v704[7](v715, 0, 1, v245);
          }
          v412 = v64[13];
          v413 = (char *)(v8 + v412);
          v414 = &v9[v412];
          if (v69(&v9[v412], 1, v243))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v413, v414, *(_QWORD *)(*(_QWORD *)(v415 - 8) + 64));
          }
          else
          {
            *v413 = *v414;
            *((_QWORD *)v413 + 1) = *((_QWORD *)v414 + 1);
            *((_DWORD *)v413 + 4) = *((_DWORD *)v414 + 4);
            *(_OWORD *)(v413 + 24) = *(_OWORD *)(v414 + 24);
            *(_OWORD *)(v413 + 40) = *(_OWORD *)(v414 + 40);
            *((_QWORD *)v413 + 7) = *((_QWORD *)v414 + 7);
            v416 = v243[7];
            v417 = &v413[v416];
            v418 = &v414[v416];
            v419 = sub_224F67874();
            v420 = *(_QWORD *)(v419 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v420 + 48))(v418, 1, v419))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v417, v418, *(_QWORD *)(*(_QWORD *)(v421 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v420 + 32))(v417, v418, v419);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v420 + 56))(v417, 0, 1, v419);
            }
            a3 = v818;
            *(_OWORD *)&v413[v243[8]] = *(_OWORD *)&v414[v243[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))v771[7])(v413, 0, 1, v243);
            v64 = v788;
          }
          *(_QWORD *)(v8 + v64[14]) = *(_QWORD *)&v9[v64[14]];
          *(_QWORD *)(v8 + v64[15]) = *(_QWORD *)&v9[v64[15]];
          *(_OWORD *)(v8 + v64[16]) = *(_OWORD *)&v9[v64[16]];
          v422 = v64[17];
          v423 = v8 + v422;
          v424 = &v9[v422];
          *(_QWORD *)(v423 + 16) = *((_QWORD *)v424 + 2);
          *(_OWORD *)v423 = *(_OWORD *)v424;
          v425 = v64[18];
          v426 = (_OWORD *)(v8 + v425);
          v427 = &v9[v425];
          v428 = type metadata accessor for Quantity();
          v429 = *(_QWORD *)(v428 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v429 + 48))(v427, 1, v428))
          {
            sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v426, v427, *(_QWORD *)(*(_QWORD *)(v430 - 8) + 64));
          }
          else
          {
            *v426 = *(_OWORD *)v427;
            *(_QWORD *)((char *)v426 + 13) = *(_QWORD *)(v427 + 13);
            *(_OWORD *)((char *)v426 + 24) = *(_OWORD *)(v427 + 24);
            *(_OWORD *)((char *)v426 + 40) = *(_OWORD *)(v427 + 40);
            v431 = *(int *)(v428 + 28);
            v779 = (char *)v426 + v431;
            v432 = &v427[v431];
            v433 = sub_224F675D4();
            v434 = *(_QWORD *)(v433 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v434 + 48))(v432, 1, v433))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v779, v432, *(_QWORD *)(*(_QWORD *)(v435 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v434 + 32))(v779, v432, v433);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v434 + 56))(v779, 0, 1, v433);
            }
            a3 = v818;
            *(_OWORD *)((char *)v426 + *(int *)(v428 + 32)) = *(_OWORD *)&v427[*(int *)(v428 + 32)];
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v429 + 56))(v426, 0, 1, v428);
            v64 = v788;
          }
          *(_QWORD *)(v8 + v64[19]) = *(_QWORD *)&v9[v64[19]];
          *(_OWORD *)(v8 + v64[20]) = *(_OWORD *)&v9[v64[20]];
          v10 = v815;
LABEL_256:
          swift_storeEnumTagMultiPayload();
          v4 = v816;
LABEL_293:
          v11 = v805;
          break;
        default:
          memcpy((void *)v8, v9, *(_QWORD *)(v11 + 64));
          break;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_295;
    }
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    goto LABEL_6;
  }
  if (v14)
  {
    sub_224DDEAA0(v8, type metadata accessor for ModelsR4.ResourceProxy);
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, v15);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
LABEL_7:
    memcpy((void *)v8, v9, v17);
    goto LABEL_295;
  }
  if (a1 != v4)
  {
    sub_224DDEAA0(v8, type metadata accessor for ModelsR4.ResourceProxy);
    v817 = v4;
    v819 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        v28 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v28;
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
        *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
        v29 = *((_QWORD *)v9 + 11);
        *(_QWORD *)(v8 + 80) = *((_QWORD *)v9 + 10);
        *(_QWORD *)(v8 + 88) = v29;
        v30 = *((_OWORD *)v9 + 6);
        *(_QWORD *)(v8 + 112) = *((_QWORD *)v9 + 14);
        *(_OWORD *)(v8 + 96) = v30;
        *(_OWORD *)(v8 + 120) = *(_OWORD *)(v9 + 120);
        v31 = *((_QWORD *)v9 + 18);
        *(_QWORD *)(v8 + 136) = *((_QWORD *)v9 + 17);
        *(_QWORD *)(v8 + 144) = v31;
        v32 = (int *)type metadata accessor for ModelsR4.Condition(0);
        v33 = v32[13];
        v34 = (char *)(v8 + v33);
        v35 = &v9[v33];
        v36 = type metadata accessor for FHIRDateTime();
        __dsta = *(_QWORD **)(v36 - 8);
        v768 = (unsigned int (*)(char *, uint64_t, uint64_t))__dsta[6];
        v786 = v32;
        v745 = (int *)v36;
        if (v768(v35, 1, v36))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          *v34 = *v35;
          *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
          *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
          *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
          *(_OWORD *)(v34 + 40) = *(_OWORD *)(v35 + 40);
          *((_QWORD *)v34 + 7) = *((_QWORD *)v35 + 7);
          v132 = *(int *)(v36 + 28);
          v133 = &v34[v132];
          v134 = &v35[v132];
          v135 = sub_224F67874();
          v136 = *(_QWORD *)(v135 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v133, v134, v135);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
          }
          v36 = (uint64_t)v745;
          *(_OWORD *)&v34[v745[8]] = *(_OWORD *)&v35[v745[8]];
          ((void (*)(char *, _QWORD, uint64_t, int *))__dsta[7])(v34, 0, 1, v745);
          v32 = v786;
        }
        v258 = v768;
        v259 = v32[14];
        v260 = (char *)(v8 + v259);
        v261 = &v9[v259];
        v262 = type metadata accessor for Period();
        v706 = *(_QWORD **)(v262 - 8);
        v809 = v262;
        v716 = (unsigned int (*)(char *, uint64_t))v706[6];
        if (v716(v261, 1))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v263 - 8) + 64));
        }
        else
        {
          if (v768(v261, 1, v36))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
          }
          else
          {
            *v260 = *v261;
            *((_QWORD *)v260 + 1) = *((_QWORD *)v261 + 1);
            *((_DWORD *)v260 + 4) = *((_DWORD *)v261 + 4);
            *(_OWORD *)(v260 + 24) = *(_OWORD *)(v261 + 24);
            *(_OWORD *)(v260 + 40) = *(_OWORD *)(v261 + 40);
            *((_QWORD *)v260 + 7) = *((_QWORD *)v261 + 7);
            v344 = *(int *)(v36 + 28);
            v345 = &v260[v344];
            v346 = &v261[v344];
            v347 = sub_224F67874();
            v348 = *(_QWORD *)(v347 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v348 + 48))(v346, 1, v347))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v345, v346, *(_QWORD *)(*(_QWORD *)(v349 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v348 + 32))(v345, v346, v347);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v348 + 56))(v345, 0, 1, v347);
            }
            v36 = (uint64_t)v745;
            *(_OWORD *)&v260[v745[8]] = *(_OWORD *)&v261[v745[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))__dsta[7])(v260, 0, 1, v745);
            v32 = v786;
          }
          v520 = *(int *)(v809 + 20);
          v521 = &v260[v520];
          v522 = &v261[v520];
          if (v768(v522, 1, v36))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v521, v522, *(_QWORD *)(*(_QWORD *)(v523 - 8) + 64));
          }
          else
          {
            *v521 = *v522;
            *((_QWORD *)v521 + 1) = *((_QWORD *)v522 + 1);
            *((_DWORD *)v521 + 4) = *((_DWORD *)v522 + 4);
            *(_OWORD *)(v521 + 24) = *(_OWORD *)(v522 + 24);
            *(_OWORD *)(v521 + 40) = *(_OWORD *)(v522 + 40);
            *((_QWORD *)v521 + 7) = *((_QWORD *)v522 + 7);
            v524 = *(int *)(v36 + 28);
            v525 = &v521[v524];
            v526 = &v522[v524];
            v527 = sub_224F67874();
            v528 = *(_QWORD *)(v527 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v528 + 48))(v526, 1, v527))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v525, v526, *(_QWORD *)(*(_QWORD *)(v529 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v528 + 32))(v525, v526, v527);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v528 + 56))(v525, 0, 1, v527);
            }
            v32 = v786;
            v36 = (uint64_t)v745;
            *(_OWORD *)&v521[v745[8]] = *(_OWORD *)&v522[v745[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))__dsta[7])(v521, 0, 1, v745);
            v258 = v768;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v706[7])(v260, 0, 1, v809);
        }
        *(_OWORD *)(v8 + v32[15]) = *(_OWORD *)&v9[v32[15]];
        v563 = v32[16];
        v564 = (char *)(v8 + v563);
        v565 = &v9[v563];
        if (v258(&v9[v563], 1, v36))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v564, v565, *(_QWORD *)(*(_QWORD *)(v566 - 8) + 64));
        }
        else
        {
          *v564 = *v565;
          *((_QWORD *)v564 + 1) = *((_QWORD *)v565 + 1);
          *((_DWORD *)v564 + 4) = *((_DWORD *)v565 + 4);
          *(_OWORD *)(v564 + 24) = *(_OWORD *)(v565 + 24);
          *(_OWORD *)(v564 + 40) = *(_OWORD *)(v565 + 40);
          *((_QWORD *)v564 + 7) = *((_QWORD *)v565 + 7);
          v567 = *(int *)(v36 + 28);
          v568 = &v564[v567];
          v569 = &v565[v567];
          v570 = sub_224F67874();
          v571 = *(_QWORD *)(v570 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v571 + 48))(v569, 1, v570))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v568, v569, *(_QWORD *)(*(_QWORD *)(v572 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v571 + 32))(v568, v569, v570);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v571 + 56))(v568, 0, 1, v570);
          }
          v36 = (uint64_t)v745;
          *(_OWORD *)&v564[v745[8]] = *(_OWORD *)&v565[v745[8]];
          ((void (*)(char *, _QWORD, uint64_t, int *))__dsta[7])(v564, 0, 1, v745);
          v258 = v768;
          v32 = v786;
        }
        v573 = v32[17];
        v574 = (char *)(v8 + v573);
        v575 = &v9[v573];
        v576 = v809;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v716)(&v9[v573], 1, v809))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v574, v575, *(_QWORD *)(*(_QWORD *)(v577 - 8) + 64));
        }
        else
        {
          if (v258(v575, 1, v36))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v574, v575, *(_QWORD *)(*(_QWORD *)(v578 - 8) + 64));
          }
          else
          {
            *v574 = *v575;
            *((_QWORD *)v574 + 1) = *((_QWORD *)v575 + 1);
            *((_DWORD *)v574 + 4) = *((_DWORD *)v575 + 4);
            *(_OWORD *)(v574 + 24) = *(_OWORD *)(v575 + 24);
            *(_OWORD *)(v574 + 40) = *(_OWORD *)(v575 + 40);
            *((_QWORD *)v574 + 7) = *((_QWORD *)v575 + 7);
            v579 = *(int *)(v36 + 28);
            v580 = &v574[v579];
            v581 = &v575[v579];
            v582 = sub_224F67874();
            v583 = *(_QWORD *)(v582 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v583 + 48))(v581, 1, v582))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v580, v581, *(_QWORD *)(*(_QWORD *)(v584 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v583 + 32))(v580, v581, v582);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v583 + 56))(v580, 0, 1, v582);
            }
            v36 = (uint64_t)v745;
            *(_OWORD *)&v574[v745[8]] = *(_OWORD *)&v575[v745[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))__dsta[7])(v574, 0, 1, v745);
            v258 = v768;
            v32 = v786;
            v576 = v809;
          }
          v618 = *(int *)(v576 + 20);
          v619 = &v574[v618];
          v620 = &v575[v618];
          if (v258(v620, 1, v36))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v619, v620, *(_QWORD *)(*(_QWORD *)(v621 - 8) + 64));
          }
          else
          {
            *v619 = *v620;
            *((_QWORD *)v619 + 1) = *((_QWORD *)v620 + 1);
            *((_DWORD *)v619 + 4) = *((_DWORD *)v620 + 4);
            *(_OWORD *)(v619 + 24) = *(_OWORD *)(v620 + 24);
            *(_OWORD *)(v619 + 40) = *(_OWORD *)(v620 + 40);
            *((_QWORD *)v619 + 7) = *((_QWORD *)v620 + 7);
            v622 = *(int *)(v36 + 28);
            v623 = &v619[v622];
            v624 = &v620[v622];
            v625 = sub_224F67874();
            v626 = *(_QWORD *)(v625 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v626 + 48))(v624, 1, v625))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v623, v624, *(_QWORD *)(*(_QWORD *)(v627 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v626 + 32))(v623, v624, v625);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v626 + 56))(v623, 0, 1, v625);
            }
            v32 = v786;
            v36 = (uint64_t)v745;
            *(_OWORD *)&v619[v745[8]] = *(_OWORD *)&v620[v745[8]];
            ((void (*)(char *, _QWORD, uint64_t, int *))__dsta[7])(v619, 0, 1, v745);
            v258 = v768;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v706[7])(v574, 0, 1, v809);
        }
        *(_OWORD *)(v8 + v32[18]) = *(_OWORD *)&v9[v32[18]];
        v628 = v32[19];
        v629 = (char *)(v8 + v628);
        v630 = &v9[v628];
        if (v258(&v9[v628], 1, v36))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v629, v630, *(_QWORD *)(*(_QWORD *)(v631 - 8) + 64));
        }
        else
        {
          *v629 = *v630;
          *((_QWORD *)v629 + 1) = *((_QWORD *)v630 + 1);
          *((_DWORD *)v629 + 4) = *((_DWORD *)v630 + 4);
          *(_OWORD *)(v629 + 24) = *(_OWORD *)(v630 + 24);
          *(_OWORD *)(v629 + 40) = *(_OWORD *)(v630 + 40);
          *((_QWORD *)v629 + 7) = *((_QWORD *)v630 + 7);
          v632 = *(int *)(v36 + 28);
          v633 = &v629[v632];
          v634 = &v630[v632];
          v635 = sub_224F67874();
          v636 = *(_QWORD *)(v635 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v636 + 48))(v634, 1, v635))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v633, v634, *(_QWORD *)(*(_QWORD *)(v637 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v636 + 32))(v633, v634, v635);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v636 + 56))(v633, 0, 1, v635);
          }
          *(_OWORD *)&v629[v745[8]] = *(_OWORD *)&v630[v745[8]];
          ((void (*)(char *, _QWORD, uint64_t))__dsta[7])(v629, 0, 1);
          v32 = v786;
        }
        v638 = v32[20];
        v639 = (_OWORD *)(v8 + v638);
        v640 = &v9[v638];
        v641 = type metadata accessor for Reference();
        v642 = *(_QWORD *)(v641 - 8);
        v643 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v642 + 48);
        if (v643(v640, 1, v641))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v639, v640, *(_QWORD *)(*(_QWORD *)(v644 - 8) + 64));
        }
        else
        {
          v783 = v643;
          v813 = v642;
          v645 = *((_OWORD *)v640 + 1);
          *v639 = *(_OWORD *)v640;
          v639[1] = v645;
          v646 = *(int *)(v641 + 24);
          v647 = (_OWORD *)((char *)v639 + v646);
          v648 = &v640[v646];
          v649 = type metadata accessor for Identifier();
          v650 = *(_QWORD *)(v649 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v650 + 48))(v648, 1, v649))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v647, v648, *(_QWORD *)(*(_QWORD *)(v651 - 8) + 64));
            v643 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v783;
          }
          else
          {
            v724 = v650;
            v652 = *((_OWORD *)v648 + 1);
            *v647 = *(_OWORD *)v648;
            v647[1] = v652;
            *((_QWORD *)v647 + 4) = *((_QWORD *)v648 + 4);
            v653 = *(int *)(v649 + 24);
            v764 = (char *)v647 + v653;
            v654 = &v648[v653];
            v655 = sub_224F675D4();
            v656 = *(_QWORD *)(v655 - 8);
            __dstq = v654;
            v711 = (void *)v655;
            v657 = (*(uint64_t (**)(char *, uint64_t))(v656 + 48))(v654, 1);
            v658 = v649;
            if (v657)
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v764, __dstq, *(_QWORD *)(*(_QWORD *)(v659 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, void *))(v656 + 32))(v764, __dstq, v711);
              (*(void (**)(char *, _QWORD, uint64_t, void *))(v656 + 56))(v764, 0, 1, v711);
            }
            v643 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v783;
            *(_OWORD *)((char *)v647 + *(int *)(v658 + 28)) = *(_OWORD *)&v648[*(int *)(v658 + 28)];
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v724 + 56))(v647, 0, 1, v658);
            v32 = v786;
          }
          v642 = v813;
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v813 + 56))(v639, 0, 1, v641);
        }
        v660 = v32[21];
        v661 = (_OWORD *)(v8 + v660);
        v662 = &v9[v660];
        if (v643(&v9[v660], 1, v641))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v661, v662, *(_QWORD *)(*(_QWORD *)(v663 - 8) + 64));
          a3 = v819;
        }
        else
        {
          v814 = v642;
          v664 = *((_OWORD *)v662 + 1);
          *v661 = *(_OWORD *)v662;
          v661[1] = v664;
          v665 = *(int *)(v641 + 24);
          v666 = (_OWORD *)((char *)v661 + v665);
          v667 = &v662[v665];
          v668 = type metadata accessor for Identifier();
          v669 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v668 - 8);
          a3 = v819;
          if (((unsigned int (**)(char *, uint64_t, uint64_t))v669)[6](v667, 1, v668))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v666, v667, *(_QWORD *)(*(_QWORD *)(v670 - 8) + 64));
          }
          else
          {
            __dstr = v669;
            v671 = *((_OWORD *)v667 + 1);
            *v666 = *(_OWORD *)v667;
            v666[1] = v671;
            *((_QWORD *)v666 + 4) = *((_QWORD *)v667 + 4);
            v672 = *(int *)(v668 + 24);
            v784 = (char *)v666 + v672;
            v673 = &v667[v672];
            v674 = sub_224F675D4();
            v675 = *(_QWORD *)(v674 - 8);
            v765 = v673;
            v676 = v673;
            v677 = v674;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v675 + 48))(v676, 1, v674))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v784, v765, *(_QWORD *)(*(_QWORD *)(v678 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, void *, uint64_t))(v675 + 32))(v784, v765, v677);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v675 + 56))(v784, 0, 1, v677);
            }
            a3 = v819;
            *(_OWORD *)((char *)v666 + *(int *)(v668 + 28)) = *(_OWORD *)&v667[*(int *)(v668 + 28)];
            (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))__dstr + 7))(v666, 0, 1, v668);
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v814 + 56))(v661, 0, 1, v641);
          v32 = v786;
        }
        *(_QWORD *)(v8 + v32[22]) = *(_QWORD *)&v9[v32[22]];
        *(_OWORD *)(v8 + v32[23]) = *(_OWORD *)&v9[v32[23]];
        goto LABEL_371;
      case 3u:
        v77 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v77;
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
        *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
        *(_QWORD *)(v8 + 80) = *((_QWORD *)v9 + 10);
        *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
        v78 = (int *)type metadata accessor for ModelsR4.DiagnosticReport(0);
        v79 = v78[11];
        v80 = (char *)(v8 + v79);
        v81 = &v9[v79];
        v82 = type metadata accessor for FHIRDateTime();
        v772 = *(_QWORD **)(v82 - 8);
        v806 = (unsigned int (*)(char *, uint64_t, uint64_t))v772[6];
        v789 = v78;
        if (v806(v81, 1, v82))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
        }
        else
        {
          *v80 = *v81;
          *((_QWORD *)v80 + 1) = *((_QWORD *)v81 + 1);
          *((_DWORD *)v80 + 4) = *((_DWORD *)v81 + 4);
          *(_OWORD *)(v80 + 24) = *(_OWORD *)(v81 + 24);
          *(_OWORD *)(v80 + 40) = *(_OWORD *)(v81 + 40);
          *((_QWORD *)v80 + 7) = *((_QWORD *)v81 + 7);
          v145 = *(int *)(v82 + 28);
          v750 = &v80[v145];
          v146 = &v81[v145];
          v147 = sub_224F67874();
          v148 = *(_QWORD *)(v147 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v750, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v750, v146, v147);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v750, 0, 1, v147);
          }
          *(_OWORD *)&v80[*(int *)(v82 + 32)] = *(_OWORD *)&v81[*(int *)(v82 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v772[7])(v80, 0, 1, v82);
          v78 = v789;
        }
        v265 = v78[12];
        v266 = (char *)(v8 + v265);
        v267 = &v9[v265];
        v268 = type metadata accessor for Period();
        v269 = *(_QWORD *)(v268 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v269 + 48))(v267, 1, v268))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v266, v267, *(_QWORD *)(*(_QWORD *)(v270 - 8) + 64));
        }
        else
        {
          if (v806(v267, 1, v82))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v266, v267, *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64));
          }
          else
          {
            v719 = v269;
            *v266 = *v267;
            *((_QWORD *)v266 + 1) = *((_QWORD *)v267 + 1);
            *((_DWORD *)v266 + 4) = *((_DWORD *)v267 + 4);
            *(_OWORD *)(v266 + 24) = *(_OWORD *)(v267 + 24);
            *(_OWORD *)(v266 + 40) = *(_OWORD *)(v267 + 40);
            *((_QWORD *)v266 + 7) = *((_QWORD *)v267 + 7);
            v350 = *(int *)(v82 + 28);
            v756 = &v266[v350];
            v351 = &v267[v350];
            v352 = sub_224F67874();
            v353 = *(_QWORD *)(v352 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v353 + 48))(v351, 1, v352))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v756, v351, *(_QWORD *)(*(_QWORD *)(v354 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v353 + 32))(v756, v351, v352);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v353 + 56))(v756, 0, 1, v352);
            }
            *(_OWORD *)&v266[*(int *)(v82 + 32)] = *(_OWORD *)&v267[*(int *)(v82 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v772[7])(v266, 0, 1, v82);
            v78 = v789;
            v269 = v719;
          }
          v530 = *(int *)(v268 + 20);
          v531 = &v266[v530];
          v532 = &v267[v530];
          if (v806(v532, 1, v82))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v531, v532, *(_QWORD *)(*(_QWORD *)(v533 - 8) + 64));
          }
          else
          {
            *v531 = *v532;
            *((_QWORD *)v531 + 1) = *((_QWORD *)v532 + 1);
            *((_DWORD *)v531 + 4) = *((_DWORD *)v532 + 4);
            *(_OWORD *)(v531 + 24) = *(_OWORD *)(v532 + 24);
            *(_OWORD *)(v531 + 40) = *(_OWORD *)(v532 + 40);
            *((_QWORD *)v531 + 7) = *((_QWORD *)v532 + 7);
            v534 = *(int *)(v82 + 28);
            v762 = &v531[v534];
            v535 = &v532[v534];
            v536 = sub_224F67874();
            v723 = *(_QWORD *)(v536 - 8);
            __dsto = v535;
            v537 = v535;
            v538 = v536;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v723 + 48))(v537, 1, v536))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v762, __dsto, *(_QWORD *)(*(_QWORD *)(v539 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v723 + 32))(v762, __dsto, v538);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v723 + 56))(v762, 0, 1, v538);
            }
            *(_OWORD *)&v531[*(int *)(v82 + 32)] = *(_OWORD *)&v532[*(int *)(v82 + 32)];
            v78 = v789;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v772[7])(v531, 0, 1, v82);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v269 + 56))(v266, 0, 1, v268);
        }
        v585 = v78[13];
        v586 = (char *)(v8 + v585);
        v587 = &v9[v585];
        v4 = v817;
        a3 = v819;
        if (v806(&v9[v585], 1, v82))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v586, v587, *(_QWORD *)(*(_QWORD *)(v588 - 8) + 64));
        }
        else
        {
          *v586 = *v587;
          *((_QWORD *)v586 + 1) = *((_QWORD *)v587 + 1);
          *((_DWORD *)v586 + 4) = *((_DWORD *)v587 + 4);
          *(_OWORD *)(v586 + 24) = *(_OWORD *)(v587 + 24);
          *(_OWORD *)(v586 + 40) = *(_OWORD *)(v587 + 40);
          *((_QWORD *)v586 + 7) = *((_QWORD *)v587 + 7);
          v589 = *(int *)(v82 + 28);
          v590 = &v586[v589];
          v591 = &v587[v589];
          v592 = sub_224F67874();
          v593 = *(_QWORD *)(v592 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v593 + 48))(v591, 1, v592))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v590, v591, *(_QWORD *)(*(_QWORD *)(v594 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v593 + 32))(v590, v591, v592);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v593 + 56))(v590, 0, 1, v592);
          }
          v4 = v817;
          *(_OWORD *)&v586[*(int *)(v82 + 32)] = *(_OWORD *)&v587[*(int *)(v82 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v772[7])(v586, 0, 1, v82);
          a3 = v819;
          v78 = v789;
        }
        *(_QWORD *)(v8 + v78[14]) = *(_QWORD *)&v9[v78[14]];
        *(_QWORD *)(v8 + v78[15]) = *(_QWORD *)&v9[v78[15]];
        *(_OWORD *)(v8 + v78[16]) = *(_OWORD *)&v9[v78[16]];
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v84 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v84;
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
        *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
        v85 = *((_QWORD *)v9 + 12);
        *(_QWORD *)(v8 + 88) = *((_QWORD *)v9 + 11);
        *(_QWORD *)(v8 + 96) = v85;
        v86 = (int *)type metadata accessor for ModelsR4.DocumentReference(0);
        v87 = v86[11];
        v88 = (char *)(v8 + v87);
        v89 = &v9[v87];
        v90 = type metadata accessor for FHIRDateTime();
        v91 = *(_QWORD **)(v90 - 8);
        v790 = (unsigned int (*)(char *, uint64_t, uint64_t))v91[6];
        if (v790(v89, 1, v90))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        }
        else
        {
          v751 = v91;
          v775 = (int *)v90;
          *v88 = *v89;
          *((_QWORD *)v88 + 1) = *((_QWORD *)v89 + 1);
          *((_DWORD *)v88 + 4) = *((_DWORD *)v89 + 4);
          *(_OWORD *)(v88 + 24) = *(_OWORD *)(v89 + 24);
          *(_OWORD *)(v88 + 40) = *(_OWORD *)(v89 + 40);
          *((_QWORD *)v88 + 7) = *((_QWORD *)v89 + 7);
          v150 = *(int *)(v90 + 28);
          v151 = &v88[v150];
          v152 = &v89[v150];
          v153 = sub_224F67874();
          v154 = *(_QWORD *)(v153 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v151, v152, v153);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
          }
          v91 = v751;
          v90 = (uint64_t)v775;
          *(_OWORD *)&v88[v775[8]] = *(_OWORD *)&v89[v775[8]];
          ((void (*)(char *, _QWORD, uint64_t, int *))v751[7])(v88, 0, 1, v775);
        }
        *(_OWORD *)(v8 + v86[12]) = *(_OWORD *)&v9[v86[12]];
        *(_QWORD *)(v8 + v86[13]) = *(_QWORD *)&v9[v86[13]];
        *(_QWORD *)(v8 + v86[14]) = *(_QWORD *)&v9[v86[14]];
        v810 = v86;
        v272 = v86[15];
        v273 = (_QWORD *)(v8 + v272);
        v274 = &v9[v272];
        v275 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
        v276 = *(_QWORD *)(v275 - 8);
        v4 = v817;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v276 + 48))(v274, 1, v275))
        {
          sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v273, v274, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
          a3 = v819;
          v278 = v810;
        }
        else
        {
          v717 = v276;
          __dstg = v273;
          *v273 = *(_QWORD *)v274;
          v279 = *(int *)(v275 + 20);
          v280 = (char *)v273 + v279;
          v281 = &v274[v279];
          v282 = type metadata accessor for Period();
          v283 = *(_QWORD *)(v282 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v283 + 48))(v281, 1, v282))
          {
            sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v280, v281, *(_QWORD *)(*(_QWORD *)(v284 - 8) + 64));
            v4 = v817;
            a3 = v819;
            v285 = v717;
            v286 = __dstg;
            v278 = v810;
          }
          else
          {
            v700 = (int *)v282;
            v708 = v280;
            v278 = v810;
            if (v790(v281, 1, v90))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              v356 = v708;
              memcpy(v708, v281, *(_QWORD *)(*(_QWORD *)(v355 - 8) + 64));
            }
            else
            {
              v763 = v91;
              v781 = (int *)v90;
              *v708 = *v281;
              *((_QWORD *)v708 + 1) = *((_QWORD *)v281 + 1);
              *((_DWORD *)v708 + 4) = *((_DWORD *)v281 + 4);
              *(_OWORD *)(v708 + 24) = *(_OWORD *)(v281 + 24);
              *(_OWORD *)(v708 + 40) = *(_OWORD *)(v281 + 40);
              *((_QWORD *)v708 + 7) = *((_QWORD *)v281 + 7);
              v540 = *(int *)(v90 + 28);
              v693 = &v708[v540];
              v541 = &v281[v540];
              v542 = sub_224F67874();
              v543 = *(_QWORD *)(v542 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v543 + 48))(v541, 1, v542))
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v693, v541, *(_QWORD *)(*(_QWORD *)(v544 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v543 + 32))(v693, v541, v542);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v543 + 56))(v693, 0, 1, v542);
              }
              v91 = v763;
              v90 = (uint64_t)v781;
              v356 = v708;
              *(_OWORD *)&v708[v781[8]] = *(_OWORD *)&v281[v781[8]];
              ((void (*)(char *, _QWORD, uint64_t, int *))v763[7])(v708, 0, 1, v781);
            }
            v679 = v700[5];
            v680 = &v356[v679];
            v681 = &v281[v679];
            if (v790(v681, 1, v90))
            {
              sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v680, v681, *(_QWORD *)(*(_QWORD *)(v682 - 8) + 64));
              a3 = v819;
              v286 = __dstg;
            }
            else
            {
              v766 = (void (**)(char *, _QWORD, uint64_t))v91;
              v785 = (int *)v90;
              *v680 = *v681;
              *((_QWORD *)v680 + 1) = *((_QWORD *)v681 + 1);
              *((_DWORD *)v680 + 4) = *((_DWORD *)v681 + 4);
              *(_OWORD *)(v680 + 24) = *(_OWORD *)(v681 + 24);
              *(_OWORD *)(v680 + 40) = *(_OWORD *)(v681 + 40);
              *((_QWORD *)v680 + 7) = *((_QWORD *)v681 + 7);
              v683 = *(int *)(v90 + 28);
              v804 = &v680[v683];
              v684 = &v681[v683];
              v685 = sub_224F67874();
              v686 = *(_QWORD *)(v685 - 8);
              __srcb = (void *)v685;
              v694 = v684;
              v687 = (*(uint64_t (**)(char *, uint64_t))(v686 + 48))(v684, 1);
              a3 = v819;
              if (v687)
              {
                sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
                memcpy(v804, v694, *(_QWORD *)(*(_QWORD *)(v688 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, void *))(v686 + 32))(v804, v694, __srcb);
                (*(void (**)(char *, _QWORD, uint64_t, void *))(v686 + 56))(v804, 0, 1, __srcb);
              }
              *(_OWORD *)&v680[v785[8]] = *(_OWORD *)&v681[v785[8]];
              v286 = __dstg;
              v766[7](v680, 0, 1);
            }
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v283 + 56))(v708, 0, 1, v700);
            v4 = v817;
            v285 = v717;
          }
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v285 + 56))(v286, 0, 1, v275);
        }
        *(_OWORD *)(v8 + v278[16]) = *(_OWORD *)&v9[v278[16]];
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v93 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v93;
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
        *(_QWORD *)(v8 + 61) = *(_QWORD *)(v9 + 61);
        *(_QWORD *)(v8 + 72) = *((_QWORD *)v9 + 9);
        v94 = (int *)type metadata accessor for ModelsR4.Immunization(0);
        v95 = v94[10];
        v96 = (char *)(v8 + v95);
        v97 = &v9[v95];
        v98 = type metadata accessor for FHIRDateTime();
        v99 = *(_QWORD *)(v98 - 8);
        v100 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v99 + 48);
        if (v100(v97, 1, v98))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          v794 = v100;
          v808 = v99;
          *v96 = *v97;
          *((_QWORD *)v96 + 1) = *((_QWORD *)v97 + 1);
          *((_DWORD *)v96 + 4) = *((_DWORD *)v97 + 4);
          *(_OWORD *)(v96 + 24) = *(_OWORD *)(v97 + 24);
          *(_OWORD *)(v96 + 40) = *(_OWORD *)(v97 + 40);
          *((_QWORD *)v96 + 7) = *((_QWORD *)v97 + 7);
          v156 = *(int *)(v98 + 28);
          v776 = &v96[v156];
          v157 = &v97[v156];
          v158 = sub_224F67874();
          v159 = *(_QWORD *)(v158 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v776, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v776, v157, v158);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v776, 0, 1, v158);
          }
          *(_OWORD *)&v96[*(int *)(v98 + 32)] = *(_OWORD *)&v97[*(int *)(v98 + 32)];
          v99 = v808;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v808 + 56))(v96, 0, 1, v98);
          v100 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v794;
        }
        *(_QWORD *)(v8 + v94[11]) = *(_QWORD *)&v9[v94[11]];
        v287 = v94[12];
        v288 = (char *)(v8 + v287);
        v289 = &v9[v287];
        if (v100(&v9[v287], 1, v98))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v288, v289, *(_QWORD *)(*(_QWORD *)(v290 - 8) + 64));
        }
        else
        {
          *v288 = *v289;
          *((_QWORD *)v288 + 1) = *((_QWORD *)v289 + 1);
          *((_DWORD *)v288 + 4) = *((_DWORD *)v289 + 4);
          *(_OWORD *)(v288 + 24) = *(_OWORD *)(v289 + 24);
          *(_OWORD *)(v288 + 40) = *(_OWORD *)(v289 + 40);
          *((_QWORD *)v288 + 7) = *((_QWORD *)v289 + 7);
          v291 = *(int *)(v98 + 28);
          v798 = &v288[v291];
          v811 = v99;
          v292 = &v289[v291];
          v293 = sub_224F67874();
          v294 = *(_QWORD *)(v293 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v294 + 48))(v292, 1, v293))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v798, v292, *(_QWORD *)(*(_QWORD *)(v295 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v798, v292, v293);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v798, 0, 1, v293);
          }
          *(_OWORD *)&v288[*(int *)(v98 + 32)] = *(_OWORD *)&v289[*(int *)(v98 + 32)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v811 + 56))(v288, 0, 1, v98);
        }
        v357 = v94[13];
        v358 = v8 + v357;
        v359 = &v9[v357];
        *(_OWORD *)v358 = *(_OWORD *)v359;
        *(_QWORD *)(v358 + 16) = *((_QWORD *)v359 + 2);
        v360 = v94[14];
        v361 = (_OWORD *)(v8 + v360);
        v362 = &v9[v360];
        v363 = type metadata accessor for Reference();
        v364 = *(_QWORD *)(v363 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v364 + 48))(v362, 1, v363))
        {
          sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v361, v362, *(_QWORD *)(*(_QWORD *)(v365 - 8) + 64));
        }
        else
        {
          v812 = v364;
          v366 = *((_OWORD *)v362 + 1);
          *v361 = *(_OWORD *)v362;
          v361[1] = v366;
          v367 = *(int *)(v363 + 24);
          v368 = (_OWORD *)((char *)v361 + v367);
          v369 = &v362[v367];
          v370 = type metadata accessor for Identifier();
          v371 = *(void (***)(void))(v370 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v371[6])(v369, 1, v370))
          {
            sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v368, v369, *(_QWORD *)(*(_QWORD *)(v372 - 8) + 64));
            v373 = v812;
          }
          else
          {
            __dstj = v371;
            v758 = (char *)v368;
            v436 = *((_OWORD *)v369 + 1);
            *v368 = *(_OWORD *)v369;
            v368[1] = v436;
            *((_QWORD *)v368 + 4) = *((_QWORD *)v369 + 4);
            v437 = *(int *)(v370 + 24);
            v800 = (char *)v368 + v437;
            v438 = &v369[v437];
            v439 = sub_224F675D4();
            v440 = *(_QWORD *)(v439 - 8);
            v720 = v439;
            if ((*(unsigned int (**)(char *, uint64_t))(v440 + 48))(v438, 1))
            {
              sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(v800, v438, *(_QWORD *)(*(_QWORD *)(v441 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v440 + 32))(v800, v438, v720);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v440 + 56))(v800, 0, 1, v720);
            }
            v373 = v812;
            *(_OWORD *)&v758[*(int *)(v370 + 28)] = *(_OWORD *)&v369[*(int *)(v370 + 28)];
            __dstj[7]();
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v373 + 56))(v361, 0, 1, v363);
        }
        v4 = v817;
        *(_BYTE *)(v8 + v94[15]) = v9[v94[15]];
        *(_OWORD *)(v8 + v94[16]) = *(_OWORD *)&v9[v94[16]];
        *(_QWORD *)(v8 + v94[17]) = *(_QWORD *)&v9[v94[17]];
        *(_BYTE *)(v8 + v94[18]) = v9[v94[18]];
        v545 = v94[19];
        v546 = v8 + v545;
        v547 = &v9[v545];
        *(_QWORD *)(v546 + 48) = *((_QWORD *)v547 + 6);
        v548 = *((_OWORD *)v547 + 2);
        v549 = *(_OWORD *)v547;
        *(_OWORD *)(v546 + 16) = *((_OWORD *)v547 + 1);
        *(_OWORD *)(v546 + 32) = v548;
        *(_OWORD *)v546 = v549;
        *(_OWORD *)(v8 + v94[20]) = *(_OWORD *)&v9[v94[20]];
        swift_storeEnumTagMultiPayload();
        a3 = v819;
        break;
      case 6u:
        v102 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *(_OWORD *)(v8 + 16) = v102;
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
        *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
        *(_QWORD *)(v8 + 80) = *((_QWORD *)v9 + 10);
        v103 = (int *)type metadata accessor for ModelsR4.Observation(0);
        v104 = v103[10];
        v105 = (char *)(v8 + v104);
        v106 = &v9[v104];
        v107 = type metadata accessor for FHIRDateTime();
        v791 = *(_QWORD **)(v107 - 8);
        v108 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v791[6];
        v807 = v103;
        v773 = v108;
        if (v108(v106, 1, v107))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
        }
        else
        {
          *v105 = *v106;
          *((_QWORD *)v105 + 1) = *((_QWORD *)v106 + 1);
          *((_DWORD *)v105 + 4) = *((_DWORD *)v106 + 4);
          *(_OWORD *)(v105 + 24) = *(_OWORD *)(v106 + 24);
          *(_OWORD *)(v105 + 40) = *(_OWORD *)(v106 + 40);
          *((_QWORD *)v105 + 7) = *((_QWORD *)v106 + 7);
          v161 = *(int *)(v107 + 28);
          v752 = &v105[v161];
          v162 = &v106[v161];
          v163 = sub_224F67874();
          v164 = *(_QWORD *)(v163 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v752, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v164 + 32))(v752, v162, v163);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v752, 0, 1, v163);
          }
          *(_OWORD *)&v105[*(int *)(v107 + 32)] = *(_OWORD *)&v106[*(int *)(v107 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v791[7])(v105, 0, 1, v107);
          v103 = v807;
          v108 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v773;
        }
        v296 = v103[11];
        v297 = (char *)(v8 + v296);
        v298 = &v9[v296];
        if (v108(&v9[v296], 1, v107))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v297, v298, *(_QWORD *)(*(_QWORD *)(v299 - 8) + 64));
        }
        else
        {
          *v297 = *v298;
          *((_QWORD *)v297 + 1) = *((_QWORD *)v298 + 1);
          *((_DWORD *)v297 + 4) = *((_DWORD *)v298 + 4);
          *(_OWORD *)(v297 + 24) = *(_OWORD *)(v298 + 24);
          *(_OWORD *)(v297 + 40) = *(_OWORD *)(v298 + 40);
          *((_QWORD *)v297 + 7) = *((_QWORD *)v298 + 7);
          v300 = *(int *)(v107 + 28);
          v754 = &v297[v300];
          v301 = &v298[v300];
          v302 = sub_224F67874();
          v303 = *(_QWORD *)(v302 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v303 + 48))(v301, 1, v302))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v754, v301, *(_QWORD *)(*(_QWORD *)(v304 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v303 + 32))(v754, v301, v302);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v754, 0, 1, v302);
          }
          *(_OWORD *)&v297[*(int *)(v107 + 32)] = *(_OWORD *)&v298[*(int *)(v107 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v791[7])(v297, 0, 1, v107);
          v103 = v807;
          v108 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v773;
        }
        v374 = v103[12];
        v375 = (char *)(v8 + v374);
        v376 = &v9[v374];
        v377 = type metadata accessor for Period();
        v378 = *(void **)(v377 - 8);
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v378 + 6))(v376, 1, v377))
        {
          sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v375, v376, *(_QWORD *)(*(_QWORD *)(v379 - 8) + 64));
        }
        else
        {
          v757 = v375;
          if (v108(v376, 1, v107))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v375, v376, *(_QWORD *)(*(_QWORD *)(v380 - 8) + 64));
          }
          else
          {
            *v375 = *v376;
            *((_QWORD *)v375 + 1) = *((_QWORD *)v376 + 1);
            *((_DWORD *)v375 + 4) = *((_DWORD *)v376 + 4);
            *(_OWORD *)(v375 + 24) = *(_OWORD *)(v376 + 24);
            *(_OWORD *)(v375 + 40) = *(_OWORD *)(v376 + 40);
            *((_QWORD *)v375 + 7) = *((_QWORD *)v376 + 7);
            v442 = *(int *)(v107 + 28);
            __dstk = &v375[v442];
            v443 = &v376[v442];
            v444 = sub_224F67874();
            v445 = *(_QWORD *)(v444 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v445 + 48))(v443, 1, v444))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dstk, v443, *(_QWORD *)(*(_QWORD *)(v446 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v445 + 32))(__dstk, v443, v444);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v445 + 56))(__dstk, 0, 1, v444);
            }
            v375 = v757;
            *(_OWORD *)&v757[*(int *)(v107 + 32)] = *(_OWORD *)&v376[*(int *)(v107 + 32)];
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v791[7])(v757, 0, 1, v107);
            v103 = v807;
            v108 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v773;
          }
          v550 = *(int *)(v377 + 20);
          v551 = &v375[v550];
          v552 = &v376[v550];
          if (v108(v552, 1, v107))
          {
            sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v551, v552, *(_QWORD *)(*(_QWORD *)(v553 - 8) + 64));
          }
          else
          {
            v710 = v378;
            *v551 = *v552;
            *((_QWORD *)v551 + 1) = *((_QWORD *)v552 + 1);
            *((_DWORD *)v551 + 4) = *((_DWORD *)v552 + 4);
            *(_OWORD *)(v551 + 24) = *(_OWORD *)(v552 + 24);
            *(_OWORD *)(v551 + 40) = *(_OWORD *)(v552 + 40);
            *((_QWORD *)v551 + 7) = *((_QWORD *)v552 + 7);
            v554 = *(int *)(v107 + 28);
            __dstp = &v551[v554];
            v555 = &v552[v554];
            v556 = sub_224F67874();
            v557 = *(_QWORD *)(v556 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v557 + 48))(v555, 1, v556))
            {
              sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
              memcpy(__dstp, v555, *(_QWORD *)(*(_QWORD *)(v558 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v557 + 32))(__dstp, v555, v556);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v557 + 56))(__dstp, 0, 1, v556);
            }
            v378 = v710;
            *(_OWORD *)&v551[*(int *)(v107 + 32)] = *(_OWORD *)&v552[*(int *)(v107 + 32)];
            v103 = v807;
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v791[7])(v551, 0, 1, v107);
            v108 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v773;
          }
          (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v378 + 7))(v757, 0, 1, v377);
        }
        v595 = v103[13];
        v596 = (char *)(v8 + v595);
        v597 = &v9[v595];
        a3 = v819;
        if (v108(&v9[v595], 1, v107))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v596, v597, *(_QWORD *)(*(_QWORD *)(v598 - 8) + 64));
        }
        else
        {
          *v596 = *v597;
          *((_QWORD *)v596 + 1) = *((_QWORD *)v597 + 1);
          *((_DWORD *)v596 + 4) = *((_DWORD *)v597 + 4);
          *(_OWORD *)(v596 + 24) = *(_OWORD *)(v597 + 24);
          *(_OWORD *)(v596 + 40) = *(_OWORD *)(v597 + 40);
          *((_QWORD *)v596 + 7) = *((_QWORD *)v597 + 7);
          v599 = *(int *)(v107 + 28);
          v782 = &v596[v599];
          v600 = &v597[v599];
          v601 = sub_224F67874();
          v602 = *(_QWORD *)(v601 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v602 + 48))(v600, 1, v601))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v782, v600, *(_QWORD *)(*(_QWORD *)(v603 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v602 + 32))(v782, v600, v601);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v602 + 56))(v782, 0, 1, v601);
          }
          *(_OWORD *)&v596[*(int *)(v107 + 32)] = *(_OWORD *)&v597[*(int *)(v107 + 32)];
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v791[7])(v596, 0, 1, v107);
          v103 = v807;
        }
        *(_QWORD *)(v8 + v103[14]) = *(_QWORD *)&v9[v103[14]];
        *(_QWORD *)(v8 + v103[15]) = *(_QWORD *)&v9[v103[15]];
        *(_OWORD *)(v8 + v103[16]) = *(_OWORD *)&v9[v103[16]];
        v604 = v103[17];
        v605 = v8 + v604;
        v606 = &v9[v604];
        *(_QWORD *)(v605 + 16) = *((_QWORD *)v606 + 2);
        *(_OWORD *)v605 = *(_OWORD *)v606;
        v607 = v103[18];
        v608 = (_OWORD *)(v8 + v607);
        v609 = &v9[v607];
        v610 = type metadata accessor for Quantity();
        v611 = *(_QWORD *)(v610 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v611 + 48))(v609, 1, v610))
        {
          sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v608, v609, *(_QWORD *)(*(_QWORD *)(v612 - 8) + 64));
        }
        else
        {
          *v608 = *(_OWORD *)v609;
          *(_QWORD *)((char *)v608 + 13) = *(_QWORD *)(v609 + 13);
          *(_OWORD *)((char *)v608 + 24) = *(_OWORD *)(v609 + 24);
          *(_OWORD *)((char *)v608 + 40) = *(_OWORD *)(v609 + 40);
          v613 = *(int *)(v610 + 28);
          v803 = (char *)v608 + v613;
          v614 = &v609[v613];
          v615 = sub_224F675D4();
          v616 = *(_QWORD *)(v615 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v616 + 48))(v614, 1, v615))
          {
            sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v803, v614, *(_QWORD *)(*(_QWORD *)(v617 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v616 + 32))(v803, v614, v615);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v616 + 56))(v803, 0, 1, v615);
          }
          a3 = v819;
          *(_OWORD *)((char *)v608 + *(int *)(v610 + 32)) = *(_OWORD *)&v609[*(int *)(v610 + 32)];
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v611 + 56))(v608, 0, 1, v610);
          v103 = v807;
        }
        *(_QWORD *)(v8 + v103[19]) = *(_QWORD *)&v9[v103[19]];
        *(_OWORD *)(v8 + v103[20]) = *(_OWORD *)&v9[v103[20]];
LABEL_371:
        swift_storeEnumTagMultiPayload();
        v4 = v817;
        break;
      default:
        v17 = *(_QWORD *)(v11 + 64);
        goto LABEL_7;
    }
  }
LABEL_295:
  v559 = *(int *)(a3 + 24);
  v560 = *(_QWORD *)((char *)a1 + v559);
  v561 = *(_QWORD *)((char *)a1 + v559 + 8);
  *(_OWORD *)((char *)a1 + v559) = *(_OWORD *)((char *)v4 + v559);
  sub_224DDE9B4(v560, v561);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Bundle.BundleEntry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E26214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Bundle.BundleEntry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E262C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_224E2634C()
{
  unint64_t v0;

  sub_224DDEA0C(319, &qword_2557E0330, type metadata accessor for ModelsR4.ResourceProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for ModelsR4.Condition(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  void (*v69)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  void (*v90)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  void (*v108)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  void (*v124)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  void (*v145)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int (*v151)(_QWORD, _QWORD, _QWORD);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  unsigned int (*v160)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  void (*v177)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int (*v188)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  void (*v205)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  _BYTE *__dst;
  _QWORD *__dsta;
  void *v213;
  void *v214;
  void *v215;
  _BYTE *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  _QWORD *v221;
  void *v222;
  void *v223;
  _QWORD *v224;
  int *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1)
      swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + 32) = v9;
    v10 = a2[6];
    if (v10 == 1)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_QWORD *)(a1 + 56) = a2[7];
    }
    else
    {
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = v10;
      *(_QWORD *)(a1 + 56) = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v12 = a2[9];
    if (v12 == 1)
    {
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_QWORD *)(a1 + 80) = a2[10];
    }
    else
    {
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = v12;
      *(_QWORD *)(a1 + 80) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)(a1 + 88) = a2[11];
    v13 = a2[13];
    swift_bridgeObjectRetain();
    if (v13 == 1)
    {
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_QWORD *)(a1 + 112) = a2[14];
    }
    else
    {
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = v13;
      *(_QWORD *)(a1 + 112) = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v14 = a2[16];
    if (v14 == 1)
    {
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
      *(_QWORD *)(a1 + 136) = a2[17];
    }
    else
    {
      *(_QWORD *)(a1 + 120) = a2[15];
      *(_QWORD *)(a1 + 128) = v14;
      *(_QWORD *)(a1 + 136) = a2[17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)(a1 + 144) = a2[18];
    v15 = v6[13];
    v16 = (_BYTE *)(a1 + v15);
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for FHIRDateTime();
    v226 = *(_QWORD *)(v18 - 8);
    v19 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v226 + 48);
    swift_bridgeObjectRetain();
    v222 = v19;
    if (v19(v17, 1, v18))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *v16 = *v17;
      *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
      *((_DWORD *)v16 + 4) = *((_DWORD *)v17 + 4);
      v21 = *((_QWORD *)v17 + 7);
      if (v21 == 1)
      {
        v22 = *(_OWORD *)(v17 + 40);
        *(_OWORD *)(v16 + 24) = *(_OWORD *)(v17 + 24);
        *(_OWORD *)(v16 + 40) = v22;
        *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
      }
      else
      {
        v16[24] = v17[24];
        *(_WORD *)(v16 + 25) = *(_WORD *)(v17 + 25);
        *(_OWORD *)(v16 + 28) = *(_OWORD *)(v17 + 28);
        *((_DWORD *)v16 + 11) = *((_DWORD *)v17 + 11);
        *((_QWORD *)v16 + 6) = *((_QWORD *)v17 + 6);
        *((_QWORD *)v16 + 7) = v21;
        swift_bridgeObjectRetain();
      }
      v23 = *(int *)(v18 + 28);
      v24 = &v16[v23];
      v25 = &v17[v23];
      v26 = sub_224F67874();
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 16))(v24, v25, v26);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      v19 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v222;
      v29 = *(int *)(v18 + 32);
      v30 = &v16[v29];
      v31 = &v17[v29];
      v32 = v31[1];
      *v30 = *v31;
      v30[1] = v32;
      v33 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v226 + 56);
      swift_bridgeObjectRetain();
      v33(v16, 0, 1, v18);
    }
    v34 = v6[14];
    v35 = (_BYTE *)(a1 + v34);
    v36 = (char *)a2 + v34;
    v37 = type metadata accessor for Period();
    v218 = *(_QWORD *)(v37 - 8);
    v38 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v218 + 48);
    v225 = v6;
    if (v38(v36, 1, v37))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      if (v19(v36, 1, v18))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        *v35 = *v36;
        *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
        *((_DWORD *)v35 + 4) = *((_DWORD *)v36 + 4);
        v41 = *((_QWORD *)v36 + 7);
        v213 = v38;
        if (v41 == 1)
        {
          v42 = *(_OWORD *)(v36 + 40);
          *(_OWORD *)(v35 + 24) = *(_OWORD *)(v36 + 24);
          *(_OWORD *)(v35 + 40) = v42;
          *((_QWORD *)v35 + 7) = *((_QWORD *)v36 + 7);
        }
        else
        {
          v35[24] = v36[24];
          *(_WORD *)(v35 + 25) = *(_WORD *)(v36 + 25);
          *(_OWORD *)(v35 + 28) = *(_OWORD *)(v36 + 28);
          *((_DWORD *)v35 + 11) = *((_DWORD *)v36 + 11);
          *((_QWORD *)v35 + 6) = *((_QWORD *)v36 + 6);
          *((_QWORD *)v35 + 7) = v41;
          swift_bridgeObjectRetain();
        }
        v43 = *(int *)(v18 + 28);
        v44 = &v35[v43];
        v45 = &v36[v43];
        v46 = sub_224F67874();
        v47 = *(_QWORD *)(v46 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        v19 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v222;
        v6 = v225;
        v49 = *(int *)(v18 + 32);
        v50 = &v35[v49];
        v51 = &v36[v49];
        v52 = v51[1];
        *v50 = *v51;
        v50[1] = v52;
        v53 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v226 + 56);
        swift_bridgeObjectRetain();
        v53(v35, 0, 1, v18);
        v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v213;
      }
      v54 = *(int *)(v37 + 20);
      v55 = &v35[v54];
      v56 = &v36[v54];
      if (v19(v56, 1, v18))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *v55 = *v56;
        *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
        *((_DWORD *)v55 + 4) = *((_DWORD *)v56 + 4);
        v58 = *((_QWORD *)v56 + 7);
        v214 = v38;
        if (v58 == 1)
        {
          v59 = *(_OWORD *)(v56 + 40);
          *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 24);
          *(_OWORD *)(v55 + 40) = v59;
          *((_QWORD *)v55 + 7) = *((_QWORD *)v56 + 7);
        }
        else
        {
          v55[24] = v56[24];
          *(_WORD *)(v55 + 25) = *(_WORD *)(v56 + 25);
          *(_OWORD *)(v55 + 28) = *(_OWORD *)(v56 + 28);
          *((_DWORD *)v55 + 11) = *((_DWORD *)v56 + 11);
          *((_QWORD *)v55 + 6) = *((_QWORD *)v56 + 6);
          *((_QWORD *)v55 + 7) = v58;
          swift_bridgeObjectRetain();
        }
        v60 = *(int *)(v18 + 28);
        __dst = &v55[v60];
        v61 = &v56[v60];
        v62 = sub_224F67874();
        v63 = *(_QWORD *)(v62 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dst, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v63 + 16))(__dst, v61, v62);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v62);
        }
        v19 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v222;
        v6 = v225;
        v65 = *(int *)(v18 + 32);
        v66 = &v55[v65];
        v67 = &v56[v65];
        v68 = v67[1];
        *v66 = *v67;
        v66[1] = v68;
        v69 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v226 + 56);
        swift_bridgeObjectRetain();
        v69(v55, 0, 1, v18);
        v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v214;
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v218 + 56))(v35, 0, 1, v37);
    }
    v70 = v6[15];
    v71 = v6[16];
    v72 = (_QWORD *)(a1 + v70);
    v73 = (uint64_t *)((char *)a2 + v70);
    v74 = v73[1];
    *v72 = *v73;
    v72[1] = v74;
    v75 = (_BYTE *)(a1 + v71);
    v76 = (char *)a2 + v71;
    swift_bridgeObjectRetain();
    if (v19(v76, 1, v18))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      *v75 = *v76;
      *((_QWORD *)v75 + 1) = *((_QWORD *)v76 + 1);
      *((_DWORD *)v75 + 4) = *((_DWORD *)v76 + 4);
      v78 = *((_QWORD *)v76 + 7);
      v215 = v38;
      if (v78 == 1)
      {
        v79 = *(_OWORD *)(v76 + 40);
        *(_OWORD *)(v75 + 24) = *(_OWORD *)(v76 + 24);
        *(_OWORD *)(v75 + 40) = v79;
        *((_QWORD *)v75 + 7) = *((_QWORD *)v76 + 7);
      }
      else
      {
        v75[24] = v76[24];
        *(_WORD *)(v75 + 25) = *(_WORD *)(v76 + 25);
        *(_OWORD *)(v75 + 28) = *(_OWORD *)(v76 + 28);
        *((_DWORD *)v75 + 11) = *((_DWORD *)v76 + 11);
        *((_QWORD *)v75 + 6) = *((_QWORD *)v76 + 6);
        *((_QWORD *)v75 + 7) = v78;
        swift_bridgeObjectRetain();
      }
      v80 = *(int *)(v18 + 28);
      v81 = &v75[v80];
      v82 = &v76[v80];
      v83 = sub_224F67874();
      v84 = *(_QWORD *)(v83 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 16))(v81, v82, v83);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
      }
      v86 = *(int *)(v18 + 32);
      v87 = &v75[v86];
      v88 = &v76[v86];
      v89 = v88[1];
      *v87 = *v88;
      v87[1] = v89;
      v6 = v225;
      v90 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v226 + 56);
      swift_bridgeObjectRetain();
      v90(v75, 0, 1, v18);
      v19 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v222;
      v38 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v215;
    }
    v91 = v6[17];
    v92 = (_BYTE *)(a1 + v91);
    v93 = (char *)a2 + v91;
    if (v38((char *)a2 + v91, 1, v37))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      if (v19(v93, 1, v18))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        *v92 = *v93;
        *((_QWORD *)v92 + 1) = *((_QWORD *)v93 + 1);
        *((_DWORD *)v92 + 4) = *((_DWORD *)v93 + 4);
        v96 = *((_QWORD *)v93 + 7);
        if (v96 == 1)
        {
          v97 = *(_OWORD *)(v93 + 40);
          *(_OWORD *)(v92 + 24) = *(_OWORD *)(v93 + 24);
          *(_OWORD *)(v92 + 40) = v97;
          *((_QWORD *)v92 + 7) = *((_QWORD *)v93 + 7);
        }
        else
        {
          v92[24] = v93[24];
          *(_WORD *)(v92 + 25) = *(_WORD *)(v93 + 25);
          *(_OWORD *)(v92 + 28) = *(_OWORD *)(v93 + 28);
          *((_DWORD *)v92 + 11) = *((_DWORD *)v93 + 11);
          *((_QWORD *)v92 + 6) = *((_QWORD *)v93 + 6);
          *((_QWORD *)v92 + 7) = v96;
          swift_bridgeObjectRetain();
        }
        v98 = *(int *)(v18 + 28);
        v99 = &v92[v98];
        v100 = &v93[v98];
        v101 = sub_224F67874();
        v102 = *(_QWORD *)(v101 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v102 + 16))(v99, v100, v101);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
        }
        v19 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v222;
        v6 = v225;
        v104 = *(int *)(v18 + 32);
        v105 = &v92[v104];
        v106 = &v93[v104];
        v107 = v106[1];
        *v105 = *v106;
        v105[1] = v107;
        v108 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v226 + 56);
        swift_bridgeObjectRetain();
        v108(v92, 0, 1, v18);
      }
      v109 = *(int *)(v37 + 20);
      v110 = &v92[v109];
      v111 = &v93[v109];
      if (v19(v111, 1, v18))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
      }
      else
      {
        *v110 = *v111;
        *((_QWORD *)v110 + 1) = *((_QWORD *)v111 + 1);
        *((_DWORD *)v110 + 4) = *((_DWORD *)v111 + 4);
        v113 = *((_QWORD *)v111 + 7);
        if (v113 == 1)
        {
          v114 = *(_OWORD *)(v111 + 40);
          *(_OWORD *)(v110 + 24) = *(_OWORD *)(v111 + 24);
          *(_OWORD *)(v110 + 40) = v114;
          *((_QWORD *)v110 + 7) = *((_QWORD *)v111 + 7);
        }
        else
        {
          v110[24] = v111[24];
          *(_WORD *)(v110 + 25) = *(_WORD *)(v111 + 25);
          *(_OWORD *)(v110 + 28) = *(_OWORD *)(v111 + 28);
          *((_DWORD *)v110 + 11) = *((_DWORD *)v111 + 11);
          *((_QWORD *)v110 + 6) = *((_QWORD *)v111 + 6);
          *((_QWORD *)v110 + 7) = v113;
          swift_bridgeObjectRetain();
        }
        v115 = *(int *)(v18 + 28);
        v216 = &v110[v115];
        v116 = &v111[v115];
        v117 = sub_224F67874();
        v118 = *(_QWORD *)(v117 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v216, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v118 + 16))(v216, v116, v117);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v216, 0, 1, v117);
        }
        v19 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v222;
        v6 = v225;
        v120 = *(int *)(v18 + 32);
        v121 = &v110[v120];
        v122 = &v111[v120];
        v123 = v122[1];
        *v121 = *v122;
        v121[1] = v123;
        v124 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v226 + 56);
        swift_bridgeObjectRetain();
        v124(v110, 0, 1, v18);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v218 + 56))(v92, 0, 1, v37);
    }
    v125 = v6[18];
    v126 = v6[19];
    v127 = (_QWORD *)(a1 + v125);
    v128 = (uint64_t *)((char *)a2 + v125);
    v129 = v128[1];
    *v127 = *v128;
    v127[1] = v129;
    v130 = (_BYTE *)(a1 + v126);
    v131 = (char *)a2 + v126;
    swift_bridgeObjectRetain();
    if (v19(v131, 1, v18))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
    }
    else
    {
      *v130 = *v131;
      *((_QWORD *)v130 + 1) = *((_QWORD *)v131 + 1);
      *((_DWORD *)v130 + 4) = *((_DWORD *)v131 + 4);
      v133 = *((_QWORD *)v131 + 7);
      if (v133 == 1)
      {
        v134 = *(_OWORD *)(v131 + 40);
        *(_OWORD *)(v130 + 24) = *(_OWORD *)(v131 + 24);
        *(_OWORD *)(v130 + 40) = v134;
        *((_QWORD *)v130 + 7) = *((_QWORD *)v131 + 7);
      }
      else
      {
        v130[24] = v131[24];
        *(_WORD *)(v130 + 25) = *(_WORD *)(v131 + 25);
        *(_OWORD *)(v130 + 28) = *(_OWORD *)(v131 + 28);
        *((_DWORD *)v130 + 11) = *((_DWORD *)v131 + 11);
        *((_QWORD *)v130 + 6) = *((_QWORD *)v131 + 6);
        *((_QWORD *)v130 + 7) = v133;
        swift_bridgeObjectRetain();
      }
      v135 = *(int *)(v18 + 28);
      v136 = &v130[v135];
      v137 = &v131[v135];
      v138 = sub_224F67874();
      v139 = *(_QWORD *)(v138 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v139 + 16))(v136, v137, v138);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
      }
      v141 = *(int *)(v18 + 32);
      v142 = &v130[v141];
      v143 = &v131[v141];
      v144 = v143[1];
      *v142 = *v143;
      v142[1] = v144;
      v145 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v226 + 56);
      swift_bridgeObjectRetain();
      v145(v130, 0, 1, v18);
    }
    v146 = v6[20];
    v147 = (_QWORD *)(a1 + v146);
    v148 = (uint64_t *)((char *)a2 + v146);
    v149 = type metadata accessor for Reference();
    v150 = *(_QWORD *)(v149 - 8);
    v151 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v150 + 48);
    if (v151(v148, 1, v149))
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
    }
    else
    {
      v219 = v149;
      v223 = v151;
      v227 = v150;
      v153 = v148[1];
      *v147 = *v148;
      v147[1] = v153;
      v154 = v148[3];
      v147[2] = v148[2];
      v147[3] = v154;
      v155 = *(int *)(v149 + 24);
      v156 = (_QWORD *)((char *)v147 + v155);
      v157 = (_QWORD *)((char *)v148 + v155);
      v158 = type metadata accessor for Identifier();
      v159 = *(_QWORD **)(v158 - 8);
      v160 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))v159[6];
      swift_bridgeObjectRetain();
      v161 = v157;
      swift_bridgeObjectRetain();
      if (v160(v157, 1, v158))
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
        v6 = v225;
        v150 = v227;
        v149 = v219;
        v151 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v223;
      }
      else
      {
        __dsta = v159;
        v163 = v157[1];
        *v156 = *v157;
        v156[1] = v163;
        v164 = v157[3];
        swift_bridgeObjectRetain();
        v217 = (char *)v157;
        if (v164 == 1)
        {
          *((_OWORD *)v156 + 1) = *((_OWORD *)v157 + 1);
          v156[4] = v157[4];
        }
        else
        {
          v156[2] = v157[2];
          v156[3] = v164;
          v156[4] = v157[4];
          swift_bridgeObjectRetain();
          v161 = v157;
          swift_bridgeObjectRetain();
        }
        v165 = v158;
        v149 = v219;
        v151 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v223;
        v166 = *(int *)(v158 + 24);
        v220 = (char *)v156 + v166;
        v167 = (char *)v161 + v166;
        v168 = sub_224F675D4();
        v169 = *(_QWORD *)(v168 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v220, v167, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v220, v167, v168);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v220, 0, 1, v168);
        }
        v6 = v225;
        v150 = v227;
        v171 = *(int *)(v165 + 28);
        v172 = (_QWORD *)((char *)v156 + v171);
        v173 = &v217[v171];
        v174 = *((_QWORD *)v173 + 1);
        *v172 = *(_QWORD *)v173;
        v172[1] = v174;
        v175 = v156;
        v176 = v165;
        v177 = (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__dsta[7];
        swift_bridgeObjectRetain();
        v177(v175, 0, 1, v176);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v147, 0, 1, v149);
    }
    v178 = v6[21];
    v179 = (_QWORD *)(a1 + v178);
    v180 = (uint64_t *)((char *)a2 + v178);
    if (v151((char *)a2 + v178, 1, v149))
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
    }
    else
    {
      v228 = v150;
      v182 = v180[1];
      *v179 = *v180;
      v179[1] = v182;
      v183 = v180[3];
      v179[2] = v180[2];
      v179[3] = v183;
      v184 = *(int *)(v149 + 24);
      v224 = (_QWORD *)((char *)v179 + v184);
      v185 = (_QWORD *)((char *)v180 + v184);
      v186 = type metadata accessor for Identifier();
      v187 = *(_QWORD *)(v186 - 8);
      v188 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v187 + 48);
      swift_bridgeObjectRetain();
      v189 = v185;
      swift_bridgeObjectRetain();
      if (v188(v185, 1, v186))
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v224, v185, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
        v6 = v225;
        v191 = v228;
      }
      else
      {
        v192 = v185[1];
        *v224 = *v185;
        v224[1] = v192;
        v193 = v185[3];
        swift_bridgeObjectRetain();
        v221 = v185;
        if (v193 == 1)
        {
          *((_OWORD *)v224 + 1) = *((_OWORD *)v185 + 1);
          v224[4] = v185[4];
        }
        else
        {
          v224[2] = v185[2];
          v224[3] = v193;
          v224[4] = v185[4];
          swift_bridgeObjectRetain();
          v189 = v185;
          swift_bridgeObjectRetain();
        }
        v194 = v186;
        v195 = *(int *)(v186 + 24);
        v196 = (char *)v224 + v195;
        v197 = (char *)v189 + v195;
        v198 = sub_224F675D4();
        v199 = *(_QWORD *)(v198 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v199 + 48))(v197, 1, v198))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v196, v197, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v199 + 16))(v196, v197, v198);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v196, 0, 1, v198);
        }
        v6 = v225;
        v191 = v228;
        v201 = *(int *)(v194 + 28);
        v202 = (_QWORD *)((char *)v224 + v201);
        v203 = (_QWORD *)((char *)v221 + v201);
        v204 = v203[1];
        *v202 = *v203;
        v202[1] = v204;
        v205 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v187 + 56);
        swift_bridgeObjectRetain();
        v205(v224, 0, 1, v194);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v191 + 56))(v179, 0, 1, v149);
    }
    v206 = v6[23];
    *(_QWORD *)(a1 + v6[22]) = *(uint64_t *)((char *)a2 + v6[22]);
    v207 = (_QWORD *)(a1 + v206);
    v208 = (uint64_t *)((char *)a2 + v206);
    v209 = v208[1];
    *v207 = *v208;
    v207[1] = v209;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsR4.Condition(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  unsigned int (*v6)(char *, uint64_t, uint64_t);
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[4] != 1)
    swift_bridgeObjectRelease();
  if (a1[6] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[9] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[13] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[16] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v4 = (char *)a1 + a2[13];
  v5 = type metadata accessor for FHIRDateTime();
  v6 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*((_QWORD *)v4 + 7) != 1)
      swift_bridgeObjectRelease();
    v7 = &v4[*(int *)(v5 + 28)];
    v8 = sub_224F67874();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  v10 = (char *)a1 + a2[14];
  v11 = type metadata accessor for Period();
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
  if (!v12(v10, 1, v11))
  {
    if (!v6(v10, 1, v5))
    {
      if (*((_QWORD *)v10 + 7) != 1)
        swift_bridgeObjectRelease();
      v13 = &v10[*(int *)(v5 + 28)];
      v14 = sub_224F67874();
      v15 = *(_QWORD *)(v14 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
      swift_bridgeObjectRelease();
    }
    v16 = &v10[*(int *)(v11 + 20)];
    if (!v6(v16, 1, v5))
    {
      if (*((_QWORD *)v16 + 7) != 1)
        swift_bridgeObjectRelease();
      v17 = &v16[*(int *)(v5 + 28)];
      v18 = sub_224F67874();
      v19 = *(_QWORD *)(v18 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
        (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  v20 = (char *)a1 + a2[16];
  if (!v6(v20, 1, v5))
  {
    if (*((_QWORD *)v20 + 7) != 1)
      swift_bridgeObjectRelease();
    v21 = &v20[*(int *)(v5 + 28)];
    v22 = sub_224F67874();
    v23 = *(_QWORD *)(v22 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
    swift_bridgeObjectRelease();
  }
  v24 = (char *)a1 + a2[17];
  if (!v12(v24, 1, v11))
  {
    if (!v6(v24, 1, v5))
    {
      if (*((_QWORD *)v24 + 7) != 1)
        swift_bridgeObjectRelease();
      v25 = &v24[*(int *)(v5 + 28)];
      v26 = sub_224F67874();
      v27 = *(_QWORD *)(v26 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v26);
      swift_bridgeObjectRelease();
    }
    v28 = &v24[*(int *)(v11 + 20)];
    if (!v6(v28, 1, v5))
    {
      if (*((_QWORD *)v28 + 7) != 1)
        swift_bridgeObjectRelease();
      v29 = &v28[*(int *)(v5 + 28)];
      v30 = sub_224F67874();
      v31 = *(_QWORD *)(v30 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  v32 = (char *)a1 + a2[19];
  if (!v6(v32, 1, v5))
  {
    if (*((_QWORD *)v32 + 7) != 1)
      swift_bridgeObjectRelease();
    v33 = &v32[*(int *)(v5 + 28)];
    v34 = sub_224F67874();
    v35 = *(_QWORD *)(v34 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
    swift_bridgeObjectRelease();
  }
  v36 = (char *)a1 + a2[20];
  v37 = type metadata accessor for Reference();
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48);
  if (!v38(v36, 1, v37))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = &v36[*(int *)(v37 + 24)];
    v40 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v39, 1, v40))
    {
      swift_bridgeObjectRelease();
      if (*((_QWORD *)v39 + 3) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v41 = &v39[*(int *)(v40 + 24)];
      v42 = sub_224F675D4();
      v43 = *(_QWORD *)(v42 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
        (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
      swift_bridgeObjectRelease();
    }
  }
  v44 = (char *)a1 + a2[21];
  if (!v38(v44, 1, v37))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = &v44[*(int *)(v37 + 24)];
    v46 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46))
    {
      swift_bridgeObjectRelease();
      if (*((_QWORD *)v45 + 3) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v47 = &v45[*(int *)(v46 + 24)];
      v48 = sub_224F675D4();
      v49 = *(_QWORD *)(v48 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v48);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelsR4.Condition(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int (*v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned int (*v36)(_QWORD, _QWORD, _QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  void (*v67)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  void (*v88)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  void (*v106)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  void (*v122)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  void (*v143)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int (*v149)(_QWORD, _QWORD, _QWORD);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  _QWORD *v157;
  unsigned int (*v158)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  char *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  void (*v175)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int (*v186)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  void (*v202)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  _BYTE *__dst;
  _QWORD *__dsta;
  void *v210;
  void *v211;
  void *v212;
  _BYTE *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  _QWORD *v218;
  void *v219;
  void *v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int *v225;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1)
    swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v10 = *(_QWORD *)(a2 + 72);
  if (v10 == 1)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  if (v11 == 1)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v11;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v12 = *(_QWORD *)(a2 + 128);
  if (v12 == 1)
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  }
  else
  {
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v13 = a3[13];
  v14 = (_BYTE *)(a1 + v13);
  v15 = (_BYTE *)(a2 + v13);
  v16 = type metadata accessor for FHIRDateTime();
  v222 = *(_QWORD *)(v16 - 8);
  v17 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v222 + 48);
  swift_bridgeObjectRetain();
  v219 = v17;
  if (v17(v15, 1, v16))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
    *((_DWORD *)v14 + 4) = *((_DWORD *)v15 + 4);
    v19 = *((_QWORD *)v15 + 7);
    if (v19 == 1)
    {
      v20 = *(_OWORD *)(v15 + 40);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
      *(_OWORD *)(v14 + 40) = v20;
      *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
    }
    else
    {
      v14[24] = v15[24];
      *(_WORD *)(v14 + 25) = *(_WORD *)(v15 + 25);
      *(_OWORD *)(v14 + 28) = *(_OWORD *)(v15 + 28);
      *((_DWORD *)v14 + 11) = *((_DWORD *)v15 + 11);
      *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
      *((_QWORD *)v14 + 7) = v19;
      swift_bridgeObjectRetain();
    }
    v21 = *(int *)(v16 + 28);
    v22 = &v14[v21];
    v23 = &v15[v21];
    v24 = sub_224F67874();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = *(int *)(v16 + 32);
    v28 = &v14[v27];
    v29 = &v15[v27];
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v222 + 56);
    swift_bridgeObjectRetain();
    v31(v14, 0, 1, v16);
    v17 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v219;
  }
  v32 = a3[14];
  v33 = (_BYTE *)(a1 + v32);
  v34 = (_BYTE *)(a2 + v32);
  v35 = type metadata accessor for Period();
  v215 = *(_QWORD *)(v35 - 8);
  v36 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v215 + 48);
  v225 = a3;
  if (v36(v34, 1, v35))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    if (v17(v34, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      *v33 = *v34;
      *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
      *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
      v39 = *((_QWORD *)v34 + 7);
      v210 = v36;
      if (v39 == 1)
      {
        v40 = *(_OWORD *)(v34 + 40);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
        *(_OWORD *)(v33 + 40) = v40;
        *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
      }
      else
      {
        v33[24] = v34[24];
        *(_WORD *)(v33 + 25) = *(_WORD *)(v34 + 25);
        *(_OWORD *)(v33 + 28) = *(_OWORD *)(v34 + 28);
        *((_DWORD *)v33 + 11) = *((_DWORD *)v34 + 11);
        *((_QWORD *)v33 + 6) = *((_QWORD *)v34 + 6);
        *((_QWORD *)v33 + 7) = v39;
        swift_bridgeObjectRetain();
      }
      v41 = *(int *)(v16 + 28);
      v42 = &v33[v41];
      v43 = &v34[v41];
      v44 = sub_224F67874();
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 16))(v42, v43, v44);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      v47 = *(int *)(v16 + 32);
      v48 = &v33[v47];
      v49 = &v34[v47];
      v50 = v49[1];
      *v48 = *v49;
      v48[1] = v50;
      a3 = v225;
      v51 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v222 + 56);
      swift_bridgeObjectRetain();
      v51(v33, 0, 1, v16);
      v17 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v219;
      v36 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v210;
    }
    v52 = *(int *)(v35 + 20);
    v53 = &v33[v52];
    v54 = &v34[v52];
    if (v17(v54, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      *v53 = *v54;
      *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
      *((_DWORD *)v53 + 4) = *((_DWORD *)v54 + 4);
      v56 = *((_QWORD *)v54 + 7);
      v211 = v36;
      if (v56 == 1)
      {
        v57 = *(_OWORD *)(v54 + 40);
        *(_OWORD *)(v53 + 24) = *(_OWORD *)(v54 + 24);
        *(_OWORD *)(v53 + 40) = v57;
        *((_QWORD *)v53 + 7) = *((_QWORD *)v54 + 7);
      }
      else
      {
        v53[24] = v54[24];
        *(_WORD *)(v53 + 25) = *(_WORD *)(v54 + 25);
        *(_OWORD *)(v53 + 28) = *(_OWORD *)(v54 + 28);
        *((_DWORD *)v53 + 11) = *((_DWORD *)v54 + 11);
        *((_QWORD *)v53 + 6) = *((_QWORD *)v54 + 6);
        *((_QWORD *)v53 + 7) = v56;
        swift_bridgeObjectRetain();
      }
      v58 = *(int *)(v16 + 28);
      __dst = &v53[v58];
      v59 = &v54[v58];
      v60 = sub_224F67874();
      v61 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 16))(__dst, v59, v60);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(__dst, 0, 1, v60);
      }
      v36 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v211;
      v63 = *(int *)(v16 + 32);
      v64 = &v53[v63];
      v65 = &v54[v63];
      v66 = v65[1];
      *v64 = *v65;
      v64[1] = v66;
      v67 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v222 + 56);
      swift_bridgeObjectRetain();
      v67(v53, 0, 1, v16);
      a3 = v225;
      v17 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v219;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v215 + 56))(v33, 0, 1, v35);
  }
  v68 = a3[15];
  v69 = a3[16];
  v70 = (_QWORD *)(a1 + v68);
  v71 = (_QWORD *)(a2 + v68);
  v72 = v71[1];
  *v70 = *v71;
  v70[1] = v72;
  v73 = (_BYTE *)(a1 + v69);
  v74 = (_BYTE *)(a2 + v69);
  swift_bridgeObjectRetain();
  if (v17(v74, 1, v16))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    *v73 = *v74;
    *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
    *((_DWORD *)v73 + 4) = *((_DWORD *)v74 + 4);
    v76 = *((_QWORD *)v74 + 7);
    v212 = v36;
    if (v76 == 1)
    {
      v77 = *(_OWORD *)(v74 + 40);
      *(_OWORD *)(v73 + 24) = *(_OWORD *)(v74 + 24);
      *(_OWORD *)(v73 + 40) = v77;
      *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
    }
    else
    {
      v73[24] = v74[24];
      *(_WORD *)(v73 + 25) = *(_WORD *)(v74 + 25);
      *(_OWORD *)(v73 + 28) = *(_OWORD *)(v74 + 28);
      *((_DWORD *)v73 + 11) = *((_DWORD *)v74 + 11);
      *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
      *((_QWORD *)v73 + 7) = v76;
      swift_bridgeObjectRetain();
    }
    v78 = *(int *)(v16 + 28);
    v79 = &v73[v78];
    v80 = &v74[v78];
    v81 = sub_224F67874();
    v82 = *(_QWORD *)(v81 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 16))(v79, v80, v81);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
    }
    v84 = *(int *)(v16 + 32);
    v85 = &v73[v84];
    v86 = &v74[v84];
    v87 = v86[1];
    *v85 = *v86;
    v85[1] = v87;
    a3 = v225;
    v88 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v222 + 56);
    swift_bridgeObjectRetain();
    v88(v73, 0, 1, v16);
    v17 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v219;
    v36 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v212;
  }
  v89 = a3[17];
  v90 = (_BYTE *)(a1 + v89);
  v91 = (_BYTE *)(a2 + v89);
  if (v36(a2 + v89, 1, v35))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
  }
  else
  {
    if (v17(v91, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    else
    {
      *v90 = *v91;
      *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
      *((_DWORD *)v90 + 4) = *((_DWORD *)v91 + 4);
      v94 = *((_QWORD *)v91 + 7);
      if (v94 == 1)
      {
        v95 = *(_OWORD *)(v91 + 40);
        *(_OWORD *)(v90 + 24) = *(_OWORD *)(v91 + 24);
        *(_OWORD *)(v90 + 40) = v95;
        *((_QWORD *)v90 + 7) = *((_QWORD *)v91 + 7);
      }
      else
      {
        v90[24] = v91[24];
        *(_WORD *)(v90 + 25) = *(_WORD *)(v91 + 25);
        *(_OWORD *)(v90 + 28) = *(_OWORD *)(v91 + 28);
        *((_DWORD *)v90 + 11) = *((_DWORD *)v91 + 11);
        *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
        *((_QWORD *)v90 + 7) = v94;
        swift_bridgeObjectRetain();
      }
      v96 = *(int *)(v16 + 28);
      v97 = &v90[v96];
      v98 = &v91[v96];
      v99 = sub_224F67874();
      v100 = *(_QWORD *)(v99 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v100 + 16))(v97, v98, v99);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
      }
      v102 = *(int *)(v16 + 32);
      v103 = &v90[v102];
      v104 = &v91[v102];
      v105 = v104[1];
      *v103 = *v104;
      v103[1] = v105;
      a3 = v225;
      v106 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v222 + 56);
      swift_bridgeObjectRetain();
      v106(v90, 0, 1, v16);
      v17 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v219;
    }
    v107 = *(int *)(v35 + 20);
    v108 = &v90[v107];
    v109 = &v91[v107];
    if (v17(v109, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      *v108 = *v109;
      *((_QWORD *)v108 + 1) = *((_QWORD *)v109 + 1);
      *((_DWORD *)v108 + 4) = *((_DWORD *)v109 + 4);
      v111 = *((_QWORD *)v109 + 7);
      if (v111 == 1)
      {
        v112 = *(_OWORD *)(v109 + 40);
        *(_OWORD *)(v108 + 24) = *(_OWORD *)(v109 + 24);
        *(_OWORD *)(v108 + 40) = v112;
        *((_QWORD *)v108 + 7) = *((_QWORD *)v109 + 7);
      }
      else
      {
        v108[24] = v109[24];
        *(_WORD *)(v108 + 25) = *(_WORD *)(v109 + 25);
        *(_OWORD *)(v108 + 28) = *(_OWORD *)(v109 + 28);
        *((_DWORD *)v108 + 11) = *((_DWORD *)v109 + 11);
        *((_QWORD *)v108 + 6) = *((_QWORD *)v109 + 6);
        *((_QWORD *)v108 + 7) = v111;
        swift_bridgeObjectRetain();
      }
      v113 = *(int *)(v16 + 28);
      v213 = &v108[v113];
      v114 = &v109[v113];
      v115 = sub_224F67874();
      v116 = *(_QWORD *)(v115 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v213, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v116 + 16))(v213, v114, v115);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v213, 0, 1, v115);
      }
      v118 = *(int *)(v16 + 32);
      v119 = &v108[v118];
      v120 = &v109[v118];
      v121 = v120[1];
      *v119 = *v120;
      v119[1] = v121;
      v122 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v222 + 56);
      swift_bridgeObjectRetain();
      v122(v108, 0, 1, v16);
      a3 = v225;
      v17 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v219;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v215 + 56))(v90, 0, 1, v35);
  }
  v123 = a3[18];
  v124 = a3[19];
  v125 = (_QWORD *)(a1 + v123);
  v126 = (_QWORD *)(a2 + v123);
  v127 = v126[1];
  *v125 = *v126;
  v125[1] = v127;
  v128 = (_BYTE *)(a1 + v124);
  v129 = (_BYTE *)(a2 + v124);
  swift_bridgeObjectRetain();
  if (v17(v129, 1, v16))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    *v128 = *v129;
    *((_QWORD *)v128 + 1) = *((_QWORD *)v129 + 1);
    *((_DWORD *)v128 + 4) = *((_DWORD *)v129 + 4);
    v131 = *((_QWORD *)v129 + 7);
    if (v131 == 1)
    {
      v132 = *(_OWORD *)(v129 + 40);
      *(_OWORD *)(v128 + 24) = *(_OWORD *)(v129 + 24);
      *(_OWORD *)(v128 + 40) = v132;
      *((_QWORD *)v128 + 7) = *((_QWORD *)v129 + 7);
    }
    else
    {
      v128[24] = v129[24];
      *(_WORD *)(v128 + 25) = *(_WORD *)(v129 + 25);
      *(_OWORD *)(v128 + 28) = *(_OWORD *)(v129 + 28);
      *((_DWORD *)v128 + 11) = *((_DWORD *)v129 + 11);
      *((_QWORD *)v128 + 6) = *((_QWORD *)v129 + 6);
      *((_QWORD *)v128 + 7) = v131;
      swift_bridgeObjectRetain();
    }
    v133 = *(int *)(v16 + 28);
    v134 = &v128[v133];
    v135 = &v129[v133];
    v136 = sub_224F67874();
    v137 = *(_QWORD *)(v136 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v137 + 16))(v134, v135, v136);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v134, 0, 1, v136);
    }
    v139 = *(int *)(v16 + 32);
    v140 = &v128[v139];
    v141 = &v129[v139];
    v142 = v141[1];
    *v140 = *v141;
    v140[1] = v142;
    v143 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v222 + 56);
    swift_bridgeObjectRetain();
    v143(v128, 0, 1, v16);
  }
  v144 = a3[20];
  v145 = (_QWORD *)(a1 + v144);
  v146 = (_QWORD *)(a2 + v144);
  v147 = type metadata accessor for Reference();
  v148 = *(_QWORD *)(v147 - 8);
  v149 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v148 + 48);
  if (v149(v146, 1, v147))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
  }
  else
  {
    v220 = v149;
    v223 = v148;
    v151 = v146[1];
    *v145 = *v146;
    v145[1] = v151;
    v152 = v146[3];
    v145[2] = v146[2];
    v145[3] = v152;
    v216 = v147;
    v153 = *(int *)(v147 + 24);
    v154 = (_QWORD *)((char *)v145 + v153);
    v155 = (_QWORD *)((char *)v146 + v153);
    v156 = type metadata accessor for Identifier();
    v157 = *(_QWORD **)(v156 - 8);
    v158 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))v157[6];
    swift_bridgeObjectRetain();
    v159 = v155;
    swift_bridgeObjectRetain();
    if (v158(v155, 1, v156))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
      a3 = v225;
      v147 = v216;
      v149 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v220;
    }
    else
    {
      __dsta = v157;
      v161 = v155[1];
      *v154 = *v155;
      v154[1] = v161;
      v162 = v155[3];
      swift_bridgeObjectRetain();
      v214 = (char *)v155;
      if (v162 == 1)
      {
        *((_OWORD *)v154 + 1) = *((_OWORD *)v155 + 1);
        v154[4] = v155[4];
      }
      else
      {
        v154[2] = v155[2];
        v154[3] = v162;
        v154[4] = v155[4];
        swift_bridgeObjectRetain();
        v159 = v155;
        swift_bridgeObjectRetain();
      }
      v163 = v156;
      v147 = v216;
      v149 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v220;
      v164 = *(int *)(v156 + 24);
      v217 = (char *)v154 + v164;
      v165 = (char *)v159 + v164;
      v166 = sub_224F675D4();
      v167 = *(_QWORD *)(v166 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v165, 1, v166))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v217, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v217, v165, v166);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v217, 0, 1, v166);
      }
      a3 = v225;
      v169 = *(int *)(v163 + 28);
      v170 = (_QWORD *)((char *)v154 + v169);
      v171 = &v214[v169];
      v172 = *((_QWORD *)v171 + 1);
      *v170 = *(_QWORD *)v171;
      v170[1] = v172;
      v173 = v154;
      v174 = v163;
      v175 = (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__dsta[7];
      swift_bridgeObjectRetain();
      v175(v173, 0, 1, v174);
    }
    v148 = v223;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v145, 0, 1, v147);
  }
  v176 = a3[21];
  v177 = (_QWORD *)(a1 + v176);
  v178 = (_QWORD *)(a2 + v176);
  if (v149(a2 + v176, 1, v147))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
  }
  else
  {
    v180 = v178[1];
    *v177 = *v178;
    v177[1] = v180;
    v181 = v178[3];
    v177[2] = v178[2];
    v177[3] = v181;
    v182 = *(int *)(v147 + 24);
    v221 = (_QWORD *)((char *)v177 + v182);
    v224 = v148;
    v183 = (_QWORD *)((char *)v178 + v182);
    v184 = type metadata accessor for Identifier();
    v185 = *(_QWORD *)(v184 - 8);
    v186 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v185 + 48);
    swift_bridgeObjectRetain();
    v187 = v183;
    swift_bridgeObjectRetain();
    if (v186(v183, 1, v184))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v221, v183, *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64));
    }
    else
    {
      v189 = v183[1];
      *v221 = *v183;
      v221[1] = v189;
      v190 = v183[3];
      swift_bridgeObjectRetain();
      v218 = v183;
      if (v190 == 1)
      {
        *((_OWORD *)v221 + 1) = *((_OWORD *)v183 + 1);
        v221[4] = v183[4];
      }
      else
      {
        v221[2] = v183[2];
        v221[3] = v190;
        v221[4] = v183[4];
        swift_bridgeObjectRetain();
        v187 = v183;
        swift_bridgeObjectRetain();
      }
      v191 = v184;
      v192 = *(int *)(v184 + 24);
      v193 = (char *)v221 + v192;
      v194 = (char *)v187 + v192;
      v195 = sub_224F675D4();
      v196 = *(_QWORD *)(v195 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v194, 1, v195))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v196 + 16))(v193, v194, v195);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v196 + 56))(v193, 0, 1, v195);
      }
      v198 = *(int *)(v191 + 28);
      v199 = (_QWORD *)((char *)v221 + v198);
      v200 = (_QWORD *)((char *)v218 + v198);
      v201 = v200[1];
      *v199 = *v200;
      v199[1] = v201;
      v202 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v185 + 56);
      swift_bridgeObjectRetain();
      v202(v221, 0, 1, v191);
    }
    a3 = v225;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v224 + 56))(v177, 0, 1, v147);
  }
  v203 = a3[23];
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  v204 = (_QWORD *)(a1 + v203);
  v205 = (_QWORD *)(a2 + v203);
  v206 = v205[1];
  *v204 = *v205;
  v204[1] = v206;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.Condition(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  void (*v56)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(void *, uint64_t, uint64_t);
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  int v77;
  int v78;
  unint64_t *v79;
  uint64_t (*v80)();
  uint64_t (*v81)(uint64_t, uint64_t);
  uint64_t (*v82)();
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  void (*v105)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  void (*v123)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  int v130;
  int v131;
  uint64_t (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 *v138;
  __int128 *v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  void *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  char *v152;
  void (*v153)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  void *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(void *, uint64_t, uint64_t);
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  char *v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  int v172;
  int v173;
  uint64_t (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  size_t v176;
  void *v177;
  const void *v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t (*v182)(uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  _BYTE *v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void (*v202)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v203;
  _BYTE *v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  void (*v220)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  int v227;
  int v228;
  uint64_t (*v229)(uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 *v234;
  __int128 *v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  void *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  char *v248;
  void (*v249)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  void *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t (*v258)(void *, uint64_t, uint64_t);
  int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t (*v270)(_QWORD *, uint64_t, uint64_t);
  int v271;
  int v272;
  uint64_t (*v273)(uint64_t, uint64_t);
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int (*v280)(_QWORD *, uint64_t, uint64_t);
  uint64_t v281;
  uint64_t v282;
  __int128 *v283;
  __int128 *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t (*v287)(__int128 *, uint64_t, uint64_t);
  int v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  void (*v307)(_QWORD *, _QWORD, uint64_t, uint64_t);
  __int128 *v308;
  __int128 *v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  __int128 *v313;
  __int128 *v314;
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 *v318;
  __int128 *v319;
  uint64_t v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  _BYTE *v324;
  _BYTE *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  uint64_t v330;
  _BYTE *v331;
  _BYTE *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  void (*v344)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  void (*v348)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v349;
  _QWORD *v350;
  char *v351;
  void (*v352)(__int128 *, _QWORD, uint64_t, uint64_t);
  uint64_t v353;
  _QWORD *v354;
  _QWORD *v355;
  int v356;
  int v357;
  uint64_t (*v358)(uint64_t, uint64_t);
  uint64_t v359;
  size_t v360;
  void *v361;
  const void *v362;
  uint64_t v363;
  _QWORD *v364;
  _QWORD *v365;
  uint64_t v366;
  _QWORD *v367;
  unsigned int (*v368)(_QWORD *, uint64_t, uint64_t);
  uint64_t v369;
  void (**v370)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v371;
  uint64_t v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t (*v376)(uint64_t, uint64_t, uint64_t);
  int v377;
  int v378;
  uint64_t (*v379)(uint64_t, uint64_t);
  uint64_t v380;
  _QWORD *v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  __int128 v391;
  uint64_t v392;
  _QWORD *v393;
  _QWORD *v394;
  void (*v395)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v396;
  _QWORD *v397;
  _QWORD *v398;
  __int128 *v400;
  __int128 *v401;
  uint64_t v402;
  __int128 v403;
  uint64_t v404;
  void *v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  char *v412;
  void (*v413)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  __int128 v421;
  uint64_t v422;
  _BYTE *v423;
  _BYTE *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t (*v427)(_BYTE *, uint64_t, uint64_t);
  int v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  _QWORD *v432;
  _QWORD *v433;
  uint64_t v434;
  int v435;
  int v436;
  uint64_t v437;
  __int128 v438;
  __int128 v439;
  __int128 *v440;
  __int128 *v441;
  uint64_t v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  uint64_t v446;
  _BYTE *v447;
  _BYTE *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  _QWORD *v454;
  void (*v455)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  _BYTE *v459;
  _BYTE *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t (*v463)(_BYTE *, uint64_t, uint64_t);
  int v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  _QWORD *v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t v471;
  _BYTE *v472;
  int v473;
  int v474;
  uint64_t (*v475)(uint64_t, uint64_t);
  uint64_t v476;
  uint64_t v477;
  __int128 v478;
  __int128 v479;
  __int128 *v480;
  __int128 *v481;
  uint64_t v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  uint64_t v486;
  void *v487;
  _BYTE *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  _QWORD *v493;
  _QWORD *v494;
  void (*v495)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v496;
  __int128 v497;
  uint64_t v498;
  char *v499;
  uint64_t v500;
  uint64_t (*v501)(char *, uint64_t, uint64_t);
  int v502;
  uint64_t v503;
  size_t v504;
  void *v505;
  uint64_t v506;
  uint64_t v507;
  void *v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t (*v512)(void *, uint64_t, uint64_t);
  int v513;
  uint64_t v514;
  size_t v515;
  void *v516;
  uint64_t v517;
  __int128 v518;
  uint64_t v519;
  _BYTE *v520;
  _BYTE *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t (*v524)(_BYTE *, uint64_t, uint64_t);
  int v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  _QWORD *v529;
  _QWORD *v530;
  __int128 v531;
  uint64_t v532;
  void *v533;
  _BYTE *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t (*v537)(void *, uint64_t, uint64_t);
  int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  _QWORD *v542;
  _QWORD *v543;
  uint64_t v544;
  _QWORD *v545;
  _QWORD *v546;
  uint64_t v547;
  _QWORD *v548;
  char *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  _QWORD *__dst;
  char *__dsta;
  char *__dstb;
  _QWORD *__dstc;
  _QWORD *__dstd;
  uint64_t (*v570)(char *, uint64_t, uint64_t);
  uint64_t (*v571)(_QWORD *, uint64_t, uint64_t);
  char *v572;
  void *v573;
  _QWORD *v574;
  _QWORD *v575;
  char *v576;
  _QWORD *v577;
  char *v578;
  void *v579;
  uint64_t (*v580)(uint64_t, uint64_t, uint64_t);
  _QWORD *v581;
  _QWORD *v582;
  void *v583;
  int *v584;

  v4 = a2;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = v4[2];
  a1[3] = v4[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 4;
  v7 = v4[4];
  if (a1[4] == 1)
  {
    if (v7 == 1)
    {
      v8 = 1;
LABEL_6:
      *v6 = v8;
      goto LABEL_9;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_224E2C98C((uint64_t)(a1 + 4));
      v8 = v4[4];
      goto LABEL_6;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v9 = (__int128 *)(a1 + 5);
  v10 = (__int128 *)(v4 + 5);
  v11 = v4[6];
  if (a1[6] == 1)
  {
    if (v11 == 1)
    {
      v12 = *v10;
      a1[7] = v4[7];
      *v9 = v12;
    }
    else
    {
      a1[5] = v4[5];
      a1[6] = v4[6];
      a1[7] = v4[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v11 == 1)
  {
    sub_224E2C9C0((uint64_t)(a1 + 5));
    v13 = v4[7];
    *v9 = *v10;
    a1[7] = v13;
  }
  else
  {
    a1[5] = v4[5];
    a1[6] = v4[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[7] = v4[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v14 = (__int128 *)(a1 + 8);
  v15 = (__int128 *)(v4 + 8);
  v16 = v4[9];
  if (a1[9] == 1)
  {
    if (v16 == 1)
    {
      v17 = *v15;
      a1[10] = v4[10];
      *v14 = v17;
    }
    else
    {
      a1[8] = v4[8];
      a1[9] = v4[9];
      a1[10] = v4[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v16 == 1)
  {
    sub_224E2C9C0((uint64_t)(a1 + 8));
    v18 = v4[10];
    *v14 = *v15;
    a1[10] = v18;
  }
  else
  {
    a1[8] = v4[8];
    a1[9] = v4[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[10] = v4[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[11] = v4[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = (__int128 *)(a1 + 12);
  v20 = (__int128 *)(v4 + 12);
  v21 = v4[13];
  if (a1[13] == 1)
  {
    if (v21 == 1)
    {
      v22 = *v20;
      a1[14] = v4[14];
      *v19 = v22;
    }
    else
    {
      a1[12] = v4[12];
      a1[13] = v4[13];
      a1[14] = v4[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v21 == 1)
  {
    sub_224E2C9C0((uint64_t)(a1 + 12));
    v23 = v4[14];
    *v19 = *v20;
    a1[14] = v23;
  }
  else
  {
    a1[12] = v4[12];
    a1[13] = v4[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[14] = v4[14];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v24 = (__int128 *)(a1 + 15);
  v25 = (__int128 *)(v4 + 15);
  v26 = v4[16];
  if (a1[16] == 1)
  {
    if (v26 == 1)
    {
      v27 = *v25;
      a1[17] = v4[17];
      *v24 = v27;
    }
    else
    {
      a1[15] = v4[15];
      a1[16] = v4[16];
      a1[17] = v4[17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v26 == 1)
  {
    sub_224E2C9C0((uint64_t)(a1 + 15));
    v28 = v4[17];
    *v24 = *v25;
    a1[17] = v28;
  }
  else
  {
    a1[15] = v4[15];
    a1[16] = v4[16];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[17] = v4[17];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[18] = v4[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = a3[13];
  v30 = (uint64_t)a1 + v29;
  v31 = (char *)v4 + v29;
  v32 = type metadata accessor for FHIRDateTime();
  v574 = *(_QWORD **)(v32 - 8);
  v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v574[6];
  v34 = v33(v30, 1, v32);
  v35 = v33((uint64_t)v31, 1, v32);
  v580 = v33;
  v584 = a3;
  if (!v34)
  {
    if (v35)
    {
      sub_224DDEAA0(v30, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v36 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_42;
    }
    *(_BYTE *)v30 = *v31;
    *(_QWORD *)(v30 + 8) = *((_QWORD *)v31 + 1);
    *(_WORD *)(v30 + 16) = *((_WORD *)v31 + 8);
    *(_WORD *)(v30 + 18) = *((_WORD *)v31 + 9);
    v41 = (__int128 *)(v30 + 24);
    v42 = (__int128 *)(v31 + 24);
    v43 = *((_QWORD *)v31 + 7);
    if (*(_QWORD *)(v30 + 56) == 1)
    {
      if (v43 == 1)
      {
        v44 = *v42;
        v45 = *(_OWORD *)(v31 + 40);
        *(_QWORD *)(v30 + 56) = *((_QWORD *)v31 + 7);
        *v41 = v44;
        *(_OWORD *)(v30 + 40) = v45;
      }
      else
      {
        *(_BYTE *)(v30 + 24) = v31[24];
        *(_BYTE *)(v30 + 25) = v31[25];
        *(_BYTE *)(v30 + 26) = v31[26];
        v59 = *(_OWORD *)(v31 + 28);
        *(_DWORD *)(v30 + 44) = *((_DWORD *)v31 + 11);
        *(_OWORD *)(v30 + 28) = v59;
        *(_QWORD *)(v30 + 48) = *((_QWORD *)v31 + 6);
        *(_QWORD *)(v30 + 56) = *((_QWORD *)v31 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v43 == 1)
    {
      sub_224E2C9F4(v30 + 24);
      v57 = *((_QWORD *)v31 + 7);
      v58 = *(_OWORD *)(v31 + 40);
      *v41 = *v42;
      *(_OWORD *)(v30 + 40) = v58;
      *(_QWORD *)(v30 + 56) = v57;
    }
    else
    {
      *(_BYTE *)(v30 + 24) = v31[24];
      *(_BYTE *)(v30 + 25) = v31[25];
      *(_BYTE *)(v30 + 26) = v31[26];
      *(_DWORD *)(v30 + 28) = *((_DWORD *)v31 + 7);
      *(_WORD *)(v30 + 32) = *((_WORD *)v31 + 16);
      *(_WORD *)(v30 + 34) = *((_WORD *)v31 + 17);
      *(_WORD *)(v30 + 36) = *((_WORD *)v31 + 18);
      *(_WORD *)(v30 + 38) = *((_WORD *)v31 + 19);
      *(_WORD *)(v30 + 40) = *((_WORD *)v31 + 20);
      *(_WORD *)(v30 + 42) = *((_WORD *)v31 + 21);
      *(_WORD *)(v30 + 44) = *((_WORD *)v31 + 22);
      *(_WORD *)(v30 + 46) = *((_WORD *)v31 + 23);
      *(_QWORD *)(v30 + 48) = *((_QWORD *)v31 + 6);
      *(_QWORD *)(v30 + 56) = *((_QWORD *)v31 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v550 = v32;
    v60 = *(int *)(v32 + 28);
    v61 = (void *)(v30 + v60);
    v62 = &v31[v60];
    v63 = sub_224F67874();
    v64 = *(_QWORD *)(v63 - 8);
    v65 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v64 + 48);
    v66 = v65(v61, 1, v63);
    v67 = v65(v62, 1, v63);
    if (v66)
    {
      if (!v67)
      {
        (*(void (**)(void *, char *, uint64_t))(v64 + 16))(v61, v62, v63);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
LABEL_63:
        v33 = v580;
        a3 = v584;
        v32 = v550;
        v69 = *(int *)(v550 + 32);
        v70 = (_QWORD *)(v30 + v69);
        v71 = &v31[v69];
        *v70 = *(_QWORD *)v71;
        v70[1] = *((_QWORD *)v71 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
    }
    else
    {
      if (!v67)
      {
        (*(void (**)(void *, char *, uint64_t))(v64 + 24))(v61, v62, v63);
        goto LABEL_63;
      }
      (*(void (**)(void *, uint64_t))(v64 + 8))(v61, v63);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_63;
  }
  if (v35)
  {
    v36 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_42:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v36);
    memcpy((void *)v30, v31, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_64;
  }
  *(_BYTE *)v30 = *v31;
  v38 = *((_QWORD *)v31 + 1);
  *(_DWORD *)(v30 + 16) = *((_DWORD *)v31 + 4);
  *(_QWORD *)(v30 + 8) = v38;
  if (*((_QWORD *)v31 + 7) == 1)
  {
    v39 = *(_OWORD *)(v31 + 24);
    v40 = *(_OWORD *)(v31 + 40);
    *(_QWORD *)(v30 + 56) = *((_QWORD *)v31 + 7);
    *(_OWORD *)(v30 + 24) = v39;
    *(_OWORD *)(v30 + 40) = v40;
  }
  else
  {
    *(_BYTE *)(v30 + 24) = v31[24];
    *(_BYTE *)(v30 + 25) = v31[25];
    *(_BYTE *)(v30 + 26) = v31[26];
    v46 = *(_OWORD *)(v31 + 28);
    *(_DWORD *)(v30 + 44) = *((_DWORD *)v31 + 11);
    *(_OWORD *)(v30 + 28) = v46;
    *(_QWORD *)(v30 + 48) = *((_QWORD *)v31 + 6);
    *(_QWORD *)(v30 + 56) = *((_QWORD *)v31 + 7);
    swift_bridgeObjectRetain();
  }
  v47 = *(int *)(v32 + 28);
  v48 = (void *)(v30 + v47);
  v49 = &v31[v47];
  v50 = sub_224F67874();
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  v33 = v580;
  a3 = v584;
  v53 = *(int *)(v32 + 32);
  v54 = (_QWORD *)(v30 + v53);
  v55 = &v31[v53];
  *v54 = *(_QWORD *)v55;
  v54[1] = *((_QWORD *)v55 + 1);
  v56 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v574[7];
  swift_bridgeObjectRetain();
  v56(v30, 0, 1, v32);
LABEL_64:
  v72 = a3[14];
  v73 = (char *)a1 + v72;
  v74 = (char *)v4 + v72;
  v75 = type metadata accessor for Period();
  __dst = *(_QWORD **)(v75 - 8);
  v76 = (uint64_t (*)(char *, uint64_t, uint64_t))__dst[6];
  v77 = v76(v73, 1, v75);
  v570 = v76;
  v78 = v76(v74, 1, v75);
  if (!v77)
  {
    if (v78)
    {
      v82 = type metadata accessor for Period;
      sub_224DDEAA0((uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v79 = &qword_2557E04B8;
LABEL_70:
      v81 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      v80 = v82;
      goto LABEL_71;
    }
    v85 = v33((uint64_t)v73, 1, v32);
    v86 = v33((uint64_t)v74, 1, v32);
    if (v85)
    {
      if (v86)
      {
        v87 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_81:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v87);
        memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
        goto LABEL_293;
      }
      v558 = v75;
      *v73 = *v74;
      v99 = *((_QWORD *)v74 + 1);
      *((_DWORD *)v73 + 4) = *((_DWORD *)v74 + 4);
      *((_QWORD *)v73 + 1) = v99;
      if (*((_QWORD *)v74 + 7) == 1)
      {
        v100 = *(_OWORD *)(v74 + 24);
        v101 = *(_OWORD *)(v74 + 40);
        *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
        *(_OWORD *)(v73 + 24) = v100;
        *(_OWORD *)(v73 + 40) = v101;
      }
      else
      {
        v73[24] = v74[24];
        v73[25] = v74[25];
        v73[26] = v74[26];
        v322 = *(_OWORD *)(v74 + 28);
        *((_DWORD *)v73 + 11) = *((_DWORD *)v74 + 11);
        *(_OWORD *)(v73 + 28) = v322;
        *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
        *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
        swift_bridgeObjectRetain();
      }
      v323 = *(int *)(v32 + 28);
      v324 = &v73[v323];
      v325 = &v74[v323];
      v326 = sub_224F67874();
      v327 = *(_QWORD *)(v326 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v327 + 48))(v325, 1, v326))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v324, v325, *(_QWORD *)(*(_QWORD *)(v328 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v327 + 16))(v324, v325, v326);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v324, 0, 1, v326);
      }
      v341 = *(int *)(v32 + 32);
      v342 = &v73[v341];
      v343 = &v74[v341];
      *v342 = *v343;
      v342[1] = v343[1];
      v344 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v574[7];
      swift_bridgeObjectRetain();
      v344(v73, 0, 1, v32);
      v33 = v580;
      a3 = v584;
LABEL_292:
      v75 = v558;
LABEL_293:
      v434 = *(int *)(v75 + 20);
      v73 += v434;
      v74 += v434;
      v435 = v33((uint64_t)v73, 1, v32);
      v436 = v33((uint64_t)v74, 1, v32);
      if (v435)
      {
        if (v436)
        {
          v79 = &qword_2557E02D0;
          v80 = type metadata accessor for FHIRDateTime;
          goto LABEL_67;
        }
        v564 = v75;
        *v73 = *v74;
        v437 = *((_QWORD *)v74 + 1);
        *((_DWORD *)v73 + 4) = *((_DWORD *)v74 + 4);
        *((_QWORD *)v73 + 1) = v437;
        if (*((_QWORD *)v74 + 7) == 1)
        {
          v438 = *(_OWORD *)(v74 + 24);
          v439 = *(_OWORD *)(v74 + 40);
          *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
          *(_OWORD *)(v73 + 24) = v438;
          *(_OWORD *)(v73 + 40) = v439;
        }
        else
        {
          v73[24] = v74[24];
          v73[25] = v74[25];
          v73[26] = v74[26];
          v445 = *(_OWORD *)(v74 + 28);
          *((_DWORD *)v73 + 11) = *((_DWORD *)v74 + 11);
          *(_OWORD *)(v73 + 28) = v445;
          *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
          *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
          swift_bridgeObjectRetain();
        }
        v446 = *(int *)(v32 + 28);
        v447 = &v73[v446];
        v448 = &v74[v446];
        v449 = sub_224F67874();
        v450 = *(_QWORD *)(v449 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v450 + 48))(v448, 1, v449))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v447, v448, *(_QWORD *)(*(_QWORD *)(v451 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v450 + 16))(v447, v448, v449);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v450 + 56))(v447, 0, 1, v449);
        }
        v452 = *(int *)(v32 + 32);
        v453 = &v73[v452];
        v454 = &v74[v452];
        *v453 = *v454;
        v453[1] = v454[1];
        v455 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v574[7];
        swift_bridgeObjectRetain();
        v455(v73, 0, 1, v32);
        goto LABEL_360;
      }
      if (v436)
      {
        v82 = type metadata accessor for FHIRDateTime;
        sub_224DDEAA0((uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v79 = &qword_2557E02D0;
        goto LABEL_70;
      }
      *v73 = *v74;
      *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
      *((_WORD *)v73 + 8) = *((_WORD *)v74 + 8);
      *((_WORD *)v73 + 9) = *((_WORD *)v74 + 9);
      v440 = (__int128 *)(v73 + 24);
      v441 = (__int128 *)(v74 + 24);
      v442 = *((_QWORD *)v74 + 7);
      v564 = v75;
      if (*((_QWORD *)v73 + 7) == 1)
      {
        if (v442 == 1)
        {
          v443 = *v441;
          v444 = *(_OWORD *)(v74 + 40);
          *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
          *v440 = v443;
          *(_OWORD *)(v73 + 40) = v444;
        }
        else
        {
          v73[24] = v74[24];
          v73[25] = v74[25];
          v73[26] = v74[26];
          v518 = *(_OWORD *)(v74 + 28);
          *((_DWORD *)v73 + 11) = *((_DWORD *)v74 + 11);
          *(_OWORD *)(v73 + 28) = v518;
          *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
          *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v442 == 1)
      {
        sub_224E2C9F4((uint64_t)(v73 + 24));
        v456 = *((_QWORD *)v74 + 7);
        v457 = *(_OWORD *)(v74 + 40);
        *v440 = *v441;
        *(_OWORD *)(v73 + 40) = v457;
        *((_QWORD *)v73 + 7) = v456;
      }
      else
      {
        v73[24] = v74[24];
        v73[25] = v74[25];
        v73[26] = v74[26];
        *((_DWORD *)v73 + 7) = *((_DWORD *)v74 + 7);
        *((_WORD *)v73 + 16) = *((_WORD *)v74 + 16);
        *((_WORD *)v73 + 17) = *((_WORD *)v74 + 17);
        *((_WORD *)v73 + 18) = *((_WORD *)v74 + 18);
        *((_WORD *)v73 + 19) = *((_WORD *)v74 + 19);
        *((_WORD *)v73 + 20) = *((_WORD *)v74 + 20);
        *((_WORD *)v73 + 21) = *((_WORD *)v74 + 21);
        *((_WORD *)v73 + 22) = *((_WORD *)v74 + 22);
        *((_WORD *)v73 + 23) = *((_WORD *)v74 + 23);
        *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
        *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v556 = v32;
      v519 = *(int *)(v32 + 28);
      v520 = &v73[v519];
      v521 = &v74[v519];
      v522 = sub_224F67874();
      v523 = *(_QWORD *)(v522 - 8);
      v524 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v523 + 48);
      v525 = v524(v520, 1, v522);
      v526 = v524(v521, 1, v522);
      if (v525)
      {
        if (!v526)
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v523 + 16))(v520, v521, v522);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v523 + 56))(v520, 0, 1, v522);
LABEL_359:
          v32 = v556;
          v528 = *(int *)(v556 + 32);
          v529 = &v73[v528];
          v530 = &v74[v528];
          *v529 = *v530;
          v529[1] = v530[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
LABEL_360:
          v33 = v580;
          a3 = v584;
          v75 = v564;
          goto LABEL_99;
        }
      }
      else
      {
        if (!v526)
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v523 + 24))(v520, v521, v522);
          goto LABEL_359;
        }
        (*(void (**)(_BYTE *, uint64_t))(v523 + 8))(v520, v522);
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v520, v521, *(_QWORD *)(*(_QWORD *)(v527 - 8) + 64));
      goto LABEL_359;
    }
    if (v86)
    {
      sub_224DDEAA0((uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v87 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_81;
    }
    *v73 = *v74;
    *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
    *((_WORD *)v73 + 8) = *((_WORD *)v74 + 8);
    *((_WORD *)v73 + 9) = *((_WORD *)v74 + 9);
    v308 = (__int128 *)(v73 + 24);
    v309 = (__int128 *)(v74 + 24);
    v310 = *((_QWORD *)v74 + 7);
    v558 = v75;
    if (*((_QWORD *)v73 + 7) == 1)
    {
      if (v310 == 1)
      {
        v311 = *v309;
        v312 = *(_OWORD *)(v74 + 40);
        *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
        *v308 = v311;
        *(_OWORD *)(v73 + 40) = v312;
      }
      else
      {
        v73[24] = v74[24];
        v73[25] = v74[25];
        v73[26] = v74[26];
        v420 = *(_OWORD *)(v74 + 28);
        *((_DWORD *)v73 + 11) = *((_DWORD *)v74 + 11);
        *(_OWORD *)(v73 + 28) = v420;
        *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
        *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v310 == 1)
    {
      sub_224E2C9F4((uint64_t)(v73 + 24));
      v414 = *((_QWORD *)v74 + 7);
      v415 = *(_OWORD *)(v74 + 40);
      *v308 = *v309;
      *(_OWORD *)(v73 + 40) = v415;
      *((_QWORD *)v73 + 7) = v414;
    }
    else
    {
      v73[24] = v74[24];
      v73[25] = v74[25];
      v73[26] = v74[26];
      *((_DWORD *)v73 + 7) = *((_DWORD *)v74 + 7);
      *((_WORD *)v73 + 16) = *((_WORD *)v74 + 16);
      *((_WORD *)v73 + 17) = *((_WORD *)v74 + 17);
      *((_WORD *)v73 + 18) = *((_WORD *)v74 + 18);
      *((_WORD *)v73 + 19) = *((_WORD *)v74 + 19);
      *((_WORD *)v73 + 20) = *((_WORD *)v74 + 20);
      *((_WORD *)v73 + 21) = *((_WORD *)v74 + 21);
      *((_WORD *)v73 + 22) = *((_WORD *)v74 + 22);
      *((_WORD *)v73 + 23) = *((_WORD *)v74 + 23);
      *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
      *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v554 = v32;
    v422 = *(int *)(v32 + 28);
    v423 = &v73[v422];
    v424 = &v74[v422];
    v425 = sub_224F67874();
    v426 = *(_QWORD *)(v425 - 8);
    v427 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v426 + 48);
    v428 = v427(v423, 1, v425);
    v429 = v427(v424, 1, v425);
    if (v428)
    {
      if (!v429)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v426 + 16))(v423, v424, v425);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v426 + 56))(v423, 0, 1, v425);
LABEL_291:
        v32 = v554;
        v33 = v580;
        v431 = *(int *)(v554 + 32);
        v432 = &v73[v431];
        v433 = &v74[v431];
        *v432 = *v433;
        v432[1] = v433[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        a3 = v584;
        goto LABEL_292;
      }
    }
    else
    {
      if (!v429)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v426 + 24))(v423, v424, v425);
        goto LABEL_291;
      }
      (*(void (**)(_BYTE *, uint64_t))(v426 + 8))(v423, v425);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v423, v424, *(_QWORD *)(*(_QWORD *)(v430 - 8) + 64));
    goto LABEL_291;
  }
  if (v78)
  {
    v79 = &qword_2557E04B8;
    v80 = type metadata accessor for Period;
LABEL_67:
    v81 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_71:
    sub_224DDEA0C(0, v79, (uint64_t (*)(uint64_t))v80, v81);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_99;
  }
  if (v33((uint64_t)v74, 1, v32))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    *v73 = *v74;
    v88 = *((_QWORD *)v74 + 1);
    *((_DWORD *)v73 + 4) = *((_DWORD *)v74 + 4);
    *((_QWORD *)v73 + 1) = v88;
    if (*((_QWORD *)v74 + 7) == 1)
    {
      v89 = *(_OWORD *)(v74 + 24);
      v90 = *(_OWORD *)(v74 + 40);
      *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
      *(_OWORD *)(v73 + 24) = v89;
      *(_OWORD *)(v73 + 40) = v90;
    }
    else
    {
      v73[24] = v74[24];
      v73[25] = v74[25];
      v73[26] = v74[26];
      v92 = *(_OWORD *)(v74 + 28);
      *((_DWORD *)v73 + 11) = *((_DWORD *)v74 + 11);
      *(_OWORD *)(v73 + 28) = v92;
      *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
      *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
      swift_bridgeObjectRetain();
    }
    v93 = *(int *)(v32 + 28);
    v94 = &v73[v93];
    v95 = &v74[v93];
    v96 = sub_224F67874();
    v97 = *(_QWORD *)(v96 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v97 + 16))(v94, v95, v96);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
    }
    v102 = *(int *)(v32 + 32);
    v103 = &v73[v102];
    v104 = &v74[v102];
    *v103 = *v104;
    v103[1] = v104[1];
    v105 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v574[7];
    swift_bridgeObjectRetain();
    v105(v73, 0, 1, v32);
    v33 = v580;
  }
  v106 = *(int *)(v75 + 20);
  v107 = &v73[v106];
  v108 = &v74[v106];
  if (v33((uint64_t)v108, 1, v32))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    a3 = v584;
  }
  else
  {
    *v107 = *v108;
    v110 = *((_QWORD *)v108 + 1);
    *((_DWORD *)v107 + 4) = *((_DWORD *)v108 + 4);
    *((_QWORD *)v107 + 1) = v110;
    v559 = v75;
    if (*((_QWORD *)v108 + 7) == 1)
    {
      v111 = *(_OWORD *)(v108 + 24);
      v112 = *(_OWORD *)(v108 + 40);
      *((_QWORD *)v107 + 7) = *((_QWORD *)v108 + 7);
      *(_OWORD *)(v107 + 24) = v111;
      *(_OWORD *)(v107 + 40) = v112;
    }
    else
    {
      v107[24] = v108[24];
      v107[25] = v108[25];
      v107[26] = v108[26];
      v113 = *(_OWORD *)(v108 + 28);
      *((_DWORD *)v107 + 11) = *((_DWORD *)v108 + 11);
      *(_OWORD *)(v107 + 28) = v113;
      *((_QWORD *)v107 + 6) = *((_QWORD *)v108 + 6);
      *((_QWORD *)v107 + 7) = *((_QWORD *)v108 + 7);
      swift_bridgeObjectRetain();
    }
    v114 = *(int *)(v32 + 28);
    v115 = &v107[v114];
    v116 = &v108[v114];
    v117 = sub_224F67874();
    v118 = *(_QWORD *)(v117 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v118 + 16))(v115, v116, v117);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
    }
    v75 = v559;
    v120 = *(int *)(v32 + 32);
    v121 = &v107[v120];
    v122 = &v108[v120];
    *v121 = *v122;
    v121[1] = v122[1];
    v123 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v574[7];
    swift_bridgeObjectRetain();
    v123(v107, 0, 1, v32);
    v33 = v580;
    a3 = v584;
  }
  ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dst[7])(v73, 0, 1, v75);
LABEL_99:
  v124 = a3[15];
  v125 = (_QWORD *)((char *)a1 + v124);
  v126 = (_QWORD *)((char *)v4 + v124);
  *v125 = *v126;
  v125[1] = v126[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127 = a3[16];
  v128 = (uint64_t)a1 + v127;
  v129 = (char *)v4 + v127;
  v130 = v33((uint64_t)a1 + v127, 1, v32);
  v131 = v33((uint64_t)v129, 1, v32);
  if (!v130)
  {
    if (v131)
    {
      sub_224DDEAA0(v128, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v132 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_104;
    }
    *(_BYTE *)v128 = *v129;
    *(_QWORD *)(v128 + 8) = *((_QWORD *)v129 + 1);
    *(_WORD *)(v128 + 16) = *((_WORD *)v129 + 8);
    *(_WORD *)(v128 + 18) = *((_WORD *)v129 + 9);
    v138 = (__int128 *)(v128 + 24);
    v139 = (__int128 *)(v129 + 24);
    v140 = *((_QWORD *)v129 + 7);
    v560 = v75;
    if (*(_QWORD *)(v128 + 56) == 1)
    {
      if (v140 == 1)
      {
        v141 = *v139;
        v142 = *(_OWORD *)(v129 + 40);
        *(_QWORD *)(v128 + 56) = *((_QWORD *)v129 + 7);
        *v138 = v141;
        *(_OWORD *)(v128 + 40) = v142;
      }
      else
      {
        *(_BYTE *)(v128 + 24) = v129[24];
        *(_BYTE *)(v128 + 25) = v129[25];
        *(_BYTE *)(v128 + 26) = v129[26];
        v156 = *(_OWORD *)(v129 + 28);
        *(_DWORD *)(v128 + 44) = *((_DWORD *)v129 + 11);
        *(_OWORD *)(v128 + 28) = v156;
        *(_QWORD *)(v128 + 48) = *((_QWORD *)v129 + 6);
        *(_QWORD *)(v128 + 56) = *((_QWORD *)v129 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v140 == 1)
    {
      sub_224E2C9F4(v128 + 24);
      v154 = *((_QWORD *)v129 + 7);
      v155 = *(_OWORD *)(v129 + 40);
      *v138 = *v139;
      *(_OWORD *)(v128 + 40) = v155;
      *(_QWORD *)(v128 + 56) = v154;
    }
    else
    {
      *(_BYTE *)(v128 + 24) = v129[24];
      *(_BYTE *)(v128 + 25) = v129[25];
      *(_BYTE *)(v128 + 26) = v129[26];
      *(_DWORD *)(v128 + 28) = *((_DWORD *)v129 + 7);
      *(_WORD *)(v128 + 32) = *((_WORD *)v129 + 16);
      *(_WORD *)(v128 + 34) = *((_WORD *)v129 + 17);
      *(_WORD *)(v128 + 36) = *((_WORD *)v129 + 18);
      *(_WORD *)(v128 + 38) = *((_WORD *)v129 + 19);
      *(_WORD *)(v128 + 40) = *((_WORD *)v129 + 20);
      *(_WORD *)(v128 + 42) = *((_WORD *)v129 + 21);
      *(_WORD *)(v128 + 44) = *((_WORD *)v129 + 22);
      *(_WORD *)(v128 + 46) = *((_WORD *)v129 + 23);
      *(_QWORD *)(v128 + 48) = *((_QWORD *)v129 + 6);
      *(_QWORD *)(v128 + 56) = *((_QWORD *)v129 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v551 = v32;
    v157 = *(int *)(v32 + 28);
    v158 = (void *)(v128 + v157);
    v159 = &v129[v157];
    v160 = sub_224F67874();
    v161 = *(_QWORD *)(v160 - 8);
    v162 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v161 + 48);
    v163 = v162(v158, 1, v160);
    v164 = v162(v159, 1, v160);
    if (v163)
    {
      if (!v164)
      {
        (*(void (**)(void *, char *, uint64_t))(v161 + 16))(v158, v159, v160);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
LABEL_125:
        v33 = v580;
        a3 = v584;
        v32 = v551;
        v75 = v560;
        v166 = *(int *)(v551 + 32);
        v167 = (_QWORD *)(v128 + v166);
        v168 = &v129[v166];
        *v167 = *(_QWORD *)v168;
        v167[1] = *((_QWORD *)v168 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_126;
      }
    }
    else
    {
      if (!v164)
      {
        (*(void (**)(void *, char *, uint64_t))(v161 + 24))(v158, v159, v160);
        goto LABEL_125;
      }
      (*(void (**)(void *, uint64_t))(v161 + 8))(v158, v160);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    goto LABEL_125;
  }
  if (v131)
  {
    v132 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_104:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v132);
    memcpy((void *)v128, v129, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    goto LABEL_126;
  }
  *(_BYTE *)v128 = *v129;
  v134 = *((_QWORD *)v129 + 1);
  *(_DWORD *)(v128 + 16) = *((_DWORD *)v129 + 4);
  *(_QWORD *)(v128 + 8) = v134;
  v135 = v75;
  if (*((_QWORD *)v129 + 7) == 1)
  {
    v136 = *(_OWORD *)(v129 + 24);
    v137 = *(_OWORD *)(v129 + 40);
    *(_QWORD *)(v128 + 56) = *((_QWORD *)v129 + 7);
    *(_OWORD *)(v128 + 24) = v136;
    *(_OWORD *)(v128 + 40) = v137;
  }
  else
  {
    *(_BYTE *)(v128 + 24) = v129[24];
    *(_BYTE *)(v128 + 25) = v129[25];
    *(_BYTE *)(v128 + 26) = v129[26];
    v143 = *(_OWORD *)(v129 + 28);
    *(_DWORD *)(v128 + 44) = *((_DWORD *)v129 + 11);
    *(_OWORD *)(v128 + 28) = v143;
    *(_QWORD *)(v128 + 48) = *((_QWORD *)v129 + 6);
    *(_QWORD *)(v128 + 56) = *((_QWORD *)v129 + 7);
    swift_bridgeObjectRetain();
  }
  v144 = *(int *)(v32 + 28);
  v145 = (void *)(v128 + v144);
  v146 = &v129[v144];
  v147 = sub_224F67874();
  v148 = *(_QWORD *)(v147 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v148 + 16))(v145, v146, v147);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
  }
  v33 = v580;
  a3 = v584;
  v75 = v135;
  v150 = *(int *)(v32 + 32);
  v151 = (_QWORD *)(v128 + v150);
  v152 = &v129[v150];
  *v151 = *(_QWORD *)v152;
  v151[1] = *((_QWORD *)v152 + 1);
  v153 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v574[7];
  swift_bridgeObjectRetain();
  v153(v128, 0, 1, v32);
LABEL_126:
  v169 = a3[17];
  v170 = (char *)a1 + v169;
  v171 = (char *)v4 + v169;
  v172 = v570((char *)a1 + v169, 1, v75);
  v173 = v570(v171, 1, v75);
  if (!v172)
  {
    if (v173)
    {
      sub_224DDEAA0((uint64_t)v170, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v174 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_131;
    }
    v180 = v33((uint64_t)v170, 1, v32);
    v181 = v33((uint64_t)v171, 1, v32);
    if (v180)
    {
      if (v181)
      {
        v182 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_142:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v182);
        memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
        goto LABEL_319;
      }
      *v170 = *v171;
      v195 = *((_QWORD *)v171 + 1);
      *((_DWORD *)v170 + 4) = *((_DWORD *)v171 + 4);
      *((_QWORD *)v170 + 1) = v195;
      v196 = v75;
      if (*((_QWORD *)v171 + 7) == 1)
      {
        v197 = *(_OWORD *)(v171 + 24);
        v198 = *(_OWORD *)(v171 + 40);
        *((_QWORD *)v170 + 7) = *((_QWORD *)v171 + 7);
        *(_OWORD *)(v170 + 24) = v197;
        *(_OWORD *)(v170 + 40) = v198;
      }
      else
      {
        v170[24] = v171[24];
        v170[25] = v171[25];
        v170[26] = v171[26];
        v329 = *(_OWORD *)(v171 + 28);
        *((_DWORD *)v170 + 11) = *((_DWORD *)v171 + 11);
        *(_OWORD *)(v170 + 28) = v329;
        *((_QWORD *)v170 + 6) = *((_QWORD *)v171 + 6);
        *((_QWORD *)v170 + 7) = *((_QWORD *)v171 + 7);
        swift_bridgeObjectRetain();
      }
      v330 = *(int *)(v32 + 28);
      v331 = &v170[v330];
      v332 = &v171[v330];
      v333 = sub_224F67874();
      v334 = *(_QWORD *)(v333 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v334 + 48))(v332, 1, v333))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v331, v332, *(_QWORD *)(*(_QWORD *)(v335 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v334 + 16))(v331, v332, v333);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v334 + 56))(v331, 0, 1, v333);
      }
      v75 = v196;
      v345 = *(int *)(v32 + 32);
      v346 = &v170[v345];
      v347 = &v171[v345];
      *v346 = *v347;
      v346[1] = v347[1];
      v348 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v574[7];
      swift_bridgeObjectRetain();
      v348(v170, 0, 1, v32);
LABEL_318:
      v33 = v580;
      a3 = v584;
LABEL_319:
      v470 = *(int *)(v75 + 20);
      v471 = (uint64_t)&v170[v470];
      v472 = &v171[v470];
      v473 = v33(v471, 1, v32);
      v474 = v33((uint64_t)v472, 1, v32);
      if (v473)
      {
        if (!v474)
        {
          *(_BYTE *)v471 = *v472;
          v477 = *((_QWORD *)v472 + 1);
          *(_DWORD *)(v471 + 16) = *((_DWORD *)v472 + 4);
          *(_QWORD *)(v471 + 8) = v477;
          if (*((_QWORD *)v472 + 7) == 1)
          {
            v478 = *(_OWORD *)(v472 + 24);
            v479 = *(_OWORD *)(v472 + 40);
            *(_QWORD *)(v471 + 56) = *((_QWORD *)v472 + 7);
            *(_OWORD *)(v471 + 24) = v478;
            *(_OWORD *)(v471 + 40) = v479;
          }
          else
          {
            *(_BYTE *)(v471 + 24) = v472[24];
            *(_BYTE *)(v471 + 25) = v472[25];
            *(_BYTE *)(v471 + 26) = v472[26];
            v485 = *(_OWORD *)(v472 + 28);
            *(_DWORD *)(v471 + 44) = *((_DWORD *)v472 + 11);
            *(_OWORD *)(v471 + 28) = v485;
            *(_QWORD *)(v471 + 48) = *((_QWORD *)v472 + 6);
            *(_QWORD *)(v471 + 56) = *((_QWORD *)v472 + 7);
            swift_bridgeObjectRetain();
          }
          v486 = *(int *)(v32 + 28);
          v487 = (void *)(v471 + v486);
          v488 = &v472[v486];
          v489 = sub_224F67874();
          v490 = *(_QWORD *)(v489 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v490 + 48))(v488, 1, v489))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v487, v488, *(_QWORD *)(*(_QWORD *)(v491 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v490 + 16))(v487, v488, v489);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v490 + 56))(v487, 0, 1, v489);
          }
          v492 = *(int *)(v32 + 32);
          v493 = (_QWORD *)(v471 + v492);
          v494 = &v472[v492];
          *v493 = *v494;
          v493[1] = v494[1];
          v33 = v580;
          v495 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v574[7];
          swift_bridgeObjectRetain();
          v495(v471, 0, 1, v32);
          a3 = v584;
          goto LABEL_160;
        }
        v475 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_324:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v475);
        v176 = *(_QWORD *)(*(_QWORD *)(v476 - 8) + 64);
        v177 = (void *)v471;
        v178 = v472;
        goto LABEL_132;
      }
      if (v474)
      {
        sub_224DDEAA0(v471, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v475 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_324;
      }
      *(_BYTE *)v471 = *v472;
      *(_QWORD *)(v471 + 8) = *((_QWORD *)v472 + 1);
      *(_WORD *)(v471 + 16) = *((_WORD *)v472 + 8);
      *(_WORD *)(v471 + 18) = *((_WORD *)v472 + 9);
      v480 = (__int128 *)(v471 + 24);
      v481 = (__int128 *)(v472 + 24);
      v482 = *((_QWORD *)v472 + 7);
      if (*(_QWORD *)(v471 + 56) == 1)
      {
        if (v482 == 1)
        {
          v483 = *v481;
          v484 = *(_OWORD *)(v472 + 40);
          *(_QWORD *)(v471 + 56) = *((_QWORD *)v472 + 7);
          *v480 = v483;
          *(_OWORD *)(v471 + 40) = v484;
        }
        else
        {
          *(_BYTE *)(v471 + 24) = v472[24];
          *(_BYTE *)(v471 + 25) = v472[25];
          *(_BYTE *)(v471 + 26) = v472[26];
          v531 = *(_OWORD *)(v472 + 28);
          *(_DWORD *)(v471 + 44) = *((_DWORD *)v472 + 11);
          *(_OWORD *)(v471 + 28) = v531;
          *(_QWORD *)(v471 + 48) = *((_QWORD *)v472 + 6);
          *(_QWORD *)(v471 + 56) = *((_QWORD *)v472 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v482 == 1)
      {
        sub_224E2C9F4(v471 + 24);
        v496 = *((_QWORD *)v472 + 7);
        v497 = *(_OWORD *)(v472 + 40);
        *v480 = *v481;
        *(_OWORD *)(v471 + 40) = v497;
        *(_QWORD *)(v471 + 56) = v496;
      }
      else
      {
        *(_BYTE *)(v471 + 24) = v472[24];
        *(_BYTE *)(v471 + 25) = v472[25];
        *(_BYTE *)(v471 + 26) = v472[26];
        *(_DWORD *)(v471 + 28) = *((_DWORD *)v472 + 7);
        *(_WORD *)(v471 + 32) = *((_WORD *)v472 + 16);
        *(_WORD *)(v471 + 34) = *((_WORD *)v472 + 17);
        *(_WORD *)(v471 + 36) = *((_WORD *)v472 + 18);
        *(_WORD *)(v471 + 38) = *((_WORD *)v472 + 19);
        *(_WORD *)(v471 + 40) = *((_WORD *)v472 + 20);
        *(_WORD *)(v471 + 42) = *((_WORD *)v472 + 21);
        *(_WORD *)(v471 + 44) = *((_WORD *)v472 + 22);
        *(_WORD *)(v471 + 46) = *((_WORD *)v472 + 23);
        *(_QWORD *)(v471 + 48) = *((_QWORD *)v472 + 6);
        *(_QWORD *)(v471 + 56) = *((_QWORD *)v472 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v557 = v32;
      v532 = *(int *)(v32 + 28);
      v533 = (void *)(v471 + v532);
      v534 = &v472[v532];
      v535 = sub_224F67874();
      v536 = *(_QWORD *)(v535 - 8);
      v537 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v536 + 48);
      v538 = v537(v533, 1, v535);
      v539 = v537(v534, 1, v535);
      if (v538)
      {
        if (!v539)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v536 + 16))(v533, v534, v535);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v536 + 56))(v533, 0, 1, v535);
LABEL_369:
          v32 = v557;
          v33 = v580;
          v541 = *(int *)(v557 + 32);
          v542 = (_QWORD *)(v471 + v541);
          v543 = &v472[v541];
          *v542 = *v543;
          v542[1] = v543[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          a3 = v584;
          goto LABEL_160;
        }
      }
      else
      {
        if (!v539)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v536 + 24))(v533, v534, v535);
          goto LABEL_369;
        }
        (*(void (**)(void *, uint64_t))(v536 + 8))(v533, v535);
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v533, v534, *(_QWORD *)(*(_QWORD *)(v540 - 8) + 64));
      goto LABEL_369;
    }
    if (v181)
    {
      sub_224DDEAA0((uint64_t)v170, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v182 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_142;
    }
    *v170 = *v171;
    *((_QWORD *)v170 + 1) = *((_QWORD *)v171 + 1);
    *((_WORD *)v170 + 8) = *((_WORD *)v171 + 8);
    *((_WORD *)v170 + 9) = *((_WORD *)v171 + 9);
    v313 = (__int128 *)(v170 + 24);
    v314 = (__int128 *)(v171 + 24);
    v315 = *((_QWORD *)v171 + 7);
    v563 = v75;
    if (*((_QWORD *)v170 + 7) == 1)
    {
      if (v315 == 1)
      {
        v316 = *v314;
        v317 = *(_OWORD *)(v171 + 40);
        *((_QWORD *)v170 + 7) = *((_QWORD *)v171 + 7);
        *v313 = v316;
        *(_OWORD *)(v170 + 40) = v317;
      }
      else
      {
        v170[24] = v171[24];
        v170[25] = v171[25];
        v170[26] = v171[26];
        v421 = *(_OWORD *)(v171 + 28);
        *((_DWORD *)v170 + 11) = *((_DWORD *)v171 + 11);
        *(_OWORD *)(v170 + 28) = v421;
        *((_QWORD *)v170 + 6) = *((_QWORD *)v171 + 6);
        *((_QWORD *)v170 + 7) = *((_QWORD *)v171 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v315 == 1)
    {
      sub_224E2C9F4((uint64_t)(v170 + 24));
      v416 = *((_QWORD *)v171 + 7);
      v417 = *(_OWORD *)(v171 + 40);
      *v313 = *v314;
      *(_OWORD *)(v170 + 40) = v417;
      *((_QWORD *)v170 + 7) = v416;
    }
    else
    {
      v170[24] = v171[24];
      v170[25] = v171[25];
      v170[26] = v171[26];
      *((_DWORD *)v170 + 7) = *((_DWORD *)v171 + 7);
      *((_WORD *)v170 + 16) = *((_WORD *)v171 + 16);
      *((_WORD *)v170 + 17) = *((_WORD *)v171 + 17);
      *((_WORD *)v170 + 18) = *((_WORD *)v171 + 18);
      *((_WORD *)v170 + 19) = *((_WORD *)v171 + 19);
      *((_WORD *)v170 + 20) = *((_WORD *)v171 + 20);
      *((_WORD *)v170 + 21) = *((_WORD *)v171 + 21);
      *((_WORD *)v170 + 22) = *((_WORD *)v171 + 22);
      *((_WORD *)v170 + 23) = *((_WORD *)v171 + 23);
      *((_QWORD *)v170 + 6) = *((_QWORD *)v171 + 6);
      *((_QWORD *)v170 + 7) = *((_QWORD *)v171 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v555 = v32;
    v458 = *(int *)(v32 + 28);
    v459 = &v170[v458];
    v460 = &v171[v458];
    v461 = sub_224F67874();
    v462 = *(_QWORD *)(v461 - 8);
    v463 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v462 + 48);
    v464 = v463(v459, 1, v461);
    v465 = v463(v460, 1, v461);
    if (v464)
    {
      if (!v465)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v462 + 16))(v459, v460, v461);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v462 + 56))(v459, 0, 1, v461);
LABEL_317:
        v32 = v555;
        v75 = v563;
        v467 = *(int *)(v555 + 32);
        v468 = &v170[v467];
        v469 = &v171[v467];
        *v468 = *v469;
        v468[1] = v469[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_318;
      }
    }
    else
    {
      if (!v465)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v462 + 24))(v459, v460, v461);
        goto LABEL_317;
      }
      (*(void (**)(_BYTE *, uint64_t))(v462 + 8))(v459, v461);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v459, v460, *(_QWORD *)(*(_QWORD *)(v466 - 8) + 64));
    goto LABEL_317;
  }
  if (v173)
  {
    v174 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_131:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v174);
    v176 = *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64);
    v177 = v170;
    v178 = v171;
LABEL_132:
    memcpy(v177, v178, v176);
    goto LABEL_160;
  }
  if (v33((uint64_t)v171, 1, v32))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
  }
  else
  {
    *v170 = *v171;
    v183 = *((_QWORD *)v171 + 1);
    *((_DWORD *)v170 + 4) = *((_DWORD *)v171 + 4);
    *((_QWORD *)v170 + 1) = v183;
    v184 = v75;
    if (*((_QWORD *)v171 + 7) == 1)
    {
      v185 = *(_OWORD *)(v171 + 24);
      v186 = *(_OWORD *)(v171 + 40);
      *((_QWORD *)v170 + 7) = *((_QWORD *)v171 + 7);
      *(_OWORD *)(v170 + 24) = v185;
      *(_OWORD *)(v170 + 40) = v186;
    }
    else
    {
      v170[24] = v171[24];
      v170[25] = v171[25];
      v170[26] = v171[26];
      v188 = *(_OWORD *)(v171 + 28);
      *((_DWORD *)v170 + 11) = *((_DWORD *)v171 + 11);
      *(_OWORD *)(v170 + 28) = v188;
      *((_QWORD *)v170 + 6) = *((_QWORD *)v171 + 6);
      *((_QWORD *)v170 + 7) = *((_QWORD *)v171 + 7);
      swift_bridgeObjectRetain();
    }
    v189 = *(int *)(v32 + 28);
    v190 = &v170[v189];
    v191 = &v171[v189];
    v192 = sub_224F67874();
    v193 = *(_QWORD *)(v192 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v190, v191, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v193 + 16))(v190, v191, v192);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
    }
    v75 = v184;
    v199 = *(int *)(v32 + 32);
    v200 = &v170[v199];
    v201 = &v171[v199];
    *v200 = *v201;
    v200[1] = v201[1];
    v202 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v574[7];
    swift_bridgeObjectRetain();
    v202(v170, 0, 1, v32);
    v33 = v580;
  }
  v203 = *(int *)(v75 + 20);
  v204 = &v170[v203];
  v205 = &v171[v203];
  if (v33((uint64_t)v205, 1, v32))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
    a3 = v584;
  }
  else
  {
    *v204 = *v205;
    v207 = *((_QWORD *)v205 + 1);
    *((_DWORD *)v204 + 4) = *((_DWORD *)v205 + 4);
    *((_QWORD *)v204 + 1) = v207;
    v561 = v75;
    if (*((_QWORD *)v205 + 7) == 1)
    {
      v208 = *(_OWORD *)(v205 + 24);
      v209 = *(_OWORD *)(v205 + 40);
      *((_QWORD *)v204 + 7) = *((_QWORD *)v205 + 7);
      *(_OWORD *)(v204 + 24) = v208;
      *(_OWORD *)(v204 + 40) = v209;
    }
    else
    {
      v204[24] = v205[24];
      v204[25] = v205[25];
      v204[26] = v205[26];
      v210 = *(_OWORD *)(v205 + 28);
      *((_DWORD *)v204 + 11) = *((_DWORD *)v205 + 11);
      *(_OWORD *)(v204 + 28) = v210;
      *((_QWORD *)v204 + 6) = *((_QWORD *)v205 + 6);
      *((_QWORD *)v204 + 7) = *((_QWORD *)v205 + 7);
      swift_bridgeObjectRetain();
    }
    v211 = *(int *)(v32 + 28);
    v212 = &v204[v211];
    v213 = &v205[v211];
    v214 = sub_224F67874();
    v215 = *(_QWORD *)(v214 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v215 + 48))(v213, 1, v214))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v212, v213, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v215 + 16))(v212, v213, v214);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v215 + 56))(v212, 0, 1, v214);
    }
    v75 = v561;
    v217 = *(int *)(v32 + 32);
    v218 = &v204[v217];
    v219 = &v205[v217];
    *v218 = *v219;
    v218[1] = v219[1];
    v220 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v574[7];
    swift_bridgeObjectRetain();
    v220(v204, 0, 1, v32);
    v33 = v580;
    a3 = v584;
  }
  ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__dst[7])(v170, 0, 1, v75);
LABEL_160:
  v221 = a3[18];
  v222 = (_QWORD *)((char *)a1 + v221);
  v223 = (_QWORD *)((char *)v4 + v221);
  *v222 = *v223;
  v222[1] = v223[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v224 = a3[19];
  v225 = (uint64_t)a1 + v224;
  v226 = (char *)v4 + v224;
  v227 = v33((uint64_t)a1 + v224, 1, v32);
  v228 = v33((uint64_t)v226, 1, v32);
  if (!v227)
  {
    if (v228)
    {
      sub_224DDEAA0(v225, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v229 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_165;
    }
    *(_BYTE *)v225 = *v226;
    *(_QWORD *)(v225 + 8) = *((_QWORD *)v226 + 1);
    *(_WORD *)(v225 + 16) = *((_WORD *)v226 + 8);
    *(_WORD *)(v225 + 18) = *((_WORD *)v226 + 9);
    v234 = (__int128 *)(v225 + 24);
    v235 = (__int128 *)(v226 + 24);
    v236 = *((_QWORD *)v226 + 7);
    if (*(_QWORD *)(v225 + 56) == 1)
    {
      if (v236 == 1)
      {
        v237 = *v235;
        v238 = *(_OWORD *)(v226 + 40);
        *(_QWORD *)(v225 + 56) = *((_QWORD *)v226 + 7);
        *v234 = v237;
        *(_OWORD *)(v225 + 40) = v238;
      }
      else
      {
        *(_BYTE *)(v225 + 24) = v226[24];
        *(_BYTE *)(v225 + 25) = v226[25];
        *(_BYTE *)(v225 + 26) = v226[26];
        v252 = *(_OWORD *)(v226 + 28);
        *(_DWORD *)(v225 + 44) = *((_DWORD *)v226 + 11);
        *(_OWORD *)(v225 + 28) = v252;
        *(_QWORD *)(v225 + 48) = *((_QWORD *)v226 + 6);
        *(_QWORD *)(v225 + 56) = *((_QWORD *)v226 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v236 == 1)
    {
      sub_224E2C9F4(v225 + 24);
      v250 = *((_QWORD *)v226 + 7);
      v251 = *(_OWORD *)(v226 + 40);
      *v234 = *v235;
      *(_OWORD *)(v225 + 40) = v251;
      *(_QWORD *)(v225 + 56) = v250;
    }
    else
    {
      *(_BYTE *)(v225 + 24) = v226[24];
      *(_BYTE *)(v225 + 25) = v226[25];
      *(_BYTE *)(v225 + 26) = v226[26];
      *(_DWORD *)(v225 + 28) = *((_DWORD *)v226 + 7);
      *(_WORD *)(v225 + 32) = *((_WORD *)v226 + 16);
      *(_WORD *)(v225 + 34) = *((_WORD *)v226 + 17);
      *(_WORD *)(v225 + 36) = *((_WORD *)v226 + 18);
      *(_WORD *)(v225 + 38) = *((_WORD *)v226 + 19);
      *(_WORD *)(v225 + 40) = *((_WORD *)v226 + 20);
      *(_WORD *)(v225 + 42) = *((_WORD *)v226 + 21);
      *(_WORD *)(v225 + 44) = *((_WORD *)v226 + 22);
      *(_WORD *)(v225 + 46) = *((_WORD *)v226 + 23);
      *(_QWORD *)(v225 + 48) = *((_QWORD *)v226 + 6);
      *(_QWORD *)(v225 + 56) = *((_QWORD *)v226 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v552 = v32;
    v253 = *(int *)(v32 + 28);
    v254 = (void *)(v225 + v253);
    v255 = &v226[v253];
    v256 = sub_224F67874();
    v257 = *(_QWORD *)(v256 - 8);
    v258 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v257 + 48);
    v259 = v258(v254, 1, v256);
    v260 = v258(v255, 1, v256);
    if (v259)
    {
      if (!v260)
      {
        (*(void (**)(void *, char *, uint64_t))(v257 + 16))(v254, v255, v256);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v257 + 56))(v254, 0, 1, v256);
LABEL_186:
        a3 = v584;
        v262 = *(int *)(v552 + 32);
        v263 = (_QWORD *)(v225 + v262);
        v264 = &v226[v262];
        *v263 = *(_QWORD *)v264;
        v263[1] = *((_QWORD *)v264 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_187;
      }
    }
    else
    {
      if (!v260)
      {
        (*(void (**)(void *, char *, uint64_t))(v257 + 24))(v254, v255, v256);
        goto LABEL_186;
      }
      (*(void (**)(void *, uint64_t))(v257 + 8))(v254, v256);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v261 - 8) + 64));
    goto LABEL_186;
  }
  if (v228)
  {
    v229 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_165:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v229);
    memcpy((void *)v225, v226, *(_QWORD *)(*(_QWORD *)(v230 - 8) + 64));
    goto LABEL_187;
  }
  *(_BYTE *)v225 = *v226;
  v231 = *((_QWORD *)v226 + 1);
  *(_DWORD *)(v225 + 16) = *((_DWORD *)v226 + 4);
  *(_QWORD *)(v225 + 8) = v231;
  if (*((_QWORD *)v226 + 7) == 1)
  {
    v232 = *(_OWORD *)(v226 + 24);
    v233 = *(_OWORD *)(v226 + 40);
    *(_QWORD *)(v225 + 56) = *((_QWORD *)v226 + 7);
    *(_OWORD *)(v225 + 24) = v232;
    *(_OWORD *)(v225 + 40) = v233;
  }
  else
  {
    *(_BYTE *)(v225 + 24) = v226[24];
    *(_BYTE *)(v225 + 25) = v226[25];
    *(_BYTE *)(v225 + 26) = v226[26];
    v239 = *(_OWORD *)(v226 + 28);
    *(_DWORD *)(v225 + 44) = *((_DWORD *)v226 + 11);
    *(_OWORD *)(v225 + 28) = v239;
    *(_QWORD *)(v225 + 48) = *((_QWORD *)v226 + 6);
    *(_QWORD *)(v225 + 56) = *((_QWORD *)v226 + 7);
    swift_bridgeObjectRetain();
  }
  v240 = *(int *)(v32 + 28);
  v241 = (void *)(v225 + v240);
  v242 = &v226[v240];
  v243 = sub_224F67874();
  v244 = *(_QWORD *)(v243 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v244 + 48))(v242, 1, v243))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v241, v242, *(_QWORD *)(*(_QWORD *)(v245 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v244 + 16))(v241, v242, v243);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v244 + 56))(v241, 0, 1, v243);
  }
  a3 = v584;
  v246 = *(int *)(v32 + 32);
  v247 = (_QWORD *)(v225 + v246);
  v248 = &v226[v246];
  *v247 = *(_QWORD *)v248;
  v247[1] = *((_QWORD *)v248 + 1);
  v249 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v574[7];
  swift_bridgeObjectRetain();
  v249(v225, 0, 1, v32);
LABEL_187:
  v265 = a3[20];
  v266 = (_QWORD *)((char *)a1 + v265);
  v267 = (_QWORD *)((char *)v4 + v265);
  v268 = type metadata accessor for Reference();
  v269 = *(_QWORD **)(v268 - 8);
  v270 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v269[6];
  v271 = v270(v266, 1, v268);
  v272 = v270(v267, 1, v268);
  if (!v271)
  {
    if (v272)
    {
      sub_224DDEAA0((uint64_t)v266, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v273 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_192;
    }
    v582 = v269;
    *v266 = *v267;
    v266[1] = v267[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v266[2] = v267[2];
    v266[3] = v267[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v282 = *(int *)(v268 + 24);
    v283 = (__int128 *)((char *)v266 + v282);
    v284 = (__int128 *)((char *)v267 + v282);
    v285 = type metadata accessor for Identifier();
    v286 = *(_QWORD *)(v285 - 8);
    v287 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v286 + 48);
    v288 = v287(v283, 1, v285);
    v289 = v287(v284, 1, v285);
    if (v288)
    {
      if (v289)
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v283, v284, *(_QWORD *)(*(_QWORD *)(v290 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v283 = *(_QWORD *)v284;
        *((_QWORD *)v283 + 1) = *((_QWORD *)v284 + 1);
        v302 = *((_QWORD *)v284 + 3);
        swift_bridgeObjectRetain();
        if (v302 == 1)
        {
          v303 = v284[1];
          *((_QWORD *)v283 + 4) = *((_QWORD *)v284 + 4);
          v283[1] = v303;
        }
        else
        {
          *((_QWORD *)v283 + 2) = *((_QWORD *)v284 + 2);
          *((_QWORD *)v283 + 3) = *((_QWORD *)v284 + 3);
          *((_QWORD *)v283 + 4) = *((_QWORD *)v284 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v336 = *(int *)(v285 + 24);
        v576 = (char *)v283 + v336;
        __dstb = (char *)v284;
        v337 = (char *)v284 + v336;
        v338 = sub_224F675D4();
        v339 = *(_QWORD *)(v338 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v339 + 48))(v337, 1, v338))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v576, v337, *(_QWORD *)(*(_QWORD *)(v340 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v339 + 16))(v576, v337, v338);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v339 + 56))(v576, 0, 1, v338);
        }
        v349 = *(int *)(v285 + 28);
        v350 = (_QWORD *)((char *)v283 + v349);
        v351 = &__dstb[v349];
        *v350 = *(_QWORD *)v351;
        v350[1] = *((_QWORD *)v351 + 1);
        v352 = *(void (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v286 + 56);
        swift_bridgeObjectRetain();
        v352(v283, 0, 1, v285);
      }
      v269 = v582;
      a3 = v584;
      goto LABEL_238;
    }
    a3 = v584;
    if (v289)
    {
      sub_224DDEAA0((uint64_t)v283, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v283, v284, *(_QWORD *)(*(_QWORD *)(v293 - 8) + 64));
      v269 = v582;
      goto LABEL_238;
    }
    *(_QWORD *)v283 = *(_QWORD *)v284;
    *((_QWORD *)v283 + 1) = *((_QWORD *)v284 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v318 = v283 + 1;
    v319 = v284 + 1;
    v320 = *((_QWORD *)v284 + 3);
    if (*((_QWORD *)v283 + 3) == 1)
    {
      if (v320 == 1)
      {
        v321 = *v319;
        *((_QWORD *)v283 + 4) = *((_QWORD *)v284 + 4);
        *v318 = v321;
      }
      else
      {
        *((_QWORD *)v283 + 2) = *((_QWORD *)v284 + 2);
        *((_QWORD *)v283 + 3) = *((_QWORD *)v284 + 3);
        *((_QWORD *)v283 + 4) = *((_QWORD *)v284 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v320 == 1)
    {
      sub_224E2C9C0((uint64_t)(v283 + 1));
      v418 = *((_QWORD *)v284 + 4);
      *v318 = *v319;
      *((_QWORD *)v283 + 4) = v418;
    }
    else
    {
      *((_QWORD *)v283 + 2) = *((_QWORD *)v284 + 2);
      *((_QWORD *)v283 + 3) = *((_QWORD *)v284 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v283 + 4) = *((_QWORD *)v284 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v498 = *(int *)(v285 + 24);
    v499 = (char *)v283 + v498;
    v578 = (char *)v284 + v498;
    v500 = sub_224F675D4();
    __dstd = *(_QWORD **)(v500 - 8);
    v573 = v499;
    v501 = (uint64_t (*)(char *, uint64_t, uint64_t))__dstd[6];
    LODWORD(v499) = v501(v499, 1, v500);
    v502 = v501(v578, 1, v500);
    if ((_DWORD)v499)
    {
      a3 = v584;
      if (!v502)
      {
        ((void (*)(void *, char *, uint64_t))__dstd[2])(v573, v578, v500);
        ((void (*)(void *, _QWORD, uint64_t, uint64_t))__dstd[7])(v573, 0, 1, v500);
        goto LABEL_375;
      }
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v504 = *(_QWORD *)(*(_QWORD *)(v503 - 8) + 64);
      v505 = v573;
    }
    else
    {
      a3 = v584;
      if (!v502)
      {
        ((void (*)(void *, char *, uint64_t))__dstd[3])(v573, v578, v500);
        goto LABEL_375;
      }
      ((void (*)(void *, uint64_t))__dstd[1])(v573, v500);
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v504 = *(_QWORD *)(*(_QWORD *)(v506 - 8) + 64);
      v505 = v573;
    }
    memcpy(v505, v578, v504);
LABEL_375:
    v544 = *(int *)(v285 + 28);
    v545 = (_QWORD *)((char *)v283 + v544);
    v546 = (_QWORD *)((char *)v284 + v544);
    *v545 = *v546;
    v545[1] = v546[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v269 = v582;
    goto LABEL_238;
  }
  if (v272)
  {
    v273 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_192:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v273);
    memcpy(v266, v267, *(_QWORD *)(*(_QWORD *)(v274 - 8) + 64));
    goto LABEL_238;
  }
  v571 = v270;
  v575 = v4;
  v581 = v269;
  *v266 = *v267;
  v266[1] = v267[1];
  v266[2] = v267[2];
  v266[3] = v267[3];
  v275 = *(int *)(v268 + 24);
  v276 = (_QWORD *)((char *)v266 + v275);
  v277 = (_QWORD *)((char *)v267 + v275);
  v278 = type metadata accessor for Identifier();
  v279 = *(_QWORD *)(v278 - 8);
  v280 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v279 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v280(v277, 1, v278))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v281 - 8) + 64));
    v269 = v581;
    a3 = v584;
    v270 = v571;
    v4 = v575;
  }
  else
  {
    v562 = v279;
    *v276 = *v277;
    v276[1] = v277[1];
    v291 = v277[3];
    swift_bridgeObjectRetain();
    if (v291 == 1)
    {
      v292 = *((_OWORD *)v277 + 1);
      v276[4] = v277[4];
      *((_OWORD *)v276 + 1) = v292;
    }
    else
    {
      v276[2] = v277[2];
      v276[3] = v277[3];
      v276[4] = v277[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v294 = v278;
    v295 = *(int *)(v278 + 24);
    v553 = v276;
    __dsta = (char *)v276 + v295;
    v296 = (char *)v277 + v295;
    v297 = sub_224F675D4();
    v298 = *(_QWORD *)(v297 - 8);
    v299 = v296;
    v300 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v298 + 48))(v296, 1, v297);
    v269 = v581;
    v270 = v571;
    if (v300)
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v299, *(_QWORD *)(*(_QWORD *)(v301 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v298 + 16))(__dsta, v299, v297);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v298 + 56))(__dsta, 0, 1, v297);
    }
    v304 = *(int *)(v294 + 28);
    v305 = (_QWORD *)((char *)v553 + v304);
    v306 = (_QWORD *)((char *)v277 + v304);
    *v305 = *v306;
    v305[1] = v306[1];
    v307 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v562 + 56);
    swift_bridgeObjectRetain();
    v307(v553, 0, 1, v294);
    a3 = v584;
    v4 = v575;
  }
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v269[7])(v266, 0, 1, v268);
LABEL_238:
  v353 = a3[21];
  v354 = (_QWORD *)((char *)a1 + v353);
  v355 = (_QWORD *)((char *)v4 + v353);
  v356 = v270((_QWORD *)((char *)a1 + v353), 1, v268);
  v357 = v270(v355, 1, v268);
  if (!v356)
  {
    if (v357)
    {
      sub_224DDEAA0((uint64_t)v354, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v358 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_243;
    }
    *v354 = *v355;
    v354[1] = v355[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v354[2] = v355[2];
    v354[3] = v355[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v371 = *(int *)(v268 + 24);
    v372 = (uint64_t)v354 + v371;
    v373 = (char *)v355 + v371;
    v374 = type metadata accessor for Identifier();
    v375 = *(_QWORD *)(v374 - 8);
    v376 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v375 + 48);
    v377 = v376(v372, 1, v374);
    v378 = v376((uint64_t)v373, 1, v374);
    if (v377)
    {
      if (!v378)
      {
        *(_QWORD *)v372 = *(_QWORD *)v373;
        *(_QWORD *)(v372 + 8) = *((_QWORD *)v373 + 1);
        v390 = *((_QWORD *)v373 + 3);
        swift_bridgeObjectRetain();
        if (v390 == 1)
        {
          v391 = *((_OWORD *)v373 + 1);
          *(_QWORD *)(v372 + 32) = *((_QWORD *)v373 + 4);
          *(_OWORD *)(v372 + 16) = v391;
        }
        else
        {
          *(_QWORD *)(v372 + 16) = *((_QWORD *)v373 + 2);
          *(_QWORD *)(v372 + 24) = *((_QWORD *)v373 + 3);
          *(_QWORD *)(v372 + 32) = *((_QWORD *)v373 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v404 = *(int *)(v374 + 24);
        v405 = (void *)(v372 + v404);
        v406 = &v373[v404];
        v407 = sub_224F675D4();
        v408 = *(_QWORD *)(v407 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v408 + 48))(v406, 1, v407))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v405, v406, *(_QWORD *)(*(_QWORD *)(v409 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v408 + 16))(v405, v406, v407);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v408 + 56))(v405, 0, 1, v407);
        }
        v410 = *(int *)(v374 + 28);
        v411 = (_QWORD *)(v372 + v410);
        v412 = &v373[v410];
        *v411 = *(_QWORD *)v412;
        v411[1] = *((_QWORD *)v412 + 1);
        v413 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v375 + 56);
        swift_bridgeObjectRetain();
        v413(v372, 0, 1, v374);
        a3 = v584;
        goto LABEL_263;
      }
      v379 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_254:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v379);
      v360 = *(_QWORD *)(*(_QWORD *)(v383 - 8) + 64);
      v361 = (void *)v372;
      v362 = v373;
      goto LABEL_244;
    }
    if (v378)
    {
      sub_224DDEAA0(v372, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v379 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_254;
    }
    *(_QWORD *)v372 = *(_QWORD *)v373;
    *(_QWORD *)(v372 + 8) = *((_QWORD *)v373 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v400 = (__int128 *)(v372 + 16);
    v401 = (__int128 *)(v373 + 16);
    v402 = *((_QWORD *)v373 + 3);
    if (*(_QWORD *)(v372 + 24) == 1)
    {
      if (v402 == 1)
      {
        v403 = *v401;
        *(_QWORD *)(v372 + 32) = *((_QWORD *)v373 + 4);
        *v400 = v403;
      }
      else
      {
        *(_QWORD *)(v372 + 16) = *((_QWORD *)v373 + 2);
        *(_QWORD *)(v372 + 24) = *((_QWORD *)v373 + 3);
        *(_QWORD *)(v372 + 32) = *((_QWORD *)v373 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v402 == 1)
    {
      sub_224E2C9C0(v372 + 16);
      v419 = *((_QWORD *)v373 + 4);
      *v400 = *v401;
      *(_QWORD *)(v372 + 32) = v419;
    }
    else
    {
      *(_QWORD *)(v372 + 16) = *((_QWORD *)v373 + 2);
      *(_QWORD *)(v372 + 24) = *((_QWORD *)v373 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v372 + 32) = *((_QWORD *)v373 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v507 = *(int *)(v374 + 24);
    v508 = (void *)(v372 + v507);
    v509 = &v373[v507];
    v510 = sub_224F675D4();
    v511 = *(_QWORD *)(v510 - 8);
    v512 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v511 + 48);
    v579 = v508;
    LODWORD(v508) = v512(v508, 1, v510);
    v513 = v512(v509, 1, v510);
    if ((_DWORD)v508)
    {
      a3 = v584;
      if (!v513)
      {
        (*(void (**)(void *, char *, uint64_t))(v511 + 16))(v579, v509, v510);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v511 + 56))(v579, 0, 1, v510);
        goto LABEL_377;
      }
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v515 = *(_QWORD *)(*(_QWORD *)(v514 - 8) + 64);
      v516 = v579;
    }
    else
    {
      a3 = v584;
      if (!v513)
      {
        (*(void (**)(void *, char *, uint64_t))(v511 + 24))(v579, v509, v510);
        goto LABEL_377;
      }
      (*(void (**)(void *, uint64_t))(v511 + 8))(v579, v510);
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v515 = *(_QWORD *)(*(_QWORD *)(v517 - 8) + 64);
      v516 = v579;
    }
    memcpy(v516, v509, v515);
LABEL_377:
    v547 = *(int *)(v374 + 28);
    v548 = (_QWORD *)(v372 + v547);
    v549 = &v373[v547];
    *v548 = *(_QWORD *)v549;
    v548[1] = *((_QWORD *)v549 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_263;
  }
  if (v357)
  {
    v358 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_243:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v358);
    v360 = *(_QWORD *)(*(_QWORD *)(v359 - 8) + 64);
    v361 = v354;
    v362 = v355;
LABEL_244:
    memcpy(v361, v362, v360);
    goto LABEL_263;
  }
  v577 = v4;
  v583 = v269;
  *v354 = *v355;
  v354[1] = v355[1];
  v354[2] = v355[2];
  v354[3] = v355[3];
  v363 = *(int *)(v268 + 24);
  v364 = (_QWORD *)((char *)v354 + v363);
  v365 = (_QWORD *)((char *)v355 + v363);
  v366 = type metadata accessor for Identifier();
  v367 = *(_QWORD **)(v366 - 8);
  v368 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))v367[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v368(v365, 1, v366))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v364, v365, *(_QWORD *)(*(_QWORD *)(v369 - 8) + 64));
    v370 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v583;
    a3 = v584;
    v4 = v577;
  }
  else
  {
    __dstc = v367;
    *v364 = *v365;
    v364[1] = v365[1];
    v380 = v365[3];
    swift_bridgeObjectRetain();
    v381 = v364;
    if (v380 == 1)
    {
      v382 = *((_OWORD *)v365 + 1);
      v364[4] = v365[4];
      *((_OWORD *)v364 + 1) = v382;
    }
    else
    {
      v364[2] = v365[2];
      v364[3] = v365[3];
      v364[4] = v365[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v384 = v366;
    v385 = *(int *)(v366 + 24);
    v572 = (char *)v381 + v385;
    v386 = (char *)v365 + v385;
    v387 = sub_224F675D4();
    v388 = *(_QWORD *)(v387 - 8);
    v4 = v577;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v388 + 48))(v386, 1, v387))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v572, v386, *(_QWORD *)(*(_QWORD *)(v389 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v388 + 16))(v572, v386, v387);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v388 + 56))(v572, 0, 1, v387);
    }
    v392 = *(int *)(v384 + 28);
    v393 = (_QWORD *)((char *)v381 + v392);
    v394 = (_QWORD *)((char *)v365 + v392);
    *v393 = *v394;
    v393[1] = v394[1];
    v395 = (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__dstc[7];
    swift_bridgeObjectRetain();
    v395(v381, 0, 1, v384);
    v370 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v583;
    a3 = v584;
  }
  v370[7](v354, 0, 1, v268);
LABEL_263:
  *(_QWORD *)((char *)a1 + a3[22]) = *(_QWORD *)((char *)v4 + a3[22]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v396 = a3[23];
  v397 = (_QWORD *)((char *)a1 + v396);
  v398 = (_QWORD *)((char *)v4 + v396);
  *v397 = *v398;
  v397[1] = v398[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_224E2C98C(uint64_t a1)
{
  destroy for Meta();
  return a1;
}

uint64_t sub_224E2C9C0(uint64_t a1)
{
  destroy for CodeableConcept();
  return a1;
}

uint64_t sub_224E2C9F4(uint64_t a1)
{
  destroy for FHIRTime();
  return a1;
}

uint64_t initializeWithTake for ModelsR4.Condition(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD, _QWORD, _QWORD);
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned int (*v27)(_QWORD, _QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(_OWORD *, uint64_t, uint64_t);
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _OWORD *v94;
  _OWORD *v95;
  uint64_t v96;
  unsigned int (**v97)(_OWORD *, uint64_t, uint64_t);
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  _OWORD *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _OWORD *v110;
  _OWORD *v111;
  uint64_t v112;
  unsigned int (**v113)(_OWORD *, uint64_t, uint64_t);
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v122;
  uint64_t v123;
  void *__dst;
  void *__dsta;
  void *__dstb;
  _BYTE *__dstc;
  void (**__dstd)(void *, const void *, uint64_t);
  _QWORD *__src;
  void *__srca;
  void *v131;
  char *v132;
  void *v133;
  unsigned int (*v134)(_QWORD, _QWORD, _QWORD);
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  int *v138;
  char *v139;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v8;
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  v11 = a3[13];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  *(_OWORD *)(a1 + 120) = v9;
  v14 = type metadata accessor for FHIRDateTime();
  v137 = *(_QWORD **)(v14 - 8);
  v15 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v137[6];
  v134 = v15;
  if (v15(v13, 1, v14))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
    *((_DWORD *)v12 + 4) = *((_DWORD *)v13 + 4);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
    *((_QWORD *)v12 + 7) = *((_QWORD *)v13 + 7);
    v17 = *(int *)(v14 + 28);
    v18 = &v12[v17];
    v19 = &v13[v17];
    v20 = sub_224F67874();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    *(_OWORD *)&v12[*(int *)(v14 + 32)] = *(_OWORD *)&v13[*(int *)(v14 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v137[7])(v12, 0, 1, v14);
    v15 = v134;
  }
  v23 = v3[14];
  v24 = (_BYTE *)(a1 + v23);
  v25 = (_BYTE *)(a2 + v23);
  v26 = type metadata accessor for Period();
  __src = *(_QWORD **)(v26 - 8);
  v27 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__src[6];
  v131 = (void *)v26;
  if (v27(v25, 1, v26))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    if (v15(v25, 1, v14))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      __dst = v27;
      *v24 = *v25;
      *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
      *((_DWORD *)v24 + 4) = *((_DWORD *)v25 + 4);
      *(_OWORD *)(v24 + 24) = *(_OWORD *)(v25 + 24);
      *(_OWORD *)(v24 + 40) = *(_OWORD *)(v25 + 40);
      *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
      v30 = *(int *)(v14 + 28);
      v31 = &v24[v30];
      v32 = &v25[v30];
      v33 = sub_224F67874();
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v34 + 32))(v31, v32, v33);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      *(_OWORD *)&v24[*(int *)(v14 + 32)] = *(_OWORD *)&v25[*(int *)(v14 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v137[7])(v24, 0, 1, v14);
      v26 = (uint64_t)v131;
      v15 = v134;
      v27 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
    }
    v36 = *(int *)(v26 + 20);
    v37 = &v24[v36];
    v38 = &v25[v36];
    if (v15(v38, 1, v14))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *v37 = *v38;
      *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
      *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
      *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
      *(_OWORD *)(v37 + 40) = *(_OWORD *)(v38 + 40);
      *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
      v40 = *(int *)(v14 + 28);
      v122 = &v37[v40];
      __dsta = v27;
      v41 = &v38[v40];
      v42 = sub_224F67874();
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v122, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 32))(v122, v41, v42);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v122, 0, 1, v42);
      }
      v27 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dsta;
      *(_OWORD *)&v37[*(int *)(v14 + 32)] = *(_OWORD *)&v38[*(int *)(v14 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v137[7])(v37, 0, 1, v14);
      v26 = (uint64_t)v131;
      v15 = v134;
    }
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7])(v24, 0, 1, v26);
  }
  v45 = v3[16];
  *(_OWORD *)(a1 + v3[15]) = *(_OWORD *)(a2 + v3[15]);
  v46 = (_BYTE *)(a1 + v45);
  v47 = (_BYTE *)(a2 + v45);
  if (v15(a2 + v45, 1, v14))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    __dstb = v27;
    *v46 = *v47;
    *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
    *((_DWORD *)v46 + 4) = *((_DWORD *)v47 + 4);
    *(_OWORD *)(v46 + 24) = *(_OWORD *)(v47 + 24);
    *(_OWORD *)(v46 + 40) = *(_OWORD *)(v47 + 40);
    *((_QWORD *)v46 + 7) = *((_QWORD *)v47 + 7);
    v49 = *(int *)(v14 + 28);
    v50 = &v46[v49];
    v51 = &v47[v49];
    v52 = sub_224F67874();
    v53 = *(_QWORD *)(v52 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v53 + 32))(v50, v51, v52);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
    }
    v26 = (uint64_t)v131;
    v27 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dstb;
    *(_OWORD *)&v46[*(int *)(v14 + 32)] = *(_OWORD *)&v47[*(int *)(v14 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v137[7])(v46, 0, 1, v14);
    v15 = v134;
  }
  v55 = v3[17];
  v56 = (_BYTE *)(a1 + v55);
  v57 = (_BYTE *)(a2 + v55);
  if (v27(a2 + v55, 1, v26))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    if (v15(v57, 1, v14))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      *v56 = *v57;
      *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
      *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
      *(_OWORD *)(v56 + 24) = *(_OWORD *)(v57 + 24);
      *(_OWORD *)(v56 + 40) = *(_OWORD *)(v57 + 40);
      *((_QWORD *)v56 + 7) = *((_QWORD *)v57 + 7);
      v60 = *(int *)(v14 + 28);
      v61 = &v56[v60];
      v62 = &v57[v60];
      v63 = sub_224F67874();
      v64 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v64 + 32))(v61, v62, v63);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      v26 = (uint64_t)v131;
      *(_OWORD *)&v56[*(int *)(v14 + 32)] = *(_OWORD *)&v57[*(int *)(v14 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v137[7])(v56, 0, 1, v14);
      v15 = v134;
    }
    v66 = *(int *)(v26 + 20);
    v67 = &v56[v66];
    v68 = &v57[v66];
    if (v15(v68, 1, v14))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      *v67 = *v68;
      *((_QWORD *)v67 + 1) = *((_QWORD *)v68 + 1);
      *((_DWORD *)v67 + 4) = *((_DWORD *)v68 + 4);
      *(_OWORD *)(v67 + 24) = *(_OWORD *)(v68 + 24);
      *(_OWORD *)(v67 + 40) = *(_OWORD *)(v68 + 40);
      *((_QWORD *)v67 + 7) = *((_QWORD *)v68 + 7);
      v70 = *(int *)(v14 + 28);
      __dstc = &v67[v70];
      v71 = &v68[v70];
      v72 = sub_224F67874();
      v73 = *(_QWORD *)(v72 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dstc, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v73 + 32))(__dstc, v71, v72);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v73 + 56))(__dstc, 0, 1, v72);
      }
      *(_OWORD *)&v67[*(int *)(v14 + 32)] = *(_OWORD *)&v68[*(int *)(v14 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v137[7])(v67, 0, 1, v14);
      v26 = (uint64_t)v131;
      v15 = v134;
    }
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7])(v56, 0, 1, v26);
  }
  v75 = v3[19];
  *(_OWORD *)(a1 + v3[18]) = *(_OWORD *)(a2 + v3[18]);
  v76 = (_BYTE *)(a1 + v75);
  v77 = (_BYTE *)(a2 + v75);
  if (v15(a2 + v75, 1, v14))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    *v76 = *v77;
    *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
    *((_DWORD *)v76 + 4) = *((_DWORD *)v77 + 4);
    *(_OWORD *)(v76 + 24) = *(_OWORD *)(v77 + 24);
    *(_OWORD *)(v76 + 40) = *(_OWORD *)(v77 + 40);
    *((_QWORD *)v76 + 7) = *((_QWORD *)v77 + 7);
    v79 = *(int *)(v14 + 28);
    v80 = &v76[v79];
    v81 = &v77[v79];
    v82 = sub_224F67874();
    v83 = *(_QWORD *)(v82 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v83 + 32))(v80, v81, v82);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
    }
    *(_OWORD *)&v76[*(int *)(v14 + 32)] = *(_OWORD *)&v77[*(int *)(v14 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v137[7])(v76, 0, 1, v14);
  }
  v85 = v3[20];
  v86 = (_OWORD *)(a1 + v85);
  v87 = (_OWORD *)(a2 + v85);
  v88 = type metadata accessor for Reference();
  v89 = *(_QWORD *)(v88 - 8);
  v90 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v89 + 48);
  if (v90(v87, 1, v88))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    v138 = v3;
    v92 = v87[1];
    *v86 = *v87;
    v86[1] = v92;
    v93 = *(int *)(v88 + 24);
    v94 = (_OWORD *)((char *)v86 + v93);
    v95 = (_OWORD *)((char *)v87 + v93);
    v96 = type metadata accessor for Identifier();
    v97 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v96 - 8);
    if (v97[6](v95, 1, v96))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      v3 = v138;
    }
    else
    {
      v135 = v89;
      v99 = v95[1];
      *v94 = *v95;
      v94[1] = v99;
      *((_QWORD *)v94 + 4) = *((_QWORD *)v95 + 4);
      v100 = *(int *)(v96 + 24);
      __srca = v97;
      v132 = (char *)v94 + v100;
      v101 = (char *)v95 + v100;
      v102 = sub_224F675D4();
      v123 = *(_QWORD *)(v102 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v101, 1, v102))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v132, v101, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v132, v101, v102);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v132, 0, 1, v102);
      }
      v89 = v135;
      v3 = v138;
      *(_OWORD *)((char *)v94 + *(int *)(v96 + 28)) = *(_OWORD *)((char *)v95 + *(int *)(v96 + 28));
      (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))__srca + 7))(v94, 0, 1, v96);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
  }
  v104 = v3[21];
  v105 = (_OWORD *)(a1 + v104);
  v106 = (_OWORD *)(a2 + v104);
  if (v90((_OWORD *)(a2 + v104), 1, v88))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
  }
  else
  {
    v108 = v106[1];
    *v105 = *v106;
    v105[1] = v108;
    v109 = *(int *)(v88 + 24);
    v110 = (_OWORD *)((char *)v105 + v109);
    v111 = (_OWORD *)((char *)v106 + v109);
    v112 = type metadata accessor for Identifier();
    v113 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v112 - 8);
    if (v113[6](v111, 1, v112))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    }
    else
    {
      v133 = v113;
      v136 = v89;
      v115 = v111[1];
      *v110 = *v111;
      v110[1] = v115;
      *((_QWORD *)v110 + 4) = *((_QWORD *)v111 + 4);
      v116 = *(int *)(v112 + 24);
      v139 = (char *)v110 + v116;
      v117 = (char *)v111 + v116;
      v118 = sub_224F675D4();
      __dstd = *(void (***)(void *, const void *, uint64_t))(v118 - 8);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__dstd[6])(v117, 1, v118))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v139, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        __dstd[4](v139, v117, v118);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstd[7])(v139, 0, 1, v118);
      }
      *(_OWORD *)((char *)v110 + *(int *)(v112 + 28)) = *(_OWORD *)((char *)v111 + *(int *)(v112 + 28));
      v89 = v136;
      (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))v133 + 7))(v110, 0, 1, v112);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v105, 0, 1, v88);
  }
  v120 = v3[23];
  *(_QWORD *)(a1 + v3[22]) = *(_QWORD *)(a2 + v3[22]);
  *(_OWORD *)(a1 + v120) = *(_OWORD *)(a2 + v120);
  return a1;
}

uint64_t assignWithTake for ModelsR4.Condition(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t (*v51)(_BYTE *, uint64_t, uint64_t);
  int v52;
  int v53;
  unint64_t *v54;
  uint64_t (*v55)();
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t (*v57)();
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(void *, uint64_t, uint64_t);
  int v112;
  uint64_t v113;
  size_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  int v127;
  int v128;
  uint64_t (*v129)(uint64_t, uint64_t);
  uint64_t v130;
  size_t v131;
  void *v132;
  const void *v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t (*v171)(uint64_t, uint64_t);
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(void *, uint64_t, uint64_t);
  int v187;
  uint64_t v188;
  size_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t (*v204)(_QWORD *, uint64_t, uint64_t);
  int v205;
  int v206;
  uint64_t (*v207)(uint64_t, uint64_t);
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  _OWORD *v211;
  _OWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(_QWORD *, uint64_t, uint64_t);
  int v224;
  int v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  _BYTE *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t (*v246)(_BYTE *, uint64_t, uint64_t);
  int v247;
  uint64_t v248;
  size_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  _BYTE *v253;
  _BYTE *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t (*v257)(_BYTE *, uint64_t, uint64_t);
  int v258;
  uint64_t v259;
  size_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t (*v266)(char *, uint64_t, uint64_t);
  int v267;
  uint64_t v268;
  size_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  uint64_t v280;
  _BYTE *v281;
  _BYTE *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  _BYTE *v289;
  _BYTE *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t (*v293)(_BYTE *, uint64_t, uint64_t);
  int v294;
  uint64_t v295;
  size_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _BYTE *v306;
  int v307;
  int v308;
  uint64_t (*v309)(uint64_t, uint64_t);
  uint64_t v310;
  uint64_t v311;
  void *v312;
  _BYTE *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  __int128 v318;
  uint64_t v319;
  void *v320;
  _BYTE *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t (*v324)(void *, uint64_t, uint64_t);
  int v325;
  uint64_t v326;
  size_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  _QWORD *v337;
  int v338;
  int v339;
  uint64_t (*v340)(uint64_t, uint64_t);
  uint64_t v341;
  size_t v342;
  void *v343;
  const void *v344;
  __int128 v345;
  uint64_t v346;
  _OWORD *v347;
  _OWORD *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t (*v359)(uint64_t, uint64_t, uint64_t);
  int v360;
  int v361;
  uint64_t (*v362)(uint64_t, uint64_t);
  __int128 v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  __int128 v370;
  uint64_t v371;
  void *v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t (*v390)(void *, uint64_t, uint64_t);
  int v391;
  uint64_t v392;
  size_t v393;
  void *v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  void *v411;
  void *v412;
  void *v413;
  uint64_t (*v414)(_BYTE *, uint64_t, uint64_t);
  uint64_t (*v415)(_BYTE *, uint64_t, uint64_t);
  uint64_t (*v416)(_BYTE *, uint64_t, uint64_t);
  uint64_t (*v417)(_BYTE *, uint64_t, uint64_t);
  uint64_t v418;
  void *v419;
  uint64_t (*v420)(_BYTE *, uint64_t, uint64_t);
  void *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t v433;
  void *v434;
  uint64_t v435;
  _QWORD *__src;
  void *__srca;
  _QWORD *v438;
  void *v439;
  char *v440;
  char *v441;
  char *v442;
  char *v443;
  void *v444;
  int *v445;
  uint64_t (*v446)(uint64_t, uint64_t, uint64_t);
  _QWORD *v447;
  _QWORD *v448;
  void *v449;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) == 1)
    goto LABEL_4;
  if (v9 == 1)
  {
    sub_224E2C98C(a1 + 32);
    v9 = *(_QWORD *)(a2 + 32);
LABEL_4:
    *v8 = v9;
    goto LABEL_6;
  }
  *v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  if (*(_QWORD *)(a1 + 48) == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(a2 + 48);
  if (v10 == 1)
  {
    sub_224E2C9C0(a1 + 40);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
LABEL_11:
  if (*(_QWORD *)(a1 + 72) == 1)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(a2 + 72);
  if (v11 == 1)
  {
    sub_224E2C9C0(a1 + 64);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
LABEL_16:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104) == 1)
  {
LABEL_19:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    goto LABEL_21;
  }
  v12 = *(_QWORD *)(a2 + 104);
  if (v12 == 1)
  {
    sub_224E2C9C0(a1 + 96);
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
LABEL_21:
  if (*(_QWORD *)(a1 + 128) == 1)
  {
LABEL_24:
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    goto LABEL_26;
  }
  v13 = *(_QWORD *)(a2 + 128);
  if (v13 == 1)
  {
    sub_224E2C9C0(a1 + 120);
    goto LABEL_24;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
LABEL_26:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v14 = a3[13];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for FHIRDateTime();
  v438 = *(_QWORD **)(v17 - 8);
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v438[6];
  v19 = v18(v15, 1, v17);
  v20 = v18(v16, 1, v17);
  v445 = a3;
  v446 = v18;
  if (!v19)
  {
    if (v20)
    {
      sub_224DDEAA0(v15, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_31;
    }
    *(_BYTE *)v15 = *(_BYTE *)v16;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
    *(_DWORD *)(v15 + 16) = *(_DWORD *)(v16 + 16);
    if (*(_QWORD *)(v15 + 56) != 1)
    {
      v29 = *(_QWORD *)(v16 + 56);
      if (v29 != 1)
      {
        *(_BYTE *)(v15 + 24) = *(_BYTE *)(v16 + 24);
        *(_WORD *)(v15 + 25) = *(_WORD *)(v16 + 25);
        *(_DWORD *)(v15 + 28) = *(_DWORD *)(v16 + 28);
        *(_OWORD *)(v15 + 32) = *(_OWORD *)(v16 + 32);
        *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
        *(_QWORD *)(v15 + 56) = v29;
        swift_bridgeObjectRelease();
LABEL_41:
        v31 = *(int *)(v17 + 28);
        v32 = (void *)(v15 + v31);
        v33 = (void *)(v16 + v31);
        v34 = sub_224F67874();
        v35 = *(_QWORD *)(v34 - 8);
        v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
        v421 = v32;
        LODWORD(v32) = v36(v32, 1, v34);
        v37 = v36(v33, 1, v34);
        if ((_DWORD)v32)
        {
          if (!v37)
          {
            (*(void (**)(void *, void *, uint64_t))(v35 + 32))(v421, v33, v34);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v421, 0, 1, v34);
            goto LABEL_49;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v39 = *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64);
          v40 = v421;
        }
        else
        {
          if (!v37)
          {
            (*(void (**)(void *, void *, uint64_t))(v35 + 40))(v421, v33, v34);
            goto LABEL_49;
          }
          (*(void (**)(void *, uint64_t))(v35 + 8))(v421, v34);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v39 = *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64);
          v40 = v421;
        }
        memcpy(v40, v33, v39);
LABEL_49:
        a3 = v445;
        v18 = v446;
        v42 = *(int *)(v17 + 32);
        v43 = (_QWORD *)(v15 + v42);
        v44 = (uint64_t *)(v16 + v42);
        v46 = *v44;
        v45 = v44[1];
        *v43 = v46;
        v43[1] = v45;
        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
      sub_224E2C9F4(v15 + 24);
    }
    v30 = *(_OWORD *)(v16 + 40);
    *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
    *(_OWORD *)(v15 + 40) = v30;
    *(_QWORD *)(v15 + 56) = *(_QWORD *)(v16 + 56);
    goto LABEL_41;
  }
  if (v20)
  {
    v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_31:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v21);
    memcpy((void *)v15, (const void *)v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_50;
  }
  *(_BYTE *)v15 = *(_BYTE *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_DWORD *)(v15 + 16) = *(_DWORD *)(v16 + 16);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(v16 + 40);
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(v16 + 56);
  v23 = *(int *)(v17 + 28);
  v24 = (void *)(v15 + v23);
  v25 = (const void *)(v16 + v23);
  v26 = sub_224F67874();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v18 = v446;
  *(_OWORD *)(v15 + *(int *)(v17 + 32)) = *(_OWORD *)(v16 + *(int *)(v17 + 32));
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v438[7])(v15, 0, 1, v17);
LABEL_50:
  v47 = a3[14];
  v48 = (_BYTE *)(a1 + v47);
  v49 = (_BYTE *)(a2 + v47);
  v50 = type metadata accessor for Period();
  __src = *(_QWORD **)(v50 - 8);
  v51 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))__src[6];
  v52 = v51(v48, 1, v50);
  v53 = v51(v49, 1, v50);
  if (!v52)
  {
    if (v53)
    {
      v57 = type metadata accessor for Period;
      sub_224DDEAA0((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v54 = &qword_2557E04B8;
LABEL_56:
      v56 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      v55 = v57;
      goto LABEL_57;
    }
    v60 = v18((uint64_t)v48, 1, v17);
    v61 = v18((uint64_t)v49, 1, v17);
    if (v60)
    {
      if (v61)
      {
        v62 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_67:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v62);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        goto LABEL_220;
      }
      v415 = v51;
      *v48 = *v49;
      *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
      *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
      *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
      *(_OWORD *)(v48 + 40) = *(_OWORD *)(v49 + 40);
      *((_QWORD *)v48 + 7) = *((_QWORD *)v49 + 7);
      v70 = *(int *)(v17 + 28);
      v71 = &v48[v70];
      v72 = &v49[v70];
      v73 = sub_224F67874();
      v74 = *(_QWORD *)(v73 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v74 + 32))(v71, v72, v73);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      }
      *(_OWORD *)&v48[*(int *)(v17 + 32)] = *(_OWORD *)&v49[*(int *)(v17 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v438[7])(v48, 0, 1, v17);
LABEL_219:
      a3 = v445;
      v18 = v446;
      v51 = v415;
LABEL_220:
      v277 = *(int *)(v50 + 20);
      v48 += v277;
      v49 += v277;
      v278 = v18((uint64_t)v48, 1, v17);
      v279 = v18((uint64_t)v49, 1, v17);
      if (v278)
      {
        if (v279)
        {
          v54 = &qword_2557E02D0;
          v55 = type metadata accessor for FHIRDateTime;
          goto LABEL_53;
        }
        v420 = v51;
        *v48 = *v49;
        *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
        *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
        *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
        *(_OWORD *)(v48 + 40) = *(_OWORD *)(v49 + 40);
        *((_QWORD *)v48 + 7) = *((_QWORD *)v49 + 7);
        v280 = *(int *)(v17 + 28);
        v281 = &v48[v280];
        v282 = &v49[v280];
        v283 = sub_224F67874();
        v284 = *(_QWORD *)(v283 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v284 + 48))(v282, 1, v283))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v285 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v284 + 32))(v281, v282, v283);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v284 + 56))(v281, 0, 1, v283);
        }
        *(_OWORD *)&v48[*(int *)(v17 + 32)] = *(_OWORD *)&v49[*(int *)(v17 + 32)];
        a3 = v445;
        ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v438[7])(v48, 0, 1, v17);
        goto LABEL_307;
      }
      if (v279)
      {
        v57 = type metadata accessor for FHIRDateTime;
        sub_224DDEAA0((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v54 = &qword_2557E02D0;
        goto LABEL_56;
      }
      v420 = v51;
      v433 = v50;
      *v48 = *v49;
      *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
      *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
      if (*((_QWORD *)v48 + 7) != 1)
      {
        v286 = *((_QWORD *)v49 + 7);
        if (v286 != 1)
        {
          v48[24] = v49[24];
          *(_WORD *)(v48 + 25) = *(_WORD *)(v49 + 25);
          *((_DWORD *)v48 + 7) = *((_DWORD *)v49 + 7);
          *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
          *((_QWORD *)v48 + 6) = *((_QWORD *)v49 + 6);
          *((_QWORD *)v48 + 7) = v286;
          swift_bridgeObjectRelease();
LABEL_234:
          v288 = *(int *)(v17 + 28);
          v289 = &v48[v288];
          v290 = &v49[v288];
          v291 = sub_224F67874();
          v292 = *(_QWORD *)(v291 - 8);
          v293 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v292 + 48);
          v413 = v289;
          LODWORD(v289) = v293(v289, 1, v291);
          v294 = v293(v290, 1, v291);
          if ((_DWORD)v289)
          {
            v50 = v433;
            if (!v294)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v292 + 32))(v413, v290, v291);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v292 + 56))(v413, 0, 1, v291);
              goto LABEL_306;
            }
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v296 = *(_QWORD *)(*(_QWORD *)(v295 - 8) + 64);
            v297 = v413;
          }
          else
          {
            v50 = v433;
            if (!v294)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v292 + 40))(v413, v290, v291);
              goto LABEL_306;
            }
            (*(void (**)(void *, uint64_t))(v292 + 8))(v413, v291);
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v296 = *(_QWORD *)(*(_QWORD *)(v298 - 8) + 64);
            v297 = v413;
          }
          memcpy(v297, v290, v296);
LABEL_306:
          v396 = *(int *)(v17 + 32);
          v397 = &v48[v396];
          v398 = (uint64_t *)&v49[v396];
          v400 = *v398;
          v399 = v398[1];
          *v397 = v400;
          v397[1] = v399;
          swift_bridgeObjectRelease();
          a3 = v445;
LABEL_307:
          v18 = v446;
          v51 = v420;
          goto LABEL_79;
        }
        sub_224E2C9F4((uint64_t)(v48 + 24));
      }
      v287 = *(_OWORD *)(v49 + 40);
      *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
      *(_OWORD *)(v48 + 40) = v287;
      *((_QWORD *)v48 + 7) = *((_QWORD *)v49 + 7);
      goto LABEL_234;
    }
    if (v61)
    {
      sub_224DDEAA0((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v62 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_67;
    }
    v415 = v51;
    v425 = v50;
    *v48 = *v49;
    *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
    *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
    if (*((_QWORD *)v48 + 7) != 1)
    {
      v117 = *((_QWORD *)v49 + 7);
      if (v117 != 1)
      {
        v48[24] = v49[24];
        *(_WORD *)(v48 + 25) = *(_WORD *)(v49 + 25);
        *((_DWORD *)v48 + 7) = *((_DWORD *)v49 + 7);
        *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
        *((_QWORD *)v48 + 6) = *((_QWORD *)v49 + 6);
        *((_QWORD *)v48 + 7) = v117;
        swift_bridgeObjectRelease();
LABEL_194:
        v241 = *(int *)(v17 + 28);
        v242 = &v48[v241];
        v243 = &v49[v241];
        v244 = sub_224F67874();
        v245 = *(_QWORD *)(v244 - 8);
        v246 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v245 + 48);
        v412 = v242;
        LODWORD(v242) = v246(v242, 1, v244);
        v247 = v246(v243, 1, v244);
        if ((_DWORD)v242)
        {
          v50 = v425;
          if (!v247)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v245 + 32))(v412, v243, v244);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v245 + 56))(v412, 0, 1, v244);
            goto LABEL_218;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v249 = *(_QWORD *)(*(_QWORD *)(v248 - 8) + 64);
          v250 = v412;
        }
        else
        {
          v50 = v425;
          if (!v247)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v245 + 40))(v412, v243, v244);
            goto LABEL_218;
          }
          (*(void (**)(void *, uint64_t))(v245 + 8))(v412, v244);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v249 = *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64);
          v250 = v412;
        }
        memcpy(v250, v243, v249);
LABEL_218:
        v272 = *(int *)(v17 + 32);
        v273 = &v48[v272];
        v274 = (uint64_t *)&v49[v272];
        v276 = *v274;
        v275 = v274[1];
        *v273 = v276;
        v273[1] = v275;
        swift_bridgeObjectRelease();
        goto LABEL_219;
      }
      sub_224E2C9F4((uint64_t)(v48 + 24));
    }
    v118 = *(_OWORD *)(v49 + 40);
    *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
    *(_OWORD *)(v48 + 40) = v118;
    *((_QWORD *)v48 + 7) = *((_QWORD *)v49 + 7);
    goto LABEL_194;
  }
  if (v53)
  {
    v54 = &qword_2557E04B8;
    v55 = type metadata accessor for Period;
LABEL_53:
    v56 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_57:
    sub_224DDEA0C(0, v54, (uint64_t (*)(uint64_t))v55, v56);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_79;
  }
  v414 = v51;
  if (v18((uint64_t)v49, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    *v48 = *v49;
    *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
    *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
    *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
    *(_OWORD *)(v48 + 40) = *(_OWORD *)(v49 + 40);
    *((_QWORD *)v48 + 7) = *((_QWORD *)v49 + 7);
    v63 = *(int *)(v17 + 28);
    v64 = &v48[v63];
    v65 = &v49[v63];
    v66 = sub_224F67874();
    v67 = *(_QWORD *)(v66 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 32))(v64, v65, v66);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
    }
    *(_OWORD *)&v48[*(int *)(v17 + 32)] = *(_OWORD *)&v49[*(int *)(v17 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v438[7])(v48, 0, 1, v17);
    a3 = v445;
    v18 = v446;
  }
  v76 = *(int *)(v50 + 20);
  v77 = &v48[v76];
  v78 = &v49[v76];
  if (v18((uint64_t)v78, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    v422 = v50;
    *v77 = *v78;
    *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
    *((_DWORD *)v77 + 4) = *((_DWORD *)v78 + 4);
    *(_OWORD *)(v77 + 24) = *(_OWORD *)(v78 + 24);
    *(_OWORD *)(v77 + 40) = *(_OWORD *)(v78 + 40);
    *((_QWORD *)v77 + 7) = *((_QWORD *)v78 + 7);
    v80 = *(int *)(v17 + 28);
    v81 = &v77[v80];
    v82 = &v78[v80];
    v83 = sub_224F67874();
    v84 = *(_QWORD *)(v83 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 32))(v81, v82, v83);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
    }
    *(_OWORD *)&v77[*(int *)(v17 + 32)] = *(_OWORD *)&v78[*(int *)(v17 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v438[7])(v77, 0, 1, v17);
    a3 = v445;
    v18 = v446;
    v50 = v422;
  }
  v51 = v414;
  ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7])(v48, 0, 1, v50);
LABEL_79:
  v86 = a3[15];
  v87 = (_QWORD *)(a1 + v86);
  v88 = (uint64_t *)(a2 + v86);
  v90 = *v88;
  v89 = v88[1];
  *v87 = v90;
  v87[1] = v89;
  swift_bridgeObjectRelease();
  v91 = a3[16];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v94 = v18(a1 + v91, 1, v17);
  v95 = v18(v93, 1, v17);
  if (!v94)
  {
    if (v95)
    {
      sub_224DDEAA0(v92, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v96 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_84;
    }
    v417 = v51;
    v424 = v50;
    *(_BYTE *)v92 = *(_BYTE *)v93;
    *(_QWORD *)(v92 + 8) = *(_QWORD *)(v93 + 8);
    *(_DWORD *)(v92 + 16) = *(_DWORD *)(v93 + 16);
    if (*(_QWORD *)(v92 + 56) != 1)
    {
      v104 = *(_QWORD *)(v93 + 56);
      if (v104 != 1)
      {
        *(_BYTE *)(v92 + 24) = *(_BYTE *)(v93 + 24);
        *(_WORD *)(v92 + 25) = *(_WORD *)(v93 + 25);
        *(_DWORD *)(v92 + 28) = *(_DWORD *)(v93 + 28);
        *(_OWORD *)(v92 + 32) = *(_OWORD *)(v93 + 32);
        *(_QWORD *)(v92 + 48) = *(_QWORD *)(v93 + 48);
        *(_QWORD *)(v92 + 56) = v104;
        swift_bridgeObjectRelease();
LABEL_94:
        v106 = *(int *)(v17 + 28);
        v107 = (void *)(v92 + v106);
        v108 = (void *)(v93 + v106);
        v109 = sub_224F67874();
        v110 = *(_QWORD *)(v109 - 8);
        v111 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v110 + 48);
        v411 = v107;
        LODWORD(v107) = v111(v107, 1, v109);
        v112 = v111(v108, 1, v109);
        if ((_DWORD)v107)
        {
          if (!v112)
          {
            (*(void (**)(void *, void *, uint64_t))(v110 + 32))(v411, v108, v109);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v411, 0, 1, v109);
            goto LABEL_106;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v114 = *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64);
          v115 = v411;
        }
        else
        {
          if (!v112)
          {
            (*(void (**)(void *, void *, uint64_t))(v110 + 40))(v411, v108, v109);
            goto LABEL_106;
          }
          (*(void (**)(void *, uint64_t))(v110 + 8))(v411, v109);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v114 = *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64);
          v115 = v411;
        }
        memcpy(v115, v108, v114);
LABEL_106:
        a3 = v445;
        v18 = v446;
        v51 = v417;
        v50 = v424;
        v119 = *(int *)(v17 + 32);
        v120 = (_QWORD *)(v92 + v119);
        v121 = (uint64_t *)(v93 + v119);
        v123 = *v121;
        v122 = v121[1];
        *v120 = v123;
        v120[1] = v122;
        swift_bridgeObjectRelease();
        goto LABEL_107;
      }
      sub_224E2C9F4(v92 + 24);
    }
    v105 = *(_OWORD *)(v93 + 40);
    *(_OWORD *)(v92 + 24) = *(_OWORD *)(v93 + 24);
    *(_OWORD *)(v92 + 40) = v105;
    *(_QWORD *)(v92 + 56) = *(_QWORD *)(v93 + 56);
    goto LABEL_94;
  }
  if (v95)
  {
    v96 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_84:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v96);
    memcpy((void *)v92, (const void *)v93, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_107;
  }
  v416 = v51;
  v423 = v50;
  *(_BYTE *)v92 = *(_BYTE *)v93;
  *(_QWORD *)(v92 + 8) = *(_QWORD *)(v93 + 8);
  *(_DWORD *)(v92 + 16) = *(_DWORD *)(v93 + 16);
  *(_OWORD *)(v92 + 24) = *(_OWORD *)(v93 + 24);
  *(_OWORD *)(v92 + 40) = *(_OWORD *)(v93 + 40);
  *(_QWORD *)(v92 + 56) = *(_QWORD *)(v93 + 56);
  v98 = *(int *)(v17 + 28);
  v99 = (void *)(v92 + v98);
  v100 = (const void *)(v93 + v98);
  v101 = sub_224F67874();
  v102 = *(_QWORD *)(v101 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v102 + 32))(v99, v100, v101);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
  }
  v18 = v446;
  v51 = v416;
  v50 = v423;
  *(_OWORD *)(v92 + *(int *)(v17 + 32)) = *(_OWORD *)(v93 + *(int *)(v17 + 32));
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v438[7])(v92, 0, 1, v17);
LABEL_107:
  v124 = a3[17];
  v125 = (_BYTE *)(a1 + v124);
  v126 = (_BYTE *)(a2 + v124);
  v127 = v51((_BYTE *)(a1 + v124), 1, v50);
  v128 = v51(v126, 1, v50);
  if (!v127)
  {
    if (v128)
    {
      sub_224DDEAA0((uint64_t)v125, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v129 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_112;
    }
    v135 = v18((uint64_t)v125, 1, v17);
    v136 = v18((uint64_t)v126, 1, v17);
    if (v135)
    {
      if (v136)
      {
        v137 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_123:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v137);
        memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
        goto LABEL_243;
      }
      v427 = v50;
      *v125 = *v126;
      *((_QWORD *)v125 + 1) = *((_QWORD *)v126 + 1);
      *((_DWORD *)v125 + 4) = *((_DWORD *)v126 + 4);
      *(_OWORD *)(v125 + 24) = *(_OWORD *)(v126 + 24);
      *(_OWORD *)(v125 + 40) = *(_OWORD *)(v126 + 40);
      *((_QWORD *)v125 + 7) = *((_QWORD *)v126 + 7);
      v145 = *(int *)(v17 + 28);
      v146 = &v125[v145];
      v147 = &v126[v145];
      v148 = sub_224F67874();
      v149 = *(_QWORD *)(v148 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v149 + 48))(v147, 1, v148))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v149 + 32))(v146, v147, v148);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v149 + 56))(v146, 0, 1, v148);
      }
      v50 = v427;
      *(_OWORD *)&v125[*(int *)(v17 + 32)] = *(_OWORD *)&v126[*(int *)(v17 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v438[7])(v125, 0, 1, v17);
      v18 = v446;
LABEL_243:
      v304 = *(int *)(v50 + 20);
      v305 = (uint64_t)&v125[v304];
      v306 = &v126[v304];
      v307 = v18(v305, 1, v17);
      v308 = v18((uint64_t)v306, 1, v17);
      if (v307)
      {
        if (!v308)
        {
          *(_BYTE *)v305 = *v306;
          *(_QWORD *)(v305 + 8) = *((_QWORD *)v306 + 1);
          *(_DWORD *)(v305 + 16) = *((_DWORD *)v306 + 4);
          *(_OWORD *)(v305 + 24) = *(_OWORD *)(v306 + 24);
          *(_OWORD *)(v305 + 40) = *(_OWORD *)(v306 + 40);
          *(_QWORD *)(v305 + 56) = *((_QWORD *)v306 + 7);
          v311 = *(int *)(v17 + 28);
          v312 = (void *)(v305 + v311);
          v313 = &v306[v311];
          v314 = sub_224F67874();
          v315 = *(_QWORD *)(v314 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v315 + 48))(v313, 1, v314))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v312, v313, *(_QWORD *)(*(_QWORD *)(v316 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v315 + 32))(v312, v313, v314);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v315 + 56))(v312, 0, 1, v314);
          }
          v18 = v446;
          *(_OWORD *)(v305 + *(int *)(v17 + 32)) = *(_OWORD *)&v306[*(int *)(v17 + 32)];
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v438[7])(v305, 0, 1, v17);
          goto LABEL_135;
        }
        v309 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_248:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v309);
        v131 = *(_QWORD *)(*(_QWORD *)(v310 - 8) + 64);
        v132 = (void *)v305;
        v133 = v306;
        goto LABEL_113;
      }
      if (v308)
      {
        sub_224DDEAA0(v305, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v309 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_248;
      }
      *(_BYTE *)v305 = *v306;
      *(_QWORD *)(v305 + 8) = *((_QWORD *)v306 + 1);
      *(_DWORD *)(v305 + 16) = *((_DWORD *)v306 + 4);
      if (*(_QWORD *)(v305 + 56) != 1)
      {
        v317 = *((_QWORD *)v306 + 7);
        if (v317 != 1)
        {
          *(_BYTE *)(v305 + 24) = v306[24];
          *(_WORD *)(v305 + 25) = *(_WORD *)(v306 + 25);
          *(_DWORD *)(v305 + 28) = *((_DWORD *)v306 + 7);
          *(_OWORD *)(v305 + 32) = *((_OWORD *)v306 + 2);
          *(_QWORD *)(v305 + 48) = *((_QWORD *)v306 + 6);
          *(_QWORD *)(v305 + 56) = v317;
          swift_bridgeObjectRelease();
LABEL_258:
          v319 = *(int *)(v17 + 28);
          v320 = (void *)(v305 + v319);
          v321 = &v306[v319];
          v322 = sub_224F67874();
          v323 = *(_QWORD *)(v322 - 8);
          v324 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v323 + 48);
          v434 = v320;
          LODWORD(v320) = v324(v320, 1, v322);
          v325 = v324(v321, 1, v322);
          if ((_DWORD)v320)
          {
            if (!v325)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v323 + 32))(v434, v321, v322);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v323 + 56))(v434, 0, 1, v322);
              goto LABEL_309;
            }
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v327 = *(_QWORD *)(*(_QWORD *)(v326 - 8) + 64);
            v328 = v434;
          }
          else
          {
            if (!v325)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v323 + 40))(v434, v321, v322);
              goto LABEL_309;
            }
            (*(void (**)(void *, uint64_t))(v323 + 8))(v434, v322);
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v327 = *(_QWORD *)(*(_QWORD *)(v329 - 8) + 64);
            v328 = v434;
          }
          memcpy(v328, v321, v327);
LABEL_309:
          v401 = *(int *)(v17 + 32);
          v402 = (_QWORD *)(v305 + v401);
          v403 = (uint64_t *)&v306[v401];
          v405 = *v403;
          v404 = v403[1];
          *v402 = v405;
          v402[1] = v404;
          swift_bridgeObjectRelease();
          a3 = v445;
          v18 = v446;
          goto LABEL_135;
        }
        sub_224E2C9F4(v305 + 24);
      }
      v318 = *(_OWORD *)(v306 + 40);
      *(_OWORD *)(v305 + 24) = *(_OWORD *)(v306 + 24);
      *(_OWORD *)(v305 + 40) = v318;
      *(_QWORD *)(v305 + 56) = *((_QWORD *)v306 + 7);
      goto LABEL_258;
    }
    if (v136)
    {
      sub_224DDEAA0((uint64_t)v125, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v137 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_123;
    }
    v429 = v50;
    *v125 = *v126;
    *((_QWORD *)v125 + 1) = *((_QWORD *)v126 + 1);
    *((_DWORD *)v125 + 4) = *((_DWORD *)v126 + 4);
    if (*((_QWORD *)v125 + 7) != 1)
    {
      v192 = *((_QWORD *)v126 + 7);
      if (v192 != 1)
      {
        v125[24] = v126[24];
        *(_WORD *)(v125 + 25) = *(_WORD *)(v126 + 25);
        *((_DWORD *)v125 + 7) = *((_DWORD *)v126 + 7);
        *((_OWORD *)v125 + 2) = *((_OWORD *)v126 + 2);
        *((_QWORD *)v125 + 6) = *((_QWORD *)v126 + 6);
        *((_QWORD *)v125 + 7) = v192;
        swift_bridgeObjectRelease();
LABEL_201:
        v252 = *(int *)(v17 + 28);
        v253 = &v125[v252];
        v254 = &v126[v252];
        v255 = sub_224F67874();
        v256 = *(_QWORD *)(v255 - 8);
        v257 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v256 + 48);
        v419 = v253;
        LODWORD(v253) = v257(v253, 1, v255);
        v258 = v257(v254, 1, v255);
        if ((_DWORD)v253)
        {
          v18 = v446;
          if (!v258)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v256 + 32))(v419, v254, v255);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v256 + 56))(v419, 0, 1, v255);
            goto LABEL_242;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v260 = *(_QWORD *)(*(_QWORD *)(v259 - 8) + 64);
          v261 = v419;
        }
        else
        {
          v18 = v446;
          if (!v258)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v256 + 40))(v419, v254, v255);
            goto LABEL_242;
          }
          (*(void (**)(void *, uint64_t))(v256 + 8))(v419, v255);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v260 = *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64);
          v261 = v419;
        }
        memcpy(v261, v254, v260);
LABEL_242:
        v299 = *(int *)(v17 + 32);
        v300 = &v125[v299];
        v301 = (uint64_t *)&v126[v299];
        v303 = *v301;
        v302 = v301[1];
        *v300 = v303;
        v300[1] = v302;
        swift_bridgeObjectRelease();
        a3 = v445;
        v50 = v429;
        goto LABEL_243;
      }
      sub_224E2C9F4((uint64_t)(v125 + 24));
    }
    v193 = *(_OWORD *)(v126 + 40);
    *(_OWORD *)(v125 + 24) = *(_OWORD *)(v126 + 24);
    *(_OWORD *)(v125 + 40) = v193;
    *((_QWORD *)v125 + 7) = *((_QWORD *)v126 + 7);
    goto LABEL_201;
  }
  if (v128)
  {
    v129 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_112:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v129);
    v131 = *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64);
    v132 = v125;
    v133 = v126;
LABEL_113:
    memcpy(v132, v133, v131);
    goto LABEL_135;
  }
  if (v18((uint64_t)v126, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
  }
  else
  {
    v426 = v50;
    *v125 = *v126;
    *((_QWORD *)v125 + 1) = *((_QWORD *)v126 + 1);
    *((_DWORD *)v125 + 4) = *((_DWORD *)v126 + 4);
    *(_OWORD *)(v125 + 24) = *(_OWORD *)(v126 + 24);
    *(_OWORD *)(v125 + 40) = *(_OWORD *)(v126 + 40);
    *((_QWORD *)v125 + 7) = *((_QWORD *)v126 + 7);
    v138 = *(int *)(v17 + 28);
    v139 = &v125[v138];
    v140 = &v126[v138];
    v141 = sub_224F67874();
    v142 = *(_QWORD *)(v141 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 32))(v139, v140, v141);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
    }
    v50 = v426;
    *(_OWORD *)&v125[*(int *)(v17 + 32)] = *(_OWORD *)&v126[*(int *)(v17 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v438[7])(v125, 0, 1, v17);
    v18 = v446;
  }
  v151 = *(int *)(v50 + 20);
  v152 = &v125[v151];
  v153 = &v126[v151];
  if (v18((uint64_t)v153, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
  }
  else
  {
    v428 = v50;
    *v152 = *v153;
    *((_QWORD *)v152 + 1) = *((_QWORD *)v153 + 1);
    *((_DWORD *)v152 + 4) = *((_DWORD *)v153 + 4);
    *(_OWORD *)(v152 + 24) = *(_OWORD *)(v153 + 24);
    *(_OWORD *)(v152 + 40) = *(_OWORD *)(v153 + 40);
    *((_QWORD *)v152 + 7) = *((_QWORD *)v153 + 7);
    v155 = *(int *)(v17 + 28);
    v156 = &v152[v155];
    v157 = &v153[v155];
    v158 = sub_224F67874();
    v159 = *(_QWORD *)(v158 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v159 + 32))(v156, v157, v158);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
    }
    *(_OWORD *)&v152[*(int *)(v17 + 32)] = *(_OWORD *)&v153[*(int *)(v17 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v438[7])(v152, 0, 1, v17);
    a3 = v445;
    v18 = v446;
    v50 = v428;
  }
  ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7])(v125, 0, 1, v50);
LABEL_135:
  v161 = a3[18];
  v162 = (_QWORD *)(a1 + v161);
  v163 = (uint64_t *)(a2 + v161);
  v165 = *v163;
  v164 = v163[1];
  *v162 = v165;
  v162[1] = v164;
  swift_bridgeObjectRelease();
  v166 = a3[19];
  v167 = a1 + v166;
  v168 = a2 + v166;
  v169 = v18(a1 + v166, 1, v17);
  v170 = v18(v168, 1, v17);
  if (!v169)
  {
    if (v170)
    {
      sub_224DDEAA0(v167, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v171 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_140;
    }
    *(_BYTE *)v167 = *(_BYTE *)v168;
    *(_QWORD *)(v167 + 8) = *(_QWORD *)(v168 + 8);
    *(_DWORD *)(v167 + 16) = *(_DWORD *)(v168 + 16);
    if (*(_QWORD *)(v167 + 56) != 1)
    {
      v179 = *(_QWORD *)(v168 + 56);
      if (v179 != 1)
      {
        *(_BYTE *)(v167 + 24) = *(_BYTE *)(v168 + 24);
        *(_WORD *)(v167 + 25) = *(_WORD *)(v168 + 25);
        *(_DWORD *)(v167 + 28) = *(_DWORD *)(v168 + 28);
        *(_OWORD *)(v167 + 32) = *(_OWORD *)(v168 + 32);
        *(_QWORD *)(v167 + 48) = *(_QWORD *)(v168 + 48);
        *(_QWORD *)(v167 + 56) = v179;
        swift_bridgeObjectRelease();
LABEL_150:
        v181 = *(int *)(v17 + 28);
        v182 = (void *)(v167 + v181);
        v183 = (void *)(v168 + v181);
        v184 = sub_224F67874();
        v185 = *(_QWORD *)(v184 - 8);
        v186 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v185 + 48);
        v439 = v182;
        LODWORD(v182) = v186(v182, 1, v184);
        v187 = v186(v183, 1, v184);
        if ((_DWORD)v182)
        {
          if (!v187)
          {
            (*(void (**)(void *, void *, uint64_t))(v185 + 32))(v439, v183, v184);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v439, 0, 1, v184);
            goto LABEL_162;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v189 = *(_QWORD *)(*(_QWORD *)(v188 - 8) + 64);
          v190 = v439;
        }
        else
        {
          if (!v187)
          {
            (*(void (**)(void *, void *, uint64_t))(v185 + 40))(v439, v183, v184);
            goto LABEL_162;
          }
          (*(void (**)(void *, uint64_t))(v185 + 8))(v439, v184);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v189 = *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64);
          v190 = v439;
        }
        memcpy(v190, v183, v189);
LABEL_162:
        a3 = v445;
        v194 = *(int *)(v17 + 32);
        v195 = (_QWORD *)(v167 + v194);
        v196 = (uint64_t *)(v168 + v194);
        v198 = *v196;
        v197 = v196[1];
        *v195 = v198;
        v195[1] = v197;
        swift_bridgeObjectRelease();
        goto LABEL_163;
      }
      sub_224E2C9F4(v167 + 24);
    }
    v180 = *(_OWORD *)(v168 + 40);
    *(_OWORD *)(v167 + 24) = *(_OWORD *)(v168 + 24);
    *(_OWORD *)(v167 + 40) = v180;
    *(_QWORD *)(v167 + 56) = *(_QWORD *)(v168 + 56);
    goto LABEL_150;
  }
  if (v170)
  {
    v171 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_140:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v171);
    memcpy((void *)v167, (const void *)v168, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
    goto LABEL_163;
  }
  *(_BYTE *)v167 = *(_BYTE *)v168;
  *(_QWORD *)(v167 + 8) = *(_QWORD *)(v168 + 8);
  *(_DWORD *)(v167 + 16) = *(_DWORD *)(v168 + 16);
  *(_OWORD *)(v167 + 24) = *(_OWORD *)(v168 + 24);
  *(_OWORD *)(v167 + 40) = *(_OWORD *)(v168 + 40);
  *(_QWORD *)(v167 + 56) = *(_QWORD *)(v168 + 56);
  v173 = *(int *)(v17 + 28);
  v174 = (void *)(v167 + v173);
  v175 = (const void *)(v168 + v173);
  v176 = sub_224F67874();
  v177 = *(_QWORD *)(v176 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v177 + 48))(v175, 1, v176))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v174, v175, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v177 + 32))(v174, v175, v176);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v177 + 56))(v174, 0, 1, v176);
  }
  *(_OWORD *)(v167 + *(int *)(v17 + 32)) = *(_OWORD *)(v168 + *(int *)(v17 + 32));
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v438[7])(v167, 0, 1, v17);
LABEL_163:
  v199 = a3[20];
  v200 = (_QWORD *)(a1 + v199);
  v201 = (_QWORD *)(a2 + v199);
  v202 = type metadata accessor for Reference();
  v203 = *(_QWORD **)(v202 - 8);
  v204 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v203[6];
  v205 = v204(v200, 1, v202);
  v206 = v204(v201, 1, v202);
  if (!v205)
  {
    if (v206)
    {
      sub_224DDEAA0((uint64_t)v200, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v207 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_168;
    }
    v448 = v203;
    v216 = v201[1];
    *v200 = *v201;
    v200[1] = v216;
    swift_bridgeObjectRelease();
    v217 = v201[3];
    v200[2] = v201[2];
    v200[3] = v217;
    swift_bridgeObjectRelease();
    v218 = *(int *)(v202 + 24);
    v219 = (_QWORD *)((char *)v200 + v218);
    v220 = (_QWORD *)((char *)v201 + v218);
    v221 = type metadata accessor for Identifier();
    v222 = *(_QWORD *)(v221 - 8);
    v223 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v222 + 48);
    v224 = v223(v219, 1, v221);
    v225 = v223(v220, 1, v221);
    if (v224)
    {
      if (!v225)
      {
        v233 = *((_OWORD *)v220 + 1);
        *(_OWORD *)v219 = *(_OWORD *)v220;
        *((_OWORD *)v219 + 1) = v233;
        v219[4] = v220[4];
        v234 = *(int *)(v221 + 24);
        v441 = (char *)v219 + v234;
        v431 = v220;
        v235 = (char *)v220 + v234;
        v236 = sub_224F675D4();
        v237 = *(_QWORD *)(v236 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v237 + 48))(v235, 1, v236))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v441, v235, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v237 + 32))(v441, v235, v236);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v237 + 56))(v441, 0, 1, v236);
        }
        a3 = v445;
        *(_OWORD *)((char *)v219 + *(int *)(v221 + 28)) = *(_OWORD *)((char *)v431 + *(int *)(v221 + 28));
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v222 + 56))(v219, 0, 1, v221);
        v203 = v448;
        goto LABEL_268;
      }
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
LABEL_267:
      a3 = v445;
      v203 = v448;
      goto LABEL_268;
    }
    a3 = v445;
    if (v225)
    {
      sub_224DDEAA0((uint64_t)v219, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v232 - 8) + 64));
      v203 = v448;
      goto LABEL_268;
    }
    v239 = v220[1];
    *v219 = *v220;
    v219[1] = v239;
    swift_bridgeObjectRelease();
    if (v219[3] != 1)
    {
      v240 = v220[3];
      if (v240 != 1)
      {
        v219[2] = v220[2];
        v219[3] = v240;
        swift_bridgeObjectRelease();
        v219[4] = v220[4];
        swift_bridgeObjectRelease();
LABEL_208:
        v263 = *(int *)(v221 + 24);
        v264 = (char *)v219 + v263;
        v442 = (char *)v220 + v263;
        v265 = sub_224F675D4();
        v432 = *(_QWORD *)(v265 - 8);
        __srca = v264;
        v266 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v432 + 48);
        LODWORD(v264) = v266(v264, 1, v265);
        v267 = v266(v442, 1, v265);
        if ((_DWORD)v264)
        {
          if (!v267)
          {
            (*(void (**)(void *, char *, uint64_t))(v432 + 32))(__srca, v442, v265);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v432 + 56))(__srca, 0, 1, v265);
            goto LABEL_266;
          }
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v269 = *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64);
          v270 = __srca;
        }
        else
        {
          if (!v267)
          {
            (*(void (**)(void *, char *, uint64_t))(v432 + 40))(__srca, v442, v265);
            goto LABEL_266;
          }
          (*(void (**)(void *, uint64_t))(v432 + 8))(__srca, v265);
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v269 = *(_QWORD *)(*(_QWORD *)(v271 - 8) + 64);
          v270 = __srca;
        }
        memcpy(v270, v442, v269);
LABEL_266:
        v330 = *(int *)(v221 + 28);
        v331 = (_QWORD *)((char *)v219 + v330);
        v332 = (_QWORD *)((char *)v220 + v330);
        v334 = *v332;
        v333 = v332[1];
        *v331 = v334;
        v331[1] = v333;
        swift_bridgeObjectRelease();
        goto LABEL_267;
      }
      sub_224E2C9C0((uint64_t)(v219 + 2));
    }
    *((_OWORD *)v219 + 1) = *((_OWORD *)v220 + 1);
    v219[4] = v220[4];
    goto LABEL_208;
  }
  if (v206)
  {
    v207 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_168:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v207);
    memcpy(v200, v201, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
    goto LABEL_268;
  }
  v447 = v203;
  v209 = *((_OWORD *)v201 + 1);
  *(_OWORD *)v200 = *(_OWORD *)v201;
  *((_OWORD *)v200 + 1) = v209;
  v210 = *(int *)(v202 + 24);
  v211 = (_OWORD *)((char *)v200 + v210);
  v212 = (_OWORD *)((char *)v201 + v210);
  v213 = type metadata accessor for Identifier();
  v214 = *(_QWORD *)(v213 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v214 + 48))(v212, 1, v213))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v215 - 8) + 64));
  }
  else
  {
    v430 = v214;
    v227 = v212[1];
    *v211 = *v212;
    v211[1] = v227;
    *((_QWORD *)v211 + 4) = *((_QWORD *)v212 + 4);
    v228 = *(int *)(v213 + 24);
    v440 = (char *)v211 + v228;
    v229 = (char *)v212 + v228;
    v230 = sub_224F675D4();
    v418 = *(_QWORD *)(v230 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v418 + 48))(v229, 1, v230))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v440, v229, *(_QWORD *)(*(_QWORD *)(v231 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v418 + 32))(v440, v229, v230);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v418 + 56))(v440, 0, 1, v230);
    }
    a3 = v445;
    *(_OWORD *)((char *)v211 + *(int *)(v213 + 28)) = *(_OWORD *)((char *)v212 + *(int *)(v213 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v430 + 56))(v211, 0, 1, v213);
  }
  v203 = v447;
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v447[7])(v200, 0, 1, v202);
LABEL_268:
  v335 = a3[21];
  v336 = (_QWORD *)(a1 + v335);
  v337 = (_QWORD *)(a2 + v335);
  v338 = v204((_QWORD *)(a1 + v335), 1, v202);
  v339 = v204(v337, 1, v202);
  if (!v338)
  {
    if (v339)
    {
      sub_224DDEAA0((uint64_t)v336, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v340 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_273;
    }
    v352 = v337[1];
    *v336 = *v337;
    v336[1] = v352;
    swift_bridgeObjectRelease();
    v353 = v337[3];
    v336[2] = v337[2];
    v336[3] = v353;
    swift_bridgeObjectRelease();
    v354 = *(int *)(v202 + 24);
    v355 = (uint64_t)v336 + v354;
    v356 = (_QWORD *)((char *)v337 + v354);
    v357 = type metadata accessor for Identifier();
    v358 = *(_QWORD *)(v357 - 8);
    v359 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v358 + 48);
    v360 = v359(v355, 1, v357);
    v361 = v359((uint64_t)v356, 1, v357);
    if (v360)
    {
      if (!v361)
      {
        v370 = *((_OWORD *)v356 + 1);
        *(_OWORD *)v355 = *(_OWORD *)v356;
        *(_OWORD *)(v355 + 16) = v370;
        *(_QWORD *)(v355 + 32) = v356[4];
        v371 = *(int *)(v357 + 24);
        v372 = (void *)(v355 + v371);
        v373 = (char *)v356 + v371;
        v374 = sub_224F675D4();
        v375 = *(_QWORD *)(v374 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v375 + 48))(v373, 1, v374))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v372, v373, *(_QWORD *)(*(_QWORD *)(v376 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v375 + 32))(v372, v373, v374);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v375 + 56))(v372, 0, 1, v374);
        }
        a3 = v445;
        *(_OWORD *)(v355 + *(int *)(v357 + 28)) = *(_OWORD *)((char *)v356 + *(int *)(v357 + 28));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v358 + 56))(v355, 0, 1, v357);
        goto LABEL_290;
      }
      v362 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_284:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v362);
      v342 = *(_QWORD *)(*(_QWORD *)(v369 - 8) + 64);
      v343 = (void *)v355;
      v344 = v356;
      goto LABEL_274;
    }
    if (v361)
    {
      sub_224DDEAA0(v355, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v362 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_284;
    }
    v383 = v356[1];
    *(_QWORD *)v355 = *v356;
    *(_QWORD *)(v355 + 8) = v383;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v355 + 24) != 1)
    {
      v384 = v356[3];
      if (v384 != 1)
      {
        *(_QWORD *)(v355 + 16) = v356[2];
        *(_QWORD *)(v355 + 24) = v384;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v355 + 32) = v356[4];
        swift_bridgeObjectRelease();
LABEL_298:
        v385 = *(int *)(v357 + 24);
        v386 = (void *)(v355 + v385);
        v387 = (char *)v356 + v385;
        v388 = sub_224F675D4();
        v389 = *(_QWORD *)(v388 - 8);
        v390 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v389 + 48);
        v444 = v386;
        LODWORD(v386) = v390(v386, 1, v388);
        v391 = v390(v387, 1, v388);
        if ((_DWORD)v386)
        {
          if (!v391)
          {
            (*(void (**)(void *, char *, uint64_t))(v389 + 32))(v444, v387, v388);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v389 + 56))(v444, 0, 1, v388);
            goto LABEL_311;
          }
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v393 = *(_QWORD *)(*(_QWORD *)(v392 - 8) + 64);
          v394 = v444;
        }
        else
        {
          if (!v391)
          {
            (*(void (**)(void *, char *, uint64_t))(v389 + 40))(v444, v387, v388);
            goto LABEL_311;
          }
          (*(void (**)(void *, uint64_t))(v389 + 8))(v444, v388);
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v393 = *(_QWORD *)(*(_QWORD *)(v395 - 8) + 64);
          v394 = v444;
        }
        memcpy(v394, v387, v393);
LABEL_311:
        a3 = v445;
        v406 = *(int *)(v357 + 28);
        v407 = (_QWORD *)(v355 + v406);
        v408 = (_QWORD *)((char *)v356 + v406);
        v410 = *v408;
        v409 = v408[1];
        *v407 = v410;
        v407[1] = v409;
        swift_bridgeObjectRelease();
        goto LABEL_290;
      }
      sub_224E2C9C0(v355 + 16);
    }
    *(_OWORD *)(v355 + 16) = *((_OWORD *)v356 + 1);
    *(_QWORD *)(v355 + 32) = v356[4];
    goto LABEL_298;
  }
  if (v339)
  {
    v340 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_273:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v340);
    v342 = *(_QWORD *)(*(_QWORD *)(v341 - 8) + 64);
    v343 = v336;
    v344 = v337;
LABEL_274:
    memcpy(v343, v344, v342);
    goto LABEL_290;
  }
  v449 = v203;
  v345 = *((_OWORD *)v337 + 1);
  *(_OWORD *)v336 = *(_OWORD *)v337;
  *((_OWORD *)v336 + 1) = v345;
  v346 = *(int *)(v202 + 24);
  v347 = (_OWORD *)((char *)v336 + v346);
  v348 = (_OWORD *)((char *)v337 + v346);
  v349 = type metadata accessor for Identifier();
  v350 = *(_QWORD *)(v349 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v350 + 48))(v348, 1, v349))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v347, v348, *(_QWORD *)(*(_QWORD *)(v351 - 8) + 64));
  }
  else
  {
    v435 = v350;
    v363 = v348[1];
    *v347 = *v348;
    v347[1] = v363;
    *((_QWORD *)v347 + 4) = *((_QWORD *)v348 + 4);
    v364 = *(int *)(v349 + 24);
    v443 = (char *)v347 + v364;
    v365 = (char *)v348 + v364;
    v366 = sub_224F675D4();
    v367 = *(_QWORD *)(v366 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v367 + 48))(v365, 1, v366))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v443, v365, *(_QWORD *)(*(_QWORD *)(v368 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v367 + 32))(v443, v365, v366);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v367 + 56))(v443, 0, 1, v366);
    }
    a3 = v445;
    *(_OWORD *)((char *)v347 + *(int *)(v349 + 28)) = *(_OWORD *)((char *)v348 + *(int *)(v349 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v435 + 56))(v347, 0, 1, v349);
  }
  (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v449 + 7))(v336, 0, 1, v202);
LABEL_290:
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  swift_bridgeObjectRelease();
  v377 = a3[23];
  v378 = (_QWORD *)(a1 + v377);
  v379 = (uint64_t *)(a2 + v377);
  v381 = *v379;
  v380 = v379[1];
  *v378 = v381;
  v378[1] = v380;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Condition()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E304A8(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[13];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[14];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a3[20];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Condition()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E305C0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[13];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[14];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[20];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224E306C8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_224DDEA0C(319, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
    {
      sub_224DDEA0C(319, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelsR4.DiagnosticReport(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  void (*v67)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  void (*v84)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unsigned int (*v91)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v92)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v93)(_QWORD, _QWORD, _QWORD);
  _BYTE *__dst;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    v15 = (_QWORD *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    v10 = a2[11];
    a1[10] = a2[10];
    a1[11] = v10;
    v11 = a3[11];
    __dst = (char *)a1 + v11;
    v98 = (char *)a2 + v11;
    a1[12] = a2[12];
    v12 = type metadata accessor for FHIRDateTime();
    v100 = *(_QWORD *)(v12 - 8);
    v13 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v100 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v98, 1, v12))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v98, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      v15 = a1;
      v16 = a2;
      v17 = a3;
    }
    else
    {
      *__dst = *v98;
      *((_QWORD *)__dst + 1) = *((_QWORD *)v98 + 1);
      *((_DWORD *)__dst + 4) = *((_DWORD *)v98 + 4);
      v19 = *((_QWORD *)v98 + 7);
      v91 = v13;
      if (v19 == 1)
      {
        v20 = *(_OWORD *)(v98 + 40);
        *(_OWORD *)(__dst + 24) = *(_OWORD *)(v98 + 24);
        *(_OWORD *)(__dst + 40) = v20;
        *((_QWORD *)__dst + 7) = *((_QWORD *)v98 + 7);
      }
      else
      {
        __dst[24] = v98[24];
        *(_WORD *)(__dst + 25) = *(_WORD *)(v98 + 25);
        *(_OWORD *)(__dst + 28) = *(_OWORD *)(v98 + 28);
        *((_DWORD *)__dst + 11) = *((_DWORD *)v98 + 11);
        *((_QWORD *)__dst + 6) = *((_QWORD *)v98 + 6);
        *((_QWORD *)__dst + 7) = v19;
        swift_bridgeObjectRetain();
      }
      v15 = a1;
      v16 = a2;
      v17 = a3;
      v21 = *(int *)(v12 + 28);
      v22 = &__dst[v21];
      v23 = &v98[v21];
      v24 = sub_224F67874();
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v13 = v91;
      v27 = *(int *)(v12 + 32);
      v28 = &__dst[v27];
      v29 = &v98[v27];
      v30 = v29[1];
      *v28 = *v29;
      v28[1] = v30;
      v31 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v100 + 56);
      swift_bridgeObjectRetain();
      v31(__dst, 0, 1, v12);
    }
    v32 = v17[12];
    v33 = (char *)v15 + v32;
    v34 = (char *)v16 + v32;
    v35 = type metadata accessor for Period();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v99 = v12;
      if (v13(v34, 1, v12))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        *v33 = *v34;
        *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
        *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
        v39 = *((_QWORD *)v34 + 7);
        v92 = v13;
        if (v39 == 1)
        {
          v40 = *(_OWORD *)(v34 + 40);
          *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
          *(_OWORD *)(v33 + 40) = v40;
          *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
        }
        else
        {
          v33[24] = v34[24];
          *(_WORD *)(v33 + 25) = *(_WORD *)(v34 + 25);
          *(_OWORD *)(v33 + 28) = *(_OWORD *)(v34 + 28);
          *((_DWORD *)v33 + 11) = *((_DWORD *)v34 + 11);
          *((_QWORD *)v33 + 6) = *((_QWORD *)v34 + 6);
          *((_QWORD *)v33 + 7) = v39;
          swift_bridgeObjectRetain();
        }
        v41 = *(int *)(v12 + 28);
        v42 = &v33[v41];
        v43 = &v34[v41];
        v44 = sub_224F67874();
        v45 = *(_QWORD *)(v44 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 16))(v42, v43, v44);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
        }
        v13 = v92;
        v47 = *(int *)(v99 + 32);
        v48 = &v33[v47];
        v49 = &v34[v47];
        v50 = v49[1];
        *v48 = *v49;
        v48[1] = v50;
        v17 = a3;
        v51 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v100 + 56);
        swift_bridgeObjectRetain();
        v51(v33, 0, 1, v99);
        v12 = v99;
      }
      v52 = *(int *)(v35 + 20);
      v53 = &v33[v52];
      v54 = &v34[v52];
      if (v13(v54, 1, v12))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        *v53 = *v54;
        *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
        *((_DWORD *)v53 + 4) = *((_DWORD *)v54 + 4);
        v56 = *((_QWORD *)v54 + 7);
        v93 = v13;
        if (v56 == 1)
        {
          v57 = *(_OWORD *)(v54 + 40);
          *(_OWORD *)(v53 + 24) = *(_OWORD *)(v54 + 24);
          *(_OWORD *)(v53 + 40) = v57;
          *((_QWORD *)v53 + 7) = *((_QWORD *)v54 + 7);
        }
        else
        {
          v53[24] = v54[24];
          *(_WORD *)(v53 + 25) = *(_WORD *)(v54 + 25);
          *(_OWORD *)(v53 + 28) = *(_OWORD *)(v54 + 28);
          *((_DWORD *)v53 + 11) = *((_DWORD *)v54 + 11);
          *((_QWORD *)v53 + 6) = *((_QWORD *)v54 + 6);
          *((_QWORD *)v53 + 7) = v56;
          swift_bridgeObjectRetain();
        }
        v58 = *(int *)(v12 + 28);
        v97 = &v53[v58];
        v59 = &v54[v58];
        v60 = sub_224F67874();
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v97, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 16))(v97, v59, v60);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v97, 0, 1, v60);
        }
        v13 = v93;
        v63 = *(int *)(v99 + 32);
        v64 = &v53[v63];
        v65 = &v54[v63];
        v66 = v65[1];
        *v64 = *v65;
        v64[1] = v66;
        v17 = a3;
        v67 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v100 + 56);
        swift_bridgeObjectRetain();
        v67(v53, 0, 1, v99);
        v12 = v99;
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v68 = v17[13];
    v69 = (char *)v15 + v68;
    v70 = (char *)v16 + v68;
    if (v13((char *)v16 + v68, 1, v12))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      *v69 = *v70;
      *((_QWORD *)v69 + 1) = *((_QWORD *)v70 + 1);
      *((_DWORD *)v69 + 4) = *((_DWORD *)v70 + 4);
      v72 = *((_QWORD *)v70 + 7);
      if (v72 == 1)
      {
        v73 = *(_OWORD *)(v70 + 40);
        *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
        *(_OWORD *)(v69 + 40) = v73;
        *((_QWORD *)v69 + 7) = *((_QWORD *)v70 + 7);
      }
      else
      {
        v69[24] = v70[24];
        *(_WORD *)(v69 + 25) = *(_WORD *)(v70 + 25);
        *(_OWORD *)(v69 + 28) = *(_OWORD *)(v70 + 28);
        *((_DWORD *)v69 + 11) = *((_DWORD *)v70 + 11);
        *((_QWORD *)v69 + 6) = *((_QWORD *)v70 + 6);
        *((_QWORD *)v69 + 7) = v72;
        swift_bridgeObjectRetain();
      }
      v74 = *(int *)(v12 + 28);
      v75 = &v69[v74];
      v76 = &v70[v74];
      v77 = sub_224F67874();
      v78 = *(_QWORD *)(v77 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v78 + 16))(v75, v76, v77);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
      }
      v80 = *(int *)(v12 + 32);
      v81 = &v69[v80];
      v82 = &v70[v80];
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      v84 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v100 + 56);
      swift_bridgeObjectRetain();
      v84(v69, 0, 1, v12);
    }
    v85 = v17[15];
    *(_QWORD *)((char *)v15 + v17[14]) = *(_QWORD *)((char *)v16 + v17[14]);
    *(_QWORD *)((char *)v15 + v85) = *(_QWORD *)((char *)v16 + v85);
    v86 = v17[16];
    v87 = (_QWORD *)((char *)v15 + v86);
    v88 = (_QWORD *)((char *)v16 + v86);
    v89 = v88[1];
    *v87 = *v88;
    v87[1] = v89;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v15;
}

uint64_t destroy for ModelsR4.DiagnosticReport(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[11];
  v5 = type metadata accessor for FHIRDateTime();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(_QWORD *)(v4 + 56) != 1)
      swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 28);
    v8 = sub_224F67874();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  v10 = a1 + a2[12];
  v11 = type metadata accessor for Period();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    if (!v6(v10, 1, v5))
    {
      if (*(_QWORD *)(v10 + 56) != 1)
        swift_bridgeObjectRelease();
      v12 = v10 + *(int *)(v5 + 28);
      v13 = sub_224F67874();
      v14 = *(_QWORD *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      swift_bridgeObjectRelease();
    }
    v15 = v10 + *(int *)(v11 + 20);
    if (!v6(v15, 1, v5))
    {
      if (*(_QWORD *)(v15 + 56) != 1)
        swift_bridgeObjectRelease();
      v16 = v15 + *(int *)(v5 + 28);
      v17 = sub_224F67874();
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      swift_bridgeObjectRelease();
    }
  }
  v19 = a1 + a2[13];
  if (!v6(v19, 1, v5))
  {
    if (*(_QWORD *)(v19 + 56) != 1)
      swift_bridgeObjectRelease();
    v20 = v19 + *(int *)(v5 + 28);
    v21 = sub_224F67874();
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsR4.DiagnosticReport(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void (*v49)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  void (*v66)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  void (*v83)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unsigned int (*v90)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v91)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v92)(_QWORD, _QWORD, _QWORD);
  _BYTE *__dst;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a3[11];
  __dst = (char *)a1 + v9;
  v95 = (char *)a2 + v9;
  a1[12] = a2[12];
  v10 = type metadata accessor for FHIRDateTime();
  v97 = *(_QWORD *)(v10 - 8);
  v11 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v97 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v95, 1, v10))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v95, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    v13 = a2;
    v14 = a1;
    v15 = a3;
  }
  else
  {
    *__dst = *v95;
    *((_QWORD *)__dst + 1) = *((_QWORD *)v95 + 1);
    *((_DWORD *)__dst + 4) = *((_DWORD *)v95 + 4);
    v16 = *((_QWORD *)v95 + 7);
    v90 = v11;
    if (v16 == 1)
    {
      v17 = *(_OWORD *)(v95 + 40);
      *(_OWORD *)(__dst + 24) = *(_OWORD *)(v95 + 24);
      *(_OWORD *)(__dst + 40) = v17;
      *((_QWORD *)__dst + 7) = *((_QWORD *)v95 + 7);
    }
    else
    {
      __dst[24] = v95[24];
      *(_WORD *)(__dst + 25) = *(_WORD *)(v95 + 25);
      *(_OWORD *)(__dst + 28) = *(_OWORD *)(v95 + 28);
      *((_DWORD *)__dst + 11) = *((_DWORD *)v95 + 11);
      *((_QWORD *)__dst + 6) = *((_QWORD *)v95 + 6);
      *((_QWORD *)__dst + 7) = v16;
      swift_bridgeObjectRetain();
    }
    v13 = a2;
    v14 = a1;
    v15 = a3;
    v18 = *(int *)(v10 + 28);
    v19 = &__dst[v18];
    v20 = &v95[v18];
    v21 = sub_224F67874();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v11 = v90;
    v24 = *(int *)(v10 + 32);
    v25 = &__dst[v24];
    v26 = &v95[v24];
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v97 + 56);
    swift_bridgeObjectRetain();
    v28(__dst, 0, 1, v10);
  }
  v29 = v15[12];
  v30 = (char *)v14 + v29;
  v31 = (char *)v13 + v29;
  v32 = type metadata accessor for Period();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    if (v11(v31, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      *v30 = *v31;
      *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
      *((_DWORD *)v30 + 4) = *((_DWORD *)v31 + 4);
      v36 = *((_QWORD *)v31 + 7);
      v91 = v11;
      if (v36 == 1)
      {
        v37 = *(_OWORD *)(v31 + 40);
        *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
        *(_OWORD *)(v30 + 40) = v37;
        *((_QWORD *)v30 + 7) = *((_QWORD *)v31 + 7);
      }
      else
      {
        v30[24] = v31[24];
        *(_WORD *)(v30 + 25) = *(_WORD *)(v31 + 25);
        *(_OWORD *)(v30 + 28) = *(_OWORD *)(v31 + 28);
        *((_DWORD *)v30 + 11) = *((_DWORD *)v31 + 11);
        *((_QWORD *)v30 + 6) = *((_QWORD *)v31 + 6);
        *((_QWORD *)v30 + 7) = v36;
        swift_bridgeObjectRetain();
      }
      v38 = v10;
      v39 = *(int *)(v10 + 28);
      v40 = &v30[v39];
      v41 = &v31[v39];
      v42 = sub_224F67874();
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      v10 = v38;
      v45 = *(int *)(v38 + 32);
      v46 = &v30[v45];
      v47 = &v31[v45];
      v48 = v47[1];
      *v46 = *v47;
      v46[1] = v48;
      v49 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v97 + 56);
      swift_bridgeObjectRetain();
      v49(v30, 0, 1, v38);
      v14 = a1;
      v15 = a3;
      v11 = v91;
    }
    v50 = *(int *)(v32 + 20);
    v51 = &v30[v50];
    v52 = &v31[v50];
    if (v11(v52, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      *v51 = *v52;
      *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
      *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
      v54 = *((_QWORD *)v52 + 7);
      v92 = v11;
      if (v54 == 1)
      {
        v55 = *(_OWORD *)(v52 + 40);
        *(_OWORD *)(v51 + 24) = *(_OWORD *)(v52 + 24);
        *(_OWORD *)(v51 + 40) = v55;
        *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
      }
      else
      {
        v51[24] = v52[24];
        *(_WORD *)(v51 + 25) = *(_WORD *)(v52 + 25);
        *(_OWORD *)(v51 + 28) = *(_OWORD *)(v52 + 28);
        *((_DWORD *)v51 + 11) = *((_DWORD *)v52 + 11);
        *((_QWORD *)v51 + 6) = *((_QWORD *)v52 + 6);
        *((_QWORD *)v51 + 7) = v54;
        swift_bridgeObjectRetain();
      }
      v96 = v10;
      v56 = *(int *)(v10 + 28);
      v57 = &v51[v56];
      v58 = &v52[v56];
      v59 = sub_224F67874();
      v60 = *(_QWORD *)(v59 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 16))(v57, v58, v59);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
      }
      v11 = v92;
      v10 = v96;
      v62 = *(int *)(v96 + 32);
      v63 = &v51[v62];
      v64 = &v52[v62];
      v65 = v64[1];
      *v63 = *v64;
      v63[1] = v65;
      v66 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v97 + 56);
      swift_bridgeObjectRetain();
      v66(v51, 0, 1, v96);
      v14 = a1;
      v15 = a3;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v67 = v15[13];
  v68 = (char *)v14 + v67;
  v69 = (char *)v13 + v67;
  if (v11((char *)v13 + v67, 1, v10))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    *v68 = *v69;
    *((_QWORD *)v68 + 1) = *((_QWORD *)v69 + 1);
    *((_DWORD *)v68 + 4) = *((_DWORD *)v69 + 4);
    v71 = *((_QWORD *)v69 + 7);
    if (v71 == 1)
    {
      v72 = *(_OWORD *)(v69 + 40);
      *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
      *(_OWORD *)(v68 + 40) = v72;
      *((_QWORD *)v68 + 7) = *((_QWORD *)v69 + 7);
    }
    else
    {
      v68[24] = v69[24];
      *(_WORD *)(v68 + 25) = *(_WORD *)(v69 + 25);
      *(_OWORD *)(v68 + 28) = *(_OWORD *)(v69 + 28);
      *((_DWORD *)v68 + 11) = *((_DWORD *)v69 + 11);
      *((_QWORD *)v68 + 6) = *((_QWORD *)v69 + 6);
      *((_QWORD *)v68 + 7) = v71;
      swift_bridgeObjectRetain();
    }
    v73 = *(int *)(v10 + 28);
    v74 = &v68[v73];
    v75 = &v69[v73];
    v76 = sub_224F67874();
    v77 = *(_QWORD *)(v76 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v77 + 16))(v74, v75, v76);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
    }
    v79 = *(int *)(v10 + 32);
    v80 = &v68[v79];
    v81 = &v69[v79];
    v82 = v81[1];
    *v80 = *v81;
    v80[1] = v82;
    v83 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v97 + 56);
    swift_bridgeObjectRetain();
    v83(v68, 0, 1, v10);
  }
  v84 = v15[15];
  *(_QWORD *)((char *)v14 + v15[14]) = *(_QWORD *)((char *)v13 + v15[14]);
  *(_QWORD *)((char *)v14 + v84) = *(_QWORD *)((char *)v13 + v84);
  v85 = v15[16];
  v86 = (_QWORD *)((char *)v14 + v85);
  v87 = (_QWORD *)((char *)v13 + v85);
  v88 = v87[1];
  *v86 = *v87;
  v86[1] = v88;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v14;
}

_QWORD *assignWithCopy for ModelsR4.DiagnosticReport(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  void (*v32)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  uint64_t v43;
  size_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_BYTE *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  int v62;
  int v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  void (*v81)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  void (*v98)(_BYTE *, _QWORD, uint64_t, uint64_t);
  __int128 *v99;
  __int128 *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  void (*v114)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t (*v122)(_BYTE *, uint64_t, uint64_t);
  int v123;
  uint64_t v124;
  size_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  int v134;
  int v135;
  uint64_t (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 *v141;
  __int128 *v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  void *v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  void (*v156)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  void *v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t (*v165)(void *, uint64_t, uint64_t);
  int v166;
  uint64_t v167;
  size_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  int v177;
  int v178;
  uint64_t (*v179)(uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 *v184;
  __int128 *v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  void *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  void (*v199)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  void *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t (*v208)(void *, uint64_t, uint64_t);
  int v209;
  uint64_t v210;
  size_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  char *v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  void *v224;
  _BYTE *__src;
  _BYTE *__srca;
  void *__srcb;
  int *v228;
  int *v229;
  int *v230;
  int *v231;
  int *v232;
  int *v233;
  int *v234;
  uint64_t v235;
  void *v236;
  uint64_t (*v237)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[11];
  v7 = (uint64_t)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FHIRDateTime();
  v235 = *(_QWORD *)(v9 - 8);
  v237 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v235 + 48);
  v10 = v237(v7, 1, v9);
  v11 = v237((uint64_t)v8, 1, v9);
  if (!v10)
  {
    if (v11)
    {
      sub_224DDEAA0(v7, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    *(_BYTE *)v7 = *v8;
    *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
    *(_WORD *)(v7 + 16) = *((_WORD *)v8 + 8);
    *(_WORD *)(v7 + 18) = *((_WORD *)v8 + 9);
    v17 = (__int128 *)(v7 + 24);
    v18 = (__int128 *)(v8 + 24);
    v19 = *((_QWORD *)v8 + 7);
    v228 = a3;
    if (*(_QWORD *)(v7 + 56) == 1)
    {
      if (v19 == 1)
      {
        v20 = *v18;
        v21 = *(_OWORD *)(v8 + 40);
        *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
        *v17 = v20;
        *(_OWORD *)(v7 + 40) = v21;
      }
      else
      {
        *(_BYTE *)(v7 + 24) = v8[24];
        *(_BYTE *)(v7 + 25) = v8[25];
        *(_BYTE *)(v7 + 26) = v8[26];
        v35 = *(_OWORD *)(v8 + 28);
        *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v35;
        *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
        *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v19 == 1)
    {
      sub_224E2C9F4(v7 + 24);
      v33 = *((_QWORD *)v8 + 7);
      v34 = *(_OWORD *)(v8 + 40);
      *v17 = *v18;
      *(_OWORD *)(v7 + 40) = v34;
      *(_QWORD *)(v7 + 56) = v33;
    }
    else
    {
      *(_BYTE *)(v7 + 24) = v8[24];
      *(_BYTE *)(v7 + 25) = v8[25];
      *(_BYTE *)(v7 + 26) = v8[26];
      *(_DWORD *)(v7 + 28) = *((_DWORD *)v8 + 7);
      *(_WORD *)(v7 + 32) = *((_WORD *)v8 + 16);
      *(_WORD *)(v7 + 34) = *((_WORD *)v8 + 17);
      *(_WORD *)(v7 + 36) = *((_WORD *)v8 + 18);
      *(_WORD *)(v7 + 38) = *((_WORD *)v8 + 19);
      *(_WORD *)(v7 + 40) = *((_WORD *)v8 + 20);
      *(_WORD *)(v7 + 42) = *((_WORD *)v8 + 21);
      *(_WORD *)(v7 + 44) = *((_WORD *)v8 + 22);
      *(_WORD *)(v7 + 46) = *((_WORD *)v8 + 23);
      *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
      *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v36 = *(int *)(v9 + 28);
    v37 = (void *)(v7 + v36);
    v38 = &v8[v36];
    v39 = sub_224F67874();
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
    v223 = v37;
    LODWORD(v37) = v41(v37, 1, v39);
    v42 = v41(v38, 1, v39);
    if ((_DWORD)v37)
    {
      if (!v42)
      {
        (*(void (**)(void *, char *, uint64_t))(v40 + 16))(v223, v38, v39);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v223, 0, 1, v39);
        goto LABEL_29;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v44 = *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64);
      v45 = v223;
    }
    else
    {
      if (!v42)
      {
        (*(void (**)(void *, char *, uint64_t))(v40 + 24))(v223, v38, v39);
        goto LABEL_29;
      }
      (*(void (**)(void *, uint64_t))(v40 + 8))(v223, v39);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v44 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64);
      v45 = v223;
    }
    memcpy(v45, v38, v44);
LABEL_29:
    a3 = v228;
    v47 = *(int *)(v9 + 32);
    v48 = (_QWORD *)(v7 + v47);
    v49 = &v8[v47];
    *v48 = *(_QWORD *)v49;
    v48[1] = *((_QWORD *)v49 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  if (v11)
  {
    v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v12);
    memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_30;
  }
  *(_BYTE *)v7 = *v8;
  v14 = *((_QWORD *)v8 + 1);
  *(_DWORD *)(v7 + 16) = *((_DWORD *)v8 + 4);
  *(_QWORD *)(v7 + 8) = v14;
  if (*((_QWORD *)v8 + 7) == 1)
  {
    v15 = *(_OWORD *)(v8 + 24);
    v16 = *(_OWORD *)(v8 + 40);
    *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
    *(_OWORD *)(v7 + 24) = v15;
    *(_OWORD *)(v7 + 40) = v16;
  }
  else
  {
    *(_BYTE *)(v7 + 24) = v8[24];
    *(_BYTE *)(v7 + 25) = v8[25];
    *(_BYTE *)(v7 + 26) = v8[26];
    v22 = *(_OWORD *)(v8 + 28);
    *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
    *(_OWORD *)(v7 + 28) = v22;
    *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
    *(_QWORD *)(v7 + 56) = *((_QWORD *)v8 + 7);
    swift_bridgeObjectRetain();
  }
  v23 = *(int *)(v9 + 28);
  v24 = (void *)(v7 + v23);
  v25 = &v8[v23];
  v26 = sub_224F67874();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = *(int *)(v9 + 32);
  v30 = (_QWORD *)(v7 + v29);
  v31 = &v8[v29];
  *v30 = *(_QWORD *)v31;
  v30[1] = *((_QWORD *)v31 + 1);
  v32 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v235 + 56);
  swift_bridgeObjectRetain();
  v32(v7, 0, 1, v9);
LABEL_30:
  v50 = a3[12];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = type metadata accessor for Period();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (v57)
    {
      sub_224DDEAA0((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v58 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_35;
    }
    v60 = v237;
    v62 = v237((uint64_t)v51, 1, v9);
    v63 = v237((uint64_t)v52, 1, v9);
    if (v62)
    {
      if (v63)
      {
        v64 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_45:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v64);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        goto LABEL_84;
      }
      *v51 = *v52;
      v75 = *((_QWORD *)v52 + 1);
      *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
      *((_QWORD *)v51 + 1) = v75;
      v230 = a3;
      if (*((_QWORD *)v52 + 7) == 1)
      {
        v76 = *(_OWORD *)(v52 + 24);
        v77 = *(_OWORD *)(v52 + 40);
        *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
        *(_OWORD *)(v51 + 24) = v76;
        *(_OWORD *)(v51 + 40) = v77;
      }
      else
      {
        v51[24] = v52[24];
        v51[25] = v52[25];
        v51[26] = v52[26];
        v104 = *(_OWORD *)(v52 + 28);
        *((_DWORD *)v51 + 11) = *((_DWORD *)v52 + 11);
        *(_OWORD *)(v51 + 28) = v104;
        *((_QWORD *)v51 + 6) = *((_QWORD *)v52 + 6);
        *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
        swift_bridgeObjectRetain();
      }
      v105 = *(int *)(v9 + 28);
      v106 = &v51[v105];
      v107 = &v52[v105];
      v108 = sub_224F67874();
      v109 = *(_QWORD *)(v108 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v109 + 16))(v106, v107, v108);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
      }
      v111 = *(int *)(v9 + 32);
      v112 = &v51[v111];
      v113 = &v52[v111];
      *v112 = *v113;
      v112[1] = v113[1];
      a3 = v230;
      v114 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v235 + 56);
      swift_bridgeObjectRetain();
      v114(v51, 0, 1, v9);
      v60 = v237;
LABEL_84:
      v131 = *(int *)(v53 + 20);
      v132 = (uint64_t)&v51[v131];
      v133 = &v52[v131];
      v134 = v60(v132, 1, v9);
      v135 = v60((uint64_t)v133, 1, v9);
      if (v134)
      {
        if (!v135)
        {
          *(_BYTE *)v132 = *v133;
          v138 = *((_QWORD *)v133 + 1);
          *(_DWORD *)(v132 + 16) = *((_DWORD *)v133 + 4);
          *(_QWORD *)(v132 + 8) = v138;
          if (*((_QWORD *)v133 + 7) == 1)
          {
            v139 = *(_OWORD *)(v133 + 24);
            v140 = *(_OWORD *)(v133 + 40);
            *(_QWORD *)(v132 + 56) = *((_QWORD *)v133 + 7);
            *(_OWORD *)(v132 + 24) = v139;
            *(_OWORD *)(v132 + 40) = v140;
          }
          else
          {
            *(_BYTE *)(v132 + 24) = v133[24];
            *(_BYTE *)(v132 + 25) = v133[25];
            *(_BYTE *)(v132 + 26) = v133[26];
            v146 = *(_OWORD *)(v133 + 28);
            *(_DWORD *)(v132 + 44) = *((_DWORD *)v133 + 11);
            *(_OWORD *)(v132 + 28) = v146;
            *(_QWORD *)(v132 + 48) = *((_QWORD *)v133 + 6);
            *(_QWORD *)(v132 + 56) = *((_QWORD *)v133 + 7);
            swift_bridgeObjectRetain();
          }
          v147 = *(int *)(v9 + 28);
          v148 = (void *)(v132 + v147);
          v149 = &v133[v147];
          v150 = sub_224F67874();
          v151 = *(_QWORD *)(v150 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v151 + 16))(v148, v149, v150);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v151 + 56))(v148, 0, 1, v150);
          }
          v153 = *(int *)(v9 + 32);
          v154 = (_QWORD *)(v132 + v153);
          v155 = &v133[v153];
          *v154 = *v155;
          v154[1] = v155[1];
          v60 = v237;
          v156 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v235 + 56);
          swift_bridgeObjectRetain();
          v156(v132, 0, 1, v9);
          goto LABEL_113;
        }
        v136 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_89:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v136);
        memcpy((void *)v132, v133, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        goto LABEL_113;
      }
      if (v135)
      {
        sub_224DDEAA0(v132, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v136 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_89;
      }
      *(_BYTE *)v132 = *v133;
      *(_QWORD *)(v132 + 8) = *((_QWORD *)v133 + 1);
      *(_WORD *)(v132 + 16) = *((_WORD *)v133 + 8);
      *(_WORD *)(v132 + 18) = *((_WORD *)v133 + 9);
      v141 = (__int128 *)(v132 + 24);
      v142 = (__int128 *)(v133 + 24);
      v143 = *((_QWORD *)v133 + 7);
      v233 = a3;
      if (*(_QWORD *)(v132 + 56) == 1)
      {
        if (v143 == 1)
        {
          v144 = *v142;
          v145 = *(_OWORD *)(v133 + 40);
          *(_QWORD *)(v132 + 56) = *((_QWORD *)v133 + 7);
          *v141 = v144;
          *(_OWORD *)(v132 + 40) = v145;
        }
        else
        {
          *(_BYTE *)(v132 + 24) = v133[24];
          *(_BYTE *)(v132 + 25) = v133[25];
          *(_BYTE *)(v132 + 26) = v133[26];
          v159 = *(_OWORD *)(v133 + 28);
          *(_DWORD *)(v132 + 44) = *((_DWORD *)v133 + 11);
          *(_OWORD *)(v132 + 28) = v159;
          *(_QWORD *)(v132 + 48) = *((_QWORD *)v133 + 6);
          *(_QWORD *)(v132 + 56) = *((_QWORD *)v133 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v143 == 1)
      {
        sub_224E2C9F4(v132 + 24);
        v157 = *((_QWORD *)v133 + 7);
        v158 = *(_OWORD *)(v133 + 40);
        *v141 = *v142;
        *(_OWORD *)(v132 + 40) = v158;
        *(_QWORD *)(v132 + 56) = v157;
      }
      else
      {
        *(_BYTE *)(v132 + 24) = v133[24];
        *(_BYTE *)(v132 + 25) = v133[25];
        *(_BYTE *)(v132 + 26) = v133[26];
        *(_DWORD *)(v132 + 28) = *((_DWORD *)v133 + 7);
        *(_WORD *)(v132 + 32) = *((_WORD *)v133 + 16);
        *(_WORD *)(v132 + 34) = *((_WORD *)v133 + 17);
        *(_WORD *)(v132 + 36) = *((_WORD *)v133 + 18);
        *(_WORD *)(v132 + 38) = *((_WORD *)v133 + 19);
        *(_WORD *)(v132 + 40) = *((_WORD *)v133 + 20);
        *(_WORD *)(v132 + 42) = *((_WORD *)v133 + 21);
        *(_WORD *)(v132 + 44) = *((_WORD *)v133 + 22);
        *(_WORD *)(v132 + 46) = *((_WORD *)v133 + 23);
        *(_QWORD *)(v132 + 48) = *((_QWORD *)v133 + 6);
        *(_QWORD *)(v132 + 56) = *((_QWORD *)v133 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v160 = *(int *)(v9 + 28);
      v161 = (void *)(v132 + v160);
      v162 = &v133[v160];
      v163 = sub_224F67874();
      v164 = *(_QWORD *)(v163 - 8);
      v165 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v164 + 48);
      v224 = v161;
      LODWORD(v161) = v165(v161, 1, v163);
      v166 = v165(v162, 1, v163);
      if ((_DWORD)v161)
      {
        if (!v166)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v164 + 16))(v224, v162, v163);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v224, 0, 1, v163);
          goto LABEL_112;
        }
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v168 = *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64);
        v169 = v224;
      }
      else
      {
        if (!v166)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v164 + 24))(v224, v162, v163);
          goto LABEL_112;
        }
        (*(void (**)(void *, uint64_t))(v164 + 8))(v224, v163);
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v168 = *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64);
        v169 = v224;
      }
      memcpy(v169, v162, v168);
LABEL_112:
      a3 = v233;
      v60 = v237;
      v171 = *(int *)(v9 + 32);
      v172 = (_QWORD *)(v132 + v171);
      v173 = &v133[v171];
      *v172 = *v173;
      v172[1] = v173[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_113;
    }
    if (v63)
    {
      sub_224DDEAA0((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v64 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_45;
    }
    *v51 = *v52;
    *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
    *((_WORD *)v51 + 8) = *((_WORD *)v52 + 8);
    *((_WORD *)v51 + 9) = *((_WORD *)v52 + 9);
    v99 = (__int128 *)(v51 + 24);
    v100 = (__int128 *)(v52 + 24);
    v101 = *((_QWORD *)v52 + 7);
    v232 = a3;
    if (*((_QWORD *)v51 + 7) == 1)
    {
      if (v101 == 1)
      {
        v102 = *v100;
        v103 = *(_OWORD *)(v52 + 40);
        *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
        *v99 = v102;
        *(_OWORD *)(v51 + 40) = v103;
      }
      else
      {
        v51[24] = v52[24];
        v51[25] = v52[25];
        v51[26] = v52[26];
        v117 = *(_OWORD *)(v52 + 28);
        *((_DWORD *)v51 + 11) = *((_DWORD *)v52 + 11);
        *(_OWORD *)(v51 + 28) = v117;
        *((_QWORD *)v51 + 6) = *((_QWORD *)v52 + 6);
        *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v101 == 1)
    {
      sub_224E2C9F4((uint64_t)(v51 + 24));
      v115 = *((_QWORD *)v52 + 7);
      v116 = *(_OWORD *)(v52 + 40);
      *v99 = *v100;
      *(_OWORD *)(v51 + 40) = v116;
      *((_QWORD *)v51 + 7) = v115;
    }
    else
    {
      v51[24] = v52[24];
      v51[25] = v52[25];
      v51[26] = v52[26];
      *((_DWORD *)v51 + 7) = *((_DWORD *)v52 + 7);
      *((_WORD *)v51 + 16) = *((_WORD *)v52 + 16);
      *((_WORD *)v51 + 17) = *((_WORD *)v52 + 17);
      *((_WORD *)v51 + 18) = *((_WORD *)v52 + 18);
      *((_WORD *)v51 + 19) = *((_WORD *)v52 + 19);
      *((_WORD *)v51 + 20) = *((_WORD *)v52 + 20);
      *((_WORD *)v51 + 21) = *((_WORD *)v52 + 21);
      *((_WORD *)v51 + 22) = *((_WORD *)v52 + 22);
      *((_WORD *)v51 + 23) = *((_WORD *)v52 + 23);
      *((_QWORD *)v51 + 6) = *((_QWORD *)v52 + 6);
      *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v118 = *(int *)(v9 + 28);
    v119 = &v51[v118];
    v120 = &v52[v118];
    v121 = sub_224F67874();
    v222 = *(_QWORD *)(v121 - 8);
    v122 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v222 + 48);
    __srcb = v119;
    LODWORD(v119) = v122(v119, 1, v121);
    v123 = v122(v120, 1, v121);
    if ((_DWORD)v119)
    {
      if (!v123)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v222 + 16))(__srcb, v120, v121);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v222 + 56))(__srcb, 0, 1, v121);
        goto LABEL_83;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v125 = *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64);
      v126 = __srcb;
    }
    else
    {
      if (!v123)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v222 + 24))(__srcb, v120, v121);
        goto LABEL_83;
      }
      (*(void (**)(void *, uint64_t))(v222 + 8))(__srcb, v121);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v125 = *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64);
      v126 = __srcb;
    }
    memcpy(v126, v120, v125);
LABEL_83:
    v60 = v237;
    v128 = *(int *)(v9 + 32);
    v129 = &v51[v128];
    v130 = &v52[v128];
    *v129 = *v130;
    v129[1] = v130[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a3 = v232;
    goto LABEL_84;
  }
  if (v57)
  {
    v58 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_35:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v58);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    v60 = v237;
    goto LABEL_113;
  }
  v60 = v237;
  if (v237((uint64_t)v52, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    *v51 = *v52;
    v65 = *((_QWORD *)v52 + 1);
    *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
    *((_QWORD *)v51 + 1) = v65;
    v229 = a3;
    if (*((_QWORD *)v52 + 7) == 1)
    {
      v66 = *(_OWORD *)(v52 + 24);
      v67 = *(_OWORD *)(v52 + 40);
      *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
      *(_OWORD *)(v51 + 24) = v66;
      *(_OWORD *)(v51 + 40) = v67;
    }
    else
    {
      v51[24] = v52[24];
      v51[25] = v52[25];
      v51[26] = v52[26];
      v69 = *(_OWORD *)(v52 + 28);
      *((_DWORD *)v51 + 11) = *((_DWORD *)v52 + 11);
      *(_OWORD *)(v51 + 28) = v69;
      *((_QWORD *)v51 + 6) = *((_QWORD *)v52 + 6);
      *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
      swift_bridgeObjectRetain();
    }
    v70 = *(int *)(v9 + 28);
    __src = &v51[v70];
    v71 = &v52[v70];
    v72 = sub_224F67874();
    v73 = *(_QWORD *)(v72 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__src, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v73 + 16))(__src, v71, v72);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v73 + 56))(__src, 0, 1, v72);
    }
    v78 = *(int *)(v9 + 32);
    v79 = &v51[v78];
    v80 = &v52[v78];
    *v79 = *v80;
    v79[1] = v80[1];
    a3 = v229;
    v81 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v235 + 56);
    swift_bridgeObjectRetain();
    v81(v51, 0, 1, v9);
    v60 = v237;
  }
  v82 = *(int *)(v53 + 20);
  v83 = &v51[v82];
  v84 = &v52[v82];
  if (v60((uint64_t)v84, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
  }
  else
  {
    *v83 = *v84;
    v86 = *((_QWORD *)v84 + 1);
    *((_DWORD *)v83 + 4) = *((_DWORD *)v84 + 4);
    *((_QWORD *)v83 + 1) = v86;
    v231 = a3;
    if (*((_QWORD *)v84 + 7) == 1)
    {
      v87 = *(_OWORD *)(v84 + 24);
      v88 = *(_OWORD *)(v84 + 40);
      *((_QWORD *)v83 + 7) = *((_QWORD *)v84 + 7);
      *(_OWORD *)(v83 + 24) = v87;
      *(_OWORD *)(v83 + 40) = v88;
    }
    else
    {
      v83[24] = v84[24];
      v83[25] = v84[25];
      v83[26] = v84[26];
      v89 = *(_OWORD *)(v84 + 28);
      *((_DWORD *)v83 + 11) = *((_DWORD *)v84 + 11);
      *(_OWORD *)(v83 + 28) = v89;
      *((_QWORD *)v83 + 6) = *((_QWORD *)v84 + 6);
      *((_QWORD *)v83 + 7) = *((_QWORD *)v84 + 7);
      swift_bridgeObjectRetain();
    }
    v221 = v9;
    v90 = *(int *)(v9 + 28);
    __srca = &v83[v90];
    v91 = &v84[v90];
    v92 = sub_224F67874();
    v93 = *(_QWORD *)(v92 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__srca, v91, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 16))(__srca, v91, v92);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v93 + 56))(__srca, 0, 1, v92);
    }
    v60 = v237;
    v9 = v221;
    v95 = *(int *)(v221 + 32);
    v96 = &v83[v95];
    v97 = &v84[v95];
    *v96 = *v97;
    v96[1] = v97[1];
    a3 = v231;
    v98 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v235 + 56);
    swift_bridgeObjectRetain();
    v98(v83, 0, 1, v221);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_113:
  v174 = a3[13];
  v175 = (uint64_t)a1 + v174;
  v176 = (char *)a2 + v174;
  v177 = v60((uint64_t)a1 + v174, 1, v9);
  v178 = v60((uint64_t)v176, 1, v9);
  if (!v177)
  {
    if (v178)
    {
      sub_224DDEAA0(v175, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v179 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_118;
    }
    *(_BYTE *)v175 = *v176;
    *(_QWORD *)(v175 + 8) = *((_QWORD *)v176 + 1);
    *(_WORD *)(v175 + 16) = *((_WORD *)v176 + 8);
    *(_WORD *)(v175 + 18) = *((_WORD *)v176 + 9);
    v184 = (__int128 *)(v175 + 24);
    v185 = (__int128 *)(v176 + 24);
    v186 = *((_QWORD *)v176 + 7);
    v234 = a3;
    if (*(_QWORD *)(v175 + 56) == 1)
    {
      if (v186 == 1)
      {
        v187 = *v185;
        v188 = *(_OWORD *)(v176 + 40);
        *(_QWORD *)(v175 + 56) = *((_QWORD *)v176 + 7);
        *v184 = v187;
        *(_OWORD *)(v175 + 40) = v188;
      }
      else
      {
        *(_BYTE *)(v175 + 24) = v176[24];
        *(_BYTE *)(v175 + 25) = v176[25];
        *(_BYTE *)(v175 + 26) = v176[26];
        v202 = *(_OWORD *)(v176 + 28);
        *(_DWORD *)(v175 + 44) = *((_DWORD *)v176 + 11);
        *(_OWORD *)(v175 + 28) = v202;
        *(_QWORD *)(v175 + 48) = *((_QWORD *)v176 + 6);
        *(_QWORD *)(v175 + 56) = *((_QWORD *)v176 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v186 == 1)
    {
      sub_224E2C9F4(v175 + 24);
      v200 = *((_QWORD *)v176 + 7);
      v201 = *(_OWORD *)(v176 + 40);
      *v184 = *v185;
      *(_OWORD *)(v175 + 40) = v201;
      *(_QWORD *)(v175 + 56) = v200;
    }
    else
    {
      *(_BYTE *)(v175 + 24) = v176[24];
      *(_BYTE *)(v175 + 25) = v176[25];
      *(_BYTE *)(v175 + 26) = v176[26];
      *(_DWORD *)(v175 + 28) = *((_DWORD *)v176 + 7);
      *(_WORD *)(v175 + 32) = *((_WORD *)v176 + 16);
      *(_WORD *)(v175 + 34) = *((_WORD *)v176 + 17);
      *(_WORD *)(v175 + 36) = *((_WORD *)v176 + 18);
      *(_WORD *)(v175 + 38) = *((_WORD *)v176 + 19);
      *(_WORD *)(v175 + 40) = *((_WORD *)v176 + 20);
      *(_WORD *)(v175 + 42) = *((_WORD *)v176 + 21);
      *(_WORD *)(v175 + 44) = *((_WORD *)v176 + 22);
      *(_WORD *)(v175 + 46) = *((_WORD *)v176 + 23);
      *(_QWORD *)(v175 + 48) = *((_QWORD *)v176 + 6);
      *(_QWORD *)(v175 + 56) = *((_QWORD *)v176 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v203 = *(int *)(v9 + 28);
    v204 = (void *)(v175 + v203);
    v205 = &v176[v203];
    v206 = sub_224F67874();
    v207 = *(_QWORD *)(v206 - 8);
    v208 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v207 + 48);
    v236 = v204;
    LODWORD(v204) = v208(v204, 1, v206);
    v209 = v208(v205, 1, v206);
    if ((_DWORD)v204)
    {
      if (!v209)
      {
        (*(void (**)(void *, char *, uint64_t))(v207 + 16))(v236, v205, v206);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v236, 0, 1, v206);
        goto LABEL_141;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v211 = *(_QWORD *)(*(_QWORD *)(v210 - 8) + 64);
      v212 = v236;
    }
    else
    {
      if (!v209)
      {
        (*(void (**)(void *, char *, uint64_t))(v207 + 24))(v236, v205, v206);
        goto LABEL_141;
      }
      (*(void (**)(void *, uint64_t))(v207 + 8))(v236, v206);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v211 = *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64);
      v212 = v236;
    }
    memcpy(v212, v205, v211);
LABEL_141:
    a3 = v234;
    v214 = *(int *)(v9 + 32);
    v215 = (_QWORD *)(v175 + v214);
    v216 = &v176[v214];
    *v215 = *(_QWORD *)v216;
    v215[1] = *((_QWORD *)v216 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_142;
  }
  if (v178)
  {
    v179 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_118:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v179);
    memcpy((void *)v175, v176, *(_QWORD *)(*(_QWORD *)(v180 - 8) + 64));
    goto LABEL_142;
  }
  *(_BYTE *)v175 = *v176;
  v181 = *((_QWORD *)v176 + 1);
  *(_DWORD *)(v175 + 16) = *((_DWORD *)v176 + 4);
  *(_QWORD *)(v175 + 8) = v181;
  if (*((_QWORD *)v176 + 7) == 1)
  {
    v182 = *(_OWORD *)(v176 + 24);
    v183 = *(_OWORD *)(v176 + 40);
    *(_QWORD *)(v175 + 56) = *((_QWORD *)v176 + 7);
    *(_OWORD *)(v175 + 24) = v182;
    *(_OWORD *)(v175 + 40) = v183;
  }
  else
  {
    *(_BYTE *)(v175 + 24) = v176[24];
    *(_BYTE *)(v175 + 25) = v176[25];
    *(_BYTE *)(v175 + 26) = v176[26];
    v189 = *(_OWORD *)(v176 + 28);
    *(_DWORD *)(v175 + 44) = *((_DWORD *)v176 + 11);
    *(_OWORD *)(v175 + 28) = v189;
    *(_QWORD *)(v175 + 48) = *((_QWORD *)v176 + 6);
    *(_QWORD *)(v175 + 56) = *((_QWORD *)v176 + 7);
    swift_bridgeObjectRetain();
  }
  v190 = *(int *)(v9 + 28);
  v191 = (void *)(v175 + v190);
  v192 = &v176[v190];
  v193 = sub_224F67874();
  v194 = *(_QWORD *)(v193 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v194 + 48))(v192, 1, v193))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v194 + 16))(v191, v192, v193);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v194 + 56))(v191, 0, 1, v193);
  }
  v196 = *(int *)(v9 + 32);
  v197 = (_QWORD *)(v175 + v196);
  v198 = &v176[v196];
  *v197 = *(_QWORD *)v198;
  v197[1] = *((_QWORD *)v198 + 1);
  v199 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v235 + 56);
  swift_bridgeObjectRetain();
  v199(v175, 0, 1, v9);
LABEL_142:
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v217 = a3[16];
  v218 = (_QWORD *)((char *)a1 + v217);
  v219 = (_QWORD *)((char *)a2 + v217);
  *v218 = *v219;
  v218[1] = v219[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsR4.DiagnosticReport(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  _BYTE *__dst;
  _BYTE *__dsta;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v57)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v58)(_QWORD, _QWORD, _QWORD);
  uint64_t v59;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v7 = a3[11];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v10 = type metadata accessor for FHIRDateTime();
  v59 = *(_QWORD *)(v10 - 8);
  v11 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v59 + 48);
  if (v11(v9, 1, v10))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v56 = v11;
    *v8 = *v9;
    *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
    *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *((_QWORD *)v8 + 7) = *((_QWORD *)v9 + 7);
    v13 = *(int *)(v10 + 28);
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = sub_224F67874();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(_OWORD *)&v8[*(int *)(v10 + 32)] = *(_OWORD *)&v9[*(int *)(v10 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v8, 0, 1, v10);
    v11 = v56;
  }
  v19 = a3[12];
  v20 = (_BYTE *)(a1 + v19);
  v21 = (_BYTE *)(a2 + v19);
  v22 = type metadata accessor for Period();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    if (v11(v21, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v54 = v23;
      v57 = v11;
      *v20 = *v21;
      *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
      *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
      *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
      v26 = *(int *)(v10 + 28);
      __dst = &v20[v26];
      v27 = &v21[v26];
      v28 = sub_224F67874();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32))(__dst, v27, v28);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
      }
      *(_OWORD *)&v20[*(int *)(v10 + 32)] = *(_OWORD *)&v21[*(int *)(v10 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v20, 0, 1, v10);
      v23 = v54;
      v11 = v57;
    }
    v31 = *(int *)(v22 + 20);
    v32 = &v20[v31];
    v33 = &v21[v31];
    if (v11(v33, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v55 = v23;
      v58 = v11;
      *v32 = *v33;
      *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
      *((_DWORD *)v32 + 4) = *((_DWORD *)v33 + 4);
      *(_OWORD *)(v32 + 24) = *(_OWORD *)(v33 + 24);
      *(_OWORD *)(v32 + 40) = *(_OWORD *)(v33 + 40);
      *((_QWORD *)v32 + 7) = *((_QWORD *)v33 + 7);
      v35 = *(int *)(v10 + 28);
      __dsta = &v32[v35];
      v36 = &v33[v35];
      v37 = sub_224F67874();
      v51 = *(_QWORD *)(v37 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v51 + 48))(v36, 1, v37))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v51 + 32))(__dsta, v36, v37);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v51 + 56))(__dsta, 0, 1, v37);
      }
      v23 = v55;
      *(_OWORD *)&v32[*(int *)(v10 + 32)] = *(_OWORD *)&v33[*(int *)(v10 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v32, 0, 1, v10);
      v11 = v58;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v39 = a3[13];
  v40 = (_BYTE *)(a1 + v39);
  v41 = (_BYTE *)(a2 + v39);
  if (v11(a2 + v39, 1, v10))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    *v40 = *v41;
    *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
    *((_DWORD *)v40 + 4) = *((_DWORD *)v41 + 4);
    *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
    *(_OWORD *)(v40 + 40) = *(_OWORD *)(v41 + 40);
    *((_QWORD *)v40 + 7) = *((_QWORD *)v41 + 7);
    v43 = *(int *)(v10 + 28);
    v44 = &v40[v43];
    v45 = &v41[v43];
    v46 = sub_224F67874();
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    *(_OWORD *)&v40[*(int *)(v10 + 32)] = *(_OWORD *)&v41[*(int *)(v10 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v40, 0, 1, v10);
  }
  v49 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v49) = *(_QWORD *)(a2 + v49);
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

_QWORD *assignWithTake for ModelsR4.DiagnosticReport(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_BYTE *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  int v55;
  int v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t (*v84)(_BYTE *, uint64_t, uint64_t);
  int v85;
  uint64_t v86;
  size_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  int v98;
  int v99;
  uint64_t (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  int v106;
  uint64_t (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  void *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(void *, uint64_t, uint64_t);
  int v123;
  uint64_t v124;
  size_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  void *v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t (*v152)(void *, uint64_t, uint64_t);
  int v153;
  uint64_t v154;
  size_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void *v166;
  _BYTE *__src;
  _BYTE *__srca;
  void *__srcb;
  int *v170;
  int *v171;
  int *v172;
  int *v173;
  int *v174;
  int *v175;
  int *v176;
  uint64_t v177;
  void *v178;
  uint64_t (*v179)(uint64_t, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  v10 = a2[12];
  a1[11] = a2[11];
  a1[12] = v10;
  swift_bridgeObjectRelease();
  v11 = a3[11];
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for FHIRDateTime();
  v177 = *(_QWORD *)(v14 - 8);
  v179 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v177 + 48);
  v15 = v179(v12, 1, v14);
  v16 = v179((uint64_t)v13, 1, v14);
  if (!v15)
  {
    if (v16)
    {
      sub_224DDEAA0(v12, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    *(_BYTE *)v12 = *v13;
    *(_QWORD *)(v12 + 8) = *((_QWORD *)v13 + 1);
    *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
    v170 = a3;
    if (*(_QWORD *)(v12 + 56) != 1)
    {
      v25 = *((_QWORD *)v13 + 7);
      if (v25 != 1)
      {
        *(_BYTE *)(v12 + 24) = v13[24];
        *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
        *(_DWORD *)(v12 + 28) = *((_DWORD *)v13 + 7);
        *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
        *(_QWORD *)(v12 + 48) = *((_QWORD *)v13 + 6);
        *(_QWORD *)(v12 + 56) = v25;
        swift_bridgeObjectRelease();
LABEL_16:
        v27 = *(int *)(v14 + 28);
        v28 = (void *)(v12 + v27);
        v29 = &v13[v27];
        v30 = sub_224F67874();
        v31 = *(_QWORD *)(v30 - 8);
        v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
        v165 = v28;
        LODWORD(v28) = v32(v28, 1, v30);
        v33 = v32(v29, 1, v30);
        if ((_DWORD)v28)
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v31 + 32))(v165, v29, v30);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v165, 0, 1, v30);
            goto LABEL_24;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v35 = *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64);
          v36 = v165;
        }
        else
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v31 + 40))(v165, v29, v30);
            goto LABEL_24;
          }
          (*(void (**)(void *, uint64_t))(v31 + 8))(v165, v30);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v35 = *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64);
          v36 = v165;
        }
        memcpy(v36, v29, v35);
LABEL_24:
        a3 = v170;
        v38 = *(int *)(v14 + 32);
        v39 = (_QWORD *)(v12 + v38);
        v40 = &v13[v38];
        v42 = *(_QWORD *)v40;
        v41 = *((_QWORD *)v40 + 1);
        *v39 = v42;
        v39[1] = v41;
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      sub_224E2C9F4(v12 + 24);
    }
    v26 = *(_OWORD *)(v13 + 40);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = v26;
    *(_QWORD *)(v12 + 56) = *((_QWORD *)v13 + 7);
    goto LABEL_16;
  }
  if (v16)
  {
    v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v17);
    memcpy((void *)v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_25;
  }
  *(_BYTE *)v12 = *v13;
  *(_QWORD *)(v12 + 8) = *((_QWORD *)v13 + 1);
  *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *(_QWORD *)(v12 + 56) = *((_QWORD *)v13 + 7);
  v19 = *(int *)(v14 + 28);
  v20 = (void *)(v12 + v19);
  v21 = &v13[v19];
  v22 = sub_224F67874();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *(_OWORD *)(v12 + *(int *)(v14 + 32)) = *(_OWORD *)&v13[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v177 + 56))(v12, 0, 1, v14);
LABEL_25:
  v43 = a3[12];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = type metadata accessor for Period();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (v50)
    {
      sub_224DDEAA0((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v51 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_30;
    }
    v53 = v179;
    v55 = v179((uint64_t)v44, 1, v14);
    v56 = v179((uint64_t)v45, 1, v14);
    if (v55)
    {
      if (v56)
      {
        v57 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_41:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v57);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        goto LABEL_70;
      }
      v172 = a3;
      *v44 = *v45;
      *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
      *((_DWORD *)v44 + 4) = *((_DWORD *)v45 + 4);
      *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
      *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
      *((_QWORD *)v44 + 7) = *((_QWORD *)v45 + 7);
      v64 = *(int *)(v14 + 28);
      v65 = &v44[v64];
      v66 = &v45[v64];
      v67 = sub_224F67874();
      v68 = *(_QWORD *)(v67 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 32))(v65, v66, v67);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
      }
      *(_OWORD *)&v44[*(int *)(v14 + 32)] = *(_OWORD *)&v45[*(int *)(v14 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v177 + 56))(v44, 0, 1, v14);
      a3 = v172;
      v53 = v179;
LABEL_70:
      v95 = *(int *)(v46 + 20);
      v96 = (uint64_t)&v44[v95];
      v97 = &v45[v95];
      v98 = v53(v96, 1, v14);
      v99 = v53((uint64_t)v97, 1, v14);
      if (v98)
      {
        if (!v99)
        {
          *(_BYTE *)v96 = *v97;
          *(_QWORD *)(v96 + 8) = *((_QWORD *)v97 + 1);
          *(_DWORD *)(v96 + 16) = *((_DWORD *)v97 + 4);
          *(_OWORD *)(v96 + 24) = *(_OWORD *)(v97 + 24);
          *(_OWORD *)(v96 + 40) = *(_OWORD *)(v97 + 40);
          *(_QWORD *)(v96 + 56) = *((_QWORD *)v97 + 7);
          v128 = *(int *)(v14 + 28);
          v129 = (void *)(v96 + v128);
          v130 = &v97[v128];
          v131 = sub_224F67874();
          v132 = *(_QWORD *)(v131 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v132 + 32))(v129, v130, v131);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
          }
          *(_OWORD *)(v96 + *(int *)(v14 + 32)) = *(_OWORD *)&v97[*(int *)(v14 + 32)];
          v53 = v179;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v177 + 56))(v96, 0, 1, v14);
          goto LABEL_76;
        }
        v100 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_75:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v100);
        memcpy((void *)v96, v97, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        goto LABEL_76;
      }
      if (v99)
      {
        sub_224DDEAA0(v96, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v100 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_75;
      }
      *(_BYTE *)v96 = *v97;
      *(_QWORD *)(v96 + 8) = *((_QWORD *)v97 + 1);
      *(_DWORD *)(v96 + 16) = *((_DWORD *)v97 + 4);
      v176 = a3;
      if (*(_QWORD *)(v96 + 56) != 1)
      {
        v134 = *((_QWORD *)v97 + 7);
        if (v134 != 1)
        {
          *(_BYTE *)(v96 + 24) = v97[24];
          *(_WORD *)(v96 + 25) = *(_WORD *)(v97 + 25);
          *(_DWORD *)(v96 + 28) = *((_DWORD *)v97 + 7);
          *(_OWORD *)(v96 + 32) = *((_OWORD *)v97 + 2);
          *(_QWORD *)(v96 + 48) = *((_QWORD *)v97 + 6);
          *(_QWORD *)(v96 + 56) = v134;
          swift_bridgeObjectRelease();
LABEL_110:
          v147 = *(int *)(v14 + 28);
          v148 = (void *)(v96 + v147);
          v149 = &v97[v147];
          v150 = sub_224F67874();
          v151 = *(_QWORD *)(v150 - 8);
          v152 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v151 + 48);
          v166 = v148;
          LODWORD(v148) = v152(v148, 1, v150);
          v153 = v152(v149, 1, v150);
          if ((_DWORD)v148)
          {
            if (!v153)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v151 + 32))(v166, v149, v150);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v151 + 56))(v166, 0, 1, v150);
              goto LABEL_118;
            }
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v155 = *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64);
            v156 = v166;
          }
          else
          {
            if (!v153)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v151 + 40))(v166, v149, v150);
              goto LABEL_118;
            }
            (*(void (**)(void *, uint64_t))(v151 + 8))(v166, v150);
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v155 = *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64);
            v156 = v166;
          }
          memcpy(v156, v149, v155);
LABEL_118:
          a3 = v176;
          v158 = *(int *)(v14 + 32);
          v159 = (_QWORD *)(v96 + v158);
          v160 = (uint64_t *)&v97[v158];
          v162 = *v160;
          v161 = v160[1];
          *v159 = v162;
          v159[1] = v161;
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
        sub_224E2C9F4(v96 + 24);
      }
      v135 = *(_OWORD *)(v97 + 40);
      *(_OWORD *)(v96 + 24) = *(_OWORD *)(v97 + 24);
      *(_OWORD *)(v96 + 40) = v135;
      *(_QWORD *)(v96 + 56) = *((_QWORD *)v97 + 7);
      goto LABEL_110;
    }
    if (v56)
    {
      sub_224DDEAA0((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v57 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_41;
    }
    *v44 = *v45;
    *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
    *((_DWORD *)v44 + 4) = *((_DWORD *)v45 + 4);
    v174 = a3;
    if (*((_QWORD *)v44 + 7) != 1)
    {
      v78 = *((_QWORD *)v45 + 7);
      if (v78 != 1)
      {
        v44[24] = v45[24];
        *(_WORD *)(v44 + 25) = *(_WORD *)(v45 + 25);
        *((_DWORD *)v44 + 7) = *((_DWORD *)v45 + 7);
        *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
        *((_QWORD *)v44 + 6) = *((_QWORD *)v45 + 6);
        *((_QWORD *)v44 + 7) = v78;
        swift_bridgeObjectRelease();
LABEL_61:
        v80 = *(int *)(v14 + 28);
        v81 = &v44[v80];
        v82 = &v45[v80];
        v83 = sub_224F67874();
        v164 = *(_QWORD *)(v83 - 8);
        v84 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v164 + 48);
        __srcb = v81;
        LODWORD(v81) = v84(v81, 1, v83);
        v85 = v84(v82, 1, v83);
        if ((_DWORD)v81)
        {
          if (!v85)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v164 + 32))(__srcb, v82, v83);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v164 + 56))(__srcb, 0, 1, v83);
            goto LABEL_69;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v87 = *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64);
          v88 = __srcb;
        }
        else
        {
          if (!v85)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v164 + 40))(__srcb, v82, v83);
            goto LABEL_69;
          }
          (*(void (**)(void *, uint64_t))(v164 + 8))(__srcb, v83);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v87 = *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64);
          v88 = __srcb;
        }
        memcpy(v88, v82, v87);
LABEL_69:
        v53 = v179;
        v90 = *(int *)(v14 + 32);
        v91 = &v44[v90];
        v92 = (uint64_t *)&v45[v90];
        v94 = *v92;
        v93 = v92[1];
        *v91 = v94;
        v91[1] = v93;
        swift_bridgeObjectRelease();
        a3 = v174;
        goto LABEL_70;
      }
      sub_224E2C9F4((uint64_t)(v44 + 24));
    }
    v79 = *(_OWORD *)(v45 + 40);
    *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
    *(_OWORD *)(v44 + 40) = v79;
    *((_QWORD *)v44 + 7) = *((_QWORD *)v45 + 7);
    goto LABEL_61;
  }
  if (v50)
  {
    v51 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_30:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v51);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
LABEL_31:
    v53 = v179;
    goto LABEL_76;
  }
  v53 = v179;
  if (v179((uint64_t)v45, 1, v14))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    *v44 = *v45;
    *((_QWORD *)v44 + 1) = *((_QWORD *)v45 + 1);
    *((_DWORD *)v44 + 4) = *((_DWORD *)v45 + 4);
    *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
    *(_OWORD *)(v44 + 40) = *(_OWORD *)(v45 + 40);
    *((_QWORD *)v44 + 7) = *((_QWORD *)v45 + 7);
    v58 = *(int *)(v14 + 28);
    __src = &v44[v58];
    v171 = a3;
    v59 = &v45[v58];
    v60 = sub_224F67874();
    v61 = *(_QWORD *)(v60 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__src, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 32))(__src, v59, v60);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(__src, 0, 1, v60);
    }
    *(_OWORD *)&v44[*(int *)(v14 + 32)] = *(_OWORD *)&v45[*(int *)(v14 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v177 + 56))(v44, 0, 1, v14);
    a3 = v171;
    v53 = v179;
  }
  v70 = *(int *)(v46 + 20);
  v71 = &v44[v70];
  v72 = &v45[v70];
  if (v53((uint64_t)v72, 1, v14))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    *v71 = *v72;
    *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
    *((_DWORD *)v71 + 4) = *((_DWORD *)v72 + 4);
    *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
    *(_OWORD *)(v71 + 40) = *(_OWORD *)(v72 + 40);
    *((_QWORD *)v71 + 7) = *((_QWORD *)v72 + 7);
    v74 = *(int *)(v14 + 28);
    __srca = &v71[v74];
    v173 = a3;
    v75 = &v72[v74];
    v76 = sub_224F67874();
    v163 = *(_QWORD *)(v76 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v163 + 48))(v75, 1, v76))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__srca, v75, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v163 + 32))(__srca, v75, v76);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v163 + 56))(__srca, 0, 1, v76);
    }
    *(_OWORD *)&v71[*(int *)(v14 + 32)] = *(_OWORD *)&v72[*(int *)(v14 + 32)];
    a3 = v173;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v177 + 56))(v71, 0, 1, v14);
    v53 = v179;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
LABEL_76:
  v102 = a3[13];
  v103 = (uint64_t)a1 + v102;
  v104 = (char *)a2 + v102;
  v105 = v53((uint64_t)a1 + v102, 1, v14);
  v106 = v53((uint64_t)v104, 1, v14);
  if (!v105)
  {
    if (v106)
    {
      sub_224DDEAA0(v103, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v107 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_81;
    }
    *(_BYTE *)v103 = *v104;
    *(_QWORD *)(v103 + 8) = *((_QWORD *)v104 + 1);
    *(_DWORD *)(v103 + 16) = *((_DWORD *)v104 + 4);
    v175 = a3;
    if (*(_QWORD *)(v103 + 56) != 1)
    {
      v115 = *((_QWORD *)v104 + 7);
      if (v115 != 1)
      {
        *(_BYTE *)(v103 + 24) = v104[24];
        *(_WORD *)(v103 + 25) = *(_WORD *)(v104 + 25);
        *(_DWORD *)(v103 + 28) = *((_DWORD *)v104 + 7);
        *(_OWORD *)(v103 + 32) = *((_OWORD *)v104 + 2);
        *(_QWORD *)(v103 + 48) = *((_QWORD *)v104 + 6);
        *(_QWORD *)(v103 + 56) = v115;
        swift_bridgeObjectRelease();
LABEL_91:
        v117 = *(int *)(v14 + 28);
        v118 = (void *)(v103 + v117);
        v119 = &v104[v117];
        v120 = sub_224F67874();
        v121 = *(_QWORD *)(v120 - 8);
        v122 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v121 + 48);
        v178 = v118;
        LODWORD(v118) = v122(v118, 1, v120);
        v123 = v122(v119, 1, v120);
        if ((_DWORD)v118)
        {
          if (!v123)
          {
            (*(void (**)(void *, char *, uint64_t))(v121 + 32))(v178, v119, v120);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v178, 0, 1, v120);
            goto LABEL_105;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v125 = *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64);
          v126 = v178;
        }
        else
        {
          if (!v123)
          {
            (*(void (**)(void *, char *, uint64_t))(v121 + 40))(v178, v119, v120);
            goto LABEL_105;
          }
          (*(void (**)(void *, uint64_t))(v121 + 8))(v178, v120);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v125 = *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64);
          v126 = v178;
        }
        memcpy(v126, v119, v125);
LABEL_105:
        a3 = v175;
        v136 = *(int *)(v14 + 32);
        v137 = (_QWORD *)(v103 + v136);
        v138 = &v104[v136];
        v140 = *(_QWORD *)v138;
        v139 = *((_QWORD *)v138 + 1);
        *v137 = v140;
        v137[1] = v139;
        swift_bridgeObjectRelease();
        goto LABEL_106;
      }
      sub_224E2C9F4(v103 + 24);
    }
    v116 = *(_OWORD *)(v104 + 40);
    *(_OWORD *)(v103 + 24) = *(_OWORD *)(v104 + 24);
    *(_OWORD *)(v103 + 40) = v116;
    *(_QWORD *)(v103 + 56) = *((_QWORD *)v104 + 7);
    goto LABEL_91;
  }
  if (v106)
  {
    v107 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_81:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v107);
    memcpy((void *)v103, v104, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    goto LABEL_106;
  }
  *(_BYTE *)v103 = *v104;
  *(_QWORD *)(v103 + 8) = *((_QWORD *)v104 + 1);
  *(_DWORD *)(v103 + 16) = *((_DWORD *)v104 + 4);
  *(_OWORD *)(v103 + 24) = *(_OWORD *)(v104 + 24);
  *(_OWORD *)(v103 + 40) = *(_OWORD *)(v104 + 40);
  *(_QWORD *)(v103 + 56) = *((_QWORD *)v104 + 7);
  v109 = *(int *)(v14 + 28);
  v110 = (void *)(v103 + v109);
  v111 = &v104[v109];
  v112 = sub_224F67874();
  v113 = *(_QWORD *)(v112 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v113 + 32))(v110, v111, v112);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
  }
  *(_OWORD *)(v103 + *(int *)(v14 + 32)) = *(_OWORD *)&v104[*(int *)(v14 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v177 + 56))(v103, 0, 1, v14);
LABEL_106:
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  v141 = a3[16];
  v142 = (_QWORD *)((char *)a1 + v141);
  v143 = (_QWORD *)((char *)a2 + v141);
  v145 = *v143;
  v144 = v143[1];
  *v142 = v145;
  v142[1] = v144;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.DiagnosticReport()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E34B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 44);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.DiagnosticReport()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E34C74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224E34D40()
{
  unint64_t v0;
  unint64_t v1;

  sub_224DDEA0C(319, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelsR4.DocumentReference(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int (*v23)(_BYTE *, uint64_t, uint64_t);
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  __int128 v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  void (*v41)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(_QWORD *, uint64_t, uint64_t);
  uint64_t v53;
  int *v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  void (*v76)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  void (*v92)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v98;
  _BYTE *__src;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unsigned int (*__dst)(_BYTE *, uint64_t, uint64_t);
  _BYTE *__dsta;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  int *v109;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1)
      swift_bridgeObjectRetain();
    v10 = a2[5];
    v11 = a2[6];
    a1[4] = v9;
    a1[5] = v10;
    v12 = a2[7];
    v13 = a2[8];
    a1[6] = v11;
    a1[7] = v12;
    v14 = a2[9];
    v15 = a2[10];
    a1[8] = v13;
    a1[9] = v14;
    v16 = a2[11];
    v17 = a2[12];
    a1[10] = v15;
    a1[11] = v16;
    v18 = a3[11];
    v19 = a2;
    v20 = (char *)a1 + v18;
    v107 = v19;
    v109 = a3;
    v21 = (char *)v19 + v18;
    a1[12] = v17;
    v22 = type metadata accessor for FHIRDateTime();
    v106 = *(_QWORD *)(v22 - 8);
    v23 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v106 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dst = v23;
    v103 = v22;
    if (v23(v21, 1, v22))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      v26 = v107;
      v25 = v109;
    }
    else
    {
      *v20 = *v21;
      *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
      *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
      v28 = *((_QWORD *)v21 + 7);
      v29 = v20;
      if (v28 == 1)
      {
        v30 = *(_OWORD *)(v21 + 40);
        *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
        *(_OWORD *)(v20 + 40) = v30;
        *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
      }
      else
      {
        v20[24] = v21[24];
        *(_WORD *)(v20 + 25) = *(_WORD *)(v21 + 25);
        *(_OWORD *)(v20 + 28) = *(_OWORD *)(v21 + 28);
        *((_DWORD *)v20 + 11) = *((_DWORD *)v21 + 11);
        *((_QWORD *)v20 + 6) = *((_QWORD *)v21 + 6);
        *((_QWORD *)v20 + 7) = v28;
        swift_bridgeObjectRetain();
      }
      v26 = v107;
      v31 = *(int *)(v22 + 28);
      v32 = &v29[v31];
      v33 = &v21[v31];
      v34 = sub_224F67874();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 16))(v32, v33, v34);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v37 = *(int *)(v22 + 32);
      v38 = &v29[v37];
      v39 = &v21[v37];
      v40 = v39[1];
      *v38 = *v39;
      v38[1] = v40;
      v41 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v106 + 56);
      swift_bridgeObjectRetain();
      v41(v29, 0, 1, v22);
      v25 = v109;
    }
    v42 = v25[12];
    v43 = v25[13];
    v44 = (_QWORD *)((char *)a1 + v42);
    v45 = (_QWORD *)((char *)v26 + v42);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    *(_QWORD *)((char *)a1 + v43) = *(_QWORD *)((char *)v26 + v43);
    v47 = v25[15];
    *(_QWORD *)((char *)a1 + v25[14]) = *(_QWORD *)((char *)v26 + v25[14]);
    v48 = (_QWORD *)((char *)a1 + v47);
    v49 = (_QWORD *)((char *)v26 + v47);
    v50 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v51 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v52(v49, 1, v50))
    {
      sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      v54 = v109;
    }
    else
    {
      v108 = v51;
      *v48 = *v49;
      v55 = *(int *)(v50 + 20);
      v56 = (char *)v48 + v55;
      v57 = (char *)v49 + v55;
      v58 = type metadata accessor for Period();
      v59 = *(_QWORD *)(v58 - 8);
      v60 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v59 + 48);
      swift_bridgeObjectRetain();
      v61 = v48;
      if (v60(v57, 1, v58))
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        v63 = v108;
        v54 = v109;
      }
      else
      {
        v102 = v48;
        if (__dst(v57, 1, v103))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          *v56 = *v57;
          *((_QWORD *)v56 + 1) = *((_QWORD *)v57 + 1);
          *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
          v65 = *((_QWORD *)v57 + 7);
          v100 = v59;
          if (v65 == 1)
          {
            v66 = *(_OWORD *)(v57 + 40);
            *(_OWORD *)(v56 + 24) = *(_OWORD *)(v57 + 24);
            *(_OWORD *)(v56 + 40) = v66;
            *((_QWORD *)v56 + 7) = *((_QWORD *)v57 + 7);
          }
          else
          {
            v56[24] = v57[24];
            *(_WORD *)(v56 + 25) = *(_WORD *)(v57 + 25);
            *(_OWORD *)(v56 + 28) = *(_OWORD *)(v57 + 28);
            *((_DWORD *)v56 + 11) = *((_DWORD *)v57 + 11);
            *((_QWORD *)v56 + 6) = *((_QWORD *)v57 + 6);
            *((_QWORD *)v56 + 7) = v65;
            swift_bridgeObjectRetain();
          }
          v67 = *(int *)(v103 + 28);
          __src = &v56[v67];
          v68 = &v57[v67];
          v69 = sub_224F67874();
          v70 = *(_QWORD *)(v69 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__src, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v70 + 16))(__src, v68, v69);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v70 + 56))(__src, 0, 1, v69);
          }
          v72 = *(int *)(v103 + 32);
          v73 = &v56[v72];
          v74 = &v57[v72];
          v75 = v74[1];
          *v73 = *v74;
          v73[1] = v75;
          v76 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v106 + 56);
          swift_bridgeObjectRetain();
          v76(v56, 0, 1, v103);
          v59 = v100;
        }
        v77 = *(int *)(v58 + 20);
        v78 = &v56[v77];
        v79 = &v57[v77];
        if (__dst(v79, 1, v103))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        }
        else
        {
          *v78 = *v79;
          *((_QWORD *)v78 + 1) = *((_QWORD *)v79 + 1);
          *((_DWORD *)v78 + 4) = *((_DWORD *)v79 + 4);
          v81 = *((_QWORD *)v79 + 7);
          v101 = v59;
          if (v81 == 1)
          {
            v82 = *(_OWORD *)(v79 + 40);
            *(_OWORD *)(v78 + 24) = *(_OWORD *)(v79 + 24);
            *(_OWORD *)(v78 + 40) = v82;
            *((_QWORD *)v78 + 7) = *((_QWORD *)v79 + 7);
          }
          else
          {
            v78[24] = v79[24];
            *(_WORD *)(v78 + 25) = *(_WORD *)(v79 + 25);
            *(_OWORD *)(v78 + 28) = *(_OWORD *)(v79 + 28);
            *((_DWORD *)v78 + 11) = *((_DWORD *)v79 + 11);
            *((_QWORD *)v78 + 6) = *((_QWORD *)v79 + 6);
            *((_QWORD *)v78 + 7) = v81;
            swift_bridgeObjectRetain();
          }
          v83 = *(int *)(v103 + 28);
          __dsta = &v78[v83];
          v84 = &v79[v83];
          v85 = sub_224F67874();
          v98 = *(_QWORD *)(v85 - 8);
          v86 = v85;
          if ((*(unsigned int (**)(_BYTE *, uint64_t))(v98 + 48))(v84, 1))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dsta, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v98 + 16))(__dsta, v84, v86);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v98 + 56))(__dsta, 0, 1, v86);
          }
          v88 = *(int *)(v103 + 32);
          v89 = &v78[v88];
          v90 = &v79[v88];
          v91 = v90[1];
          *v89 = *v90;
          v89[1] = v91;
          v92 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v106 + 56);
          swift_bridgeObjectRetain();
          v92(v78, 0, 1, v103);
          v59 = v101;
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
        v63 = v108;
        v54 = v109;
        v61 = v102;
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v61, 0, 1, v50);
    }
    v93 = v54[16];
    v94 = (_QWORD *)((char *)a1 + v93);
    v95 = (_QWORD *)((char *)v26 + v93);
    v96 = v95[1];
    *v94 = *v95;
    v94[1] = v96;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsR4.DocumentReference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for FHIRDateTime();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(_QWORD *)(v4 + 56) != 1)
      swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 28);
    v8 = sub_224F67874();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + *(int *)(a2 + 60);
  v11 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease();
    v12 = v10 + *(int *)(v11 + 20);
    v13 = type metadata accessor for Period();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
    {
      if (!v6(v12, 1, v5))
      {
        if (*(_QWORD *)(v12 + 56) != 1)
          swift_bridgeObjectRelease();
        v14 = v12 + *(int *)(v5 + 28);
        v15 = sub_224F67874();
        v16 = *(_QWORD *)(v15 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
        swift_bridgeObjectRelease();
      }
      v17 = v12 + *(int *)(v13 + 20);
      if (!v6(v17, 1, v5))
      {
        if (*(_QWORD *)(v17 + 56) != 1)
          swift_bridgeObjectRelease();
        v18 = v17 + *(int *)(v5 + 28);
        v19 = sub_224F67874();
        v20 = *(_QWORD *)(v19 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
        swift_bridgeObjectRelease();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsR4.DocumentReference(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  __int128 v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(_QWORD *, uint64_t, uint64_t);
  uint64_t v51;
  int *v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  void (*v74)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  void (*v90)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v96;
  _BYTE *__src;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned int (*__dst)(_BYTE *, uint64_t, uint64_t);
  _BYTE *__dsta;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  int *v107;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1)
    swift_bridgeObjectRetain();
  v9 = a2[5];
  v10 = a2[6];
  a1[4] = v8;
  a1[5] = v9;
  v11 = a2[7];
  v12 = a2[8];
  a1[6] = v10;
  a1[7] = v11;
  v13 = a2[9];
  v14 = a2[10];
  a1[8] = v12;
  a1[9] = v13;
  v15 = a2[11];
  v16 = a2[12];
  a1[10] = v14;
  a1[11] = v15;
  v17 = a3[11];
  v18 = a2;
  v19 = (char *)a1 + v17;
  v105 = v18;
  v107 = a3;
  v20 = (char *)v18 + v17;
  a1[12] = v16;
  v21 = type metadata accessor for FHIRDateTime();
  v104 = *(_QWORD *)(v21 - 8);
  v22 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v104 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dst = v22;
  v101 = v21;
  if (v22(v20, 1, v21))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    v25 = v105;
    v24 = v107;
  }
  else
  {
    *v19 = *v20;
    *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
    *((_DWORD *)v19 + 4) = *((_DWORD *)v20 + 4);
    v26 = *((_QWORD *)v20 + 7);
    v27 = v19;
    if (v26 == 1)
    {
      v28 = *(_OWORD *)(v20 + 40);
      *(_OWORD *)(v19 + 24) = *(_OWORD *)(v20 + 24);
      *(_OWORD *)(v19 + 40) = v28;
      *((_QWORD *)v19 + 7) = *((_QWORD *)v20 + 7);
    }
    else
    {
      v19[24] = v20[24];
      *(_WORD *)(v19 + 25) = *(_WORD *)(v20 + 25);
      *(_OWORD *)(v19 + 28) = *(_OWORD *)(v20 + 28);
      *((_DWORD *)v19 + 11) = *((_DWORD *)v20 + 11);
      *((_QWORD *)v19 + 6) = *((_QWORD *)v20 + 6);
      *((_QWORD *)v19 + 7) = v26;
      swift_bridgeObjectRetain();
    }
    v25 = v105;
    v29 = *(int *)(v21 + 28);
    v30 = &v27[v29];
    v31 = &v20[v29];
    v32 = sub_224F67874();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v35 = *(int *)(v21 + 32);
    v36 = &v27[v35];
    v37 = &v20[v35];
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v104 + 56);
    swift_bridgeObjectRetain();
    v39(v27, 0, 1, v21);
    v24 = v107;
  }
  v40 = v24[12];
  v41 = v24[13];
  v42 = (_QWORD *)((char *)a1 + v40);
  v43 = (_QWORD *)((char *)v25 + v40);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  *(_QWORD *)((char *)a1 + v41) = *(_QWORD *)((char *)v25 + v41);
  v45 = v24[15];
  *(_QWORD *)((char *)a1 + v24[14]) = *(_QWORD *)((char *)v25 + v24[14]);
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)v25 + v45);
  v48 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v49 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v50(v47, 1, v48))
  {
    sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    v52 = v107;
  }
  else
  {
    v106 = v49;
    *v46 = *v47;
    v53 = *(int *)(v48 + 20);
    v54 = (char *)v46 + v53;
    v55 = (char *)v47 + v53;
    v56 = type metadata accessor for Period();
    v57 = *(_QWORD *)(v56 - 8);
    v58 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v57 + 48);
    swift_bridgeObjectRetain();
    v59 = v46;
    if (v58(v55, 1, v56))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      v61 = v106;
      v52 = v107;
    }
    else
    {
      v100 = v46;
      if (__dst(v55, 1, v101))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        *v54 = *v55;
        *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
        *((_DWORD *)v54 + 4) = *((_DWORD *)v55 + 4);
        v63 = *((_QWORD *)v55 + 7);
        v98 = v57;
        if (v63 == 1)
        {
          v64 = *(_OWORD *)(v55 + 40);
          *(_OWORD *)(v54 + 24) = *(_OWORD *)(v55 + 24);
          *(_OWORD *)(v54 + 40) = v64;
          *((_QWORD *)v54 + 7) = *((_QWORD *)v55 + 7);
        }
        else
        {
          v54[24] = v55[24];
          *(_WORD *)(v54 + 25) = *(_WORD *)(v55 + 25);
          *(_OWORD *)(v54 + 28) = *(_OWORD *)(v55 + 28);
          *((_DWORD *)v54 + 11) = *((_DWORD *)v55 + 11);
          *((_QWORD *)v54 + 6) = *((_QWORD *)v55 + 6);
          *((_QWORD *)v54 + 7) = v63;
          swift_bridgeObjectRetain();
        }
        v65 = *(int *)(v101 + 28);
        __src = &v54[v65];
        v66 = &v55[v65];
        v67 = sub_224F67874();
        v68 = *(_QWORD *)(v67 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__src, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 16))(__src, v66, v67);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v68 + 56))(__src, 0, 1, v67);
        }
        v70 = *(int *)(v101 + 32);
        v71 = &v54[v70];
        v72 = &v55[v70];
        v73 = v72[1];
        *v71 = *v72;
        v71[1] = v73;
        v74 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v104 + 56);
        swift_bridgeObjectRetain();
        v74(v54, 0, 1, v101);
        v57 = v98;
      }
      v75 = *(int *)(v56 + 20);
      v76 = &v54[v75];
      v77 = &v55[v75];
      if (__dst(v77, 1, v101))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        *v76 = *v77;
        *((_QWORD *)v76 + 1) = *((_QWORD *)v77 + 1);
        *((_DWORD *)v76 + 4) = *((_DWORD *)v77 + 4);
        v79 = *((_QWORD *)v77 + 7);
        v99 = v57;
        if (v79 == 1)
        {
          v80 = *(_OWORD *)(v77 + 40);
          *(_OWORD *)(v76 + 24) = *(_OWORD *)(v77 + 24);
          *(_OWORD *)(v76 + 40) = v80;
          *((_QWORD *)v76 + 7) = *((_QWORD *)v77 + 7);
        }
        else
        {
          v76[24] = v77[24];
          *(_WORD *)(v76 + 25) = *(_WORD *)(v77 + 25);
          *(_OWORD *)(v76 + 28) = *(_OWORD *)(v77 + 28);
          *((_DWORD *)v76 + 11) = *((_DWORD *)v77 + 11);
          *((_QWORD *)v76 + 6) = *((_QWORD *)v77 + 6);
          *((_QWORD *)v76 + 7) = v79;
          swift_bridgeObjectRetain();
        }
        v81 = *(int *)(v101 + 28);
        __dsta = &v76[v81];
        v82 = &v77[v81];
        v83 = sub_224F67874();
        v96 = *(_QWORD *)(v83 - 8);
        v84 = v83;
        if ((*(unsigned int (**)(_BYTE *, uint64_t))(v96 + 48))(v82, 1))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dsta, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v96 + 16))(__dsta, v82, v84);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v96 + 56))(__dsta, 0, 1, v84);
        }
        v86 = *(int *)(v101 + 32);
        v87 = &v76[v86];
        v88 = &v77[v86];
        v89 = v88[1];
        *v87 = *v88;
        v87[1] = v89;
        v90 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v104 + 56);
        swift_bridgeObjectRetain();
        v90(v76, 0, 1, v101);
        v57 = v99;
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      v61 = v106;
      v52 = v107;
      v59 = v100;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v59, 0, 1, v48);
  }
  v91 = v52[16];
  v92 = (_QWORD *)((char *)a1 + v91);
  v93 = (_QWORD *)((char *)v25 + v91);
  v94 = v93[1];
  *v92 = *v93;
  v92[1] = v94;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.DocumentReference(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  void (*v37)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t (*v61)(_QWORD *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  size_t v66;
  void *v67;
  const void *v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(_BYTE *, uint64_t, uint64_t);
  uint64_t v75;
  void (**v76)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v77;
  _BYTE *v78;
  uint64_t (*v79)(_BYTE *, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t (*v94)(uint64_t, uint64_t);
  __int128 v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  void (*v107)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  void (*v125)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  char *v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  void (*v144)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v145;
  _BYTE *v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  void (*v161)(_BYTE *, _QWORD, uint64_t, uint64_t);
  __int128 *v162;
  __int128 *v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  void (*v178)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t (*v187)(char *, uint64_t, uint64_t);
  int v188;
  uint64_t v189;
  size_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t (*v201)(uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 *v206;
  __int128 *v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  void (*v223)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  void *v228;
  _BYTE *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t (*v232)(void *, uint64_t, uint64_t);
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  void (**__src)(void *, void *, _QWORD);
  uint64_t v240;
  uint64_t v241;
  void *v242;
  void *__dst;
  _BYTE *__dsta;
  void *__dstb;
  int *v246;
  int *v247;
  int *v248;
  int *v249;
  int *v250;
  int *v251;
  int *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t (*v259)(uint64_t, uint64_t, uint64_t);
  _BYTE *v260;
  _BYTE *v261;
  uint64_t v262;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 4;
  v7 = a2[4];
  if (a1[4] == 1)
  {
    if (v7 == 1)
    {
      v8 = 1;
LABEL_6:
      *v6 = v8;
      goto LABEL_9;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_224E2C98C((uint64_t)(a1 + 4));
      v8 = a2[4];
      goto LABEL_6;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = a3[11];
  v10 = (uint64_t)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for FHIRDateTime();
  v262 = *(_QWORD *)(v12 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v262 + 48);
  v14 = v13(v10, 1, v12);
  v259 = v13;
  v15 = v13((uint64_t)v11, 1, v12);
  if (!v14)
  {
    if (v15)
    {
      sub_224DDEAA0(v10, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_14;
    }
    *(_BYTE *)v10 = *v11;
    *(_QWORD *)(v10 + 8) = *((_QWORD *)v11 + 1);
    *(_WORD *)(v10 + 16) = *((_WORD *)v11 + 8);
    *(_WORD *)(v10 + 18) = *((_WORD *)v11 + 9);
    v21 = (__int128 *)(v10 + 24);
    v22 = (__int128 *)(v11 + 24);
    v23 = *((_QWORD *)v11 + 7);
    v246 = a3;
    if (*(_QWORD *)(v10 + 56) == 1)
    {
      if (v23 == 1)
      {
        v24 = *v22;
        v25 = *(_OWORD *)(v11 + 40);
        *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
        *v21 = v24;
        *(_OWORD *)(v10 + 40) = v25;
      }
      else
      {
        *(_BYTE *)(v10 + 24) = v11[24];
        *(_BYTE *)(v10 + 25) = v11[25];
        *(_BYTE *)(v10 + 26) = v11[26];
        v40 = *(_OWORD *)(v11 + 28);
        *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
        *(_OWORD *)(v10 + 28) = v40;
        *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
        *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v23 == 1)
    {
      sub_224E2C9F4(v10 + 24);
      v38 = *((_QWORD *)v11 + 7);
      v39 = *(_OWORD *)(v11 + 40);
      *v21 = *v22;
      *(_OWORD *)(v10 + 40) = v39;
      *(_QWORD *)(v10 + 56) = v38;
    }
    else
    {
      *(_BYTE *)(v10 + 24) = v11[24];
      *(_BYTE *)(v10 + 25) = v11[25];
      *(_BYTE *)(v10 + 26) = v11[26];
      *(_DWORD *)(v10 + 28) = *((_DWORD *)v11 + 7);
      *(_WORD *)(v10 + 32) = *((_WORD *)v11 + 16);
      *(_WORD *)(v10 + 34) = *((_WORD *)v11 + 17);
      *(_WORD *)(v10 + 36) = *((_WORD *)v11 + 18);
      *(_WORD *)(v10 + 38) = *((_WORD *)v11 + 19);
      *(_WORD *)(v10 + 40) = *((_WORD *)v11 + 20);
      *(_WORD *)(v10 + 42) = *((_WORD *)v11 + 21);
      *(_WORD *)(v10 + 44) = *((_WORD *)v11 + 22);
      *(_WORD *)(v10 + 46) = *((_WORD *)v11 + 23);
      *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
      *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v253 = v12;
    v41 = *(int *)(v12 + 28);
    v42 = (void *)(v10 + v41);
    v43 = &v11[v41];
    v44 = sub_224F67874();
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v45 + 48);
    v47 = v46(v42, 1, v44);
    v48 = v46(v43, 1, v44);
    if (v47)
    {
      if (!v48)
      {
        (*(void (**)(void *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
LABEL_35:
        a3 = v246;
        v12 = v253;
        v50 = *(int *)(v253 + 32);
        v51 = (_QWORD *)(v10 + v50);
        v52 = &v11[v50];
        *v51 = *(_QWORD *)v52;
        v51[1] = *((_QWORD *)v52 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
    }
    else
    {
      if (!v48)
      {
        (*(void (**)(void *, char *, uint64_t))(v45 + 24))(v42, v43, v44);
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t))(v45 + 8))(v42, v44);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_35;
  }
  if (v15)
  {
    v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_14:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v16);
    memcpy((void *)v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_36;
  }
  *(_BYTE *)v10 = *v11;
  v18 = *((_QWORD *)v11 + 1);
  *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
  *(_QWORD *)(v10 + 8) = v18;
  if (*((_QWORD *)v11 + 7) == 1)
  {
    v19 = *(_OWORD *)(v11 + 24);
    v20 = *(_OWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
    *(_OWORD *)(v10 + 24) = v19;
    *(_OWORD *)(v10 + 40) = v20;
  }
  else
  {
    *(_BYTE *)(v10 + 24) = v11[24];
    *(_BYTE *)(v10 + 25) = v11[25];
    *(_BYTE *)(v10 + 26) = v11[26];
    v26 = *(_OWORD *)(v11 + 28);
    *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
    *(_OWORD *)(v10 + 28) = v26;
    *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
    *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
    swift_bridgeObjectRetain();
  }
  v27 = v12;
  v28 = *(int *)(v12 + 28);
  v29 = (void *)(v10 + v28);
  v30 = &v11[v28];
  v31 = sub_224F67874();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v12 = v27;
  v34 = *(int *)(v27 + 32);
  v35 = (_QWORD *)(v10 + v34);
  v36 = &v11[v34];
  *v35 = *(_QWORD *)v36;
  v35[1] = *((_QWORD *)v36 + 1);
  v37 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v262 + 56);
  swift_bridgeObjectRetain();
  v37(v10, 0, 1, v12);
LABEL_36:
  v53 = a3[12];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = (_QWORD *)((char *)a2 + v53);
  *v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = a3[15];
  v57 = (_QWORD *)((char *)a1 + v56);
  v58 = (_QWORD *)((char *)a2 + v56);
  v59 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  v60 = *(_QWORD **)(v59 - 8);
  v61 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v60[6];
  v62 = v61(v57, 1, v59);
  v63 = v61(v58, 1, v59);
  if (v62)
  {
    if (v63)
    {
      v64 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_41:
      sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, v64);
      v66 = *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64);
      v67 = v57;
      v68 = v58;
LABEL_42:
      memcpy(v67, v68, v66);
      goto LABEL_79;
    }
    __dst = v60;
    v247 = a3;
    v254 = v12;
    *v57 = *v58;
    v69 = *(int *)(v59 + 20);
    v70 = (char *)v57 + v69;
    v71 = (char *)v58 + v69;
    v72 = type metadata accessor for Period();
    v73 = *(_QWORD *)(v72 - 8);
    v74 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v73 + 48);
    swift_bridgeObjectRetain();
    if (v74(v71, 1, v72))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      v76 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__dst;
    }
    else
    {
      v241 = v73;
      if (v259((uint64_t)v71, 1, v254))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
        v84 = v254;
        v85 = v72;
        v86 = v70;
        v76 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__dst;
      }
      else
      {
        *v70 = *v71;
        v89 = *((_QWORD *)v71 + 1);
        *((_DWORD *)v70 + 4) = *((_DWORD *)v71 + 4);
        *((_QWORD *)v70 + 1) = v89;
        v240 = v72;
        if (*((_QWORD *)v71 + 7) == 1)
        {
          v90 = *(_OWORD *)(v71 + 24);
          v91 = *(_OWORD *)(v71 + 40);
          *((_QWORD *)v70 + 7) = *((_QWORD *)v71 + 7);
          *(_OWORD *)(v70 + 24) = v90;
          *(_OWORD *)(v70 + 40) = v91;
        }
        else
        {
          v70[24] = v71[24];
          v70[25] = v71[25];
          v70[26] = v71[26];
          v95 = *(_OWORD *)(v71 + 28);
          *((_DWORD *)v70 + 11) = *((_DWORD *)v71 + 11);
          *(_OWORD *)(v70 + 28) = v95;
          *((_QWORD *)v70 + 6) = *((_QWORD *)v71 + 6);
          *((_QWORD *)v70 + 7) = *((_QWORD *)v71 + 7);
          swift_bridgeObjectRetain();
        }
        v86 = v70;
        v76 = (void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__dst;
        v96 = *(int *)(v254 + 28);
        __dsta = &v86[v96];
        v97 = &v71[v96];
        v98 = sub_224F67874();
        v99 = *(_QWORD *)(v98 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dsta, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 16))(__dsta, v97, v98);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v99 + 56))(__dsta, 0, 1, v98);
        }
        v85 = v240;
        v84 = v254;
        v104 = *(int *)(v254 + 32);
        v105 = &v86[v104];
        v106 = &v71[v104];
        *v105 = *v106;
        v105[1] = v106[1];
        v107 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v262 + 56);
        swift_bridgeObjectRetain();
        v107(v86, 0, 1, v254);
      }
      v108 = *(int *)(v85 + 20);
      v109 = &v86[v108];
      v110 = &v71[v108];
      if (v259((uint64_t)v110, 1, v84))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
      }
      else
      {
        *v109 = *v110;
        v112 = *((_QWORD *)v110 + 1);
        *((_DWORD *)v109 + 4) = *((_DWORD *)v110 + 4);
        *((_QWORD *)v109 + 1) = v112;
        if (*((_QWORD *)v110 + 7) == 1)
        {
          v113 = *(_OWORD *)(v110 + 24);
          v114 = *(_OWORD *)(v110 + 40);
          *((_QWORD *)v109 + 7) = *((_QWORD *)v110 + 7);
          *(_OWORD *)(v109 + 24) = v113;
          *(_OWORD *)(v109 + 40) = v114;
        }
        else
        {
          v109[24] = v110[24];
          v109[25] = v110[25];
          v109[26] = v110[26];
          v115 = *(_OWORD *)(v110 + 28);
          *((_DWORD *)v109 + 11) = *((_DWORD *)v110 + 11);
          *(_OWORD *)(v109 + 28) = v115;
          *((_QWORD *)v109 + 6) = *((_QWORD *)v110 + 6);
          *((_QWORD *)v109 + 7) = *((_QWORD *)v110 + 7);
          swift_bridgeObjectRetain();
        }
        v116 = *(int *)(v254 + 28);
        v260 = &v109[v116];
        v117 = &v110[v116];
        v118 = sub_224F67874();
        __src = *(void (***)(void *, void *, _QWORD))(v118 - 8);
        __dstb = v117;
        v119 = v117;
        v120 = v118;
        if (((unsigned int (*)(_BYTE *, uint64_t))__src[6])(v119, 1))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v260, __dstb, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
        }
        else
        {
          __src[2](v260, __dstb, v120);
          ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))__src[7])(v260, 0, 1, v120);
        }
        v122 = *(int *)(v254 + 32);
        v123 = &v109[v122];
        v124 = &v110[v122];
        *v123 = *v124;
        v123[1] = v124[1];
        v125 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v262 + 56);
        swift_bridgeObjectRetain();
        v125(v109, 0, 1, v254);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v241 + 56))(v86, 0, 1, v85);
      a3 = v247;
    }
LABEL_78:
    v76[7](v57, 0, 1, v59);
    goto LABEL_79;
  }
  if (v63)
  {
    sub_224DDEAA0((uint64_t)v57, type metadata accessor for ModelsR4.DocumentReferenceContext);
    v64 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    goto LABEL_41;
  }
  *v57 = *v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v77 = *(int *)(v59 + 20);
  v57 = (_QWORD *)((char *)v57 + v77);
  v78 = (char *)v58 + v77;
  v59 = type metadata accessor for Period();
  v76 = *(void (***)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 - 8);
  v79 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))v76[6];
  v80 = v79(v57, 1, v59);
  v81 = v79(v78, 1, v59);
  if (v80)
  {
    if (!v81)
    {
      if (v259((uint64_t)v78, 1, v12))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v57, v78, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
      }
      else
      {
        *(_BYTE *)v57 = *v78;
        v101 = *((_QWORD *)v78 + 1);
        *((_DWORD *)v57 + 4) = *((_DWORD *)v78 + 4);
        v57[1] = v101;
        v248 = a3;
        if (*((_QWORD *)v78 + 7) == 1)
        {
          v102 = *(_OWORD *)(v78 + 24);
          v103 = *(_OWORD *)(v78 + 40);
          v57[7] = *((_QWORD *)v78 + 7);
          *(_OWORD *)(v57 + 3) = v102;
          *(_OWORD *)(v57 + 5) = v103;
        }
        else
        {
          *((_BYTE *)v57 + 24) = v78[24];
          *((_BYTE *)v57 + 25) = v78[25];
          *((_BYTE *)v57 + 26) = v78[26];
          v131 = *(_OWORD *)(v78 + 28);
          *((_DWORD *)v57 + 11) = *((_DWORD *)v78 + 11);
          *(_OWORD *)((char *)v57 + 28) = v131;
          v57[6] = *((_QWORD *)v78 + 6);
          v57[7] = *((_QWORD *)v78 + 7);
          swift_bridgeObjectRetain();
        }
        v255 = v12;
        v132 = *(int *)(v12 + 28);
        v133 = (char *)v57 + v132;
        v134 = &v78[v132];
        v135 = sub_224F67874();
        v136 = *(_QWORD *)(v135 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, _BYTE *, uint64_t))(v136 + 16))(v133, v134, v135);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
        }
        a3 = v248;
        v12 = v255;
        v141 = *(int *)(v255 + 32);
        v142 = (_QWORD *)((char *)v57 + v141);
        v143 = &v78[v141];
        *v142 = *v143;
        v142[1] = v143[1];
        v144 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v262 + 56);
        swift_bridgeObjectRetain();
        v144(v57, 0, 1, v255);
      }
      v145 = *(int *)(v59 + 20);
      v146 = (char *)v57 + v145;
      v147 = &v78[v145];
      if (v259((uint64_t)v147, 1, v12))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
      }
      else
      {
        *v146 = *v147;
        v149 = *((_QWORD *)v147 + 1);
        *((_DWORD *)v146 + 4) = *((_DWORD *)v147 + 4);
        *((_QWORD *)v146 + 1) = v149;
        v250 = a3;
        if (*((_QWORD *)v147 + 7) == 1)
        {
          v150 = *(_OWORD *)(v147 + 24);
          v151 = *(_OWORD *)(v147 + 40);
          *((_QWORD *)v146 + 7) = *((_QWORD *)v147 + 7);
          *(_OWORD *)(v146 + 24) = v150;
          *(_OWORD *)(v146 + 40) = v151;
        }
        else
        {
          v146[24] = v147[24];
          v146[25] = v147[25];
          v146[26] = v147[26];
          v152 = *(_OWORD *)(v147 + 28);
          *((_DWORD *)v146 + 11) = *((_DWORD *)v147 + 11);
          *(_OWORD *)(v146 + 28) = v152;
          *((_QWORD *)v146 + 6) = *((_QWORD *)v147 + 6);
          *((_QWORD *)v146 + 7) = *((_QWORD *)v147 + 7);
          swift_bridgeObjectRetain();
        }
        v153 = *(int *)(v12 + 28);
        v256 = v12;
        v261 = &v146[v153];
        v154 = &v147[v153];
        v155 = sub_224F67874();
        v156 = *(_QWORD *)(v155 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v156 + 48))(v154, 1, v155))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v261, v154, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v156 + 16))(v261, v154, v155);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v261, 0, 1, v155);
        }
        a3 = v250;
        v158 = *(int *)(v256 + 32);
        v159 = &v146[v158];
        v160 = &v147[v158];
        *v159 = *v160;
        v159[1] = v160[1];
        v161 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v262 + 56);
        swift_bridgeObjectRetain();
        v161(v146, 0, 1, v256);
      }
      goto LABEL_78;
    }
    v82 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_52:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v82);
    v66 = *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64);
    v67 = v57;
    v68 = v78;
    goto LABEL_42;
  }
  if (v81)
  {
    sub_224DDEAA0((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for Period);
    v82 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    goto LABEL_52;
  }
  v92 = v259((uint64_t)v57, 1, v12);
  v93 = v259((uint64_t)v78, 1, v12);
  if (!v92)
  {
    if (v93)
    {
      sub_224DDEAA0((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v94 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_82;
    }
    v251 = a3;
    v257 = v12;
    *(_BYTE *)v57 = *v78;
    v57[1] = *((_QWORD *)v78 + 1);
    *((_WORD *)v57 + 8) = *((_WORD *)v78 + 8);
    *((_WORD *)v57 + 9) = *((_WORD *)v78 + 9);
    v162 = (__int128 *)(v57 + 3);
    v163 = (__int128 *)(v78 + 24);
    v164 = *((_QWORD *)v78 + 7);
    if (v57[7] == 1)
    {
      if (v164 == 1)
      {
        v165 = *v163;
        v166 = *(_OWORD *)(v78 + 40);
        v57[7] = *((_QWORD *)v78 + 7);
        *v162 = v165;
        *(_OWORD *)(v57 + 5) = v166;
      }
      else
      {
        *((_BYTE *)v57 + 24) = v78[24];
        *((_BYTE *)v57 + 25) = v78[25];
        *((_BYTE *)v57 + 26) = v78[26];
        v181 = *(_OWORD *)(v78 + 28);
        *((_DWORD *)v57 + 11) = *((_DWORD *)v78 + 11);
        *(_OWORD *)((char *)v57 + 28) = v181;
        v57[6] = *((_QWORD *)v78 + 6);
        v57[7] = *((_QWORD *)v78 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v164 == 1)
    {
      sub_224E2C9F4((uint64_t)(v57 + 3));
      v179 = *((_QWORD *)v78 + 7);
      v180 = *(_OWORD *)(v78 + 40);
      *v162 = *v163;
      *(_OWORD *)(v57 + 5) = v180;
      v57[7] = v179;
    }
    else
    {
      *((_BYTE *)v57 + 24) = v78[24];
      *((_BYTE *)v57 + 25) = v78[25];
      *((_BYTE *)v57 + 26) = v78[26];
      *((_DWORD *)v57 + 7) = *((_DWORD *)v78 + 7);
      *((_WORD *)v57 + 16) = *((_WORD *)v78 + 16);
      *((_WORD *)v57 + 17) = *((_WORD *)v78 + 17);
      *((_WORD *)v57 + 18) = *((_WORD *)v78 + 18);
      *((_WORD *)v57 + 19) = *((_WORD *)v78 + 19);
      *((_WORD *)v57 + 20) = *((_WORD *)v78 + 20);
      *((_WORD *)v57 + 21) = *((_WORD *)v78 + 21);
      *((_WORD *)v57 + 22) = *((_WORD *)v78 + 22);
      *((_WORD *)v57 + 23) = *((_WORD *)v78 + 23);
      v57[6] = *((_QWORD *)v78 + 6);
      v57[7] = *((_QWORD *)v78 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v182 = *(int *)(v257 + 28);
    v183 = (char *)v57 + v182;
    v184 = &v78[v182];
    v185 = sub_224F67874();
    v186 = *(_QWORD *)(v185 - 8);
    v187 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v186 + 48);
    v242 = v183;
    LODWORD(v183) = v187(v183, 1, v185);
    v188 = v187(v184, 1, v185);
    if ((_DWORD)v183)
    {
      if (!v188)
      {
        (*(void (**)(void *, char *, uint64_t))(v186 + 16))(v242, v184, v185);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v242, 0, 1, v185);
        goto LABEL_119;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v190 = *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64);
      v191 = v242;
    }
    else
    {
      if (!v188)
      {
        (*(void (**)(void *, char *, uint64_t))(v186 + 24))(v242, v184, v185);
        goto LABEL_119;
      }
      (*(void (**)(void *, uint64_t))(v186 + 8))(v242, v185);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v190 = *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64);
      v191 = v242;
    }
    memcpy(v191, v184, v190);
LABEL_119:
    v12 = v257;
    v193 = *(int *)(v257 + 32);
    v194 = (_QWORD *)((char *)v57 + v193);
    v195 = &v78[v193];
    *v194 = *v195;
    v194[1] = v195[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a3 = v251;
    goto LABEL_120;
  }
  if (v93)
  {
    v94 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_82:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v94);
    memcpy(v57, v78, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    goto LABEL_120;
  }
  *(_BYTE *)v57 = *v78;
  v138 = *((_QWORD *)v78 + 1);
  *((_DWORD *)v57 + 4) = *((_DWORD *)v78 + 4);
  v57[1] = v138;
  v249 = a3;
  if (*((_QWORD *)v78 + 7) == 1)
  {
    v139 = *(_OWORD *)(v78 + 24);
    v140 = *(_OWORD *)(v78 + 40);
    v57[7] = *((_QWORD *)v78 + 7);
    *(_OWORD *)(v57 + 3) = v139;
    *(_OWORD *)(v57 + 5) = v140;
  }
  else
  {
    *((_BYTE *)v57 + 24) = v78[24];
    *((_BYTE *)v57 + 25) = v78[25];
    *((_BYTE *)v57 + 26) = v78[26];
    v167 = *(_OWORD *)(v78 + 28);
    *((_DWORD *)v57 + 11) = *((_DWORD *)v78 + 11);
    *(_OWORD *)((char *)v57 + 28) = v167;
    v57[6] = *((_QWORD *)v78 + 6);
    v57[7] = *((_QWORD *)v78 + 7);
    swift_bridgeObjectRetain();
  }
  v168 = v12;
  v169 = *(int *)(v12 + 28);
  v170 = (char *)v57 + v169;
  v171 = &v78[v169];
  v172 = sub_224F67874();
  v173 = *(_QWORD *)(v172 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v173 + 48))(v171, 1, v172))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v170, v171, *(_QWORD *)(*(_QWORD *)(v174 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v173 + 16))(v170, v171, v172);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v170, 0, 1, v172);
  }
  a3 = v249;
  v12 = v168;
  v175 = *(int *)(v168 + 32);
  v176 = (_QWORD *)((char *)v57 + v175);
  v177 = &v78[v175];
  *v176 = *v177;
  v176[1] = v177[1];
  v178 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v262 + 56);
  swift_bridgeObjectRetain();
  v178(v57, 0, 1, v12);
LABEL_120:
  v196 = *(int *)(v59 + 20);
  v197 = (uint64_t)v57 + v196;
  v198 = &v78[v196];
  v199 = v259(v197, 1, v12);
  v200 = v259((uint64_t)v198, 1, v12);
  if (!v199)
  {
    if (v200)
    {
      sub_224DDEAA0(v197, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v201 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_125;
    }
    *(_BYTE *)v197 = *v198;
    *(_QWORD *)(v197 + 8) = *((_QWORD *)v198 + 1);
    *(_WORD *)(v197 + 16) = *((_WORD *)v198 + 8);
    *(_WORD *)(v197 + 18) = *((_WORD *)v198 + 9);
    v206 = (__int128 *)(v197 + 24);
    v207 = (__int128 *)(v198 + 24);
    v208 = *((_QWORD *)v198 + 7);
    v252 = a3;
    if (*(_QWORD *)(v197 + 56) == 1)
    {
      if (v208 == 1)
      {
        v209 = *v207;
        v210 = *(_OWORD *)(v198 + 40);
        *(_QWORD *)(v197 + 56) = *((_QWORD *)v198 + 7);
        *v206 = v209;
        *(_OWORD *)(v197 + 40) = v210;
      }
      else
      {
        *(_BYTE *)(v197 + 24) = v198[24];
        *(_BYTE *)(v197 + 25) = v198[25];
        *(_BYTE *)(v197 + 26) = v198[26];
        v226 = *(_OWORD *)(v198 + 28);
        *(_DWORD *)(v197 + 44) = *((_DWORD *)v198 + 11);
        *(_OWORD *)(v197 + 28) = v226;
        *(_QWORD *)(v197 + 48) = *((_QWORD *)v198 + 6);
        *(_QWORD *)(v197 + 56) = *((_QWORD *)v198 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v208 == 1)
    {
      sub_224E2C9F4(v197 + 24);
      v224 = *((_QWORD *)v198 + 7);
      v225 = *(_OWORD *)(v198 + 40);
      *v206 = *v207;
      *(_OWORD *)(v197 + 40) = v225;
      *(_QWORD *)(v197 + 56) = v224;
    }
    else
    {
      *(_BYTE *)(v197 + 24) = v198[24];
      *(_BYTE *)(v197 + 25) = v198[25];
      *(_BYTE *)(v197 + 26) = v198[26];
      *(_DWORD *)(v197 + 28) = *((_DWORD *)v198 + 7);
      *(_WORD *)(v197 + 32) = *((_WORD *)v198 + 16);
      *(_WORD *)(v197 + 34) = *((_WORD *)v198 + 17);
      *(_WORD *)(v197 + 36) = *((_WORD *)v198 + 18);
      *(_WORD *)(v197 + 38) = *((_WORD *)v198 + 19);
      *(_WORD *)(v197 + 40) = *((_WORD *)v198 + 20);
      *(_WORD *)(v197 + 42) = *((_WORD *)v198 + 21);
      *(_WORD *)(v197 + 44) = *((_WORD *)v198 + 22);
      *(_WORD *)(v197 + 46) = *((_WORD *)v198 + 23);
      *(_QWORD *)(v197 + 48) = *((_QWORD *)v198 + 6);
      *(_QWORD *)(v197 + 56) = *((_QWORD *)v198 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v258 = v12;
    v227 = *(int *)(v12 + 28);
    v228 = (void *)(v197 + v227);
    v229 = &v198[v227];
    v230 = sub_224F67874();
    v231 = *(_QWORD *)(v230 - 8);
    v232 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v231 + 48);
    v233 = v232(v228, 1, v230);
    v234 = v232(v229, 1, v230);
    if (v233)
    {
      if (!v234)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v231 + 16))(v228, v229, v230);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v231 + 56))(v228, 0, 1, v230);
LABEL_146:
        a3 = v252;
        v236 = *(int *)(v258 + 32);
        v237 = (_QWORD *)(v197 + v236);
        v238 = &v198[v236];
        *v237 = *v238;
        v237[1] = v238[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_79;
      }
    }
    else
    {
      if (!v234)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v231 + 24))(v228, v229, v230);
        goto LABEL_146;
      }
      (*(void (**)(void *, uint64_t))(v231 + 8))(v228, v230);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
    goto LABEL_146;
  }
  if (v200)
  {
    v201 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_125:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v201);
    v66 = *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64);
    v67 = (void *)v197;
    v68 = v198;
    goto LABEL_42;
  }
  *(_BYTE *)v197 = *v198;
  v203 = *((_QWORD *)v198 + 1);
  *(_DWORD *)(v197 + 16) = *((_DWORD *)v198 + 4);
  *(_QWORD *)(v197 + 8) = v203;
  if (*((_QWORD *)v198 + 7) == 1)
  {
    v204 = *(_OWORD *)(v198 + 24);
    v205 = *(_OWORD *)(v198 + 40);
    *(_QWORD *)(v197 + 56) = *((_QWORD *)v198 + 7);
    *(_OWORD *)(v197 + 24) = v204;
    *(_OWORD *)(v197 + 40) = v205;
  }
  else
  {
    *(_BYTE *)(v197 + 24) = v198[24];
    *(_BYTE *)(v197 + 25) = v198[25];
    *(_BYTE *)(v197 + 26) = v198[26];
    v211 = *(_OWORD *)(v198 + 28);
    *(_DWORD *)(v197 + 44) = *((_DWORD *)v198 + 11);
    *(_OWORD *)(v197 + 28) = v211;
    *(_QWORD *)(v197 + 48) = *((_QWORD *)v198 + 6);
    *(_QWORD *)(v197 + 56) = *((_QWORD *)v198 + 7);
    swift_bridgeObjectRetain();
  }
  v212 = v12;
  v213 = *(int *)(v12 + 28);
  v214 = (void *)(v197 + v213);
  v215 = &v198[v213];
  v216 = sub_224F67874();
  v217 = *(_QWORD *)(v216 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v217 + 48))(v215, 1, v216))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, _BYTE *, uint64_t))(v217 + 16))(v214, v215, v216);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
  }
  v219 = v212;
  v220 = *(int *)(v212 + 32);
  v221 = (_QWORD *)(v197 + v220);
  v222 = &v198[v220];
  *v221 = *v222;
  v221[1] = v222[1];
  v223 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v262 + 56);
  swift_bridgeObjectRetain();
  v223(v197, 0, 1, v219);
LABEL_79:
  v126 = a3[16];
  v127 = (_QWORD *)((char *)a1 + v126);
  v128 = (_QWORD *)((char *)a2 + v126);
  *v127 = *v128;
  v127[1] = v128[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ModelsR4.DocumentReference(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _BYTE *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *__dst;
  void *__src;
  void *__srca;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v68;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = a3[11];
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  *(_OWORD *)(a1 + 72) = v7;
  v12 = type metadata accessor for FHIRDateTime();
  v13 = *(_QWORD *)(v12 - 8);
  v67 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48);
  if (v67(v11, 1, v12))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v64 = v13;
    *v10 = *v11;
    *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
    *((_DWORD *)v10 + 4) = *((_DWORD *)v11 + 4);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
    *((_QWORD *)v10 + 7) = *((_QWORD *)v11 + 7);
    v15 = *(int *)(v12 + 28);
    v16 = &v10[v15];
    v17 = &v11[v15];
    v18 = sub_224F67874();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v13 = v64;
    *(_OWORD *)&v10[*(int *)(v12 + 32)] = *(_OWORD *)&v11[*(int *)(v12 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v10, 0, 1, v12);
  }
  v21 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  v22 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    __src = v23;
    v63 = v26;
    *v23 = *v24;
    v28 = *(int *)(v25 + 20);
    v29 = (char *)v23 + v28;
    v30 = (char *)v24 + v28;
    v31 = type metadata accessor for Period();
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      v34 = __src;
      v35 = v63;
    }
    else
    {
      v58 = v32;
      __dst = v29;
      v59 = v31;
      if (v67(v30, 1, v12))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        v34 = __src;
      }
      else
      {
        v65 = v13;
        *v29 = *v30;
        *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
        *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
        *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
        *(_OWORD *)(v29 + 40) = *(_OWORD *)(v30 + 40);
        *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
        v37 = *(int *)(v12 + 28);
        v56 = &v29[v37];
        v38 = &v30[v37];
        v39 = sub_224F67874();
        v40 = *(_QWORD *)(v39 - 8);
        v41 = v38;
        v42 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39);
        v34 = __src;
        if (v42)
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v56, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, const void *, uint64_t))(v40 + 32))(v56, v41, v39);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v56, 0, 1, v39);
        }
        v31 = v59;
        v29 = __dst;
        *(_OWORD *)&__dst[*(int *)(v12 + 32)] = *(_OWORD *)&v30[*(int *)(v12 + 32)];
        v13 = v65;
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v65 + 56))(__dst, 0, 1, v12);
      }
      v44 = *(int *)(v31 + 20);
      v45 = &v29[v44];
      v46 = &v30[v44];
      if (v67(v46, 1, v12))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        v35 = v63;
        v48 = v58;
      }
      else
      {
        *v45 = *v46;
        *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
        *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
        *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
        *(_OWORD *)(v45 + 40) = *(_OWORD *)(v46 + 40);
        *((_QWORD *)v45 + 7) = *((_QWORD *)v46 + 7);
        v49 = *(int *)(v12 + 28);
        v66 = v13;
        v68 = &v45[v49];
        v50 = &v46[v49];
        v51 = sub_224F67874();
        v52 = *(_QWORD *)(v51 - 8);
        __srca = v50;
        v57 = (void *)v51;
        v53 = (*(uint64_t (**)(_BYTE *, uint64_t))(v52 + 48))(v50, 1);
        v35 = v63;
        if (v53)
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v68, __srca, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, void *, void *))(v52 + 32))(v68, __srca, v57);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, void *))(v52 + 56))(v68, 0, 1, v57);
        }
        v48 = v58;
        *(_OWORD *)&v45[*(int *)(v12 + 32)] = *(_OWORD *)&v46[*(int *)(v12 + 32)];
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v45, 0, 1, v12);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v48 + 56))(__dst, 0, 1, v59);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v34, 0, 1, v25);
  }
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

_QWORD *assignWithTake for ModelsR4.DocumentReference(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(_QWORD *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  size_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(_BYTE *, uint64_t, uint64_t);
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(_BYTE *, uint64_t, uint64_t);
  int v139;
  uint64_t v140;
  size_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  _BYTE *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  void *v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t (*v170)(void *, uint64_t, uint64_t);
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  void *__src;
  uint64_t v181;
  void *v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int *v191;
  int *v192;
  int *v193;
  uint64_t (*__dst)(uint64_t, uint64_t, uint64_t);
  _BYTE *__dsta;
  _BYTE *__dstb;
  uint64_t v197;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a1 + 4;
  v9 = a2[4];
  if (a1[4] == 1)
    goto LABEL_4;
  if (v9 == 1)
  {
    sub_224E2C98C((uint64_t)(a1 + 4));
    v9 = a2[4];
LABEL_4:
    *v8 = v9;
    goto LABEL_6;
  }
  *v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease();
  v11 = a2[8];
  a1[7] = a2[7];
  a1[8] = v11;
  swift_bridgeObjectRelease();
  v12 = a2[10];
  a1[9] = a2[9];
  a1[10] = v12;
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRelease();
  v13 = a3[11];
  v14 = (uint64_t)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for FHIRDateTime();
  v197 = *(_QWORD *)(v16 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v197 + 48);
  v18 = v17(v14, 1, v16);
  __dst = v17;
  v19 = v17((uint64_t)v15, 1, v16);
  if (!v18)
  {
    if (v19)
    {
      sub_224DDEAA0(v14, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_11;
    }
    v184 = v16;
    v191 = a3;
    *(_BYTE *)v14 = *v15;
    *(_QWORD *)(v14 + 8) = *((_QWORD *)v15 + 1);
    *(_DWORD *)(v14 + 16) = *((_DWORD *)v15 + 4);
    if (*(_QWORD *)(v14 + 56) != 1)
    {
      v30 = *((_QWORD *)v15 + 7);
      if (v30 != 1)
      {
        *(_BYTE *)(v14 + 24) = v15[24];
        *(_WORD *)(v14 + 25) = *(_WORD *)(v15 + 25);
        *(_DWORD *)(v14 + 28) = *((_DWORD *)v15 + 7);
        *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
        *(_QWORD *)(v14 + 48) = *((_QWORD *)v15 + 6);
        *(_QWORD *)(v14 + 56) = v30;
        swift_bridgeObjectRelease();
LABEL_21:
        v32 = *(int *)(v16 + 28);
        v33 = (void *)(v14 + v32);
        v34 = &v15[v32];
        v35 = sub_224F67874();
        v36 = *(_QWORD *)(v35 - 8);
        v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
        v38 = v37(v33, 1, v35);
        v39 = v37(v34, 1, v35);
        if (v38)
        {
          if (!v39)
          {
            (*(void (**)(void *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_27:
            v16 = v184;
            v41 = *(int *)(v184 + 32);
            v42 = (_QWORD *)(v14 + v41);
            v43 = &v15[v41];
            v45 = *(_QWORD *)v43;
            v44 = *((_QWORD *)v43 + 1);
            *v42 = v45;
            v42[1] = v44;
            swift_bridgeObjectRelease();
            a3 = v191;
            goto LABEL_28;
          }
        }
        else
        {
          if (!v39)
          {
            (*(void (**)(void *, char *, uint64_t))(v36 + 40))(v33, v34, v35);
            goto LABEL_27;
          }
          (*(void (**)(void *, uint64_t))(v36 + 8))(v33, v35);
        }
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        goto LABEL_27;
      }
      sub_224E2C9F4(v14 + 24);
    }
    v31 = *(_OWORD *)(v15 + 40);
    *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
    *(_OWORD *)(v14 + 40) = v31;
    *(_QWORD *)(v14 + 56) = *((_QWORD *)v15 + 7);
    goto LABEL_21;
  }
  if (v19)
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_11:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v20);
    memcpy((void *)v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_28;
  }
  v22 = a3;
  *(_BYTE *)v14 = *v15;
  *(_QWORD *)(v14 + 8) = *((_QWORD *)v15 + 1);
  *(_DWORD *)(v14 + 16) = *((_DWORD *)v15 + 4);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
  *(_QWORD *)(v14 + 56) = *((_QWORD *)v15 + 7);
  v23 = v16;
  v24 = *(int *)(v16 + 28);
  v25 = (void *)(v14 + v24);
  v26 = &v15[v24];
  v27 = sub_224F67874();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  a3 = v22;
  v16 = v23;
  *(_OWORD *)(v14 + *(int *)(v23 + 32)) = *(_OWORD *)&v15[*(int *)(v23 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v197 + 56))(v14, 0, 1, v23);
LABEL_28:
  v46 = a3[12];
  v47 = (_QWORD *)((char *)a1 + v46);
  v48 = (_QWORD *)((char *)a2 + v46);
  v50 = *v48;
  v49 = v48[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  v51 = a3[15];
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  v54 = type metadata accessor for ModelsR4.DocumentReferenceContext(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (v58)
    {
      sub_224DDEAA0((uint64_t)v52, type metadata accessor for ModelsR4.DocumentReferenceContext);
      v59 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_33;
    }
    v193 = a3;
    *v52 = *v53;
    swift_bridgeObjectRelease();
    v70 = *(int *)(v54 + 20);
    v71 = (char *)v52 + v70;
    v72 = (char *)v53 + v70;
    v73 = type metadata accessor for Period();
    v74 = *(_QWORD *)(v73 - 8);
    v75 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v74 + 48);
    v76 = v75(v71, 1, v73);
    v77 = v75(v72, 1, v73);
    if (v76)
    {
      if (v77)
      {
        sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
        a3 = v193;
      }
      else
      {
        if (__dst((uint64_t)v72, 1, v16))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        }
        else
        {
          *v71 = *v72;
          *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
          *((_DWORD *)v71 + 4) = *((_DWORD *)v72 + 4);
          *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
          *(_OWORD *)(v71 + 40) = *(_OWORD *)(v72 + 40);
          *((_QWORD *)v71 + 7) = *((_QWORD *)v72 + 7);
          v186 = v16;
          v90 = *(int *)(v16 + 28);
          v91 = &v71[v90];
          v92 = &v72[v90];
          v93 = sub_224F67874();
          v94 = *(_QWORD *)(v93 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v94 + 32))(v91, v92, v93);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
          }
          v16 = v186;
          *(_OWORD *)&v71[*(int *)(v186 + 32)] = *(_OWORD *)&v72[*(int *)(v186 + 32)];
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v197 + 56))(v71, 0, 1, v186);
        }
        v122 = *(int *)(v73 + 20);
        v123 = &v71[v122];
        v124 = &v72[v122];
        if (__dst((uint64_t)v124, 1, v16))
        {
          sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
        }
        else
        {
          *v123 = *v124;
          *((_QWORD *)v123 + 1) = *((_QWORD *)v124 + 1);
          *((_DWORD *)v123 + 4) = *((_DWORD *)v124 + 4);
          *(_OWORD *)(v123 + 24) = *(_OWORD *)(v124 + 24);
          *(_OWORD *)(v123 + 40) = *(_OWORD *)(v124 + 40);
          *((_QWORD *)v123 + 7) = *((_QWORD *)v124 + 7);
          v188 = v16;
          v126 = *(int *)(v16 + 28);
          __dstb = &v123[v126];
          v127 = &v124[v126];
          v128 = sub_224F67874();
          v129 = *(_QWORD *)(v128 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v129 + 48))(v127, 1, v128))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(__dstb, v127, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
          }
          else
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v129 + 32))(__dstb, v127, v128);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v129 + 56))(__dstb, 0, 1, v128);
          }
          *(_OWORD *)&v123[*(int *)(v188 + 32)] = *(_OWORD *)&v124[*(int *)(v188 + 32)];
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(v197 + 56))(v123, 0, 1);
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
        a3 = v193;
      }
      goto LABEL_64;
    }
    a3 = v193;
    if (v77)
    {
      sub_224DDEAA0((uint64_t)v71, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v61 = *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64);
      v62 = v71;
      v63 = v72;
      goto LABEL_34;
    }
    v87 = __dst((uint64_t)v71, 1, v16);
    v88 = __dst((uint64_t)v72, 1, v16);
    if (v87)
    {
      if (v88)
      {
        v89 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_67:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v89);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        goto LABEL_95;
      }
      *v71 = *v72;
      *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
      *((_DWORD *)v71 + 4) = *((_DWORD *)v72 + 4);
      *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
      *(_OWORD *)(v71 + 40) = *(_OWORD *)(v72 + 40);
      *((_QWORD *)v71 + 7) = *((_QWORD *)v72 + 7);
      v115 = v16;
      v116 = *(int *)(v16 + 28);
      v117 = &v71[v116];
      v118 = &v72[v116];
      v119 = sub_224F67874();
      v120 = *(_QWORD *)(v119 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v120 + 32))(v117, v118, v119);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v117, 0, 1, v119);
      }
      v16 = v115;
      *(_OWORD *)&v71[*(int *)(v115 + 32)] = *(_OWORD *)&v72[*(int *)(v115 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v197 + 56))(v71, 0, 1, v115);
      a3 = v193;
LABEL_95:
      v149 = *(int *)(v73 + 20);
      v150 = (uint64_t)&v71[v149];
      v151 = &v72[v149];
      v152 = __dst(v150, 1, v16);
      v153 = __dst((uint64_t)v151, 1, v16);
      if (v152)
      {
        if (!v153)
        {
          *(_BYTE *)v150 = *v151;
          *(_QWORD *)(v150 + 8) = *((_QWORD *)v151 + 1);
          *(_DWORD *)(v150 + 16) = *((_DWORD *)v151 + 4);
          *(_OWORD *)(v150 + 24) = *(_OWORD *)(v151 + 24);
          *(_OWORD *)(v150 + 40) = *(_OWORD *)(v151 + 40);
          *(_QWORD *)(v150 + 56) = *((_QWORD *)v151 + 7);
          v156 = v16;
          v157 = *(int *)(v16 + 28);
          v158 = (void *)(v150 + v157);
          v159 = &v151[v157];
          v160 = sub_224F67874();
          v161 = *(_QWORD *)(v160 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v161 + 48))(v159, 1, v160))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v161 + 32))(v158, v159, v160);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
          }
          a3 = v193;
          *(_OWORD *)(v150 + *(int *)(v156 + 32)) = *(_OWORD *)&v151[*(int *)(v156 + 32)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v197 + 56))(v150, 0, 1, v156);
          goto LABEL_64;
        }
        v154 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_100:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v154);
        v61 = *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64);
        v62 = (void *)v150;
        v63 = v151;
        goto LABEL_34;
      }
      if (v153)
      {
        sub_224DDEAA0(v150, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v154 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_100;
      }
      v190 = v16;
      *(_BYTE *)v150 = *v151;
      *(_QWORD *)(v150 + 8) = *((_QWORD *)v151 + 1);
      *(_DWORD *)(v150 + 16) = *((_DWORD *)v151 + 4);
      if (*(_QWORD *)(v150 + 56) != 1)
      {
        v163 = *((_QWORD *)v151 + 7);
        if (v163 != 1)
        {
          *(_BYTE *)(v150 + 24) = v151[24];
          *(_WORD *)(v150 + 25) = *(_WORD *)(v151 + 25);
          *(_DWORD *)(v150 + 28) = *((_DWORD *)v151 + 7);
          *(_OWORD *)(v150 + 32) = *((_OWORD *)v151 + 2);
          *(_QWORD *)(v150 + 48) = *((_QWORD *)v151 + 6);
          *(_QWORD *)(v150 + 56) = v163;
          swift_bridgeObjectRelease();
LABEL_110:
          v165 = *(int *)(v16 + 28);
          v166 = (void *)(v150 + v165);
          v167 = &v151[v165];
          v168 = sub_224F67874();
          v169 = *(_QWORD *)(v168 - 8);
          v170 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v169 + 48);
          v171 = v170(v166, 1, v168);
          v172 = v170(v167, 1, v168);
          if (v171)
          {
            if (!v172)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v169 + 32))(v166, v167, v168);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
LABEL_116:
              v174 = *(int *)(v190 + 32);
              v175 = (_QWORD *)(v150 + v174);
              v176 = (uint64_t *)&v151[v174];
              v178 = *v176;
              v177 = v176[1];
              *v175 = v178;
              v175[1] = v177;
              swift_bridgeObjectRelease();
              a3 = v193;
              goto LABEL_64;
            }
          }
          else
          {
            if (!v172)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v169 + 40))(v166, v167, v168);
              goto LABEL_116;
            }
            (*(void (**)(void *, uint64_t))(v169 + 8))(v166, v168);
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v166, v167, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
          goto LABEL_116;
        }
        sub_224E2C9F4(v150 + 24);
      }
      v164 = *(_OWORD *)(v151 + 40);
      *(_OWORD *)(v150 + 24) = *(_OWORD *)(v151 + 24);
      *(_OWORD *)(v150 + 40) = v164;
      *(_QWORD *)(v150 + 56) = *((_QWORD *)v151 + 7);
      goto LABEL_110;
    }
    if (v88)
    {
      sub_224DDEAA0((uint64_t)v71, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v89 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_67;
    }
    v189 = v16;
    *v71 = *v72;
    *((_QWORD *)v71 + 1) = *((_QWORD *)v72 + 1);
    *((_DWORD *)v71 + 4) = *((_DWORD *)v72 + 4);
    if (*((_QWORD *)v71 + 7) != 1)
    {
      v131 = *((_QWORD *)v72 + 7);
      if (v131 != 1)
      {
        v71[24] = v72[24];
        *(_WORD *)(v71 + 25) = *(_WORD *)(v72 + 25);
        *((_DWORD *)v71 + 7) = *((_DWORD *)v72 + 7);
        *((_OWORD *)v71 + 2) = *((_OWORD *)v72 + 2);
        *((_QWORD *)v71 + 6) = *((_QWORD *)v72 + 6);
        *((_QWORD *)v71 + 7) = v131;
        swift_bridgeObjectRelease();
LABEL_86:
        v133 = *(int *)(v16 + 28);
        v134 = &v71[v133];
        v135 = &v72[v133];
        v136 = sub_224F67874();
        v137 = *(_QWORD *)(v136 - 8);
        v138 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v137 + 48);
        v182 = v134;
        LODWORD(v134) = v138(v134, 1, v136);
        v139 = v138(v135, 1, v136);
        if ((_DWORD)v134)
        {
          a3 = v193;
          if (!v139)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v137 + 32))(v182, v135, v136);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v182, 0, 1, v136);
            goto LABEL_94;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v141 = *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64);
          v142 = v182;
        }
        else
        {
          a3 = v193;
          if (!v139)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v137 + 40))(v182, v135, v136);
            goto LABEL_94;
          }
          (*(void (**)(void *, uint64_t))(v137 + 8))(v182, v136);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v141 = *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64);
          v142 = v182;
        }
        memcpy(v142, v135, v141);
LABEL_94:
        v16 = v189;
        v144 = *(int *)(v189 + 32);
        v145 = &v71[v144];
        v146 = (uint64_t *)&v72[v144];
        v148 = *v146;
        v147 = v146[1];
        *v145 = v148;
        v145[1] = v147;
        swift_bridgeObjectRelease();
        goto LABEL_95;
      }
      sub_224E2C9F4((uint64_t)(v71 + 24));
    }
    v132 = *(_OWORD *)(v72 + 40);
    *(_OWORD *)(v71 + 24) = *(_OWORD *)(v72 + 24);
    *(_OWORD *)(v71 + 40) = v132;
    *((_QWORD *)v71 + 7) = *((_QWORD *)v72 + 7);
    goto LABEL_86;
  }
  if (v58)
  {
    v59 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_33:
    sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, v59);
    v61 = *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64);
    v62 = v52;
    v63 = v53;
LABEL_34:
    memcpy(v62, v63, v61);
    goto LABEL_64;
  }
  v192 = a3;
  *v52 = *v53;
  v64 = *(int *)(v54 + 20);
  v65 = (char *)v52 + v64;
  v66 = (char *)v53 + v64;
  v67 = type metadata accessor for Period();
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v181 = v68;
    v183 = v65;
    if (__dst((uint64_t)v66, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    else
    {
      *v65 = *v66;
      *((_QWORD *)v65 + 1) = *((_QWORD *)v66 + 1);
      *((_DWORD *)v65 + 4) = *((_DWORD *)v66 + 4);
      *(_OWORD *)(v65 + 24) = *(_OWORD *)(v66 + 24);
      *(_OWORD *)(v65 + 40) = *(_OWORD *)(v66 + 40);
      *((_QWORD *)v65 + 7) = *((_QWORD *)v66 + 7);
      v185 = v16;
      v82 = *(int *)(v16 + 28);
      v179 = &v65[v82];
      v83 = &v66[v82];
      v84 = sub_224F67874();
      v85 = *(_QWORD *)(v84 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v179, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v85 + 32))(v179, v83, v84);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v179, 0, 1, v84);
      }
      v65 = v183;
      v16 = v185;
      *(_OWORD *)&v183[*(int *)(v185 + 32)] = *(_OWORD *)&v66[*(int *)(v185 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v197 + 56))(v183, 0, 1, v185);
    }
    v96 = *(int *)(v67 + 20);
    v97 = &v65[v96];
    v98 = &v66[v96];
    if (__dst((uint64_t)v98, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      v100 = v181;
    }
    else
    {
      *v97 = *v98;
      *((_QWORD *)v97 + 1) = *((_QWORD *)v98 + 1);
      *((_DWORD *)v97 + 4) = *((_DWORD *)v98 + 4);
      *(_OWORD *)(v97 + 24) = *(_OWORD *)(v98 + 24);
      *(_OWORD *)(v97 + 40) = *(_OWORD *)(v98 + 40);
      *((_QWORD *)v97 + 7) = *((_QWORD *)v98 + 7);
      v187 = v16;
      v101 = *(int *)(v16 + 28);
      __dsta = &v97[v101];
      v102 = &v98[v101];
      v103 = sub_224F67874();
      v104 = *(_QWORD *)(v103 - 8);
      __src = v102;
      v105 = v102;
      v106 = v103;
      if ((*(unsigned int (**)(_BYTE *, uint64_t))(v104 + 48))(v105, 1))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, __src, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v104 + 32))(__dsta, __src, v106);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v104 + 56))(__dsta, 0, 1, v106);
      }
      v100 = v181;
      *(_OWORD *)&v97[*(int *)(v187 + 32)] = *(_OWORD *)&v98[*(int *)(v187 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v197 + 56))(v97, 0, 1);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v183, 0, 1, v67);
  }
  a3 = v192;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
LABEL_64:
  v108 = a3[16];
  v109 = (_QWORD *)((char *)a1 + v108);
  v110 = (_QWORD *)((char *)a2 + v108);
  v112 = *v110;
  v111 = v110[1];
  *v109 = v112;
  v109[1] = v111;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.DocumentReference()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E3913C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 44);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.DocumentReference()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E39218(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 60);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224E392E4()
{
  unint64_t v0;
  unint64_t v1;

  sub_224DDEA0C(319, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E0578, type metadata accessor for ModelsR4.DocumentReferenceContext, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.DocumentReferenceContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(_BYTE *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v57;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = (int *)type metadata accessor for Attachment();
    v9 = v8[6];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_224F675D4();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v8[7];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v8[8];
    v21 = (uint64_t *)((char *)v4 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = v8[9];
    v25 = (uint64_t *)((char *)v4 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = v8[10];
    v29 = (char *)v4 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for FHIRDateTime();
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *v29 = *v30;
      *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
      *((_DWORD *)v29 + 4) = *((_DWORD *)v30 + 4);
      v35 = *((_QWORD *)v30 + 7);
      v57 = v32;
      if (v35 == 1)
      {
        v36 = *(_OWORD *)(v30 + 40);
        *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
        *(_OWORD *)(v29 + 40) = v36;
        *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
      }
      else
      {
        v29[24] = v30[24];
        *(_WORD *)(v29 + 25) = *(_WORD *)(v30 + 25);
        *(_OWORD *)(v29 + 28) = *(_OWORD *)(v30 + 28);
        *((_DWORD *)v29 + 11) = *((_DWORD *)v30 + 11);
        *((_QWORD *)v29 + 6) = *((_QWORD *)v30 + 6);
        *((_QWORD *)v29 + 7) = v35;
        swift_bridgeObjectRetain();
      }
      v37 = *(int *)(v31 + 28);
      v38 = &v29[v37];
      v39 = &v30[v37];
      v40 = sub_224F67874();
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      v43 = *(int *)(v31 + 32);
      v44 = &v29[v43];
      v45 = &v30[v43];
      v46 = v45[1];
      *v44 = *v45;
      v44[1] = v46;
      v47 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v57 + 56);
      swift_bridgeObjectRetain();
      v47(v29, 0, 1, v31);
    }
    v48 = v8[11];
    v49 = (uint64_t *)((char *)v4 + v48);
    v50 = (uint64_t *)((char *)a2 + v48);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = *(int *)(a3 + 20);
    v53 = (char *)v4 + v52;
    v54 = (char *)a2 + v52;
    v55 = *(uint64_t *)((char *)a2 + v52 + 8);
    swift_bridgeObjectRetain();
    if (v55 == 1)
    {
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_QWORD *)v53 + 2) = *((_QWORD *)v54 + 2);
    }
    else
    {
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = v55;
      *((_QWORD *)v53 + 2) = *((_QWORD *)v54 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t destroy for ModelsR4.DocumentReferenceContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for Attachment();
  v5 = a1 + *(int *)(v4 + 24);
  v6 = sub_224F675D4();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(v4 + 40);
  v9 = type metadata accessor for FHIRDateTime();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    if (*(_QWORD *)(v8 + 56) != 1)
      swift_bridgeObjectRelease();
    v10 = v8 + *(int *)(v9 + 28);
    v11 = sub_224F67874();
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for ModelsR4.DocumentReferenceContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(_BYTE *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _BYTE *__dst;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = (int *)type metadata accessor for Attachment();
  v8 = v7[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_224F675D4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = v7[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = v7[8];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v7[9];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = v7[10];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for FHIRDateTime();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31(v28, 1, v29))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    *v27 = *v28;
    *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
    *((_DWORD *)v27 + 4) = *((_DWORD *)v28 + 4);
    v33 = *((_QWORD *)v28 + 7);
    if (v33 == 1)
    {
      v34 = *(_OWORD *)(v28 + 40);
      *(_OWORD *)(v27 + 24) = *(_OWORD *)(v28 + 24);
      *(_OWORD *)(v27 + 40) = v34;
      *((_QWORD *)v27 + 7) = *((_QWORD *)v28 + 7);
    }
    else
    {
      v27[24] = v28[24];
      *(_WORD *)(v27 + 25) = *(_WORD *)(v28 + 25);
      *(_OWORD *)(v27 + 28) = *(_OWORD *)(v28 + 28);
      *((_DWORD *)v27 + 11) = *((_DWORD *)v28 + 11);
      *((_QWORD *)v27 + 6) = *((_QWORD *)v28 + 6);
      *((_QWORD *)v27 + 7) = v33;
      swift_bridgeObjectRetain();
    }
    v35 = *(int *)(v29 + 28);
    __dst = &v27[v35];
    v36 = &v28[v35];
    v37 = sub_224F67874();
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v38 + 16))(__dst, v36, v37);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
    }
    v40 = *(int *)(v29 + 32);
    v41 = &v27[v40];
    v42 = &v28[v40];
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56);
    swift_bridgeObjectRetain();
    v44(v27, 0, 1, v29);
  }
  v45 = v7[11];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  v49 = *(int *)(a3 + 20);
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = *(_QWORD *)((char *)a2 + v49 + 8);
  swift_bridgeObjectRetain();
  if (v52 == 1)
  {
    *(_OWORD *)v50 = *(_OWORD *)v51;
    *((_QWORD *)v50 + 2) = *((_QWORD *)v51 + 2);
  }
  else
  {
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v52;
    *((_QWORD *)v50 + 2) = *((_QWORD *)v51 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.DocumentReferenceContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  void (*v53)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  uint64_t v63;
  size_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v81;
  void *__dst;
  void *__dsta;
  uint64_t v84;
  uint64_t v85;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for Attachment();
  v7 = v6[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_224F675D4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = v6[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_DWORD *)v18;
  v17[4] = v18[4];
  *(_DWORD *)v17 = v19;
  v20 = v6[8];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = v6[9];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = v6[10];
  v27 = (uint64_t)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for FHIRDateTime();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31((uint64_t)v28, 1, v29);
  if (!v32)
  {
    if (v33)
    {
      sub_224DDEAA0(v27, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v34 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_12;
    }
    *(_BYTE *)v27 = *v28;
    *(_QWORD *)(v27 + 8) = *((_QWORD *)v28 + 1);
    *(_WORD *)(v27 + 16) = *((_WORD *)v28 + 8);
    *(_WORD *)(v27 + 18) = *((_WORD *)v28 + 9);
    v39 = (__int128 *)(v27 + 24);
    v40 = (__int128 *)(v28 + 24);
    v41 = *((_QWORD *)v28 + 7);
    v85 = a3;
    if (*(_QWORD *)(v27 + 56) == 1)
    {
      if (v41 == 1)
      {
        v42 = *v40;
        v43 = *(_OWORD *)(v28 + 40);
        *(_QWORD *)(v27 + 56) = *((_QWORD *)v28 + 7);
        *v39 = v42;
        *(_OWORD *)(v27 + 40) = v43;
      }
      else
      {
        *(_BYTE *)(v27 + 24) = v28[24];
        *(_BYTE *)(v27 + 25) = v28[25];
        *(_BYTE *)(v27 + 26) = v28[26];
        v56 = *(_OWORD *)(v28 + 28);
        *(_DWORD *)(v27 + 44) = *((_DWORD *)v28 + 11);
        *(_OWORD *)(v27 + 28) = v56;
        *(_QWORD *)(v27 + 48) = *((_QWORD *)v28 + 6);
        *(_QWORD *)(v27 + 56) = *((_QWORD *)v28 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v41 == 1)
    {
      sub_224E2C9F4(v27 + 24);
      v54 = *((_QWORD *)v28 + 7);
      v55 = *(_OWORD *)(v28 + 40);
      *v39 = *v40;
      *(_OWORD *)(v27 + 40) = v55;
      *(_QWORD *)(v27 + 56) = v54;
    }
    else
    {
      *(_BYTE *)(v27 + 24) = v28[24];
      *(_BYTE *)(v27 + 25) = v28[25];
      *(_BYTE *)(v27 + 26) = v28[26];
      *(_DWORD *)(v27 + 28) = *((_DWORD *)v28 + 7);
      *(_WORD *)(v27 + 32) = *((_WORD *)v28 + 16);
      *(_WORD *)(v27 + 34) = *((_WORD *)v28 + 17);
      *(_WORD *)(v27 + 36) = *((_WORD *)v28 + 18);
      *(_WORD *)(v27 + 38) = *((_WORD *)v28 + 19);
      *(_WORD *)(v27 + 40) = *((_WORD *)v28 + 20);
      *(_WORD *)(v27 + 42) = *((_WORD *)v28 + 21);
      *(_WORD *)(v27 + 44) = *((_WORD *)v28 + 22);
      *(_WORD *)(v27 + 46) = *((_WORD *)v28 + 23);
      *(_QWORD *)(v27 + 48) = *((_QWORD *)v28 + 6);
      *(_QWORD *)(v27 + 56) = *((_QWORD *)v28 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v57 = *(int *)(v29 + 28);
    v58 = (void *)(v27 + v57);
    v59 = &v28[v57];
    v60 = sub_224F67874();
    v81 = *(_QWORD *)(v60 - 8);
    v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v81 + 48);
    __dsta = v58;
    LODWORD(v58) = v61(v58, 1, v60);
    v62 = v61(v59, 1, v60);
    if ((_DWORD)v58)
    {
      if (!v62)
      {
        (*(void (**)(void *, char *, uint64_t))(v81 + 16))(__dsta, v59, v60);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v81 + 56))(__dsta, 0, 1, v60);
        goto LABEL_36;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v64 = *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64);
      v65 = __dsta;
    }
    else
    {
      if (!v62)
      {
        (*(void (**)(void *, char *, uint64_t))(v81 + 24))(__dsta, v59, v60);
        goto LABEL_36;
      }
      (*(void (**)(void *, uint64_t))(v81 + 8))(__dsta, v60);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v64 = *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64);
      v65 = __dsta;
    }
    memcpy(v65, v59, v64);
LABEL_36:
    a3 = v85;
    v67 = *(int *)(v29 + 32);
    v68 = (_QWORD *)(v27 + v67);
    v69 = &v28[v67];
    *v68 = *(_QWORD *)v69;
    v68[1] = *((_QWORD *)v69 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v33)
  {
    v34 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_12:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v34);
    memcpy((void *)v27, v28, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_37;
  }
  *(_BYTE *)v27 = *v28;
  v36 = *((_QWORD *)v28 + 1);
  *(_DWORD *)(v27 + 16) = *((_DWORD *)v28 + 4);
  *(_QWORD *)(v27 + 8) = v36;
  v84 = a3;
  if (*((_QWORD *)v28 + 7) == 1)
  {
    v37 = *(_OWORD *)(v28 + 24);
    v38 = *(_OWORD *)(v28 + 40);
    *(_QWORD *)(v27 + 56) = *((_QWORD *)v28 + 7);
    *(_OWORD *)(v27 + 24) = v37;
    *(_OWORD *)(v27 + 40) = v38;
  }
  else
  {
    *(_BYTE *)(v27 + 24) = v28[24];
    *(_BYTE *)(v27 + 25) = v28[25];
    *(_BYTE *)(v27 + 26) = v28[26];
    v44 = *(_OWORD *)(v28 + 28);
    *(_DWORD *)(v27 + 44) = *((_DWORD *)v28 + 11);
    *(_OWORD *)(v27 + 28) = v44;
    *(_QWORD *)(v27 + 48) = *((_QWORD *)v28 + 6);
    *(_QWORD *)(v27 + 56) = *((_QWORD *)v28 + 7);
    swift_bridgeObjectRetain();
  }
  v45 = *(int *)(v29 + 28);
  __dst = (void *)(v27 + v45);
  v46 = &v28[v45];
  v47 = sub_224F67874();
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v48 + 16))(__dst, v46, v47);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(__dst, 0, 1, v47);
  }
  a3 = v84;
  v50 = *(int *)(v29 + 32);
  v51 = (_QWORD *)(v27 + v50);
  v52 = &v28[v50];
  *v51 = *(_QWORD *)v52;
  v51[1] = *((_QWORD *)v52 + 1);
  v53 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56);
  swift_bridgeObjectRetain();
  v53(v27, 0, 1, v29);
LABEL_37:
  v70 = v6[11];
  v71 = (_QWORD *)((char *)a1 + v70);
  v72 = (_QWORD *)((char *)a2 + v70);
  *v71 = *v72;
  v71[1] = v72[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v73 = *(int *)(a3 + 20);
  v74 = (uint64_t)a1 + v73;
  v75 = (char *)a2 + v73;
  v76 = *(_QWORD *)((char *)a1 + v73 + 8);
  v77 = *((_QWORD *)v75 + 1);
  if (v76 == 1)
  {
    if (v77 == 1)
    {
      v78 = *(_OWORD *)v75;
      *(_QWORD *)(v74 + 16) = *((_QWORD *)v75 + 2);
      *(_OWORD *)v74 = v78;
    }
    else
    {
      *(_QWORD *)v74 = *(_QWORD *)v75;
      *(_QWORD *)(v74 + 8) = *((_QWORD *)v75 + 1);
      *(_QWORD *)(v74 + 16) = *((_QWORD *)v75 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v77 == 1)
  {
    sub_224E2C9C0(v74);
    v79 = *((_QWORD *)v75 + 2);
    *(_OWORD *)v74 = *(_OWORD *)v75;
    *(_QWORD *)(v74 + 16) = v79;
  }
  else
  {
    *(_QWORD *)v74 = *(_QWORD *)v75;
    *(_QWORD *)(v74 + 8) = *((_QWORD *)v75 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v74 + 16) = *((_QWORD *)v75 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

_OWORD *initializeWithTake for ModelsR4.DocumentReferenceContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v32;
  _BYTE *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for Attachment();
  v8 = v7[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_224F675D4();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = v7[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v15[4] = v16[4];
  *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
  *(_OWORD *)((char *)a1 + v7[9]) = *(_OWORD *)((char *)a2 + v7[9]);
  v17 = v7[10];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for FHIRDateTime();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
    *((_DWORD *)v18 + 4) = *((_DWORD *)v19 + 4);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)(v19 + 24);
    *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 40);
    *((_QWORD *)v18 + 7) = *((_QWORD *)v19 + 7);
    v23 = *(int *)(v20 + 28);
    v32 = a3;
    __dst = &v18[v23];
    v24 = &v19[v23];
    v25 = sub_224F67874();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(__dst, v24, v25);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
    }
    a3 = v32;
    *(_OWORD *)&v18[*(int *)(v20 + 32)] = *(_OWORD *)&v19[*(int *)(v20 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_OWORD *)((char *)a1 + v7[11]) = *(_OWORD *)((char *)a2 + v7[11]);
  v28 = *(int *)(a3 + 20);
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
  return a1;
}

_QWORD *assignWithTake for ModelsR4.DocumentReferenceContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t (*v52)(void *, uint64_t, uint64_t);
  int v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v73;
  void *__dst;
  void *__dsta;
  uint64_t v76;
  uint64_t v77;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = (int *)type metadata accessor for Attachment();
  v9 = v8[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_224F675D4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = v8[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v19[4] = v20[4];
  v21 = v8[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = v8[9];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v31 = v8[10];
  v32 = (uint64_t)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for FHIRDateTime();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36((uint64_t)v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      sub_224DDEAA0(v32, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_12;
    }
    *(_BYTE *)v32 = *v33;
    *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
    *(_DWORD *)(v32 + 16) = *((_DWORD *)v33 + 4);
    v77 = a3;
    if (*(_QWORD *)(v32 + 56) != 1)
    {
      v46 = *((_QWORD *)v33 + 7);
      if (v46 != 1)
      {
        *(_BYTE *)(v32 + 24) = v33[24];
        *(_WORD *)(v32 + 25) = *(_WORD *)(v33 + 25);
        *(_DWORD *)(v32 + 28) = *((_DWORD *)v33 + 7);
        *(_OWORD *)(v32 + 32) = *((_OWORD *)v33 + 2);
        *(_QWORD *)(v32 + 48) = *((_QWORD *)v33 + 6);
        *(_QWORD *)(v32 + 56) = v46;
        swift_bridgeObjectRelease();
LABEL_23:
        v48 = *(int *)(v34 + 28);
        v49 = (void *)(v32 + v48);
        v50 = &v33[v48];
        v51 = sub_224F67874();
        v73 = *(_QWORD *)(v51 - 8);
        v52 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v73 + 48);
        __dsta = v49;
        LODWORD(v49) = v52(v49, 1, v51);
        v53 = v52(v50, 1, v51);
        if ((_DWORD)v49)
        {
          if (!v53)
          {
            (*(void (**)(void *, char *, uint64_t))(v73 + 32))(__dsta, v50, v51);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v73 + 56))(__dsta, 0, 1, v51);
            goto LABEL_31;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v55 = *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64);
          v56 = __dsta;
        }
        else
        {
          if (!v53)
          {
            (*(void (**)(void *, char *, uint64_t))(v73 + 40))(__dsta, v50, v51);
            goto LABEL_31;
          }
          (*(void (**)(void *, uint64_t))(v73 + 8))(__dsta, v51);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v55 = *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64);
          v56 = __dsta;
        }
        memcpy(v56, v50, v55);
LABEL_31:
        a3 = v77;
        v58 = *(int *)(v34 + 32);
        v59 = (_QWORD *)(v32 + v58);
        v60 = &v33[v58];
        v62 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        *v59 = v62;
        v59[1] = v61;
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
      sub_224E2C9F4(v32 + 24);
    }
    v47 = *(_OWORD *)(v33 + 40);
    *(_OWORD *)(v32 + 24) = *(_OWORD *)(v33 + 24);
    *(_OWORD *)(v32 + 40) = v47;
    *(_QWORD *)(v32 + 56) = *((_QWORD *)v33 + 7);
    goto LABEL_23;
  }
  if (v38)
  {
    v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_12:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v39);
    memcpy((void *)v32, v33, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_32;
  }
  *(_BYTE *)v32 = *v33;
  *(_QWORD *)(v32 + 8) = *((_QWORD *)v33 + 1);
  *(_DWORD *)(v32 + 16) = *((_DWORD *)v33 + 4);
  *(_OWORD *)(v32 + 24) = *(_OWORD *)(v33 + 24);
  *(_OWORD *)(v32 + 40) = *(_OWORD *)(v33 + 40);
  *(_QWORD *)(v32 + 56) = *((_QWORD *)v33 + 7);
  v41 = *(int *)(v34 + 28);
  __dst = (void *)(v32 + v41);
  v76 = a3;
  v42 = &v33[v41];
  v43 = sub_224F67874();
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v44 + 32))(__dst, v42, v43);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(__dst, 0, 1, v43);
  }
  a3 = v76;
  *(_OWORD *)(v32 + *(int *)(v34 + 32)) = *(_OWORD *)&v33[*(int *)(v34 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_32:
  v63 = v8[11];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = (_QWORD *)((char *)a2 + v63);
  v67 = *v65;
  v66 = v65[1];
  *v64 = v67;
  v64[1] = v66;
  swift_bridgeObjectRelease();
  v68 = *(int *)(a3 + 20);
  v69 = (_QWORD *)((char *)a1 + v68);
  v70 = (_QWORD *)((char *)a2 + v68);
  if (*(_QWORD *)((char *)a1 + v68 + 8) != 1)
  {
    v71 = v70[1];
    if (v71 != 1)
    {
      *v69 = *v70;
      v69[1] = v71;
      swift_bridgeObjectRelease();
      v69[2] = v70[2];
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_224E2C9C0((uint64_t)v69);
  }
  *(_OWORD *)v69 = *(_OWORD *)v70;
  v69[2] = v70[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.DocumentReferenceContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E3AC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Attachment();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return ((_DWORD)v9 - 1) & ~(((int)v9 - 1) >> 31);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.DocumentReferenceContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E3ACE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Attachment();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 + 1);
  return result;
}

uint64_t sub_224E3AD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224E4C5A0(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for Attachment);
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.DocumentReferenceContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *__dst;
  _BYTE *__dsta;
  uint64_t v48;
  uint64_t v49;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Period();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for FHIRDateTime();
      v14 = *(_QWORD *)(v13 - 8);
      v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
      if (v15(v8, 1, v13))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        *v7 = *v8;
        *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
        *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
        v17 = *((_QWORD *)v8 + 7);
        v48 = v14;
        if (v17 == 1)
        {
          v18 = *(_OWORD *)(v8 + 40);
          *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
          *(_OWORD *)(v7 + 40) = v18;
          *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        }
        else
        {
          v7[24] = v8[24];
          *(_WORD *)(v7 + 25) = *(_WORD *)(v8 + 25);
          *(_OWORD *)(v7 + 28) = *(_OWORD *)(v8 + 28);
          *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
          *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
          *((_QWORD *)v7 + 7) = v17;
          swift_bridgeObjectRetain();
        }
        v19 = *(int *)(v13 + 28);
        __dst = &v7[v19];
        v20 = &v8[v19];
        v21 = sub_224F67874();
        v22 = *(_QWORD *)(v21 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16))(__dst, v20, v21);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
        }
        v14 = v48;
        v24 = *(int *)(v13 + 32);
        v25 = &v7[v24];
        v26 = &v8[v24];
        v27 = v26[1];
        *v25 = *v26;
        v25[1] = v27;
        v28 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v48 + 56);
        swift_bridgeObjectRetain();
        v28(v7, 0, 1, v13);
      }
      v29 = *(int *)(v9 + 20);
      v30 = &v7[v29];
      v31 = &v8[v29];
      if (v15(v31, 1, v13))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *v30 = *v31;
        *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
        *((_DWORD *)v30 + 4) = *((_DWORD *)v31 + 4);
        v33 = *((_QWORD *)v31 + 7);
        v49 = v14;
        if (v33 == 1)
        {
          v34 = *(_OWORD *)(v31 + 40);
          *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
          *(_OWORD *)(v30 + 40) = v34;
          *((_QWORD *)v30 + 7) = *((_QWORD *)v31 + 7);
        }
        else
        {
          v30[24] = v31[24];
          *(_WORD *)(v30 + 25) = *(_WORD *)(v31 + 25);
          *(_OWORD *)(v30 + 28) = *(_OWORD *)(v31 + 28);
          *((_DWORD *)v30 + 11) = *((_DWORD *)v31 + 11);
          *((_QWORD *)v30 + 6) = *((_QWORD *)v31 + 6);
          *((_QWORD *)v30 + 7) = v33;
          swift_bridgeObjectRetain();
        }
        v35 = *(int *)(v13 + 28);
        __dsta = &v30[v35];
        v36 = &v31[v35];
        v37 = sub_224F67874();
        v38 = *(_QWORD *)(v37 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dsta, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v38 + 16))(__dsta, v36, v37);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dsta, 0, 1, v37);
        }
        v40 = *(int *)(v13 + 32);
        v41 = &v30[v40];
        v42 = &v31[v40];
        v43 = v42[1];
        *v41 = *v42;
        v41[1] = v43;
        v44 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v49 + 56);
        swift_bridgeObjectRetain();
        v44(v30, 0, 1, v13);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for ModelsR4.DocumentReferenceContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Period();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for FHIRDateTime();
    v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
    if (!v8(v4, 1, v7))
    {
      if (*(_QWORD *)(v4 + 56) != 1)
        swift_bridgeObjectRelease();
      v9 = v4 + *(int *)(v7 + 28);
      v10 = sub_224F67874();
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      swift_bridgeObjectRelease();
    }
    v12 = v4 + *(int *)(v5 + 20);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v12, 1, v7);
    if (!(_DWORD)result)
    {
      if (*(_QWORD *)(v12 + 56) != 1)
        swift_bridgeObjectRelease();
      v13 = v12 + *(int *)(v7 + 28);
      v14 = sub_224F67874();
      v15 = *(_QWORD *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *initializeWithCopy for ModelsR4.DocumentReferenceContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(_BYTE *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *__dst;
  _BYTE *__dsta;
  uint64_t v46;
  uint64_t v47;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Period();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  if (v9(v6, 1, v7))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for FHIRDateTime();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v6, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *v5 = *v6;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
      *((_DWORD *)v5 + 4) = *((_DWORD *)v6 + 4);
      v15 = *((_QWORD *)v6 + 7);
      v46 = v12;
      if (v15 == 1)
      {
        v16 = *(_OWORD *)(v6 + 40);
        *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v5 + 40) = v16;
        *((_QWORD *)v5 + 7) = *((_QWORD *)v6 + 7);
      }
      else
      {
        v5[24] = v6[24];
        *(_WORD *)(v5 + 25) = *(_WORD *)(v6 + 25);
        *(_OWORD *)(v5 + 28) = *(_OWORD *)(v6 + 28);
        *((_DWORD *)v5 + 11) = *((_DWORD *)v6 + 11);
        *((_QWORD *)v5 + 6) = *((_QWORD *)v6 + 6);
        *((_QWORD *)v5 + 7) = v15;
        swift_bridgeObjectRetain();
      }
      v17 = *(int *)(v11 + 28);
      __dst = &v5[v17];
      v18 = &v6[v17];
      v19 = sub_224F67874();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 16))(__dst, v18, v19);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      v22 = *(int *)(v11 + 32);
      v23 = &v5[v22];
      v24 = &v6[v22];
      v25 = v24[1];
      *v23 = *v24;
      v23[1] = v25;
      v12 = v46;
      v26 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56);
      swift_bridgeObjectRetain();
      v26(v5, 0, 1, v11);
    }
    v27 = *(int *)(v7 + 20);
    v28 = &v5[v27];
    v29 = &v6[v27];
    if (v13(v29, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      *v28 = *v29;
      *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
      *((_DWORD *)v28 + 4) = *((_DWORD *)v29 + 4);
      v31 = *((_QWORD *)v29 + 7);
      v47 = v12;
      if (v31 == 1)
      {
        v32 = *(_OWORD *)(v29 + 40);
        *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
        *(_OWORD *)(v28 + 40) = v32;
        *((_QWORD *)v28 + 7) = *((_QWORD *)v29 + 7);
      }
      else
      {
        v28[24] = v29[24];
        *(_WORD *)(v28 + 25) = *(_WORD *)(v29 + 25);
        *(_OWORD *)(v28 + 28) = *(_OWORD *)(v29 + 28);
        *((_DWORD *)v28 + 11) = *((_DWORD *)v29 + 11);
        *((_QWORD *)v28 + 6) = *((_QWORD *)v29 + 6);
        *((_QWORD *)v28 + 7) = v31;
        swift_bridgeObjectRetain();
      }
      v33 = *(int *)(v11 + 28);
      __dsta = &v28[v33];
      v34 = &v29[v33];
      v35 = sub_224F67874();
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v36 + 16))(__dsta, v34, v35);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dsta, 0, 1, v35);
      }
      v38 = *(int *)(v11 + 32);
      v39 = &v28[v38];
      v40 = &v29[v38];
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56);
      swift_bridgeObjectRetain();
      v42(v28, 0, 1, v11);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.DocumentReferenceContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  size_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void (*v45)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void (*v62)(_BYTE *, _QWORD, uint64_t, uint64_t);
  __int128 *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  void (*v79)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t (*v87)(_BYTE *, uint64_t, uint64_t);
  int v88;
  uint64_t v89;
  size_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  int v100;
  uint64_t (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  void *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  void (*v121)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  void *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(void *, uint64_t, uint64_t);
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _BYTE *__dst;
  _BYTE *__dsta;
  void *__dstb;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Period();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v23 = type metadata accessor for FHIRDateTime();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
    v26 = v25(v7, 1, v23);
    v27 = v25(v8, 1, v23);
    if (v26)
    {
      if (v27)
      {
        v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_17:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v28);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        goto LABEL_57;
      }
      *v7 = *v8;
      v39 = *((_QWORD *)v8 + 1);
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      *((_QWORD *)v7 + 1) = v39;
      v142 = v24;
      if (*((_QWORD *)v8 + 7) == 1)
      {
        v40 = *(_OWORD *)(v8 + 24);
        v41 = *(_OWORD *)(v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        *(_OWORD *)(v7 + 24) = v40;
        *(_OWORD *)(v7 + 40) = v41;
      }
      else
      {
        v7[24] = v8[24];
        v7[25] = v8[25];
        v7[26] = v8[26];
        v69 = *(_OWORD *)(v8 + 28);
        *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v69;
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        swift_bridgeObjectRetain();
      }
      v70 = *(int *)(v23 + 28);
      v71 = &v7[v70];
      v72 = &v8[v70];
      v73 = sub_224F67874();
      v74 = *(_QWORD *)(v73 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v74 + 16))(v71, v72, v73);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      }
      v76 = *(int *)(v23 + 32);
      v77 = &v7[v76];
      v78 = &v8[v76];
      *v77 = *v78;
      v77[1] = v78[1];
      v24 = v142;
      v79 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v142 + 56);
      swift_bridgeObjectRetain();
      v79(v7, 0, 1, v23);
LABEL_57:
      v96 = *(int *)(v9 + 20);
      v97 = (uint64_t)&v7[v96];
      v98 = &v8[v96];
      v99 = v25((_BYTE *)v97, 1, v23);
      v100 = v25(v98, 1, v23);
      if (v99)
      {
        if (!v100)
        {
          *(_BYTE *)v97 = *v98;
          v103 = *((_QWORD *)v98 + 1);
          *(_DWORD *)(v97 + 16) = *((_DWORD *)v98 + 4);
          *(_QWORD *)(v97 + 8) = v103;
          if (*((_QWORD *)v98 + 7) == 1)
          {
            v104 = *(_OWORD *)(v98 + 24);
            v105 = *(_OWORD *)(v98 + 40);
            *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
            *(_OWORD *)(v97 + 24) = v104;
            *(_OWORD *)(v97 + 40) = v105;
          }
          else
          {
            *(_BYTE *)(v97 + 24) = v98[24];
            *(_BYTE *)(v97 + 25) = v98[25];
            *(_BYTE *)(v97 + 26) = v98[26];
            v111 = *(_OWORD *)(v98 + 28);
            *(_DWORD *)(v97 + 44) = *((_DWORD *)v98 + 11);
            *(_OWORD *)(v97 + 28) = v111;
            *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
            *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
            swift_bridgeObjectRetain();
          }
          v112 = *(int *)(v23 + 28);
          v113 = (void *)(v97 + v112);
          v114 = &v98[v112];
          v115 = sub_224F67874();
          v116 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v116 + 16))(v113, v114, v115);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
          }
          v118 = *(int *)(v23 + 32);
          v119 = (_QWORD *)(v97 + v118);
          v120 = &v98[v118];
          *v119 = *v120;
          v119[1] = v120[1];
          v121 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56);
          swift_bridgeObjectRetain();
          v121(v97, 0, 1, v23);
          return a1;
        }
        v101 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_62:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v101);
        v16 = *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64);
        v17 = (void *)v97;
        v18 = v98;
        goto LABEL_7;
      }
      if (v100)
      {
        sub_224DDEAA0(v97, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v101 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_62;
      }
      *(_BYTE *)v97 = *v98;
      *(_QWORD *)(v97 + 8) = *((_QWORD *)v98 + 1);
      *(_WORD *)(v97 + 16) = *((_WORD *)v98 + 8);
      *(_WORD *)(v97 + 18) = *((_WORD *)v98 + 9);
      v106 = (__int128 *)(v97 + 24);
      v107 = (__int128 *)(v98 + 24);
      v108 = *((_QWORD *)v98 + 7);
      if (*(_QWORD *)(v97 + 56) == 1)
      {
        if (v108 == 1)
        {
          v109 = *v107;
          v110 = *(_OWORD *)(v98 + 40);
          *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
          *v106 = v109;
          *(_OWORD *)(v97 + 40) = v110;
        }
        else
        {
          *(_BYTE *)(v97 + 24) = v98[24];
          *(_BYTE *)(v97 + 25) = v98[25];
          *(_BYTE *)(v97 + 26) = v98[26];
          v124 = *(_OWORD *)(v98 + 28);
          *(_DWORD *)(v97 + 44) = *((_DWORD *)v98 + 11);
          *(_OWORD *)(v97 + 28) = v124;
          *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
          *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v108 == 1)
      {
        sub_224E2C9F4(v97 + 24);
        v122 = *((_QWORD *)v98 + 7);
        v123 = *(_OWORD *)(v98 + 40);
        *v106 = *v107;
        *(_OWORD *)(v97 + 40) = v123;
        *(_QWORD *)(v97 + 56) = v122;
      }
      else
      {
        *(_BYTE *)(v97 + 24) = v98[24];
        *(_BYTE *)(v97 + 25) = v98[25];
        *(_BYTE *)(v97 + 26) = v98[26];
        *(_DWORD *)(v97 + 28) = *((_DWORD *)v98 + 7);
        *(_WORD *)(v97 + 32) = *((_WORD *)v98 + 16);
        *(_WORD *)(v97 + 34) = *((_WORD *)v98 + 17);
        *(_WORD *)(v97 + 36) = *((_WORD *)v98 + 18);
        *(_WORD *)(v97 + 38) = *((_WORD *)v98 + 19);
        *(_WORD *)(v97 + 40) = *((_WORD *)v98 + 20);
        *(_WORD *)(v97 + 42) = *((_WORD *)v98 + 21);
        *(_WORD *)(v97 + 44) = *((_WORD *)v98 + 22);
        *(_WORD *)(v97 + 46) = *((_WORD *)v98 + 23);
        *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
        *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v125 = *(int *)(v23 + 28);
      v126 = (void *)(v97 + v125);
      v127 = &v98[v125];
      v128 = sub_224F67874();
      v129 = *(_QWORD *)(v128 - 8);
      v130 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v129 + 48);
      v131 = v130(v126, 1, v128);
      v132 = v130(v127, 1, v128);
      if (v131)
      {
        if (!v132)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v129 + 16))(v126, v127, v128);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
LABEL_83:
          v134 = *(int *)(v23 + 32);
          v135 = (_QWORD *)(v97 + v134);
          v136 = &v98[v134];
          *v135 = *v136;
          v135[1] = v136[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
      }
      else
      {
        if (!v132)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v129 + 24))(v126, v127, v128);
          goto LABEL_83;
        }
        (*(void (**)(void *, uint64_t))(v129 + 8))(v126, v128);
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
      goto LABEL_83;
    }
    if (v27)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_17;
    }
    *v7 = *v8;
    *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
    *((_WORD *)v7 + 8) = *((_WORD *)v8 + 8);
    *((_WORD *)v7 + 9) = *((_WORD *)v8 + 9);
    v64 = (__int128 *)(v7 + 24);
    v65 = (__int128 *)(v8 + 24);
    v66 = *((_QWORD *)v8 + 7);
    v144 = v24;
    if (*((_QWORD *)v7 + 7) == 1)
    {
      if (v66 == 1)
      {
        v67 = *v65;
        v68 = *(_OWORD *)(v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        *v64 = v67;
        *(_OWORD *)(v7 + 40) = v68;
      }
      else
      {
        v7[24] = v8[24];
        v7[25] = v8[25];
        v7[26] = v8[26];
        v82 = *(_OWORD *)(v8 + 28);
        *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v82;
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v66 == 1)
    {
      sub_224E2C9F4((uint64_t)(v7 + 24));
      v80 = *((_QWORD *)v8 + 7);
      v81 = *(_OWORD *)(v8 + 40);
      *v64 = *v65;
      *(_OWORD *)(v7 + 40) = v81;
      *((_QWORD *)v7 + 7) = v80;
    }
    else
    {
      v7[24] = v8[24];
      v7[25] = v8[25];
      v7[26] = v8[26];
      *((_DWORD *)v7 + 7) = *((_DWORD *)v8 + 7);
      *((_WORD *)v7 + 16) = *((_WORD *)v8 + 16);
      *((_WORD *)v7 + 17) = *((_WORD *)v8 + 17);
      *((_WORD *)v7 + 18) = *((_WORD *)v8 + 18);
      *((_WORD *)v7 + 19) = *((_WORD *)v8 + 19);
      *((_WORD *)v7 + 20) = *((_WORD *)v8 + 20);
      *((_WORD *)v7 + 21) = *((_WORD *)v8 + 21);
      *((_WORD *)v7 + 22) = *((_WORD *)v8 + 22);
      *((_WORD *)v7 + 23) = *((_WORD *)v8 + 23);
      *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v83 = *(int *)(v23 + 28);
    v84 = &v7[v83];
    v85 = &v8[v83];
    v86 = sub_224F67874();
    v137 = *(_QWORD *)(v86 - 8);
    v87 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v137 + 48);
    __dstb = v84;
    LODWORD(v84) = v87(v84, 1, v86);
    v88 = v87(v85, 1, v86);
    if ((_DWORD)v84)
    {
      if (!v88)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v137 + 16))(__dstb, v85, v86);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(__dstb, 0, 1, v86);
        goto LABEL_56;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v90 = *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64);
      v91 = __dstb;
    }
    else
    {
      if (!v88)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v137 + 24))(__dstb, v85, v86);
        goto LABEL_56;
      }
      (*(void (**)(void *, uint64_t))(v137 + 8))(__dstb, v86);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v90 = *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64);
      v91 = __dstb;
    }
    memcpy(v91, v85, v90);
LABEL_56:
    v24 = v144;
    v93 = *(int *)(v23 + 32);
    v94 = &v7[v93];
    v95 = &v8[v93];
    *v94 = *v95;
    v94[1] = v95[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  if (v13)
  {
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v14);
    v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    v17 = v7;
    v18 = v8;
LABEL_7:
    memcpy(v17, v18, v16);
    return a1;
  }
  v19 = type metadata accessor for FHIRDateTime();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v8, 1, v19))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v29 = *((_QWORD *)v8 + 1);
    *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
    *((_QWORD *)v7 + 1) = v29;
    v141 = v20;
    if (*((_QWORD *)v8 + 7) == 1)
    {
      v30 = *(_OWORD *)(v8 + 24);
      v31 = *(_OWORD *)(v8 + 40);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      *(_OWORD *)(v7 + 24) = v30;
      *(_OWORD *)(v7 + 40) = v31;
    }
    else
    {
      v7[24] = v8[24];
      v7[25] = v8[25];
      v7[26] = v8[26];
      v33 = *(_OWORD *)(v8 + 28);
      *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
      *(_OWORD *)(v7 + 28) = v33;
      *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      swift_bridgeObjectRetain();
    }
    v34 = *(int *)(v19 + 28);
    __dst = &v7[v34];
    v35 = &v8[v34];
    v36 = sub_224F67874();
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 16))(__dst, v35, v36);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
    }
    v42 = *(int *)(v19 + 32);
    v43 = &v7[v42];
    v44 = &v8[v42];
    *v43 = *v44;
    v43[1] = v44[1];
    v20 = v141;
    v45 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v141 + 56);
    swift_bridgeObjectRetain();
    v45(v7, 0, 1, v19);
  }
  v46 = *(int *)(v9 + 20);
  v47 = &v7[v46];
  v48 = &v8[v46];
  if (v21(v48, 1, v19))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    *v47 = *v48;
    v50 = *((_QWORD *)v48 + 1);
    *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
    *((_QWORD *)v47 + 1) = v50;
    v143 = v20;
    if (*((_QWORD *)v48 + 7) == 1)
    {
      v51 = *(_OWORD *)(v48 + 24);
      v52 = *(_OWORD *)(v48 + 40);
      *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
      *(_OWORD *)(v47 + 24) = v51;
      *(_OWORD *)(v47 + 40) = v52;
    }
    else
    {
      v47[24] = v48[24];
      v47[25] = v48[25];
      v47[26] = v48[26];
      v53 = *(_OWORD *)(v48 + 28);
      *((_DWORD *)v47 + 11) = *((_DWORD *)v48 + 11);
      *(_OWORD *)(v47 + 28) = v53;
      *((_QWORD *)v47 + 6) = *((_QWORD *)v48 + 6);
      *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
      swift_bridgeObjectRetain();
    }
    v54 = *(int *)(v19 + 28);
    __dsta = &v47[v54];
    v55 = &v48[v54];
    v56 = sub_224F67874();
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v57 + 16))(__dsta, v55, v56);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v57 + 56))(__dsta, 0, 1, v56);
    }
    v59 = *(int *)(v19 + 32);
    v60 = &v47[v59];
    v61 = &v48[v59];
    *v60 = *v61;
    v60[1] = v61[1];
    v62 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v143 + 56);
    swift_bridgeObjectRetain();
    v62(v47, 0, 1, v19);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_QWORD *initializeWithTake for ModelsR4.DocumentReferenceContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_BYTE *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *__dst;
  _BYTE *__dsta;
  uint64_t v31;
  uint64_t v32;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Period();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for FHIRDateTime();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v6, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      *v5 = *v6;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
      *((_DWORD *)v5 + 4) = *((_DWORD *)v6 + 4);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
      *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
      *((_QWORD *)v5 + 7) = *((_QWORD *)v6 + 7);
      v14 = *(int *)(v10 + 28);
      __dst = &v5[v14];
      v31 = v11;
      v15 = &v6[v14];
      v16 = sub_224F67874();
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(__dst, v15, v16);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(_OWORD *)&v5[*(int *)(v10 + 32)] = *(_OWORD *)&v6[*(int *)(v10 + 32)];
      v11 = v31;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v5, 0, 1, v10);
    }
    v19 = *(int *)(v7 + 20);
    v20 = &v5[v19];
    v21 = &v6[v19];
    if (v12(v21, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v20 = *v21;
      *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
      *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
      *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
      v23 = *(int *)(v10 + 28);
      __dsta = &v20[v23];
      v32 = v11;
      v24 = &v21[v23];
      v25 = sub_224F67874();
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(__dsta, v24, v25);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dsta, 0, 1, v25);
      }
      *(_OWORD *)&v20[*(int *)(v10 + 32)] = *(_OWORD *)&v21[*(int *)(v10 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v20, 0, 1, v10);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for ModelsR4.DocumentReferenceContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  size_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t (*v57)(_BYTE *, uint64_t, uint64_t);
  int v58;
  uint64_t v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  int v71;
  int v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  void *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  void *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(void *, uint64_t, uint64_t);
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *__dst;
  _BYTE *__dsta;
  void *__dstb;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Period();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v23 = type metadata accessor for FHIRDateTime();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
    v26 = v25(v7, 1, v23);
    v27 = v25(v8, 1, v23);
    if (v26)
    {
      if (v27)
      {
        v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_17:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v28);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        goto LABEL_46;
      }
      v102 = v24;
      *v7 = *v8;
      *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      v35 = *(int *)(v23 + 28);
      v36 = &v7[v35];
      v37 = &v8[v35];
      v38 = sub_224F67874();
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      *(_OWORD *)&v7[*(int *)(v23 + 32)] = *(_OWORD *)&v8[*(int *)(v23 + 32)];
      v24 = v102;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v7, 0, 1, v23);
LABEL_46:
      v68 = *(int *)(v9 + 20);
      v69 = (uint64_t)&v7[v68];
      v70 = &v8[v68];
      v71 = v25((_BYTE *)v69, 1, v23);
      v72 = v25(v70, 1, v23);
      if (v71)
      {
        if (!v72)
        {
          *(_BYTE *)v69 = *v70;
          *(_QWORD *)(v69 + 8) = *((_QWORD *)v70 + 1);
          *(_DWORD *)(v69 + 16) = *((_DWORD *)v70 + 4);
          *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
          *(_OWORD *)(v69 + 40) = *(_OWORD *)(v70 + 40);
          *(_QWORD *)(v69 + 56) = *((_QWORD *)v70 + 7);
          v75 = *(int *)(v23 + 28);
          v76 = (void *)(v69 + v75);
          v77 = &v70[v75];
          v78 = sub_224F67874();
          v79 = *(_QWORD *)(v78 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v79 + 32))(v76, v77, v78);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
          }
          *(_OWORD *)(v69 + *(int *)(v23 + 32)) = *(_OWORD *)&v70[*(int *)(v23 + 32)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v69, 0, 1, v23);
          return a1;
        }
        v73 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_51:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v73);
        v16 = *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64);
        v17 = (void *)v69;
        v18 = v70;
        goto LABEL_7;
      }
      if (v72)
      {
        sub_224DDEAA0(v69, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v73 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_51;
      }
      *(_BYTE *)v69 = *v70;
      *(_QWORD *)(v69 + 8) = *((_QWORD *)v70 + 1);
      *(_DWORD *)(v69 + 16) = *((_DWORD *)v70 + 4);
      if (*(_QWORD *)(v69 + 56) != 1)
      {
        v81 = *((_QWORD *)v70 + 7);
        if (v81 != 1)
        {
          *(_BYTE *)(v69 + 24) = v70[24];
          *(_WORD *)(v69 + 25) = *(_WORD *)(v70 + 25);
          *(_DWORD *)(v69 + 28) = *((_DWORD *)v70 + 7);
          *(_OWORD *)(v69 + 32) = *((_OWORD *)v70 + 2);
          *(_QWORD *)(v69 + 48) = *((_QWORD *)v70 + 6);
          *(_QWORD *)(v69 + 56) = v81;
          swift_bridgeObjectRelease();
LABEL_61:
          v83 = *(int *)(v23 + 28);
          v84 = (void *)(v69 + v83);
          v85 = &v70[v83];
          v86 = sub_224F67874();
          v87 = *(_QWORD *)(v86 - 8);
          v88 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v87 + 48);
          v89 = v88(v84, 1, v86);
          v90 = v88(v85, 1, v86);
          if (v89)
          {
            if (!v90)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v87 + 32))(v84, v85, v86);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
LABEL_67:
              v92 = *(int *)(v23 + 32);
              v93 = (_QWORD *)(v69 + v92);
              v94 = (uint64_t *)&v70[v92];
              v96 = *v94;
              v95 = v94[1];
              *v93 = v96;
              v93[1] = v95;
              swift_bridgeObjectRelease();
              return a1;
            }
          }
          else
          {
            if (!v90)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v87 + 40))(v84, v85, v86);
              goto LABEL_67;
            }
            (*(void (**)(void *, uint64_t))(v87 + 8))(v84, v86);
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
          goto LABEL_67;
        }
        sub_224E2C9F4(v69 + 24);
      }
      v82 = *(_OWORD *)(v70 + 40);
      *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
      *(_OWORD *)(v69 + 40) = v82;
      *(_QWORD *)(v69 + 56) = *((_QWORD *)v70 + 7);
      goto LABEL_61;
    }
    if (v27)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_17;
    }
    *v7 = *v8;
    *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
    *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
    v104 = v24;
    if (*((_QWORD *)v7 + 7) != 1)
    {
      v51 = *((_QWORD *)v8 + 7);
      if (v51 != 1)
      {
        v7[24] = v8[24];
        *(_WORD *)(v7 + 25) = *(_WORD *)(v8 + 25);
        *((_DWORD *)v7 + 7) = *((_DWORD *)v8 + 7);
        *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = v51;
        swift_bridgeObjectRelease();
LABEL_37:
        v53 = *(int *)(v23 + 28);
        v54 = &v7[v53];
        v55 = &v8[v53];
        v56 = sub_224F67874();
        v97 = *(_QWORD *)(v56 - 8);
        v57 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v97 + 48);
        __dstb = v54;
        LODWORD(v54) = v57(v54, 1, v56);
        v58 = v57(v55, 1, v56);
        if ((_DWORD)v54)
        {
          if (!v58)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v97 + 32))(__dstb, v55, v56);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(__dstb, 0, 1, v56);
            goto LABEL_45;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v60 = *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64);
          v61 = __dstb;
        }
        else
        {
          if (!v58)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v97 + 40))(__dstb, v55, v56);
            goto LABEL_45;
          }
          (*(void (**)(void *, uint64_t))(v97 + 8))(__dstb, v56);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v60 = *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64);
          v61 = __dstb;
        }
        memcpy(v61, v55, v60);
LABEL_45:
        v24 = v104;
        v63 = *(int *)(v23 + 32);
        v64 = &v7[v63];
        v65 = (uint64_t *)&v8[v63];
        v67 = *v65;
        v66 = v65[1];
        *v64 = v67;
        v64[1] = v66;
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
      sub_224E2C9F4((uint64_t)(v7 + 24));
    }
    v52 = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 40) = v52;
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    goto LABEL_37;
  }
  if (v13)
  {
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v14);
    v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    v17 = v7;
    v18 = v8;
LABEL_7:
    memcpy(v17, v18, v16);
    return a1;
  }
  v19 = type metadata accessor for FHIRDateTime();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v8, 1, v19))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
    *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    v29 = *(int *)(v19 + 28);
    __dst = &v7[v29];
    v101 = v20;
    v30 = &v8[v29];
    v31 = sub_224F67874();
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32))(__dst, v30, v31);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
    }
    *(_OWORD *)&v7[*(int *)(v19 + 32)] = *(_OWORD *)&v8[*(int *)(v19 + 32)];
    v20 = v101;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v7, 0, 1, v19);
  }
  v41 = *(int *)(v9 + 20);
  v42 = &v7[v41];
  v43 = &v8[v41];
  if (v21(v43, 1, v19))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    *v42 = *v43;
    *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
    *((_DWORD *)v42 + 4) = *((_DWORD *)v43 + 4);
    *(_OWORD *)(v42 + 24) = *(_OWORD *)(v43 + 24);
    *(_OWORD *)(v42 + 40) = *(_OWORD *)(v43 + 40);
    *((_QWORD *)v42 + 7) = *((_QWORD *)v43 + 7);
    v45 = *(int *)(v19 + 28);
    __dsta = &v42[v45];
    v103 = v20;
    v46 = &v43[v45];
    v47 = sub_224F67874();
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v48 + 32))(__dsta, v46, v47);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v48 + 56))(__dsta, 0, 1, v47);
    }
    *(_OWORD *)&v42[*(int *)(v19 + 32)] = *(_OWORD *)&v43[*(int *)(v19 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v42, 0, 1, v19);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.DocumentReferenceContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E3D274(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.DocumentReferenceContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_224E3D320(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_224E3D3AC()
{
  unint64_t v0;

  sub_224DDEA0C(319, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelsR4.Immunization(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int (*v18)(_BYTE *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void (*v49)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int (*v59)(_QWORD *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(_QWORD *, uint64_t, uint64_t);
  uint64_t v68;
  void *v69;
  void (**v70)(void *, _QWORD, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  char *v102;
  uint64_t v103;
  void *__src;
  _BYTE *__dst;
  void (**__dsta)(void *, _QWORD, uint64_t, uint64_t);
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 != 1)
      swift_bridgeObjectRetain();
    v10 = a2[5];
    v11 = a2[6];
    a1[4] = v9;
    a1[5] = v10;
    v12 = a2[7];
    a1[6] = v11;
    a1[7] = v12;
    *(_QWORD *)((char *)a1 + 61) = *(_QWORD *)((char *)a2 + 61);
    v13 = a3[10];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    a1[9] = a2[9];
    v16 = type metadata accessor for FHIRDateTime();
    v17 = *(_QWORD **)(v16 - 8);
    v18 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v17[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
      *((_DWORD *)v14 + 4) = *((_DWORD *)v15 + 4);
      v21 = *((_QWORD *)v15 + 7);
      v107 = v17;
      if (v21 == 1)
      {
        v22 = *(_OWORD *)(v15 + 40);
        *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
        *(_OWORD *)(v14 + 40) = v22;
        *((_QWORD *)v14 + 7) = *((_QWORD *)v15 + 7);
      }
      else
      {
        v14[24] = v15[24];
        *(_WORD *)(v14 + 25) = *(_WORD *)(v15 + 25);
        *(_OWORD *)(v14 + 28) = *(_OWORD *)(v15 + 28);
        *((_DWORD *)v14 + 11) = *((_DWORD *)v15 + 11);
        *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
        *((_QWORD *)v14 + 7) = v21;
        swift_bridgeObjectRetain();
      }
      v23 = *(int *)(v16 + 28);
      __dst = &v14[v23];
      v24 = &v15[v23];
      v25 = sub_224F67874();
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 16))(__dst, v24, v25);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
      }
      v28 = *(int *)(v16 + 32);
      v29 = &v14[v28];
      v30 = &v15[v28];
      v31 = v30[1];
      *v29 = *v30;
      v29[1] = v31;
      v17 = v107;
      v32 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v107[7];
      swift_bridgeObjectRetain();
      v32(v14, 0, 1, v16);
    }
    v33 = a3[12];
    *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    swift_bridgeObjectRetain();
    if (v18(v35, 1, v16))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *v34 = *v35;
      *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
      *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
      v37 = *((_QWORD *)v35 + 7);
      v108 = v17;
      if (v37 == 1)
      {
        v38 = *(_OWORD *)(v35 + 40);
        *(_OWORD *)(v34 + 24) = *(_OWORD *)(v35 + 24);
        *(_OWORD *)(v34 + 40) = v38;
        *((_QWORD *)v34 + 7) = *((_QWORD *)v35 + 7);
      }
      else
      {
        v34[24] = v35[24];
        *(_WORD *)(v34 + 25) = *(_WORD *)(v35 + 25);
        *(_OWORD *)(v34 + 28) = *(_OWORD *)(v35 + 28);
        *((_DWORD *)v34 + 11) = *((_DWORD *)v35 + 11);
        *((_QWORD *)v34 + 6) = *((_QWORD *)v35 + 6);
        *((_QWORD *)v34 + 7) = v37;
        swift_bridgeObjectRetain();
      }
      v39 = *(int *)(v16 + 28);
      v40 = &v34[v39];
      v41 = &v35[v39];
      v42 = sub_224F67874();
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      v45 = *(int *)(v16 + 32);
      v46 = &v34[v45];
      v47 = &v35[v45];
      v48 = v47[1];
      *v46 = *v47;
      v46[1] = v48;
      v49 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v108[7];
      swift_bridgeObjectRetain();
      v49(v34, 0, 1, v16);
    }
    v50 = a3[13];
    v51 = a3[14];
    v52 = (_QWORD *)((char *)a1 + v50);
    v53 = (_QWORD *)((char *)a2 + v50);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v52[2] = v53[2];
    v55 = (_QWORD *)((char *)a1 + v51);
    v56 = (_QWORD *)((char *)a2 + v51);
    v57 = type metadata accessor for Reference();
    v58 = *(_QWORD **)(v57 - 8);
    v59 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))v58[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v59(v56, 1, v57))
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      __src = v55;
      __dsta = (void (**)(void *, _QWORD, uint64_t, uint64_t))v58;
      v61 = v56[1];
      *v55 = *v56;
      v55[1] = v61;
      v62 = v56[3];
      v55[2] = v56[2];
      v55[3] = v62;
      v63 = *(int *)(v57 + 24);
      v109 = (_QWORD *)((char *)v55 + v63);
      v64 = (_QWORD *)((char *)v56 + v63);
      v65 = type metadata accessor for Identifier();
      v66 = *(_QWORD *)(v65 - 8);
      v67 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v66 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v67(v64, 1, v65))
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v109, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        v69 = __src;
        v70 = __dsta;
      }
      else
      {
        v103 = v66;
        v71 = v64[1];
        *v109 = *v64;
        v109[1] = v71;
        v72 = v64[3];
        swift_bridgeObjectRetain();
        if (v72 == 1)
        {
          *((_OWORD *)v109 + 1) = *((_OWORD *)v64 + 1);
          v109[4] = v64[4];
        }
        else
        {
          v109[2] = v64[2];
          v109[3] = v72;
          v109[4] = v64[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v73 = v65;
        v69 = __src;
        v74 = *(int *)(v65 + 24);
        v102 = (char *)v109 + v74;
        v75 = (char *)v64 + v74;
        v76 = sub_224F675D4();
        v77 = *(_QWORD *)(v76 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v102, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v102, v75, v76);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v102, 0, 1, v76);
        }
        v70 = __dsta;
        v79 = *(int *)(v73 + 28);
        v80 = (_QWORD *)((char *)v109 + v79);
        v81 = (_QWORD *)((char *)v64 + v79);
        v82 = v81[1];
        *v80 = *v81;
        v80[1] = v82;
        v83 = v73;
        v84 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v103 + 56);
        swift_bridgeObjectRetain();
        v84(v109, 0, 1, v83);
      }
      v70[7](v69, 0, 1, v57);
    }
    v85 = a3[16];
    *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    v86 = (_QWORD *)((char *)a1 + v85);
    v87 = (_QWORD *)((char *)a2 + v85);
    v88 = v87[1];
    *v86 = *v87;
    v86[1] = v88;
    v89 = a3[18];
    *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
    *((_BYTE *)a1 + v89) = *((_BYTE *)a2 + v89);
    v90 = a3[19];
    v91 = (char *)a1 + v90;
    v92 = (char *)a2 + v90;
    v93 = *(_QWORD *)((char *)a2 + v90);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v93 == 1)
    {
      v94 = *((_OWORD *)v92 + 1);
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_OWORD *)v91 + 1) = v94;
      *((_OWORD *)v91 + 2) = *((_OWORD *)v92 + 2);
      *((_QWORD *)v91 + 6) = *((_QWORD *)v92 + 6);
    }
    else
    {
      *(_QWORD *)v91 = v93;
      v95 = *((_QWORD *)v92 + 2);
      swift_bridgeObjectRetain();
      if (v95 == 1)
      {
        *(_OWORD *)(v91 + 8) = *(_OWORD *)(v92 + 8);
        *((_QWORD *)v91 + 3) = *((_QWORD *)v92 + 3);
      }
      else
      {
        *((_QWORD *)v91 + 1) = *((_QWORD *)v92 + 1);
        *((_QWORD *)v91 + 2) = v95;
        *((_QWORD *)v91 + 3) = *((_QWORD *)v92 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v96 = *((_QWORD *)v92 + 5);
      *((_QWORD *)v91 + 4) = *((_QWORD *)v92 + 4);
      *((_QWORD *)v91 + 5) = v96;
      *((_QWORD *)v91 + 6) = *((_QWORD *)v92 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v97 = a3[20];
    v98 = (_QWORD *)((char *)a1 + v97);
    v99 = (_QWORD *)((char *)a2 + v97);
    v100 = v99[1];
    *v98 = *v99;
    v98[1] = v100;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsR4.Immunization(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[10];
  v5 = type metadata accessor for FHIRDateTime();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(_QWORD *)(v4 + 56) != 1)
      swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 28);
    v8 = sub_224F67874();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v10 = a1 + a2[12];
  if (!v6(v10, 1, v5))
  {
    if (*(_QWORD *)(v10 + 56) != 1)
      swift_bridgeObjectRelease();
    v11 = v10 + *(int *)(v5 + 28);
    v12 = sub_224F67874();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = a1 + a2[14];
  v15 = type metadata accessor for Reference();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = v14 + *(int *)(v15 + 24);
    v17 = type metadata accessor for Identifier();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v16 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v18 = v16 + *(int *)(v17 + 24);
      v19 = sub_224F675D4();
      v20 = *(_QWORD *)(v19 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = (_QWORD *)(a1 + a2[19]);
  if (*v21 != 1)
  {
    swift_bridgeObjectRelease();
    if (v21[2] != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsR4.Immunization(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(_QWORD *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(_QWORD *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  char *v100;
  uint64_t v101;
  void *__src;
  _BYTE *__dst;
  _QWORD *__dsta;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1)
    swift_bridgeObjectRetain();
  v9 = a2[5];
  v10 = a2[6];
  a1[4] = v8;
  a1[5] = v9;
  v11 = a2[7];
  a1[6] = v10;
  a1[7] = v11;
  *(_QWORD *)((char *)a1 + 61) = *(_QWORD *)((char *)a2 + 61);
  v12 = a3[10];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  a1[9] = a2[9];
  v15 = type metadata accessor for FHIRDateTime();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
    *((_DWORD *)v13 + 4) = *((_DWORD *)v14 + 4);
    v19 = *((_QWORD *)v14 + 7);
    v105 = v16;
    if (v19 == 1)
    {
      v20 = *(_OWORD *)(v14 + 40);
      *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
      *(_OWORD *)(v13 + 40) = v20;
      *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
    }
    else
    {
      v13[24] = v14[24];
      *(_WORD *)(v13 + 25) = *(_WORD *)(v14 + 25);
      *(_OWORD *)(v13 + 28) = *(_OWORD *)(v14 + 28);
      *((_DWORD *)v13 + 11) = *((_DWORD *)v14 + 11);
      *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
      *((_QWORD *)v13 + 7) = v19;
      swift_bridgeObjectRetain();
    }
    v21 = *(int *)(v15 + 28);
    __dst = &v13[v21];
    v22 = &v14[v21];
    v23 = sub_224F67874();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 16))(__dst, v22, v23);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
    }
    v26 = *(int *)(v15 + 32);
    v27 = &v13[v26];
    v28 = &v14[v26];
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v16 = v105;
    v30 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v105 + 56);
    swift_bridgeObjectRetain();
    v30(v13, 0, 1, v15);
  }
  v31 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  swift_bridgeObjectRetain();
  if (v17(v33, 1, v15))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    *v32 = *v33;
    *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
    *((_DWORD *)v32 + 4) = *((_DWORD *)v33 + 4);
    v35 = *((_QWORD *)v33 + 7);
    v106 = v16;
    if (v35 == 1)
    {
      v36 = *(_OWORD *)(v33 + 40);
      *(_OWORD *)(v32 + 24) = *(_OWORD *)(v33 + 24);
      *(_OWORD *)(v32 + 40) = v36;
      *((_QWORD *)v32 + 7) = *((_QWORD *)v33 + 7);
    }
    else
    {
      v32[24] = v33[24];
      *(_WORD *)(v32 + 25) = *(_WORD *)(v33 + 25);
      *(_OWORD *)(v32 + 28) = *(_OWORD *)(v33 + 28);
      *((_DWORD *)v32 + 11) = *((_DWORD *)v33 + 11);
      *((_QWORD *)v32 + 6) = *((_QWORD *)v33 + 6);
      *((_QWORD *)v32 + 7) = v35;
      swift_bridgeObjectRetain();
    }
    v37 = *(int *)(v15 + 28);
    v38 = &v32[v37];
    v39 = &v33[v37];
    v40 = sub_224F67874();
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v43 = *(int *)(v15 + 32);
    v44 = &v32[v43];
    v45 = &v33[v43];
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v106 + 56);
    swift_bridgeObjectRetain();
    v47(v32, 0, 1, v15);
  }
  v48 = a3[13];
  v49 = a3[14];
  v50 = (_QWORD *)((char *)a1 + v48);
  v51 = (_QWORD *)((char *)a2 + v48);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v50[2] = v51[2];
  v53 = (_QWORD *)((char *)a1 + v49);
  v54 = (_QWORD *)((char *)a2 + v49);
  v55 = type metadata accessor for Reference();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v56 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v57(v54, 1, v55))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v107 = v56;
    v59 = v54[1];
    *v53 = *v54;
    v53[1] = v59;
    v60 = v54[3];
    v53[2] = v54[2];
    v53[3] = v60;
    v61 = *(int *)(v55 + 24);
    __src = v53;
    __dsta = (_QWORD *)((char *)v53 + v61);
    v62 = (_QWORD *)((char *)v54 + v61);
    v63 = type metadata accessor for Identifier();
    v64 = *(_QWORD *)(v63 - 8);
    v65 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v64 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v65(v62, 1, v63))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v62, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      v67 = v107;
      v68 = __src;
    }
    else
    {
      v101 = v64;
      v69 = v62[1];
      *__dsta = *v62;
      __dsta[1] = v69;
      v70 = v62[3];
      swift_bridgeObjectRetain();
      if (v70 == 1)
      {
        *((_OWORD *)__dsta + 1) = *((_OWORD *)v62 + 1);
        __dsta[4] = v62[4];
      }
      else
      {
        __dsta[2] = v62[2];
        __dsta[3] = v70;
        __dsta[4] = v62[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v71 = v63;
      v68 = __src;
      v72 = *(int *)(v63 + 24);
      v100 = (char *)__dsta + v72;
      v73 = (char *)v62 + v72;
      v74 = sub_224F675D4();
      v75 = *(_QWORD *)(v74 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v100, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v100, v73, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v100, 0, 1, v74);
      }
      v67 = v107;
      v77 = *(int *)(v71 + 28);
      v78 = (_QWORD *)((char *)__dsta + v77);
      v79 = (_QWORD *)((char *)v62 + v77);
      v80 = v79[1];
      *v78 = *v79;
      v78[1] = v80;
      v81 = v71;
      v82 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v101 + 56);
      swift_bridgeObjectRetain();
      v82(__dsta, 0, 1, v81);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v68, 0, 1, v55);
  }
  v83 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  v84 = (_QWORD *)((char *)a1 + v83);
  v85 = (_QWORD *)((char *)a2 + v83);
  v86 = v85[1];
  *v84 = *v85;
  v84[1] = v86;
  v87 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  *((_BYTE *)a1 + v87) = *((_BYTE *)a2 + v87);
  v88 = a3[19];
  v89 = (char *)a1 + v88;
  v90 = (char *)a2 + v88;
  v91 = *(_QWORD *)((char *)a2 + v88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v91 == 1)
  {
    v92 = *((_OWORD *)v90 + 1);
    *(_OWORD *)v89 = *(_OWORD *)v90;
    *((_OWORD *)v89 + 1) = v92;
    *((_OWORD *)v89 + 2) = *((_OWORD *)v90 + 2);
    *((_QWORD *)v89 + 6) = *((_QWORD *)v90 + 6);
  }
  else
  {
    *(_QWORD *)v89 = v91;
    v93 = *((_QWORD *)v90 + 2);
    swift_bridgeObjectRetain();
    if (v93 == 1)
    {
      *(_OWORD *)(v89 + 8) = *(_OWORD *)(v90 + 8);
      *((_QWORD *)v89 + 3) = *((_QWORD *)v90 + 3);
    }
    else
    {
      *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
      *((_QWORD *)v89 + 2) = v93;
      *((_QWORD *)v89 + 3) = *((_QWORD *)v90 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v94 = *((_QWORD *)v90 + 5);
    *((_QWORD *)v89 + 4) = *((_QWORD *)v90 + 4);
    *((_QWORD *)v89 + 5) = v94;
    *((_QWORD *)v89 + 6) = *((_QWORD *)v90 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v95 = a3[20];
  v96 = (_QWORD *)((char *)a1 + v95);
  v97 = (_QWORD *)((char *)a2 + v95);
  v98 = v97[1];
  *v96 = *v97;
  v96[1] = v98;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.Immunization(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  void (*v38)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t (*v46)(void *, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  __int128 *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  void (*v80)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  void *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(void *, uint64_t, uint64_t);
  int v90;
  uint64_t v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t (*v106)(_QWORD *, uint64_t, uint64_t);
  int v107;
  int v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  size_t v111;
  void *v112;
  const void *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  unsigned int (*v118)(_QWORD *, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t, uint64_t, uint64_t);
  int v126;
  int v127;
  uint64_t (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  void (*v143)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  __int128 *v159;
  __int128 *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  __int128 *v168;
  __int128 *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  void *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  char *v180;
  void (*v181)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  void *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t (*v188)(void *, uint64_t, uint64_t);
  int v189;
  uint64_t v190;
  size_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *__src;
  void *__dst;
  void *__dsta;
  _QWORD *__dstb;
  void *__dstc;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  void *v207;
  int *v208;
  int *v209;
  int *v210;
  int *v211;
  int *v212;
  int *v213;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a1 + 4;
  v7 = a2[4];
  if (a1[4] == 1)
  {
    if (v7 == 1)
    {
      v8 = 1;
LABEL_6:
      *v6 = v8;
      goto LABEL_9;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_224E2C98C((uint64_t)(a1 + 4));
      v8 = a2[4];
      goto LABEL_6;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = a2[7];
  *(_QWORD *)((char *)a1 + 61) = *(_QWORD *)((char *)a2 + 61);
  a1[7] = v9;
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[10];
  v11 = (uint64_t)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for FHIRDateTime();
  v14 = *(_QWORD **)(v13 - 8);
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14[6];
  v16 = v15(v11, 1, v13);
  v17 = v15((uint64_t)v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      sub_224DDEAA0(v11, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_14;
    }
    v205 = v14;
    v209 = a3;
    *(_BYTE *)v11 = *v12;
    *(_QWORD *)(v11 + 8) = *((_QWORD *)v12 + 1);
    *(_WORD *)(v11 + 16) = *((_WORD *)v12 + 8);
    *(_WORD *)(v11 + 18) = *((_WORD *)v12 + 9);
    v23 = (__int128 *)(v11 + 24);
    v24 = (__int128 *)(v12 + 24);
    v25 = *((_QWORD *)v12 + 7);
    if (*(_QWORD *)(v11 + 56) == 1)
    {
      if (v25 == 1)
      {
        v26 = *v24;
        v27 = *(_OWORD *)(v12 + 40);
        *(_QWORD *)(v11 + 56) = *((_QWORD *)v12 + 7);
        *v23 = v26;
        *(_OWORD *)(v11 + 40) = v27;
      }
      else
      {
        *(_BYTE *)(v11 + 24) = v12[24];
        *(_BYTE *)(v11 + 25) = v12[25];
        *(_BYTE *)(v11 + 26) = v12[26];
        v41 = *(_OWORD *)(v12 + 28);
        *(_DWORD *)(v11 + 44) = *((_DWORD *)v12 + 11);
        *(_OWORD *)(v11 + 28) = v41;
        *(_QWORD *)(v11 + 48) = *((_QWORD *)v12 + 6);
        *(_QWORD *)(v11 + 56) = *((_QWORD *)v12 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v25 == 1)
    {
      sub_224E2C9F4(v11 + 24);
      v39 = *((_QWORD *)v12 + 7);
      v40 = *(_OWORD *)(v12 + 40);
      *v23 = *v24;
      *(_OWORD *)(v11 + 40) = v40;
      *(_QWORD *)(v11 + 56) = v39;
    }
    else
    {
      *(_BYTE *)(v11 + 24) = v12[24];
      *(_BYTE *)(v11 + 25) = v12[25];
      *(_BYTE *)(v11 + 26) = v12[26];
      *(_DWORD *)(v11 + 28) = *((_DWORD *)v12 + 7);
      *(_WORD *)(v11 + 32) = *((_WORD *)v12 + 16);
      *(_WORD *)(v11 + 34) = *((_WORD *)v12 + 17);
      *(_WORD *)(v11 + 36) = *((_WORD *)v12 + 18);
      *(_WORD *)(v11 + 38) = *((_WORD *)v12 + 19);
      *(_WORD *)(v11 + 40) = *((_WORD *)v12 + 20);
      *(_WORD *)(v11 + 42) = *((_WORD *)v12 + 21);
      *(_WORD *)(v11 + 44) = *((_WORD *)v12 + 22);
      *(_WORD *)(v11 + 46) = *((_WORD *)v12 + 23);
      *(_QWORD *)(v11 + 48) = *((_QWORD *)v12 + 6);
      *(_QWORD *)(v11 + 56) = *((_QWORD *)v12 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v42 = *(int *)(v13 + 28);
    v43 = (void *)(v11 + v42);
    v44 = &v12[v42];
    v45 = sub_224F67874();
    v197 = *(_QWORD *)(v45 - 8);
    v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v197 + 48);
    __dst = v43;
    LODWORD(v43) = v46(v43, 1, v45);
    v47 = v46(v44, 1, v45);
    if ((_DWORD)v43)
    {
      if (!v47)
      {
        (*(void (**)(void *, char *, uint64_t))(v197 + 16))(__dst, v44, v45);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v197 + 56))(__dst, 0, 1, v45);
        goto LABEL_37;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v49 = *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64);
      v50 = __dst;
    }
    else
    {
      if (!v47)
      {
        (*(void (**)(void *, char *, uint64_t))(v197 + 24))(__dst, v44, v45);
        goto LABEL_37;
      }
      (*(void (**)(void *, uint64_t))(v197 + 8))(__dst, v45);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v49 = *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64);
      v50 = __dst;
    }
    memcpy(v50, v44, v49);
LABEL_37:
    v14 = v205;
    a3 = v209;
    v52 = *(int *)(v13 + 32);
    v53 = (_QWORD *)(v11 + v52);
    v54 = &v12[v52];
    *v53 = *(_QWORD *)v54;
    v53[1] = *((_QWORD *)v54 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  if (v17)
  {
    v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_14:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v18);
    memcpy((void *)v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_38;
  }
  *(_BYTE *)v11 = *v12;
  v20 = *((_QWORD *)v12 + 1);
  *(_DWORD *)(v11 + 16) = *((_DWORD *)v12 + 4);
  *(_QWORD *)(v11 + 8) = v20;
  v204 = v14;
  v208 = a3;
  if (*((_QWORD *)v12 + 7) == 1)
  {
    v21 = *(_OWORD *)(v12 + 24);
    v22 = *(_OWORD *)(v12 + 40);
    *(_QWORD *)(v11 + 56) = *((_QWORD *)v12 + 7);
    *(_OWORD *)(v11 + 24) = v21;
    *(_OWORD *)(v11 + 40) = v22;
  }
  else
  {
    *(_BYTE *)(v11 + 24) = v12[24];
    *(_BYTE *)(v11 + 25) = v12[25];
    *(_BYTE *)(v11 + 26) = v12[26];
    v28 = *(_OWORD *)(v12 + 28);
    *(_DWORD *)(v11 + 44) = *((_DWORD *)v12 + 11);
    *(_OWORD *)(v11 + 28) = v28;
    *(_QWORD *)(v11 + 48) = *((_QWORD *)v12 + 6);
    *(_QWORD *)(v11 + 56) = *((_QWORD *)v12 + 7);
    swift_bridgeObjectRetain();
  }
  v29 = *(int *)(v13 + 28);
  v30 = (void *)(v11 + v29);
  v31 = &v12[v29];
  v32 = sub_224F67874();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v14 = v204;
  a3 = v208;
  v35 = *(int *)(v13 + 32);
  v36 = (_QWORD *)(v11 + v35);
  v37 = &v12[v35];
  *v36 = *(_QWORD *)v37;
  v36[1] = *((_QWORD *)v37 + 1);
  v38 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v204[7];
  swift_bridgeObjectRetain();
  v38(v11, 0, 1, v13);
LABEL_38:
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v55 = a3[12];
  v56 = (uint64_t)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = v15((uint64_t)a1 + v55, 1, v13);
  v59 = v15((uint64_t)v57, 1, v13);
  if (!v58)
  {
    if (v59)
    {
      sub_224DDEAA0(v56, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v60 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_43;
    }
    *(_BYTE *)v56 = *v57;
    *(_QWORD *)(v56 + 8) = *((_QWORD *)v57 + 1);
    *(_WORD *)(v56 + 16) = *((_WORD *)v57 + 8);
    *(_WORD *)(v56 + 18) = *((_WORD *)v57 + 9);
    v65 = (__int128 *)(v56 + 24);
    v66 = (__int128 *)(v57 + 24);
    v67 = *((_QWORD *)v57 + 7);
    v210 = a3;
    if (*(_QWORD *)(v56 + 56) == 1)
    {
      if (v67 == 1)
      {
        v68 = *v66;
        v69 = *(_OWORD *)(v57 + 40);
        *(_QWORD *)(v56 + 56) = *((_QWORD *)v57 + 7);
        *v65 = v68;
        *(_OWORD *)(v56 + 40) = v69;
      }
      else
      {
        *(_BYTE *)(v56 + 24) = v57[24];
        *(_BYTE *)(v56 + 25) = v57[25];
        *(_BYTE *)(v56 + 26) = v57[26];
        v83 = *(_OWORD *)(v57 + 28);
        *(_DWORD *)(v56 + 44) = *((_DWORD *)v57 + 11);
        *(_OWORD *)(v56 + 28) = v83;
        *(_QWORD *)(v56 + 48) = *((_QWORD *)v57 + 6);
        *(_QWORD *)(v56 + 56) = *((_QWORD *)v57 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v67 == 1)
    {
      sub_224E2C9F4(v56 + 24);
      v81 = *((_QWORD *)v57 + 7);
      v82 = *(_OWORD *)(v57 + 40);
      *v65 = *v66;
      *(_OWORD *)(v56 + 40) = v82;
      *(_QWORD *)(v56 + 56) = v81;
    }
    else
    {
      *(_BYTE *)(v56 + 24) = v57[24];
      *(_BYTE *)(v56 + 25) = v57[25];
      *(_BYTE *)(v56 + 26) = v57[26];
      *(_DWORD *)(v56 + 28) = *((_DWORD *)v57 + 7);
      *(_WORD *)(v56 + 32) = *((_WORD *)v57 + 16);
      *(_WORD *)(v56 + 34) = *((_WORD *)v57 + 17);
      *(_WORD *)(v56 + 36) = *((_WORD *)v57 + 18);
      *(_WORD *)(v56 + 38) = *((_WORD *)v57 + 19);
      *(_WORD *)(v56 + 40) = *((_WORD *)v57 + 20);
      *(_WORD *)(v56 + 42) = *((_WORD *)v57 + 21);
      *(_WORD *)(v56 + 44) = *((_WORD *)v57 + 22);
      *(_WORD *)(v56 + 46) = *((_WORD *)v57 + 23);
      *(_QWORD *)(v56 + 48) = *((_QWORD *)v57 + 6);
      *(_QWORD *)(v56 + 56) = *((_QWORD *)v57 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v84 = *(int *)(v13 + 28);
    v85 = (void *)(v56 + v84);
    v86 = &v57[v84];
    v87 = sub_224F67874();
    v88 = *(_QWORD *)(v87 - 8);
    v89 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v88 + 48);
    __dsta = v85;
    LODWORD(v85) = v89(v85, 1, v87);
    v90 = v89(v86, 1, v87);
    if ((_DWORD)v85)
    {
      if (!v90)
      {
        (*(void (**)(void *, char *, uint64_t))(v88 + 16))(__dsta, v86, v87);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(__dsta, 0, 1, v87);
        goto LABEL_66;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v92 = *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64);
      v93 = __dsta;
    }
    else
    {
      if (!v90)
      {
        (*(void (**)(void *, char *, uint64_t))(v88 + 24))(__dsta, v86, v87);
        goto LABEL_66;
      }
      (*(void (**)(void *, uint64_t))(v88 + 8))(__dsta, v87);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v92 = *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64);
      v93 = __dsta;
    }
    memcpy(v93, v86, v92);
LABEL_66:
    a3 = v210;
    v95 = *(int *)(v13 + 32);
    v96 = (_QWORD *)(v56 + v95);
    v97 = &v57[v95];
    *v96 = *(_QWORD *)v97;
    v96[1] = *((_QWORD *)v97 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  if (v59)
  {
    v60 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_43:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v60);
    memcpy((void *)v56, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_67;
  }
  *(_BYTE *)v56 = *v57;
  v62 = *((_QWORD *)v57 + 1);
  *(_DWORD *)(v56 + 16) = *((_DWORD *)v57 + 4);
  *(_QWORD *)(v56 + 8) = v62;
  v206 = v14;
  if (*((_QWORD *)v57 + 7) == 1)
  {
    v63 = *(_OWORD *)(v57 + 24);
    v64 = *(_OWORD *)(v57 + 40);
    *(_QWORD *)(v56 + 56) = *((_QWORD *)v57 + 7);
    *(_OWORD *)(v56 + 24) = v63;
    *(_OWORD *)(v56 + 40) = v64;
  }
  else
  {
    *(_BYTE *)(v56 + 24) = v57[24];
    *(_BYTE *)(v56 + 25) = v57[25];
    *(_BYTE *)(v56 + 26) = v57[26];
    v70 = *(_OWORD *)(v57 + 28);
    *(_DWORD *)(v56 + 44) = *((_DWORD *)v57 + 11);
    *(_OWORD *)(v56 + 28) = v70;
    *(_QWORD *)(v56 + 48) = *((_QWORD *)v57 + 6);
    *(_QWORD *)(v56 + 56) = *((_QWORD *)v57 + 7);
    swift_bridgeObjectRetain();
  }
  v71 = *(int *)(v13 + 28);
  v72 = (void *)(v56 + v71);
  v73 = &v57[v71];
  v74 = sub_224F67874();
  v75 = *(_QWORD *)(v74 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v75 + 16))(v72, v73, v74);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
  }
  v77 = *(int *)(v13 + 32);
  v78 = (_QWORD *)(v56 + v77);
  v79 = &v57[v77];
  *v78 = *(_QWORD *)v79;
  v78[1] = *((_QWORD *)v79 + 1);
  v80 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v206[7];
  swift_bridgeObjectRetain();
  v80(v56, 0, 1, v13);
LABEL_67:
  v98 = a3[13];
  v99 = (_QWORD *)((char *)a1 + v98);
  v100 = (char *)a2 + v98;
  *v99 = *(_QWORD *)((char *)a2 + v98);
  v99[1] = *(_QWORD *)((char *)a2 + v98 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v99[2] = *((_QWORD *)v100 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v101 = a3[14];
  v102 = (_QWORD *)((char *)a1 + v101);
  v103 = (_QWORD *)((char *)a2 + v101);
  v104 = type metadata accessor for Reference();
  v105 = *(_QWORD **)(v104 - 8);
  v106 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v105[6];
  v107 = v106(v102, 1, v104);
  v108 = v106(v103, 1, v104);
  if (!v107)
  {
    if (v108)
    {
      sub_224DDEAA0((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v109 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_72;
    }
    *v102 = *v103;
    v102[1] = v103[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v102[2] = v103[2];
    v102[3] = v103[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v120 = *(int *)(v104 + 24);
    v121 = (uint64_t)v102 + v120;
    v122 = (char *)v103 + v120;
    v123 = type metadata accessor for Identifier();
    v124 = *(_QWORD *)(v123 - 8);
    v125 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
    v126 = v125(v121, 1, v123);
    v127 = v125((uint64_t)v122, 1, v123);
    if (v126)
    {
      if (!v127)
      {
        *(_QWORD *)v121 = *(_QWORD *)v122;
        *(_QWORD *)(v121 + 8) = *((_QWORD *)v122 + 1);
        v138 = *((_QWORD *)v122 + 3);
        swift_bridgeObjectRetain();
        v212 = a3;
        if (v138 == 1)
        {
          v139 = *((_OWORD *)v122 + 1);
          *(_QWORD *)(v121 + 32) = *((_QWORD *)v122 + 4);
          *(_OWORD *)(v121 + 16) = v139;
        }
        else
        {
          *(_QWORD *)(v121 + 16) = *((_QWORD *)v122 + 2);
          *(_QWORD *)(v121 + 24) = *((_QWORD *)v122 + 3);
          *(_QWORD *)(v121 + 32) = *((_QWORD *)v122 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v172 = *(int *)(v123 + 24);
        v173 = (void *)(v121 + v172);
        v174 = &v122[v172];
        v175 = sub_224F675D4();
        v176 = *(_QWORD *)(v175 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v176 + 16))(v173, v174, v175);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
        }
        a3 = v212;
        v178 = *(int *)(v123 + 28);
        v179 = (_QWORD *)(v121 + v178);
        v180 = &v122[v178];
        *v179 = *(_QWORD *)v180;
        v179[1] = *((_QWORD *)v180 + 1);
        v181 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v124 + 56);
        swift_bridgeObjectRetain();
        v181(v121, 0, 1, v123);
        goto LABEL_92;
      }
      v128 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_84;
    }
    if (v127)
    {
      sub_224DDEAA0(v121, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v128 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_84:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v128);
      v111 = *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64);
      v112 = (void *)v121;
      v113 = v122;
      goto LABEL_73;
    }
    *(_QWORD *)v121 = *(_QWORD *)v122;
    *(_QWORD *)(v121 + 8) = *((_QWORD *)v122 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v168 = (__int128 *)(v121 + 16);
    v169 = (__int128 *)(v122 + 16);
    v170 = *((_QWORD *)v122 + 3);
    v213 = a3;
    if (*(_QWORD *)(v121 + 24) == 1)
    {
      if (v170 == 1)
      {
        v171 = *v169;
        *(_QWORD *)(v121 + 32) = *((_QWORD *)v122 + 4);
        *v168 = v171;
      }
      else
      {
        *(_QWORD *)(v121 + 16) = *((_QWORD *)v122 + 2);
        *(_QWORD *)(v121 + 24) = *((_QWORD *)v122 + 3);
        *(_QWORD *)(v121 + 32) = *((_QWORD *)v122 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v170 == 1)
    {
      sub_224E2C9C0(v121 + 16);
      v182 = *((_QWORD *)v122 + 4);
      *v168 = *v169;
      *(_QWORD *)(v121 + 32) = v182;
    }
    else
    {
      *(_QWORD *)(v121 + 16) = *((_QWORD *)v122 + 2);
      *(_QWORD *)(v121 + 24) = *((_QWORD *)v122 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v121 + 32) = *((_QWORD *)v122 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v183 = *(int *)(v123 + 24);
    v184 = (void *)(v121 + v183);
    v185 = &v122[v183];
    v186 = sub_224F675D4();
    v187 = *(_QWORD *)(v186 - 8);
    v188 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v187 + 48);
    __dstc = v184;
    LODWORD(v184) = v188(v184, 1, v186);
    v189 = v188(v185, 1, v186);
    if ((_DWORD)v184)
    {
      if (!v189)
      {
        (*(void (**)(void *, char *, uint64_t))(v187 + 16))(__dstc, v185, v186);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v187 + 56))(__dstc, 0, 1, v186);
        goto LABEL_130;
      }
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v191 = *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64);
      v192 = __dstc;
    }
    else
    {
      if (!v189)
      {
        (*(void (**)(void *, char *, uint64_t))(v187 + 24))(__dstc, v185, v186);
        goto LABEL_130;
      }
      (*(void (**)(void *, uint64_t))(v187 + 8))(__dstc, v186);
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v191 = *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64);
      v192 = __dstc;
    }
    memcpy(v192, v185, v191);
LABEL_130:
    a3 = v213;
    v194 = *(int *)(v123 + 28);
    v195 = (_QWORD *)(v121 + v194);
    v196 = &v122[v194];
    *v195 = *(_QWORD *)v196;
    v195[1] = *((_QWORD *)v196 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_92;
  }
  if (v108)
  {
    v109 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_72:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v109);
    v111 = *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64);
    v112 = v102;
    v113 = v103;
LABEL_73:
    memcpy(v112, v113, v111);
    goto LABEL_92;
  }
  v207 = v105;
  v211 = a3;
  *v102 = *v103;
  v102[1] = v103[1];
  v102[2] = v103[2];
  v102[3] = v103[3];
  v114 = *(int *)(v104 + 24);
  __dstb = (_QWORD *)((char *)v102 + v114);
  v115 = (_QWORD *)((char *)v103 + v114);
  v116 = type metadata accessor for Identifier();
  v117 = *(_QWORD **)(v116 - 8);
  v118 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))v117[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v118(v115, 1, v116))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dstb, v115, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    a3 = v211;
  }
  else
  {
    __src = v117;
    *__dstb = *v115;
    __dstb[1] = v115[1];
    v129 = v115[3];
    swift_bridgeObjectRetain();
    if (v129 == 1)
    {
      v130 = *((_OWORD *)v115 + 1);
      __dstb[4] = v115[4];
      *((_OWORD *)__dstb + 1) = v130;
    }
    else
    {
      __dstb[2] = v115[2];
      __dstb[3] = v115[3];
      __dstb[4] = v115[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v198 = v116;
    v132 = *(int *)(v116 + 24);
    v133 = (char *)__dstb + v132;
    v134 = (char *)v115 + v132;
    v135 = sub_224F675D4();
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v133, v134, v135);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    a3 = v211;
    v140 = *(int *)(v198 + 28);
    v141 = (_QWORD *)((char *)__dstb + v140);
    v142 = (_QWORD *)((char *)v115 + v140);
    *v141 = *v142;
    v141[1] = v142[1];
    v143 = (void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__src[7];
    swift_bridgeObjectRetain();
    v143(__dstb, 0, 1, v198);
  }
  (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v207 + 7))(v102, 0, 1, v104);
LABEL_92:
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  v144 = a3[16];
  v145 = (_QWORD *)((char *)a1 + v144);
  v146 = (_QWORD *)((char *)a2 + v144);
  *v145 = *v146;
  v145[1] = v146[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  v147 = a3[19];
  v148 = (char *)a1 + v147;
  v149 = (char *)a2 + v147;
  v150 = *(_QWORD *)((char *)a2 + v147);
  if (*(_QWORD *)((char *)a1 + v147) == 1)
  {
    if (v150 == 1)
    {
      v151 = *(_OWORD *)v149;
      v152 = *((_OWORD *)v149 + 1);
      v153 = *((_OWORD *)v149 + 2);
      *((_QWORD *)v148 + 6) = *((_QWORD *)v149 + 6);
      *((_OWORD *)v148 + 1) = v152;
      *((_OWORD *)v148 + 2) = v153;
      *(_OWORD *)v148 = v151;
    }
    else
    {
      *(_QWORD *)v148 = v150;
      v157 = *((_QWORD *)v149 + 2);
      swift_bridgeObjectRetain();
      if (v157 == 1)
      {
        v158 = *(_OWORD *)(v149 + 8);
        *((_QWORD *)v148 + 3) = *((_QWORD *)v149 + 3);
        *(_OWORD *)(v148 + 8) = v158;
      }
      else
      {
        *((_QWORD *)v148 + 1) = *((_QWORD *)v149 + 1);
        *((_QWORD *)v148 + 2) = *((_QWORD *)v149 + 2);
        *((_QWORD *)v148 + 3) = *((_QWORD *)v149 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      *((_QWORD *)v148 + 4) = *((_QWORD *)v149 + 4);
      *((_QWORD *)v148 + 5) = *((_QWORD *)v149 + 5);
      *((_QWORD *)v148 + 6) = *((_QWORD *)v149 + 6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v150 == 1)
  {
    sub_224E3FA9C((uint64_t)a1 + v147);
    v155 = *((_OWORD *)v149 + 1);
    v154 = *((_OWORD *)v149 + 2);
    v156 = *(_OWORD *)v149;
    *((_QWORD *)v148 + 6) = *((_QWORD *)v149 + 6);
    *((_OWORD *)v148 + 1) = v155;
    *((_OWORD *)v148 + 2) = v154;
    *(_OWORD *)v148 = v156;
  }
  else
  {
    *(_QWORD *)v148 = v150;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v159 = (__int128 *)(v148 + 8);
    v160 = (__int128 *)(v149 + 8);
    v161 = *((_QWORD *)v149 + 2);
    if (*((_QWORD *)v148 + 2) == 1)
    {
      if (v161 == 1)
      {
        v162 = *v160;
        *((_QWORD *)v148 + 3) = *((_QWORD *)v149 + 3);
        *v159 = v162;
      }
      else
      {
        *((_QWORD *)v148 + 1) = *((_QWORD *)v149 + 1);
        *((_QWORD *)v148 + 2) = *((_QWORD *)v149 + 2);
        *((_QWORD *)v148 + 3) = *((_QWORD *)v149 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v161 == 1)
    {
      sub_224E2C9C0((uint64_t)(v148 + 8));
      v163 = *((_QWORD *)v149 + 3);
      *v159 = *v160;
      *((_QWORD *)v148 + 3) = v163;
    }
    else
    {
      *((_QWORD *)v148 + 1) = *((_QWORD *)v149 + 1);
      *((_QWORD *)v148 + 2) = *((_QWORD *)v149 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v148 + 3) = *((_QWORD *)v149 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    *((_QWORD *)v148 + 4) = *((_QWORD *)v149 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v148 + 5) = *((_QWORD *)v149 + 5);
    *((_QWORD *)v148 + 6) = *((_QWORD *)v149 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v164 = a3[20];
  v165 = (_QWORD *)((char *)a1 + v164);
  v166 = (_QWORD *)((char *)a2 + v164);
  *v165 = *v166;
  v165[1] = v166[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_224E3FA9C(uint64_t a1)
{
  destroy for Location(a1);
  return a1;
}

uint64_t initializeWithTake for ModelsR4.Immunization(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  uint64_t v43;
  unsigned int (**v44)(_OWORD *, uint64_t, uint64_t);
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v61;
  void *__src;
  _BYTE *__dst;
  void *__dsta;
  _QWORD *v65;
  void *v66;
  char *v67;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 61) = *(_QWORD *)(a2 + 61);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = a3[10];
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  *(_OWORD *)(a1 + 40) = v7;
  v11 = type metadata accessor for FHIRDateTime();
  v12 = *(_QWORD **)(v11 - 8);
  v13 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v12[6];
  if (v13(v10, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
    *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
    v15 = *(int *)(v11 + 28);
    __dst = &v9[v15];
    v65 = v12;
    v16 = &v10[v15];
    v17 = sub_224F67874();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(__dst, v16, v17);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    *(_OWORD *)&v9[*(int *)(v11 + 32)] = *(_OWORD *)&v10[*(int *)(v11 + 32)];
    v12 = v65;
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v65[7])(v9, 0, 1, v11);
  }
  v20 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v21 = (_BYTE *)(a1 + v20);
  v22 = (_BYTE *)(a2 + v20);
  if (v13((_BYTE *)(a2 + v20), 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v66 = v12;
    *v21 = *v22;
    *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
    *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
    *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
    v24 = *(int *)(v11 + 28);
    v25 = &v21[v24];
    v26 = &v22[v24];
    v27 = sub_224F67874();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    *(_OWORD *)&v21[*(int *)(v11 + 32)] = *(_OWORD *)&v22[*(int *)(v11 + 32)];
    (*((void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))v66 + 7))(v21, 0, 1, v11);
  }
  v30 = a3[13];
  v31 = a3[14];
  v32 = a1 + v30;
  v33 = a2 + v30;
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
  v34 = (_OWORD *)(a1 + v31);
  v35 = (_OWORD *)(a2 + v31);
  v36 = type metadata accessor for Reference();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v39 = v35[1];
    *v34 = *v35;
    v34[1] = v39;
    v40 = *(int *)(v36 + 24);
    v41 = (_OWORD *)((char *)v34 + v40);
    v42 = (_OWORD *)((char *)v35 + v40);
    v43 = type metadata accessor for Identifier();
    v44 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v43 - 8);
    if (v44[6](v42, 1, v43))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v46 = v42[1];
      *v41 = *v42;
      v41[1] = v46;
      *((_QWORD *)v41 + 4) = *((_QWORD *)v42 + 4);
      v47 = *(int *)(v43 + 24);
      __dsta = v44;
      v67 = (char *)v41 + v47;
      v48 = (char *)v42 + v47;
      v49 = sub_224F675D4();
      v61 = *(_QWORD *)(v49 - 8);
      __src = v48;
      v50 = v48;
      v51 = v49;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v50, 1, v49))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v67, __src, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v61 + 32))(v67, __src, v51);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v67, 0, 1, v51);
      }
      *(_OWORD *)((char *)v41 + *(int *)(v43 + 28)) = *(_OWORD *)((char *)v42 + *(int *)(v43 + 28));
      (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))__dsta + 7))(v41, 0, 1, v43);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v53 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v53) = *(_OWORD *)(a2 + v53);
  v54 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v54) = *(_BYTE *)(a2 + v54);
  v55 = a3[19];
  v56 = a3[20];
  v57 = a1 + v55;
  v58 = a2 + v55;
  v59 = *(_OWORD *)(v58 + 16);
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *(_OWORD *)(v57 + 16) = v59;
  *(_OWORD *)(v57 + 32) = *(_OWORD *)(v58 + 32);
  *(_QWORD *)(v57 + 48) = *(_QWORD *)(v58 + 48);
  *(_OWORD *)(a1 + v56) = *(_OWORD *)(a2 + v56);
  return a1;
}

_QWORD *assignWithTake for ModelsR4.Immunization(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  int v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  void *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void *, uint64_t, uint64_t);
  int v65;
  uint64_t v66;
  size_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(_QWORD *, uint64_t, uint64_t);
  int v85;
  int v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  size_t v89;
  void *v90;
  const void *v91;
  __int128 v92;
  uint64_t v93;
  _OWORD *v94;
  _OWORD *v95;
  uint64_t v96;
  unsigned int (**v97)(_OWORD *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t);
  int v107;
  int v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  __int128 v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(void *, uint64_t, uint64_t);
  int v148;
  uint64_t v149;
  size_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *__src;
  void *v161;
  void *v162;
  void *v163;
  void (**v164)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v165;
  void (**v166)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v167;
  int *v168;
  int *v169;
  int *v170;
  int *v171;
  int *v172;
  int *v173;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a1 + 4;
  v9 = a2[4];
  if (a1[4] == 1)
    goto LABEL_4;
  if (v9 == 1)
  {
    sub_224E2C98C((uint64_t)(a1 + 4));
    v9 = a2[4];
LABEL_4:
    *v8 = v9;
    goto LABEL_6;
  }
  *v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  *(_QWORD *)((char *)a1 + 61) = *(_QWORD *)((char *)a2 + 61);
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  v11 = a3[10];
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for FHIRDateTime();
  v15 = *(_QWORD **)(v14 - 8);
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v15[6];
  v17 = v16(v12, 1, v14);
  v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (v18)
    {
      sub_224DDEAA0(v12, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_11;
    }
    v165 = v15;
    v169 = a3;
    *(_BYTE *)v12 = *v13;
    *(_QWORD *)(v12 + 8) = *((_QWORD *)v13 + 1);
    *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
    if (*(_QWORD *)(v12 + 56) != 1)
    {
      v27 = *((_QWORD *)v13 + 7);
      if (v27 != 1)
      {
        *(_BYTE *)(v12 + 24) = v13[24];
        *(_WORD *)(v12 + 25) = *(_WORD *)(v13 + 25);
        *(_DWORD *)(v12 + 28) = *((_DWORD *)v13 + 7);
        *(_OWORD *)(v12 + 32) = *((_OWORD *)v13 + 2);
        *(_QWORD *)(v12 + 48) = *((_QWORD *)v13 + 6);
        *(_QWORD *)(v12 + 56) = v27;
        swift_bridgeObjectRelease();
LABEL_21:
        v29 = *(int *)(v14 + 28);
        v30 = (void *)(v12 + v29);
        v31 = &v13[v29];
        v32 = sub_224F67874();
        v158 = *(_QWORD *)(v32 - 8);
        v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v158 + 48);
        v161 = v30;
        LODWORD(v30) = v33(v30, 1, v32);
        v34 = v33(v31, 1, v32);
        if ((_DWORD)v30)
        {
          if (!v34)
          {
            (*(void (**)(void *, char *, uint64_t))(v158 + 32))(v161, v31, v32);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v161, 0, 1, v32);
            goto LABEL_29;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v36 = *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64);
          v37 = v161;
        }
        else
        {
          if (!v34)
          {
            (*(void (**)(void *, char *, uint64_t))(v158 + 40))(v161, v31, v32);
            goto LABEL_29;
          }
          (*(void (**)(void *, uint64_t))(v158 + 8))(v161, v32);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v36 = *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64);
          v37 = v161;
        }
        memcpy(v37, v31, v36);
LABEL_29:
        v15 = v165;
        a3 = v169;
        v39 = *(int *)(v14 + 32);
        v40 = (_QWORD *)(v12 + v39);
        v41 = &v13[v39];
        v43 = *(_QWORD *)v41;
        v42 = *((_QWORD *)v41 + 1);
        *v40 = v43;
        v40[1] = v42;
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      sub_224E2C9F4(v12 + 24);
    }
    v28 = *(_OWORD *)(v13 + 40);
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    *(_OWORD *)(v12 + 40) = v28;
    *(_QWORD *)(v12 + 56) = *((_QWORD *)v13 + 7);
    goto LABEL_21;
  }
  if (v18)
  {
    v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_11:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v19);
    memcpy((void *)v12, v13, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_30;
  }
  v164 = (void (**)(uint64_t, _QWORD, uint64_t, uint64_t))v15;
  v168 = a3;
  *(_BYTE *)v12 = *v13;
  *(_QWORD *)(v12 + 8) = *((_QWORD *)v13 + 1);
  *(_DWORD *)(v12 + 16) = *((_DWORD *)v13 + 4);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v13 + 40);
  *(_QWORD *)(v12 + 56) = *((_QWORD *)v13 + 7);
  v21 = *(int *)(v14 + 28);
  v22 = (void *)(v12 + v21);
  v23 = &v13[v21];
  v24 = sub_224F67874();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v15 = v164;
  a3 = v168;
  *(_OWORD *)(v12 + *(int *)(v14 + 32)) = *(_OWORD *)&v13[*(int *)(v14 + 32)];
  v164[7](v12, 0, 1, v14);
LABEL_30:
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  v44 = a3[12];
  v45 = (uint64_t)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = v16((uint64_t)a1 + v44, 1, v14);
  v48 = v16((uint64_t)v46, 1, v14);
  if (!v47)
  {
    if (v48)
    {
      sub_224DDEAA0(v45, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v49 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_35;
    }
    *(_BYTE *)v45 = *v46;
    *(_QWORD *)(v45 + 8) = *((_QWORD *)v46 + 1);
    *(_DWORD *)(v45 + 16) = *((_DWORD *)v46 + 4);
    v170 = a3;
    if (*(_QWORD *)(v45 + 56) != 1)
    {
      v57 = *((_QWORD *)v46 + 7);
      if (v57 != 1)
      {
        *(_BYTE *)(v45 + 24) = v46[24];
        *(_WORD *)(v45 + 25) = *(_WORD *)(v46 + 25);
        *(_DWORD *)(v45 + 28) = *((_DWORD *)v46 + 7);
        *(_OWORD *)(v45 + 32) = *((_OWORD *)v46 + 2);
        *(_QWORD *)(v45 + 48) = *((_QWORD *)v46 + 6);
        *(_QWORD *)(v45 + 56) = v57;
        swift_bridgeObjectRelease();
LABEL_45:
        v59 = *(int *)(v14 + 28);
        v60 = (void *)(v45 + v59);
        v61 = &v46[v59];
        v62 = sub_224F67874();
        v63 = *(_QWORD *)(v62 - 8);
        v64 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v63 + 48);
        v162 = v60;
        LODWORD(v60) = v64(v60, 1, v62);
        v65 = v64(v61, 1, v62);
        if ((_DWORD)v60)
        {
          if (!v65)
          {
            (*(void (**)(void *, char *, uint64_t))(v63 + 32))(v162, v61, v62);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v162, 0, 1, v62);
            goto LABEL_53;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v67 = *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64);
          v68 = v162;
        }
        else
        {
          if (!v65)
          {
            (*(void (**)(void *, char *, uint64_t))(v63 + 40))(v162, v61, v62);
            goto LABEL_53;
          }
          (*(void (**)(void *, uint64_t))(v63 + 8))(v162, v62);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v67 = *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64);
          v68 = v162;
        }
        memcpy(v68, v61, v67);
LABEL_53:
        a3 = v170;
        v70 = *(int *)(v14 + 32);
        v71 = (_QWORD *)(v45 + v70);
        v72 = &v46[v70];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        *v71 = v74;
        v71[1] = v73;
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
      sub_224E2C9F4(v45 + 24);
    }
    v58 = *(_OWORD *)(v46 + 40);
    *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
    *(_OWORD *)(v45 + 40) = v58;
    *(_QWORD *)(v45 + 56) = *((_QWORD *)v46 + 7);
    goto LABEL_45;
  }
  if (v48)
  {
    v49 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_35:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v49);
    memcpy((void *)v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_54;
  }
  v166 = (void (**)(uint64_t, _QWORD, uint64_t, uint64_t))v15;
  *(_BYTE *)v45 = *v46;
  *(_QWORD *)(v45 + 8) = *((_QWORD *)v46 + 1);
  *(_DWORD *)(v45 + 16) = *((_DWORD *)v46 + 4);
  *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
  *(_OWORD *)(v45 + 40) = *(_OWORD *)(v46 + 40);
  *(_QWORD *)(v45 + 56) = *((_QWORD *)v46 + 7);
  v51 = *(int *)(v14 + 28);
  v52 = (void *)(v45 + v51);
  v53 = &v46[v51];
  v54 = sub_224F67874();
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v55 + 32))(v52, v53, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  *(_OWORD *)(v45 + *(int *)(v14 + 32)) = *(_OWORD *)&v46[*(int *)(v14 + 32)];
  v166[7](v45, 0, 1, v14);
LABEL_54:
  v75 = a3[13];
  v76 = (_QWORD *)((char *)a1 + v75);
  v77 = (char *)a2 + v75;
  v78 = *(_QWORD *)((char *)a2 + v75 + 8);
  *v76 = *(_QWORD *)((char *)a2 + v75);
  v76[1] = v78;
  swift_bridgeObjectRelease();
  v76[2] = *((_QWORD *)v77 + 2);
  swift_bridgeObjectRelease();
  v79 = a3[14];
  v80 = (_QWORD *)((char *)a1 + v79);
  v81 = (_QWORD *)((char *)a2 + v79);
  v82 = type metadata accessor for Reference();
  v83 = *(_QWORD *)(v82 - 8);
  v84 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v83 + 48);
  v85 = v84(v80, 1, v82);
  v86 = v84(v81, 1, v82);
  if (!v85)
  {
    if (v86)
    {
      sub_224DDEAA0((uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v87 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_59;
    }
    v99 = v81[1];
    *v80 = *v81;
    v80[1] = v99;
    swift_bridgeObjectRelease();
    v100 = v81[3];
    v80[2] = v81[2];
    v80[3] = v100;
    swift_bridgeObjectRelease();
    v101 = *(int *)(v82 + 24);
    v102 = (uint64_t)v80 + v101;
    v103 = (_QWORD *)((char *)v81 + v101);
    v104 = type metadata accessor for Identifier();
    v105 = *(_QWORD *)(v104 - 8);
    v106 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
    v107 = v106(v102, 1, v104);
    v108 = v106((uint64_t)v103, 1, v104);
    if (v107)
    {
      if (!v108)
      {
        v172 = a3;
        v116 = *((_OWORD *)v103 + 1);
        *(_OWORD *)v102 = *(_OWORD *)v103;
        *(_OWORD *)(v102 + 16) = v116;
        *(_QWORD *)(v102 + 32) = v103[4];
        v117 = *(int *)(v104 + 24);
        v118 = (void *)(v102 + v117);
        v119 = (char *)v103 + v117;
        v120 = sub_224F675D4();
        v121 = *(_QWORD *)(v120 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v121 + 32))(v118, v119, v120);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
        }
        a3 = v172;
        *(_OWORD *)(v102 + *(int *)(v104 + 28)) = *(_OWORD *)((char *)v103 + *(int *)(v104 + 28));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
        goto LABEL_76;
      }
      v109 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_70:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v109);
      v89 = *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64);
      v90 = (void *)v102;
      v91 = v103;
      goto LABEL_60;
    }
    if (v108)
    {
      sub_224DDEAA0(v102, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v109 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_70;
    }
    v140 = v103[1];
    *(_QWORD *)v102 = *v103;
    *(_QWORD *)(v102 + 8) = v140;
    swift_bridgeObjectRelease();
    v173 = a3;
    if (*(_QWORD *)(v102 + 24) != 1)
    {
      v141 = v103[3];
      if (v141 != 1)
      {
        *(_QWORD *)(v102 + 16) = v103[2];
        *(_QWORD *)(v102 + 24) = v141;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v102 + 32) = v103[4];
        swift_bridgeObjectRelease();
LABEL_94:
        v142 = *(int *)(v104 + 24);
        v143 = (void *)(v102 + v142);
        v144 = (char *)v103 + v142;
        v145 = sub_224F675D4();
        v146 = *(_QWORD *)(v145 - 8);
        v147 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v146 + 48);
        v163 = v143;
        LODWORD(v143) = v147(v143, 1, v145);
        v148 = v147(v144, 1, v145);
        if ((_DWORD)v143)
        {
          if (!v148)
          {
            (*(void (**)(void *, char *, uint64_t))(v146 + 32))(v163, v144, v145);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v163, 0, 1, v145);
            goto LABEL_102;
          }
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v150 = *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64);
          v151 = v163;
        }
        else
        {
          if (!v148)
          {
            (*(void (**)(void *, char *, uint64_t))(v146 + 40))(v163, v144, v145);
            goto LABEL_102;
          }
          (*(void (**)(void *, uint64_t))(v146 + 8))(v163, v145);
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v150 = *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64);
          v151 = v163;
        }
        memcpy(v151, v144, v150);
LABEL_102:
        a3 = v173;
        v153 = *(int *)(v104 + 28);
        v154 = (_QWORD *)(v102 + v153);
        v155 = (_QWORD *)((char *)v103 + v153);
        v157 = *v155;
        v156 = v155[1];
        *v154 = v157;
        v154[1] = v156;
        swift_bridgeObjectRelease();
        goto LABEL_76;
      }
      sub_224E2C9C0(v102 + 16);
    }
    *(_OWORD *)(v102 + 16) = *((_OWORD *)v103 + 1);
    *(_QWORD *)(v102 + 32) = v103[4];
    goto LABEL_94;
  }
  if (v86)
  {
    v87 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_59:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v87);
    v89 = *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64);
    v90 = v80;
    v91 = v81;
LABEL_60:
    memcpy(v90, v91, v89);
    goto LABEL_76;
  }
  v92 = *((_OWORD *)v81 + 1);
  *(_OWORD *)v80 = *(_OWORD *)v81;
  *((_OWORD *)v80 + 1) = v92;
  v93 = *(int *)(v82 + 24);
  v94 = (_OWORD *)((char *)v80 + v93);
  v95 = (_OWORD *)((char *)v81 + v93);
  v96 = type metadata accessor for Identifier();
  v97 = *(unsigned int (***)(_OWORD *, uint64_t, uint64_t))(v96 - 8);
  if (v97[6](v95, 1, v96))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    __src = v97;
    v110 = v95[1];
    *v94 = *v95;
    v94[1] = v110;
    *((_QWORD *)v94 + 4) = *((_QWORD *)v95 + 4);
    v111 = *(int *)(v96 + 24);
    v167 = (char *)v94 + v111;
    v171 = a3;
    v112 = (char *)v95 + v111;
    v113 = sub_224F675D4();
    v159 = *(_QWORD *)(v113 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v112, 1, v113))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v167, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v167, v112, v113);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v167, 0, 1, v113);
    }
    a3 = v171;
    *(_OWORD *)((char *)v94 + *(int *)(v96 + 28)) = *(_OWORD *)((char *)v95 + *(int *)(v96 + 28));
    (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))__src + 7))(v94, 0, 1, v96);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
LABEL_76:
  v123 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  v124 = (_QWORD *)((char *)a1 + v123);
  v125 = (_QWORD *)((char *)a2 + v123);
  v127 = *v125;
  v126 = v125[1];
  *v124 = v127;
  v124[1] = v126;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  swift_bridgeObjectRelease();
  v128 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  v129 = (_QWORD *)((char *)a1 + v128);
  v130 = (_QWORD *)((char *)a2 + v128);
  if (*(_QWORD *)((char *)a1 + v128) != 1)
  {
    if (*v130 == 1)
    {
      sub_224E3FA9C((uint64_t)a1 + v128);
      goto LABEL_79;
    }
    *v129 = *v130;
    swift_bridgeObjectRelease();
    if (v129[2] != 1)
    {
      v132 = v130[2];
      if (v132 != 1)
      {
        v129[1] = v130[1];
        v129[2] = v132;
        swift_bridgeObjectRelease();
        v129[3] = v130[3];
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }
      sub_224E2C9C0((uint64_t)(v129 + 1));
    }
    *(_OWORD *)(v129 + 1) = *(_OWORD *)(v130 + 1);
    v129[3] = v130[3];
LABEL_85:
    v129[4] = v130[4];
    swift_bridgeObjectRelease();
    v133 = v130[6];
    v129[5] = v130[5];
    v129[6] = v133;
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
LABEL_79:
  v131 = *((_OWORD *)v130 + 1);
  *(_OWORD *)v129 = *(_OWORD *)v130;
  *((_OWORD *)v129 + 1) = v131;
  *((_OWORD *)v129 + 2) = *((_OWORD *)v130 + 2);
  v129[6] = v130[6];
LABEL_86:
  v134 = a3[20];
  v135 = (_QWORD *)((char *)a1 + v134);
  v136 = (_QWORD *)((char *)a2 + v134);
  v138 = *v136;
  v137 = v136[1];
  *v135 = v138;
  v135[1] = v137;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Immunization()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E40ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Immunization()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E40FB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224E4107C()
{
  unint64_t v0;
  unint64_t v1;

  sub_224DDEA0C(319, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for FHIRTime(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ModelsR4.ImmunizationProtocol(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 72);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ModelsR4.ImmunizationProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ModelsR4.ImmunizationProtocol(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 64);
  v7 = (__int128 *)(a2 + 8);
  v8 = a2[9];
  if (*(_QWORD *)(a1 + 72) == 1)
  {
    if (v8 == 1)
    {
      v9 = *v7;
      *(_QWORD *)(a1 + 80) = a2[10];
      *v6 = v9;
    }
    else
    {
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    sub_224E2C9C0(a1 + 64);
    v10 = a2[10];
    *v6 = *v7;
    *(_QWORD *)(a1 + 80) = v10;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = a2[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 80) = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ModelsR4.ImmunizationProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 72) != 1)
  {
    v6 = *(_QWORD *)(a2 + 72);
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_224E2C9C0(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.ImmunizationProtocol(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.ImmunizationProtocol(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.ImmunizationProtocol()
{
  return &type metadata for ModelsR4.ImmunizationProtocol;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.ImmunizationPerformer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_QWORD *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD, uint64_t, uint64_t);
  char *__dst;

  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Reference();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      v12 = *(int *)(v7 + 24);
      v13 = (uint64_t *)((char *)a1 + v12);
      v14 = (uint64_t *)((char *)a2 + v12);
      v15 = type metadata accessor for Identifier();
      v16 = *(_QWORD *)(v15 - 8);
      v17 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17(v14, 1, v15))
      {
        sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v19 = v14[1];
        *v13 = *v14;
        v13[1] = v19;
        v20 = v14[3];
        swift_bridgeObjectRetain();
        if (v20 == 1)
        {
          *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
          v13[4] = v14[4];
        }
        else
        {
          v13[2] = v14[2];
          v13[3] = v20;
          v13[4] = v14[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v21 = *(int *)(v15 + 24);
        __dst = (char *)v13 + v21;
        v22 = (char *)v14 + v21;
        v23 = sub_224F675D4();
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 16))(__dst, v22, v23);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
        }
        v26 = *(int *)(v15 + 28);
        v27 = (_QWORD *)((char *)v13 + v26);
        v28 = (_QWORD *)((char *)v14 + v26);
        v29 = v28[1];
        *v27 = *v28;
        v27[1] = v29;
        v30 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56);
        swift_bridgeObjectRetain();
        v30(v13, 0, 1, v15);
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ModelsR4.ImmunizationPerformer(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for Reference();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = a1 + *(int *)(v2 + 24);
    v5 = type metadata accessor for Identifier();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v4 + 24) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v6 = v4 + *(int *)(v5 + 24);
      v7 = sub_224F675D4();
      v8 = *(_QWORD *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *initializeWithCopy for ModelsR4.ImmunizationPerformer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(_QWORD *, _QWORD, uint64_t, uint64_t);
  char *__dst;

  v4 = type metadata accessor for Reference();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(v4 + 24);
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for Identifier();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v16 = v11[1];
      *v10 = *v11;
      v10[1] = v16;
      v17 = v11[3];
      swift_bridgeObjectRetain();
      if (v17 == 1)
      {
        *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
        v10[4] = v11[4];
      }
      else
      {
        v10[2] = v11[2];
        v10[3] = v17;
        v10[4] = v11[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v18 = *(int *)(v12 + 24);
      __dst = (char *)v10 + v18;
      v19 = (char *)v11 + v18;
      v20 = sub_224F675D4();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
      }
      v23 = *(int *)(v12 + 28);
      v24 = (_QWORD *)((char *)v10 + v23);
      v25 = (_QWORD *)((char *)v11 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      v27 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56);
      swift_bridgeObjectRetain();
      v27(v10, 0, 1, v12);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.ImmunizationPerformer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  size_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(_QWORD *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void (*v43)(_QWORD *, _QWORD, uint64_t, uint64_t);
  __int128 *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  void (*v58)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(void *, uint64_t, uint64_t);
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  char *__dst;

  v4 = type metadata accessor for Reference();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_224DDEAA0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    *a1 = *a2;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v21 = *(int *)(v4 + 24);
    v22 = (uint64_t)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for Identifier();
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    v27 = v26(v22, 1, v24);
    v28 = v26((uint64_t)v23, 1, v24);
    if (v27)
    {
      if (!v28)
      {
        *(_QWORD *)v22 = *(_QWORD *)v23;
        *(_QWORD *)(v22 + 8) = *((_QWORD *)v23 + 1);
        v38 = *((_QWORD *)v23 + 3);
        swift_bridgeObjectRetain();
        if (v38 == 1)
        {
          v39 = *((_OWORD *)v23 + 1);
          *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
          *(_OWORD *)(v22 + 16) = v39;
        }
        else
        {
          *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
          *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 3);
          *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v49 = *(int *)(v24 + 24);
        v50 = (void *)(v22 + v49);
        v51 = &v23[v49];
        v52 = sub_224F675D4();
        v53 = *(_QWORD *)(v52 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v53 + 16))(v50, v51, v52);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
        }
        v55 = *(int *)(v24 + 28);
        v56 = (_QWORD *)(v22 + v55);
        v57 = &v23[v55];
        *v56 = *(_QWORD *)v57;
        v56[1] = *((_QWORD *)v57 + 1);
        v58 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56);
        swift_bridgeObjectRetain();
        v58(v22, 0, 1, v24);
        return a1;
      }
      v29 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_17:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v29);
      v11 = *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64);
      v12 = (void *)v22;
      v13 = v23;
      goto LABEL_7;
    }
    if (v28)
    {
      sub_224DDEAA0(v22, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v29 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_17;
    }
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *(_QWORD *)(v22 + 8) = *((_QWORD *)v23 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v45 = (__int128 *)(v22 + 16);
    v46 = (__int128 *)(v23 + 16);
    v47 = *((_QWORD *)v23 + 3);
    if (*(_QWORD *)(v22 + 24) == 1)
    {
      if (v47 == 1)
      {
        v48 = *v46;
        *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
        *v45 = v48;
      }
      else
      {
        *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
        *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 3);
        *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v47 == 1)
    {
      sub_224E2C9C0(v22 + 16);
      v59 = *((_QWORD *)v23 + 4);
      *v45 = *v46;
      *(_QWORD *)(v22 + 32) = v59;
    }
    else
    {
      *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
      *(_QWORD *)(v22 + 24) = *((_QWORD *)v23 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v60 = *(int *)(v24 + 24);
    v61 = (void *)(v22 + v60);
    v62 = &v23[v60];
    v63 = sub_224F675D4();
    v64 = *(_QWORD *)(v63 - 8);
    v65 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v64 + 48);
    v66 = v65(v61, 1, v63);
    v67 = v65(v62, 1, v63);
    if (v66)
    {
      if (!v67)
      {
        (*(void (**)(void *, char *, uint64_t))(v64 + 16))(v61, v62, v63);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
LABEL_45:
        v69 = *(int *)(v24 + 28);
        v70 = (_QWORD *)(v22 + v69);
        v71 = &v23[v69];
        *v70 = *(_QWORD *)v71;
        v70[1] = *((_QWORD *)v71 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      if (!v67)
      {
        (*(void (**)(void *, char *, uint64_t))(v64 + 24))(v61, v62, v63);
        goto LABEL_45;
      }
      (*(void (**)(void *, uint64_t))(v64 + 8))(v61, v63);
    }
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_45;
  }
  if (v8)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v9);
    v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
    v12 = a1;
    v13 = a2;
LABEL_7:
    memcpy(v12, v13, v11);
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v14 = *(int *)(v4 + 24);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = type metadata accessor for Identifier();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19(v16, 1, v17))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v15 = *v16;
    v15[1] = v16[1];
    v30 = v16[3];
    swift_bridgeObjectRetain();
    if (v30 == 1)
    {
      v31 = *((_OWORD *)v16 + 1);
      v15[4] = v16[4];
      *((_OWORD *)v15 + 1) = v31;
    }
    else
    {
      v15[2] = v16[2];
      v15[3] = v16[3];
      v15[4] = v16[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v33 = *(int *)(v17 + 24);
    __dst = (char *)v15 + v33;
    v34 = (char *)v16 + v33;
    v35 = sub_224F675D4();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
    }
    v40 = *(int *)(v17 + 28);
    v41 = (_QWORD *)((char *)v15 + v40);
    v42 = (_QWORD *)((char *)v16 + v40);
    *v41 = *v42;
    v41[1] = v42[1];
    v43 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56);
    swift_bridgeObjectRetain();
    v43(v15, 0, 1, v17);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

_OWORD *initializeWithTake for ModelsR4.ImmunizationPerformer(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *__dst;

  v4 = type metadata accessor for Reference();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(v4 + 24);
    v9 = (_OWORD *)((char *)a1 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = type metadata accessor for Identifier();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v14 = v10[1];
      *v9 = *v10;
      v9[1] = v14;
      *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
      v15 = *(int *)(v11 + 24);
      __dst = (char *)v9 + v15;
      v16 = (char *)v10 + v15;
      v17 = sub_224F675D4();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      *(_OWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_OWORD *)((char *)v10 + *(int *)(v11 + 28));
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

_QWORD *assignWithTake for ModelsR4.ImmunizationPerformer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  size_t v11;
  void *v12;
  const void *v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  __int128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(void *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *__dst;

  v4 = type metadata accessor for Reference();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_224DDEAA0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Reference);
      v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v21 = a2[1];
    *a1 = *a2;
    a1[1] = v21;
    swift_bridgeObjectRelease();
    v22 = a2[3];
    a1[2] = a2[2];
    a1[3] = v22;
    swift_bridgeObjectRelease();
    v23 = *(int *)(v4 + 24);
    v24 = (uint64_t)a1 + v23;
    v25 = (_QWORD *)((char *)a2 + v23);
    v26 = type metadata accessor for Identifier();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    v29 = v28(v24, 1, v26);
    v30 = v28((uint64_t)v25, 1, v26);
    if (v29)
    {
      if (!v30)
      {
        v39 = *((_OWORD *)v25 + 1);
        *(_OWORD *)v24 = *(_OWORD *)v25;
        *(_OWORD *)(v24 + 16) = v39;
        *(_QWORD *)(v24 + 32) = v25[4];
        v40 = *(int *)(v26 + 24);
        v41 = (void *)(v24 + v40);
        v42 = (char *)v25 + v40;
        v43 = sub_224F675D4();
        v44 = *(_QWORD *)(v43 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
        {
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
        }
        *(_OWORD *)(v24 + *(int *)(v26 + 28)) = *(_OWORD *)((char *)v25 + *(int *)(v26 + 28));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        return a1;
      }
      v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_17:
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v31);
      v11 = *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64);
      v12 = (void *)v24;
      v13 = v25;
      goto LABEL_7;
    }
    if (v30)
    {
      sub_224DDEAA0(v24, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_17;
    }
    v47 = v25[1];
    *(_QWORD *)v24 = *v25;
    *(_QWORD *)(v24 + 8) = v47;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v24 + 24) != 1)
    {
      v48 = v25[3];
      if (v48 != 1)
      {
        *(_QWORD *)(v24 + 16) = v25[2];
        *(_QWORD *)(v24 + 24) = v48;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v24 + 32) = v25[4];
        swift_bridgeObjectRelease();
LABEL_31:
        v49 = *(int *)(v26 + 24);
        v50 = (void *)(v24 + v49);
        v51 = (char *)v25 + v49;
        v52 = sub_224F675D4();
        v53 = *(_QWORD *)(v52 - 8);
        v54 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v53 + 48);
        v55 = v54(v50, 1, v52);
        v56 = v54(v51, 1, v52);
        if (v55)
        {
          if (!v56)
          {
            (*(void (**)(void *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
LABEL_37:
            v58 = *(int *)(v26 + 28);
            v59 = (_QWORD *)(v24 + v58);
            v60 = (_QWORD *)((char *)v25 + v58);
            v62 = *v60;
            v61 = v60[1];
            *v59 = v62;
            v59[1] = v61;
            swift_bridgeObjectRelease();
            return a1;
          }
        }
        else
        {
          if (!v56)
          {
            (*(void (**)(void *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
            goto LABEL_37;
          }
          (*(void (**)(void *, uint64_t))(v53 + 8))(v50, v52);
        }
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        goto LABEL_37;
      }
      sub_224E2C9C0(v24 + 16);
    }
    *(_OWORD *)(v24 + 16) = *((_OWORD *)v25 + 1);
    *(_QWORD *)(v24 + 32) = v25[4];
    goto LABEL_31;
  }
  if (v8)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, v9);
    v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
    v12 = a1;
    v13 = a2;
LABEL_7:
    memcpy(v12, v13, v11);
    return a1;
  }
  v14 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v14;
  v15 = *(int *)(v4 + 24);
  v16 = (_OWORD *)((char *)a1 + v15);
  v17 = (_OWORD *)((char *)a2 + v15);
  v18 = type metadata accessor for Identifier();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v32 = v17[1];
    *v16 = *v17;
    v16[1] = v32;
    *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
    v33 = *(int *)(v18 + 24);
    __dst = (char *)v16 + v33;
    v34 = (char *)v17 + v33;
    v35 = sub_224F675D4();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(__dst, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
    }
    *(_OWORD *)((char *)v16 + *(int *)(v18 + 28)) = *(_OWORD *)((char *)v17 + *(int *)(v18 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.ImmunizationPerformer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E42A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.ImmunizationPerformer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E42A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224DDEA0C(0, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_224E42AEC()
{
  unint64_t v0;

  sub_224DDEA0C(319, &qword_2557E0308, (uint64_t (*)(uint64_t))type metadata accessor for Reference, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.Observation(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int (*v19)(_QWORD, _QWORD, _QWORD);
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void (*v52)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  void (*v72)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  void (*v88)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  void (*v105)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(char *, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  void (*v132)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  _BYTE *__dst;
  void *v139;
  void *v140;
  char *v141;
  unsigned int (*v142)(_QWORD, _QWORD, _QWORD);
  uint64_t v143;
  uint64_t v144;
  char *v145;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 != 1)
      swift_bridgeObjectRetain();
    v9 = a2[5];
    v10 = a2[6];
    a1[4] = v8;
    a1[5] = v9;
    v12 = a2[7];
    v11 = a2[8];
    a1[6] = v10;
    a1[7] = v12;
    v13 = a2[9];
    v14 = a2[10];
    a1[8] = v11;
    a1[9] = v13;
    v15 = a3[10];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    a1[10] = v14;
    v18 = type metadata accessor for FHIRDateTime();
    v144 = *(_QWORD *)(v18 - 8);
    v19 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v144 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v142 = v19;
    if (v19(v17, 1, v18))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      v21 = a3;
    }
    else
    {
      *v16 = *v17;
      *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
      *((_DWORD *)v16 + 4) = *((_DWORD *)v17 + 4);
      v23 = *((_QWORD *)v17 + 7);
      if (v23 == 1)
      {
        v24 = *(_OWORD *)(v17 + 40);
        *(_OWORD *)(v16 + 24) = *(_OWORD *)(v17 + 24);
        *(_OWORD *)(v16 + 40) = v24;
        *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
      }
      else
      {
        v16[24] = v17[24];
        *(_WORD *)(v16 + 25) = *(_WORD *)(v17 + 25);
        *(_OWORD *)(v16 + 28) = *(_OWORD *)(v17 + 28);
        *((_DWORD *)v16 + 11) = *((_DWORD *)v17 + 11);
        *((_QWORD *)v16 + 6) = *((_QWORD *)v17 + 6);
        *((_QWORD *)v16 + 7) = v23;
        swift_bridgeObjectRetain();
      }
      v21 = a3;
      v25 = *(int *)(v18 + 28);
      v26 = &v16[v25];
      v27 = &v17[v25];
      v28 = sub_224F67874();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 16))(v26, v27, v28);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      v31 = *(int *)(v18 + 32);
      v32 = &v16[v31];
      v33 = &v17[v31];
      v34 = v33[1];
      *v32 = *v33;
      v32[1] = v34;
      v35 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v144 + 56);
      swift_bridgeObjectRetain();
      v35(v16, 0, 1, v18);
      v19 = v142;
    }
    v36 = v21[11];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    if (v19((char *)a2 + v36, 1, v18))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *v37 = *v38;
      *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
      *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
      v40 = *((_QWORD *)v38 + 7);
      if (v40 == 1)
      {
        v41 = *(_OWORD *)(v38 + 40);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
        *(_OWORD *)(v37 + 40) = v41;
        *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
      }
      else
      {
        v37[24] = v38[24];
        *(_WORD *)(v37 + 25) = *(_WORD *)(v38 + 25);
        *(_OWORD *)(v37 + 28) = *(_OWORD *)(v38 + 28);
        *((_DWORD *)v37 + 11) = *((_DWORD *)v38 + 11);
        *((_QWORD *)v37 + 6) = *((_QWORD *)v38 + 6);
        *((_QWORD *)v37 + 7) = v40;
        swift_bridgeObjectRetain();
      }
      v42 = *(int *)(v18 + 28);
      v43 = &v37[v42];
      v44 = &v38[v42];
      v45 = sub_224F67874();
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 16))(v43, v44, v45);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      v48 = *(int *)(v18 + 32);
      v49 = &v37[v48];
      v50 = &v38[v48];
      v51 = v50[1];
      *v49 = *v50;
      v49[1] = v51;
      v52 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v144 + 56);
      swift_bridgeObjectRetain();
      v52(v37, 0, 1, v18);
      v19 = v142;
    }
    v53 = v21[12];
    v54 = (char *)a1 + v53;
    v55 = (char *)a2 + v53;
    v56 = type metadata accessor for Period();
    v57 = *(void **)(v56 - 8);
    if ((*((unsigned int (**)(_BYTE *, uint64_t, uint64_t))v57 + 6))(v55, 1, v56))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      if (v19(v55, 1, v18))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        *v54 = *v55;
        *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
        *((_DWORD *)v54 + 4) = *((_DWORD *)v55 + 4);
        v60 = *((_QWORD *)v55 + 7);
        v139 = v57;
        if (v60 == 1)
        {
          v61 = *(_OWORD *)(v55 + 40);
          *(_OWORD *)(v54 + 24) = *(_OWORD *)(v55 + 24);
          *(_OWORD *)(v54 + 40) = v61;
          *((_QWORD *)v54 + 7) = *((_QWORD *)v55 + 7);
        }
        else
        {
          v54[24] = v55[24];
          *(_WORD *)(v54 + 25) = *(_WORD *)(v55 + 25);
          *(_OWORD *)(v54 + 28) = *(_OWORD *)(v55 + 28);
          *((_DWORD *)v54 + 11) = *((_DWORD *)v55 + 11);
          *((_QWORD *)v54 + 6) = *((_QWORD *)v55 + 6);
          *((_QWORD *)v54 + 7) = v60;
          swift_bridgeObjectRetain();
        }
        v62 = *(int *)(v18 + 28);
        v63 = &v54[v62];
        v64 = &v55[v62];
        v65 = sub_224F67874();
        v66 = *(_QWORD *)(v65 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v66 + 16))(v63, v64, v65);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
        }
        v57 = v139;
        v68 = *(int *)(v18 + 32);
        v69 = &v54[v68];
        v70 = &v55[v68];
        v71 = v70[1];
        *v69 = *v70;
        v69[1] = v71;
        v21 = a3;
        v72 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v144 + 56);
        swift_bridgeObjectRetain();
        v72(v54, 0, 1, v18);
        v19 = v142;
      }
      v73 = *(int *)(v56 + 20);
      v74 = &v54[v73];
      v75 = &v55[v73];
      if (v19(v75, 1, v18))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        *v74 = *v75;
        *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
        *((_DWORD *)v74 + 4) = *((_DWORD *)v75 + 4);
        v77 = *((_QWORD *)v75 + 7);
        v140 = v57;
        if (v77 == 1)
        {
          v78 = *(_OWORD *)(v75 + 40);
          *(_OWORD *)(v74 + 24) = *(_OWORD *)(v75 + 24);
          *(_OWORD *)(v74 + 40) = v78;
          *((_QWORD *)v74 + 7) = *((_QWORD *)v75 + 7);
        }
        else
        {
          v74[24] = v75[24];
          *(_WORD *)(v74 + 25) = *(_WORD *)(v75 + 25);
          *(_OWORD *)(v74 + 28) = *(_OWORD *)(v75 + 28);
          *((_DWORD *)v74 + 11) = *((_DWORD *)v75 + 11);
          *((_QWORD *)v74 + 6) = *((_QWORD *)v75 + 6);
          *((_QWORD *)v74 + 7) = v77;
          swift_bridgeObjectRetain();
        }
        v79 = *(int *)(v18 + 28);
        __dst = &v74[v79];
        v80 = &v75[v79];
        v81 = sub_224F67874();
        v82 = *(_QWORD *)(v81 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(__dst, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 16))(__dst, v80, v81);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v82 + 56))(__dst, 0, 1, v81);
        }
        v57 = v140;
        v84 = *(int *)(v18 + 32);
        v85 = &v74[v84];
        v86 = &v75[v84];
        v87 = v86[1];
        *v85 = *v86;
        v85[1] = v87;
        v21 = a3;
        v88 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v144 + 56);
        swift_bridgeObjectRetain();
        v88(v74, 0, 1, v18);
        v19 = v142;
      }
      (*((void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))v57 + 7))(v54, 0, 1, v56);
    }
    v89 = v21[13];
    v90 = (char *)a1 + v89;
    v91 = (char *)a2 + v89;
    if (v19((char *)a2 + v89, 1, v18))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
    else
    {
      *v90 = *v91;
      *((_QWORD *)v90 + 1) = *((_QWORD *)v91 + 1);
      *((_DWORD *)v90 + 4) = *((_DWORD *)v91 + 4);
      v93 = *((_QWORD *)v91 + 7);
      if (v93 == 1)
      {
        v94 = *(_OWORD *)(v91 + 40);
        *(_OWORD *)(v90 + 24) = *(_OWORD *)(v91 + 24);
        *(_OWORD *)(v90 + 40) = v94;
        *((_QWORD *)v90 + 7) = *((_QWORD *)v91 + 7);
      }
      else
      {
        v90[24] = v91[24];
        *(_WORD *)(v90 + 25) = *(_WORD *)(v91 + 25);
        *(_OWORD *)(v90 + 28) = *(_OWORD *)(v91 + 28);
        *((_DWORD *)v90 + 11) = *((_DWORD *)v91 + 11);
        *((_QWORD *)v90 + 6) = *((_QWORD *)v91 + 6);
        *((_QWORD *)v90 + 7) = v93;
        swift_bridgeObjectRetain();
      }
      v95 = *(int *)(v18 + 28);
      v96 = &v90[v95];
      v97 = &v91[v95];
      v98 = sub_224F67874();
      v99 = *(_QWORD *)(v98 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 16))(v96, v97, v98);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
      }
      v101 = *(int *)(v18 + 32);
      v102 = &v90[v101];
      v103 = &v91[v101];
      v104 = v103[1];
      *v102 = *v103;
      v102[1] = v104;
      v105 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v144 + 56);
      swift_bridgeObjectRetain();
      v105(v90, 0, 1, v18);
    }
    v106 = v21[15];
    *(uint64_t *)((char *)a1 + v21[14]) = *(uint64_t *)((char *)a2 + v21[14]);
    *(uint64_t *)((char *)a1 + v106) = *(uint64_t *)((char *)a2 + v106);
    v107 = v21[16];
    v108 = v21[17];
    v109 = (uint64_t *)((char *)a1 + v107);
    v110 = (uint64_t *)((char *)a2 + v107);
    v111 = v110[1];
    *v109 = *v110;
    v109[1] = v111;
    v112 = (char *)a1 + v108;
    v113 = (char *)a2 + v108;
    v114 = *(uint64_t *)((char *)a2 + v108 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v114 == 1)
    {
      *(_OWORD *)v112 = *(_OWORD *)v113;
      *((_QWORD *)v112 + 2) = *((_QWORD *)v113 + 2);
    }
    else
    {
      *(_QWORD *)v112 = *(_QWORD *)v113;
      *((_QWORD *)v112 + 1) = v114;
      *((_QWORD *)v112 + 2) = *((_QWORD *)v113 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v115 = v21[18];
    v116 = (uint64_t *)((char *)a1 + v115);
    v117 = (uint64_t *)((char *)a2 + v115);
    v118 = type metadata accessor for Quantity();
    v119 = *(_QWORD *)(v118 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
    {
      sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v116 = *(_OWORD *)v117;
      *(_QWORD *)((char *)v116 + 13) = *(_QWORD *)((char *)v117 + 13);
      v121 = v117[4];
      v116[3] = v117[3];
      v116[4] = v121;
      v122 = v117[6];
      v116[5] = v117[5];
      v116[6] = v122;
      v123 = *(int *)(v118 + 28);
      v141 = (char *)v116 + v123;
      v143 = v119;
      v145 = (char *)v117 + v123;
      v124 = sub_224F675D4();
      v125 = *(_QWORD *)(v124 - 8);
      v126 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v126(v145, 1, v124))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v141, v145, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v141, v145, v124);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v141, 0, 1, v124);
      }
      v128 = *(int *)(v118 + 32);
      v129 = (_QWORD *)((char *)v116 + v128);
      v130 = (_QWORD *)((char *)v117 + v128);
      v131 = v130[1];
      *v129 = *v130;
      v129[1] = v131;
      v132 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v143 + 56);
      swift_bridgeObjectRetain();
      v132(v116, 0, 1, v118);
      v21 = a3;
    }
    v133 = v21[20];
    *(uint64_t *)((char *)a1 + v21[19]) = *(uint64_t *)((char *)a2 + v21[19]);
    v134 = (uint64_t *)((char *)a1 + v133);
    v135 = (uint64_t *)((char *)a2 + v133);
    v136 = v135[1];
    *v134 = *v135;
    v134[1] = v136;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ModelsR4.Observation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 32) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[10];
  v5 = type metadata accessor for FHIRDateTime();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    if (*(_QWORD *)(v4 + 56) != 1)
      swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 28);
    v8 = sub_224F67874();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  v10 = a1 + a2[11];
  if (!v6(v10, 1, v5))
  {
    if (*(_QWORD *)(v10 + 56) != 1)
      swift_bridgeObjectRelease();
    v11 = v10 + *(int *)(v5 + 28);
    v12 = sub_224F67874();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    swift_bridgeObjectRelease();
  }
  v14 = a1 + a2[12];
  v15 = type metadata accessor for Period();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    if (!v6(v14, 1, v5))
    {
      if (*(_QWORD *)(v14 + 56) != 1)
        swift_bridgeObjectRelease();
      v16 = v14 + *(int *)(v5 + 28);
      v17 = sub_224F67874();
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      swift_bridgeObjectRelease();
    }
    v19 = v14 + *(int *)(v15 + 20);
    if (!v6(v19, 1, v5))
    {
      if (*(_QWORD *)(v19 + 56) != 1)
        swift_bridgeObjectRelease();
      v20 = v19 + *(int *)(v5 + 28);
      v21 = sub_224F67874();
      v22 = *(_QWORD *)(v21 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
      swift_bridgeObjectRelease();
    }
  }
  v23 = a1 + a2[13];
  if (!v6(v23, 1, v5))
  {
    if (*(_QWORD *)(v23 + 56) != 1)
      swift_bridgeObjectRelease();
    v24 = v23 + *(int *)(v5 + 28);
    v25 = sub_224F67874();
    v26 = *(_QWORD *)(v25 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[17] + 8) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v27 = a1 + a2[18];
  v28 = type metadata accessor for Quantity();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = v27 + *(int *)(v28 + 28);
    v30 = sub_224F675D4();
    v31 = *(_QWORD *)(v30 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsR4.Observation(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  int *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unsigned int (*v125)(char *, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  char *v129;
  uint64_t v130;
  void (*v131)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v137;
  char *__dst;
  char *__dsta;
  _QWORD *__dstb;
  unsigned int (*v141)(char *, uint64_t, uint64_t);
  char *v142;
  uint64_t v143;
  uint64_t v144;
  int *v145;

  v6 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v7 = *((_QWORD *)a2 + 3);
  a1[2] = *((_QWORD *)a2 + 2);
  a1[3] = v7;
  v8 = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 != 1)
    swift_bridgeObjectRetain();
  v9 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  a1[4] = v8;
  a1[5] = v9;
  v12 = *((_QWORD *)a2 + 7);
  v11 = *((_QWORD *)a2 + 8);
  a1[6] = v10;
  a1[7] = v12;
  v13 = *((_QWORD *)a2 + 9);
  v14 = *((_QWORD *)a2 + 10);
  a1[8] = v11;
  a1[9] = v13;
  v145 = a3;
  v15 = a3[10];
  v16 = (char *)a1 + v15;
  v17 = &a2[v15];
  a1[10] = v14;
  v18 = type metadata accessor for FHIRDateTime();
  v143 = *(_QWORD *)(v18 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v141 = v19;
  if (v19(v17, 1, v18))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    v22 = v145;
  }
  else
  {
    *v16 = *v17;
    *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
    *((_DWORD *)v16 + 4) = *((_DWORD *)v17 + 4);
    v23 = *((_QWORD *)v17 + 7);
    if (v23 == 1)
    {
      v24 = *(_OWORD *)(v17 + 40);
      *(_OWORD *)(v16 + 24) = *(_OWORD *)(v17 + 24);
      *(_OWORD *)(v16 + 40) = v24;
      *((_QWORD *)v16 + 7) = *((_QWORD *)v17 + 7);
    }
    else
    {
      v16[24] = v17[24];
      *(_WORD *)(v16 + 25) = *(_WORD *)(v17 + 25);
      *(_OWORD *)(v16 + 28) = *(_OWORD *)(v17 + 28);
      *((_DWORD *)v16 + 11) = *((_DWORD *)v17 + 11);
      *((_QWORD *)v16 + 6) = *((_QWORD *)v17 + 6);
      *((_QWORD *)v16 + 7) = v23;
      swift_bridgeObjectRetain();
    }
    v22 = v145;
    v25 = *(int *)(v18 + 28);
    v26 = &v16[v25];
    v27 = &v17[v25];
    v28 = sub_224F67874();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v31 = *(int *)(v18 + 32);
    v32 = &v16[v31];
    v33 = &v17[v31];
    v34 = *((_QWORD *)v33 + 1);
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = v34;
    v20 = v141;
    v35 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v143 + 56);
    swift_bridgeObjectRetain();
    v35(v16, 0, 1, v18);
  }
  v36 = v22[11];
  v37 = (char *)a1 + v36;
  v38 = &a2[v36];
  if (v20(&a2[v36], 1, v18))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    *v37 = *v38;
    *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
    *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
    v40 = *((_QWORD *)v38 + 7);
    if (v40 == 1)
    {
      v41 = *(_OWORD *)(v38 + 40);
      *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
      *(_OWORD *)(v37 + 40) = v41;
      *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
    }
    else
    {
      v37[24] = v38[24];
      *(_WORD *)(v37 + 25) = *(_WORD *)(v38 + 25);
      *(_OWORD *)(v37 + 28) = *(_OWORD *)(v38 + 28);
      *((_DWORD *)v37 + 11) = *((_DWORD *)v38 + 11);
      *((_QWORD *)v37 + 6) = *((_QWORD *)v38 + 6);
      *((_QWORD *)v37 + 7) = v40;
      swift_bridgeObjectRetain();
    }
    v42 = *(int *)(v18 + 28);
    v43 = &v37[v42];
    v44 = &v38[v42];
    v45 = sub_224F67874();
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    v48 = *(int *)(v18 + 32);
    v49 = &v37[v48];
    v50 = &v38[v48];
    v51 = *((_QWORD *)v50 + 1);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    *((_QWORD *)v49 + 1) = v51;
    v20 = v141;
    v52 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v143 + 56);
    swift_bridgeObjectRetain();
    v52(v37, 0, 1, v18);
  }
  v53 = v22[12];
  v54 = (char *)a1 + v53;
  v55 = &a2[v53];
  v56 = type metadata accessor for Period();
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    if (v20(v55, 1, v18))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      *v54 = *v55;
      *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
      *((_DWORD *)v54 + 4) = *((_DWORD *)v55 + 4);
      v60 = *((_QWORD *)v55 + 7);
      if (v60 == 1)
      {
        v61 = *(_OWORD *)(v55 + 40);
        *(_OWORD *)(v54 + 24) = *(_OWORD *)(v55 + 24);
        *(_OWORD *)(v54 + 40) = v61;
        *((_QWORD *)v54 + 7) = *((_QWORD *)v55 + 7);
      }
      else
      {
        v54[24] = v55[24];
        *(_WORD *)(v54 + 25) = *(_WORD *)(v55 + 25);
        *(_OWORD *)(v54 + 28) = *(_OWORD *)(v55 + 28);
        *((_DWORD *)v54 + 11) = *((_DWORD *)v55 + 11);
        *((_QWORD *)v54 + 6) = *((_QWORD *)v55 + 6);
        *((_QWORD *)v54 + 7) = v60;
        swift_bridgeObjectRetain();
      }
      v62 = *(int *)(v18 + 28);
      __dst = &v54[v62];
      v63 = &v55[v62];
      v64 = sub_224F67874();
      v65 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v65 + 16))(__dst, v63, v64);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(__dst, 0, 1, v64);
      }
      v67 = *(int *)(v18 + 32);
      v68 = &v54[v67];
      v69 = &v55[v67];
      v70 = *((_QWORD *)v69 + 1);
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *((_QWORD *)v68 + 1) = v70;
      v22 = v145;
      v71 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v143 + 56);
      swift_bridgeObjectRetain();
      v71(v54, 0, 1, v18);
      v20 = v141;
    }
    v72 = *(int *)(v56 + 20);
    v73 = &v54[v72];
    v74 = &v55[v72];
    if (v20(v74, 1, v18))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      *v73 = *v74;
      *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
      *((_DWORD *)v73 + 4) = *((_DWORD *)v74 + 4);
      v76 = *((_QWORD *)v74 + 7);
      v137 = v57;
      if (v76 == 1)
      {
        v77 = *(_OWORD *)(v74 + 40);
        *(_OWORD *)(v73 + 24) = *(_OWORD *)(v74 + 24);
        *(_OWORD *)(v73 + 40) = v77;
        *((_QWORD *)v73 + 7) = *((_QWORD *)v74 + 7);
      }
      else
      {
        v73[24] = v74[24];
        *(_WORD *)(v73 + 25) = *(_WORD *)(v74 + 25);
        *(_OWORD *)(v73 + 28) = *(_OWORD *)(v74 + 28);
        *((_DWORD *)v73 + 11) = *((_DWORD *)v74 + 11);
        *((_QWORD *)v73 + 6) = *((_QWORD *)v74 + 6);
        *((_QWORD *)v73 + 7) = v76;
        swift_bridgeObjectRetain();
      }
      v78 = *(int *)(v18 + 28);
      __dsta = &v73[v78];
      v79 = &v74[v78];
      v80 = sub_224F67874();
      v81 = *(_QWORD *)(v80 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(__dsta, v79, v80);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(__dsta, 0, 1, v80);
      }
      v20 = v141;
      v57 = v137;
      v83 = *(int *)(v18 + 32);
      v84 = &v73[v83];
      v85 = &v74[v83];
      v86 = *((_QWORD *)v85 + 1);
      *(_QWORD *)v84 = *(_QWORD *)v85;
      *((_QWORD *)v84 + 1) = v86;
      v22 = v145;
      v87 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v143 + 56);
      swift_bridgeObjectRetain();
      v87(v73, 0, 1, v18);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  v88 = v22[13];
  v89 = (char *)a1 + v88;
  v90 = &a2[v88];
  if (v20(&a2[v88], 1, v18))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    *v89 = *v90;
    *((_QWORD *)v89 + 1) = *((_QWORD *)v90 + 1);
    *((_DWORD *)v89 + 4) = *((_DWORD *)v90 + 4);
    v92 = *((_QWORD *)v90 + 7);
    if (v92 == 1)
    {
      v93 = *(_OWORD *)(v90 + 40);
      *(_OWORD *)(v89 + 24) = *(_OWORD *)(v90 + 24);
      *(_OWORD *)(v89 + 40) = v93;
      *((_QWORD *)v89 + 7) = *((_QWORD *)v90 + 7);
    }
    else
    {
      v89[24] = v90[24];
      *(_WORD *)(v89 + 25) = *(_WORD *)(v90 + 25);
      *(_OWORD *)(v89 + 28) = *(_OWORD *)(v90 + 28);
      *((_DWORD *)v89 + 11) = *((_DWORD *)v90 + 11);
      *((_QWORD *)v89 + 6) = *((_QWORD *)v90 + 6);
      *((_QWORD *)v89 + 7) = v92;
      swift_bridgeObjectRetain();
    }
    v94 = *(int *)(v18 + 28);
    v95 = &v89[v94];
    v96 = &v90[v94];
    v97 = sub_224F67874();
    v98 = *(_QWORD *)(v97 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v95, v96, v97);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
    }
    v100 = *(int *)(v18 + 32);
    v101 = &v89[v100];
    v102 = &v90[v100];
    v103 = *((_QWORD *)v102 + 1);
    *(_QWORD *)v101 = *(_QWORD *)v102;
    *((_QWORD *)v101 + 1) = v103;
    v104 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v143 + 56);
    swift_bridgeObjectRetain();
    v104(v89, 0, 1, v18);
  }
  v105 = v22[15];
  *(_QWORD *)((char *)a1 + v22[14]) = *(_QWORD *)&a2[v22[14]];
  *(_QWORD *)((char *)a1 + v105) = *(_QWORD *)&a2[v105];
  v106 = v22[16];
  v107 = v22[17];
  v108 = (_QWORD *)((char *)a1 + v106);
  v109 = &a2[v106];
  v110 = *((_QWORD *)v109 + 1);
  *v108 = *(_QWORD *)v109;
  v108[1] = v110;
  v111 = (char *)a1 + v107;
  v112 = &a2[v107];
  v113 = *(_QWORD *)&a2[v107 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v113 == 1)
  {
    *(_OWORD *)v111 = *(_OWORD *)v112;
    *((_QWORD *)v111 + 2) = *((_QWORD *)v112 + 2);
  }
  else
  {
    *(_QWORD *)v111 = *(_QWORD *)v112;
    *((_QWORD *)v111 + 1) = v113;
    *((_QWORD *)v111 + 2) = *((_QWORD *)v112 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v114 = v22[18];
  v115 = (_QWORD *)((char *)a1 + v114);
  v116 = &a2[v114];
  v117 = type metadata accessor for Quantity();
  v118 = *(_QWORD *)(v117 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
  {
    sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
  }
  else
  {
    v144 = v118;
    *(_OWORD *)v115 = *(_OWORD *)v116;
    *(_QWORD *)((char *)v115 + 13) = *(_QWORD *)(v116 + 13);
    v120 = *((_QWORD *)v116 + 4);
    v115[3] = *((_QWORD *)v116 + 3);
    v115[4] = v120;
    v121 = *((_QWORD *)v116 + 6);
    v115[5] = *((_QWORD *)v116 + 5);
    v115[6] = v121;
    v122 = *(int *)(v117 + 28);
    v142 = (char *)v115 + v122;
    v123 = &v116[v122];
    v124 = sub_224F675D4();
    __dstb = *(_QWORD **)(v124 - 8);
    v125 = (unsigned int (*)(char *, uint64_t, uint64_t))__dstb[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v125(v123, 1, v124))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v142, v123, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))__dstb[2])(v142, v123, v124);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v142, 0, 1, v124);
    }
    v127 = *(int *)(v117 + 32);
    v128 = (_QWORD *)((char *)v115 + v127);
    v129 = &v116[v127];
    v130 = *((_QWORD *)v129 + 1);
    *v128 = *(_QWORD *)v129;
    v128[1] = v130;
    v131 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v144 + 56);
    swift_bridgeObjectRetain();
    v131(v115, 0, 1, v117);
    v22 = v145;
  }
  v132 = v22[20];
  *(_QWORD *)((char *)a1 + v22[19]) = *(_QWORD *)&a2[v22[19]];
  v133 = (_QWORD *)((char *)a1 + v132);
  v134 = &a2[v132];
  v135 = *((_QWORD *)v134 + 1);
  *v133 = *(_QWORD *)v134;
  v133[1] = v135;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.Observation(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  void (*v36)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  int v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  void (*v77)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  void *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(void *, uint64_t, uint64_t);
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(_BYTE *, uint64_t, uint64_t);
  int v99;
  int v100;
  uint64_t (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  int v105;
  int v106;
  uint64_t (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  void (*v126)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  void (*v143)(_BYTE *, _QWORD, uint64_t, uint64_t);
  __int128 *v144;
  __int128 *v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _BYTE *v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  void (*v159)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(_BYTE *, uint64_t, uint64_t);
  int v169;
  uint64_t v170;
  size_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  int v180;
  int v181;
  uint64_t (*v182)(uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  int v187;
  int v188;
  uint64_t (*v189)(uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 *v194;
  __int128 *v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  void *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  char *v208;
  void (*v209)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  void *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(void *, uint64_t, uint64_t);
  int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  char *v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t (*v240)(_QWORD *, uint64_t, uint64_t);
  int v241;
  int v242;
  uint64_t (*v243)(uint64_t, uint64_t);
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int (*v250)(char *, uint64_t, uint64_t);
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t (*v258)(char *, uint64_t, uint64_t);
  int v259;
  int v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  void (*v264)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 *v276;
  __int128 *v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  void *v283;
  _BYTE *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  void (*v291)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  void *v296;
  _BYTE *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t (*v300)(void *, uint64_t, uint64_t);
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  void *v307;
  _BYTE *__dst;
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t (*v312)(uint64_t, uint64_t, uint64_t);
  char *v313;
  int *v314;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[2] = v4[2];
  v5[3] = v4[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = v5 + 4;
  v7 = v4[4];
  if (v5[4] == 1)
  {
    if (v7 == 1)
    {
      v8 = 1;
LABEL_6:
      *v6 = v8;
      goto LABEL_9;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v7 == 1)
    {
      sub_224E2C98C((uint64_t)(v5 + 4));
      v8 = v4[4];
      goto LABEL_6;
    }
    *v6 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  v5[5] = v4[5];
  v5[6] = v4[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[7] = v4[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[8] = v4[8];
  v5[9] = v4[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[10] = v4[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = a3[10];
  v10 = (uint64_t)v5 + v9;
  v11 = (char *)v4 + v9;
  v12 = type metadata accessor for FHIRDateTime();
  v309 = *(_QWORD *)(v12 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v309 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13((uint64_t)v11, 1, v12);
  v312 = v13;
  v314 = a3;
  v311 = v4;
  if (!v14)
  {
    if (v15)
    {
      sub_224DDEAA0(v10, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_14;
    }
    *(_BYTE *)v10 = *v11;
    *(_QWORD *)(v10 + 8) = *((_QWORD *)v11 + 1);
    *(_WORD *)(v10 + 16) = *((_WORD *)v11 + 8);
    *(_WORD *)(v10 + 18) = *((_WORD *)v11 + 9);
    v21 = (__int128 *)(v10 + 24);
    v22 = (__int128 *)(v11 + 24);
    v23 = *((_QWORD *)v11 + 7);
    if (*(_QWORD *)(v10 + 56) == 1)
    {
      if (v23 == 1)
      {
        v24 = *v22;
        v25 = *(_OWORD *)(v11 + 40);
        *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
        *v21 = v24;
        *(_OWORD *)(v10 + 40) = v25;
      }
      else
      {
        *(_BYTE *)(v10 + 24) = v11[24];
        *(_BYTE *)(v10 + 25) = v11[25];
        *(_BYTE *)(v10 + 26) = v11[26];
        v39 = *(_OWORD *)(v11 + 28);
        *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
        *(_OWORD *)(v10 + 28) = v39;
        *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
        *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v23 == 1)
    {
      sub_224E2C9F4(v10 + 24);
      v37 = *((_QWORD *)v11 + 7);
      v38 = *(_OWORD *)(v11 + 40);
      *v21 = *v22;
      *(_OWORD *)(v10 + 40) = v38;
      *(_QWORD *)(v10 + 56) = v37;
    }
    else
    {
      *(_BYTE *)(v10 + 24) = v11[24];
      *(_BYTE *)(v10 + 25) = v11[25];
      *(_BYTE *)(v10 + 26) = v11[26];
      *(_DWORD *)(v10 + 28) = *((_DWORD *)v11 + 7);
      *(_WORD *)(v10 + 32) = *((_WORD *)v11 + 16);
      *(_WORD *)(v10 + 34) = *((_WORD *)v11 + 17);
      *(_WORD *)(v10 + 36) = *((_WORD *)v11 + 18);
      *(_WORD *)(v10 + 38) = *((_WORD *)v11 + 19);
      *(_WORD *)(v10 + 40) = *((_WORD *)v11 + 20);
      *(_WORD *)(v10 + 42) = *((_WORD *)v11 + 21);
      *(_WORD *)(v10 + 44) = *((_WORD *)v11 + 22);
      *(_WORD *)(v10 + 46) = *((_WORD *)v11 + 23);
      *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
      *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v40 = *(int *)(v12 + 28);
    v41 = (void *)(v10 + v40);
    v42 = &v11[v40];
    v43 = sub_224F67874();
    v44 = *(_QWORD *)(v43 - 8);
    v45 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
    v46 = v45(v41, 1, v43);
    v47 = v45(v42, 1, v43);
    if (v46)
    {
      if (!v47)
      {
        (*(void (**)(void *, char *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
LABEL_35:
        v4 = v311;
        v13 = v312;
        a3 = v314;
        v49 = *(int *)(v12 + 32);
        v50 = (_QWORD *)(v10 + v49);
        v51 = &v11[v49];
        *v50 = *(_QWORD *)v51;
        v50[1] = *((_QWORD *)v51 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
    }
    else
    {
      if (!v47)
      {
        (*(void (**)(void *, char *, uint64_t))(v44 + 24))(v41, v42, v43);
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t))(v44 + 8))(v41, v43);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_35;
  }
  if (v15)
  {
    v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_14:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v16);
    memcpy((void *)v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_36;
  }
  *(_BYTE *)v10 = *v11;
  v18 = *((_QWORD *)v11 + 1);
  *(_DWORD *)(v10 + 16) = *((_DWORD *)v11 + 4);
  *(_QWORD *)(v10 + 8) = v18;
  if (*((_QWORD *)v11 + 7) == 1)
  {
    v19 = *(_OWORD *)(v11 + 24);
    v20 = *(_OWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
    *(_OWORD *)(v10 + 24) = v19;
    *(_OWORD *)(v10 + 40) = v20;
  }
  else
  {
    *(_BYTE *)(v10 + 24) = v11[24];
    *(_BYTE *)(v10 + 25) = v11[25];
    *(_BYTE *)(v10 + 26) = v11[26];
    v26 = *(_OWORD *)(v11 + 28);
    *(_DWORD *)(v10 + 44) = *((_DWORD *)v11 + 11);
    *(_OWORD *)(v10 + 28) = v26;
    *(_QWORD *)(v10 + 48) = *((_QWORD *)v11 + 6);
    *(_QWORD *)(v10 + 56) = *((_QWORD *)v11 + 7);
    swift_bridgeObjectRetain();
  }
  v27 = *(int *)(v12 + 28);
  v28 = (void *)(v10 + v27);
  v29 = &v11[v27];
  v30 = sub_224F67874();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  a3 = v314;
  v33 = *(int *)(v12 + 32);
  v34 = (_QWORD *)(v10 + v33);
  v35 = &v11[v33];
  *v34 = *(_QWORD *)v35;
  v34[1] = *((_QWORD *)v35 + 1);
  v36 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v309 + 56);
  swift_bridgeObjectRetain();
  v36(v10, 0, 1, v12);
  v13 = v312;
LABEL_36:
  v52 = a3[11];
  v53 = (uint64_t)v5 + v52;
  v54 = (char *)v4 + v52;
  v55 = v13((uint64_t)v5 + v52, 1, v12);
  v56 = v13((uint64_t)v54, 1, v12);
  if (!v55)
  {
    if (v56)
    {
      sub_224DDEAA0(v53, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v57 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_41;
    }
    *(_BYTE *)v53 = *v54;
    *(_QWORD *)(v53 + 8) = *((_QWORD *)v54 + 1);
    *(_WORD *)(v53 + 16) = *((_WORD *)v54 + 8);
    *(_WORD *)(v53 + 18) = *((_WORD *)v54 + 9);
    v62 = (__int128 *)(v53 + 24);
    v63 = (__int128 *)(v54 + 24);
    v64 = *((_QWORD *)v54 + 7);
    if (*(_QWORD *)(v53 + 56) == 1)
    {
      if (v64 == 1)
      {
        v65 = *v63;
        v66 = *(_OWORD *)(v54 + 40);
        *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
        *v62 = v65;
        *(_OWORD *)(v53 + 40) = v66;
      }
      else
      {
        *(_BYTE *)(v53 + 24) = v54[24];
        *(_BYTE *)(v53 + 25) = v54[25];
        *(_BYTE *)(v53 + 26) = v54[26];
        v80 = *(_OWORD *)(v54 + 28);
        *(_DWORD *)(v53 + 44) = *((_DWORD *)v54 + 11);
        *(_OWORD *)(v53 + 28) = v80;
        *(_QWORD *)(v53 + 48) = *((_QWORD *)v54 + 6);
        *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v64 == 1)
    {
      sub_224E2C9F4(v53 + 24);
      v78 = *((_QWORD *)v54 + 7);
      v79 = *(_OWORD *)(v54 + 40);
      *v62 = *v63;
      *(_OWORD *)(v53 + 40) = v79;
      *(_QWORD *)(v53 + 56) = v78;
    }
    else
    {
      *(_BYTE *)(v53 + 24) = v54[24];
      *(_BYTE *)(v53 + 25) = v54[25];
      *(_BYTE *)(v53 + 26) = v54[26];
      *(_DWORD *)(v53 + 28) = *((_DWORD *)v54 + 7);
      *(_WORD *)(v53 + 32) = *((_WORD *)v54 + 16);
      *(_WORD *)(v53 + 34) = *((_WORD *)v54 + 17);
      *(_WORD *)(v53 + 36) = *((_WORD *)v54 + 18);
      *(_WORD *)(v53 + 38) = *((_WORD *)v54 + 19);
      *(_WORD *)(v53 + 40) = *((_WORD *)v54 + 20);
      *(_WORD *)(v53 + 42) = *((_WORD *)v54 + 21);
      *(_WORD *)(v53 + 44) = *((_WORD *)v54 + 22);
      *(_WORD *)(v53 + 46) = *((_WORD *)v54 + 23);
      *(_QWORD *)(v53 + 48) = *((_QWORD *)v54 + 6);
      *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v81 = *(int *)(v12 + 28);
    v82 = (void *)(v53 + v81);
    v83 = &v54[v81];
    v84 = sub_224F67874();
    v85 = *(_QWORD *)(v84 - 8);
    v86 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v85 + 48);
    v87 = v86(v82, 1, v84);
    v88 = v86(v83, 1, v84);
    if (v87)
    {
      if (!v88)
      {
        (*(void (**)(void *, char *, uint64_t))(v85 + 16))(v82, v83, v84);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
LABEL_62:
        v4 = v311;
        a3 = v314;
        v90 = *(int *)(v12 + 32);
        v91 = (_QWORD *)(v53 + v90);
        v92 = &v54[v90];
        *v91 = *(_QWORD *)v92;
        v91[1] = *((_QWORD *)v92 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
    }
    else
    {
      if (!v88)
      {
        (*(void (**)(void *, char *, uint64_t))(v85 + 24))(v82, v83, v84);
        goto LABEL_62;
      }
      (*(void (**)(void *, uint64_t))(v85 + 8))(v82, v84);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    goto LABEL_62;
  }
  if (v56)
  {
    v57 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_41:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v57);
    memcpy((void *)v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_63;
  }
  *(_BYTE *)v53 = *v54;
  v59 = *((_QWORD *)v54 + 1);
  *(_DWORD *)(v53 + 16) = *((_DWORD *)v54 + 4);
  *(_QWORD *)(v53 + 8) = v59;
  if (*((_QWORD *)v54 + 7) == 1)
  {
    v60 = *(_OWORD *)(v54 + 24);
    v61 = *(_OWORD *)(v54 + 40);
    *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
    *(_OWORD *)(v53 + 24) = v60;
    *(_OWORD *)(v53 + 40) = v61;
  }
  else
  {
    *(_BYTE *)(v53 + 24) = v54[24];
    *(_BYTE *)(v53 + 25) = v54[25];
    *(_BYTE *)(v53 + 26) = v54[26];
    v67 = *(_OWORD *)(v54 + 28);
    *(_DWORD *)(v53 + 44) = *((_DWORD *)v54 + 11);
    *(_OWORD *)(v53 + 28) = v67;
    *(_QWORD *)(v53 + 48) = *((_QWORD *)v54 + 6);
    *(_QWORD *)(v53 + 56) = *((_QWORD *)v54 + 7);
    swift_bridgeObjectRetain();
  }
  v68 = *(int *)(v12 + 28);
  v69 = (void *)(v53 + v68);
  v70 = &v54[v68];
  v71 = sub_224F67874();
  v72 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v72 + 16))(v69, v70, v71);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  a3 = v314;
  v74 = *(int *)(v12 + 32);
  v75 = (_QWORD *)(v53 + v74);
  v76 = &v54[v74];
  *v75 = *(_QWORD *)v76;
  v75[1] = *((_QWORD *)v76 + 1);
  v77 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v309 + 56);
  swift_bridgeObjectRetain();
  v77(v53, 0, 1, v12);
LABEL_63:
  v93 = a3[12];
  v94 = (char *)v5 + v93;
  v95 = (char *)v4 + v93;
  v96 = type metadata accessor for Period();
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  if (!v99)
  {
    if (v100)
    {
      sub_224DDEAA0((uint64_t)v94, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v101 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_68;
    }
    v103 = v312;
    v105 = v312((uint64_t)v94, 1, v12);
    v106 = v312((uint64_t)v95, 1, v12);
    if (v105)
    {
      if (v106)
      {
        v107 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_79:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v107);
        memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
        goto LABEL_120;
      }
      *v94 = *v95;
      v119 = *((_QWORD *)v95 + 1);
      *((_DWORD *)v94 + 4) = *((_DWORD *)v95 + 4);
      *((_QWORD *)v94 + 1) = v119;
      v120 = v4;
      if (*((_QWORD *)v95 + 7) == 1)
      {
        v121 = *(_OWORD *)(v95 + 24);
        v122 = *(_OWORD *)(v95 + 40);
        *((_QWORD *)v94 + 7) = *((_QWORD *)v95 + 7);
        *(_OWORD *)(v94 + 24) = v121;
        *(_OWORD *)(v94 + 40) = v122;
      }
      else
      {
        v94[24] = v95[24];
        v94[25] = v95[25];
        v94[26] = v95[26];
        v149 = *(_OWORD *)(v95 + 28);
        *((_DWORD *)v94 + 11) = *((_DWORD *)v95 + 11);
        *(_OWORD *)(v94 + 28) = v149;
        *((_QWORD *)v94 + 6) = *((_QWORD *)v95 + 6);
        *((_QWORD *)v94 + 7) = *((_QWORD *)v95 + 7);
        swift_bridgeObjectRetain();
      }
      v150 = *(int *)(v12 + 28);
      v151 = &v94[v150];
      v152 = &v95[v150];
      v153 = sub_224F67874();
      v154 = *(_QWORD *)(v153 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v154 + 16))(v151, v152, v153);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v151, 0, 1, v153);
      }
      v4 = v120;
      v156 = *(int *)(v12 + 32);
      v157 = &v94[v156];
      v158 = &v95[v156];
      *v157 = *v158;
      v157[1] = v158[1];
      v159 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v309 + 56);
      swift_bridgeObjectRetain();
      v159(v94, 0, 1, v12);
      v103 = v312;
      a3 = v314;
LABEL_120:
      v177 = *(int *)(v96 + 20);
      v178 = (uint64_t)&v94[v177];
      v179 = &v95[v177];
      v180 = v103(v178, 1, v12);
      v181 = v103((uint64_t)v179, 1, v12);
      if (v180)
      {
        if (!v181)
        {
          *(_BYTE *)v178 = *v179;
          v273 = *((_QWORD *)v179 + 1);
          *(_DWORD *)(v178 + 16) = *((_DWORD *)v179 + 4);
          *(_QWORD *)(v178 + 8) = v273;
          if (*((_QWORD *)v179 + 7) == 1)
          {
            v274 = *(_OWORD *)(v179 + 24);
            v275 = *(_OWORD *)(v179 + 40);
            *(_QWORD *)(v178 + 56) = *((_QWORD *)v179 + 7);
            *(_OWORD *)(v178 + 24) = v274;
            *(_OWORD *)(v178 + 40) = v275;
          }
          else
          {
            *(_BYTE *)(v178 + 24) = v179[24];
            *(_BYTE *)(v178 + 25) = v179[25];
            *(_BYTE *)(v178 + 26) = v179[26];
            v281 = *(_OWORD *)(v179 + 28);
            *(_DWORD *)(v178 + 44) = *((_DWORD *)v179 + 11);
            *(_OWORD *)(v178 + 28) = v281;
            *(_QWORD *)(v178 + 48) = *((_QWORD *)v179 + 6);
            *(_QWORD *)(v178 + 56) = *((_QWORD *)v179 + 7);
            swift_bridgeObjectRetain();
          }
          v282 = *(int *)(v12 + 28);
          v283 = (void *)(v178 + v282);
          v284 = &v179[v282];
          v285 = sub_224F67874();
          v286 = *(_QWORD *)(v285 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v286 + 48))(v284, 1, v285))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v283, v284, *(_QWORD *)(*(_QWORD *)(v287 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v286 + 16))(v283, v284, v285);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v286 + 56))(v283, 0, 1, v285);
          }
          a3 = v314;
          v288 = *(int *)(v12 + 32);
          v289 = (_QWORD *)(v178 + v288);
          v290 = &v179[v288];
          *v289 = *v290;
          v289[1] = v290[1];
          v291 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v309 + 56);
          swift_bridgeObjectRetain();
          v291(v178, 0, 1, v12);
          goto LABEL_69;
        }
        v182 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_125;
      }
      if (v181)
      {
        sub_224DDEAA0(v178, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v182 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_125:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v182);
        memcpy((void *)v178, v179, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
        goto LABEL_126;
      }
      *(_BYTE *)v178 = *v179;
      *(_QWORD *)(v178 + 8) = *((_QWORD *)v179 + 1);
      *(_WORD *)(v178 + 16) = *((_WORD *)v179 + 8);
      *(_WORD *)(v178 + 18) = *((_WORD *)v179 + 9);
      v276 = (__int128 *)(v178 + 24);
      v277 = (__int128 *)(v179 + 24);
      v278 = *((_QWORD *)v179 + 7);
      if (*(_QWORD *)(v178 + 56) == 1)
      {
        if (v278 == 1)
        {
          v279 = *v277;
          v280 = *(_OWORD *)(v179 + 40);
          *(_QWORD *)(v178 + 56) = *((_QWORD *)v179 + 7);
          *v276 = v279;
          *(_OWORD *)(v178 + 40) = v280;
        }
        else
        {
          *(_BYTE *)(v178 + 24) = v179[24];
          *(_BYTE *)(v178 + 25) = v179[25];
          *(_BYTE *)(v178 + 26) = v179[26];
          v294 = *(_OWORD *)(v179 + 28);
          *(_DWORD *)(v178 + 44) = *((_DWORD *)v179 + 11);
          *(_OWORD *)(v178 + 28) = v294;
          *(_QWORD *)(v178 + 48) = *((_QWORD *)v179 + 6);
          *(_QWORD *)(v178 + 56) = *((_QWORD *)v179 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v278 == 1)
      {
        sub_224E2C9F4(v178 + 24);
        v292 = *((_QWORD *)v179 + 7);
        v293 = *(_OWORD *)(v179 + 40);
        *v276 = *v277;
        *(_OWORD *)(v178 + 40) = v293;
        *(_QWORD *)(v178 + 56) = v292;
      }
      else
      {
        *(_BYTE *)(v178 + 24) = v179[24];
        *(_BYTE *)(v178 + 25) = v179[25];
        *(_BYTE *)(v178 + 26) = v179[26];
        *(_DWORD *)(v178 + 28) = *((_DWORD *)v179 + 7);
        *(_WORD *)(v178 + 32) = *((_WORD *)v179 + 16);
        *(_WORD *)(v178 + 34) = *((_WORD *)v179 + 17);
        *(_WORD *)(v178 + 36) = *((_WORD *)v179 + 18);
        *(_WORD *)(v178 + 38) = *((_WORD *)v179 + 19);
        *(_WORD *)(v178 + 40) = *((_WORD *)v179 + 20);
        *(_WORD *)(v178 + 42) = *((_WORD *)v179 + 21);
        *(_WORD *)(v178 + 44) = *((_WORD *)v179 + 22);
        *(_WORD *)(v178 + 46) = *((_WORD *)v179 + 23);
        *(_QWORD *)(v178 + 48) = *((_QWORD *)v179 + 6);
        *(_QWORD *)(v178 + 56) = *((_QWORD *)v179 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v295 = *(int *)(v12 + 28);
      v296 = (void *)(v178 + v295);
      v297 = &v179[v295];
      v298 = sub_224F67874();
      v299 = *(_QWORD *)(v298 - 8);
      v300 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v299 + 48);
      v301 = v300(v296, 1, v298);
      v302 = v300(v297, 1, v298);
      if (v301)
      {
        if (!v302)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v299 + 16))(v296, v297, v298);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v296, 0, 1, v298);
LABEL_200:
          v4 = v311;
          a3 = v314;
          v304 = *(int *)(v12 + 32);
          v305 = (_QWORD *)(v178 + v304);
          v306 = &v179[v304];
          *v305 = *v306;
          v305[1] = v306[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_69;
        }
      }
      else
      {
        if (!v302)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v299 + 24))(v296, v297, v298);
          goto LABEL_200;
        }
        (*(void (**)(void *, uint64_t))(v299 + 8))(v296, v298);
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v296, v297, *(_QWORD *)(*(_QWORD *)(v303 - 8) + 64));
      goto LABEL_200;
    }
    if (v106)
    {
      sub_224DDEAA0((uint64_t)v94, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v107 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_79;
    }
    *v94 = *v95;
    *((_QWORD *)v94 + 1) = *((_QWORD *)v95 + 1);
    *((_WORD *)v94 + 8) = *((_WORD *)v95 + 8);
    *((_WORD *)v94 + 9) = *((_WORD *)v95 + 9);
    v144 = (__int128 *)(v94 + 24);
    v145 = (__int128 *)(v95 + 24);
    v146 = *((_QWORD *)v95 + 7);
    if (*((_QWORD *)v94 + 7) == 1)
    {
      if (v146 == 1)
      {
        v147 = *v145;
        v148 = *(_OWORD *)(v95 + 40);
        *((_QWORD *)v94 + 7) = *((_QWORD *)v95 + 7);
        *v144 = v147;
        *(_OWORD *)(v94 + 40) = v148;
      }
      else
      {
        v94[24] = v95[24];
        v94[25] = v95[25];
        v94[26] = v95[26];
        v162 = *(_OWORD *)(v95 + 28);
        *((_DWORD *)v94 + 11) = *((_DWORD *)v95 + 11);
        *(_OWORD *)(v94 + 28) = v162;
        *((_QWORD *)v94 + 6) = *((_QWORD *)v95 + 6);
        *((_QWORD *)v94 + 7) = *((_QWORD *)v95 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v146 == 1)
    {
      sub_224E2C9F4((uint64_t)(v94 + 24));
      v160 = *((_QWORD *)v95 + 7);
      v161 = *(_OWORD *)(v95 + 40);
      *v144 = *v145;
      *(_OWORD *)(v94 + 40) = v161;
      *((_QWORD *)v94 + 7) = v160;
    }
    else
    {
      v94[24] = v95[24];
      v94[25] = v95[25];
      v94[26] = v95[26];
      *((_DWORD *)v94 + 7) = *((_DWORD *)v95 + 7);
      *((_WORD *)v94 + 16) = *((_WORD *)v95 + 16);
      *((_WORD *)v94 + 17) = *((_WORD *)v95 + 17);
      *((_WORD *)v94 + 18) = *((_WORD *)v95 + 18);
      *((_WORD *)v94 + 19) = *((_WORD *)v95 + 19);
      *((_WORD *)v94 + 20) = *((_WORD *)v95 + 20);
      *((_WORD *)v94 + 21) = *((_WORD *)v95 + 21);
      *((_WORD *)v94 + 22) = *((_WORD *)v95 + 22);
      *((_WORD *)v94 + 23) = *((_WORD *)v95 + 23);
      *((_QWORD *)v94 + 6) = *((_QWORD *)v95 + 6);
      *((_QWORD *)v94 + 7) = *((_QWORD *)v95 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v163 = *(int *)(v12 + 28);
    v164 = &v94[v163];
    v165 = &v95[v163];
    v166 = sub_224F67874();
    v167 = *(_QWORD *)(v166 - 8);
    v168 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v167 + 48);
    v307 = v164;
    LODWORD(v164) = v168(v164, 1, v166);
    v169 = v168(v165, 1, v166);
    if ((_DWORD)v164)
    {
      if (!v169)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v167 + 16))(v307, v165, v166);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v307, 0, 1, v166);
        goto LABEL_119;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v171 = *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64);
      v172 = v307;
    }
    else
    {
      if (!v169)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v167 + 24))(v307, v165, v166);
        goto LABEL_119;
      }
      (*(void (**)(void *, uint64_t))(v167 + 8))(v307, v166);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v171 = *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64);
      v172 = v307;
    }
    memcpy(v172, v165, v171);
LABEL_119:
    a3 = v314;
    v174 = *(int *)(v12 + 32);
    v175 = &v94[v174];
    v176 = &v95[v174];
    *v175 = *v176;
    v175[1] = v176[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v4 = v311;
    v103 = v312;
    goto LABEL_120;
  }
  if (v100)
  {
    v101 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_68:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v101);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
LABEL_69:
    v103 = v312;
    goto LABEL_126;
  }
  v103 = v312;
  if (v312((uint64_t)v95, 1, v12))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
  }
  else
  {
    *v94 = *v95;
    v108 = *((_QWORD *)v95 + 1);
    *((_DWORD *)v94 + 4) = *((_DWORD *)v95 + 4);
    *((_QWORD *)v94 + 1) = v108;
    if (*((_QWORD *)v95 + 7) == 1)
    {
      v109 = *(_OWORD *)(v95 + 24);
      v110 = *(_OWORD *)(v95 + 40);
      *((_QWORD *)v94 + 7) = *((_QWORD *)v95 + 7);
      *(_OWORD *)(v94 + 24) = v109;
      *(_OWORD *)(v94 + 40) = v110;
    }
    else
    {
      v94[24] = v95[24];
      v94[25] = v95[25];
      v94[26] = v95[26];
      v112 = *(_OWORD *)(v95 + 28);
      *((_DWORD *)v94 + 11) = *((_DWORD *)v95 + 11);
      *(_OWORD *)(v94 + 28) = v112;
      *((_QWORD *)v94 + 6) = *((_QWORD *)v95 + 6);
      *((_QWORD *)v94 + 7) = *((_QWORD *)v95 + 7);
      swift_bridgeObjectRetain();
    }
    v113 = *(int *)(v12 + 28);
    v114 = &v94[v113];
    v115 = &v95[v113];
    v116 = sub_224F67874();
    v117 = *(_QWORD *)(v116 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v117 + 16))(v114, v115, v116);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
    }
    v123 = *(int *)(v12 + 32);
    v124 = &v94[v123];
    v125 = &v95[v123];
    *v124 = *v125;
    v124[1] = v125[1];
    v4 = v311;
    v126 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v309 + 56);
    swift_bridgeObjectRetain();
    v126(v94, 0, 1, v12);
    v103 = v312;
    a3 = v314;
  }
  v127 = *(int *)(v96 + 20);
  v128 = &v94[v127];
  v129 = &v95[v127];
  if (v103((uint64_t)v129, 1, v12))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
  }
  else
  {
    *v128 = *v129;
    v131 = *((_QWORD *)v129 + 1);
    *((_DWORD *)v128 + 4) = *((_DWORD *)v129 + 4);
    *((_QWORD *)v128 + 1) = v131;
    if (*((_QWORD *)v129 + 7) == 1)
    {
      v132 = *(_OWORD *)(v129 + 24);
      v133 = *(_OWORD *)(v129 + 40);
      *((_QWORD *)v128 + 7) = *((_QWORD *)v129 + 7);
      *(_OWORD *)(v128 + 24) = v132;
      *(_OWORD *)(v128 + 40) = v133;
    }
    else
    {
      v128[24] = v129[24];
      v128[25] = v129[25];
      v128[26] = v129[26];
      v134 = *(_OWORD *)(v129 + 28);
      *((_DWORD *)v128 + 11) = *((_DWORD *)v129 + 11);
      *(_OWORD *)(v128 + 28) = v134;
      *((_QWORD *)v128 + 6) = *((_QWORD *)v129 + 6);
      *((_QWORD *)v128 + 7) = *((_QWORD *)v129 + 7);
      swift_bridgeObjectRetain();
    }
    v135 = *(int *)(v12 + 28);
    __dst = &v128[v135];
    v136 = &v129[v135];
    v137 = sub_224F67874();
    v138 = *(_QWORD *)(v137 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v138 + 48))(v136, 1, v137))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v136, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v138 + 16))(__dst, v136, v137);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v138 + 56))(__dst, 0, 1, v137);
    }
    a3 = v314;
    v140 = *(int *)(v12 + 32);
    v141 = &v128[v140];
    v142 = &v129[v140];
    *v141 = *v142;
    v141[1] = v142[1];
    v143 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v309 + 56);
    swift_bridgeObjectRetain();
    v143(v128, 0, 1, v12);
    v4 = v311;
    v103 = v312;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
LABEL_126:
  v184 = a3[13];
  v185 = (uint64_t)v5 + v184;
  v186 = (char *)v4 + v184;
  v187 = v103((uint64_t)v5 + v184, 1, v12);
  v188 = v103((uint64_t)v186, 1, v12);
  if (!v187)
  {
    if (v188)
    {
      sub_224DDEAA0(v185, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v189 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_131;
    }
    *(_BYTE *)v185 = *v186;
    *(_QWORD *)(v185 + 8) = *((_QWORD *)v186 + 1);
    *(_WORD *)(v185 + 16) = *((_WORD *)v186 + 8);
    *(_WORD *)(v185 + 18) = *((_WORD *)v186 + 9);
    v194 = (__int128 *)(v185 + 24);
    v195 = (__int128 *)(v186 + 24);
    v196 = *((_QWORD *)v186 + 7);
    if (*(_QWORD *)(v185 + 56) == 1)
    {
      if (v196 == 1)
      {
        v197 = *v195;
        v198 = *(_OWORD *)(v186 + 40);
        *(_QWORD *)(v185 + 56) = *((_QWORD *)v186 + 7);
        *v194 = v197;
        *(_OWORD *)(v185 + 40) = v198;
      }
      else
      {
        *(_BYTE *)(v185 + 24) = v186[24];
        *(_BYTE *)(v185 + 25) = v186[25];
        *(_BYTE *)(v185 + 26) = v186[26];
        v212 = *(_OWORD *)(v186 + 28);
        *(_DWORD *)(v185 + 44) = *((_DWORD *)v186 + 11);
        *(_OWORD *)(v185 + 28) = v212;
        *(_QWORD *)(v185 + 48) = *((_QWORD *)v186 + 6);
        *(_QWORD *)(v185 + 56) = *((_QWORD *)v186 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v196 == 1)
    {
      sub_224E2C9F4(v185 + 24);
      v210 = *((_QWORD *)v186 + 7);
      v211 = *(_OWORD *)(v186 + 40);
      *v194 = *v195;
      *(_OWORD *)(v185 + 40) = v211;
      *(_QWORD *)(v185 + 56) = v210;
    }
    else
    {
      *(_BYTE *)(v185 + 24) = v186[24];
      *(_BYTE *)(v185 + 25) = v186[25];
      *(_BYTE *)(v185 + 26) = v186[26];
      *(_DWORD *)(v185 + 28) = *((_DWORD *)v186 + 7);
      *(_WORD *)(v185 + 32) = *((_WORD *)v186 + 16);
      *(_WORD *)(v185 + 34) = *((_WORD *)v186 + 17);
      *(_WORD *)(v185 + 36) = *((_WORD *)v186 + 18);
      *(_WORD *)(v185 + 38) = *((_WORD *)v186 + 19);
      *(_WORD *)(v185 + 40) = *((_WORD *)v186 + 20);
      *(_WORD *)(v185 + 42) = *((_WORD *)v186 + 21);
      *(_WORD *)(v185 + 44) = *((_WORD *)v186 + 22);
      *(_WORD *)(v185 + 46) = *((_WORD *)v186 + 23);
      *(_QWORD *)(v185 + 48) = *((_QWORD *)v186 + 6);
      *(_QWORD *)(v185 + 56) = *((_QWORD *)v186 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v213 = *(int *)(v12 + 28);
    v214 = (void *)(v185 + v213);
    v215 = &v186[v213];
    v216 = sub_224F67874();
    v217 = *(_QWORD *)(v216 - 8);
    v218 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v217 + 48);
    v219 = v218(v214, 1, v216);
    v220 = v218(v215, 1, v216);
    if (v219)
    {
      if (!v220)
      {
        (*(void (**)(void *, char *, uint64_t))(v217 + 16))(v214, v215, v216);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
LABEL_152:
        v4 = v311;
        a3 = v314;
        v222 = *(int *)(v12 + 32);
        v223 = (_QWORD *)(v185 + v222);
        v224 = &v186[v222];
        *v223 = *(_QWORD *)v224;
        v223[1] = *((_QWORD *)v224 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_153;
      }
    }
    else
    {
      if (!v220)
      {
        (*(void (**)(void *, char *, uint64_t))(v217 + 24))(v214, v215, v216);
        goto LABEL_152;
      }
      (*(void (**)(void *, uint64_t))(v217 + 8))(v214, v216);
    }
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
    goto LABEL_152;
  }
  if (v188)
  {
    v189 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_131:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v189);
    memcpy((void *)v185, v186, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
    goto LABEL_153;
  }
  *(_BYTE *)v185 = *v186;
  v191 = *((_QWORD *)v186 + 1);
  *(_DWORD *)(v185 + 16) = *((_DWORD *)v186 + 4);
  *(_QWORD *)(v185 + 8) = v191;
  if (*((_QWORD *)v186 + 7) == 1)
  {
    v192 = *(_OWORD *)(v186 + 24);
    v193 = *(_OWORD *)(v186 + 40);
    *(_QWORD *)(v185 + 56) = *((_QWORD *)v186 + 7);
    *(_OWORD *)(v185 + 24) = v192;
    *(_OWORD *)(v185 + 40) = v193;
  }
  else
  {
    *(_BYTE *)(v185 + 24) = v186[24];
    *(_BYTE *)(v185 + 25) = v186[25];
    *(_BYTE *)(v185 + 26) = v186[26];
    v199 = *(_OWORD *)(v186 + 28);
    *(_DWORD *)(v185 + 44) = *((_DWORD *)v186 + 11);
    *(_OWORD *)(v185 + 28) = v199;
    *(_QWORD *)(v185 + 48) = *((_QWORD *)v186 + 6);
    *(_QWORD *)(v185 + 56) = *((_QWORD *)v186 + 7);
    swift_bridgeObjectRetain();
  }
  v200 = *(int *)(v12 + 28);
  v201 = (void *)(v185 + v200);
  v202 = &v186[v200];
  v203 = sub_224F67874();
  v204 = *(_QWORD *)(v203 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48))(v202, 1, v203))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v204 + 16))(v201, v202, v203);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v204 + 56))(v201, 0, 1, v203);
  }
  a3 = v314;
  v206 = *(int *)(v12 + 32);
  v207 = (_QWORD *)(v185 + v206);
  v208 = &v186[v206];
  *v207 = *(_QWORD *)v208;
  v207[1] = *((_QWORD *)v208 + 1);
  v209 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v309 + 56);
  swift_bridgeObjectRetain();
  v209(v185, 0, 1, v12);
LABEL_153:
  *(_QWORD *)((char *)v5 + a3[14]) = *(_QWORD *)((char *)v4 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v5 + a3[15]) = *(_QWORD *)((char *)v4 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v225 = a3[16];
  v226 = (_QWORD *)((char *)v5 + v225);
  v227 = (_QWORD *)((char *)v4 + v225);
  *v226 = *v227;
  v226[1] = v227[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v228 = a3[17];
  v229 = (uint64_t)v5 + v228;
  v230 = (char *)v4 + v228;
  v231 = *(_QWORD *)((char *)v5 + v228 + 8);
  v232 = *(_QWORD *)((char *)v4 + v228 + 8);
  if (v231 == 1)
  {
    if (v232 == 1)
    {
      v233 = *(_OWORD *)v230;
      *(_QWORD *)(v229 + 16) = *((_QWORD *)v230 + 2);
      *(_OWORD *)v229 = v233;
    }
    else
    {
      *(_QWORD *)v229 = *(_QWORD *)v230;
      *(_QWORD *)(v229 + 8) = *((_QWORD *)v230 + 1);
      *(_QWORD *)(v229 + 16) = *((_QWORD *)v230 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v232 == 1)
  {
    sub_224E2C9C0(v229);
    v234 = *((_QWORD *)v230 + 2);
    *(_OWORD *)v229 = *(_OWORD *)v230;
    *(_QWORD *)(v229 + 16) = v234;
  }
  else
  {
    *(_QWORD *)v229 = *(_QWORD *)v230;
    *(_QWORD *)(v229 + 8) = *((_QWORD *)v230 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v229 + 16) = *((_QWORD *)v230 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v235 = a3[18];
  v236 = (_QWORD *)((char *)v5 + v235);
  v237 = (_QWORD *)((char *)v4 + v235);
  v238 = type metadata accessor for Quantity();
  v239 = *(_QWORD *)(v238 - 8);
  v240 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v239 + 48);
  v241 = v240(v236, 1, v238);
  v242 = v240(v237, 1, v238);
  if (!v241)
  {
    if (v242)
    {
      sub_224DDEAA0((uint64_t)v236, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      v243 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_165;
    }
    v252 = *(_OWORD *)v237;
    *(_QWORD *)((char *)v236 + 13) = *(_QWORD *)((char *)v237 + 13);
    *(_OWORD *)v236 = v252;
    v236[3] = v237[3];
    v236[4] = v237[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v236[5] = v237[5];
    v236[6] = v237[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v253 = *(int *)(v238 + 28);
    v254 = (char *)v236 + v253;
    v255 = (char *)v237 + v253;
    v256 = sub_224F675D4();
    v257 = *(_QWORD *)(v256 - 8);
    v258 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v257 + 48);
    v259 = v258(v254, 1, v256);
    v260 = v258(v255, 1, v256);
    if (v259)
    {
      if (!v260)
      {
        (*(void (**)(char *, char *, uint64_t))(v257 + 16))(v254, v255, v256);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v257 + 56))(v254, 0, 1, v256);
LABEL_176:
        v4 = v311;
        a3 = v314;
        v266 = *(int *)(v238 + 32);
        v267 = (_QWORD *)((char *)v236 + v266);
        v268 = (_QWORD *)((char *)v237 + v266);
        *v267 = *v268;
        v267[1] = v268[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_177;
      }
    }
    else
    {
      if (!v260)
      {
        (*(void (**)(char *, char *, uint64_t))(v257 + 24))(v254, v255, v256);
        goto LABEL_176;
      }
      (*(void (**)(char *, uint64_t))(v257 + 8))(v254, v256);
    }
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
    goto LABEL_176;
  }
  if (v242)
  {
    v243 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_165:
    sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, v243);
    memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
    goto LABEL_177;
  }
  v310 = v5;
  v245 = *(_OWORD *)v237;
  *(_QWORD *)((char *)v236 + 13) = *(_QWORD *)((char *)v237 + 13);
  *(_OWORD *)v236 = v245;
  v236[3] = v237[3];
  v236[4] = v237[4];
  v236[5] = v237[5];
  v236[6] = v237[6];
  v246 = *(int *)(v238 + 28);
  v313 = (char *)v236 + v246;
  v247 = (char *)v237 + v246;
  v248 = sub_224F675D4();
  v249 = *(_QWORD *)(v248 - 8);
  v250 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v249 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v250(v247, 1, v248))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v313, v247, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v249 + 16))(v313, v247, v248);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v249 + 56))(v313, 0, 1, v248);
  }
  v5 = v310;
  v4 = v311;
  a3 = v314;
  v261 = *(int *)(v238 + 32);
  v262 = (_QWORD *)((char *)v236 + v261);
  v263 = (_QWORD *)((char *)v237 + v261);
  *v262 = *v263;
  v262[1] = v263[1];
  v264 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v239 + 56);
  swift_bridgeObjectRetain();
  v264(v236, 0, 1, v238);
LABEL_177:
  *(_QWORD *)((char *)v5 + a3[19]) = *(_QWORD *)((char *)v4 + a3[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v269 = a3[20];
  v270 = (_QWORD *)((char *)v5 + v269);
  v271 = (_QWORD *)((char *)v4 + v269);
  *v270 = *v271;
  v270[1] = v271[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t initializeWithTake for ModelsR4.Observation(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD, _QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  _BYTE *__dst;
  _BYTE *__dsta;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(_QWORD, _QWORD, _QWORD);
  _QWORD *v83;
  char *v84;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v8 = a3[10];
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  *(_OWORD *)(a1 + 64) = v7;
  v11 = type metadata accessor for FHIRDateTime();
  v83 = *(_QWORD **)(v11 - 8);
  v12 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v83[6];
  v82 = v12;
  if (v12(v10, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
    *((_DWORD *)v9 + 4) = *((_DWORD *)v10 + 4);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 24);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
    v14 = *(int *)(v11 + 28);
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = sub_224F67874();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    *(_OWORD *)&v9[*(int *)(v11 + 32)] = *(_OWORD *)&v10[*(int *)(v11 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v83[7])(v9, 0, 1, v11);
    v12 = v82;
  }
  v20 = a3[11];
  v21 = (_BYTE *)(a1 + v20);
  v22 = (_BYTE *)(a2 + v20);
  if (v12(a2 + v20, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v21 = *v22;
    *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
    *((_DWORD *)v21 + 4) = *((_DWORD *)v22 + 4);
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
    *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
    v24 = *(int *)(v11 + 28);
    v25 = &v21[v24];
    v26 = &v22[v24];
    v27 = sub_224F67874();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    *(_OWORD *)&v21[*(int *)(v11 + 32)] = *(_OWORD *)&v22[*(int *)(v11 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v83[7])(v21, 0, 1, v11);
    v12 = v82;
  }
  v30 = a3[12];
  v31 = (_BYTE *)(a1 + v30);
  v32 = (_BYTE *)(a2 + v30);
  v33 = type metadata accessor for Period();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    if (v12(v32, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *v31 = *v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      *((_DWORD *)v31 + 4) = *((_DWORD *)v32 + 4);
      *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
      *(_OWORD *)(v31 + 40) = *(_OWORD *)(v32 + 40);
      *((_QWORD *)v31 + 7) = *((_QWORD *)v32 + 7);
      v37 = *(int *)(v11 + 28);
      __dst = &v31[v37];
      v80 = v34;
      v38 = &v32[v37];
      v39 = sub_224F67874();
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v40 + 32))(__dst, v38, v39);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
      }
      *(_OWORD *)&v31[*(int *)(v11 + 32)] = *(_OWORD *)&v32[*(int *)(v11 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v83[7])(v31, 0, 1, v11);
      v34 = v80;
      v12 = v82;
    }
    v42 = *(int *)(v33 + 20);
    v43 = &v31[v42];
    v44 = &v32[v42];
    if (v12(v44, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      *v43 = *v44;
      *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
      *((_DWORD *)v43 + 4) = *((_DWORD *)v44 + 4);
      *(_OWORD *)(v43 + 24) = *(_OWORD *)(v44 + 24);
      *(_OWORD *)(v43 + 40) = *(_OWORD *)(v44 + 40);
      *((_QWORD *)v43 + 7) = *((_QWORD *)v44 + 7);
      v46 = *(int *)(v11 + 28);
      __dsta = &v43[v46];
      v81 = v34;
      v47 = &v44[v46];
      v48 = sub_224F67874();
      v77 = *(_QWORD *)(v48 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v77 + 48))(v47, 1, v48))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v77 + 32))(__dsta, v47, v48);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v77 + 56))(__dsta, 0, 1, v48);
      }
      v34 = v81;
      *(_OWORD *)&v43[*(int *)(v11 + 32)] = *(_OWORD *)&v44[*(int *)(v11 + 32)];
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v83[7])(v43, 0, 1, v11);
      v12 = v82;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v50 = a3[13];
  v51 = (_BYTE *)(a1 + v50);
  v52 = (_BYTE *)(a2 + v50);
  if (v12(a2 + v50, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    *v51 = *v52;
    *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
    *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
    *(_OWORD *)(v51 + 24) = *(_OWORD *)(v52 + 24);
    *(_OWORD *)(v51 + 40) = *(_OWORD *)(v52 + 40);
    *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
    v54 = *(int *)(v11 + 28);
    v55 = &v51[v54];
    v56 = &v52[v54];
    v57 = sub_224F67874();
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v58 + 32))(v55, v56, v57);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    *(_OWORD *)&v51[*(int *)(v11 + 32)] = *(_OWORD *)&v52[*(int *)(v11 + 32)];
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v83[7])(v51, 0, 1, v11);
  }
  v60 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v60) = *(_QWORD *)(a2 + v60);
  v61 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v63 + 16);
  v64 = a3[18];
  v65 = (_OWORD *)(a1 + v64);
  v66 = (_OWORD *)(a2 + v64);
  v67 = type metadata accessor for Quantity();
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
  {
    sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    *v65 = *v66;
    *(_QWORD *)((char *)v65 + 13) = *(_QWORD *)((char *)v66 + 13);
    *(_OWORD *)((char *)v65 + 24) = *(_OWORD *)((char *)v66 + 24);
    *(_OWORD *)((char *)v65 + 40) = *(_OWORD *)((char *)v66 + 40);
    v70 = *(int *)(v67 + 28);
    v84 = (char *)v65 + v70;
    v71 = (char *)v66 + v70;
    v72 = sub_224F675D4();
    v73 = *(_QWORD *)(v72 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v84, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v84, v71, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v84, 0, 1, v72);
    }
    *(_OWORD *)((char *)v65 + *(int *)(v67 + 32)) = *(_OWORD *)((char *)v66 + *(int *)(v67 + 32));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v75 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v75) = *(_OWORD *)(a2 + v75);
  return a1;
}

_QWORD *assignWithTake for ModelsR4.Observation(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(void *, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  size_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(_BYTE *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  int v88;
  int v89;
  uint64_t (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t (*v117)(_BYTE *, uint64_t, uint64_t);
  int v118;
  uint64_t v119;
  size_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  int v131;
  int v132;
  uint64_t (*v133)(uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  int v138;
  int v139;
  uint64_t (*v140)(uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  void *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  void *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t (*v155)(void *, uint64_t, uint64_t);
  int v156;
  uint64_t v157;
  size_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  _QWORD *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t (*v188)(uint64_t, uint64_t, uint64_t);
  int v189;
  int v190;
  uint64_t (*v191)(uint64_t, uint64_t);
  uint64_t v192;
  uint64_t v193;
  void *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t (*v206)(void *, uint64_t, uint64_t);
  int v207;
  uint64_t v208;
  size_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v223;
  void *v224;
  _BYTE *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t (*v228)(void *, uint64_t, uint64_t);
  int v229;
  uint64_t v230;
  size_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  void *v242;
  void *v243;
  _BYTE *__src;
  _BYTE *__srca;
  void *__srcb;
  uint64_t v247;
  void *v248;
  void *v249;
  int *v250;
  uint64_t (*v251)(uint64_t, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a1 + 4;
  v9 = a2[4];
  if (a1[4] == 1)
    goto LABEL_4;
  if (v9 == 1)
  {
    sub_224E2C98C((uint64_t)(a1 + 4));
    v9 = a2[4];
LABEL_4:
    *v8 = v9;
    goto LABEL_6;
  }
  *v8 = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  v11 = a2[9];
  a1[8] = a2[8];
  a1[9] = v11;
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  v12 = a3[10];
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for FHIRDateTime();
  v247 = *(_QWORD *)(v15 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 48);
  v17 = v16(v13, 1, v15);
  v18 = v16((uint64_t)v14, 1, v15);
  v250 = a3;
  v251 = v16;
  if (!v17)
  {
    if (v18)
    {
      sub_224DDEAA0(v13, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_11;
    }
    *(_BYTE *)v13 = *v14;
    *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
    *(_DWORD *)(v13 + 16) = *((_DWORD *)v14 + 4);
    if (*(_QWORD *)(v13 + 56) != 1)
    {
      v27 = *((_QWORD *)v14 + 7);
      if (v27 != 1)
      {
        *(_BYTE *)(v13 + 24) = v14[24];
        *(_WORD *)(v13 + 25) = *(_WORD *)(v14 + 25);
        *(_DWORD *)(v13 + 28) = *((_DWORD *)v14 + 7);
        *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
        *(_QWORD *)(v13 + 48) = *((_QWORD *)v14 + 6);
        *(_QWORD *)(v13 + 56) = v27;
        swift_bridgeObjectRelease();
LABEL_21:
        v29 = *(int *)(v15 + 28);
        v30 = (void *)(v13 + v29);
        v31 = &v14[v29];
        v32 = sub_224F67874();
        v33 = *(_QWORD *)(v32 - 8);
        v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
        v241 = v30;
        LODWORD(v30) = v34(v30, 1, v32);
        v35 = v34(v31, 1, v32);
        if ((_DWORD)v30)
        {
          if (!v35)
          {
            (*(void (**)(void *, char *, uint64_t))(v33 + 32))(v241, v31, v32);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v241, 0, 1, v32);
            goto LABEL_29;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v37 = *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64);
          v38 = v241;
        }
        else
        {
          if (!v35)
          {
            (*(void (**)(void *, char *, uint64_t))(v33 + 40))(v241, v31, v32);
            goto LABEL_29;
          }
          (*(void (**)(void *, uint64_t))(v33 + 8))(v241, v32);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v37 = *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64);
          v38 = v241;
        }
        memcpy(v38, v31, v37);
LABEL_29:
        a3 = v250;
        v16 = v251;
        v40 = *(int *)(v15 + 32);
        v41 = (_QWORD *)(v13 + v40);
        v42 = &v14[v40];
        v44 = *(_QWORD *)v42;
        v43 = *((_QWORD *)v42 + 1);
        *v41 = v44;
        v41[1] = v43;
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      sub_224E2C9F4(v13 + 24);
    }
    v28 = *(_OWORD *)(v14 + 40);
    *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
    *(_OWORD *)(v13 + 40) = v28;
    *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
    goto LABEL_21;
  }
  if (v18)
  {
    v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_11:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v19);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_30;
  }
  *(_BYTE *)v13 = *v14;
  *(_QWORD *)(v13 + 8) = *((_QWORD *)v14 + 1);
  *(_DWORD *)(v13 + 16) = *((_DWORD *)v14 + 4);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 + 40);
  *(_QWORD *)(v13 + 56) = *((_QWORD *)v14 + 7);
  v21 = *(int *)(v15 + 28);
  v22 = (void *)(v13 + v21);
  v23 = &v14[v21];
  v24 = sub_224F67874();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v16 = v251;
  *(_OWORD *)(v13 + *(int *)(v15 + 32)) = *(_OWORD *)&v14[*(int *)(v15 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v247 + 56))(v13, 0, 1, v15);
LABEL_30:
  v45 = a3[11];
  v46 = (uint64_t)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = v16((uint64_t)a1 + v45, 1, v15);
  v49 = v16((uint64_t)v47, 1, v15);
  if (!v48)
  {
    if (v49)
    {
      sub_224DDEAA0(v46, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v50 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_35;
    }
    *(_BYTE *)v46 = *v47;
    *(_QWORD *)(v46 + 8) = *((_QWORD *)v47 + 1);
    *(_DWORD *)(v46 + 16) = *((_DWORD *)v47 + 4);
    if (*(_QWORD *)(v46 + 56) != 1)
    {
      v58 = *((_QWORD *)v47 + 7);
      if (v58 != 1)
      {
        *(_BYTE *)(v46 + 24) = v47[24];
        *(_WORD *)(v46 + 25) = *(_WORD *)(v47 + 25);
        *(_DWORD *)(v46 + 28) = *((_DWORD *)v47 + 7);
        *(_OWORD *)(v46 + 32) = *((_OWORD *)v47 + 2);
        *(_QWORD *)(v46 + 48) = *((_QWORD *)v47 + 6);
        *(_QWORD *)(v46 + 56) = v58;
        swift_bridgeObjectRelease();
LABEL_45:
        v60 = *(int *)(v15 + 28);
        v61 = (void *)(v46 + v60);
        v62 = &v47[v60];
        v63 = sub_224F67874();
        v64 = *(_QWORD *)(v63 - 8);
        v65 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v64 + 48);
        v242 = v61;
        LODWORD(v61) = v65(v61, 1, v63);
        v66 = v65(v62, 1, v63);
        if ((_DWORD)v61)
        {
          if (!v66)
          {
            (*(void (**)(void *, char *, uint64_t))(v64 + 32))(v242, v62, v63);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v242, 0, 1, v63);
            goto LABEL_53;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v68 = *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64);
          v69 = v242;
        }
        else
        {
          if (!v66)
          {
            (*(void (**)(void *, char *, uint64_t))(v64 + 40))(v242, v62, v63);
            goto LABEL_53;
          }
          (*(void (**)(void *, uint64_t))(v64 + 8))(v242, v63);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v68 = *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64);
          v69 = v242;
        }
        memcpy(v69, v62, v68);
LABEL_53:
        a3 = v250;
        v71 = *(int *)(v15 + 32);
        v72 = (_QWORD *)(v46 + v71);
        v73 = &v47[v71];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        *v72 = v75;
        v72[1] = v74;
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
      sub_224E2C9F4(v46 + 24);
    }
    v59 = *(_OWORD *)(v47 + 40);
    *(_OWORD *)(v46 + 24) = *(_OWORD *)(v47 + 24);
    *(_OWORD *)(v46 + 40) = v59;
    *(_QWORD *)(v46 + 56) = *((_QWORD *)v47 + 7);
    goto LABEL_45;
  }
  if (v49)
  {
    v50 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_35:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v50);
    memcpy((void *)v46, v47, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_54;
  }
  *(_BYTE *)v46 = *v47;
  *(_QWORD *)(v46 + 8) = *((_QWORD *)v47 + 1);
  *(_DWORD *)(v46 + 16) = *((_DWORD *)v47 + 4);
  *(_OWORD *)(v46 + 24) = *(_OWORD *)(v47 + 24);
  *(_OWORD *)(v46 + 40) = *(_OWORD *)(v47 + 40);
  *(_QWORD *)(v46 + 56) = *((_QWORD *)v47 + 7);
  v52 = *(int *)(v15 + 28);
  v53 = (void *)(v46 + v52);
  v54 = &v47[v52];
  v55 = sub_224F67874();
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v56 + 32))(v53, v54, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  *(_OWORD *)(v46 + *(int *)(v15 + 32)) = *(_OWORD *)&v47[*(int *)(v15 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v247 + 56))(v46, 0, 1, v15);
LABEL_54:
  v76 = a3[12];
  v77 = (char *)a1 + v76;
  v78 = (char *)a2 + v76;
  v79 = type metadata accessor for Period();
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v80 + 48);
  v82 = v81(v77, 1, v79);
  v83 = v81(v78, 1, v79);
  if (!v82)
  {
    if (v83)
    {
      sub_224DDEAA0((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v84 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_59;
    }
    v86 = v251;
    v88 = v251((uint64_t)v77, 1, v15);
    v89 = v251((uint64_t)v78, 1, v15);
    if (v88)
    {
      if (v89)
      {
        v90 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_70:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v90);
        memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        goto LABEL_98;
      }
      *v77 = *v78;
      *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
      *((_DWORD *)v77 + 4) = *((_DWORD *)v78 + 4);
      *(_OWORD *)(v77 + 24) = *(_OWORD *)(v78 + 24);
      *(_OWORD *)(v77 + 40) = *(_OWORD *)(v78 + 40);
      *((_QWORD *)v77 + 7) = *((_QWORD *)v78 + 7);
      v97 = *(int *)(v15 + 28);
      v98 = &v77[v97];
      v99 = &v78[v97];
      v100 = sub_224F67874();
      v101 = *(_QWORD *)(v100 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v101 + 32))(v98, v99, v100);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
      }
      *(_OWORD *)&v77[*(int *)(v15 + 32)] = *(_OWORD *)&v78[*(int *)(v15 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v247 + 56))(v77, 0, 1, v15);
      a3 = v250;
      v86 = v251;
LABEL_98:
      v128 = *(int *)(v79 + 20);
      v129 = (uint64_t)&v77[v128];
      v130 = &v78[v128];
      v131 = v86(v129, 1, v15);
      v132 = v86((uint64_t)v130, 1, v15);
      if (v131)
      {
        if (!v132)
        {
          *(_BYTE *)v129 = *v130;
          *(_QWORD *)(v129 + 8) = *((_QWORD *)v130 + 1);
          *(_DWORD *)(v129 + 16) = *((_DWORD *)v130 + 4);
          *(_OWORD *)(v129 + 24) = *(_OWORD *)(v130 + 24);
          *(_OWORD *)(v129 + 40) = *(_OWORD *)(v130 + 40);
          *(_QWORD *)(v129 + 56) = *((_QWORD *)v130 + 7);
          v161 = *(int *)(v15 + 28);
          v162 = (void *)(v129 + v161);
          v163 = &v130[v161];
          v164 = sub_224F67874();
          v165 = *(_QWORD *)(v164 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v165 + 48))(v163, 1, v164))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v166 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v165 + 32))(v162, v163, v164);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v162, 0, 1, v164);
          }
          v86 = v251;
          *(_OWORD *)(v129 + *(int *)(v15 + 32)) = *(_OWORD *)&v130[*(int *)(v15 + 32)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v247 + 56))(v129, 0, 1, v15);
          goto LABEL_104;
        }
        v133 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_103:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v133);
        memcpy((void *)v129, v130, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
        goto LABEL_104;
      }
      if (v132)
      {
        sub_224DDEAA0(v129, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v133 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_103;
      }
      *(_BYTE *)v129 = *v130;
      *(_QWORD *)(v129 + 8) = *((_QWORD *)v130 + 1);
      *(_DWORD *)(v129 + 16) = *((_DWORD *)v130 + 4);
      if (*(_QWORD *)(v129 + 56) != 1)
      {
        v167 = *((_QWORD *)v130 + 7);
        if (v167 != 1)
        {
          *(_BYTE *)(v129 + 24) = v130[24];
          *(_WORD *)(v129 + 25) = *(_WORD *)(v130 + 25);
          *(_DWORD *)(v129 + 28) = *((_DWORD *)v130 + 7);
          *(_OWORD *)(v129 + 32) = *((_OWORD *)v130 + 2);
          *(_QWORD *)(v129 + 48) = *((_QWORD *)v130 + 6);
          *(_QWORD *)(v129 + 56) = v167;
          swift_bridgeObjectRelease();
LABEL_162:
          v223 = *(int *)(v15 + 28);
          v224 = (void *)(v129 + v223);
          v225 = &v130[v223];
          v226 = sub_224F67874();
          v227 = *(_QWORD *)(v226 - 8);
          v228 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v227 + 48);
          v243 = v224;
          LODWORD(v224) = v228(v224, 1, v226);
          v229 = v228(v225, 1, v226);
          if ((_DWORD)v224)
          {
            if (!v229)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v227 + 32))(v243, v225, v226);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v227 + 56))(v243, 0, 1, v226);
              goto LABEL_170;
            }
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v231 = *(_QWORD *)(*(_QWORD *)(v230 - 8) + 64);
            v232 = v243;
          }
          else
          {
            if (!v229)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v227 + 40))(v243, v225, v226);
              goto LABEL_170;
            }
            (*(void (**)(void *, uint64_t))(v227 + 8))(v243, v226);
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            v231 = *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64);
            v232 = v243;
          }
          memcpy(v232, v225, v231);
LABEL_170:
          a3 = v250;
          v234 = *(int *)(v15 + 32);
          v235 = (_QWORD *)(v129 + v234);
          v236 = (uint64_t *)&v130[v234];
          v238 = *v236;
          v237 = v236[1];
          *v235 = v238;
          v235[1] = v237;
          swift_bridgeObjectRelease();
          goto LABEL_60;
        }
        sub_224E2C9F4(v129 + 24);
      }
      v168 = *(_OWORD *)(v130 + 40);
      *(_OWORD *)(v129 + 24) = *(_OWORD *)(v130 + 24);
      *(_OWORD *)(v129 + 40) = v168;
      *(_QWORD *)(v129 + 56) = *((_QWORD *)v130 + 7);
      goto LABEL_162;
    }
    if (v89)
    {
      sub_224DDEAA0((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v90 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_70;
    }
    *v77 = *v78;
    *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
    *((_DWORD *)v77 + 4) = *((_DWORD *)v78 + 4);
    if (*((_QWORD *)v77 + 7) != 1)
    {
      v111 = *((_QWORD *)v78 + 7);
      if (v111 != 1)
      {
        v77[24] = v78[24];
        *(_WORD *)(v77 + 25) = *(_WORD *)(v78 + 25);
        *((_DWORD *)v77 + 7) = *((_DWORD *)v78 + 7);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_QWORD *)v77 + 6) = *((_QWORD *)v78 + 6);
        *((_QWORD *)v77 + 7) = v111;
        swift_bridgeObjectRelease();
LABEL_89:
        v113 = *(int *)(v15 + 28);
        v114 = &v77[v113];
        v115 = &v78[v113];
        v116 = sub_224F67874();
        v240 = *(_QWORD *)(v116 - 8);
        v117 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v240 + 48);
        __srcb = v114;
        LODWORD(v114) = v117(v114, 1, v116);
        v118 = v117(v115, 1, v116);
        if ((_DWORD)v114)
        {
          if (!v118)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v240 + 32))(__srcb, v115, v116);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v240 + 56))(__srcb, 0, 1, v116);
            goto LABEL_97;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v120 = *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64);
          v121 = __srcb;
        }
        else
        {
          if (!v118)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v240 + 40))(__srcb, v115, v116);
            goto LABEL_97;
          }
          (*(void (**)(void *, uint64_t))(v240 + 8))(__srcb, v116);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v120 = *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64);
          v121 = __srcb;
        }
        memcpy(v121, v115, v120);
LABEL_97:
        v86 = v251;
        v123 = *(int *)(v15 + 32);
        v124 = &v77[v123];
        v125 = (uint64_t *)&v78[v123];
        v127 = *v125;
        v126 = v125[1];
        *v124 = v127;
        v124[1] = v126;
        swift_bridgeObjectRelease();
        a3 = v250;
        goto LABEL_98;
      }
      sub_224E2C9F4((uint64_t)(v77 + 24));
    }
    v112 = *(_OWORD *)(v78 + 40);
    *(_OWORD *)(v77 + 24) = *(_OWORD *)(v78 + 24);
    *(_OWORD *)(v77 + 40) = v112;
    *((_QWORD *)v77 + 7) = *((_QWORD *)v78 + 7);
    goto LABEL_89;
  }
  if (v83)
  {
    v84 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_59:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v84);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
LABEL_60:
    v86 = v251;
    goto LABEL_104;
  }
  v86 = v251;
  if (v251((uint64_t)v78, 1, v15))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
  }
  else
  {
    *v77 = *v78;
    *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
    *((_DWORD *)v77 + 4) = *((_DWORD *)v78 + 4);
    *(_OWORD *)(v77 + 24) = *(_OWORD *)(v78 + 24);
    *(_OWORD *)(v77 + 40) = *(_OWORD *)(v78 + 40);
    *((_QWORD *)v77 + 7) = *((_QWORD *)v78 + 7);
    v91 = *(int *)(v15 + 28);
    __src = &v77[v91];
    v92 = &v78[v91];
    v93 = sub_224F67874();
    v94 = *(_QWORD *)(v93 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__src, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v94 + 32))(__src, v92, v93);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v94 + 56))(__src, 0, 1, v93);
    }
    *(_OWORD *)&v77[*(int *)(v15 + 32)] = *(_OWORD *)&v78[*(int *)(v15 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v247 + 56))(v77, 0, 1, v15);
    a3 = v250;
    v86 = v251;
  }
  v103 = *(int *)(v79 + 20);
  v104 = &v77[v103];
  v105 = &v78[v103];
  if (v86((uint64_t)v105, 1, v15))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
  }
  else
  {
    *v104 = *v105;
    *((_QWORD *)v104 + 1) = *((_QWORD *)v105 + 1);
    *((_DWORD *)v104 + 4) = *((_DWORD *)v105 + 4);
    *(_OWORD *)(v104 + 24) = *(_OWORD *)(v105 + 24);
    *(_OWORD *)(v104 + 40) = *(_OWORD *)(v105 + 40);
    *((_QWORD *)v104 + 7) = *((_QWORD *)v105 + 7);
    v107 = *(int *)(v15 + 28);
    __srca = &v104[v107];
    v108 = &v105[v107];
    v109 = sub_224F67874();
    v239 = *(_QWORD *)(v109 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v239 + 48))(v108, 1, v109))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__srca, v108, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v239 + 32))(__srca, v108, v109);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v239 + 56))(__srca, 0, 1, v109);
    }
    *(_OWORD *)&v104[*(int *)(v15 + 32)] = *(_OWORD *)&v105[*(int *)(v15 + 32)];
    a3 = v250;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v247 + 56))(v104, 0, 1, v15);
    v86 = v251;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
LABEL_104:
  v135 = a3[13];
  v136 = (uint64_t)a1 + v135;
  v137 = (char *)a2 + v135;
  v138 = v86((uint64_t)a1 + v135, 1, v15);
  v139 = v86((uint64_t)v137, 1, v15);
  if (!v138)
  {
    if (v139)
    {
      sub_224DDEAA0(v136, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v140 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_109;
    }
    *(_BYTE *)v136 = *v137;
    *(_QWORD *)(v136 + 8) = *((_QWORD *)v137 + 1);
    *(_DWORD *)(v136 + 16) = *((_DWORD *)v137 + 4);
    if (*(_QWORD *)(v136 + 56) != 1)
    {
      v148 = *((_QWORD *)v137 + 7);
      if (v148 != 1)
      {
        *(_BYTE *)(v136 + 24) = v137[24];
        *(_WORD *)(v136 + 25) = *(_WORD *)(v137 + 25);
        *(_DWORD *)(v136 + 28) = *((_DWORD *)v137 + 7);
        *(_OWORD *)(v136 + 32) = *((_OWORD *)v137 + 2);
        *(_QWORD *)(v136 + 48) = *((_QWORD *)v137 + 6);
        *(_QWORD *)(v136 + 56) = v148;
        swift_bridgeObjectRelease();
LABEL_119:
        v150 = *(int *)(v15 + 28);
        v151 = (void *)(v136 + v150);
        v152 = &v137[v150];
        v153 = sub_224F67874();
        v154 = *(_QWORD *)(v153 - 8);
        v155 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v154 + 48);
        v248 = v151;
        LODWORD(v151) = v155(v151, 1, v153);
        v156 = v155(v152, 1, v153);
        if ((_DWORD)v151)
        {
          if (!v156)
          {
            (*(void (**)(void *, char *, uint64_t))(v154 + 32))(v248, v152, v153);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v248, 0, 1, v153);
            goto LABEL_133;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v158 = *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64);
          v159 = v248;
        }
        else
        {
          if (!v156)
          {
            (*(void (**)(void *, char *, uint64_t))(v154 + 40))(v248, v152, v153);
            goto LABEL_133;
          }
          (*(void (**)(void *, uint64_t))(v154 + 8))(v248, v153);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v158 = *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64);
          v159 = v248;
        }
        memcpy(v159, v152, v158);
LABEL_133:
        a3 = v250;
        v169 = *(int *)(v15 + 32);
        v170 = (_QWORD *)(v136 + v169);
        v171 = &v137[v169];
        v173 = *(_QWORD *)v171;
        v172 = *((_QWORD *)v171 + 1);
        *v170 = v173;
        v170[1] = v172;
        swift_bridgeObjectRelease();
        goto LABEL_134;
      }
      sub_224E2C9F4(v136 + 24);
    }
    v149 = *(_OWORD *)(v137 + 40);
    *(_OWORD *)(v136 + 24) = *(_OWORD *)(v137 + 24);
    *(_OWORD *)(v136 + 40) = v149;
    *(_QWORD *)(v136 + 56) = *((_QWORD *)v137 + 7);
    goto LABEL_119;
  }
  if (v139)
  {
    v140 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_109:
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v140);
    memcpy((void *)v136, v137, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
    goto LABEL_134;
  }
  *(_BYTE *)v136 = *v137;
  *(_QWORD *)(v136 + 8) = *((_QWORD *)v137 + 1);
  *(_DWORD *)(v136 + 16) = *((_DWORD *)v137 + 4);
  *(_OWORD *)(v136 + 24) = *(_OWORD *)(v137 + 24);
  *(_OWORD *)(v136 + 40) = *(_OWORD *)(v137 + 40);
  *(_QWORD *)(v136 + 56) = *((_QWORD *)v137 + 7);
  v142 = *(int *)(v15 + 28);
  v143 = (void *)(v136 + v142);
  v144 = &v137[v142];
  v145 = sub_224F67874();
  v146 = *(_QWORD *)(v145 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
  {
    sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v146 + 32))(v143, v144, v145);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
  }
  *(_OWORD *)(v136 + *(int *)(v15 + 32)) = *(_OWORD *)&v137[*(int *)(v15 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v247 + 56))(v136, 0, 1, v15);
LABEL_134:
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  v174 = a3[16];
  v175 = (_QWORD *)((char *)a1 + v174);
  v176 = (_QWORD *)((char *)a2 + v174);
  v178 = *v176;
  v177 = v176[1];
  *v175 = v178;
  v175[1] = v177;
  swift_bridgeObjectRelease();
  v179 = a3[17];
  v180 = (uint64_t)a1 + v179;
  v181 = (char *)a2 + v179;
  if (*(_QWORD *)((char *)a1 + v179 + 8) == 1)
  {
LABEL_137:
    *(_OWORD *)v180 = *(_OWORD *)v181;
    *(_QWORD *)(v180 + 16) = *((_QWORD *)v181 + 2);
    goto LABEL_139;
  }
  v182 = *((_QWORD *)v181 + 1);
  if (v182 == 1)
  {
    sub_224E2C9C0(v180);
    goto LABEL_137;
  }
  *(_QWORD *)v180 = *(_QWORD *)v181;
  *(_QWORD *)(v180 + 8) = v182;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v180 + 16) = *((_QWORD *)v181 + 2);
  swift_bridgeObjectRelease();
LABEL_139:
  v183 = a3[18];
  v184 = (uint64_t)a1 + v183;
  v185 = (char *)a2 + v183;
  v186 = type metadata accessor for Quantity();
  v187 = *(_QWORD *)(v186 - 8);
  v188 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v187 + 48);
  v189 = v188(v184, 1, v186);
  v190 = v188((uint64_t)v185, 1, v186);
  if (!v189)
  {
    if (v190)
    {
      sub_224DDEAA0(v184, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      v191 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_144;
    }
    *(_OWORD *)v184 = *(_OWORD *)v185;
    *(_QWORD *)(v184 + 13) = *(_QWORD *)(v185 + 13);
    v199 = *((_QWORD *)v185 + 4);
    *(_QWORD *)(v184 + 24) = *((_QWORD *)v185 + 3);
    *(_QWORD *)(v184 + 32) = v199;
    swift_bridgeObjectRelease();
    v200 = *((_QWORD *)v185 + 6);
    *(_QWORD *)(v184 + 40) = *((_QWORD *)v185 + 5);
    *(_QWORD *)(v184 + 48) = v200;
    swift_bridgeObjectRelease();
    v201 = *(int *)(v186 + 28);
    v202 = (void *)(v184 + v201);
    v203 = &v185[v201];
    v204 = sub_224F675D4();
    v205 = *(_QWORD *)(v204 - 8);
    v206 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v205 + 48);
    v249 = v202;
    LODWORD(v202) = v206(v202, 1, v204);
    v207 = v206(v203, 1, v204);
    if ((_DWORD)v202)
    {
      if (!v207)
      {
        (*(void (**)(void *, char *, uint64_t))(v205 + 32))(v249, v203, v204);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v249, 0, 1, v204);
        goto LABEL_157;
      }
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v209 = *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64);
      v210 = v249;
    }
    else
    {
      if (!v207)
      {
        (*(void (**)(void *, char *, uint64_t))(v205 + 40))(v249, v203, v204);
        goto LABEL_157;
      }
      (*(void (**)(void *, uint64_t))(v205 + 8))(v249, v204);
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v209 = *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64);
      v210 = v249;
    }
    memcpy(v210, v203, v209);
LABEL_157:
    a3 = v250;
    v212 = *(int *)(v186 + 32);
    v213 = (_QWORD *)(v184 + v212);
    v214 = &v185[v212];
    v216 = *(_QWORD *)v214;
    v215 = *((_QWORD *)v214 + 1);
    *v213 = v216;
    v213[1] = v215;
    swift_bridgeObjectRelease();
    goto LABEL_158;
  }
  if (v190)
  {
    v191 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_144:
    sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, v191);
    memcpy((void *)v184, v185, *(_QWORD *)(*(_QWORD *)(v192 - 8) + 64));
    goto LABEL_158;
  }
  *(_OWORD *)v184 = *(_OWORD *)v185;
  *(_QWORD *)(v184 + 13) = *(_QWORD *)(v185 + 13);
  *(_OWORD *)(v184 + 24) = *(_OWORD *)(v185 + 24);
  *(_OWORD *)(v184 + 40) = *(_OWORD *)(v185 + 40);
  v193 = *(int *)(v186 + 28);
  v194 = (void *)(v184 + v193);
  v195 = &v185[v193];
  v196 = sub_224F675D4();
  v197 = *(_QWORD *)(v196 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v197 + 48))(v195, 1, v196))
  {
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v197 + 32))(v194, v195, v196);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v197 + 56))(v194, 0, 1, v196);
  }
  a3 = v250;
  *(_OWORD *)(v184 + *(int *)(v186 + 32)) = *(_OWORD *)&v185[*(int *)(v186 + 32)];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v187 + 56))(v184, 0, 1, v186);
LABEL_158:
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  swift_bridgeObjectRelease();
  v217 = a3[20];
  v218 = (_QWORD *)((char *)a1 + v217);
  v219 = (_QWORD *)((char *)a2 + v217);
  v221 = *v219;
  v220 = v219[1];
  *v218 = v221;
  v218[1] = v220;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Observation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E4888C(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[10];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[12];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a3[18];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Observation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E489A4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[10];
    }
    else
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[12];
      }
      else
      {
        sub_224DDEA0C(0, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[18];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_224E48AAC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_224DDEA0C(319, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_224DDEA0C(319, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
    {
      sub_224DDEA0C(319, &qword_2557E0300, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.HumanName(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(_BYTE *, uint64_t, uint64_t);
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _BYTE *__dst;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v16 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = *(int *)(a3 + 40);
    __dst = (char *)a1 + v9;
    v10 = (char *)a2 + v9;
    a1[8] = a2[8];
    v11 = type metadata accessor for Period();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for FHIRDateTime();
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48);
      if (v19(v10, 1, v17))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        v21 = __dst;
        memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        *__dst = *v10;
        *((_QWORD *)__dst + 1) = *((_QWORD *)v10 + 1);
        *((_DWORD *)__dst + 4) = *((_DWORD *)v10 + 4);
        v22 = *((_QWORD *)v10 + 7);
        v55 = v18;
        v23 = v11;
        if (v22 == 1)
        {
          v24 = *(_OWORD *)(v10 + 40);
          *(_OWORD *)(__dst + 24) = *(_OWORD *)(v10 + 24);
          *(_OWORD *)(__dst + 40) = v24;
          *((_QWORD *)__dst + 7) = *((_QWORD *)v10 + 7);
        }
        else
        {
          __dst[24] = v10[24];
          *(_WORD *)(__dst + 25) = *(_WORD *)(v10 + 25);
          *(_OWORD *)(__dst + 28) = *(_OWORD *)(v10 + 28);
          *((_DWORD *)__dst + 11) = *((_DWORD *)v10 + 11);
          *((_QWORD *)__dst + 6) = *((_QWORD *)v10 + 6);
          *((_QWORD *)__dst + 7) = v22;
          swift_bridgeObjectRetain();
        }
        v25 = *(int *)(v17 + 28);
        v26 = &__dst[v25];
        v27 = &v10[v25];
        v28 = sub_224F67874();
        v29 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 16))(v26, v27, v28);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        v21 = __dst;
        v11 = v23;
        v18 = v55;
        v31 = *(int *)(v17 + 32);
        v32 = &__dst[v31];
        v33 = &v10[v31];
        v34 = v33[1];
        *v32 = *v33;
        v32[1] = v34;
        v35 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v55 + 56);
        swift_bridgeObjectRetain();
        v35(__dst, 0, 1, v17);
      }
      v36 = *(int *)(v11 + 20);
      v37 = &v21[v36];
      v38 = &v10[v36];
      if (v19(&v10[v36], 1, v17))
      {
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        *v37 = *v38;
        *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
        *((_DWORD *)v37 + 4) = *((_DWORD *)v38 + 4);
        v40 = *((_QWORD *)v38 + 7);
        v56 = v18;
        v41 = v11;
        if (v40 == 1)
        {
          v42 = *(_OWORD *)(v38 + 40);
          *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
          *(_OWORD *)(v37 + 40) = v42;
          *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
        }
        else
        {
          v37[24] = v38[24];
          *(_WORD *)(v37 + 25) = *(_WORD *)(v38 + 25);
          *(_OWORD *)(v37 + 28) = *(_OWORD *)(v38 + 28);
          *((_DWORD *)v37 + 11) = *((_DWORD *)v38 + 11);
          *((_QWORD *)v37 + 6) = *((_QWORD *)v38 + 6);
          *((_QWORD *)v37 + 7) = v40;
          swift_bridgeObjectRetain();
        }
        v43 = *(int *)(v17 + 28);
        v44 = &v37[v43];
        v45 = &v38[v43];
        v46 = sub_224F67874();
        v47 = *(_QWORD *)(v46 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        v21 = __dst;
        v11 = v41;
        v49 = *(int *)(v17 + 32);
        v50 = &v37[v49];
        v51 = &v38[v49];
        v52 = v51[1];
        *v50 = *v51;
        v50[1] = v52;
        v53 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56);
        swift_bridgeObjectRetain();
        v53(v37, 0, 1, v17);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
    }
    return a1;
  }
  return (uint64_t *)v16;
}

uint64_t destroy for ModelsR4.HumanName(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Period();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for FHIRDateTime();
    v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
    if (!v8(v4, 1, v7))
    {
      if (*(_QWORD *)(v4 + 56) != 1)
        swift_bridgeObjectRelease();
      v9 = v4 + *(int *)(v7 + 28);
      v10 = sub_224F67874();
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      swift_bridgeObjectRelease();
    }
    v12 = v4 + *(int *)(v5 + 20);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v12, 1, v7);
    if (!(_DWORD)result)
    {
      if (*(_QWORD *)(v12 + 56) != 1)
        swift_bridgeObjectRelease();
      v13 = v12 + *(int *)(v7 + 28);
      v14 = sub_224F67874();
      v15 = *(_QWORD *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *initializeWithCopy for ModelsR4.HumanName(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _BYTE *__dst;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = *(int *)(a3 + 40);
  __dst = (char *)a1 + v7;
  v8 = (char *)a2 + v7;
  a1[8] = a2[8];
  v9 = type metadata accessor for Period();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(__dst, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for FHIRDateTime();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
    if (v15(v8, 1, v13))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v17 = __dst;
      memcpy(__dst, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      *__dst = *v8;
      *((_QWORD *)__dst + 1) = *((_QWORD *)v8 + 1);
      *((_DWORD *)__dst + 4) = *((_DWORD *)v8 + 4);
      v18 = *((_QWORD *)v8 + 7);
      v52 = v14;
      v19 = v9;
      if (v18 == 1)
      {
        v20 = *(_OWORD *)(v8 + 40);
        *(_OWORD *)(__dst + 24) = *(_OWORD *)(v8 + 24);
        *(_OWORD *)(__dst + 40) = v20;
        *((_QWORD *)__dst + 7) = *((_QWORD *)v8 + 7);
      }
      else
      {
        __dst[24] = v8[24];
        *(_WORD *)(__dst + 25) = *(_WORD *)(v8 + 25);
        *(_OWORD *)(__dst + 28) = *(_OWORD *)(v8 + 28);
        *((_DWORD *)__dst + 11) = *((_DWORD *)v8 + 11);
        *((_QWORD *)__dst + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)__dst + 7) = v18;
        swift_bridgeObjectRetain();
      }
      v21 = *(int *)(v13 + 28);
      v22 = &__dst[v21];
      v23 = &v8[v21];
      v24 = sub_224F67874();
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v9 = v19;
      v27 = *(int *)(v13 + 32);
      v17 = __dst;
      v28 = &__dst[v27];
      v29 = &v8[v27];
      v30 = v29[1];
      *v28 = *v29;
      v28[1] = v30;
      v14 = v52;
      v31 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v52 + 56);
      swift_bridgeObjectRetain();
      v31(__dst, 0, 1, v13);
    }
    v32 = *(int *)(v9 + 20);
    v33 = &v17[v32];
    v34 = &v8[v32];
    if (v15(&v8[v32], 1, v13))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      v36 = v10;
    }
    else
    {
      *v33 = *v34;
      *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
      *((_DWORD *)v33 + 4) = *((_DWORD *)v34 + 4);
      v37 = *((_QWORD *)v34 + 7);
      v53 = v9;
      v38 = v14;
      if (v37 == 1)
      {
        v39 = *(_OWORD *)(v34 + 40);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
        *(_OWORD *)(v33 + 40) = v39;
        *((_QWORD *)v33 + 7) = *((_QWORD *)v34 + 7);
      }
      else
      {
        v33[24] = v34[24];
        *(_WORD *)(v33 + 25) = *(_WORD *)(v34 + 25);
        *(_OWORD *)(v33 + 28) = *(_OWORD *)(v34 + 28);
        *((_DWORD *)v33 + 11) = *((_DWORD *)v34 + 11);
        *((_QWORD *)v33 + 6) = *((_QWORD *)v34 + 6);
        *((_QWORD *)v33 + 7) = v37;
        swift_bridgeObjectRetain();
      }
      v40 = *(int *)(v13 + 28);
      v41 = &v33[v40];
      v42 = &v34[v40];
      v43 = sub_224F67874();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v36 = v10;
      v46 = *(int *)(v13 + 32);
      v47 = &v33[v46];
      v48 = &v34[v46];
      v49 = v48[1];
      *v47 = *v48;
      v47[1] = v49;
      v50 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56);
      swift_bridgeObjectRetain();
      v50(v33, 0, 1, v13);
      v17 = __dst;
      v9 = v53;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v17, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.HumanName(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  size_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void (*v45)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void (*v62)(_BYTE *, _QWORD, uint64_t, uint64_t);
  __int128 *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  void (*v79)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t (*v87)(_BYTE *, uint64_t, uint64_t);
  int v88;
  uint64_t v89;
  size_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  int v100;
  uint64_t (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  void *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  void (*v121)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  void *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(void *, uint64_t, uint64_t);
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _BYTE *__dst;
  _BYTE *__dsta;
  void *__dstb;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Period();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v23 = type metadata accessor for FHIRDateTime();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
    v26 = v25(v7, 1, v23);
    v27 = v25(v8, 1, v23);
    if (v26)
    {
      if (v27)
      {
        v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_17:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v28);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        goto LABEL_57;
      }
      *v7 = *v8;
      v39 = *((_QWORD *)v8 + 1);
      *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
      *((_QWORD *)v7 + 1) = v39;
      v142 = v24;
      if (*((_QWORD *)v8 + 7) == 1)
      {
        v40 = *(_OWORD *)(v8 + 24);
        v41 = *(_OWORD *)(v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        *(_OWORD *)(v7 + 24) = v40;
        *(_OWORD *)(v7 + 40) = v41;
      }
      else
      {
        v7[24] = v8[24];
        v7[25] = v8[25];
        v7[26] = v8[26];
        v69 = *(_OWORD *)(v8 + 28);
        *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v69;
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        swift_bridgeObjectRetain();
      }
      v70 = *(int *)(v23 + 28);
      v71 = &v7[v70];
      v72 = &v8[v70];
      v73 = sub_224F67874();
      v74 = *(_QWORD *)(v73 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v74 + 16))(v71, v72, v73);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      }
      v76 = *(int *)(v23 + 32);
      v77 = &v7[v76];
      v78 = &v8[v76];
      *v77 = *v78;
      v77[1] = v78[1];
      v24 = v142;
      v79 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v142 + 56);
      swift_bridgeObjectRetain();
      v79(v7, 0, 1, v23);
LABEL_57:
      v96 = *(int *)(v9 + 20);
      v97 = (uint64_t)&v7[v96];
      v98 = &v8[v96];
      v99 = v25((_BYTE *)v97, 1, v23);
      v100 = v25(v98, 1, v23);
      if (v99)
      {
        if (!v100)
        {
          *(_BYTE *)v97 = *v98;
          v103 = *((_QWORD *)v98 + 1);
          *(_DWORD *)(v97 + 16) = *((_DWORD *)v98 + 4);
          *(_QWORD *)(v97 + 8) = v103;
          if (*((_QWORD *)v98 + 7) == 1)
          {
            v104 = *(_OWORD *)(v98 + 24);
            v105 = *(_OWORD *)(v98 + 40);
            *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
            *(_OWORD *)(v97 + 24) = v104;
            *(_OWORD *)(v97 + 40) = v105;
          }
          else
          {
            *(_BYTE *)(v97 + 24) = v98[24];
            *(_BYTE *)(v97 + 25) = v98[25];
            *(_BYTE *)(v97 + 26) = v98[26];
            v111 = *(_OWORD *)(v98 + 28);
            *(_DWORD *)(v97 + 44) = *((_DWORD *)v98 + 11);
            *(_OWORD *)(v97 + 28) = v111;
            *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
            *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
            swift_bridgeObjectRetain();
          }
          v112 = *(int *)(v23 + 28);
          v113 = (void *)(v97 + v112);
          v114 = &v98[v112];
          v115 = sub_224F67874();
          v116 = *(_QWORD *)(v115 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v116 + 16))(v113, v114, v115);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
          }
          v118 = *(int *)(v23 + 32);
          v119 = (_QWORD *)(v97 + v118);
          v120 = &v98[v118];
          *v119 = *v120;
          v119[1] = v120[1];
          v121 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56);
          swift_bridgeObjectRetain();
          v121(v97, 0, 1, v23);
          return a1;
        }
        v101 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_62:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v101);
        v16 = *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64);
        v17 = (void *)v97;
        v18 = v98;
        goto LABEL_7;
      }
      if (v100)
      {
        sub_224DDEAA0(v97, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v101 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_62;
      }
      *(_BYTE *)v97 = *v98;
      *(_QWORD *)(v97 + 8) = *((_QWORD *)v98 + 1);
      *(_WORD *)(v97 + 16) = *((_WORD *)v98 + 8);
      *(_WORD *)(v97 + 18) = *((_WORD *)v98 + 9);
      v106 = (__int128 *)(v97 + 24);
      v107 = (__int128 *)(v98 + 24);
      v108 = *((_QWORD *)v98 + 7);
      if (*(_QWORD *)(v97 + 56) == 1)
      {
        if (v108 == 1)
        {
          v109 = *v107;
          v110 = *(_OWORD *)(v98 + 40);
          *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
          *v106 = v109;
          *(_OWORD *)(v97 + 40) = v110;
        }
        else
        {
          *(_BYTE *)(v97 + 24) = v98[24];
          *(_BYTE *)(v97 + 25) = v98[25];
          *(_BYTE *)(v97 + 26) = v98[26];
          v124 = *(_OWORD *)(v98 + 28);
          *(_DWORD *)(v97 + 44) = *((_DWORD *)v98 + 11);
          *(_OWORD *)(v97 + 28) = v124;
          *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
          *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
          swift_bridgeObjectRetain();
        }
      }
      else if (v108 == 1)
      {
        sub_224E2C9F4(v97 + 24);
        v122 = *((_QWORD *)v98 + 7);
        v123 = *(_OWORD *)(v98 + 40);
        *v106 = *v107;
        *(_OWORD *)(v97 + 40) = v123;
        *(_QWORD *)(v97 + 56) = v122;
      }
      else
      {
        *(_BYTE *)(v97 + 24) = v98[24];
        *(_BYTE *)(v97 + 25) = v98[25];
        *(_BYTE *)(v97 + 26) = v98[26];
        *(_DWORD *)(v97 + 28) = *((_DWORD *)v98 + 7);
        *(_WORD *)(v97 + 32) = *((_WORD *)v98 + 16);
        *(_WORD *)(v97 + 34) = *((_WORD *)v98 + 17);
        *(_WORD *)(v97 + 36) = *((_WORD *)v98 + 18);
        *(_WORD *)(v97 + 38) = *((_WORD *)v98 + 19);
        *(_WORD *)(v97 + 40) = *((_WORD *)v98 + 20);
        *(_WORD *)(v97 + 42) = *((_WORD *)v98 + 21);
        *(_WORD *)(v97 + 44) = *((_WORD *)v98 + 22);
        *(_WORD *)(v97 + 46) = *((_WORD *)v98 + 23);
        *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
        *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      v125 = *(int *)(v23 + 28);
      v126 = (void *)(v97 + v125);
      v127 = &v98[v125];
      v128 = sub_224F67874();
      v129 = *(_QWORD *)(v128 - 8);
      v130 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v129 + 48);
      v131 = v130(v126, 1, v128);
      v132 = v130(v127, 1, v128);
      if (v131)
      {
        if (!v132)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v129 + 16))(v126, v127, v128);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
LABEL_83:
          v134 = *(int *)(v23 + 32);
          v135 = (_QWORD *)(v97 + v134);
          v136 = &v98[v134];
          *v135 = *v136;
          v135[1] = v136[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
      }
      else
      {
        if (!v132)
        {
          (*(void (**)(void *, _BYTE *, uint64_t))(v129 + 24))(v126, v127, v128);
          goto LABEL_83;
        }
        (*(void (**)(void *, uint64_t))(v129 + 8))(v126, v128);
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
      goto LABEL_83;
    }
    if (v27)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_17;
    }
    *v7 = *v8;
    *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
    *((_WORD *)v7 + 8) = *((_WORD *)v8 + 8);
    *((_WORD *)v7 + 9) = *((_WORD *)v8 + 9);
    v64 = (__int128 *)(v7 + 24);
    v65 = (__int128 *)(v8 + 24);
    v66 = *((_QWORD *)v8 + 7);
    v144 = v24;
    if (*((_QWORD *)v7 + 7) == 1)
    {
      if (v66 == 1)
      {
        v67 = *v65;
        v68 = *(_OWORD *)(v8 + 40);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        *v64 = v67;
        *(_OWORD *)(v7 + 40) = v68;
      }
      else
      {
        v7[24] = v8[24];
        v7[25] = v8[25];
        v7[26] = v8[26];
        v82 = *(_OWORD *)(v8 + 28);
        *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
        *(_OWORD *)(v7 + 28) = v82;
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        swift_bridgeObjectRetain();
      }
    }
    else if (v66 == 1)
    {
      sub_224E2C9F4((uint64_t)(v7 + 24));
      v80 = *((_QWORD *)v8 + 7);
      v81 = *(_OWORD *)(v8 + 40);
      *v64 = *v65;
      *(_OWORD *)(v7 + 40) = v81;
      *((_QWORD *)v7 + 7) = v80;
    }
    else
    {
      v7[24] = v8[24];
      v7[25] = v8[25];
      v7[26] = v8[26];
      *((_DWORD *)v7 + 7) = *((_DWORD *)v8 + 7);
      *((_WORD *)v7 + 16) = *((_WORD *)v8 + 16);
      *((_WORD *)v7 + 17) = *((_WORD *)v8 + 17);
      *((_WORD *)v7 + 18) = *((_WORD *)v8 + 18);
      *((_WORD *)v7 + 19) = *((_WORD *)v8 + 19);
      *((_WORD *)v7 + 20) = *((_WORD *)v8 + 20);
      *((_WORD *)v7 + 21) = *((_WORD *)v8 + 21);
      *((_WORD *)v7 + 22) = *((_WORD *)v8 + 22);
      *((_WORD *)v7 + 23) = *((_WORD *)v8 + 23);
      *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v83 = *(int *)(v23 + 28);
    v84 = &v7[v83];
    v85 = &v8[v83];
    v86 = sub_224F67874();
    v137 = *(_QWORD *)(v86 - 8);
    v87 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v137 + 48);
    __dstb = v84;
    LODWORD(v84) = v87(v84, 1, v86);
    v88 = v87(v85, 1, v86);
    if ((_DWORD)v84)
    {
      if (!v88)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v137 + 16))(__dstb, v85, v86);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(__dstb, 0, 1, v86);
        goto LABEL_56;
      }
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v90 = *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64);
      v91 = __dstb;
    }
    else
    {
      if (!v88)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v137 + 24))(__dstb, v85, v86);
        goto LABEL_56;
      }
      (*(void (**)(void *, uint64_t))(v137 + 8))(__dstb, v86);
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v90 = *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64);
      v91 = __dstb;
    }
    memcpy(v91, v85, v90);
LABEL_56:
    v24 = v144;
    v93 = *(int *)(v23 + 32);
    v94 = &v7[v93];
    v95 = &v8[v93];
    *v94 = *v95;
    v94[1] = v95[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  if (v13)
  {
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v14);
    v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    v17 = v7;
    v18 = v8;
LABEL_7:
    memcpy(v17, v18, v16);
    return a1;
  }
  v19 = type metadata accessor for FHIRDateTime();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v8, 1, v19))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v29 = *((_QWORD *)v8 + 1);
    *((_DWORD *)v7 + 4) = *((_DWORD *)v8 + 4);
    *((_QWORD *)v7 + 1) = v29;
    v141 = v20;
    if (*((_QWORD *)v8 + 7) == 1)
    {
      v30 = *(_OWORD *)(v8 + 24);
      v31 = *(_OWORD *)(v8 + 40);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      *(_OWORD *)(v7 + 24) = v30;
      *(_OWORD *)(v7 + 40) = v31;
    }
    else
    {
      v7[24] = v8[24];
      v7[25] = v8[25];
      v7[26] = v8[26];
      v33 = *(_OWORD *)(v8 + 28);
      *((_DWORD *)v7 + 11) = *((_DWORD *)v8 + 11);
      *(_OWORD *)(v7 + 28) = v33;
      *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
      *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
      swift_bridgeObjectRetain();
    }
    v34 = *(int *)(v19 + 28);
    __dst = &v7[v34];
    v35 = &v8[v34];
    v36 = sub_224F67874();
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 16))(__dst, v35, v36);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
    }
    v42 = *(int *)(v19 + 32);
    v43 = &v7[v42];
    v44 = &v8[v42];
    *v43 = *v44;
    v43[1] = v44[1];
    v20 = v141;
    v45 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v141 + 56);
    swift_bridgeObjectRetain();
    v45(v7, 0, 1, v19);
  }
  v46 = *(int *)(v9 + 20);
  v47 = &v7[v46];
  v48 = &v8[v46];
  if (v21(v48, 1, v19))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    *v47 = *v48;
    v50 = *((_QWORD *)v48 + 1);
    *((_DWORD *)v47 + 4) = *((_DWORD *)v48 + 4);
    *((_QWORD *)v47 + 1) = v50;
    v143 = v20;
    if (*((_QWORD *)v48 + 7) == 1)
    {
      v51 = *(_OWORD *)(v48 + 24);
      v52 = *(_OWORD *)(v48 + 40);
      *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
      *(_OWORD *)(v47 + 24) = v51;
      *(_OWORD *)(v47 + 40) = v52;
    }
    else
    {
      v47[24] = v48[24];
      v47[25] = v48[25];
      v47[26] = v48[26];
      v53 = *(_OWORD *)(v48 + 28);
      *((_DWORD *)v47 + 11) = *((_DWORD *)v48 + 11);
      *(_OWORD *)(v47 + 28) = v53;
      *((_QWORD *)v47 + 6) = *((_QWORD *)v48 + 6);
      *((_QWORD *)v47 + 7) = *((_QWORD *)v48 + 7);
      swift_bridgeObjectRetain();
    }
    v54 = *(int *)(v19 + 28);
    __dsta = &v47[v54];
    v55 = &v48[v54];
    v56 = sub_224F67874();
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v57 + 16))(__dsta, v55, v56);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v57 + 56))(__dsta, 0, 1, v56);
    }
    v59 = *(int *)(v19 + 32);
    v60 = &v47[v59];
    v61 = &v48[v59];
    *v60 = *v61;
    v60[1] = v61[1];
    v62 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v143 + 56);
    swift_bridgeObjectRetain();
    v62(v47, 0, 1, v19);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for ModelsR4.HumanName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_BYTE *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *__dst;
  _BYTE *__dsta;
  uint64_t v31;
  uint64_t v32;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(int *)(a3 + 40);
  v5 = (_BYTE *)(a1 + v4);
  v6 = (_BYTE *)(a2 + v4);
  v7 = type metadata accessor for Period();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for FHIRDateTime();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v6, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      *v5 = *v6;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
      *((_DWORD *)v5 + 4) = *((_DWORD *)v6 + 4);
      *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
      *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
      *((_QWORD *)v5 + 7) = *((_QWORD *)v6 + 7);
      v14 = *(int *)(v10 + 28);
      __dst = &v5[v14];
      v31 = v11;
      v15 = &v6[v14];
      v16 = sub_224F67874();
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(__dst, v15, v16);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(_OWORD *)&v5[*(int *)(v10 + 32)] = *(_OWORD *)&v6[*(int *)(v10 + 32)];
      v11 = v31;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v5, 0, 1, v10);
    }
    v19 = *(int *)(v7 + 20);
    v20 = &v5[v19];
    v21 = &v6[v19];
    if (v12(v21, 1, v10))
    {
      sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v20 = *v21;
      *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
      *((_DWORD *)v20 + 4) = *((_DWORD *)v21 + 4);
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
      *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
      v23 = *(int *)(v10 + 28);
      __dsta = &v20[v23];
      v32 = v11;
      v24 = &v21[v23];
      v25 = sub_224F67874();
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dsta, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(__dsta, v24, v25);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dsta, 0, 1, v25);
      }
      *(_OWORD *)&v20[*(int *)(v10 + 32)] = *(_OWORD *)&v21[*(int *)(v10 + 32)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v20, 0, 1, v10);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for ModelsR4.HumanName(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  size_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(_BYTE *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_BYTE *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t (*v60)(_BYTE *, uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  size_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  int v74;
  int v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  void *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(void *, uint64_t, uint64_t);
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *__dst;
  _BYTE *__dsta;
  void *__dstb;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 40);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Period();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_224DDEAA0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Period);
      v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v26 = type metadata accessor for FHIRDateTime();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48);
    v29 = v28(v10, 1, v26);
    v30 = v28(v11, 1, v26);
    if (v29)
    {
      if (v30)
      {
        v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_17:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v31);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        goto LABEL_46;
      }
      v105 = v27;
      *v10 = *v11;
      *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
      *((_DWORD *)v10 + 4) = *((_DWORD *)v11 + 4);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
      *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
      *((_QWORD *)v10 + 7) = *((_QWORD *)v11 + 7);
      v38 = *(int *)(v26 + 28);
      v39 = &v10[v38];
      v40 = &v11[v38];
      v41 = sub_224F67874();
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 32))(v39, v40, v41);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      *(_OWORD *)&v10[*(int *)(v26 + 32)] = *(_OWORD *)&v11[*(int *)(v26 + 32)];
      v27 = v105;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v10, 0, 1, v26);
LABEL_46:
      v71 = *(int *)(v12 + 20);
      v72 = (uint64_t)&v10[v71];
      v73 = &v11[v71];
      v74 = v28((_BYTE *)v72, 1, v26);
      v75 = v28(v73, 1, v26);
      if (v74)
      {
        if (!v75)
        {
          *(_BYTE *)v72 = *v73;
          *(_QWORD *)(v72 + 8) = *((_QWORD *)v73 + 1);
          *(_DWORD *)(v72 + 16) = *((_DWORD *)v73 + 4);
          *(_OWORD *)(v72 + 24) = *(_OWORD *)(v73 + 24);
          *(_OWORD *)(v72 + 40) = *(_OWORD *)(v73 + 40);
          *(_QWORD *)(v72 + 56) = *((_QWORD *)v73 + 7);
          v78 = *(int *)(v26 + 28);
          v79 = (void *)(v72 + v78);
          v80 = &v73[v78];
          v81 = sub_224F67874();
          v82 = *(_QWORD *)(v81 - 8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
          {
            sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
            memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v82 + 32))(v79, v80, v81);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
          }
          *(_OWORD *)(v72 + *(int *)(v26 + 32)) = *(_OWORD *)&v73[*(int *)(v26 + 32)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v72, 0, 1, v26);
          return a1;
        }
        v76 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_51:
        sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, v76);
        v19 = *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64);
        v20 = (void *)v72;
        v21 = v73;
        goto LABEL_7;
      }
      if (v75)
      {
        sub_224DDEAA0(v72, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
        v76 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
        goto LABEL_51;
      }
      *(_BYTE *)v72 = *v73;
      *(_QWORD *)(v72 + 8) = *((_QWORD *)v73 + 1);
      *(_DWORD *)(v72 + 16) = *((_DWORD *)v73 + 4);
      if (*(_QWORD *)(v72 + 56) != 1)
      {
        v84 = *((_QWORD *)v73 + 7);
        if (v84 != 1)
        {
          *(_BYTE *)(v72 + 24) = v73[24];
          *(_WORD *)(v72 + 25) = *(_WORD *)(v73 + 25);
          *(_DWORD *)(v72 + 28) = *((_DWORD *)v73 + 7);
          *(_OWORD *)(v72 + 32) = *((_OWORD *)v73 + 2);
          *(_QWORD *)(v72 + 48) = *((_QWORD *)v73 + 6);
          *(_QWORD *)(v72 + 56) = v84;
          swift_bridgeObjectRelease();
LABEL_61:
          v86 = *(int *)(v26 + 28);
          v87 = (void *)(v72 + v86);
          v88 = &v73[v86];
          v89 = sub_224F67874();
          v90 = *(_QWORD *)(v89 - 8);
          v91 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v90 + 48);
          v92 = v91(v87, 1, v89);
          v93 = v91(v88, 1, v89);
          if (v92)
          {
            if (!v93)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v90 + 32))(v87, v88, v89);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
LABEL_67:
              v95 = *(int *)(v26 + 32);
              v96 = (_QWORD *)(v72 + v95);
              v97 = (uint64_t *)&v73[v95];
              v99 = *v97;
              v98 = v97[1];
              *v96 = v99;
              v96[1] = v98;
              swift_bridgeObjectRelease();
              return a1;
            }
          }
          else
          {
            if (!v93)
            {
              (*(void (**)(void *, _BYTE *, uint64_t))(v90 + 40))(v87, v88, v89);
              goto LABEL_67;
            }
            (*(void (**)(void *, uint64_t))(v90 + 8))(v87, v89);
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
          goto LABEL_67;
        }
        sub_224E2C9F4(v72 + 24);
      }
      v85 = *(_OWORD *)(v73 + 40);
      *(_OWORD *)(v72 + 24) = *(_OWORD *)(v73 + 24);
      *(_OWORD *)(v72 + 40) = v85;
      *(_QWORD *)(v72 + 56) = *((_QWORD *)v73 + 7);
      goto LABEL_61;
    }
    if (v30)
    {
      sub_224DDEAA0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FHIRDateTime);
      v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_17;
    }
    *v10 = *v11;
    *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
    *((_DWORD *)v10 + 4) = *((_DWORD *)v11 + 4);
    v107 = v27;
    if (*((_QWORD *)v10 + 7) != 1)
    {
      v54 = *((_QWORD *)v11 + 7);
      if (v54 != 1)
      {
        v10[24] = v11[24];
        *(_WORD *)(v10 + 25) = *(_WORD *)(v11 + 25);
        *((_DWORD *)v10 + 7) = *((_DWORD *)v11 + 7);
        *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
        *((_QWORD *)v10 + 6) = *((_QWORD *)v11 + 6);
        *((_QWORD *)v10 + 7) = v54;
        swift_bridgeObjectRelease();
LABEL_37:
        v56 = *(int *)(v26 + 28);
        v57 = &v10[v56];
        v58 = &v11[v56];
        v59 = sub_224F67874();
        v100 = *(_QWORD *)(v59 - 8);
        v60 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v100 + 48);
        __dstb = v57;
        LODWORD(v57) = v60(v57, 1, v59);
        v61 = v60(v58, 1, v59);
        if ((_DWORD)v57)
        {
          if (!v61)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v100 + 32))(__dstb, v58, v59);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v100 + 56))(__dstb, 0, 1, v59);
            goto LABEL_45;
          }
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v63 = *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64);
          v64 = __dstb;
        }
        else
        {
          if (!v61)
          {
            (*(void (**)(void *, _BYTE *, uint64_t))(v100 + 40))(__dstb, v58, v59);
            goto LABEL_45;
          }
          (*(void (**)(void *, uint64_t))(v100 + 8))(__dstb, v59);
          sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v63 = *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64);
          v64 = __dstb;
        }
        memcpy(v64, v58, v63);
LABEL_45:
        v27 = v107;
        v66 = *(int *)(v26 + 32);
        v67 = &v10[v66];
        v68 = (uint64_t *)&v11[v66];
        v70 = *v68;
        v69 = v68[1];
        *v67 = v70;
        v67[1] = v69;
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
      sub_224E2C9F4((uint64_t)(v10 + 24));
    }
    v55 = *(_OWORD *)(v11 + 40);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 40) = v55;
    *((_QWORD *)v10 + 7) = *((_QWORD *)v11 + 7);
    goto LABEL_37;
  }
  if (v16)
  {
    v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, v17);
    v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
    v20 = v10;
    v21 = v11;
LABEL_7:
    memcpy(v20, v21, v19);
    return a1;
  }
  v22 = type metadata accessor for FHIRDateTime();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48);
  if (v24(v11, 1, v22))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *v10 = *v11;
    *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
    *((_DWORD *)v10 + 4) = *((_DWORD *)v11 + 4);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
    *((_QWORD *)v10 + 7) = *((_QWORD *)v11 + 7);
    v32 = *(int *)(v22 + 28);
    __dst = &v10[v32];
    v104 = v23;
    v33 = &v11[v32];
    v34 = sub_224F67874();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 32))(__dst, v33, v34);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
    }
    *(_OWORD *)&v10[*(int *)(v22 + 32)] = *(_OWORD *)&v11[*(int *)(v22 + 32)];
    v23 = v104;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v10, 0, 1, v22);
  }
  v44 = *(int *)(v12 + 20);
  v45 = &v10[v44];
  v46 = &v11[v44];
  if (v24(v46, 1, v22))
  {
    sub_224DDEA0C(0, &qword_2557E02D0, (uint64_t (*)(uint64_t))type metadata accessor for FHIRDateTime, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    *v45 = *v46;
    *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
    *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
    *(_OWORD *)(v45 + 24) = *(_OWORD *)(v46 + 24);
    *(_OWORD *)(v45 + 40) = *(_OWORD *)(v46 + 40);
    *((_QWORD *)v45 + 7) = *((_QWORD *)v46 + 7);
    v48 = *(int *)(v22 + 28);
    __dsta = &v45[v48];
    v106 = v23;
    v49 = &v46[v48];
    v50 = sub_224F67874();
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      sub_224DDEA0C(0, &qword_2557E0318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dsta, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v51 + 32))(__dsta, v49, v50);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v51 + 56))(__dsta, 0, 1, v50);
    }
    *(_OWORD *)&v45[*(int *)(v22 + 32)] = *(_OWORD *)&v46[*(int *)(v22 + 32)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v45, 0, 1, v22);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.HumanName()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E4B2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ModelsR4.HumanName()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E4B3A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    sub_224DDEA0C(0, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_224E4B434()
{
  unint64_t v0;

  sub_224DDEA0C(319, &qword_2557E04B8, (uint64_t (*)(uint64_t))type metadata accessor for Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelsR4.PatientLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(type metadata accessor for Reference() + 24);
    v10 = (uint64_t *)((char *)v4 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for Identifier();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v17 = v11[1];
      *v10 = *v11;
      v10[1] = v17;
      v18 = v11[3];
      swift_bridgeObjectRetain();
      if (v18 == 1)
      {
        *((_OWORD *)v10 + 1) = *((_OWORD *)v11 + 1);
        v10[4] = v11[4];
      }
      else
      {
        v10[2] = v11[2];
        v10[3] = v18;
        v10[4] = v11[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v19 = *(int *)(v12 + 24);
      __dst = (char *)v10 + v19;
      v20 = (char *)v11 + v19;
      v21 = sub_224F675D4();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
        memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      v24 = *(int *)(v12 + 28);
      v25 = (_QWORD *)((char *)v10 + v24);
      v26 = (_QWORD *)((char *)v11 + v24);
      v27 = v26[1];
      *v25 = *v26;
      v25[1] = v27;
      v28 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56);
      swift_bridgeObjectRetain();
      v28(v10, 0, 1, v12);
    }
    v29 = *(int *)(a3 + 20);
    v30 = (uint64_t *)((char *)v4 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ModelsR4.PatientLink(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for Reference() + 24);
  v3 = type metadata accessor for Identifier();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3))
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v2 + 24) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v4 = v2 + *(int *)(v3 + 24);
    v5 = sub_224F675D4();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ModelsR4.PatientLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(type metadata accessor for Reference() + 24);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for Identifier();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v10[1];
    *v9 = *v10;
    v9[1] = v15;
    v16 = v10[3];
    swift_bridgeObjectRetain();
    v33 = a3;
    if (v16 == 1)
    {
      *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
      v9[4] = v10[4];
    }
    else
    {
      v9[2] = v10[2];
      v9[3] = v16;
      v9[4] = v10[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v17 = *(int *)(v11 + 24);
    v18 = (char *)v9 + v17;
    v19 = (char *)v10 + v17;
    v20 = sub_224F675D4();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    a3 = v33;
    v23 = *(int *)(v11 + 28);
    v24 = (_QWORD *)((char *)v9 + v23);
    v25 = (_QWORD *)((char *)v10 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56);
    swift_bridgeObjectRetain();
    v27(v9, 0, 1, v11);
  }
  v28 = *(int *)(a3 + 20);
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.PatientLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void (*v31)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v51;
  uint64_t v52;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(type metadata accessor for Reference() + 24);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for Identifier();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_224DDEAA0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v52 = a3;
    *v7 = *v8;
    v7[1] = v8[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v18 = (__int128 *)(v7 + 2);
    v19 = (__int128 *)(v8 + 2);
    v20 = v8[3];
    if (v7[3] == 1)
    {
      if (v20 == 1)
      {
        v21 = *v19;
        v7[4] = v8[4];
        *v18 = v21;
      }
      else
      {
        v7[2] = v8[2];
        v7[3] = v8[3];
        v7[4] = v8[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
    }
    else if (v20 == 1)
    {
      sub_224E2C9C0((uint64_t)(v7 + 2));
      v32 = v8[4];
      *v18 = *v19;
      v7[4] = v32;
    }
    else
    {
      v7[2] = v8[2];
      v7[3] = v8[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7[4] = v8[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v33 = *(int *)(v9 + 24);
    v34 = (char *)v7 + v33;
    v35 = (char *)v8 + v33;
    v36 = sub_224F675D4();
    v37 = *(_QWORD *)(v36 - 8);
    v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
    v51 = v34;
    LODWORD(v34) = v38(v34, 1, v36);
    v39 = v38(v35, 1, v36);
    if ((_DWORD)v34)
    {
      if (!v39)
      {
        (*(void (**)(void *, char *, uint64_t))(v37 + 16))(v51, v35, v36);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v51, 0, 1, v36);
        goto LABEL_29;
      }
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v41 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
      v42 = v51;
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(void *, char *, uint64_t))(v37 + 24))(v51, v35, v36);
        goto LABEL_29;
      }
      (*(void (**)(void *, uint64_t))(v37 + 8))(v51, v36);
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v41 = *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64);
      v42 = v51;
    }
    memcpy(v42, v35, v41);
LABEL_29:
    v44 = *(int *)(v9 + 28);
    v45 = (_QWORD *)((char *)v7 + v44);
    v46 = (_QWORD *)((char *)v8 + v44);
    *v45 = *v46;
    v45[1] = v46[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_30:
    a3 = v52;
    goto LABEL_31;
  }
  if (!v13)
  {
    *v7 = *v8;
    v7[1] = v8[1];
    v16 = v8[3];
    swift_bridgeObjectRetain();
    v52 = a3;
    if (v16 == 1)
    {
      v17 = *((_OWORD *)v8 + 1);
      v7[4] = v8[4];
      *((_OWORD *)v7 + 1) = v17;
    }
    else
    {
      v7[2] = v8[2];
      v7[3] = v8[3];
      v7[4] = v8[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v22 = *(int *)(v9 + 24);
    v23 = (char *)v7 + v22;
    v24 = (char *)v8 + v22;
    v25 = sub_224F675D4();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v28 = *(int *)(v9 + 28);
    v29 = (_QWORD *)((char *)v7 + v28);
    v30 = (_QWORD *)((char *)v8 + v28);
    *v29 = *v30;
    v29[1] = v30[1];
    v31 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56);
    swift_bridgeObjectRetain();
    v31(v7, 0, 1, v9);
    goto LABEL_30;
  }
  v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
  sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v14);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_31:
  v47 = *(int *)(a3 + 20);
  v48 = (_QWORD *)((char *)a1 + v47);
  v49 = (_QWORD *)((char *)a2 + v47);
  *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ModelsR4.PatientLink(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(type metadata accessor for Reference() + 24);
  v8 = (_OWORD *)((char *)a1 + v7);
  v9 = (_OWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for Identifier();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
    v14 = *(int *)(v10 + 24);
    __dst = (char *)v8 + v14;
    v15 = (char *)v9 + v14;
    v16 = sub_224F675D4();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    *(_OWORD *)((char *)v8 + *(int *)(v10 + 28)) = *(_OWORD *)((char *)v9 + *(int *)(v10 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithTake for ModelsR4.PatientLink(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void *v49;
  uint64_t v50;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(type metadata accessor for Reference() + 24);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for Identifier();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_224DDEAA0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Identifier);
      v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    v25 = v10[1];
    *v9 = *v10;
    v9[1] = v25;
    swift_bridgeObjectRelease();
    v50 = a3;
    if (v9[3] != 1)
    {
      v26 = v10[3];
      if (v26 != 1)
      {
        v9[2] = v10[2];
        v9[3] = v26;
        swift_bridgeObjectRelease();
        v9[4] = v10[4];
        swift_bridgeObjectRelease();
LABEL_16:
        v27 = *(int *)(v11 + 24);
        v28 = (char *)v9 + v27;
        v29 = (char *)v10 + v27;
        v30 = sub_224F675D4();
        v31 = *(_QWORD *)(v30 - 8);
        v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
        v49 = v28;
        LODWORD(v28) = v32(v28, 1, v30);
        v33 = v32(v29, 1, v30);
        if ((_DWORD)v28)
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v31 + 32))(v49, v29, v30);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v49, 0, 1, v30);
            goto LABEL_24;
          }
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v35 = *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64);
          v36 = v49;
        }
        else
        {
          if (!v33)
          {
            (*(void (**)(void *, char *, uint64_t))(v31 + 40))(v49, v29, v30);
            goto LABEL_24;
          }
          (*(void (**)(void *, uint64_t))(v31 + 8))(v49, v30);
          sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
          v35 = *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64);
          v36 = v49;
        }
        memcpy(v36, v29, v35);
LABEL_24:
        v38 = *(int *)(v11 + 28);
        v39 = (_QWORD *)((char *)v9 + v38);
        v40 = (_QWORD *)((char *)v10 + v38);
        v42 = *v40;
        v41 = v40[1];
        *v39 = v42;
        v39[1] = v41;
        swift_bridgeObjectRelease();
LABEL_25:
        a3 = v50;
        goto LABEL_26;
      }
      sub_224E2C9C0((uint64_t)(v9 + 2));
    }
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    v9[4] = v10[4];
    goto LABEL_16;
  }
  if (!v15)
  {
    v50 = a3;
    v18 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v18;
    v9[4] = v10[4];
    v19 = *(int *)(v11 + 24);
    v20 = (char *)v9 + v19;
    v21 = (char *)v10 + v19;
    v22 = sub_224F675D4();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    *(_OWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_OWORD *)((char *)v10 + *(int *)(v11 + 28));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    goto LABEL_25;
  }
  v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
  sub_224DDEA0C(0, &qword_2557E02C0, (uint64_t (*)(uint64_t))type metadata accessor for Identifier, v16);
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
LABEL_26:
  v43 = *(int *)(a3 + 20);
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (_QWORD *)((char *)a2 + v43);
  v47 = *v45;
  v46 = v45[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.PatientLink()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E4C484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Reference();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.PatientLink()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E4C510(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Reference();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_224E4C58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_224E4C5A0(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for Reference);
}

uint64_t sub_224E4C5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ModelsR4.Patient(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModelsR4.Patient(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 == 1)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v9;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v11;
  *(_QWORD *)(a1 + 144) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ModelsR4.Patient(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[4];
  *(_QWORD *)((char *)a1 + 37) = *(_QWORD *)((char *)a2 + 37);
  a1[4] = v4;
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (__int128 *)(a1 + 12);
  v6 = (__int128 *)(a2 + 12);
  v7 = a2[13];
  if (a1[13] == 1)
  {
    if (v7 == 1)
    {
      v8 = *v6;
      a1[14] = a2[14];
      *v5 = v8;
    }
    else
    {
      a1[12] = a2[12];
      a1[13] = a2[13];
      a1[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v7 == 1)
  {
    sub_224E2C9C0((uint64_t)(a1 + 12));
    v9 = a2[14];
    *v5 = *v6;
    a1[14] = v9;
  }
  else
  {
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[14] = a2[14];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

_QWORD *assignWithTake for ModelsR4.Patient(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  *(_QWORD *)((char *)a1 + 37) = *(_QWORD *)((char *)a2 + 37);
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  if (a1[13] != 1)
  {
    v7 = a2[13];
    if (v7 != 1)
    {
      a1[12] = a2[12];
      a1[13] = v7;
      swift_bridgeObjectRelease();
      a1[14] = a2[14];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_224E2C9C0((uint64_t)(a1 + 12));
  }
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  a1[14] = a2[14];
LABEL_6:
  a1[15] = a2[15];
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  swift_bridgeObjectRelease();
  v8 = a2[18];
  a1[17] = a2[17];
  a1[18] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Patient(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Patient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Patient()
{
  return &type metadata for ModelsR4.Patient;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_224E4CBE8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_224E4CBF0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.PatientLink.CodingKeys()
{
  return &type metadata for ModelsR4.PatientLink.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.HumanName.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.HumanName.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_224E4CCE8 + 4 * byte_224F6B303[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_224E4CD1C + 4 * byte_224F6B2FE[v4]))();
}

uint64_t sub_224E4CD1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4CD24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E4CD2CLL);
  return result;
}

uint64_t sub_224E4CD38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E4CD40);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_224E4CD44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4CD4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.HumanName.CodingKeys()
{
  return &type metadata for ModelsR4.HumanName.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsR4.ImmunizationPerformer.CodingKeys()
{
  return &type metadata for ModelsR4.ImmunizationPerformer.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.ImmunizationProtocol.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.ImmunizationProtocol.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_224E4CE5C + 4 * byte_224F6B30D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_224E4CE90 + 4 * byte_224F6B308[v4]))();
}

uint64_t sub_224E4CE90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4CE98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E4CEA0);
  return result;
}

uint64_t sub_224E4CEAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E4CEB4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_224E4CEB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4CEC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.ImmunizationProtocol.CodingKeys()
{
  return &type metadata for ModelsR4.ImmunizationProtocol.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsR4.DocumentReferenceContext.CodingKeys()
{
  return &type metadata for ModelsR4.DocumentReferenceContext.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsR4.DocumentReferenceContent.CodingKeys()
{
  return &type metadata for ModelsR4.DocumentReferenceContent.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FHIRResourceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V11PatientLinkV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224E4CFD8 + 4 * byte_224F6B317[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224E4D00C + 4 * byte_224F6B312[v4]))();
}

uint64_t sub_224E4D00C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E4D01CLL);
  return result;
}

uint64_t sub_224E4D028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E4D030);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224E4D034(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D03C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Bundle.BundleEntry.CodingKeys()
{
  return &type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Patient.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Patient.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_224E4D134 + 4 * byte_224F6B321[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_224E4D168 + 4 * byte_224F6B31C[v4]))();
}

uint64_t sub_224E4D168(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E4D178);
  return result;
}

uint64_t sub_224E4D184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E4D18CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_224E4D190(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D198(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Patient.CodingKeys()
{
  return &type metadata for ModelsR4.Patient.CodingKeys;
}

_BYTE *sub_224E4D1BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Observation.CodingKeys()
{
  return &type metadata for ModelsR4.Observation.CodingKeys;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V11ObservationV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V11ObservationV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_224E4D2B0 + 4 * byte_224F6B32B[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_224E4D2E4 + 4 * byte_224F6B326[v4]))();
}

uint64_t sub_224E4D2E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D2EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E4D2F4);
  return result;
}

uint64_t sub_224E4D300(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E4D308);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_224E4D30C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D314(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Immunization.CodingKeys()
{
  return &type metadata for ModelsR4.Immunization.CodingKeys;
}

ValueMetadata *type metadata accessor for ModelsR4.DocumentReference.CodingKeys()
{
  return &type metadata for ModelsR4.DocumentReference.CodingKeys;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V17DocumentReferenceV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V17DocumentReferenceV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_224E4D424 + 4 * byte_224F6B335[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_224E4D458 + 4 * byte_224F6B330[v4]))();
}

uint64_t sub_224E4D458(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D460(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E4D468);
  return result;
}

uint64_t sub_224E4D474(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E4D47CLL);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_224E4D480(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D488(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.DiagnosticReport.CodingKeys()
{
  return &type metadata for ModelsR4.DiagnosticReport.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Condition.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Condition.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_224E4D580 + 4 * byte_224F6B33F[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_224E4D5B4 + 4 * byte_224F6B33A[v4]))();
}

uint64_t sub_224E4D5B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D5BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E4D5C4);
  return result;
}

uint64_t sub_224E4D5D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E4D5D8);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_224E4D5DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D5E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Condition.CodingKeys()
{
  return &type metadata for ModelsR4.Condition.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Bundle.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Bundle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_224E4D6DC + 4 * byte_224F6B349[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_224E4D710 + 4 * byte_224F6B344[v4]))();
}

uint64_t sub_224E4D710(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D718(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E4D720);
  return result;
}

uint64_t sub_224E4D72C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E4D734);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_224E4D738(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D740(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Bundle.CodingKeys()
{
  return &type metadata for ModelsR4.Bundle.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ModelsR4.Binary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelsR4.Binary.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_224E4D838 + 4 * byte_224F6B353[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_224E4D86C + 4 * byte_224F6B34E[v4]))();
}

uint64_t sub_224E4D86C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D874(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E4D87CLL);
  return result;
}

uint64_t sub_224E4D888(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E4D890);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_224E4D894(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E4D89C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.Binary.CodingKeys()
{
  return &type metadata for ModelsR4.Binary.CodingKeys;
}

uint64_t _s23HealthRecordsExtraction8ModelsR4V21ImmunizationPerformerV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_224E4D8F8 + 4 * byte_224F6B358[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_224E4D918 + 4 * byte_224F6B35D[v4]))();
}

_BYTE *sub_224E4D8F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_224E4D918(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224E4D920(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224E4D928(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224E4D930(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224E4D938(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ModelsR4.ResourceProxy.CodingKeys()
{
  return &type metadata for ModelsR4.ResourceProxy.CodingKeys;
}

unint64_t sub_224E4D958()
{
  unint64_t result;

  result = qword_2557E12B8;
  if (!qword_2557E12B8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6C884, &type metadata for ModelsR4.ResourceProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E12B8);
  }
  return result;
}

unint64_t sub_224E4D9A0()
{
  unint64_t result;

  result = qword_2557E12C0;
  if (!qword_2557E12C0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6C93C, &type metadata for ModelsR4.Binary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E12C0);
  }
  return result;
}

unint64_t sub_224E4D9E8()
{
  unint64_t result;

  result = qword_2557E12C8;
  if (!qword_2557E12C8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6C9F4, &type metadata for ModelsR4.Bundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E12C8);
  }
  return result;
}

unint64_t sub_224E4DA30()
{
  unint64_t result;

  result = qword_2557E12D0;
  if (!qword_2557E12D0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CAAC, &type metadata for ModelsR4.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E12D0);
  }
  return result;
}

unint64_t sub_224E4DA78()
{
  unint64_t result;

  result = qword_2557E12D8;
  if (!qword_2557E12D8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CB64, &type metadata for ModelsR4.DiagnosticReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E12D8);
  }
  return result;
}

unint64_t sub_224E4DAC0()
{
  unint64_t result;

  result = qword_2557E12E0;
  if (!qword_2557E12E0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CC1C, &type metadata for ModelsR4.DocumentReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E12E0);
  }
  return result;
}

unint64_t sub_224E4DB08()
{
  unint64_t result;

  result = qword_2557E12E8;
  if (!qword_2557E12E8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CCD4, &type metadata for ModelsR4.Immunization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E12E8);
  }
  return result;
}

unint64_t sub_224E4DB50()
{
  unint64_t result;

  result = qword_2557E12F0;
  if (!qword_2557E12F0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CD8C, &type metadata for ModelsR4.Observation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E12F0);
  }
  return result;
}

unint64_t sub_224E4DB98()
{
  unint64_t result;

  result = qword_2557E12F8;
  if (!qword_2557E12F8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CE44, &type metadata for ModelsR4.Patient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E12F8);
  }
  return result;
}

unint64_t sub_224E4DBE0()
{
  unint64_t result;

  result = qword_2557E1300;
  if (!qword_2557E1300)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CF34, &type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1300);
  }
  return result;
}

unint64_t sub_224E4DC28()
{
  unint64_t result;

  result = qword_2557E1308;
  if (!qword_2557E1308)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CFEC, &type metadata for ModelsR4.DocumentReferenceContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1308);
  }
  return result;
}

unint64_t sub_224E4DC70()
{
  unint64_t result;

  result = qword_2557E1310;
  if (!qword_2557E1310)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D0A4, &type metadata for ModelsR4.DocumentReferenceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1310);
  }
  return result;
}

unint64_t sub_224E4DCB8()
{
  unint64_t result;

  result = qword_2557E1318;
  if (!qword_2557E1318)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D15C, &type metadata for ModelsR4.ImmunizationProtocol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1318);
  }
  return result;
}

unint64_t sub_224E4DD00()
{
  unint64_t result;

  result = qword_2557E1320;
  if (!qword_2557E1320)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D214, &type metadata for ModelsR4.ImmunizationPerformer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1320);
  }
  return result;
}

unint64_t sub_224E4DD48()
{
  unint64_t result;

  result = qword_2557E1328;
  if (!qword_2557E1328)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D2CC, &type metadata for ModelsR4.HumanName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1328);
  }
  return result;
}

unint64_t sub_224E4DD90()
{
  unint64_t result;

  result = qword_2557E1330;
  if (!qword_2557E1330)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D384, &type metadata for ModelsR4.PatientLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1330);
  }
  return result;
}

unint64_t sub_224E4DDD8()
{
  unint64_t result;

  result = qword_2557E1338;
  if (!qword_2557E1338)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D2F4, &type metadata for ModelsR4.PatientLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1338);
  }
  return result;
}

unint64_t sub_224E4DE20()
{
  unint64_t result;

  result = qword_2557E1340;
  if (!qword_2557E1340)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D31C, &type metadata for ModelsR4.PatientLink.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1340);
  }
  return result;
}

unint64_t sub_224E4DE68()
{
  unint64_t result;

  result = qword_2557E1348;
  if (!qword_2557E1348)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D23C, &type metadata for ModelsR4.HumanName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1348);
  }
  return result;
}

unint64_t sub_224E4DEB0()
{
  unint64_t result;

  result = qword_2557E1350;
  if (!qword_2557E1350)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D264, &type metadata for ModelsR4.HumanName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1350);
  }
  return result;
}

unint64_t sub_224E4DEF8()
{
  unint64_t result;

  result = qword_2557E1358;
  if (!qword_2557E1358)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D184, &type metadata for ModelsR4.ImmunizationPerformer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1358);
  }
  return result;
}

unint64_t sub_224E4DF40()
{
  unint64_t result;

  result = qword_2557E1360;
  if (!qword_2557E1360)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D1AC, &type metadata for ModelsR4.ImmunizationPerformer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1360);
  }
  return result;
}

unint64_t sub_224E4DF88()
{
  unint64_t result;

  result = qword_2557E1368;
  if (!qword_2557E1368)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D0CC, &type metadata for ModelsR4.ImmunizationProtocol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1368);
  }
  return result;
}

unint64_t sub_224E4DFD0()
{
  unint64_t result;

  result = qword_2557E1370;
  if (!qword_2557E1370)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D0F4, &type metadata for ModelsR4.ImmunizationProtocol.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1370);
  }
  return result;
}

unint64_t sub_224E4E018()
{
  unint64_t result;

  result = qword_2557E1378;
  if (!qword_2557E1378)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D014, &type metadata for ModelsR4.DocumentReferenceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1378);
  }
  return result;
}

unint64_t sub_224E4E060()
{
  unint64_t result;

  result = qword_2557E1380;
  if (!qword_2557E1380)
  {
    result = MEMORY[0x22768ED24](&unk_224F6D03C, &type metadata for ModelsR4.DocumentReferenceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1380);
  }
  return result;
}

unint64_t sub_224E4E0A8()
{
  unint64_t result;

  result = qword_2557E1388;
  if (!qword_2557E1388)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CF5C, &type metadata for ModelsR4.DocumentReferenceContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1388);
  }
  return result;
}

unint64_t sub_224E4E0F0()
{
  unint64_t result;

  result = qword_2557E1390;
  if (!qword_2557E1390)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CF84, &type metadata for ModelsR4.DocumentReferenceContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1390);
  }
  return result;
}

unint64_t sub_224E4E138()
{
  unint64_t result;

  result = qword_2557E1398;
  if (!qword_2557E1398)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CE6C, &type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1398);
  }
  return result;
}

unint64_t sub_224E4E180()
{
  unint64_t result;

  result = qword_2557E13A0;
  if (!qword_2557E13A0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CE94, &type metadata for ModelsR4.Bundle.BundleEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13A0);
  }
  return result;
}

unint64_t sub_224E4E1C8()
{
  unint64_t result;

  result = qword_2557E13A8;
  if (!qword_2557E13A8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CDB4, &type metadata for ModelsR4.Patient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13A8);
  }
  return result;
}

unint64_t sub_224E4E210()
{
  unint64_t result;

  result = qword_2557E13B0;
  if (!qword_2557E13B0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CDDC, &type metadata for ModelsR4.Patient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13B0);
  }
  return result;
}

unint64_t sub_224E4E258()
{
  unint64_t result;

  result = qword_2557E13B8;
  if (!qword_2557E13B8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CCFC, &type metadata for ModelsR4.Observation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13B8);
  }
  return result;
}

unint64_t sub_224E4E2A0()
{
  unint64_t result;

  result = qword_2557E13C0;
  if (!qword_2557E13C0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CD24, &type metadata for ModelsR4.Observation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13C0);
  }
  return result;
}

unint64_t sub_224E4E2E8()
{
  unint64_t result;

  result = qword_2557E13C8;
  if (!qword_2557E13C8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CC44, &type metadata for ModelsR4.Immunization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13C8);
  }
  return result;
}

unint64_t sub_224E4E330()
{
  unint64_t result;

  result = qword_2557E13D0;
  if (!qword_2557E13D0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CC6C, &type metadata for ModelsR4.Immunization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13D0);
  }
  return result;
}

unint64_t sub_224E4E378()
{
  unint64_t result;

  result = qword_2557E13D8;
  if (!qword_2557E13D8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CB8C, &type metadata for ModelsR4.DocumentReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13D8);
  }
  return result;
}

unint64_t sub_224E4E3C0()
{
  unint64_t result;

  result = qword_2557E13E0;
  if (!qword_2557E13E0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CBB4, &type metadata for ModelsR4.DocumentReference.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13E0);
  }
  return result;
}

unint64_t sub_224E4E408()
{
  unint64_t result;

  result = qword_2557E13E8;
  if (!qword_2557E13E8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CAD4, &type metadata for ModelsR4.DiagnosticReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13E8);
  }
  return result;
}

unint64_t sub_224E4E450()
{
  unint64_t result;

  result = qword_2557E13F0;
  if (!qword_2557E13F0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CAFC, &type metadata for ModelsR4.DiagnosticReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13F0);
  }
  return result;
}

unint64_t sub_224E4E498()
{
  unint64_t result;

  result = qword_2557E13F8;
  if (!qword_2557E13F8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CA1C, &type metadata for ModelsR4.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E13F8);
  }
  return result;
}

unint64_t sub_224E4E4E0()
{
  unint64_t result;

  result = qword_2557E1400;
  if (!qword_2557E1400)
  {
    result = MEMORY[0x22768ED24](&unk_224F6CA44, &type metadata for ModelsR4.Condition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1400);
  }
  return result;
}

unint64_t sub_224E4E528()
{
  unint64_t result;

  result = qword_2557E1408;
  if (!qword_2557E1408)
  {
    result = MEMORY[0x22768ED24](&unk_224F6C964, &type metadata for ModelsR4.Bundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1408);
  }
  return result;
}

unint64_t sub_224E4E570()
{
  unint64_t result;

  result = qword_2557E1410;
  if (!qword_2557E1410)
  {
    result = MEMORY[0x22768ED24](&unk_224F6C98C, &type metadata for ModelsR4.Bundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1410);
  }
  return result;
}

unint64_t sub_224E4E5B8()
{
  unint64_t result;

  result = qword_2557E1418;
  if (!qword_2557E1418)
  {
    result = MEMORY[0x22768ED24](&unk_224F6C8AC, &type metadata for ModelsR4.Binary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1418);
  }
  return result;
}

unint64_t sub_224E4E600()
{
  unint64_t result;

  result = qword_2557E1420;
  if (!qword_2557E1420)
  {
    result = MEMORY[0x22768ED24](&unk_224F6C8D4, &type metadata for ModelsR4.Binary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1420);
  }
  return result;
}

unint64_t sub_224E4E648()
{
  unint64_t result;

  result = qword_2557E1428;
  if (!qword_2557E1428)
  {
    result = MEMORY[0x22768ED24](&unk_224F6C7BC, &type metadata for ModelsR4.ResourceProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1428);
  }
  return result;
}

unint64_t sub_224E4E690()
{
  unint64_t result;

  result = qword_2557E1430;
  if (!qword_2557E1430)
  {
    result = MEMORY[0x22768ED24](&unk_224F6C7E4, &type metadata for ModelsR4.ResourceProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1430);
  }
  return result;
}

uint64_t sub_224E4E6D4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_224E4E8AC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7972746E65 && a2 == 0xE500000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_224E4EA10(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6163696E696C63 && a2 == 0xEE00737574617453 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000224F814E0 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7974697265766573 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6574695379646F62 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7461447465736E6FLL && a2 == 0xED0000656D695465 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7265507465736E6FLL && a2 == 0xEB00000000646F69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7274537465736E6FLL && a2 == 0xEB00000000676E69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000224F81500 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6E656D6574616261 && a2 == 0xEF646F6972655074 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6E656D6574616261 && a2 == 0xEF676E6972745374 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x646564726F636572 && a2 == 0xEC00000065746144 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x726564726F636572 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x7265747265737361 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 1702129518 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 19;
    else
      return 20;
  }
}

uint64_t sub_224E4F294(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xE90000000000006ELL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6973756C636E6F63 && a2 == 0xEA00000000006E6FLL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000224F81520 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7669746365666665 && a2 == 0xEF646F6972655065 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646575737369 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65746E6573657270 && a2 == 0xED00006D726F4664 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_224E4F80C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7574617453636F64 && a2 == 0xE900000000000073 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x726F68747561 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_224E4FD2C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D686361747461 && a2 == 0xEA0000000000746ELL;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616D726F66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_224E4FE20(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65746E756F636E65 && a2 == 0xE900000000000072;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646F69726570 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_224E4FF14(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6974617269707865 && a2 == 0xEE00657461446E6FLL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1702129518 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000224F81540 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6465696C707041 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x646564726F636572 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x43656E6963636176 && a2 == 0xEB0000000065646FLL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x74636166756E616DLL && a2 == 0xEC00000072657275 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x537972616D697270 && a2 == 0xED0000656372756FLL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65626D754E746F6CLL && a2 == 0xE900000000000072 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x746F706275537369 && a2 == 0xEB00000000746E65 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

uint64_t sub_224E5067C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x8000000224F815A0 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000224F815C0 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000224F815E0 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000224F81600 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6465746567726174 && a2 == 0xEF65736165736944)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_224E5089C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635018093 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1701080931 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000224F81520 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000224F81560 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7669746365666665 && a2 == 0xEF646F6972655065 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x646575737369 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 1702129518 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x656D726F66726570 && a2 == 0xE900000000000072 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x72745365756C6176 && a2 == 0xEB00000000676E69 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000224F81580 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x61755165756C6176 && a2 == 0xED0000797469746ELL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xEE0065676E615265 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

uint64_t sub_224E50FA4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6648693 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x786966657270 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x796C696D6166 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E65766967 && a2 == 0xE500000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x786966667573 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x646F69726570 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_224E51240(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726568746FLL && a2 == 0xE500000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_224E51318(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461446874726962 && a2 == 0xE900000000000065 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265646E6567 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D6F63656C6574 && a2 == 0xE700000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x536C61746972616DLL && a2 == 0xED00007375746174 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1802398060 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xE90000000000006ELL || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

void sub_224E51808()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E1458)
  {
    type metadata accessor for ModelsR4.ResourceProxy(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E1458);
  }
}

id ConditionRule.__allocating_init(definition:)(unint64_t a1, unint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return ConditionRule.init(definition:)(a1, a2);
}

id ConditionRule.init(definition:)(unint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  objc_class *v37;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  _QWORD v43[5];
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  objc_super v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v53 = sub_224F6734C();
  v47 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v2[OBJC_IVAR___HDHRConditionRule_keyPath];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0xE000000000000000;
  v45 = v8;
  v9 = &v2[OBJC_IVAR___HDHRConditionRule_value];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0xE000000000000000;
  v46 = v9;
  v51 = a1;
  v52 = a2;
  v49 = 61;
  v50 = 0xE100000000000000;
  sub_224E51E94();
  v10 = v2;
  v11 = sub_224F68018();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v43[2] = a1;
    v43[3] = a2;
    v43[4] = v3;
    v44 = v10;
    v13 = v11;
    v49 = MEMORY[0x24BEE4AF8];
    sub_224E53720(0, v12, 0);
    v43[1] = v13;
    v14 = (unint64_t *)(v13 + 40);
    do
    {
      v15 = *v14;
      v51 = *(v14 - 1);
      v52 = v15;
      swift_bridgeObjectRetain();
      sub_224F6731C();
      v16 = sub_224F68024();
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v53);
      swift_bridgeObjectRelease();
      v19 = (_QWORD *)v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_224E53720(0, v19[2] + 1, 1);
        v19 = (_QWORD *)v49;
      }
      v21 = v19[2];
      v20 = v19[3];
      if (v21 >= v20 >> 1)
      {
        sub_224E53720(v20 > 1, v21 + 1, 1);
        v19 = (_QWORD *)v49;
      }
      v14 += 2;
      v19[2] = v21 + 1;
      v22 = &v19[2 * v21];
      v22[4] = v16;
      v22[5] = v18;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v10 = v44;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if (v19[2] == 2)
  {
    swift_bridgeObjectRelease();
    v23 = v19[2];
    if (v23)
    {
      v25 = v19[4];
      v24 = v19[5];
      v26 = (uint64_t)&v19[2 * v23 + 4];
      v28 = *(_QWORD *)(v26 - 16);
      v27 = *(_QWORD *)(v26 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = 0;
      v25 = 0;
      v27 = 0xE000000000000000;
      v24 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    v33 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0)
      v33 = v25 & 0xFFFFFFFFFFFFLL;
    if (v33)
    {
      v34 = HIBYTE(v27) & 0xF;
      if ((v27 & 0x2000000000000000) == 0)
        v34 = v28 & 0xFFFFFFFFFFFFLL;
      if (v34)
      {
        v35 = v45;
        *(_QWORD *)v45 = v25;
        *((_QWORD *)v35 + 1) = v24;
        swift_bridgeObjectRelease();
        v36 = v46;
        *(_QWORD *)v46 = v28;
        *((_QWORD *)v36 + 1) = v27;

        swift_bridgeObjectRelease();
        v37 = (objc_class *)type metadata accessor for ConditionRule();
        v48.receiver = v10;
        v48.super_class = v37;
        return objc_msgSendSuper2(&v48, sel_init);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E1478, (uint64_t (*)(uint64_t))sub_224E5373C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(inited + 32) = sub_224F67B80();
    *(_QWORD *)(inited + 40) = v39;
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    v31 = 0xD000000000000020;
    v32 = 0x8000000224F81690;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_224DDEA0C(0, (unint64_t *)&qword_2557E1478, (uint64_t (*)(uint64_t))sub_224E5373C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_224F6D8B0;
    *(_QWORD *)(inited + 32) = sub_224F67B80();
    *(_QWORD *)(inited + 40) = v30;
    v51 = 0;
    v52 = 0xE000000000000000;
    sub_224F680E4();
    swift_bridgeObjectRelease();
    v51 = 0xD000000000000011;
    v52 = 0x8000000224F81650;
    sub_224F67C94();
    swift_bridgeObjectRelease();
    sub_224F67C94();
    v31 = v51;
    v32 = v52;
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  }
  *(_QWORD *)(inited + 48) = v31;
  *(_QWORD *)(inited + 56) = v32;
  sub_224E51ED8(inited);
  v40 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v41 = (void *)sub_224F67B5C();
  v42 = (void *)sub_224F67AE4();
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_initWithDomain_code_userInfo_, v41, 3, v42);

  swift_willThrow();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  type metadata accessor for ConditionRule();
  return (id)swift_deallocPartialClassInstance();
}

unint64_t sub_224E51E94()
{
  unint64_t result;

  result = qword_2557E1470;
  if (!qword_2557E1470)
  {
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2557E1470);
  }
  return result;
}

unint64_t sub_224E51ED8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_224E546B0(0, (unint64_t *)&qword_2557E1560, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = sub_224F681F8();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_224DDB408(v6, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_224E5373C);
    v7 = v15;
    v8 = v16;
    result = sub_224E533E8(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_224E543B4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_224E52024(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_224E546B0(0, &qword_2557E14F8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)sub_224F681F8();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_224E533E8(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_224E52158(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_224E543C4();
  v2 = (_QWORD *)sub_224F681F8();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_224E533E8(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_224E5226C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_224E542A4();
  v2 = sub_224F681F8();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_224DDB408(v6, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_224E54350);
    v7 = v15;
    v8 = v16;
    result = sub_224E533E8(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_224E543B4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_224E5239C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_224E54554();
  v2 = sub_224F681F8();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_224DDB408(v6, (uint64_t)&v13, (uint64_t (*)(_QWORD))sub_224E545D8);
    v7 = v13;
    result = sub_224E5344C(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_224E543B4(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_224E524C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  sub_224F67C58();
  return sub_224F67D0C();
}

uint64_t sub_224E525B8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];

  v2 = v1;
  v3 = objc_msgSend(a1, sel_JSONObject);
  v4 = MEMORY[0x24BEE4AD8];
  v5 = sub_224F67AF0();

  if (!*(_QWORD *)(v5 + 16))
  {
    v19 = 0u;
    v20 = 0u;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v7 = *(_QWORD *)(v2 + OBJC_IVAR___HDHRConditionRule_keyPath);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR___HDHRConditionRule_keyPath + 8);
  swift_bridgeObjectRetain();
  v8 = sub_224E533E8(v7, v6);
  if ((v9 & 1) == 0)
  {
    v19 = 0u;
    v20 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_224E537C4(*(_QWORD *)(v5 + 56) + 32 * v8, (uint64_t)&v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v20 + 1))
  {
LABEL_10:
    sub_224E53840((uint64_t)&v19, (uint64_t)&qword_2557E1488, v4 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224E54704);
    goto LABEL_11;
  }
  sub_224E543B4(&v19, v21);
  v10 = (uint64_t *)(v2 + OBJC_IVAR___HDHRConditionRule_value);
  swift_bridgeObjectRetain();
  v11 = sub_224F67D00();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    v12 = v10[1];
    *(_QWORD *)&v19 = *v10;
    *((_QWORD *)&v19 + 1) = v12;
    v17 = 124;
    v18 = 0xE100000000000000;
    sub_224E51E94();
    if ((sub_224F68054() & 1) != 0)
    {
      v13 = *v10;
      v14 = v10[1];
      sub_224E537C4((uint64_t)v21, (uint64_t)&v19);
      swift_bridgeObjectRetain();
      v15 = sub_224E52874(v13, v14, (uint64_t)&v19);
      swift_bridgeObjectRelease();
      sub_224E53840((uint64_t)&v19, (uint64_t)&qword_2557E1488, v4 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224E54704);
LABEL_20:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      return v15 & 1;
    }
  }
  sub_224E537C4((uint64_t)v21, (uint64_t)&v19);
  if (swift_dynamicCast())
  {
    if (v17 == *v10 && v18 == v10[1])
      v15 = 1;
    else
      v15 = sub_224F683CC();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
LABEL_11:
  v15 = 0;
  return v15 & 1;
}

uint64_t sub_224E52874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  __int128 *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  sub_224E54244(a3, (uint64_t)&v21);
  v6 = MEMORY[0x24BEE4AD8];
  if (v22)
  {
    sub_224E54704(0, &qword_2557E1558, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v7 = *(_QWORD *)(v19 + 16);
      if (v7)
      {
        v8 = v19 + 32;
        v9 = v6 + 8;
        while (1)
        {
          sub_224E537C4(v8, (uint64_t)&v21);
          v10 = sub_224E52874(a1, a2, &v21);
          sub_224E53840((uint64_t)&v21, (uint64_t)&qword_2557E1488, v9, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224E54704);
          if ((v10 & 1) != 0)
            break;
          v8 += 32;
          if (!--v7)
          {
            swift_bridgeObjectRelease();
            v6 = MEMORY[0x24BEE4AD8];
            goto LABEL_10;
          }
        }
LABEL_25:
        swift_bridgeObjectRelease();
        v15 = 1;
        return v15 & 1;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_224E53840((uint64_t)&v21, (uint64_t)&qword_2557E1488, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224E54704);
  }
LABEL_10:
  sub_224E54244(a3, (uint64_t)&v21);
  if (!v22)
  {
    v13 = v6 + 8;
    v14 = &v21;
LABEL_21:
    sub_224E53840((uint64_t)v14, (uint64_t)&qword_2557E1488, v13, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224E54704);
    goto LABEL_22;
  }
  sub_224E546B0(0, &qword_2557E14C0, v6 + 8, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    v16 = sub_224E52B60(a3);
    if (!v17)
    {
      v15 = 0;
      return v15 & 1;
    }
    if (v16 != a1 || v17 != a2)
    {
      v15 = sub_224F683CC();
      swift_bridgeObjectRelease();
      return v15 & 1;
    }
    goto LABEL_25;
  }
  if (*(_QWORD *)(v19 + 16) && (v11 = sub_224E533E8(0x676E69646F63, 0xE600000000000000), (v12 & 1) != 0))
  {
    sub_224E537C4(*(_QWORD *)(v19 + 56) + 32 * v11, (uint64_t)&v19);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v20 + 1))
  {
    v13 = v6 + 8;
    v14 = &v19;
    goto LABEL_21;
  }
  sub_224E543B4(&v19, &v21);
  sub_224E537C4((uint64_t)&v21, (uint64_t)&v19);
  v15 = sub_224E52874(a1, a2, &v19);
  sub_224E53840((uint64_t)&v19, (uint64_t)&qword_2557E1488, v6 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224E54704);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  return v15 & 1;
}

uint64_t sub_224E52B60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t (*v14)(void);
  void *v15;
  char *v16;
  uint64_t v17;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22[2];
  __int128 v23;
  __int128 v24;

  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v22 - v3;
  v5 = sub_224F675D4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E54244(a1, (uint64_t)&v23);
  if (!*((_QWORD *)&v24 + 1))
  {
    v14 = (uint64_t (*)(void))(MEMORY[0x24BEE4AD8] + 8);
    v13 = (uint64_t *)&qword_2557E1488;
    v15 = sub_224E54704;
    v16 = (char *)&v23;
    goto LABEL_9;
  }
  v9 = MEMORY[0x24BEE4AD8];
  sub_224E546B0(0, &qword_2557E14C0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v10 = v22[0];
    if (!*(_QWORD *)(v22[0] + 16)
      || (v11 = sub_224E533E8(0x6D6574737973, 0xE600000000000000), (v12 & 1) == 0)
      || (sub_224E537C4(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v23), (swift_dynamicCast() & 1) == 0))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    sub_224E52E88(v22[0], v22[1], 1, 1, (uint64_t)v4);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      swift_bridgeObjectRelease();
      v13 = &qword_2557E02A8;
      v14 = MEMORY[0x24BDCDAC0];
      v15 = sub_224DDEA0C;
      v16 = v4;
LABEL_9:
      sub_224E53840((uint64_t)v16, (uint64_t)v13, (uint64_t)v14, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))v15);
      return 0;
    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    if (*(_QWORD *)(v10 + 16) && (v19 = sub_224E533E8(1701080931, 0xE400000000000000), (v20 & 1) != 0))
    {
      sub_224E537C4(*(_QWORD *)(v10 + 56) + 32 * v19, (uint64_t)&v23);
    }
    else
    {
      v23 = 0u;
      v24 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v24 + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_224DDACD4(&qword_2557E14C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        *(_QWORD *)&v23 = sub_224F6839C();
        *((_QWORD *)&v23 + 1) = v21;
        sub_224F67C94();
        sub_224F67C94();
        swift_bridgeObjectRelease();
        v17 = v23;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        return v17;
      }
    }
    else
    {
      sub_224E53840((uint64_t)&v23, (uint64_t)&qword_2557E1488, v9 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224E54704);
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return 0;
}

uint64_t sub_224E52E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a3;
  LODWORD(v47) = a4;
  v50 = a5;
  v7 = sub_224F67394();
  v8 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  v49 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_224DDEA0C(0, &qword_2557E14B8, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v45 - v13;
  sub_224DDEA0C(0, (unint64_t *)&qword_2557E02A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], v10);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v45 - v16;
  v18 = sub_224F675D4();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_224F6734C();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a1;
  v52 = a2;
  sub_224F6731C();
  sub_224E51E94();
  sub_224F68024();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  sub_224F675B0();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_224E53840((uint64_t)v17, (uint64_t)&qword_2557E02A8, (uint64_t)MEMORY[0x24BDCDAC0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224DDEA0C);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v50, 1, 1, v18);
  }
  v27 = v50;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  sub_224F67358();
  v29 = v48;
  v28 = v49;
  if ((v46 & 1) != 0 && !(*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v14, 1, v48))
    sub_224F67388();
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if ((v47 & 1) != 0 && !v30(v14, 1, v29))
  {
    v32 = sub_224F67370();
    v34 = sub_224E524C4(v32, v33);
    v36 = v35;
    v28 = v49;
    swift_bridgeObjectRelease();
    if (v36)
    {
      if (v34 == 47 && v36 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      v37 = sub_224F683CC();
      swift_bridgeObjectRelease();
      if ((v37 & 1) != 0)
      {
LABEL_18:
        if (!v30(v14, 1, v29))
        {
          sub_224F67370();
          if (v30(v14, 1, v29))
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v38 = sub_224E5418C(1);
            v40 = v39;
            v47 = v41;
            v43 = v42;
            swift_bridgeObjectRelease();
            v44 = v40;
            v28 = v49;
            MEMORY[0x22768DCB0](v38, v44, v47, v43);
            v29 = v48;
            swift_bridgeObjectRelease();
            sub_224F6737C();
          }
        }
      }
    }
  }
  if (v30(v14, 1, v29))
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v27, 1, 1, v18);
  }
  else
  {
    v31 = v45;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v45, v14, v29);
    sub_224F67364();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v29);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
  return sub_224E53840((uint64_t)v14, (uint64_t)&qword_2557E14B8, (uint64_t)MEMORY[0x24BDCBB78], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224DDEA0C);
}

id ConditionRule.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ConditionRule.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ConditionRule.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConditionRule();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_224E533E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224F68510();
  sub_224F67C34();
  v4 = sub_224F6854C();
  return sub_224E534CC(a1, a2, v4);
}

unint64_t sub_224E5344C(uint64_t a1)
{
  uint64_t v2;

  sub_224F67B80();
  sub_224F68510();
  sub_224F67C34();
  v2 = sub_224F6854C();
  swift_bridgeObjectRelease();
  return sub_224E535AC(a1, v2);
}

unint64_t sub_224E534CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_224F683CC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_224F683CC() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_224E535AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_224F67B80();
    v8 = v7;
    if (v6 == sub_224F67B80() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_224F683CC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_224F67B80();
          v15 = v14;
          if (v13 == sub_224F67B80() && v15 == v16)
            break;
          v18 = sub_224F683CC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_224E53720(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_224E53934(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

void sub_224E5373C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E1480)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E1480);
  }
}

uint64_t type metadata accessor for ConditionRule()
{
  return objc_opt_self();
}

uint64_t sub_224E537C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t method lookup function for ConditionRule()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConditionRule.__allocating_init(definition:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of ConditionRule.evaluate(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t sub_224E53840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;

  v5 = a4(0, a2, a3, MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_224E53888(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_224E53AB0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_224E538A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_224E53C4C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_224E538C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_224E53F9C(a1, a2, a3, (_QWORD *)*v3, &qword_2557E1520, (uint64_t (*)(uint64_t))sub_224E544B8);
  *v3 = result;
  return result;
}

uint64_t sub_224E538EC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_224E53DE8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_224E53908(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_224E53F9C(a1, a2, a3, (_QWORD *)*v3, &qword_2557E1500, (uint64_t (*)(uint64_t))type metadata accessor for Extension);
  *v3 = result;
  return result;
}

uint64_t sub_224E53934(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_224E54704(0, &qword_2557E1568, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E53AB0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_224E54704(0, &qword_2557E1550, (uint64_t)&type metadata for Parameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[72 * v8] || v12 >= &v13[72 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E53C4C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_224E54640();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_224E54704(0, &qword_2557E1488, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E53DE8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_224DDEA0C(0, &qword_2557E1508, (uint64_t (*)(uint64_t))sub_224E54444, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_224E54444();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E53F9C(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_224DDEA0C(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E5418C(uint64_t result)
{
  uint64_t v1;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    result = sub_224F67C40();
    if (!__OFSUB__(result, v1))
    {
      sub_224F67C64();
      return sub_224F67D30();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_224E54244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E54704(0, &qword_2557E1488, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_224E542A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E14D0)
  {
    sub_224E54308();
    v0 = sub_224F68204();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E14D0);
  }
}

unint64_t sub_224E54308()
{
  unint64_t result;

  result = qword_2557E14D8;
  if (!qword_2557E14D8)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E14D8);
  }
  return result;
}

void sub_224E54350()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E14E0)
  {
    sub_224E54308();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E14E0);
  }
}

_OWORD *sub_224E543B4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_224E543C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E14E8)
  {
    sub_224E546B0(255, (unint64_t *)&qword_2557E14F0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
    v0 = sub_224F68204();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E14E8);
  }
}

void sub_224E54444()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E1510)
  {
    sub_224E5451C(255, &qword_2557E1518);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E1510);
  }
}

void sub_224E544B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1528)
  {
    sub_224E5451C(255, &qword_2557E1530);
    v0 = sub_224F67AC0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1528);
  }
}

uint64_t sub_224E5451C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_224E54554()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1538)
  {
    type metadata accessor for VNImageOption(255);
    sub_224DDACD4(&qword_2557E03F0, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_224F6B150);
    v0 = sub_224F68204();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1538);
  }
}

void sub_224E545D8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E1540)
  {
    type metadata accessor for VNImageOption(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E1540);
  }
}

void sub_224E54640()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1548)
  {
    sub_224E54704(255, &qword_2557E1488, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
    v0 = sub_224F683A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1548);
  }
}

void sub_224E546B0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, uint64_t, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x24BEE0D00], a3, MEMORY[0x24BEE0D10]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_224E54704(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_224E54748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_224E54768()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD);

  v1 = v0[6];
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(v1 + 24))(v0[2], v0[3], v0[4], v0[5], v1);
  v0[8] = v2;
  v5 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))(**(int **)(v1 + 32) + *(_QWORD *)(v1 + 32));
  v3 = (_QWORD *)swift_task_alloc();
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_224E547F4;
  return v5(v2, v0[2], v0[5], v0[6]);
}

uint64_t sub_224E547F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  return swift_task_switch();
}

uint64_t sub_224E54868()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 88));
}

uint64_t sub_224E548A0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Bool __swiftcall HKSignedClinicalDataQRRepresentation.isSHC()()
{
  void *v0;

  return objc_msgSend(v0, sel_sourceType) == (id)1;
}

unint64_t *HKSignedClinicalDataQRRepresentation.asSignedClinicalDataJWTData()()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  void *v9;
  unint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  uint64_t v71;
  char v72;
  char v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;

  v2 = v1;
  v95 = *MEMORY[0x24BDAC8D0];
  v3 = sub_224F67BBC();
  v4 = *(_QWORD **)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v0, sel_sourceType) != (id)1)
  {
    sub_224E5721C();
    swift_allocError();
    v25 = 2;
LABEL_13:
    *(_QWORD *)v24 = v25;
    *(_OWORD *)(v24 + 8) = 0u;
    *(_OWORD *)(v24 + 24) = 0u;
    v26 = 4;
LABEL_14:
    *(_BYTE *)(v24 + 40) = v26;
LABEL_15:
    swift_willThrow();
    return v0;
  }
  v93 = 0;
  v7 = objc_msgSend(v0, sel_orderedSegmentsWithError_, &v93);
  v8 = (id)v93;
  if (!v7)
  {
    v0 = (unint64_t *)(id)v93;
    v27 = (void *)sub_224F67544();

    swift_willThrow();
    v93 = (unint64_t)v27;
    v28 = v27;
    sub_224E57260();
    sub_224E5451C(0, &qword_2557E1588);
    if (swift_dynamicCast())
    {
      v29 = v91;
      if (objc_msgSend(v91, sel_code) == (id)118)
      {

        sub_224E5721C();
        swift_allocError();
        *(_OWORD *)v30 = 0u;
        *(_OWORD *)(v30 + 16) = 0u;
        *(_QWORD *)(v30 + 32) = 0;
        *(_BYTE *)(v30 + 40) = 4;
        swift_willThrow();
      }

    }
    return v0;
  }
  v9 = v7;
  sub_224E5451C(0, (unint64_t *)&qword_2557E1590);
  v10 = sub_224F67D6C();
  v11 = v8;
  v12 = v10;

  if (v10 >> 62)
    goto LABEL_139;
  v13 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_5:
  v86 = v3;
  v87 = v2;
  v84 = v6;
  v85 = v4;
  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
    }
    v14 = 0;
    v15 = 0;
    v88 = (char *)(v12 & 0xC000000000000001);
    v16 = 0xE000000000000000;
    v17 = v12;
    do
    {
      v3 = v13;
      if (v88)
        v18 = (id)MEMORY[0x22768E1CC](v14, v12);
      else
        v18 = *(id *)(v12 + 8 * v14 + 32);
      v19 = v18;
      ++v14;
      v20 = objc_msgSend(v18, sel_dataValue);
      v21 = (void *)sub_224F67B80();
      v6 = v22;

      v91 = v21;
      v92 = (uint64_t)v6;
      v89 = v15;
      v90 = v16;
      swift_bridgeObjectRetain();
      v2 = MEMORY[0x24BEE0D00];
      v89 = sub_224F67D24();
      v90 = v23;
      sub_224F67C7C();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v15 = v89;
      v16 = v90;
      v12 = v17;
    }
    while (v13 != v14);
  }
  else
  {
    v15 = 0;
    v16 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease_n();
  v93 = v15;
  v94 = v16;
  v32 = (v16 & 0x2000000000000000) == 0;
  v33 = HIBYTE(v16) & 0xF;
  v34 = v15 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000) != 0)
    v12 = HIBYTE(v16) & 0xF;
  else
    v12 = v15 & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    v83 = (char *)&v91 + 2;
    v88 = (char *)&v91 + 3;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      if (v32)
      {
        if (!v34)
          goto LABEL_135;
      }
      else if (!v33)
      {
        goto LABEL_136;
      }
      v2 = v16 >> 60;
      v3 = (v15 & 0x800000000000000) == 0;
      v35 = sub_224F67D0C();
      v37 = v36;
      sub_224F67C64();
      if ((v38 & 1) != 0)
        goto LABEL_143;
      v0 = &v93;
      sub_224F67BEC();
      v39 = HIBYTE(v37) & 0xF;
      v40 = v35 & 0xFFFFFFFFFFFFLL;
      if ((v37 & 0x2000000000000000) != 0)
        v41 = HIBYTE(v37) & 0xF;
      else
        v41 = v35 & 0xFFFFFFFFFFFFLL;
      if (!v41)
      {
LABEL_127:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_224E5721C();
        swift_allocError();
        *(_QWORD *)v81 = v35;
        *(_QWORD *)(v81 + 8) = v37;
LABEL_130:
        *(_BYTE *)(v81 + 40) = 0;
        goto LABEL_15;
      }
      if ((v37 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        v46 = (uint64_t)sub_224E572B4(v35, v37, 10);
        v73 = v72;
        swift_bridgeObjectRelease();
        if ((v73 & 1) != 0)
          goto LABEL_127;
      }
      else
      {
        if ((v37 & 0x2000000000000000) != 0)
        {
          v91 = (id)v35;
          v92 = v37 & 0xFFFFFFFFFFFFFFLL;
          if (v35 == 43)
          {
            if (!v39)
              goto LABEL_142;
            if (v39 != 1)
            {
              if ((BYTE1(v35) - 48) > 9u)
                goto LABEL_64;
              v46 = (BYTE1(v35) - 48);
              if (v39 == 2)
                goto LABEL_66;
              if ((BYTE2(v35) - 48) > 9u)
                goto LABEL_64;
              v46 = 10 * (BYTE1(v35) - 48) + (BYTE2(v35) - 48);
              v47 = v39 - 3;
              if (v39 == 3)
                goto LABEL_66;
              v48 = (unsigned __int8 *)v88;
              while (1)
              {
                v49 = *v48 - 48;
                if (v49 > 9)
                  goto LABEL_64;
                v50 = 10 * v46;
                if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63)
                  goto LABEL_64;
                v46 = v50 + v49;
                if (__OFADD__(v50, v49))
                  goto LABEL_64;
                LOBYTE(v39) = 0;
                ++v48;
                if (!--v47)
                  goto LABEL_67;
              }
            }
          }
          else
          {
            if (v35 != 45)
            {
              if (!v39 || (v35 - 48) > 9u)
                goto LABEL_64;
              v46 = (v35 - 48);
              if (v39 == 1)
                goto LABEL_66;
              if ((BYTE1(v35) - 48) > 9u)
                goto LABEL_64;
              v46 = 10 * (v35 - 48) + (BYTE1(v35) - 48);
              v64 = v39 - 2;
              if (v39 == 2)
                goto LABEL_66;
              v65 = (unsigned __int8 *)v83;
              while (1)
              {
                v66 = *v65 - 48;
                if (v66 > 9)
                  goto LABEL_64;
                v67 = 10 * v46;
                if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63)
                  goto LABEL_64;
                v46 = v67 + v66;
                if (__OFADD__(v67, v66))
                  goto LABEL_64;
                LOBYTE(v39) = 0;
                ++v65;
                if (!--v64)
                  goto LABEL_67;
              }
            }
            if (!v39)
              goto LABEL_141;
            if (v39 != 1)
            {
              if ((BYTE1(v35) - 48) <= 9u)
              {
                if (v39 == 2)
                {
                  LOBYTE(v39) = 0;
                  v46 = -(uint64_t)(BYTE1(v35) - 48);
                  goto LABEL_67;
                }
                if ((BYTE2(v35) - 48) <= 9u)
                {
                  v46 = -10 * (BYTE1(v35) - 48) - (BYTE2(v35) - 48);
                  v68 = v39 - 3;
                  if (v39 != 3)
                  {
                    v69 = (unsigned __int8 *)v88;
                    while (1)
                    {
                      v70 = *v69 - 48;
                      if (v70 > 9)
                        goto LABEL_64;
                      v71 = 10 * v46;
                      if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63)
                        goto LABEL_64;
                      v46 = v71 - v70;
                      if (__OFSUB__(v71, v70))
                        goto LABEL_64;
                      LOBYTE(v39) = 0;
                      ++v69;
                      if (!--v68)
                        goto LABEL_67;
                    }
                  }
LABEL_66:
                  LOBYTE(v39) = 0;
LABEL_67:
                  if ((v39 & 1) != 0)
                    goto LABEL_127;
                  goto LABEL_68;
                }
              }
LABEL_64:
              v46 = 0;
              LOBYTE(v39) = 1;
              goto LABEL_67;
            }
          }
          v46 = 0;
          goto LABEL_67;
        }
        v42 = v87;
        if ((v35 & 0x1000000000000000) != 0)
          v43 = (unsigned __int8 *)((v37 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v43 = (unsigned __int8 *)sub_224F6815C();
        v44 = sub_224E5751C(v43, v40, 10);
        v87 = v42;
        if ((v45 & 1) != 0)
          goto LABEL_127;
        v46 = (uint64_t)v44;
      }
LABEL_68:
      swift_bridgeObjectRelease();
      v0 = (unint64_t *)v93;
      v12 = v94;
      if ((v94 & 0x2000000000000000) != 0)
        v6 = (char *)(HIBYTE(v94) & 0xF);
      else
        v6 = (char *)(v93 & 0xFFFFFFFFFFFFLL);
      if (!v6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_224E5721C();
        swift_allocError();
        v25 = 1;
        goto LABEL_13;
      }
      if ((v94 & 0x2000000000000000) != 0)
      {
        if ((v94 & 0xF00000000000000) == 0)
          goto LABEL_138;
      }
      else if ((v93 & 0xFFFFFFFFFFFFLL) == 0)
      {
        goto LABEL_137;
      }
      v3 = sub_224F67D0C();
      v2 = v51;
      sub_224F67C64();
      if ((v52 & 1) != 0)
        goto LABEL_144;
      v0 = &v93;
      sub_224F67BEC();
      swift_bridgeObjectRetain();
      v53 = sub_224E55418(v3, v2);
      if ((v54 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_224E5721C();
        swift_allocError();
        *(_QWORD *)v81 = v3;
        *(_QWORD *)(v81 + 8) = v2;
        goto LABEL_130;
      }
      v12 = v53;
      swift_bridgeObjectRelease();
      v55 = 10 * v46;
      if ((unsigned __int128)(v46 * (__int128)10) >> 64 != (10 * v46) >> 63)
      {
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        swift_bridgeObjectRetain();
        v13 = sub_224F681D4();
        goto LABEL_5;
      }
      v56 = __OFADD__(v55, v12);
      v57 = v55 + v12;
      if (v56)
        goto LABEL_132;
      v12 = v57 + 45;
      if (__OFADD__(v57, 45))
        goto LABEL_133;
      if (HIDWORD(v12) || v12 >> 11 == 27 || WORD1(v12) > 0x10u)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_224E5721C();
        swift_allocError();
        *(_QWORD *)v24 = v12;
        v26 = 1;
        goto LABEL_14;
      }
      if ((v12 & 0xFFFFFF80) != 0)
      {
        v74 = (v12 & 0x3F) << 8;
        if (v12 >= 0x800)
        {
          v75 = (v74 | (v12 >> 6) & 0x3F) << 8;
          if (WORD1(v12))
          {
            v76 = ((v75 | (v12 >> 12) & 0x3F) << 8) | (v12 >> 18);
            v77 = -2122219023;
          }
          else
          {
            v76 = v75 | (v12 >> 12);
            v77 = 8487393;
          }
          v58 = v76 + v77;
        }
        else
        {
          v58 = (v74 | (v12 >> 6)) + 33217;
        }
      }
      else
      {
        if (v12 > 0xFF)
          goto LABEL_134;
        v58 = (v57 + 46);
      }
      v91 = (id)((v58 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v58) >> 3)) & 7))));
      v59 = MEMORY[0x22768DCF8](&v91);
      v61 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_224E56B40(0, v4[2] + 1, 1, v4);
      v3 = v4[2];
      v62 = v4[3];
      v2 = v3 + 1;
      if (v3 >= v62 >> 1)
        v4 = sub_224E56B40((_QWORD *)(v62 > 1), v3 + 1, 1, v4);
      v4[2] = v2;
      v63 = &v4[2 * v3];
      v63[4] = v59;
      v63[5] = v61;
      v15 = v93;
      v16 = v94;
      v32 = (v94 & 0x2000000000000000) == 0;
      v33 = HIBYTE(v94) & 0xF;
      v34 = v93 & 0xFFFFFFFFFFFFLL;
      if ((v94 & 0x2000000000000000) != 0)
        v12 = HIBYTE(v94) & 0xF;
      else
        v12 = v93 & 0xFFFFFFFFFFFFLL;
      if (!v12)
        goto LABEL_123;
    }
  }
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_123:
  swift_bridgeObjectRelease();
  v91 = v4;
  sub_224E54704(0, &qword_2557E1598, MEMORY[0x24BEE0718], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_224E57398();
  sub_224F67D18();
  v78 = v84;
  sub_224F67BB0();
  v0 = (unint64_t *)sub_224F67B8C();
  v80 = v79;
  swift_bridgeObjectRelease();
  ((void (*)(char *, unint64_t))v85[1])(v78, v86);
  if (v80 >> 60 == 15)
  {
    sub_224E5721C();
    swift_allocError();
    v25 = 3;
    goto LABEL_13;
  }
  return v0;
}

uint64_t sub_224E55418(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)sub_224F6815C();
      v7 = (uint64_t)sub_224E5751C(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)sub_224E572B4(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

uint64_t sub_224E55664(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 *v19;
  unsigned int v20;
  _QWORD v21[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    v17 = 0;
    v8 = 1;
    return v17 | (v8 << 8);
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)sub_224F6815C();
      v7 = sub_224E57798(v6, v4, 10);
      v8 = (v7 >> 8) & 1;
      goto LABEL_38;
    }
    v21[0] = a1;
    v21[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v9 = a1;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          LOBYTE(v7) = BYTE1(a1) - 48;
          if ((BYTE1(a1) - 48) <= 9u)
          {
            v13 = v3 - 2;
            if (v13)
            {
              v14 = (unsigned __int8 *)v21 + 2;
              while (1)
              {
                v15 = *v14 - 48;
                if (v15 > 9)
                  goto LABEL_35;
                if (((10 * v7) & 0xF00) != 0)
                  goto LABEL_35;
                v7 = (10 * v7) + v15;
                if (((v7 >> 8) & 1) != 0)
                  goto LABEL_35;
                v8 = 0;
                ++v14;
                if (!--v13)
                  goto LABEL_38;
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          LOBYTE(v7) = a1 - 48;
          if ((a1 - 48) <= 9u)
          {
            v16 = v3 - 1;
            if (v16)
            {
              v19 = (unsigned __int8 *)v21 + 1;
              while (1)
              {
                v20 = *v19 - 48;
                if (v20 > 9)
                  goto LABEL_35;
                if (((10 * v7) & 0xF00) != 0)
                  goto LABEL_35;
                v7 = (10 * v7) + v20;
                if (((v7 >> 8) & 1) != 0)
                  goto LABEL_35;
                v8 = 0;
                ++v19;
                if (!--v16)
                  goto LABEL_38;
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
      if (v3)
      {
        if (v3 != 1 && (BYTE1(a1) - 48) <= 9u)
        {
          v9 = 0;
          v7 = -(BYTE1(a1) - 48);
          if ((v7 & 0xFFFFFF00) == 0)
          {
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v21 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_35;
                if (((10 * v7) & 0xF00) != 0)
                  goto LABEL_35;
                v7 = (10 * v7) - v12;
                if ((v7 & 0xFFFFFF00) != 0)
                  goto LABEL_35;
                v8 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_38;
              }
            }
LABEL_37:
            v8 = 0;
            goto LABEL_38;
          }
LABEL_54:
          v8 = 1;
          LOBYTE(v7) = v9;
          goto LABEL_38;
        }
LABEL_35:
        LOBYTE(v7) = 0;
        v8 = 1;
LABEL_38:
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_54;
  }
  v7 = sub_224E5743C(a1, a2, 10);
  swift_bridgeObjectRelease();
  v8 = (v7 >> 8) & 1;
LABEL_39:
  if (v8)
    v17 = 0;
  else
    v17 = v7;
  return v17 | (v8 << 8);
}

uint64_t HKSignedClinicalDataQRRepresentation.asSignedClinicalDataJWT()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[14];

  v3 = sub_224F67BBC();
  MEMORY[0x24BDAC7A8](v3);
  result = (uint64_t)HKSignedClinicalDataQRRepresentation.asSignedClinicalDataJWTData()();
  if (!v1)
  {
    v6 = result;
    v7 = v5;
    sub_224F67BB0();
    sub_224F67B98();
    if (v8)
    {
      sub_224E55B58((uint64_t)v17);
      result = sub_224DDE9B4(v6, v7);
      v9 = v17[11];
      a1[10] = v17[10];
      a1[11] = v9;
      v10 = v17[13];
      a1[12] = v17[12];
      a1[13] = v10;
      v11 = v17[7];
      a1[6] = v17[6];
      a1[7] = v11;
      v12 = v17[9];
      a1[8] = v17[8];
      a1[9] = v12;
      v13 = v17[3];
      a1[2] = v17[2];
      a1[3] = v13;
      v14 = v17[5];
      a1[4] = v17[4];
      a1[5] = v14;
      v15 = v17[1];
      *a1 = v17[0];
      a1[1] = v15;
    }
    else
    {
      sub_224E573F8();
      swift_allocError();
      *(_QWORD *)v16 = 0;
      *(_BYTE *)(v16 + 8) = 3;
      swift_willThrow();
      return sub_224DDE9B4(v6, v7);
    }
  }
  return result;
}

uint64_t sub_224E55A20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[14];

  v7 = sub_224F67BBC();
  MEMORY[0x24BDAC7A8](v7);
  sub_224F67BB0();
  sub_224F67B98();
  if (v8)
  {
    sub_224E55B58((uint64_t)v18);
    result = sub_224DDE9B4(a1, a2);
    if (!v3)
    {
      v10 = v18[11];
      a3[10] = v18[10];
      a3[11] = v10;
      v11 = v18[13];
      a3[12] = v18[12];
      a3[13] = v11;
      v12 = v18[7];
      a3[6] = v18[6];
      a3[7] = v12;
      v13 = v18[9];
      a3[8] = v18[8];
      a3[9] = v13;
      v14 = v18[3];
      a3[2] = v18[2];
      a3[3] = v14;
      v15 = v18[5];
      a3[4] = v18[4];
      a3[5] = v15;
      v16 = v18[1];
      *a3 = v18[0];
      a3[1] = v16;
    }
  }
  else
  {
    sub_224E573F8();
    swift_allocError();
    *(_QWORD *)v17 = 0;
    *(_BYTE *)(v17 + 8) = 3;
    swift_willThrow();
    return sub_224DDE9B4(a1, a2);
  }
  return result;
}

uint64_t sub_224E55B58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _OWORD v81[2];
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int128 v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  char v91;
  uint64_t v92;

  v92 = a1;
  v2 = sub_224F67910();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_224F6791C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5647C(&v75);
  if (v1)
    return swift_bridgeObjectRelease();
  v72 = v9;
  v73 = v5;
  v68 = v7;
  v64 = v3;
  v65 = v6;
  v66 = v2;
  v10 = v75;
  v71 = *((_QWORD *)&v76 + 1);
  v67 = v76;
  v11 = *((_QWORD *)&v77 + 1);
  v62 = v77;
  swift_bridgeObjectRelease();
  sub_224F67298();
  swift_allocObject();
  v74 = sub_224F6728C();
  v63 = v10;
  v86 = v10;
  v70 = *((_QWORD *)&v10 + 1);
  v84 = 45;
  v85 = 0xE100000000000000;
  v82 = 43;
  v83 = 0xE100000000000000;
  sub_224E51E94();
  *(_QWORD *)&v86 = sub_224F68030();
  *((_QWORD *)&v86 + 1) = v12;
  v84 = 95;
  v85 = 0xE100000000000000;
  v82 = 47;
  v83 = 0xE100000000000000;
  v13 = sub_224F68030();
  v15 = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v75 = v13;
  *((_QWORD *)&v75 + 1) = v15;
  swift_bridgeObjectRetain();
  v16 = sub_224F67C40();
  swift_bridgeObjectRelease();
  v17 = v16 & 3;
  if (v16 <= 0)
    v17 = -(-v16 & 3);
  if (v17 == 3 || v17 == 2)
  {
    sub_224F67C94();
    v18 = (uint64_t)v73;
    v19 = (uint64_t)v72;
  }
  else
  {
    v18 = (uint64_t)v73;
    v19 = (uint64_t)v72;
    if (v17)
    {
      swift_bridgeObjectRelease();
      sub_224E58788();
      swift_allocError();
      *v20 = 0;
      v20[1] = 0;
LABEL_11:
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  v69 = v11;
  v21 = v75;
  swift_bridgeObjectRetain();
  v22 = sub_224F67604();
  v24 = v23;
  swift_bridgeObjectRelease();
  if (v24 >> 60 == 15)
  {
    sub_224E58788();
    swift_allocError();
    *v25 = v21;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  sub_224E587CC();
  sub_224F67280();
  sub_224E58810(v22, v24);
  v27 = v71;
  *(_QWORD *)&v86 = v67;
  *((_QWORD *)&v86 + 1) = v71;
  v84 = 45;
  v85 = 0xE100000000000000;
  v82 = 43;
  v83 = 0xE100000000000000;
  *(_QWORD *)&v86 = sub_224F68030();
  *((_QWORD *)&v86 + 1) = v28;
  v84 = 95;
  v85 = 0xE100000000000000;
  v82 = 47;
  v83 = 0xE100000000000000;
  v29 = sub_224F68030();
  v31 = v30;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v75 = v29;
  *((_QWORD *)&v75 + 1) = v31;
  swift_bridgeObjectRetain();
  v32 = sub_224F67C40();
  swift_bridgeObjectRelease();
  v33 = v32 & 3;
  if (v32 <= 0)
    v33 = -(-v32 & 3);
  if (v33 == 3)
  {
    sub_224F67C94();
    v34 = v68;
  }
  else
  {
    v34 = v68;
    if (v33 == 2)
    {
      sub_224F67C94();
    }
    else if (v33)
    {
      swift_bridgeObjectRelease();
      sub_224E58788();
      swift_allocError();
      *v35 = 0;
      v35[1] = 0;
LABEL_23:
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  v36 = v75;
  swift_bridgeObjectRetain();
  v37 = sub_224F67604();
  v39 = v38;
  swift_bridgeObjectRelease();
  if (v39 >> 60 == 15)
  {
    sub_224E58788();
    swift_allocError();
    *v40 = v36;
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  if ((v91 & 1) != 0)
  {
    sub_224DDE970(v37, v39);
    v41 = v37;
    v42 = v39;
  }
  else
  {
    v43 = v65;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v19, *MEMORY[0x24BEE0000], v65);
    v44 = v64;
    v45 = v66;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v64 + 104))(v18, *MEMORY[0x24BEDFFC0], v66);
    v46 = sub_224F36CA4(v19, v18, v37, v39);
    v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v48 = v46;
    v49 = v18;
    v51 = v50;
    v47(v49, v45);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v19, v43);
    v41 = v48;
    v42 = v51;
  }
  sub_224E58824(0);
  sub_224E588C0();
  sub_224F67280();
  swift_release();
  sub_224E58810(v37, v39);
  result = sub_224DDE9B4(v41, v42);
  v52 = v87;
  v53 = v88;
  v54 = v89;
  v55 = v91;
  v56 = v80;
  v57 = v92;
  *(_OWORD *)(v92 + 144) = v79;
  *(_OWORD *)(v57 + 160) = v56;
  *(_OWORD *)(v57 + 176) = v81[0];
  *(_OWORD *)(v57 + 185) = *(_OWORD *)((char *)v81 + 9);
  v58 = v76;
  *(_OWORD *)(v57 + 80) = v75;
  *(_OWORD *)(v57 + 96) = v58;
  v59 = v78;
  *(_OWORD *)(v57 + 112) = v77;
  *(_OWORD *)(v57 + 128) = v59;
  *(_BYTE *)(v57 + 16) = v52;
  *(_QWORD *)(v57 + 24) = v53;
  *(_QWORD *)(v57 + 32) = v54;
  *(_OWORD *)(v57 + 40) = v90;
  *(_BYTE *)(v57 + 56) = v55;
  v60 = v70;
  *(_QWORD *)v57 = v63;
  *(_QWORD *)(v57 + 8) = v60;
  *(_QWORD *)(v57 + 64) = v67;
  *(_QWORD *)(v57 + 72) = v27;
  v61 = v69;
  *(_QWORD *)(v57 + 208) = v62;
  *(_QWORD *)(v57 + 216) = v61;
  return result;
}

uint64_t sub_224E5647C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _QWORD *v27;

  sub_224E51E94();
  v2 = sub_224F68060();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v27 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_224E53720(0, v3, 0);
    v4 = v27;
    v5 = (uint64_t *)(v2 + 56);
    do
    {
      v6 = *(v5 - 3);
      v7 = *(v5 - 2);
      v8 = *(v5 - 1);
      v9 = *v5;
      swift_bridgeObjectRetain();
      v10 = MEMORY[0x22768DCB0](v6, v7, v8, v9);
      v12 = v11;
      swift_bridgeObjectRelease();
      v14 = v27[2];
      v13 = v27[3];
      if (v14 >= v13 >> 1)
        sub_224E53720(v13 > 1, v14 + 1, 1);
      v27[2] = v14 + 1;
      v15 = &v27[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v5 += 4;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = v4[2];
  if (v16 == 3)
  {
    v19 = v4[4];
    v21 = v4[5];
    v20 = v4[6];
    v23 = v4[7];
    v17 = v4[8];
    v24 = v4[9];
    swift_bridgeObjectRetain();
    v22 = v23;
    v18 = v24;
    goto LABEL_12;
  }
  if (v16 == 2)
  {
    v17 = 0;
    v18 = 0;
    v19 = v4[4];
    v20 = v4[6];
    v21 = v4[5];
    v22 = v4[7];
LABEL_12:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *a1 = v19;
    a1[1] = v21;
    a1[2] = v20;
    a1[3] = v22;
    a1[4] = v17;
    a1[5] = v18;
    return result;
  }
  swift_bridgeObjectRelease();
  sub_224E573F8();
  swift_allocError();
  *(_QWORD *)v26 = v16;
  *(_BYTE *)(v26 + 8) = 1;
  return swift_willThrow();
}

_QWORD *sub_224E56678(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_224E54704(0, &qword_2557E1568, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_224E57EFC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_224E56798(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_224E5871C();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_224E580E0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_224E568A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_224E56F04(a1, a2, a3, a4, &qword_2557E15D8, (void (*)(uint64_t))type metadata accessor for ModelsDSTU2.HumanName);
}

_QWORD *sub_224E568B4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_224E54704(0, &qword_2557E15C8, (uint64_t)&type metadata for ModelsDSTU2.Patient, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4])
          memmove(v12, a4 + 4, 144 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_224E57FEC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_224E569F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_224E56F04(a1, a2, a3, a4, &qword_2557E15E8, (void (*)(uint64_t))type metadata accessor for ModelsR4.HumanName);
}

_QWORD *sub_224E56A04(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_224E54704(0, &qword_2557E15E0, (uint64_t)&type metadata for ModelsR4.Patient, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 152);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[19 * v8 + 4])
          memmove(v12, a4 + 4, 152 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_224E581FC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_224E56B40(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_224E54704(0, &qword_2557E1638, MEMORY[0x24BEE0718], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_224E582EC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_224E56C60(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_224E54704(0, &qword_2557E1608, MEMORY[0x24BEE1768], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_224E583DC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_224E56D80(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_224E54704(0, &qword_2557E1600, (uint64_t)&type metadata for JSON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_224E584C4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_224E56EB4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_224E56F04(a1, a2, a3, a4, &qword_2557E15B8, (void (*)(uint64_t))type metadata accessor for Attachment);
}

uint64_t sub_224E56EC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_224E56F04(a1, a2, a3, a4, &qword_2557E15B0, (void (*)(uint64_t))type metadata accessor for Coding);
}

uint64_t sub_224E56EDC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_224E56F04(a1, a2, a3, a4, &qword_2557E15F8, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
}

uint64_t sub_224E56EF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_224E56F04(a1, a2, a3, a4, &qword_2557E15C0, (void (*)(uint64_t))type metadata accessor for ModelsR4.DocumentReferenceContent);
}

uint64_t sub_224E56F04(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_224E585B8(0, a5, a6);
  v13 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_224F681BC();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_224E58604(0, v11, v21, a4, (uint64_t (*)(_QWORD))a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_224E57118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_224E54704(0, (unint64_t *)&qword_2557E15F0, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_224E57190(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_224F67CF4();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x22768DD94](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

unsigned __int8 *sub_224E57208(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_224E5751C(a1, a2, a3);
}

unint64_t sub_224E5721C()
{
  unint64_t result;

  result = qword_2557E1578;
  if (!qword_2557E1578)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataQRError, &type metadata for SignedClinicalDataQRError);
    atomic_store(result, (unint64_t *)&qword_2557E1578);
  }
  return result;
}

unint64_t sub_224E57260()
{
  unint64_t result;

  result = qword_2557E1580;
  if (!qword_2557E1580)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1580);
  }
  return result;
}

unsigned __int8 *sub_224E572B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_224F67D24();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_224E57A40();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_224F6815C();
  }
LABEL_7:
  v11 = sub_224E5751C(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t sub_224E57398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E15A0;
  if (!qword_2557E15A0)
  {
    sub_224E54704(255, &qword_2557E1598, MEMORY[0x24BEE0718], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2557E15A0);
  }
  return result;
}

unint64_t sub_224E573F8()
{
  unint64_t result;

  result = qword_2557E15A8;
  if (!qword_2557E15A8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWTError, &type metadata for VCJWTError);
    atomic_store(result, (unint64_t *)&qword_2557E15A8);
  }
  return result;
}

uint64_t sub_224E5743C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_224F67D24();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_224E57A40();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_224F6815C();
  }
LABEL_7:
  v11 = (unsigned __int16)sub_224E57798(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FF;
}

unsigned __int8 *sub_224E5751C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_224E57798(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_224E57A40()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_224F67D30();
  v4 = sub_224E57ABC(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_224E57ABC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_224E57C00(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_224E57118(v9, 0);
      v12 = sub_224E57CEC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x22768DCF8](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x22768DCF8);
LABEL_9:
      sub_224F6815C();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x22768DCF8]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_224E57C00(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_224E57190(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_224E57190(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_224F67CD0();
  }
  __break(1u);
  return result;
}

unint64_t sub_224E57CEC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_224E57190(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_224F67CDC();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_224F6815C();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_224E57190(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_224F67CB8();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_224E57EFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E57FEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 144 * a1 + 32;
    v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E580E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_224E54704(0, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E581FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 152 * a1 + 32;
    v6 = a3 + 152 * v4;
    if (v5 >= v6 || v5 + 152 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E582EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_224F68210();
  __break(1u);
  return result;
}

char *sub_224E583DC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_224F68210();
  __break(1u);
  return result;
}

uint64_t sub_224E584C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_224F68210();
  __break(1u);
  return result;
}

void sub_224E585B8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_224F683A8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_224E58604(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_224F68210();
  __break(1u);
  return result;
}

void sub_224E5871C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E15D0)
  {
    sub_224E54704(255, (unint64_t *)&qword_2557E0888, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v0 = sub_224F683A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E15D0);
  }
}

unint64_t sub_224E58788()
{
  unint64_t result;

  result = qword_2557E1610;
  if (!qword_2557E1610)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Base64URLError, &type metadata for Base64URLError);
    atomic_store(result, (unint64_t *)&qword_2557E1610);
  }
  return result;
}

unint64_t sub_224E587CC()
{
  unint64_t result;

  result = qword_2557E1618;
  if (!qword_2557E1618)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTHeader, &type metadata for SignedClinicalDataJWTHeader);
    atomic_store(result, (unint64_t *)&qword_2557E1618);
  }
  return result;
}

uint64_t sub_224E58810(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_224DDE9B4(a1, a2);
  return a1;
}

void sub_224E58824(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_2557E1620)
  {
    v2 = sub_224E5887C();
    v4 = type metadata accessor for SignedClinicalDataJWTPayload(a1, (uint64_t)&type metadata for SignedClinicalDataSubject, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_2557E1620);
  }
}

unint64_t sub_224E5887C()
{
  unint64_t result;

  result = qword_2557E1628;
  if (!qword_2557E1628)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataSubject, &type metadata for SignedClinicalDataSubject);
    atomic_store(result, (unint64_t *)&qword_2557E1628);
  }
  return result;
}

unint64_t sub_224E588C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E1630;
  if (!qword_2557E1630)
  {
    sub_224E58824(255);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTPayload<A>, v1);
    atomic_store(result, (unint64_t *)&qword_2557E1630);
  }
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HKSignedClinicalDataQRRepresentation.isEUDCC()()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  unint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (objc_msgSend(v0, sel_sourceType) != (id)2)
    goto LABEL_13;
  v12[0] = 0;
  v1 = objc_msgSend(v0, sel_orderedSegmentsWithError_, v12);
  v2 = v12[0];
  if (!v1)
  {
    v8 = v12[0];
    sub_224F67544();

    swift_willThrow();
    return v8 & 1;
  }
  v3 = v1;
  sub_224E59134();
  v4 = sub_224F67D6C();
  v5 = v2;

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_224F681D4();
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      swift_bridgeObjectRetain();
      v10 = sub_224F681D4();
      swift_bridgeObjectRelease();
      if (v10)
        goto LABEL_5;
    }
    goto LABEL_12;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
  {
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    LOBYTE(v8) = 0;
    return v8 & 1;
  }
LABEL_5:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x22768E1CC](0, v4);
  }
  else
  {
    if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      __break(1u);
    v6 = *(id *)(v4 + 32);
  }
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v7, sel_dataValue);
  sub_224F67B80();

  LOBYTE(v8) = sub_224F67D00();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

id HKSignedClinicalDataQRRepresentation.asSignedClinicalDataEUDCCData()()
{
  void *v0;
  id v1;
  Swift::Bool v2;
  uint64_t v3;
  id v4;
  id v5;
  unint64_t v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31[6];

  v31[5] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = HKSignedClinicalDataQRRepresentation.isEUDCC()();
  if (!v3)
  {
    if (!v2)
    {
LABEL_11:
      sub_224E5721C();
      swift_allocError();
      *(_QWORD *)v13 = 2;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
LABEL_12:
      *(_BYTE *)(v13 + 40) = 4;
LABEL_14:
      swift_willThrow();
      return v1;
    }
    v31[0] = 0;
    v4 = objc_msgSend(v0, sel_orderedSegmentsWithError_, v31);
    v5 = v31[0];
    if (!v4)
    {
      v14 = v31[0];
      sub_224F67544();

      goto LABEL_14;
    }
    v1 = v4;
    sub_224E59134();
    v6 = sub_224F67D6C();
    v7 = v5;

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      v30 = sub_224F681D4();
      swift_bridgeObjectRelease();
      if (v30)
      {
LABEL_6:
        if ((v6 & 0xC000000000000001) != 0)
        {
          v8 = (id)MEMORY[0x22768E1CC](0, v6);
        }
        else
        {
          if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_22;
          }
          v8 = *(id *)(v6 + 32);
        }
        v9 = v8;
        swift_bridgeObjectRelease();
        v1 = objc_msgSend(v9, sel_dataValue);

        v10 = sub_224F67B80();
        v12 = v11;

        if (sub_224F67C40() < 4)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
        swift_bridgeObjectRetain();
        v16 = sub_224F67C40();
        swift_bridgeObjectRelease();
        if (!__OFSUB__(v16, 4))
        {
          v17 = sub_224E592BC(v16 - 4, v10, v12);
          v19 = v18;
          v21 = v20;
          v23 = v22;
          swift_bridgeObjectRelease();
          v24 = MEMORY[0x22768DCB0](v17, v19, v21, v23);
          v26 = v25;
          swift_bridgeObjectRelease();
          v27 = sub_224EEA49C(v24, v26);
          v29 = v28;
          swift_bridgeObjectRelease();
          sub_224DDE970(v27, v29);
          v1 = (id)sub_224F364D0(1, v27, v29);
          sub_224DDE9B4(v27, v29);
          sub_224DDE9B4(v27, v29);
          return v1;
        }
LABEL_22:
        __break(1u);
      }
    }
    else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    sub_224E5721C();
    swift_allocError();
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_QWORD *)(v13 + 32) = 0;
    goto LABEL_12;
  }
  return v1;
}

void sub_224E58FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x224E59100);
}

unint64_t sub_224E59134()
{
  unint64_t result;

  result = qword_2557E1590;
  if (!qword_2557E1590)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1590);
  }
  return result;
}

uint64_t sub_224E59170(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x224E591D0);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_224E59188 + dword_224E591D4[a4 >> 62]))(v5);
}

uint64_t sub_224E591E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_224E591F4 + dword_224E5929C[a4 >> 62]))();
}

uint64_t sub_224E59208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x224E59294);
  }
  return ((uint64_t (*)(void))((char *)&loc_224E59244 + dword_224E592AC[a3]))();
}

unint64_t sub_224E592BC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    result = sub_224F67C64();
    if ((v4 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return sub_224F67D30();
  }
  __break(1u);
  return result;
}

uint64_t sub_224E59364(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_224E593B0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

id sub_224E593C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v18;

  v1 = sub_224F677A8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_224F67760();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_allocWithZone(MEMORY[0x24BDD3CD0]);
  sub_224E597F8();
  v10 = (void *)sub_224F67D60();
  v11 = objc_msgSend(v9, sel_initWithCodings_, v10);

  v12 = objc_msgSend(v0, sel_startDate);
  sub_224F6773C();

  v13 = objc_msgSend(v0, sel_UUID);
  sub_224F67790();

  v14 = (void *)sub_224F67718();
  v15 = (void *)sub_224F67784();
  v16 = objc_msgSend((id)objc_opt_self(), sel_itemWithPrimaryConceptCodingCollection_relevantDate_medicalRecordSampleID_, v11, v14, v15);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v16;
}

id sub_224E59584(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = sub_224E593C8();

  return v2;
}

id sub_224E595B4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v20;

  v1 = sub_224F677A8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_224F67760();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(v0, sel_medicalRecordCodings);
  sub_224E597F8();
  sub_224F67D6C();

  v10 = objc_allocWithZone(MEMORY[0x24BDD3CD0]);
  v11 = (void *)sub_224F67D60();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v10, sel_initWithCodings_, v11);

  v13 = objc_msgSend(v0, sel_sortDate);
  v14 = objc_msgSend(v13, sel_date);

  sub_224F6773C();
  v15 = objc_msgSend(v0, sel_UUID);
  sub_224F67790();

  v16 = (void *)sub_224F67718();
  v17 = (void *)sub_224F67784();
  v18 = objc_msgSend((id)objc_opt_self(), sel_itemWithPrimaryConceptCodingCollection_relevantDate_medicalRecordSampleID_, v12, v16, v17);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v18;
}

id sub_224E597C8(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = sub_224E595B4();

  return v2;
}

unint64_t sub_224E597F8()
{
  unint64_t result;

  result = qword_2557E1648;
  if (!qword_2557E1648)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1648);
  }
  return result;
}

uint64_t SignedClinicalDataFileContent.VCContent.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _OWORD v23[14];
  _OWORD v24[14];
  _QWORD v25[4];
  uint64_t v26;

  v3 = (uint64_t)a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68570();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v25, v25[3]);
    v5 = sub_224F683D8();
    v7 = v5;
    v8 = v6;
    v9 = 0xE000000000000000;
    *(_QWORD *)&v24[0] = 0;
    *((_QWORD *)&v24[0] + 1) = 0xE000000000000000;
    if ((v6 & 0x2000000000000000) != 0)
      v10 = HIBYTE(v6) & 0xF;
    else
      v10 = v5 & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      v26 = v3;
      swift_bridgeObjectRetain();
      v11 = 0;
      while (1)
      {
        if ((v8 & 0x1000000000000000) != 0)
        {
          v14 = sub_224F680D8();
          v16 = v15;
          if (v14 != 46)
            goto LABEL_8;
        }
        else
        {
          if ((v8 & 0x2000000000000000) != 0)
          {
            *(_QWORD *)&v23[0] = v7;
            *((_QWORD *)&v23[0] + 1) = v8 & 0xFFFFFFFFFFFFFFLL;
            v13 = *((unsigned __int8 *)v23 + v11);
            if (*((char *)v23 + v11) < 0)
              __asm { BR              X9 }
          }
          else
          {
            v12 = (v8 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v7 & 0x1000000000000000) == 0)
              v12 = sub_224F6815C();
            v13 = *(unsigned __int8 *)(v12 + v11);
            if (*(char *)(v12 + v11) < 0)
              __asm { BR              X10 }
          }
          v16 = 1;
          if (v13 != 46)
            goto LABEL_8;
        }
        sub_224F67C10();
LABEL_8:
        v11 += v16;
        if (v11 >= v10)
        {
          swift_bridgeObjectRelease();
          v9 = *((_QWORD *)&v24[0] + 1);
          v17 = *(_QWORD *)&v24[0];
          v3 = v26;
          goto LABEL_22;
        }
      }
    }
    v17 = 0;
LABEL_22:
    v18 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v18 = v17;
    v19 = 7;
    if (((v9 >> 60) & ((v17 & 0x800000000000000) == 0)) != 0)
      v19 = 11;
    v20 = sub_224E5A76C(0xFuLL, v19 | (v18 << 16), v17, v9);
    swift_bridgeObjectRelease();
    if (v20 == 2)
    {
      sub_224E55B58((uint64_t)v24);
      v23[10] = v24[10];
      v23[11] = v24[11];
      v23[12] = v24[12];
      v23[13] = v24[13];
      v23[6] = v24[6];
      v23[7] = v24[7];
      v23[8] = v24[8];
      v23[9] = v24[9];
      v23[2] = v24[2];
      v23[3] = v24[3];
      v23[4] = v24[4];
      v23[5] = v24[5];
      v23[0] = v24[0];
      v23[1] = v24[1];
      nullsub_1(v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      sub_224E5A9C0(v23, a2);
    }
    else
    {
      sub_224E5A97C();
      swift_allocError();
      *v21 = v7;
      v21[1] = v8;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1(v3);
}

uint64_t SignedClinicalDataFileContent.VCContent.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  _BYTE v4[24];
  uint64_t v5;
  _OWORD v6[14];
  __int128 v7;

  sub_224E5A9C0(v1, v6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68588();
  sub_224E5A9C0(v6, &v7);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  sub_224E5AA28();
  sub_224E5AB78();
  sub_224F68420();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t SignedClinicalDataFileContent.VCContent.getJWT()@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  _OWORD v13[14];

  v2 = v1;
  sub_224E5A9C0(v2, v12);
  sub_224E5A9C0(v12, v13);
  v4 = v13[11];
  a1[10] = v13[10];
  a1[11] = v4;
  v5 = v13[13];
  a1[12] = v13[12];
  a1[13] = v5;
  v6 = v13[7];
  a1[6] = v13[6];
  a1[7] = v6;
  v7 = v13[9];
  a1[8] = v13[8];
  a1[9] = v7;
  v8 = v13[3];
  a1[2] = v13[2];
  a1[3] = v8;
  v9 = v13[5];
  a1[4] = v13[4];
  a1[5] = v9;
  v10 = v13[1];
  *a1 = v13[0];
  a1[1] = v10;
  return sub_224E5ABC0((uint64_t)v13);
}

uint64_t sub_224E59D44@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return SignedClinicalDataFileContent.VCContent.init(from:)(a1, a2);
}

uint64_t sub_224E59D58(_QWORD *a1)
{
  _OWORD *v1;
  _BYTE v4[24];
  uint64_t v5;
  _OWORD v6[14];
  __int128 v7;

  sub_224E5A9C0(v1, v6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68588();
  sub_224E5A9C0(v6, &v7);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  sub_224E5AA28();
  sub_224E5AB78();
  sub_224F68420();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t SignedClinicalDataFileContent.verifiableCredential.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_224E59E5C()
{
  return 0xD000000000000014;
}

uint64_t sub_224E59E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E5BA04(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_224E59EA0()
{
  sub_224E5ACC8();
  return sub_224F685B8();
}

uint64_t sub_224E59EC8()
{
  sub_224E5ACC8();
  return sub_224F685C4();
}

uint64_t SignedClinicalDataFileContent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[4];

  sub_224DFB77C(0, &qword_2557E1678, (uint64_t (*)(void))sub_224E5ACC8, (uint64_t)&type metadata for SignedClinicalDataFileContent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - v6;
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E5ACC8();
  sub_224F68594();
  v10[3] = v8;
  sub_224E54704(0, &qword_2557E1688, (uint64_t)&type metadata for SignedClinicalDataFileContent.VCContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_224E5AD50(&qword_2557E1690, (uint64_t (*)(void))sub_224E5AD0C, MEMORY[0x24BEE12A0]);
  sub_224F68378();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignedClinicalDataFileContent.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v12 = a2;
  sub_224DFB77C(0, &qword_2557E16A0, (uint64_t (*)(void))sub_224E5ACC8, (uint64_t)&type metadata for SignedClinicalDataFileContent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E5ACC8();
  sub_224F6857C();
  if (!v2)
  {
    v9 = v12;
    sub_224E54704(0, &qword_2557E1688, (uint64_t)&type metadata for SignedClinicalDataFileContent.VCContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_224E5AD50(&qword_2557E16A8, (uint64_t (*)(void))sub_224E5ADCC, MEMORY[0x24BEE12D0]);
    sub_224F682DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v9 = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_224E5A1CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SignedClinicalDataFileContent.init(from:)(a1, a2);
}

uint64_t sub_224E5A1E0(_QWORD *a1)
{
  return SignedClinicalDataFileContent.encode(to:)(a1);
}

_OWORD *SignedClinicalDataFileContent.VCContent.asProcessingContext(sourceURL:metadata:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  _OWORD v16[14];
  _OWORD v17[14];
  _OWORD v18[5];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5A9C0(v2, v17);
  sub_224E5A9C0(v17, v18);
  v16[10] = v24;
  v16[11] = v25;
  v16[12] = v26;
  v16[13] = v27;
  v16[6] = v20;
  v16[7] = v21;
  v16[8] = v22;
  v16[9] = v23;
  v16[2] = v18[2];
  v16[3] = v18[3];
  v16[4] = v18[4];
  v16[5] = v19;
  v16[0] = v18[0];
  v16[1] = v18[1];
  sub_224E5ABC0((uint64_t)v18);
  v9 = v16;
  v10 = sub_224E5A3D0();
  if (!v3)
  {
    v12 = v10;
    v13 = v11;
    v14 = v19;
    sub_224E5AF70(a1, (uint64_t)v8);
    objc_allocWithZone(MEMORY[0x24BE48998]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_224E5A598(v12, v13, 1, (uint64_t)v8, v14, *((uint64_t *)&v14 + 1), 0, 0, 0, 0xF000000000000000, 0, a2);
  }
  sub_224E5AE64((uint64_t)v17);
  return v9;
}

uint64_t sub_224E5A3D0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[16];
  _QWORD v17[2];

  v1 = v0;
  v2 = sub_224F67BBC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[1];
  v14 = *v0;
  v15 = v6;
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  v7 = v14;
  v8 = v15;
  sub_224E5BA88((uint64_t)(v1 + 26), (uint64_t)v16);
  sub_224E5BA88((uint64_t)v16, (uint64_t)v17);
  if (v17[1])
  {
    v14 = v7;
    v15 = v8;
    swift_bridgeObjectRetain();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_224F67C94();
    swift_bridgeObjectRelease();
  }
  sub_224F67BB0();
  v9 = sub_224F67B8C();
  v11 = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v11 >> 60 == 15)
  {
    sub_224E573F8();
    swift_allocError();
    *(_QWORD *)v12 = 1;
    *(_BYTE *)(v12 + 8) = 3;
    swift_willThrow();
  }
  return v9;
}

id sub_224E5A598(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v29;

  v16 = (void *)sub_224F67640();
  v17 = sub_224F675D4();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(a4, 1, v17) != 1)
  {
    v19 = (void *)sub_224F67580();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a4, v17);
  }
  if (a6)
  {
    v20 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v21 = a10;
    if (a8)
    {
LABEL_5:
      v22 = (void *)sub_224F67B5C();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
  }
  else
  {
    v20 = 0;
    v21 = a10;
    if (a8)
      goto LABEL_5;
  }
  v22 = 0;
LABEL_8:
  if (v21 >> 60 != 15)
  {
    v23 = (void *)sub_224F67640();
    sub_224E58810(a9, v21);
    v24 = a11;
    if (a12)
      goto LABEL_10;
LABEL_12:
    v25 = 0;
    goto LABEL_13;
  }
  v23 = 0;
  v24 = a11;
  if (!a12)
    goto LABEL_12;
LABEL_10:
  sub_224E54308();
  v25 = (void *)sub_224F67AE4();
  swift_bridgeObjectRelease();
LABEL_13:
  v26 = objc_msgSend(v29, sel_initWithRawData_sourceType_sourceURL_issuerIdentifier_signingKeyID_JWKSData_JWKSOutcome_metadata_, v16, a3, v19, v20, v22, v23, v24, v25);
  sub_224DDE9B4(a1, a2);

  return v26;
}

unint64_t sub_224E5A76C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v7 = sub_224E5B8FC(a1, a3, a4);
  result = sub_224E5B8FC(a2, a3, a4);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_224F67BF8();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_224F6815C();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_224F67C04();
        v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_224F6815C();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t sub_224E5A97C()
{
  unint64_t result;

  result = qword_2557E1650;
  if (!qword_2557E1650)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataFileError, &type metadata for SignedClinicalDataFileError);
    atomic_store(result, (unint64_t *)&qword_2557E1650);
  }
  return result;
}

_OWORD *sub_224E5A9C0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[5];
  a2[4] = a1[4];
  a2[5] = v5;
  a2[2] = v3;
  a2[3] = v4;
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[9];
  a2[8] = a1[8];
  a2[9] = v8;
  a2[6] = v6;
  a2[7] = v7;
  v9 = a1[10];
  v10 = a1[11];
  v11 = a1[13];
  a2[12] = a1[12];
  a2[13] = v11;
  a2[10] = v9;
  a2[11] = v10;
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_224E5AA28()
{
  uint64_t result;

  result = qword_2557E1658;
  if (!qword_2557E1658)
  {
    sub_224DFB77C(255, (unint64_t *)&qword_2557E1620, (uint64_t (*)(void))sub_224E5887C, (uint64_t)&type metadata for SignedClinicalDataSubject, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SignedClinicalDataJWTPayload);
    sub_224E5AACC();
    sub_224E5AB10();
    type metadata accessor for VCJWT();
  }
  return result;
}

unint64_t sub_224E5AACC()
{
  unint64_t result;

  result = qword_2557E1660;
  if (!qword_2557E1660)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTHeader, &type metadata for SignedClinicalDataJWTHeader);
    atomic_store(result, (unint64_t *)&qword_2557E1660);
  }
  return result;
}

unint64_t sub_224E5AB10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E1668;
  if (!qword_2557E1668)
  {
    sub_224DFB77C(255, (unint64_t *)&qword_2557E1620, (uint64_t (*)(void))sub_224E5887C, (uint64_t)&type metadata for SignedClinicalDataSubject, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SignedClinicalDataJWTPayload);
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataJWTPayload<A>, v1);
    atomic_store(result, (unint64_t *)&qword_2557E1668);
  }
  return result;
}

unint64_t sub_224E5AB78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E1670;
  if (!qword_2557E1670)
  {
    v1 = sub_224E5AA28();
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for VCJWT<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2557E1670);
  }
  return result;
}

uint64_t sub_224E5ABC0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_224E5AC94();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_224E5AC94()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_224E5ACC8()
{
  unint64_t result;

  result = qword_2557E1680;
  if (!qword_2557E1680)
  {
    result = MEMORY[0x22768ED24](&unk_224F6DB24, &type metadata for SignedClinicalDataFileContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1680);
  }
  return result;
}

unint64_t sub_224E5AD0C()
{
  unint64_t result;

  result = qword_2557E1698;
  if (!qword_2557E1698)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataFileContent.VCContent, &type metadata for SignedClinicalDataFileContent.VCContent);
    atomic_store(result, (unint64_t *)&qword_2557E1698);
  }
  return result;
}

uint64_t sub_224E5AD50(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_224E54704(255, &qword_2557E1688, (uint64_t)&type metadata for SignedClinicalDataFileContent.VCContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x22768ED24](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_224E5ADCC()
{
  unint64_t result;

  result = qword_2557E16B0;
  if (!qword_2557E16B0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataFileContent.VCContent, &type metadata for SignedClinicalDataFileContent.VCContent);
    atomic_store(result, (unint64_t *)&qword_2557E16B0);
  }
  return result;
}

void sub_224E5AE10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E02A8)
  {
    sub_224F675D4();
    v0 = sub_224F67FF4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E02A8);
  }
}

uint64_t sub_224E5AE64(uint64_t a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224E5AF3C();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_224E5AF3C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E5AF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E5AE10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFileContent()
{
  return &type metadata for SignedClinicalDataFileContent;
}

uint64_t destroy for SignedClinicalDataFileContent.VCContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_224E5AF3C();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SignedClinicalDataFileContent.VCContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v9 = *(void **)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  v11 = *(_QWORD *)(a2 + 168);
  v12 = *(_QWORD *)(a2 + 176);
  v17 = *(_QWORD *)(a2 + 192);
  v18 = *(_QWORD *)(a2 + 184);
  v16 = *(_BYTE *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = v9;
  sub_224E5AC94();
  *(_QWORD *)(a1 + 160) = v10;
  *(_QWORD *)(a1 + 168) = v11;
  *(_QWORD *)(a1 + 176) = v12;
  *(_QWORD *)(a1 + 184) = v18;
  *(_QWORD *)(a1 + 192) = v17;
  *(_BYTE *)(a1 + 200) = v16;
  v14 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v14;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataFileContent.VCContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v4;
  v5 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v5;
  v6 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a2 + 152);
  v8 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v7;
  v9 = v7;

  v10 = *(_QWORD *)(a2 + 160);
  v11 = *(_QWORD *)(a2 + 168);
  v12 = *(_QWORD *)(a2 + 176);
  v13 = *(_QWORD *)(a2 + 184);
  v14 = *(_QWORD *)(a2 + 192);
  v15 = *(_BYTE *)(a2 + 200);
  sub_224E5AC94();
  *(_QWORD *)(a1 + 160) = v10;
  *(_QWORD *)(a1 + 168) = v11;
  *(_QWORD *)(a1 + 176) = v12;
  *(_QWORD *)(a1 + 184) = v13;
  *(_QWORD *)(a1 + 192) = v14;
  *(_BYTE *)(a1 + 200) = v15;
  sub_224E5AF3C();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for SignedClinicalDataFileContent.VCContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  swift_bridgeObjectRelease();
  v9 = *(void **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);

  v10 = *(_QWORD *)(a2 + 192);
  v11 = *(_BYTE *)(a2 + 200);
  v12 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v12;
  *(_QWORD *)(a1 + 192) = v10;
  *(_BYTE *)(a1 + 200) = v11;
  sub_224E5AF3C();
  v13 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataFileContent.VCContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 224))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataFileContent.VCContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 224) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFileContent.VCContent()
{
  return &type metadata for SignedClinicalDataFileContent.VCContent;
}

_QWORD *initializeBufferWithCopyOfBuffer for SignedClinicalDataFileError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SignedClinicalDataFileError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SignedClinicalDataFileError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for SignedClinicalDataFileError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataFileError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataFileError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFileError()
{
  return &type metadata for SignedClinicalDataFileError;
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataFileContent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_224E5B6C8 + 4 * byte_224F6D918[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_224E5B6E8 + 4 * byte_224F6D91D[v4]))();
}

_BYTE *sub_224E5B6C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_224E5B6E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224E5B6F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224E5B6F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_224E5B700(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_224E5B708(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataFileContent.CodingKeys()
{
  return &type metadata for SignedClinicalDataFileContent.CodingKeys;
}

unint64_t sub_224E5B728()
{
  unint64_t result;

  result = qword_2557E16B8;
  if (!qword_2557E16B8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6DAFC, &type metadata for SignedClinicalDataFileContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E16B8);
  }
  return result;
}

unint64_t sub_224E5B770()
{
  unint64_t result;

  result = qword_2557E16C0;
  if (!qword_2557E16C0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6DA6C, &type metadata for SignedClinicalDataFileContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E16C0);
  }
  return result;
}

unint64_t sub_224E5B7B8()
{
  unint64_t result;

  result = qword_2557E16C8;
  if (!qword_2557E16C8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6DA94, &type metadata for SignedClinicalDataFileContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E16C8);
  }
  return result;
}

unint64_t sub_224E5B7FC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v10 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            v7 = *(_BYTE *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        v12 = result >> 16;
        v6 = sub_224F6815C();
        v5 = v12;
        if (v12 != v9)
          goto LABEL_9;
      }
      return v5 << 16;
    }
    v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v8 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v8)
      return sub_224F680CC();
  }
  return result;
}

unint64_t sub_224E5B8FC(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_224E5B998(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_224E5B7FC(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_224E5B998(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_224E57190(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

uint64_t sub_224E5BA04(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000014 && a2 == 0x8000000224F81850)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_224F683CC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_224E5BA88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E54704(0, (unint64_t *)&qword_2557E16D0, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t *sub_224E5BAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a2 == 2)
    return (unint64_t *)HKSignedClinicalDataQRRepresentation.asSignedClinicalDataEUDCCData()();
  if (a2 == 1)
    return HKSignedClinicalDataQRRepresentation.asSignedClinicalDataJWTData()();
  if (qword_2557E0128 != -1)
    swift_once();
  v3 = sub_224F679B8();
  __swift_project_value_buffer(v3, (uint64_t)qword_2557FC958);
  v4 = sub_224F679AC();
  v5 = sub_224F67ED4();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v10 = v7;
    *(_DWORD *)v6 = 136446466;
    type metadata accessor for HKSignedClinicalDataSourceType(0);
    sub_224E5C048();
    v8 = sub_224F67BC8();
    sub_224E76904(v8, v9, &v10);
    sub_224F68000();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2050;
    sub_224F68000();
    _os_log_impl(&dword_224DAC000, v4, v5, "%{public}s unable to create processable data from QR representation, source type %{public}ld is not supported", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v7, -1, -1);
    MEMORY[0x22768EDE4](v6, -1, -1);
  }

  type metadata accessor for HDHRExtractionError(0);
  sub_224E6AE24(MEMORY[0x24BEE4AF8]);
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  sub_224F6752C();
  return (unint64_t *)swift_willThrow();
}

uint64_t sub_224E5BD28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  _OWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (a3 == 2)
  {
    a4[3] = (uint64_t)&type metadata for SignedClinicalDataEUDCC;
    a4[4] = (uint64_t)&protocol witness table for SignedClinicalDataEUDCC;
    a4[5] = (uint64_t)&off_24ED06B50;
    v11 = swift_allocObject();
    v12 = v11 + 16;
    *a4 = v11;
    sub_224DDE970(a1, a2);
    result = SignedClinicalDataEUDCC.init(from:)(a1, a2, v12);
    if (!v4)
      return result;
    return __swift_deallocate_boxed_opaque_existential_2((uint64_t)a4);
  }
  if (a3 == 1)
  {
    a4[3] = sub_224E5AA28();
    a4[4] = (uint64_t)&protocol witness table for VCJWT<A, B>;
    a4[5] = (uint64_t)&off_24ED025C8;
    v8 = swift_allocObject();
    v9 = (_OWORD *)(v8 + 16);
    *a4 = v8;
    sub_224DDE970(a1, a2);
    result = sub_224E55A20(a1, a2, v9);
    if (!v4)
      return result;
    return __swift_deallocate_boxed_opaque_existential_2((uint64_t)a4);
  }
  if (qword_2557E0128 != -1)
    swift_once();
  v13 = sub_224F679B8();
  __swift_project_value_buffer(v13, (uint64_t)qword_2557FC958);
  v14 = sub_224F679AC();
  v15 = sub_224F67ED4();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v20 = v17;
    *(_DWORD *)v16 = 136446466;
    type metadata accessor for HKSignedClinicalDataSourceType(0);
    sub_224E5C048();
    v18 = sub_224F67BC8();
    sub_224E76904(v18, v19, &v20);
    sub_224F68000();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2050;
    sub_224F68000();
    _os_log_impl(&dword_224DAC000, v14, v15, "%{public}s unable to create processable from raw data, source type %{public}ld is not supported", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22768EDE4](v17, -1, -1);
    MEMORY[0x22768EDE4](v16, -1, -1);
  }

  type metadata accessor for HDHRExtractionError(0);
  sub_224E6AE24(MEMORY[0x24BEE4AF8]);
  sub_224DDACD4((unint64_t *)&qword_2557E0290, (uint64_t (*)(uint64_t))type metadata accessor for HDHRExtractionError, (uint64_t)&unk_224F6A888);
  sub_224F6752C();
  return swift_willThrow();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_224E5C048()
{
  unint64_t result;

  result = qword_2557E16D8;
  if (!qword_2557E16D8)
  {
    type metadata accessor for HKSignedClinicalDataSourceType(255);
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E16D8);
  }
  return result;
}

uint64_t sub_224E5C080()
{
  uint64_t v0;

  sub_224DDE9B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_224DDE9B4(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_224DDE9B4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_224DDE9B4(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  return swift_deallocObject();
}

uint64_t __swift_deallocate_boxed_opaque_existential_2(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x22768EDE4);
  return result;
}

uint64_t sub_224E5C138()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_224E5AF3C();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_224E5C1A8()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224E5C22C(char *a1, char *a2)
{
  return sub_224F16BD0(*a1, *a2);
}

uint64_t sub_224E5C238()
{
  return sub_224E5C1A8();
}

uint64_t sub_224E5C240()
{
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E5C2A0()
{
  return sub_224F18C48();
}

uint64_t sub_224E5C2A8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_224F68240();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_224E5C304(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000011;
  else
    v2 = 0xD000000000000010;
  v3 = 0x8000000224F7A0D0;
  if (*v1)
    v3 = 0x8000000224F7A0F0;
  *a1 = v2;
  a1[1] = v3;
}

void sub_224E5C348(_QWORD *a1@<X8>)
{
  *a1 = &unk_24ECF6018;
}

id HealthRecordsExtractionRouter.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HealthRecordsExtractionRouter.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthRecordsExtractionRouter();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HealthRecordsExtractionRouter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthRecordsExtractionRouter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_224E5C488(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_224E5C528(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_224E5C60C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t result;

  v7 = sub_224F67B80();
  v9 = v8;
  if (v7 == sub_224F67B80() && v9 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_224F683CC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v12 & 1) == 0)
      return result;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000224F7A0D0 || (sub_224F683CC() & 1) != 0)
    return (uint64_t)objc_msgSend(a4, sel_isClinicalNoteRecord);
  if (a1 == 0xD000000000000011 && a2 == 0x8000000224F7A0F0)
    return 1;
  return sub_224F683CC();
}

uint64_t sub_224E5C768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  int v11;
  int v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v0 = sub_224F67B80();
  v2 = v1;
  if (v0 == sub_224F67B80() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v5 = sub_224F683CC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
      return MEMORY[0x24BEE4B08];
  }
  v24 = MEMORY[0x24BEE4B08];
  sub_224F1A190(&v23, 0);
  sub_224F1A190(&v23, 1);
  v7 = v24;
  v8 = *(_QWORD *)(v24 + 16);
  if (v8)
  {
    v23 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_224E53720(0, v8, 0);
    v9 = v23;
    result = sub_224E5C488(v7);
    v10 = result;
    v12 = v11;
    v14 = v13 & 1;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(v7 + 32))
    {
      if (((*(_QWORD *)(v7 + 56 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_27;
      if (*(_DWORD *)(v7 + 36) != v12)
        goto LABEL_28;
      if (*(_BYTE *)(*(_QWORD *)(v7 + 48) + v10))
        v15 = 0xD000000000000011;
      else
        v15 = 0xD000000000000010;
      if (*(_BYTE *)(*(_QWORD *)(v7 + 48) + v10))
        v16 = 0x8000000224F7A0F0;
      else
        v16 = 0x8000000224F7A0D0;
      v23 = v9;
      v18 = *(_QWORD *)(v9 + 16);
      v17 = *(_QWORD *)(v9 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_224E53720(v17 > 1, v18 + 1, 1);
        v9 = v23;
      }
      *(_QWORD *)(v9 + 16) = v18 + 1;
      v19 = v9 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v15;
      *(_QWORD *)(v19 + 40) = v16;
      result = sub_224E5C528(v10, v12, v14 & 1, v7);
      v10 = result;
      v12 = v20;
      v14 = v21 & 1;
      if (!--v8)
      {
        sub_224E5CA2C(result, v20, v21 & 1);
        swift_bridgeObjectRelease_n();
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
LABEL_25:
    v22 = sub_224F1D490(v9);
    swift_bridgeObjectRelease();
    return v22;
  }
  return result;
}

uint64_t type metadata accessor for HealthRecordsExtractionRouter()
{
  return objc_opt_self();
}

uint64_t method lookup function for HealthRecordsExtractionRouter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HealthRecordsExtractionRouter.supportedResourceTypes(release:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t sub_224E5CA2C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t storeEnumTagSinglePayload for FHIRResourceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224E5CA84 + 4 * byte_224F6DB85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224E5CAB8 + 4 * byte_224F6DB80[v4]))();
}

uint64_t sub_224E5CAB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E5CAC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E5CAC8);
  return result;
}

uint64_t sub_224E5CAD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E5CADCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224E5CAE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E5CAE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FHIRResourceType()
{
  return &type metadata for FHIRResourceType;
}

unint64_t sub_224E5CB08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E1708;
  if (!qword_2557E1708)
  {
    sub_224E5CB50();
    result = MEMORY[0x22768ED24](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2557E1708);
  }
  return result;
}

void sub_224E5CB50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1710)
  {
    v0 = sub_224F67DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1710);
  }
}

unint64_t sub_224E5CBA8()
{
  unint64_t result;

  result = qword_2557E1718[0];
  if (!qword_2557E1718[0])
  {
    result = MEMORY[0x22768ED24](&unk_224F6DC44, &type metadata for FHIRResourceType);
    atomic_store(result, qword_2557E1718);
  }
  return result;
}

uint64_t VCJWT.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = sub_224F67BBC();
  MEMORY[0x24BDAC7A8](v14);
  sub_224F67BB0();
  v15 = sub_224F67B98();
  if (v16)
  {
    VCJWT.init(from:)(v15, a3, a4, a5, a6, a7);
  }
  else
  {
    sub_224E573F8();
    swift_allocError();
    *(_QWORD *)v17 = 0;
    *(_BYTE *)(v17 + 8) = 3;
    swift_willThrow();
  }
  return sub_224DDE9B4(a1, a2);
}

uint64_t VCJWT.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v91 = a5;
  v92 = a3;
  v95 = a4;
  v88 = a6;
  v86 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v87 = (char *)v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v93 = (char *)v74 - v9;
  v10 = sub_224F67910();
  v89 = *(_QWORD *)(v10 - 8);
  v90 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_224F6791C();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = a2;
  v18 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)v74 - v22;
  v24 = v108;
  static VCJWT.split(jwt:)(&v102);
  if (v24)
    return swift_bridgeObjectRelease();
  v76 = v17;
  v80 = v14;
  v77 = v12;
  v75 = v21;
  v81 = 0;
  v25 = v95;
  v82 = v23;
  v78 = v18;
  v27 = v102;
  v26 = v103;
  v79 = v104;
  v85 = v105;
  v28 = v107;
  v74[1] = v106;
  swift_bridgeObjectRelease();
  sub_224F67298();
  swift_allocObject();
  v108 = sub_224F6728C();
  v100 = v27;
  v101 = v26;
  v84 = v26;
  v98 = 45;
  v99 = 0xE100000000000000;
  v96 = 43;
  v97 = 0xE100000000000000;
  sub_224E51E94();
  v100 = sub_224F68030();
  v101 = v29;
  v98 = 95;
  v99 = 0xE100000000000000;
  v96 = 47;
  v97 = 0xE100000000000000;
  v30 = sub_224F68030();
  v32 = v31;
  swift_bridgeObjectRelease();
  v102 = v30;
  v103 = v32;
  swift_bridgeObjectRetain();
  v33 = sub_224F67C40();
  swift_bridgeObjectRelease();
  v34 = v33 & 3;
  if (v33 <= 0)
    v34 = -(-v33 & 3);
  if (v34 == 3 || v34 == 2)
  {
    sub_224F67C94();
  }
  else if (v34)
  {
    swift_bridgeObjectRelease();
    sub_224E58788();
    swift_allocError();
    *v35 = 0;
    v35[1] = 0;
LABEL_11:
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v83 = v28;
  v37 = v102;
  v36 = v103;
  swift_bridgeObjectRetain();
  v38 = sub_224F67604();
  v40 = v39;
  swift_bridgeObjectRelease();
  if (v40 >> 60 == 15)
  {
    sub_224E58788();
    swift_allocError();
    *v41 = v37;
    v41[1] = v36;
    goto LABEL_11;
  }
  v74[0] = v27;
  swift_bridgeObjectRelease();
  v43 = v81;
  sub_224F67280();
  if (!v43)
  {
    sub_224E58810(v38, v40);
    v100 = v79;
    v101 = v85;
    v98 = 45;
    v99 = 0xE100000000000000;
    v96 = 43;
    v97 = 0xE100000000000000;
    v100 = sub_224F68030();
    v101 = v44;
    v98 = 95;
    v99 = 0xE100000000000000;
    v96 = 47;
    v97 = 0xE100000000000000;
    v45 = sub_224F68030();
    v47 = v46;
    swift_bridgeObjectRelease();
    v102 = v45;
    v103 = v47;
    swift_bridgeObjectRetain();
    v48 = sub_224F67C40();
    swift_bridgeObjectRelease();
    v49 = v48 & 3;
    if (v48 <= 0)
      v49 = -(-v48 & 3);
    if (v49 == 3)
    {
      sub_224F67C94();
      v50 = v13;
      v51 = v80;
    }
    else
    {
      v50 = v13;
      v51 = v80;
      if (v49 == 2)
      {
        sub_224F67C94();
      }
      else if (v49)
      {
        swift_bridgeObjectRelease();
        sub_224E58788();
        swift_allocError();
        *v52 = 0;
        v52[1] = 0;
LABEL_25:
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v78 + 8))(v82, v94);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    v54 = v102;
    v53 = v103;
    swift_bridgeObjectRetain();
    v55 = sub_224F67604();
    v57 = v56;
    swift_bridgeObjectRelease();
    if (v57 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 48))(&v102, v94, v25);
      if ((v102 & 1) != 0)
      {
        sub_224DDE970(v55, v57);
        v59 = v55;
        v60 = v57;
      }
      else
      {
        v61 = (uint64_t)v76;
        (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v76, *MEMORY[0x24BEE0000], v50);
        v62 = *MEMORY[0x24BEDFFC0];
        v63 = v89;
        v64 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 104);
        v65 = (uint64_t)v77;
        v81 = v50;
        v66 = v90;
        v64(v77, v62, v90);
        v67 = sub_224F36CA4(v61, v65, v55, v57);
        v68 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
        v69 = v67;
        v70 = v65;
        v72 = v71;
        v68(v70, v66);
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v61, v81);
        v59 = v69;
        v60 = v72;
      }
      v73 = v92;
      sub_224F67280();
      swift_release();
      sub_224E58810(v55, v57);
      sub_224DDE9B4(v59, v60);
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v75, v82, v94);
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v87, v93, v73);
      VCJWT.init(header:payload:headerString:payloadString:signatureString:)();
    }
    sub_224E58788();
    swift_allocError();
    *v58 = v54;
    v58[1] = v53;
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_224E58810(v38, v40);
}

void sub_224E5D6CC()
{
  JUMPOUT(0x224E5D19CLL);
}

uint64_t VCJWT.dataValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_224F67BBC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  VCJWT.stringValue()();
  sub_224F67BB0();
  v4 = sub_224F67B8C();
  v6 = v5;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    sub_224E573F8();
    swift_allocError();
    *(_QWORD *)v7 = 1;
    *(_BYTE *)(v7 + 8) = 3;
    swift_willThrow();
  }
  return v4;
}

uint64_t VCJWT.headerString.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VCJWT.header.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t VCJWT.payloadString.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 56));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VCJWT.payload.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t VCJWT.signatureString.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 64));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VCJWT.init(header:payload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v59 = a6;
  v61 = a2;
  v55 = a7;
  v68 = a4;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v54 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_224F6734C();
  v56 = *(_QWORD *)(v17 - 8);
  v57 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v58 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_224F672BC();
  MEMORY[0x24BDAC7A8](v19);
  sub_224F672EC();
  swift_allocObject();
  sub_224F672E0();
  sub_224F672A4();
  sub_224F672C8();
  v20 = v60;
  v21 = sub_224F672D4();
  if (!v20)
  {
    v47 = v16;
    v48 = a5;
    v51 = v14;
    v52 = v10;
    v53 = a1;
    v60 = a3;
    v49 = v22;
    v50 = v21;
    v66 = sub_224F6764C();
    v67 = v23;
    v24 = v58;
    sub_224F672F8();
    sub_224E51E94();
    v25 = sub_224F68024();
    v27 = v26;
    v28 = v57;
    v56 = *(_QWORD *)(v56 + 8);
    ((void (*)(char *, uint64_t))v56)(v24, v57);
    swift_bridgeObjectRelease();
    v66 = v25;
    v67 = v27;
    v64 = 43;
    v65 = 0xE100000000000000;
    v62 = 45;
    v63 = 0xE100000000000000;
    v29 = sub_224F68030();
    v31 = v30;
    swift_bridgeObjectRelease();
    v66 = v29;
    v67 = v31;
    v64 = 47;
    v65 = 0xE100000000000000;
    v62 = 95;
    v63 = 0xE100000000000000;
    v32 = sub_224F68030();
    v34 = v33;
    swift_bridgeObjectRelease();
    sub_224DDE9B4(v50, v49);
    v46 = sub_224F672D4();
    v45 = v36;
    v66 = sub_224F6764C();
    v67 = v37;
    v50 = v34;
    v38 = v58;
    sub_224F672F8();
    v39 = sub_224F68024();
    v49 = v32;
    v41 = v40;
    ((void (*)(char *, uint64_t))v56)(v38, v28);
    swift_bridgeObjectRelease();
    v66 = v39;
    v67 = v41;
    v64 = 43;
    v65 = 0xE100000000000000;
    v62 = 45;
    v63 = 0xE100000000000000;
    v42 = sub_224F68030();
    v44 = v43;
    swift_bridgeObjectRelease();
    v66 = v42;
    v67 = v44;
    v64 = 47;
    v65 = 0xE100000000000000;
    v62 = 95;
    v63 = 0xE100000000000000;
    sub_224F68030();
    swift_release();
    swift_bridgeObjectRelease();
    sub_224DDE9B4(v46, v45);
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v47, v53, v60);
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v54, v61, v68);
    VCJWT.init(header:payload:headerString:payloadString:signatureString:)();
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v61, v68);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
}

void sub_224E5DDC4()
{
  JUMPOUT(0x224E5DBC8);
}

void VCJWT.init(header:payload:headerString:payloadString:signatureString:)()
{
  type metadata accessor for VCJWT();
}

uint64_t sub_224E5DE28(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(&v8[a1[13]], v7, v1);
  *(_QWORD *)v8 = v5;
  *((_QWORD *)v8 + 1) = v4;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(&v8[a1[15]], v6, v9);
  v12 = &v8[a1[14]];
  *(_QWORD *)v12 = v3;
  *((_QWORD *)v12 + 1) = v2;
  v13 = &v8[a1[16]];
  *(_QWORD *)v13 = v14;
  *((_QWORD *)v13 + 1) = v15;
  return result;
}

uint64_t static VCJWT.split(jwt:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _QWORD *v27;

  sub_224E51E94();
  v2 = sub_224F68060();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v27 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_224E53720(0, v3, 0);
    v4 = v27;
    v5 = (uint64_t *)(v2 + 56);
    do
    {
      v6 = *(v5 - 3);
      v7 = *(v5 - 2);
      v8 = *(v5 - 1);
      v9 = *v5;
      swift_bridgeObjectRetain();
      v10 = MEMORY[0x22768DCB0](v6, v7, v8, v9);
      v12 = v11;
      swift_bridgeObjectRelease();
      v14 = v27[2];
      v13 = v27[3];
      if (v14 >= v13 >> 1)
        sub_224E53720(v13 > 1, v14 + 1, 1);
      v27[2] = v14 + 1;
      v15 = &v27[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v5 += 4;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = v4[2];
  if (v16 == 2)
  {
    v22 = 0;
    v24 = 0;
    v18 = v4[4];
    v20 = v4[6];
    v17 = v4[5];
    v23 = v4[7];
    goto LABEL_12;
  }
  if (v16 == 3)
  {
    v18 = v4[4];
    v17 = v4[5];
    v20 = v4[6];
    v19 = v4[7];
    v22 = v4[8];
    v21 = v4[9];
    swift_bridgeObjectRetain();
    v23 = v19;
    v24 = v21;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRelease();
    *a1 = v18;
    a1[1] = v17;
    a1[2] = v20;
    a1[3] = v23;
    a1[4] = v22;
    a1[5] = v24;
    return result;
  }
  swift_bridgeObjectRelease();
  sub_224E573F8();
  swift_allocError();
  *(_QWORD *)v26 = v16;
  *(_BYTE *)(v26 + 8) = 1;
  return swift_willThrow();
}

Swift::String __swiftcall VCJWT.stringValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t countAndFlagsBits;
  Swift::String v4;
  void *object;
  void *v6;
  Swift::String result;

  v2 = v0;
  v4 = VCJWT.headerAndPayload()();
  countAndFlagsBits = v4._countAndFlagsBits;
  object = v4._object;
  if (*(_QWORD *)(v1 + *(int *)(v2 + 64) + 8))
  {
    swift_bridgeObjectRetain();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    countAndFlagsBits = v4._countAndFlagsBits;
    object = v4._object;
  }
  v6 = object;
  result._object = v6;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

Swift::String __swiftcall VCJWT.headerAndPayload()()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String result;
  uint64_t v4;
  void *v5;

  v4 = *v0;
  v5 = (void *)v0[1];
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  v1 = v4;
  v2 = v5;
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t VCJWT.signature()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  if (*(_QWORD *)(v1 + *(int *)(a1 + 64) + 8))
  {
    sub_224E51E94();
    sub_224F68030();
    v3 = sub_224F68030();
    v5 = v4;
    swift_bridgeObjectRelease();
    v15 = v3;
    swift_bridgeObjectRetain();
    v6 = sub_224F67C40();
    swift_bridgeObjectRelease();
    v7 = v6 & 3;
    if (v6 <= 0)
      v7 = -(-v6 & 3);
    if (v7 == 3 || v7 == 2)
    {
      sub_224F67C94();
    }
    else if (v7)
    {
      swift_bridgeObjectRelease();
      sub_224E58788();
      v2 = swift_allocError();
      *v8 = 0;
      v8[1] = 0;
LABEL_12:
      swift_willThrow();
      sub_224E573F8();
      swift_allocError();
      v10 = 0;
      *(_QWORD *)v9 = v2;
      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    v2 = sub_224F67604();
    v12 = v11;
    swift_bridgeObjectRelease();
    if (v12 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      return v2;
    }
    sub_224E58788();
    v2 = swift_allocError();
    *v13 = v15;
    v13[1] = v5;
    goto LABEL_12;
  }
  sub_224E573F8();
  swift_allocError();
  v10 = 3;
  *(_QWORD *)v9 = 3;
LABEL_13:
  *(_BYTE *)(v9 + 8) = v10;
  swift_willThrow();
  return v2;
}

uint64_t VCJWT.signatureMessage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_224F67BBC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  VCJWT.headerAndPayload()();
  sub_224F67BB0();
  v4 = sub_224F67B8C();
  v6 = v5;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    sub_224E573F8();
    swift_allocError();
    *(_QWORD *)v7 = 1;
    *(_BYTE *)(v7 + 8) = 3;
    swift_willThrow();
  }
  return v4;
}

void VCJWT.assigningSignature(_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v28 = a3;
  v27 = *(_QWORD *)(a2 + 24);
  v26 = *(_QWORD *)(v27 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v25 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v8 + 16);
  v23 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v22 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_224F6734C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_224F6764C();
  v34 = v14;
  sub_224F672F8();
  sub_224E51E94();
  v15 = sub_224F68024();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRelease();
  v33 = v15;
  v34 = v17;
  v31 = 43;
  v32 = 0xE100000000000000;
  v29 = 45;
  v30 = 0xE100000000000000;
  v18 = sub_224F68030();
  v20 = v19;
  swift_bridgeObjectRelease();
  v33 = v18;
  v34 = v20;
  v31 = 47;
  v32 = 0xE100000000000000;
  v29 = 95;
  v30 = 0xE100000000000000;
  sub_224F68030();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, v4 + *(int *)(a2 + 52), v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v4 + *(int *)(a2 + 60), v27);
  VCJWT.init(header:payload:headerString:payloadString:signatureString:)();
}

uint64_t sub_224E5E7C4()
{
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static VCJWT.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  char v3;
  uint64_t result;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (v3 = sub_224F683CC(), result = 0, (v3 & 1) != 0))
    type metadata accessor for VCJWT();
  return result;
}

BOOL sub_224E5E948(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_224E5E958()
{
  return sub_224F6851C();
}

uint64_t sub_224E5E97C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7453726564616568 && a2 == 0xEC000000676E6972;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726564616568 && a2 == 0xE600000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5364616F6C796170 && a2 == 0xED0000676E697274 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xEF676E6972745365)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_224E5EBF0()
{
  sub_224F68510();
  sub_224F6851C();
  return sub_224F6854C();
}

uint64_t sub_224E5EC34(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E5EC70 + 4 * byte_224F6DCB0[a1]))(0x7453726564616568, 0xEC000000676E6972);
}

uint64_t sub_224E5EC70()
{
  return 0x726564616568;
}

uint64_t sub_224E5EC84()
{
  return 0x5364616F6C796170;
}

uint64_t sub_224E5ECA8()
{
  return 0x64616F6C796170;
}

uint64_t sub_224E5ECC0()
{
  return 0x727574616E676973;
}

BOOL sub_224E5ECE4(char *a1, char *a2)
{
  return sub_224E5E948(*a1, *a2);
}

uint64_t sub_224E5ECFC()
{
  return sub_224E5EBF0();
}

uint64_t sub_224E5ED0C()
{
  return sub_224E5E958();
}

uint64_t sub_224E5ED1C()
{
  sub_224F68510();
  sub_224E5E958();
  return sub_224F6854C();
}

uint64_t sub_224E5ED64()
{
  unsigned __int8 *v0;

  return sub_224E5EC34(*v0);
}

uint64_t sub_224E5ED74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E5E97C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224E5EDA4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224E600E4();
  *a1 = result;
  return result;
}

uint64_t sub_224E5EDD4(uint64_t a1)
{
  MEMORY[0x22768ED24](&unk_224F6DEB0, a1);
  return sub_224F685B8();
}

uint64_t sub_224E5EE08(uint64_t a1)
{
  MEMORY[0x22768ED24](&unk_224F6DEB0, a1);
  return sub_224F685C4();
}

void VCJWT.encode(to:)()
{
  type metadata accessor for VCJWT.CodingKeys();
}

uint64_t sub_224E5EE90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x22768ED24](&unk_224F6DEB0, a1);
  v3 = sub_224F68390();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_224F68594();
  *(_BYTE *)(v2 - 112) = 0;
  v7 = *(_QWORD *)(v2 - 72);
  sub_224F68348();
  if (!v7)
  {
    *(_BYTE *)(v2 - 112) = 1;
    sub_224F68378();
    *(_BYTE *)(v2 - 112) = 2;
    sub_224F68348();
    *(_BYTE *)(v2 - 112) = 3;
    sub_224F68378();
    *(_BYTE *)(v2 - 112) = 4;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void VCJWT.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[18];

  v11[2] = a3;
  v11[6] = *(_QWORD *)(a2 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v11[4] = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[10] = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v11[8] = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[14] = v7;
  v11[15] = v8;
  v11[16] = v9;
  v11[17] = v10;
  type metadata accessor for VCJWT.CodingKeys();
}

void sub_224E5F0F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x22768ED24](&unk_224F6DEB0, a1);
  v6 = sub_224F682F4();
  *(_QWORD *)(v5 - 120) = v6;
  *(_QWORD *)(v5 - 168) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v5 - 136) = v2;
  *(_QWORD *)(v5 - 112) = v2;
  *(_QWORD *)(v5 - 104) = v1;
  *(_QWORD *)(v5 - 184) = v1;
  *(_QWORD *)(v5 - 152) = v4;
  *(_QWORD *)(v5 - 96) = v4;
  *(_QWORD *)(v5 - 88) = v3;
  *(_QWORD *)(v5 - 200) = v3;
  type metadata accessor for VCJWT();
}

uint64_t sub_224E5F16C(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;

  v5 = *((_QWORD *)a1 - 1);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (uint64_t *)((char *)&v28 - v6);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v3 - 128) = v1;
  v8 = *(_QWORD *)(v3 - 72);
  sub_224F6857C();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  v9 = *(_QWORD *)(v3 - 160);
  *(_QWORD *)(v3 - 72) = v5;
  v10 = v7;
  v12 = *(_QWORD *)(v3 - 144);
  v11 = *(_QWORD *)(v3 - 136);
  *(_BYTE *)(v3 - 112) = 0;
  *v10 = sub_224F682AC();
  v10[1] = v13;
  *(_QWORD *)(v3 - 216) = v10;
  *(_BYTE *)(v3 - 112) = 1;
  sub_224F682DC();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v12 + 32))(*(_QWORD *)(v3 - 216) + a1[13], v9, v11);
  *(_BYTE *)(v3 - 112) = 2;
  *(_QWORD *)(v3 - 152) = 0;
  v14 = sub_224F682AC();
  v15 = (uint64_t *)(*(_QWORD *)(v3 - 216) + a1[14]);
  *v15 = v14;
  v15[1] = v16;
  *(_BYTE *)(v3 - 112) = 3;
  v17 = *(_QWORD *)(v3 - 192);
  v18 = *(_QWORD *)(v3 - 184);
  sub_224F682DC();
  v19 = a1;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 176) + 32))(*(_QWORD *)(v3 - 216) + a1[15], v17, v18);
  *(_BYTE *)(v3 - 112) = 4;
  v20 = sub_224F68264();
  v22 = v21;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 168) + 8))(*(_QWORD *)(v3 - 128), *(_QWORD *)(v3 - 120));
  v24 = *(_QWORD *)(v3 - 216);
  v23 = *(_QWORD *)(v3 - 208);
  v25 = (uint64_t *)(v24 + v19[16]);
  *v25 = v20;
  v25[1] = v22;
  v26 = *(_QWORD *)(v3 - 72);
  (*(void (**)(uint64_t, uint64_t, int *))(v26 + 16))(v23, v24, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return (*(uint64_t (**)(uint64_t, int *))(v26 + 8))(v24, v19);
}

void sub_224E5F49C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  VCJWT.init(from:)(a1, *(_QWORD *)(a2 + 24), a3);
}

void sub_224E5F4BC()
{
  VCJWT.encode(to:)();
}

uint64_t sub_224E5F4D0(_QWORD *a1, _QWORD *a2)
{
  return static VCJWT.== infix(_:_:)(a1, a2);
}

uint64_t sub_224E5F4E0(uint64_t a1)
{
  return VCJWT.signature()(a1);
}

uint64_t sub_224E5F4F4()
{
  return VCJWT.signatureMessage()();
}

void type metadata accessor for VCJWT()
{
  JUMPOUT(0x22768ECC4);
}

void type metadata accessor for VCJWT.CodingKeys()
{
  JUMPOUT(0x22768ECC4);
}

uint64_t dispatch thunk of VCJWTHeader.alg.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of VCJWTHeader.kid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of VCJWTHeader.zip.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of VCJWTPayload.nbf.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of VCJWTPayload.exp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_224E5F580()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_224E5F588()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_224E5F628(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  _QWORD *v24;
  _QWORD *v25;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64) + 7;
  if ((v10 | v7) > 7
    || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((v11 + ((v10 + ((v8 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
    swift_retain();
  }
  else
  {
    v15 = a2[1];
    *a1 = *a2;
    a1[1] = v15;
    v16 = ((unint64_t)a1 + v7 + 16) & ~v7;
    v17 = ((unint64_t)a2 + v7 + 16) & ~v7;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v18(v16, v17, v5);
    v19 = (_QWORD *)((v8 + v16) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((v8 + v17) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v19[1] = v20[1];
    v21 = ((unint64_t)v19 + v10 + 16) & ~v10;
    v22 = ((unint64_t)v20 + v10 + 16) & ~v10;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    v23(v21, v22, v4);
    v24 = (_QWORD *)((v11 + v21) & 0xFFFFFFFFFFFFFFF8);
    v25 = (_QWORD *)((v11 + v22) & 0xFFFFFFFFFFFFFFF8);
    *v24 = *v25;
    v24[1] = v25[1];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_224E5F7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v6
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
  return swift_bridgeObjectRelease();
}

_QWORD *sub_224E5F864(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  v11(v9, v10, v6);
  v12 = *(_QWORD *)(v7 + 64) + 7;
  v13 = (_QWORD *)((v12 + v9) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v13[1] = v14[1];
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = ((unint64_t)v13 + v17 + 16) & ~v17;
  v19 = ((unint64_t)v14 + v17 + 16) & ~v17;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  swift_bridgeObjectRetain();
  v20(v18, v19, v15);
  v21 = *(_QWORD *)(v16 + 64) + 7;
  v22 = (_QWORD *)((v21 + v18) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((v21 + v19) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_224E5F96C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)v11 + v14 + 16) & ~v14;
  v16 = ((unint64_t)v12 + v14 + 16) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v15, v16);
  v17 = *(_QWORD *)(v13 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_224E5FA94(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64) + 7;
  v10 = (_OWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((unint64_t)v10 + v13 + 16) & ~v13;
  v15 = ((unint64_t)v11 + v13 + 16) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v14, v15);
  *(_OWORD *)((*(_QWORD *)(v12 + 64) + 7 + v14) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_224E5FB70(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (_QWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((unint64_t)v12 + v15 + 16) & ~v15;
  v17 = ((unint64_t)v13 + v15 + 16) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v16, v17);
  v18 = *(_QWORD *)(v14 + 64) + 7;
  v19 = (_QWORD *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_224E5FC78(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  if (v7 < a2)
  {
    if (((((*(_QWORD *)(v5 + 64)
           + ((*(unsigned __int8 *)(v5 + 80)
             + 16
             + ((*(_QWORD *)(v3 + 64)
               + 7
               + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v7 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X7 }
  }
  if ((v6 & 0x80000000) != 0)
  {
    if (v4 == v7)
      __asm { BR              X3 }
    __asm { BR              X3 }
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void sub_224E5FE00(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  if (v8 >= a3)
  {
    v11 = 0;
    if (a2 <= v8)
      goto LABEL_20;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64)
         + ((*(unsigned __int8 *)(v6 + 80)
           + 16
           + ((*(_DWORD *)(v5 + 64) + 7 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v6 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v8)
LABEL_20:
      __asm { BR              X6 }
  }
  if (((*(_DWORD *)(v6 + 64)
       + ((*(unsigned __int8 *)(v6 + 80)
         + 16
         + ((*(_DWORD *)(v5 + 64) + 7 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFF8)) & ~*(unsigned __int8 *)(v6 + 80))
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v8 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64)+ ((*(unsigned __int8 *)(v6 + 80)+ 16+ ((*(_QWORD *)(v5 + 64)+ 7+ ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_224E5FF44()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x224E5FFACLL);
}

void sub_224E5FF4C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x224E5FF54);
  JUMPOUT(0x224E5FFACLL);
}

void sub_224E5FF68()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x224E5FFACLL);
}

void sub_224E5FF70()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x224E5FFACLL);
}

void sub_224E5FF78(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (v2 < 0)
      JUMPOUT(0x224E5FF84);
    if (a2 < 0)
      JUMPOUT(0x224E5FFA4);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x224E5FFACLL);
}

uint64_t sub_224E5FFF0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_224E5FFF8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_224E60044 + 4 * byte_224F6DCC9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_224E60078 + 4 * byte_224F6DCC4[v4]))();
}

uint64_t sub_224E60078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E60080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E60088);
  return result;
}

uint64_t sub_224E60094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E6009CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_224E600A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E600A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_224E600B4()
{
  JUMPOUT(0x22768ED24);
}

void sub_224E600C4()
{
  JUMPOUT(0x22768ED24);
}

void sub_224E600D4()
{
  JUMPOUT(0x22768ED24);
}

uint64_t sub_224E600E4()
{
  return 5;
}

uint64_t FHIRDate.year.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FHIRDate.year.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*FHIRDate.year.modify())()
{
  return nullsub_1;
}

uint64_t FHIRDate.month.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8) | (*(unsigned __int8 *)(v0 + 9) << 8);
}

uint64_t FHIRDate.month.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 9);
  *(_BYTE *)(v1 + 8) = result;
  *(_BYTE *)(v1 + 9) = BYTE1(result) & 1;
  if (((result >> 8) & 1) == 0 && result >= 0xDu)
  {
    *(_BYTE *)(v1 + 8) = v2;
    *(_BYTE *)(v1 + 9) = v3;
  }
  return result;
}

uint64_t *(*FHIRDate.month.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_WORD *)(a1 + 8) = *(_WORD *)(v1 + 8);
  return sub_224E6017C;
}

uint64_t *sub_224E6017C(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t *result;
  unsigned int v4;
  unsigned int v5;
  char v6;
  char v7;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 9);
  v5 = *((unsigned __int8 *)a1 + 8);
  result = a1 + 1;
  v4 = v5;
  v6 = *(_BYTE *)(v1 + 8);
  v7 = *(_BYTE *)(v1 + 9);
  *(_BYTE *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 9) = v2;
  if ((v2 & 1) == 0 && v4 >= 0xD)
  {
    *(_BYTE *)(v1 + 8) = v6;
    *(_BYTE *)(v1 + 9) = v7;
  }
  return result;
}

uint64_t FHIRDate.day.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10) | (*(unsigned __int8 *)(v0 + 11) << 8);
}

uint64_t FHIRDate.day.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 10);
  v3 = *(_BYTE *)(v1 + 11);
  *(_BYTE *)(v1 + 10) = result;
  *(_BYTE *)(v1 + 11) = BYTE1(result) & 1;
  if (((result >> 8) & 1) == 0 && result >= 0x20u)
  {
    *(_BYTE *)(v1 + 10) = v2;
    *(_BYTE *)(v1 + 11) = v3;
  }
  return result;
}

uint64_t *(*FHIRDate.day.modify(uint64_t a1))(uint64_t *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_WORD *)(a1 + 8) = *(_WORD *)(v1 + 10);
  return sub_224E60220;
}

uint64_t *sub_224E60220(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t *result;
  unsigned int v4;
  unsigned int v5;
  char v6;
  char v7;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 9);
  v5 = *((unsigned __int8 *)a1 + 8);
  result = a1 + 1;
  v4 = v5;
  v6 = *(_BYTE *)(v1 + 10);
  v7 = *(_BYTE *)(v1 + 11);
  *(_BYTE *)(v1 + 10) = v5;
  *(_BYTE *)(v1 + 11) = v2;
  if ((v2 & 1) == 0 && v4 >= 0x20)
  {
    *(_BYTE *)(v1 + 10) = v6;
    *(_BYTE *)(v1 + 11) = v7;
  }
  return result;
}

uint64_t FHIRDate.init(year:month:day:)@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  char v6;
  char v7;

  if (a2 > 0xCu)
    v4 = 1;
  else
    v4 = (a2 >> 8) & 1;
  v5 = v4 | ((unsigned __int16)(a3 & 0x100) >> 8);
  if (a3 > 0x1Fu)
    v5 = 1;
  if (v5)
    v6 = 0;
  else
    v6 = a3;
  *(_QWORD *)a4 = result;
  if (v4)
    v7 = 0;
  else
    v7 = a2;
  *(_BYTE *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 9) = v4;
  *(_BYTE *)(a4 + 10) = v6;
  *(_BYTE *)(a4 + 11) = v5;
  return result;
}

void FHIRDate.init(_:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;

  v3 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  v4 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithString_, v4);

  v6 = sub_224E60E40(v5, 1);
  v8 = v7;

  if (!v1)
  {
    v9 = (v8 >> 8) & 1;
    v10 = HIWORD(v8);
    if (v8 > 0xCu)
      v9 = 1;
    v11 = v9 | ((v8 & 0x1000000) >> 24);
    if (BYTE2(v8) > 0x1Fu)
      v11 = 1;
    if (v11)
      LOBYTE(v10) = 0;
    *(_QWORD *)a1 = v6;
    if (v9)
      v12 = 0;
    else
      v12 = v8;
    *(_BYTE *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 9) = v9;
    *(_BYTE *)(a1 + 10) = v10;
    *(_BYTE *)(a1 + 11) = v11;
  }
}

uint64_t static FHIRDate.parseComponents(from:expectAtEnd:)(void *a1, int a2)
{
  return sub_224E60E40(a1, a2);
}

uint64_t static FHIRDate.parse(from:expectAtEnd:)@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;

  result = sub_224E60E40(a1, a2);
  if (!v3)
  {
    v7 = (v6 >> 8) & 1;
    v8 = HIWORD(v6);
    if (v6 > 0xCu)
      v7 = 1;
    v9 = v7 | ((v6 & 0x1000000) >> 24);
    if (BYTE2(v6) > 0x1Fu)
      v9 = 1;
    if (v9)
      LOBYTE(v8) = 0;
    *(_QWORD *)a3 = result;
    if (v7)
      v10 = 0;
    else
      v10 = v6;
    *(_BYTE *)(a3 + 8) = v10;
    *(_BYTE *)(a3 + 9) = v7;
    *(_BYTE *)(a3 + 10) = v8;
    *(_BYTE *)(a3 + 11) = v9;
  }
  return result;
}

uint64_t FHIRDate.hash(into:)()
{
  uint64_t v0;
  char v1;
  char v2;

  v1 = *(_BYTE *)(v0 + 9);
  v2 = *(_BYTE *)(v0 + 11);
  sub_224F6851C();
  if ((v1 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  if ((v2 & 1) == 0)
    sub_224F68528();
  return sub_224F68528();
}

uint64_t FHIRDate.hashValue.getter()
{
  uint64_t v0;
  char v1;
  char v2;

  v1 = *(_BYTE *)(v0 + 9);
  v2 = *(_BYTE *)(v0 + 11);
  sub_224F68510();
  sub_224F6851C();
  if ((v1 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  if ((v2 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  return sub_224F6854C();
}

uint64_t sub_224E60580()
{
  uint64_t v0;
  char v1;
  char v2;

  v1 = *(_BYTE *)(v0 + 9);
  v2 = *(_BYTE *)(v0 + 11);
  sub_224F6851C();
  if ((v1 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  if ((v2 & 1) == 0)
    sub_224F68528();
  return sub_224F68528();
}

uint64_t sub_224E60600()
{
  uint64_t v0;
  char v1;
  char v2;

  v1 = *(_BYTE *)(v0 + 9);
  v2 = *(_BYTE *)(v0 + 11);
  sub_224F68510();
  sub_224F6851C();
  if ((v1 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  if ((v2 & 1) == 0)
    sub_224F68528();
  sub_224F68528();
  return sub_224F6854C();
}

void FHIRDate.init(stringLiteral:)(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;

  v2 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  v3 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_initWithString_, v3);

  v5 = sub_224E60E40(v4, 1);
  v7 = v6;

  v8 = (v7 >> 8) & 1;
  v9 = HIWORD(v7);
  if (v7 > 0xCu)
    v8 = 1;
  v10 = v8 | ((v7 & 0x1000000) >> 24);
  if (BYTE2(v7) > 0x1Fu)
    v10 = 1;
  if (v10)
    LOBYTE(v9) = 0;
  *(_QWORD *)a1 = v5;
  if (v8)
    v11 = 0;
  else
    v11 = v7;
  *(_BYTE *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 9) = v8;
  *(_BYTE *)(a1 + 10) = v9;
  *(_BYTE *)(a1 + 11) = v10;
}

void sub_224E607B4(uint64_t a1@<X8>)
{
  FHIRDate.init(stringLiteral:)(a1);
}

uint64_t FHIRDate.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v12;
  unsigned int v13;
  char v14;
  _QWORD v15[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68570();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    sub_224F683D8();
    v5 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
    v6 = (void *)sub_224F67B5C();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v5, sel_initWithString_, v6);

    v8 = sub_224E60E40(v7, 1);
    v10 = v9;

    if (v10 > 0xCu)
      v12 = 1;
    else
      v12 = (v10 >> 8) & 1;
    if (BYTE2(v10) > 0x1Fu)
      v13 = 1;
    else
      v13 = v12 | ((v10 & 0x1000000) >> 24);
    if (v13)
      v14 = 0;
    else
      v14 = BYTE2(v10);
    if (v12)
      LOBYTE(v10) = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = v10;
    *(_BYTE *)(a2 + 9) = v12;
    *(_BYTE *)(a2 + 10) = v14;
    *(_BYTE *)(a2 + 11) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t FHIRDate.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68588();
  FHIRDate.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_224F683FC();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t FHIRDate.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *v0;
  if ((*((_BYTE *)v0 + 9) & 1) != 0)
  {
    sub_224DDEA0C(0, &qword_2557E1820, (uint64_t (*)(uint64_t))sub_224E617D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_224F6D8B0;
    v3 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v2 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v2 + 64) = v3;
    *(_QWORD *)(v2 + 32) = v1;
  }
  else
  {
    v4 = *((_BYTE *)v0 + 8);
    v5 = *((_BYTE *)v0 + 10);
    v6 = *((_BYTE *)v0 + 11);
    sub_224DDEA0C(0, &qword_2557E1820, (uint64_t (*)(uint64_t))sub_224E617D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v7 = swift_allocObject();
    if ((v6 & 1) != 0)
    {
      *(_OWORD *)(v7 + 16) = xmmword_224F6DF20;
      v8 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v7 + 64) = v8;
      *(_QWORD *)(v7 + 32) = v1;
      v9 = MEMORY[0x24BEE42B0];
      *(_QWORD *)(v7 + 96) = MEMORY[0x24BEE4260];
      *(_QWORD *)(v7 + 104) = v9;
      *(_BYTE *)(v7 + 72) = v4;
    }
    else
    {
      *(_OWORD *)(v7 + 16) = xmmword_224F6DF10;
      v10 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE1768];
      *(_QWORD *)(v7 + 64) = v10;
      v11 = MEMORY[0x24BEE4260];
      *(_QWORD *)(v7 + 32) = v1;
      v12 = MEMORY[0x24BEE42B0];
      *(_QWORD *)(v7 + 96) = v11;
      *(_QWORD *)(v7 + 104) = v12;
      *(_BYTE *)(v7 + 72) = v4;
      *(_QWORD *)(v7 + 136) = v11;
      *(_QWORD *)(v7 + 144) = v12;
      *(_BYTE *)(v7 + 112) = v5;
    }
  }
  return sub_224F67BA4();
}

uint64_t sub_224E60BB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FHIRDate.init(from:)(a1, a2);
}

uint64_t sub_224E60BCC(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68588();
  FHIRDate.description.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_224F683FC();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_224E60CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_224E60CE8(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_224F3CCCC);
}

uint64_t sub_224E60CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_224E60CE8(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_224F3CDFC);
}

uint64_t sub_224E60CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_224E60CE8(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_224F3CFD8);
}

uint64_t sub_224E60CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8) | (*(unsigned __int8 *)(a1 + 10) << 16) | (*(unsigned __int8 *)(a1 + 9) << 8) | (*(unsigned __int8 *)(a1 + 11) << 24), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8) | (*(unsigned __int8 *)(a2 + 10) << 16) | (*(unsigned __int8 *)(a2 + 9) << 8) | (*(unsigned __int8 *)(a2 + 11) << 24));
}

uint64_t _s23HealthRecordsExtraction8FHIRDateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 9);
  if ((*(_BYTE *)(a1 + 9) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 9))
      return 0;
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 11) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 11))
      return 0;
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10))
      v4 = *(_BYTE *)(a2 + 11);
    else
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t _s23HealthRecordsExtraction8FHIRDateV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  char v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  if (*(_QWORD *)a1 < *(_QWORD *)a2)
    return 1;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 9);
  if (*(_BYTE *)(a1 + 9))
    v5 = 0;
  else
    v5 = *(unsigned __int8 *)(a1 + 8);
  if (v5 >= v3)
    v6 = 1;
  else
    v6 = *(unsigned __int8 *)(a2 + 9);
  if (v6 != 1)
    return 1;
  if ((*(_BYTE *)(a1 + 9) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 9))
      return 0;
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 8) != v3)
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  if (*(_BYTE *)(a1 + 11))
    v7 = 0;
  else
    v7 = *(unsigned __int8 *)(a1 + 10);
  return (*(unsigned __int8 *)(a2 + 10) > v7) & ~*(unsigned __int8 *)(a2 + 11);
}

uint64_t sub_224E60E40(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  char v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int16 v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  __int16 v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  unsigned int v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  _QWORD v107[2];
  char v108;
  int v109;

  v109 = a2;
  v4 = sub_224F6734C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224DDEA0C(0, &qword_2557E1848, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v104 = (uint64_t)&v101 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v103 = (char *)&v101 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v105 = (char *)&v101 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v102 = (char *)&v101 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v101 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v101 - v24;
  v26 = objc_msgSend(a1, sel_charactersToBeSkipped);
  if (v26)
  {
    v27 = v26;
    sub_224F67328();

    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v23, v28, 1, v4);
  sub_224E61A20((uint64_t)v23, (uint64_t)v25);
  objc_msgSend(a1, sel_setCharactersToBeSkipped_, 0);
  sub_224F67304();
  v106 = sub_224F67FC4();
  v29 = sub_224F67FD0();
  if (!v30)
    goto LABEL_16;
  v31 = v29;
  v32 = v30;
  result = sub_224F67C40();
  if (result != 4
    || ((v34 = HIBYTE(v32) & 0xF, v35 = v31 & 0xFFFFFFFFFFFFLL, (v32 & 0x2000000000000000) != 0)
      ? (v36 = HIBYTE(v32) & 0xF)
      : (v36 = v31 & 0xFFFFFFFFFFFFLL),
        !v36))
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if ((v32 & 0x1000000000000000) != 0)
  {
    v101 = (uint64_t)sub_224E572B4(v31, v32, 10);
    LOBYTE(v31) = v100;
    goto LABEL_44;
  }
  if ((v32 & 0x2000000000000000) == 0)
  {
    if ((v31 & 0x1000000000000000) != 0)
      v37 = (unsigned __int8 *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v37 = (unsigned __int8 *)sub_224F6815C();
    v101 = (uint64_t)sub_224E57208(v37, v35, 10);
    LOBYTE(v31) = v38 & 1;
LABEL_44:
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0 && v101 >= 1)
    {
      v106 = v2;
      sub_224F67FB8();
      v53 = v52;
      swift_bridgeObjectRelease();
      if (v53)
      {
        v54 = sub_224F67FC4();
        v55 = sub_224F67FD0();
        if (v56)
        {
          v57 = v55;
          v58 = v56;
          if (sub_224F67C40() == 2)
          {
            v59 = sub_224E55664(v57, v58);
            if ((v59 & 0x100) == 0)
            {
              v60 = v59;
              if (v59 - 13 >= 0xFFFFFFF4)
              {
                sub_224F67FB8();
                v62 = v61;
                swift_bridgeObjectRelease();
                if (v62)
                {
                  v105 = (char *)sub_224F67FC4();
                  v63 = sub_224F67FD0();
                  if (v64)
                  {
                    v65 = v63;
                    v66 = v64;
                    if (sub_224F67C40() == 2)
                    {
                      v67 = sub_224E55664(v65, v66);
                      if ((v67 & 0x100) == 0)
                      {
                        v68 = v67;
                        if (v67 - 32 >= 0xFFFFFFE1)
                        {
                          LODWORD(v105) = 0;
                          goto LABEL_59;
                        }
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                    }
                  }
                  v95 = objc_msgSend(a1, sel_string, v101);
                  v96 = sub_224F67B80();
                  v98 = v97;

                  sub_224E61A7C();
                  swift_allocError();
                  *(_QWORD *)v99 = v96;
                  *(_QWORD *)(v99 + 8) = v98;
                  *(_QWORD *)(v99 + 16) = v105;
                  *(_BYTE *)(v99 + 24) = 3;
                  swift_willThrow();
                  v44 = *(void (**)(char *, uint64_t))(v5 + 8);
                  v44(v7, v4);
                  v80 = (uint64_t)v25;
                  v81 = (uint64_t)v102;
                  goto LABEL_65;
                }
                v68 = 0;
LABEL_58:
                LODWORD(v105) = 1;
LABEL_59:
                v69 = sub_224F67FC4();
                if ((v109 & 1) == 0 || (v70 = v69, (objc_msgSend(a1, sel_isAtEnd) & 1) != 0))
                {
                  LODWORD(v103) = v68;
                  v109 = v60;
                  v71 = v101;
                  v72 = *(void (**)(char *, uint64_t))(v5 + 8);
                  v72(v7, v4);
                  v73 = v104;
                  sub_224E61AC0((uint64_t)v25, v104);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v73, 1, v4) == 1)
                  {
                    v74 = 0;
                  }
                  else
                  {
                    v74 = (void *)sub_224F67310();
                    v72((char *)v73, v4);
                  }
                  v5 = v71;
                  objc_msgSend(a1, sel_setCharactersToBeSkipped_, v74);

                  sub_224E61B1C((uint64_t)v25);
                  LOBYTE(v107[0]) = v53 == 0;
                  v108 = (char)v105;
                  return v5;
                }
                v82 = objc_msgSend(a1, sel_string);
                v83 = sub_224F67B80();
                v85 = v84;

                sub_224E61A7C();
                swift_allocError();
                *(_QWORD *)v86 = v83;
                *(_QWORD *)(v86 + 8) = v85;
                *(_QWORD *)(v86 + 16) = v70;
                *(_BYTE *)(v86 + 24) = 10;
                swift_willThrow();
                v44 = *(void (**)(char *, uint64_t))(v5 + 8);
                v44(v7, v4);
                v80 = (uint64_t)v25;
                v81 = (uint64_t)v103;
LABEL_65:
                sub_224E61AC0(v80, v81);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v81, 1, v4) != 1)
                {
                  v45 = (void *)sub_224F67310();
                  v46 = (char *)v81;
                  goto LABEL_19;
                }
                goto LABEL_17;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        v75 = objc_msgSend(a1, sel_string, v101);
        v76 = sub_224F67B80();
        v78 = v77;

        sub_224E61A7C();
        swift_allocError();
        *(_QWORD *)v79 = v76;
        *(_QWORD *)(v79 + 8) = v78;
        *(_QWORD *)(v79 + 16) = v54;
        *(_BYTE *)(v79 + 24) = 2;
        swift_willThrow();
        v44 = *(void (**)(char *, uint64_t))(v5 + 8);
        v44(v7, v4);
        v80 = (uint64_t)v25;
        v81 = (uint64_t)v105;
        goto LABEL_65;
      }
      v68 = 0;
      v60 = 0;
      goto LABEL_58;
    }
LABEL_16:
    v39 = objc_msgSend(a1, sel_string, v101);
    v40 = sub_224F67B80();
    v42 = v41;

    sub_224E61A7C();
    swift_allocError();
    *(_QWORD *)v43 = v40;
    *(_QWORD *)(v43 + 8) = v42;
    *(_QWORD *)(v43 + 16) = v106;
    *(_BYTE *)(v43 + 24) = 1;
    swift_willThrow();
    v44 = *(void (**)(char *, uint64_t))(v5 + 8);
    v44(v7, v4);
    sub_224E61AC0((uint64_t)v25, (uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) != 1)
    {
      v45 = (void *)sub_224F67310();
      v46 = v12;
LABEL_19:
      v44(v46, v4);
      goto LABEL_20;
    }
LABEL_17:
    v45 = 0;
LABEL_20:
    objc_msgSend(a1, sel_setCharactersToBeSkipped_, v45, v101);

    sub_224E61B1C((uint64_t)v25);
    return v5;
  }
  v107[0] = v31;
  v107[1] = v32 & 0xFFFFFFFFFFFFFFLL;
  if (v31 == 43)
  {
    if (!v34)
      goto LABEL_95;
    if (v34 == 1 || (BYTE1(v31) - 48) > 9u)
      goto LABEL_43;
    v47 = (BYTE1(v31) - 48);
    if (v34 == 2)
    {
LABEL_68:
      LOBYTE(v31) = 0;
      v101 = v47;
      goto LABEL_44;
    }
    if ((BYTE2(v31) - 48) > 9u)
      goto LABEL_43;
    v101 = 10 * (BYTE1(v31) - 48) + (BYTE2(v31) - 48);
    v48 = v34 - 3;
    if (v48)
    {
      v49 = (unsigned __int8 *)v107 + 3;
      while (1)
      {
        v50 = *v49 - 48;
        if (v50 > 9)
          goto LABEL_43;
        v51 = 10 * v101;
        if ((unsigned __int128)(v101 * (__int128)10) >> 64 != (10 * v101) >> 63)
          goto LABEL_43;
        v101 = v51 + v50;
        if (__OFADD__(v51, v50))
          goto LABEL_43;
        LOBYTE(v31) = 0;
        ++v49;
        if (!--v48)
          goto LABEL_44;
      }
    }
LABEL_82:
    LOBYTE(v31) = 0;
    goto LABEL_44;
  }
  if (v31 != 45)
  {
    if (!v34 || (v31 - 48) > 9u)
      goto LABEL_43;
    v47 = (v31 - 48);
    if (v34 == 1)
      goto LABEL_68;
    if ((BYTE1(v31) - 48) > 9u)
      goto LABEL_43;
    v101 = 10 * (v31 - 48) + (BYTE1(v31) - 48);
    v87 = v34 - 2;
    if (v87)
    {
      v88 = (unsigned __int8 *)v107 + 2;
      while (1)
      {
        v89 = *v88 - 48;
        if (v89 > 9)
          goto LABEL_43;
        v90 = 10 * v101;
        if ((unsigned __int128)(v101 * (__int128)10) >> 64 != (10 * v101) >> 63)
          goto LABEL_43;
        v101 = v90 + v89;
        if (__OFADD__(v90, v89))
          goto LABEL_43;
        LOBYTE(v31) = 0;
        ++v88;
        if (!--v87)
          goto LABEL_44;
      }
    }
    goto LABEL_82;
  }
  if (v34)
  {
    if (v34 != 1 && (BYTE1(v31) - 48) <= 9u)
    {
      if (v34 == 2)
      {
        LOBYTE(v31) = 0;
        v101 = -(uint64_t)(BYTE1(v31) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(v31) - 48) <= 9u)
      {
        v101 = -10 * (BYTE1(v31) - 48) - (BYTE2(v31) - 48);
        v91 = v34 - 3;
        if (!v91)
          goto LABEL_82;
        v92 = (unsigned __int8 *)v107 + 3;
        while (1)
        {
          v93 = *v92 - 48;
          if (v93 > 9)
            break;
          v94 = 10 * v101;
          if ((unsigned __int128)(v101 * (__int128)10) >> 64 != (10 * v101) >> 63)
            break;
          v101 = v94 - v93;
          if (__OFSUB__(v94, v93))
            break;
          LOBYTE(v31) = 0;
          ++v92;
          if (!--v91)
            goto LABEL_44;
        }
      }
    }
LABEL_43:
    v101 = 0;
    LOBYTE(v31) = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t sub_224E617D8()
{
  unint64_t result;

  result = qword_2557E1828;
  if (!qword_2557E1828)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1828);
  }
  return result;
}

unint64_t sub_224E61830()
{
  unint64_t result;

  result = qword_2557E1830;
  if (!qword_2557E1830)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for FHIRDate, &type metadata for FHIRDate);
    atomic_store(result, (unint64_t *)&qword_2557E1830);
  }
  return result;
}

unint64_t sub_224E61878()
{
  unint64_t result;

  result = qword_2557E1838;
  if (!qword_2557E1838)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for FHIRDate, &type metadata for FHIRDate);
    atomic_store(result, (unint64_t *)&qword_2557E1838);
  }
  return result;
}

uint64_t sub_224E618BC()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_224E618CC()
{
  unint64_t result;

  result = qword_2557E1840;
  if (!qword_2557E1840)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for FHIRDate, &type metadata for FHIRDate);
    atomic_store(result, (unint64_t *)&qword_2557E1840);
  }
  return result;
}

uint64_t sub_224E61910()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_224E6191C()
{
  return MEMORY[0x24BEE0D88];
}

uint64_t sub_224E61928@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 9);
  *a2 = *(_BYTE *)(result + 8);
  a2[1] = v2;
  return result;
}

unsigned __int8 *sub_224E6193C(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned __int8 v3;
  char v4;
  char v5;

  v2 = *result;
  v3 = result[1];
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 9) = v3;
  if ((v3 & 1) == 0 && v2 >= 0xD)
  {
    *(_BYTE *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 9) = v5;
  }
  return result;
}

uint64_t sub_224E6196C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 11);
  *a2 = *(_BYTE *)(result + 10);
  a2[1] = v2;
  return result;
}

unsigned __int8 *sub_224E61980(unsigned __int8 *result, uint64_t a2)
{
  unsigned int v2;
  unsigned __int8 v3;
  char v4;
  char v5;

  v2 = *result;
  v3 = result[1];
  v4 = *(_BYTE *)(a2 + 10);
  v5 = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a2 + 10) = v2;
  *(_BYTE *)(a2 + 11) = v3;
  if ((v3 & 1) == 0 && v2 >= 0x20)
  {
    *(_BYTE *)(a2 + 10) = v4;
    *(_BYTE *)(a2 + 11) = v5;
  }
  return result;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FHIRDate(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FHIRDate(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FHIRDate()
{
  return &type metadata for FHIRDate;
}

uint64_t sub_224E61A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224DDEA0C(0, &qword_2557E1848, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_224E61A7C()
{
  unint64_t result;

  result = qword_2557E1850;
  if (!qword_2557E1850)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for FHIRDateParserError, &type metadata for FHIRDateParserError);
    atomic_store(result, (unint64_t *)&qword_2557E1850);
  }
  return result;
}

uint64_t sub_224E61AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224DDEA0C(0, &qword_2557E1848, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224E61B1C(uint64_t a1)
{
  uint64_t v2;

  sub_224DDEA0C(0, &qword_2557E1848, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of FHIRHumanName.use.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t Range.low.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_224E61B88(v1, a1);
}

uint64_t sub_224E61B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Range.high.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Range() + 20);
  return sub_224E61B88(v3, a1);
}

uint64_t type metadata accessor for Range()
{
  uint64_t result;

  result = qword_2557E18E8;
  if (!qword_2557E18E8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Range.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for Quantity();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0300, v6);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - v11;
  sub_224E61B88(v1, (uint64_t)&v16 - v11);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v13(v12, 1, v2) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224E61DFC((uint64_t)v12, (uint64_t)v5);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  v14 = type metadata accessor for Range();
  sub_224E61B88(v1 + *(int *)(v14 + 20), (uint64_t)v10);
  if (v13(v10, 1, v2) == 1)
    return sub_224F68528();
  sub_224E61DFC((uint64_t)v10, (uint64_t)v5);
  sub_224F68528();
  Quantity.hash(into:)();
  return sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
}

uint64_t sub_224E61DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Quantity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224E61E44()
{
  _BYTE *v0;

  if (*v0)
    return 1751607656;
  else
    return 7827308;
}

uint64_t sub_224E61E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E64820(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224E61E94()
{
  sub_224E62CCC();
  return sub_224F685B8();
}

uint64_t sub_224E61EBC()
{
  sub_224E62CCC();
  return sub_224F685C4();
}

uint64_t Range.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_224E62D10(0, &qword_2557E1858, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E62CCC();
  sub_224F68594();
  v9[15] = 0;
  type metadata accessor for Quantity();
  sub_224DDACD4(&qword_2557E0860, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
  sub_224F68330();
  if (!v1)
  {
    type metadata accessor for Range();
    v9[14] = 1;
    sub_224F68330();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Range.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for Quantity();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0300, v6);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - v11;
  sub_224F68510();
  sub_224E61B88(v1, (uint64_t)v12);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v13(v12, 1, v2) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224E61DFC((uint64_t)v12, (uint64_t)v5);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  v14 = type metadata accessor for Range();
  sub_224E61B88(v1 + *(int *)(v14 + 20), (uint64_t)v10);
  if (v13(v10, 1, v2) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224E61DFC((uint64_t)v10, (uint64_t)v5);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  return sub_224F6854C();
}

uint64_t Range.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  char v30;

  v25 = a2;
  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v26 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v27 = (char *)&v21 - v7;
  sub_224E62D10(0, &qword_2557E1868, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v28 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - v10;
  v12 = type metadata accessor for Range();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E62CCC();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = v14;
  v24 = a1;
  v22 = v12;
  v15 = v26;
  type metadata accessor for Quantity();
  v30 = 0;
  sub_224DDACD4(&qword_2557E0628, (uint64_t (*)(uint64_t))type metadata accessor for Quantity, (uint64_t)&protocol conformance descriptor for Quantity);
  v17 = (uint64_t)v27;
  v16 = v28;
  sub_224F68294();
  sub_224E62D6C(v17, (uint64_t)v23);
  v29 = 1;
  v18 = (uint64_t)v15;
  sub_224F68294();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v16);
  v19 = (uint64_t)v23;
  sub_224E62D6C(v18, (uint64_t)&v23[*(int *)(v22 + 20)]);
  sub_224E62E0C(v19, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return sub_224DDEAA0(v19, (uint64_t (*)(_QWORD))type metadata accessor for Range);
}

uint64_t sub_224E624C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Range.init(from:)(a1, a2);
}

uint64_t sub_224E624D4(_QWORD *a1)
{
  return Range.encode(to:)(a1);
}

uint64_t sub_224E624EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v18;

  v4 = v2;
  v5 = type metadata accessor for Quantity();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0300, v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - v14;
  sub_224E61B88(v4, (uint64_t)&v18 - v14);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v16(v15, 1, v5) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224E61DFC((uint64_t)v15, (uint64_t)v8);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  sub_224E61B88(v4 + *(int *)(a2 + 20), (uint64_t)v13);
  if (v16(v13, 1, v5) == 1)
    return sub_224F68528();
  sub_224E61DFC((uint64_t)v13, (uint64_t)v8);
  sub_224F68528();
  Quantity.hash(into:)();
  return sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
}

uint64_t sub_224E6269C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v18;

  v4 = v2;
  v5 = type metadata accessor for Quantity();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E63218(0, &qword_2557E0300, v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - v14;
  sub_224F68510();
  sub_224E61B88(v4, (uint64_t)v15);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v16(v15, 1, v5) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224E61DFC((uint64_t)v15, (uint64_t)v8);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  sub_224E61B88(v4 + *(int *)(a2 + 20), (uint64_t)v13);
  if (v16(v13, 1, v5) == 1)
  {
    sub_224F68528();
  }
  else
  {
    sub_224E61DFC((uint64_t)v13, (uint64_t)v8);
    sub_224F68528();
    Quantity.hash(into:)();
    sub_224DDEAA0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  }
  return sub_224F6854C();
}

BOOL _s23HealthRecordsExtraction5RangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for Quantity();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v45 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E648F0();
  v8 = v7;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v50 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v43 - v11;
  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v44 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v46 = (uint64_t)&v43 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v48 = (uint64_t)&v43 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v43 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v43 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v43 - v26;
  v47 = a1;
  sub_224E61B88(a1, (uint64_t)&v43 - v26);
  v49 = a2;
  sub_224E61B88(a2, (uint64_t)v25);
  v28 = (uint64_t)&v12[*(int *)(v8 + 48)];
  sub_224E61B88((uint64_t)v27, (uint64_t)v12);
  sub_224E61B88((uint64_t)v25, v28);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v29((uint64_t)v12, 1, v4) != 1)
  {
    sub_224E61B88((uint64_t)v12, (uint64_t)v22);
    if (v29(v28, 1, v4) != 1)
    {
      v31 = v28;
      v32 = v45;
      sub_224E61DFC(v31, v45);
      v33 = static Quantity.== infix(_:_:)(v22, v32);
      sub_224DDEAA0(v32, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      sub_224E62DC0((uint64_t)v25);
      sub_224E62DC0((uint64_t)v27);
      sub_224DDEAA0((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
      sub_224E62DC0((uint64_t)v12);
      if ((v33 & 1) == 0)
        return 0;
      goto LABEL_8;
    }
    sub_224E62DC0((uint64_t)v25);
    sub_224E62DC0((uint64_t)v27);
    sub_224DDEAA0((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_6:
    v30 = (uint64_t)v12;
LABEL_14:
    sub_224DDEAA0(v30, (uint64_t (*)(_QWORD))sub_224E648F0);
    return 0;
  }
  sub_224E62DC0((uint64_t)v25);
  sub_224E62DC0((uint64_t)v27);
  if (v29(v28, 1, v4) != 1)
    goto LABEL_6;
  sub_224E62DC0((uint64_t)v12);
LABEL_8:
  v34 = type metadata accessor for Range();
  v35 = v48;
  sub_224E61B88(v47 + *(int *)(v34 + 20), v48);
  v36 = v46;
  sub_224E61B88(v49 + *(int *)(v34 + 20), v46);
  v37 = v50;
  v38 = v50 + *(int *)(v8 + 48);
  sub_224E61B88(v35, v50);
  sub_224E61B88(v36, v38);
  if (v29(v37, 1, v4) == 1)
  {
    sub_224E62DC0(v36);
    sub_224E62DC0(v35);
    if (v29(v38, 1, v4) == 1)
    {
      sub_224E62DC0(v37);
      return 1;
    }
    goto LABEL_13;
  }
  v39 = v44;
  sub_224E61B88(v37, v44);
  if (v29(v38, 1, v4) == 1)
  {
    sub_224E62DC0(v36);
    sub_224E62DC0(v35);
    sub_224DDEAA0(v39, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_13:
    v30 = v37;
    goto LABEL_14;
  }
  v41 = v45;
  sub_224E61DFC(v38, v45);
  v42 = static Quantity.== infix(_:_:)(v39, v41);
  sub_224DDEAA0(v41, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  sub_224E62DC0(v36);
  sub_224E62DC0(v35);
  sub_224DDEAA0(v39, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
  sub_224E62DC0(v37);
  return (v42 & 1) != 0;
}

unint64_t sub_224E62CCC()
{
  unint64_t result;

  result = qword_2557E1860;
  if (!qword_2557E1860)
  {
    result = MEMORY[0x22768ED24](&unk_224F6E324, &type metadata for Range.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1860);
  }
  return result;
}

void sub_224E62D10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224E62CCC();
    v7 = a3(a1, &type metadata for Range.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224E62D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_224E62DC0(uint64_t a1)
{
  uint64_t v2;

  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_224E62E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Range();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_224E62E50(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_224DDACD4(&qword_2557E1870, (uint64_t (*)(uint64_t))type metadata accessor for Range, (uint64_t)&protocol conformance descriptor for Range);
  a1[2] = sub_224DDACD4(&qword_2557E1878, (uint64_t (*)(uint64_t))type metadata accessor for Range, (uint64_t)&protocol conformance descriptor for Range);
  result = sub_224DDACD4(&qword_2557E1880, (uint64_t (*)(uint64_t))type metadata accessor for Range, (uint64_t)&protocol conformance descriptor for Range);
  a1[3] = result;
  return result;
}

uint64_t sub_224E62EC8()
{
  return sub_224DDACD4(&qword_2557E1888, (uint64_t (*)(uint64_t))type metadata accessor for Range, (uint64_t)&protocol conformance descriptor for Range);
}

uint64_t *initializeBufferWithCopyOfBuffer for Range(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(_QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  void (*v41)(_QWORD *, _QWORD, uint64_t, uint64_t);
  char *__dst;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Quantity();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v44 = v9;
      v46 = v8;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(uint64_t *)((char *)a1 + 13) = *(uint64_t *)((char *)a2 + 13);
      v12 = a2[4];
      a1[3] = a2[3];
      a1[4] = v12;
      v13 = a2[6];
      a1[5] = a2[5];
      a1[6] = v13;
      v14 = *(int *)(v7 + 28);
      __dst = (char *)a1 + v14;
      v15 = (char *)a2 + v14;
      v16 = sub_224F675D4();
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18(v15, 1, v16))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      v8 = v46;
      v20 = *(int *)(v7 + 32);
      v21 = (uint64_t *)((char *)a1 + v20);
      v22 = (uint64_t *)((char *)a2 + v20);
      v23 = v22[1];
      *v21 = *v22;
      v21[1] = v23;
      v24 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v46 + 56);
      swift_bridgeObjectRetain();
      v24(a1, 0, 1, v7);
      v9 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v44;
    }
    v25 = *(int *)(a3 + 20);
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    if (v9(v27, 1, v7))
    {
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *(_QWORD *)((char *)v26 + 13) = *(_QWORD *)((char *)v27 + 13);
      v29 = v27[4];
      v26[3] = v27[3];
      v26[4] = v29;
      v30 = v27[6];
      v26[5] = v27[5];
      v26[6] = v30;
      v31 = *(int *)(v7 + 28);
      v45 = (char *)v26 + v31;
      v47 = v8;
      v32 = (char *)v27 + v31;
      v33 = sub_224F675D4();
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v45, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v45, v32, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v45, 0, 1, v33);
      }
      v37 = *(int *)(v7 + 32);
      v38 = (_QWORD *)((char *)v26 + v37);
      v39 = (_QWORD *)((char *)v27 + v37);
      v40 = v39[1];
      *v38 = *v39;
      v38[1] = v40;
      v41 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56);
      swift_bridgeObjectRetain();
      v41(v26, 0, 1, v7);
    }
  }
  return a1;
}

void sub_224E63218(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_224F67FF4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t destroy for Range(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for Quantity();
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = a1 + *(int *)(v4 + 28);
    v7 = sub_224F675D4();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  v9 = a1 + *(int *)(a2 + 20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v9, 1, v4);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v9 + *(int *)(v4 + 28);
    v12 = sub_224F675D4();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for Range(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(_QWORD *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(_QWORD *, _QWORD, uint64_t, uint64_t);
  char *__dst;
  int *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v6 = type metadata accessor for Quantity();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v42 = a3;
    v44 = v7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
    v10 = a2[4];
    a1[3] = a2[3];
    a1[4] = v10;
    v11 = a2[6];
    a1[5] = a2[5];
    a1[6] = v11;
    v12 = *(int *)(v6 + 28);
    __dst = (char *)a1 + v12;
    v13 = (char *)a2 + v12;
    v14 = sub_224F675D4();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    v18 = *(int *)(v6 + 32);
    v19 = (_QWORD *)((char *)a1 + v18);
    v20 = (_QWORD *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v7 = v44;
    v22 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56);
    swift_bridgeObjectRetain();
    v22(a1, 0, 1, v6);
    a3 = v42;
  }
  v23 = a3[5];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  if (v8(v25, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *(_QWORD *)((char *)v24 + 13) = *(_QWORD *)((char *)v25 + 13);
    v27 = v25[4];
    v24[3] = v25[3];
    v24[4] = v27;
    v28 = v25[6];
    v24[5] = v25[5];
    v24[6] = v28;
    v29 = *(int *)(v6 + 28);
    v43 = (char *)v24 + v29;
    v45 = v7;
    v30 = (char *)v25 + v29;
    v31 = sub_224F675D4();
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v43, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v43, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v43, 0, 1, v31);
    }
    v35 = *(int *)(v6 + 32);
    v36 = (_QWORD *)((char *)v24 + v35);
    v37 = (_QWORD *)((char *)v25 + v35);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56);
    swift_bridgeObjectRetain();
    v39(v24, 0, 1, v6);
  }
  return a1;
}

_QWORD *assignWithCopy for Range(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void (*v31)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void (*v61)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  char *__dst;
  int *v68;
  int *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v6 = type metadata accessor for Quantity();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_224DDEAA0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_6:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      goto LABEL_18;
    }
    v69 = a3;
    v72 = v7;
    v19 = *(_OWORD *)a2;
    *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
    *(_OWORD *)a1 = v19;
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[5] = a2[5];
    a1[6] = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v20 = *(int *)(v6 + 28);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_224F675D4();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
    v26 = v25(v21, 1, v23);
    v27 = v25(v22, 1, v23);
    if (v26)
    {
      if (!v27)
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_17:
        a3 = v69;
        v33 = *(int *)(v6 + 32);
        v34 = (_QWORD *)((char *)a1 + v33);
        v35 = (_QWORD *)((char *)a2 + v33);
        *v34 = *v35;
        v34[1] = v35[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v7 = v72;
        goto LABEL_18;
      }
    }
    else
    {
      if (!v27)
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v21, v22, v23);
        goto LABEL_17;
      }
      (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
    }
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
    goto LABEL_6;
  v68 = a3;
  v71 = v7;
  v12 = *(_OWORD *)a2;
  *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)a1 = v12;
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  v13 = *(int *)(v6 + 28);
  __dst = (char *)a1 + v13;
  v14 = (char *)a2 + v13;
  v15 = sub_224F675D4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v28 = *(int *)(v6 + 32);
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  v7 = v71;
  v31 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v71 + 56);
  swift_bridgeObjectRetain();
  v31(a1, 0, 1, v6);
  a3 = v68;
LABEL_18:
  v36 = a3[5];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v39 = v8((_QWORD *)((char *)a1 + v36), 1, v6);
  v40 = v8(v38, 1, v6);
  if (!v39)
  {
    if (v40)
    {
      sub_224DDEAA0((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_23:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      return a1;
    }
    v49 = *(_OWORD *)v38;
    *(_QWORD *)((char *)v37 + 13) = *(_QWORD *)((char *)v38 + 13);
    *(_OWORD *)v37 = v49;
    v37[3] = v38[3];
    v37[4] = v38[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v37[5] = v38[5];
    v37[6] = v38[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v50 = *(int *)(v6 + 28);
    v51 = (char *)v37 + v50;
    v52 = (char *)v38 + v50;
    v53 = sub_224F675D4();
    v54 = *(_QWORD *)(v53 - 8);
    v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    v56 = v55(v51, 1, v53);
    v57 = v55(v52, 1, v53);
    if (v56)
    {
      if (!v57)
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_34:
        v63 = *(int *)(v6 + 32);
        v64 = (_QWORD *)((char *)v37 + v63);
        v65 = (_QWORD *)((char *)v38 + v63);
        *v64 = *v65;
        v64[1] = v65[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      if (!v57)
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 24))(v51, v52, v53);
        goto LABEL_34;
      }
      (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v53);
    }
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_34;
  }
  if (v40)
    goto LABEL_23;
  v42 = *(_OWORD *)v38;
  *(_QWORD *)((char *)v37 + 13) = *(_QWORD *)((char *)v38 + 13);
  *(_OWORD *)v37 = v42;
  v37[3] = v38[3];
  v37[4] = v38[4];
  v37[5] = v38[5];
  v37[6] = v38[6];
  v43 = *(int *)(v6 + 28);
  v70 = (char *)v37 + v43;
  v73 = v7;
  v44 = (char *)v38 + v43;
  v45 = sub_224F675D4();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v47(v44, 1, v45))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v70, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v70, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v70, 0, 1, v45);
  }
  v58 = *(int *)(v6 + 32);
  v59 = (_QWORD *)((char *)v37 + v58);
  v60 = (_QWORD *)((char *)v38 + v58);
  *v59 = *v60;
  v59[1] = v60[1];
  v61 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v73 + 56);
  swift_bridgeObjectRetain();
  v61(v37, 0, 1, v6);
  return a1;
}

_OWORD *initializeWithTake for Range(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(_OWORD *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for Quantity();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
    *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    v10 = *(int *)(v6 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_224F675D4();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 32));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v16 = *(int *)(a3 + 20);
  v17 = (_OWORD *)((char *)a1 + v16);
  v18 = (_OWORD *)((char *)a2 + v16);
  if (v8(v18, 1, v6))
  {
    sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v17 = *v18;
    *(_QWORD *)((char *)v17 + 13) = *(_QWORD *)((char *)v18 + 13);
    *(_OWORD *)((char *)v17 + 24) = *(_OWORD *)((char *)v18 + 24);
    *(_OWORD *)((char *)v17 + 40) = *(_OWORD *)((char *)v18 + 40);
    v20 = *(int *)(v6 + 28);
    v21 = (char *)v17 + v20;
    v22 = (char *)v18 + v20;
    v23 = sub_224F675D4();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(_OWORD *)((char *)v17 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v18 + *(int *)(v6 + 32));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

_QWORD *assignWithTake for Range(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  void *v66;

  v6 = type metadata accessor for Quantity();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_224DDEAA0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_6:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      goto LABEL_20;
    }
    v65 = v7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
    v18 = a2[4];
    a1[3] = a2[3];
    a1[4] = v18;
    swift_bridgeObjectRelease();
    v19 = a2[6];
    a1[5] = a2[5];
    a1[6] = v19;
    swift_bridgeObjectRelease();
    v20 = *(int *)(v6 + 28);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_224F675D4();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
    v66 = v21;
    LODWORD(v21) = v25(v21, 1, v23);
    v26 = v25(v22, 1, v23);
    if ((_DWORD)v21)
    {
      if (!v26)
      {
        (*(void (**)(void *, char *, uint64_t))(v24 + 32))(v66, v22, v23);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v66, 0, 1, v23);
        goto LABEL_19;
      }
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v28 = *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64);
      v29 = v66;
    }
    else
    {
      if (!v26)
      {
        (*(void (**)(void *, char *, uint64_t))(v24 + 40))(v66, v22, v23);
        goto LABEL_19;
      }
      (*(void (**)(void *, uint64_t))(v24 + 8))(v66, v23);
      sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v28 = *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64);
      v29 = v66;
    }
    memcpy(v29, v22, v28);
LABEL_19:
    v7 = v65;
    v31 = *(int *)(v6 + 32);
    v32 = (_QWORD *)((char *)a1 + v31);
    v33 = (_QWORD *)((char *)a2 + v31);
    v35 = *v33;
    v34 = v33[1];
    *v32 = v35;
    v32[1] = v34;
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (v10)
    goto LABEL_6;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)((char *)a1 + 13) = *(_QWORD *)((char *)a2 + 13);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  v12 = *(int *)(v6 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_224F675D4();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)((char *)a1 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 32));
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_20:
  v36 = *(int *)(a3 + 20);
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v39 = v8((_QWORD *)((char *)a1 + v36), 1, v6);
  v40 = v8(v38, 1, v6);
  if (!v39)
  {
    if (v40)
    {
      sub_224DDEAA0((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for Quantity);
LABEL_25:
      sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      return a1;
    }
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *(_QWORD *)((char *)v37 + 13) = *(_QWORD *)((char *)v38 + 13);
    v48 = v38[4];
    v37[3] = v38[3];
    v37[4] = v48;
    swift_bridgeObjectRelease();
    v49 = v38[6];
    v37[5] = v38[5];
    v37[6] = v49;
    swift_bridgeObjectRelease();
    v50 = *(int *)(v6 + 28);
    v51 = (char *)v37 + v50;
    v52 = (char *)v38 + v50;
    v53 = sub_224F675D4();
    v54 = *(_QWORD *)(v53 - 8);
    v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    v56 = v55(v51, 1, v53);
    v57 = v55(v52, 1, v53);
    if (v56)
    {
      if (!v57)
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_36:
        v59 = *(int *)(v6 + 32);
        v60 = (_QWORD *)((char *)v37 + v59);
        v61 = (_QWORD *)((char *)v38 + v59);
        v63 = *v61;
        v62 = v61[1];
        *v60 = v63;
        v60[1] = v62;
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      if (!v57)
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 40))(v51, v52, v53);
        goto LABEL_36;
      }
      (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v53);
    }
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_36;
  }
  if (v40)
    goto LABEL_25;
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *(_QWORD *)((char *)v37 + 13) = *(_QWORD *)((char *)v38 + 13);
  *(_OWORD *)(v37 + 3) = *(_OWORD *)(v38 + 3);
  *(_OWORD *)(v37 + 5) = *(_OWORD *)(v38 + 5);
  v42 = *(int *)(v6 + 28);
  v43 = (char *)v37 + v42;
  v44 = (char *)v38 + v42;
  v45 = sub_224F675D4();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    sub_224E63218(0, (unint64_t *)&qword_2557E02A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  *(_OWORD *)((char *)v37 + *(int *)(v6 + 32)) = *(_OWORD *)((char *)v38 + *(int *)(v6 + 32));
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v37, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Range()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E6455C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Range()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E645B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E63218(0, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_224E64604()
{
  unint64_t v0;

  sub_224E63218(319, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for Range.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224E646C8 + 4 * byte_224F6E155[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224E646FC + 4 * asc_224F6E150[v4]))();
}

uint64_t sub_224E646FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E64704(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E6470CLL);
  return result;
}

uint64_t sub_224E64718(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E64720);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224E64724(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E6472C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Range.CodingKeys()
{
  return &type metadata for Range.CodingKeys;
}

unint64_t sub_224E6474C()
{
  unint64_t result;

  result = qword_2557E1920;
  if (!qword_2557E1920)
  {
    result = MEMORY[0x22768ED24](&unk_224F6E2FC, &type metadata for Range.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1920);
  }
  return result;
}

unint64_t sub_224E64794()
{
  unint64_t result;

  result = qword_2557E1928;
  if (!qword_2557E1928)
  {
    result = MEMORY[0x22768ED24](&unk_224F6E26C, &type metadata for Range.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1928);
  }
  return result;
}

unint64_t sub_224E647DC()
{
  unint64_t result;

  result = qword_2557E1930;
  if (!qword_2557E1930)
  {
    result = MEMORY[0x22768ED24](&unk_224F6E294, &type metadata for Range.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1930);
  }
  return result;
}

uint64_t sub_224E64820(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7827308 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1751607656 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_224E648F0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E1448)
  {
    sub_224E63218(255, &qword_2557E0300, (void (*)(uint64_t))type metadata accessor for Quantity);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E1448);
  }
}

void *sub_224E64960()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;

  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, sel_sourceType);
  v6 = objc_msgSend(v0, sel_rawContent);
  v7 = sub_224F67658();
  v9 = v8;

  sub_224E5BD28(v7, v9, (uint64_t)v5, v24);
  sub_224DDE9B4(v7, v9);
  if (!v1)
  {
    v10 = v25;
    v11 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v12 = objc_msgSend(v0, sel_rawContent);
    v13 = sub_224F67658();
    v15 = v14;

    v16 = objc_msgSend(v0, sel_sourceURL);
    if (v16)
    {
      v17 = v16;
      sub_224F67598();

      v18 = sub_224F675D4();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v4, 0, 1, v18);
    }
    else
    {
      v19 = sub_224F675D4();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v4, 1, 1, v19);
    }
    v20 = objc_msgSend(v0, sel_metadata);
    if (v20)
    {
      v21 = v20;
      sub_224E54308();
      v22 = sub_224F67AF0();

    }
    else
    {
      v22 = 0;
    }
    v0 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t, uint64_t))(v11 + 16))(v13, v15, v4, v22, v10, v11);
    sub_224DDEAA0((uint64_t)v4, (uint64_t (*)(_QWORD))sub_224E5AE10);
    swift_bridgeObjectRelease();
    sub_224DDE9B4(v13, v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  return v0;
}

uint64_t HDHRSOriginalSignedClinicalDataRecord.convert()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[8] = v0;
  sub_224E5AE10();
  v1[9] = swift_task_alloc();
  v2 = sub_224F67760();
  v1[10] = v2;
  v1[11] = *(_QWORD *)(v2 - 8);
  v1[12] = swift_task_alloc();
  type metadata accessor for ExtractionContext();
  v1[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_224E64C4C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v25)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = *(void **)(v0 + 64);
  v2 = objc_msgSend(v1, sel_receivedDate);
  sub_224F6773C();

  v3 = objc_msgSend(v1, sel_sourceURL);
  v4 = *(_QWORD *)(v0 + 72);
  if (v3)
  {
    v5 = v3;
    sub_224F67598();

    v6 = sub_224F675D4();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 0, 1, v6);
  }
  else
  {
    v7 = sub_224F675D4();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
  }
  v8 = objc_msgSend(*(id *)(v0 + 64), sel_metadata);
  if (v8)
  {
    v9 = v8;
    sub_224E54308();
    v10 = sub_224F67AF0();

  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v15 = *(void **)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 72);
  sub_224EE9EA8(v11, v14, 0, 1, v10, *(char **)(v0 + 104));
  swift_bridgeObjectRelease();
  sub_224DDEAA0(v14, (uint64_t (*)(_QWORD))sub_224E5AE10);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v16 = objc_msgSend(v15, sel_sourceType);
  v17 = objc_msgSend(v15, sel_rawContent);
  v18 = sub_224F67658();
  v20 = v19;

  sub_224E5BD28(v18, v20, (uint64_t)v16, (uint64_t *)(v0 + 16));
  sub_224DDE9B4(v18, v20);
  v21 = *(_QWORD *)(v0 + 40);
  v22 = *(_QWORD *)(v0 + 56);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v21);
  v25 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v22 + 32) + *(_QWORD *)(v22 + 32));
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v23;
  *v23 = v0;
  v23[1] = sub_224E64EEC;
  return v25(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 104), v21, v22);
}

uint64_t sub_224E64EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 128) = a1;
  return swift_task_switch();
}

uint64_t sub_224E64F60()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 104), (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t sub_224E64FD4()
{
  uint64_t v0;

  sub_224DDEAA0(*(_QWORD *)(v0 + 104), (uint64_t (*)(_QWORD))type metadata accessor for ExtractionContext);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_224E65040(id a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;

  v2 = sub_224F67874();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_224F67760();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_224F677A8();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v43, sel_signatureStatus) == a1)
    return v43;
  v15 = objc_msgSend(v43, sel_rawContent);
  v16 = sub_224F67658();
  v41 = v17;
  v42 = v16;

  v40 = objc_msgSend(v43, sel_sourceType);
  v18 = objc_msgSend(v43, sel_sourceURL);
  if (v18)
  {
    v19 = v18;
    sub_224F67598();

    v20 = sub_224F675D4();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13, 0, 1, v20);
  }
  else
  {
    v21 = sub_224F675D4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 1, 1, v21);
  }
  v22 = objc_msgSend(v43, sel_issuerIdentifier);
  v23 = sub_224F67B80();
  v25 = v24;

  v26 = objc_msgSend(v43, sel_credentialTypes);
  v27 = sub_224F67D6C();

  v28 = objc_msgSend(v43, sel_syncIdentifier);
  sub_224F67790();

  v29 = objc_msgSend(v43, sel_metadata);
  if (v29)
  {
    v30 = v29;
    sub_224E54308();
    v31 = sub_224F67AF0();

  }
  else
  {
    v31 = 0;
  }
  v32 = objc_msgSend(v43, sel_receivedDate);
  sub_224F6773C();

  v33 = objc_msgSend(v43, sel_receivedDateTimeZone);
  sub_224F6785C();

  v34 = objc_allocWithZone(MEMORY[0x24BE48990]);
  v38 = v31;
  v39 = (uint64_t)v7;
  v36 = v41;
  v35 = v42;
  v37 = sub_224F658B0(v42, v41, (uint64_t)v40, (uint64_t)v13, v23, v25, v27, (uint64_t)v10, v38, v39, (uint64_t)v4, (uint64_t)a1);
  sub_224DDE9B4(v35, v36);
  return v37;
}

void JWKError.errorDescription.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_224E653F8()
{
  sub_224F680E4();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  sub_224F67C94();
  return 0x687469772079654BLL;
}

uint64_t sub_224E656AC()
{
  uint64_t v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)&loc_224E65698 + 4 * byte_224F6E386[v0]))(0xD000000000000012, 0x8000000224F81A90);
}

void sub_224E656E0()
{
  JUMPOUT(0x224E65698);
}

void sub_224E65718()
{
  JUMPOUT(0x224E65698);
}

void sub_224E65728()
{
  JUMPOUT(0x224E65698);
}

void sub_224E65738()
{
  JUMPOUT(0x224E65698);
}

void sub_224E65748()
{
  JUMPOUT(0x224E65698);
}

void sub_224E65758()
{
  JUMPOUT(0x224E65764);
}

void sub_224E65770(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_224F67FF4();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void _s23HealthRecordsExtraction8JWKErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_224E6580C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  char v7;

  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_224E65F3C(v1, v0, v5);
    sub_224E65F68(v3, v2, v4);
    sub_224E65F68(v1, v0, v5);
    v7 = 0;
  }
  else
  {
    if (v3 == v1 && v2 == v0)
      v7 = 1;
    else
      v7 = sub_224F683CC();
    sub_224E65F3C(v1, v0, 0);
    sub_224E65F3C(v3, v2, 0);
    sub_224E65F68(v3, v2, 0);
    sub_224E65F68(v1, v0, 0);
  }
  return v7 & 1;
}

unint64_t sub_224E65EF4()
{
  unint64_t result;

  result = qword_2557E1950;
  if (!qword_2557E1950)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for JWKError, &type metadata for JWKError);
    atomic_store(result, (unint64_t *)&qword_2557E1950);
  }
  return result;
}

uint64_t sub_224E65F3C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if ((a3 | 2) == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for JWKError(uint64_t a1)
{
  return sub_224E65F68(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_224E65F68(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if ((a3 | 2) == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s23HealthRecordsExtraction8JWKErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_224E65F3C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JWKError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_224E65F3C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_224E65F68(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for JWKError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_224E65F68(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for JWKError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JWKError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_224E66104(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_224E6611C(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JWKError()
{
  return &type metadata for JWKError;
}

HealthRecordsExtraction::SignatureAlgorithm_optional __swiftcall SignatureAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthRecordsExtraction::SignatureAlgorithm_optional result;
  char v5;

  v2 = v1;
  v3 = sub_224F68240();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t SignatureAlgorithm.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E661C8 + 4 * byte_224F6E4B0[*v0]))(0x4B3635325345, 0xE600000000000000);
}

uint64_t sub_224E661C8()
{
  return 0x3635325345;
}

uint64_t sub_224E661DC()
{
  return 0x4153446445;
}

uint64_t sub_224E661F0()
{
  return 0x3635325350;
}

void sub_224E66208()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_224F68510();
  __asm { BR              X9 }
}

uint64_t sub_224E66250()
{
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

void sub_224E662B8()
{
  __asm { BR              X10 }
}

uint64_t sub_224E662F0()
{
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

void sub_224E66344()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_224F68510();
  __asm { BR              X9 }
}

uint64_t sub_224E66388()
{
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

HealthRecordsExtraction::SignatureAlgorithm_optional sub_224E663F0(Swift::String *a1)
{
  return SignatureAlgorithm.init(rawValue:)(*a1);
}

uint64_t sub_224E663FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_224E66428 + 4 * byte_224F6E4C0[*v0]))();
}

void sub_224E66428(_QWORD *a1@<X8>)
{
  *a1 = 0x3635325345;
  a1[1] = 0xE500000000000000;
}

void sub_224E66440(_QWORD *a1@<X8>)
{
  *a1 = 0x4153446445;
  a1[1] = 0xE500000000000000;
}

void sub_224E66458(_QWORD *a1@<X8>)
{
  *a1 = 0x3635325350;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_224E66474()
{
  sub_224E666D8();
  return sub_224F67D48();
}

uint64_t sub_224E664D0()
{
  sub_224E666D8();
  return sub_224F67D3C();
}

void sub_224E6651C(char *a1)
{
  sub_224F168D0(*a1);
}

void SignatureAlgorithm.curve.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t SignatureAlgorithm.linkedDataSignatureSuite.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_224E6656C + 4 * byte_224F6E4C4[*v0]))(0xD000000000000021, 0x8000000224F81AF0);
}

uint64_t sub_224E6656C()
{
  return 0x4B6265576E6F734ALL;
}

uint64_t sub_224E66590@<X0>(uint64_t a1@<X8>)
{
  return a1 + 10;
}

unint64_t sub_224E665A8()
{
  return 0xD000000000000010;
}

unint64_t sub_224E665C8()
{
  unint64_t result;

  result = qword_2557E1958;
  if (!qword_2557E1958)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignatureAlgorithm, &type metadata for SignatureAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E1958);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SignatureAlgorithm(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_224E66658 + 4 * byte_224F6E4CD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_224E6668C + 4 * byte_224F6E4C8[v4]))();
}

uint64_t sub_224E6668C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E66694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E6669CLL);
  return result;
}

uint64_t sub_224E666A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E666B0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_224E666B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E666BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignatureAlgorithm()
{
  return &type metadata for SignatureAlgorithm;
}

unint64_t sub_224E666D8()
{
  unint64_t result;

  result = qword_2557E1960;
  if (!qword_2557E1960)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignatureAlgorithm, &type metadata for SignatureAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E1960);
  }
  return result;
}

uint64_t Address.use.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.line.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Address.city.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.district.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.state.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.postalCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.country.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Address.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0[3];
  v3 = v0[5];
  v2 = v0[6];
  v4 = v0[8];
  v5 = v0[10];
  v9 = v0[12];
  v10 = v0[14];
  v11 = v0[16];
  if (v0[1])
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_3;
  }
  else
  {
    sub_224F68528();
    if (v1)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v3)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  sub_224F68528();
  if (v3)
  {
LABEL_4:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  sub_224F68528();
  if (v2)
  {
LABEL_5:
    sub_224F68528();
    sub_224F6851C();
    v6 = *(_QWORD *)(v2 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      v7 = v2 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_224F67C34();
        swift_bridgeObjectRelease();
        v7 += 16;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
    }
    if (v4)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  sub_224F68528();
  if (v4)
  {
LABEL_10:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_15:
  sub_224F68528();
LABEL_16:
  if (v5)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_18;
  }
  else
  {
    sub_224F68528();
    if (v9)
    {
LABEL_18:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      swift_bridgeObjectRelease();
      if (v10)
        goto LABEL_19;
LABEL_23:
      sub_224F68528();
      if (v11)
        goto LABEL_20;
      return sub_224F68528();
    }
  }
  sub_224F68528();
  if (!v10)
    goto LABEL_23;
LABEL_19:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v11)
  {
LABEL_20:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    return swift_bridgeObjectRelease();
  }
  return sub_224F68528();
}

uint64_t sub_224E66BA4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_224E66BD0 + 4 * byte_224F6E600[a1]))(6648693, 0xE300000000000000);
}

uint64_t sub_224E66BD0()
{
  return 1701869940;
}

uint64_t sub_224E66BE0()
{
  return 1954047348;
}

uint64_t sub_224E66BF0()
{
  return 1701734764;
}

uint64_t sub_224E66C00()
{
  return 2037672291;
}

uint64_t sub_224E66C10()
{
  return 0x7463697274736964;
}

uint64_t sub_224E66C28()
{
  return 0x6574617473;
}

uint64_t sub_224E66C3C()
{
  return 0x6F436C6174736F70;
}

uint64_t sub_224E66C58()
{
  return 0x7972746E756F63;
}

uint64_t sub_224E66C70()
{
  unsigned __int8 *v0;

  return sub_224E66BA4(*v0);
}

uint64_t sub_224E66C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E68A84(a1, a2);
  *a3 = result;
  return result;
}

void sub_224E66C9C(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_224E66CA8()
{
  sub_224E680C0();
  return sub_224F685B8();
}

uint64_t sub_224E66CD0()
{
  sub_224E680C0();
  return sub_224F685C4();
}

uint64_t Address.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[11];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  sub_224E68158(0, &qword_2557E1968, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v18 - v6;
  v8 = v1[2];
  v22 = v1[3];
  v23 = v8;
  v9 = v1[4];
  v20 = v1[5];
  v21 = v9;
  v10 = v1[6];
  v18[10] = v1[7];
  v19 = v10;
  v11 = v1[8];
  v12 = v1[9];
  v18[8] = v1[10];
  v18[9] = v11;
  v13 = v1[11];
  v18[6] = v1[12];
  v18[7] = v12;
  v18[4] = v1[13];
  v18[5] = v13;
  v14 = v1[14];
  v18[2] = v1[15];
  v18[3] = v14;
  v18[1] = v1[16];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E680C0();
  sub_224F68594();
  LOBYTE(v26) = 0;
  v15 = v24;
  sub_224F68300();
  if (!v15)
  {
    v16 = v19;
    LOBYTE(v26) = 1;
    sub_224F68300();
    LOBYTE(v26) = 2;
    sub_224F68300();
    v26 = v16;
    v25 = 3;
    sub_224E68104();
    sub_224E681B4(&qword_2557E0890, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_224F68330();
    LOBYTE(v26) = 4;
    sub_224F68300();
    LOBYTE(v26) = 5;
    sub_224F68300();
    LOBYTE(v26) = 6;
    sub_224F68300();
    LOBYTE(v26) = 7;
    sub_224F68300();
    LOBYTE(v26) = 8;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Address.hashValue.getter()
{
  sub_224F68510();
  Address.hash(into:)();
  return sub_224F6854C();
}

uint64_t Address.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[18];
  char v64;

  sub_224E68158(0, &qword_2557E1978, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v37 - v8;
  v10 = a1[3];
  v53 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_224E680C0();
  sub_224F6857C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  LOBYTE(v63[0]) = 0;
  v11 = sub_224F68264();
  v13 = v12;
  LOBYTE(v63[0]) = 1;
  swift_bridgeObjectRetain();
  v50 = sub_224F68264();
  v51 = v11;
  LOBYTE(v63[0]) = 2;
  v15 = v14;
  swift_bridgeObjectRetain();
  v16 = sub_224F68264();
  v52 = v15;
  v49 = v16;
  v18 = v17;
  sub_224E68104();
  LOBYTE(v54) = 3;
  sub_224E681B4(&qword_2557E08A0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  swift_bridgeObjectRetain();
  sub_224F68294();
  v19 = v63[0];
  LOBYTE(v63[0]) = 4;
  v48 = v19;
  swift_bridgeObjectRetain();
  v45 = sub_224F68264();
  LOBYTE(v63[0]) = 5;
  v47 = v20;
  swift_bridgeObjectRetain();
  v21 = sub_224F68264();
  v46 = v22;
  v42 = v21;
  LOBYTE(v63[0]) = 6;
  swift_bridgeObjectRetain();
  v43 = 0;
  v41 = sub_224F68264();
  LOBYTE(v63[0]) = 7;
  v44 = v23;
  swift_bridgeObjectRetain();
  v39 = sub_224F68264();
  v40 = v24;
  v64 = 8;
  swift_bridgeObjectRetain();
  v25 = sub_224F68264();
  v38 = v26;
  v27 = v25;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(_QWORD *)&v54 = v51;
  *((_QWORD *)&v54 + 1) = v13;
  *(_QWORD *)&v55 = v50;
  *((_QWORD *)&v55 + 1) = v52;
  *(_QWORD *)&v56 = v49;
  *((_QWORD *)&v56 + 1) = v18;
  v37 = v18;
  *(_QWORD *)&v57 = v48;
  *((_QWORD *)&v57 + 1) = v45;
  v28 = v47;
  *(_QWORD *)&v58 = v47;
  *((_QWORD *)&v58 + 1) = v42;
  *(_QWORD *)&v59 = v46;
  *((_QWORD *)&v59 + 1) = v41;
  *(_QWORD *)&v60 = v44;
  *((_QWORD *)&v60 + 1) = v39;
  *(_QWORD *)&v61 = v40;
  *((_QWORD *)&v61 + 1) = v27;
  v62 = v38;
  sub_224E68210((uint64_t)&v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v46;
  swift_bridgeObjectRelease();
  v30 = v44;
  swift_bridgeObjectRelease();
  v31 = v40;
  swift_bridgeObjectRelease();
  v32 = v61;
  *(_OWORD *)(a2 + 96) = v60;
  *(_OWORD *)(a2 + 112) = v32;
  *(_QWORD *)(a2 + 128) = v62;
  v33 = v57;
  *(_OWORD *)(a2 + 32) = v56;
  *(_OWORD *)(a2 + 48) = v33;
  v34 = v59;
  *(_OWORD *)(a2 + 64) = v58;
  *(_OWORD *)(a2 + 80) = v34;
  v35 = v55;
  *(_OWORD *)a2 = v54;
  *(_OWORD *)(a2 + 16) = v35;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  v63[0] = v51;
  v63[1] = v13;
  v63[2] = v50;
  v63[3] = v52;
  v63[4] = v49;
  v63[5] = v37;
  v63[6] = v48;
  v63[7] = v45;
  v63[8] = v28;
  v63[9] = v42;
  v63[10] = v29;
  v63[11] = v41;
  v63[12] = v30;
  v63[13] = v39;
  v63[14] = v31;
  v63[15] = v27;
  v63[16] = v38;
  return sub_224E682B4((uint64_t)v63);
}

uint64_t sub_224E67728@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Address.init(from:)(a1, a2);
}

uint64_t sub_224E6773C(_QWORD *a1)
{
  return Address.encode(to:)(a1);
}

uint64_t sub_224E67750()
{
  sub_224F68510();
  Address.hash(into:)();
  return sub_224F6854C();
}

uint64_t sub_224E67790()
{
  sub_224F68510();
  Address.hash(into:)();
  return sub_224F6854C();
}

Swift::String __swiftcall Address.formattedAddressString()()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  Swift::String result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = (void *)v0[5];
  if (v1)
  {
    v2 = v0[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = v0[6];
    v32 = v0[8];
    v4 = v0[12];
    v5 = v0[14];
    v6 = v0[16];
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBAD78]), sel_init);
    if (v3)
    {
      v8 = v3;
      v9 = *(_QWORD *)(v3 + 16);
      if (v9)
      {
        v30 = v4;
        v31 = v6;
        v10 = v8 + 40;
        swift_bridgeObjectRetain_n();
        v11 = 1;
        do
        {
          swift_bridgeObjectRetain();
          v12 = objc_msgSend(v7, sel_street);
          v13 = sub_224F67B80();
          v15 = v14;

          swift_bridgeObjectRelease();
          v16 = HIBYTE(v15) & 0xF;
          if ((v15 & 0x2000000000000000) == 0)
            v16 = v13 & 0xFFFFFFFFFFFFLL;
          if (v16)
          {
            v17 = objc_msgSend(v7, sel_street);
            sub_224F67B80();

            sub_224F67C94();
            sub_224F67C94();
            v18 = (void *)sub_224F67B5C();
            swift_bridgeObjectRelease();
            objc_msgSend(v7, sel_setStreet_, v18);
            swift_bridgeObjectRelease();

            if (v9 == v11)
              goto LABEL_15;
          }
          else
          {
            v19 = (void *)sub_224F67B5C();
            objc_msgSend(v7, sel_setStreet_, v19);
            swift_bridgeObjectRelease();

            if (v9 == v11)
              goto LABEL_15;
          }
          v10 += 16;
        }
        while (!__OFADD__(v11++, 1));
        __break(1u);
LABEL_15:
        swift_bridgeObjectRelease_n();
        v6 = v31;
        v4 = v30;
      }
    }
    if (v32)
    {
      v21 = (void *)sub_224F67B5C();
      objc_msgSend(v7, sel_setCity_, v21);

    }
    if (v4)
    {
      v22 = (void *)sub_224F67B5C();
      objc_msgSend(v7, sel_setState_, v22);

    }
    if (v5)
    {
      v23 = (void *)sub_224F67B5C();
      objc_msgSend(v7, sel_setPostalCode_, v23);

    }
    if (v6)
    {
      v24 = (void *)sub_224F67B5C();
      objc_msgSend(v7, sel_setCountry_, v24);

    }
    v25 = objc_msgSend((id)objc_opt_self(), sel_stringFromPostalAddress_style_, v7, 0);
    v2 = sub_224F67B80();
    v1 = v26;

  }
  v27 = v2;
  v28 = v1;
  result._object = v28;
  result._countAndFlagsBits = v27;
  return result;
}

BOOL _s23HealthRecordsExtraction7AddressV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  _BOOL8 result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v3 = a1[1];
  v4 = a1[4];
  v157 = a1[2];
  v159 = a1[3];
  v6 = a1[5];
  v5 = (_QWORD *)a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v11 = a1[12];
  v153 = a1[11];
  v13 = a1[13];
  v12 = a1[14];
  v14 = a1[15];
  v15 = a1[16];
  v16 = a2[1];
  v155 = a2[2];
  v17 = a2[3];
  v154 = a2[4];
  v18 = (_QWORD *)a2[6];
  v20 = a2[7];
  v19 = a2[8];
  v22 = a2[9];
  v21 = a2[10];
  v24 = a2[11];
  v23 = a2[12];
  v26 = a2[13];
  v25 = a2[14];
  v28 = a2[15];
  v27 = a2[16];
  if (!v3)
  {
    v152 = a2[5];
    if (v16)
      return 0;
    goto LABEL_8;
  }
  if (!v16)
    return 0;
  v152 = a2[5];
  if (*a1 == *a2 && v3 == v16)
    goto LABEL_8;
  v123 = a1[9];
  v127 = a2[7];
  v142 = a2[16];
  v147 = a1[15];
  v134 = a1[8];
  v138 = a1[7];
  v29 = a1[16];
  v112 = a1[13];
  v30 = a2[15];
  v116 = (_QWORD *)a1[6];
  v119 = a2[10];
  v31 = a1[14];
  v107 = a2[14];
  v108 = a1[4];
  v110 = a2[11];
  v32 = a2[13];
  v33 = a1[12];
  v34 = a2[12];
  v35 = a1[10];
  v131 = a2[8];
  v36 = a2[9];
  v37 = sub_224F683CC();
  v22 = v36;
  v21 = v119;
  v9 = v123;
  v10 = v35;
  v7 = v138;
  v27 = v142;
  v23 = v34;
  v11 = v33;
  v20 = v127;
  v19 = v131;
  v26 = v32;
  v4 = v108;
  v24 = v110;
  v25 = v107;
  v12 = v31;
  v5 = v116;
  v28 = v30;
  v13 = v112;
  v15 = v29;
  v8 = v134;
  v14 = v147;
  v38 = v37;
  result = 0;
  if ((v38 & 1) != 0)
  {
LABEL_8:
    if (v159)
    {
      if (!v17)
        return 0;
      if (v157 != v155 || v159 != v17)
      {
        v124 = v9;
        v128 = v20;
        v143 = v27;
        v148 = v14;
        v135 = v8;
        v40 = v15;
        v113 = v13;
        v114 = v18;
        v41 = v28;
        v117 = v5;
        v120 = v21;
        v42 = v12;
        v43 = v25;
        v109 = v4;
        v111 = v24;
        v44 = v26;
        v45 = v11;
        v46 = v23;
        v47 = v10;
        v139 = v7;
        v48 = v22;
        v49 = sub_224F683CC();
        v22 = v48;
        v7 = v139;
        v27 = v143;
        v21 = v120;
        v9 = v124;
        v10 = v47;
        v20 = v128;
        v23 = v46;
        v11 = v45;
        v26 = v44;
        v4 = v109;
        v24 = v111;
        v25 = v43;
        v12 = v42;
        v18 = v114;
        v5 = v117;
        v28 = v41;
        v13 = v113;
        v15 = v40;
        v8 = v135;
        v14 = v148;
        v50 = v49;
        result = 0;
        if ((v50 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (v6)
    {
      if (!v152)
        return 0;
      if (v4 != v154 || v6 != v152)
      {
        v125 = v9;
        v129 = v20;
        v144 = v27;
        v149 = v14;
        v136 = v8;
        v51 = v15;
        v52 = v28;
        v115 = v18;
        v118 = v5;
        v53 = v12;
        v54 = v25;
        v55 = v26;
        v56 = v11;
        v160 = v23;
        v140 = v7;
        v57 = v10;
        v121 = v21;
        v132 = v19;
        v58 = v22;
        v59 = sub_224F683CC();
        v22 = v58;
        v21 = v121;
        v9 = v125;
        v10 = v57;
        v7 = v140;
        v27 = v144;
        v23 = v160;
        v11 = v56;
        v26 = v55;
        v25 = v54;
        v12 = v53;
        v18 = v115;
        v5 = v118;
        v28 = v52;
        v20 = v129;
        v19 = v132;
        v15 = v51;
        v8 = v136;
        v14 = v149;
        v60 = v59;
        result = 0;
        if ((v60 & 1) == 0)
          return result;
      }
    }
    else if (v152)
    {
      return 0;
    }
    if (v5)
    {
      if (!v18)
        return 0;
      v61 = v5;
      v62 = v18;
      v145 = v27;
      v150 = v14;
      v137 = v8;
      v63 = v15;
      v130 = v20;
      v64 = v28;
      v65 = v12;
      v66 = v25;
      v67 = v26;
      v68 = v11;
      v161 = v23;
      v141 = v7;
      v69 = v9;
      v158 = v10;
      v133 = v19;
      v70 = v21;
      v156 = v22;
      v71 = sub_224DD698C(v61, v62);
      v22 = v156;
      v10 = v158;
      v21 = v70;
      v9 = v69;
      v7 = v141;
      v27 = v145;
      v23 = v161;
      v11 = v68;
      v26 = v67;
      v25 = v66;
      v12 = v65;
      v28 = v64;
      v20 = v130;
      v19 = v133;
      v15 = v63;
      v8 = v137;
      v14 = v150;
      if ((v71 & 1) == 0)
        return 0;
    }
    else if (v18)
    {
      return 0;
    }
    if (v8)
    {
      if (!v19)
        return 0;
      if (v7 != v20 || v8 != v19)
      {
        v126 = v9;
        v146 = v27;
        v151 = v14;
        v72 = v15;
        v73 = v28;
        v74 = v12;
        v75 = v25;
        v76 = v26;
        v77 = v11;
        v162 = v23;
        v78 = v10;
        v122 = v21;
        v79 = v22;
        v80 = sub_224F683CC();
        v22 = v79;
        v21 = v122;
        v9 = v126;
        v10 = v78;
        v23 = v162;
        v11 = v77;
        v26 = v76;
        v25 = v75;
        v12 = v74;
        v28 = v73;
        v27 = v146;
        v14 = v151;
        v15 = v72;
        v81 = v80;
        result = 0;
        if ((v81 & 1) == 0)
          return result;
      }
    }
    else if (v19)
    {
      return 0;
    }
    if (v10)
    {
      if (!v21)
        return 0;
      if (v9 != v22 || v10 != v21)
      {
        v82 = v14;
        v83 = v15;
        v84 = v27;
        v85 = v28;
        v86 = v12;
        v87 = v25;
        v88 = v26;
        v89 = v11;
        v163 = v23;
        v90 = sub_224F683CC();
        v23 = v163;
        v11 = v89;
        v26 = v88;
        v25 = v87;
        v12 = v86;
        v28 = v85;
        v27 = v84;
        v15 = v83;
        v14 = v82;
        v91 = v90;
        result = 0;
        if ((v91 & 1) == 0)
          return result;
      }
    }
    else if (v21)
    {
      return 0;
    }
    if (v11)
    {
      if (!v23)
        return 0;
      if (v153 != v24 || v11 != v23)
      {
        v92 = v14;
        v93 = v15;
        v94 = v27;
        v95 = v28;
        v96 = v12;
        v97 = v25;
        v98 = v26;
        v99 = sub_224F683CC();
        v26 = v98;
        v25 = v97;
        v12 = v96;
        v28 = v95;
        v27 = v94;
        v15 = v93;
        v14 = v92;
        v100 = v99;
        result = 0;
        if ((v100 & 1) == 0)
          return result;
      }
    }
    else if (v23)
    {
      return 0;
    }
    if (v12)
    {
      if (!v25)
        return 0;
      if (v13 != v26 || v12 != v25)
      {
        v101 = v14;
        v102 = v15;
        v103 = v27;
        v104 = v28;
        v105 = sub_224F683CC();
        v28 = v104;
        v27 = v103;
        v15 = v102;
        v14 = v101;
        v106 = v105;
        result = 0;
        if ((v106 & 1) == 0)
          return result;
      }
    }
    else if (v25)
    {
      return 0;
    }
    if (v15)
      return v27 && (v14 == v28 && v15 == v27 || (sub_224F683CC() & 1) != 0);
    return !v27;
  }
  return result;
}

unint64_t sub_224E680C0()
{
  unint64_t result;

  result = qword_2557E1970;
  if (!qword_2557E1970)
  {
    result = MEMORY[0x22768ED24](&unk_224F6E7E4, &type metadata for Address.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1970);
  }
  return result;
}

void sub_224E68104()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E0888)
  {
    v0 = sub_224F67DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E0888);
  }
}

void sub_224E68158(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224E680C0();
    v7 = a3(a1, &type metadata for Address.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_224E681B4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_224E68104();
    v8 = a2;
    result = MEMORY[0x22768ED24](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_224E68210(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_224E682B4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_224E68358(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224DE6B5C();
  a1[2] = sub_224DFBA1C();
  result = sub_224E6838C();
  a1[3] = result;
  return result;
}

unint64_t sub_224E6838C()
{
  unint64_t result;

  result = qword_2557E1980;
  if (!qword_2557E1980)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Address, &type metadata for Address);
    atomic_store(result, (unint64_t *)&qword_2557E1980);
  }
  return result;
}

unint64_t sub_224E683D4()
{
  unint64_t result;

  result = qword_2557E1988;
  if (!qword_2557E1988)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Address, &type metadata for Address);
    atomic_store(result, (unint64_t *)&qword_2557E1988);
  }
  return result;
}

uint64_t destroy for Address()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Address(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Address(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for Address(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Address(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Address(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Address()
{
  return &type metadata for Address;
}

uint64_t getEnumTagSinglePayload for Address.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Address.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_224E6892C + 4 * byte_224F6E60E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_224E68960 + 4 * byte_224F6E609[v4]))();
}

uint64_t sub_224E68960(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E68968(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E68970);
  return result;
}

uint64_t sub_224E6897C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E68984);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_224E68988(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E68990(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Address.CodingKeys()
{
  return &type metadata for Address.CodingKeys;
}

unint64_t sub_224E689B0()
{
  unint64_t result;

  result = qword_2557E1990;
  if (!qword_2557E1990)
  {
    result = MEMORY[0x22768ED24](&unk_224F6E7BC, &type metadata for Address.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1990);
  }
  return result;
}

unint64_t sub_224E689F8()
{
  unint64_t result;

  result = qword_2557E1998;
  if (!qword_2557E1998)
  {
    result = MEMORY[0x22768ED24](&unk_224F6E72C, &type metadata for Address.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1998);
  }
  return result;
}

unint64_t sub_224E68A40()
{
  unint64_t result;

  result = qword_2557E19A0;
  if (!qword_2557E19A0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6E754, &type metadata for Address.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E19A0);
  }
  return result;
}

uint64_t sub_224E68A84(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6648693 && a2 == 0xE300000000000000;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701734764 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 2037672291 && a2 == 0xE400000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7463697274736964 && a2 == 0xE800000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F436C6174736F70 && a2 == 0xEA00000000006564 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7972746E756F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t FHIRDateParserErrorPosition.init(string:location:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t FHIRDateParserErrorPosition.string.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FHIRDateParserErrorPosition.location.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t FHIRDateParserErrorPosition.description.getter()
{
  sub_224F680E4();
  sub_224F67C94();
  sub_224F681B0();
  sub_224F67C94();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  sub_224F67C94();
  return 0;
}

BOOL static FHIRDateParserErrorPosition.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v5;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1])
    return (v3 ^ v2) < 0x4000;
  v5 = sub_224F683CC();
  result = 0;
  if ((v5 & 1) != 0)
    return (v3 ^ v2) < 0x4000;
  return result;
}

BOOL sub_224E68F5C(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v5;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1])
    return (v3 ^ v2) < 0x4000;
  v5 = sub_224F683CC();
  result = 0;
  if ((v5 & 1) != 0)
    return (v3 ^ v2) < 0x4000;
  return result;
}

void FHIRDateParserError.errorDescription.getter()
{
  __asm { BR              X10 }
}

unint64_t sub_224E68FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_224F680E4();
  swift_bridgeObjectRelease();
  sub_224F680E4();
  sub_224F67C94();
  sub_224F681B0();
  sub_224F67C94();
  swift_bridgeObjectRetain();
  sub_224F67C94();
  sub_224E69950(v2, v1, v0, 0);
  sub_224F67C94();
  sub_224F67C94();
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t sub_224E69950(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 0xAu)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *sub_224E69974(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FHIRDateParserErrorPosition(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for FHIRDateParserErrorPosition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for FHIRDateParserErrorPosition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FHIRDateParserErrorPosition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FHIRDateParserErrorPosition()
{
  return &type metadata for FHIRDateParserErrorPosition;
}

uint64_t sub_224E69AE4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 0xAu)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for FHIRDateParserError(uint64_t a1)
{
  return sub_224E69950(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for FHIRDateParserError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_224E69AE4(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for FHIRDateParserError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_224E69AE4(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_224E69950(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FHIRDateParserError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_224E69950(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FHIRDateParserError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FHIRDateParserError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_224E69CC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_224E69CD0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FHIRDateParserError()
{
  return &type metadata for FHIRDateParserError;
}

uint64_t storeEnumTagSinglePayload for VCJWTSigningError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_224E69D34 + 4 * byte_224F6E9A5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_224E69D68 + 4 * byte_224F6E9A0[v4]))();
}

uint64_t sub_224E69D68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E69D70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E69D78);
  return result;
}

uint64_t sub_224E69D84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E69D8CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_224E69D90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E69D98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VCJWTSigningError()
{
  return &type metadata for VCJWTSigningError;
}

uint64_t Parameters.resourceType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameters.resourceType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Parameters.resourceType.modify())()
{
  return nullsub_1;
}

uint64_t Parameters.parameter.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Parameters.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parameters.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (v3)
  {
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224DDB550(a1, v3);
    swift_bridgeObjectRelease();
    if (v4)
    {
LABEL_3:
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224F67C34();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_224F68528();
    if (v4)
      goto LABEL_3;
  }
  return sub_224F68528();
}

uint64_t sub_224E69F48()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6574656D61726170;
  if (*v0 != 1)
    v1 = 0x65676175676E616CLL;
  if (*v0)
    return v1;
  else
    return 0x656372756F736572;
}

uint64_t sub_224E69FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_224E6B76C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_224E69FD4()
{
  sub_224E6B1E4();
  return sub_224F685B8();
}

uint64_t sub_224E69FFC()
{
  sub_224E6B1E4();
  return sub_224F685C4();
}

uint64_t Parameters.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  sub_224E6B2C0(0, &qword_2557E19A8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v11 - v6;
  v8 = v1[2];
  v11[2] = v1[3];
  v12 = v8;
  v11[1] = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E6B1E4();
  sub_224F68594();
  v17 = 0;
  v9 = v13;
  sub_224F68348();
  if (!v9)
  {
    v14 = v12;
    v16 = 1;
    sub_224E6B228();
    sub_224E6B354(&qword_2557E19C0, (uint64_t (*)(void))sub_224E6B27C, MEMORY[0x24BEE12A0]);
    sub_224F68330();
    v15 = 2;
    sub_224F68300();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Parameters.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDB550((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t Parameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  ValueMetadata *v24;

  v22 = a2;
  sub_224E6B2C0(0, &qword_2557E19D0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - v7;
  v24 = &type metadata for Parameters;
  sub_224E6B31C();
  sub_224F67BC8();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E6B1E4();
  sub_224F6857C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v9 = v6;
    LOBYTE(v24) = 0;
    v10 = v5;
    v12 = sub_224F682AC();
    v14 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_224E6B228();
    v23 = 1;
    sub_224E6B354(&qword_2557E19E0, (uint64_t (*)(void))sub_224E6B3B8, MEMORY[0x24BEE12D0]);
    sub_224F68294();
    v21 = v12;
    v15 = v24;
    LOBYTE(v24) = 2;
    swift_bridgeObjectRetain();
    v16 = sub_224F68264();
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
    swift_bridgeObjectRetain();
    v19 = v22;
    *v22 = v21;
    v19[1] = v14;
    v19[2] = (uint64_t)v15;
    v19[3] = v16;
    v19[4] = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E6A54C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Parameters.init(from:)(a1, a2);
}

uint64_t sub_224E6A560(_QWORD *a1)
{
  return Parameters.encode(to:)(a1);
}

uint64_t sub_224E6A57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_224F68528();
    if (v2)
      goto LABEL_3;
LABEL_5:
    sub_224F68528();
    return sub_224F6854C();
  }
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDB550((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_5;
LABEL_3:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t Parameters.asSignedClinicalDataProcessingContexts(sourceURL:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  char *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[13];
  __int128 v65;
  _OWORD v66[14];
  uint64_t v67;
  const char *v68;

  v52 = a1;
  sub_224E5AE10();
  MEMORY[0x24BDAC7A8](v5);
  v57 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_224F67BBC();
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v53 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + 16);
  if (v9 && (v10 = *(_QWORD *)(v9 + 16)) != 0)
  {
    v56 = a2;
    v58 = v3;
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v67 = MEMORY[0x24BEE4AF8];
    v51 = swift_bridgeObjectRetain();
    v12 = (_OWORD *)(v51 + 56);
    v68 = "HealthRecordsExtraction";
    do
    {
      v17 = *((_QWORD *)v12 - 2);
      if (v17)
      {
        if ((v59 = *(v12 - 1),
              v18 = *((_QWORD *)v12 - 3),
              v19 = *v12,
              v61 = v12[1],
              v62 = v19,
              v60 = v12[2],
              v18 == 0xD000000000000014)
          && v17 == 0x8000000224F81850
          || (sub_224F683CC() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v66[0] = v11;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_224E53888(0, v11[2] + 1, 1);
            v11 = *(_QWORD **)&v66[0];
          }
          v13 = v59;
          v15 = v11[2];
          v14 = v11[3];
          if (v15 >= v14 >> 1)
          {
            sub_224E53888(v14 > 1, v15 + 1, 1);
            v13 = v59;
            v11 = *(_QWORD **)&v66[0];
          }
          v11[2] = v15 + 1;
          v16 = &v11[9 * v15];
          v16[4] = v18;
          *(_OWORD *)(v16 + 5) = v13;
          *(_OWORD *)(v16 + 7) = v62;
          *(_OWORD *)(v16 + 9) = v61;
          *(_OWORD *)(v16 + 11) = v60;
        }
      }
      v12 = (_OWORD *)((char *)v12 + 72);
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v22 = v11[2];
    if (v22)
    {
      v23 = v11[5];
      v24 = v11[7];
      v25 = v11[9];
      v27 = v11[11];
      v26 = (const char *)v11[12];
      v28 = v58;
      if (v24)
      {
        v29 = 48;
        do
        {
          v30 = HIBYTE(v24) & 0xF;
          if ((v24 & 0x2000000000000000) == 0)
            v30 = *(_QWORD *)((char *)v11 + v29) & 0xFFFFFFFFFFFFLL;
          if (!v30)
            break;
          v50 = (_QWORD *)((char *)v11 + v29);
          v51 = v29;
          *(_QWORD *)&v62 = v22;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_224E55B58((uint64_t)v66);
          if (v28)
            goto LABEL_35;
          v68 = v26;
          *(_QWORD *)&v59 = v27;
          v64[10] = v66[10];
          v64[11] = v66[11];
          v64[12] = v66[12];
          v65 = v66[13];
          v64[6] = v66[6];
          v64[7] = v66[7];
          v64[8] = v66[8];
          v64[9] = v66[9];
          v64[2] = v66[2];
          v64[3] = v66[3];
          v64[4] = v66[4];
          v64[5] = v66[5];
          v64[0] = v66[0];
          v64[1] = v66[1];
          v63 = v66[0];
          swift_bridgeObjectRetain();
          sub_224F67C94();
          swift_bridgeObjectRetain();
          sub_224F67C94();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v61 = v25;
          *(_QWORD *)&v60 = v24;
          if (*((_QWORD *)&v65 + 1))
          {
            swift_bridgeObjectRetain();
            sub_224F67C94();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            sub_224F67C94();
            swift_bridgeObjectRelease();
          }
          v31 = v53;
          sub_224F67BB0();
          v32 = sub_224F67B8C();
          v34 = v33;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v54 + 8))(v31, v55);
          if (v34 >> 60 == 15)
          {
            sub_224E573F8();
            swift_allocError();
            *(_QWORD *)v46 = 1;
            *(_BYTE *)(v46 + 8) = 3;
            swift_willThrow();
            sub_224E5AE64((uint64_t)v64);
            swift_release();
            goto LABEL_36;
          }
          v49 = v23;
          v58 = 0;
          v35 = sub_224F675D4();
          v36 = *(_QWORD *)(v35 - 8);
          v37 = v57;
          (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v57, v52, v35);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v35);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v48 = v32;
          v47 = sub_224F67640();
          v38 = 0;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v37, 1, v35) != 1)
          {
            v39 = v57;
            v38 = (void *)sub_224F67580();
            (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
          }
          v40 = (void *)sub_224F67B5C();
          swift_bridgeObjectRelease();
          if (v56)
          {
            sub_224E54308();
            v41 = (void *)sub_224F67AE4();
            swift_bridgeObjectRelease();
          }
          else
          {
            v41 = 0;
          }
          v28 = v58;
          v42 = objc_allocWithZone(MEMORY[0x24BE48998]);
          v43 = (void *)v47;
          v44 = objc_msgSend(v42, sel_initWithRawData_sourceType_sourceURL_issuerIdentifier_signingKeyID_JWKSData_JWKSOutcome_metadata_, v47, 1, v38, v40, 0, 0, 0, v41);
          sub_224E58810(v48, v34);

          sub_224E5AE64((uint64_t)v64);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v45 = v44;
          MEMORY[0x22768DE24]();
          if (*(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_224F67D90();
          sub_224F67D9C();
          sub_224F67D84();

          v22 = v62 - 1;
          if ((_QWORD)v62 == 1)
            goto LABEL_37;
          v29 = v51 + 72;
          v23 = v50[8];
          v24 = v50[10];
          v25 = v50[12];
          v27 = v50[14];
          v26 = (const char *)v50[15];
        }
        while (v24);
      }
      type metadata accessor for HDHRExtractionError(0);
      *(_QWORD *)&v64[0] = 203;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_224E6AE24(MEMORY[0x24BEE4AF8]);
      sub_224E6B3FC();
      sub_224F6752C();
      swift_willThrow();
LABEL_35:
      swift_release();
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
LABEL_37:
      swift_release();
      return v67;
    }
  }
  else
  {
    type metadata accessor for HDHRExtractionError(0);
    *(_QWORD *)&v64[0] = 202;
    sub_224E6AE24(MEMORY[0x24BEE4AF8]);
    sub_224E6B3FC();
    sub_224F6752C();
    return swift_willThrow();
  }
}

unint64_t sub_224E6AE24(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_224E6B8E4();
  v2 = sub_224F681F8();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_224E6B94C(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_224E6AF48(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_224E543B4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_224E6AF48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224F68510();
  sub_224F67C34();
  v4 = sub_224F6854C();
  return sub_224E6AFAC(a1, a2, v4);
}

unint64_t sub_224E6AFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_224F683CC() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_224F683CC() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_224F683CC() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

BOOL _s23HealthRecordsExtraction10ParametersV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;
  uint64_t v11;
  char v12;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = sub_224F683CC(), result = 0, (v9 & 1) != 0))
  {
    if (v2)
    {
      if (!v6)
        return 0;
      swift_bridgeObjectRetain();
      v11 = swift_bridgeObjectRetain();
      v12 = sub_224DD6674(v11, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
        return 0;
    }
    else if (v6)
    {
      return 0;
    }
    if (v4)
      return v7 && (v3 == v5 && v4 == v7 || (sub_224F683CC() & 1) != 0);
    return !v7;
  }
  return result;
}

unint64_t sub_224E6B1E4()
{
  unint64_t result;

  result = qword_2557E19B0;
  if (!qword_2557E19B0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6EC18, &type metadata for Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E19B0);
  }
  return result;
}

void sub_224E6B228()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E19B8)
  {
    v0 = sub_224F67DB4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E19B8);
  }
}

unint64_t sub_224E6B27C()
{
  unint64_t result;

  result = qword_2557E19C8;
  if (!qword_2557E19C8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Parameter, &type metadata for Parameter);
    atomic_store(result, (unint64_t *)&qword_2557E19C8);
  }
  return result;
}

void sub_224E6B2C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224E6B1E4();
    v7 = a3(a1, &type metadata for Parameters.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_224E6B31C()
{
  unint64_t result;

  result = qword_2557E19D8;
  if (!qword_2557E19D8)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E19D8);
  }
  return result;
}

uint64_t sub_224E6B354(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_224E6B228();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x22768ED24](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_224E6B3B8()
{
  unint64_t result;

  result = qword_2557E19E8;
  if (!qword_2557E19E8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Parameter, &type metadata for Parameter);
    atomic_store(result, (unint64_t *)&qword_2557E19E8);
  }
  return result;
}

unint64_t sub_224E6B3FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2557E0290;
  if (!qword_2557E0290)
  {
    type metadata accessor for HDHRExtractionError(255);
    result = MEMORY[0x22768ED24](&unk_224F6A888, v1);
    atomic_store(result, (unint64_t *)&qword_2557E0290);
  }
  return result;
}

unint64_t sub_224E6B444(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224E6B478();
  a1[2] = sub_224E6B4BC();
  result = sub_224E6B500();
  a1[3] = result;
  return result;
}

unint64_t sub_224E6B478()
{
  unint64_t result;

  result = qword_2557E19F0;
  if (!qword_2557E19F0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Parameters, &type metadata for Parameters);
    atomic_store(result, (unint64_t *)&qword_2557E19F0);
  }
  return result;
}

unint64_t sub_224E6B4BC()
{
  unint64_t result;

  result = qword_2557E19F8;
  if (!qword_2557E19F8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Parameters, &type metadata for Parameters);
    atomic_store(result, (unint64_t *)&qword_2557E19F8);
  }
  return result;
}

unint64_t sub_224E6B500()
{
  unint64_t result;

  result = qword_2557E1A00;
  if (!qword_2557E1A00)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Parameters, &type metadata for Parameters);
    atomic_store(result, (unint64_t *)&qword_2557E1A00);
  }
  return result;
}

unint64_t sub_224E6B544(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_224E6B478();
  result = sub_224E6B4BC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_224E6B574()
{
  unint64_t result;

  result = qword_2557E1A08;
  if (!qword_2557E1A08)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for Parameters, &type metadata for Parameters);
    atomic_store(result, (unint64_t *)&qword_2557E1A08);
  }
  return result;
}

ValueMetadata *type metadata accessor for Parameters()
{
  return &type metadata for Parameters;
}

uint64_t storeEnumTagSinglePayload for Parameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_224E6B614 + 4 * byte_224F6EA35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_224E6B648 + 4 * byte_224F6EA30[v4]))();
}

uint64_t sub_224E6B648(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E6B650(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E6B658);
  return result;
}

uint64_t sub_224E6B664(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E6B66CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_224E6B670(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E6B678(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Parameters.CodingKeys()
{
  return &type metadata for Parameters.CodingKeys;
}

unint64_t sub_224E6B698()
{
  unint64_t result;

  result = qword_2557E1A10;
  if (!qword_2557E1A10)
  {
    result = MEMORY[0x22768ED24](&unk_224F6EBF0, &type metadata for Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1A10);
  }
  return result;
}

unint64_t sub_224E6B6E0()
{
  unint64_t result;

  result = qword_2557E1A18;
  if (!qword_2557E1A18)
  {
    result = MEMORY[0x22768ED24](&unk_224F6EB60, &type metadata for Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1A18);
  }
  return result;
}

unint64_t sub_224E6B728()
{
  unint64_t result;

  result = qword_2557E1A20;
  if (!qword_2557E1A20)
  {
    result = MEMORY[0x22768ED24](&unk_224F6EB88, &type metadata for Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1A20);
  }
  return result;
}

uint64_t sub_224E6B76C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F736572 && a2 == 0xEC00000065707954;
  if (v2 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574656D61726170 && a2 == 0xE900000000000072 || (sub_224F683CC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_224F683CC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_224E6B8E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2557E1560)
  {
    v0 = sub_224F68204();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2557E1560);
  }
}

uint64_t sub_224E6B94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_224E5373C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

HealthRecordsExtraction::KeyManagementAlgorithm_optional __swiftcall KeyManagementAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  HealthRecordsExtraction::KeyManagementAlgorithm_optional result;
  char v5;

  v2 = v1;
  v3 = sub_224F68240();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t KeyManagementAlgorithm.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x53452D48444345;
  else
    return 0x5045414F2D415352;
}

uint64_t sub_224E6BA2C(char *a1, char *a2)
{
  return sub_224F16B2C(*a1, *a2);
}

unint64_t sub_224E6BA3C()
{
  unint64_t result;

  result = qword_2557E1A28;
  if (!qword_2557E1A28)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for KeyManagementAlgorithm, &type metadata for KeyManagementAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E1A28);
  }
  return result;
}

uint64_t sub_224E6BA80()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224E6BB00()
{
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E6BB5C()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

HealthRecordsExtraction::KeyManagementAlgorithm_optional sub_224E6BBD8(Swift::String *a1)
{
  return KeyManagementAlgorithm.init(rawValue:)(*a1);
}

void sub_224E6BBE4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x5045414F2D415352;
  if (*v1)
    v2 = 0x53452D48444345;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_224E6BC24()
{
  sub_224E6BD98();
  return sub_224F67D48();
}

uint64_t sub_224E6BC80()
{
  sub_224E6BD98();
  return sub_224F67D3C();
}

uint64_t storeEnumTagSinglePayload for KeyManagementAlgorithm(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_224E6BD18 + 4 * byte_224F6EC75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_224E6BD4C + 4 * byte_224F6EC70[v4]))();
}

uint64_t sub_224E6BD4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E6BD54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E6BD5CLL);
  return result;
}

uint64_t sub_224E6BD68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E6BD70);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_224E6BD74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E6BD7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyManagementAlgorithm()
{
  return &type metadata for KeyManagementAlgorithm;
}

unint64_t sub_224E6BD98()
{
  unint64_t result;

  result = qword_2557E1A30;
  if (!qword_2557E1A30)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for KeyManagementAlgorithm, &type metadata for KeyManagementAlgorithm);
    atomic_store(result, (unint64_t *)&qword_2557E1A30);
  }
  return result;
}

void **sub_224E6BDDC(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  id v42;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v6 = a1;
    v7 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
    v8 = (char *)v6 + v7;
    v9 = (char *)a2 + v7;
    *(_OWORD *)v8 = *(_OWORD *)((char *)a2 + v7);
    *((_QWORD *)v8 + 2) = *(void **)((char *)a2 + v7 + 16);
    v10 = (int *)type metadata accessor for ExtractionContext();
    v11 = v10[7];
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = sub_224F67760();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v16 = v4;
    v15(v12, v13, v14);
    v17 = v10[8];
    v18 = &v8[v17];
    v19 = &v9[v17];
    v20 = sub_224F675D4();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_224E5AE10();
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = v10[9];
    v24 = &v8[v23];
    v25 = &v9[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    *(_QWORD *)&v8[v10[10]] = *(_QWORD *)&v9[v10[10]];
    *(_QWORD *)&v8[v10[11]] = *(_QWORD *)&v9[v10[11]];
    v27 = a3[5];
    v28 = a3[6];
    v29 = (void **)((char *)v6 + v27);
    v30 = (void **)((char *)a2 + v27);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = (void **)((char *)v6 + v28);
    v33 = (void **)((char *)a2 + v28);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    v35 = a3[7];
    v36 = a3[8];
    v37 = *(void **)((char *)a2 + v35);
    *(void **)((char *)v6 + v35) = v37;
    v38 = (uint64_t *)((char *)v6 + v36);
    v39 = (char *)a2 + v36;
    v40 = *(uint64_t *)((char *)a2 + v36);
    v41 = *((_QWORD *)v39 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = v37;
    sub_224DDE970(v40, v41);
    *v38 = v40;
    v38[1] = v41;
  }
  return v6;
}

uint64_t sub_224E6BFE4(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (char *)a1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v5 = type metadata accessor for ExtractionContext();
  v6 = &v4[*(int *)(v5 + 28)];
  v7 = sub_224F67760();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = &v4[*(int *)(v5 + 32)];
  v9 = sub_224F675D4();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return sub_224DDE9B4(*(uint64_t *)((char *)a1 + *(int *)(a2 + 32)), *(unint64_t *)((char *)a1 + *(int *)(a2 + 32) + 8));
}

void **sub_224E6C104(void **a1, void **a2, int *a3)
{
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  id v41;

  v5 = *a2;
  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
  v9 = (int *)type metadata accessor for ExtractionContext();
  v10 = v9[7];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_224F67760();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v15 = v5;
  v14(v11, v12, v13);
  v16 = v9[8];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = sub_224F675D4();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_224E5AE10();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = v9[9];
  v23 = &v7[v22];
  v24 = &v8[v22];
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = v25;
  *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
  *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
  v26 = a3[5];
  v27 = a3[6];
  v28 = (void **)((char *)a1 + v26);
  v29 = (void **)((char *)a2 + v26);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = (void **)((char *)a1 + v27);
  v32 = (void **)((char *)a2 + v27);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = a3[7];
  v35 = a3[8];
  v36 = *(void **)((char *)a2 + v34);
  *(void **)((char *)a1 + v34) = v36;
  v37 = (uint64_t *)((char *)a1 + v35);
  v38 = (char *)a2 + v35;
  v39 = *(uint64_t *)((char *)a2 + v35);
  v40 = *((_QWORD *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v41 = v36;
  sub_224DDE970(v39, v40);
  *v37 = v39;
  v37[1] = v40;
  return a1;
}

void **sub_224E6C2E4(void **a1, void **a2, int *a3)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void **v47;

  v5 = *a2;
  v6 = *a1;
  *a1 = *a2;
  v7 = v5;

  v8 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v9 = (void **)((char *)a1 + v8);
  v47 = a2;
  v10 = (char *)a2 + v8;
  *v9 = *(void **)((char *)a2 + v8);
  v9[1] = *(void **)((char *)a2 + v8 + 8);
  v9[2] = *(void **)((char *)a2 + v8 + 16);
  v11 = (int *)type metadata accessor for ExtractionContext();
  v12 = v11[7];
  v13 = (char *)v9 + v12;
  v14 = &v10[v12];
  v15 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = v11[8];
  v17 = (char *)v9 + v16;
  v18 = &v10[v16];
  v19 = sub_224F675D4();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    sub_224E5AE10();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v25 = v11[9];
  v26 = (_QWORD *)((char *)v9 + v25);
  v27 = &v10[v25];
  *v26 = *(_QWORD *)v27;
  v26[1] = *((_QWORD *)v27 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v9 + v11[10]) = *(_QWORD *)&v10[v11[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v9 + v11[11]) = *(_QWORD *)&v10[v11[11]];
  swift_retain();
  swift_release();
  v28 = a3[5];
  v29 = (void **)((char *)a1 + v28);
  v30 = (void **)((char *)v47 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = a3[6];
  v32 = (void **)((char *)a1 + v31);
  v33 = (void **)((char *)v47 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a3[7];
  v35 = *(void **)((char *)v47 + v34);
  v36 = *(void **)((char *)a1 + v34);
  *(void **)((char *)a1 + v34) = v35;
  v37 = v35;

  v38 = a3[8];
  v39 = (uint64_t *)((char *)a1 + v38);
  v40 = (uint64_t *)((char *)v47 + v38);
  v41 = *v40;
  v42 = v40[1];
  sub_224DDE970(*v40, v42);
  v43 = *v39;
  v44 = v39[1];
  *v39 = v41;
  v39[1] = v42;
  sub_224DDE9B4(v43, v44);
  return a1;
}

_QWORD *sub_224E6C574(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 2) = *(_QWORD *)((char *)a2 + v6 + 16);
  v9 = (int *)type metadata accessor for ExtractionContext();
  v10 = v9[7];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = v9[8];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = sub_224F675D4();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_224E5AE10();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)&v7[v9[9]] = *(_OWORD *)&v8[v9[9]];
  *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
  *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
  v20 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  v21 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
  return a1;
}

void **sub_224E6C6EC(void **a1, void **a2, int *a3)
{
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void **v45;

  v5 = *a1;
  *a1 = *a2;

  v6 = *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v7 = (char *)a1 + v6;
  v45 = a2;
  v8 = (char *)a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 2) = *(void **)((char *)a2 + v6 + 16);
  v9 = (int *)type metadata accessor for ExtractionContext();
  v10 = v9[7];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_224F67760();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = v9[8];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = sub_224F675D4();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    sub_224E5AE10();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = v9[9];
  v24 = &v7[v23];
  v25 = &v8[v23];
  v27 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = v27;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
  swift_release();
  v28 = a3[5];
  v29 = (void **)((char *)a1 + v28);
  v30 = (uint64_t *)((char *)v45 + v28);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  v33 = a3[6];
  v34 = (void **)((char *)a1 + v33);
  v35 = (uint64_t *)((char *)v45 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  v38 = a3[7];
  v39 = *(void **)((char *)a1 + v38);
  *(void **)((char *)a1 + v38) = *(void **)((char *)v45 + v38);

  v40 = a3[8];
  v41 = *(uint64_t *)((char *)a1 + v40);
  v42 = *(unint64_t *)((char *)a1 + v40 + 8);
  *(_OWORD *)((char *)a1 + v40) = *(_OWORD *)((char *)v45 + v40);
  sub_224DDE9B4(v41, v42);
  return a1;
}

uint64_t sub_224E6C91C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E6C928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for RecordExtractionContext();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_224E6C9A8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_224E6C9B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for RecordExtractionContext();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FHIRExtractionContext()
{
  uint64_t result;

  result = qword_2557E1A90;
  if (!qword_2557E1A90)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_224E6CA6C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RecordExtractionContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_224E6CB00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_224E5AE10();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - v7;
  v9 = type metadata accessor for FHIRExtractionContext();
  v21 = a1;
  v10 = v1 + *(int *)(type metadata accessor for RecordExtractionContext() + 20);
  v11 = type metadata accessor for ExtractionContext();
  sub_224E5AF70(v10 + *(int *)(v11 + 32), (uint64_t)v8);
  v12 = sub_224F675D4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v8, 1, v12) == 1)
  {
    swift_bridgeObjectRetain();
    sub_224E6CD4C((uint64_t)v8);
    v15 = (uint64_t *)(v1 + *(int *)(v9 + 20));
    v16 = v15[1];
    v22 = *v15;
    v23 = v16;
    swift_bridgeObjectRetain();
    sub_224F67C94();
    swift_bridgeObjectRetain();
    sub_224F67C94();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_224F675B0();
    v17 = v14(v6, 1, v12);
    v18 = v21;
    if (v17 == 1)
    {
      sub_224F67574();
      swift_bridgeObjectRelease();
      return sub_224E6CD4C((uint64_t)v6);
    }
    else
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v18, v6, v12);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v21, v8, v12);
    swift_bridgeObjectRetain();
    sub_224F6758C();
    sub_224F6758C();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_224E6CD4C(uint64_t a1)
{
  uint64_t v2;

  sub_224E5AE10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Array<A>.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_224E6CDA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  if ((sub_224F67E2C() & 1) != 0)
  {
    v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
LABEL_5:
    v4 = 1;
    goto LABEL_6;
  }
  v2 = *(uint64_t **)(v0 + 32);
  v3 = *v2;
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  if (v3 >= MEMORY[0x22768DE78](v2[1], v1))
    goto LABEL_5;
  **(_QWORD **)(v0 + 32) = v3 + 1;
  sub_224F67DC0();
  v4 = 0;
LABEL_6:
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(*(_QWORD *)(v0 + 16), v4, 1, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_224E6CE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_224E6CEBC;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t sub_224E6CEBC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_224E6CF08()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_224E6CF8C;
  return sub_224F67E08();
}

uint64_t sub_224E6CF8C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t Array<A>.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_224E6CFE4()
{
  return MEMORY[0x24BEE40A8];
}

void sub_224E6CFF0()
{
  JUMPOUT(0x22768ED24);
}

uint64_t sub_224E6D000@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  Array<A>.makeAsyncIterator()(*v1, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E6D028()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for Array<A>.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Array<A>.AsyncIterator);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x22768ECC4](a1, v6, a5);
}

uint64_t dispatch thunk of SignatureVerifiable.algorithm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SignatureVerifiable.signingKeyID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SignatureVerifiable.signature()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SignatureVerifiable.signatureMessage()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SignatureVerifiable.signatureStatus(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of SignatureVerifiable.verifySignature(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_224E6D0C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v8;

  v8 = *a1;
  (*(void (**)(uint64_t *))(a3 + 48))(&v8);
  if (qword_2557E0128 != -1)
    swift_once();
  v3 = sub_224F679B8();
  __swift_project_value_buffer(v3, (uint64_t)qword_2557FC958);
  v4 = sub_224F679AC();
  v5 = sub_224F67EEC();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_224DAC000, v4, v5, "SignedClinicalDataSignatureVerifiable: signature appears to be valid", v6, 2u);
    MEMORY[0x22768EDE4](v6, -1, -1);
  }

  return 2;
}

uint64_t SignedClinicalDataSubject.FHIRBundle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    if (v3)
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDE3B0(a1, v3);
      goto LABEL_6;
    }
LABEL_8:
    sub_224F68528();
    if (v4)
      goto LABEL_7;
    return sub_224F68528();
  }
  if (!v3)
    goto LABEL_8;
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE624(a1, v3);
LABEL_6:
  swift_bridgeObjectRelease();
  if (v4)
  {
LABEL_7:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    return swift_bridgeObjectRelease();
  }
  return sub_224F68528();
}

uint64_t SignedClinicalDataSubject.FHIRBundle.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    if (v1)
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDE3B0((uint64_t)v5, v1);
      goto LABEL_6;
    }
LABEL_8:
    sub_224F68528();
    if (v2)
      goto LABEL_7;
LABEL_9:
    sub_224F68528();
    return sub_224F6854C();
  }
  if (!v1)
    goto LABEL_8;
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE624((uint64_t)v5, v1);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_9;
LABEL_7:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224E6D948(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
    return ModelsR4.Bundle.hash(into:)(a1);
  else
    return ModelsDSTU2.Bundle.hash(into:)(a1);
}

uint64_t sub_224E6D9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  sub_224F68510();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    if (v1)
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDE3B0((uint64_t)v5, v1);
      goto LABEL_6;
    }
LABEL_8:
    sub_224F68528();
    if (v2)
      goto LABEL_7;
LABEL_9:
    sub_224F68528();
    return sub_224F6854C();
  }
  if (!v1)
    goto LABEL_8;
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE624((uint64_t)v5, v1);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v2)
    goto LABEL_9;
LABEL_7:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224E6DAC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_224F16A14(*a1, *a2);
}

uint64_t sub_224E6DACC()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224E6DB6C()
{
  sub_224F67C34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_224E6DBE8()
{
  sub_224F68510();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224E6DC84@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224E6F79C();
  *a1 = result;
  return result;
}

void sub_224E6DCB0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE200000000000000;
  v4 = 0xEB000000006E6F69;
  v5 = 0x7372655672696866;
  if (v2 != 1)
  {
    v5 = 0x646E754272696866;
    v4 = 0xEA0000000000656CLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 25705;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_224E6DD10()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7372655672696866;
  if (*v0 != 1)
    v1 = 0x646E754272696866;
  if (*v0)
    return v1;
  else
    return 25705;
}

uint64_t sub_224E6DD6C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_224E6F79C();
  *a1 = result;
  return result;
}

uint64_t sub_224E6DD90()
{
  sub_224E6EE3C();
  return sub_224F685B8();
}

uint64_t sub_224E6DDB8()
{
  sub_224E6EE3C();
  return sub_224F685C4();
}

id SignedClinicalDataSubject.fhirVersion.getter()
{
  id *v0;

  return *v0;
}

uint64_t SignedClinicalDataSubject.fhirBundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  return sub_224E5AC94();
}

__n128 SignedClinicalDataSubject.init(fhirVersion:fhirBundle:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  __n128 result;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  *(_QWORD *)a3 = a1;
  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 40) = v3;
  *(_BYTE *)(a3 + 48) = v4;
  return result;
}

void SignedClinicalDataSubject.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t *v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  sub_224E6EF08(0, &qword_2557E1B70, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v36 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E6EE3C();
  sub_224F6857C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return;
  }
  LOBYTE(v41) = 1;
  v10 = sub_224F682AC();
  v12 = v11;
  sub_224E5451C(0, &qword_2557E1B80);
  swift_bridgeObjectRetain();
  v13 = sub_224E6E284();
  v37 = v10;
  v38 = a2;
  v40 = v13;
  v39 = objc_msgSend(v40, sel_FHIRRelease);
  v14 = sub_224F67B80();
  v16 = v15;
  if (v14 == sub_224F67B80() && v16 == v17)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  v19 = sub_224F683CC();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    v46 = 2;
    sub_224E6EEC4();
    sub_224F682DC();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v28 = 0;
    v29 = v41;
    v30 = v42;
    v31 = v43;
    v32 = v44;
    goto LABEL_17;
  }
  v39 = objc_msgSend(v40, sel_FHIRRelease);
  v20 = sub_224F67B80();
  v22 = v21;
  if (v20 == sub_224F67B80() && v22 == v23)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v25 = sub_224F683CC();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      sub_224E6EE80();
      swift_allocError();
      *v26 = v37;
      v26[1] = v12;
      swift_willThrow();
      v27 = v40;

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

      return;
    }
  }
  swift_bridgeObjectRelease();
  v46 = 2;
  sub_224DFBD98();
  sub_224F682DC();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v29 = v41;
  v30 = v42;
  v31 = v43;
  v32 = v44;
  v28 = 1;
LABEL_17:
  v33 = v45;
  v34 = v40;
  sub_224E5AC94();

  v35 = v38;
  *v38 = v34;
  v35[1] = v29;
  v35[2] = v30;
  v35[3] = v31;
  v35[4] = v32;
  v35[5] = v33;
  *((_BYTE *)v35 + 48) = v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  sub_224E5AF3C();
}

id sub_224E6E284()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v5[2];

  v5[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = (void *)sub_224F67B5C();
  swift_bridgeObjectRelease();
  v5[0] = 0;
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_versionFromVersionString_error_, v0, v5);

  if (v1)
  {
    v2 = v5[0];
  }
  else
  {
    v3 = v5[0];
    sub_224F67544();

    swift_willThrow();
  }
  return v1;
}

uint64_t SignedClinicalDataSubject.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;

  sub_224E6EF08(0, &qword_2557E1B98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - v7;
  v10 = *(void **)v1;
  v9 = *(_QWORD *)(v1 + 8);
  v24 = *(_QWORD *)(v1 + 16);
  v25 = v9;
  v11 = *(_QWORD *)(v1 + 24);
  v22 = *(_QWORD *)(v1 + 32);
  v23 = v11;
  v21 = *(_QWORD *)(v1 + 40);
  v31 = *(unsigned __int8 *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224E6EE3C();
  sub_224F68594();
  v12 = objc_msgSend(v10, sel_description);
  sub_224F67B80();

  LOBYTE(v26) = 1;
  sub_224F68300();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v20 = v6;
    v14 = v24;
    v15 = v25;
    v16 = v22;
    v17 = v23;
    v18 = v21;
    swift_bridgeObjectRelease();
    v26 = v15;
    v27 = v14;
    v28 = v17;
    v29 = v16;
    v30 = v18;
    v32 = 2;
    if ((v31 & 1) != 0)
      sub_224DFBDDC();
    else
      sub_224E6EF64();
    sub_224F68330();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v8, v5);
  }
}

uint64_t SignedClinicalDataSubject.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_BYTE *)(v1 + 48);
  v6 = *(id *)v1;
  sub_224F67F34();

  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    if (v3)
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDE3B0(a1, v3);
      goto LABEL_6;
    }
LABEL_8:
    sub_224F68528();
    if (v4)
      goto LABEL_7;
    return sub_224F68528();
  }
  if (!v3)
    goto LABEL_8;
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE624(a1, v3);
LABEL_6:
  swift_bridgeObjectRelease();
  if (v4)
  {
LABEL_7:
    sub_224F68528();
    swift_bridgeObjectRetain();
    sub_224F67C34();
    return swift_bridgeObjectRelease();
  }
  return sub_224F68528();
}

uint64_t static SignedClinicalDataSubject.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[5];
  char v17;
  uint64_t v18[5];
  char v19;

  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 48);
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1BA8);
  if ((sub_224F67F28() & 1) != 0)
  {
    v18[0] = v15;
    v18[1] = v14;
    v18[2] = v13;
    v18[3] = v12;
    v18[4] = v2;
    v19 = v3;
    v16[0] = v4;
    v16[1] = v6;
    v16[2] = v5;
    v16[3] = v7;
    v16[4] = v8;
    v17 = v9;
    v10 = _s23HealthRecordsExtraction25SignedClinicalDataSubjectV10FHIRBundleO2eeoiySbAE_AEtFZ_0(v18, v16);
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t SignedClinicalDataSubject.hashValue.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  id v5;
  _BYTE v7[72];

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_BYTE *)(v0 + 48);
  sub_224F68510();
  v5 = v1;
  sub_224F67F34();

  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    if (v2)
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDE3B0((uint64_t)v7, v2);
      goto LABEL_6;
    }
LABEL_8:
    sub_224F68528();
    if (v3)
      goto LABEL_7;
LABEL_9:
    sub_224F68528();
    return sub_224F6854C();
  }
  if (!v2)
    goto LABEL_8;
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE624((uint64_t)v7, v2);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_9;
LABEL_7:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

void sub_224E6E89C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  SignedClinicalDataSubject.init(from:)(a1, a2);
}

uint64_t sub_224E6E8B0(_QWORD *a1)
{
  return SignedClinicalDataSubject.encode(to:)(a1);
}

uint64_t sub_224E6E8CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  id v5;
  _BYTE v7[72];

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_BYTE *)(v0 + 48);
  sub_224F68510();
  v5 = v1;
  sub_224F67F34();

  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    if (v2)
    {
      sub_224F68528();
      swift_bridgeObjectRetain();
      sub_224DDE3B0((uint64_t)v7, v2);
      goto LABEL_6;
    }
LABEL_8:
    sub_224F68528();
    if (v3)
      goto LABEL_7;
LABEL_9:
    sub_224F68528();
    return sub_224F6854C();
  }
  if (!v2)
    goto LABEL_8;
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224DDE624((uint64_t)v7, v2);
LABEL_6:
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_9;
LABEL_7:
  sub_224F68528();
  swift_bridgeObjectRetain();
  sub_224F67C34();
  swift_bridgeObjectRelease();
  return sub_224F6854C();
}

uint64_t sub_224E6E9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[5];
  char v17;
  uint64_t v18[5];
  char v19;

  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 48);
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_224E5451C(0, (unint64_t *)&qword_2557E1BA8);
  if ((sub_224F67F28() & 1) != 0)
  {
    v18[0] = v15;
    v18[1] = v14;
    v18[2] = v13;
    v18[3] = v12;
    v18[4] = v2;
    v19 = v3;
    v16[0] = v4;
    v16[1] = v6;
    v16[2] = v5;
    v16[3] = v7;
    v16[4] = v8;
    v17 = v9;
    v10 = static SignedClinicalDataSubject.FHIRBundle.== infix(_:_:)(v18, v16);
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t _s23HealthRecordsExtraction25SignedClinicalDataSubjectV10FHIRBundleO2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[4];
  v6 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  v10 = a2[4];
  if ((a1[5] & 1) != 0)
  {
    if ((a2[5] & 1) != 0)
    {
      v18 = *a1;
      v19 = v2;
      v20 = v4;
      v21 = v3;
      v22 = v5;
      v13 = v6;
      v14 = v7;
      v15 = v9;
      v16 = v8;
      v17 = v10;
      sub_224E5AC94();
      sub_224E5AC94();
      sub_224E5AC94();
      sub_224E5AC94();
      v11 = _s23HealthRecordsExtraction8ModelsR4V6BundleV2eeoiySbAE_AEtFZ_0(&v18, &v13);
      sub_224E5AF3C();
      sub_224E5AF3C();
      sub_224E5AF3C();
LABEL_7:
      sub_224E5AF3C();
      return v11 & 1;
    }
  }
  else if ((a2[5] & 1) == 0)
  {
    v18 = *a1;
    v19 = v2;
    v20 = v4;
    v21 = v3;
    v22 = v5;
    v13 = v6;
    v14 = v7;
    v15 = v9;
    v16 = v8;
    v17 = v10;
    sub_224E5AC94();
    sub_224E5AC94();
    sub_224E5AC94();
    sub_224E5AC94();
    v11 = static ModelsDSTU2.Bundle.== infix(_:_:)(&v18, &v13);
    sub_224E5AF3C();
    sub_224E5AF3C();
    sub_224E5AF3C();
    goto LABEL_7;
  }
  sub_224E5AC94();
  sub_224E5AC94();
  sub_224E5AF3C();
  sub_224E5AF3C();
  v11 = 0;
  return v11 & 1;
}

unint64_t sub_224E6EE3C()
{
  unint64_t result;

  result = qword_2557E1B78;
  if (!qword_2557E1B78)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F1DC, &type metadata for SignedClinicalDataSubject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1B78);
  }
  return result;
}

unint64_t sub_224E6EE80()
{
  unint64_t result;

  result = qword_2557E1B88;
  if (!qword_2557E1B88)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataSubject.DecodingError, &type metadata for SignedClinicalDataSubject.DecodingError);
    atomic_store(result, (unint64_t *)&qword_2557E1B88);
  }
  return result;
}

unint64_t sub_224E6EEC4()
{
  unint64_t result;

  result = qword_2557E1B90;
  if (!qword_2557E1B90)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Bundle, &type metadata for ModelsDSTU2.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E1B90);
  }
  return result;
}

void sub_224E6EF08(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_224E6EE3C();
    v7 = a3(a1, &type metadata for SignedClinicalDataSubject.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_224E6EF64()
{
  unint64_t result;

  result = qword_2557E1BA0;
  if (!qword_2557E1BA0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for ModelsDSTU2.Bundle, &type metadata for ModelsDSTU2.Bundle);
    atomic_store(result, (unint64_t *)&qword_2557E1BA0);
  }
  return result;
}

unint64_t sub_224E6EFAC()
{
  unint64_t result;

  result = qword_2557E1BB0;
  if (!qword_2557E1BB0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataSubject.FHIRBundle, &type metadata for SignedClinicalDataSubject.FHIRBundle);
    atomic_store(result, (unint64_t *)&qword_2557E1BB0);
  }
  return result;
}

unint64_t sub_224E6EFF0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_224E6F024();
  a1[2] = sub_224E6F068();
  result = sub_224E6F0AC();
  a1[3] = result;
  return result;
}

unint64_t sub_224E6F024()
{
  unint64_t result;

  result = qword_2557E1BB8;
  if (!qword_2557E1BB8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataSubject, &type metadata for SignedClinicalDataSubject);
    atomic_store(result, (unint64_t *)&qword_2557E1BB8);
  }
  return result;
}

unint64_t sub_224E6F068()
{
  unint64_t result;

  result = qword_2557E1BC0;
  if (!qword_2557E1BC0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataSubject, &type metadata for SignedClinicalDataSubject);
    atomic_store(result, (unint64_t *)&qword_2557E1BC0);
  }
  return result;
}

unint64_t sub_224E6F0AC()
{
  unint64_t result;

  result = qword_2557E1BC8;
  if (!qword_2557E1BC8)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataSubject, &type metadata for SignedClinicalDataSubject);
    atomic_store(result, (unint64_t *)&qword_2557E1BC8);
  }
  return result;
}

unint64_t sub_224E6F0F4()
{
  unint64_t result;

  result = qword_2557E1BD0;
  if (!qword_2557E1BD0)
  {
    result = MEMORY[0x22768ED24](&protocol conformance descriptor for SignedClinicalDataSubject, &type metadata for SignedClinicalDataSubject);
    atomic_store(result, (unint64_t *)&qword_2557E1BD0);
  }
  return result;
}

uint64_t destroy for SignedClinicalDataSubject(id *a1)
{

  return sub_224E5AF3C();
}

uint64_t initializeWithCopy for SignedClinicalDataSubject(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  v10 = v3;
  sub_224E5AC94();
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataSubject(uint64_t a1, void **a2)
{
  void **v2;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = a2;
  v4 = *a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *a2;
  v6 = v4;

  v7 = v2[1];
  v8 = v2[2];
  v9 = v2[3];
  v10 = v2[4];
  v11 = v2[5];
  LOBYTE(v2) = *((_BYTE *)v2 + 48);
  sub_224E5AC94();
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = (_BYTE)v2;
  sub_224E5AF3C();
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SignedClinicalDataSubject(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = v6;
  sub_224E5AF3C();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataSubject(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataSubject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataSubject()
{
  return &type metadata for SignedClinicalDataSubject;
}

ValueMetadata *type metadata accessor for SignedClinicalDataSubject.DecodingError()
{
  return &type metadata for SignedClinicalDataSubject.DecodingError;
}

uint64_t destroy for SignedClinicalDataSubject.FHIRBundle()
{
  return sub_224E5AF3C();
}

uint64_t initializeWithCopy for SignedClinicalDataSubject.FHIRBundle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  sub_224E5AC94();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for SignedClinicalDataSubject.FHIRBundle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  sub_224E5AC94();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  sub_224E5AF3C();
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SignedClinicalDataSubject.FHIRBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  sub_224E5AF3C();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignedClinicalDataSubject.FHIRBundle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataSubject.FHIRBundle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_224E6F5D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_224E6F5DC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataSubject.FHIRBundle()
{
  return &type metadata for SignedClinicalDataSubject.FHIRBundle;
}

uint64_t storeEnumTagSinglePayload for SignedClinicalDataSubject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_224E6F644 + 4 * byte_224F6EF05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_224E6F678 + 4 * asc_224F6EF00[v4]))();
}

uint64_t sub_224E6F678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E6F680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x224E6F688);
  return result;
}

uint64_t sub_224E6F694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x224E6F69CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_224E6F6A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_224E6F6A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignedClinicalDataSubject.CodingKeys()
{
  return &type metadata for SignedClinicalDataSubject.CodingKeys;
}

unint64_t sub_224E6F6C8()
{
  unint64_t result;

  result = qword_2557E1BD8;
  if (!qword_2557E1BD8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F1B4, &type metadata for SignedClinicalDataSubject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1BD8);
  }
  return result;
}

unint64_t sub_224E6F710()
{
  unint64_t result;

  result = qword_2557E1BE0;
  if (!qword_2557E1BE0)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F0EC, &type metadata for SignedClinicalDataSubject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1BE0);
  }
  return result;
}

unint64_t sub_224E6F758()
{
  unint64_t result;

  result = qword_2557E1BE8;
  if (!qword_2557E1BE8)
  {
    result = MEMORY[0x22768ED24](&unk_224F6F114, &type metadata for SignedClinicalDataSubject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2557E1BE8);
  }
  return result;
}

uint64_t sub_224E6F79C()
{
  unint64_t v0;

  v0 = sub_224F68240();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t KeyedDecodingContainer.decodeIntOrDouble(to:forKey:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  unsigned int v13;
  uint64_t v14;
  double v15;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD v20[2];
  char *v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  id v27;

  v5 = sub_224F68138();
  v23 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v24 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_224F68144();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_224F682D0();
  if (!v2)
    return v11;
  v27 = v2;
  v12 = v2;
  sub_224E57260();
  if (swift_dynamicCast())
  {
    v13 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
    if (v13 == *MEMORY[0x24BEE26D0])
    {
      v22 = v13;

      (*(void (**)(char *, uint64_t))(v8 + 96))(v10, v7);
      v21 = *(char **)v10;
      sub_224E6FB38();
      v3 = v14;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v24, &v10[*(int *)(v14 + 48)], v5);
      sub_224F682C4();
      if (v15 > -9.22337204e18 && v15 < 9.22337204e18 && v15 == trunc(v15))
      {
        v3 = (uint64_t)v15;
        (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v5);

        return v3;
      }
      swift_allocError();
      v18 = v17;
      v21 = (char *)v17 + *(int *)(v3 + 48);
      *v17 = a2;
      v19 = v24;
      v20[1] = sub_224F68120();
      v25 = 0;
      v26 = 0xE000000000000000;
      sub_224F680E4();
      sub_224F67C94();
      sub_224F6812C();
      sub_224F67C94();
      swift_bridgeObjectRelease();
      sub_224F68114();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v18, v22, v7);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }

  return v3;
}

void sub_224E6FB38()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_2557E1BF0)
  {
    sub_224E6FBA4();
    sub_224F68138();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_2557E1BF0);
  }
}

unint64_t sub_224E6FBA4()
{
  unint64_t result;

  result = qword_2557E1BF8;
  if (!qword_2557E1BF8)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_2557E1BF8);
  }
  return result;
}

double KeyedDecodingContainer.decodeIntOrDouble(to:forKey:)()
{
  void *v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double v9;
  id v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  uint64_t v19;
  id v20;

  v19 = sub_224F68138();
  v2 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_224F68144();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (_QWORD *)((char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_224F682C4();
  if (!v0)
    return v9;
  v20 = v0;
  v10 = v0;
  sub_224E57260();
  if (!swift_dynamicCast())
  {
LABEL_7:

    return v1;
  }
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 88))(v8, v5);
  if (v11 != *MEMORY[0x24BEE26D0])
  {
    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
    goto LABEL_7;
  }
  v18 = v11;

  (*(void (**)(_QWORD *, uint64_t))(v6 + 96))(v8, v5);
  v17[2] = *v8;
  sub_224E6FB38();
  v17[1] = v12;
  v13 = (char *)v8 + *(int *)(v12 + 48);
  v14 = v19;
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v13, v19);
  v16 = sub_224F682D0();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v14);
  v1 = (double)v16;

  return v1;
}

uint64_t sub_224E6FE38()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t result;

  v0 = sub_224F672BC();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8];
  MEMORY[0x24BDAC7A8](v0);
  sub_224F672EC();
  swift_allocObject();
  v2 = sub_224F672E0();
  sub_224DDEA0C(0, &qword_2557E1C98, v1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_224F6DF20;
  sub_224F672A4();
  sub_224F672B0();
  sub_224DDACD4(&qword_2557E1CA0, v1, MEMORY[0x24BDCB2C8]);
  sub_224DDEA0C(0, &qword_2557E1CA8, v1, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_224E72EA0();
  sub_224F68090();
  result = sub_224F672C8();
  qword_2557FC950 = v2;
  return result;
}

void JSON.value.getter()
{
  __asm { BR              X10 }
}

void sub_224E6FFE8(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = MEMORY[0x24BEE1328];
  *(_BYTE *)v2 = a2 & 1;
}

uint64_t JSON.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  int64_t v56;
  __int128 v57;
  __int128 v58;
  unsigned __int8 v59;
  _OWORD v60[3];
  _BYTE v61[20];
  uint64_t v62;
  _OWORD v63[2];

  sub_224E54244(a1, (uint64_t)v61);
  if (!v62)
  {
    sub_224E7249C(a1);
    result = sub_224E7249C((uint64_t)v61);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = 5;
LABEL_10:
    *(_BYTE *)(a2 + 16) = v6;
    return result;
  }
  sub_224E543B4(v61, v63);
  sub_224E537C4((uint64_t)v63, (uint64_t)v61);
  v4 = MEMORY[0x24BEE4AD8];
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_224E7249C(a1);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    *(_QWORD *)a2 = LOBYTE(v60[0]);
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return result;
  }
  sub_224E537C4((uint64_t)v63, (uint64_t)v61);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithLongLong_, *(_QWORD *)&v60[0]);
LABEL_9:
    v8 = v7;
    sub_224E7249C(a1);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = 1;
    goto LABEL_10;
  }
  sub_224E537C4((uint64_t)v63, (uint64_t)v61);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithUnsignedLongLong_, *(_QWORD *)&v60[0]);
    goto LABEL_9;
  }
  sub_224E537C4((uint64_t)v63, (uint64_t)v61);
  type metadata accessor for Decimal(0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v9 = objc_allocWithZone(MEMORY[0x24BDD1518]);
    *(_DWORD *)v61 = v60[0];
    *(_OWORD *)&v61[4] = *(_OWORD *)((char *)v60 + 4);
    v7 = objc_msgSend(v9, sel_initWithDecimal_, v61);
    goto LABEL_9;
  }
  sub_224E537C4((uint64_t)v63, (uint64_t)v61);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, *(double *)v60);
    goto LABEL_9;
  }
  sub_224E537C4((uint64_t)v63, (uint64_t)v61);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_224E7249C(a1);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    *(_OWORD *)a2 = v60[0];
    v6 = 2;
    goto LABEL_10;
  }
  sub_224E537C4((uint64_t)v63, (uint64_t)v61);
  sub_224E54704(0, &qword_2557E1558, v4 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)&v60[0] + 16);
    if (v10)
    {
      v11 = *(_QWORD *)&v60[0] + 32;
      swift_bridgeObjectRetain();
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        sub_224E537C4(v11, (uint64_t)v61);
        sub_224E537C4((uint64_t)v61, (uint64_t)v60);
        JSON.init(_:)(&v58, v60);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
        v14 = v59;
        if (v59 != 255)
        {
          v57 = v58;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v12 = sub_224E56D80(0, v12[2] + 1, 1, v12);
          v16 = v12[2];
          v15 = v12[3];
          if (v16 >= v15 >> 1)
            v12 = sub_224E56D80((_QWORD *)(v15 > 1), v16 + 1, 1, v12);
          v12[2] = v16 + 1;
          v13 = &v12[3 * v16];
          *((_OWORD *)v13 + 2) = v57;
          *((_BYTE *)v13 + 48) = v14;
        }
        v11 += 32;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    sub_224E7249C(a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = 3;
    goto LABEL_10;
  }
  sub_224E537C4((uint64_t)v63, (uint64_t)v61);
  sub_224E546B0(0, &qword_2557E14C0, v4 + 8, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_224E7249C(a1);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = -1;
    goto LABEL_10;
  }
  v17 = 0;
  v18 = *(_QWORD *)&v60[0];
  v55 = *(_QWORD *)&v60[0] + 64;
  v19 = 1 << *(_BYTE *)(*(_QWORD *)&v60[0] + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(*(_QWORD *)&v60[0] + 64);
  v56 = (unint64_t)(v19 + 63) >> 6;
  v51 = *(_QWORD *)&v60[0] + 104;
  v22 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    if (v21)
    {
      v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v24 = v23 | (v17 << 6);
      goto LABEL_33;
    }
    v28 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v28 >= v56)
    {
      v30 = v17;
LABEL_39:
      v21 = 0;
      v17 = v30;
      memset(v60, 0, sizeof(v60));
      goto LABEL_40;
    }
    v29 = *(_QWORD *)(v55 + 8 * v28);
    if (!v29)
    {
      v30 = v17 + 1;
      if (v17 + 2 >= v56)
        goto LABEL_39;
      v29 = *(_QWORD *)(v55 + 8 * (v17 + 2));
      if (v29)
      {
        v28 = v17 + 2;
      }
      else
      {
        v30 = v17 + 2;
        if (v17 + 3 >= v56)
          goto LABEL_39;
        v29 = *(_QWORD *)(v55 + 8 * (v17 + 3));
        if (v29)
        {
          v28 = v17 + 3;
        }
        else
        {
          v28 = v17 + 4;
          v30 = v17 + 3;
          if (v17 + 4 >= v56)
            goto LABEL_39;
          v29 = *(_QWORD *)(v55 + 8 * v28);
          if (!v29)
          {
            while (v56 - 5 != v17)
            {
              v29 = *(_QWORD *)(v51 + 8 * v17++);
              if (v29)
              {
                v28 = v17 + 4;
                goto LABEL_37;
              }
            }
            v30 = v56 - 1;
            goto LABEL_39;
          }
        }
      }
    }
LABEL_37:
    v21 = (v29 - 1) & v29;
    v24 = __clz(__rbit64(v29)) + (v28 << 6);
    v17 = v28;
LABEL_33:
    v25 = *(_QWORD *)(v18 + 56);
    v26 = (_QWORD *)(*(_QWORD *)(v18 + 48) + 16 * v24);
    v27 = v26[1];
    *(_QWORD *)&v60[0] = *v26;
    *((_QWORD *)&v60[0] + 1) = v27;
    sub_224E537C4(v25 + 32 * v24, (uint64_t)&v60[1]);
    swift_bridgeObjectRetain();
LABEL_40:
    sub_224E724F4((uint64_t)v60, (uint64_t)v61, (uint64_t)&unk_2557E1C18, (uint64_t)sub_224E7254C, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_224DDEA0C);
    v31 = *(_QWORD *)&v61[8];
    if (!*(_QWORD *)&v61[8])
    {
      sub_224E7249C(a1);
      swift_release();
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      *(_QWORD *)a2 = v22;
      *(_QWORD *)(a2 + 8) = 0;
      v6 = 4;
      goto LABEL_10;
    }
    v32 = *(_QWORD *)v61;
    sub_224E543B4(&v61[16], v60);
    JSON.init(_:)(&v58, v60);
    v33 = v59;
    if (v59 == 255)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = *((_QWORD *)&v58 + 1);
      v54 = (void *)v58;
      sub_224DFAD38((id)v58, *((uint64_t *)&v58 + 1), v59);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v60[0] = v22;
      v35 = sub_224E533E8(v32, v31);
      v36 = v22[2];
      v37 = (v34 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_73;
      if (v22[3] >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v22 = *(_QWORD **)&v60[0];
          if ((v34 & 1) != 0)
            goto LABEL_54;
        }
        else
        {
          v50 = v34;
          sub_224E72798();
          v22 = *(_QWORD **)&v60[0];
          if ((v50 & 1) != 0)
            goto LABEL_54;
        }
      }
      else
      {
        v49 = v34;
        sub_224E71BA0(v38, isUniquelyReferenced_nonNull_native);
        v39 = sub_224E533E8(v32, v31);
        if ((v49 & 1) != (v40 & 1))
          goto LABEL_75;
        v35 = v39;
        v22 = *(_QWORD **)&v60[0];
        if ((v49 & 1) != 0)
        {
LABEL_54:
          v48 = v22[7] + 24 * v35;
          sub_224DFADCC(*(void **)v48, *(_QWORD *)(v48 + 8), *(_BYTE *)(v48 + 16));
          v44 = v54;
          *(_QWORD *)v48 = v54;
          *(_QWORD *)(v48 + 8) = v53;
          *(_BYTE *)(v48 + 16) = v33;
          v43 = v53;
          goto LABEL_55;
        }
      }
      v22[(v35 >> 6) + 8] |= 1 << v35;
      v41 = (uint64_t *)(v22[6] + 16 * v35);
      *v41 = v32;
      v41[1] = v31;
      v42 = v22[7] + 24 * v35;
      v43 = v53;
      v44 = v54;
      *(_QWORD *)v42 = v54;
      *(_QWORD *)(v42 + 8) = v53;
      *(_BYTE *)(v42 + 16) = v33;
      v45 = v22[2];
      v46 = __OFADD__(v45, 1);
      v47 = v45 + 1;
      if (v46)
        goto LABEL_74;
      v22[2] = v47;
      swift_bridgeObjectRetain();
LABEL_55:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_224DFADB8(v44, v43, v33);
    }
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  result = sub_224F684A4();
  __break(1u);
  return result;
}

uint64_t JSON.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v5;
  unint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  double v11;
  id v12;
  const char *v13;
  double *v14;
  int v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  double v32;
  unint64_t v33;
  unsigned int v34;
  char v35;
  _QWORD v36[3];
  uint64_t v37;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_224F68570();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v36, v37);
    if ((sub_224F68228() & 1) != 0)
    {
      v5 = 0.0;
      v6 = 0;
      v7 = 5;
LABEL_4:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      *(double *)a2 = v5;
      *(_QWORD *)(a2 + 8) = v6;
      *(_BYTE *)(a2 + 16) = v7;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
    __swift_project_boxed_opaque_existential_1(v36, v37);
    sub_224E70FB4(MEMORY[0x24BEE1328], (uint64_t)&v32);
    if (LOBYTE(v32) != 2)
    {
      v6 = 0;
      v7 = 0;
      *(_QWORD *)&v5 = LOBYTE(v32) & 1;
      goto LABEL_4;
    }
    __swift_project_boxed_opaque_existential_1(v36, v37);
    sub_224E70FB4(MEMORY[0x24BEE4008], (uint64_t)&v32);
    if (v33 == 1)
    {
      __swift_project_boxed_opaque_existential_1(v36, v37);
      sub_224E70FB4(MEMORY[0x24BEE4568], (uint64_t)&v32);
      if (v33 == 1)
      {
        __swift_project_boxed_opaque_existential_1(v36, v37);
        type metadata accessor for Decimal(0);
        v10 = v9;
        sub_224DDACD4(&qword_2557E1C28, (uint64_t (*)(uint64_t))type metadata accessor for Decimal, MEMORY[0x24BDD03B0]);
        sub_224E70FB4(v10, (uint64_t)&v32);
        if ((v35 & 1) != 0)
        {
          __swift_project_boxed_opaque_existential_1(v36, v37);
          sub_224E70FB4(MEMORY[0x24BEE13C8], (uint64_t)&v32);
          if ((v33 & 1) != 0)
          {
            __swift_project_boxed_opaque_existential_1(v36, v37);
            sub_224E70FB4(MEMORY[0x24BEE0D00], (uint64_t)&v32);
            v6 = v33;
            if (v33)
            {
              v5 = v32;
              v7 = 2;
            }
            else
            {
              __swift_project_boxed_opaque_existential_1(v36, v37);
              sub_224E54704(0, &qword_2557E1C30, (uint64_t)&type metadata for JSON, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
              v23 = v22;
              sub_224E72A0C(&qword_2557E1C38, (uint64_t (*)(void))sub_224DFACE0, MEMORY[0x24BEE12D0]);
              sub_224E70FB4(v23, (uint64_t)&v32);
              v5 = v32;
              if (v32 == 0.0)
              {
                __swift_project_boxed_opaque_existential_1(v36, v37);
                sub_224E546B0(0, &qword_2557E1C40, (uint64_t)&type metadata for JSON, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
                v25 = v24;
                sub_224E72984(&qword_2557E1C48, (uint64_t (*)(void))sub_224DFACE0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
                sub_224E70FB4(v25, (uint64_t)&v32);
                v5 = v32;
                if (v32 == 0.0)
                {
                  v26 = sub_224F68144();
                  swift_allocError();
                  v28 = v27;
                  sub_224E6FB38();
                  *v28 = &type metadata for JSON;
                  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
                  sub_224F68564();
                  sub_224F68114();
                  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x24BEE26D0], v26);
                  swift_willThrow();
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
                  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
                }
                v6 = 0;
                v7 = 4;
              }
              else
              {
                v6 = 0;
                v7 = 3;
              }
            }
            goto LABEL_4;
          }
          v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v32);
          goto LABEL_21;
        }
        v15 = LODWORD(v32);
        v16 = v33;
        v17 = v34;
        v18 = HIDWORD(*(_QWORD *)&v32);
        v19 = HIWORD(*(_QWORD *)&v32);
        v20 = v33 >> 16;
        v29 = HIDWORD(v33);
        v30 = HIWORD(v33);
        v31 = HIWORD(v34);
        v12 = objc_allocWithZone(MEMORY[0x24BDD1518]);
        v13 = sel_initWithDecimal_;
        LODWORD(v32) = v15;
        WORD2(v32) = v18;
        HIWORD(v32) = v19;
        LOWORD(v33) = v16;
        WORD1(v33) = v20;
        WORD2(v33) = v29;
        HIWORD(v33) = v30;
        LOWORD(v34) = v17;
        HIWORD(v34) = v31;
        v14 = &v32;
LABEL_20:
        v21 = objc_msgSend(v12, v13, v14);
LABEL_21:
        v5 = *(double *)&v21;
        v6 = 0;
        v7 = 1;
        goto LABEL_4;
      }
      v11 = v32;
      v12 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
      v13 = sel_initWithUnsignedLongLong_;
    }
    else
    {
      v11 = v32;
      v12 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
      v13 = sel_initWithLongLong_;
    }
    v14 = *(double **)&v11;
    goto LABEL_20;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

