uint64_t browser_setMode(uint64_t a1)
{
  return browser_setModeInternal(*(void **)a1, *(unsigned __int16 *)(a1 + 8));
}

uint64_t browser_SetMode()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

void APBrokerKeychainUtilsRemoveExpiredAuthTokens()
{
  void *v0;
  void *v1;
  double v2;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v0 = (void *)objc_opt_new();
  if (!v0)
  {
    APSLogErrorAt();
    v14 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -6728, 0);
    v4 = 0;
    v1 = 0;
LABEL_29:
    v22 = v14;
    goto LABEL_26;
  }
  v1 = (void *)objc_opt_new();
  if (!v1)
  {
    APSLogErrorAt();
    v14 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -6728, 0);
    v4 = 0;
    goto LABEL_29;
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "date"), "timeIntervalSinceReferenceDate");
  v3 = v2;
  v4 = _CopyAllAuthTokenKeychainItems(v0, &v22);
  if (!NSErrorToOSStatus())
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v19;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v19 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v8);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "metadata", v15, v16), "objectForKeyedSubscript:", CFSTR("authTokenTTL")), "doubleValue");
          v11 = v10;
          v17 = 0;
          objc_msgSend((id)objc_msgSend(v9, "dateModified"), "timeIntervalSinceReferenceDate");
          if (v3 - v12 >= v11)
          {
            objc_msgSend(v0, "removeItemMatchingItem:error:", v9, &v22);
            if (v22)
            {
              if (gLogCategory_APBrokerKeychainUtils <= 90
                && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
              {
                v15 = objc_msgSend(v9, "identifier");
                v16 = v22;
                LogPrintF();
              }
              v22 = 0;
            }
            else if (gLogCategory_APBrokerKeychainUtils <= 30
                   && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
            {
              v15 = objc_msgSend(v9, "identifier");
              LogPrintF();
            }
            if (APSIsPairingGroupEnabled())
            {
              APBrokerKeychainUtilsCopyInfoFromKeychainItemID((CFStringRef)objc_msgSend(v9, "identifier"), 0, &v17);
              objc_msgSend(v1, "updatePairedPeersWithGroupID:groupInfo:options:completion:");
            }
          }

          ++v8;
        }
        while (v6 != v8);
        v13 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
        v6 = v13;
      }
      while (v13);
    }
  }
LABEL_26:

}

void *_CopyAllAuthTokenKeychainItems(void *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;

  v3 = a1;
  v7 = 0;
  if (a1)
  {
    v4 = (void *)objc_opt_new();
    v5 = v4;
    if (v4)
    {
      objc_msgSend(v4, "setAccessGroup:", CFSTR("com.apple.airplay"));
      objc_msgSend(v5, "setType:", CFSTR("APBroker"));
      v3 = (void *)objc_msgSend(v3, "copyItemsMatchingItem:flags:error:", v5, 0, &v7);
    }
    else
    {
      APSLogErrorAt();
      v3 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    v5 = 0;
  }
  if (a2)
    *a2 = v7;

  return v3;
}

uint64_t APBrokerManagerSetBrowseMode(uint64_t a1, int a2)
{
  NSObject *global_queue;
  uint64_t updated;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  if (*(unsigned __int16 *)(a1 + 130) == a2)
  {
    updated = 0;
  }
  else
  {
    *(_WORD *)(a1 + 130) = a2;
    global_queue = dispatch_get_global_queue(17, 0);
    dispatch_async(global_queue, &__block_literal_global_0);
    if (gLogCategory_APBrokerManager <= 30
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    updated = _APBrokerManagerUpdateBrowsing(a1);
    if ((_DWORD)updated)
      APSLogErrorAt();
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  return updated;
}

uint64_t _APBrokerManagerUpdateBrowsing(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const void *v5;
  uint64_t v6;
  _QWORD block[5];

  FigSimpleMutexCheckIsLockedOnThisThread();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (!*(_BYTE *)(a1 + 280))
  {
    *(_BYTE *)(a1 + 280) = 1;
    CFRetain((CFTypeRef)a1);
    v2 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerEnsureKnownNetworkProfileMonitoringStarted_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_async(v2, block);
  }
  FigSimpleMutexCheckIsLockedOnThisThread();
  v3 = *(unsigned __int16 *)(a1 + 130);
  if ((v3 - 2) < 2)
  {
LABEL_14:
    v3 = 2;
    goto LABEL_19;
  }
  if (*(_WORD *)(a1 + 130))
  {
    if (v3 == 1)
    {
      if (APSSettingsGetInt64())
      {
        if (gLogCategory_APBrokerManager > 50
          || gLogCategory_APBrokerManager == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_18;
        }
        goto LABEL_12;
      }
      if (*(_BYTE *)(a1 + 281))
        goto LABEL_14;
      if (gLogCategory_APBrokerManager > 30
        || gLogCategory_APBrokerManager == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_18;
      }
    }
    else if (gLogCategory_APBrokerManager > 60
           || gLogCategory_APBrokerManager == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_18;
    }
LABEL_12:
    LogPrintF();
LABEL_18:
    v3 = 0;
  }
LABEL_19:
  if (v3 != *(unsigned __int16 *)(a1 + 128))
  {
    *(_WORD *)(a1 + 128) = v3;
    if (gLogCategory_APBrokerManager <= 30)
    {
      if (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize())
        LogPrintF();
      v3 = *(unsigned __int16 *)(a1 + 128);
    }
  }
  if (v3 == 2)
  {
    FigSimpleMutexCheckIsLockedOnThisThread();
    if (!*(_BYTE *)(a1 + 137))
    {
      CFDictionaryApplyBlock();
      if (gLogCategory_APBrokerManager <= 50
        && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(a1 + 137) = 1;
    }
  }
  else
  {
    if (v3 != 1)
      v3 = 0;
    if (*(_DWORD *)(a1 + 132))
      v4 = 1;
    else
      v4 = v3;
    FigSimpleMutexCheckIsLockedOnThisThread();
    if (*(_BYTE *)(a1 + 137))
    {
      CFDictionaryApplyBlock();
      if (gLogCategory_APBrokerManager <= 50
        && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    *(_BYTE *)(a1 + 137) = 0;
    if (!v4)
    {
      FigSimpleMutexCheckIsLockedOnThisThread();
      if (*(_BYTE *)(a1 + 136))
      {
        _APBrokerManagerDiscoveryDelegateStop(a1);
        _APBrokerManagerRemoveAllBrokerGroups(a1);
        if (gLogCategory_APBrokerManager <= 50
          && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v6 = 0;
        *(_BYTE *)(a1 + 136) = 0;
        return v6;
      }
      return 0;
    }
  }
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (*(_BYTE *)(a1 + 136))
    return 0;
  LODWORD(block[0]) = 0;
  if (*(_QWORD *)(a1 + 48))
  {
    v5 = (const void *)_APBrokerManagerCopyReferencedObjectIfNecessary(*(_QWORD *)(a1 + 72), (int *)block);
    if (LODWORD(block[0])
      || (LODWORD(block[0]) = (*(uint64_t (**)(const void *, _QWORD))(a1 + 48))(v5, *(_QWORD *)(a1 + 80))) != 0)
    {
      APSLogErrorAt();
      if (!v5)
      {
LABEL_53:
        v6 = LODWORD(block[0]);
        if (LODWORD(block[0]))
        {
          APSLogErrorAt();
          APSLogErrorAt();
          return v6;
        }
        goto LABEL_54;
      }
    }
    else if (!v5)
    {
      goto LABEL_53;
    }
    CFRelease(v5);
    goto LABEL_53;
  }
LABEL_54:
  if (gLogCategory_APBrokerManager <= 50
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = 0;
  *(_BYTE *)(a1 + 136) = 1;
  return v6;
}

uint64_t _APBonjourBrowserSetModeInternal(uint64_t a1, unsigned int a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  uint64_t started;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  char buffer[8];
  uint64_t v30;
  char v31;
  __int128 v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  if (*(unsigned __int16 *)(a1 + 40) == a2
    && *(unsigned __int8 *)(a1 + 56) == a3
    && *(unsigned __int8 *)(a1 + 57) == a4)
  {
    goto LABEL_99;
  }
  if (a3)
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      *(_BYTE *)(a1 + 56) = 1;
      if (gLogCategory_APBonjourBrowser <= 50
        && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 57) != a4)
  {
    *(_BYTE *)(a1 + 57) = 1;
    if (gLogCategory_APBonjourBrowser <= 50
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (!a2)
  {
    _APBonjourBrowserStopBrowsing(a1, &v28);
    _APBonjourBrowserStopBrowsingForP2PInfra(a1, &v28);
    _APBonjourBrowserStopBrowsingNANPartial(a1, &v28);
LABEL_98:
    _APBonjourBrowserStopBrowsingNANFull(a1, &v28);
    goto LABEL_99;
  }
  *(_QWORD *)buffer = 0;
  v30 = 0;
  v31 = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 88);
  if (APSIsDemoModeEnabled())
    v11 = v10 | 0x30000000000000;
  else
    v11 = v10;
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_BYTE *)(a1 + 57) && a2 == 2)
      v11 |= 0x400000000000000uLL;
  }
  LOBYTE(v32) = 0;
  if (IsAppleTV() || APSIsAPMSpeaker())
    LOBYTE(v32) = 1;
  v13 = 30;
  if (IsAppleInternalBuild())
  {
    if (APSSettingsGetBooleanIfPresent())
      v13 = 50;
    else
      v13 = 30;
  }
  if ((v13 & 0x3E) >= gLogCategory_APBonjourBrowser
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((_BYTE)v32)
    v14 = v11 | 0x43000000000000;
  else
    v14 = v11;
  if (a2 == 1)
    v14 |= 0x4000000000000000uLL;
  if (*(_BYTE *)(a1 + 209))
    v15 = v14 | 0x3000000000000000;
  else
    v15 = v14;
  if (gLogCategory_APBonjourBrowser <= 40
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    _APBonjourBrowserGetStringForMode(a2);
    LogPrintF();
  }
  buffer[0] = 0;
  v16 = *(const __CFString **)(a1 + 48);
  if (v16 && !CFStringGetCString(v16, buffer, 17, 0x8000100u))
  {
    APSLogErrorAt();
    v24 = 4294895084;
LABEL_116:
    _APBonjourBrowserStopBrowsing(a1, &v28);
    APSLogErrorAt();
    goto LABEL_100;
  }
  if (*(_BYTE *)(a1 + 129))
  {
    started = _APBonjourBrowserStartBonjourBrowser((const void *)a1, *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 64), v9, (uint64_t)"-1", v15 & 0xFBFFFFFFFFFFFFFFLL, (uint64_t)"local browsing", (_BYTE *)(a1 + 130));
    if ((_DWORD)started)
    {
      v24 = started;
      goto LABEL_115;
    }
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v18 = *(void **)(a1 + 232);
    if (v18)
      objc_msgSend(v18, "forceReportCachedDevices");
  }
  v19 = _APBonjourBrowserStartBonjourBrowser((const void *)a1, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 64), v9, (uint64_t)buffer, v15, (uint64_t)"general browsing", (_BYTE *)(a1 + 113));
  if ((_DWORD)v19)
  {
    v24 = v19;
    goto LABEL_115;
  }
  v20 = *(_QWORD *)(a1 + 104);
  if (v20)
  {
    v21 = _APBonjourBrowserStartBonjourBrowser((const void *)a1, v20, (uint64_t)"_airplay-alt._tcp.", v9, (uint64_t)buffer, v15, (uint64_t)"browsing", (_BYTE *)(a1 + 112));
    if ((_DWORD)v21)
    {
      v24 = v21;
      goto LABEL_115;
    }
  }
  if (*(_BYTE *)(a1 + 114))
  {
    if (*(_BYTE *)(a1 + 129))
    {
      v22 = _APBonjourBrowserStartBonjourBrowser((const void *)a1, *(_QWORD *)(a1 + 152), (uint64_t)"_raop._tcp.", v9, (uint64_t)"-1", v15 & 0xFBFFFFFFFFFFFFFFLL, (uint64_t)"local browsing", (_BYTE *)(a1 + 144));
      if ((_DWORD)v22)
      {
        v24 = v22;
        goto LABEL_115;
      }
    }
    v23 = _APBonjourBrowserStartBonjourBrowser((const void *)a1, *(_QWORD *)(a1 + 120), (uint64_t)"_raop._tcp.", v9, (uint64_t)buffer, v15, (uint64_t)"general browsing", (_BYTE *)(a1 + 128));
    if ((_DWORD)v23)
    {
      v24 = v23;
      goto LABEL_115;
    }
  }
  if (!*(_BYTE *)(a1 + 160) || a2 != 2 || !*(_BYTE *)(a1 + 57))
    goto LABEL_80;
  v33 = 0;
  v32 = *(_OWORD *)"awdl0";
  if (*(_BYTE *)(a1 + 161))
    goto LABEL_81;
  if (BonjourBrowser_Start())
  {
    APSLogErrorAt();
LABEL_80:
    _APBonjourBrowserStopBrowsingForP2PInfra(a1, &v28);
    goto LABEL_81;
  }
  CFRetain((CFTypeRef)a1);
  *(_BYTE *)(a1 + 161) = 1;
  if (gLogCategory_APBonjourBrowser <= 40
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_81:
  if (!*(_BYTE *)(a1 + 176) || a2 != 2 || !*(_BYTE *)(a1 + 56))
  {
    _APBonjourBrowserStopBrowsingNANPartial(a1, &v28);
    goto LABEL_90;
  }
  v33 = 0;
  v32 = *(_OWORD *)"nan0";
  if (!*(_BYTE *)(a1 + 177))
  {
    v25 = BonjourBrowser_Start();
    if (!(_DWORD)v25)
    {
      CFRetain((CFTypeRef)a1);
      *(_BYTE *)(a1 + 177) = 1;
      if (gLogCategory_APBonjourBrowser <= 50
        && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_90;
    }
    v24 = v25;
    APSLogErrorAt();
    if (gLogCategory_APBonjourBrowser <= 90
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    _APBonjourBrowserStopBrowsingNANPartial(a1, &v28);
LABEL_115:
    APSLogErrorAt();
    goto LABEL_116;
  }
LABEL_90:
  if (!*(_BYTE *)(a1 + 192) || a2 != 2 || !*(_BYTE *)(a1 + 56))
    goto LABEL_98;
  v33 = 0;
  v32 = *(_OWORD *)"nan0";
  if (!*(_BYTE *)(a1 + 193))
  {
    v26 = BonjourBrowser_Start();
    if (!(_DWORD)v26)
    {
      CFRetain((CFTypeRef)a1);
      *(_BYTE *)(a1 + 193) = 1;
      if (gLogCategory_APBonjourBrowser <= 50
        && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_99;
    }
    v24 = v26;
    APSLogErrorAt();
    if (gLogCategory_APBonjourBrowser <= 90
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    _APBonjourBrowserStopBrowsingNANFull(a1, &v28);
    goto LABEL_115;
  }
LABEL_99:
  v24 = 0;
LABEL_100:
  *a5 = v28;
  return v24;
}

uint64_t _APBonjourBrowserStartBonjourBrowser(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v10 = BonjourBrowser_Start();
    if ((_DWORD)v10)
    {
      v11 = v10;
      APSLogErrorAt();
      return v11;
    }
    if (!*a8)
    {
      CFRetain(a1);
      *a8 = 1;
    }
    if (gLogCategory_APBonjourBrowser <= 40
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return 0;
}

uint64_t browser_setModeInternal(void *a1, unsigned int a2)
{
  uint64_t DerivedStorage;
  int **v5;
  int *v6;
  int v7;
  const void *v8;
  int *v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  dispatch_source_t v13;
  CFTypeRef v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  dispatch_time_t v19;
  unsigned int v20;
  uint64_t v21;
  double Current;
  double v23;
  uint64_t v24;
  double *v25;
  int v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  dispatch_time_t v32;
  int v33;
  int v34;
  int **v35;
  double v36;
  int v37;
  int v38;
  dispatch_source_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  dispatch_time_t v44;
  uint64_t v45;
  const void *v46;
  unsigned int updated;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  const __CFArray *v60;
  const __CFArray *v61;
  CFIndex Count;
  CFIndex v63;
  CFIndex v64;
  const void *ValueAtIndex;
  int v66;
  uint64_t v67;
  const void *v68;
  const __CFAllocator *v69;
  const __CFUUID *v70;
  CFStringRef v71;
  CFStringRef v72;
  int v73;
  uint64_t v74;
  const __CFArray *v75;
  CFIndex v76;
  CFIndex v77;
  CFIndex v78;
  const void *v79;
  const void *v80;
  const void *Value;
  const void *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int **v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BrowserNIDelegate *v93;
  void *v94;
  int v95;
  void *v96;
  int *v97;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t handler;
  uint64_t v105;
  void *v106;
  void *v107;
  CFTypeRef v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  CFTypeRef v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 229))
    return -6723;
  v5 = (int **)DerivedStorage;
  if (*(unsigned __int16 *)(DerivedStorage + 24) == a2)
    return 0;
  v6 = *(int **)DerivedStorage;
  v7 = **(_DWORD **)DerivedStorage;
  if (v7 > 50)
    goto LABEL_7;
  if (v7 == -1)
  {
    if (!_LogCategory_Initialize())
      goto LABEL_7;
    v6 = *v5;
  }
  browser_getStringForMode(a2, v6);
  browser_getStringForMode(*((unsigned __int16 *)v5 + 12), *v5);
  LogPrintF();
LABEL_7:
  v8 = (const void *)CFStringCreateF();
  v9 = v5[4];
  if (v8)
    CFRetain(v8);
  v5[4] = (int *)v8;
  if (v9)
    CFRelease(v9);
  v10 = *((unsigned __int16 *)v5 + 12);
  *((_WORD *)v5 + 12) = a2;
  v11 = CMBaseObjectGetDerivedStorage();
  if (IsAppleInternalBuild() && APSSettingsGetInt64() && !IsAppleTV())
  {
    v12 = *(NSObject **)(v11 + 48);
    if ((a2 & 0xFFFE) == 2)
    {
      if (!v12)
      {
        v13 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v11 + 8));
        *(_QWORD *)(v11 + 48) = v13;
        if (v13)
        {
          v14 = CFRetain(a1);
          v15 = MEMORY[0x1E0C809B0];
          v16 = *(NSObject **)(v11 + 48);
          handler = MEMORY[0x1E0C809B0];
          v105 = 3221225472;
          v106 = __browser_updateDetailedDiscoveryThresholdTimer_block_invoke;
          v107 = &__block_descriptor_40_e5_v8__0l;
          v108 = v14;
          dispatch_source_set_event_handler(v16, &handler);
          v17 = *(NSObject **)(v11 + 48);
          v109 = v15;
          v110 = 3221225472;
          v111 = __browser_updateDetailedDiscoveryThresholdTimer_block_invoke_2;
          v112 = &__block_descriptor_48_e5_v8__0l;
          v113 = v11;
          v114 = v14;
          dispatch_source_set_cancel_handler(v17, &v109);
          v18 = *(NSObject **)(v11 + 48);
          v19 = dispatch_time(0, 3600000000000);
          dispatch_source_set_timer(v18, v19, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          dispatch_resume(*(dispatch_object_t *)(v11 + 48));
        }
        else
        {
          APSLogErrorAt();
        }
      }
    }
    else if (v12)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v11 + 48));
      dispatch_release(v12);
      *(_QWORD *)(v11 + 48) = 0;
    }
  }
  v20 = *((unsigned __int16 *)v5 + 12);
  v21 = CMBaseObjectGetDerivedStorage();
  Current = CFAbsoluteTimeGetCurrent();
  if (v10 == v20)
  {
    APSLogErrorAt();
    v103 = -6705;
LABEL_155:
    APSLogErrorAt();
    if (!v8)
      return v103;
LABEL_146:
    CFRelease(v8);
    return v103;
  }
  v23 = Current;
  if (v10 >= 2 && v20 <= 1)
    browser_ensureDetailedForeverTimerStopped();
  v24 = CMBaseObjectGetDerivedStorage();
  v25 = (double *)(v24 + 384);
  if (v10)
    v25 = 0;
  if (v10 == 1)
    v25 = (double *)(v24 + 392);
  if (v10 == 2)
    v25 = (double *)(v24 + 400);
  if (v10 == 3)
    v25 = (double *)(v24 + 408);
  *v25 = *v25 + v23 - *(double *)(v24 + 416);
  *(double *)(v24 + 416) = v23;
  switch(v20)
  {
    case 0u:
      v26 = **(_DWORD **)v21;
      if (v26 <= 30 && (v26 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      browser_batchAndSendDiscoveredDeviceRTCMetrics();
      v38 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
      if (v38 <= 30 && (v38 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      APSEventRecorderResetEvent();
      APSEventRecorderResetEvent();
      APSEventRecorderResetEvent();
      APSEventRecorderResetEvent();
      browser_ensureDiscoverySessionThresholdTimerStopped();
      *(_WORD *)(v21 + 424) = 0;
      *(_DWORD *)(v21 + 428) = 0;
      goto LABEL_71;
    case 1u:
      goto LABEL_41;
    case 2u:
      goto LABEL_37;
    case 3u:
      APSEventRecorderRecordEventWithFlagsAtTime();
LABEL_37:
      APSEventRecorderRecordEventWithFlagsAtTime();
      v27 = CMBaseObjectGetDerivedStorage();
      if (IsAppleInternalBuild() || *(_QWORD *)(v27 + 360))
        goto LABEL_41;
      v28 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v27 + 8));
      *(_QWORD *)(v27 + 360) = v28;
      if (v28)
      {
        v29 = MEMORY[0x1E0C809B0];
        v109 = MEMORY[0x1E0C809B0];
        v110 = 3221225472;
        v111 = __browser_ensureDetailedForeverTimerStarted_block_invoke;
        v112 = &__block_descriptor_40_e5_v8__0l;
        v113 = (uint64_t)a1;
        dispatch_source_set_event_handler(v28, &v109);
        CFRetain(a1);
        v30 = *(NSObject **)(v27 + 360);
        handler = v29;
        v105 = 3221225472;
        v106 = __browser_ensureDetailedForeverTimerStarted_block_invoke_2;
        v107 = &__block_descriptor_40_e5_v8__0l;
        v108 = a1;
        dispatch_source_set_cancel_handler(v30, &handler);
        v31 = *(NSObject **)(v27 + 360);
        v32 = dispatch_time(0, 600000000000);
        dispatch_source_set_timer(v31, v32, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume(*(dispatch_object_t *)(v27 + 360));
LABEL_41:
        v33 = 0;
      }
      else
      {
        APSLogErrorAt();
        browser_ensureDetailedForeverTimerStopped();
        v33 = -6728;
      }
      APSEventRecorderRecordEventWithFlagsAtTime();
      if (*(unsigned __int16 *)(v21 + 424) >= v20)
        goto LABEL_68;
      v34 = **(_DWORD **)v21;
      if (v34 <= 30 && (v34 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      *(_WORD *)(v21 + 424) = v20;
      v35 = (int **)CMBaseObjectGetDerivedStorage();
      APSEventRecorderGetEventTimeRecursive();
      if (v36 != 0.0)
      {
        v101 = **v35;
        if (v101 <= 50 && (v101 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        goto LABEL_67;
      }
      v37 = **v35;
      if (v35[54])
      {
        if (v37 <= 50 && (v37 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        goto LABEL_66;
      }
      if (v37 <= 50 && (v37 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v39 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)v35[1]);
      v35[54] = (int *)v39;
      if (v39)
      {
        CFRetain(a1);
        v40 = MEMORY[0x1E0C809B0];
        v41 = v35[54];
        v109 = MEMORY[0x1E0C809B0];
        v110 = 3221225472;
        v111 = __browser_startOrExtendDiscoverySessionThresholdTimer_block_invoke;
        v112 = &__block_descriptor_40_e5_v8__0l;
        v113 = (uint64_t)a1;
        dispatch_source_set_event_handler(v41, &v109);
        v42 = v35[54];
        handler = v40;
        v105 = 3221225472;
        v106 = __browser_startOrExtendDiscoverySessionThresholdTimer_block_invoke_2;
        v107 = &__block_descriptor_40_e5_v8__0l;
        v108 = a1;
        dispatch_source_set_cancel_handler(v42, &handler);
        dispatch_resume((dispatch_object_t)v35[54]);
LABEL_66:
        v43 = v35[54];
        v44 = dispatch_time(0, 300000000000);
        dispatch_source_set_timer(v43, v44, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
LABEL_67:
        v33 = 0;
        goto LABEL_68;
      }
      APSLogErrorAt();
      browser_ensureDiscoverySessionThresholdTimerStopped();
      v33 = -6728;
LABEL_68:
      if (v20 > v10)
        ++*(_DWORD *)(v21 + 376);
      v103 = v33;
      if (v33)
        goto LABEL_155;
LABEL_71:
      switch(a2)
      {
        case 0u:
          v45 = CMBaseObjectGetDerivedStorage();
          v46 = *(const void **)(v45 + 40);
          if (v46)
          {
            CFRelease(v46);
            *(_QWORD *)(v45 + 40) = 0;
          }
          updated = browser_updateBTLEBrowsing((CFStringRef (__cdecl *)(const void *))a1);
          if (updated)
          {
            v102 = updated;
          }
          else
          {
            v48 = browser_updateRapportBrowsing();
            if (v48)
            {
              v102 = v48;
            }
            else
            {
              v49 = browser_updateBrokerBrowsing(a1);
              if (v49)
              {
                v102 = v49;
              }
              else
              {
                v50 = browser_updateBonjourBrowsing(a1);
                if (v50)
                {
                  v102 = v50;
                }
                else
                {
                  browser_stopNI();
                  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v45 + 200));
                  *(_DWORD *)(v45 + 224) = 0;
                  v51 = browser_dispatchEvent(a1, 7, 0);
                  if (!v51)
                  {
                    v103 = 0;
                    goto LABEL_140;
                  }
                  v102 = v51;
                }
              }
            }
          }
          APSLogErrorAt();
          v103 = v102;
          goto LABEL_155;
        case 1u:
          CMBaseObjectGetDerivedStorage();
          v53 = browser_ensureWiFiPowerChangedListeningStarted(a1);
          if (v53)
          {
            v99 = v53;
            goto LABEL_154;
          }
          v54 = browser_ensureAWDLSoloSupportedListeningStarted(a1);
          if (v54)
          {
            v99 = v54;
            goto LABEL_154;
          }
          v55 = browser_updateBTLEBrowsing((CFStringRef (__cdecl *)(const void *))a1);
          if (v55)
          {
            v99 = v55;
            goto LABEL_154;
          }
          v56 = browser_updateRapportBrowsing();
          if (v56)
          {
            v99 = v56;
            goto LABEL_154;
          }
          v57 = browser_updateBrokerBrowsing(a1);
          if (v57)
          {
            v99 = v57;
            goto LABEL_154;
          }
          v58 = browser_updateBonjourBrowsing(a1);
          if (v58)
          {
            v99 = v58;
            goto LABEL_154;
          }
          browser_stopNI();
          v59 = browser_removeAirPlayP2PServiceForNearbyDevices();
          if (v59)
          {
            v99 = v59;
            goto LABEL_154;
          }
          CMBaseObjectGetDerivedStorage();
          v60 = (const __CFArray *)CFDictionaryCopyKeys();
          if (!v60)
          {
            v103 = 0;
            goto LABEL_138;
          }
          v61 = v60;
          Count = CFArrayGetCount(v60);
          if (Count < 1)
          {
LABEL_96:
            CFRelease(v61);
            goto LABEL_137;
          }
          v63 = Count;
          v64 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v61, v64);
            if (!ValueAtIndex)
              goto LABEL_151;
            v66 = browser_updateEventInfoForDevice(a1, ValueAtIndex);
            if (v66)
              goto LABEL_152;
            if (v63 == ++v64)
              goto LABEL_96;
          }
        case 2u:
          v103 = browser_removeAirPlayP2PServiceForNearbyDevices();
          if (v103)
            goto LABEL_155;
          goto LABEL_98;
        case 3u:
LABEL_98:
          CMBaseObjectGetDerivedStorage();
          v67 = CMBaseObjectGetDerivedStorage();
          v68 = *(const void **)(v67 + 40);
          if (v68)
          {
            CFRelease(v68);
            *(_QWORD *)(v67 + 40) = 0;
          }
          v69 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v70 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
          *(_QWORD *)(v67 + 40) = v70;
          if (!v70 || (v71 = CFUUIDCreateString(v69, v70)) == 0)
          {
            APSLogErrorAt();
            v99 = -6728;
            goto LABEL_154;
          }
          v72 = v71;
          v73 = **(_DWORD **)v67;
          if (v73 <= 40 && (v73 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          CFRelease(v72);
          v74 = CMBaseObjectGetDerivedStorage();
          v75 = (const __CFArray *)CFDictionaryCopyKeys();
          if (!v75)
            goto LABEL_115;
          v61 = v75;
          v76 = CFArrayGetCount(v75);
          if (v76 < 1)
            goto LABEL_114;
          v77 = v76;
          v78 = 0;
          break;
        default:
          v52 = **v5;
          if (v52 <= 90 && (v52 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          v103 = -6727;
          if (v8)
            goto LABEL_146;
          return v103;
      }
      break;
    default:
      goto LABEL_71;
  }
  do
  {
    v79 = CFArrayGetValueAtIndex(v61, v78);
    if (!v79)
    {
LABEL_151:
      APSLogErrorAt();
      v99 = -6762;
      goto LABEL_153;
    }
    v80 = v79;
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v74 + 200), v79);
    if (!Value)
    {
      APSLogErrorAt();
      v99 = -6727;
      goto LABEL_153;
    }
    v82 = Value;
    if (CFDictionaryGetInt64())
    {
      v66 = browser_updateDevice(a1, v80, v82);
      if (v66)
      {
LABEL_152:
        v99 = v66;
        APSLogErrorAt();
LABEL_153:
        CFRelease(v61);
        goto LABEL_154;
      }
    }
    ++v78;
  }
  while (v77 != v78);
LABEL_114:
  CFRelease(v61);
LABEL_115:
  v83 = browser_ensureWiFiPowerChangedListeningStarted(a1);
  if (v83)
  {
    v99 = v83;
LABEL_154:
    APSLogErrorAt();
    v103 = v99;
    goto LABEL_155;
  }
  v84 = browser_ensureAWDLSoloSupportedListeningStarted(a1);
  if (v84)
  {
    v99 = v84;
    goto LABEL_154;
  }
  v85 = browser_updateBTLEBrowsing((CFStringRef (__cdecl *)(const void *))a1);
  if (v85)
  {
    v99 = v85;
    goto LABEL_154;
  }
  v86 = browser_updateRapportBrowsing();
  if (v86)
  {
    v99 = v86;
    goto LABEL_154;
  }
  v87 = browser_updateBrokerBrowsing(a1);
  if (v87)
  {
    v99 = v87;
    goto LABEL_154;
  }
  v88 = browser_updateBonjourBrowsing(a1);
  if (v88)
  {
    v99 = v88;
    goto LABEL_154;
  }
  v89 = (int **)CMBaseObjectGetDerivedStorage();
  if (APSIsProximitySenderEnabled())
  {
    v90 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v90 + 256))
      goto LABEL_130;
    v91 = v90;
    v92 = **(_DWORD **)v90;
    if (v92 <= 50 && (v92 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v93 = -[BrowserNIDelegate initWithBrowser:]([BrowserNIDelegate alloc], "initWithBrowser:", a1);
    *(_QWORD *)(v91 + 264) = v93;
    if (v93)
    {
      getNISessionClass();
      v94 = (void *)objc_opt_new();
      *(_QWORD *)(v91 + 256) = v94;
      if (v94)
      {
        objc_msgSend(v94, "setDelegate:", *(_QWORD *)(v91 + 264));
        objc_msgSend(*(id *)(v91 + 256), "setDelegateQueue:", *(_QWORD *)(v91 + 8));
        if (!APSRotatingKeyMapperInitialize())
        {
LABEL_130:
          v95 = **v89;
          if (v95 <= 50 && (v95 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          getNISpatialBrowsingConfigurationClass();
          v96 = (void *)objc_opt_new();
          if (v96)
            objc_msgSend(v89[32], "runWithConfiguration:", v96);
          else
            APSLogErrorAt();
          goto LABEL_136;
        }
      }
    }
    APSLogErrorAt();
    browser_cleanupNI();
    APSLogErrorAt();
  }
  else
  {
    v100 = **v89;
    if (v100 <= 30)
    {
      if (v100 != -1 || _LogCategory_Initialize())
        LogPrintF();
      v96 = 0;
      goto LABEL_136;
    }
  }
  v96 = 0;
LABEL_136:

LABEL_137:
  v103 = 0;
  if (a2)
  {
LABEL_138:
    if (!v5[44])
    {
      SNPrintF();
      v5[44] = (int *)os_transaction_create();
    }
  }
  else
  {
LABEL_140:
    v97 = v5[44];
    if (v97)
    {

      v5[44] = 0;
    }
  }
  browser_sendPowerLogDiscoveryModeEvent();
  if (v8)
    goto LABEL_146;
  return v103;
}

const char *browser_getStringForMode(unsigned int a1, int *a2)
{
  if (a1 < 4)
    return off_1E825A7F0[(__int16)a1];
  if (*a2 <= 60 && (*a2 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return "Unrecognized";
}

uint64_t browser_updateRapportBrowsing()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  CFTypeRef v8;
  const void *v9;
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v1 + 248) && (v2 = *(unsigned __int16 *)(v1 + 24), v2 >= 2))
  {
    if (v2 - 2 >= 2)
    {
      v10 = **(_DWORD **)v1;
      if (v10 <= 60 && (v10 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v3 = 4294960534;
      goto LABEL_18;
    }
    v3 = APBrowserRapportManagerSetMode(*(_QWORD *)(DerivedStorage + 144), 1);
    if ((_DWORD)v3)
LABEL_18:
      APSLogErrorAt();
  }
  else
  {
    v4 = APBrowserRapportManagerSetMode(*(_QWORD *)(DerivedStorage + 144), 0);
    if ((_DWORD)v4)
    {
      v3 = v4;
      goto LABEL_18;
    }
    v5 = CMBaseObjectGetDerivedStorage();
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      v3 = 4294960568;
      goto LABEL_18;
    }
    v7 = Mutable;
    v8 = CFRetain(*(CFTypeRef *)(v5 + 160));
    v9 = *(const void **)(v5 + 160);
    *(_QWORD *)(v5 + 160) = v7;
    CFRetain(v7);
    if (v9)
      CFRelease(v9);
    CFDictionaryApplyBlock();
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v5 + 152));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v5 + 168));
    if (v8)
      CFRelease(v8);
    CFRelease(v7);
    return 0;
  }
  return v3;
}

uint64_t browser_updateBrokerBrowsing(const void *a1)
{
  int v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(unsigned __int16 *)(CMBaseObjectGetDerivedStorage() + 24);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (v2)
  {
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    v5 = *(_QWORD *)(DerivedStorage + 328);
    if (v5)
    {
      if (!*(_BYTE *)(v4 + 336))
      {
        *(_QWORD *)&v13 = browser_handleBrokerGroupAddOrUpdate;
        *((_QWORD *)&v13 + 1) = browser_handleBrokerGroupAddOrUpdate;
        *(_QWORD *)&v14 = browser_handleBrokerGroupRemove;
        *((_QWORD *)&v14 + 1) = browser_handleBrokeredReceiverAddOrUpdate;
        *(_QWORD *)&v15 = browser_handleBrokeredReceiverAddOrUpdate;
        *((_QWORD *)&v15 + 1) = browser_handleBrokeredReceiverRemoved;
        v6 = APBrokerManagerSetDelegate(v5, a1, &v13);
        if ((_DWORD)v6)
        {
          v8 = v6;
          goto LABEL_19;
        }
        *(_BYTE *)(v4 + 336) = 1;
        v5 = *(_QWORD *)(v4 + 328);
      }
      v7 = APBrokerManagerSetBrowseMode(v5, v2);
      if ((_DWORD)v7)
      {
        v8 = v7;
LABEL_19:
        APSLogErrorAt();
        APSLogErrorAt();
        return v8;
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(DerivedStorage + 328);
    if (v9)
    {
      APBrokerManagerSetDelegate(v9, 0, 0);
      *(_BYTE *)(v4 + 336) = 0;
      APBrokerManagerSetBrowseMode(*(_QWORD *)(v4 + 328), 0);
    }
    v10 = CMBaseObjectGetDerivedStorage();
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(v10 + 344)) >= 1)
    {
      v11 = **(_DWORD **)v10;
      if (v11 <= 50 && (v11 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v13 + 1) = 3221225472;
      *(_QWORD *)&v14 = __browser_flushAllBrokerResults_block_invoke;
      *((_QWORD *)&v14 + 1) = &__block_descriptor_48_e15_v24__0r_v8r_v16l;
      *(_QWORD *)&v15 = v10;
      *((_QWORD *)&v15 + 1) = a1;
      CFDictionaryApplyBlock();
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v10 + 344));
    }
  }
  return 0;
}

uint64_t APBrokerManagerSetDelegate(uint64_t a1, const void *a2, __int128 *a3)
{
  const void *v6;
  CFTypeRef v7;
  __int128 v8;
  __int128 v9;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  v6 = *(const void **)(a1 + 192);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 192) = 0;
  }
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  ++*(_DWORD *)(a1 + 200);
  if (a3)
  {
    if (a2)
      v7 = CFRetain(a2);
    else
      v7 = 0;
    *(_QWORD *)(a1 + 192) = v7;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(a1 + 160) = a3[1];
    *(_OWORD *)(a1 + 176) = v9;
    *(_OWORD *)(a1 + 144) = v8;
    FigSimpleMutexCheckIsLockedOnThisThread();
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  return 0;
}

uint64_t browser_updateBonjourBrowsing(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  browser_ensureWiFiAvailableListeningStarted(a1);
  v3 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v3 + 195))
    goto LABEL_11;
  v4 = v3;
  if (*(_BYTE *)(v3 + 193))
    goto LABEL_11;
  if (!APSIsVirtualMachine())
  {
    if (!APConnectivityHelperRegisterForEvent(*(_QWORD *)(v4 + 184), (uint64_t)a1, 7))
    {
      *(_BYTE *)(v4 + 195) = 1;
      goto LABEL_11;
    }
    goto LABEL_21;
  }
  v5 = **(_DWORD **)v4;
  if (v5 <= 40 && (v5 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  *(_BYTE *)(v4 + 195) = 1;
  if (browser_handleConnectivityHelperEventInternal(a1, 7, 0))
LABEL_21:
    APSLogErrorAt();
LABEL_11:
  browser_ensureAWDLSoloSupportedListeningStarted(a1);
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = *(unsigned __int16 *)(v6 + 24);
  if (v7 >= 4)
  {
    v9 = **(_DWORD **)v6;
    if (v9 <= 60 && (v9 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v8 = 4294960534;
    goto LABEL_19;
  }
  v8 = APBonjourBrowserSetMode(*(_QWORD *)(DerivedStorage + 80), (0x2000300010000uLL >> (16 * v7)) & 3);
  if ((_DWORD)v8)
LABEL_19:
    APSLogErrorAt();
  return v8;
}

uint64_t browser_ensureAWDLSoloSupportedListeningStarted(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  uint64_t v5;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 131))
    return 0;
  v3 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 130))
    return 0;
  if (!APSIsVirtualMachine())
  {
    v5 = APConnectivityHelperRegisterForEvent(*(_QWORD *)(v3 + 184), (uint64_t)a1, 8);
    if (!(_DWORD)v5)
    {
      *(_BYTE *)(v3 + 131) = 1;
      return v5;
    }
LABEL_13:
    APSLogErrorAt();
    return v5;
  }
  v4 = **(_DWORD **)v3;
  if (v4 <= 40 && (v4 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  *(_BYTE *)(v3 + 131) = 1;
  v7 = CFSTR("isAWDLSoloSupported");
  v8[0] = MEMORY[0x1E0C9AAA0];
  v5 = browser_handleConnectivityHelperEventInternal(a1, 8, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1));
  if ((_DWORD)v5)
    goto LABEL_13;
  return v5;
}

uint64_t browser_updateBTLEBrowsing(CFStringRef (__cdecl *a1)(const void *))
{
  uint64_t DerivedStorage;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t updated;
  uint64_t v8;
  const __SCDynamicStore *v9;
  const void *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  dispatch_time_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFAllocator *v23;
  SCDynamicStoreRef v24;
  uint64_t v25;
  CFMutableArrayRef Mutable;
  __CFArray *v27;
  const __CFString *v28;
  const __CFString *v29;
  CFStringRef NetworkInterfaceEntity;
  CFStringRef v31;
  CFStringRef v32;
  CFStringRef v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  _QWORD v39[5];
  SCDynamicStoreContext handler;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(unsigned __int16 *)(v3 + 24);
  if (v4 >= 4)
  {
    v12 = **(_DWORD **)v3;
    if (v12 <= 60 && (v12 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v13 = 4294960534;
    goto LABEL_44;
  }
  v5 = 0x2000100010000uLL >> (16 * v4);
  v6 = APBrowserBTLEManagerSetMode(*(_QWORD *)(DerivedStorage + 96), v5 & 3);
  if ((_DWORD)v6)
  {
    v13 = v6;
    goto LABEL_44;
  }
  if ((unsigned __int16)v5 == 2)
  {
    v14 = CMBaseObjectGetDerivedStorage();
    v15 = v14;
    if (!*(_QWORD *)(v14 + 120))
    {
      v16 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v14 + 8));
      *(_QWORD *)(v15 + 120) = v16;
      if (!v16)
      {
        APSLogErrorAt();
        browser_ensureConnectivityCheckTimerStopped();
        v13 = 4294960568;
        goto LABEL_44;
      }
      v17 = MEMORY[0x1E0C809B0];
      handler.version = MEMORY[0x1E0C809B0];
      handler.info = (void *)3221225472;
      handler.retain = (const void *(__cdecl *)(const void *))__browser_ensureConnectivityCheckTimerStarted_block_invoke;
      handler.release = (void (__cdecl *)(const void *))&__block_descriptor_40_e5_v8__0l;
      handler.copyDescription = a1;
      dispatch_source_set_event_handler(v16, &handler);
      CFRetain(a1);
      v18 = *(NSObject **)(v15 + 120);
      v39[0] = v17;
      v39[1] = 3221225472;
      v39[2] = __browser_ensureConnectivityCheckTimerStarted_block_invoke_2;
      v39[3] = &__block_descriptor_40_e5_v8__0l;
      v39[4] = a1;
      dispatch_source_set_cancel_handler(v18, v39);
      v19 = *(NSObject **)(v15 + 120);
      v20 = dispatch_time(0, 10000000000);
      dispatch_source_set_timer(v19, v20, 0x2540BE400uLL, 0x3B9ACA00uLL);
      dispatch_resume(*(dispatch_object_t *)(v15 + 120));
    }
    *(_BYTE *)(v15 + 128) = 1;
    v21 = CMBaseObjectGetDerivedStorage();
    handler.version = 0;
    memset(&handler.retain, 0, 24);
    handler.info = a1;
    if (*(_QWORD *)(v21 + 136))
      return 0;
    v22 = v21;
    v23 = CFGetAllocator(a1);
    v24 = SCDynamicStoreCreate(v23, CFSTR("APBrowser:IPv4Listener"), (SCDynamicStoreCallBack)browser_handleIPv4EventInternal, &handler);
    if (!v24)
    {
      if (SCError())
      {
        v25 = SCError();
        if (!(_DWORD)v25)
          goto LABEL_27;
        v13 = v25;
      }
      else
      {
        v13 = 4294960596;
      }
      APSLogErrorAt();
      goto LABEL_44;
    }
LABEL_27:
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      APSLogErrorAt();
      v13 = 4294960568;
      if (!v24)
      {
LABEL_59:
        if (!(_DWORD)v13)
          return v13;
        goto LABEL_44;
      }
LABEL_58:
      CFRelease(v24);
      goto LABEL_59;
    }
    v27 = Mutable;
    v28 = (const __CFString *)*MEMORY[0x1E0CE8B30];
    v29 = (const __CFString *)*MEMORY[0x1E0CE8B20];
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, (CFStringRef)*MEMORY[0x1E0CE8B30], (CFStringRef)*MEMORY[0x1E0CE8B20], (CFStringRef)*MEMORY[0x1E0CE8B78]);
    if (!NetworkInterfaceEntity
      || (v31 = NetworkInterfaceEntity,
          CFArrayAppendValue(v27, NetworkInterfaceEntity),
          CFRelease(v31),
          (v32 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, v28, v29, (CFStringRef)*MEMORY[0x1E0CE8B98])) == 0))
    {
      APSLogErrorAt();
      v13 = 4294960568;
      goto LABEL_57;
    }
    v33 = v32;
    CFArrayAppendValue(v27, v32);
    CFRelease(v33);
    if (!SCDynamicStoreSetNotificationKeys(v24, 0, v27))
    {
      if (!SCError())
      {
        v13 = 4294960596;
        goto LABEL_56;
      }
      v34 = SCError();
      if ((_DWORD)v34)
      {
        v13 = v34;
        goto LABEL_56;
      }
    }
    if (SCDynamicStoreSetDispatchQueue(v24, *(dispatch_queue_t *)(v22 + 8)))
      goto LABEL_36;
    if (SCError())
    {
      v35 = SCError();
      if (!(_DWORD)v35)
      {
LABEL_36:
        *(_QWORD *)(v22 + 136) = v24;
        CFRetain(a1);
        v36 = **(_DWORD **)v22;
        if (v36 <= 40 && (v36 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v13 = 0;
        v24 = 0;
LABEL_57:
        CFRelease(v27);
        if (!v24)
          goto LABEL_59;
        goto LABEL_58;
      }
      v13 = v35;
    }
    else
    {
      v13 = 4294960596;
    }
LABEL_56:
    APSLogErrorAt();
    goto LABEL_57;
  }
  if ((unsigned __int16)v5 == 1)
  {
    browser_ensureConnectivityCheckTimerStopped();
    return 0;
  }
  if (!(_WORD)v5)
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 112))
    {
      handler.version = MEMORY[0x1E0C809B0];
      handler.info = (void *)3221225472;
      handler.retain = (const void *(__cdecl *)(const void *))__browser_flushAllBTLEDevices_block_invoke;
      handler.release = (void (__cdecl *)(const void *))&__block_descriptor_40_e15_v24__0r_v8r_v16l;
      handler.copyDescription = a1;
      CFDictionaryApplyBlock();
    }
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 112));
    updated = browser_updateAVDevicePresent(a1);
    if (!(_DWORD)updated)
    {
      browser_ensureConnectivityCheckTimerStopped();
      v8 = CMBaseObjectGetDerivedStorage();
      v9 = *(const __SCDynamicStore **)(v8 + 136);
      if (v9)
      {
        SCDynamicStoreSetDispatchQueue(v9, 0);
        v10 = *(const void **)(v8 + 136);
        if (v10)
        {
          CFRelease(v10);
          *(_QWORD *)(v8 + 136) = 0;
        }
        CFRelease(a1);
        v11 = **(_DWORD **)v8;
        if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
      return 0;
    }
    v13 = updated;
LABEL_44:
    APSLogErrorAt();
    return v13;
  }
  v37 = **(_DWORD **)DerivedStorage;
  if (v37 <= 60 && (v37 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return 4294960534;
}

void browser_sendPowerLogDiscoveryModeEvent()
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(__CFString **)(DerivedStorage + 64) == CFSTR("AirPlay"))
  {
    if (APBrowserGetModeString(*(unsigned __int16 *)(DerivedStorage + 24))
      && (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
    {
      v2 = Mutable;
      CFDictionarySetCString();
      PLLogRegisteredEvent();
      CFRelease(v2);
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

const char *APBrowserGetModeString(unsigned int a1)
{
  if (a1 > 3)
    return "Unknown";
  else
    return off_1E8256110[(__int16)a1];
}

uint64_t browser_removeAirPlayP2PServiceForNearbyDevices()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;
  uint64_t v4;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  const __CFDictionary *Value;
  __CFDictionary *v10;
  const __CFDictionary *v11;
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (const __CFArray *)CFDictionaryCopyKeys();
  if (!v1)
    return 0;
  v2 = v1;
  Count = CFArrayGetCount(v1);
  if (Count >= 1)
  {
    v6 = Count;
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, v7);
      if (!ValueAtIndex)
      {
        v4 = 4294960534;
        goto LABEL_20;
      }
      Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), ValueAtIndex);
      if (!Value)
        break;
      v10 = Value;
      v11 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("AirPlayP2PBonjourInfo"));
      if (v11)
      {
        CFDictionaryGetValue(v11, CFSTR("name"));
        v12 = **(_DWORD **)DerivedStorage;
        if (v12 <= 40 && (v12 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        CFDictionaryRemoveValue(v10, CFSTR("AirPlayP2PBonjourInfo"));
      }
      if (v6 == ++v7)
        goto LABEL_3;
    }
    v4 = 4294960569;
LABEL_20:
    APSLogErrorAt();
  }
  else
  {
LABEL_3:
    v4 = 0;
  }
  CFRelease(v2);
  return v4;
}

uint64_t browser_ensureWiFiPowerChangedListeningStarted(const void *a1)
{
  _BYTE *DerivedStorage;
  uint64_t started;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[196] || DerivedStorage[197])
    return 0;
  if (DerivedStorage[192])
  {
    started = browser_startWiFiPowerChangedListener((uint64_t)a1);
    if ((_DWORD)started)
      goto LABEL_9;
  }
  else
  {
    DerivedStorage[197] = 1;
    started = browser_ensureWiFiAvailableListeningStarted(a1);
    if ((_DWORD)started)
LABEL_9:
      APSLogErrorAt();
  }
  return started;
}

uint64_t browser_startWiFiPowerChangedListener(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 196))
    return 0;
  v3 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 192))
  {
    v4 = **(_DWORD **)DerivedStorage;
    if (v4 <= 40 && (v4 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v5 = APConnectivityHelperRegisterForEvent(*(_QWORD *)(v3 + 184), a1, 2);
    if ((_DWORD)v5)
      APSLogErrorAt();
    else
      *(_BYTE *)(v3 + 196) = 1;
  }
  else
  {
    APSLogErrorAt();
    return 4294960587;
  }
  return v5;
}

uint64_t browser_ensureWiFiAvailableListeningStarted(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 194))
    return 0;
  v3 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 192))
    return 0;
  if (!APSIsVirtualMachine())
  {
    v5 = APConnectivityHelperRegisterForEvent(*(_QWORD *)(v3 + 184), (uint64_t)a1, 1);
    if (!(_DWORD)v5)
    {
      *(_BYTE *)(v3 + 194) = 1;
      return v5;
    }
LABEL_13:
    APSLogErrorAt();
    return v5;
  }
  v4 = **(_DWORD **)v3;
  if (v4 <= 40 && (v4 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  *(_BYTE *)(v3 + 194) = 1;
  v5 = browser_handleConnectivityHelperEventInternal(a1, 1, 0);
  if ((_DWORD)v5)
    goto LABEL_13;
  return v5;
}

void browser_ensureConnectivityCheckTimerStopped()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = *(NSObject **)(DerivedStorage + 120);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 120));
    dispatch_release(v2);
    *(_QWORD *)(v1 + 120) = 0;
  }
  *(_BYTE *)(v1 + 128) = 0;
}

uint64_t _APBonjourBrowserStopBrowsingNANPartial(uint64_t result, _DWORD *a2)
{
  int v3;

  v3 = *(unsigned __int8 *)(result + 177);
  if (*(_BYTE *)(result + 177))
  {
    *(_BYTE *)(result + 177) = 0;
    result = BonjourBrowser_Stop();
    if (gLogCategory_APBonjourBrowser <= 50)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    v3 = 1;
  }
  if (a2)
    *a2 += v3;
  return result;
}

uint64_t _APBonjourBrowserStopBrowsingNANFull(uint64_t result, _DWORD *a2)
{
  int v3;

  v3 = *(unsigned __int8 *)(result + 193);
  if (*(_BYTE *)(result + 193))
  {
    *(_BYTE *)(result + 193) = 0;
    result = BonjourBrowser_Stop();
    if (gLogCategory_APBonjourBrowser <= 50)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    v3 = 1;
  }
  if (a2)
    *a2 += v3;
  return result;
}

uint64_t _APBonjourBrowserStopBrowsingForP2PInfra(uint64_t result, _DWORD *a2)
{
  int v3;

  v3 = *(unsigned __int8 *)(result + 161);
  if (*(_BYTE *)(result + 161))
  {
    *(_BYTE *)(result + 161) = 0;
    result = BonjourBrowser_Stop();
    if (gLogCategory_APBonjourBrowser <= 40)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    v3 = 1;
  }
  if (a2)
    *a2 += v3;
  return result;
}

const char *_APBonjourBrowserGetStringForMode(unsigned int a1)
{
  if (a1 < 4)
    return off_1E8255BD0[(__int16)a1];
  if (gLogCategory_APBonjourBrowser <= 60
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return "Unrecognized";
}

uint64_t APConnectivityHelperStartListeningToEvent(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = a1;
  v4 = a2;
  v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APConnectivityHelperStartListeningToEvent);
  return v5;
}

uint64_t APBrowserRapportManagerSetMode(uint64_t a1, __int16 a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  __int16 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APBrowserRapportManagerSetMode_block_invoke;
  block[3] = &unk_1E8256C30;
  block[4] = &v7;
  block[5] = a1;
  v6 = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t APBonjourBrowserSetMode(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APBonjourBrowserSetMode);
  return HIDWORD(v4);
}

uint64_t browser_stopNI()
{
  int v0;

  v0 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v0 <= 50 && (v0 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return browser_cleanupNI();
}

uint64_t browser_cleanupNI()
{
  uint64_t DerivedStorage;
  int v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 256))
  {
    v1 = **(_DWORD **)DerivedStorage;
    if (v1 <= 50 && (v1 != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }

  *(_QWORD *)(DerivedStorage + 264) = 0;
  objc_msgSend(*(id *)(DerivedStorage + 256), "invalidate");

  *(_QWORD *)(DerivedStorage + 256) = 0;
  return APSRotatingKeyMapperClear();
}

uint64_t _APBrokerManagerCopyReferencedObjectIfNecessary(uint64_t result, int *a2)
{
  int v3;

  if (a2)
  {
    if (result && (result = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
    {
      APSLogErrorAt();
      result = 0;
      v3 = -6723;
    }
    else
    {
      v3 = 0;
    }
    *a2 = v3;
  }
  else
  {
    APSLogErrorAt();
    return 0;
  }
  return result;
}

uint64_t BonjourDiscoveryDelegateStart()
{
  uint64_t v0;

  v0 = BonjourBrowser_Start();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t APBrowserRapportManager_update(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];

  if (*(_BYTE *)(a1 + 50) && *(_WORD *)(a1 + 48))
  {
    if (!*(_QWORD *)(a1 + 72))
    {
      if (gLogCategory_APBrowserRapportManager <= 40
        && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v2 = objc_alloc_init(MEMORY[0x1E0D83900]);
      if (!v2)
      {
        v6 = 4294895016;
        APSLogErrorAt();
        APSLogErrorAt();
        return v6;
      }
      v3 = v2;
      objc_msgSend(v2, "setDispatchQueue:", *(_QWORD *)(a1 + 32));
      objc_msgSend(v3, "setServiceType:", CFSTR("com.apple.airplay.discovery.service"));
      objc_msgSend(v3, "setControlFlags:", objc_msgSend(v3, "controlFlags") | 2);
      v4 = MEMORY[0x1E0C809B0];
      v5 = *(_QWORD *)(a1 + 40);
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __APBrowserRapportManager_ensureScanningStarted_block_invoke;
      v10[3] = &__block_descriptor_40_e31_v16__0__RPCompanionLinkDevice_8l;
      v10[4] = v5;
      objc_msgSend(v3, "setDeviceFoundHandler:", v10);
      v9[0] = v4;
      v9[1] = 3221225472;
      v9[2] = __APBrowserRapportManager_ensureScanningStarted_block_invoke_3;
      v9[3] = &__block_descriptor_40_e31_v16__0__RPCompanionLinkDevice_8l;
      v9[4] = v5;
      objc_msgSend(v3, "setDeviceLostHandler:", v9);
      v8[0] = v4;
      v8[1] = 3221225472;
      v8[2] = __APBrowserRapportManager_ensureScanningStarted_block_invoke_5;
      v8[3] = &__block_descriptor_40_e17_v16__0__NSError_8l;
      v8[4] = v5;
      objc_msgSend(v3, "activateWithCompletion:", v8);
      *(_QWORD *)(a1 + 72) = v3;
    }
  }
  else if (*(_QWORD *)(a1 + 72))
  {
    if (gLogCategory_APBrowserRapportManager <= 40
      && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    objc_msgSend(*(id *)(a1 + 72), "invalidate");

    *(_QWORD *)(a1 + 72) = 0;
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 80));
  }
  return 0;
}

uint64_t APBrowserBTLEManagerSetMode(uint64_t a1, __int16 a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v3 = *(void **)(a1 + 16);
  v4 = objc_msgSend(v3, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APBrowserBTLEManagerSetMode_block_invoke;
  block[3] = &unk_1E8254D70;
  block[4] = v3;
  block[5] = &v9;
  v8 = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1C9388C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APBrowserRapportManager_ensurePreferencesUpdated(_BYTE *a1, int a2)
{
  uint64_t v3;

  if (a1[51])
    return 4294895012;
  if (!a2 && a1[52])
    return 0;
  a1[50] = 1;
  v3 = APBrowserRapportManager_update((uint64_t)a1);
  if ((_DWORD)v3)
    APSLogErrorAt();
  else
    a1[52] = 1;
  return v3;
}

void _APBonjourBrowserSetMode(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  _WORD *v5;
  int v6;
  _WORD *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (!v4)
  {
    if (!*(_BYTE *)(v2 + 211))
      goto LABEL_8;
LABEL_4:
    v6 = 0;
LABEL_19:
    v8 = 0;
    goto LABEL_20;
  }
  do
  {
    v5 = (_WORD *)v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  if (*(_BYTE *)(v2 + 211) || *v5 == 2)
    goto LABEL_4;
LABEL_8:
  if (!*(_QWORD *)(v2 + 216))
  {
    v6 = -72211;
LABEL_18:
    APSLogErrorAt();
    goto LABEL_19;
  }
  if (v3 >= 4)
  {
    if (gLogCategory_APBonjourBrowser <= 90
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = -72211;
    goto LABEL_18;
  }
  v7 = malloc_type_calloc(1uLL, 0x20uLL, 0x10620408E24C83AuLL);
  v8 = v7;
  if (!v7)
  {
    APSLogErrorAt();
    v6 = -72210;
    goto LABEL_20;
  }
  *v7 = 0;
  v7[4] = v3;
  v6 = _APBonjourBrowserEnqueueOperation(v2, (uint64_t)v7);
  if (!v6)
    goto LABEL_19;
  APSLogErrorAt();
LABEL_20:
  _APBonjourBrowserOperationDisposeNullSafe(v8);
  *(_DWORD *)(a1 + 12) = v6;
}

uint64_t _APBonjourBrowserEnqueueOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    do
    {
      v5 = (_WORD *)v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    if (!*(_BYTE *)(a1 + 211) && *v5 != 2)
    {
      do
      {
        v7 = v2;
        v2 = *(_QWORD *)(v2 + 24);
      }
      while (v2);
      v3 = (_QWORD *)(v7 + 24);
      goto LABEL_11;
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 211))
    return 0;
LABEL_11:
  *v3 = a2;
  *(_QWORD *)(a2 + 24) = 0;
  v6 = _APBonjourBrowserProcessOperationQueue((char *)a1);
  if ((_DWORD)v6)
    APSLogErrorAt();
  return v6;
}

uint64_t _APBonjourBrowserProcessOperationQueue(char *cf)
{
  unsigned __int16 *v1;
  char *v3;
  char *v4;
  const char *StringForMode;
  const char *v6;
  const char *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  const char *v12;
  unsigned int v13;
  int v14;
  int v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  int v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  int v31;
  char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;

  v1 = (unsigned __int16 *)*((_QWORD *)cf + 4);
  if (v1)
  {
    v3 = cf + 40;
    while (1)
    {
      v4 = (char *)*v1;
      switch(*v1)
      {
        case 0u:
        case 3u:
        case 4u:
          if (gLogCategory_APBonjourBrowser <= 30
            && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
          {
            StringForMode = _APBonjourBrowserGetStringForMode(*((unsigned __int16 *)cf + 20));
            if (cf[56])
              v6 = "yes";
            else
              v6 = "no";
            if (cf[57])
              v7 = "yes";
            else
              v7 = "no";
            v35 = v6;
            v36 = v7;
            v33 = cf;
            v34 = StringForMode;
            LogPrintF();
          }
          v11 = v1 + 4;
          v12 = (const char *)*v1;
          if (*v1)
            v11 = (unsigned __int16 *)v3;
          v13 = *v11;
          if ((_DWORD)v12 == 3)
          {
            v14 = 1;
          }
          else
          {
            v14 = cf[56];
            if ((_DWORD)v12 == 4)
            {
              v15 = 1;
              goto LABEL_30;
            }
          }
          v15 = cf[57];
LABEL_30:
          if (*((_BYTE *)v1 + 16))
          {
            if (gLogCategory_APBonjourBrowser <= 30)
            {
              if (gLogCategory_APBonjourBrowser != -1)
                goto LABEL_33;
              if (_LogCategory_Initialize())
              {
                v12 = (const char *)*v1;
LABEL_33:
                v16 = _APBonjourBrowserGetStringForMode(v13);
                if (v14)
                  v17 = "yes";
                else
                  v17 = "no";
                if (v15)
                  v18 = "yes";
                else
                  v18 = "no";
                v36 = v17;
                v37 = v18;
                v34 = v12;
                v35 = v16;
                v33 = cf;
                LogPrintF();
              }
            }
            v10 = 0;
            goto LABEL_57;
          }
          if (gLogCategory_APBonjourBrowser > 30)
            goto LABEL_56;
          if (gLogCategory_APBonjourBrowser != -1)
            goto LABEL_42;
          if (_LogCategory_Initialize())
          {
            v12 = (const char *)*v1;
LABEL_42:
            v19 = _APBonjourBrowserGetStringForMode(v13);
            if (v14)
              v20 = "yes";
            else
              v20 = "no";
            if (v15)
              v21 = "yes";
            else
              v21 = "no";
            v36 = v20;
            v37 = v21;
            v34 = v12;
            v35 = v19;
            v33 = cf;
            LogPrintF();
          }
LABEL_56:
          v10 = _APBonjourBrowserSetModeInternal((uint64_t)cf, v13, v14, v15, (_DWORD *)v1 + 5);
LABEL_57:
          v22 = *((_DWORD *)v1 + 5);
          *((_BYTE *)v1 + 16) = v22 != 0;
          if (!v22)
          {
            if (gLogCategory_APBonjourBrowser <= 30
              && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
            {
              v23 = (const char *)*v1;
              v24 = _APBonjourBrowserGetStringForMode(v13);
              if (v14)
                v25 = "yes";
              else
                v25 = "no";
              if (v15)
                v26 = "yes";
              else
                v26 = "no";
              v36 = v25;
              v37 = v26;
              v34 = v23;
              v35 = v24;
              v33 = cf;
              LogPrintF();
            }
            _APBonjourBrowserHandleModeChangeCompleteInternal((uint64_t)cf, v13);
            if (gLogCategory_APBonjourBrowser <= 30
              && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
            {
              v27 = _APBonjourBrowserGetStringForMode(*((unsigned __int16 *)cf + 20));
              if (cf[56])
                v28 = "yes";
              else
                v28 = "no";
              if (cf[57])
                v29 = "yes";
              else
                v29 = "no";
              v35 = v28;
              v36 = v29;
              v33 = cf;
              v34 = v27;
              goto LABEL_77;
            }
            goto LABEL_81;
          }
LABEL_82:
          if (*((_BYTE *)v1 + 16))
            return v10;
          v30 = *((_QWORD *)cf + 4);
          if (!v30)
          {
            v10 = 4294895083;
            APSLogErrorAt();
            APSLogErrorAt();
            return v10;
          }
          *((_QWORD *)cf + 4) = *(_QWORD *)(v30 + 24);
          _APBonjourBrowserOperationDisposeNullSafe(v1);
          v1 = (unsigned __int16 *)*((_QWORD *)cf + 4);
          if (!v1)
            return 0;
          break;
        case 1u:
          v8 = *((_QWORD *)v1 + 1);
          v9 = (const void *)*((_QWORD *)cf + 6);
          if (v8)
            CFRetain(*((CFTypeRef *)v1 + 1));
          *((_QWORD *)cf + 6) = v8;
          if (v9)
            CFRelease(v9);
          goto LABEL_81;
        case 2u:
          if (*((_BYTE *)v1 + 16))
          {
            v10 = 0;
          }
          else
          {
            v10 = _APBonjourBrowserSetModeInternal((uint64_t)cf, 0, 0, 0, (_DWORD *)v1 + 5);
            if (*((_QWORD *)cf + 29))
            {
              if (gLogCategory_APBonjourBrowser <= 50
                && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
              {
                v33 = (char *)*((_QWORD *)cf + 10);
                LogPrintF();
              }
              objc_msgSend(*((id *)cf + 29), "invalidate", v33, v34, v35, v36, v37);

              *((_QWORD *)cf + 29) = 0;
            }
          }
          v31 = *((_DWORD *)v1 + 5);
          *((_BYTE *)v1 + 16) = v31 != 0;
          if (!v31)
          {
            _APBonjourBrowserHandleModeChangeCompleteInternal((uint64_t)cf, 0);
            _APBonjourBrowserDispatchEvent((uint64_t)cf, 3, 0);
            v10 = 0;
            cf[211] = 1;
          }
          goto LABEL_82;
        default:
          if (gLogCategory_APBonjourBrowser > 90)
            goto LABEL_81;
          if (gLogCategory_APBonjourBrowser != -1)
            goto LABEL_15;
          if (_LogCategory_Initialize())
          {
            v4 = (char *)*v1;
LABEL_15:
            v33 = v4;
LABEL_77:
            LogPrintF();
          }
LABEL_81:
          v10 = 0;
          goto LABEL_82;
      }
    }
  }
  return 0;
}

void _APBonjourBrowserOperationDisposeNullSafe(_QWORD *a1)
{
  int v2;
  const void *v4;

  if (a1)
  {
    v2 = *(unsigned __int16 *)a1;
    if ((v2 - 2) >= 3 && v2 != 0)
    {
      if (v2 == 1)
      {
        v4 = (const void *)a1[1];
        if (v4)
          CFRelease(v4);
      }
      else if (gLogCategory_APBonjourBrowser <= 60
             && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    free(a1);
  }
}

uint64_t _APBonjourBrowserHandleModeChangeCompleteInternal(uint64_t cf, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (*(unsigned __int16 *)(cf + 40) != a2)
  {
    v3 = cf;
    *(_WORD *)(cf + 40) = a2;
    if (gLogCategory_APBonjourBrowser > 30)
      goto LABEL_6;
    v4 = a2;
    if (gLogCategory_APBonjourBrowser == -1)
    {
      cf = _LogCategory_Initialize();
      if (!(_DWORD)cf)
      {
LABEL_6:
        if (!a2)
          return _APBonjourBrowserDispatchEvent(v3, 2, 0);
        return cf;
      }
      v4 = *(unsigned __int16 *)(v3 + 40);
    }
    _APBonjourBrowserGetStringForMode(v4);
    cf = LogPrintF();
    goto LABEL_6;
  }
  return cf;
}

_DWORD *_APConnectivityHelperStartListeningToEvent(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  void *v6;
  _QWORD v7[5];

  v1 = result;
  v2 = *(_QWORD *)result;
  if (*(_BYTE *)(*(_QWORD *)result + 200))
  {
    result = (_DWORD *)APSLogErrorAt();
    v4 = -72203;
  }
  else
  {
    v3 = result[2];
    if (v3)
    {
      if (gLogCategory_APConnectivityHelper <= 50)
      {
        if (gLogCategory_APConnectivityHelper != -1 || (result = (_DWORD *)_LogCategory_Initialize(), (_DWORD)result))
        {
          APConnectivityHelperGetEventString(v3);
          result = (_DWORD *)LogPrintF();
        }
      }
      switch(v3)
      {
        case 1:
          *(_BYTE *)(v2 + 79) = 1;
          result = (_DWORD *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(v2);
          v4 = (int)result;
          if ((_DWORD)result)
          {
            result = (_DWORD *)APSLogErrorAt();
            *(_BYTE *)(v2 + 79) = 0;
          }
          break;
        case 2:
          if (*(_BYTE *)(v2 + 77) || *(_BYTE *)(v2 + 78))
            goto LABEL_72;
          if (*(_QWORD *)(v2 + 48))
          {
            result = (_DWORD *)_APConnectivityHelperStartWiFiPowerListener(v2);
            v4 = (int)result;
            if ((_DWORD)result)
              goto LABEL_62;
          }
          else
          {
            *(_BYTE *)(v2 + 78) = 1;
            result = (_DWORD *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(v2);
            v4 = (int)result;
            if ((_DWORD)result)
              goto LABEL_62;
          }
          break;
        case 3:
          if (*(_BYTE *)(v2 + 73) || *(_BYTE *)(v2 + 74))
            goto LABEL_72;
          if (*(_QWORD *)(v2 + 48))
          {
            result = (_DWORD *)_APConnectivityHelperStartWiFiNetworkListener(v2);
            v4 = (int)result;
            if ((_DWORD)result)
              goto LABEL_62;
          }
          else
          {
            *(_BYTE *)(v2 + 74) = 1;
            result = (_DWORD *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(v2);
            v4 = (int)result;
            if ((_DWORD)result)
              goto LABEL_62;
          }
          break;
        case 4:
          if (*(_BYTE *)(v2 + 112))
            goto LABEL_72;
          *(_BYTE *)(v2 + 112) = 1;
          result = (_DWORD *)_APConnectivityHelperStartListeningToDynamicStoreNetworkEntity(v2, (CFStringRef)*MEMORY[0x1E0CE8B90], _APConnectivityHelperHandleUSBNetworkChangedEvent);
          if ((_DWORD)result)
          {
            v4 = (int)result;
            APSLogErrorAt();
            *(_BYTE *)(v2 + 112) = 0;
            _APConnectivityHelperStopUSBInterfaceListener(v2);
            APSLogErrorAt();
            goto LABEL_76;
          }
          if (gLogCategory_APConnectivityHelper > 40)
            goto LABEL_72;
          if (gLogCategory_APConnectivityHelper == -1)
          {
            result = (_DWORD *)_LogCategory_Initialize();
            if (!(_DWORD)result)
              goto LABEL_72;
          }
          goto LABEL_42;
        case 5:
          goto LABEL_20;
        case 6:
          if (*(_BYTE *)(v2 + 160))
            goto LABEL_72;
          *(_BYTE *)(v2 + 160) = 1;
          result = (_DWORD *)_APConnectivityHelperStartListeningToDynamicStoreNetworkEntity(v2, (CFStringRef)*MEMORY[0x1E0CE8B80], _APConnectivityHelperHandleIPv6ChangedEvent);
          if ((_DWORD)result)
          {
            v4 = (int)result;
            APSLogErrorAt();
            *(_BYTE *)(v2 + 160) = 0;
            _APConnectivityHelperStopIPv6AddressListener(v2);
            APSLogErrorAt();
            goto LABEL_76;
          }
          if (gLogCategory_APConnectivityHelper <= 40)
          {
            if (gLogCategory_APConnectivityHelper != -1
              || (result = (_DWORD *)_LogCategory_Initialize(), (_DWORD)result))
            {
LABEL_42:
              result = (_DWORD *)LogPrintF();
            }
          }
          goto LABEL_72;
        case 7:
          *(_BYTE *)(v2 + 176) = 1;
          result = (_DWORD *)_APConnectivityHelperEnsureAWDLDevicePresentListenerStarted(v2);
          v4 = (int)result;
          if ((_DWORD)result)
          {
            result = (_DWORD *)APSLogErrorAt();
            *(_BYTE *)(v2 + 176) = 0;
          }
          break;
        case 8:
          if (!*(_BYTE *)(v2 + 137))
          {
            if (!*(_BYTE *)(v2 + 138))
            {
              if (gLogCategory_APConnectivityHelper <= 40
                && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v6 = (void *)objc_opt_new();
              *(_QWORD *)(v2 + 128) = v6;
              if (v6)
              {
                v7[0] = MEMORY[0x1E0C809B0];
                v7[1] = 3221225472;
                v7[2] = ___APConnectivityHelperStartAWDLSoloSupportListener_block_invoke;
                v7[3] = &unk_1E8257018;
                v7[4] = v2;
                objc_msgSend(v6, "setStateUpdatedHandler:", v7);
                result = (_DWORD *)objc_msgSend(*(id *)(v2 + 128), "beginMonitoring");
                *(_BYTE *)(v2 + 138) = 1;
              }
              else
              {
                result = (_DWORD *)APSLogErrorAt();
              }
            }
LABEL_72:
            v4 = 0;
            break;
          }
          result = (_DWORD *)_APConnectivityHelperSendAWDLSoloSupportEvent(v2);
          v4 = (int)result;
          if (!(_DWORD)result)
            break;
          goto LABEL_76;
        case 9:
          if (*(_BYTE *)(v2 + 75) || *(_BYTE *)(v2 + 76))
            goto LABEL_72;
          if (*(_QWORD *)(v2 + 48))
          {
            result = (_DWORD *)_APConnectivityHelperStartLinkDebounceFailedListener(v2);
            v4 = (int)result;
            if (!(_DWORD)result)
              break;
          }
          else
          {
            *(_BYTE *)(v2 + 76) = 1;
            result = (_DWORD *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(v2);
            v4 = (int)result;
            if (!(_DWORD)result)
              break;
          }
LABEL_62:
          APSLogErrorAt();
          goto LABEL_76;
        default:
          if ((v3 - 100) > 9 || ((1 << (v3 - 100)) & 0x39F) == 0)
          {
LABEL_20:
            v4 = -72201;
            if (gLogCategory_APConnectivityHelper <= 60)
            {
              if (gLogCategory_APConnectivityHelper != -1)
                goto LABEL_17;
              result = (_DWORD *)_LogCategory_Initialize();
              if ((_DWORD)result)
                goto LABEL_17;
            }
          }
          else
          {
            v4 = -72201;
            if (gLogCategory_APConnectivityHelper <= 60)
            {
              if (gLogCategory_APConnectivityHelper != -1
                || (result = (_DWORD *)_LogCategory_Initialize(), (_DWORD)result))
              {
                APConnectivityHelperGetEventString(v3);
LABEL_17:
                result = (_DWORD *)LogPrintF();
                break;
              }
            }
          }
          break;
      }
    }
    else
    {
      v4 = -72201;
LABEL_76:
      result = (_DWORD *)APSLogErrorAt();
    }
  }
  v1[3] = v4;
  return result;
}

uint64_t _APConnectivityHelperStartWiFiPowerListener(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (*(_BYTE *)(a1 + 77))
    return 0;
  if (!*(_QWORD *)(a1 + 48))
  {
    v2 = 4294895091;
LABEL_13:
    APSLogErrorAt();
    return v2;
  }
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    v5 = a1;
    LogPrintF();
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "startMonitoringEventType:error:", 1, &v6, v5) & 1) == 0)
  {
    v3 = NSErrorToOSStatus();
    if (v3)
      v2 = v3;
    else
      v2 = 4294895094;
    goto LABEL_13;
  }
  v2 = 0;
  *(_BYTE *)(a1 + 77) = 1;
  return v2;
}

void APBrowserRapportManager_runOnQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  _QWORD v6[6];

  if (_APBrowserRapportManager_getActiveManagers_once != -1)
    dispatch_once(&_APBrowserRapportManager_getActiveManagers_once, &__block_literal_global_16);
  v3 = FigCFWeakReferenceTableCopyValue();
  if (v3)
  {
    v4 = (const void *)v3;
    v5 = *(NSObject **)(v3 + 16);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __APBrowserRapportManager_runOnQueue_block_invoke;
    v6[3] = &unk_1E8256D30;
    v6[4] = a2;
    v6[5] = v4;
    dispatch_sync(v5, v6);
    CFRelease(v4);
  }
}

uint64_t APTPackageRTPBufferedCreate(const __CFAllocator *a1, _QWORD *a2)
{
  return APTPackageRTPBufferedCreateWithBBuf(a1, 0, a2);
}

uint64_t APTPackageRTPBufferedCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, _QWORD *a3)
{
  uint64_t v6;
  CFAllocatorRef **DerivedStorage;
  uint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t PayloadSize;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CMBlockBufferRef blockBufferOut;
  _DWORD dataLength[3];

  memset(dataLength, 0, sizeof(dataLength));
  blockBufferOut = 0;
  APTransportPackageGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v13 = v6;
    goto LABEL_30;
  }
  DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  v8 = APTransportParcelMake(3uLL, 0, DerivedStorage);
  if ((_DWORD)v8)
  {
    v13 = v8;
    goto LABEL_30;
  }
  if (a2)
  {
    v9 = CMBlockBufferGetDataLength(a2);
    if (v9 <= 2)
    {
      v13 = 4294894936;
      goto LABEL_30;
    }
    v10 = v9;
    PayloadSize = APTPackageRTPBufferedGetPayloadSize(a2, dataLength);
    if ((_DWORD)PayloadSize)
    {
      v13 = PayloadSize;
      goto LABEL_30;
    }
    if (v10 != dataLength[0] + 3)
    {
      v13 = 4294894936;
      goto LABEL_30;
    }
    if (dataLength[0])
    {
      v12 = CMBlockBufferCreateWithBufferReference(a1, a2, 3uLL, dataLength[0], 0, &blockBufferOut);
      if ((_DWORD)v12)
      {
        v13 = v12;
LABEL_30:
        APSLogErrorAt();
        goto LABEL_18;
      }
    }
    else
    {
      v14 = CMBlockBufferCreateEmpty(a1, 0, 0, &blockBufferOut);
      if ((_DWORD)v14)
      {
        v13 = v14;
        goto LABEL_30;
      }
    }
    v15 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
    if ((_DWORD)v15)
    {
      v13 = v15;
      goto LABEL_30;
    }
    APTransportParcelSetMessageType((uint64_t)*DerivedStorage, 1651861089);
  }
  if (gLogCategory_APTPackageRTPBuffered <= 30
    && (gLogCategory_APTPackageRTPBuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v13 = 0;
  *a3 = *(_QWORD *)&dataLength[1];
  *(_QWORD *)&dataLength[1] = 0;
LABEL_18:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (*(_QWORD *)&dataLength[1])
    CFRelease(*(CFTypeRef *)&dataLength[1]);
  return v13;
}

uint64_t APTPackageRTPBufferedGetPayloadSize(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 destination;
  unsigned __int8 v9;

  v9 = 0;
  destination = 0;
  if (!a1)
  {
    v6 = 4294894936;
LABEL_15:
    APSLogErrorAt();
    return v6;
  }
  if (!a2)
  {
    v6 = 4294894936;
    goto LABEL_15;
  }
  if (CMBlockBufferGetDataLength(a1) <= 2)
  {
    v6 = 4294894936;
    goto LABEL_15;
  }
  v4 = CMBlockBufferCopyDataBytes(a1, 0, 3uLL, &destination);
  if ((_DWORD)v4)
  {
    v6 = v4;
    goto LABEL_15;
  }
  if (v9 != 128)
  {
    v6 = 4294894936;
    goto LABEL_15;
  }
  v5 = bswap32(destination) >> 16;
  if (v5 <= 2)
  {
    v6 = 4294894936;
    goto LABEL_15;
  }
  v6 = 0;
  *a2 = v5 - 3;
  return v6;
}

uint64_t APTPackageRTPBufferedGetHeaderSize(_DWORD *a1)
{
  uint64_t result;

  if (a1)
  {
    result = 0;
    *a1 = 3;
  }
  else
  {
    APSLogErrorAt();
    return 4294894936;
  }
  return result;
}

uint64_t APTPackageRTPBufferedGetMaxPayloadSize(_QWORD *a1)
{
  if (a1)
    *a1 = 65534;
  else
    APSLogErrorAt();
  return 0;
}

void rtpbufpackage_Finalize()
{
  void **DerivedStorage;

  DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTPackageRTPBuffered <= 30
    && (gLogCategory_APTPackageRTPBuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *DerivedStorage = 0;
}

__CFString *rtpbufpackage_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTPackageRTPBuffered %p>"), a1);
  return Mutable;
}

const void *rtpbufpackage_CopyMessageData()
{
  uint64_t *DerivedStorage;
  const void *MessageData;
  const void *v2;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageData = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  v2 = MessageData;
  if (MessageData)
    CFRetain(MessageData);
  return v2;
}

uint64_t rtpbufpackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  _QWORD **DerivedStorage;

  DerivedStorage = (_QWORD **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(*DerivedStorage, a2);
}

uint64_t rtpbufpackage_GetMessageType()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(*DerivedStorage);
}

uint64_t rtpbufpackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(*DerivedStorage, a2);
}

CMBlockBufferRef rtpbufpackage_CreateBBufRepresentation()
{
  uint64_t *DerivedStorage;
  OpaqueCMBlockBuffer *MessageData;
  CMBlockBufferRef v3;
  __int16 v4;
  char v5;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v3 = 0;
  MessageData = (OpaqueCMBlockBuffer *)APTransportParcelGetMessageData(*DerivedStorage);
  v4 = bswap32(CMBlockBufferGetDataLength(MessageData) + 3) >> 16;
  v5 = 0x80;
  APTransportParcelCreateBBufRepresentation(*DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v4, &v3);
  return v3;
}

BOOL rtpbufpackage_IsEndOfBurst()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(*DerivedStorage) == 1650814818;
}

uint64_t APBrowserBTLEManagerGetTypeID()
{
  if (gAPBrowserBTLEManagerInitOnce != -1)
    dispatch_once(&gAPBrowserBTLEManagerInitOnce, &__block_literal_global);
  return gAPBrowserBTLEManagerTypeID;
}

uint64_t APBrowserBTLEManagerCreate(uint64_t a1, id **a2)
{
  uint64_t Instance;
  id *v5;
  APBrowserBTLEManager *v6;
  uint64_t v7;

  if (gAPBrowserBTLEManagerInitOnce != -1)
    dispatch_once(&gAPBrowserBTLEManagerInitOnce, &__block_literal_global);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v5 = (id *)Instance;
    *(_QWORD *)(Instance + 16) = 0;
    v6 = -[APBrowserBTLEManager initWithEventContext:]([APBrowserBTLEManager alloc], "initWithEventContext:", Instance);
    v5[2] = v6;
    if (v6)
    {
      if (a1)
        objc_msgSend(v5[2], "setBrowseForAltReceiver:", CFDictionaryGetInt64() != 0);
      v7 = 0;
      *a2 = v5;
    }
    else
    {
      v7 = 4294895076;
      APSLogErrorAt();
      CFRelease(v5);
    }
  }
  else
  {
    v7 = 4294895076;
    APSLogErrorAt();
  }
  return v7;
}

uint64_t APBrowserBTLEManagerInvalidate(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v1 = *(void **)(a1 + 16);
  v2 = objc_msgSend(v1, "queue");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __APBrowserBTLEManagerInvalidate_block_invoke;
  v5[3] = &unk_1E8254D48;
  v5[4] = v1;
  v5[5] = &v6;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1C938AAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APBrowserBTLEManagerGetMode(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v3 = *(void **)(a1 + 16);
  v4 = objc_msgSend(v3, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APBrowserBTLEManagerGetMode_block_invoke;
  block[3] = &unk_1E8254D98;
  block[4] = v3;
  block[5] = &v8;
  block[6] = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1C938ABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APBrowserBTLEManagerSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD block[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v6 = *(void **)(a1 + 16);
  v7 = objc_msgSend(v6, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APBrowserBTLEManagerSetEventHandler_block_invoke;
  block[3] = &unk_1E8254DC0;
  block[4] = v6;
  block[5] = &v11;
  block[6] = a2;
  block[7] = a3;
  block[8] = a1;
  dispatch_sync(v7, block);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1C938ACDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APBrowserBTLEManagerCopyShowInfo(uint64_t a1, int a2, uint64_t a3)
{
  void *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v5 = *(void **)(a1 + 16);
  v6 = objc_msgSend(v5, "queue");
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __APBrowserBTLEManagerCopyShowInfo_block_invoke;
  v9[3] = &unk_1E8254DE8;
  v9[4] = v5;
  v9[5] = &v11;
  v9[6] = a3;
  v10 = a2;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1C938ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APBrowserBTLEManagerUpdatePreferences(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v1 = *(void **)(a1 + 16);
  v2 = objc_msgSend(v1, "queue");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __APBrowserBTLEManagerUpdatePreferences_block_invoke;
  v5[3] = &unk_1E8254D48;
  v5[4] = v1;
  v5[5] = &v6;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1C938AEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APBrowserBTLEManagerSetLocalDeviceSupportsSolo(uint64_t a1, char a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v3 = *(void **)(a1 + 16);
  v4 = objc_msgSend(v3, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APBrowserBTLEManagerSetLocalDeviceSupportsSolo_block_invoke;
  block[3] = &unk_1E8254E10;
  block[4] = v3;
  block[5] = &v9;
  v8 = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1C938AFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C938BCC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t APBrowserBTLEManagerTestCreateEventDictionaryFromFile()
{
  return 4294895074;
}

uint64_t APBrowserBTLEManagerTestCreateEventDictionary()
{
  return 4294895074;
}

void _APBrowserBTLEManagerFinalize(uint64_t a1)
{

}

uint64_t APTransportSessionCreate(const __CFAllocator *a1, int a2, const void *a3, const void *a4, const __CFDictionary *a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  CFUUIDRef v13;
  dispatch_queue_t v14;
  dispatch_queue_t v15;
  uint64_t v16;
  const void *Value;
  const void *v18;
  uint64_t v19;
  const void *v20;
  _QWORD *v21;
  const void *v22;
  CFStringRef v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  const void *SharedHelper;
  CFTypeRef v28;
  unsigned int v30;
  char label[64];
  CMTime time;
  uint64_t v33;
  CFUUIDBytes v34;

  v33 = *MEMORY[0x1E0C80C00];
  FigTransportSessionGetClassID();
  v30 = CMDerivedObjectCreate();
  if (v30)
    goto LABEL_60;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 32) = a3;
  if (a3)
    CFRetain(a3);
  UUIDGet();
  *(_QWORD *)&v34.byte0 = 0;
  *(_QWORD *)&v34.byte8 = 0;
  v13 = CFUUIDCreateFromUUIDBytes(a1, v34);
  *(_QWORD *)(DerivedStorage + 40) = v13;
  if (!v13
    || (SNPrintF(), v14 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 8) = v14) == 0)
    || (v15 = dispatch_queue_create("APTransportSession.notifications", 0),
        (*(_QWORD *)(DerivedStorage + 16) = v15) == 0))
  {
    APSLogErrorAt();
    return -16601;
  }
  *(_DWORD *)(DerivedStorage + 24) = a2;
  v30 = FigCFWeakReferenceTableCreate();
  if (v30 || (v30 = FigCFWeakReferenceTableCreate()) != 0)
  {
LABEL_60:
    APSLogErrorAt();
    return v30;
  }
  *(_DWORD *)(DerivedStorage + 120) = 0;
  v16 = MEMORY[0x1E0CA2E18];
  *(_DWORD *)(DerivedStorage + 92) = -1;
  *(_OWORD *)(DerivedStorage + 216) = *(_OWORD *)v16;
  *(_QWORD *)(DerivedStorage + 232) = *(_QWORD *)(v16 + 16);
  if (a5)
  {
    Value = CFDictionaryGetValue(a5, CFSTR("OwningService"));
    if (Value)
      Value = CFRetain(Value);
    *(_QWORD *)(DerivedStorage + 152) = Value;
    *(_DWORD *)(DerivedStorage + 92) = CFDictionaryGetInt64();
    v18 = CFDictionaryGetValue(a5, CFSTR("TransportTester_RemoteNetworkAddress"));
    if (v18)
      v18 = CFRetain(v18);
    *(_QWORD *)(DerivedStorage + 96) = v18;
    *(_DWORD *)(DerivedStorage + 120) = CFDictionaryGetInt64();
    if (gLogCategory_APTransportSession <= 40
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)(DerivedStorage + 124) = CFDictionaryGetInt64();
    if (gLogCategory_APTransportSession <= 40
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (FigCFDictionaryGetCMTimeIfPresent()
      && gLogCategory_APTransportSession <= 40
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      time = *(CMTime *)(DerivedStorage + 216);
      CMTimeGetSeconds(&time);
      LogPrintF();
    }
    *(_BYTE *)(DerivedStorage + 129) = CFDictionaryGetInt64() != 0;
    *(_BYTE *)(DerivedStorage + 128) = CFDictionaryGetInt64() != 0;
    v19 = CMBaseObjectGetDerivedStorage();
    if (CFDictionaryGetValue(a5, CFSTR("EventRecorder")))
    {
      v22 = *(const void **)(v19 + 240);
      v21 = (_QWORD *)(v19 + 240);
      v20 = v22;
      if (v22)
      {
        CFRelease(v20);
        *v21 = 0;
      }
      APSEventRecorderCopyChildEventRecorderOfType();
      if (!*v21)
      {
        SNPrintF();
        v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)&time, 0x8000100u);
        if (APSEventRecorderCreate()
          && gLogCategory_APTransportSession <= 60
          && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        APSEventRecorderAddSignPostForEvent();
        if (v23)
          CFRelease(v23);
      }
    }
    v30 = 0;
  }
  *(_DWORD *)(DerivedStorage + 184) = 0;
  if (a4)
    v24 = CFRetain(a4);
  else
    v24 = 0;
  *(_QWORD *)(DerivedStorage + 64) = v24;
  v25 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v25 + 208))
  {
    v26 = v25;
    SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
    if (SharedHelper)
    {
      v28 = CFRetain(SharedHelper);
      *(_QWORD *)(v26 + 208) = v28;
      if (v28
        && !APConnectivityHelperRegisterEventHandler((uint64_t)v28, 0, (uint64_t)session_handleConnectivityHelperEvents)&& !APConnectivityHelperRegisterForEvent(*(_QWORD *)(v26 + 208), 0, 1)&& (!*(_BYTE *)(v26 + 129) || !APConnectivityHelperRegisterForEvent(*(_QWORD *)(v26 + 208), 0, 4)))
      {
        goto LABEL_52;
      }
    }
    else
    {
      *(_QWORD *)(v26 + 208) = 0;
    }
    APSLogErrorAt();
  }
LABEL_52:
  if (gLogCategory_APTransportSession <= 40
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APSIntrospectorAddCommand();
  *a6 = 0;
  return v30;
}

uint64_t session_introspectReportNetworkStatus(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  const void *v4;

  if (result)
  {
    if (a3 <= 1)
    {
      APSLogErrorAt();
      return FPrintF();
    }
    else
    {
      v4 = (const void *)result;
      strtol(*(const char **)(a4 + 8), 0, 10);
      return session_reportNetworkStatus(v4);
    }
  }
  return result;
}

uint64_t APTransportSessionUnregisterStream(const void *a1)
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

void session_unregisterStreamInternal(uint64_t a1)
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
  }
  else
  {
    APTransportStreamIDGetToken(*(_QWORD *)(a1 + 8));
    FigCFWeakReferenceTableRemoveValue();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

uint64_t APTransportSessionHandleStreamEvent(const void *a1, const void *a2, int a3, const void *a4)
{
  uint64_t v7;
  CFTypeID v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  const void *v14;
  const void *v15;
  uint64_t v16;

  v13 = 0;
  if (a3)
  {
    return APSSignalErrorAt();
  }
  else
  {
    v7 = APSGetFBOPropertyInt64();
    if (v7 == 1702260340 || v7 == 1668575852)
    {
      v12 = 0;
      if (a4)
      {
        v9 = CFGetTypeID(a4);
        if (v9 != CFNumberGetTypeID())
        {
          APSLogErrorAt();
          v13 = -16600;
          APSSignalErrorAt();
          return v13;
        }
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &v12);
        v10 = v12;
      }
      else
      {
        v10 = 0;
      }
      CMBaseObjectGetDerivedStorage();
      v15 = a2;
      v14 = a1;
      v16 = v10;
      CFRetain(a1);
      CFRetain(a2);
      APSDispatchAsyncFHelper();
    }
  }
  return v13;
}

uint64_t session_Invalidate()
{
  uint64_t *DerivedStorage;
  uint64_t *v1;
  uint64_t v2;
  uint64_t SharedTransport;
  const void *v5;
  const void *v6;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v1 = DerivedStorage;
  v2 = APSDispatchSyncTask();
  if (v1[18])
  {
    SharedTransport = APTransportGetSharedTransport();
    APTransportUnregisterSession(SharedTransport, v1[18]);
  }
  else if (v1[20])
  {
    v5 = (const void *)v1[19];
    if (v5)
    {
      APTransportServiceUnregisterSession(v5);
      v6 = (const void *)v1[19];
      if (v6)
        CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  return v2;
}

void session_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  session_invalidateInternal(a1);
  if (gLogCategory_APTransportSession <= 50
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = (const void *)DerivedStorage[30];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[30] = 0;
  }
  v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  v5 = (const void *)DerivedStorage[5];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[5] = 0;
  }
  v6 = (const void *)DerivedStorage[26];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[26] = 0;
  }
  v7 = DerivedStorage[1];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[1] = 0;
  }
  v8 = DerivedStorage[2];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[2] = 0;
  }
}

__CFString *session_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportSession %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 32));
  return Mutable;
}

uint64_t session_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t session_SetProperty(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    return 4294954511;
  }
  else if (a2)
  {
    return FigDispatchAsyncSetPropertyImplementation();
  }
  else
  {
    APSLogErrorAt();
    return 4294950696;
  }
}

uint64_t session_invalidateInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v3 = (uint64_t)DerivedStorage;
    if (gLogCategory_APTransportSession <= 50
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)v3 = 1;
    APSIntrospectorSetCommandContext();
    if (*(_DWORD *)(v3 + 24) == 1)
      session_performWifiManagerRegistration(v3, 0);
    v4 = *(_QWORD *)(v3 + 208);
    if (v4)
      APConnectivityHelperRemoveAllRegistrations(v4, a1);
    session_suspendKeepAliveInternal(a1);
    v5 = *(_QWORD *)(v3 + 72);
    if (v5)
    {
      if (gLogCategory_APTransportSession <= 50)
      {
        if (gLogCategory_APTransportSession != -1 || (v6 = _LogCategory_Initialize(), v5 = *(_QWORD *)(v3 + 72), v6))
        {
          LogPrintF();
          v5 = *(_QWORD *)(v3 + 72);
        }
      }
      session_updateNANDSNotificationRegistry(a1, v5, 0);
      APTNANDataSessionReleaseActivation(*(_QWORD *)(v3 + 72));
    }
    v7 = *(_QWORD *)(v3 + 80);
    if (v7)
    {
      if (gLogCategory_APTransportSession <= 50)
      {
        if (gLogCategory_APTransportSession != -1 || (v8 = _LogCategory_Initialize(), v7 = *(_QWORD *)(v3 + 80), v8))
        {
          LogPrintF();
          v7 = *(_QWORD *)(v3 + 80);
        }
      }
      session_updateNANDSNotificationRegistry(a1, v7, 0);
      APTNANDataSessionReleaseActivation(*(_QWORD *)(v3 + 80));
    }
    v9 = *(const void **)(v3 + 48);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v3 + 48) = 0;
    }
    v10 = *(const void **)(v3 + 56);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v3 + 56) = 0;
    }
    v11 = *(const void **)(v3 + 80);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(v3 + 80) = 0;
    }
    v12 = *(const void **)(v3 + 72);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(v3 + 72) = 0;
    }
    v13 = *(const void **)(v3 + 64);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v3 + 64) = 0;
    }
    v14 = *(const void **)(v3 + 96);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v3 + 96) = 0;
    }
    v15 = *(const void **)(v3 + 192);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v3 + 192) = 0;
    }
    v16 = *(const void **)(v3 + 248);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(v3 + 248) = 0;
    }
    v17 = *(const void **)(v3 + 200);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(v3 + 200) = 0;
    }
  }
  return 0;
}

void session_performWifiManagerRegistration(uint64_t a1, int a2)
{
  uint64_t CMBaseObject;
  unsigned int (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v6;
  CFTypeRef cf;

  cf = 0;
  APTransportGetSharedTransport();
  CMBaseObject = FigTransportGetCMBaseObject();
  v5 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (v5 && !v5(CMBaseObject, CFSTR("WifiManagerClient"), *MEMORY[0x1E0C9AE00], &cf))
  {
    if (a2)
    {
      if (a2 != 1 || *(_BYTE *)(a1 + 136))
        goto LABEL_11;
      if (!APTransportWifiManagerClientRegister((uint64_t)cf))
      {
        *(_BYTE *)(a1 + 136) = 1;
        goto LABEL_11;
      }
    }
    else
    {
      if (!*(_BYTE *)(a1 + 136))
        goto LABEL_11;
      v6 = APTransportWifiManagerClientUnregister((uint64_t)cf);
      *(_BYTE *)(a1 + 136) = 0;
      if (!v6)
        goto LABEL_11;
    }
  }
  APSLogErrorAt();
LABEL_11:
  if (cf)
    CFRelease(cf);
}

uint64_t session_suspendKeepAliveInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t KeepAliveController;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t CMBaseObject;
  _QWORD *v7;
  void (*v8)(uint64_t);
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0;
  KeepAliveController = session_getKeepAliveController(a1, &v14);
  if ((_DWORD)KeepAliveController)
  {
    APSLogErrorAt();
  }
  else
  {
    v4 = v14;
    if (v14)
    {
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v5)
        v5(v4);
      *(_BYTE *)(DerivedStorage + 169) = 0;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMBaseObject = APTransportKeepAliveControllerGetCMBaseObject(v14);
      v7 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v7 >= 2uLL)
      {
        v8 = (void (*)(uint64_t))v7[8];
        if (v8)
          v8(CMBaseObject);
      }
      v9 = *(const void **)(DerivedStorage + 200);
      if (v9)
      {
        CFRelease(v9);
        if (*(_QWORD *)(DerivedStorage + 200))
        {
          APTransportStreamIDGetToken(1802529910);
          v10 = (const void *)FigCFWeakReferenceTableCopyValue();
          if (gLogCategory_APTransportSession <= 50
            && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (v10)
            CFRelease(v10);
        }
      }
      *(_QWORD *)(DerivedStorage + 200) = 0;
      v11 = *(const void **)(DerivedStorage + 192);
      if (v11)
      {
        CFRelease(v11);
        if (*(_QWORD *)(DerivedStorage + 192))
        {
          APTransportStreamIDGetToken(1668575852);
          v12 = (const void *)FigCFWeakReferenceTableCopyValue();
          if (gLogCategory_APTransportSession <= 50
            && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (v12)
            CFRelease(v12);
        }
      }
      *(_QWORD *)(DerivedStorage + 192) = 0;
    }
  }
  return KeepAliveController;
}

uint64_t session_updateNANDSNotificationRegistry(uint64_t result, uint64_t a2, int a3)
{
  if (result && a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    if (a3)
      return FigNotificationCenterAddWeakListener();
    else
      return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t session_getKeepAliveController(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  v4 = DerivedStorage;
  v5 = *(_DWORD *)(DerivedStorage + 184);
  if ((v5 - 1) < 2)
  {
    result = 0;
    v7 = *(_QWORD *)(v4 + 192);
LABEL_8:
    *a2 = v7;
    return result;
  }
  if (v5 == 4)
  {
    result = 0;
    v7 = *(_QWORD *)(v4 + 200);
    goto LABEL_8;
  }
  if (v5)
    return 4294950696;
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t session_handleKeepAliveStallStateChanged(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CFTypeID v10;
  const __CFDictionary *Value;
  char v12;
  uint64_t result;
  CMTime time;
  CMTime v15;

  v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v9 = DerivedStorage;
    v10 = CFGetTypeID(a5);
    if (v10 == CFDictionaryGetTypeID())
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("StallDuration"));
      CMTimeMakeFromDictionary(&v15, Value);
      if (CFEqual(a3, CFSTR("APTransportKeepAliveControllerNotification_Stalled")))
      {
        if (gLogCategory_APTransportSession <= 90
          && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
        {
          time = v15;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        v12 = 1;
      }
      else
      {
        if (!CFEqual(a3, CFSTR("APTransportKeepAliveControllerNotification_NotStalled")))
          return session_reportNetworkStatus(a2);
        if (gLogCategory_APTransportSession <= 50
          && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
        {
          time = v15;
          CMTimeGetSeconds(&time);
          LogPrintF();
        }
        v12 = 0;
      }
      *(_BYTE *)(v9 + 168) = v12;
      return session_reportNetworkStatus(a2);
    }
  }
  result = APSLogErrorAt();
  if (gLogCategory_APTransportSession <= 90)
  {
    if (gLogCategory_APTransportSession != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t session_handleKeepAliveFailed(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeID v9;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5 && (v8 = DerivedStorage, v9 = CFGetTypeID(a5), v9 == CFDictionaryGetTypeID()))
  {
    CFDictionaryGetInt64();
    result = 0;
    if (gLogCategory_APTransportSession <= 90)
    {
      if (gLogCategory_APTransportSession != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    if (*(_BYTE *)(v8 + 168))
      return session_reportNetworkStatus(a2);
  }
  else
  {
    result = APSLogErrorAt();
    if (gLogCategory_APTransportSession <= 90)
    {
      if (gLogCategory_APTransportSession != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

uint64_t session_handleKeepAliveResponse()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t session_reportNetworkStatus(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  return APSDispatchAsyncFHelper();
}

void session_reportNetworkStatusInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  unsigned __int16 v12;
  CFTypeRef cf;
  CFTypeRef v14;
  int v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v3 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v14 = 0;
  v4 = (_QWORD *)(v3 + 248);
  if (*(_QWORD *)(v3 + 248))
  {
    v7 = 0;
    goto LABEL_16;
  }
  v5 = v3;
  v6 = FigCFWeakReferenceTableCopyValue();
  v7 = (const void *)v6;
  if (!v6)
  {
    APSLogErrorAt();
    v15 = -16600;
    goto LABEL_14;
  }
  CMBaseObject = APTransportConnectionGetCMBaseObject(v6);
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v9)
  {
    v15 = -12782;
    goto LABEL_13;
  }
  v15 = v9(CMBaseObject, CFSTR("LocalInterfaceName"), 0, &v14);
  if (v15)
  {
LABEL_13:
    APSLogErrorAt();
    goto LABEL_14;
  }
  v10 = APTransportConnectionGetCMBaseObject(v7);
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v11)
  {
    v15 = -12782;
    goto LABEL_13;
  }
  v15 = v11(v10, CFSTR("RemoteNetworkIPAddress"), 0, &cf);
  if (v15)
    goto LABEL_13;
  v12 = APSGetFBOPropertyInt64();
  if (v15)
    goto LABEL_13;
  v15 = APTSessionHealthReporterCreate(0, (const __CFString *)v14, *(const void **)(v5 + 32), (uint64_t)cf, v12, v4);
  if (v15)
    goto LABEL_13;
LABEL_14:
  if (cf)
    CFRelease(cf);
LABEL_16:
  if (v14)
    CFRelease(v14);
  if (v7)
    CFRelease(v7);
  if (v15
    || APTSessionHealthReporterReportNetworkStatus(*(_QWORD *)(DerivedStorage + 248), *(_DWORD *)(a1 + 8)))
  {
    APSLogErrorAt();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

uint64_t APTransportConnectionCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  CMBaseObject = APTransportConnectionGetCMBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(CMBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

void session_handleNANDataSessionDisconnected(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFMutableDictionaryRef Mutable)
{
  uint64_t DerivedStorage;
  CFTypeID v8;
  int Int64;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage && (*(_QWORD *)(DerivedStorage + 72) == a4 || *(_QWORD *)(DerivedStorage + 80) == a4))
  {
    if (Mutable)
    {
      v8 = CFGetTypeID(Mutable);
      if (v8 == CFDictionaryGetTypeID()
        && CFDictionaryContainsKey(Mutable, CFSTR("APTNANDataSessionNotificationKey_DisconnectedReason")))
      {
        Int64 = CFDictionaryGetInt64();
        if (Int64 == -72400 || Int64 == -72401 || (Int64 + 72101) <= 1)
        {
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
            CFDictionarySetInt64();
          else
            APSSignalErrorAt();
        }
        else
        {
          Mutable = 0;
        }
      }
      else
      {
        Mutable = 0;
      }
    }
    if (gLogCategory_APTransportSession <= 90
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (Mutable)
      CFRelease(Mutable);
  }
}

uint64_t session_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _QWORD *v9;
  const void *v10;
  uint64_t v11;
  const void **v12;
  const void *v13;
  CFNumberRef v14;
  uint64_t SessionTransportType;
  CFNumberRef v16;
  CFNumberRef v18;
  int valuePtr;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    return 4294954511;
  }
  v9 = DerivedStorage;
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA5440]))
  {
    if (CFEqual(a2, CFSTR("ConnectedOnPeerToPeerInterface")))
    {
      if ((*((_DWORD *)v9 + 30) - 3) >= 0xFFFFFFFE)
        v12 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v12 = (const void **)MEMORY[0x1E0C9AE40];
      v13 = *v12;
      *a4 = *v12;
      CFRetain(v13);
      return 0;
    }
    if (CFEqual(a2, CFSTR("InterfaceType")))
    {
      v14 = CFNumberCreate(a3, kCFNumberIntType, v9 + 15);
      *a4 = v14;
      if (!v14)
        goto LABEL_30;
      return 0;
    }
    if (CFEqual(a2, CFSTR("TransportType")))
    {
      valuePtr = 0;
      SessionTransportType = session_getSessionTransportType(a1, &valuePtr);
      if ((_DWORD)SessionTransportType)
      {
        v11 = SessionTransportType;
        APSLogErrorAt();
        return v11;
      }
      v16 = CFNumberCreate(a3, kCFNumberIntType, &valuePtr);
      *a4 = v16;
      if (v16)
        return 0;
    }
    else
    {
      if (CFEqual(a2, CFSTR("ShowInfo")))
      {
        v10 = session_copyShowInfo();
        goto LABEL_5;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA5438]))
      {
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA5430]))
          return 4294954512;
        v10 = (const void *)v9[22];
        if (!v10)
          goto LABEL_5;
        goto LABEL_4;
      }
      v18 = CFNumberCreate(a3, kCFNumberIntType, v9 + 23);
      *a4 = v18;
      if (v18)
        return 0;
    }
LABEL_30:
    APSLogErrorAt();
    return 4294950695;
  }
  v10 = (const void *)v9[5];
LABEL_4:
  v10 = CFRetain(v10);
LABEL_5:
  v11 = 0;
  *a4 = v10;
  return v11;
}

uint64_t session_getSessionTransportType(uint64_t a1, int *a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  uint64_t v7;
  int v8;
  uint64_t v9;
  int valuePtr;
  CFNumberRef number;

  CMBaseObjectGetDerivedStorage();
  number = 0;
  valuePtr = 0;
  v3 = FigCFWeakReferenceTableCopyValue();
  v4 = (const void *)v3;
  if (!v3)
    goto LABEL_28;
  CMBaseObject = APTransportConnectionGetCMBaseObject(v3);
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v6)
  {
    v9 = 4294954514;
    goto LABEL_8;
  }
  v7 = v6(CMBaseObject, CFSTR("NetTransportType"), *MEMORY[0x1E0C9AE00], &number);
  if (!(_DWORD)v7)
  {
    CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    v8 = valuePtr;
    if (valuePtr <= 15)
    {
      switch(valuePtr)
      {
        case 1:
          goto LABEL_21;
        case 2:
          v8 = 2;
          break;
        case 4:
          v8 = 3;
          break;
        case 8:
          v8 = 4;
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_21;
    }
    if (valuePtr > 63)
    {
      if (valuePtr == 64)
      {
        v8 = 7;
        goto LABEL_21;
      }
      if (valuePtr == 128)
      {
        v8 = 8;
        goto LABEL_21;
      }
    }
    else
    {
      if (valuePtr == 16)
      {
        v8 = 5;
        goto LABEL_21;
      }
      if (valuePtr == 32)
      {
        v8 = 6;
LABEL_21:
        v9 = 0;
        *a2 = v8;
        goto LABEL_22;
      }
    }
LABEL_20:
    v8 = 0;
    goto LABEL_21;
  }
  v9 = v7;
  if ((_DWORD)v7 != -72320)
  {
LABEL_8:
    APSLogErrorAt();
    goto LABEL_22;
  }
LABEL_28:
  v9 = 4294950688;
LABEL_22:
  if (number)
    CFRelease(number);
  if (v4)
    CFRelease(v4);
  return v9;
}

__CFDictionary *session_copyShowInfo()
{
  uint64_t v0;
  __CFDictionary *Mutable;
  uint64_t v2;
  const void *v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, uint64_t *);
  int v9;
  uint64_t v11;
  CFTypeRef cf;

  CMBaseObjectGetDerivedStorage();
  v0 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    return Mutable;
  }
  v11 = 0;
  cf = 0;
  v2 = FigCFWeakReferenceTableCopyValue();
  if (v2)
  {
    v3 = (const void *)v2;
    CMBaseObject = APTransportConnectionGetCMBaseObject(v2);
    v5 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (v5)
    {
      v6 = v5(CMBaseObject, CFSTR("RemoteNetworkIPAddress"), v0, &cf);
      if (v6)
      {
LABEL_8:
        v9 = v6;
LABEL_10:
        CFRelease(v3);
        if (cf)
          CFRelease(cf);
        if (!v9)
          CFDictionarySetValue(Mutable, CFSTR("PeerIPPort"), 0);
        return Mutable;
      }
      v7 = APTransportConnectionGetCMBaseObject(v3);
      v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v8)
      {
        v6 = v8(v7, CFSTR("RemoteNetworkPort"), v0, &v11);
        if (!v6)
        {
          CFGetInt64Ranged();
          APSNetworkAddressSetPort();
          v6 = APSNetworkAddressCopyStringRepresentation();
        }
        goto LABEL_8;
      }
    }
    v9 = -12782;
    goto LABEL_10;
  }
  return Mutable;
}

uint64_t session_setPropertyInternal(uint64_t a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;
  unsigned int v7;
  uint64_t v8;
  CFTypeID v9;
  const void *v10;
  unsigned int valuePtr;
  unsigned int v14;

  v14 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    return -12785;
  }
  v6 = DerivedStorage;
  if (CFEqual(a2, CFSTR("TransportRegistrationToken")))
  {
    *((_QWORD *)v6 + 18) = CFGetInt64();
    if (v14)
      goto LABEL_27;
    return v14;
  }
  if (CFEqual(a2, CFSTR("ServiceRegistrationToken")))
  {
    *((_QWORD *)v6 + 20) = CFGetInt64();
    if (v14)
      goto LABEL_27;
    return v14;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA5438]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA5430]))
    {
      if (v6[169])
      {
        APSLogErrorAt();
        return APSSignalErrorAt();
      }
      if (a3)
      {
        v9 = CFGetTypeID(a3);
        if (v9 == CFNumberGetTypeID())
        {
          v10 = (const void *)*((_QWORD *)v6 + 22);
          *((_QWORD *)v6 + 22) = a3;
          CFRetain(a3);
          if (v10)
            CFRelease(v10);
          return v14;
        }
      }
      APSLogErrorAt();
      return -16600;
    }
    else
    {
      return -12784;
    }
  }
  valuePtr = 0;
  if (!CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr))
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  v7 = valuePtr;
  v8 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v8 + 169))
  {
    APSLogErrorAt();
  }
  else if (v7 <= 4 && v7 != 3)
  {
    *(_DWORD *)(v8 + 184) = v7;
    return 0;
  }
  v14 = APSSignalErrorAt();
  if (v14)
LABEL_27:
    APSLogErrorAt();
  return v14;
}

uint64_t session_SetEventCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _QWORD v6[8];

  v6[7] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6[0] = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6[1] = DerivedStorage + 104;
  v6[2] = &v5;
  v6[3] = 8;
  v6[4] = DerivedStorage + 112;
  v6[5] = v6;
  v6[6] = 8;
  APSDispatchSyncBatchAssignment();
  return 0;
}

uint64_t session_Resume(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), &v3, (dispatch_function_t)session_resumeInternal);
  return v4;
}

uint64_t session_CreateStream(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  int Int64Ranged;
  uint64_t v5;
  unsigned int v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_12;
  Int64Ranged = CFDictionaryGetInt64Ranged();
  v5 = 1;
  if (Int64Ranged <= 1702260339)
  {
    if (Int64Ranged == 1668575852)
      goto LABEL_13;
LABEL_12:
    v5 = 2;
    goto LABEL_13;
  }
  if (Int64Ranged != 1702260340 && Int64Ranged != 1869570660 && Int64Ranged != 1919120492)
    goto LABEL_12;
LABEL_13:
  v8 = *(_DWORD *)(DerivedStorage + 132) + 1;
  *(_DWORD *)(DerivedStorage + 132) = v8;
  APTransportStreamIDMake(0, v5, v8);
  return APSDispatchSyncTask();
}

uint64_t session_CreateStreamWithID(uint64_t a1, unint64_t a2)
{
  uint64_t DerivedStorage;
  unint64_t v4;
  unsigned int v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (APTransportStreamIDGetStreamCategory(a2))
  {
    v4 = APTransportStreamIDInsertStreamCategory(a2, 3);
    if (!APTransportKeepAliveControllerGetCMBaseObject(v4))
    {
      v5 = *(_DWORD *)(DerivedStorage + 132) + 1;
      *(_DWORD *)(DerivedStorage + 132) = v5;
      APTransportStreamIDInsertIdentifier(v4, v5);
    }
  }
  return APSDispatchSyncTask();
}

uint64_t session_CopyStreamWithID()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t session_ResumeKeepAlive()
{
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return APSDispatchSyncTask();
  APSLogErrorAt();
  return APSSignalErrorAt();
}

uint64_t session_SuspendKeepAlive()
{
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return APSDispatchSyncTask();
  APSLogErrorAt();
  return APSSignalErrorAt();
}

void session_resumeInternal(uint64_t a1)
{
  void *v2;
  uint64_t DerivedStorage;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int IntWithDefault;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  const void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_DWORD *)(DerivedStorage + 24);
  if (!v4)
  {
    v12 = DerivedStorage;
    if (*(_DWORD *)(DerivedStorage + 92) != -1 && *(_QWORD *)(DerivedStorage + 112))
    {
      if (v2)
        CFRetain(v2);
      dispatch_async_f(*(dispatch_queue_t *)(v12 + 16), v2, (dispatch_function_t)session_sendEventRemoteWantsNewStreamCallback);
    }
    goto LABEL_40;
  }
  if (v4 != 1)
  {
LABEL_40:
    v9 = 0;
    goto LABEL_41;
  }
  v5 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v5 + 120) == 3)
  {
    v6 = (uint64_t *)v5;
    if (*(_QWORD *)(v5 + 64))
    {
      v7 = (uint64_t *)(v5 + 72);
      if (*(_QWORD *)(v5 + 72) || (v8 = (uint64_t *)(v5 + 80), *(_QWORD *)(v5 + 80)))
      {
        APSLogErrorAt();
        v9 = -6709;
      }
      else
      {
        v9 = -72101;
        IntWithDefault = APSSettingsGetIntWithDefault();
        if (IntWithDefault == 1)
        {
          v9 = -72100;
        }
        else if (IntWithDefault != 2)
        {
          if (!APSIsAPMSpeaker())
          {
            v13 = APTransportDeviceCopyNANDataSession(v6[8], 2, v6 + 10);
            if (v13)
            {
              v9 = v13;
              APSLogErrorAt();
              goto LABEL_20;
            }
            if (gLogCategory_APTransportSession <= 50
              && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            session_updateNANDSNotificationRegistry((uint64_t)v2, *v8, 1);
            v20 = APTNANDataSessionRetainActivation(*v8);
            if (v20)
            {
              if (v20 == -72400)
              {
                v9 = -72100;
              }
              else if (v20 != -72401)
              {
                v9 = v20;
              }
              APSLogErrorAt();
              session_updateNANDSNotificationRegistry((uint64_t)v2, *v8, 0);
              v15 = (const void *)*v8;
              if (!*v8)
                goto LABEL_20;
LABEL_32:
              CFRelease(v15);
              *v8 = 0;
              goto LABEL_20;
            }
          }
          v11 = APTransportDeviceCopyNANDataSession(v6[8], 1, v6 + 9);
          if (!v11)
          {
            if (gLogCategory_APTransportSession <= 50
              && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            session_updateNANDSNotificationRegistry((uint64_t)v2, *v7, 1);
            v14 = APTNANDataSessionRetainActivation(*v7);
            if (v14)
            {
              if (v14 == -72400)
              {
                v9 = -72100;
              }
              else if (v14 != -72401)
              {
                v9 = v14;
              }
              APSLogErrorAt();
              session_updateNANDSNotificationRegistry((uint64_t)v2, *v8, 0);
              v15 = (const void *)*v7;
              v8 = v6 + 9;
              if (!*v7)
                goto LABEL_20;
              goto LABEL_32;
            }
            goto LABEL_34;
          }
          v21 = v11;
          APSLogErrorAt();
          v9 = v21;
        }
      }
    }
    else
    {
      APSLogErrorAt();
      v9 = -16600;
    }
LABEL_20:
    APSLogErrorAt();
    goto LABEL_41;
  }
LABEL_34:
  v16 = CMBaseObjectGetDerivedStorage();
  bzero(v22, 0x400uLL);
  v17 = *(_DWORD *)(v16 + 120);
  v18 = *(_QWORD *)(v16 + 64);
  if (v18)
  {
    if ((v17 - 3) >= 0xFFFFFFFE)
      v19 = 1;
    else
      v19 = 2 * (v17 == 3);
    if (APTransportDeviceGetAddress(v18, v19, 0, v22, 1024, 0, 0))
    {
      APSLogErrorAt();
    }
    else if (v22[0])
    {
      goto LABEL_40;
    }
  }
  else if (*(_QWORD *)(v16 + 96))
  {
    goto LABEL_40;
  }
  if (gLogCategory_APTransportSession <= 40
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = -16603;
LABEL_41:
  *(_DWORD *)(a1 + 8) = v9;
}

void session_sendEventRemoteWantsNewStreamCallback(const void *a1)
{
  uint64_t DerivedStorage;
  CFNumberRef v3;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 1668575852;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  (*(void (**)(_QWORD, CFNumberRef, _QWORD))(DerivedStorage + 112))(0, v3, *(_QWORD *)(DerivedStorage + 104));
  if (v3)
    CFRelease(v3);
  if (a1)
    CFRelease(a1);
}

uint64_t session_createStreamWithIDInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  uint64_t v4;
  uint64_t Int64;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *MutableCopy;
  unsigned int v13;
  unsigned int v14;
  CFTypeRef v15;
  unsigned int v16;
  CFTypeRef v17;
  const void *v18;
  uint64_t v19;
  const __CFDictionary *v20;
  uint64_t v21;
  __CFDictionary *Mutable;
  __CFDictionary *v23;
  __CFString **v24;
  const void *v25;
  uint64_t v26;
  int Int64Ranged;
  const void *Value;
  _DWORD *v29;
  CFAllocatorRef v30;
  int v31;
  const __CFAllocator *v32;
  int v33;
  int v34;
  const void *v35;
  int v37;
  CFTypeRef v38;
  int v39;
  CFTypeRef v40;
  CFTypeRef v41;
  CFTypeRef v42;
  unsigned int StreamName;
  CFTypeRef cf;
  CFTypeRef v45;

  StreamName = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v41 = 0;
  v42 = 0;
  v40 = 0;
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    v15 = 0;
    v35 = 0;
    v37 = -12785;
LABEL_77:
    StreamName = v37;
    goto LABEL_63;
  }
  v3 = DerivedStorage;
  if (DerivedStorage[88])
  {
    APSLogErrorAt();
    v15 = 0;
    v35 = 0;
    StreamName = APSSignalErrorAt();
    goto LABEL_63;
  }
  APTransportStreamIDGetToken(*(_QWORD *)(a1 + 8));
  v4 = FigCFWeakReferenceTableCopyValue();
  if (v4)
  {
    v35 = (const void *)v4;
    APSLogErrorAt();
    v15 = 0;
    v37 = -6719;
    goto LABEL_77;
  }
  StreamName = session_createStreamName(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (__CFString **)&v42);
  if (StreamName)
    goto LABEL_78;
  Int64 = CFDictionaryGetInt64();
  if (StreamName)
  {
    v6 = 0;
    StreamName = 0;
  }
  else
  {
    v6 = Int64;
  }
  if (gLogCategory_APTransportSession <= 30
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  StreamName = session_createConnectionForStream(*(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)v42, *((_DWORD *)v3 + 30), *((_DWORD *)v3 + 31), v6, *(const __CFDictionary **)(a1 + 16), &v41);
  if (StreamName)
  {
LABEL_78:
    APSLogErrorAt();
    v15 = 0;
LABEL_83:
    v35 = 0;
    goto LABEL_63;
  }
  v7 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(const void **)(a1 + 16);
  v45 = 0;
  cf = 0;
  v10 = CMBaseObjectGetDerivedStorage();
  v39 = v6;
  if (v9)
  {
    v11 = CFDictionaryGetInt64();
    if (v8 == 1668575852)
    {
      v8 = 1919120492;
      MutableCopy = (const __CFDictionary *)CFRetain(v9);
    }
    else
    {
      if (v11 != 1668575852)
      {
        v15 = 0;
        MutableCopy = 0;
        goto LABEL_25;
      }
      MutableCopy = CFDictionaryCreateMutableCopy(0, 3, (CFDictionaryRef)v9);
      CFDictionarySetInt64();
    }
  }
  else
  {
    MutableCopy = 0;
    if (v8 != 1668575852)
    {
      v15 = 0;
      goto LABEL_25;
    }
    v8 = 1919120492;
  }
  v13 = session_createStreamName((uint64_t)v7, v8, (__CFString **)&cf);
  if (v13)
  {
    v16 = v13;
    APSLogErrorAt();
  }
  else
  {
    v14 = session_createConnectionForStream(v7, v8, (uint64_t)cf, *(_DWORD *)(v10 + 120), *(_DWORD *)(v10 + 124), v6, MutableCopy, &v45);
    if (!v14)
    {
      v15 = v45;
LABEL_25:
      v16 = 0;
      v45 = 0;
      goto LABEL_26;
    }
    v16 = v14;
    APSLogErrorAt();
    if (v45)
      CFRelease(v45);
  }
  v15 = 0;
LABEL_26:
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  StreamName = v16;
  if (v16)
    goto LABEL_82;
  v17 = v42;
  v38 = v41;
  v18 = *(const void **)a1;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(const __CFDictionary **)(a1 + 16);
  v21 = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v23 = Mutable;
    if (v15)
    {
      v24 = kAPTransportStreamOption_ReceiveConnection;
      if (*(_DWORD *)(v21 + 24) != 1)
        v24 = kAPTransportStreamOption_SendConnection;
      CFDictionaryAddValue(Mutable, *v24, v15);
    }
    if (*(_DWORD *)(v21 + 120) == 3)
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
    }
    v25 = *(const void **)(v21 + 240);
    if (v25)
      CFDictionaryAddValue(v23, CFSTR("EventRecorder"), v25);
    if (v20)
    {
      v26 = CFDictionaryGetInt64();
      Int64Ranged = CFDictionaryGetInt64Ranged();
      Value = CFDictionaryGetValue(v20, CFSTR("SendBackingProvider"));
      if (Value)
        CFDictionaryAddValue(v23, CFSTR("SendBackingProvider"), Value);
    }
    else
    {
      v26 = 0;
      Int64Ranged = 0;
    }
    v29 = &unk_1ED83F000;
    if (*(_DWORD *)(v21 + 24) == 1
      && (v19 == 1935897198 || Int64Ranged == 1634754914 || Int64Ranged == 1935897198 || Int64Ranged == 1651861089))
    {
      v30 = CFGetAllocator(v18);
      v31 = APTransportStreamUnbufferedCreate((uint64_t)v30, v18, v19, v17, v38, v23, &v40);
    }
    else
    {
      v32 = CFGetAllocator(v18);
      v31 = APTransportStreamCreate(v32, v18, v19, v17, v39, v38, v26, v23, &v40);
    }
    v33 = v31;
    if (v31)
    {
      APSLogErrorAt();
    }
    else if (gLogCategory_APTransportSession <= 50
           && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFRelease(v23);
  }
  else
  {
    APSLogErrorAt();
    v33 = -16601;
    v29 = (_DWORD *)&unk_1ED83F000;
  }
  StreamName = v33;
  StreamName = FigCFWeakReferenceTableAddValueAssociatedWithKey();
  if (StreamName)
  {
LABEL_82:
    APSLogErrorAt();
    goto LABEL_83;
  }
  v34 = v29[20];
  if (v34 <= 30 && (v34 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v35 = 0;
  **(_QWORD **)(a1 + 24) = v40;
  v40 = 0;
LABEL_63:
  if (v42)
    CFRelease(v42);
  if (v41)
    CFRelease(v41);
  if (v15)
    CFRelease(v15);
  if (v40)
    CFRelease(v40);
  if (v35)
    CFRelease(v35);
  return StreamName;
}

uint64_t session_createStreamName(uint64_t a1, uint64_t a2, __CFString **a3)
{
  uint64_t DerivedStorage;
  CFMutableStringRef MutableCopy;
  __CFString *v6;
  CFStringRef v7;
  CFStringRef v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFStringRef *)(DerivedStorage + 32));
    if (MutableCopy)
    {
      v6 = MutableCopy;
      v7 = APTransportStreamIDCreateStringRepresentation();
      if (v7)
      {
        v8 = v7;
        CFStringAppendFormat(v6, 0, CFSTR("-%@"), v7);
        *a3 = v6;
        CFRelease(v8);
        return 0;
      }
      APSLogErrorAt();
      CFRelease(v6);
    }
    else
    {
      APSLogErrorAt();
    }
    return 4294950695;
  }
  else
  {
    APSLogErrorAt();
    return 4294950696;
  }
}

uint64_t session_createConnectionForStream(const void *a1, int64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, const __CFDictionary *a7, _QWORD *a8)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v15;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v17;
  uint64_t v18;
  __CFDictionary *v19;
  const void *Value;
  const void *v21;
  const void *TypedValue;
  uint64_t v23;
  const void *v24;
  CFAllocatorRef v25;
  CFTypeRef v26;
  uint64_t v27;
  CFAllocatorRef v28;
  const void *v29;
  CFAllocatorRef v30;
  CFAllocatorRef v31;
  const void *v32;
  int IntWithDefault;
  const void *v34;
  const void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFString *v40;
  CFTypeRef v41;
  CFAllocatorRef v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, const __CFString *, const __CFString *);
  uint64_t v45;
  const void *v46;
  CFAllocatorRef v47;
  CFAllocatorRef v48;
  CFAllocatorRef v49;
  int Int64Ranged;
  const void *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, const __CFString *, const __CFString *);
  uint64_t (*v54)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *);
  CFAllocatorRef v55;
  CFAllocatorRef v56;
  const void *v57;
  __CFDictionary *MutableCopy;
  CFAllocatorRef v59;
  CFStringRef v60;
  CFAllocatorRef v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, const __CFString *, const __CFString *);
  const void *v64;
  const void *v65;
  const void *v66;
  uint64_t (*v67)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *);
  CFAllocatorRef v68;
  int Connection;
  const void *v70;
  int v71;
  uint64_t (*v72)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *);
  CFAllocatorRef v73;
  uint64_t v74;
  int v75;
  CFAllocatorRef v76;
  CFAllocatorRef v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, const __CFString *, const __CFString *);
  CFAllocatorRef v81;
  int v82;
  int v83;
  __CFString **v84;
  __CFString *v85;
  const void *v86;
  uint64_t CMBaseObject;
  uint64_t (*v88)(uint64_t, const __CFString *, __CFString *);
  int v89;
  int v90;
  _QWORD *v91;
  const __CFAllocator *alloc;
  CFTypeRef v95;
  CFTypeRef cf1;
  CFTypeRef cf;
  unsigned int Address;
  __int16 v99;
  char cStr[16];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  Address = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf1 = 0;
  cf = 0;
  v95 = 0;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt();
    v24 = 0;
    v60 = 0;
    MutableCopy = 0;
    v89 = -16601;
    goto LABEL_290;
  }
  alloc = v15;
  v18 = DerivedStorage;
  v19 = Mutable;
  if (a7)
  {
    Value = CFDictionaryGetValue(a7, CFSTR("QualityOfService"));
    if (Value)
      CFDictionarySetValue(v19, CFSTR("QualityOfService"), Value);
    v21 = CFDictionaryGetValue(a7, (const void *)*MEMORY[0x1E0CA5448]);
    if (v21)
      CFDictionarySetValue(v19, CFSTR("DelegatedID"), v21);
    CFDictionaryGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    if (TypedValue)
      CFDictionarySetValue(v19, CFSTR("TrafficRegistrationOptions"), TypedValue);
  }
  if (a2 > 1819042675)
  {
    v17 = v19;
    if (a2 <= 1869575778)
    {
      if (a2 <= 1835626095)
      {
        if (a2 != 1819042676)
        {
          v23 = 1835100526;
LABEL_18:
          if (a2 != v23)
          {
LABEL_109:
            if (a7)
            {
              Int64Ranged = CFDictionaryGetInt64Ranged();
              if (APTransportStreamIDGetStreamCategory(a2) == 1)
              {
                if (Int64Ranged)
                {
                  v51 = (const void *)FigCFWeakReferenceTableCopyValue();
                  cf = v51;
                  if (v51)
                  {
                    v26 = v51;
                    if (gLogCategory_APTransportSession > 40
                      || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
                    {
                      goto LABEL_229;
                    }
                    goto LABEL_127;
                  }
                  APSLogErrorAt();
                  v24 = 0;
                  goto LABEL_289;
                }
LABEL_145:
                APSLogErrorAt();
                v24 = 0;
                v60 = 0;
                MutableCopy = 0;
                Address = APSSignalErrorAt();
                goto LABEL_233;
              }
            }
            else
            {
              if (APTransportStreamIDGetStreamCategory(a2) == 1)
                goto LABEL_145;
              Int64Ranged = 0;
            }
            CMBaseObjectGetDerivedStorage();
            *(_QWORD *)cStr = 0;
            v99 = 0;
            FigCFDictionaryGetBooleanIfPresent();
            v64 = (const void *)*MEMORY[0x1E0C9AE50];
            v65 = (const void *)*MEMORY[0x1E0C9AE40];
            CFDictionarySetValue(v17, CFSTR("AllowPackageAggregation"), (const void *)*MEMORY[0x1E0C9AE40]);
            FigCFDictionaryGetBooleanIfPresent();
            if (APTransportStreamIDGetStreamCategory(a2) != 3)
            {
              CFDictionarySetValue(v17, CFSTR("IsListener"), v64);
              v68 = CFGetAllocator(a1);
              Connection = session_createConnection((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPCreate, a3, a4, a5, a6, 0, 0, -1, 0, (uint64_t)v17, (CFTypeRef *)cStr);
              v70 = 0;
              if (Connection)
              {
                v71 = Connection;
                APSLogErrorAt();
                v70 = 0;
                goto LABEL_267;
              }
              goto LABEL_255;
            }
            if (Int64Ranged != 1634754914)
            {
              if (Int64Ranged == 1935897198)
                goto LABEL_251;
              if (Int64Ranged != 1651861089)
              {
                v67 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPCreate;
                goto LABEL_252;
              }
            }
            if (APSSettingsIsFeatureEnabled()
              || APSSettingsIsFeatureEnabled()
              || APSSettingsIsFeatureEnabled() | v99)
            {
              FigCFDictionarySetInt();
              if (APSSettingsIsFeatureEnabled())
                v66 = v64;
              else
                v66 = v65;
              CFDictionarySetValue(v17, CFSTR("IsPackageDeliveryTrackingEnabled"), v66);
              CFDictionarySetValue(v17, CFSTR("UseQUIC"), v65);
              v67 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPUnbufferedNWCreate;
LABEL_252:
              CFDictionarySetValue(v17, CFSTR("IsListener"), v65);
              v70 = (const void *)FigCFWeakReferenceTableCopyValue();
              if (!v70)
              {
                APSLogErrorAt();
                v71 = -16613;
LABEL_267:
                if (*(_QWORD *)cStr)
                  CFRelease(*(CFTypeRef *)cStr);
LABEL_269:
                if (v70)
                  CFRelease(v70);
                Address = v71;
                if (!v71)
                {
                  v24 = 0;
                  v60 = 0;
                  MutableCopy = 0;
                  v26 = cf;
                  goto LABEL_232;
                }
                goto LABEL_317;
              }
              v81 = CFGetAllocator(a1);
              v82 = session_createConnection((uint64_t)v81, v67, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v70, (uint64_t)v17, (CFTypeRef *)cStr);
              if (v82)
              {
                v71 = v82;
              }
              else
              {
                APTransportStreamIDGetPort(a2);
                v83 = APSSetFBOPropertyInt64();
                if (!v83)
                {
LABEL_255:
                  switch(Int64Ranged)
                  {
                    case 1634754914:
                      v84 = kAPTransportConnectionPackageType_BufferedAPAP;
                      break;
                    case 1651861089:
                      v84 = kAPTransportConnectionPackageType_RTPBuffered;
                      break;
                    case 1935897198:
                      v84 = kAPTransportConnectionPackageType_Screen;
                      break;
                    default:
                      v84 = kAPTransportConnectionPackageType_GenericTCP;
                      break;
                  }
                  v85 = *v84;
                  v86 = *(const void **)cStr;
                  CMBaseObject = APTransportConnectionGetCMBaseObject(*(_QWORD *)cStr);
                  v88 = *(uint64_t (**)(uint64_t, const __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 56);
                  if (v88)
                  {
                    v71 = v88(CMBaseObject, CFSTR("PackageType"), v85);
                    if (!v71)
                    {
                      cf = v86;
                      *(_QWORD *)cStr = 0;
                      goto LABEL_269;
                    }
                  }
                  else
                  {
                    v71 = -12782;
                  }
                  goto LABEL_266;
                }
                v71 = v83;
              }
LABEL_266:
              APSLogErrorAt();
              goto LABEL_267;
            }
            if (session_getBufferedAudioTransportQueuePool_sBufferedAudioTransportQueuePoolOnce != -1)
              dispatch_once_f(&session_getBufferedAudioTransportQueuePool_sBufferedAudioTransportQueuePoolOnce, &session_getBufferedAudioTransportQueuePool_sBufferedAudioTransportQueuePool, (dispatch_function_t)session_initBufferedAudioTransportQueuePool);
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
LABEL_251:
            v67 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPUnbufferedCreate;
            goto LABEL_252;
          }
          goto LABEL_33;
        }
LABEL_23:
        if (*(_DWORD *)(v18 + 24) == 1)
        {
          CFDictionarySetValue(v17, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE50]);
          v24 = (const void *)FigCFWeakReferenceTableCopyValue();
          if (!v24)
            goto LABEL_288;
          v25 = CFGetAllocator(a1);
          Address = session_createConnection((uint64_t)v25, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v17, &cf);
          if (Address)
            goto LABEL_156;
          v26 = cf;
        }
        else
        {
          v26 = 0;
          v24 = 0;
        }
        v43 = APTransportConnectionGetCMBaseObject(v26);
        v44 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 56);
        if (!v44)
        {
          Address = -12782;
          goto LABEL_156;
        }
        Address = v44(v43, CFSTR("PackageType"), CFSTR("RTCP"));
        if (Address)
          goto LABEL_156;
LABEL_152:
        if (gLogCategory_APTransportSession > 30
          || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_230;
        }
        goto LABEL_154;
      }
      v27 = v18;
      if (a2 != 1835626096)
      {
        if (a2 != 1869570660)
          goto LABEL_109;
        if (*(_DWORD *)(v18 + 24) == 1)
        {
          CFDictionarySetValue(v19, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE40]);
          v24 = (const void *)FigCFWeakReferenceTableCopyValue();
          if (!v24)
            goto LABEL_288;
          v31 = CFGetAllocator(a1);
          Address = session_createConnection((uint64_t)v31, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
          if (Address)
            goto LABEL_156;
          FigCFWeakReferenceTableRemoveValue();
          v26 = cf;
          FigCFWeakReferenceTableAddValueAssociatedWithKey();
          if (gLogCategory_APTransportSession > 30
            || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
          {
            goto LABEL_230;
          }
          goto LABEL_154;
        }
        APSLogErrorAt();
        v24 = 0;
        v60 = 0;
        MutableCopy = 0;
        v89 = -16600;
LABEL_290:
        Address = v89;
        goto LABEL_233;
      }
LABEL_81:
      if (*(_DWORD *)(v27 + 24) == 1)
      {
        CFDictionarySetValue(v19, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE50]);
        v24 = (const void *)FigCFWeakReferenceTableCopyValue();
        if (!v24)
          goto LABEL_288;
        v42 = CFGetAllocator(a1);
        Address = session_createConnection((uint64_t)v42, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
        if (Address)
          goto LABEL_156;
        v26 = cf;
      }
      else
      {
        v26 = 0;
        v24 = 0;
      }
      v52 = APTransportConnectionGetCMBaseObject(v26);
      v53 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
      if (!v53)
      {
        Address = -12782;
        goto LABEL_156;
      }
      Address = v53(v52, CFSTR("PackageType"), CFSTR("RTP"));
      if (Address)
        goto LABEL_156;
      goto LABEL_152;
    }
    v27 = v18;
    if (a2 <= 1935897197)
    {
      if (a2 != 1869575779)
      {
        if (a2 != 1919120492)
          goto LABEL_109;
        if (*(_DWORD *)(v18 + 24) == 1)
        {
          CFDictionarySetValue(v19, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE40]);
          CFDictionarySetValue(v19, CFSTR("IsServer"), (const void *)*MEMORY[0x1E0C9AE50]);
          v28 = CFGetAllocator(a1);
          Address = session_createConnection((uint64_t)v28, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, 0, 0, -1, 0, (uint64_t)v19, &cf);
          if (Address)
            goto LABEL_317;
          v26 = cf;
        }
        else
        {
          CFDictionarySetValue(v19, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE50]);
          CFDictionarySetValue(v19, CFSTR("IsServer"), (const void *)*MEMORY[0x1E0C9AE40]);
          v55 = CFGetAllocator(a1);
          Address = session_createConnection((uint64_t)v55, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, *(_QWORD *)(v18 + 64), 0, -1, 0, (uint64_t)v19, &cf);
          if (Address)
            goto LABEL_317;
          v26 = cf;
          Address = APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("SessionUUID"), *(_QWORD *)(v18 + 40));
          if (Address)
            goto LABEL_317;
        }
        FigCFWeakReferenceTableRemoveValue();
        FigCFWeakReferenceTableAddValueAssociatedWithKey();
        if (gLogCategory_APTransportSession > 30
          || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_229;
        }
LABEL_127:
        LogPrintF();
LABEL_229:
        v24 = 0;
        goto LABEL_230;
      }
      goto LABEL_81;
    }
    if (a2 == 1935897198)
    {
      if (*(_DWORD *)(v18 + 24) == 1)
      {
        CFDictionarySetValue(v19, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE40]);
        v24 = (const void *)FigCFWeakReferenceTableCopyValue();
        if (!v24)
          goto LABEL_288;
        v49 = CFGetAllocator(a1);
        Address = session_createConnection((uint64_t)v49, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionTCPUnbufferedCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
        if (Address)
          goto LABEL_156;
        v26 = cf;
        Address = APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("PackageType"), (uint64_t)CFSTR("Screen"));
        if (Address)
          goto LABEL_156;
      }
      else
      {
        v26 = 0;
        v24 = 0;
      }
      if (gLogCategory_APTransportSession > 30
        || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_230;
      }
      goto LABEL_154;
    }
    if (a2 != 1935897205)
      goto LABEL_109;
    if (*(_DWORD *)(v18 + 24) != 1)
    {
      v26 = 0;
      v24 = 0;
LABEL_202:
      if (gLogCategory_APTransportSession > 30
        || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_230;
      }
      goto LABEL_154;
    }
    CFDictionarySetValue(v19, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE50]);
    v37 = FigCFWeakReferenceTableCopyValue();
    v24 = (const void *)v37;
    if (!v37)
      goto LABEL_288;
    v38 = APTransportConnectionGetCMBaseObject(v37);
    v39 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v39)
    {
      Address = -12782;
      goto LABEL_156;
    }
    Address = v39(v38, CFSTR("RemoteNetworkIPAddress"), alloc, &v95);
    if (Address)
    {
LABEL_156:
      APSLogErrorAt();
LABEL_157:
      v60 = 0;
      goto LABEL_158;
    }
    APSNetworkAddressCopyInterfaceName();
    if (cf1)
    {
      if (CFEqual(cf1, CFSTR("awdl0")))
      {
        v40 = CFSTR("llw0");
      }
      else
      {
        if (!cf1 || !CFEqual(cf1, CFSTR("nan0")))
          goto LABEL_198;
        v40 = CFSTR("llw1");
      }
      APSNetworkAddressSetInterfaceName();
      v41 = cf1;
      cf1 = v40;
      CFRetain(v40);
      if (v41)
        CFRelease(v41);
    }
LABEL_198:
    v73 = CFGetAllocator(a1);
    Address = session_createConnection((uint64_t)v73, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPNWCreate, a3, a4, a5, a6, 0, (uint64_t)v95, -1, 0, (uint64_t)v19, &cf);
    if (Address)
      goto LABEL_156;
    v26 = cf;
    Address = APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("PackageType"), (uint64_t)CFSTR("Screen"));
    if (Address)
      goto LABEL_156;
    if (cf1)
    {
      Address = APTransportConnectionSetProperty((uint64_t)v26, (uint64_t)CFSTR("LocalInterfaceName"), (uint64_t)cf1);
      if (Address)
        goto LABEL_156;
    }
    goto LABEL_202;
  }
  v17 = v19;
  if (a2 > 1734700575)
  {
    if (a2 <= 1802529909)
    {
      if (a2 == 1734700576)
        goto LABEL_33;
      if (a2 != 1735287668)
        goto LABEL_109;
      goto LABEL_23;
    }
    if (a2 != 1802529910)
    {
      if (a2 != 1819042165)
        goto LABEL_109;
      if (*(_DWORD *)(v18 + 24) == 1)
      {
        v32 = (const void *)*MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v19, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE40]);
        v24 = (const void *)FigCFWeakReferenceTableCopyValue();
        if (!v24)
          goto LABEL_288;
        if (CFDictionaryGetInt64())
        {
          v91 = a8;
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          CFDictionarySetInt64();
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          APSIsPersistentGroupSDBCapable();
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          APSSettingsGetIntWithDefault();
          CFDictionarySetInt64();
          IntWithDefault = APSSettingsGetIntWithDefault();
          v34 = (const void *)*MEMORY[0x1E0C9AE50];
          if (IntWithDefault)
            v35 = (const void *)*MEMORY[0x1E0C9AE50];
          else
            v35 = v32;
          CFDictionarySetValue(v19, CFSTR("DisablePacketExpiryDrop"), v35);
          if (*(_BYTE *)(v18 + 128))
            v36 = v34;
          else
            v36 = v32;
          CFDictionarySetValue(v19, CFSTR("ForceLowLatencyConnection"), v36);
          if (gLogCategory_APTransportSession <= 50
            && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v72 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPNWCreate;
          a8 = v91;
        }
        else
        {
          v72 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate;
        }
        if (a4 == 3)
        {
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v102 = 0u;
          v103 = 0u;
          *(_OWORD *)cStr = 0u;
          v101 = 0u;
          v74 = *(_QWORD *)(v18 + 64);
          if (v74)
          {
            v75 = a5;
            Address = APTransportDeviceGetAddress(v74, 3, 1, cStr, 128, 0, 0);
            if (Address)
            {
              APSLogErrorAt();
              v60 = 0;
              goto LABEL_315;
            }
            v60 = CFStringCreateWithCString(alloc, cStr, 0x8000100u);
            if (v60)
            {
              Address = APSNetworkAddressCreateWithString();
              if (!Address)
              {
                Address = APSNetworkAddressCopyInterfaceName();
                if (!Address)
                {
                  v76 = CFGetAllocator(a1);
                  Address = session_createConnection((uint64_t)v76, v72, a3, 3, v75, a6, 0, (uint64_t)v95, -1, 0, (uint64_t)v19, &cf);
                  if (!Address)
                    goto LABEL_219;
                }
              }
              APSLogErrorAt();
LABEL_315:
              MutableCopy = 0;
              v17 = v19;
              goto LABEL_233;
            }
            APSLogErrorAt();
            v90 = -16601;
          }
          else
          {
            APSLogErrorAt();
            v60 = 0;
            v90 = -16602;
          }
          Address = v90;
          goto LABEL_315;
        }
        v77 = CFGetAllocator(a1);
        Address = session_createConnection((uint64_t)v77, v72, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
        if (Address)
          goto LABEL_156;
      }
      else
      {
        v24 = 0;
      }
      v60 = 0;
LABEL_219:
      v26 = cf;
      v78 = APTransportConnectionGetCMBaseObject(cf);
      v79 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
      if (v79)
      {
        Address = v79(v78, CFSTR("PackageType"), CFSTR("RTP"));
        if (!Address)
        {
          if (gLogCategory_APTransportSession <= 30
            && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_231;
        }
      }
      else
      {
        Address = -12782;
      }
      APSLogErrorAt();
LABEL_158:
      MutableCopy = 0;
      goto LABEL_233;
    }
    if (*(_DWORD *)(v18 + 24) != 1)
    {
      v26 = 0;
      v24 = 0;
      v60 = 0;
      MutableCopy = 0;
      Address = APSSignalErrorAt();
LABEL_232:
      *a8 = v26;
      cf = 0;
      goto LABEL_233;
    }
    v24 = (const void *)FigCFWeakReferenceTableCopyValue();
    if (!v24)
      goto LABEL_288;
    v48 = CFGetAllocator(a1);
    Address = session_createConnection((uint64_t)v48, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
    if (Address)
      goto LABEL_156;
    v26 = cf;
    Address = APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("PackageType"), (uint64_t)CFSTR("LowPowerKeepAlive"));
    if (Address)
      goto LABEL_156;
    if (gLogCategory_APTransportSession > 30
      || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_230;
    }
LABEL_154:
    LogPrintF();
LABEL_230:
    v60 = 0;
LABEL_231:
    MutableCopy = 0;
    goto LABEL_232;
  }
  if (a2 <= 1668575851)
  {
    if (a2 != 1634497568)
    {
      v23 = 1635088495;
      goto LABEL_18;
    }
LABEL_33:
    if (*(_DWORD *)(v18 + 24) != 1)
    {
      v26 = 0;
      v24 = 0;
LABEL_150:
      v62 = APTransportConnectionGetCMBaseObject(v26);
      v63 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
      if (v63)
      {
        Address = v63(v62, CFSTR("PackageType"), CFSTR("RTP"));
        if (!Address)
          goto LABEL_152;
      }
      else
      {
        Address = -12782;
      }
      goto LABEL_156;
    }
    CFDictionarySetValue(v17, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE40]);
    v24 = (const void *)FigCFWeakReferenceTableCopyValue();
    if (v24)
    {
      if (CFDictionaryGetInt64())
      {
        if (gLogCategory_APTransportSession <= 50
          && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v54 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPNWCreate;
      }
      else
      {
        v54 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionUDPCreate;
      }
      v61 = CFGetAllocator(a1);
      Address = session_createConnection((uint64_t)v61, v54, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v17, &cf);
      if (Address)
        goto LABEL_156;
      v26 = cf;
      goto LABEL_150;
    }
LABEL_288:
    APSLogErrorAt();
LABEL_289:
    v60 = 0;
    MutableCopy = 0;
    v89 = -16613;
    goto LABEL_290;
  }
  if (a2 != 1668575852)
  {
    if (a2 != 1702260340)
      goto LABEL_109;
    if (*(_DWORD *)(v18 + 24) == 1)
    {
      CFDictionarySetValue(v19, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE40]);
      v29 = (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(v19, CFSTR("IsServer"), (const void *)*MEMORY[0x1E0C9AE50]);
      if (CFDictionaryGetInt64())
        CFDictionarySetValue(v19, CFSTR("AssertPowerDuringEventHandling"), v29);
      v24 = (const void *)FigCFWeakReferenceTableCopyValue();
      if (!v24)
        goto LABEL_288;
      v30 = CFGetAllocator(a1);
      Address = session_createConnection((uint64_t)v30, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, 0, 0, -1, (uint64_t)v24, (uint64_t)v19, &cf);
      if (Address)
        goto LABEL_156;
      v26 = cf;
      goto LABEL_131;
    }
    CFDictionarySetValue(v19, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE50]);
    CFDictionarySetValue(v19, CFSTR("IsServer"), (const void *)*MEMORY[0x1E0C9AE40]);
    v56 = CFGetAllocator(a1);
    Address = session_createConnection((uint64_t)v56, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, *(_QWORD *)(v18 + 64), 0, -1, 0, (uint64_t)v19, &cf);
    if (!Address)
    {
      v26 = cf;
      Address = APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("SessionUUID"), *(_QWORD *)(v18 + 40));
      if (!Address)
      {
        v24 = 0;
LABEL_131:
        FigCFWeakReferenceTableRemoveValue();
        FigCFWeakReferenceTableAddValueAssociatedWithKey();
        if (gLogCategory_APTransportSession > 30
          || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_230;
        }
        goto LABEL_154;
      }
    }
LABEL_317:
    APSLogErrorAt();
    v24 = 0;
    goto LABEL_157;
  }
  v45 = v18;
  if (*(_DWORD *)(v18 + 24) == 1)
  {
    v46 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v17, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE40]);
    CFDictionarySetValue(v17, CFSTR("IsServer"), v46);
    if ((*(_BYTE *)(v45 + 228) & 1) != 0)
    {
      *(_OWORD *)cStr = *(_OWORD *)(v45 + 216);
      *(_QWORD *)&v101 = *(_QWORD *)(v45 + 232);
      FigCFDictionarySetCMTime();
    }
    v47 = CFGetAllocator(a1);
    Address = session_createConnection((uint64_t)v47, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, *(_QWORD *)(v45 + 64), *(_QWORD *)(v45 + 96), -1, 0, (uint64_t)v17, &cf);
    if (Address)
      goto LABEL_317;
    v26 = cf;
    Address = APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("SessionUUID"), *(_QWORD *)(v45 + 40));
    if (Address)
      goto LABEL_317;
    if (*(_QWORD *)(v45 + 96))
    {
      APSNetworkAddressGetPort();
      Address = APSSetFBOPropertyInt64();
      if (Address)
        goto LABEL_317;
    }
    else
    {
      Address = APSSetFBOPropertyInt64();
      if (Address)
        goto LABEL_317;
    }
    session_performWifiManagerRegistration(v45, 1);
    MutableCopy = 0;
LABEL_184:
    FigCFWeakReferenceTableRemoveValue();
    FigCFWeakReferenceTableAddValueAssociatedWithKey();
    if (gLogCategory_APTransportSession <= 30
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v24 = 0;
    v60 = 0;
    goto LABEL_232;
  }
  v57 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionarySetValue(v17, CFSTR("IsListener"), (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(v17, CFSTR("IsServer"), v57);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionarySetValue(MutableCopy, CFSTR("PerformInitialTrafficRegistration"), v57);
  CFDictionaryReplaceValue(v17, CFSTR("TrafficRegistrationOptions"), MutableCopy);
  v59 = CFGetAllocator(a1);
  Address = session_createConnection((uint64_t)v59, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *))APTransportConnectionHTTPCreate, a3, a4, a5, a6, *(_QWORD *)(v45 + 64), 0, *(_DWORD *)(v45 + 92), 0, (uint64_t)v17, &cf);
  if (!Address)
  {
    v26 = cf;
    Address = APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("SessionUUID"), *(_QWORD *)(v45 + 40));
    if (!Address)
      goto LABEL_184;
  }
  APSLogErrorAt();
  v24 = 0;
  v60 = 0;
LABEL_233:
  if (cf1)
    CFRelease(cf1);
  if (cf)
    CFRelease(cf);
  if (v24)
    CFRelease(v24);
  if (v17)
    CFRelease(v17);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v60)
    CFRelease(v60);
  if (v95)
    CFRelease(v95);
  return Address;
}

uint64_t session_createConnection(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, CFTypeRef *), uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, CFTypeRef *a12)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t CMBaseObject;
  uint64_t (*v17)(uint64_t, const __CFString *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, const __CFString *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v25;
  uint64_t v26;
  CFTypeRef v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef cf;

  v38 = 0;
  cf = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  if ((a4 - 1) > 2)
    v14 = 0;
  else
    v14 = dword_1C9432424[a4 - 1];
  v15 = a2(a1, a3, (8 * a5) & 0x10 | (4 * (a5 & 1)) | v14, a6, a11, &cf);
  if ((_DWORD)v15)
  {
    v19 = v15;
    goto LABEL_33;
  }
  if (a7)
  {
    CMBaseObject = APTransportConnectionGetCMBaseObject(cf);
    v17 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (!v17)
    {
      v19 = 4294954514;
      goto LABEL_33;
    }
    v18 = v17(CMBaseObject, CFSTR("TransportDevice"), a7);
    if ((_DWORD)v18)
    {
      v19 = v18;
LABEL_33:
      APSLogErrorAt();
      goto LABEL_34;
    }
    goto LABEL_12;
  }
  if (a8)
  {
    v20 = APTransportConnectionGetCMBaseObject(cf);
    v21 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (!v21)
    {
      v19 = 4294954514;
      goto LABEL_33;
    }
    v22 = v21(v20, CFSTR("RemoteNetworkIPAddress"), a8);
    if ((_DWORD)v22)
    {
      v19 = v22;
      goto LABEL_33;
    }
    goto LABEL_12;
  }
  if (a10)
  {
    v23 = APTransportConnectionGetCMBaseObject(a10);
    v24 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
    if (!v24)
    {
      v19 = 4294954514;
      goto LABEL_33;
    }
    v25 = *MEMORY[0x1E0C9AE00];
    v26 = v24(v23, CFSTR("RemoteNetworkIPAddress"), *MEMORY[0x1E0C9AE00], &v38);
    if ((_DWORD)v26)
    {
      v19 = v26;
      goto LABEL_33;
    }
    v27 = v38;
    v28 = APTransportConnectionGetCMBaseObject(cf);
    v29 = *(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
    if (!v29)
    {
      v19 = 4294954514;
      goto LABEL_33;
    }
    v30 = v29(v28, CFSTR("RemoteNetworkIPAddress"), v27);
    if ((_DWORD)v30)
    {
      v19 = v30;
      goto LABEL_33;
    }
    v31 = APTransportConnectionCopyProperty(a10, (uint64_t)CFSTR("BoundInterfaceIndex"), v25, (uint64_t)&v37);
    if ((_DWORD)v31)
    {
      v19 = v31;
      goto LABEL_33;
    }
    v32 = APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("BoundInterfaceIndex"), (uint64_t)v37);
    if ((_DWORD)v32)
    {
      v19 = v32;
      goto LABEL_33;
    }
    APTransportConnectionCopyProperty(a10, (uint64_t)CFSTR("LocalInterfaceName"), v25, (uint64_t)&v36);
    if (v36)
      APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("LocalInterfaceName"), (uint64_t)v36);
    goto LABEL_12;
  }
  if (a9 < 0)
    goto LABEL_12;
  APTransportSocketCreate(*MEMORY[0x1E0C9AE00], a9, (uint64_t *)&v35);
  if (v35)
  {
    v33 = APTransportConnectionSetProperty((uint64_t)cf, (uint64_t)CFSTR("ConnectedSocket"), (uint64_t)v35);
    if ((_DWORD)v33)
    {
      v19 = v33;
      goto LABEL_33;
    }
LABEL_12:
    v19 = 0;
    *a12 = cf;
    cf = 0;
    goto LABEL_36;
  }
  APSLogErrorAt();
  v19 = 4294950695;
LABEL_34:
  if (cf)
    CFRelease(cf);
LABEL_36:
  if (v38)
    CFRelease(v38);
  if (v37)
    CFRelease(v37);
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  return v19;
}

uint64_t APTransportConnectionSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  CMBaseObject = APTransportConnectionGetCMBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(CMBaseObject, a2, a3);
  else
    return 4294954514;
}

uint64_t session_initBufferedAudioTransportQueuePool(_QWORD *a1)
{
  uint64_t result;

  result = APSSettingsGetIntWithDefault();
  if ((_DWORD)result)
  {
    if (gLogCategory_APTransportSession <= 50
      && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    result = APSPriorityDispatchQueuePoolCreate();
    if ((_DWORD)result)
      result = APSLogErrorAt();
  }
  *a1 = 0;
  return result;
}

uint64_t session_copyStreamWithIDInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    return 4294954511;
  }
  else
  {
    APTransportStreamIDGetToken(*(_QWORD *)(a1 + 8));
    v2 = FigCFWeakReferenceTableCopyValue();
    if (v2)
    {
      v3 = v2;
      if (gLogCategory_APTransportSession <= 30
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      result = 0;
      **(_QWORD **)(a1 + 16) = v3;
    }
    else
    {
      APSLogErrorAt();
      return 4294960578;
    }
  }
  return result;
}

uint64_t session_ensureKeepAliveControllerCreatedAndResumed(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __CFDictionary *v6;
  __CFDictionary *Mutable;
  const void *v8;
  uint64_t v9;
  __CFDictionary *v10;
  uint64_t KeepAliveController;
  uint64_t v12;
  uint64_t CMBaseObject;
  unsigned int (*v14)(uint64_t, const __CFString *, uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = 4294950696;
  v5 = v3;
  v6 = 0;
  switch(*(_DWORD *)(v3 + 184))
  {
    case 0:
      goto LABEL_19;
    case 1:
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
        goto LABEL_38;
      v6 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("UseLegacyProtocol"), (const void *)*MEMORY[0x1E0C9AE50]);
LABEL_4:
      if (*(_QWORD *)(v5 + 192))
      {
        v4 = 0;
        v8 = 0;
      }
      else
      {
        APTransportStreamIDGetToken(1668575852);
        v8 = (const void *)FigCFWeakReferenceTableCopyValue();
        if (v8)
        {
          v4 = APTransportKeepAliveControllerStandardCreate(0, v6, v8, (_QWORD *)(v5 + 192));
          if ((_DWORD)v4)
            APSLogErrorAt();
        }
        else
        {
          APSLogErrorAt();
          v4 = APSSignalErrorAt();
        }
      }
      if (v6)
        goto LABEL_15;
      goto LABEL_16;
    case 2:
      goto LABEL_4;
    case 4:
      if (*(_QWORD *)(v3 + 200))
        goto LABEL_19;
      APTransportStreamIDGetToken(1802529910);
      v9 = FigCFWeakReferenceTableCopyValue();
      if (v9)
      {
        v8 = (const void *)v9;
        v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v10)
        {
          v6 = v10;
          CFDictionarySetValue(v10, CFSTR("SessionUUID"), *(const void **)(v5 + 40));
          v4 = APTKeepAliveControllerLowPowerCreate(*MEMORY[0x1E0C9AE00], v6, v8, (_QWORD *)(v5 + 200));
          if ((_DWORD)v4)
            APSLogErrorAt();
LABEL_15:
          CFRelease(v6);
LABEL_16:
          if (!v8)
          {
LABEL_18:
            if ((_DWORD)v4)
              goto LABEL_39;
            goto LABEL_19;
          }
        }
        else
        {
          APSLogErrorAt();
          v4 = APSSignalErrorAt();
        }
        CFRelease(v8);
        goto LABEL_18;
      }
LABEL_38:
      APSLogErrorAt();
      v4 = APSSignalErrorAt();
      if ((_DWORD)v4)
        goto LABEL_39;
LABEL_19:
      KeepAliveController = session_getKeepAliveController(a1, &v18);
      if ((_DWORD)KeepAliveController)
      {
        v4 = KeepAliveController;
      }
      else
      {
        if (!v18)
          return 0;
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        v12 = *(_QWORD *)(DerivedStorage + 176);
        if (v12)
        {
          CMBaseObject = APTransportKeepAliveControllerGetCMBaseObject(v18);
          v14 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
          if ((!v14 || v14(CMBaseObject, CFSTR("KeepAliveInterval"), v12))
            && gLogCategory_APTransportSession <= 60
            && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        v15 = v18;
        v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v16)
        {
          v4 = v16(v15);
          if (!(_DWORD)v4)
          {
            *(_BYTE *)(DerivedStorage + 169) = 1;
            return v4;
          }
        }
        else
        {
          v4 = 4294954514;
        }
      }
LABEL_39:
      APSLogErrorAt();
      return v4;
    default:
      goto LABEL_39;
  }
}

void session_dispatchConnectionDroppedInternal(uint64_t *a1)
{
  const void *v2;

  session_handleConnectionDroppedInternal(*a1, a1[1]);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
}

void session_handleConnectionDroppedInternal(uint64_t a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage && !DerivedStorage[88])
  {
    DerivedStorage[88] = 1;
    if (a2)
    {
      APSGetFBOPropertyInt64();
      if (gLogCategory_APTransportSession > 90
        || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_13;
      }
    }
    else if (gLogCategory_APTransportSession > 90
           || gLogCategory_APTransportSession == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_13;
    }
    LogPrintF();
LABEL_13:
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v5 = Mutable;
      CFDictionarySetInt64();
      CFDictionarySetInt64();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFRelease(v5);
    }
    else
    {
      APSLogErrorAt();
      APSSignalErrorAt();
    }
  }
}

uint64_t session_handleConnectivityHelperEvents(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3)
    CFRetain(a3);
  return APSDispatchAsyncFHelper();
}

void session_handleConnectivityHelperEventsInternal(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFDictionary *v6;
  uint64_t Int64;
  uint64_t DerivedStorage;
  int v9;
  unsigned int v10;
  int SessionTransportType;
  const void *v12;
  const void *v13;
  char v14;
  unsigned int v15;
  int v16;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportSession <= 40
    && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
  {
    APConnectivityHelperGetEventString(*(_DWORD *)(a1 + 8));
    LogPrintF();
  }
  v2 = *(_DWORD *)(a1 + 8);
  switch(v2)
  {
    case 4:
      v6 = *(const __CFDictionary **)(a1 + 16);
      v5 = *(_QWORD *)(a1 + 24);
      v16 = 0;
      if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 88))
        break;
      if (!v6)
        goto LABEL_55;
      CFDictionaryGetValue(v6, CFSTR("networkInterfaceName"));
      Int64 = CFDictionaryGetInt64();
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (Int64)
        break;
      SessionTransportType = session_getSessionTransportType(v5, &v16);
      if (SessionTransportType)
      {
        if (SessionTransportType == -16608)
          break;
        goto LABEL_55;
      }
      if ((v16 & 0xFFFFFFFE) != 4)
        break;
LABEL_37:
      session_handleConnectionDroppedInternal(v5, 0);
      break;
    case 2:
      v5 = *(_QWORD *)(a1 + 24);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v14 = 0;
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(_BYTE *)(DerivedStorage + 88))
        break;
      CMBaseObjectGetDerivedStorage();
      v15 = 0;
      v9 = session_getSessionTransportType(v5, (int *)&v15);
      if (v9)
      {
        if (v9 == -16608)
          break;
        APSLogErrorAt();
        goto LABEL_55;
      }
      v10 = (v15 < 8) & (0x8Cu >> v15);
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (!v10)
        break;
      if (APConnectivityHelperQueryWiFiPower(*(_QWORD *)(DerivedStorage + 208), (uint64_t)&v14))
      {
LABEL_55:
        APSLogErrorAt();
        break;
      }
      if (v14)
        break;
      if (gLogCategory_APTransportSession <= 60
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_37;
    case 1:
      v3 = *(_QWORD *)(a1 + 24);
      v4 = CMBaseObjectGetDerivedStorage();
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (APConnectivityHelperRegisterForEvent(*(_QWORD *)(v4 + 208), v3, 2))
        goto LABEL_55;
      if (gLogCategory_APTransportSession <= 40
        && (gLogCategory_APTransportSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (APConnectivityHelperDeregisterForEvent(*(_QWORD *)(v4 + 208), v3, 1))
        goto LABEL_55;
      break;
  }
  v12 = *(const void **)(a1 + 24);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 16);
  if (v13)
    CFRelease(v13);
}

uint64_t APTDiagnosticMulticastDataToAllHosts(uint64_t a1, int a2, uint64_t a3, const __CFData *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  ifaddrs *v10;
  const sockaddr *v11;
  unsigned __int8 *p_sa_len;
  uint64_t v13;
  const UInt8 *BytePtr;
  size_t Length;
  socklen_t *v16;
  ifaddrs *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;

  memset(v22, 0, sizeof(v22));
  v23 = 0;
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v6 = StringToSockAddr();
  if ((_DWORD)v6 || (SockAddrSetPort(), v6 = StringToSockAddr(), (_DWORD)v6))
  {
    v7 = v6;
    goto LABEL_4;
  }
  SockAddrSetPort();
  if (!getifaddrs(&v17))
    goto LABEL_15;
  if (*__error())
  {
    v7 = *__error();
    if (!(_DWORD)v7)
    {
LABEL_15:
      v10 = v17;
      if (!v17)
        return 0;
      v7 = 0;
      if (a2 == 2)
        v11 = (const sockaddr *)v20;
      else
        v11 = (const sockaddr *)v22;
      v8 = -1;
      while (1)
      {
        if ((v10->ifa_flags & 1) != 0)
        {
          if (v10->ifa_addr)
          {
            if (v10->ifa_name)
            {
              strlen(v10->ifa_name);
              if (!strncmpx() && (v10->ifa_flags & 0x8018) == 0x8000)
              {
                if (if_nametoindex(v10->ifa_name))
                {
                  p_sa_len = &v10->ifa_addr->sa_len;
                  if (p_sa_len[1] == a2 && (a2 != 30 || p_sa_len[8] == 254 && (p_sa_len[9] & 0xC0) == 0x80))
                  {
                    if ((v8 & 0x80000000) == 0 && close(v8) && *__error())
                      __error();
                    v8 = socket(a2, 2, 17);
                    if ((v8 & 0x80000000) == 0)
                    {
LABEL_35:
                      v13 = SocketSetMulticastInterface();
                      if ((_DWORD)v13)
                      {
                        v7 = v13;
                      }
                      else
                      {
                        BytePtr = CFDataGetBytePtr(a4);
                        Length = CFDataGetLength(a4);
                        v16 = (socklen_t *)&v18;
                        if (a2 == 2)
                          v16 = (socklen_t *)&v19;
                        sendto(v8, BytePtr, Length, 0, v11, *v16);
                        v7 = 0;
                      }
                      goto LABEL_44;
                    }
                    if (*__error())
                    {
                      v7 = *__error();
                      if (!(_DWORD)v7)
                        goto LABEL_35;
                    }
                    else
                    {
                      v7 = 4294960596;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_44:
        v10 = v10->ifa_next;
        if (!v10)
          goto LABEL_5;
      }
    }
  }
  else
  {
    v7 = 4294960596;
  }
LABEL_4:
  v8 = -1;
LABEL_5:
  if (v17)
    MEMORY[0x1CAA3CB04]();
  if ((v8 & 0x80000000) == 0 && close(v8) && *__error())
    __error();
  return v7;
}

uint64_t APTransportStreamSendPlistMessage(uint64_t a1, uint64_t a2, CFPropertyListRef propertyList)
{
  CFDataRef Data;
  CFDataRef v6;
  uint64_t BlockBufferWithCFDataNoCopy;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD);
  uint64_t v9;

  if (propertyList)
  {
    Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      return 4294950685;
    }
    v6 = Data;
    BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if ((_DWORD)BlockBufferWithCFDataNoCopy)
    {
      v9 = BlockBufferWithCFDataNoCopy;
      APSLogErrorAt();
      goto LABEL_12;
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v8)
  {
    v9 = v8(a1, a2, 0);
    if (!(_DWORD)v9)
    {
      if (!v6)
        return v9;
      goto LABEL_12;
    }
  }
  else
  {
    v9 = 4294954514;
  }
  APSLogErrorAt();
  if (v6)
LABEL_12:
    CFRelease(v6);
  return v9;
}

uint64_t APTransportStreamSendPlistMessageCreatingReply(uint64_t a1, uint64_t a2, CFPropertyListRef propertyList, uint64_t a4)
{
  CFDataRef Data;
  CFDataRef v8;
  uint64_t BlockBufferWithCFDataNoCopy;
  uint64_t (*v10)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v11;

  if (propertyList)
  {
    Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      return 4294950685;
    }
    v8 = Data;
    BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if ((_DWORD)BlockBufferWithCFDataNoCopy)
    {
      v11 = BlockBufferWithCFDataNoCopy;
      APSLogErrorAt();
      goto LABEL_12;
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v10)
  {
    v11 = v10(a1, a2, 0, a4);
    if (!(_DWORD)v11)
    {
      if (!v8)
        return v11;
      goto LABEL_12;
    }
  }
  else
  {
    v11 = 4294954514;
  }
  APSLogErrorAt();
  if (v8)
LABEL_12:
    CFRelease(v8);
  return v11;
}

uint64_t APTransportStreamSendPlistMessageCreatingPlistReply(uint64_t a1, uint64_t a2, CFPropertyListRef propertyList, _QWORD *a4)
{
  CFDataRef Data;
  CFDataRef v8;
  uint64_t BlockBufferWithCFDataNoCopy;
  CFTypeRef v10;
  uint64_t (*v11)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v12;
  const void *v13;
  const __CFAllocator *v14;
  uint64_t CFDataWithBlockBufferNoCopy;
  CFPropertyListRef v16;
  CFTypeID v17;
  CFTypeRef v19;
  CFTypeRef cf;

  v19 = 0;
  cf = 0;
  if (propertyList)
  {
    Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (!Data)
    {
      APSLogErrorAt();
      v13 = 0;
      v12 = 4294950685;
      goto LABEL_19;
    }
    v8 = Data;
    BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
    if ((_DWORD)BlockBufferWithCFDataNoCopy)
    {
      v12 = BlockBufferWithCFDataNoCopy;
      APSLogErrorAt();
      v13 = 0;
      goto LABEL_18;
    }
    v10 = cf;
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 56);
  if (!v11)
  {
    v12 = 4294954514;
    goto LABEL_15;
  }
  v12 = v11(a1, a2, v10, &v19);
  if ((_DWORD)v12)
  {
LABEL_15:
    APSLogErrorAt();
    goto LABEL_16;
  }
  v13 = 0;
  if (!a4 || !v19)
  {
LABEL_17:
    if (!v8)
      goto LABEL_19;
    goto LABEL_18;
  }
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
  {
    v12 = CFDataWithBlockBufferNoCopy;
    goto LABEL_15;
  }
  v16 = CFPropertyListCreateWithData(v14, 0, 0, 0, 0);
  v13 = v16;
  if (v16)
  {
    v17 = CFGetTypeID(v16);
    if (v17 == CFDictionaryGetTypeID())
    {
      v12 = 0;
      *a4 = v13;
LABEL_16:
      v13 = 0;
      goto LABEL_17;
    }
  }
  APSLogErrorAt();
  v12 = 4294950686;
  if (v8)
LABEL_18:
    CFRelease(v8);
LABEL_19:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (v13)
    CFRelease(v13);
  return v12;
}

uint64_t APTransportStreamSendData(uint64_t a1, uint64_t a2)
{
  uint64_t BlockBufferWithCFDataNoCopy;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD);
  uint64_t v6;

  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if ((_DWORD)BlockBufferWithCFDataNoCopy)
  {
    v6 = BlockBufferWithCFDataNoCopy;
    goto LABEL_6;
  }
  v5 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v5)
  {
    v6 = 4294954514;
LABEL_6:
    APSLogErrorAt();
    return v6;
  }
  v6 = v5(a1, a2, 0);
  if ((_DWORD)v6)
    goto LABEL_6;
  return v6;
}

uint64_t APTransportStreamSendDataCreatingReplyData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t BlockBufferWithCFDataNoCopy;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t CFDataWithBlockBufferNoCopy;
  CFTypeRef v11;
  CFTypeRef cf;

  v11 = 0;
  cf = 0;
  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if ((_DWORD)BlockBufferWithCFDataNoCopy)
  {
    CFDataWithBlockBufferNoCopy = BlockBufferWithCFDataNoCopy;
    goto LABEL_9;
  }
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 56);
  if (!v8)
  {
    CFDataWithBlockBufferNoCopy = 4294954514;
LABEL_9:
    APSLogErrorAt();
    goto LABEL_10;
  }
  CFDataWithBlockBufferNoCopy = v8(a1, a2, cf, &v11);
  if ((_DWORD)CFDataWithBlockBufferNoCopy)
    goto LABEL_9;
  if (a4)
  {
    if (v11)
    {
      CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
      if ((_DWORD)CFDataWithBlockBufferNoCopy)
        goto LABEL_9;
    }
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  return CFDataWithBlockBufferNoCopy;
}

uint64_t APBrokerManagerGetTypeID()
{
  if (gAPBrokerManagerInitOnce != -1)
    dispatch_once_f(&gAPBrokerManagerInitOnce, 0, (dispatch_function_t)_APBrokerManagerGetTypeID);
  return gAPBrokerManagerTypeID;
}

uint64_t _APBrokerManagerGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPBrokerManagerTypeID = result;
  return result;
}

uint64_t APBrokerManagerCreateWithDiscoveryDelegate(__int128 *a1, _QWORD *a2)
{
  _OWORD *Instance;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  dispatch_queue_t v8;
  dispatch_queue_t v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  void *v18;
  unsigned int v20;
  char label[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)label = 0u;
  v22 = 0u;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (gAPBrokerManagerInitOnce != -1)
    dispatch_once_f(&gAPBrokerManagerInitOnce, 0, (dispatch_function_t)_APBrokerManagerGetTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v5 = Instance;
  Instance[1] = 0u;
  v6 = Instance + 1;
  Instance[16] = 0u;
  Instance[17] = 0u;
  Instance[14] = 0u;
  Instance[15] = 0u;
  Instance[12] = 0u;
  Instance[13] = 0u;
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  v7 = FigSimpleMutexCreate();
  v6[10] = v7;
  if (!v7)
    goto LABEL_32;
  SNPrintF();
  v8 = dispatch_queue_create(label, 0);
  *((_QWORD *)v5 + 11) = v8;
  if (!v8)
    goto LABEL_32;
  SNPrintF();
  v9 = dispatch_queue_create(label, 0);
  *((_QWORD *)v5 + 3) = v9;
  if (!v9)
    goto LABEL_32;
  *((_WORD *)v5 + 64) = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_QWORD *)v5 + 14) = Mutable;
  if (!Mutable)
    goto LABEL_32;
  v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_QWORD *)v5 + 15) = v11;
  if (!v11)
    goto LABEL_32;
  v12 = v5 + 2;
  if (a1)
  {
    v14 = *a1;
    v13 = a1[1];
    *((_QWORD *)v5 + 8) = *((_QWORD *)a1 + 4);
    *v12 = v14;
    v5[3] = v13;
    if (*(_QWORD *)v12)
    {
      v15 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *((_QWORD *)v5 + 9) = v15;
      if (!v15)
        goto LABEL_32;
    }
  }
  else
  {
    *((_QWORD *)v5 + 8) = 0;
    *v12 = 0u;
    v5[3] = 0u;
    *((_QWORD *)v5 + 5) = BonjourDiscoveryDelegateSetup;
    *((_QWORD *)v5 + 6) = BonjourDiscoveryDelegateStart;
    *((_QWORD *)v5 + 7) = BonjourDiscoveryDelegateStop;
    *((_QWORD *)v5 + 8) = BonjourDiscoveryDelegateCleanup;
  }
  v20 = 0;
  if (*((_QWORD *)v5 + 5))
  {
    v16 = (const void *)_APBrokerManagerCopyReferencedObjectIfNecessary(*((_QWORD *)v5 + 9), (int *)&v20);
    if (v20
      || (*((_QWORD *)v5 + 10) = (*((uint64_t (**)(const void *, void (*)(int, const void *, uint64_t), _OWORD *, unsigned int *))v5
                                  + 5))(v16, _APBrokerManagerHandleBonjourEvent, v5, &v20), v20))
    {
      APSLogErrorAt();
      if (!v16)
      {
LABEL_20:
        v17 = v20;
        if (v20)
        {
          APSLogErrorAt();
          goto LABEL_33;
        }
        goto LABEL_21;
      }
    }
    else if (!v16)
    {
      goto LABEL_20;
    }
    CFRelease(v16);
    goto LABEL_20;
  }
LABEL_21:
  v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D1BA50]), "initWithServiceType:", 2, v5);
  *v6 = v18;
  if (!v18)
  {
LABEL_32:
    APSLogErrorAt();
    v17 = 4294960568;
LABEL_33:
    CFRelease(v5);
    return v17;
  }
  objc_msgSend(v18, "activate");
  v17 = 0;
  *a2 = v5;
  return v17;
}

uint64_t APBrokerManagerCreate(_QWORD *a1)
{
  return APBrokerManagerCreateWithDiscoveryDelegate(0, a1);
}

uint64_t APBrokerManagerInvalidate(uint64_t a1)
{
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  ++*(_DWORD *)(a1 + 200);
  *(_WORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  _APBrokerManagerUpdateBrowsing(a1);
  _APBrokerManagerClearAuthCallbackState(a1);
  _APBrokerManagerDiscoveryDelegateStop(a1);
  objc_msgSend(*(id *)(a1 + 16), "invalidate");
  *(_BYTE *)(a1 + 104) = 1;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
}

void _APBrokerManagerClearAuthCallbackState(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;

  FigSimpleMutexCheckIsLockedOnThisThread();
  v2 = *(const void **)(a1 + 208);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(a1 + 208) = 0;
  }
  *(_DWORD *)(a1 + 216) = 0;
  v3 = *(const void **)(a1 + 224);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v4 = *(const void **)(a1 + 232);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 232) = 0;
  }
  v5 = *(NSObject **)(a1 + 240);
  if (v5)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 240));
    dispatch_release(v5);
    *(_QWORD *)(a1 + 240) = 0;
  }
}

void _APBrokerManagerDiscoveryDelegateStop(uint64_t a1)
{
  const void *v2;
  int v3;

  v3 = 0;
  if (*(_QWORD *)(a1 + 56))
  {
    v2 = (const void *)_APBrokerManagerCopyReferencedObjectIfNecessary(*(_QWORD *)(a1 + 72), &v3);
    if (v3)
    {
      APSLogErrorAt();
      if (!v2)
        return;
    }
    else
    {
      (*(void (**)(const void *, _QWORD))(a1 + 56))(v2, *(_QWORD *)(a1 + 80));
      if (!v2)
        return;
    }
    CFRelease(v2);
  }
}

uint64_t APBrokerManagerAuthenticateBrokerGroup(uint64_t a1, const void *a2, const void *a3, void *a4)
{
  dispatch_source_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  dispatch_time_t v13;
  const void *Value;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];
  _QWORD handler[5];
  _QWORD aBlock[5];

  if (!a3)
  {
    APSLogErrorAt();
    v16 = 4294960591;
    goto LABEL_21;
  }
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  if (!*(_BYTE *)(a1 + 104))
  {
    if (gLogCategory_APBrokerManager <= 50
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      if (a2)
        IsAppleInternalBuild();
      IsAppleInternalBuild();
      LogPrintF();
    }
    if (*(_QWORD *)(a1 + 240))
    {
      v16 = 4294960575;
    }
    else
    {
      v8 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, 0);
      *(_QWORD *)(a1 + 240) = v8;
      if (v8)
      {
        *(_QWORD *)(a1 + 208) = _Block_copy(a4);
        _APBrokerManagerRequestBrokerDiscovery(a1);
        CFRetain((CFTypeRef)a1);
        v9 = MEMORY[0x1E0C809B0];
        v10 = *(NSObject **)(a1 + 240);
        handler[0] = MEMORY[0x1E0C809B0];
        handler[1] = 3221225472;
        handler[2] = __APBrokerManagerAuthenticateBrokerGroup_block_invoke;
        handler[3] = &__block_descriptor_40_e5_v8__0l;
        handler[4] = a1;
        dispatch_source_set_event_handler(v10, handler);
        v11 = *(NSObject **)(a1 + 240);
        v18[0] = v9;
        v18[1] = 3221225472;
        v18[2] = __APBrokerManagerAuthenticateBrokerGroup_block_invoke_2;
        v18[3] = &__block_descriptor_40_e5_v8__0l;
        v18[4] = a1;
        dispatch_source_set_cancel_handler(v11, v18);
        v12 = *(NSObject **)(a1 + 240);
        v13 = dispatch_time(0, 24000000000);
        dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume(*(dispatch_object_t *)(a1 + 240));
        *(_QWORD *)(a1 + 224) = CFRetain(a3);
        if (a2)
        {
          *(_QWORD *)(a1 + 232) = CFRetain(a2);
          FigSimpleMutexCheckIsLockedOnThisThread();
          Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
          if (Value)
          {
            v15 = (uint64_t)Value;
            CFRetain((CFTypeRef)a1);
            aBlock[0] = v9;
            aBlock[1] = 3221225472;
            aBlock[2] = ___APBrokerManagerAuthenticateBrokerGroup_block_invoke;
            aBlock[3] = &__block_descriptor_40_e44_v28__0i8____CFString__12____CFDictionary__20l;
            aBlock[4] = a1;
            APBrokerGroupAuthenticate(v15, a3, aBlock);
          }
        }
        else
        {
          *(_QWORD *)(a1 + 232) = 0;
          CFDictionaryApplyBlock();
        }
        goto LABEL_15;
      }
      v16 = 4294960568;
    }
    APSLogErrorAt();
    _APBrokerManagerClearAuthCallbackState(a1);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
LABEL_21:
    _APBrokerManagerCallAuthenticationCallback(a1, v16, 0, a4);
    return v16;
  }
LABEL_15:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  return 0;
}

uint64_t _APBrokerManagerRequestBrokerDiscovery(uint64_t a1)
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  ++*(_DWORD *)(a1 + 132);
  if (gLogCategory_APBrokerManager <= 30
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return _APBrokerManagerUpdateBrowsing(a1);
}

uint64_t _APBrokerManagerReleaseBrokerDiscovery(uint64_t a1)
{
  int v2;

  FigSimpleMutexCheckIsLockedOnThisThread();
  v2 = *(_DWORD *)(a1 + 132);
  if (!v2)
    return APSLogErrorAt();
  *(_DWORD *)(a1 + 132) = v2 - 1;
  if (gLogCategory_APBrokerManager <= 30
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return _APBrokerManagerUpdateBrowsing(a1);
}

void _APBrokerManagerCallAuthenticationCallback(uint64_t a1, int a2, const void *a3, void *aBlock)
{
  void *v7;
  NSObject *v8;
  _QWORD block[6];
  int v10;

  if (aBlock)
  {
    v7 = _Block_copy(aBlock);
    if (a3)
      CFRetain(a3);
    v8 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerCallAuthenticationCallback_block_invoke;
    block[3] = &unk_1E82552B8;
    v10 = a2;
    block[4] = v7;
    block[5] = a3;
    dispatch_async(v8, block);
  }
}

uint64_t APBrokerManagerGetInfoFromBrokerGroup(uint64_t a1, const void *a2, const void *a3)
{
  dispatch_source_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  dispatch_time_t v11;
  const void *Value;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];
  _QWORD handler[5];
  _QWORD aBlock[5];

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
  if (!*(_BYTE *)(a1 + 104))
  {
    if (gLogCategory_APBrokerManager <= 50
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      if (a2)
        IsAppleInternalBuild();
      LogPrintF();
    }
    if (*(_QWORD *)(a1 + 272))
    {
      v14 = 4294960575;
    }
    else
    {
      v6 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, 0);
      *(_QWORD *)(a1 + 272) = v6;
      if (v6)
      {
        *(_QWORD *)(a1 + 248) = _Block_copy(a3);
        _APBrokerManagerRequestBrokerDiscovery(a1);
        CFRetain((CFTypeRef)a1);
        v7 = MEMORY[0x1E0C809B0];
        v8 = *(NSObject **)(a1 + 272);
        handler[0] = MEMORY[0x1E0C809B0];
        handler[1] = 3221225472;
        handler[2] = __APBrokerManagerGetInfoFromBrokerGroup_block_invoke;
        handler[3] = &__block_descriptor_40_e5_v8__0l;
        handler[4] = a1;
        dispatch_source_set_event_handler(v8, handler);
        v9 = *(NSObject **)(a1 + 272);
        v16[0] = v7;
        v16[1] = 3221225472;
        v16[2] = __APBrokerManagerGetInfoFromBrokerGroup_block_invoke_2;
        v16[3] = &__block_descriptor_40_e5_v8__0l;
        v16[4] = a1;
        dispatch_source_set_cancel_handler(v9, v16);
        v10 = *(NSObject **)(a1 + 272);
        v11 = dispatch_time(0, 3000000000);
        dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        dispatch_resume(*(dispatch_object_t *)(a1 + 272));
        if (a2)
        {
          *(_QWORD *)(a1 + 256) = CFRetain(a2);
          FigSimpleMutexCheckIsLockedOnThisThread();
          Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), a2);
          if (Value)
          {
            v13 = (uint64_t)Value;
            CFRetain((CFTypeRef)a1);
            aBlock[0] = v7;
            aBlock[1] = 3221225472;
            aBlock[2] = ___APBrokerManagerGetInfoFromBrokerGroup_block_invoke;
            aBlock[3] = &__block_descriptor_40_e44_v28__0i8____CFString__12____CFDictionary__20l;
            aBlock[4] = a1;
            APBrokerGroupGetInfo(v13, aBlock);
          }
        }
        else
        {
          *(_QWORD *)(a1 + 256) = 0;
          CFDictionaryApplyBlock();
        }
        goto LABEL_14;
      }
      v14 = 4294960568;
    }
    APSLogErrorAt();
    _APBrokerManagerClearGetInfoCallbackState(a1);
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
    _APBrokerManagerCallGetInfoCallback(a1, v14, 0, a3);
    return v14;
  }
LABEL_14:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
  return 0;
}

void _APBrokerManagerClearGetInfoCallbackState(uint64_t a1)
{
  const void *v2;
  const void *v3;
  NSObject *v4;

  FigSimpleMutexCheckIsLockedOnThisThread();
  v2 = *(const void **)(a1 + 248);
  if (v2)
  {
    _Block_release(v2);
    *(_QWORD *)(a1 + 248) = 0;
  }
  v3 = *(const void **)(a1 + 264);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v4 = *(NSObject **)(a1 + 272);
  if (v4)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 272));
    dispatch_release(v4);
    *(_QWORD *)(a1 + 272) = 0;
  }
}

void _APBrokerManagerCallGetInfoCallback(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  CFMutableDictionaryRef Mutable;
  void *v8;
  NSObject *v9;
  _QWORD block[6];
  int v11;

  if (a4)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      FigCFDictionarySetValue();
      v8 = _Block_copy(a4);
      CFRetain(Mutable);
    }
    else
    {
      APSLogErrorAt();
      v8 = _Block_copy(a4);
      a2 = -6728;
    }
    v9 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerCallGetInfoCallback_block_invoke;
    block[3] = &unk_1E82552B8;
    v11 = a2;
    block[4] = v8;
    block[5] = Mutable;
    dispatch_async(v9, block);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void APBrokerManagerResolveBrokeredReceiverDNSName(uint64_t a1, CFStringRef theString, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  CFTypeRef v6;
  const void *Value;
  int v8;
  void *v9;
  NSObject *v10;
  _QWORD block[5];
  int v12;
  CFTypeRef v13;
  CFTypeRef v14;

  v13 = 0;
  v14 = 0;
  if (gLogCategory_APBrokerManager <= 50
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!theString)
    goto LABEL_26;
  if (!a3)
  {
    APSLogErrorAt();
    goto LABEL_19;
  }
  APBrokeredReceiverCopyInfoFromDNSName(theString, &v14, &v13);
  if (v14 && v13)
  {
    if (gLogCategory_APBrokerManager <= 50
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_11;
    }
    while (1)
    {
      FigSimpleMutexCheckIsNotLockedOnThisThread();
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 96));
      v6 = v14;
      FigSimpleMutexCheckIsLockedOnThisThread();
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), v6);
      if (Value)
      {
        APBrokerGroupResolveReceiverDNSName((uint64_t)Value, v13, a3);
        v8 = 0;
      }
      else
      {
        APSLogErrorAt();
        v8 = -6705;
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 96));
LABEL_16:
      if (!v8)
        break;
      v9 = _Block_copy(a3);
      if (v9)
      {
        v10 = *(NSObject **)(a1 + 88);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __APBrokerManagerResolveBrokeredReceiverDNSName_block_invoke;
        block[3] = &unk_1E8255150;
        block[4] = v9;
        v12 = v8;
        dispatch_async(v10, block);
        break;
      }
      FatalErrorF();
LABEL_11:
      LogPrintF();
    }
  }
  else
  {
LABEL_26:
    APSLogErrorAt();
    v8 = -6705;
    if (a3)
      goto LABEL_16;
  }
LABEL_19:
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
}

uint64_t _APBrokerManagerFinalize(uint64_t a1)
{
  const void *v1;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t result;
  int v10;

  if (*(_BYTE *)(a1 + 104))
  {
    v10 = 0;
    if (!*(_QWORD *)(a1 + 64))
      goto LABEL_6;
    v1 = (const void *)_APBrokerManagerCopyReferencedObjectIfNecessary(*(_QWORD *)(a1 + 72), &v10);
    if (!v10)
    {
      (*(void (**)(const void *, _QWORD))(a1 + 64))(v1, *(_QWORD *)(a1 + 80));
      *(_QWORD *)(a1 + 80) = 0;
      if (!v1)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else
  {
    FatalErrorF();
  }
  APSLogErrorAt();
  if (v1)
LABEL_5:
    CFRelease(v1);
LABEL_6:
  v3 = *(const void **)(a1 + 192);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v4 = *(const void **)(a1 + 72);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v5 = *(const void **)(a1 + 112);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v6 = *(const void **)(a1 + 120);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 120) = 0;
  }

  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(NSObject **)(a1 + 88);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v8 = *(NSObject **)(a1 + 24);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(a1 + 24) = 0;
  }
  result = *(_QWORD *)(a1 + 96);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 96) = 0;
  }
  return result;
}

void _APBrokerManagerHandleBonjourEvent(int a1, const void *a2, uint64_t a3)
{
  CFTypeRef v6;
  const void *v7;
  const void *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  const void *Value;
  const void *v11;
  __CFDictionary *v12;
  const void *GroupID;
  CFTypeRef v14;
  CFTypeRef v15;
  const void *v16;
  const void *v17;
  CFTypeRef v18;
  const void *v19;
  CFTypeRef v20;
  CFTypeRef cf;
  CFTypeRef cf1;
  uint64_t (*aBlock)(uint64_t, uint64_t);
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;

  if (gLogCategory_APBrokerManager <= 30
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((a1 - 3) < 2)
  {
    FigSimpleMutexCheckIsNotLockedOnThisThread();
    pthread_mutex_lock(*(pthread_mutex_t **)(a3 + 96));
    if (*(_BYTE *)(a3 + 136) && _APBrokerManagerRemoveAllBrokerGroups(a3))
      APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(a3 + 96));
    return;
  }
  if (a1 == 2)
  {
    aBlock = 0;
    FigSimpleMutexCheckIsNotLockedOnThisThread();
    pthread_mutex_lock(*(pthread_mutex_t **)(a3 + 96));
    if (*(_BYTE *)(a3 + 136))
    {
      if (APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a2, 0, &aBlock))
      {
        APSLogErrorAt();
      }
      else
      {
        v9 = aBlock;
        FigSimpleMutexCheckIsLockedOnThisThread();
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 112), v9);
        if (Value)
        {
          v11 = Value;
          CFRetain(Value);
          if (APBrokerGroupRemoveBroker((uint64_t)v11, (uint64_t)a2))
          {
            APSLogErrorAt();
          }
          else if (APBrokerGroupIsEmpty((uint64_t)v11))
          {
            v12 = *(__CFDictionary **)(a3 + 112);
            GroupID = (const void *)APBrokerGroupGetGroupID((uint64_t)v11);
            CFDictionaryRemoveValue(v12, GroupID);
            _APBrokerManagerCleanupBrokerGroup(a3, v11);
          }
          pthread_mutex_unlock(*(pthread_mutex_t **)(a3 + 96));
          CFRelease(v11);
LABEL_25:
          v14 = aBlock;
          if (!aBlock)
            return;
          goto LABEL_51;
        }
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a3 + 96));
    goto LABEL_25;
  }
  if (a1 != 1)
    return;
  cf = 0;
  cf1 = 0;
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a3 + 96));
  if (!*(_BYTE *)(a3 + 136))
    goto LABEL_48;
  if (APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a2, 0, &cf1))
  {
LABEL_57:
    APSLogErrorAt();
    goto LABEL_48;
  }
  v6 = cf1;
  FigSimpleMutexCheckIsLockedOnThisThread();
  v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 112), v6);
  cf = v7;
  if (!v7)
  {
    if (APBrokerGroupCreate(cf1, &cf))
      goto LABEL_57;
    aBlock = _APBrokerManagerHandleBrokeredReceiversChanged;
    if (APBrokerGroupSetDelegate((uint64_t)cf, (const void *)a3, &aBlock))
      goto LABEL_57;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 112), cf1, cf);
    v15 = cf;
    FigSimpleMutexCheckIsLockedOnThisThread();
    if (gLogCategory_APBrokerManager <= 30
      && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    _APBrokerManagerFireBrokerGroupEvent(a3, v15, *(_QWORD *)(a3 + 144));
    if (APBrokerGroupAddOrUpdateBroker((uint64_t)cf, a2))
      goto LABEL_57;
    v16 = *(const void **)(a3 + 224);
    if (!v16)
      goto LABEL_42;
    v17 = *(const void **)(a3 + 232);
    if (v17)
    {
      if (!CFEqual(cf1, v17))
        goto LABEL_42;
      v16 = *(const void **)(a3 + 224);
    }
    v18 = cf;
    CFRetain((CFTypeRef)a3);
    aBlock = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C809B0];
    v24 = 3221225472;
    v25 = ___APBrokerManagerAuthenticateBrokerGroup_block_invoke;
    v26 = &__block_descriptor_40_e44_v28__0i8____CFString__12____CFDictionary__20l;
    v27 = a3;
    APBrokerGroupAuthenticate((uint64_t)v18, v16, &aBlock);
LABEL_42:
    if (*(_QWORD *)(a3 + 272))
    {
      v19 = *(const void **)(a3 + 256);
      if (!v19 || CFEqual(cf1, v19))
      {
        v20 = cf;
        CFRetain((CFTypeRef)a3);
        aBlock = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C809B0];
        v24 = 3221225472;
        v25 = ___APBrokerManagerGetInfoFromBrokerGroup_block_invoke;
        v26 = &__block_descriptor_40_e44_v28__0i8____CFString__12____CFDictionary__20l;
        v27 = a3;
        APBrokerGroupGetInfo((uint64_t)v20, &aBlock);
      }
    }
    if (*(_BYTE *)(a3 + 137))
      APBrokerGroupStartReceiverPolling((uint64_t)cf);
    goto LABEL_48;
  }
  v8 = v7;
  CFRetain(v7);
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (gLogCategory_APBrokerManager <= 30
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  _APBrokerManagerFireBrokerGroupEvent(a3, v8, *(_QWORD *)(a3 + 152));
  if (APBrokerGroupAddOrUpdateBroker((uint64_t)v8, a2))
    goto LABEL_57;
LABEL_48:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a3 + 96));
  if (cf)
    CFRelease(cf);
  v14 = cf1;
  if (cf1)
LABEL_51:
    CFRelease(v14);
}

uint64_t _APBrokerManagerHandleBrokeredReceiversChanged(uint64_t a1, uint64_t a2)
{
  const void *GroupID;
  NSObject *v4;
  _QWORD v6[6];

  GroupID = (const void *)APBrokerGroupGetGroupID(a1);
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 96));
  CFRetain((CFTypeRef)a2);
  CFRetain(GroupID);
  v4 = *(NSObject **)(a2 + 88);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___APBrokerManagerHandleBrokeredReceiversChanged_block_invoke;
  v6[3] = &__block_descriptor_48_e5_v8__0l;
  v6[4] = a2;
  v6[5] = GroupID;
  dispatch_async(v4, v6);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 96));
}

void _APBrokerManagerUpdateBrokerGroupReceiversWithList(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *Value;
  __CFDictionary *v7;
  CFMutableDictionaryRef v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  CFMutableDictionaryRef v12;

  FigSimpleMutexCheckIsLockedOnThisThread();
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 120), a2);
  if (Value && (v7 = (__CFDictionary *)CFRetain(Value)) != 0)
  {
    v8 = v7;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  else
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      return;
    }
    v8 = Mutable;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 120), a2, Mutable);
  }
  v11 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v11)
  {
    v12 = v11;
    CFDictionaryApplyBlock();
    CFDictionaryApplyBlock();
    if (a3)
      CFDictionaryApplyBlock();
    CFRelease(v12);
  }
  else
  {
    APSLogErrorAt();
  }
  CFRelease(v8);
}

void _APBrokerManagerFireBrokeredReceiverEvent(uint64_t a1, const void *a2, uint64_t a3)
{
  int v6;
  const void *v7;
  CFTypeRef v8;
  NSObject *v9;
  _QWORD block[8];
  int v11;

  FigSimpleMutexCheckIsLockedOnThisThread();
  if (a3)
  {
    v6 = *(_DWORD *)(a1 + 200);
    v7 = *(const void **)(a1 + 192);
    if (v7)
      v8 = CFRetain(v7);
    else
      v8 = 0;
    CFRetain((CFTypeRef)a1);
    CFRetain(a2);
    v9 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerFireBrokeredReceiverEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    v11 = v6;
    block[4] = a1;
    block[5] = a3;
    block[6] = a2;
    block[7] = v8;
    dispatch_async(v9, block);
  }
}

void _APBrokerManagerFireBrokerGroupEvent(uint64_t a1, const void *a2, uint64_t a3)
{
  int v6;
  const void *v7;
  CFTypeRef v8;
  NSObject *v9;
  _QWORD block[8];
  int v11;

  FigSimpleMutexCheckIsLockedOnThisThread();
  if (a3)
  {
    v6 = *(_DWORD *)(a1 + 200);
    v7 = *(const void **)(a1 + 192);
    if (v7)
      v8 = CFRetain(v7);
    else
      v8 = 0;
    CFRetain((CFTypeRef)a1);
    CFRetain(a2);
    v9 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___APBrokerManagerFireBrokerGroupEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    v11 = v6;
    block[4] = a1;
    block[5] = a3;
    block[6] = a2;
    block[7] = v8;
    dispatch_async(v9, block);
  }
}

void _APBrokerManagerCleanupBrokerGroup(uint64_t a1, const void *a2)
{
  const void *GroupID;

  FigSimpleMutexCheckIsLockedOnThisThread();
  if (*(_BYTE *)(a1 + 137))
    APBrokerGroupStopReceiverPolling((uint64_t)a2);
  GroupID = (const void *)APBrokerGroupGetGroupID((uint64_t)a2);
  _APBrokerManagerUpdateBrokerGroupReceiversWithList(a1, GroupID, 0);
  APBrokerGroupInvalidate((uint64_t)a2);
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (gLogCategory_APBrokerManager <= 30
    && (gLogCategory_APBrokerManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  _APBrokerManagerFireBrokerGroupEvent(a1, a2, *(_QWORD *)(a1 + 160));
}

uint64_t _APBrokerManagerRemoveAllBrokerGroups(uint64_t a1)
{
  CFDictionaryRef Copy;

  FigSimpleMutexCheckIsLockedOnThisThread();
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 112)) >= 1)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(a1 + 112));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 112));
    if (!Copy)
    {
      APSLogErrorAt();
      return 4294960568;
    }
    CFDictionaryApplyBlock();
    CFRelease(Copy);
  }
  return 0;
}

CFTypeRef *BonjourDiscoveryDelegateSetup(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  CFTypeRef *v5;
  int v6;

  v5 = (CFTypeRef *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v5)
  {
    v6 = BonjourBrowser_CreateEx();
    if (v6)
    {
      APSLogErrorAt();
      if (*v5)
      {
        BonjourBrowser_Stop();
        CFRelease(*v5);
      }
      free(v5);
      v5 = 0;
    }
    else
    {
      BonjourBrowser_SetEventHandler();
    }
  }
  else
  {
    APSLogErrorAt();
    v6 = -6728;
  }
  if (a4)
    *a4 = v6;
  return v5;
}

uint64_t BonjourDiscoveryDelegateStop()
{
  return BonjourBrowser_Stop();
}

void BonjourDiscoveryDelegateCleanup(int a1, CFTypeRef *a2)
{
  if (a2)
  {
    if (*a2)
    {
      BonjourBrowser_Stop();
      CFRelease(*a2);
    }
    free(a2);
  }
}

uint64_t healthReporter_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTSessionHealthReporterCreate(const __CFAllocator *a1, const __CFString *a2, const void *a3, uint64_t a4, unsigned int a5, _QWORD *a6)
{
  _OWORD *Instance;
  _OWORD *v13;
  void *v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v19;
  _OWORD v20[8];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a6)
  {
    v17 = 4294895125;
    APSLogErrorAt();
    return v17;
  }
  if (APTSessionHealthReporterGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTSessionHealthReporterGetTypeID_sInitOnce, &APTSessionHealthReporterGetTypeID_sTypeID, (dispatch_function_t)healthReporter_getTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294895126;
  }
  v13 = Instance;
  Instance[1] = 0u;
  v14 = Instance + 1;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  if (gLogCategory_APTSessionHealthReporter <= 30
    && (gLogCategory_APTSessionHealthReporter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  arc4random_buf(v14, 8uLL);
  if (!a2
    || CFStringGetCString(a2, (char *)v13 + 76, 17, 0x8000100u)
    && (v15 = if_nametoindex((const char *)v13 + 76), (*((_DWORD *)v13 + 18) = v15) != 0))
  {
    if (a4)
    {
      APSNetworkAddressGetSocketAddr();
      v16 = *(_OWORD *)((char *)v20 + 12);
      *(_OWORD *)((char *)v13 + 24) = v20[0];
      *(_OWORD *)((char *)v13 + 36) = v16;
      SockAddrToString();
      *((_QWORD *)v13 + 7) = CFStringCreateWithFormat(a1, 0, CFSTR("rtsp://%s:%d/"), v20, a5);
    }
    *((_QWORD *)v13 + 8) = a3;
    if (a3)
      CFRetain(a3);
    v17 = 0;
    *a6 = v13;
    return v17;
  }
  APSLogErrorAt();
  v19 = APSSignalErrorAt();
  CFRelease(v13);
  return v19;
}

uint64_t APTSessionHealthReporterReportNetworkStatus(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t PeerMACAddress;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (a2 != 1 && a2 != 2)
    return 0;
  if (!*(_QWORD *)(a1 + 56) || !*(_QWORD *)(a1 + 64))
  {
    APSLogErrorAt();
    v6 = 4294895122;
LABEL_42:
    APSLogErrorAt();
    return v6;
  }
  if (healthReporter_getSymptomReporter_onceToken != -1)
    dispatch_once(&healthReporter_getSymptomReporter_onceToken, &__block_literal_global_1);
  if (!healthReporter_getSymptomReporter_symptomReporter)
  {
    APSLogErrorAt();
    v8 = APSSignalErrorAt();
    if ((_DWORD)v8)
    {
      v6 = v8;
LABEL_41:
      APSLogErrorAt();
      goto LABEL_42;
    }
  }
  if (symptom_new()
    && !symptom_set_qualifier()
    && !symptom_set_qualifier()
    && !symptom_set_additional_qualifier())
  {
    v3 = healthReporter_setStringSymptomQualifier();
    if ((_DWORD)v3)
    {
      v6 = v3;
      goto LABEL_41;
    }
    v4 = healthReporter_setStringSymptomQualifier();
    if ((_DWORD)v4)
    {
      v6 = v4;
      goto LABEL_41;
    }
    if (!strcmp((const char *)(a1 + 76), "awdl0"))
    {
      PeerMACAddress = GetPeerMACAddress();
      if ((_DWORD)PeerMACAddress)
      {
        v6 = PeerMACAddress;
        APSLogErrorAt();
        if (gLogCategory_APTSessionHealthReporter <= 60
          && (gLogCategory_APTSessionHealthReporter != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_41;
      }
      if (symptom_set_additional_qualifier())
      {
        APSLogErrorAt();
        v9 = APSSignalErrorAt();
        if ((_DWORD)v9)
        {
          v6 = v9;
          goto LABEL_41;
        }
      }
    }
    if (!symptom_send())
    {
      if (gLogCategory_APTSessionHealthReporter <= 50
        && (gLogCategory_APTSessionHealthReporter != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  APSLogErrorAt();
  v6 = APSSignalErrorAt();
  if ((_DWORD)v6)
    goto LABEL_42;
  return v6;
}

void healthReporter_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (gLogCategory_APTSessionHealthReporter <= 30
    && (gLogCategory_APTSessionHealthReporter != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(const void **)(a1 + 56);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

uint64_t healthReporter_setStringSymptomQualifier()
{
  const char *CStringPtrAndBufferToFree;
  uint64_t v1;

  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  if (!CStringPtrAndBufferToFree
    || (strlen(CStringPtrAndBufferToFree), symptom_set_additional_qualifier()))
  {
    APSLogErrorAt();
    v1 = APSSignalErrorAt();
  }
  else
  {
    v1 = 0;
  }
  free(0);
  return v1;
}

uint64_t __healthReporter_getSymptomReporter_block_invoke()
{
  uint64_t result;

  result = symptom_framework_init();
  healthReporter_getSymptomReporter_symptomReporter = result;
  return result;
}

uint64_t APBrokerKeychainUtilsStoreAuthToken(__CFString *a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  int KeychainItemID;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __CFString *v20;
  __CFString *v21;
  CFTypeRef cf;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v23 = 0;
  if (!a1 || !a2 || !a3 || !a4)
  {
    APSLogErrorAt();
    v13 = (void *)MEMORY[0x1E0CB35C8];
    v14 = *MEMORY[0x1E0CB2F90];
    v15 = -6705;
LABEL_23:
    v16 = objc_msgSend(v13, "errorWithDomain:code:userInfo:", v14, v15, 0, v18, v19, v20, v21);
    v9 = 0;
LABEL_24:
    v11 = 0;
LABEL_25:
    v23 = v16;
    goto LABEL_14;
  }
  if (gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    v20 = a1;
    v21 = a2;
    v18 = a3;
    v19 = a4;
    LogPrintF();
  }
  KeychainItemID = APBrokerKeychainUtilsCreateKeychainItemID(a1, a2, (uint64_t *)&cf);
  if (KeychainItemID)
  {
    v17 = KeychainItemID;
    APSLogErrorAt();
    v13 = (void *)MEMORY[0x1E0CB35C8];
    v14 = *MEMORY[0x1E0CB2F90];
    v15 = v17;
    goto LABEL_23;
  }
  v9 = (void *)objc_opt_new();
  if (!v9)
  {
    APSLogErrorAt();
    v16 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -6728, 0);
    goto LABEL_24;
  }
  v10 = (void *)objc_opt_new();
  v11 = v10;
  if (!v10)
  {
    APSLogErrorAt();
    v16 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -6728, 0);
    goto LABEL_25;
  }
  objc_msgSend(v10, "setAccessGroup:", CFSTR("com.apple.airplay"));
  objc_msgSend(v11, "setAccessibleType:", 2);
  objc_msgSend(v11, "setIdentifier:", cf);
  v24[0] = CFSTR("authToken");
  v24[1] = CFSTR("authTokenTTL");
  v25[0] = a3;
  v25[1] = a4;
  objc_msgSend(v11, "setMetadata:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 2));
  objc_msgSend(v11, "setType:", CFSTR("APBroker"));
  objc_msgSend(v9, "addOrUpdateOrReAddItem:flags:logCategory:logLabel:error:", v11, 0, &gLogCategory_APBrokerKeychainUtils, CFSTR("Broker auth token"), &v23);
  if (NSErrorToOSStatus())
    APSLogErrorAt();
LABEL_14:

  if (cf)
    CFRelease(cf);
  if (v23
    && gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return NSErrorToOSStatus();
}

uint64_t APBrokerKeychainUtilsCreateKeychainItemID(__CFString *a1, __CFString *a2, uint64_t *a3)
{
  unsigned int v6;

  v6 = 0;
  if (_IsValidKeychainItemIDComponent(a1) && _IsValidKeychainItemIDComponent(a2))
  {
    *a3 = CFStringCreateF();
  }
  else
  {
    APSLogErrorAt();
    return -6705;
  }
  return v6;
}

uint64_t APBrokerKeychainUtilsCopyAuthToken(__CFString *a1, __CFString *a2, CFTypeRef *a3)
{
  int KeychainItemID;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const void *v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __CFString *v18;
  __CFString *v19;
  CFTypeRef cf;
  uint64_t v21;

  cf = 0;
  v21 = 0;
  if (gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    v18 = a1;
    v19 = a2;
    LogPrintF();
  }
  if (!a1)
  {
    APSLogErrorAt();
    v13 = (void *)MEMORY[0x1E0CB35C8];
    v14 = *MEMORY[0x1E0CB2F90];
    v15 = -6705;
LABEL_25:
    v17 = objc_msgSend(v13, "errorWithDomain:code:userInfo:", v14, v15, 0, v18, v19);
    v7 = 0;
LABEL_27:
    v9 = 0;
LABEL_29:
    v10 = 0;
    v21 = v17;
    goto LABEL_15;
  }
  KeychainItemID = APBrokerKeychainUtilsCreateKeychainItemID(a1, a2, (uint64_t *)&cf);
  if (KeychainItemID)
  {
    v16 = KeychainItemID;
    APSLogErrorAt();
    v13 = (void *)MEMORY[0x1E0CB35C8];
    v14 = *MEMORY[0x1E0CB2F90];
    v15 = v16;
    goto LABEL_25;
  }
  v7 = (void *)objc_opt_new();
  if (!v7)
  {
    APSLogErrorAt();
    v17 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -6728, 0);
    goto LABEL_27;
  }
  v8 = (void *)objc_opt_new();
  v9 = v8;
  if (!v8)
  {
    APSLogErrorAt();
    v17 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -6728, 0);
    goto LABEL_29;
  }
  objc_msgSend(v8, "setAccessGroup:", CFSTR("com.apple.airplay"));
  objc_msgSend(v9, "setIdentifier:", cf);
  objc_msgSend(v9, "setType:", CFSTR("APBroker"));
  v10 = (void *)objc_msgSend(v7, "copyItemMatchingItem:flags:error:", v9, 0, &v21);
  if (!NSErrorToOSStatus())
  {
    v11 = (const void *)objc_msgSend((id)objc_msgSend(v10, "metadata"), "objectForKeyedSubscript:", CFSTR("authToken"));
    if (gLogCategory_APBrokerKeychainUtils <= 30
      && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *a3 = CFRetain(v11);
  }
LABEL_15:

  if (cf)
    CFRelease(cf);
  if (v21
    && gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return NSErrorToOSStatus();
}

uint64_t APBrokerKeychainUtilsCopyAllAuthTokens(CFTypeRef a1, __CFArray **a2)
{
  __CFArray *Mutable;
  void *v5;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef cf2;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  if (gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    v19 = a1;
    LogPrintF();
  }
  if (!a1 || !a2)
  {
    APSLogErrorAt();
    v18 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -6705, 0);
    Mutable = 0;
LABEL_39:
    v8 = 0;
    v5 = 0;
LABEL_41:
    v25 = v18;
    goto LABEL_29;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    APSLogErrorAt();
    v18 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -6728, 0);
    goto LABEL_39;
  }
  v5 = (void *)objc_opt_new();
  if (!v5)
  {
    APSLogErrorAt();
    v18 = objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -6728, 0);
    v8 = 0;
    goto LABEL_41;
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "date"), "timeIntervalSinceReferenceDate");
  v7 = v6;
  v8 = _CopyAllAuthTokenKeychainItems(v5, &v25);
  if (!NSErrorToOSStatus())
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v22 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v13, "metadata", v19), "objectForKeyedSubscript:", CFSTR("authTokenTTL")), "doubleValue");
          v15 = v14;
          objc_msgSend((id)objc_msgSend(v13, "dateModified"), "timeIntervalSinceReferenceDate");
          cf2 = 0;
          if (v7 - v16 < v15)
          {
            APBrokerKeychainUtilsCopyInfoFromKeychainItemID((CFStringRef)objc_msgSend(v13, "identifier"), &cf2, 0);
            if (cf2 == a1)
              goto LABEL_19;
            if (!cf2)
              continue;
            if (CFEqual(a1, cf2))
LABEL_19:
              CFArrayAppendValue(Mutable, (const void *)objc_msgSend((id)objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", CFSTR("authToken")));
            if (cf2)
              CFRelease(cf2);
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      }
      while (v10);
    }
    if (gLogCategory_APBrokerKeychainUtils <= 30
      && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *a2 = Mutable;
    Mutable = 0;
  }
LABEL_29:

  if (Mutable)
    CFRelease(Mutable);
  if (v25
    && gLogCategory_APBrokerKeychainUtils <= 30
    && (gLogCategory_APBrokerKeychainUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return NSErrorToOSStatus();
}

void APBrokerKeychainUtilsCopyInfoFromKeychainItemID(CFStringRef theString, _QWORD *a2, _QWORD *a3)
{
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v6;
  __CFString *v7;
  __CFString *v8;
  const void *ValueAtIndex;
  const void *v10;
  CFTypeRef v11;
  CFTypeRef v12;

  if (theString)
  {
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, CFSTR("\x1C"));
    v6 = ArrayBySeparatingStrings;
    if (ArrayBySeparatingStrings
      && CFArrayGetCount(ArrayBySeparatingStrings) == 2
      && (v7 = (__CFString *)CFArrayGetValueAtIndex(v6, 0), _IsValidKeychainItemIDComponent(v7))
      && (v8 = (__CFString *)CFArrayGetValueAtIndex(v6, 1), _IsValidKeychainItemIDComponent(v8)))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
      v10 = CFArrayGetValueAtIndex(v6, 1);
    }
    else
    {
      APSLogErrorAt();
      ValueAtIndex = 0;
      v10 = 0;
    }
  }
  else
  {
    ValueAtIndex = 0;
    v10 = 0;
    v6 = 0;
  }
  if (a2)
  {
    if (ValueAtIndex)
      v11 = CFRetain(ValueAtIndex);
    else
      v11 = 0;
    *a2 = v11;
  }
  if (a3)
  {
    if (v10)
      v12 = CFRetain(v10);
    else
      v12 = 0;
    *a3 = v12;
  }
  if (v6)
    CFRelease(v6);
}

uint64_t _IsValidKeychainItemIDComponent(__CFString *a1)
{
  if (a1
    && CFStringGetLength(a1) >= 1
    && !-[__CFString containsString:](a1, "containsString:", CFSTR("\x1C")))
  {
    return 1;
  }
  APSLogErrorAt();
  return 0;
}

uint64_t APTransportConnectionHTTPCreate(uint64_t a1, const void *a2, int a3, int a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t DerivedStorage;
  uint64_t Int64;
  uint64_t v12;
  const void *v13;
  CFTypeRef v14;
  CFAllocatorRef *v15;
  CFStringRef v16;
  uint64_t v17;
  const void *TypedValue;
  uint64_t v19;
  uint64_t v20;
  dispatch_queue_t v21;
  dispatch_queue_t v22;
  uint64_t v23;
  uint64_t v24;
  CFMutableDictionaryRef Mutable;
  CMTime v27;
  CFTypeRef cf;
  unsigned int v29;
  CMTime time;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  cf = 0;
  if (!a6)
  {
    APSLogErrorAt();
    v29 = -12780;
    goto LABEL_60;
  }
  APTransportConnectionGetClassID();
  v29 = CMDerivedObjectCreate();
  if (v29)
  {
    APSLogErrorAt();
    goto LABEL_60;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Int64 = CFDictionaryGetInt64();
  *(_BYTE *)(DerivedStorage + 224) = Int64 != 0;
  if (v29)
  {
    *(_BYTE *)(DerivedStorage + 224) = 0;
    v29 = 0;
  }
  else if (Int64)
  {
    *(_QWORD *)(DerivedStorage + 240) = 0;
    *(_DWORD *)(DerivedStorage + 248) = -1;
  }
  *(_BYTE *)(DerivedStorage + 256) = CFDictionaryGetInt64() != 0;
  if (v29)
  {
    *(_BYTE *)(DerivedStorage + 256) = 0;
    v29 = 0;
  }
  CFDictionaryGetTypeID();
  if (!CFDictionaryGetTypedValue()
    || (*(_BYTE *)(DerivedStorage + 56) = CFDictionaryGetInt64() != 0,
        v12 = CFDictionaryGetInt64(),
        *(_BYTE *)(DerivedStorage + 57) = v12 != 0,
        !v12))
  {
LABEL_13:
    if (IsAppleInternalBuild()
      && APSSettingsGetBooleanIfPresent()
      && gLogCategory_APTransportConnectionHTTP <= 50
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v15 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (*(_BYTE *)(DerivedStorage + 256) && CFDictionaryGetInt64())
    {
      v16 = CFStringCreateWithFormat(*v15, 0, CFSTR("%@.%@(%p)"), CFSTR("com.apple.APTransportConnectionHTTP"), a2, cf);
      v17 = APSPowerAssertionCreate();
      *(_QWORD *)(DerivedStorage + 232) = v17;
      if (!v17)
        goto LABEL_70;
    }
    else
    {
      v16 = 0;
    }
    *(_DWORD *)(DerivedStorage + 200) = CFDictionaryGetInt64();
    if (v29)
    {
      *(_DWORD *)(DerivedStorage + 200) = 0;
      v29 = 0;
    }
    CFUUIDGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    *(_QWORD *)(DerivedStorage + 208) = TypedValue;
    if (TypedValue)
      CFRetain(TypedValue);
    CMTimeMakeWithSeconds(&time, 30.0, 1000);
    *(CMTime *)(DerivedStorage + 440) = time;
    if (FigCFDictionaryGetCMTimeIfPresent()
      && gLogCategory_APTransportConnectionHTTP <= 40
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      time = *(CMTime *)(DerivedStorage + 440);
      CMTimeGetSeconds(&time);
      LogPrintF();
    }
    *(_QWORD *)(DerivedStorage + 24) = a2;
    if (a2)
      CFRetain(a2);
    *(_DWORD *)(DerivedStorage + 48) = a3;
    SNPrintF();
    if (a4)
      v19 = FigDispatchQueueCreateWithPriority();
    else
      v19 = (uint64_t)dispatch_queue_create((const char *)&time, 0);
    *(_QWORD *)(DerivedStorage + 8) = v19;
    if (!v19
      || ((SNPrintF(), !a4)
        ? (v20 = (uint64_t)dispatch_queue_create((const char *)&time, 0))
        : (v20 = FigDispatchQueueCreateWithPriority()),
          (*(_QWORD *)(DerivedStorage + 16) = v20) == 0
       || (SNPrintF(),
           v21 = dispatch_queue_create((const char *)&time, 0),
           (*(_QWORD *)(DerivedStorage + 80) = v21) == 0)))
    {
      APSLogErrorAt();
      v29 = -72323;
      APSSignalErrorAt();
      goto LABEL_58;
    }
    SNPrintF();
    v22 = dispatch_queue_create((const char *)&time, 0);
    *(_QWORD *)(DerivedStorage + 40) = v22;
    if (!v22
      || *(_BYTE *)(DerivedStorage + 256)
      && (v23 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 272) = v23) == 0)
      || (v24 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*(_QWORD *)(DerivedStorage + 216) = v24) == 0))
    {
      APSLogErrorAt();
      v29 = APSSignalErrorAt();
LABEL_58:
      if (v16)
        CFRelease(v16);
      goto LABEL_60;
    }
    Mutable = CFDictionaryCreateMutable(*v15, 0, 0, MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(DerivedStorage + 96) = Mutable;
    if (Mutable)
    {
      *(_DWORD *)(DerivedStorage + 108) = 0;
      CMTimeMake(&v27, 2000, 1000);
      *(CMTime *)(DerivedStorage + 400) = v27;
      if (gLogCategory_APTransportConnectionHTTP <= 50
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionHTTP, (int *)cf, (uint64_t *)(DerivedStorage + 496), 3);
      *a6 = cf;
      cf = 0;
      goto LABEL_58;
    }
LABEL_70:
    APSLogErrorAt();
    v29 = -72323;
    goto LABEL_58;
  }
  CFStringGetTypeID();
  v13 = (const void *)CFDictionaryGetTypedValue();
  if (v13)
  {
    v14 = CFRetain(v13);
    *(_QWORD *)(DerivedStorage + 64) = v14;
    if (v14)
      goto LABEL_13;
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  APSLogErrorAt();
  v29 = -72322;
  if (gLogCategory_APTransportConnectionHTTP <= 90
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_60:
  if (cf)
    CFRelease(cf);
  return v29;
}

uint64_t httpconnection_Invalidate(uint64_t a1)
{
  dispatch_queue_t *DerivedStorage;
  dispatch_queue_t *v3;
  _QWORD context[2];

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = 1;
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = DerivedStorage;
    if (gLogCategory_APTransportConnectionHTTP <= 30
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_sync_f(v3[1], context, (dispatch_function_t)httpconnection_deferInvalidate);
  }
  return 0;
}

void httpconnection_Finalize(void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  httpconnection_invalidateInternal(a1, 0);
  v3 = *(NSObject **)(DerivedStorage + 8);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v5 = *(NSObject **)(DerivedStorage + 40);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 232);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 232) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 24);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 208);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 96);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v10 = *(NSObject **)(DerivedStorage + 80);
  if (v10)
  {
    dispatch_release(v10);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 216);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 496);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 496) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 64);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 72);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  if (*(_BYTE *)(DerivedStorage + 256))
  {
    if (*(_QWORD *)(DerivedStorage + 272))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(DerivedStorage + 272) = 0;
    }
  }
}

__CFString *httpconnection_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportConnectionHTTP %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t httpconnection_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t httpconnection_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD v8[8];
  _QWORD v9[3];
  int v10;

  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v10 = 0;
  v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __httpconnection_SetProperty_block_invoke;
  v8[3] = &unk_1E82554B0;
  v8[4] = v9;
  v8[5] = a1;
  v8[6] = a2;
  v8[7] = a3;
  dispatch_sync(v6, v8);
  _Block_object_dispose(v9, 8);
  return 0;
}

void httpconnection_deferInvalidate(uint64_t a1)
{
  httpconnection_invalidateInternal(*(void **)a1, *(unsigned __int8 *)(a1 + 8));
}

void httpconnection_invalidateInternal(void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v14;
  int v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  NSObject *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  void *v25;
  const void *v26;
  const void *v27;
  NSObject *v28;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)DerivedStorage = 1;
  *(_DWORD *)(DerivedStorage + 108) = 0;
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = v5;
  v7 = (uint64_t *)(v5 + 240);
  if (*(_BYTE *)(v5 + 224))
  {
    v8 = *(_DWORD *)(v5 + 248);
    if ((v8 & 0x80000000) == 0)
    {
      if (close(v8) && *__error())
        __error();
      *(_DWORD *)(v6 + 248) = -1;
    }
    if (*v7)
    {
      APTConnectionListenerInvalidate(*v7);
      v9 = (const void *)*v7;
      if (*v7)
      {
LABEL_13:
        CFRelease(v9);
        *v7 = 0;
      }
    }
  }
  else
  {
    if (*v7)
    {
      AsyncConnection_Release();
      *v7 = 0;
    }
    v7 = (uint64_t *)(v6 + 248);
    v9 = *(const void **)(v6 + 248);
    if (v9)
      goto LABEL_13;
  }
  v10 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!*(_QWORD *)(v10 + 72))
    goto LABEL_29;
  v11 = v10;
  APTransportGetSharedTransport();
  CMBaseObject = FigTransportGetCMBaseObject();
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v13)
  {
    v15 = -12782;
LABEL_25:
    APSLogErrorAt();
    goto LABEL_30;
  }
  v14 = v13(CMBaseObject, CFSTR("TrafficRegistrar"), *MEMORY[0x1E0C9AE00], &cf);
  if (v14)
  {
    v15 = v14;
    goto LABEL_25;
  }
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v16 = *(const void **)(v11 + 72);
  if (v16)
  {
    CFRelease(v16);
    v15 = 0;
    *(_QWORD *)(v11 + 72) = 0;
    goto LABEL_30;
  }
LABEL_29:
  v15 = 0;
LABEL_30:
  if (cf)
    CFRelease(cf);
  if (v15
    && gLogCategory_APTransportConnectionHTTP <= 90
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v17 = *(_QWORD *)(v6 + 264);
  if (*(_BYTE *)(v6 + 256))
  {
    if (v17)
    {
      HTTPConnectionStopAsync();
      v18 = *(const void **)(v6 + 264);
      if (v18)
      {
        CFRelease(v18);
        *(_QWORD *)(v6 + 264) = 0;
      }
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(v6 + 272));
    v19 = *(NSObject **)(v6 + 280);
    if (v19)
    {
      dispatch_release(v19);
      *(_QWORD *)(v6 + 280) = 0;
    }
    v20 = *(const void **)(v6 + 288);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(v6 + 288) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 272));
  }
  else
  {
    if (v17)
    {
      HTTPClientInvalidate();
      CFRelease(*(CFTypeRef *)(v6 + 264));
      *(_QWORD *)(v6 + 264) = 0;
    }
    v21 = *(const void **)(v6 + 280);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v6 + 280) = 0;
    }
  }
  if (a2)
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 80), a1, (dispatch_function_t)httpconnection_clearCallbackState);
  else
    httpconnection_clearCallbackState(a1);
  v22 = *(const void **)(DerivedStorage + 128);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v23 = *(const void **)(DerivedStorage + 352);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(DerivedStorage + 352) = 0;
  }
  v24 = *(const void **)(DerivedStorage + 360);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(DerivedStorage + 360) = 0;
  }
  v25 = *(void **)(DerivedStorage + 32);
  if (v25)
  {
    free(v25);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 112);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v27 = *(const void **)(DerivedStorage + 120);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v28 = *(NSObject **)(DerivedStorage + 424);
  if (v28)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 424));
    dispatch_release(v28);
    *(_QWORD *)(DerivedStorage + 424) = 0;
  }
}

void httpconnection_clearCallbackState(void *a1)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const __CFDictionary **)(DerivedStorage + 96);
  if (v3)
  {
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)httpconnection_releaseCallbackQueues, a1);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 96));
  }
}

void httpconnection_releaseCallbackQueues(int a1, CFArrayRef theArray)
{
  NSObject *ValueAtIndex;

  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 2);
  dispatch_release(ValueAtIndex);
}

uint64_t httpconnection_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t Int64;
  uint64_t v9;
  uint64_t v10;
  uint64_t ListeningPort;
  _BYTE v13[28];
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("LocalInterfaceName")))
  {
    if (*(_DWORD *)(DerivedStorage + 108) != 5)
    {
      APSLogErrorAt();
      APSSignalErrorAt();
      return 0;
    }
    Int64 = (uint64_t)CFStringCreateWithCString(a3, (const char *)(DerivedStorage + 310), 0x8000100u);
    if (!Int64)
    {
      v9 = 4294894973;
LABEL_43:
      APSLogErrorAt();
      return v9;
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, CFSTR("LocalMACAddress")))
  {
    Int64 = (uint64_t)CFDataCreate(a3, (const UInt8 *)(DerivedStorage + 304), 6);
    if (!Int64)
    {
      v9 = 4294894973;
      goto LABEL_43;
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, CFSTR("LocalNetworkIPAddress")))
  {
    Int64 = (uint64_t)CFDataCreate(a3, (const UInt8 *)(DerivedStorage + 136), 28);
    if (!Int64)
    {
      v9 = 4294894973;
      goto LABEL_43;
    }
    goto LABEL_16;
  }
  if (!CFEqual(a2, CFSTR("LocalNetworkPort")))
  {
    if (CFEqual(a2, CFSTR("RemoteNetworkIPAddress")))
    {
      v14 = 0;
      *(_OWORD *)v13 = *(_OWORD *)(DerivedStorage + 164);
      *(_OWORD *)&v13[12] = *(_OWORD *)(DerivedStorage + 176);
      v9 = APSNetworkAddressCreateWithSocketAddr();
      if ((_DWORD)v9)
        goto LABEL_43;
      APSNetworkAddressSetPort();
      *a4 = v14;
      return v9;
    }
    if (CFEqual(a2, CFSTR("BoundInterfaceIndex")))
    {
      Int64 = CFNumberCreateInt64();
      if (!Int64)
      {
        v9 = 4294894973;
        goto LABEL_43;
      }
    }
    else if (CFEqual(a2, CFSTR("RemoteNetworkPort")))
    {
      Int64 = CFNumberCreateInt64();
      if (!Int64)
      {
        v9 = 4294894973;
        goto LABEL_43;
      }
    }
    else if (CFEqual(a2, CFSTR("NetTransportType")))
    {
      v9 = 4294894973;
      if (*(_DWORD *)(DerivedStorage + 108) != 5)
        return 4294894976;
      Int64 = (uint64_t)CFNumberCreate(a3, kCFNumberIntType, (const void *)(DerivedStorage + 436));
      if (!Int64)
        goto LABEL_43;
    }
    else if (CFEqual(a2, CFSTR("AllMsgsRoundTripTotalTimeMs")))
    {
      Int64 = FigCFNumberCreateUInt64();
      if (!Int64)
      {
        v9 = 4294894973;
        goto LABEL_43;
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("AllMsgsRecProcessingTotalTimeMs")))
        return 4294954512;
      Int64 = FigCFNumberCreateUInt64();
      if (!Int64)
      {
        v9 = 4294894973;
        goto LABEL_43;
      }
    }
LABEL_16:
    v9 = 0;
    *a4 = Int64;
    return v9;
  }
  if (!*(_BYTE *)(DerivedStorage + 224))
  {
    APSLogErrorAt();
    return 4294894975;
  }
  v10 = *(_QWORD *)(DerivedStorage + 240);
  if (v10)
  {
    *(_DWORD *)v13 = -1;
    ListeningPort = APTConnectionListenerGetListeningPort(v10, v13);
    if ((_DWORD)ListeningPort)
    {
      v9 = ListeningPort;
      goto LABEL_43;
    }
    Int64 = (uint64_t)CFNumberCreate(a3, kCFNumberIntType, v13);
    if (!Int64)
    {
      v9 = 4294894973;
      goto LABEL_43;
    }
    goto LABEL_16;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

uint64_t httpconnection_Resume(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)httpconnection_resumeInternal);
  return 0;
}

uint64_t httpconnection_AddEventCallback(const void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && a4)
  {
    if (a1)
      CFRetain(a1);
    dispatch_retain(a4);
    APSDispatchAsyncFHelper();
  }
  else
  {
    APSLogErrorAt();
  }
  return 0;
}

uint64_t httpconnection_RemoveEventCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _QWORD v6[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6[0] = a1;
  v6[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 80), v6, (dispatch_function_t)httpconnection_removeEventCallbackInternal);
  return 0;
}

uint64_t httpconnection_AcquirePackage(const void *a1, _QWORD *a2)
{
  CFAllocatorRef v3;
  uint64_t v4;

  v3 = CFGetAllocator(a1);
  v4 = APTransportPackageHTTPCreate((uint64_t)v3, a2);
  if ((_DWORD)v4)
  {
    APSLogErrorAt();
  }
  else if (gLogCategory_APTransportConnectionHTTP <= 30
         && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v4;
}

uint64_t httpconnection_RelinquishPackage(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t httpconnection_SendPackage(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  unsigned int (*v5)(const void *);
  uint64_t (*v6)(const void *);
  int v7;
  NSObject *v8;
  CFTypeRef v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(unsigned int (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v5 && v5(a2) == 1919970425)
  {
    v6 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (v6)
      v7 = v6(a2);
    else
      v7 = 0;
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 272));
    v8 = *(NSObject **)(DerivedStorage + 280);
    if (v8 && *(_DWORD *)(DerivedStorage + 296) == v7)
    {
      if (a2)
      {
        v9 = CFRetain(a2);
        v8 = *(NSObject **)(DerivedStorage + 280);
      }
      else
      {
        v9 = 0;
      }
      *(_QWORD *)(DerivedStorage + 288) = v9;
      dispatch_semaphore_signal(v8);
    }
    else if (gLogCategory_APTransportConnectionHTTP <= 50
           && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 272));
  }
  else
  {
    CFRetain(a1);
    CFRetain(a2);
    APSDispatchAsyncFHelper();
  }
  return 0;
}

uint64_t httpconnection_ConfigureEncryption(const void *a1, const void *a2, const void *a3)
{
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v6 = 4294894974;
LABEL_7:
    APSLogErrorAt();
    return v6;
  }
  if (!a3)
  {
    v6 = 4294894974;
    goto LABEL_7;
  }
  CFRetain(a1);
  CFRetain(a2);
  CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

void httpconnection_resumeInternal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  const void *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  char *v18;
  int Address;
  CFStringRef v20;
  CFStringRef v21;
  uint64_t v22;
  int v23;
  _QWORD v24[5];
  char v25;
  unsigned __int8 v26;
  char v27;
  char cStr[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionHTTP <= 30
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 104))
  {
    if (gLogCategory_APTransportConnectionHTTP <= 30
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_44;
  }
  *(_BYTE *)(DerivedStorage + 104) = 1;
  *(_DWORD *)(DerivedStorage + 108) = 0;
  if (!*(_BYTE *)(DerivedStorage + 224))
  {
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = v8;
    v27 = 0;
    cStr[0] = 0;
    if (*(_BYTE *)(v8 + 165) && *(_DWORD *)(v8 + 192))
    {
      SockAddrSetPort();
      v10 = SockAddrToString();
      if (!v10)
      {
        if (gLogCategory_APTransportConnectionHTTP <= 40
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
LABEL_35:
          LogPrintF();
        }
LABEL_58:
        APSLogErrorAt();
        v23 = APSSignalErrorAt();
        v7 = v23;
        if (!v23)
          goto LABEL_44;
        goto LABEL_65;
      }
      v7 = v10;
    }
    else
    {
      if (!*(_QWORD *)(v8 + 248))
      {
        if (gLogCategory_APTransportConnectionHTTP <= 90
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_35;
        }
        goto LABEL_58;
      }
      v26 = 0;
      v16 = *(_DWORD *)(v8 + 48);
      if ((v16 & 3) != 0)
        v17 = 1;
      else
        v17 = (v16 >> 2) & 2;
      if (CFPrefs_GetInt64())
        v18 = &v27;
      else
        v18 = 0;
      Address = APTransportDeviceGetAddress(*(_QWORD *)(v9 + 248), v17, 0, cStr, 256, (char *)&v26, (uint64_t)v18);
      if (!Address)
      {
        if (gLogCategory_APTransportConnectionHTTP <= 40
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
        if (v20)
        {
          v21 = v20;
          v22 = *(_QWORD *)(v9 + 248);
          v24[0] = MEMORY[0x1E0C809B0];
          v24[1] = 0x40000000;
          v24[2] = __httpconnection_startConnecting_block_invoke;
          v24[3] = &__block_descriptor_tmp_62;
          v24[4] = v9;
          v25 = v27;
          APTransportDeviceResolveAddress(v22, (uint64_t)v21, v26, (uint64_t)a1, (uint64_t)v24);
          CFRelease(v21);
          goto LABEL_44;
        }
        APSLogErrorAt();
        v7 = -6728;
        goto LABEL_65;
      }
      v7 = Address;
    }
    APSLogErrorAt();
    goto LABEL_65;
  }
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(_DWORD *)(v3 + 248);
  if (v4 != -1)
  {
    v5 = v3;
    v6 = httpconnection_handleConnectionEstablished((uint64_t)a1, v4);
    *(_DWORD *)(v5 + 248) = -1;
    if (!v6)
      goto LABEL_44;
    v7 = v6;
    goto LABEL_57;
  }
  v11 = (uint64_t *)CMBaseObjectGetDerivedStorage();
  *(_QWORD *)cStr = 0;
  if (v11[30])
  {
    v7 = 0;
  }
  else
  {
    v12 = v11;
    v13 = (const void *)v11[27];
    v14 = APTConnectionListenerCreate(0, -1, (uint64_t)httpconnection_handleListenerConnected, (uint64_t)v13, (uint64_t)httpconnection_handleListenerInvalidated, (uint64_t)v13, v11[1], cStr);
    if (v14)
    {
      v7 = v14;
    }
    else
    {
      v15 = APTConnectionListenerResume(*(uint64_t *)cStr);
      if (!v15)
      {
        if (v13)
          CFRetain(v13);
        v12[30] = *(_QWORD *)cStr;
        goto LABEL_44;
      }
      v7 = v15;
    }
    APSLogErrorAt();
  }
  if (*(_QWORD *)cStr)
    CFRelease(*(CFTypeRef *)cStr);
  if (v7)
  {
LABEL_57:
    APSLogErrorAt();
LABEL_65:
    APSLogErrorAt();
    httpconnection_handleConnectionFailure(a1, v7);
  }
LABEL_44:
  if (a1)
    CFRelease(a1);
}

void httpconnection_handleConnectionFailure(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  BOOL v5;
  CFNumberRef v6;
  int valuePtr;

  valuePtr = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    v5 = 1;
  else
    v5 = a2 == 0;
  if (!v5)
  {
    *(_DWORD *)(DerivedStorage + 108) = 4;
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    httpconnection_callEventCallbacks(a1, 4, v6, 0);
    if (v6)
      CFRelease(v6);
  }
}

void __httpconnection_startConnecting_block_invoke(uint64_t a1, const void *a2, int a3, int a4, CFTypeRef cf, int a6)
{
  uint64_t v11;
  NSObject *v12;
  _QWORD block[7];
  int v14;
  int v15;
  char v16;

  if (a6)
  {
    if (gLogCategory_APTransportConnectionHTTP <= 90
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
LABEL_7:
      LogPrintF();
    }
  }
  else if (gLogCategory_APTransportConnectionHTTP <= 50
         && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_7;
  }
  CFRetain(cf);
  if (a2)
    CFRetain(a2);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(NSObject **)(v11 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __httpconnection_startConnecting_block_invoke_2;
  block[3] = &__block_descriptor_tmp_60;
  block[4] = a2;
  block[5] = v11;
  block[6] = cf;
  v14 = a4;
  v15 = a3;
  v16 = *(_BYTE *)(a1 + 40);
  dispatch_async(v12, block);
}

void __httpconnection_startConnecting_block_invoke_2(uint64_t a1)
{
  unsigned int v2;
  _BYTE *CStringPtrAndBufferToFree;
  int v4;
  const void *v5;
  int v6;

  v2 = *(_DWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 32))
  {
    CStringPtrAndBufferToFree = (_BYTE *)FigCFStringGetCStringPtrAndBufferToFree();
    if (!v2)
      v2 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 192);
  }
  else
  {
    CStringPtrAndBufferToFree = 0;
  }
  v4 = httpconnection_connect(*(_QWORD *)(a1 + 48), CStringPtrAndBufferToFree, *(_DWORD *)(a1 + 60), v2, *(unsigned __int8 *)(a1 + 64));
  if (v4)
  {
    v6 = v4;
    APSLogErrorAt();
    httpconnection_handleConnectionFailure(*(const void **)(a1 + 48), v6);
  }
  free(0);
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

uint64_t httpconnection_connect(uint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  double Seconds;
  int v12;
  int v13;
  int v14;
  int v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  CMTime time;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  uint64_t v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = DerivedStorage;
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  if (!a3)
    a3 = *(_DWORD *)(DerivedStorage + 196);
  if (*(_BYTE *)DerivedStorage)
    return 0;
  if (!a2 || !*a2)
  {
    APSLogErrorAt();
    v18 = APSSignalErrorAt();
    if (!(_DWORD)v18)
      return v18;
    goto LABEL_34;
  }
  time = *(CMTime *)(DerivedStorage + 440);
  Seconds = CMTimeGetSeconds(&time);
  v12 = *(_DWORD *)(v10 + 48);
  if (v12 & 4 | a3)
    v13 = ((v12 & 0xB) != 0) | 8;
  else
    v13 = (v12 & 0xB) != 0;
  if ((v12 & 0x10) != 0)
  {
    if (gLogCategory_APTransportConnectionHTTP <= 30
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 |= 0x10u;
  }
  if (a5)
  {
    v13 |= 0x8Cu;
    if (gLogCategory_APTransportConnectionHTTP <= 50
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  if (*(_BYTE *)(v10 + 340))
    v14 = v13 | 0x1000;
  else
    v14 = v13;
  v15 = v14 | 0x400;
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v16 = CFRetain(*(CFTypeRef *)(v10 + 216));
  v17 = *(_QWORD *)(v10 + 8);
  memset(v28, 0, sizeof(v28));
  *(_QWORD *)&v26 = 0;
  v27 = 0u;
  *((_QWORD *)&v26 + 1) = 152;
  *(_QWORD *)&v21 = a2;
  v29 = a3;
  *((_QWORD *)&v21 + 1) = __PAIR64__(v15, a4);
  *(_QWORD *)&v22 = 1000000000 * (unint64_t)Seconds;
  *((_QWORD *)&v22 + 1) = -1;
  *(_QWORD *)&v23 = httpconnection_asyncConnectionProgressed;
  *((_QWORD *)&v23 + 1) = v16;
  *(_QWORD *)&v24 = httpconnection_asyncConnectionConnected;
  *((_QWORD *)&v24 + 1) = v16;
  *(_QWORD *)&v25 = v17;
  *((_QWORD *)&v25 + 1) = &gLogCategory_AsyncCnxAirPlayHTTP;
  *(_QWORD *)((char *)v28 + 12) = 0x10000007D0;
  v18 = AsyncConnection_ConnectEx();
  if ((_DWORD)v18)
  {
    APSLogErrorAt();
    if (v16)
      CFRelease(v16);
LABEL_34:
    if (gLogCategory_APTransportConnectionHTTP <= 90
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_QWORD *)(v10 + 240))
    {
      AsyncConnection_Release();
      *(_QWORD *)(v10 + 240) = 0;
    }
  }
  return v18;
}

void httpconnection_asyncConnectionProgressed(uint64_t a1, const char *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  int v9;
  CFTypeRef *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  int PeerMACAddress;
  uint64_t CMBaseObject;
  unsigned int (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v19;
  int v20;
  int v21;
  int v22;
  CFTypeRef v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  CFTypeRef cf;

  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4)
    return;
  v5 = (const void *)v4;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  switch((int)a1)
  {
    case 1:
      if (gLogCategory_APTransportConnectionHTTP > 40
        || gLogCategory_APTransportConnectionHTTP == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_29;
      }
      goto LABEL_14;
    case 2:
      if (gLogCategory_APTransportConnectionHTTP <= 40
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
LABEL_14:
        LogPrintF();
      }
LABEL_29:
      v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
      goto LABEL_30;
    case 3:
      v7 = DerivedStorage;
      if (gLogCategory_APTransportConnectionHTTP <= 50
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v8 = CMBaseObjectGetDerivedStorage();
      v9 = *(_DWORD *)(v8 + 48);
      v25 = 0;
      v24 = 0;
      v23 = 0;
      if (!*(_BYTE *)(v8 + 56))
      {
        if (gLogCategory_APTransportConnectionHTTP > 30
          || gLogCategory_APTransportConnectionHTTP == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_63;
        }
        goto LABEL_62;
      }
      v10 = (CFTypeRef *)(v8 + 72);
      if (*(_QWORD *)(v8 + 72))
        goto LABEL_63;
      if (*a2)
      {
        if ((v9 & 3) == 0)
        {
          v11 = *MEMORY[0x1E0C9AE00];
          goto LABEL_48;
        }
        if (gLogCategory_APTransportConnectionHTTP <= 30
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        PeerMACAddress = GetPeerMACAddress();
        if (!PeerMACAddress)
        {
          if (gLogCategory_APTransportConnectionHTTP <= 50
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v26 = 0;
          cf = 0;
          APTransportGetSharedTransport();
          v11 = *MEMORY[0x1E0C9AE00];
          CMBaseObject = FigTransportGetCMBaseObject();
          v16 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
          if (!v16
            || v16(CMBaseObject, CFSTR("WifiManagerClient"), v11, &cf)
            || APTransportWifiManagerClientGetPeerRSSI((uint64_t)cf, (uint64_t)&v24, (uint64_t)&v26))
          {
            APSLogErrorAt();
          }
          else if (gLogCategory_APTransportConnectionHTTP <= 50
                 && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (cf)
            CFRelease(cf);
LABEL_48:
          APTransportGetSharedTransport();
          v17 = FigTransportGetCMBaseObject();
          v18 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (!v18)
          {
            v21 = -12782;
            goto LABEL_54;
          }
          v19 = v18(v17, CFSTR("TrafficRegistrar"), v11, &v23);
          if (v19)
          {
            v21 = v19;
            goto LABEL_54;
          }
          if ((v9 & 3) != 0)
          {
            v20 = APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx(v23, (uint64_t)&v24, 1, v9 & 2, v10);
            if (v20)
            {
              v21 = v20;
LABEL_54:
              APSLogErrorAt();
LABEL_55:
              if (gLogCategory_APTransportConnectionHTTP <= 90
                && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              goto LABEL_64;
            }
          }
          else
          {
            v22 = APTransportTrafficRegistrarInfraTransactionCreate(v23, v10);
            if (v22)
            {
              v21 = v22;
              goto LABEL_54;
            }
          }
          if (gLogCategory_APTransportConnectionHTTP <= 50
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
LABEL_62:
            LogPrintF();
          }
LABEL_63:
          v21 = 0;
          goto LABEL_64;
        }
        v21 = PeerMACAddress;
        APSLogErrorAt();
        if (gLogCategory_APTransportConnectionHTTP <= 90)
        {
          if (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize())
            LogPrintF();
          goto LABEL_55;
        }
      }
      else
      {
        APSLogErrorAt();
        v21 = APSSignalErrorAt();
        if (v21)
          goto LABEL_55;
      }
LABEL_64:
      if (v23)
        CFRelease(v23);
      if (v21)
      {
        if (gLogCategory_APTransportConnectionHTTP <= 90
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_DWORD *)(v7 + 488) = v21;
        if (*(_QWORD *)(v7 + 240))
        {
          AsyncConnection_Release();
          *(_QWORD *)(v7 + 240) = 0;
        }
      }
      else
      {
        v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)a2, 28);
LABEL_30:
        v13 = v12;
        if (v12)
        {
          httpconnection_callEventCallbacks(v5, a1, v12, 0);
          CFRelease(v13);
        }
      }
LABEL_74:
      CFRelease(v5);
      return;
    case 4:
      if (gLogCategory_APTransportConnectionHTTP <= 50
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_74;
    default:
      goto LABEL_74;
  }
}

void httpconnection_asyncConnectionConnected(int a1, int a2, const void *a3)
{
  const void *v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  int v9;
  CFDataRef v10;
  int v11;
  int v12;
  socklen_t v13;
  sockaddr v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)&v14.sa_len = 0;
  *(_QWORD *)&v14.sa_data[6] = 0;
  v16 = 0;
  v15 = 0;
  v13 = 0;
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6)
  {
    v10 = 0;
    if (a1 < 0)
      goto LABEL_19;
    goto LABEL_16;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage;
  if (!a2 || (v9 = *(_DWORD *)(DerivedStorage + 488)) == 0)
    v9 = a2;
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_45;
  if (v9)
  {
    APSLogErrorAt();
LABEL_45:
    v10 = 0;
    goto LABEL_13;
  }
  v13 = 28;
  if (getpeername(a1, &v14, &v13))
    v10 = 0;
  else
    v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v14.sa_len, 28);
  v9 = httpconnection_handleConnectionEstablished((uint64_t)v6, a1);
  if (v9)
  {
    APSLogErrorAt();
  }
  else
  {
    *(_DWORD *)(v8 + 108) = 5;
    httpconnection_callEventCallbacks(v6, 5, v10, 0);
  }
  a1 = -1;
LABEL_13:
  if (*(_QWORD *)(v8 + 240))
  {
    AsyncConnection_Release();
    *(_QWORD *)(v8 + 240) = 0;
  }
  a2 = v9;
  if ((a1 & 0x80000000) == 0)
  {
LABEL_16:
    if (close(a1) && *__error())
      __error();
  }
LABEL_19:
  if (a2)
  {
    if (gLogCategory_APTransportConnectionHTTP <= 90
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v6)
    {
      if (a2 == 97)
        v11 = -71882;
      else
        v11 = a2;
      if (a2 == 13)
        v12 = -71880;
      else
        v12 = v11;
      httpconnection_handleConnectionFailure(v6, v12);
    }
  }
  else if (gLogCategory_APTransportConnectionHTTP <= 50
         && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v10)
    CFRelease(v10);
  if (v6)
    CFRelease(v6);
  CFRelease(a3);
}

_BYTE *httpconnection_callEventCallbacks(const void *a1, uint64_t a2, const void *a3, NSObject *a4)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3)
      CFRetain(a3);
    if (a1)
      CFRetain(a1);
    if (a4)
      dispatch_retain(a4);
    return (_BYTE *)APSDispatchAsyncFHelper();
  }
  return result;
}

void httpconnection_deferCallEventCallbackForGroupID(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFArray *TypedValue;
  const void *v4;
  NSObject *v5;
  _QWORD context[2];
  char v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  context[0] = a1;
  context[1] = &v7;
  if (*(_BYTE *)(a1 + 32))
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 96), (CFDictionaryApplierFunction)httpconnection_iterateOnEventCallbacks, context);
  }
  else
  {
    CFArrayGetTypeID();
    TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
    if (TypedValue)
      httpconnection_iterateOnEventCallbacks((int)TypedValue, TypedValue, (uint64_t)context);
  }
  if (!v7 && *(_QWORD *)(a1 + 24))
  {
    if (gLogCategory_APTransportConnectionHTTP <= 50
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 24));
  }
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v5 = *(NSObject **)(a1 + 24);
  if (v5)
    dispatch_release(v5);
}

uint64_t httpconnection_iterateOnEventCallbacks(int a1, CFArrayRef theArray, uint64_t a3)
{
  uint64_t result;

  CFArrayGetValueAtIndex(theArray, 2);
  CFArrayGetValueAtIndex(theArray, 1);
  CFArrayGetValueAtIndex(theArray, 0);
  result = APSDispatchSyncTask();
  if (!(_DWORD)result)
    **(_BYTE **)(a3 + 8) = 1;
  return result;
}

uint64_t httpconnection_callEventCallback(unsigned int *a1)
{
  return (*((uint64_t (**)(_QWORD, _QWORD, _QWORD))a1 + 2))(*a1, *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 3));
}

uint64_t httpconnection_handleConnectionEstablished(uint64_t a1, int a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v5;
  uint64_t InterfaceInfo;
  int v7;
  uint64_t v8;
  const __CFUUID *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  int v14;
  int v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  CFTypeRef v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  socklen_t v26[2];
  CFUUIDBytes v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v26 = 0;
  if (*DerivedStorage)
  {
    v8 = 0;
LABEL_38:
    if ((a2 & 0x80000000) == 0 && close(a2) && *__error())
      __error();
    return v8;
  }
  v5 = DerivedStorage;
  if (gLogCategory_APTransportConnectionHTTP <= 30
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  InterfaceInfo = SocketGetInterfaceInfo();
  if ((_DWORD)InterfaceInfo)
  {
    v8 = InterfaceInfo;
LABEL_61:
    APSLogErrorAt();
    goto LABEL_38;
  }
  v7 = *((_DWORD *)v5 + 12);
  if ((v7 & 1) != 0 || (v7 & 2) != 0 || (v7 & 8) != 0)
  {
    v8 = 4294894976;
    if (gLogCategory_APTransportConnectionHTTP <= 90
      && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_38;
  }
  *((_DWORD *)v5 + 109) = v26[1];
  SocketSetQoS();
  v9 = (const __CFUUID *)*((_QWORD *)v5 + 26);
  if (v9)
  {
    v27 = (CFUUIDBytes)0;
    v27 = CFUUIDGetUUIDBytes(v9);
    setsockopt(a2, 0xFFFF, 4360, &v27, 0x10u);
  }
  v26[0] = 28;
  v10 = getsockname(a2, (sockaddr *)(v5 + 136), v26);
  if ((_DWORD)v10)
  {
    v8 = v10;
    goto LABEL_61;
  }
  v26[0] = 28;
  v11 = getpeername(a2, (sockaddr *)(v5 + 164), v26);
  if ((_DWORD)v11)
  {
    v8 = v11;
    goto LABEL_61;
  }
  *((_DWORD *)v5 + 48) = SockAddrGetPort();
  v12 = v5[165];
  if (v12 == 30)
  {
    v26[0] = 4;
    v13 = v5 + 196;
    v14 = a2;
    v15 = 41;
    v16 = 125;
LABEL_22:
    if (!getsockopt(v14, v15, v16, v13, v26))
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v12 == 2)
  {
    v26[0] = 4;
    v13 = v5 + 196;
    v14 = a2;
    v15 = 0;
    v16 = 25;
    goto LABEL_22;
  }
LABEL_23:
  *((_DWORD *)v5 + 49) = 0;
LABEL_24:
  if (!v5[256])
  {
    v8 = httpConnection_setupHTTPClient(a1, a2);
    if (!(_DWORD)v8)
      return v8;
    goto LABEL_73;
  }
  v17 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v27 = (CFUUIDBytes)0;
  if (*v17)
  {
    v8 = 0;
  }
  else
  {
    v18 = v17;
    *((_QWORD *)&v30 + 1) = httpconnection_handleEvent;
    *(_QWORD *)&v28 = "RTSP/1.0";
    *((_QWORD *)&v29 + 1) = httpconnection_handleConnectionClosed;
    v19 = v17 + 264;
    v20 = HTTPConnectionCreate();
    if (!(_DWORD)v20)
    {
      v21 = (CFTypeRef)*((_QWORD *)v18 + 27);
      if (v21)
        v21 = CFRetain(v21);
      *(_QWORD *)(*(_QWORD *)v19 + 384) = v21;
      if (*(_QWORD *)(*(_QWORD *)v19 + 384))
      {
        HTTPConnectionSetDispatchQueue();
        if (!*((_QWORD *)v18 + 14) || !*((_QWORD *)v18 + 15))
          goto LABEL_76;
        if (gLogCategory_APTransportConnectionHTTP <= 30
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v8 = httpconnection_configureEncryptionInternal(a1, *((_QWORD *)v18 + 14), *((_QWORD *)v18 + 15));
        v22 = (const void *)*((_QWORD *)v18 + 14);
        if (v22)
        {
          CFRelease(v22);
          *((_QWORD *)v18 + 14) = 0;
        }
        v23 = (const void *)*((_QWORD *)v18 + 15);
        if (v23)
        {
          CFRelease(v23);
          *((_QWORD *)v18 + 15) = 0;
        }
        if (!(_DWORD)v8)
        {
LABEL_76:
          if (*((_DWORD *)v18 + 86))
            HTTPConnectionSetTimeout();
          v24 = HTTPConnectionStart();
          if (!(_DWORD)v24)
          {
            if (gLogCategory_APTransportConnectionHTTP <= 50
              && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            return 0;
          }
          v8 = v24;
        }
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        v8 = 4294894973;
      }
LABEL_73:
      APSLogErrorAt();
      return v8;
    }
    v8 = v20;
    APSLogErrorAt();
  }
  if ((a2 & 0x80000000) == 0 && close(a2) && *__error())
    __error();
  if ((_DWORD)v8)
    goto LABEL_73;
  return v8;
}

uint64_t httpConnection_setupHTTPClient(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = SockAddrToString();
  if ((_DWORD)v4)
  {
    v6 = v4;
    APSLogErrorAt();
  }
  else
  {
    bswap64(*(_OWORD *)&CFUUIDGetUUIDBytes((CFUUIDRef)*(_QWORD *)(DerivedStorage + 128)));
    ASPrintF();
    APSLogErrorAt();
    v6 = 4294960596;
  }
  if ((a2 & 0x80000000) == 0 && close(a2) && *__error())
    __error();
  return v6;
}

uint64_t httpconnection_handleEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v5;
  uint64_t DerivedStorage;
  int v7;
  NSObject *v8;
  uint64_t v9;
  CFTypeRef v10;
  void (*v11)(CFTypeRef, uint64_t);
  CFTypeRef v12;
  void (*v13)(CFTypeRef, uint64_t);
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  NSObject *v17;
  const void *v18;
  uint64_t (*v19)(const void *);
  int v20;
  char *v21;
  OpaqueCMBlockBuffer *v22;
  size_t DataLength;
  const char *v24;
  char v25;
  uint64_t (*v26)(const void *);
  uint64_t (*v27)(const void *);
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v33;
  uint64_t v34;
  _QWORD block[7];
  char *dataPointerOut;
  CFTypeRef v37[2];

  v3 = *(_QWORD *)(a1 + 384);
  dataPointerOut = 0;
  v37[0] = 0;
  if (!v3)
  {
    APSLogErrorAt();
    v21 = 0;
    v18 = 0;
    v33 = 0;
    v8 = 0;
    v5 = 0;
LABEL_65:
    v22 = 0;
    DataLength = 0;
    v24 = 0;
    v34 = 400;
    goto LABEL_25;
  }
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
  {
    v21 = 0;
    v18 = 0;
    v33 = 0;
    v8 = 0;
    goto LABEL_65;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 232))
  {
    APSPowerAssertionRaise();
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = dispatch_semaphore_create(0);
  if (!v8)
  {
    APSLogErrorAt();
    LODWORD(v9) = 0;
LABEL_68:
    v34 = 400;
    goto LABEL_19;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 272));
  v9 = (*(_DWORD *)(DerivedStorage + 296) + 1);
  *(_DWORD *)(DerivedStorage + 296) = v9;
  *(_QWORD *)(DerivedStorage + 280) = v8;
  dispatch_retain(v8);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 272));
  if (gLogCategory_APTransportConnectionHTTP <= 50
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (APTransportPackageHTTPCreateWithHTTPMessage(*MEMORY[0x1E0C9AE00], a2, v37))
  {
    APSLogErrorAt();
    goto LABEL_68;
  }
  v10 = v37[0];
  v11 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v11)
    v11(v10, 1937337955);
  v12 = v37[0];
  v13 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
  if (v13)
    v13(v12, v9);
  v14 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __httpconnection_handleEvent_block_invoke;
  block[3] = &__block_descriptor_tmp_94;
  block[4] = v5;
  block[5] = v37[0];
  block[6] = v8;
  dispatch_sync(v14, block);
  v15 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v8, v15))
  {
    APSLogErrorAt();
    v16 = 408;
  }
  else
  {
    v16 = 400;
  }
  v34 = v16;
LABEL_19:
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 272));
  v17 = *(NSObject **)(DerivedStorage + 280);
  v18 = *(const void **)(DerivedStorage + 288);
  *(_QWORD *)(DerivedStorage + 288) = 0;
  if (v17)
  {
    dispatch_release(v17);
    *(_QWORD *)(DerivedStorage + 280) = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 272));
  v33 = v7;
  if (!v18)
  {
    v21 = 0;
    v22 = 0;
    DataLength = 0;
    v24 = 0;
LABEL_25:
    v25 = 1;
    goto LABEL_42;
  }
  v19 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v19)
    v20 = v19(v18);
  else
    v20 = 0;
  v26 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v26)
    v22 = (OpaqueCMBlockBuffer *)v26(v18);
  else
    v22 = 0;
  v27 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v27)
    v28 = v27(v18);
  else
    v28 = 0;
  if (v28 == (_DWORD)v9 && (v20 ? (v29 = v34) : (v29 = 200), v34 = v29, v22))
  {
    DataLength = CMBlockBufferGetDataLength(v22);
    if (DataLength)
    {
      CMBlockBufferGetDataPointer(v22, 0, 0, 0, &dataPointerOut);
      v25 = 0;
      v24 = "application/x-apple-binary-plist";
      v21 = dataPointerOut;
      goto LABEL_42;
    }
    v21 = 0;
    v25 = 0;
  }
  else
  {
    v21 = 0;
    v25 = 0;
    DataLength = 0;
  }
  v24 = 0;
LABEL_42:
  v30 = MEMORY[0x1CAA3C384](a1, v34, 0, v24, v21, DataLength);
  if ((_DWORD)v30)
    v31 = 90;
  else
    v31 = 50;
  if (v31 >= gLogCategory_APTransportConnectionHTTP
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v33)
    APSPowerAssertionRelease();
  if (v8)
    dispatch_release(v8);
  if (v22)
    CFRelease(v22);
  if ((v25 & 1) == 0)
    CFRelease(v18);
  if (v37[0])
    CFRelease(v37[0]);
  if (v5)
    CFRelease(v5);
  return v30;
}

void httpconnection_handleConnectionClosed(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  CFNumberRef v7;
  const void *v8;
  int valuePtr;

  v2 = *(_QWORD *)(a1 + 384);
  valuePtr = -72320;
  if (v2)
  {
    v3 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      v4 = (const void *)v3;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)DerivedStorage)
      {
        v6 = DerivedStorage;
        if (*(_DWORD *)(DerivedStorage + 108) == 5)
        {
          if (gLogCategory_APTransportConnectionHTTP <= 90
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          APTTrafficMetricsConnectionClosed(*(_QWORD *)(v6 + 496));
          *(_DWORD *)(v6 + 108) = 6;
          v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
          httpconnection_callEventCallbacks(v4, 6, v7, 0);
          if (v7)
            CFRelease(v7);
        }
      }
      CFRelease(v4);
    }
  }
  else
  {
    APSLogErrorAt();
  }
  v8 = *(const void **)(a1 + 384);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 384) = 0;
  }
}

uint64_t httpconnection_configureEncryptionInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, CFDataRef *, _QWORD, CFDataRef *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFDataRef v11;
  CFDataRef theData;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0;
  theData = 0;
  if (gLogCategory_APTransportConnectionHTTP <= 30
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFDataRef *, _QWORD, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 64);
  if (!v6)
  {
    v9 = 4294954514;
    goto LABEL_14;
  }
  v7 = v6(a2, a3, 0, &theData, 0, &v11);
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_14;
  }
  if (CFDataGetLength(theData) <= 31)
  {
    v9 = 4294894974;
    goto LABEL_14;
  }
  if (CFDataGetLength(v11) <= 31)
  {
    v9 = 4294894974;
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(DerivedStorage + 264);
  if (*(_BYTE *)(DerivedStorage + 256))
  {
    if (v8)
    {
      CFDataGetBytePtr(v11);
      CFDataGetBytePtr(theData);
      v9 = NetTransportChaCha20Poly1305Configure();
      if (!(_DWORD)v9)
      {
        HTTPConnectionSetTransportDelegate();
        goto LABEL_18;
      }
      goto LABEL_14;
    }
    goto LABEL_27;
  }
  if (v8)
  {
    CFDataGetBytePtr(theData);
    CFDataGetBytePtr(v11);
    v9 = NetTransportChaCha20Poly1305Configure();
    if (!(_DWORD)v9)
    {
      HTTPClientSetTransportDelegate();
      goto LABEL_18;
    }
LABEL_14:
    APSLogErrorAt();
    goto LABEL_18;
  }
LABEL_27:
  APSLogErrorAt();
  v9 = 4294894975;
LABEL_18:
  if (theData)
    CFRelease(theData);
  if (v11)
    CFRelease(v11);
  return v9;
}

_BYTE *__httpconnection_handleEvent_block_invoke(_QWORD *a1)
{
  const void *v1;
  const void *v2;
  NSObject *v3;
  void (*v4)(const void *);

  v1 = (const void *)a1[4];
  v2 = (const void *)a1[5];
  v3 = a1[6];
  v4 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (v4)
    v4(v2);
  return httpconnection_callEventCallbacks(v1, 7, v2, v3);
}

void httpconnection_httpClientInvalidated(int a1, const void *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  CFNumberRef v8;
  int valuePtr;

  valuePtr = a1;
  if (a2)
  {
    v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      v5 = (const void *)v4;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)DerivedStorage)
      {
        v7 = DerivedStorage;
        if (*(_DWORD *)(DerivedStorage + 108) == 5)
        {
          if (gLogCategory_APTransportConnectionHTTP <= 90
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (a1 == -6722)
            valuePtr = -71881;
          *(_DWORD *)(v7 + 108) = 6;
          v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
          httpconnection_callEventCallbacks(v5, 6, v8, 0);
          if (v8)
            CFRelease(v8);
        }
      }
      CFRelease(v5);
    }
    CFRelease(a2);
  }
  else
  {
    APSLogErrorAt();
  }
}

void httpconnection_handleListenerConnected(uint64_t a1, uint64_t a2, int a3)
{
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  int v8;
  int v9;

  if (a2)
  {
    v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v4 || (DerivedStorage = CMBaseObjectGetDerivedStorage(), *(_BYTE *)DerivedStorage))
    {
LABEL_8:
      if (gLogCategory_APTransportConnectionHTTP <= 50
        && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
        if (a3 < 0)
          goto LABEL_17;
      }
      else if (a3 < 0)
      {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    v6 = DerivedStorage;
    APTConnectionListenerInvalidate(*(_QWORD *)(DerivedStorage + 240));
    v7 = *(const void **)(v6 + 240);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v6 + 240) = 0;
    }
    v8 = httpconnection_handleConnectionEstablished((uint64_t)v4, a3);
    if (!v8)
    {
      *(_DWORD *)(v6 + 108) = 5;
      httpconnection_callEventCallbacks(v4, 5, 0, 0);
      a3 = -1;
      goto LABEL_8;
    }
    v9 = v8;
    APSLogErrorAt();
    a3 = -1;
  }
  else
  {
    v9 = -72322;
    APSLogErrorAt();
    APSSignalErrorAt();
    v4 = 0;
  }
  if (gLogCategory_APTransportConnectionHTTP <= 90
    && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  httpconnection_handleConnectionFailure(v4, v9);
  if ((a3 & 0x80000000) == 0)
  {
LABEL_14:
    if (close(a3) && *__error())
      __error();
  }
LABEL_17:
  if (v4)
    CFRelease(v4);
}

void httpconnection_handleListenerInvalidated(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void httpconnection_addEventCallbackInternal(CFTypeRef *a1)
{
  uint64_t DerivedStorage;
  __CFArray *Mutable;
  __CFArray *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 96), a1[4])
    || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0)) == 0)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
  else
  {
    v4 = Mutable;
    CFArrayAppendValue(Mutable, a1[1]);
    CFArrayAppendValue(v4, a1[2]);
    CFArrayAppendValue(v4, a1[3]);
    dispatch_retain((dispatch_object_t)a1[3]);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 96), a1[4], v4);
    if (APSDispatchSyncTask())
      APSLogErrorAt();
    CFRelease(v4);
  }
  if (*a1)
    CFRelease(*a1);
  dispatch_release((dispatch_object_t)a1[3]);
}

void httpconnection_removeEventCallbackInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFArray *TypedValue;
  NSObject *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayGetTypeID();
  TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(TypedValue, 2);
    dispatch_release(ValueAtIndex);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 96), *(const void **)(a1 + 8));
  }
}

void httpconnection_sendPackageInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  int v9;
  uint64_t v10;
  OpaqueCMClock *HostTimeClock;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  dispatch_time_t v16;
  CFTypeRef v17;
  const void *v18;
  void (*v19)(const void *);
  CMTime v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 108) == 5)
  {
    v3 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 264))
    {
      if (*(_QWORD *)(DerivedStorage + 360))
        CFObjectSetValue();
      APTransportPackageHTTPSetURL(*(_QWORD *)(a1 + 8), *(const void **)(v3 + 280));
      v4 = APTransportPackageHTTPGetHTTPMessage(*(void **)(a1 + 8));
      if (v4)
      {
        v5 = (_QWORD *)v4;
        ++*(_DWORD *)(v3 + 272);
        HTTPHeader_SetField();
        if (*(_DWORD *)(v3 + 336))
        {
          HTTPHeader_SetField();
          HTTPHeader_SetField();
        }
        if (*(_QWORD *)(v3 + 32))
          HTTPHeader_SetField();
        v5[1209] = CFRetain(*(CFTypeRef *)(v3 + 216));
        v6 = *(const void **)(a1 + 8);
        v5[1212] = v6;
        if (v6)
          CFRetain(v6);
        v5[1214] = httpconnection_httpResponseReceived;
        if (gLogCategory_APTransportConnectionHTTP <= 30)
        {
          if (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize())
          {
            v7 = *(_QWORD *)(a1 + 8);
            v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
            if (v8)
              v8(v7);
            LogPrintF();
          }
          if (gLogCategory_APTransportConnectionHTTP <= 10
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogHTTP();
          }
        }
        APTTrafficMetricsSendStarted(*(_QWORD *)(v3 + 496));
        v9 = HTTPClientSendMessage();
        APTTrafficMetricsSendFinished(*(_QWORD *)(v3 + 496));
        *(_QWORD *)(v3 + 480) = mach_absolute_time();
        if (!v9)
        {
          v10 = CMBaseObjectGetDerivedStorage();
          if (!*(_DWORD *)(v10 + 372))
          {
            HostTimeClock = CMClockGetHostTimeClock();
            CMClockGetTime(&v20, HostTimeClock);
            *(CMTime *)(v10 + 376) = v20;
            v12 = CMBaseObjectGetDerivedStorage();
            v13 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
            if (!*(_QWORD *)(v12 + 424))
            {
              v14 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v12 + 8));
              *(_QWORD *)(v12 + 424) = v14;
              if (v14)
              {
                dispatch_set_context(v14, v13);
                dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v12 + 424), (dispatch_function_t)httpconnection_checkIfNetworkStalled);
                dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v12 + 424), (dispatch_function_t)httpconnection_stallMonitorCancelledCallback);
                v15 = *(NSObject **)(v12 + 424);
                v16 = dispatch_time(0, 2000000000);
                dispatch_source_set_timer(v15, v16, 0x77359400uLL, 0x174876E800uLL);
                dispatch_resume(*(dispatch_object_t *)(v12 + 424));
                goto LABEL_28;
              }
              APSLogErrorAt();
            }
            if (v13)
              CFRelease(v13);
          }
LABEL_28:
          ++*(_DWORD *)(v10 + 372);
          goto LABEL_29;
        }
      }
    }
    APSLogErrorAt();
  }
  v17 = *(CFTypeRef *)a1;
  v18 = *(const void **)(a1 + 8);
  v19 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (v19)
    v19(v18);
  httpconnection_callEventCallbacks(v17, 8, v18, 0);
LABEL_29:
  CFRelease(*(CFTypeRef *)(a1 + 8));
  CFRelease(*(CFTypeRef *)a1);
}

void httpconnection_httpResponseReceived(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  _BYTE *DerivedStorage;
  _QWORD *v7;
  void (*v8)(const void *);
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *);
  CFTypeRef v12;
  void (*v13)(CFTypeRef, uint64_t);
  CFTypeRef v14;
  uint64_t (*v15)(const void *);
  uint64_t v16;
  void (*v17)(CFTypeRef, uint64_t);
  uint64_t v18;
  OpaqueCMClock *HostTimeClock;
  int v20;
  NSObject *v21;
  CFTypeRef cf;
  CMTime v23;

  v2 = *(const void **)(a1 + 9672);
  v3 = *(const void **)(a1 + 9696);
  cf = 0;
  mach_absolute_time();
  v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    v5 = (const void *)v4;
    DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (!*DerivedStorage)
    {
      v7 = DerivedStorage;
      v8 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (v8)
        v8(v3);
      if (!HTTPMessageGetHeaderField())
        SNScanF();
      v9 = UpTicksToMilliseconds();
      v10 = v7[59];
      v7[58] += v9;
      v7[59] = v10;
      if ((*(_DWORD *)(a1 + 8456) - 100) > 0x1F3)
      {
        httpconnection_callEventCallbacks(v5, 8, v3, 0);
      }
      else
      {
        if (gLogCategory_APTransportConnectionHTTP <= 30)
        {
          if (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize())
            LogPrintF();
          if (gLogCategory_APTransportConnectionHTTP <= 10
            && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
          {
            LogHTTP();
          }
        }
        APTTrafficMetricsResponseReceived(v7[62]);
        v11 = *(unsigned int (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
        if (!v11 || v11(v3) != 1937337955)
          goto LABEL_28;
        if (!APTransportPackageHTTPCreateWithHTTPMessage(*MEMORY[0x1E0C9AE00], a1, &cf))
        {
          v12 = cf;
          v13 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
          if (v13)
            v13(v12, 1919970425);
          v14 = cf;
          v15 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
          if (v15)
            v16 = v15(v3);
          else
            v16 = 0;
          v17 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          if (v17)
            v17(v14, v16);
          httpconnection_callEventCallbacks(v5, 7, cf, 0);
LABEL_28:
          v18 = CMBaseObjectGetDerivedStorage();
          HostTimeClock = CMClockGetHostTimeClock();
          CMClockGetTime(&v23, HostTimeClock);
          *(CMTime *)(v18 + 376) = v23;
          v20 = *(_DWORD *)(v18 + 372) - 1;
          *(_DWORD *)(v18 + 372) = v20;
          if (!v20)
          {
            v21 = *(NSObject **)(v18 + 424);
            if (v21)
            {
              dispatch_source_cancel(*(dispatch_source_t *)(v18 + 424));
              dispatch_release(v21);
              *(_QWORD *)(v18 + 424) = 0;
            }
          }
          goto LABEL_31;
        }
        APSLogErrorAt();
      }
    }
LABEL_31:
    CFRelease(v5);
  }
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  if (cf)
    CFRelease(cf);
}

void httpconnection_checkIfNetworkStalled()
{
  OpaqueCMClock *HostTimeClock;
  uint64_t v1;
  const void *v2;
  uint64_t DerivedStorage;
  int v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  const __CFString *StallStateString;
  const __CFAllocator *v9;
  CFDictionaryRef v10;
  CMTime rhs;
  CMTime lhs;
  CMTime v13;
  CMTime v14;

  memset(&v14, 0, sizeof(v14));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v14, HostTimeClock);
  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    v2 = (const void *)v1;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    lhs = v14;
    rhs = *(CMTime *)(DerivedStorage + 376);
    CMTimeSubtract(&v13, &lhs, &rhs);
    v4 = *(_DWORD *)(DerivedStorage + 432);
    if (v4 == 1)
    {
      if (*(_DWORD *)(DerivedStorage + 372))
      {
        lhs = v13;
        rhs = *(CMTime *)(DerivedStorage + 400);
        if (CMTimeCompare(&lhs, &rhs) > 0)
          goto LABEL_29;
      }
      *(_DWORD *)(DerivedStorage + 432) = 0;
      if (gLogCategory_APTransportConnectionHTTP > 50
        || gLogCategory_APTransportConnectionHTTP == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_22;
      }
    }
    else
    {
      if (v4)
      {
        if (gLogCategory_APTransportConnectionHTTP <= 90
          && (gLogCategory_APTransportConnectionHTTP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_29;
      }
      if (!*(_DWORD *)(DerivedStorage + 372)
        || (lhs = v13, rhs = *(CMTime *)(DerivedStorage + 400), CMTimeCompare(&lhs, &rhs) < 1))
      {
LABEL_29:
        CFRelease(v2);
        return;
      }
      *(_DWORD *)(DerivedStorage + 432) = 1;
      if (gLogCategory_APTransportConnectionHTTP > 50
        || gLogCategory_APTransportConnectionHTTP == -1 && !_LogCategory_Initialize())
      {
LABEL_22:
        v5 = CFGetAllocator(v2);
        Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v7 = Mutable;
          StallStateString = APTransportConnectionGetStallStateString(*(_DWORD *)(DerivedStorage + 432));
          CFDictionarySetValue(v7, CFSTR("StallState"), StallStateString);
          if (*(_DWORD *)(DerivedStorage + 432) == 1)
          {
            v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            lhs = v13;
            v10 = CMTimeCopyAsDictionary(&lhs, v9);
            if (!v10)
            {
              APSLogErrorAt();
              APSSignalErrorAt();
LABEL_28:
              CFRelease(v2);
              CFRelease(v7);
              v2 = v10;
              if (!v10)
                return;
              goto LABEL_29;
            }
            CFDictionarySetValue(v7, CFSTR("StallDuration"), v10);
          }
          else
          {
            v10 = 0;
          }
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          goto LABEL_28;
        }
        APSLogErrorAt();
        APSSignalErrorAt();
        goto LABEL_29;
      }
      lhs = v13;
      CMTimeGetSeconds(&lhs);
    }
    LogPrintF();
    goto LABEL_22;
  }
}

void httpconnection_stallMonitorCancelledCallback(const void *a1)
{
  httpconnection_checkIfNetworkStalled();
  CFRelease(a1);
}

void httpconnection_deferConfigureEncryption(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 108) == 5)
  {
    httpconnection_configureEncryptionInternal(*a1, a1[1], a1[2]);
  }
  else
  {
    v3 = DerivedStorage;
    v4 = (CFTypeRef)a1[1];
    if (v4)
      v4 = CFRetain(v4);
    *(_QWORD *)(v3 + 112) = v4;
    v5 = (CFTypeRef)a1[2];
    if (v5)
      v5 = CFRetain(v5);
    *(_QWORD *)(v3 + 120) = v5;
  }
  CFRelease((CFTypeRef)*a1);
  CFRelease((CFTypeRef)a1[1]);
  CFRelease((CFTypeRef)a1[2]);
}

uint64_t APTPackageLowPowerKeepAliveCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = APTPackageLowPowerKeepAliveCreateWithBBuf(a1, 0, a2);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t APTPackageLowPowerKeepAliveCreateWithBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, _QWORD *a3)
{
  uint64_t v5;
  _WORD *DerivedStorage;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;

  APTransportPackageGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v9 = v5;
    goto LABEL_19;
  }
  DerivedStorage = (_WORD *)CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  if (a2)
  {
    if (CMBlockBufferGetDataLength(a2) != 4)
    {
      v9 = 4294894936;
      goto LABEL_19;
    }
    v8 = CMBlockBufferCopyDataBytes(a2, 0, 4uLL, v7);
    if ((_DWORD)v8)
    {
      v9 = v8;
      goto LABEL_19;
    }
    if (v7[1] != 4)
    {
      v9 = 4294894936;
      goto LABEL_19;
    }
    if ((*v7 & 0xDF) != 0)
    {
      v9 = 4294894936;
LABEL_19:
      APSLogErrorAt();
      return v9;
    }
  }
  else
  {
    *DerivedStorage = 1024;
  }
  if (gLogCategory_APTPackageLowPowerKeepAlive <= 30
    && (gLogCategory_APTPackageLowPowerKeepAlive != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = 0;
  *a3 = 0;
  return v9;
}

uint64_t lowPowerKeepAlivePackage_Finalize()
{
  uint64_t result;

  if (gLogCategory_APTPackageLowPowerKeepAlive <= 30)
  {
    if (gLogCategory_APTPackageLowPowerKeepAlive != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

__CFString *lowPowerKeepAlivePackage_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTPackageLowPowerKeepAlive %p>"), a1);
  return Mutable;
}

uint64_t lowPowerKeepAlivePackage_SetMessageData(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;
  CFTypeID v6;
  _WORD *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return APSLogErrorAt();
  v5 = DerivedStorage;
  v6 = CFGetTypeID(a2);
  if (v6 != CMBlockBufferGetTypeID())
    return APSLogErrorAt();
  if (CMBlockBufferGetDataLength((CMBlockBufferRef)a2) != 2)
    return APSLogErrorAt();
  v7 = (_WORD *)(v5 + 2);
  result = CMBlockBufferCopyDataBytes((CMBlockBufferRef)a2, 0, 2uLL, v7);
  if ((_DWORD)result)
    return APSLogErrorAt();
  *v7 = bswap32((unsigned __int16)*v7) >> 16;
  return result;
}

uint64_t lowPowerKeepAlivePackage_GetMessageType()
{
  if ((*(_BYTE *)CMBaseObjectGetDerivedStorage() & 0x20) != 0)
    return 1819308912;
  else
    return 1819309931;
}

_BYTE *lowPowerKeepAlivePackage_SetMessageType(uint64_t a1, int a2)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (a2 != 1819308912 && a2 != 1819309931)
    return (_BYTE *)APSLogErrorAt();
  *result = 32 * (a2 == 1819308912);
  return result;
}

CMBlockBufferRef lowPowerKeepAlivePackage_CreateBBufRepresentation()
{
  const void *DerivedStorage;
  CMBlockBufferRef destinationBuffer;

  destinationBuffer = 0;
  DerivedStorage = (const void *)CMBaseObjectGetDerivedStorage();
  if (CMBlockBufferCreateWithMemoryBlock(0, 0, 4uLL, 0, 0, 0, 4uLL, 1u, &destinationBuffer)
    || CMBlockBufferReplaceDataBytes(DerivedStorage, destinationBuffer, 0, 4uLL))
  {
    APSLogErrorAt();
  }
  return destinationBuffer;
}

uint64_t APTransportConnectionTCPCreate(uint64_t a1, const void *a2, int a3, int a4, uint64_t a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  CFTypeRef v11;
  const void *TypedValue;
  uint64_t v13;
  dispatch_queue_t v14;
  uint64_t v15;
  unsigned int v17;
  char label[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a6)
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  APTransportConnectionGetClassID();
  v17 = CMDerivedObjectCreate();
  if (v17)
  {
    APSLogErrorAt();
    return v17;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 56) = CFDictionaryGetInt64() != 0;
  if (a2)
    v11 = CFRetain(a2);
  else
    v11 = 0;
  *(_QWORD *)(DerivedStorage + 16) = v11;
  *(_DWORD *)(DerivedStorage + 60) = a3;
  *(_DWORD *)(DerivedStorage + 128) = CFDictionaryGetInt64();
  CFUUIDGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  *(_QWORD *)(DerivedStorage + 136) = TypedValue;
  if (TypedValue)
    CFRetain(TypedValue);
  SNPrintF();
  if (a4)
    v13 = FigDispatchQueueCreateWithPriority();
  else
    v13 = (uint64_t)dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 8) = v13;
  if (!v13 || (SNPrintF(), v14 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 24) = v14) == 0))
  {
    APSLogErrorAt();
    v17 = -72323;
    APSSignalErrorAt();
    return v17;
  }
  v15 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 144) = v15;
  if (!v15)
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  if (gLogCategory_APTransportConnectionTCP <= 50
    && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionTCP, 0, (uint64_t *)(DerivedStorage + 240), 0);
  *a6 = 0;
  return v17;
}

uint64_t tcpconnection_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD v4[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4[0] = a1;
  v4[1] = 1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), v4, (dispatch_function_t)tcpconnection_invalidateInternal);
  return 0;
}

void tcpconnection_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  _QWORD v12[2];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v12[0] = a1;
  v12[1] = 0;
  tcpconnection_invalidateInternal((uint64_t)v12);
  v3 = (const void *)DerivedStorage[30];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[30] = 0;
  }
  v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
  v5 = (const void *)DerivedStorage[17];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[17] = 0;
  }
  v6 = DerivedStorage[3];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[3] = 0;
  }
  v7 = DerivedStorage[6];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[6] = 0;
  }
  v8 = DerivedStorage[1];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[1] = 0;
  }
  v9 = (const void *)DerivedStorage[18];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[18] = 0;
  }
  v10 = (const void *)DerivedStorage[23];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[23] = 0;
  }
  v11 = (const void *)DerivedStorage[24];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[24] = 0;
  }
  if (gLogCategory_APTransportConnectionTCP <= 50
    && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

__CFString *tcpconnection_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportConnectionTCP %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t tcpconnection_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t tcpconnection_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __tcpconnection_SetProperty_block_invoke;
  v9[3] = &unk_1E8255748;
  v9[4] = &v10;
  v9[5] = a1;
  v9[6] = a2;
  v9[7] = a3;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void tcpconnection_invalidateInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = DerivedStorage;
    APTTrafficMetricsConnectionClosed(*(_QWORD *)(DerivedStorage + 240));
    if (gLogCategory_APTransportConnectionTCP <= 30
      && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)v3 = 1;
    tcpconnection_cleanUp();
    if (*(_BYTE *)(a1 + 8))
      dispatch_sync_f(*(dispatch_queue_t *)(v3 + 24), *(void **)a1, (dispatch_function_t)tcpconnection_clearCallbackState);
    else
      tcpconnection_clearCallbackState();
  }
}

void tcpconnection_cleanUp()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 56))
  {
    v2 = *(_QWORD *)(DerivedStorage + 168);
    if (v2)
    {
      APTConnectionListenerInvalidate(v2);
      v3 = *(const void **)(v1 + 168);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(v1 + 168) = 0;
      }
    }
  }
  v4 = *(NSObject **)(v1 + 160);
  if (v4)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 160));
    dispatch_release(v4);
    *(_QWORD *)(v1 + 160) = 0;
  }
  *(_DWORD *)(v1 + 176) = 6;
  *(_QWORD *)(v1 + 152) = 0;
}

void tcpconnection_clearCallbackState()
{
  _QWORD *DerivedStorage;
  NSObject *v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[4] = 0;
  DerivedStorage[5] = 0;
  v1 = DerivedStorage[6];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[6] = 0;
  }
}

uint64_t tcpconnection_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ListeningPort;
  uint64_t v15;
  char cStr[40];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    v10 = 4294954511;
    APSSignalErrorAt();
    return v10;
  }
  v8 = DerivedStorage;
  if (CFEqual(a2, CFSTR("LocalInterfaceName")))
  {
    if (*((_DWORD *)v8 + 44) == 5)
    {
      SocketGetInterfaceInfo();
      v9 = (void *)CFStringCreateWithCString(a3, cStr, 0x8000100u);
      if (!v9)
      {
        v10 = 4294894973;
LABEL_33:
        APSLogErrorAt();
        return v10;
      }
      goto LABEL_15;
    }
LABEL_26:
    APSLogErrorAt();
    APSSignalErrorAt();
    return 0;
  }
  if (CFEqual(a2, CFSTR("LocalNetworkIPAddress")))
  {
    if (*((_DWORD *)v8 + 44) == 5)
    {
      v9 = CFDataCreate(a3, v8 + 64, 28);
      if (!v9)
      {
        v10 = 4294894973;
        goto LABEL_33;
      }
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  if (CFEqual(a2, CFSTR("LocalNetworkPort")))
  {
    v11 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(v11 + 56))
    {
      APSLogErrorAt();
      v10 = 4294894975;
      goto LABEL_33;
    }
    v12 = *(_QWORD *)(v11 + 168);
    if (v12)
    {
      *(_DWORD *)cStr = -1;
      ListeningPort = APTConnectionListenerGetListeningPort(v12, cStr);
      if ((_DWORD)ListeningPort)
      {
        v10 = ListeningPort;
      }
      else
      {
        v9 = CFNumberCreate(a3, kCFNumberIntType, cStr);
        if (v9)
        {
LABEL_15:
          v10 = 0;
          *a4 = v9;
          return v10;
        }
        v10 = 4294894973;
      }
      APSLogErrorAt();
      goto LABEL_33;
    }
    APSLogErrorAt();
    v15 = APSSignalErrorAt();
    v10 = 0;
    if ((_DWORD)v15)
    {
      v10 = v15;
      goto LABEL_33;
    }
  }
  else if (CFEqual(a2, CFSTR("RemoteNetworkIPAddress")))
  {
    *(_OWORD *)cStr = *(_OWORD *)(v8 + 92);
    *(_OWORD *)&cStr[12] = *(_OWORD *)(v8 + 104);
    v10 = APSNetworkAddressCreateWithSocketAddr();
    if ((_DWORD)v10)
      goto LABEL_33;
    APSNetworkAddressSetPort();
    *a4 = 0;
  }
  else
  {
    if (gLogCategory_APTransportConnectionTCP <= 30
      && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954512;
  }
  return v10;
}

uint64_t tcpconnection_Resume(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpconnection_resumeInternal);
  return 0;
}

uint64_t tcpconnection_AddEventCallback(const void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7;

  CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    v7 = 4294894974;
LABEL_9:
    APSLogErrorAt();
    return v7;
  }
  if (!a4)
  {
    v7 = 4294894974;
    goto LABEL_9;
  }
  dispatch_retain(a4);
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t tcpconnection_RemoveEventCallback()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t tcpconnection_AcquirePackage()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t tcpconnection_AcquirePackageWithMessageSize()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t tcpconnection_RelinquishPackage(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t tcpconnection_SendPackage(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t tcpconnection_ConfigureEncryption(const void *a1, const void *a2, const void *a3)
{
  CFTypeID v6;
  uint64_t v7;

  CMBaseObjectGetDerivedStorage();
  if (!a2 || (v6 = CFGetTypeID(a2), v6 != APSKeyHolderGetTypeID()))
  {
    v7 = 4294894974;
LABEL_8:
    APSLogErrorAt();
    return v7;
  }
  if (!a3)
  {
    v7 = 4294894974;
    goto LABEL_8;
  }
  CFRetain(a1);
  CFRetain(a2);
  CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

void tcpconnection_resumeInternal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t *v3;
  const void *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const __CFUUID *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const void *v20;
  const void *v21;
  int v22;
  CFNumberRef v23;
  int v24;
  CFUUIDBytes cf;
  int v26;
  socklen_t v27;
  int v28;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
    goto LABEL_9;
  }
  if (!*(_BYTE *)(DerivedStorage + 56))
  {
    if (!*(_BYTE *)(DerivedStorage + 93) || !*(_DWORD *)(DerivedStorage + 120))
    {
      if (gLogCategory_APTransportConnectionTCP <= 90
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_9;
    }
    valuePtr = 0;
    v8 = CMBaseObjectGetDerivedStorage();
    v9 = v8;
    v27 = 0;
    v28 = 0;
    if (*(_QWORD *)(v8 + 152))
      goto LABEL_68;
    v10 = socket(*(unsigned __int8 *)(v8 + 93), 1, 6);
    if (v10 < 0)
    {
      if (!*__error())
      {
        valuePtr = -6700;
        goto LABEL_37;
      }
      valuePtr = *__error();
      if (valuePtr)
      {
LABEL_37:
        APSLogErrorAt();
LABEL_62:
        *(_DWORD *)(v9 + 176) = 4;
        v23 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        tcpconnection_callEventCallback(a1, 4, v23);
        if (v23)
          CFRelease(v23);
        if ((v10 & 0x80000000) == 0 && close(v10) && *__error())
          __error();
LABEL_69:
        if (!valuePtr)
          goto LABEL_9;
        goto LABEL_81;
      }
    }
    valuePtr = SocketSetNonBlocking();
    if (valuePtr)
      goto LABEL_37;
    if (*(_DWORD *)(v9 + 124))
    {
      v11 = *(unsigned __int8 *)(v9 + 93);
      if (v11 == 2)
      {
        v12 = v10;
        v13 = 0;
        v14 = 25;
LABEL_29:
        valuePtr = setsockopt(v12, v13, v14, (const void *)(v9 + 124), 4u);
        if (valuePtr)
          goto LABEL_37;
        goto LABEL_30;
      }
      if (v11 == 30)
      {
        v12 = v10;
        v13 = 41;
        v14 = 125;
        goto LABEL_29;
      }
    }
LABEL_30:
    v15 = *(_DWORD *)(v9 + 60);
    if ((v15 & 0xB) != 0)
    {
      SocketSetP2P();
      v15 = *(_DWORD *)(v9 + 60);
    }
    if ((v15 & 0x10) != 0)
    {
      if (gLogCategory_APTransportConnectionTCP <= 30
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)&cf.byte0 = 4;
      setsockopt(v10, 0xFFFF, 4225, &cf, 4u);
    }
    SocketSetQoS();
    v26 = 1;
    setsockopt(v10, 0xFFFF, 4130, &v26, 4u);
    v28 = 1;
    setsockopt(v10, 6, 1, &v28, 4u);
    SocketSetBufferSize();
    if (gLogCategory_APTransportConnectionTCP <= 40
      && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v16 = *(const __CFUUID **)(v9 + 136);
    if (v16)
    {
      cf = CFUUIDGetUUIDBytes(v16);
      setsockopt(v10, 0xFFFF, 4360, &cf, 0x10u);
    }
    valuePtr = SocketConnect();
    if (!valuePtr)
    {
      valuePtr = NetSocket_CreateWithNative();
      if (!valuePtr)
      {
        v17 = *(_QWORD *)(v9 + 184);
        if (!v17)
          goto LABEL_55;
        v18 = *(_QWORD *)(v9 + 192);
        if (!v18)
          goto LABEL_55;
        v19 = tcpconnection_configureEncryptionInternal((uint64_t)a1, v17, v18);
        valuePtr = v19;
        v20 = *(const void **)(v9 + 184);
        if (v20)
        {
          CFRelease(v20);
          *(_QWORD *)(v9 + 184) = 0;
        }
        v21 = *(const void **)(v9 + 192);
        if (v21)
        {
          CFRelease(v21);
          *(_QWORD *)(v9 + 192) = 0;
        }
        if (!v19)
        {
LABEL_55:
          valuePtr = tcpconnection_setupDataSocketReadSource();
          if (!valuePtr)
          {
            v27 = 28;
            v22 = getsockname(v10, (sockaddr *)(v9 + 64), &v27);
            valuePtr = v22;
            if (gLogCategory_APTransportConnectionTCP <= 50
              && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            APTTrafficMetricsConnectionFormed(*(_QWORD *)(v9 + 240));
            if (v22)
            {
              v10 = -1;
              goto LABEL_62;
            }
LABEL_68:
            *(_DWORD *)(v9 + 176) = 5;
            tcpconnection_callEventCallback(a1, 5, 0);
            goto LABEL_69;
          }
        }
      }
    }
    goto LABEL_37;
  }
  v3 = (uint64_t *)CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&cf.byte0 = 0;
  v4 = (const void *)v3[18];
  if (v3[21])
  {
    v24 = 0;
  }
  else
  {
    v5 = v3;
    v6 = APTConnectionListenerCreate(0, -1, (uint64_t)tcpconnection_handleListenerConnected, (uint64_t)v4, (uint64_t)tcpconnection_handleListenerInvalidated, (uint64_t)v4, v3[1], &cf);
    if (v6)
    {
      v24 = v6;
    }
    else
    {
      v7 = APTConnectionListenerResume(*(uint64_t *)&cf.byte0);
      if (!v7)
      {
        if (v4)
          CFRetain(v4);
        v5[21] = *(_QWORD *)&cf.byte0;
        goto LABEL_9;
      }
      v24 = v7;
    }
    APSLogErrorAt();
  }
  if (*(_QWORD *)&cf.byte0)
    CFRelease(*(CFTypeRef *)&cf.byte0);
  if (v4)
    CFRelease(v4);
  if (v24)
LABEL_81:
    APSLogErrorAt();
LABEL_9:
  if (a1)
    CFRelease(a1);
}

void tcpconnection_handleListenerConnected(uint64_t a1, uint64_t a2, int a3)
{
  const void *v4;
  uint64_t DerivedStorage;
  const __CFUUID *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void *v10;
  const void *v11;
  const void *v12;
  CFNumberRef v13;
  uint64_t v14;
  int v15;
  _BYTE v16[28];
  int valuePtr;

  valuePtr = 0;
  if (!a2)
  {
    APSLogErrorAt();
    valuePtr = -72322;
    APSSignalErrorAt();
    v15 = 0;
    v4 = 0;
    DerivedStorage = 0;
LABEL_32:
    if ((a3 & 0x80000000) == 0 && close(a3) && *__error())
      __error();
    if (DerivedStorage)
    {
      if (v15)
        goto LABEL_17;
      v14 = 4;
      *(_DWORD *)(DerivedStorage + 176) = 4;
      v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    if (!v4)
      goto LABEL_23;
    goto LABEL_18;
  }
  v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4)
  {
    DerivedStorage = 0;
    goto LABEL_30;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
LABEL_30:
    v15 = 1;
    goto LABEL_32;
  }
  SocketSetQoS();
  v6 = *(const __CFUUID **)(DerivedStorage + 136);
  if (v6)
  {
    *(CFUUIDBytes *)v16 = CFUUIDGetUUIDBytes(v6);
    setsockopt(a3, 0xFFFF, 4360, v16, 0x10u);
  }
  valuePtr = NetSocket_CreateWithNative();
  if (valuePtr)
    goto LABEL_31;
  v7 = *(_QWORD *)(DerivedStorage + 184);
  if (v7)
  {
    v8 = *(_QWORD *)(DerivedStorage + 192);
    if (v8)
    {
      v9 = tcpconnection_configureEncryptionInternal((uint64_t)v4, v7, v8);
      valuePtr = v9;
      v10 = *(const void **)(DerivedStorage + 184);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(DerivedStorage + 184) = 0;
      }
      v11 = *(const void **)(DerivedStorage + 192);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(DerivedStorage + 192) = 0;
      }
      if (v9)
        goto LABEL_31;
    }
  }
  valuePtr = tcpconnection_setupDataSocketReadSource();
  if (valuePtr)
  {
LABEL_31:
    APSLogErrorAt();
    v15 = 0;
    goto LABEL_32;
  }
  APSNetworkAddressGetSocketAddr();
  *(_OWORD *)(DerivedStorage + 92) = *(_OWORD *)v16;
  *(_OWORD *)(DerivedStorage + 104) = *(_OWORD *)&v16[12];
  APTConnectionListenerInvalidate(*(_QWORD *)(DerivedStorage + 168));
  v12 = *(const void **)(DerivedStorage + 168);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
LABEL_17:
  v13 = 0;
  v14 = 5;
  *(_DWORD *)(DerivedStorage + 176) = 5;
  if (!v4)
    goto LABEL_23;
LABEL_18:
  if (gLogCategory_APTransportConnectionTCP <= 50
    && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  tcpconnection_callEventCallback(v4, v14, v13);
LABEL_23:
  if (v13)
    CFRelease(v13);
  if (v4)
    CFRelease(v4);
}

void tcpconnection_handleListenerInvalidated(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t tcpconnection_configureEncryptionInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, CFDataRef *, _QWORD, CFDataRef *);
  uint64_t v7;
  uint64_t v8;
  CFDataRef v10;
  CFDataRef theData;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  theData = 0;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFDataRef *, _QWORD, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 64);
  if (!v6)
  {
    v8 = 4294954514;
    goto LABEL_9;
  }
  v7 = v6(a2, a3, 0, &theData, 0, &v10);
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_9;
  }
  if (CFDataGetLength(theData) <= 31)
  {
    v8 = 4294894974;
    goto LABEL_9;
  }
  if (CFDataGetLength(v10) <= 31)
  {
    v8 = 4294894974;
    goto LABEL_9;
  }
  if (*(_BYTE *)(DerivedStorage + 56))
  {
    CFDataGetBytePtr(v10);
    CFDataGetBytePtr(theData);
    v8 = NetSocketChaCha20Poly1305Configure();
    if (!(_DWORD)v8)
      goto LABEL_11;
    goto LABEL_9;
  }
  CFDataGetBytePtr(theData);
  CFDataGetBytePtr(v10);
  v8 = NetSocketChaCha20Poly1305Configure();
  if ((_DWORD)v8)
LABEL_9:
    APSLogErrorAt();
LABEL_11:
  if (theData)
    CFRelease(theData);
  if (v10)
    CFRelease(v10);
  return v8;
}

uint64_t tcpconnection_setupDataSocketReadSource()
{
  uint64_t DerivedStorage;
  uintptr_t v1;
  uint64_t v2;
  dispatch_source_t v3;
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(unsigned int *)(*(_QWORD *)(DerivedStorage + 152) + 4);
  if ((v1 & 0x80000000) != 0)
  {
    APSLogErrorAt();
    v9 = 4294894972;
LABEL_10:
    APSSignalErrorAt();
    return v9;
  }
  v2 = DerivedStorage;
  v3 = dispatch_source_create(MEMORY[0x1E0C80DB8], v1, 0, *(dispatch_queue_t *)(DerivedStorage + 8));
  *(_QWORD *)(v2 + 160) = v3;
  if (!v3 || (v4 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL)) == 0)
  {
    v9 = 4294894973;
    APSLogErrorAt();
    goto LABEL_10;
  }
  v5 = v4;
  v6 = *(CFTypeRef *)(v2 + 144);
  if (v6)
    v6 = CFRetain(v6);
  v8 = *(_QWORD *)(v2 + 152);
  v7 = *(NSObject **)(v2 + 160);
  *v5 = v6;
  v5[1] = v8;
  dispatch_source_set_event_handler_f(v7, (dispatch_function_t)tcpconnection_receivedData);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v2 + 160), (dispatch_function_t)tcpconnection_readSourceCancelledCallback);
  dispatch_set_context(*(dispatch_object_t *)(v2 + 160), v5);
  dispatch_resume(*(dispatch_object_t *)(v2 + 160));
  return 0;
}

_BYTE *tcpconnection_callEventCallback(const void *a1, uint64_t a2, const void *a3)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3)
      CFRetain(a3);
    if (a1)
      CFRetain(a1);
    return (_BYTE *)APSDispatchAsyncFHelper();
  }
  return result;
}

void tcpconnection_receivedData(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  const __CFAllocator *v5;
  const __CFAllocator *v6;
  int v7;
  uint64_t v8;
  CFNumberRef v9;
  CFTypeRef cf;
  CMBlockBufferRef theBuffer;
  char *dataPointerOut;
  CMBlockBufferRef targetBBuf;
  char *v14;
  uint64_t valuePtr;

  v1 = *a1;
  valuePtr = 0;
  targetBBuf = 0;
  v14 = 0;
  theBuffer = 0;
  dataPointerOut = 0;
  cf = 0;
  if (v1)
  {
    v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v2)
      goto LABEL_18;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)DerivedStorage)
    {
      v4 = DerivedStorage;
      if (*(_DWORD *)(DerivedStorage + 176) == 5)
      {
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
        HIDWORD(valuePtr) = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(unsigned int *)(DerivedStorage + 200), (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, *(unsigned int *)(DerivedStorage + 200), 1u, &theBuffer);
        if (HIDWORD(valuePtr))
          goto LABEL_33;
        HIDWORD(valuePtr) = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
        if (HIDWORD(valuePtr))
          goto LABEL_33;
        v7 = (*(uint64_t (**)(void))(*(_QWORD *)(v4 + 152) + 24))();
        HIDWORD(valuePtr) = v7;
        if (v7)
        {
          if (v7 != -6723)
            APSLogErrorAt();
          v8 = CMBaseObjectGetDerivedStorage();
          if (!*(_BYTE *)v8)
          {
            APTTrafficMetricsConnectionClosed(*(_QWORD *)(v8 + 240));
            tcpconnection_cleanUp();
          }
          v9 = CFNumberCreate(v5, kCFNumberSInt32Type, (char *)&valuePtr + 4);
          tcpconnection_callEventCallback(v2, 6, v9);
          if (v9)
            CFRelease(v9);
          goto LABEL_16;
        }
        if ((HIDWORD(valuePtr) = (*(uint64_t (**)(CMBlockBufferRef, uint64_t *))(v4 + 208))(theBuffer, &valuePtr)) != 0|| (_DWORD)valuePtr&& ((HIDWORD(valuePtr) = CMBlockBufferCreateWithMemoryBlock(v5, 0, valuePtr, v6, 0, 0, valuePtr, 1u, &targetBBuf)) != 0|| (HIDWORD(valuePtr) = CMBlockBufferGetDataPointer(targetBBuf, 0, 0, 0, &v14)) != 0|| (HIDWORD(valuePtr) = (*(uint64_t (**)(void))(*(_QWORD *)(v4 + 152) + 24))()) != 0|| (HIDWORD(valuePtr) = CMBlockBufferAppendBufferReference(theBuffer, targetBBuf, 0, 0, 0)) != 0)|| (HIDWORD(valuePtr) = (*(uint64_t (**)(const __CFAllocator *, CMBlockBufferRef, CFTypeRef *))(v4 + 216))(v5, theBuffer,
                                    &cf)) != 0)
        {
LABEL_33:
          APSLogErrorAt();
        }
        else
        {
          tcpconnection_callEventCallback(v2, 7, cf);
        }
      }
      else
      {
        HIDWORD(valuePtr) = -72320;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    HIDWORD(valuePtr) = -72322;
    APSSignalErrorAt();
    v2 = 0;
  }
LABEL_16:
  if (cf)
    CFRelease(cf);
LABEL_18:
  if (theBuffer)
    CFRelease(theBuffer);
  if (targetBBuf)
    CFRelease(targetBBuf);
  if (v2)
    CFRelease(v2);
}

void tcpconnection_readSourceCancelledCallback(CFTypeRef *a1)
{
  NetSocket_Delete();
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

void tcpconnection_deferCallEventCallback(CFTypeRef *a1)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40))
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)tcpconnection_callEventCallbackOnEventQueue);
  v3 = a1[2];
  if (v3)
    CFRelease(v3);
  if (*a1)
    CFRelease(*a1);
}

uint64_t tcpconnection_callEventCallbackOnEventQueue(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 40))(*(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(DerivedStorage + 32));
}

void tcpconnection_addEventCallbackInternal(uint64_t a1)
{
  NSObject *v2;

  tcpconnection_setEventCallback(a1);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_release(v2);
}

uint64_t tcpconnection_setEventCallback(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)(a1 + 8);
  v3 = *(NSObject **)(DerivedStorage + 48);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(DerivedStorage + 48) = v4;
    dispatch_retain(v4);
  }
  return 0;
}

uint64_t tcpconnection_acquirePackageInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t (*v3)(CFAllocatorRef, _QWORD);
  CFAllocatorRef v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v6 = 4294954511;
    APSSignalErrorAt();
  }
  else
  {
    v3 = *(uint64_t (**)(CFAllocatorRef, _QWORD))(DerivedStorage + 224);
    v4 = CFGetAllocator(*(CFTypeRef *)a1);
    v5 = v3(v4, *(_QWORD *)(a1 + 8));
    if ((_DWORD)v5)
    {
      v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      if (gLogCategory_APTransportConnectionTCP <= 30
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  return v6;
}

uint64_t tcpconnection_acquirePackageWithMessageSizeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t (*v3)(CFAllocatorRef, _QWORD, _QWORD);
  CFAllocatorRef v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v6 = 4294954511;
    APSSignalErrorAt();
  }
  else
  {
    v3 = *(uint64_t (**)(CFAllocatorRef, _QWORD, _QWORD))(DerivedStorage + 232);
    v4 = CFGetAllocator(*(CFTypeRef *)a1);
    v5 = v3(v4, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    if ((_DWORD)v5)
    {
      v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      if (gLogCategory_APTransportConnectionTCP <= 30
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  return v6;
}

void tcpconnection_sendPackageInternal(const void **a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  uint64_t (*v5)(const void *);
  uint64_t v6;
  OpaqueCMBlockBuffer *v7;
  const void *v8;
  void (*v9)(const void *);
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_11;
  v3 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 176) != 5)
  {
    APSLogErrorAt();
    goto LABEL_12;
  }
  v4 = a1[1];
  v5 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v5 || (v6 = v5(v4)) == 0)
  {
LABEL_11:
    APSLogErrorAt();
    APSSignalErrorAt();
LABEL_12:
    v7 = 0;
    goto LABEL_13;
  }
  v7 = (OpaqueCMBlockBuffer *)v6;
  if (!FigMakeIOVecArrayWithBlockBuffer())
  {
    CMBlockBufferGetDataLength(v7);
    APTTrafficMetricsSendStarted(*(_QWORD *)(v3 + 240));
    if (!(*(unsigned int (**)(void))(*(_QWORD *)(v3 + 152) + 40))())
    {
      if (gLogCategory_APTransportConnectionTCP <= 10
        && (gLogCategory_APTransportConnectionTCP != -1 || _LogCategory_Initialize()))
      {
        v8 = a1[1];
        v9 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v9)
          v9(v8);
        LogPrintF();
      }
      APTTrafficMetricsSendFinished(*(_QWORD *)(v3 + 240));
      goto LABEL_19;
    }
  }
  APSLogErrorAt();
LABEL_13:
  tcpconnection_callEventCallback(*a1, 8, a1[1]);
  if (v7)
LABEL_19:
    CFRelease(v7);
  v10 = a1[1];
  if (v10)
    CFRelease(v10);
  if (*a1)
    CFRelease(*a1);
}

void tcpconnection_deferConfigureEncryption(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 176) == 5)
  {
    tcpconnection_configureEncryptionInternal(*a1, a1[1], a1[2]);
  }
  else
  {
    v3 = DerivedStorage;
    v4 = *(const void **)(DerivedStorage + 184);
    v5 = (const void *)a1[1];
    *(_QWORD *)(v3 + 184) = v5;
    if (v5)
      CFRetain(v5);
    if (v4)
      CFRelease(v4);
    v6 = *(const void **)(v3 + 192);
    v7 = (const void *)a1[2];
    *(_QWORD *)(v3 + 192) = v7;
    if (v7)
      CFRetain(v7);
    if (v6)
      CFRelease(v6);
  }
  CFRelease((CFTypeRef)*a1);
  CFRelease((CFTypeRef)a1[1]);
  CFRelease((CFTypeRef)a1[2]);
}

uint64_t APBrowserDeviceQueryManagerGetInfoCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  _QWORD *DerivedStorage;
  dispatch_queue_t v5;
  dispatch_queue_t v6;
  CFMutableDictionaryRef Mutable;
  uint64_t v8;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  APBrowserDeviceQueryManagerGetClassID();
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
  {
    v8 = v3;
LABEL_11:
    APSLogErrorAt();
    return v8;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v5 = dispatch_queue_create("APBrowserDeviceQueryManagerGetInfo.queue", 0);
  DerivedStorage[1] = v5;
  if (!v5)
  {
    v8 = 4294895066;
    goto LABEL_11;
  }
  v6 = dispatch_queue_create("APBrowserDeviceQueryManagerGetInfo.eventQueue", 0);
  *DerivedStorage = v6;
  if (!v6)
  {
    v8 = 4294895066;
    goto LABEL_11;
  }
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  DerivedStorage[3] = Mutable;
  if (!Mutable)
  {
    v8 = 4294895066;
    goto LABEL_11;
  }
  v8 = 0;
  *a1 = 0;
  return v8;
}

uint64_t queryManagerGetInfo_Invalidate(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __queryManagerGetInfo_Invalidate_block_invoke;
  v5[3] = &unk_1E82557F8;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void queryManagerGetInfo_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  NSObject *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v2 = *(NSObject **)(DerivedStorage + 8);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

uint64_t __queryManagerGetInfo_invalidateInternal_block_invoke()
{
  return HTTPClientInvalidate();
}

uint64_t queryManagerGetInfo_QueryDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  uint64_t v13;
  _QWORD block[11];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  v12 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __queryManagerGetInfo_QueryDevice_block_invoke;
  block[3] = &unk_1E8255860;
  block[4] = &v16;
  block[5] = a1;
  block[6] = a2;
  block[7] = a3;
  block[8] = a4;
  block[9] = a5;
  block[10] = a6;
  dispatch_sync(v12, block);
  v13 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(&v16, 8);
  return v13;
}

void __queryManagerGetInfo_queryDeviceInternal_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, __CFDictionary *, uint64_t, uint64_t);
  uint64_t v10;
  __CFDictionary *v11;
  int v12;

  if (!*(_DWORD *)(a2 + 9648) && (*(_DWORD *)(a2 + 8456) - 200) <= 0x63)
  {
    if (HTTPClientGetSelfAddress())
    {
      if (gLogCategory_APBrowserDeviceQueryManagerGetInfo <= 60
        && (gLogCategory_APBrowserDeviceQueryManagerGetInfo != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      SockAddrToString();
    }
  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v7 = *(const void **)(a1 + 56);
  v6 = *(const void **)(a1 + 64);
  v9 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t, uint64_t))(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APBrowserDeviceQueryManagerGetInfo <= 40
    && (gLogCategory_APBrowserDeviceQueryManagerGetInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10 = *(unsigned int *)(a2 + 9648);
  if ((_DWORD)v10)
  {
    v11 = 0;
    if (!v9)
      goto LABEL_21;
    goto LABEL_20;
  }
  v12 = *(_DWORD *)(a2 + 8456);
  if ((v12 - 200) > 0x63)
  {
    v11 = 0;
    v10 = (v12 + 200000);
    if (!v9)
      goto LABEL_21;
    goto LABEL_20;
  }
  CFDictionaryGetTypeID();
  v11 = (__CFDictionary *)CFCreateWithPlistBytes();
  CFDictionarySetValue(v11, CFSTR("address"), v7);
  CFDictionarySetValue(v11, CFSTR("controlPort"), v6);
  v10 = 0;
  if (v9)
LABEL_20:
    v9(v4, v5, v11, v8, v10);
LABEL_21:
  if (v11)
    CFRelease(v11);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 88) + 24), *(const void **)(a1 + 48));
  HTTPClientInvalidate();
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 56));
  CFRelease(*(CFTypeRef *)(a1 + 64));
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t APAdvertiserInfoGetTypeID()
{
  if (APAdvertiserInfoGetTypeID_initOnce != -1)
    dispatch_once_f(&APAdvertiserInfoGetTypeID_initOnce, &APAdvertiserInfoGetTypeID_typeID, (dispatch_function_t)_APAdvertiserInfoClassRegister);
  return APAdvertiserInfoGetTypeID_typeID;
}

uint64_t _APAdvertiserInfoClassRegister(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APAdvertiserInfoCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t Instance;
  const void *v4;
  pthread_mutex_t *v5;
  uint64_t v6;

  if (APAdvertiserInfoGetTypeID_initOnce != -1)
    dispatch_once_f(&APAdvertiserInfoGetTypeID_initOnce, &APAdvertiserInfoGetTypeID_typeID, (dispatch_function_t)_APAdvertiserInfoClassRegister);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v4 = (const void *)Instance;
    *(_OWORD *)(Instance + 16) = 0u;
    v5 = (pthread_mutex_t *)(Instance + 16);
    *(_QWORD *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_QWORD *)(Instance + 80) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v6 = pthread_mutex_init(v5, 0);
    if ((_DWORD)v6)
    {
      APSLogErrorAt();
      CFRelease(v4);
    }
    else
    {
      *a2 = v4;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return v6;
}

uint64_t APAdvertiserInfoCreateWithData(const __CFAllocator *a1, const __CFData *a2, _QWORD *a3)
{
  const __CFData *v3;
  uint64_t v6;
  _QWORD *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v11;
  CFTypeRef cf;

  v3 = a2;
  v11 = 0;
  cf = 0;
  if (!a2)
  {
    APSLogErrorAt();
LABEL_13:
    v9 = 4294960591;
    goto LABEL_17;
  }
  if (!a3)
  {
    APSLogErrorAt();
    v3 = 0;
    goto LABEL_13;
  }
  v6 = APAdvertiserInfoCreate((uint64_t)a1, &cf);
  if ((_DWORD)v6)
  {
    v9 = v6;
    APSLogErrorAt();
    v3 = 0;
  }
  else
  {
    v3 = (const __CFData *)CFPropertyListCreateWithData(a1, v3, 2uLL, (CFPropertyListFormat *)&v11, 0);
    if (v3)
    {
      if (v11 == 200)
      {
        v7 = cf;
        v8 = (const void *)*((_QWORD *)cf + 10);
        if (v8)
          CFRelease(v8);
        v9 = 0;
        v7[10] = CFRetain(v3);
        *a3 = v7;
        cf = 0;
LABEL_9:
        CFRelease(v3);
        return v9;
      }
      APSLogErrorAt();
      v9 = 4294960579;
    }
    else
    {
      APSLogErrorAt();
      v9 = 4294960534;
    }
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (v3)
    goto LABEL_9;
  return v9;
}

const void *APAdvertiserInfoCopyProperty(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, int *a5)
{
  const void *v6;
  pthread_mutex_t *v8;
  const void *Value;
  int v10;

  v6 = a3;
  if (!a3)
  {
    APSLogErrorAt();
    v10 = -6705;
    if (!a5)
      return v6;
    goto LABEL_6;
  }
  v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), v6);
  v6 = Value;
  if (Value)
  {
    CFRetain(Value);
    pthread_mutex_unlock(v8);
    v10 = 0;
    if (!a5)
      return v6;
    goto LABEL_6;
  }
  pthread_mutex_unlock(v8);
  v10 = -6727;
  if (a5)
LABEL_6:
    *a5 = v10;
  return v6;
}

uint64_t APAdvertiserInfoSetProperty(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, const void *a5)
{
  pthread_mutex_t *v8;
  uint64_t v9;
  const __CFDictionary *v10;
  CFTypeID v11;
  uint64_t v12;
  const __CFString *v14;
  uint64_t valuePtr;

  if (!a3 || !a5)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (CFEqual(a3, CFSTR("featuresEx")))
  {
    v9 = _APAdvertiserInfoSetFeaturesEx(*(__CFDictionary **)(a1 + 80), a5);
  }
  else
  {
    if (!CFEqual(a3, CFSTR("features")))
    {
      if (CFEqual(a3, CFSTR("requiredSenderFeatures")))
        v14 = CFSTR("requiredSenderFeatures");
      else
        v14 = a3;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), v14, a5);
      v12 = 0;
      goto LABEL_9;
    }
    v10 = *(const __CFDictionary **)(a1 + 80);
    valuePtr = 0;
    v11 = CFGetTypeID(a5);
    if (v11 != CFNumberGetTypeID())
    {
      APSLogErrorAt();
      v12 = 4294960591;
      goto LABEL_9;
    }
    CFNumberGetValue((CFNumberRef)a5, kCFNumberSInt64Type, &valuePtr);
    v9 = _APAdvertiserInfoSetLegacyFeatures(v10);
  }
  v12 = v9;
LABEL_9:
  pthread_mutex_unlock(v8);
  return v12;
}

uint64_t _APAdvertiserInfoSetFeaturesEx(__CFDictionary *a1, CFTypeRef cf)
{
  CFTypeID v4;
  unsigned int v6;

  v6 = 0;
  if (cf && (v4 = CFGetTypeID(cf), v4 == CFDataGetTypeID()))
  {
    CFDictionarySetValue(a1, CFSTR("featuresEx"), cf);
    APSFeaturesGetLegacyFlags();
    CFDictionarySetInt64();
  }
  else
  {
    APSLogErrorAt();
    return -6705;
  }
  return v6;
}

uint64_t APAdvertiserInfoCreateData(uint64_t a1, CFDataRef *a2)
{
  pthread_mutex_t *v4;
  const __CFAllocator *v5;
  CFDataRef Data;
  uint64_t v7;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (a2)
  {
    v5 = CFGetAllocator((CFTypeRef)a1);
    Data = CFPropertyListCreateData(v5, *(CFPropertyListRef *)(a1 + 80), kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (Data)
    {
      v7 = 0;
      *a2 = Data;
    }
    else
    {
      APSLogErrorAt();
      v7 = 4294960534;
    }
  }
  else
  {
    APSLogErrorAt();
    v7 = 4294960591;
  }
  pthread_mutex_unlock(v4);
  return v7;
}

uint64_t APAdvertiserInfoCreateWithRAOPAndAirPlayDataAndDeviceName(uint64_t a1, const __CFData *a2, unint64_t a3, const __CFString *a4, CFMutableDictionaryRef **a5)
{
  CFMutableDictionaryRef *v9;
  CFTypeRef v10;
  uint64_t BitListValueFromTXTRecord;
  uint64_t BooleanFromTXTRecord;
  uint64_t v13;
  const void **v14;
  uint64_t v15;
  uint64_t Int64FromTXTRecord;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const void **v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  CFTypeRef v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  const void **v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  const void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  const void **v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  const void **v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  CFTypeRef cf;
  CFMutableDictionaryRef *v101;
  CFTypeRef v102;
  uint64_t v103;
  BOOL v104;
  void *value;

  cf = 0;
  v101 = 0;
  if (!a4)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (!((unint64_t)a2 | a3))
  {
    APSLogErrorAt();
    v13 = 4294960591;
    goto LABEL_287;
  }
  APAdvertiserInfoCreate(a1, &v101);
  v9 = v101;
  if (!v101)
  {
    APSLogErrorAt();
    v13 = 4294960568;
    goto LABEL_287;
  }
  _APAdvertiserInfoCopyAndRemoveMDNSLabelSuffix(a4, (__CFString **)&cf);
  if (cf)
    v10 = cf;
  else
    v10 = a4;
  CFDictionarySetValue(v9[10], CFSTR("deviceName"), v10);
  if (!a2)
    goto LABEL_73;
  v104 = 0;
  value = 0;
  v103 = 0;
  LODWORD(v102) = 0;
  BitListValueFromTXTRecord = APAdvertiserInfoGetBitListValueFromTXTRecord(CFSTR("cn"), a2, &v102);
  if ((_DWORD)BitListValueFromTXTRecord)
  {
    v13 = BitListValueFromTXTRecord;
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo > 40
      || gLogCategory_APAdvertiserInfo == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_70;
    }
LABEL_191:
    LogPrintF();
    goto LABEL_70;
  }
  CFDictionarySetInt64();
  BooleanFromTXTRecord = APAdvertiserInfoGetBooleanFromTXTRecord(CFSTR("da"), a2, &v104);
  if ((_DWORD)BooleanFromTXTRecord != -6727)
  {
    v13 = BooleanFromTXTRecord;
    if ((_DWORD)BooleanFromTXTRecord)
      goto LABEL_69;
    v14 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v104)
      v14 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v9[10], CFSTR("rfc2617DigestAuthKey"), *v14);
  }
  v15 = APAdvertiserInfoGetBitListValueFromTXTRecord(CFSTR("et"), a2, &v102);
  if ((_DWORD)v15)
  {
    v13 = v15;
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo > 40
      || gLogCategory_APAdvertiserInfo == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_70;
    }
    goto LABEL_191;
  }
  CFDictionarySetInt64();
  Int64FromTXTRecord = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("ft"), a2, &v103);
  if ((_DWORD)Int64FromTXTRecord != -6727)
  {
    v13 = Int64FromTXTRecord;
    if ((_DWORD)Int64FromTXTRecord)
      goto LABEL_69;
    v17 = _APAdvertiserInfoSetLegacyFeatures(v9[10]);
    if ((_DWORD)v17)
    {
      v13 = v17;
      goto LABEL_69;
    }
  }
  v18 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("fv"), a2, (CFStringRef *)&value);
  if ((_DWORD)v18 != -6727)
  {
    v13 = v18;
    if ((_DWORD)v18)
      goto LABEL_69;
    v19 = value;
    CFDictionarySetValue(v9[10], CFSTR("firmwareVersion"), value);
    if (v19)
    {
      CFRelease(v19);
      value = 0;
    }
  }
  v20 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("sf"), a2, &v103);
  if ((_DWORD)v20 != -6727)
  {
    v13 = v20;
    if ((_DWORD)v20)
      goto LABEL_69;
    CFDictionarySetInt64();
  }
  v21 = APAdvertiserInfoGetBitListValueFromTXTRecord(CFSTR("md"), a2, &v102);
  if ((_DWORD)v21 != -6727)
  {
    v13 = v21;
    if ((_DWORD)v21)
      goto LABEL_69;
    CFDictionarySetInt64();
  }
  v22 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("am"), a2, (CFStringRef *)&value);
  if ((_DWORD)v22 != -6727)
  {
    v13 = v22;
    if ((_DWORD)v22)
      goto LABEL_69;
    v23 = value;
    CFDictionarySetValue(v9[10], CFSTR("deviceModel"), value);
    if (v23)
    {
      CFRelease(v23);
      value = 0;
    }
  }
  v24 = APAdvertiserInfoGetBooleanFromTXTRecord(CFSTR("pw"), a2, &v104);
  if ((_DWORD)v24 != -6727)
  {
    v13 = v24;
    if ((_DWORD)v24)
      goto LABEL_69;
    v25 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v104)
      v25 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v9[10], CFSTR("password"), *v25);
  }
  v26 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("pk"), a2, (CFStringRef *)&value);
  if ((_DWORD)v26 != -6727)
  {
    v13 = v26;
    if ((_DWORD)v26)
      goto LABEL_69;
    v27 = value;
    CFDictionarySetValue(v9[10], CFSTR("publicKey"), value);
    if (v27)
    {
      CFRelease(v27);
      value = 0;
    }
  }
  v28 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("tp"), a2, (CFStringRef *)&value);
  if ((_DWORD)v28)
  {
    v13 = v28;
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo > 40
      || gLogCategory_APAdvertiserInfo == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_70;
    }
    goto LABEL_191;
  }
  v29 = value;
  CFDictionarySetValue(v9[10], CFSTR("transportTypes"), value);
  if (v29)
  {
    CFRelease(v29);
    value = 0;
  }
  v30 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("vn"), a2, (CFStringRef *)&value);
  if (!(_DWORD)v30)
  {
    v31 = value;
    CFDictionarySetValue(v9[10], CFSTR("airTunesProtocolVersion"), value);
    if (v31)
    {
      CFRelease(v31);
      value = 0;
    }
    v32 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("vs"), a2, (CFStringRef *)&value);
    if ((_DWORD)v32 != -6727)
    {
      v13 = v32;
      if ((_DWORD)v32)
        goto LABEL_69;
      v33 = value;
      CFDictionarySetValue(v9[10], CFSTR("airPlayVersion"), value);
      if (v33)
      {
        CFRelease(v33);
        value = 0;
      }
    }
    v34 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("ov"), a2, (CFStringRef *)&value);
    if ((_DWORD)v34 == -6727)
    {
LABEL_55:
      v36 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("vv"), a2, &v103);
      if ((_DWORD)v36 == -6727)
      {
        v13 = 0;
        goto LABEL_70;
      }
      v13 = v36;
      if (!(_DWORD)v36)
      {
        CFDictionarySetInt64();
        goto LABEL_70;
      }
      goto LABEL_69;
    }
    v13 = v34;
    if (!(_DWORD)v34)
    {
      v35 = value;
      CFDictionarySetValue(v9[10], CFSTR("OSVersion"), value);
      if (v35)
      {
        CFRelease(v35);
        value = 0;
      }
      goto LABEL_55;
    }
LABEL_69:
    APSLogErrorAt();
    goto LABEL_70;
  }
  v13 = v30;
  APSLogErrorAt();
  if (gLogCategory_APAdvertiserInfo <= 40
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_191;
  }
LABEL_70:
  if (value)
    CFRelease(value);
  if ((_DWORD)v13)
  {
    APSLogErrorAt();
LABEL_291:
    CFRelease(v9);
    goto LABEL_287;
  }
LABEL_73:
  if (!a3)
  {
LABEL_286:
    v13 = 0;
    *a5 = v9;
    goto LABEL_287;
  }
  value = 0;
  v104 = 0;
  v102 = 0;
  v103 = 0;
  v37 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("act"), (const void *)a3, &v103);
  if ((_DWORD)v37 != -6727)
  {
    v13 = v37;
    if ((_DWORD)v37)
      goto LABEL_281;
    CFDictionarySetInt64();
  }
  v38 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("acl"), (const void *)a3, &v103);
  if ((_DWORD)v38 != -6727)
  {
    v13 = v38;
    if ((_DWORD)v38)
      goto LABEL_281;
    CFDictionarySetInt64();
  }
  v39 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("btaddr"), (CFDataRef)a3, (CFStringRef *)&value);
  if ((_DWORD)v39 == -6727)
  {
    v40 = value;
    if (!value)
      goto LABEL_88;
    goto LABEL_87;
  }
  v13 = v39;
  if ((_DWORD)v39)
    goto LABEL_281;
  v40 = value;
  CFDictionarySetValue(v9[10], CFSTR("bluetoothAddress"), value);
  if (v40)
  {
LABEL_87:
    CFRelease(v40);
    value = 0;
  }
LABEL_88:
  v41 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("deviceid"), (CFDataRef)a3, (CFStringRef *)&value);
  if (!(_DWORD)v41)
  {
    v42 = value;
    CFDictionarySetValue(v9[10], CFSTR("deviceID"), value);
    if (v42)
    {
      CFRelease(v42);
      value = 0;
    }
    v43 = APAdvertiserInfoCreateAPSFeaturesFromTXTRecordEx((CFDataRef)a3, CFSTR("fex"), CFSTR("features"), &v102);
    if ((_DWORD)v43 != -6727)
    {
      v13 = v43;
      if ((_DWORD)v43)
        goto LABEL_281;
      v44 = v102;
      _APAdvertiserInfoSetFeaturesEx(v9[10], v102);
      if (v44)
      {
        CFRelease(v44);
        v102 = 0;
      }
    }
    v45 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("rsf"), (const void *)a3, &v103);
    if ((_DWORD)v45 != -6727)
    {
      v13 = v45;
      if ((_DWORD)v45)
        goto LABEL_281;
      CFDictionarySetInt64();
    }
    v46 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("fv"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v46 != -6727)
    {
      v13 = v46;
      if ((_DWORD)v46)
        goto LABEL_281;
      v47 = value;
      CFDictionarySetValue(v9[10], CFSTR("firmwareVersion"), value);
      if (v47)
      {
        CFRelease(v47);
        value = 0;
      }
    }
    v48 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("flags"), (const void *)a3, &v103);
    if ((_DWORD)v48 != -6727)
    {
      v13 = v48;
      if ((_DWORD)v48)
        goto LABEL_281;
      CFDictionarySetInt64();
    }
    v49 = APAdvertiserInfoGetBooleanFromTXTRecord(CFSTR("gcgl"), (const void *)a3, &v104);
    if ((_DWORD)v49 != -6727)
    {
      v13 = v49;
      if ((_DWORD)v49)
        goto LABEL_281;
      v50 = (const void **)MEMORY[0x1E0C9AE50];
      if (!v104)
        v50 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v9[10], CFSTR("groupContainsDiscoverableLeader"), *v50);
    }
    v51 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("gid"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v51 != -6727)
    {
      v13 = v51;
      if ((_DWORD)v51)
        goto LABEL_281;
      v52 = value;
      CFDictionarySetValue(v9[10], CFSTR("groupID"), value);
      if (v52)
      {
        CFRelease(v52);
        value = 0;
      }
    }
    v53 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("gpn"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v53 != -6727)
    {
      v13 = v53;
      if ((_DWORD)v53)
        goto LABEL_281;
      v54 = value;
      CFDictionarySetValue(v9[10], CFSTR("groupPublicName"), value);
      if (v54)
      {
        CFRelease(v54);
        value = 0;
      }
    }
    v55 = APAdvertiserInfoGetBooleanFromTXTRecord(CFSTR("igl"), (const void *)a3, &v104);
    if ((_DWORD)v55 != -6727)
    {
      v13 = v55;
      if ((_DWORD)v55)
        goto LABEL_281;
      v56 = (const void **)MEMORY[0x1E0C9AE50];
      if (!v104)
        v56 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v9[10], CFSTR("isGroupLeader"), *v56);
    }
    v57 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("psgsz"), (const void *)a3, &v103);
    if ((_DWORD)v57 != -6727)
    {
      v13 = v57;
      if ((_DWORD)v57)
        goto LABEL_281;
      CFDictionarySetInt64();
    }
    v58 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("psgtp"), (const void *)a3, &v103);
    if ((_DWORD)v58 != -6727)
    {
      v13 = v58;
      if ((_DWORD)v58)
        goto LABEL_281;
      CFDictionarySetInt64();
    }
    v59 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("psgid"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v59 != -6727)
    {
      v13 = v59;
      if ((_DWORD)v59)
        goto LABEL_281;
      v60 = value;
      CFDictionarySetValue(v9[10], CFSTR("persistentGroupUUID"), value);
      if (v60)
      {
        CFRelease(v60);
        value = 0;
      }
    }
    v61 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("pgm"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v61 != -6727)
    {
      v13 = v61;
      if ((_DWORD)v61)
        goto LABEL_281;
      v62 = value;
      CFDictionarySetValue(v9[10], CFSTR("persistentGroupModel"), value);
      if (v62)
      {
        CFRelease(v62);
        value = 0;
      }
    }
    v63 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("pgmid"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v63 != -6727)
    {
      v13 = v63;
      if ((_DWORD)v63)
        goto LABEL_281;
      v64 = value;
      CFDictionarySetValue(v9[10], CFSTR("persistentGroupMemberID"), value);
      if (v64)
      {
        CFRelease(v64);
        value = 0;
      }
    }
    v65 = APAdvertiserInfoGetBooleanFromTXTRecord(CFSTR("pgcgl"), (const void *)a3, &v104);
    if ((_DWORD)v65 != -6727)
    {
      v13 = v65;
      if ((_DWORD)v65)
        goto LABEL_281;
      v66 = (const void **)MEMORY[0x1E0C9AE50];
      if (!v104)
        v66 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v9[10], CFSTR("parentGroupContainsDiscoverableLeader"), *v66);
    }
    v67 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("pgid"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v67 != -6727)
    {
      v13 = v67;
      if ((_DWORD)v67)
        goto LABEL_281;
      v68 = value;
      CFDictionarySetValue(v9[10], CFSTR("parentGroupID"), value);
      if (v68)
      {
        CFRelease(v68);
        value = 0;
      }
    }
    v69 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("tsid"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v69 != -6727)
    {
      v13 = v69;
      if ((_DWORD)v69)
        goto LABEL_281;
      v70 = value;
      CFDictionarySetValue(v9[10], CFSTR("tightSyncUUID"), value);
      if (v70)
      {
        CFRelease(v70);
        value = 0;
      }
    }
    v71 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("tsm"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v71 != -6727)
    {
      v13 = v71;
      if ((_DWORD)v71)
        goto LABEL_281;
      v72 = value;
      CFDictionarySetValue(v9[10], CFSTR("tightSyncGroupModel"), value);
      if (v72)
      {
        CFRelease(v72);
        value = 0;
      }
    }
    v73 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("model"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v73 != -6727)
    {
      v13 = v73;
      if ((_DWORD)v73)
        goto LABEL_281;
      v74 = value;
      CFDictionarySetValue(v9[10], CFSTR("deviceModel"), value);
      if (v74)
      {
        CFRelease(v74);
        value = 0;
      }
    }
    v75 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("c"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v75 != -6727)
    {
      v13 = v75;
      if ((_DWORD)v75)
        goto LABEL_281;
      v76 = value;
      if (APSIsValidDeviceEnclosureColorString())
      {
        CFDictionarySetValue(v9[10], CFSTR("deviceEnclosureColor"), v76);
      }
      else if (gLogCategory_APAdvertiserInfo <= 60
             && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v76)
      {
        CFRelease(v76);
        value = 0;
      }
    }
    v77 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("manufacturer"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v77 != -6727)
    {
      v13 = v77;
      if ((_DWORD)v77)
        goto LABEL_281;
      v78 = value;
      CFDictionarySetValue(v9[10], CFSTR("manufacturer"), value);
      if (v78)
      {
        CFRelease(v78);
        value = 0;
      }
    }
    v79 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("company"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v79 != -6727)
    {
      v13 = v79;
      if ((_DWORD)v79)
        goto LABEL_281;
      v80 = value;
      CFDictionarySetValue(v9[10], CFSTR("company"), value);
      if (v80)
      {
        CFRelease(v80);
        value = 0;
      }
    }
    v81 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("serialNumber"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v81 != -6727)
    {
      v13 = v81;
      if ((_DWORD)v81)
        goto LABEL_281;
      v82 = value;
      CFDictionarySetValue(v9[10], CFSTR("serialNumber"), value);
      if (v82)
      {
        CFRelease(v82);
        value = 0;
      }
    }
    v83 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("at"), (const void *)a3, &v103);
    if ((_DWORD)v83 != -6727)
    {
      v13 = v83;
      if ((_DWORD)v83)
        goto LABEL_281;
      CFDictionarySetInt64();
    }
    v84 = APAdvertiserInfoGetBooleanFromTXTRecord(CFSTR("pw"), (const void *)a3, &v104);
    if ((_DWORD)v84 != -6727)
    {
      v13 = v84;
      if ((_DWORD)v84)
        goto LABEL_281;
      v85 = (const void **)MEMORY[0x1E0C9AE50];
      if (!v104)
        v85 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v9[10], CFSTR("password"), *v85);
    }
    v86 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("protovers"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v86 != -6727)
    {
      v13 = v86;
      if ((_DWORD)v86)
        goto LABEL_281;
      v87 = value;
      CFDictionarySetValue(v9[10], CFSTR("protocolVersion"), value);
      if (v87)
      {
        CFRelease(v87);
        value = 0;
      }
    }
    v88 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("pi"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v88 != -6727)
    {
      v13 = v88;
      if ((_DWORD)v88)
        goto LABEL_281;
      v89 = value;
      CFDictionarySetValue(v9[10], CFSTR("publicCUAirPlayPairingIdentity"), value);
      if (v89)
      {
        CFRelease(v89);
        value = 0;
      }
    }
    v90 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("psi"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v90 != -6727)
    {
      v13 = v90;
      if ((_DWORD)v90)
        goto LABEL_281;
      v91 = value;
      CFDictionarySetValue(v9[10], CFSTR("publicCUSystemPairingIdentity"), value);
      if (v91)
      {
        CFRelease(v91);
        value = 0;
      }
    }
    v92 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("pk"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v92 != -6727)
    {
      v13 = v92;
      if ((_DWORD)v92)
        goto LABEL_281;
      v93 = value;
      CFDictionarySetValue(v9[10], CFSTR("publicKey"), value);
      if (v93)
      {
        CFRelease(v93);
        value = 0;
      }
    }
    v94 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("srcvers"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v94 != -6727)
    {
      v13 = v94;
      if ((_DWORD)v94)
        goto LABEL_281;
      v95 = value;
      CFDictionarySetValue(v9[10], CFSTR("airPlayVersion"), value);
      if (v95)
      {
        CFRelease(v95);
        value = 0;
      }
    }
    v96 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("osvers"), (CFDataRef)a3, (CFStringRef *)&value);
    if ((_DWORD)v96 == -6727)
    {
LABEL_262:
      v98 = APAdvertiserInfoGetInt64FromTXTRecord(CFSTR("vv"), (const void *)a3, &v103);
      if ((_DWORD)v98 == -6727)
      {
        v13 = 0;
        goto LABEL_282;
      }
      v13 = v98;
      if (!(_DWORD)v98)
      {
        CFDictionarySetInt64();
        goto LABEL_282;
      }
      goto LABEL_281;
    }
    v13 = v96;
    if (!(_DWORD)v96)
    {
      v97 = value;
      CFDictionarySetValue(v9[10], CFSTR("OSVersion"), value);
      if (v97)
      {
        CFRelease(v97);
        value = 0;
      }
      goto LABEL_262;
    }
LABEL_281:
    APSLogErrorAt();
    goto LABEL_282;
  }
  v13 = v41;
  APSLogErrorAt();
  if (gLogCategory_APAdvertiserInfo <= 40
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_282:
  if (value)
    CFRelease(value);
  if (!(_DWORD)v13)
  {
    v9 = v101;
    goto LABEL_286;
  }
  APSLogErrorAt();
  v9 = v101;
  if (v101)
    goto LABEL_291;
LABEL_287:
  if (cf)
    CFRelease(cf);
  return v13;
}

void _APAdvertiserInfoCopyAndRemoveMDNSLabelSuffix(const __CFString *a1, __CFString **a2)
{
  CFIndex Length;
  uint64_t v5;
  const __CFAllocator *v6;
  const __CFString *v7;
  __CFNumberFormatter *v8;
  CFNumberRef v9;
  CFIndex v10;
  CFStringRef v11;
  const __CFString *v12;
  CFIndex v13;
  __CFString *MutableCopy;
  __CFString *v15;
  CFRange v16;
  CFRange result;
  CFRange v18;
  CFRange v19;

  if (a1)
  {
    if (CFStringHasSuffix(a1, CFSTR(")")))
    {
      result.location = 0;
      result.length = 0;
      Length = CFStringGetLength(a1);
      v18.location = 0;
      v18.length = Length;
      if (CFStringFindWithOptions(a1, CFSTR(" ("), v18, 4uLL, &result))
      {
        v5 = Length - result.location;
        result.length = Length - result.location;
        if (result.location)
        {
          if (v5 >= 4)
          {
            v19.location = result.location + 2;
            v19.length = v5 - 3;
            v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v7 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v19);
            v16.location = 0;
            v16.length = CFStringGetLength(v7);
            v8 = CFNumberFormatterCreate(v6, 0, kCFNumberFormatterNoStyle);
            if (v8)
            {
              v9 = CFNumberFormatterCreateNumberFromString(v6, v8, v7, &v16, 1uLL);
              if (v9)
              {
                v10 = v16.length;
                if (v10 == CFStringGetLength(v7))
                {
                  v11 = CFStringCreateWithSubstring(v6, a1, result);
                  if (v11)
                  {
                    v12 = v11;
                    v13 = CFStringGetLength(a1);
                    MutableCopy = CFStringCreateMutableCopy(v6, v13, a1);
                    if (MutableCopy)
                    {
                      v15 = MutableCopy;
                      CFStringTrim(MutableCopy, v12);
                      *a2 = v15;
                    }
                    else
                    {
                      APSLogErrorAt();
                    }
                    CFRelease(v12);
                  }
                  else
                  {
                    APSLogErrorAt();
                  }
                }
              }
            }
            else
            {
              APSLogErrorAt();
              v9 = 0;
            }
            if (v7)
              CFRelease(v7);
            if (v8)
              CFRelease(v8);
            if (v9)
              CFRelease(v9);
          }
        }
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t APAdvertiserInfoCreateWithSidePlayDataAndDeviceName(uint64_t a1, const __CFData *a2, const __CFString *a3, CFMutableDictionaryRef **a4)
{
  const __CFString *v6;
  CFMutableDictionaryRef *v7;
  __CFString *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  __CFString *v23;
  CFMutableDictionaryRef *v24;
  CFTypeRef cf;
  void *value;

  v23 = 0;
  v24 = 0;
  if (!a3 || !a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  v6 = a3;
  APAdvertiserInfoCreate(a1, &v24);
  v7 = v24;
  if (!v24)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  _APAdvertiserInfoCopyAndRemoveMDNSLabelSuffix(v6, &v23);
  v8 = v23;
  if (v23)
    v6 = v23;
  CFDictionarySetValue(v7[10], CFSTR("deviceName"), v6);
  cf = 0;
  value = 0;
  v9 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("id"), a2, (CFStringRef *)&value);
  if ((_DWORD)v9)
  {
    v12 = v9;
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo <= 40
      && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
LABEL_37:
    v21 = value;
    if (!value)
      goto LABEL_39;
    goto LABEL_38;
  }
  v10 = value;
  CFDictionarySetValue(v7[10], CFSTR("deviceID"), value);
  if (v10)
  {
    CFRelease(v10);
    value = 0;
  }
  v11 = APAdvertiserInfoCreateAPSFeaturesFromTXTRecordEx(a2, CFSTR("f"), 0, &cf);
  if ((_DWORD)v11 == -6727)
  {
    v13 = (const void *)APSFeaturesCreateFromLegacyFlags();
  }
  else
  {
    v12 = v11;
    if ((_DWORD)v11)
      goto LABEL_36;
    v13 = cf;
  }
  _APAdvertiserInfoSetFeaturesEx(v7[10], v13);
  if (v13)
    CFRelease(v13);
  v14 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("mfg"), a2, (CFStringRef *)&value);
  if ((_DWORD)v14 != -6727)
  {
    v12 = v14;
    if ((_DWORD)v14)
      goto LABEL_36;
    v15 = value;
    CFDictionarySetValue(v7[10], CFSTR("manufacturer"), value);
    if (v15)
    {
      CFRelease(v15);
      value = 0;
    }
  }
  v16 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("mdl"), a2, (CFStringRef *)&value);
  if ((_DWORD)v16 != -6727)
  {
    v12 = v16;
    if ((_DWORD)v16)
      goto LABEL_36;
    v17 = value;
    CFDictionarySetValue(v7[10], CFSTR("deviceModel"), value);
    if (v17)
    {
      CFRelease(v17);
      value = 0;
    }
  }
  v18 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("sn"), a2, (CFStringRef *)&value);
  if ((_DWORD)v18 == -6727)
    goto LABEL_27;
  v12 = v18;
  if ((_DWORD)v18)
  {
LABEL_36:
    APSLogErrorAt();
    goto LABEL_37;
  }
  v19 = value;
  CFDictionarySetValue(v7[10], CFSTR("serialNumber"), value);
  if (v19)
  {
    CFRelease(v19);
    value = 0;
  }
LABEL_27:
  v20 = APAdvertiserInfoCopyCFStringFromTXTRecord(CFSTR("v"), a2, (CFStringRef *)&value);
  if ((_DWORD)v20 == -6727)
  {
    v12 = 0;
    goto LABEL_37;
  }
  v12 = v20;
  if ((_DWORD)v20)
    goto LABEL_36;
  v21 = value;
  CFDictionarySetValue(v7[10], CFSTR("airPlayVersion"), value);
  if (!v21)
    goto LABEL_40;
  v12 = 0;
LABEL_38:
  CFRelease(v21);
LABEL_39:
  if ((_DWORD)v12)
  {
    APSLogErrorAt();
    CFRelease(v7);
    if (!v8)
      return v12;
    goto LABEL_45;
  }
LABEL_40:
  if (gLogCategory_APAdvertiserInfo <= 30
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = 0;
  *a4 = v7;
  if (v8)
LABEL_45:
    CFRelease(v8);
  return v12;
}

uint64_t APAdvertiserInfoCopy(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  if (a2 && *(_QWORD *)(a2 + 80) && a3)
  {
    v5 = APAdvertiserInfoCreate(a1, &cf);
    if ((_DWORD)v5)
    {
      v7 = v5;
      APSLogErrorAt();
      if (cf)
        CFRelease(cf);
    }
    else
    {
      v6 = cf;
      CFRelease(*((CFTypeRef *)cf + 10));
      pthread_mutex_lock((pthread_mutex_t *)(a2 + 16));
      v6[10] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(a2 + 80));
      pthread_mutex_unlock((pthread_mutex_t *)(a2 + 16));
      v7 = 0;
      *a3 = v6;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v7;
}

uint64_t APAdvertiserInfoCopyAirPlayData(uint64_t a1, CFDataRef *a2)
{
  return APAdvertiserInfoCopyAirPlayDataWithNANServiceType(a1, 0, a2);
}

uint64_t APAdvertiserInfoCopyAirPlayDataWithNANServiceType(uint64_t a1, unsigned int a2, CFDataRef *a3)
{
  pthread_mutex_t *v6;
  int Int64Ranged;
  uint8_t v8;
  int v9;
  uint8_t v10;
  const __CFString *Value;
  const __CFString *v12;
  const __CFString *TypedValue;
  uint64_t LegacyFlags;
  uint8_t TXTRecordNumberCString;
  uint64_t Int64;
  uint8_t v17;
  const __CFString *v18;
  int v19;
  uint8_t v20;
  const __CFString *v21;
  uint64_t v22;
  uint8_t v23;
  uint64_t v24;
  uint8_t v25;
  const __CFString *v26;
  const __CFString *TXTString;
  int v28;
  uint8_t v29;
  int v30;
  uint8_t v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  uint64_t v36;
  uint8_t v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  const __CFString *v42;
  int v43;
  uint8_t v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  const __CFString *v49;
  const __CFString *v50;
  int v51;
  uint8_t v52;
  const UInt8 *BytesPtr;
  unsigned int Length;
  CFDataRef v55;
  int v57;
  const __CFString *cf;
  const __CFString *cfa;
  const __CFString *cfb;
  const __CFString *cfc;
  const __CFString *cfd;
  const __CFString *cfe;
  const __CFString *cff;
  const __CFString *cfg;
  const __CFString *cfh;
  const __CFString *cfi;
  const __CFString *cfj;
  const __CFString *cfk;
  const __CFString *cfl;
  const __CFString *cfm;
  const __CFString *cfn;
  const __CFString *cfo;
  const __CFString *cfp;
  const __CFString *cfq;
  const __CFString *cfr;
  const __CFString *cfs;
  unsigned int v78;
  char __str[256];
  _BYTE buffer[256];
  TXTRecordRef txtRecord;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  txtRecord = 0uLL;
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  if (!a3)
    goto LABEL_104;
  Int64Ranged = CFDictionaryGetInt64Ranged();
  if (Int64Ranged)
  {
    v8 = snprintf(__str, 0x100uLL, "%u", Int64Ranged);
    v78 = TXTRecordSetValue(&txtRecord, "act", v8, __str);
    if (v78)
      goto LABEL_134;
  }
  v9 = CFDictionaryGetInt64Ranged();
  v10 = snprintf(__str, 0x100uLL, "%u", v9);
  v78 = TXTRecordSetValue(&txtRecord, "acl", v10, __str);
  if (v78)
    goto LABEL_134;
  Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("bluetoothAddress"));
  cf = Value;
  if (Value)
  {
    if (CFStringGetLength(Value))
    {
      v78 = _APAdvertiserInfoAddStringToTXTRecord(cf, &txtRecord, "btaddr");
      if (v78)
        goto LABEL_134;
    }
  }
  v12 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("deviceID"));
  v78 = _APAdvertiserInfoAddStringToTXTRecord(v12, &txtRecord, "deviceid");
  if (!v78)
  {
    CFStringGetTypeID();
    TypedValue = (const __CFString *)CFDictionaryGetTypedValue();
    cfa = TypedValue;
    if (TypedValue)
    {
      if (CFStringGetLength(TypedValue))
      {
        v78 = _APAdvertiserInfoAddStringToTXTRecord(cfa, &txtRecord, "c");
        if (v78)
          goto LABEL_134;
      }
    }
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("featuresEx")))
    {
      v78 = APSFeaturesCopyStringRepresentation();
      if (v78)
        goto LABEL_134;
      v78 = _APAdvertiserInfoAddStringToTXTRecord(cfa, &txtRecord, "fex");
      CFRelease(cfa);
      if (v78)
        goto LABEL_134;
      LegacyFlags = APSFeaturesGetLegacyFlags();
      TXTRecordNumberCString = _APAdvertiserInfoGetTXTRecordNumberCString(LegacyFlags, __str);
      v78 = TXTRecordSetValue(&txtRecord, "features", TXTRecordNumberCString, __str);
      if (v78)
        goto LABEL_134;
    }
    Int64 = CFDictionaryGetInt64();
    if (Int64)
    {
      v17 = _APAdvertiserInfoGetTXTRecordNumberCString(Int64, __str);
      v78 = TXTRecordSetValue(&txtRecord, "rsf", v17, __str);
      if (v78)
        goto LABEL_134;
    }
    v18 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("firmwareVersion"));
    cfb = v18;
    if (v18)
    {
      if (CFStringGetLength(v18))
      {
        v78 = _APAdvertiserInfoAddStringToTXTRecord(cfb, &txtRecord, "fv");
        if (v78)
          goto LABEL_134;
      }
    }
    v19 = CFDictionaryGetInt64Ranged();
    if (v19)
    {
      v20 = snprintf(__str, 0x100uLL, "0x%x", v19);
      v78 = TXTRecordSetValue(&txtRecord, "flags", v20, __str);
      if (v78)
        goto LABEL_134;
    }
    v21 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("groupID"));
    cfc = v21;
    if (v21)
    {
      if (CFStringGetLength(v21))
      {
        v78 = _APAdvertiserInfoAddStringToTXTRecord(cfc, &txtRecord, "gid");
        if (v78)
          goto LABEL_134;
        v22 = CFDictionaryGetInt64();
        v23 = snprintf(__str, 0x100uLL, "%u", v22 != 0);
        v78 = TXTRecordSetValue(&txtRecord, "igl", v23, __str);
        if (v78)
          goto LABEL_134;
        v24 = CFDictionaryGetInt64();
        v25 = snprintf(__str, 0x100uLL, "%u", v24 != 0);
        v78 = TXTRecordSetValue(&txtRecord, "gcgl", v25, __str);
        if (v78)
          goto LABEL_134;
        v26 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("groupPublicName"));
        cfd = v26;
        if (v26)
        {
          if (CFStringGetLength(v26))
          {
            v78 = _APAdvertiserInfoAddStringToTXTRecord(cfd, &txtRecord, "gpn");
            if (v78)
              goto LABEL_134;
          }
        }
      }
    }
    if (a2 < 2)
    {
LABEL_34:
      v28 = CFDictionaryGetInt64Ranged();
      v29 = snprintf(__str, 0x100uLL, "%u", v28);
      v78 = TXTRecordSetValue(&txtRecord, "psgsz", v29, __str);
      if (!v78)
      {
        v30 = CFDictionaryGetInt64Ranged();
        v31 = snprintf(__str, 0x100uLL, "%u", v30);
        v78 = TXTRecordSetValue(&txtRecord, "psgtp", v31, __str);
        if (!v78)
        {
          v32 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("persistentGroupUUID"));
          cfe = v32;
          if (!v32
            || !CFStringGetLength(v32)
            || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfe, &txtRecord, "psgid")) == 0)
          {
            v33 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("persistentGroupModel"));
            cff = v33;
            if (!v33
              || !CFStringGetLength(v33)
              || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cff, &txtRecord, "pgm")) == 0)
            {
              v34 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("persistentGroupMemberID"));
              cfg = v34;
              if (!v34
                || !CFStringGetLength(v34)
                || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfg, &txtRecord, "pgmid")) == 0)
              {
                v35 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("parentGroupID"));
                cfh = v35;
                if (!v35
                  || !CFStringGetLength(v35)
                  || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfh, &txtRecord, "pgid")) == 0
                  && (v36 = CFDictionaryGetInt64(),
                      v37 = snprintf(__str, 0x100uLL, "%u", v36 != 0),
                      (v78 = TXTRecordSetValue(&txtRecord, "pgcgl", v37, __str)) == 0))
                {
                  v38 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("tightSyncUUID"));
                  cfi = v38;
                  if (!v38
                    || !CFStringGetLength(v38)
                    || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfi, &txtRecord, "tsid")) == 0)
                  {
                    v39 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("tightSyncGroupModel"));
                    cfj = v39;
                    if (!v39
                      || !CFStringGetLength(v39)
                      || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfj, &txtRecord, "tsm")) == 0)
                    {
                      v40 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("deviceModel"));
                      cfk = v40;
                      if (!v40
                        || !CFStringGetLength(v40)
                        || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfk, &txtRecord, "model")) == 0)
                      {
                        v41 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("manufacturer"));
                        cfl = v41;
                        if (!v41
                          || !CFStringGetLength(v41)
                          || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfl, &txtRecord, "manufacturer")) == 0)
                        {
                          v42 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("serialNumber"));
                          cfm = v42;
                          if (!v42
                            || !CFStringGetLength(v42)
                            || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfm, &txtRecord, "serialNumber")) == 0)
                          {
                            v43 = CFDictionaryGetInt64Ranged();
                            v44 = snprintf(__str, 0x100uLL, "%u", v43);
                            v78 = TXTRecordSetValue(&txtRecord, "at", v44, __str);
                            if (!v78)
                            {
                              v78 = 0;
                              if (!CFDictionaryGetInt64() || (v78 = TXTRecordSetValue(&txtRecord, "pw", 1u, "1")) == 0)
                              {
                                v45 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("protocolVersion"));
                                cfn = v45;
                                if (!v45
                                  || !CFStringGetLength(v45)
                                  || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfn, &txtRecord, "protovers")) == 0)
                                {
                                  v46 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("publicCUAirPlayPairingIdentity"));
                                  cfo = v46;
                                  if (!v46
                                    || !CFStringGetLength(v46)
                                    || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfo, &txtRecord, "pi")) == 0)
                                  {
                                    v47 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("publicCUSystemPairingIdentity"));
                                    cfp = v47;
                                    if (!v47
                                      || !CFStringGetLength(v47)
                                      || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfp, &txtRecord, "psi")) == 0)
                                    {
                                      v48 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("publicKey"));
                                      cfq = v48;
                                      if (!v48
                                        || !CFStringGetLength(v48)
                                        || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfq, &txtRecord, "pk")) == 0)
                                      {
                                        v49 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("airPlayVersion"));
                                        cfr = v49;
                                        if (!v49
                                          || !CFStringGetLength(v49)
                                          || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfr, &txtRecord, "srcvers")) == 0)
                                        {
                                          v50 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("OSVersion"));
                                          cfs = v50;
                                          if (!v50
                                            || !CFStringGetLength(v50)
                                            || (v78 = _APAdvertiserInfoAddStringToTXTRecord(cfs, &txtRecord, "osvers")) == 0)
                                          {
                                            v51 = CFDictionaryGetInt64Ranged();
                                            if (!v51
                                              || (v52 = snprintf(__str, 0x100uLL, "%u", v51),
                                                  (v78 = TXTRecordSetValue(&txtRecord, "vv", v52, __str)) == 0))
                                            {
                                              BytesPtr = (const UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
                                              Length = TXTRecordGetLength(&txtRecord);
                                              v55 = CFDataCreate(0, BytesPtr, Length);
                                              if (v55)
                                              {
                                                *a3 = v55;
                                                goto LABEL_89;
                                              }
                                              APSLogErrorAt();
                                              v57 = -6728;
LABEL_105:
                                              v78 = v57;
                                              goto LABEL_89;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_134:
      APSLogErrorAt();
      goto LABEL_89;
    }
    TXTString = (const __CFString *)APSNANServiceTypeGetTXTString();
    if (TXTString)
    {
      v78 = _APAdvertiserInfoAddStringToTXTRecord(TXTString, &txtRecord, "nanST");
      if (v78)
        goto LABEL_134;
      goto LABEL_34;
    }
LABEL_104:
    APSLogErrorAt();
    v57 = -6705;
    goto LABEL_105;
  }
  APSLogErrorAt();
  if (gLogCategory_APAdvertiserInfo <= 40
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_89:
  TXTRecordDeallocate(&txtRecord);
  pthread_mutex_unlock(v6);
  return v78;
}

uint64_t _APAdvertiserInfoAddStringToTXTRecord(const __CFString *a1, TXTRecordRef *a2, const char *a3)
{
  uint8_t v6;
  uint64_t v7;
  char buffer[256];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 && CFStringGetLength(a1))
  {
    buffer[0] = 0;
    if (CFStringGetCString(a1, buffer, 256, 0x8000100u))
    {
      v6 = strlen(buffer);
      v7 = TXTRecordSetValue(a2, a3, v6, buffer);
      if ((_DWORD)v7)
        APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      return 4294960559;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v7;
}

uint64_t _APAdvertiserInfoGetTXTRecordNumberCString(uint64_t a1, char *__str)
{
  if (HIDWORD(a1))
    return snprintf(__str, 0x100uLL, "0x%X,0x%X");
  else
    return snprintf(__str, 0x100uLL, "0x%X");
}

uint64_t APAdvertiserInfoCopyClusterCompatibleAirPlayData(uint64_t a1, int a2, CFDataRef *a3)
{
  pthread_mutex_t *v6;
  int Int64Ranged;
  uint8_t v8;
  uint64_t MutableCopy;
  const void *v10;
  uint64_t LegacyFlags;
  uint8_t TXTRecordNumberCString;
  uint64_t Int64;
  uint8_t v14;
  int v15;
  int v16;
  int v17;
  uint8_t v18;
  const __CFDictionary *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *Value;
  int v23;
  uint8_t v24;
  int v25;
  uint8_t v26;
  const __CFString *v27;
  const __CFString *v28;
  uint64_t v29;
  uint8_t v30;
  uint64_t v31;
  uint8_t v32;
  const __CFString *v33;
  const __CFString *v34;
  uint64_t v35;
  uint8_t v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  int v41;
  uint8_t v42;
  const UInt8 *BytesPtr;
  unsigned int Length;
  CFDataRef v45;
  int v47;
  int v48;
  const __CFString *cf;
  const __CFString *cfa;
  const __CFString *cfb;
  const __CFString *cfc;
  const __CFString *cfd;
  const __CFString *cfe;
  const __CFString *cff;
  const __CFString *cfg;
  const __CFString *cfh;
  const __CFString *cfi;
  const __CFString *cfj;
  unsigned int v60;
  char __str[256];
  _BYTE buffer[256];
  TXTRecordRef txtRecord;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  txtRecord = 0uLL;
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  if (!a3)
  {
    APSLogErrorAt();
    v47 = -6705;
LABEL_75:
    v60 = v47;
    goto LABEL_68;
  }
  Int64Ranged = CFDictionaryGetInt64Ranged();
  v8 = snprintf(__str, 0x100uLL, "%u", Int64Ranged);
  v60 = TXTRecordSetValue(&txtRecord, "acl", v8, __str);
  if (v60)
  {
    APSLogErrorAt();
    goto LABEL_68;
  }
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("featuresEx")))
  {
    v10 = 0;
    goto LABEL_12;
  }
  MutableCopy = APSFeaturesCreateMutableCopy();
  if (!MutableCopy)
  {
    APSLogErrorAt();
    v47 = -6728;
    goto LABEL_75;
  }
  v10 = (const void *)MutableCopy;
  if (a2 == 2)
  {
    APSFeaturesSetFeature();
    APSFeaturesSetFeature();
    APSFeaturesSetFeature();
    APSFeaturesSetFeature();
  }
  v60 = APSFeaturesCopyStringRepresentation();
  if (v60
    || (v60 = _APAdvertiserInfoAddStringToTXTRecord(0, &txtRecord, "fex"), CFRelease(0), v60)
    || (LegacyFlags = APSFeaturesGetLegacyFlags(),
        TXTRecordNumberCString = _APAdvertiserInfoGetTXTRecordNumberCString(LegacyFlags, __str),
        (v60 = TXTRecordSetValue(&txtRecord, "features", TXTRecordNumberCString, __str)) != 0))
  {
    APSLogErrorAt();
    goto LABEL_67;
  }
LABEL_12:
  Int64 = CFDictionaryGetInt64();
  if (Int64)
  {
    v14 = _APAdvertiserInfoGetTXTRecordNumberCString(Int64, __str);
    v60 = TXTRecordSetValue(&txtRecord, "rsf", v14, __str);
    if (v60)
      goto LABEL_77;
  }
  v15 = CFDictionaryGetInt64Ranged();
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("tightSyncUUID"))
    && !CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("persistentGroupUUID")))
  {
    v16 = 0x2000;
  }
  else
  {
    v16 = -8969;
  }
  v17 = v16 & v15;
  if (v17)
  {
    v18 = snprintf(__str, 0x100uLL, "0x%x", v17);
    v60 = TXTRecordSetValue(&txtRecord, "flags", v18, __str);
    if (v60)
      goto LABEL_77;
  }
  v19 = *(const __CFDictionary **)(a1 + 80);
  if (a2 != 1)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v19, CFSTR("persistentGroupUUID"));
    cfb = Value;
    if (Value && CFStringGetLength(Value))
    {
      v60 = _APAdvertiserInfoAddStringToTXTRecord(cfb, &txtRecord, "psgid");
      if (v60)
        goto LABEL_77;
      v23 = CFDictionaryGetInt64Ranged();
      v24 = snprintf(__str, 0x100uLL, "%u", v23);
      v60 = TXTRecordSetValue(&txtRecord, "psgsz", v24, __str);
      if (v60)
        goto LABEL_77;
      v25 = CFDictionaryGetInt64Ranged();
      v26 = snprintf(__str, 0x100uLL, "%u", v25);
      v60 = TXTRecordSetValue(&txtRecord, "psgtp", v26, __str);
      if (v60)
        goto LABEL_77;
      v27 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("persistentGroupModel"));
      cfc = v27;
      if (v27)
      {
        if (CFStringGetLength(v27))
        {
          v60 = _APAdvertiserInfoAddStringToTXTRecord(cfc, &txtRecord, "pgm");
          if (v60)
            goto LABEL_77;
        }
      }
      goto LABEL_38;
    }
LABEL_71:
    APSLogErrorAt();
    v48 = -6705;
    goto LABEL_73;
  }
  v20 = (const __CFString *)CFDictionaryGetValue(v19, CFSTR("tightSyncUUID"));
  cf = v20;
  if (!v20 || !CFStringGetLength(v20))
    goto LABEL_71;
  v60 = _APAdvertiserInfoAddStringToTXTRecord(cf, &txtRecord, "tsid");
  if (!v60)
  {
    v21 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("tightSyncGroupModel"));
    cfa = v21;
    if (!v21 || !CFStringGetLength(v21) || (v60 = _APAdvertiserInfoAddStringToTXTRecord(cfa, &txtRecord, "tsm")) == 0)
    {
LABEL_38:
      v28 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("groupID"));
      cfd = v28;
      if (v28)
      {
        if (CFStringGetLength(v28))
        {
          v60 = _APAdvertiserInfoAddStringToTXTRecord(cfd, &txtRecord, "gid");
          if (v60)
            goto LABEL_77;
          v29 = CFDictionaryGetInt64();
          v30 = snprintf(__str, 0x100uLL, "%u", v29 != 0);
          v60 = TXTRecordSetValue(&txtRecord, "igl", v30, __str);
          if (v60)
            goto LABEL_77;
          v31 = CFDictionaryGetInt64();
          v32 = snprintf(__str, 0x100uLL, "%u", v31 != 0);
          v60 = TXTRecordSetValue(&txtRecord, "gcgl", v32, __str);
          if (v60)
            goto LABEL_77;
          v33 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("groupPublicName"));
          cfe = v33;
          if (v33)
          {
            if (CFStringGetLength(v33))
            {
              v60 = _APAdvertiserInfoAddStringToTXTRecord(cfe, &txtRecord, "gpn");
              if (v60)
                goto LABEL_77;
            }
          }
        }
      }
      v34 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("parentGroupID"));
      cff = v34;
      if (v34)
      {
        if (CFStringGetLength(v34))
        {
          v60 = _APAdvertiserInfoAddStringToTXTRecord(cff, &txtRecord, "pgid");
          if (v60)
            goto LABEL_77;
          v35 = CFDictionaryGetInt64();
          v36 = snprintf(__str, 0x100uLL, "%u", v35 != 0);
          v60 = TXTRecordSetValue(&txtRecord, "pgcgl", v36, __str);
          if (v60)
            goto LABEL_77;
        }
      }
      v37 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("deviceModel"));
      cfg = v37;
      if (v37)
      {
        if (CFStringGetLength(v37))
        {
          v60 = _APAdvertiserInfoAddStringToTXTRecord(cfg, &txtRecord, "model");
          if (v60)
            goto LABEL_77;
        }
      }
      v38 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("protocolVersion"));
      cfh = v38;
      if (v38)
      {
        if (CFStringGetLength(v38))
        {
          v60 = _APAdvertiserInfoAddStringToTXTRecord(cfh, &txtRecord, "protovers");
          if (v60)
            goto LABEL_77;
        }
      }
      v39 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("airPlayVersion"));
      cfi = v39;
      if (v39)
      {
        if (CFStringGetLength(v39))
        {
          v60 = _APAdvertiserInfoAddStringToTXTRecord(cfi, &txtRecord, "srcvers");
          if (v60)
            goto LABEL_77;
        }
      }
      v40 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("OSVersion"));
      cfj = v40;
      if (v40)
      {
        if (CFStringGetLength(v40))
        {
          v60 = _APAdvertiserInfoAddStringToTXTRecord(cfj, &txtRecord, "osvers");
          if (v60)
            goto LABEL_77;
        }
      }
      v41 = CFDictionaryGetInt64Ranged();
      if (v41)
      {
        v42 = snprintf(__str, 0x100uLL, "%u", v41);
        v60 = TXTRecordSetValue(&txtRecord, "vv", v42, __str);
        if (v60)
          goto LABEL_77;
      }
      BytesPtr = (const UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
      Length = TXTRecordGetLength(&txtRecord);
      v45 = CFDataCreate(0, BytesPtr, Length);
      if (v45)
      {
        *a3 = v45;
        goto LABEL_66;
      }
      APSLogErrorAt();
      v48 = -6728;
LABEL_73:
      v60 = v48;
      goto LABEL_66;
    }
  }
LABEL_77:
  APSLogErrorAt();
LABEL_66:
  if (v10)
LABEL_67:
    CFRelease(v10);
LABEL_68:
  TXTRecordDeallocate(&txtRecord);
  pthread_mutex_unlock(v6);
  return v60;
}

uint64_t APAdvertiserInfoCopyAirPlayP2PData(uint64_t a1, CFDataRef *a2)
{
  return APAdvertiserInfoCopyAirPlayP2PDataWithNANServiceType(a1, 0, a2);
}

uint64_t APAdvertiserInfoCopyAirPlayP2PDataWithNANServiceType(uint64_t a1, int a2, CFDataRef *a3)
{
  pthread_mutex_t *v6;
  const __CFString *Value;
  uint64_t v8;
  const __CFString *TXTString;
  uint64_t v10;
  const UInt8 *BytesPtr;
  unsigned int Length;
  CFDataRef v13;
  uint64_t v14;
  _BYTE buffer[256];
  TXTRecordRef txtRecord;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  txtRecord = 0uLL;
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  if (!a3)
    goto LABEL_14;
  Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("deviceID"));
  v8 = _APAdvertiserInfoAddStringToTXTRecord(Value, &txtRecord, "deviceid");
  if (!(_DWORD)v8)
  {
    if (!a2)
    {
LABEL_6:
      BytesPtr = (const UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
      Length = TXTRecordGetLength(&txtRecord);
      v13 = CFDataCreate(0, BytesPtr, Length);
      if (v13)
      {
        v14 = 0;
        *a3 = v13;
      }
      else
      {
        APSLogErrorAt();
        v14 = 4294960568;
      }
      goto LABEL_8;
    }
    TXTString = (const __CFString *)APSNANServiceTypeGetTXTString();
    if (TXTString)
    {
      v10 = _APAdvertiserInfoAddStringToTXTRecord(TXTString, &txtRecord, "nanST");
      if ((_DWORD)v10)
      {
        v14 = v10;
        APSLogErrorAt();
        goto LABEL_8;
      }
      goto LABEL_6;
    }
LABEL_14:
    APSLogErrorAt();
    v14 = 4294960591;
    goto LABEL_8;
  }
  v14 = v8;
  APSLogErrorAt();
  if (gLogCategory_APAdvertiserInfo <= 40
    && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_8:
  TXTRecordDeallocate(&txtRecord);
  pthread_mutex_unlock(v6);
  return v14;
}

uint64_t APAdvertiserInfoCreateAirPlayServiceName(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_t *v4;
  const void *Value;
  const void *v6;
  uint64_t result;

  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (!a1)
    return 4294960591;
  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("deviceName"));
  v6 = Value;
  if (Value)
    CFRetain(Value);
  pthread_mutex_unlock(v4);
  result = 0;
  *a2 = v6;
  return result;
}

uint64_t APAdvertiserInfoCopyRAOPData(uint64_t a1, CFDataRef *a2)
{
  pthread_mutex_t *v4;
  uint64_t LegacyFlags;
  uint8_t TXTRecordNumberCString;
  const __CFString *v7;
  const __CFString *v8;
  int Int64Ranged;
  uint8_t v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  int v21;
  uint8_t v22;
  const UInt8 *BytesPtr;
  unsigned int Length;
  CFDataRef v25;
  int v27;
  unsigned int v28;
  char value[256];
  _BYTE buffer[256];
  TXTRecordRef txtRecord;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  txtRecord = 0uLL;
  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  if (!a2)
  {
    APSLogErrorAt();
    v27 = -6705;
    goto LABEL_46;
  }
  CFDictionaryGetInt64Ranged();
  BitListString_Make();
  v28 = TXTRecordSetValue(&txtRecord, "cn", 0, value);
  if (v28)
    goto LABEL_47;
  if (CFDictionaryGetInt64())
  {
    v28 = TXTRecordSetValue(&txtRecord, "da", 4u, "true");
    if (v28)
      goto LABEL_47;
  }
  CFDictionaryGetInt64Ranged();
  BitListString_Make();
  v28 = TXTRecordSetValue(&txtRecord, "et", 0, value);
  if (v28)
    goto LABEL_47;
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("featuresEx")))
  {
    LegacyFlags = APSFeaturesGetLegacyFlags();
    TXTRecordNumberCString = _APAdvertiserInfoGetTXTRecordNumberCString(LegacyFlags, value);
    TXTRecordSetValue(&txtRecord, "ft", TXTRecordNumberCString, value);
  }
  v7 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("firmwareVersion"));
  if (v7)
  {
    v8 = v7;
    if (CFStringGetLength(v7))
    {
      v28 = _APAdvertiserInfoAddStringToTXTRecord(v8, &txtRecord, "fv");
      if (v28)
        goto LABEL_47;
    }
  }
  Int64Ranged = CFDictionaryGetInt64Ranged();
  if (Int64Ranged)
  {
    v10 = snprintf(value, 0x100uLL, "0x%x", Int64Ranged);
    v28 = TXTRecordSetValue(&txtRecord, "sf", v10, value);
    if (v28)
      goto LABEL_47;
  }
  if (CFDictionaryGetInt64Ranged())
  {
    BitListString_Make();
    v28 = TXTRecordSetValue(&txtRecord, "md", 0, value);
    if (v28)
      goto LABEL_47;
  }
  if ((v11 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("deviceModel"))) != 0
    && (v12 = v11, CFStringGetLength(v11))
    && (v28 = _APAdvertiserInfoAddStringToTXTRecord(v12, &txtRecord, "am")) != 0
    || CFDictionaryGetInt64() && (v28 = TXTRecordSetValue(&txtRecord, "pw", 4u, "true")) != 0
    || (v13 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("publicKey"))) != 0
    && (v14 = v13, CFStringGetLength(v13))
    && (v28 = _APAdvertiserInfoAddStringToTXTRecord(v14, &txtRecord, "pk")) != 0)
  {
LABEL_47:
    APSLogErrorAt();
    goto LABEL_34;
  }
  v15 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("transportTypes"));
  v28 = _APAdvertiserInfoAddStringToTXTRecord(v15, &txtRecord, "tp");
  if (v28)
  {
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo <= 40
      && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_43;
    }
  }
  else
  {
    v16 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("airTunesProtocolVersion"));
    v28 = _APAdvertiserInfoAddStringToTXTRecord(v16, &txtRecord, "vn");
    if (!v28)
    {
      v17 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("airPlayVersion"));
      if (!v17
        || (v18 = v17, !CFStringGetLength(v17))
        || (v28 = _APAdvertiserInfoAddStringToTXTRecord(v18, &txtRecord, "vs")) == 0)
      {
        v19 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("OSVersion"));
        if (!v19
          || (v20 = v19, !CFStringGetLength(v19))
          || (v28 = _APAdvertiserInfoAddStringToTXTRecord(v20, &txtRecord, "ov")) == 0)
        {
          v21 = CFDictionaryGetInt64Ranged();
          v22 = snprintf(value, 0x100uLL, "%u", v21);
          v28 = TXTRecordSetValue(&txtRecord, "vv", v22, value);
          if (!v28)
          {
            BytesPtr = (const UInt8 *)TXTRecordGetBytesPtr(&txtRecord);
            Length = TXTRecordGetLength(&txtRecord);
            v25 = CFDataCreate(0, BytesPtr, Length);
            if (v25)
            {
              *a2 = v25;
              goto LABEL_34;
            }
            APSLogErrorAt();
            v27 = -6728;
LABEL_46:
            v28 = v27;
            goto LABEL_34;
          }
        }
      }
      goto LABEL_47;
    }
    APSLogErrorAt();
    if (gLogCategory_APAdvertiserInfo <= 40
      && (gLogCategory_APAdvertiserInfo != -1 || _LogCategory_Initialize()))
    {
LABEL_43:
      LogPrintF();
    }
  }
LABEL_34:
  TXTRecordDeallocate(&txtRecord);
  pthread_mutex_unlock(v4);
  return v28;
}

uint64_t APAdvertiserInfoCreateRAOPServiceName(uint64_t a1, __CFString **a2)
{
  pthread_mutex_t *v4;
  const __CFString *Value;
  const __CFString *v6;
  BOOL v7;
  const __CFString *v8;
  CFIndex Length;
  const __CFString *MutableCopy;
  __CFString *v11;
  uint64_t v12;
  CFRange v14;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("deviceID"));
  v6 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), CFSTR("deviceName"));
  if (Value)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    APSLogErrorAt();
LABEL_12:
    v12 = 4294960534;
    goto LABEL_8;
  }
  v8 = v6;
  Length = CFStringGetLength(Value);
  MutableCopy = CFStringCreateMutableCopy(0, Length, Value);
  if (!MutableCopy)
  {
    APSLogErrorAt();
    v12 = 4294960568;
    goto LABEL_8;
  }
  v11 = (__CFString *)MutableCopy;
  v14.length = CFStringGetLength(MutableCopy);
  v14.location = 0;
  if (CFStringFindAndReplace(v11, CFSTR(":"), &stru_1E825BB78, v14, 0) != 5)
  {
    APSLogErrorAt();
    CFRelease(v11);
    goto LABEL_12;
  }
  CFStringAppend(v11, CFSTR("@"));
  CFStringAppend(v11, v8);
  v12 = 0;
  *a2 = v11;
LABEL_8:
  pthread_mutex_unlock(v4);
  return v12;
}

uint64_t APAdvertiserInfoDebugShow(uint64_t a1, int a2, uint64_t a3)
{
  const void *v5;
  CFStringRef v6;

  if (a3 && a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    DataBuffer_AppendF();
    v5 = *(const void **)(a1 + 80);
    if (a2)
    {
      v6 = CFCopyDescription(v5);
      DataBuffer_AppendF();
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
      if (v6)
        CFRelease(v6);
    }
    else
    {
      CFDictionaryGetValue((CFDictionaryRef)v5, CFSTR("deviceName"));
      DataBuffer_AppendF();
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

__CFDictionary *APAdvertiserInfoCreateTestInfoDictionary()
{
  const __CFAllocator *v0;
  __CFDictionary *Mutable;
  CFStringRef v2;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (IsAppleInternalBuild())
  {
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetValue(Mutable, CFSTR("bluetoothAddress"), CFSTR("AA:BB:CC:DD:EE:FF"));
    CFDictionarySetValue(Mutable, CFSTR("deviceName"), CFSTR("Name me, please"));
    CFDictionarySetValue(Mutable, CFSTR("deviceID"), CFSTR("FF:FF:FF:FF:FF:FF"));
    _APAdvertiserInfoSetLegacyFeatures(Mutable);
    CFDictionarySetInt64();
    CFDictionarySetValue(Mutable, CFSTR("deviceModel"), CFSTR("AppleTV5,3"));
    CFDictionarySetValue(Mutable, CFSTR("deviceEnclosureColor"), CFSTR("1"));
    CFDictionarySetValue(Mutable, CFSTR("manufacturer"), CFSTR("Apple"));
    CFDictionarySetValue(Mutable, CFSTR("serialNumber"), CFSTR("ABCD7890WXYZ"));
    CFDictionarySetValue(Mutable, CFSTR("password"), (const void *)*MEMORY[0x1E0C9AE40]);
    APSVersionUtilsGetShortVersionLength();
    CFDictionarySetCString();
    CFDictionarySetValue(Mutable, CFSTR("OSVersion"), CFSTR("7.2"));
    v2 = CFStringCreateWithFormat(v0, 0, CFSTR("%u"), 65537);
    CFDictionarySetValue(Mutable, CFSTR("airTunesProtocolVersion"), v2);
    CFRelease(v2);
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetInt64();
    CFDictionarySetValue(Mutable, CFSTR("rfc2617DigestAuthKey"), (const void *)*MEMORY[0x1E0C9AE50]);
    CFDictionarySetValue(Mutable, CFSTR("transportTypes"), CFSTR("UDP"));
  }
  else
  {
    APSLogErrorAt();
  }
  return Mutable;
}

uint64_t _APAdvertiserInfoSetLegacyFeatures(const __CFDictionary *a1)
{
  uint64_t MutableCopy;
  const void *v3;

  CFDictionarySetInt64();
  if (CFDictionaryGetValue(a1, CFSTR("featuresEx")))
    MutableCopy = APSFeaturesCreateMutableCopy();
  else
    MutableCopy = APSFeaturesCreateMutable();
  v3 = (const void *)MutableCopy;
  if (MutableCopy)
  {
    APSFeaturesSetLegacyFlags();
    CFDictionarySetValue(a1, CFSTR("featuresEx"), v3);
    CFRelease(v3);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
}

uint64_t APAdvertiserInfoFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 80);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
}

uint64_t _APAdvertiserInfoCompare(uint64_t a1, uint64_t a2)
{
  if (a1 | a2)
  {
    if (a1 && a2)
    {
      return CFEqual(*(CFTypeRef *)(a1 + 80), *(CFTypeRef *)(a2 + 80));
    }
    else
    {
      APSLogErrorAt();
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 1;
  }
}

CFStringRef APAdvertiserInfoCopyDescription(uint64_t a1)
{
  pthread_mutex_t *v2;
  CFStringRef v3;

  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v3 = CFCopyDescription(*(CFTypeRef *)(a1 + 80));
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t APAdvertiserInfoGetInt64FromTXTRecord(const __CFString *a1, const void *a2, uint64_t *a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  char buffer[256];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("txt"), a2);
      buffer[0] = 0;
      CFStringGetCString(a1, buffer, 256, 0x8000100u);
      *a3 = BonjourDevice_GetInt64();
      CFRelease(v7);
      return 0;
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t APAdvertiserInfoCopyCFStringFromTXTRecord(const __CFString *a1, CFDataRef theData, CFStringRef *a3)
{
  const UInt8 *BytePtr;
  uint16_t Length;
  const char *ValuePtr;
  const UInt8 *v9;
  CFStringRef v10;
  CFStringRef v11;
  uint64_t result;
  uint8_t valueLen;
  char buffer[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 && theData)
  {
    valueLen = 0;
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    buffer[0] = 0;
    CFStringGetCString(a1, buffer, 256, 0x8000100u);
    ValuePtr = (const char *)TXTRecordGetValuePtr(Length, BytePtr, buffer, &valueLen);
    if (ValuePtr)
    {
      v9 = (const UInt8 *)ValuePtr;
      valueLen = strnlen(ValuePtr, valueLen);
      v10 = CFStringCreateWithBytes(0, v9, valueLen, 0x8000100u, 0);
      if (v10)
      {
        v11 = v10;
        result = 0;
        *a3 = v11;
      }
      else
      {
        APSLogErrorAt();
        return 4294960554;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APAdvertiserInfoGetBooleanFromTXTRecord(const __CFString *a1, const void *a2, BOOL *a3)
{
  uint64_t Int64FromTXTRecord;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  Int64FromTXTRecord = APAdvertiserInfoGetInt64FromTXTRecord(a1, a2, &v7);
  v5 = Int64FromTXTRecord;
  if ((_DWORD)Int64FromTXTRecord != -6727)
  {
    if ((_DWORD)Int64FromTXTRecord)
      APSLogErrorAt();
    else
      *a3 = v7 != 0;
  }
  return v5;
}

uint64_t APAdvertiserInfoCreateAPSFeaturesFromTXTRecordEx(CFDataRef theData, const __CFString *a2, const __CFString *a3, _QWORD *a4)
{
  unsigned int v7;
  const void *v8;
  CFTypeRef cf;
  uint64_t v11;
  unsigned int Int64FromTXTRecord;

  cf = 0;
  v11 = 0;
  v7 = APAdvertiserInfoCopyCFStringFromTXTRecord(a2, theData, (CFStringRef *)&cf);
  Int64FromTXTRecord = v7;
  if (v7 == -6727)
  {
    if (!a3)
      goto LABEL_11;
    Int64FromTXTRecord = APAdvertiserInfoGetInt64FromTXTRecord(a3, theData, &v11);
    if (!Int64FromTXTRecord)
    {
      v8 = (const void *)APSFeaturesCreateFromLegacyFlags();
      if (!v8)
      {
        APSLogErrorAt();
        Int64FromTXTRecord = -6728;
        goto LABEL_11;
      }
LABEL_9:
      *a4 = v8;
      goto LABEL_11;
    }
LABEL_10:
    APSLogErrorAt();
    goto LABEL_11;
  }
  if (v7)
    goto LABEL_10;
  v8 = (const void *)APSFeaturesCreateFromStringRepresentation();
  if (!Int64FromTXTRecord)
    goto LABEL_9;
  APSLogErrorAt();
  if (v8)
    CFRelease(v8);
LABEL_11:
  if (cf)
    CFRelease(cf);
  return Int64FromTXTRecord;
}

uint64_t APAdvertiserInfoGetBitListValueFromTXTRecord(const __CFString *a1, CFDataRef theData, _DWORD *a3)
{
  const __CFData *v4;
  const UInt8 *BytePtr;
  uint64_t v7;
  uint8_t valueLen;
  int v10;
  char buffer[256];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = theData;
    v10 = 0;
    valueLen = 0;
    BytePtr = CFDataGetBytePtr(theData);
    LOWORD(v4) = CFDataGetLength(v4);
    buffer[0] = 0;
    CFStringGetCString(a1, buffer, 256, 0x8000100u);
    if (TXTRecordGetValuePtr((uint16_t)v4, BytePtr, buffer, &valueLen))
    {
      v7 = BitListString_Parse();
      if ((_DWORD)v7)
        APSLogErrorAt();
      else
        *a3 = v10;
    }
    else
    {
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v7;
}

uint64_t APBonjourBrowserGetTypeID()
{
  if (gAPBonjourBrowserInitOnce != -1)
    dispatch_once_f(&gAPBonjourBrowserInitOnce, 0, (dispatch_function_t)_APBonjourBrowserGetTypeID);
  return gAPBonjourBrowserTypeID;
}

uint64_t _APBonjourBrowserGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPBonjourBrowserTypeID = result;
  return result;
}

uint64_t APBonjourBrowserCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _OWORD *Instance;
  _OWORD *v6;
  dispatch_queue_t v7;
  dispatch_queue_t v8;
  __int16 Int64;
  _BOOL4 v10;
  uint64_t v11;
  const __CFString *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  APBonjourCacheManager *v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];

  if (gAPBonjourBrowserInitOnce != -1)
    dispatch_once_f(&gAPBonjourBrowserInitOnce, 0, (dispatch_function_t)_APBonjourBrowserGetTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    v24 = 4294895086;
    APSLogErrorAt();
    return v24;
  }
  v6 = Instance;
  Instance[13] = 0u;
  Instance[14] = 0u;
  Instance[11] = 0u;
  Instance[12] = 0u;
  Instance[9] = 0u;
  Instance[10] = 0u;
  Instance[7] = 0u;
  Instance[8] = 0u;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  v7 = dispatch_queue_create("APBonjourBrowserInternalQueue", 0);
  *((_QWORD *)v6 + 2) = v7;
  if (!v7)
  {
    v24 = 4294895086;
    goto LABEL_65;
  }
  v8 = dispatch_queue_create("APBonjourBrowserEventQueue", 0);
  *((_QWORD *)v6 + 3) = v8;
  if (!v8)
  {
    v24 = 4294895086;
    goto LABEL_65;
  }
  if (a2)
  {
    Int64 = CFDictionaryGetInt64();
    *((_BYTE *)v6 + 114) = CFDictionaryGetInt64() != 0;
    *((_BYTE *)v6 + 129) = CFDictionaryGetInt64() != 0;
    *((_BYTE *)v6 + 160) = CFDictionaryGetInt64() != 0;
    *((_BYTE *)v6 + 208) = CFDictionaryGetInt64() != 0;
    *((_BYTE *)v6 + 176) = CFDictionaryGetInt64() != 0;
    *((_BYTE *)v6 + 192) = CFDictionaryGetInt64() != 0;
    v10 = CFDictionaryGetInt64() != 0;
    *((_BYTE *)v6 + 210) = CFDictionaryGetInt64() != 0;
  }
  else
  {
    Int64 = 0;
    v10 = 0;
  }
  if (gLogCategory_APBonjourBrowser <= 50
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = 0x800000000000000;
  v12 = CFSTR("SidePlay");
  v13 = "_airplay._tcp.";
  if (Int64 == 1)
    v13 = "_sideplay._tcp.";
  else
    v12 = CFSTR("AirPlay");
  if (Int64 != 1)
    v11 = 0;
  *((_QWORD *)v6 + 8) = v13;
  *((_QWORD *)v6 + 9) = "local.";
  *((_QWORD *)v6 + 10) = v12;
  *((_QWORD *)v6 + 11) = v11;
  v14 = BonjourBrowser_CreateEx();
  if ((_DWORD)v14)
  {
    v24 = v14;
    goto LABEL_65;
  }
  BonjourBrowser_SetDispatchQueue();
  BonjourBrowser_SetEventHandler();
  if (v10)
  {
    v15 = BonjourBrowser_CreateEx();
    if ((_DWORD)v15)
    {
      v24 = v15;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
  }
  if (*((_BYTE *)v6 + 129))
  {
    v16 = BonjourBrowser_CreateEx();
    if ((_DWORD)v16)
    {
      v24 = v16;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
  }
  if (*((_BYTE *)v6 + 114))
  {
    v17 = BonjourBrowser_CreateEx();
    if ((_DWORD)v17)
    {
      v24 = v17;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
    if (*((_BYTE *)v6 + 129))
    {
      v18 = BonjourBrowser_CreateEx();
      if ((_DWORD)v18)
      {
        v24 = v18;
        goto LABEL_65;
      }
      BonjourBrowser_SetDispatchQueue();
      BonjourBrowser_SetEventHandler();
    }
  }
  if (*((_BYTE *)v6 + 160))
  {
    v19 = BonjourBrowser_CreateEx();
    if ((_DWORD)v19)
    {
      v24 = v19;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
  }
  if (*((_BYTE *)v6 + 176))
  {
    v20 = BonjourBrowser_CreateEx();
    if ((_DWORD)v20)
    {
      v24 = v20;
      goto LABEL_65;
    }
    BonjourBrowser_SetDispatchQueue();
    BonjourBrowser_SetEventHandler();
  }
  if (*((_BYTE *)v6 + 192))
  {
    v21 = BonjourBrowser_CreateEx();
    if (!(_DWORD)v21)
    {
      BonjourBrowser_SetDispatchQueue();
      BonjourBrowser_SetEventHandler();
      BonjourBrowser_SetNANControlFlags();
      goto LABEL_39;
    }
    v24 = v21;
LABEL_65:
    APSLogErrorAt();
    CFRelease(v6);
    return v24;
  }
LABEL_39:
  *((_BYTE *)v6 + 209) = 1;
  v26 = *((_BYTE *)v6 + 210);
  if (IsAppleInternalBuild())
    APSSettingsGetBooleanIfPresent();
  if (gLogCategory_APBonjourBrowser <= 30
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v26 && !*((_QWORD *)v6 + 29))
  {
    if (gLogCategory_APBonjourBrowser <= 50
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v22 = objc_alloc_init(APBonjourCacheManager);
    *((_QWORD *)v6 + 29) = v22;
    -[APBonjourCacheManager setDispatchQueue:](v22, "setDispatchQueue:", *((_QWORD *)v6 + 2));
    -[APBonjourCacheManager setServiceType:](v22, "setServiceType:", *((_QWORD *)v6 + 10));
    v23 = MEMORY[0x1E0C809B0];
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = ___APBonjourBrowserCacheEnsureStarted_block_invoke;
    v29[3] = &unk_1E8255B70;
    v29[4] = v22;
    v29[5] = v6;
    -[APBonjourCacheManager setReportDeviceFoundHandler:](v22, "setReportDeviceFoundHandler:", v29);
    v28[0] = v23;
    v28[1] = 3221225472;
    v28[2] = ___APBonjourBrowserCacheEnsureStarted_block_invoke_2;
    v28[3] = &unk_1E8255B70;
    v28[4] = v22;
    v28[5] = v6;
    -[APBonjourCacheManager setReportDeviceLostHandler:](v22, "setReportDeviceLostHandler:", v28);
    v27[0] = v23;
    v27[1] = 3221225472;
    v27[2] = ___APBonjourBrowserCacheEnsureStarted_block_invoke_3;
    v27[3] = &unk_1E8255B98;
    v27[4] = v22;
    v27[5] = v6;
    -[APBonjourCacheManager activateWithCompletion:](v22, "activateWithCompletion:", v27);
  }
  v24 = 0;
  *a3 = v6;
  return v24;
}

void _APBonjourBrowserHandleAirPlayEvent(int a1, CFDictionaryRef theDict, uint64_t a3)
{
  const __CFDictionary *MutableCopy;
  void *v7;
  const void *v8;

  if (a3)
  {
    if (gLogCategory_APBonjourBrowser <= 30
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    switch(a1)
    {
      case 1:
        if (!*(_WORD *)(a3 + 40))
          return;
        if (theDict && *(_QWORD *)(a3 + 232))
        {
          MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
          if (MutableCopy)
          {
            objc_msgSend(*(id *)(a3 + 232), "deviceFound:", MutableCopy);
            theDict = MutableCopy;
          }
        }
        else
        {
          MutableCopy = 0;
        }
        if (_APBonjourBrowserHandleDeviceEvent((const void *)a3, 0, theDict, *(const void **)(a3 + 80)))
        {
          APSLogErrorAt();
          if (MutableCopy)
            goto LABEL_30;
        }
        else if (MutableCopy)
        {
LABEL_30:
          v8 = MutableCopy;
          goto LABEL_36;
        }
        break;
      case 2:
        if (*(_WORD *)(a3 + 40))
        {
          if (!theDict || (v7 = *(void **)(a3 + 232)) == 0 || (objc_msgSend(v7, "deviceLost:", theDict) & 1) == 0)
          {
            if (_APBonjourBrowserHandleDeviceEvent((const void *)a3, 1, theDict, *(const void **)(a3 + 80)))goto LABEL_40;
          }
        }
        return;
      case 3:
        if (gLogCategory_APBonjourBrowser <= 40
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleStopEvent(a3))
          goto LABEL_40;
        v8 = (const void *)a3;
LABEL_36:
        CFRelease(v8);
        return;
      case 4:
        if (gLogCategory_APBonjourBrowser <= 60
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleRestartedEvent((const void *)a3, *(const void **)(a3 + 80)))
          goto LABEL_40;
        return;
      default:
        if (gLogCategory_APBonjourBrowser <= 90
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return;
    }
  }
  else
  {
LABEL_40:
    APSLogErrorAt();
  }
}

void _APBonjourBrowserHandleRAOPEvent(int a1, const __CFDictionary *a2, _WORD *a3)
{
  if (a3)
  {
    switch(a1)
    {
      case 1:
        if (a3[20] && _APBonjourBrowserHandleDeviceEvent(a3, 0, a2, CFSTR("RAOP")))
          goto LABEL_26;
        break;
      case 2:
        if (a3[20] && _APBonjourBrowserHandleDeviceEvent(a3, 1, a2, CFSTR("RAOP")))
          goto LABEL_26;
        break;
      case 3:
        if (gLogCategory_APBonjourBrowser <= 40
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleStopEvent((uint64_t)a3))
          goto LABEL_26;
        CFRelease(a3);
        break;
      case 4:
        if (gLogCategory_APBonjourBrowser <= 60
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleRestartedEvent(a3, CFSTR("RAOP")))
          goto LABEL_26;
        break;
      default:
        if (gLogCategory_APBonjourBrowser <= 90
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        break;
    }
  }
  else
  {
LABEL_26:
    APSLogErrorAt();
  }
}

void _APBonjourBrowserHandleAirPlayPartialEvent(int a1, const __CFDictionary *a2, _WORD *a3)
{
  if (a3)
  {
    switch(a1)
    {
      case 1:
        if (a3[20] && _APBonjourBrowserHandleDeviceEvent(a3, 0, a2, CFSTR("AirPlayPartial")))
          goto LABEL_26;
        break;
      case 2:
        if (a3[20] && _APBonjourBrowserHandleDeviceEvent(a3, 1, a2, CFSTR("AirPlayPartial")))
          goto LABEL_26;
        break;
      case 3:
        if (gLogCategory_APBonjourBrowser <= 40
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleStopEvent((uint64_t)a3))
          goto LABEL_26;
        CFRelease(a3);
        break;
      case 4:
        if (gLogCategory_APBonjourBrowser <= 60
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APBonjourBrowserHandleRestartedEvent(a3, CFSTR("AirPlayPartial")))
          goto LABEL_26;
        break;
      default:
        if (gLogCategory_APBonjourBrowser <= 90
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        break;
    }
  }
  else
  {
LABEL_26:
    APSLogErrorAt();
  }
}

void _APBonjourBrowserHandleAirPlayEventOverNAN(int a1, CFDictionaryRef theDict, uint64_t a3)
{
  const __CFArray *TypedValue;
  uint64_t v6;
  CFIndex v7;
  const __CFAllocator *v8;
  const __CFDictionary *ValueAtIndex;
  uint64_t DeviceID;
  CFDataRef v11;
  _BYTE *v12;
  void *Value;
  void *v14;
  uint64_t v15;
  const void *v16;
  const void *TXTRecordFromBinaryTXTRecord;
  __CFDictionary *MutableCopy;
  CFArrayRef v19;
  CFArrayRef v20;
  CFIndex v21;
  const __CFDictionary *v22;
  const __CFArray *v23;
  uint16_t v24;
  const UInt8 *BytePtr;
  const void *ValuePtr;
  CFIndex v27;
  uint64_t v28;
  __CFDictionary *v29;
  const __CFDictionary *v30;
  _BYTE *v31;
  UInt8 *v32;
  CFIndex v33;
  CFIndex v34;
  uint64_t v35;
  const __CFAllocator *v36;
  CFIndex Count;
  _BYTE *v39;
  CFIndex length;
  unsigned int v41;
  UInt8 bytes[16];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[1032];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    APSLogErrorAt();
    return;
  }
  if ((a1 - 1) > 1
    || (CFArrayGetTypeID(),
        TypedValue = (const __CFArray *)CFDictionaryGetTypedValue(),
        CFArrayGetTypeID(),
        (v6 = CFDictionaryGetTypedValue()) != 0)
    && !TypedValue)
  {
    _APBonjourBrowserHandleAirPlayEvent(a1, theDict, a3);
    return;
  }
  v35 = v6;
  if (gLogCategory_APBonjourBrowser <= 30
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (TypedValue)
  {
    Count = CFArrayGetCount(TypedValue);
    if (Count >= 1)
    {
      v7 = 0;
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(TypedValue, v7);
        if (!IsAppleInternalBuild())
          goto LABEL_34;
        v41 = 0;
        bzero(v74, 0x400uLL);
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        *(_OWORD *)bytes = 0u;
        length = 0;
        if (!IsAppleInternalBuild())
          goto LABEL_97;
        DeviceID = BonjourDevice_GetDeviceID();
        if (!DeviceID)
          goto LABEL_97;
        if (DeviceID != APSSettingsGetInt64() || !APSSettingsGetCString())
          goto LABEL_34;
        if (gLogCategory_APBonjourBrowser <= 30
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          v31 = v74;
          LogPrintF();
        }
        v41 = HexToData();
        if (v41)
          break;
        if (gLogCategory_APBonjourBrowser <= 30
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          v33 = length;
          v34 = length;
          v31 = (_BYTE *)length;
          v32 = bytes;
          LogPrintF();
        }
        v11 = CFDataCreate(v8, bytes, length);
        if (!v11)
        {
LABEL_97:
          APSLogErrorAt();
          goto LABEL_34;
        }
        v12 = v11;
        if (gLogCategory_APBonjourBrowser <= 30
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          v31 = v12;
          LogPrintF();
        }
        if (v41)
        {
          CFRelease(v12);
          goto LABEL_34;
        }
        if (gLogCategory_APBonjourBrowser > 30)
          goto LABEL_56;
        if (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize())
          LogPrintF();
LABEL_52:
        if (gLogCategory_APBonjourBrowser <= 30
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
LABEL_56:
        TXTRecordFromBinaryTXTRecord = (const void *)CreateTXTRecordFromBinaryTXTRecord();
        if (gLogCategory_APBonjourBrowser <= 30
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_QWORD *)bytes = ValueAtIndex;
        LOBYTE(length) = 0;
        memset(v74, 0, 256);
        MutableCopy = CFDictionaryCreateMutableCopy(v8, 0, theDict);
        if (MutableCopy)
        {
          v19 = CFArrayCreate(v8, (const void **)bytes, 1, MEMORY[0x1E0C9B378]);
          if (v19)
          {
            v20 = v19;
            v39 = v12;
            v21 = v7;
            v22 = theDict;
            v23 = TypedValue;
            CFDictionarySetValue(MutableCopy, CFSTR("services"), v19);
            CFDictionaryRemoveValue(MutableCopy, CFSTR("removedServices"));
            CFDictionarySetValue(MutableCopy, CFSTR("serviceType"), CFSTR("_airplay._tcp."));
            CFDictionarySetValue(MutableCopy, CFSTR("txt"), TXTRecordFromBinaryTXTRecord);
            CFDictionaryGetCString();
            v24 = CFDataGetLength((CFDataRef)TXTRecordFromBinaryTXTRecord);
            BytePtr = CFDataGetBytePtr((CFDataRef)TXTRecordFromBinaryTXTRecord);
            ValuePtr = TXTRecordGetValuePtr(v24, BytePtr, "deviceid", (uint8_t *)&length);
            if (ValuePtr)
            {
              v27 = (CFIndex)ValuePtr;
              if (strncmpx())
              {
                if (gLogCategory_APBonjourBrowser <= 30
                  && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
                {
                  v32 = (UInt8 *)length;
                  v33 = v27;
                  v31 = v74;
                  LogPrintF();
                }
                CFDictionarySetCString();
              }
              if (gLogCategory_APBonjourBrowser <= 30
                && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
              {
                v31 = MutableCopy;
                LogPrintF();
              }
              CFRelease(v20);
              TypedValue = v23;
              theDict = v22;
              v7 = v21;
              v8 = v36;
              v12 = v39;
              goto LABEL_74;
            }
            APSLogErrorAt();
            CFRelease(v20);
            TypedValue = v23;
            theDict = v22;
            v7 = v21;
            v12 = v39;
          }
          else
          {
            APSLogErrorAt();
          }
          CFRelease(MutableCopy);
          MutableCopy = 0;
          v8 = v36;
        }
        else
        {
          APSLogErrorAt();
        }
LABEL_74:
        if (gLogCategory_APBonjourBrowser <= 30
          && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        _APBonjourBrowserHandleAirPlayEvent(1, MutableCopy, a3);
        if (MutableCopy)
          CFRelease(MutableCopy);
        if (TXTRecordFromBinaryTXTRecord)
          CFRelease(TXTRecordFromBinaryTXTRecord);
        CFRelease(v12);
LABEL_83:
        if (Count == ++v7)
          goto LABEL_100;
      }
      v41 = -6705;
      if (gLogCategory_APBonjourBrowser <= 90)
      {
        if (gLogCategory_APBonjourBrowser == -1)
        {
          if (!_LogCategory_Initialize())
            goto LABEL_34;
          v28 = v41;
        }
        else
        {
          v28 = 4294960591;
        }
        v31 = (_BYTE *)v28;
        LogPrintF();
      }
LABEL_34:
      if (gLogCategory_APBonjourBrowser <= 30
        && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      Value = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("nanEP"));
      if (!Value)
        goto LABEL_83;
      v14 = Value;
      if (gLogCategory_APBonjourBrowser <= 30
        && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v15 = objc_msgSend(v14, "customData", v31, v32, v33, v34);
      if (!v15)
        goto LABEL_83;
      v16 = (const void *)v15;
      if (gLogCategory_APBonjourBrowser <= 30
        && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v12 = CFRetain(v16);
      if (!v12)
        goto LABEL_83;
      goto LABEL_52;
    }
  }
LABEL_100:
  if (v35)
  {
    v29 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    if (!v29)
    {
      APSLogErrorAt();
      return;
    }
    v30 = v29;
    CFDictionaryRemoveValue(v29, CFSTR("services"));
    _APBonjourBrowserHandleAirPlayEvent(a1, v30, a3);
  }
  else
  {
    v30 = 0;
  }
  if (gLogCategory_APBonjourBrowser <= 30
    && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v30)
    CFRelease(v30);
}

uint64_t APBonjourBrowserInvalidate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1;
  v3 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v2, (dispatch_function_t)_APBonjourBrowserInvalidate);
  return v3;
}

void _APBonjourBrowserInvalidate(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  int v5;
  _WORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (v3)
  {
    do
    {
      v4 = (_WORD *)v3;
      v3 = *(_QWORD *)(v3 + 24);
    }
    while (v3);
    if (!*(_BYTE *)(v2 + 211) && *v4 != 2)
      goto LABEL_8;
LABEL_4:
    v5 = 0;
    goto LABEL_10;
  }
  if (*(_BYTE *)(v2 + 211))
    goto LABEL_4;
LABEL_8:
  v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x10620408E24C83AuLL);
  v7 = v6;
  if (!v6)
  {
    APSLogErrorAt();
    v5 = -72210;
    goto LABEL_11;
  }
  *v6 = 2;
  v5 = _APBonjourBrowserEnqueueOperation(v2, (uint64_t)v6);
  if (v5)
  {
    APSLogErrorAt();
    goto LABEL_11;
  }
LABEL_10:
  v7 = 0;
LABEL_11:
  _APBonjourBrowserOperationDisposeNullSafe(v7);
  a1[2] = v5;
}

uint64_t APBonjourBrowserGetMode(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v4, (dispatch_function_t)_APBonjourBrowserGetMode);
  *a2 = v5;
  return HIDWORD(v5);
}

uint64_t *_APBonjourBrowserGetMode(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;

  v1 = *result;
  v2 = *(_QWORD *)(*result + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(*result + 32);
    do
    {
      v4 = (_WORD *)v3;
      v3 = *(_QWORD *)(v3 + 24);
    }
    while (v3);
    if (!*(_BYTE *)(v1 + 211) && *v4 != 2)
    {
      *((_WORD *)result + 4) = *(_WORD *)(v1 + 40);
      do
      {
        if (!*(_WORD *)v2)
          *((_WORD *)result + 4) = *(_WORD *)(v2 + 8);
        v2 = *(_QWORD *)(v2 + 24);
      }
      while (v2);
    }
  }
  else if (!*(_BYTE *)(v1 + 211))
  {
    *((_WORD *)result + 4) = *(_WORD *)(v1 + 40);
  }
  *((_DWORD *)result + 3) = 0;
  return result;
}

uint64_t APBonjourBrowserSetWiFiSystemReady(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __APBonjourBrowserSetWiFiSystemReady_block_invoke;
  v4[3] = &unk_1E8255AE8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t APBonjourBrowserSetAWDLSystemReady(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __APBonjourBrowserSetAWDLSystemReady_block_invoke;
  v4[3] = &unk_1E8255AE8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t APBonjourBrowserSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[3];
  uint64_t v5;

  v4[0] = a1;
  v4[1] = a2;
  v4[2] = a3;
  v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v4, (dispatch_function_t)_APBonjourBrowserSetEventHandler);
  return v5;
}

uint64_t _APBonjourBrowserSetEventHandler(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  _WORD *v5;
  int v6;
  uint64_t v7;
  BOOL v8;

  v1 = result;
  v2 = *(_QWORD *)result;
  v3 = *(_OWORD *)(result + 8);
  v4 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (v4)
  {
    do
    {
      v5 = (_WORD *)v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    if (!*(_BYTE *)(v2 + 211) && *v5 != 2)
      goto LABEL_8;
LABEL_4:
    v6 = 0;
    goto LABEL_14;
  }
  if (*(_BYTE *)(v2 + 211))
    goto LABEL_4;
LABEL_8:
  v7 = *(_QWORD *)(v2 + 216);
  if (v7)
    v8 = v7 == (_QWORD)v3;
  else
    v8 = 1;
  if (v8)
  {
    v6 = 0;
    *(_OWORD *)(v2 + 216) = v3;
  }
  else
  {
    result = APSLogErrorAt();
    v6 = -72211;
  }
LABEL_14:
  *(_DWORD *)(v1 + 24) = v6;
  return result;
}

uint64_t APBonjourBrowserReconfirmDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD context[4];
  uint64_t v6;

  context[3] = a4;
  v6 = 0;
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)_APBonjourBrowserReconfirmDevice);
  return v6;
}

uint64_t _APBonjourBrowserReconfirmDevice(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _WORD *v5;
  int v6;

  v1 = result;
  v2 = *(_QWORD *)result;
  v3 = *(const void **)(result + 16);
  v4 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (v4)
  {
    do
    {
      v5 = (_WORD *)v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    if (*(_BYTE *)(v2 + 211) || *v5 == 2)
      goto LABEL_28;
  }
  else if (*(_BYTE *)(v2 + 211))
  {
    goto LABEL_28;
  }
  if (!*(_QWORD *)(result + 8))
  {
    v6 = -72211;
    goto LABEL_35;
  }
  if (!v3)
  {
    v6 = -72211;
    goto LABEL_35;
  }
  if (!*(_WORD *)(v2 + 40))
  {
    result = APSLogErrorAt();
    v6 = -72213;
    goto LABEL_29;
  }
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(result + 8), CFSTR("name")))
  {
    result = APSLogErrorAt();
    v6 = -72212;
    goto LABEL_29;
  }
  if (CFEqual(v3, *(CFTypeRef *)(v2 + 80)))
  {
    BonjourBrowser_ReconfirmDeviceEx();
    if (gLogCategory_APBonjourBrowser <= 40
      && (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    result = *(_QWORD *)(v2 + 104);
    if (!result)
      goto LABEL_28;
    result = BonjourBrowser_ReconfirmDeviceEx();
    if (gLogCategory_APBonjourBrowser > 40)
      goto LABEL_28;
    if (gLogCategory_APBonjourBrowser == -1)
    {
      result = _LogCategory_Initialize();
      if (!(_DWORD)result)
        goto LABEL_28;
    }
LABEL_24:
    result = LogPrintF();
    goto LABEL_28;
  }
  result = CFEqual(v3, CFSTR("RAOP"));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(v2 + 114))
    {
      result = BonjourBrowser_ReconfirmDeviceEx();
      if (gLogCategory_APBonjourBrowser > 40)
        goto LABEL_28;
      if (gLogCategory_APBonjourBrowser == -1)
      {
        result = _LogCategory_Initialize();
        if (!(_DWORD)result)
          goto LABEL_28;
      }
      goto LABEL_24;
    }
    v6 = -72211;
LABEL_35:
    result = APSLogErrorAt();
    goto LABEL_29;
  }
LABEL_28:
  v6 = 0;
LABEL_29:
  *(_DWORD *)(v1 + 32) = v6;
  return result;
}

uint64_t APBonjourBrowserTriggerWoLCachingIfNeeded(const void *a1, const void *a2, const void *a3)
{
  CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  return APSDispatchAsyncFHelper();
}

void _APBonjourBrowserTriggerWoLCachingIfNeeded(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  _WORD *v7;

  v2 = *a1;
  v3 = *(void **)(*a1 + 232);
  if (v3)
  {
    v5 = (const void *)a1[1];
    v4 = (const void *)a1[2];
    v6 = *(_QWORD *)(v2 + 32);
    if (v6)
    {
      do
      {
        v7 = (_WORD *)v6;
        v6 = *(_QWORD *)(v6 + 24);
      }
      while (v6);
      if (!*(_BYTE *)(v2 + 211) && *v7 != 2)
      {
LABEL_11:
        if (v5)
        {
          if (v4 && *(_WORD *)(v2 + 40))
            objc_msgSend(v3, "cacheHKPeerIfNeeded:pairedPeerInfo:", v5, v4);
          else
            APSLogErrorAt();
          CFRelease((CFTypeRef)v2);
        }
        else
        {
          APSLogErrorAt();
          v5 = (const void *)v2;
        }
        goto LABEL_16;
      }
    }
    else if (!*(_BYTE *)(v2 + 211))
    {
      goto LABEL_11;
    }
    CFRelease((CFTypeRef)v2);
    if (!v5)
    {
      if (!v4)
        return;
      goto LABEL_7;
    }
LABEL_16:
    CFRelease(v5);
    if (!v4)
      return;
LABEL_7:
    CFRelease(v4);
  }
}

uint64_t APBonjourBrowserTickleDetailedMode(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1;
  v3 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v2, (dispatch_function_t)_APBonjourBrowserTickleDetailedMode);
  return v3;
}

uint64_t _APBonjourBrowserTickleDetailedMode(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  sockaddr v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v1 = result;
  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (!v3)
  {
    if (!*(_BYTE *)(v2 + 211))
      goto LABEL_8;
LABEL_4:
    v5 = 0;
    goto LABEL_37;
  }
  do
  {
    v4 = (_WORD *)v3;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (v3);
  if (*(_BYTE *)(v2 + 211) || *v4 == 2)
    goto LABEL_4;
LABEL_8:
  if (*(_WORD *)(v2 + 40) != 2)
  {
    result = APSLogErrorAt();
    v5 = -72213;
    goto LABEL_37;
  }
  result = APSIsAPMSpeaker();
  if ((_DWORD)result || !*(_BYTE *)(v2 + 57))
    goto LABEL_4;
  *(_QWORD *)&v10.sa_len = 0;
  *(_QWORD *)&v10.sa_data[6] = 0;
  v12 = 0;
  v11 = 0;
  v6 = socket(30, 2, 0);
  if ((v6 & 0x80000000) == 0)
    goto LABEL_14;
  if (!*__error())
  {
    v5 = -6700;
    goto LABEL_28;
  }
  v5 = *__error();
  if (v5)
  {
LABEL_28:
    APSLogErrorAt();
LABEL_29:
    result = APSLogErrorAt();
    goto LABEL_37;
  }
LABEL_14:
  v13 = if_nametoindex("awdl0");
  if (!v13)
  {
    result = APSLogErrorAt();
    v5 = -72214;
    goto LABEL_32;
  }
  v7 = StringToSockAddr();
  if (v7)
  {
    v5 = v7;
LABEL_45:
    result = APSLogErrorAt();
    goto LABEL_32;
  }
  v8 = setsockopt(v6, 41, 125, &v13, 4u);
  if (v8)
  {
    v5 = v8;
    goto LABEL_45;
  }
  SocketSetP2P();
  v9 = SocketSetNonBlocking();
  if (v9)
  {
    v5 = v9;
    goto LABEL_45;
  }
  result = sendto(v6, "dummy", 6uLL, 0, &v10, 0x1Cu);
  if ((_DWORD)result == 6 || *__error() && (result = *__error(), !(_DWORD)result))
  {
    if (gLogCategory_APBonjourBrowser <= 40)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    v5 = 0;
  }
  else
  {
    v5 = -72215;
    result = APSLogErrorAt();
    if (gLogCategory_APBonjourBrowser <= 90)
    {
      if (gLogCategory_APBonjourBrowser != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      {
        __error();
        result = LogPrintF();
      }
    }
  }
LABEL_32:
  if ((v6 & 0x80000000) == 0)
  {
    result = close(v6);
    if ((_DWORD)result)
    {
      result = (uint64_t)__error();
      if (*(_DWORD *)result)
        result = (uint64_t)__error();
    }
  }
  if (v5)
    goto LABEL_29;
LABEL_37:
  *(_DWORD *)(v1 + 8) = v5;
  return result;
}

uint64_t APBonjourBrowserCopyInterfaceName(uint64_t a1, uint64_t a2)
{
  _QWORD context[2];
  uint64_t v4;

  context[1] = a2;
  v4 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)_APBonjourBrowserCopyInterfaceName);
  return v4;
}

_QWORD **_APBonjourBrowserCopyInterfaceName(_QWORD **result)
{
  _QWORD **v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _WORD *v5;
  const __CFString *v6;
  int v7;

  v1 = result;
  v2 = *result;
  v3 = (*result)[4];
  if (v3)
  {
    v4 = (*result)[4];
    do
    {
      v5 = (_WORD *)v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    if (!*((_BYTE *)v2 + 211) && *v5 != 2)
    {
      v6 = (const __CFString *)v2[6];
      do
      {
        if (*(_WORD *)v3 == 1)
          v6 = *(const __CFString **)(v3 + 8);
        v3 = *(_QWORD *)(v3 + 24);
      }
      while (v3);
      if (v6)
      {
LABEL_11:
        result = (_QWORD **)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
        *v1[1] = result;
        if (!*v1[1])
        {
          result = (_QWORD **)APSLogErrorAt();
          v7 = -72210;
          goto LABEL_16;
        }
        goto LABEL_12;
      }
LABEL_15:
      v7 = 0;
      *result[1] = 0;
      goto LABEL_16;
    }
  }
  else if (!*((_BYTE *)v2 + 211))
  {
    v6 = (const __CFString *)v2[6];
    if (v6)
      goto LABEL_11;
    goto LABEL_15;
  }
LABEL_12:
  v7 = 0;
LABEL_16:
  *((_DWORD *)v1 + 4) = v7;
  return result;
}

uint64_t APBonjourBrowserSetInterfaceName(uint64_t a1, uint64_t a2)
{
  _QWORD context[2];
  uint64_t v4;

  context[1] = a2;
  v4 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)_APBonjourBrowserSetInterfaceName);
  return v4;
}

void _APBonjourBrowserSetInterfaceName(uint64_t a1)
{
  const __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  _WORD *v5;
  _QWORD *v6;
  int v7;
  CFStringRef Copy;
  _QWORD *v9;

  v3 = *(_QWORD *)a1;
  v2 = *(const __CFString **)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 32);
  if (v4)
  {
    do
    {
      v5 = (_WORD *)v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    if (!*(_BYTE *)(v3 + 211) && *v5 != 2)
      goto LABEL_8;
LABEL_4:
    v6 = 0;
    v7 = 0;
    goto LABEL_16;
  }
  if (*(_BYTE *)(v3 + 211))
    goto LABEL_4;
LABEL_8:
  if (v2)
  {
    if (!CFStringGetLength(v2))
    {
      APSLogErrorAt();
      v6 = 0;
      v7 = -72211;
      goto LABEL_16;
    }
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)(a1 + 8));
    if (!Copy)
    {
      v7 = -72210;
      APSLogErrorAt();
LABEL_15:
      v6 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    Copy = 0;
  }
  v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x10620408E24C83AuLL);
  v6 = v9;
  if (v9)
  {
    *(_WORD *)v9 = 1;
    v9[1] = Copy;
    v7 = _APBonjourBrowserEnqueueOperation(v3, (uint64_t)v9);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
    v7 = -72210;
  }
  APSLogErrorAt();
  if (Copy)
    CFRetain(Copy);
LABEL_16:
  _APBonjourBrowserOperationDisposeNullSafe(v6);
  *(_DWORD *)(a1 + 16) = v7;
}

uint64_t _APBonjourBrowserStopBrowsing(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v5;

  v5 = 0;
  _APBonjourBrowserStopBonjourBrowser(a1, *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 64), (uint64_t)"local browsing", (_BYTE *)(a1 + 130), &v5);
  _APBonjourBrowserStopBonjourBrowser(a1, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 64), (uint64_t)"general browsing", (_BYTE *)(a1 + 113), &v5);
  _APBonjourBrowserStopBonjourBrowser(a1, *(_QWORD *)(a1 + 104), (uint64_t)"_airplay-alt._tcp.", (uint64_t)"browsing", (_BYTE *)(a1 + 112), &v5);
  _APBonjourBrowserStopBonjourBrowser(a1, *(_QWORD *)(a1 + 152), (uint64_t)"_raop._tcp.", (uint64_t)"local browsing", (_BYTE *)(a1 + 144), &v5);
  result = _APBonjourBrowserStopBonjourBrowser(a1, *(_QWORD *)(a1 + 120), (uint64_t)"_raop._tcp.", (uint64_t)"general browsing", (_BYTE *)(a1 + 128), &v5);
  if (a2)
    *a2 += v5;
  return result;
}

uint64_t _APBonjourBrowserStopBonjourBrowser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _DWORD *a6)
{
  uint64_t result;

  if (*a5)
  {
    *a5 = 0;
    result = BonjourBrowser_Stop();
    ++*a6;
    if (gLogCategory_APBonjourBrowser <= 40)
    {
      if (gLogCategory_APBonjourBrowser != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

uint64_t _APBonjourBrowserDispatchEvent(uint64_t cf, uint64_t a2, const void *a3)
{
  if (*(_QWORD *)(cf + 216) && !*(_BYTE *)(cf + 211))
  {
    CFRetain((CFTypeRef)cf);
    if (a3)
      CFRetain(a3);
    return APSDispatchAsyncFHelper();
  }
  return cf;
}

void _APBonjourBrowserDispatchEventCallback(CFTypeRef *a1)
{
  CFTypeRef v2;

  ((void (*)(CFTypeRef, _QWORD, CFTypeRef, CFTypeRef))a1[3])(*a1, *((unsigned int *)a1 + 2), a1[2], a1[4]);
  v2 = a1[2];
  if (v2)
    CFRelease(v2);
  CFRelease(*a1);
}

uint64_t _APBonjourBrowserHandleDeviceEvent(const void *a1, uint64_t a2, const __CFDictionary *a3, const void *a4)
{
  int v8;
  const __CFData *Value;
  const __CFData *v10;
  const __CFAllocator *v11;
  __CFDictionary *v12;
  __CFDictionary *v14;
  unsigned int v15;

  v15 = 0;
  v14 = 0;
  BonjourDevice_GetDeviceID();
  if (!CFDictionaryGetValue(a3, CFSTR("name")))
  {
    APSLogErrorAt();
    return -72212;
  }
  v8 = gLogCategory_APBonjourBrowser;
  if (gLogCategory_APBonjourBrowser <= 20)
  {
    if (gLogCategory_APBonjourBrowser == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_10;
      v8 = gLogCategory_APBonjourBrowser;
    }
    if (v8 == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
LABEL_10:
  Value = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("txt"));
  if (gLogCategory_APBonjourBrowser <= 10)
  {
    v10 = Value;
    if (gLogCategory_APBonjourBrowser != -1 || _LogCategory_Initialize())
    {
      CFDataGetBytePtr(v10);
      CFDataGetLength(v10);
      LogPrintF();
    }
  }
  v11 = CFGetAllocator(a1);
  v15 = _APBonjourBrowserCreateEventInfoDictionary(v11, a3, a4, &v14);
  if (v15)
  {
    APSLogErrorAt();
    v12 = v14;
    if (!v14)
      return v15;
    goto LABEL_16;
  }
  v12 = v14;
  _APBonjourBrowserDispatchEvent((uint64_t)a1, a2, v14);
  v15 = 0;
  if (v12)
LABEL_16:
    CFRelease(v12);
  return v15;
}

uint64_t _APBonjourBrowserHandleStopEvent(uint64_t a1)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  int v4;

  v1 = *(unsigned __int16 **)(a1 + 32);
  if (v1 && ((v2 = *v1, v2 <= 4) ? (v3 = v2 == 1) : (v3 = 1), !v3 && (v4 = *((_DWORD *)v1 + 5)) != 0))
  {
    *((_DWORD *)v1 + 5) = v4 - 1;
    return _APBonjourBrowserProcessOperationQueue((char *)a1);
  }
  else
  {
    APSLogErrorAt();
    return 4294895084;
  }
}

uint64_t _APBonjourBrowserHandleRestartedEvent(const void *a1, const void *a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  __CFDictionary *v6;
  __CFDictionary *v8;

  v8 = 0;
  v4 = CFGetAllocator(a1);
  v5 = _APBonjourBrowserCreateEventInfoDictionary(v4, 0, a2, &v8);
  if ((_DWORD)v5)
  {
    APSLogErrorAt();
    v6 = v8;
    if (!v8)
      return v5;
    goto LABEL_3;
  }
  v6 = v8;
  _APBonjourBrowserDispatchEvent((uint64_t)a1, 4, v8);
  if (v6)
LABEL_3:
    CFRelease(v6);
  return v5;
}

uint64_t _APBonjourBrowserCreateEventInfoDictionary(const __CFAllocator *a1, const void *a2, const void *a3, __CFDictionary **a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  uint64_t result;

  Mutable = CFDictionaryCreateMutable(a1, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v8 = Mutable;
    if (a2)
      CFDictionarySetValue(Mutable, CFSTR("deviceInfo"), a2);
    CFDictionarySetValue(v8, CFSTR("serviceType"), a3);
    result = 0;
    *a4 = v8;
  }
  else
  {
    APSLogErrorAt();
    return 4294895086;
  }
  return result;
}

void _APBonjourBrowserFinalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*(_QWORD *)(a1 + 96))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 96));
    *(_QWORD *)(a1 + 96) = 0;
  }
  if (*(_QWORD *)(a1 + 104))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 104));
    *(_QWORD *)(a1 + 104) = 0;
  }
  if (*(_QWORD *)(a1 + 136))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 136));
    *(_QWORD *)(a1 + 136) = 0;
  }
  if (*(_QWORD *)(a1 + 120))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 120));
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(_QWORD *)(a1 + 152))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 152));
    *(_QWORD *)(a1 + 152) = 0;
  }
  if (*(_QWORD *)(a1 + 168))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
  }
  if (*(_QWORD *)(a1 + 184))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 184));
    *(_QWORD *)(a1 + 184) = 0;
  }
  if (*(_QWORD *)(a1 + 200))
  {
    BonjourBrowser_Stop();
    CFRelease(*(CFTypeRef *)(a1 + 200));
    *(_QWORD *)(a1 + 200) = 0;
  }
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t APTransportConnectionUDPNWCreate(uint64_t a1, const void *a2, int a3, int a4, const __CFDictionary *a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  CFDictionaryRef Copy;
  const void *Empty;
  const void *TypedValue;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _DWORD *v19;
  void *v20;
  NSObject *initially_inactive;
  dispatch_queue_t v22;
  unsigned int *Value;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Int64;
  unsigned int v29;
  char label[128];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a6)
    goto LABEL_57;
  APTransportConnectionGetClassID();
  v29 = CMDerivedObjectCreate();
  if (v29)
  {
LABEL_71:
    APSLogErrorAt();
    return v29;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a5);
    *(_QWORD *)(DerivedStorage + 24) = Copy;
    if (!Copy)
    {
LABEL_70:
      APSLogErrorAt();
      return -72323;
    }
  }
  else
  {
    Empty = (const void *)CFDictionaryGetEmpty();
    *(_QWORD *)(DerivedStorage + 24) = CFRetain(Empty);
  }
  *(_BYTE *)(DerivedStorage + 176) = CFDictionaryGetInt64() != 0;
  *(_DWORD *)(DerivedStorage + 184) = a4;
  *(_DWORD *)(DerivedStorage + 188) = CFDictionaryGetInt64();
  *(_DWORD *)(DerivedStorage + 192) = CFDictionaryGetInt64Ranged();
  *(_DWORD *)(DerivedStorage + 196) = CFDictionaryGetInt64Ranged();
  CFUUIDGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  *(_QWORD *)(DerivedStorage + 200) = TypedValue;
  if (TypedValue)
    CFRetain(TypedValue);
  APSRealTimeReadableRingBufferGetTypeID();
  v15 = (const void *)CFDictionaryGetTypedValue();
  *(_QWORD *)(DerivedStorage + 392) = v15;
  if (v15)
    CFRetain(v15);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  *(_DWORD *)(DerivedStorage + 180) = a3;
  v16 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 8) = v16;
  if (!v16)
    goto LABEL_70;
  v17 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 208) = v17;
  if (!v17)
    goto LABEL_57;
  v18 = APTransportConnectionCopyNWContextForType(*(_DWORD *)(DerivedStorage + 192));
  *(_QWORD *)(DerivedStorage + 32) = v18;
  if (!v18)
    goto LABEL_57;
  SNPrintF();
  if (*(_DWORD *)(DerivedStorage + 192) != 3)
  {
    initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
    v22 = dispatch_queue_create(label, initially_inactive);
    *(_QWORD *)(DerivedStorage + 40) = v22;
    if (!v22)
      goto LABEL_68;
    nw_queue_context_target_dispatch_queue();
    dispatch_activate(*(dispatch_object_t *)(DerivedStorage + 40));
    v29 = APSRealTimeDispatcherCreate();
    if (!v29)
    {
      SNPrintF();
      v26 = FigDispatchQueueCreateWithPriority();
      *(_QWORD *)(DerivedStorage + 112) = v26;
      if (!v26)
        goto LABEL_68;
      *(_DWORD *)(DerivedStorage + 144) = 0;
      *(_QWORD *)(DerivedStorage + 328) = CFDictionaryGetInt64();
      *(_QWORD *)(DerivedStorage + 336) = CFDictionaryGetInt64();
      *(_QWORD *)(DerivedStorage + 344) = CFDictionaryGetInt64();
      *(_QWORD *)(DerivedStorage + 352) = CFDictionaryGetInt64();
      *(_QWORD *)(DerivedStorage + 360) = 0;
      *(_BYTE *)(DerivedStorage + 368) = CFDictionaryGetInt64() != 0;
      Int64 = APSSettingsGetInt64();
      *(_QWORD *)(DerivedStorage + 376) = Int64;
      if (Int64
        && gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(DerivedStorage + 400) = CFDictionaryGetInt64() != 0;
      v29 = APSAtomicMessageQueueCreate();
      if (!v29)
      {
        CFRetain(*(CFTypeRef *)(DerivedStorage + 88));
        v29 = APSRealTimeSignalCreate();
        if (!v29)
        {
          v29 = APSRecycleBinCreate();
          if (!v29)
          {
            if (gLogCategory_APTransportConnectionUDPNW <= 50
              && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v29 = APSRealTimePTPClockCreate();
            if (v29)
            {
              if (gLogCategory_APTransportConnectionUDPNW <= 90
                && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v29 = 0;
            }
            APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionUDPNW, 0, (uint64_t *)(DerivedStorage + 408), 4 * (*(_BYTE *)(DerivedStorage + 176) != 0));
            *a6 = 0;
            return v29;
          }
        }
      }
    }
    goto LABEL_71;
  }
  if (!FigSimpleMutexCreate())
  {
LABEL_57:
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  v29 = APSWrapperCreate();
  if (v29)
  {
    APSLogErrorAt();
    FigSimpleMutexDestroy();
  }
  else
  {
    v19 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
    if (!v19)
      goto LABEL_70;
    v20 = v19;
    *v19 = 0;
    v29 = APSWrapperCreate();
    if (!v29)
    {
      if (CFDictionaryGetInt64())
      {
        if (gLogCategory_APTransportConnectionUDPNW <= 50
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        Value = (unsigned int *)APSWrapperGetValue();
        do
          v24 = __ldxr(Value);
        while (__stxr(v24 | 2, Value));
      }
      v25 = FigDispatchQueueCreateWithPriority();
      *(_QWORD *)(DerivedStorage + 40) = v25;
      if (v25)
      {
        CMBaseObjectGetDerivedStorage();
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        APSLogErrorAt();
        APSLogErrorAt();
        return APSSignalErrorAt();
      }
LABEL_68:
      APSLogErrorAt();
      return APSSignalErrorAt();
    }
    APSLogErrorAt();
    free(v20);
  }
  return v29;
}

uint64_t udpconnection_runOffline(uint64_t a1)
{
  pthread_mutex_t *Value;

  Value = (pthread_mutex_t *)APSWrapperGetValue();
  return udpconnection_runInlineInternal(Value, *(_QWORD *)(a1 + 8), 0);
}

void udpconnection_offlineContextFinalizer(const void **a1)
{
  const void *v2;
  void *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = (void *)a1[1];
    if (v3)
      nw_release(v3);
    free(a1);
  }
}

uint64_t udpconnection_serviceSendMessageQueue()
{
  uint64_t result;

  do
    result = APSAtomicMessageQueueReadMessage();
  while ((_DWORD)result);
  return result;
}

uint64_t udpconnection_createContentContextItem(uint64_t a1, nw_content_context_t *a2)
{
  nw_content_context_t v3;
  nw_content_context_t v4;
  uint64_t result;

  v3 = nw_content_context_create("APTConnectionUDPNW");
  if (v3)
  {
    v4 = v3;
    result = 0;
    *a2 = v4;
  }
  else
  {
    APSLogErrorAt();
    return 4294894973;
  }
  return result;
}

uint64_t udpconnection_Invalidate(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  udpconnection_invalidateInternal(a1, 1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return 0;
}

void udpconnection_Finalize(void *a1)
{
  uint64_t DerivedStorage;
  void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  udpconnection_invalidateInternal(a1, 0);
  v3 = *(void **)(DerivedStorage + 312);
  if (v3)
    nw_release(v3);
  nw_release(*(void **)(DerivedStorage + 296));
  nw_release(*(void **)(DerivedStorage + 320));
  v4 = *(const void **)(DerivedStorage + 408);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 408) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 16);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 200);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 392);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 392) = 0;
  }
  v9 = *(NSObject **)(DerivedStorage + 112);
  if (v9)
  {
    dispatch_release(v9);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v10 = *(NSObject **)(DerivedStorage + 136);
  if (v10)
  {
    dispatch_release(v10);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 8) = 0;
  v11 = *(NSObject **)(DerivedStorage + 40);
  if (v11)
  {
    dispatch_release(v11);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 48);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 384);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 384) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 208);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  nw_release(*(void **)(DerivedStorage + 32));
  v15 = *(const void **)(DerivedStorage + 56);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 64);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 72);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 80);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 88);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 96);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 104);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
}

__CFString *udpconnection_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportConnectionUDPNW %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t udpconnection_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFDataRef *v9;
  CFDataRef *v10;
  _BYTE *v11;
  CFNumberRef v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v17;
  const __CFString *v18;
  uint64_t v19;
  NSObject *v20;
  CFDataRef Copy;
  const __CFAllocator *v22;
  CFStringRef v23;
  CFStringRef v24;
  CFDataRef v25;
  CFDataRef v26;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  CFDataRef v31;
  uint64_t UDPParameters;
  const __CFString *v33;
  const __CFData *v34;
  uint64_t address_with_ethernet;
  char *v36;
  char *v37;
  uint64_t Int64;
  uint64_t evaluator_for_endpoint;
  CFDataRef v40;
  UInt8 bytes[4];
  __int16 v42;
  nw_parameters_t parameters[3];
  int v44;
  char cStr[8];
  uint64_t v46;
  char buffer[4];
  __int16 v48;
  uint64_t v49;
  CFRange v50;

  v49 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  v9 = (CFDataRef *)CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)v9)
    goto LABEL_67;
  v10 = v9;
  if (CFEqual(a2, CFSTR("LocalNetworkPort")))
  {
    v11 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    if (*v11 || !v11[176])
    {
      APSLogErrorAt();
      v13 = APSSignalErrorAt();
      if (!(_DWORD)v13)
        goto LABEL_28;
      goto LABEL_85;
    }
    v12 = CFNumberCreate(a3, kCFNumberIntType, v11 + 224);
    *a4 = v12;
    if (!v12)
    {
      v13 = 4294894973;
      APSLogErrorAt();
LABEL_85:
      APSLogErrorAt();
      goto LABEL_55;
    }
    goto LABEL_27;
  }
  if (CFEqual(a2, CFSTR("LocalNetworkInfo")))
  {
    v14 = (_BYTE *)CMBaseObjectGetDerivedStorage();
    memset(parameters, 0, sizeof(parameters));
    v44 = 0;
    v42 = 0;
    *(_DWORD *)bytes = 0;
    cStr[0] = 0;
    if (*v14
      || (v15 = v14, (Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
    {
      APSLogErrorAt();
      v13 = APSSignalErrorAt();
      goto LABEL_84;
    }
    v17 = Mutable;
    if (v15[176])
      CFDictionarySetInt64();
    v18 = (const __CFString *)*((_QWORD *)v15 + 27);
    if (v18 && CFStringHasPrefix(v18, CFSTR("llw")) || v15[400])
    {
      if (!CFStringGetCString(*((CFStringRef *)v15 + 27), buffer, 16, 0x8000100u))
      {
        APSLogErrorAt();
        if (gLogCategory_APTransportConnectionUDPNW <= 90
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v13 = 4294894974;
        goto LABEL_83;
      }
      v19 = CUGetInterfaceAddresses();
      if ((_DWORD)v19)
      {
        v13 = v19;
        APSLogErrorAt();
        if (gLogCategory_APTransportConnectionUDPNW <= 90
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_83;
      }
      v20 = *((_QWORD *)v15 + 29);
      if (v20 && !nw_endpoint_get_address(v20))
      {
        APSLogErrorAt();
LABEL_79:
        v13 = APSSignalErrorAt();
LABEL_83:
        CFRelease(v17);
LABEL_84:
        if (!(_DWORD)v13)
          goto LABEL_28;
        goto LABEL_85;
      }
      SockAddrToString();
      v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v23 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
      if (!v23)
      {
        APSLogErrorAt();
        goto LABEL_79;
      }
      v24 = v23;
      CFDictionarySetValue(v17, CFSTR("IPAddress"), v23);
      v25 = CFDataCreate(v22, bytes, 6);
      if (!v25)
      {
        APSLogErrorAt();
        v13 = APSSignalErrorAt();
        CFRelease(v24);
        goto LABEL_83;
      }
      v26 = v25;
      CFDictionarySetValue(v17, CFSTR("MACAddress"), v25);
      *a4 = v17;
      CFRelease(v24);
      CFRelease(v26);
    }
    else
    {
      *a4 = v17;
    }
LABEL_27:
    v13 = 0;
    goto LABEL_28;
  }
  if (CFEqual(a2, CFSTR("RemoteNetworkMACAddress")))
  {
    Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10[34]);
    *a4 = Copy;
    if (!Copy)
    {
      v13 = 4294894973;
      goto LABEL_85;
    }
    goto LABEL_27;
  }
  if (CFEqual(a2, CFSTR("NWConnectionUUID")))
  {
    v28 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)cStr = 0;
    v46 = 0;
    parameters[0] = 0;
    v48 = 0;
    *(_DWORD *)buffer = 0;
    if (!*(_BYTE *)v28 && (v29 = v28, *(_BYTE *)(v28 + 176)) && *(_BYTE *)(v28 + 240) && *(_QWORD *)(v28 + 288))
    {
      if (*(_QWORD *)(v28 + 312))
      {
        v30 = 0;
        goto LABEL_62;
      }
      UDPParameters = udpconnection_createUDPParameters(a1, *(const __CFString **)(v28 + 216), parameters);
      if (!(_DWORD)UDPParameters)
      {
        nw_parameters_set_delegated_unique_pid();
        v33 = *(const __CFString **)(v29 + 216);
        if (v33 && CFStringHasPrefix(v33, CFSTR("llw")))
        {
          v34 = *(const __CFData **)(v29 + 272);
          if (!v34)
          {
            APSLogErrorAt();
            v30 = 0;
            v13 = 4294894967;
LABEL_65:
            nw_release(v30);
            nw_release(parameters[0]);
            if (!(_DWORD)v13)
              goto LABEL_28;
            goto LABEL_85;
          }
          v50.location = 0;
          v50.length = 6;
          CFDataGetBytes(v34, v50, (UInt8 *)buffer);
          address_with_ethernet = nw_endpoint_create_address_with_ethernet();
        }
        else
        {
          address_with_ethernet = (uint64_t)nw_endpoint_create_address((const sockaddr *)(v29 + 240));
        }
        v30 = address_with_ethernet;
        if (!address_with_ethernet)
          goto LABEL_94;
        nw_parameters_set_reuse_local_address(parameters[0], 1);
        nw_parameters_set_include_peer_to_peer(parameters[0], 1);
        nw_parameters_set_local_endpoint(parameters[0], *(nw_endpoint_t *)(v29 + 232));
        v36 = nw_endpoint_copy_address_string(*(nw_endpoint_t *)(v29 + 232));
        v37 = nw_endpoint_copy_address_string(v30);
        if (gLogCategory_APTransportConnectionUDPNW <= 30
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          nw_endpoint_get_port(*(nw_endpoint_t *)(v29 + 232));
          nw_endpoint_get_port(v30);
          LogPrintF();
        }
        if (v36)
          free(v36);
        if (v37)
          free(v37);
        evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
        *(_QWORD *)(v29 + 312) = evaluator_for_endpoint;
        if (!evaluator_for_endpoint)
        {
LABEL_94:
          APSLogErrorAt();
          v13 = APSSignalErrorAt();
          goto LABEL_65;
        }
LABEL_62:
        if ((nw_path_evaluator_get_client_id() & 1) != 0)
        {
          v40 = CFDataCreate(a3, (const UInt8 *)cStr, 16);
          if (v40)
          {
            v13 = 0;
            *a4 = v40;
            goto LABEL_65;
          }
        }
        goto LABEL_94;
      }
      v13 = UDPParameters;
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      v13 = APSSignalErrorAt();
    }
    v30 = 0;
    goto LABEL_65;
  }
  if (!CFEqual(a2, CFSTR("LocalInterfaceName")))
  {
    if (!CFEqual(a2, CFSTR("PrimaryPacketDropCount")))
    {
      v13 = 4294954512;
LABEL_55:
      APSLogErrorAt();
      goto LABEL_28;
    }
    Int64 = CFNumberCreateInt64();
    *a4 = Int64;
    if (!Int64)
    {
      v13 = 4294894973;
      goto LABEL_85;
    }
    goto LABEL_27;
  }
  if (*((_DWORD *)v10 + 36) != 5)
  {
LABEL_67:
    APSLogErrorAt();
    v13 = APSSignalErrorAt();
    if (!(_DWORD)v13)
      goto LABEL_28;
    goto LABEL_55;
  }
  v31 = v10[27];
  if (v31)
    v31 = (CFDataRef)CFRetain(v31);
  v13 = 0;
  *a4 = v31;
LABEL_28:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return v13;
}

uint64_t udpconnection_SetProperty(uint64_t a1, const void *a2, __CFString *a3)
{
  uint64_t DerivedStorage;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t (*v8)(uint64_t, size_t, _QWORD *);
  CFTypeID v9;
  uint64_t v10;
  const __CFString *Value;
  int Int64Ranged;
  uint64_t v13;
  CFTypeID v14;
  const void *v15;
  const void *v16;
  CFTypeID v18;
  const void *v19;
  const __CFData *Copy;
  CFTypeID v21;
  char buffer[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  v6 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*v6)
    goto LABEL_60;
  v7 = v6;
  if (!CFEqual(a2, CFSTR("PackageType")))
  {
    if (CFEqual(a2, CFSTR("RemoteNetworkInfo")))
    {
      if (a3)
      {
        v9 = CFGetTypeID(a3);
        if (v9 == CFDictionaryGetTypeID())
        {
          v10 = CMBaseObjectGetDerivedStorage();
          Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("IPAddress"));
          if (Value)
          {
            CFStringGetCString(Value, buffer, 128, 0x8000100u);
            StringToSockAddr();
          }
          Int64Ranged = (unsigned __int16)CFDictionaryGetInt64Ranged();
          if (Int64Ranged)
            *(_DWORD *)(v10 + 280) = Int64Ranged;
          SockAddrSetPort();
          v15 = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("MACAddress"));
          if (v15)
          {
            v16 = *(const void **)(v10 + 272);
            *(_QWORD *)(v10 + 272) = v15;
            CFRetain(v15);
            if (v16)
              CFRelease(v16);
          }
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (CFEqual(a2, CFSTR("RemoteNetworkIPAddress")))
      {
        if (a3)
        {
          v14 = CFGetTypeID(a3);
          if (v14 == APSNetworkAddressGetTypeID())
          {
            APSNetworkAddressGetSocketAddr();
            *((_OWORD *)v7 + 15) = *(_OWORD *)buffer;
            *(_OWORD *)(v7 + 252) = *(_OWORD *)&buffer[12];
            SockAddrSetPort();
            v7[268] = APSNetworkAddressIsIPv6() == 0;
            goto LABEL_25;
          }
        }
        goto LABEL_60;
      }
      if (!CFEqual(a2, CFSTR("RemoteNetworkMACAddress")))
      {
        if (CFEqual(a2, CFSTR("RemoteNetworkPort")))
        {
          *((_DWORD *)v7 + 70) = CFGetInt64();
          SockAddrSetPort();
          goto LABEL_25;
        }
        if (CFEqual(a2, CFSTR("BoundInterfaceIndex")))
        {
          *((_DWORD *)v7 + 71) = CFGetInt64();
        }
        else
        {
          if (CFEqual(a2, CFSTR("LocalInterfaceName")))
          {
            if (a3)
            {
              v21 = CFGetTypeID(a3);
              if (v21 == CFStringGetTypeID())
              {
                *((_QWORD *)v7 + 27) = CFRetain(a3);
                goto LABEL_25;
              }
            }
            goto LABEL_60;
          }
          if (!CFEqual(a2, CFSTR("ClientUPID")))
          {
            v13 = 4294954512;
            goto LABEL_49;
          }
          *((_QWORD *)v7 + 36) = CFGetInt64();
        }
LABEL_33:
        v13 = 0;
        goto LABEL_34;
      }
      if (a3)
      {
        v18 = CFGetTypeID(a3);
        if (v18 == CFDataGetTypeID())
        {
          v19 = (const void *)*((_QWORD *)v7 + 34);
          if (v19)
            CFRelease(v19);
          Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDataRef)a3);
          *((_QWORD *)v7 + 34) = Copy;
          if (CFDataGetLength(Copy) == 6)
            goto LABEL_25;
        }
      }
    }
LABEL_60:
    APSLogErrorAt();
    v13 = APSSignalErrorAt();
    if (!(_DWORD)v13)
      goto LABEL_34;
    goto LABEL_49;
  }
  if (CFSTR("RTCP") != a3 && (!a3 || !CFSTR("RTCP") || !CFEqual(a3, CFSTR("RTCP"))))
  {
    if (CFSTR("RTP") == a3
      || a3 && CFSTR("RTP") && CFEqual(a3, CFSTR("RTP"))
      || CFSTR("Screen") == a3
      || a3 && CFSTR("Screen") && CFEqual(a3, CFSTR("Screen")))
    {
      *((_QWORD *)v7 + 19) = APTransportPackageRTPCreateWithBBuf;
      *((_QWORD *)v7 + 20) = APTransportPackageRTPCreate;
      v8 = APTransportPackageRTPCreateWithMessageSize;
      goto LABEL_24;
    }
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = 4294954516;
LABEL_49:
    APSLogErrorAt();
    goto LABEL_34;
  }
  *((_QWORD *)v7 + 19) = APTransportPackageRTCPCreateWithBBuf;
  *((_QWORD *)v7 + 20) = APTransportPackageRTCPCreate;
  v8 = APTransportPackageRTCPCreateWithMessageSize;
LABEL_24:
  *((_QWORD *)v7 + 21) = v8;
LABEL_25:
  v13 = 0;
LABEL_34:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return v13;
}

void udpconnection_invalidateInternal(void *a1, int a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v5;
  uint64_t v6;
  unsigned int *Value;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  const void *v13;
  const void *v14;
  _QWORD v15[5];
  _QWORD v16[5];

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v5 = DerivedStorage;
    if (gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *v5 = 1;
    v6 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v6 + 64))
    {
      Value = (unsigned int *)APSWrapperGetValue();
      do
        v8 = __ldxr(Value);
      while (__stxr(v8 & 0xFFFFFFFE, Value));
    }
    *(_DWORD *)(v6 + 144) = 6;
    v9 = MEMORY[0x1E0C809B0];
    if (*(_BYTE *)(v6 + 176) && *(_QWORD *)(v6 + 304))
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v16[0] = v9;
      v16[1] = 0x40000000;
      v16[2] = __udpconnection_cleanUp_block_invoke;
      v16[3] = &__block_descriptor_tmp_3;
      v16[4] = v6;
      udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)v16);
      *(_QWORD *)(v6 + 304) = 0;
    }
    if (*(_QWORD *)(v6 + 296))
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v15[0] = v9;
      v15[1] = 0x40000000;
      v15[2] = __udpconnection_cleanUp_block_invoke_2;
      v15[3] = &__block_descriptor_tmp_38;
      v15[4] = v6;
      udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)v15);
    }
    v10 = *(_QWORD *)(v6 + 72);
    if (v10)
    {
      v11 = (unsigned __int8 *)(v10 + 17);
      do
        v12 = __ldxr(v11);
      while (__stxr(1u, v11));
      if ((v12 & 1) == 0
        && gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    v13 = *(const void **)(v6 + 272);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v6 + 272) = 0;
    }
    v14 = *(const void **)(v6 + 216);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v6 + 216) = 0;
    }
    nw_release(*(void **)(v6 + 232));
    if (a2)
      dispatch_sync_f(*((dispatch_queue_t *)v5 + 14), a1, (dispatch_function_t)udpconnection_clearCallbackState);
    else
      udpconnection_clearCallbackState();
  }
}

void udpconnection_clearCallbackState()
{
  _QWORD *DerivedStorage;
  NSObject *v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[15] = 0;
  DerivedStorage[16] = 0;
  v1 = DerivedStorage[17];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[17] = 0;
  }
}

uint64_t udpconnection_runLockedInlineIfNecessary(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *Value;
  pthread_mutex_t *v4;

  CMBaseObjectGetDerivedStorage();
  Value = (pthread_mutex_t *)APSWrapperGetValue();
  if (!Value)
    return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  v4 = Value;
  pthread_mutex_lock(Value);
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  return pthread_mutex_unlock(v4);
}

void __udpconnection_cleanUp_block_invoke(uint64_t a1)
{
  nw_listener_cancel(*(nw_listener_t *)(*(_QWORD *)(a1 + 32) + 304));
}

void __udpconnection_cleanUp_block_invoke_2(uint64_t a1)
{
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(a1 + 32) + 296));
}

uint64_t udpconnection_createUDPParameters(uint64_t a1, const __CFString *a2, NSObject **a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  NSObject *secure_udp;
  NSObject *v8;
  nw_protocol_stack_t v9;
  nw_protocol_stack_t v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  void *options;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  sockaddr address;
  uint64_t v20;
  int v21;
  int v22;
  __int16 v23;
  char buffer[16];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&address.sa_len = 0;
  *(_QWORD *)&address.sa_data[6] = 0;
  v21 = 0;
  v20 = 0;
  if (!a3
    || (v6 = DerivedStorage,
        (secure_udp = nw_parameters_create_secure_udp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E0CCED20], (nw_parameters_configure_protocol_block_t)*MEMORY[0x1E0CCED18])) == 0))
  {
    APSLogErrorAt();
    v16 = APSSignalErrorAt();
    v13 = 0;
    v8 = 0;
LABEL_33:
    v10 = 0;
LABEL_34:
    options = 0;
    goto LABEL_30;
  }
  v8 = secure_udp;
  v9 = nw_parameters_copy_default_protocol_stack(secure_udp);
  if (!v9)
  {
    APSLogErrorAt();
    v16 = APSSignalErrorAt();
    v13 = 0;
    goto LABEL_33;
  }
  v10 = v9;
  APTransportConnectionGetTrafficClassForSocketQoS(*(_DWORD *)(v6 + 188));
  nw_parameters_set_traffic_class();
  if (*(_QWORD *)(v6 + 288))
    nw_parameters_set_disable_listener_datapath();
  nw_parameters_set_context();
  if (!a2)
  {
    v13 = 0;
    options = 0;
LABEL_23:
    if ((*(_BYTE *)(v6 + 180) & 0x10) != 0)
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 30
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      nw_parameters_prohibit_interface_type(v8, nw_interface_type_cellular);
    }
    v16 = 0;
    *a3 = v8;
    v8 = 0;
    goto LABEL_30;
  }
  if (CFStringGetCString(a2, buffer, 16, 0x8000100u))
  {
    if (!CFStringHasPrefix(a2, CFSTR("llw")) && !*(_BYTE *)(v6 + 400))
      goto LABEL_18;
    if (*(_BYTE *)(v6 + 176))
    {
      v11 = *(void **)(v6 + 232);
      if (v11)
      {
        v12 = nw_retain(v11);
        goto LABEL_17;
      }
    }
    v23 = 0;
    v22 = 0;
    address.sa_family = 0;
    v15 = CUGetInterfaceAddresses();
    if ((_DWORD)v15)
    {
      v16 = v15;
      APSLogErrorAt();
      if (gLogCategory_APTransportConnectionUDPNW <= 90
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (address.sa_family == 30 || (APSLogErrorAt(), v18 = APSSignalErrorAt(), !(_DWORD)v18))
      {
        v12 = nw_endpoint_create_address(&address);
        if (v12)
        {
LABEL_17:
          nw_parameters_set_local_endpoint(v8, v12);
          nw_release(v12);
          if (!*(_BYTE *)(v6 + 176))
          {
            options = (void *)nw_replicate_create_options();
            if (!options)
            {
              APSLogErrorAt();
              v16 = APSSignalErrorAt();
              v13 = 0;
              goto LABEL_30;
            }
            nw_protocol_stack_append_application_protocol();
            goto LABEL_21;
          }
LABEL_18:
          options = 0;
LABEL_21:
          v13 = nw_interface_create_with_name();
          if (!v13)
          {
            APSLogErrorAt();
            v16 = APSSignalErrorAt();
            goto LABEL_30;
          }
          nw_parameters_require_interface(v8, v13);
          goto LABEL_23;
        }
        APSLogErrorAt();
        v16 = APSSignalErrorAt();
        goto LABEL_50;
      }
      v16 = v18;
    }
    APSLogErrorAt();
LABEL_50:
    v13 = 0;
    goto LABEL_34;
  }
  APSLogErrorAt();
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v13 = 0;
  options = 0;
  v16 = 4294894974;
LABEL_30:
  nw_release(v13);
  nw_release(v8);
  nw_release(v10);
  nw_release(0);
  nw_release(options);
  return v16;
}

uint64_t udpconnectionAggregate_CopyDebugDescription()
{
  return CFStringCreateF();
}

uint64_t udpconnectionAggregate_Clone(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!a1)
  {
    v15 = 4294894974;
LABEL_18:
    APSLogErrorAt();
    return v15;
  }
  if (!a3)
  {
    v15 = 4294894974;
    goto LABEL_18;
  }
  v7 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294894970;
  }
  else if (*(_BYTE *)(DerivedStorage + 176))
  {
    APSLogErrorAt();
    return 4294894975;
  }
  else
  {
    v8 = APTransportConnectionUDPNWCreate(*MEMORY[0x1E0C9AE00], a2, *(_DWORD *)(DerivedStorage + 180), *(_DWORD *)(DerivedStorage + 184), *(const __CFDictionary **)(DerivedStorage + 24), &cf);
    if ((_DWORD)v8)
    {
      v15 = v8;
      APSLogErrorAt();
      if (cf)
        CFRelease(cf);
    }
    else
    {
      v9 = CMBaseObjectGetDerivedStorage();
      v10 = *(_OWORD *)(v7 + 240);
      *(_OWORD *)(v9 + 252) = *(_OWORD *)(v7 + 252);
      *(_OWORD *)(v9 + 240) = v10;
      *(_DWORD *)(v9 + 280) = *(_DWORD *)(v7 + 280);
      v11 = *(const void **)(v9 + 216);
      v12 = *(const void **)(v7 + 216);
      *(_QWORD *)(v9 + 216) = v12;
      if (v12)
        CFRetain(v12);
      if (v11)
        CFRelease(v11);
      v13 = *(const void **)(v9 + 272);
      v14 = *(const void **)(v7 + 272);
      *(_QWORD *)(v9 + 272) = v14;
      if (v14)
        CFRetain(v14);
      if (v13)
        CFRelease(v13);
      v15 = 0;
      *a3 = cf;
    }
  }
  return v15;
}

uint64_t udpconnectionAggregate_AddSubConnection(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t RemoteEndpoint;
  void *v7;
  _QWORD v9[6];
  void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  if (!a2)
  {
    RemoteEndpoint = 4294894974;
LABEL_15:
    APSLogErrorAt();
    v7 = 0;
    goto LABEL_12;
  }
  v5 = DerivedStorage;
  if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kAPTransportConnectionUDPVTable)
  {
    RemoteEndpoint = 4294894974;
    goto LABEL_15;
  }
  if (*(_BYTE *)v5)
  {
    APSLogErrorAt();
    v7 = 0;
    RemoteEndpoint = 4294894970;
  }
  else if (*(_BYTE *)(v5 + 176))
  {
    APSLogErrorAt();
    v7 = 0;
    RemoteEndpoint = 4294894975;
  }
  else if (*(_QWORD *)(v5 + 320))
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    RemoteEndpoint = udpconnection_createRemoteEndpoint(a2, (uint64_t *)&v10);
    if ((_DWORD)RemoteEndpoint)
    {
      APSLogErrorAt();
      v7 = v10;
    }
    else
    {
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 0x40000000;
      v9[2] = __udpconnectionAggregate_AddSubConnection_block_invoke;
      v9[3] = &__block_descriptor_tmp_85;
      v7 = v10;
      v9[4] = v5;
      v9[5] = v10;
      udpconnection_runLockedInlineIfNecessary(a1, (uint64_t)v9);
    }
  }
  else
  {
    APSLogErrorAt();
    v7 = 0;
    RemoteEndpoint = 4294894968;
  }
LABEL_12:
  nw_release(v7);
  return RemoteEndpoint;
}

uint64_t udpconnectionAggregate_RemoveSubConnection(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t RemoteEndpoint;
  void *v7;
  _QWORD v9[6];
  void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  if (!a2)
  {
    RemoteEndpoint = 4294894974;
LABEL_15:
    APSLogErrorAt();
    v7 = 0;
    goto LABEL_12;
  }
  v5 = DerivedStorage;
  if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kAPTransportConnectionUDPVTable)
  {
    RemoteEndpoint = 4294894974;
    goto LABEL_15;
  }
  if (*(_BYTE *)v5)
  {
    APSLogErrorAt();
    v7 = 0;
    RemoteEndpoint = 4294894970;
  }
  else if (*(_BYTE *)(v5 + 176))
  {
    APSLogErrorAt();
    v7 = 0;
    RemoteEndpoint = 4294894975;
  }
  else if (*(_QWORD *)(v5 + 320))
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    RemoteEndpoint = udpconnection_createRemoteEndpoint(a2, (uint64_t *)&v10);
    if ((_DWORD)RemoteEndpoint)
    {
      APSLogErrorAt();
      v7 = v10;
    }
    else
    {
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 0x40000000;
      v9[2] = __udpconnectionAggregate_RemoveSubConnection_block_invoke;
      v9[3] = &__block_descriptor_tmp_88;
      v7 = v10;
      v9[4] = v5;
      v9[5] = v10;
      udpconnection_runLockedInlineIfNecessary(a1, (uint64_t)v9);
    }
  }
  else
  {
    APSLogErrorAt();
    v7 = 0;
    RemoteEndpoint = 4294894968;
  }
LABEL_12:
  nw_release(v7);
  return RemoteEndpoint;
}

uint64_t udpconnection_createRemoteEndpoint(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  const __CFString *v4;
  const __CFData *v5;
  uint64_t address;
  uint64_t v7;
  UInt8 buffer[4];
  __int16 v10;
  CFRange v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  *(_DWORD *)buffer = 0;
  v4 = *(const __CFString **)(DerivedStorage + 216);
  if (v4 && CFStringHasPrefix(v4, CFSTR("llw")) && !*(_QWORD *)(DerivedStorage + 272))
  {
    v7 = 4294894967;
    APSLogErrorAt();
    goto LABEL_7;
  }
  v5 = *(const __CFData **)(DerivedStorage + 272);
  if (!v5)
  {
    address = (uint64_t)nw_endpoint_create_address((const sockaddr *)(DerivedStorage + 240));
    if (address)
      goto LABEL_6;
LABEL_9:
    APSLogErrorAt();
    v7 = APSSignalErrorAt();
    goto LABEL_7;
  }
  v11.location = 0;
  v11.length = 6;
  CFDataGetBytes(v5, v11, buffer);
  address = nw_endpoint_create_address_with_ethernet();
  if (!address)
    goto LABEL_9;
LABEL_6:
  v7 = 0;
  *a2 = address;
LABEL_7:
  nw_release(0);
  return v7;
}

uint64_t udpconnection_Resume(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  dispatch_semaphore_t v10;
  NSObject *v11;
  int v12;
  nw_listener_t v13;
  nw_listener_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_time_t v20;
  uint64_t v21;
  int v22;
  int v24;
  const __CFString *v25;
  int v26;
  CFNumberRef v27;
  int valuePtr;
  _QWORD v29[5];
  _QWORD v30[8];
  _QWORD handler[6];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  valuePtr = 0;
  v3 = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_QWORD *)(v3 + 152) || !*(_QWORD *)(v3 + 160))
  {
    APSLogErrorAt();
    v26 = -72327;
    goto LABEL_55;
  }
  if (*(_DWORD *)(v3 + 192) != 3)
  {
LABEL_17:
    if (*(_BYTE *)(v3 + 176))
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 30
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v9 = CMBaseObjectGetDerivedStorage();
      v36 = 0;
      v32 = 0;
      v33 = &v32;
      v34 = 0x2000000000;
      v35 = 0;
      v10 = dispatch_semaphore_create(0);
      if (!v10)
      {
        APSLogErrorAt();
        v22 = APSSignalErrorAt();
LABEL_42:
        nw_release(v36);
        _Block_object_dispose(&v32, 8);
        valuePtr = v22;
        if (!v22)
          goto LABEL_43;
        goto LABEL_73;
      }
      v11 = v10;
      v12 = udpconnection_createUDPParameters((uint64_t)a1, *(const __CFString **)(v9 + 216), &v36);
      if (v12)
      {
        v22 = v12;
        APSLogErrorAt();
      }
      else
      {
        v13 = nw_listener_create(v36);
        *(_QWORD *)(v9 + 304) = v13;
        if (v13 && (v14 = v13, (v15 = FigDispatchQueueCreateWithPriority()) != 0))
        {
          v16 = v15;
          nw_listener_set_queue(*(nw_listener_t *)(v9 + 304), v15);
          v17 = *(NSObject **)(v9 + 304);
          v18 = MEMORY[0x1E0C809B0];
          handler[0] = MEMORY[0x1E0C809B0];
          handler[1] = 0x40000000;
          handler[2] = __udpconnection_setupListenerNW_block_invoke;
          handler[3] = &__block_descriptor_tmp_102;
          handler[4] = v9;
          handler[5] = a1;
          nw_listener_set_new_connection_handler(v17, handler);
          dispatch_retain(v11);
          v19 = *(_QWORD *)(v9 + 304);
          v30[0] = v18;
          v30[1] = 0x40000000;
          v30[2] = __udpconnection_setupListenerNW_block_invoke_2;
          v30[3] = &unk_1E8255DD8;
          v30[4] = &v32;
          v30[5] = v11;
          v30[6] = v14;
          v30[7] = v16;
          MEMORY[0x1CAA3CE34](v19, v30);
          if (gLogCategory_APTransportConnectionUDPNW <= 30
            && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          v29[0] = v18;
          v29[1] = 0x40000000;
          v29[2] = __udpconnection_setupListenerNW_block_invoke_3;
          v29[3] = &__block_descriptor_tmp_111;
          v29[4] = v9;
          udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)v29);
          v20 = dispatch_time(0, 10000000000);
          if (dispatch_semaphore_wait(v11, v20))
          {
            APSLogErrorAt();
            if (gLogCategory_APTransportConnectionUDPNW <= 90
              && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v22 = -6722;
            goto LABEL_41;
          }
          if (*((_DWORD *)v33 + 6))
          {
            APSLogErrorAt();
            v22 = 0;
            if (gLogCategory_APTransportConnectionUDPNW > 90)
              goto LABEL_41;
            if (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize())
              LogPrintF();
          }
          else
          {
            v21 = CMBaseObjectGetDerivedStorage();
            v37 = v18;
            v38 = 0x40000000;
            v39 = __udpconnection_setLocalNetworkInfo_block_invoke;
            v40 = &__block_descriptor_tmp_116;
            v41 = v21;
            udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)&v37);
            if (!*(_BYTE *)(v9 + 400))
            {
              if (!*(_QWORD *)(v9 + 288))
              {
                v24 = udpconnection_setupNWConnection((uint64_t)a1, 0);
                if (v24)
                {
                  v22 = v24;
                  APSLogErrorAt();
                  if (gLogCategory_APTransportConnectionUDPNW <= 90
                    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  goto LABEL_41;
                }
              }
              v25 = *(const __CFString **)(v9 + 216);
              if (v25)
              {
                if (CFStringHasPrefix(v25, CFSTR("llw")) && *(_DWORD *)(v9 + 192) == 3)
                {
                  if (gLogCategory_APTransportConnectionUDPNW <= 50
                    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
                  {
                    LogPrintF();
                  }
                  v37 = v18;
                  v38 = 0x40000000;
                  v39 = __udpconnection_setupListenerNW_block_invoke_4;
                  v40 = &__block_descriptor_tmp_115;
                  v41 = v9;
                  udpconnection_runLockedInlineIfNecessary((uint64_t)a1, (uint64_t)&v37);
                  v22 = 0;
                  *(_QWORD *)(v9 + 304) = 0;
                  goto LABEL_41;
                }
              }
            }
          }
          v22 = 0;
        }
        else
        {
          APSLogErrorAt();
          v22 = APSSignalErrorAt();
        }
      }
LABEL_41:
      dispatch_release(v11);
      goto LABEL_42;
    }
    if (*(_BYTE *)(v3 + 241) && *(_DWORD *)(v3 + 280))
    {
      valuePtr = udpconnection_setupNWConnection((uint64_t)a1, 0);
      if (!valuePtr)
      {
LABEL_43:
        udpconnection_callEventCallback(a1, 0, 0);
        goto LABEL_44;
      }
      goto LABEL_73;
    }
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v26 = -72320;
LABEL_55:
    valuePtr = v26;
    goto LABEL_56;
  }
  v4 = *(unsigned __int8 **)(v3 + 72);
  if (v4)
  {
    v5 = v4 + 16;
    do
      v6 = __ldxr(v5);
    while (__stxr(1u, v5));
    if ((v6 & 1) == 0)
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v7 = *((_QWORD *)v4 + 5);
      v8 = (void *)CFRetain(v4);
      dispatch_async_f(v7, v8, (dispatch_function_t)udpconnectionInlineInactivityMonitor_fire);
    }
    goto LABEL_17;
  }
  APSLogErrorAt();
  valuePtr = -72322;
LABEL_73:
  APSLogErrorAt();
LABEL_56:
  *(_DWORD *)(v3 + 144) = 4;
  v27 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  udpconnection_callEventCallback(a1, 4, v27);
  if (v27)
    CFRelease(v27);
LABEL_44:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return 0;
}

uint64_t udpconnection_AddEventCallback(const void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8;

  CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v8 = 4294894974;
LABEL_11:
    APSLogErrorAt();
    return v8;
  }
  if (!a3)
  {
    v8 = 4294894974;
    goto LABEL_11;
  }
  if (!a4)
  {
    v8 = 4294894974;
    goto LABEL_11;
  }
  dispatch_retain(a4);
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t udpconnection_RemoveEventCallback()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t udpconnection_AcquirePackage(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(CFAllocatorRef, uint64_t);
  CFAllocatorRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  v5 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)v5)
  {
    APSLogErrorAt();
    v11 = APSSignalErrorAt();
    v9 = 0;
    if (!(_DWORD)v11)
      goto LABEL_8;
    v9 = v11;
LABEL_12:
    APSLogErrorAt();
    goto LABEL_8;
  }
  v6 = *(uint64_t (**)(CFAllocatorRef, uint64_t))(v5 + 160);
  v7 = CFGetAllocator(a1);
  v8 = v6(v7, a2);
  if ((_DWORD)v8)
  {
    v9 = v8;
    APSLogErrorAt();
    goto LABEL_12;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = 0;
LABEL_8:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return v9;
}

uint64_t udpconnection_AcquirePackageWithMessageSize(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(CFAllocatorRef, uint64_t, uint64_t);
  CFAllocatorRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
  v7 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)v7)
  {
    APSLogErrorAt();
    v13 = APSSignalErrorAt();
    v11 = 0;
    if (!(_DWORD)v13)
      goto LABEL_9;
    v11 = v13;
LABEL_14:
    APSLogErrorAt();
    goto LABEL_9;
  }
  v8 = *(uint64_t (**)(CFAllocatorRef, uint64_t, uint64_t))(v7 + 168);
  if (!v8)
  {
    APSLogErrorAt();
    v11 = 4294894969;
    goto LABEL_14;
  }
  v9 = CFGetAllocator(a1);
  v10 = v8(v9, a2, a3);
  if ((_DWORD)v10)
  {
    v11 = v10;
    APSLogErrorAt();
    goto LABEL_14;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = 0;
LABEL_9:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
  return v11;
}

uint64_t udpconnection_RelinquishPackage(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t udpconnection_SendPackage(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t *Value;
  uint64_t v10;
  CFTypeRef cf;
  CFTypeRef v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    v10 = 4294894974;
LABEL_18:
    APSLogErrorAt();
    return v10;
  }
  if (!a2)
  {
    v10 = 4294894974;
    goto LABEL_18;
  }
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294894970;
  }
  else
  {
    v5 = *(_DWORD *)(DerivedStorage + 192);
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = v6;
    if (v5 == 3)
    {
      if (*(_DWORD *)(v6 + 144) == 5)
      {
        v8 = *(_QWORD *)(v6 + 72);
        *(_QWORD *)(v8 + 72) = mach_absolute_time();
        APSWrapperGetValue();
        if (FigSimpleMutexTryLock())
        {
          udpconnection_sendPackageInternal(a1, a2, *(_DWORD *)(v7 + 196) != 0);
          Value = (pthread_mutex_t *)APSWrapperGetValue();
          pthread_mutex_unlock(Value);
        }
        else if (gLogCategory_APTransportConnectionUDPNW <= 30
               && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      return 0;
    }
    else
    {
      cf = CFRetain(a1);
      v13 = CFRetain(a2);
      if (APSAtomicMessageQueueSendMessage())
      {
        cf = 0;
        v13 = 0;
        APSRealTimeSignalRaise();
        v10 = 0;
      }
      else
      {
        APSLogErrorAt();
        v10 = 4294960549;
      }
      if (cf)
        CFRelease(cf);
      if (v13)
        CFRelease(v13);
    }
  }
  return v10;
}

uint64_t udpconnection_SendBatch(const void *a1, const __CFArray *a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t *Value;
  uint64_t v10;
  CFTypeRef cf;
  CFTypeRef v13;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    v10 = 4294894974;
LABEL_19:
    APSLogErrorAt();
    return v10;
  }
  if (!a2)
  {
    v10 = 4294894974;
    goto LABEL_19;
  }
  v5 = DerivedStorage;
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    return 4294894970;
  }
  if (CFArrayGetCount(a2) < 1)
    return 0;
  v6 = *((_DWORD *)v5 + 48);
  v7 = CMBaseObjectGetDerivedStorage();
  if (v6 == 3)
  {
    if (*(_DWORD *)(v7 + 144) == 5)
    {
      v8 = *(_QWORD *)(v7 + 72);
      *(_QWORD *)(v8 + 72) = mach_absolute_time();
      APSWrapperGetValue();
      if (FigSimpleMutexTryLock())
      {
        udpconnection_sendBatchInternal((uint64_t)a1, a2);
        Value = (pthread_mutex_t *)APSWrapperGetValue();
        pthread_mutex_unlock(Value);
      }
      else if (gLogCategory_APTransportConnectionUDPNW <= 30
             && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    return 0;
  }
  cf = CFRetain(a1);
  v13 = CFRetain(a2);
  if (APSAtomicMessageQueueSendMessage())
  {
    cf = 0;
    v13 = 0;
    APSRealTimeSignalRaise();
    v10 = 0;
  }
  else
  {
    APSLogErrorAt();
    v10 = 4294960549;
  }
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  return v10;
}

uint64_t udpconnection_RunInline()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  unsigned int *Value;
  unsigned int v4;
  pthread_mutex_t *v5;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 192) != 3)
    return 4294894975;
  v1 = DerivedStorage;
  v2 = *(_QWORD *)(DerivedStorage + 72);
  *(_QWORD *)(v2 + 72) = mach_absolute_time();
  Value = (unsigned int *)APSWrapperGetValue();
  do
    v4 = __ldxr(Value);
  while (__stxr(v4, Value));
  if ((v4 & 3) != 1)
  {
    APSRealTimeSignalRaise();
    return 0;
  }
  v5 = (pthread_mutex_t *)APSWrapperGetValue();
  if (udpconnection_runInlineInternal(v5, *(_QWORD *)(v1 + 32), 0)
    || gLogCategory_APTransportConnectionUDPNW > 30)
  {
    return 0;
  }
  if (gLogCategory_APTransportConnectionUDPNW != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
  {
    LogPrintF();
    return 0;
  }
  return result;
}

uint64_t udpconnection_setupNWConnection(uint64_t a1, void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  const void *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  nw_endpoint_t v10;
  uint64_t v11;
  uint64_t RemoteEndpoint;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];
  _QWORD handler[10];
  nw_endpoint_t v20;
  NSObject *v21;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v20 = 0;
  v21 = 0;
  if (DerivedStorage[37])
  {
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v10 = 0;
    v16 = 0;
    v9 = 0;
    v14 = 0;
    goto LABEL_20;
  }
  v5 = DerivedStorage;
  v6 = (const void *)DerivedStorage[26];
  v7 = (const void *)DerivedStorage[6];
  v8 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (!v8)
  {
    v16 = 4294894973;
    APSLogErrorAt();
LABEL_28:
    v10 = 0;
    v9 = 0;
    goto LABEL_34;
  }
  if (a2)
  {
    v9 = nw_retain(a2);
    v10 = 0;
    goto LABEL_8;
  }
  v11 = udpconnection_createUDPParameters(a1, (const __CFString *)v5[27], &v21);
  if ((_DWORD)v11)
  {
    v16 = v11;
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_28;
  }
  RemoteEndpoint = udpconnection_createRemoteEndpoint(a1, (uint64_t *)&v20);
  if ((_DWORD)RemoteEndpoint)
  {
    v16 = RemoteEndpoint;
    APSLogErrorAt();
    v9 = 0;
    v14 = 0;
    v10 = v20;
    goto LABEL_21;
  }
  v10 = v20;
  v9 = nw_connection_create(v20, v21);
  if (v9)
  {
LABEL_8:
    v13 = nw_retain(v9);
    v5[37] = v13;
    v14 = nw_connection_copy_description(v13);
    if (v14
      && gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*((_DWORD *)v5 + 48) != 3)
      nw_connection_set_queue(v9, (dispatch_queue_t)v5[5]);
    if (v6)
      CFRetain(v6);
    if (v7)
      CFRetain(v7);
    nw_retain(v9);
    nw_retain(v10);
    v15 = MEMORY[0x1E0C809B0];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = __udpconnection_setupNWConnection_block_invoke;
    handler[3] = &__block_descriptor_tmp_123;
    handler[4] = a1;
    handler[5] = v6;
    handler[6] = v7;
    handler[7] = v8;
    handler[8] = v9;
    handler[9] = v10;
    nw_connection_set_state_changed_handler(v9, handler);
    v18[0] = v15;
    v18[1] = 0x40000000;
    v18[2] = __udpconnection_setupNWConnection_block_invoke_2;
    v18[3] = &__block_descriptor_tmp_124;
    v18[4] = v9;
    udpconnection_runLockedInlineIfNecessary(a1, (uint64_t)v18);
    v16 = 0;
LABEL_20:
    v8 = 0;
    goto LABEL_21;
  }
  APSLogErrorAt();
  v16 = APSSignalErrorAt();
LABEL_34:
  v14 = 0;
LABEL_21:
  free(v14);
  nw_release(v10);
  nw_release(v21);
  nw_release(v9);
  if (v8)
    free(v8);
  return v16;
}

_BYTE *udpconnection_callEventCallback(const void *a1, uint64_t a2, const void *a3)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3)
      CFRetain(a3);
    if (a1)
      CFRetain(a1);
    return (_BYTE *)APSDispatchAsyncFHelper();
  }
  return result;
}

void udpconnectionInlineInactivityMonitor_fire(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  dispatch_time_t v5;
  NSObject *v6;
  void *v7;
  const void *v8;
  pthread_mutex_t *Value;
  dispatch_time_t v10;
  NSObject *v11;
  void *v12;
  char v13;

  v2 = mach_absolute_time();
  v13 = 0;
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 72);
    if (MillisecondsToUpTicks() + v3 > v2)
    {
      if (*(_BYTE *)(a1 + 64))
      {
        if (gLogCategory_APTransportConnectionUDPNW <= 50
          && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_BYTE *)(a1 + 64) = 0;
      }
      v4 = UpTicksToNanoseconds();
      v5 = dispatch_time(0, v4);
      v6 = *(NSObject **)(a1 + 40);
      v7 = (void *)CFRetain((CFTypeRef)a1);
      dispatch_after_f(v5, v6, v7, (dispatch_function_t)udpconnectionInlineInactivityMonitor_fire);
      goto LABEL_20;
    }
    if (!*(_BYTE *)(a1 + 64))
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_BYTE *)(a1 + 64) = 1;
    }
    v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    Value = (pthread_mutex_t *)APSWrapperGetValue();
    udpconnection_runInlineInternal(Value, *(_QWORD *)(a1 + 48), &v13);
    if (v13 && (*(_BYTE *)(a1 + 17) & 1) != 0)
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      nw_context_cancel();
      if (!v8)
        goto LABEL_20;
    }
    else
    {
      v10 = dispatch_time(0, 20000000);
      v11 = *(NSObject **)(a1 + 40);
      v12 = (void *)CFRetain((CFTypeRef)a1);
      dispatch_after_f(v10, v11, v12, (dispatch_function_t)udpconnectionInlineInactivityMonitor_fire);
      if (!v8)
      {
LABEL_20:
        CFRelease((CFTypeRef)a1);
        return;
      }
    }
    CFRelease(v8);
    goto LABEL_20;
  }
}

uint64_t udpconnection_runInlineInternal(pthread_mutex_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  char v6;

  v5 = FigSimpleMutexTryLock();
  if ((_DWORD)v5)
  {
    kdebug_trace();
    v6 = nw_context_run_queued_blocks_inline();
    kdebug_trace();
    pthread_mutex_unlock(a1);
    if (a3)
      *a3 = v6 ^ 1;
  }
  return v5;
}

void __udpconnection_setupListenerNW_block_invoke(uint64_t a1, nw_connection_t connection)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 400) && !*(_QWORD *)(v3 + 296))
  {
    udpconnection_setupNWConnection(*(_QWORD *)(a1 + 40), connection);
  }
  else
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    nw_connection_cancel(connection);
  }
}

void __udpconnection_setupListenerNW_block_invoke_2(uint64_t a1, int a2, nw_error_t error)
{
  int error_code;

  if (error)
    error_code = nw_error_get_error_code(error);
  else
    error_code = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = error_code;
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a2 == 3 || error)
  {
    if (gLogCategory_APTransportConnectionUDPNW > 90
      || gLogCategory_APTransportConnectionUDPNW == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (a2 != 4)
  {
    if (a2 != 2)
    {
      if (a2 == 1
        && gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        nw_listener_get_port(*(nw_listener_t *)(a1 + 48));
        LogPrintF();
      }
      return;
    }
    if (gLogCategory_APTransportConnectionUDPNW > 50
      || gLogCategory_APTransportConnectionUDPNW == -1 && !_LogCategory_Initialize())
    {
LABEL_27:
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
      return;
    }
    nw_listener_get_port(*(nw_listener_t *)(a1 + 48));
LABEL_25:
    LogPrintF();
    goto LABEL_27;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  nw_release(*(void **)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void __udpconnection_setupListenerNW_block_invoke_3(uint64_t a1)
{
  nw_listener_start(*(nw_listener_t *)(*(_QWORD *)(a1 + 32) + 304));
}

void __udpconnection_setupListenerNW_block_invoke_4(uint64_t a1)
{
  nw_listener_cancel(*(nw_listener_t *)(*(_QWORD *)(a1 + 32) + 304));
}

uint64_t __udpconnection_setLocalNetworkInfo_block_invoke(uint64_t a1)
{
  unsigned int port;
  uint64_t v3;
  uint64_t result;
  sockaddr address;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  nw_release(*(void **)(*(_QWORD *)(a1 + 32) + 232));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) = 0;
  port = nw_listener_get_port(*(nw_listener_t *)(*(_QWORD *)(a1 + 32) + 304));
  v3 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 224) = port;
  if (*(_BYTE *)(v3 + 268))
  {
    *(_DWORD *)&address.sa_data[10] = 0;
    *(_QWORD *)&address.sa_data[2] = 0;
    *(_WORD *)&address.sa_len = 528;
    *(_WORD *)address.sa_data = __rev16(port);
    result = (uint64_t)nw_endpoint_create_address(&address);
  }
  else
  {
    result = nw_listener_copy_local_endpoint();
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232) = result;
  return result;
}

uint64_t __udpconnection_setupNWConnection_block_invoke(_QWORD *a1, int a2, void *a3)
{
  uint64_t v6;

  v6 = APSRealTimeAllocatorAllocate();
  *(_QWORD *)v6 = a1[4];
  *(_QWORD *)(v6 + 8) = a1[5];
  *(_QWORD *)(v6 + 16) = a1[6];
  *(_QWORD *)(v6 + 24) = a1[7];
  *(_QWORD *)(v6 + 32) = a1[8];
  *(_QWORD *)(v6 + 40) = a1[9];
  *(_DWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 56) = nw_retain(a3);
  return APSRealTimeDispatcherAsync();
}

void udpconnection_handleNWConnectionStateChange(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  uint64_t DerivedStorage;
  CFNumberRef v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  _BYTE **v11;
  _BYTE *v12;
  _BYTE **v13;
  const void *v14;
  const void *v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  uint64_t v19;
  _BYTE **v20;
  _BYTE *v21;
  _BYTE **v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t Instance;
  _QWORD *v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  uint64_t v33;
  unsigned int *Value;
  unsigned int v35;
  _QWORD v36[7];
  _QWORD v37[6];
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD valuePtr[3];

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
    LODWORD(v2) = nw_error_get_error_code(v2);
  valuePtr[0] = (_DWORD)v2;
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 0;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2000000000;
  v41 = 0;
  nw_endpoint_get_port(*(nw_endpoint_t *)(a1 + 40));
  v5 = 0;
  nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 40));
  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v5 = 0;
      goto LABEL_41;
    case 3:
      if (!v3)
        goto LABEL_26;
      v6 = MEMORY[0x1E0C809B0];
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 0x40000000;
      v37[2] = __udpconnection_handleNWConnectionStateChange_block_invoke;
      v37[3] = &unk_1E8255EA0;
      v37[4] = &v38;
      v37[5] = a1;
      udpconnection_runLockedInlineIfNecessary((uint64_t)v3, (uint64_t)v37);
      v7 = v39[3];
      if (v7)
      {
        v8 = nw_parameters_copy_local_endpoint(v7);
        v9 = v8;
        if (v8)
        {
          nw_endpoint_get_port(v8);
          nw_endpoint_get_hostname(v9);
        }
      }
      else
      {
        v9 = 0;
      }
      APTTrafficMetricsConnectionFormed(*(_QWORD *)(DerivedStorage + 408));
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
      v17 = *(const __CFString **)(DerivedStorage + 216);
      if (v17 && CFStringHasPrefix(v17, CFSTR("llw")) && !*(_BYTE *)(DerivedStorage + 176))
      {
        v18 = (void *)nw_protocol_copy_replicate_definition();
        v36[0] = v6;
        v36[1] = 0x40000000;
        v36[2] = __udpconnection_handleNWConnectionStateChange_block_invoke_2;
        v36[3] = &unk_1E8255EC8;
        v36[4] = &v42;
        v36[5] = a1;
        v36[6] = v18;
        udpconnection_runLockedInlineIfNecessary((uint64_t)v3, (uint64_t)v36);
        v19 = v43[3];
        if (!v19)
        {
          APSSignalErrorAt();
          v19 = v43[3];
        }
        *(_QWORD *)(DerivedStorage + 320) = v19;
        nw_release(v18);
      }
      *(_DWORD *)(DerivedStorage + 144) = 5;
      udpconnection_callEventCallback(v3, 5, 0);
      if (!*(_BYTE *)(DerivedStorage + 176))
        goto LABEL_91;
      v20 = *(_BYTE ***)(a1 + 24);
      v21 = *v20;
      if (*v20)
      {
        if (v21[16]
          || (udpconnectionReceiveLoopContext_invalidateInternal((uint64_t)v21),
              v22 = *(_BYTE ***)(a1 + 24),
              (v21 = *v22) != 0))
        {
          CFRelease(v21);
          v22 = *(_BYTE ***)(a1 + 24);
        }
        *v22 = 0;
        v20 = *(_BYTE ***)(a1 + 24);
        v23 = (_QWORD *)CMBaseObjectGetDerivedStorage();
        if (!v20)
          goto LABEL_97;
      }
      else
      {
        v23 = (_QWORD *)CMBaseObjectGetDerivedStorage();
      }
      v24 = v23;
      if (!v23[26] || !v23[37] || !v23[5])
        goto LABEL_97;
      if (gAPTransportConnectionUDPNWReceiveLoopContextInitOnce != -1)
        dispatch_once_f(&gAPTransportConnectionUDPNWReceiveLoopContextInitOnce, 0, (dispatch_function_t)_APTransportConnectionUDPNWReceiveLoopContextGetTypeID);
      Instance = _CFRuntimeCreateInstance();
      if (!Instance)
      {
LABEL_97:
        APSLogErrorAt();
        goto LABEL_85;
      }
      v26 = (_QWORD *)Instance;
      *(_QWORD *)(Instance + 96) = 0;
      *(_OWORD *)(Instance + 64) = 0u;
      *(_OWORD *)(Instance + 80) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_OWORD *)(Instance + 48) = 0u;
      *(_OWORD *)(Instance + 16) = 0u;
      *(_QWORD *)(Instance + 24) = v3;
      v27 = (CFTypeRef)v24[26];
      if (v27)
        v27 = CFRetain(v27);
      v26[4] = v27;
      v26[5] = nw_retain((void *)v24[37]);
      dispatch_retain((dispatch_object_t)v24[5]);
      v26[6] = v24[5];
      v28 = (CFTypeRef)v24[7];
      if (v28)
        v28 = CFRetain(v28);
      v26[7] = v28;
      v29 = (CFTypeRef)v24[8];
      if (v29)
        v29 = CFRetain(v29);
      v26[8] = v29;
      v26[9] = v24[19];
      v30 = (CFTypeRef)v24[49];
      if (v30)
        v30 = CFRetain(v30);
      v26[10] = v30;
      v31 = (CFTypeRef)v24[51];
      if (v31)
        v31 = CFRetain(v31);
      v26[11] = v31;
      v32 = (CFTypeRef)v24[48];
      if (v32)
        v32 = CFRetain(v32);
      v26[12] = v32;
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *v20 = v26;
LABEL_85:
      v33 = **(_QWORD **)(a1 + 24);
      if (v33)
      {
        udpconnection_receiveDataLoop(v33);
      }
      else if (gLogCategory_APTransportConnectionUDPNW <= 90
             && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
LABEL_91:
      pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
      if (*(_QWORD *)(DerivedStorage + 64))
      {
        Value = (unsigned int *)APSWrapperGetValue();
        do
          v35 = __ldxr(Value);
        while (__stxr(v35 | 1, Value));
      }
      v5 = 0;
LABEL_95:
      CFRelease(v3);
      v10 = v9;
      if (v5)
LABEL_43:
        CFRelease(v5);
LABEL_44:
      nw_release((void *)v39[3]);
      nw_release(v10);
      v16 = *(void **)(a1 + 56);
      if (v16)
        nw_release(v16);
      APSRealTimeAllocatorDeallocate();
      _Block_object_dispose(&v38, 8);
      _Block_object_dispose(&v42, 8);
      return;
    case 4:
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v3)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
        *(_DWORD *)(DerivedStorage + 144) = 4;
        v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
        udpconnection_callEventCallback(v3, *(unsigned int *)(DerivedStorage + 144), v5);
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
        v9 = 0;
        goto LABEL_95;
      }
LABEL_26:
      v10 = 0;
      goto LABEL_44;
    case 5:
      if (gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v3)
      {
        APTTrafficMetricsConnectionClosed(*(_QWORD *)(DerivedStorage + 408));
        pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 8));
        *(_DWORD *)(DerivedStorage + 144) = 6;
        v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
        udpconnection_callEventCallback(v3, *(unsigned int *)(DerivedStorage + 144), v5);
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 8));
      }
      else
      {
        v5 = 0;
      }
      v11 = *(_BYTE ***)(a1 + 24);
      v12 = *v11;
      if (*v11)
      {
        if (v12[16]
          || (udpconnectionReceiveLoopContext_invalidateInternal((uint64_t)v12),
              v13 = *(_BYTE ***)(a1 + 24),
              (v12 = *v13) != 0))
        {
          CFRelease(v12);
          v13 = *(_BYTE ***)(a1 + 24);
        }
        *v13 = 0;
        v11 = *(_BYTE ***)(a1 + 24);
      }
      free(v11);
      v14 = *(const void **)(a1 + 8);
      if (v14)
        CFRelease(v14);
      v15 = *(const void **)(a1 + 16);
      if (v15)
        CFRelease(v15);
      nw_release(*(void **)(a1 + 32));
      nw_release(*(void **)(a1 + 40));
      goto LABEL_41;
    default:
LABEL_41:
      v9 = 0;
      v10 = 0;
      if (v3)
        goto LABEL_95;
      if (v5)
        goto LABEL_43;
      goto LABEL_44;
  }
}

void __udpconnection_setupNWConnection_block_invoke_2(uint64_t a1)
{
  nw_connection_start(*(nw_connection_t *)(a1 + 32));
}

nw_parameters_t __udpconnection_handleNWConnectionStateChange_block_invoke(uint64_t a1)
{
  nw_parameters_t result;

  result = nw_connection_copy_parameters(*(nw_connection_t *)(*(_QWORD *)(a1 + 40) + 32));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

nw_protocol_metadata_t __udpconnection_handleNWConnectionStateChange_block_invoke_2(uint64_t a1)
{
  nw_protocol_metadata_t result;

  result = nw_connection_copy_protocol_metadata(*(nw_connection_t *)(*(_QWORD *)(a1 + 40) + 32), *(nw_protocol_definition_t *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t udpconnection_receiveDataLoop(uint64_t result)
{
  const void *v1;

  if (!*(_BYTE *)(result + 16))
  {
    v1 = (const void *)result;
    APTTrafficMetricsMessageReadStarted(*(_QWORD *)(result + 88));
    CFRetain(v1);
    return nw_connection_receive_multiple();
  }
  return result;
}

void udpconnectionReceiveLoopContext_invalidateInternal(uint64_t a1)
{
  const void *v2;
  void *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  *(_BYTE *)(a1 + 16) = 1;
  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    nw_release(v3);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v6 = *(const void **)(a1 + 64);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)(a1 + 72) = 0;
  v7 = *(const void **)(a1 + 80);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v8 = *(const void **)(a1 + 88);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v9 = *(const void **)(a1 + 96);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 96) = 0;
  }
}

uint64_t _APTransportConnectionUDPNWReceiveLoopContextGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPTransportConnectionUDPNWReceiveLoopContextTypeID = result;
  return result;
}

void _APTransportConnectionUDPNWReceiveLoopContextFinalize(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 16))
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 90
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    udpconnectionReceiveLoopContext_invalidateInternal(a1);
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void __udpconnection_receiveDataLoop_block_invoke(uint64_t a1, dispatch_data_t data, uint64_t a3, int a4, NSObject *a5)
{
  uint64_t v9;
  uint64_t v10;
  int error_code;
  const void *v12;
  int v13;
  uint64_t v14;
  uint64_t (*v15)(const __CFAllocator *, OpaqueCMBlockBuffer *, CFTypeRef *);
  uint64_t DerivedStorage;
  unsigned int (*v17)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t Default;
  uint64_t v19;
  unsigned int *Value;
  unsigned int v21;
  const void *v22;
  CFTypeRef cf;
  CFTypeRef v24;
  uint64_t v25;
  int v26;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
  if (data)
  {
    dispatch_data_get_size(data);
    if (!a5)
      goto LABEL_5;
    goto LABEL_3;
  }
  if (a5)
LABEL_3:
    nw_error_get_error_code(a5);
LABEL_5:
  APTTrafficMetricsMessageReadFinished(v9);
  v10 = *(_QWORD *)(a1 + 32);
  cf = 0;
  v24 = 0;
  if (*(_BYTE *)(v10 + 16))
  {
    v13 = 0;
    v12 = 0;
    goto LABEL_37;
  }
  if (!a5)
  {
    if (!data)
    {
      APSLogErrorAt();
      if (gLogCategory_APTransportConnectionUDPNW <= 90
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_33;
    }
    if (*(_QWORD *)(v10 + 80))
    {
      if (APSRealTimeReadableRingBufferWrite())
      {
        APSLogErrorAt();
        goto LABEL_33;
      }
      v14 = *(_QWORD *)(v10 + 96);
      v15 = *(uint64_t (**)(const __CFAllocator *, OpaqueCMBlockBuffer *, CFTypeRef *))(v10 + 72);
      v26 = 0;
      v25 = 0;
      if (v15 == APTransportPackageRTPCreateWithBBuf && APSDispatchDataCopyBytes())
        APSLogErrorAt();
      udpconnection_markSignPostExplicit(v14);
      v12 = 0;
    }
    else
    {
      v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (!v12)
        goto LABEL_34;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      APSRealTimeAllocatorGetDefault();
      if (APSCMBlockBufferCreateWithDispatchData())
      {
        APSLogErrorAt();
        APSSignalErrorAt();
        goto LABEL_34;
      }
      v17 = *(unsigned int (**)(uint64_t, CFTypeRef, CFTypeRef *))(DerivedStorage + 152);
      Default = APSRealTimeAllocatorGetDefault();
      if (v17(Default, v24, &cf))
      {
        APSLogErrorAt();
        goto LABEL_34;
      }
      udpconnection_getSequenceNumberForPackage((uint64_t)cf);
      v19 = CMBaseObjectGetDerivedStorage();
      udpconnection_markSignPostExplicit(*(_QWORD *)(v19 + 384));
      udpconnection_callEventCallback(v12, 7, cf);
    }
    if (*(_QWORD *)(v10 + 64))
    {
      Value = (unsigned int *)APSWrapperGetValue();
      do
        v21 = __ldxr(Value);
      while (__stxr(v21 & 0xFFFFFFFD, Value));
      if ((v21 & 2) != 0
        && gLogCategory_APTransportConnectionUDPNW <= 50
        && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    goto LABEL_34;
  }
  error_code = nw_error_get_error_code(a5);
  if (nw_error_get_error_domain(a5) == nw_error_domain_posix && error_code == 89)
  {
    v12 = 0;
    v13 = 1;
    goto LABEL_35;
  }
  v12 = nw_error_copy_cf_error(a5);
  if (gLogCategory_APTransportConnectionUDPNW <= 90
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v12)
  {
    CFRelease(v12);
LABEL_33:
    v12 = 0;
  }
LABEL_34:
  v13 = 0;
LABEL_35:
  if (cf)
    CFRelease(cf);
LABEL_37:
  if (v24)
    CFRelease(v24);
  if (v12)
    CFRelease(v12);
  APTTrafficMetricsMessageProcessed(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
  if (v13 || a4)
  {
    if (!v13)
      udpconnection_receiveDataLoop(*(_QWORD *)(a1 + 32));
    v22 = *(const void **)(a1 + 32);
    if (v22)
      CFRelease(v22);
  }
  else
  {
    APTTrafficMetricsMessageReadStarted(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88));
  }
}

uint64_t udpconnection_markSignPostExplicit(uint64_t a1)
{
  uint64_t v2;
  CMTime v4;
  uint64_t v5;
  CMTime v6;
  CMTime v7;

  v7 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v6 = v7;
  v5 = 0;
  v2 = mach_absolute_time();
  CMClockMakeHostTimeFromSystemUnits(&v7, v2);
  if (a1)
  {
    v4 = v7;
    APSRealTimePTPClockGetEstimatedPTPTimeForHostTime();
  }
  v4 = v7;
  CMTimeGetSeconds(&v4);
  v4 = v6;
  CMTimeGetSeconds(&v4);
  return kdebug_trace();
}

uint64_t udpconnection_getSequenceNumberForPackage(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  int v3;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  const void *v7;

  if (!a1)
    goto LABEL_13;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v2)
    return 0;
  v3 = v2(a1);
  if (v3 != 1735550308 && v3 != 1734700576)
    return 0;
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v5 || (v6 = v5(a1)) == 0)
  {
LABEL_13:
    APSLogErrorAt();
    return 0;
  }
  v7 = (const void *)v6;
  if (APSTransportMessageGetAudioDataHeader())
    APSLogErrorAt();
  CFRelease(v7);
  return 0;
}

void udpconnection_deferCallEventCallback(CFTypeRef *a1)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 128))
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 136), a1, (dispatch_function_t)udpconnection_callEventCallbackOnEventQueue);
  v3 = a1[2];
  if (v3)
    CFRelease(v3);
  if (*a1)
    CFRelease(*a1);
}

uint64_t udpconnection_callEventCallbackOnEventQueue(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 128))(*(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(DerivedStorage + 120));
}

void udpconnection_addEventCallbackInternal(uint64_t a1)
{
  NSObject *v2;

  udpconnection_setEventCallback(a1);
  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

uint64_t udpconnection_setEventCallback(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 120) = *(_OWORD *)(a1 + 8);
  v3 = *(NSObject **)(DerivedStorage + 136);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(DerivedStorage + 136) = v4;
    dispatch_retain(v4);
  }
  return 0;
}

void udpconnection_sendPackageInternal(const void *a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(const void *);
  unint64_t v9;
  __int16 SequenceNumberForPackage;
  __int16 v11;
  uint64_t (*v12)(const void *);
  uint64_t v13;
  OpaqueCMBlockBuffer *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  size_t DataLength;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD completion[9];
  __int16 v29;
  const void *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 src[8];
  uint64_t v35;
  NSObject *v36;
  dispatch_data_t v37;
  uuid_t dst;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v37 = 0;
  v7 = mach_absolute_time();
  v8 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (v8)
    v9 = v8(a2);
  else
    v9 = 0;
  SequenceNumberForPackage = udpconnection_getSequenceNumberForPackage((uint64_t)a2);
  memset(dst, 0, sizeof(dst));
  v36 = 0;
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    goto LABEL_12;
  }
  if (*(_DWORD *)(DerivedStorage + 144) != 5)
  {
LABEL_13:
    v14 = 0;
    goto LABEL_57;
  }
  v11 = SequenceNumberForPackage;
  *(_QWORD *)src = 1;
  v35 = 0;
  *(_WORD *)&src[2] = SequenceNumberForPackage;
  uuid_copy(dst, src);
  v12 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v12 || (v13 = v12(a2)) == 0)
  {
    APSLogErrorAt();
LABEL_12:
    APSSignalErrorAt();
    goto LABEL_13;
  }
  v14 = (OpaqueCMBlockBuffer *)v13;
  v15 = CMBaseObjectGetDerivedStorage();
  udpconnection_markSignPostExplicit(*(_QWORD *)(v15 + 384));
  if (APSDispatchDataCreateWithBlockBuffer())
    goto LABEL_70;
  if (!v9)
  {
    v16 = 0;
    goto LABEL_27;
  }
  if (v9 >= v7)
    v16 = UpTicksToMilliseconds();
  else
    v16 = -UpTicksToMilliseconds();
  if (v16 > *(_QWORD *)(DerivedStorage + 328))
  {
LABEL_27:
    v17 = *(_QWORD *)(DerivedStorage + 336);
    if (v16 >= v17)
      v18 = *(_QWORD *)(DerivedStorage + 336);
    else
      v18 = v16;
    if (v17)
      v19 = v18;
    else
      v19 = v16;
    if (*(_DWORD *)(DerivedStorage + 196))
    {
      v20 = a3 ? *(_QWORD *)(DerivedStorage + 344) : *(_QWORD *)(DerivedStorage + 352);
      if (v20)
        v19 = v20;
    }
    if (gLogCategory_APTransportConnectionUDPNW <= 30
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v21 = *(_QWORD *)(DerivedStorage + 376);
    if (v21)
    {
      if (gLogCategory_APTransportConnectionUDPNW <= 30)
      {
        if (gLogCategory_APTransportConnectionUDPNW != -1
          || (v22 = _LogCategory_Initialize(), v21 = *(_QWORD *)(DerivedStorage + 376), v22))
        {
          LogPrintF();
          v21 = *(_QWORD *)(DerivedStorage + 376);
        }
      }
      if (v21 == -1)
        v19 = 0;
      else
        v19 = v21;
    }
    if (!APSRecycleBinTakeItem())
    {
      v23 = CMBaseObjectGetDerivedStorage();
      udpconnection_markSignPostExplicit(*(_QWORD *)(v23 + 384));
      nw_content_context_set_expiration_milliseconds(v36, v19);
      nw_content_context_set_packet_id();
      DataLength = CMBlockBufferGetDataLength(v14);
      APTTrafficMetricsSendStarted(*(_QWORD *)(DerivedStorage + 408));
      if (a1)
        CFRetain(a1);
      if (a2)
        CFRetain(a2);
      nw_retain(v36);
      v25 = *(NSObject **)(DerivedStorage + 296);
      completion[0] = MEMORY[0x1E0C809B0];
      completion[1] = 0x40000000;
      completion[2] = __udpconnection_sendPackageInternal_block_invoke;
      completion[3] = &__block_descriptor_tmp_155;
      v29 = v11;
      completion[4] = a1;
      completion[5] = a2;
      completion[6] = DerivedStorage;
      completion[7] = v36;
      completion[8] = DataLength;
      nw_connection_send(v25, v37, v36, 1, completion);
      goto LABEL_57;
    }
LABEL_70:
    APSLogErrorAt();
    goto LABEL_57;
  }
  if (*(_BYTE *)(DerivedStorage + 368))
  {
    if (gLogCategory_APTransportConnectionUDPNW <= 30
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v16 = *(_QWORD *)(DerivedStorage + 328) + 1;
    goto LABEL_27;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 30
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a3)
  {
    v26 = (unint64_t *)(DerivedStorage + 360);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    APSAsyncLoggerGetSharedLogger();
    v30 = a1;
    v31 = v11;
    v32 = v16;
    v33 = 0;
    APSAsyncLoggerLogMessage();
  }
LABEL_57:
  if (v36)
  {
    nw_release(v36);
    v36 = 0;
  }
  if (v37)
    dispatch_release(v37);
  if (v14)
    CFRelease(v14);
}

uint64_t udpconnection_primaryDropLogger()
{
  uint64_t result;

  if (gLogCategory_APTransportConnectionUDPNW <= 90)
  {
    if (gLogCategory_APTransportConnectionUDPNW != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void __udpconnection_sendPackageInternal_block_invoke(uint64_t a1, nw_error_t error)
{
  int error_code;
  uint64_t DerivedStorage;
  const void *v5;
  const void *v6;

  if (error)
    error_code = nw_error_get_error_code(error);
  else
    error_code = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  udpconnection_markSignPostExplicit(*(_QWORD *)(DerivedStorage + 384));
  if (error_code)
  {
    udpconnection_callEventCallback(*(const void **)(a1 + 32), 8, *(const void **)(a1 + 40));
    if (gLogCategory_APTransportConnectionUDPNW <= 50
      && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  APSRecycleBinAddItem();
  APTTrafficMetricsSendFinished(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 408));
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
  nw_release(*(void **)(a1 + 56));
}

void udpconnection_sendBatchInternal(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  CFTypeID v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD v15[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(a2);
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
  else if (*(_DWORD *)(DerivedStorage + 144) == 5)
  {
    v6 = Count;
    v7 = Count - 1;
    if (Count < 1)
    {
LABEL_8:
      v11 = *(_DWORD *)(DerivedStorage + 196);
      v12 = -1;
      if (v11 == 1718776692)
        v12 = 0;
      if (v11 == 1818325876)
        v13 = v7;
      else
        v13 = v12;
      v14 = *(NSObject **)(DerivedStorage + 296);
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 0x40000000;
      v15[2] = __udpconnection_sendBatchInternal_block_invoke;
      v15[3] = &__block_descriptor_tmp_158;
      v15[4] = v6;
      v15[5] = a1;
      v15[6] = a2;
      v15[7] = v13;
      nw_connection_batch(v14, v15);
    }
    else
    {
      v8 = 0;
      while (CFArrayGetValueAtIndex(a2, v8))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v8);
        v10 = CFGetTypeID(ValueAtIndex);
        if (v10 != APTransportPackageGetTypeID())
          break;
        if (v6 == ++v8)
          goto LABEL_8;
      }
      APSLogErrorAt();
    }
  }
}

void __udpconnection_sendBatchInternal_block_invoke(uint64_t a1)
{
  CFIndex v2;
  const void *v3;
  const void *ValueAtIndex;

  if (*(uint64_t *)(a1 + 32) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(const void **)(a1 + 40);
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v2);
      udpconnection_sendPackageInternal(v3, ValueAtIndex, v2++ == *(_QWORD *)(a1 + 56));
    }
    while (v2 < *(_QWORD *)(a1 + 32));
  }
}

uint64_t _APTransportConnectionUDPNWInlineInactivityMonitorGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPTransportConnectionUDPNWInlineInactivityMonitorTypeID = result;
  return result;
}

void _APTransportConnectionUDPNWInlineInactivityMonitorFinalize(_QWORD *a1)
{
  NSObject *v2;
  void *v3;
  const void *v4;
  const void *v5;

  v2 = a1[5];
  if (v2)
  {
    dispatch_release(v2);
    a1[5] = 0;
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    nw_release(v3);
    a1[6] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  if (gLogCategory_APTransportConnectionUDPNW <= 50
    && (gLogCategory_APTransportConnectionUDPNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

const char *APBrowserGetEventString(int a1)
{
  if ((a1 - 1) > 7)
    return "Unknown";
  else
    return off_1E82560D0[a1 - 1];
}

uint64_t APBrowserGetClassID()
{
  if (APBrowserGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APBrowserGetClassID_sRegisterOnce, &APBrowserGetClassID_sClassID, (dispatch_function_t)browser_getClassID);
  return APBrowserGetClassID_sClassID;
}

uint64_t browser_getClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t APBrowserGetTypeID()
{
  if (APBrowserGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APBrowserGetClassID_sRegisterOnce, &APBrowserGetClassID_sClassID, (dispatch_function_t)browser_getClassID);
  return CMBaseClassGetCFTypeID();
}

CFStringRef browser_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APBrowser %p]"), a1);
}

uint64_t APTransportPackageGetClassID()
{
  if (APTransportPackageGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APTransportPackageGetClassID_sRegisterOnce, &APTransportPackageGetClassID_sClassID, (dispatch_function_t)package_getClassID);
  return APTransportPackageGetClassID_sClassID;
}

uint64_t package_getClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t APTransportPackageGetTypeID()
{
  if (APTransportPackageGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APTransportPackageGetClassID_sRegisterOnce, &APTransportPackageGetClassID_sClassID, (dispatch_function_t)package_getClassID);
  return CMBaseClassGetCFTypeID();
}

uint64_t APTransportParcelMakeWithAllocators(const __CFAllocator *a1, const __CFAllocator *a2, size_t a3, size_t a4, CFAllocatorRef **a5)
{
  CFAllocatorRef *v10;
  CFAllocatorRef *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  if (!a3 || !a5)
  {
    APSLogErrorAt();
    v11 = 0;
    v15 = 4294954516;
    goto LABEL_11;
  }
  v10 = (CFAllocatorRef *)CFAllocatorAllocate(a1, 56, 0);
  v11 = v10;
  if (!v10)
    goto LABEL_13;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  v10[6] = a1;
  *v10 = (CFAllocatorRef)a3;
  if (a1)
    CFRetain(a1);
  if (a4)
  {
    v12 = CFAllocatorAllocate(a2, a4 + a3, 0);
    if (v12)
    {
      v13 = v12;
      v14 = CMBlockBufferCreateWithMemoryBlock(v11[6], v12, a4 + a3, a2, 0, a3, a4, 0, v11 + 4);
      if ((_DWORD)v14)
      {
        v15 = v14;
        APSLogErrorAt();
        CFAllocatorDeallocate(a2, v13);
        goto LABEL_11;
      }
      v11[5] = (CFAllocatorRef)v13;
      goto LABEL_10;
    }
LABEL_13:
    APSLogErrorAt();
    v15 = 4294954510;
    goto LABEL_11;
  }
LABEL_10:
  v15 = 0;
  *a5 = v11;
  v11 = 0;
LABEL_11:
  APTransportParcelFree(v11);
  return v15;
}

void APTransportParcelFree(void *ptr)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (ptr)
  {
    v2 = (const void *)*((_QWORD *)ptr + 6);
    *((_QWORD *)ptr + 5) = 0;
    v3 = (const void *)*((_QWORD *)ptr + 2);
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)ptr + 2) = 0;
    }
    v4 = (const void *)*((_QWORD *)ptr + 4);
    if (v4)
    {
      CFRelease(v4);
      *((_QWORD *)ptr + 4) = 0;
    }
    CFAllocatorDeallocate(*((CFAllocatorRef *)ptr + 6), ptr);
    if (v2)
      CFRelease(v2);
  }
}

uint64_t APTransportParcelMake(size_t a1, size_t a2, CFAllocatorRef **a3)
{
  return APTransportParcelMakeWithAllocators((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (const __CFAllocator *)*MEMORY[0x1E0C9AE10], a1, a2, a3);
}

uint64_t APTransportParcelGetBytes(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t APTransportParcelGetMessageData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t APTransportParcelSetMessageData(_QWORD *a1, CMBlockBufferRef theBuffer)
{
  OpaqueCMBlockBuffer *v2;
  size_t totalLengthOut;
  __int128 lengthAtOffsetOut;

  v2 = (OpaqueCMBlockBuffer *)a1[4];
  if (v2 == theBuffer)
    return 0;
  if (!a1[5])
  {
LABEL_5:
    a1[4] = theBuffer;
    if (theBuffer)
      CFRetain(theBuffer);
    if (v2)
      CFRelease(v2);
    return 0;
  }
  lengthAtOffsetOut = 0uLL;
  totalLengthOut = 0;
  CMBlockBufferGetDataPointer(theBuffer, 0, (size_t *)&lengthAtOffsetOut, &totalLengthOut, (char **)&lengthAtOffsetOut + 1);
  if (lengthAtOffsetOut == __PAIR128__(a1[5] + *a1, totalLengthOut))
  {
    v2 = (OpaqueCMBlockBuffer *)a1[4];
    goto LABEL_5;
  }
  APSLogErrorAt();
  return 4294954516;
}

uint64_t APTransportParcelGetMessageType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t APTransportParcelSetMessageType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t APTransportParcelCreateBBufRepresentation(uint64_t a1, const __CFAllocator *a2, const void *a3, CMBlockBufferRef *a4)
{
  size_t v8;
  size_t v9;
  uint64_t BlockBufferCopyingMemoryBlock;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  OpaqueCMBlockBuffer *v15;
  OpaqueCMBlockBuffer *v16;
  size_t DataLength;
  uint64_t appended;
  CMBlockBufferCustomBlockSource customBlockSource;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  if (!*(_QWORD *)(a1 + 40))
  {
    if (a3)
    {
      BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
      if ((_DWORD)BlockBufferCopyingMemoryBlock)
      {
        v11 = BlockBufferCopyingMemoryBlock;
LABEL_20:
        APSLogErrorAt();
        goto LABEL_22;
      }
    }
    else
    {
      if (!*(_BYTE *)(a1 + 8))
        goto LABEL_21;
      v14 = *(void **)(a1 + 16);
      if (v14)
        v14 = (void *)CFRetain(v14);
      blockBufferOut = (CMBlockBufferRef)v14;
    }
    v15 = *(OpaqueCMBlockBuffer **)(a1 + 32);
    if (!v15)
      goto LABEL_9;
    if (CMBlockBufferIsEmpty(v15))
      goto LABEL_9;
    v16 = *(OpaqueCMBlockBuffer **)(a1 + 32);
    DataLength = CMBlockBufferGetDataLength(v16);
    appended = CMBlockBufferAppendBufferReference(blockBufferOut, v16, 0, DataLength, 0);
    if (!(_DWORD)appended)
      goto LABEL_9;
    v11 = appended;
    goto LABEL_20;
  }
  v8 = *(_QWORD *)a1;
  v9 = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 32));
  if (a3)
  {
    memcpy(*(void **)(a1 + 40), a3, *(_QWORD *)a1);
LABEL_8:
    customBlockSource.version = 0;
    customBlockSource.AllocateBlock = 0;
    customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))parcel_bbufFree;
    customBlockSource.refCon = (void *)CFRetain(*(CFTypeRef *)(a1 + 32));
    v12 = CMBlockBufferCreateWithMemoryBlock(a2, *(void **)(a1 + 40), v9 + v8, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], &customBlockSource, 0, v9 + v8, 0, &blockBufferOut);
    if (!(_DWORD)v12)
    {
LABEL_9:
      v11 = 0;
      *a4 = blockBufferOut;
      return v11;
    }
    v11 = v12;
    goto LABEL_20;
  }
  if (*(_BYTE *)(a1 + 8))
    goto LABEL_8;
LABEL_21:
  APSLogErrorAt();
  v11 = 4294954516;
LABEL_22:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v11;
}

uint64_t APTransportParcelSetHeader(uint64_t a1, const void *a2)
{
  void *v3;
  uint64_t BlockBufferCopyingMemoryBlock;
  uint64_t v5;

  if (a2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
    {
      memcpy(v3, a2, *(_QWORD *)a1);
    }
    else
    {
      BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
      if ((_DWORD)BlockBufferCopyingMemoryBlock)
      {
        v5 = BlockBufferCopyingMemoryBlock;
        APSLogErrorAt();
        return v5;
      }
    }
    v5 = 0;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
  return v5;
}

uint64_t APTransportParcelIsHeaderSet(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

CFStringRef package_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APTransportPackage %p]"), a1);
}

uint64_t APBrowserDeviceQueryManagerGetClassID()
{
  if (APBrowserDeviceQueryManagerGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APBrowserDeviceQueryManagerGetClassID_sRegisterOnce, &APBrowserDeviceQueryManagerGetClassID_sClassID, (dispatch_function_t)deviceQueryManager_getClassID);
  return APBrowserDeviceQueryManagerGetClassID_sClassID;
}

uint64_t deviceQueryManager_getClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t APBrowserDeviceQueryManagerGetTypeID()
{
  if (APBrowserDeviceQueryManagerGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APBrowserDeviceQueryManagerGetClassID_sRegisterOnce, &APBrowserDeviceQueryManagerGetClassID_sClassID, (dispatch_function_t)deviceQueryManager_getClassID);
  return CMBaseClassGetCFTypeID();
}

CFStringRef deviceQueryManager_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APBrowserDeviceQueryManager %p]"), a1);
}

uint64_t APBrowserCarBonjourCreate(const __CFAllocator *a1, const void *a2, const void *a3, const __CFDictionary *a4, _QWORD *a5)
{
  CFTypeRef v10;
  uint64_t DerivedStorage;
  dispatch_queue_t v12;
  dispatch_queue_t v13;
  CFTypeRef v14;
  __CFDictionary *Mutable;
  __CFDictionary *v16;
  const void *Value;
  const void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  dispatch_semaphore_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  CFMutableDictionaryRef v28;
  NSObject *v29;
  NSObject *v30;
  _QWORD block[6];
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    APBrowserCarBonjourCreate_cold_1();
  if (!a5)
    APBrowserCarBonjourCreate_cold_2();
  APBrowserGetClassID();
  if (CMDerivedObjectCreate())
    APBrowserCarBonjourCreate_cold_3();
  v10 = cf;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = dispatch_queue_create("APBrowserCarBonjourInternalQueue", 0);
  *(_QWORD *)(DerivedStorage + 24) = v12;
  if (v12)
  {
    v13 = dispatch_queue_create("APBrowserCarBonjourEventQueue", 0);
    *(_QWORD *)(DerivedStorage + 120) = v13;
    if (v13)
    {
      v14 = a3 ? CFRetain(a3) : 0;
      *(_QWORD *)(DerivedStorage + 56) = v14;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v16 = Mutable;
        CFDictionarySetValue(Mutable, CFSTR("enableSessionEvents"), (const void *)*MEMORY[0x1E0C9AE40]);
        if (a4)
        {
          Value = CFDictionaryGetValue(a4, CFSTR("PowerAssertion"));
          *(_QWORD *)(DerivedStorage + 48) = Value;
          if (Value)
          {
            CFRetain(Value);
            CFDictionarySetValue(v16, CFSTR("powerAssertion"), *(const void **)(DerivedStorage + 48));
          }
          v18 = CFDictionaryGetValue(a4, CFSTR("EventRecorder"));
          *(_QWORD *)(DerivedStorage + 40) = v18;
          if (v18)
          {
            CFRetain(v18);
            CFDictionarySetValue(v16, CFSTR("eventRecorder"), *(const void **)(DerivedStorage + 40));
          }
          LODWORD(a4) = CFDictionaryGetInt64() != 0;
        }
        if (CFEqual(a2, CFSTR("USB")))
        {
          *(_QWORD *)(DerivedStorage + 16) = CFRetain(CFSTR("USB"));
          CFDictionarySetInt64();
          v19 = (_QWORD *)(DerivedStorage + 96);
          if ((_DWORD)a4)
            v20 = APCarPlayHelperSessionCreate(a1, (uint64_t)carBonjourBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v16, v19);
          else
            v20 = APCarPlayHelperUSBCreate((uint64_t)a1, (uint64_t)carBonjourBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v16, v19);
          v23 = v20;
          if ((_DWORD)v20)
            goto LABEL_58;
        }
        else
        {
          if (!CFEqual(a2, CFSTR("WiFi")))
          {
            v23 = 4294954516;
            APSLogErrorAt();
            if (gLogCategory_APBrowserCarBonjour <= 90)
            {
              if (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize())
                LogPrintF();
              v23 = 4294954516;
            }
            goto LABEL_36;
          }
          *(_QWORD *)(DerivedStorage + 16) = CFRetain(CFSTR("WiFi"));
          CFDictionarySetInt64();
          v21 = (_QWORD *)(DerivedStorage + 96);
          if ((_DWORD)a4)
            v22 = APCarPlayHelperSessionCreate(a1, (uint64_t)carBonjourBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v16, v21);
          else
            v22 = APCarPlayHelperWiFiCreate((uint64_t)a1, (uint64_t)carBonjourBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v16, v21);
          v23 = v22;
          if ((_DWORD)v22)
            goto LABEL_58;
        }
        v24 = dispatch_semaphore_create(0);
        *(_QWORD *)(DerivedStorage + 8) = v24;
        if (!v24)
          goto LABEL_57;
        v25 = dispatch_group_create();
        *(_QWORD *)DerivedStorage = v25;
        if (!v25)
          goto LABEL_57;
        dispatch_group_enter(v25);
        v26 = APBonjourBrowserCreate((uint64_t)a1, 0, (_QWORD *)(DerivedStorage + 64));
        if ((_DWORD)v26)
        {
          v23 = v26;
        }
        else
        {
          v27 = APBonjourBrowserSetEventHandler(*(_QWORD *)(DerivedStorage + 64), (uint64_t)carBonjourBrowser_handleBonjourEvent, (uint64_t)cf);
          if (!(_DWORD)v27)
          {
            dispatch_group_enter(*(dispatch_group_t *)DerivedStorage);
            v28 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            *(_QWORD *)(DerivedStorage + 80) = v28;
            if (v28)
            {
              v23 = 0;
              *a5 = v10;
LABEL_36:
              CFRelease(v16);
              goto LABEL_37;
            }
LABEL_57:
            APSLogErrorAt();
            v23 = 4294954510;
            goto LABEL_36;
          }
          v23 = v27;
        }
LABEL_58:
        APSLogErrorAt();
        goto LABEL_36;
      }
    }
  }
  APSLogErrorAt();
  v23 = 4294954510;
LABEL_37:
  v29 = *(NSObject **)DerivedStorage;
  if (*(_QWORD *)DerivedStorage)
  {
    v30 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APBrowserCarBonjourCreate_block_invoke;
    block[3] = &__block_descriptor_tmp_4;
    block[4] = cf;
    block[5] = DerivedStorage;
    dispatch_group_notify(v29, v30, block);
  }
  if ((_DWORD)v23)
  {
    if (gLogCategory_APBrowserCarBonjour <= 90
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (cf)
      CFRelease(cf);
  }
  return v23;
}

void carBonjourBrowser_handleCarPlayHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD v9[7];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
    CFRetain(a4);
  if (a3)
    CFRetain(a3);
  v8 = *(NSObject **)(DerivedStorage + 24);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __carBonjourBrowser_handleCarPlayHelperEvent_block_invoke;
  v9[3] = &__block_descriptor_tmp_43;
  v10 = a2;
  v9[4] = DerivedStorage;
  v9[5] = a4;
  v9[6] = a3;
  dispatch_async(v8, v9);
}

void carBonjourBrowser_handleBonjourEvent(const void *a1, int a2, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  _QWORD block[8];
  int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a3)
    CFRetain(a3);
  v9 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carBonjourBrowser_handleBonjourEvent_block_invoke;
  block[3] = &__block_descriptor_tmp_56;
  v11 = a2;
  block[4] = a3;
  block[5] = DerivedStorage;
  block[6] = a4;
  block[7] = a1;
  dispatch_async(v9, block);
}

void carBonjourBrowser_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[8];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(DerivedStorage + 128);
  if (v7)
  {
    v8 = DerivedStorage;
    v9 = *(_QWORD *)(DerivedStorage + 136);
    if (gLogCategory_APBrowserCarBonjour <= 20
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      APBrowserGetEventString(a2);
      LogPrintF();
    }
    if (a1)
      CFRetain(a1);
    if (a3)
      CFRetain(a3);
    v10 = *(NSObject **)(v8 + 120);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_tmp_72;
    block[4] = v7;
    block[5] = a1;
    v12 = a2;
    block[6] = a3;
    block[7] = v9;
    dispatch_async(v10, block);
  }
}

uint64_t carBonjourBrowser_invalidate()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_invalidate_block_invoke;
    block[3] = &__block_descriptor_tmp_14;
    block[4] = DerivedStorage;
    dispatch_sync(v1, block);
  }
  return 0;
}

void carBonjourBrowser_finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  void *v12;
  const void *v13;
  NSObject *v14;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_15;
    block[4] = DerivedStorage;
    dispatch_sync(v1, block);
    carBonjourBrowser_invalidate();
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 8), 0xFFFFFFFFFFFFFFFFLL);
    dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 24), &__block_literal_global_3);
    v2 = *(NSObject **)(DerivedStorage + 24);
    if (v2)
    {
      dispatch_release(v2);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
  }
  v3 = *(NSObject **)(DerivedStorage + 120);
  if (v3)
  {
    dispatch_sync(v3, &__block_literal_global_18);
    v4 = *(NSObject **)(DerivedStorage + 120);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(DerivedStorage + 120) = 0;
    }
  }
  v5 = *(const void **)(DerivedStorage + 40);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 48);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 56);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 64);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 80);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 88);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 96);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v12 = *(void **)(DerivedStorage + 112);
  if (v12)
  {
    os_release(v12);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 16);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v14 = *(NSObject **)(DerivedStorage + 8);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

uint64_t __carBonjourBrowser_invalidate_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v1 + 32))
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 96);
    if (result)
    {
      result = APTransportKeepAliveControllerGetCMBaseObject(result);
      if (result)
      {
        v3 = result;
        result = CMBaseObjectGetVTable();
        v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
        if (v4)
          result = v4(v3);
      }
    }
    *(_BYTE *)(*(_QWORD *)(v2 + 32) + 32) = 1;
  }
  return result;
}

uint64_t __carBonjourBrowser_finalize_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 128) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 136) = 0;
  return result;
}

uint64_t carBonjourBrowser_getMode(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_getMode_block_invoke;
    block[3] = &unk_1E8256358;
    block[4] = &v8;
    block[5] = DerivedStorage;
    block[6] = a2;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    v5 = 4294954516;
    *((_DWORD *)v9 + 6) = -12780;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t carBonjourBrowser_setMode(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == 1)
  {
    v5 = 4294895234;
    APSLogErrorAt();
    *((_DWORD *)v10 + 6) = -72062;
  }
  else
  {
    v4 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carBonjourBrowser_setMode_block_invoke;
    block[3] = &unk_1E8256380;
    block[4] = &v9;
    block[5] = DerivedStorage;
    v8 = a2;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v10 + 6);
  }
  _Block_object_dispose(&v9, 8);
  return v5;
}

uint64_t carBonjourBrowser_setEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 24);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __carBonjourBrowser_setEventHandler_block_invoke;
  v9[3] = &unk_1E82563A8;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  v9[6] = a2;
  v9[7] = a3;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t carBonjourBrowser_getDNSForDeviceID(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t DerivedStorage;
  NSObject *v14;
  uint64_t v15;
  _QWORD v17[10];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 || !a6)
  {
    APSLogErrorAt();
    v15 = 4294954516;
    *((_DWORD *)v19 + 6) = -12780;
  }
  else
  {
    v14 = *(NSObject **)(DerivedStorage + 24);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 0x40000000;
    v17[2] = __carBonjourBrowser_getDNSForDeviceID_block_invoke;
    v17[3] = &unk_1E82563D0;
    v17[4] = &v18;
    v17[5] = DerivedStorage;
    v17[6] = a2;
    v17[7] = a6;
    v17[8] = a7;
    v17[9] = a8;
    dispatch_sync(v14, v17);
    v15 = *((unsigned int *)v19 + 6);
  }
  _Block_object_dispose(&v18, 8);
  return v15;
}

uint64_t carBonjourBrowser_reconfirmDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 24);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __carBonjourBrowser_reconfirmDevice_block_invoke;
  v9[3] = &unk_1E82563F8;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  v9[6] = a2;
  v9[7] = a3;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t __carBonjourBrowser_getMode_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  if (*(_BYTE *)(v2 + 32))
  {
    result = APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = -12785;
  }
  else
  {
    if (*(_BYTE *)(v2 + 104))
      v3 = 3;
    else
      v3 = 0;
    **(_WORD **)(result + 48) = v3;
  }
  return result;
}

uint64_t __carBonjourBrowser_setMode_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  int v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD);
  uint64_t v9;
  uint64_t v10;
  int v11;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  if (*(_BYTE *)(v2 + 32))
  {
    result = APSLogErrorAt();
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
    v11 = -12785;
LABEL_31:
    *(_DWORD *)(v10 + 24) = v11;
    return result;
  }
  if (!*(_QWORD *)(v2 + 128))
  {
    result = APSLogErrorAt();
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
    v11 = -72060;
    goto LABEL_31;
  }
  if (*(_WORD *)(result + 48))
  {
    if (*(_WORD *)(result + 48) == 3)
    {
      if (!*(_BYTE *)(v2 + 104))
      {
        if (gLogCategory_APBrowserCarBonjour <= 50)
        {
          if (gLogCategory_APBrowserCarBonjour != -1 || (v3 = _LogCategory_Initialize(), v2 = *(_QWORD *)(v1 + 40), v3))
          {
            LogPrintF();
            v2 = *(_QWORD *)(v1 + 40);
          }
        }
        if (*(_QWORD *)(v2 + 48))
        {
          APSPowerAssertionRaiseTemporary();
          v2 = *(_QWORD *)(v1 + 40);
        }
        v4 = *(_QWORD *)(v2 + 96);
        result = CMBaseObjectGetVTable();
        v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 8);
        if (v5)
          result = v5(v4, 1);
        *(_BYTE *)(*(_QWORD *)(v1 + 40) + 104) = 1;
      }
    }
    else
    {
      if (gLogCategory_APBrowserCarBonjour <= 60
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = -72062;
      return APSLogErrorAt();
    }
  }
  else if (*(_BYTE *)(v2 + 104))
  {
    if (gLogCategory_APBrowserCarBonjour <= 50)
    {
      if (gLogCategory_APBrowserCarBonjour != -1 || (v6 = _LogCategory_Initialize(), v2 = *(_QWORD *)(v1 + 40), v6))
      {
        LogPrintF();
        v2 = *(_QWORD *)(v1 + 40);
      }
    }
    v7 = *(_QWORD *)(v2 + 96);
    result = CMBaseObjectGetVTable();
    v8 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 8);
    if (v8)
      result = v8(v7, 0);
    v9 = *(_QWORD *)(v1 + 40);
    ++*(_DWORD *)(v9 + 108);
    *(_BYTE *)(v9 + 104) = 0;
  }
  return result;
}

_QWORD *__carBonjourBrowser_setEventHandler_block_invoke(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = result;
  v2 = result[5];
  if (*(_BYTE *)(v2 + 32))
  {
    result = (_QWORD *)APSLogErrorAt();
    v3 = *(_QWORD *)(v1[4] + 8);
    v4 = -12785;
  }
  else
  {
    if (!*(_BYTE *)(v2 + 104) && !*(_DWORD *)(v2 + 108))
    {
      *(_QWORD *)(v2 + 128) = result[6];
      *(_QWORD *)(result[5] + 136) = result[7];
      return result;
    }
    result = (_QWORD *)APSLogErrorAt();
    v3 = *(_QWORD *)(v1[4] + 8);
    v4 = -72061;
  }
  *(_DWORD *)(v3 + 24) = v4;
  return result;
}

void __carBonjourBrowser_getDNSForDeviceID_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const __CFString *Int64;
  const __CFString *v4;
  const __CFDictionary *Value;
  CFStringRef v6;
  CFStringRef v7;
  const __CFArray *TypedValue;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  const void *v12;
  CFStringRef v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v2 + 32))
  {
    APSLogErrorAt();
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v16 = -12785;
  }
  else if (*(_DWORD *)(v2 + 108) || !*(_BYTE *)(v2 + 104))
  {
    APSLogErrorAt();
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v16 = -72061;
  }
  else
  {
    Int64 = (const __CFString *)CFNumberCreateInt64();
    if (Int64)
    {
      v4 = Int64;
      Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 80), Int64);
      if (Value)
      {
        if (CFDictionaryGetValue(Value, CFSTR("AirPlayBonjourInfo")))
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = BonjourDevice_GetDNSName();
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          {
            APSLogErrorAt();
LABEL_25:
            v14 = v4;
LABEL_26:
            CFRelease(v14);
            return;
          }
          if (!*(_QWORD *)(a1 + 72))
          {
            if (gLogCategory_APBrowserCarBonjour <= 50
              && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            goto LABEL_25;
          }
          v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const char **)(a1 + 56), 0x8000100u);
          if (v6)
          {
            v7 = v6;
            CFArrayGetTypeID();
            TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
            Count = CFArrayGetCount(TypedValue);
            v10 = Count - 1;
            if (Count >= 1)
            {
              v11 = 0;
              do
              {
                CFDictionaryGetTypeID();
                CFArrayGetTypedValueAtIndex();
                CFStringGetTypeID();
                v12 = (const void *)CFDictionaryGetTypedValue();
                if (CFEqual(v12, v7))
                  break;
              }
              while (v10 != v11++);
            }
            **(_BYTE **)(a1 + 72) = CFDictionaryGetInt64() != 0;
            if (gLogCategory_APBrowserCarBonjour <= 50
              && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            CFRelease(v4);
            v14 = v7;
            goto LABEL_26;
          }
          APSLogErrorAt();
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v18 = -12786;
        }
        else
        {
          APSLogErrorAt();
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v18 = -6762;
        }
      }
      else
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v18 = -72063;
      }
      *(_DWORD *)(v17 + 24) = v18;
      goto LABEL_25;
    }
    APSLogErrorAt();
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v16 = -12786;
  }
  *(_DWORD *)(v15 + 24) = v16;
}

void __carBonjourBrowser_reconfirmDevice_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *Int64;
  const void *v4;
  const __CFDictionary *Value;
  const void *v6;
  int v7;
  uint64_t v8;
  int v9;

  v2 = a1[5];
  if (*(_BYTE *)(v2 + 32))
  {
    APSLogErrorAt();
    v8 = *(_QWORD *)(a1[4] + 8);
    v9 = -12785;
LABEL_12:
    *(_DWORD *)(v8 + 24) = v9;
    return;
  }
  if (*(_DWORD *)(v2 + 108) || !*(_BYTE *)(v2 + 104))
  {
    APSLogErrorAt();
    v8 = *(_QWORD *)(a1[4] + 8);
    v9 = -72061;
    goto LABEL_12;
  }
  Int64 = (const void *)CFNumberCreateInt64();
  if (!Int64)
  {
    APSLogErrorAt();
    v8 = *(_QWORD *)(a1[4] + 8);
    v9 = -12786;
    goto LABEL_12;
  }
  v4 = Int64;
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1[5] + 80), Int64);
  if (Value)
  {
    v6 = CFDictionaryGetValue(Value, CFSTR("AirPlayBonjourInfo"));
    if (v6)
    {
      v7 = APBonjourBrowserReconfirmDevice(*(_QWORD *)(a1[5] + 64), (uint64_t)v6, (uint64_t)CFSTR("AirPlay"), a1[7]);
    }
    else
    {
      APSLogErrorAt();
      v7 = -6762;
    }
  }
  else
  {
    v7 = -72063;
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v7;
  CFRelease(v4);
}

void __carBonjourBrowser_handleCarPlayHelperEvent_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;

  v2 = *(_DWORD *)(a1 + 56);
  if (v2 == 3)
  {
    if (gLogCategory_APBrowserCarBonjour <= 30
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v4 = *(_QWORD *)(DerivedStorage + 64);
    if (v4)
      APBonjourBrowserInvalidate(v4);
    dispatch_group_leave(*(dispatch_group_t *)DerivedStorage);
  }
  else if (v2 == 2)
  {
    if (gLogCategory_APBrowserCarBonjour <= 30
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v5 = *(const void **)(a1 + 40);
    v6 = CMBaseObjectGetDerivedStorage();
    carBonjourBrowser_networkInterfaceChanged((uint64_t)v5, 0);
    carBonjourBrowser_dispatchEvent(v5, 7, 0);
    --*(_DWORD *)(v6 + 108);
  }
  else
  {
    if (v2)
    {
      if (gLogCategory_APBrowserCarBonjour <= 90
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_26;
    }
    if (gLogCategory_APBrowserCarBonjour <= 30
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (carBonjourBrowser_networkInterfaceChanged(*(_QWORD *)(a1 + 40), *(const __CFDictionary **)(a1 + 48)))LABEL_26:APSLogErrorAt();
  }
  v7 = *(const void **)(a1 + 40);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 48);
  if (v8)
    CFRelease(v8);
}

uint64_t carBonjourBrowser_networkInterfaceChanged(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *Value;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  const char *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  uint8_t buf[72];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("interfaceName"));
    v5 = CFDictionaryGetInt64() != 0;
  }
  else
  {
    Value = 0;
    v5 = 0;
  }
  if (FigCFEqual())
    return 0;
  if (gLogCategory_APBrowserCarBonjour <= 50
    && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 88))
  {
    if (!Value && *(_QWORD *)(DerivedStorage + 112))
    {
      v10 = (void *)os_transaction_copy_description();
      if (gLogCategory_APBrowserCarBonjour <= 50
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      free(v10);
      v26 = *(void **)(DerivedStorage + 112);
      if (v26)
      {
        os_release(v26);
        *(_QWORD *)(DerivedStorage + 112) = 0;
      }
    }
    v8 = carBonjourBrowser_stopBonjourBrowsing();
    if ((_DWORD)v8)
    {
      v6 = v8;
LABEL_72:
      APSLogErrorAt();
      return v6;
    }
    v9 = *(const void **)(DerivedStorage + 88);
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(DerivedStorage + 88) = Value;
  if (Value)
    CFRetain(Value);
  if (v9)
    CFRelease(v9);
  if (!*(_QWORD *)(DerivedStorage + 88))
    return 0;
  if (!*(_QWORD *)(DerivedStorage + 112) && v5)
  {
    FigCFStringGetCStringPtrAndBufferToFree();
    SNPrintF();
    if (gLogCategory_APBrowserCarBonjour <= 50
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_QWORD *)(DerivedStorage + 112) = os_transaction_create();
  }
  v11 = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(v11 + 88))
  {
    APSLogErrorAt();
    v6 = 4294960534;
LABEL_71:
    carBonjourBrowser_stopBonjourBrowsing();
    goto LABEL_72;
  }
  v12 = (_QWORD *)v11;
  if (gLogCategory_APBrowserCarBonjour <= 50
    && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (v12[6])
    APSPowerAssertionRaiseTemporary();
  v13 = APBonjourBrowserSetInterfaceName(v12[8], v12[11]);
  if ((_DWORD)v13)
  {
    v6 = v13;
LABEL_70:
    APSLogErrorAt();
    goto LABEL_71;
  }
  v14 = v12[7];
  if (v14)
  {
    v15 = APCarPlayControlServerAddInterface(v14, (CFStringRef)v12[11]);
    if ((_DWORD)v15)
    {
      v6 = v15;
      goto LABEL_70;
    }
  }
  v16 = APBonjourBrowserSetMode(v12[8], 2u);
  if ((_DWORD)v16)
  {
    v6 = v16;
    goto LABEL_70;
  }
  v17 = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    if (*(_QWORD *)(v17 + 40))
      APSEventRecorderRecordEvent();
    v18 = LogCategoryCopyOSLogHandle();
    v19 = (void *)v18;
    if (v18)
      v20 = v18;
    else
      v20 = MEMORY[0x1E0C81028];
    if (!os_signpost_enabled(v20))
      goto LABEL_60;
    *(_WORD *)buf = 0;
    v21 = 730662892;
    v22 = "AP_SIGNPOST_CAR_STARTEDBROWSE_USB";
    v23 = v20;
LABEL_59:
    _os_signpost_emit_with_name_impl(&dword_1C9382000, v23, OS_SIGNPOST_EVENT, v21, v22, "", buf, 2u);
LABEL_60:
    if (v19)
      os_release(v19);
    return 0;
  }
  if (FigCFEqual())
  {
    if (*(_QWORD *)(v17 + 40))
      APSEventRecorderRecordEvent();
    v24 = LogCategoryCopyOSLogHandle();
    v19 = (void *)v24;
    if (v24)
      v25 = v24;
    else
      v25 = MEMORY[0x1E0C81028];
    if (!os_signpost_enabled(v25))
      goto LABEL_60;
    *(_WORD *)buf = 0;
    v22 = "AP_SIGNPOST_CAR_STARTEDBROWSE_WIFI";
    v23 = v25;
    v21 = 730662868;
    goto LABEL_59;
  }
  return 0;
}

uint64_t carBonjourBrowser_stopBonjourBrowsing()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (gLogCategory_APBrowserCarBonjour <= 50
    && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)(DerivedStorage + 56))
  {
    v1 = APBonjourBrowserCopyInterfaceName(*(_QWORD *)(DerivedStorage + 64), (uint64_t)&cf);
    if ((_DWORD)v1)
    {
      v5 = v1;
      goto LABEL_19;
    }
    if (cf)
    {
      v2 = APCarPlayControlServerRemoveInterface(*(_QWORD *)(DerivedStorage + 56), cf);
      if ((_DWORD)v2)
      {
        v5 = v2;
        goto LABEL_19;
      }
    }
  }
  v3 = APBonjourBrowserSetMode(*(_QWORD *)(DerivedStorage + 64), 0);
  if ((_DWORD)v3)
  {
    v5 = v3;
  }
  else
  {
    ++*(_DWORD *)(DerivedStorage + 72);
    v4 = APBonjourBrowserSetInterfaceName(*(_QWORD *)(DerivedStorage + 64), 0);
    if (!(_DWORD)v4)
    {
      APSEventRecorderResetEvent();
      APSEventRecorderResetEvent();
      v5 = 0;
      goto LABEL_12;
    }
    v5 = v4;
  }
LABEL_19:
  APSLogErrorAt();
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v5;
}

void __carBonjourBrowser_handleBonjourEvent_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const void *v4;
  uint64_t DerivedStorage;
  CFAllocatorRef v6;
  CFAllocatorRef v7;
  int v8;
  const void *v9;
  int HasFeature;
  int v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  int v14;
  const void **v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const void *v18;
  const void *v19;
  int v20;
  int v21;
  const void *v22;
  uint64_t v23;
  dispatch_group_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  const char *v29;
  NSObject *v30;
  os_signpost_id_t v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  const void *v35;
  const void *v36;
  CFTypeRef cf;
  void *value;
  uint8_t buf[16];

  v2 = *(const __CFDictionary **)(a1 + 32);
  if (v2)
  {
    v3 = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("deviceInfo"));
    if (!v3)
    {
LABEL_55:
      APSLogErrorAt();
      goto LABEL_107;
    }
  }
  else
  {
    v3 = 0;
  }
  switch(*(_DWORD *)(a1 + 64))
  {
    case 0:
      if (gLogCategory_APBrowserCarBonjour <= 50
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v4 = *(const void **)(a1 + 48);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v6 = CFGetAllocator(v4);
      cf = 0;
      value = 0;
      if (!v3)
      {
        APSLogErrorAt();
        v17 = 0;
        v13 = 0;
        v19 = 0;
        v34 = -12780;
        goto LABEL_96;
      }
      v7 = v6;
      v8 = APBrowserCreateAdvertiserInfoForDevice((uint64_t)v6, v3, 0, &cf);
      if (v8)
      {
        v34 = v8;
LABEL_128:
        APSLogErrorAt();
LABEL_135:
        v17 = 0;
        v13 = 0;
        v19 = 0;
        goto LABEL_96;
      }
      v9 = APAdvertiserInfoCopyProperty((uint64_t)cf, 0, CFSTR("featuresEx"), 0, 0);
      HasFeature = APSFeaturesHasFeature();
      if (v9)
        CFRelease(v9);
      if (!HasFeature)
      {
        if (gLogCategory_APBrowserCarBonjour <= 50
          && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v34 = 0;
        goto LABEL_135;
      }
      v11 = APBrowserCopyDeviceIDFromBonjourInfo(v7, (uint64_t)v3, (CFNumberRef *)&value);
      if (v11)
      {
        v34 = v11;
        goto LABEL_128;
      }
      Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v13 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, CFSTR("deviceID"), value);
        CFDictionarySetValue(v13, CFSTR("deviceInfo"), cf);
        v14 = FigCFEqual();
        v15 = (const void **)MEMORY[0x1E0C9AE50];
        if (!v14)
          v15 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v13, CFSTR("IsConnectedOverUSB"), *v15);
        v16 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 80), value);
        if (v16)
        {
          v17 = v16;
          CFRetain(v16);
          v18 = CFDictionaryGetValue(v17, CFSTR("LastEventInfo"));
          if (v18)
          {
            v19 = v18;
            CFRetain(v18);
            if (!*(_DWORD *)(DerivedStorage + 72))
            {
              if (FigCFEqual())
                goto LABEL_76;
              v20 = gLogCategory_APBrowserCarBonjour;
              if (gLogCategory_APBrowserCarBonjour > 30)
                goto LABEL_119;
              if (gLogCategory_APBrowserCarBonjour == -1)
              {
                if (!_LogCategory_Initialize())
                {
LABEL_119:
                  carBonjourBrowser_dispatchEvent(v4, 4, v13);
                  goto LABEL_76;
                }
                v20 = gLogCategory_APBrowserCarBonjour;
              }
              if (v20 <= 20)
              {
                if (v20 != -1
                  || (_LogCategory_Initialize(),
                      v20 = gLogCategory_APBrowserCarBonjour,
                      gLogCategory_APBrowserCarBonjour <= 20))
                {
                  if (v20 == -1)
                    _LogCategory_Initialize();
                }
              }
              LogPrintF();
              goto LABEL_119;
            }
LABEL_46:
            if (gLogCategory_APBrowserCarBonjour <= 20
              && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
LABEL_76:
            CFDictionarySetValue(v17, CFSTR("AdvertiserInfo"), cf);
            CFDictionarySetValue(v17, CFSTR("AirPlayBonjourInfo"), v3);
            CFDictionarySetValue(v17, CFSTR("LastEventInfo"), v13);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 80), value, v17);
            v25 = CMBaseObjectGetDerivedStorage();
            if (FigCFEqual())
            {
              if (*(_QWORD *)(v25 + 40))
                APSEventRecorderRecordEventWithFlags();
              v26 = LogCategoryCopyOSLogHandle();
              v27 = (void *)v26;
              if (v26)
                v28 = v26;
              else
                v28 = MEMORY[0x1E0C81028];
              if (!os_signpost_enabled(v28))
                goto LABEL_93;
              *(_WORD *)buf = 0;
              v29 = "AP_SIGNPOST_ENDPOINTADDED_USB";
              v30 = v28;
              v31 = 730662900;
            }
            else
            {
              if (!FigCFEqual())
              {
LABEL_95:
                v34 = 0;
                goto LABEL_96;
              }
              if (*(_QWORD *)(v25 + 40))
                APSEventRecorderRecordEventWithFlags();
              v32 = LogCategoryCopyOSLogHandle();
              v27 = (void *)v32;
              if (v32)
                v33 = v32;
              else
                v33 = MEMORY[0x1E0C81028];
              if (!os_signpost_enabled(v33))
              {
LABEL_93:
                if (v27)
                  os_release(v27);
                goto LABEL_95;
              }
              *(_WORD *)buf = 0;
              v29 = "AP_SIGNPOST_ENDPOINTADDED_WIFI";
              v30 = v33;
              v31 = 722862484;
            }
            _os_signpost_emit_with_name_impl(&dword_1C9382000, v30, OS_SIGNPOST_EVENT, v31, v29, "", buf, 2u);
            goto LABEL_93;
          }
LABEL_44:
          if (*(_DWORD *)(DerivedStorage + 72))
          {
            v19 = 0;
            goto LABEL_46;
          }
          v21 = gLogCategory_APBrowserCarBonjour;
          if (gLogCategory_APBrowserCarBonjour <= 30)
          {
            if (gLogCategory_APBrowserCarBonjour != -1)
            {
LABEL_51:
              if (v21 <= 20)
              {
                if (v21 != -1
                  || (_LogCategory_Initialize(),
                      v21 = gLogCategory_APBrowserCarBonjour,
                      gLogCategory_APBrowserCarBonjour <= 20))
                {
                  if (v21 == -1)
                    _LogCategory_Initialize();
                }
              }
              LogPrintF();
              goto LABEL_75;
            }
            if (_LogCategory_Initialize())
            {
              v21 = gLogCategory_APBrowserCarBonjour;
              goto LABEL_51;
            }
          }
LABEL_75:
          carBonjourBrowser_dispatchEvent(v4, 3, v13);
          v19 = 0;
          goto LABEL_76;
        }
        v17 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v17)
          goto LABEL_44;
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        v17 = 0;
      }
      v19 = 0;
      v34 = -12786;
LABEL_96:
      if (value)
        CFRelease(value);
      if (v17)
        CFRelease(v17);
      if (cf)
        CFRelease(cf);
      if (v13)
        CFRelease(v13);
      if (v19)
        CFRelease(v19);
      if (v34)
        goto LABEL_55;
LABEL_107:
      v35 = *(const void **)(a1 + 56);
      if (v35)
        CFRelease(v35);
      v36 = *(const void **)(a1 + 32);
      if (v36)
        CFRelease(v36);
      return;
    case 1:
      if (gLogCategory_APBrowserCarBonjour <= 50
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_107;
    case 2:
      if (gLogCategory_APBrowserCarBonjour <= 30
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v22 = *(const void **)(a1 + 48);
      v23 = CMBaseObjectGetDerivedStorage();
      if (!carBonjourBrowser_removeAllDevices(v22, 1))
      {
        --*(_DWORD *)(v23 + 72);
        goto LABEL_107;
      }
      APSLogErrorAt();
      --*(_DWORD *)(v23 + 72);
      goto LABEL_55;
    case 3:
      if (gLogCategory_APBrowserCarBonjour <= 30
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v24 = (dispatch_group_t *)CMBaseObjectGetDerivedStorage();
      dispatch_group_leave(*v24);
      goto LABEL_107;
    case 4:
      if (gLogCategory_APBrowserCarBonjour <= 90
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (carBonjourBrowser_removeAllDevices(*(const void **)(a1 + 48), 0))
        goto LABEL_55;
      goto LABEL_107;
    default:
      if (gLogCategory_APBrowserCarBonjour <= 90
        && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_55;
  }
}

uint64_t carBonjourBrowser_removeAllDevices(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  CFDictionaryRef Copy;
  void *v7;
  void *v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APBrowserCarBonjour <= 30
    && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = CFGetAllocator(a1);
  Copy = CFDictionaryCreateCopy(v5, *(CFDictionaryRef *)(DerivedStorage + 80));
  if (Copy)
  {
    CFDictionaryApplyBlock();
    if (!a2)
      goto LABEL_14;
    carBonjourBrowser_dispatchEvent(a1, 6, 0);
    if (!*(_QWORD *)(DerivedStorage + 112))
      goto LABEL_14;
    v7 = (void *)os_transaction_copy_description();
    if (gLogCategory_APBrowserCarBonjour <= 50
      && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    free(v7);
    v8 = *(void **)(DerivedStorage + 112);
    if (v8)
    {
      os_release(v8);
      v9 = 0;
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
    else
    {
LABEL_14:
      v9 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    v9 = 4294954510;
  }
  CFRelease(Copy);
  return v9;
}

void __carBonjourBrowser_removeAllDevices_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  const void *v4;
  const void *v5;
  uint64_t DerivedStorage;
  CFAllocatorRef v7;
  int v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  int v11;
  CFTypeRef cf;
  void *value;

  v4 = CFDictionaryGetValue(theDict, CFSTR("AirPlayBonjourInfo"));
  cf = v4;
  if (v4)
  {
    CFRetain(v4);
    BonjourDevice_RemoveInterfaceInfo();
    v5 = *(const void **)(a1 + 32);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    value = 0;
    v7 = CFGetAllocator(v5);
    v8 = APBrowserCopyDeviceIDFromBonjourInfo(v7, (uint64_t)cf, (CFNumberRef *)&value);
    if (v8)
    {
      v11 = v8;
      APSLogErrorAt();
      v10 = 0;
    }
    else
    {
      Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v10 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, CFSTR("deviceID"), value);
        if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 80), value))
        {
          if (gLogCategory_APBrowserCarBonjour <= 30
            && (gLogCategory_APBrowserCarBonjour != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          carBonjourBrowser_dispatchEvent(v5, 5, v10);
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 80), value);
        }
        v11 = 0;
      }
      else
      {
        APSLogErrorAt();
        v11 = -12786;
      }
    }
    if (value)
      CFRelease(value);
    if (v10)
      CFRelease(v10);
    if (v11)
      APSLogErrorAt();
    if (cf)
      CFRelease(cf);
  }
  else
  {
    APSLogErrorAt();
  }
}

void __carBonjourBrowser_dispatchEvent_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t OUTLINED_FUNCTION_0()
{
  return APSLogErrorAt();
}

uint64_t APTransportPackageRTPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v2;

  v2 = APTransportPackageRTPCreateWithBBuf(a1, 0, a2);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t APTransportPackageRTPCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  uint64_t v6;
  CFAllocatorRef **DerivedStorage;
  uint64_t v8;
  uint64_t DataPointer;
  uint64_t v10;
  uint64_t v11;
  size_t DataLength;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;

  blockBufferOut = 0;
  cf = 0;
  APTransportPackageGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v15 = v6;
LABEL_33:
    APSLogErrorAt();
    goto LABEL_21;
  }
  DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  v8 = APTransportParcelMakeWithAllocators(a1, (const __CFAllocator *)*MEMORY[0x1E0C9AE10], 2uLL, 0, DerivedStorage);
  if ((_DWORD)v8)
  {
    v15 = v8;
    goto LABEL_33;
  }
  if (!a2)
    goto LABEL_14;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
  {
    v15 = DataPointer;
    goto LABEL_33;
  }
  if (lengthAtOffsetOut <= 1)
  {
    APSLogErrorAt();
LABEL_20:
    v15 = 4294960591;
    goto LABEL_21;
  }
  if ((*dataPointerOut & 0xC0) != 0x80)
  {
    APSLogErrorAt();
    v15 = 4294960581;
    goto LABEL_21;
  }
  v10 = dataPointerOut[1] & 0x7F;
  v11 = v10 - 96;
  if ((v10 - 96) >= 0xE || ((0x3D13u >> v11) & 1) == 0)
  {
    if (gLogCategory_APTransportPackageRTP <= 90
      && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_20;
  }
  APTransportParcelSetMessageType((uint64_t)*DerivedStorage, dword_1C9432498[v11]);
  DataLength = CMBlockBufferGetDataLength(a2);
  v13 = CMBlockBufferCreateWithBufferReference(a1, a2, 2uLL, DataLength - 2, 0, &blockBufferOut);
  if ((_DWORD)v13)
  {
    v15 = v13;
    goto LABEL_33;
  }
  v14 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
  if ((_DWORD)v14)
  {
    v15 = v14;
    goto LABEL_33;
  }
LABEL_14:
  if (gLogCategory_APTransportPackageRTP <= 30
    && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v15 = 0;
  *a3 = cf;
  cf = 0;
LABEL_21:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  return v15;
}

uint64_t APTransportPackageRTPCreateWithMessageSize(uint64_t a1, size_t a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = rtppackage_createWithMessageSize(a1, a2, a3);
  if ((_DWORD)v3)
    APSLogErrorAt();
  return v3;
}

uint64_t rtppackage_createWithMessageSize(uint64_t a1, size_t a2, _QWORD *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;

  APTransportPackageGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v9 = v5;
LABEL_14:
    APSLogErrorAt();
    return v9;
  }
  if (a2)
    v6 = a2;
  else
    v6 = 1450;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = 0;
  v8 = APTransportParcelMake(2uLL, v6, (CFAllocatorRef **)DerivedStorage);
  if ((_DWORD)v8)
  {
    v9 = v8;
    goto LABEL_14;
  }
  if (gLogCategory_APTransportPackageRTP <= 30
    && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = 0;
  *a3 = 0;
  return v9;
}

uint64_t APTransportPackageRTPCreateWithMessageSizeAndType(uint64_t a1, size_t a2, int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t *DerivedStorage;

  v5 = rtppackage_createWithMessageSize(a1, a2, a4);
  if ((_DWORD)v5)
  {
    APSLogErrorAt();
  }
  else
  {
    DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
    APTransportParcelSetMessageType(*DerivedStorage, a3);
    rtppackage_ensureHeaderIsSet();
  }
  return v5;
}

uint64_t rtppackage_ensureHeaderIsSet()
{
  uint64_t *DerivedStorage;
  int MessageType;
  uint64_t result;
  __int16 v3;
  __int16 v4;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageType = APTransportParcelGetMessageType(*DerivedStorage);
  result = APTransportParcelIsHeaderSet(*DerivedStorage);
  if (!(_DWORD)result)
  {
    v4 = 0;
    if (MessageType > 1735550307)
    {
      if (MessageType <= 1836213603)
      {
        if (MessageType == 1735550308)
        {
          v3 = 24960;
          goto LABEL_25;
        }
        if (MessageType == 1835100526)
        {
          v3 = 25728;
          goto LABEL_25;
        }
      }
      else
      {
        switch(MessageType)
        {
          case 1836213604:
            v3 = 26752;
            goto LABEL_25;
          case 1869575779:
            v3 = 27520;
            goto LABEL_25;
          case 1870033508:
            v3 = 28032;
            goto LABEL_25;
        }
      }
    }
    else if (MessageType <= 1635088494)
    {
      if (MessageType == 1634497568)
      {
        v3 = 25984;
        goto LABEL_25;
      }
      if (MessageType == 1634887012)
      {
        v3 = 27008;
        goto LABEL_25;
      }
    }
    else
    {
      switch(MessageType)
      {
        case 1635088495:
          v3 = 27264;
          goto LABEL_25;
        case 1635283556:
          v3 = 27776;
          goto LABEL_25;
        case 1734700576:
          v3 = 24704;
LABEL_25:
          v4 = v3;
          return APTransportParcelSetHeader(*DerivedStorage, &v4);
      }
    }
    if (gLogCategory_APTransportPackageRTP <= 90
      && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return APTransportParcelSetHeader(*DerivedStorage, &v4);
  }
  return result;
}

void rtppackage_Finalize()
{
  void **DerivedStorage;

  DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageRTP <= 30
    && (gLogCategory_APTransportPackageRTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *DerivedStorage = 0;
}

__CFString *rtppackage_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportPackageRTP %p>"), a1);
  return Mutable;
}

const void *rtppackage_CopyMessageData()
{
  uint64_t *DerivedStorage;
  const void *MessageData;
  const void *v2;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageData = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  v2 = MessageData;
  if (MessageData)
    CFRetain(MessageData);
  return v2;
}

uint64_t rtppackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  _QWORD **DerivedStorage;

  DerivedStorage = (_QWORD **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(*DerivedStorage, a2);
}

uint64_t rtppackage_GetMessageType()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(*DerivedStorage);
}

uint64_t rtppackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(*DerivedStorage, a2);
}

CMBlockBufferRef rtppackage_CreateBBufRepresentation()
{
  uint64_t *DerivedStorage;
  CMBlockBufferRef v2;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v2 = 0;
  rtppackage_ensureHeaderIsSet();
  APTransportParcelCreateBBufRepresentation(*DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, &v2);
  return v2;
}

uint64_t rtppackage_SetArrivalDeadlineTicks(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t rtppackage_GetArrivalDeadlineTicks()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

CFStringRef carPlayHelperWiFi_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APCarPlayHelperWiFi %p]"), a1);
}

uint64_t APCarPlayHelperWiFiCreate(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  dispatch_semaphore_t v11;
  dispatch_queue_t v12;
  dispatch_queue_t v13;
  dispatch_semaphore_t v14;
  const void *SharedHelper;
  CFTypeRef v16;
  uint64_t v17;
  const void *Value;
  const void *v19;
  uint64_t v20;

  if (APCarPlayHelperWiFiGetClassID_sRegisterOnce != -1)
    dispatch_once(&APCarPlayHelperWiFiGetClassID_sRegisterOnce, &__block_literal_global_4);
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v20 = v9;
LABEL_28:
    APSLogErrorAt();
    return v20;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 40) = -1;
  v11 = dispatch_semaphore_create(0);
  *(_QWORD *)(DerivedStorage + 8) = v11;
  if (!v11)
    goto LABEL_26;
  v12 = dispatch_queue_create("APCarPlayHelperWiFiInternalQueue", 0);
  *(_QWORD *)(DerivedStorage + 16) = v12;
  if (!v12)
    goto LABEL_19;
  v13 = dispatch_queue_create("APCarPlayHelperWiFiEventQueue", 0);
  *(_QWORD *)(DerivedStorage + 24) = v13;
  if (!v13)
    goto LABEL_19;
  *(_QWORD *)(DerivedStorage + 104) = a2;
  *(_QWORD *)(DerivedStorage + 112) = a3;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294954516;
  }
  v14 = dispatch_semaphore_create(0);
  *(_QWORD *)(DerivedStorage + 56) = v14;
  if (!v14)
  {
LABEL_26:
    APSLogErrorAt();
    return 4294954510;
  }
  SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
  if (!SharedHelper)
  {
    *(_QWORD *)(DerivedStorage + 72) = 0;
    goto LABEL_19;
  }
  v16 = CFRetain(SharedHelper);
  *(_QWORD *)(DerivedStorage + 72) = v16;
  if (!v16)
  {
LABEL_19:
    APSLogErrorAt();
    return 4294960568;
  }
  v17 = APConnectivityHelperRegisterEventHandler((uint64_t)v16, 0, (uint64_t)carPlayHelperWiFi_handleConnectivityHelperEvent);
  if ((_DWORD)v17)
  {
    v20 = v17;
    goto LABEL_28;
  }
  if (a4)
  {
    Value = CFDictionaryGetValue(a4, CFSTR("powerAssertion"));
    *(_QWORD *)(DerivedStorage + 32) = Value;
    if (Value)
      CFRetain(Value);
    v19 = CFDictionaryGetValue(a4, CFSTR("eventRecorder"));
    *(_QWORD *)(DerivedStorage + 128) = v19;
    if (v19)
      CFRetain(v19);
  }
  v20 = 0;
  *a5 = 0;
  return v20;
}

void carPlayHelperWiFi_handleConnectivityHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD v9[7];
  int v10;
  _QWORD v11[3];
  int v12;

  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
    CFRetain(a4);
  if (a3)
    CFRetain(a3);
  v8 = *(NSObject **)(DerivedStorage + 16);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __carPlayHelperWiFi_handleConnectivityHelperEvent_block_invoke;
  v9[3] = &unk_1E8256798;
  v10 = a2;
  v9[4] = v11;
  v9[5] = a4;
  v9[6] = a3;
  dispatch_async(v8, v9);
  _Block_object_dispose(v11, 8);
}

void sub_1C93B4718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FigCFRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t carPlayHelperWiFi_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperWiFi_invalidate_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = a1;
    block[6] = a1;
    dispatch_sync(v3, block);
  }
  return 0;
}

void carPlayHelperWiFi_finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  NSObject *v16;
  _QWORD block[5];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage[2];
  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperWiFi_finalize_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = DerivedStorage;
    dispatch_sync(v3, block);
  }
  carPlayHelperWiFi_invalidate(a1);
  v4 = DerivedStorage[1];
  if (v4)
  {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    v5 = DerivedStorage[1];
    if (v5)
    {
      dispatch_release(v5);
      DerivedStorage[1] = 0;
    }
  }
  v6 = DerivedStorage[2];
  if (v6)
  {
    dispatch_sync(v6, &__block_literal_global_11);
    v7 = DerivedStorage[2];
    if (v7)
    {
      dispatch_release(v7);
      DerivedStorage[2] = 0;
    }
  }
  v8 = DerivedStorage[3];
  if (v8)
  {
    dispatch_sync(v8, &__block_literal_global_12);
    v9 = DerivedStorage[3];
    if (v9)
    {
      dispatch_release(v9);
      DerivedStorage[3] = 0;
    }
  }
  v10 = (const void *)DerivedStorage[16];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[16] = 0;
  }
  v11 = (const void *)DerivedStorage[4];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[4] = 0;
  }
  v12 = (const void *)DerivedStorage[12];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[12] = 0;
  }
  v13 = (const void *)DerivedStorage[11];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[11] = 0;
  }
  v14 = (const void *)DerivedStorage[9];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[9] = 0;
  }
  v15 = (const void *)DerivedStorage[8];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[8] = 0;
  }
  v16 = DerivedStorage[7];
  if (v16)
  {
    dispatch_release(v16);
    DerivedStorage[7] = 0;
  }
}

NSObject *__carPlayHelperWiFi_invalidate_block_invoke(NSObject *result)
{
  Class isa;
  NSObject *v2;
  uint64_t v3;
  Class v4;
  uint64_t DerivedStorage;

  isa = result[4].isa;
  if (!*(_BYTE *)isa)
  {
    v2 = result;
    v3 = *((_QWORD *)isa + 9);
    if (v3)
      APConnectivityHelperRemoveAllRegistrations(v3, (uint64_t)v2[5].isa);
    v4 = v2[6].isa;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    carPlayHelperWiFi_dispatchEvent(v4, 3, 0);
    result = *(NSObject **)(DerivedStorage + 8);
    if (result)
      result = dispatch_semaphore_signal(result);
    *(_BYTE *)v2[4].isa = 1;
  }
  return result;
}

void carPlayHelperWiFi_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[8];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(DerivedStorage + 104);
  if (v7)
  {
    v8 = DerivedStorage;
    v9 = *(_QWORD *)(DerivedStorage + 112);
    if (gLogCategory_APBrowserCarWiFiHelper <= 20
      && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a1)
      CFRetain(a1);
    if (a3)
      CFRetain(a3);
    v10 = *(NSObject **)(v8 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperWiFi_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    block[4] = v7;
    block[5] = a1;
    v12 = a2;
    block[6] = a3;
    block[7] = v9;
    dispatch_async(v10, block);
  }
}

void __carPlayHelperWiFi_dispatchEvent_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t __carPlayHelperWiFi_finalize_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 104) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 112) = 0;
  return result;
}

void carPlayHelperWiFi_setInterfaceWatchingEnabled(const void *a1, char a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[6];
  char v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    v5 = DerivedStorage;
    CFRetain(a1);
    v6 = *(NSObject **)(v5 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke;
    block[3] = &__block_descriptor_49_e5_v8__0l;
    v8 = a2;
    block[4] = v5;
    block[5] = a1;
    dispatch_async(v6, block);
  }
}

void __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[6];

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter");
  v3 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)v3)
  {
    if (*(unsigned __int8 *)(v3 + 80) == *(unsigned __int8 *)(a1 + 48))
      goto LABEL_12;
    if (*(_BYTE *)(a1 + 48))
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke_2;
      v8[3] = &__block_descriptor_48_e24_v16__0__NSNotification_8l;
      v4 = *(_QWORD *)(a1 + 40);
      v8[4] = v3;
      v8[5] = v4;
      v5 = objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", CFSTR("CRPairedVehiclesDidChangeNotification"), 0, 0, v8);
      v7 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(v7 + 48) = v5;
      if (APConnectivityHelperRegisterForEvent(*(_QWORD *)(v7 + 72), v6, 3)
        || APConnectivityHelperRegisterForEvent(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), *(_QWORD *)(a1 + 40), 9))
      {
LABEL_14:
        APSLogErrorAt();
        goto LABEL_15;
      }
    }
    else
    {
      if (*(_QWORD *)(v3 + 48))
      {
        objc_msgSend(v2, "removeObserver:");
        v3 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(v3 + 48) = 0;
      }
      if (APConnectivityHelperDeregisterForEvent(*(_QWORD *)(v3 + 72), *(_QWORD *)(a1 + 40), 3)
        || APConnectivityHelperDeregisterForEvent(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), *(_QWORD *)(a1 + 40), 9))
      {
        goto LABEL_14;
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = *(_BYTE *)(a1 + 48);
    goto LABEL_12;
  }
LABEL_15:
  if (gLogCategory_APBrowserCarWiFiHelper <= 90
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_12:
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke_2(uint64_t a1)
{
  NSObject *v1;
  _QWORD v2[4];
  __int128 v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v3 = *(_OWORD *)(a1 + 32);
  v1 = *(NSObject **)(v3 + 16);
  v2[2] = __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke_3;
  v2[3] = &__block_descriptor_48_e5_v8__0l;
  dispatch_async(v1, v2);
}

uint64_t __carPlayHelperWiFi_setInterfaceWatchingEnabled_block_invoke_3(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 32);
  if (!*v1)
  {
    if (v1[80])
      return carPlayHelperWiFi_updateCarKitInCarStatus(*(const void **)(result + 40));
  }
  return result;
}

uint64_t carPlayHelperWiFi_updateCarKitInCarStatus(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  _QWORD v6[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v3 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 32))
    APSPowerAssertionRaiseTemporary();
  v4 = *(const void **)(v3 + 64);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v3 + 64) = 0;
  }
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __carPlayHelperWiFi_updateCarKitInCarStatus_block_invoke;
  v6[3] = &__block_descriptor_48_e33_v28__0B8__NSString_12__NSError_20l;
  v6[4] = v3;
  v6[5] = a1;
  ((void (*)(uint64_t))softLinkCRBluetoothIndicatesInCar[0])((uint64_t)v6);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v3 + 56), 0xFFFFFFFFFFFFFFFFLL);
  return carPlayHelperWiFi_updateCarKitNetworkStatus(a1);
}

intptr_t __carPlayHelperWiFi_updateCarKitInCarStatus_block_invoke(uint64_t a1, int a2, const __CFString *a3, void *a4)
{
  int v7;
  char v8;
  const __CFAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  uint8_t buf[16];

  if (a3)
    v7 = a2;
  else
    v7 = 0;
  if (gLogCategory_APBrowserCarWiFiHelper <= 50
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a4)
  {
    if (objc_msgSend(a4, "code"))
      v8 = 0;
    else
      v8 = v7;
    if ((v8 & 1) == 0)
      return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 56));
  }
  else if (!v7)
  {
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 56));
  }
  v9 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = CFStringCreateCopy(v9, a3);
  v10 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v10 + 120) = 1;
  if (*(_QWORD *)(v10 + 128))
    APSEventRecorderRecordEvent();
  v11 = LogCategoryCopyOSLogHandle();
  v12 = (void *)v11;
  if (v11)
    v13 = v11;
  else
    v13 = MEMORY[0x1E0C81028];
  if (os_signpost_enabled(v13))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9382000, v13, OS_SIGNPOST_EVENT, 0x2B8D07D0uLL, "AP_SIGNPOST_CAR_CARENTERED", "", buf, 2u);
  }
  if (v12)

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 56));
}

uint64_t carPlayHelperWiFi_updateCarKitNetworkStatus(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *Value;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const __CFAllocator *v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  _QWORD v14[7];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  const __CFDictionary *v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
LABEL_38:
    v12 = 0;
    goto LABEL_31;
  }
  v3 = DerivedStorage;
  v4 = APConnectivityHelperCopyCurrentWiFiNetworkInfo(*(dispatch_queue_t **)(DerivedStorage + 72), (CFTypeRef *)&v19);
  if ((_DWORD)v4)
  {
    APSLogErrorAt();
    goto LABEL_38;
  }
  Value = CFDictionaryGetValue(v19, CFSTR("wifiNetworkCarPlayUUID"));
  v6 = Value;
  if (!Value)
  {
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_9;
    goto LABEL_8;
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __carPlayHelperWiFi_updateCarKitNetworkStatus_block_invoke;
  v14[3] = &unk_1E8256770;
  v14[4] = &v15;
  v14[5] = Value;
  v14[6] = v3;
  softLinkCRAllowsConnectionsForWiFiUUID((uint64_t)Value, (uint64_t)v14);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v3 + 56), 0xFFFFFFFFFFFFFFFFLL);
  if (!*((_BYTE *)v16 + 24))
    goto LABEL_9;
  if (!FigCFEqual())
  {
LABEL_8:
    if (!*(_QWORD *)(v3 + 64) && FigCFEqual())
      goto LABEL_13;
LABEL_9:
    if (gLogCategory_APBrowserCarWiFiHelper <= 50
      && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v7 = *(const void **)(v3 + 96);
    if (v7)
    {
      CFRelease(v7);
      v8 = 0;
      *(_QWORD *)(v3 + 96) = 0;
    }
    else
    {
      v8 = 0;
    }
    goto LABEL_26;
  }
LABEL_13:
  if (gLogCategory_APBrowserCarWiFiHelper <= 50
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    FigCFEqual();
    LogPrintF();
  }
  v9 = *(const void **)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v6;
  if (v6)
    CFRetain(v6);
  if (v9)
    CFRelease(v9);
  v8 = *(const void **)(v3 + 88);
LABEL_26:
  v10 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = Mutable;
  if (Mutable)
  {
    if (v8)
    {
      CFDictionarySetValue(Mutable, CFSTR("interfaceName"), v8);
      if (*(_BYTE *)(v3 + 120))
      {
        CFDictionarySetValue(v12, CFSTR("setUpForOSTransaction"), (const void *)*MEMORY[0x1E0C9AE50]);
        *(_BYTE *)(v3 + 120) = 0;
      }
    }
    carPlayHelperWiFi_dispatchEvent(a1, 0, v12);
    v4 = 0;
  }
  else
  {
    APSLogErrorAt();
    v12 = 0;
    v4 = 4294954510;
  }
LABEL_31:
  if (v19)
    CFRelease(v19);
  if (v12)
    CFRelease(v12);
  _Block_object_dispose(&v15, 8);
  return v4;
}

void sub_1C93B536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t initCRBluetoothIndicatesInCar(uint64_t a1)
{
  if (CarKitLibrary_sOnce != -1)
    dispatch_once(&CarKitLibrary_sOnce, &__block_literal_global_28);
  softLinkCRBluetoothIndicatesInCar[0] = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib, "CRBluetoothIndicatesInCar");
  return ((uint64_t (*)(uint64_t))softLinkCRBluetoothIndicatesInCar[0])(a1);
}

intptr_t __carPlayHelperWiFi_updateCarKitNetworkStatus_block_invoke(uint64_t a1, char a2, void *a3)
{
  if (gLogCategory_APBrowserCarWiFiHelper <= 30
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a3 || !objc_msgSend(a3, "code"))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 48) + 56));
}

uint64_t initCRAllowsConnectionsForWiFiUUID(uint64_t a1, uint64_t a2)
{
  if (CarKitLibrary_sOnce != -1)
    dispatch_once(&CarKitLibrary_sOnce, &__block_literal_global_28);
  softLinkCRAllowsConnectionsForWiFiUUID = (uint64_t (*)())dlsym((void *)CarKitLibrary_sLib, "CRAllowsConnectionsForWiFiUUID");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkCRAllowsConnectionsForWiFiUUID)(a1, a2);
}

void __carPlayHelperWiFi_handleConnectivityHelperEvent_block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t DerivedStorage;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = *(_DWORD *)(a1 + 56);
  switch(v2)
  {
    case 3:
LABEL_4:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = carPlayHelperWiFi_networkChanged(*(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        APSLogErrorAt();
      break;
    case 103:
      if (gLogCategory_APBrowserCarWiFiHelper <= 30
        && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v3 = *(void **)(a1 + 40);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v5 = *(const void **)(DerivedStorage + 88);
      if (v5)
      {
        CFRelease(v5);
        *(_QWORD *)(DerivedStorage + 88) = 0;
        carPlayHelperWiFi_networkChanged(v3, 0);
      }
      carPlayHelperWiFi_dispatchEvent(v3, 2, 0);
      break;
    case 9:
      goto LABEL_4;
    default:
      if (gLogCategory_APBrowserCarWiFiHelper <= 30
        && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      break;
  }
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 48);
  if (v7)
    CFRelease(v7);
}

uint64_t carPlayHelperWiFi_networkChanged(void *a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  _QWORD *v5;
  const void *TypedValue;
  const void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  dispatch_queue_t v13;
  NSObject *v14;
  uint32_t v15;
  int updated;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint8_t buf[8];
  uint64_t v24;
  void (*v25)(_QWORD *, int);
  void *v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 0;
  v5 = DerivedStorage;
  if (a2)
  {
    CFStringGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    CFStringGetTypeID();
    CFDictionaryGetTypedValue();
    LODWORD(a2) = CFDictionaryGetInt64() != 0;
  }
  else
  {
    TypedValue = 0;
  }
  if (gLogCategory_APBrowserCarWiFiHelper <= 50
    && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if ((_DWORD)a2)
  {
    if (v5[4])
      APSPowerAssertionRaiseTemporary();
    v7 = (const void *)v5[11];
    v5[11] = TypedValue;
    if (TypedValue)
      CFRetain(TypedValue);
    if (v7)
      CFRelease(v7);
    if (v5[16])
      APSEventRecorderRecordEvent();
    v8 = LogCategoryCopyOSLogHandle();
    v9 = (void *)v8;
    if (v8)
      v10 = v8;
    else
      v10 = MEMORY[0x1E0C81028];
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C9382000, v10, OS_SIGNPOST_EVENT, 0x2B8D07E4uLL, "AP_SIGNPOST_CAR_WIFI_LINKUP", "", buf, 2u);
    }
    if (v9)

    v30 = 0;
    v31 = &v30;
    v32 = 0x2020000000;
    v33 = 0;
    v11 = CMBaseObjectGetDerivedStorage();
    v12 = v11;
    if (!*(_BYTE *)v11 && !notify_is_valid_token(*(_DWORD *)(v11 + 40)))
    {
      v13 = dispatch_queue_create("APCarPlayHelperWiFiCarKitNotifyQueue", 0);
      if (v13)
      {
        v14 = v13;
        if (a1)
          CFRetain(a1);
        dispatch_set_context(v14, a1);
        dispatch_set_finalizer_f(v14, (dispatch_function_t)FigCFRelease);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v24 = 3221225472;
        v25 = __carPlayHelperWiFi_registerForCarKitInCarNotification_block_invoke;
        v26 = &unk_1E82567C0;
        v28 = a1;
        v29 = v12;
        v27 = &v30;
        v15 = notify_register_dispatch("com.apple.carplay.in-car", (int *)(v12 + 40), v14, buf);
        *((_DWORD *)v31 + 6) = v15;
        if (v15 || (updated = carPlayHelperWiFi_updateCarKitInCarStatus(a1), (*((_DWORD *)v31 + 6) = updated) != 0))
          APSLogErrorAt();
        dispatch_release(v14);
      }
      else
      {
        APSLogErrorAt();
        *((_DWORD *)v31 + 6) = -6728;
      }
    }
    v17 = *((unsigned int *)v31 + 6);
    _Block_object_dispose(&v30, 8);
    if (!(_DWORD)v17)
    {
      APConnectivityHelperRegisterActivity(v5[9], (uint64_t)a1, 0);
      return v17;
    }
LABEL_46:
    APSLogErrorAt();
    return v17;
  }
  v18 = (const void *)v5[11];
  if (v18)
  {
    CFRelease(v18);
    v5[11] = 0;
  }
  APConnectivityHelperDeregisterActivity(v5[9], (uint64_t)a1, 0);
  v19 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)v19)
    return 0;
  v20 = v19;
  if (!notify_is_valid_token(*(_DWORD *)(v19 + 40)))
    return 0;
  notify_cancel(*(_DWORD *)(v20 + 40));
  *(_DWORD *)(v20 + 40) = -1;
  v21 = *(const void **)(v20 + 64);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(v20 + 64) = 0;
  }
  v17 = carPlayHelperWiFi_updateCarKitNetworkStatus(a1);
  if ((_DWORD)v17)
  {
    APSLogErrorAt();
    goto LABEL_46;
  }
  return v17;
}

void sub_1C93B5B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void __carPlayHelperWiFi_registerForCarKitInCarNotification_block_invoke(_QWORD *a1, int a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[7];
  int v9;

  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRetain(v4);
    v5 = a1[5];
  }
  else
  {
    v5 = 0;
  }
  v6 = a1[6];
  v7 = *(NSObject **)(v6 + 16);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __carPlayHelperWiFi_registerForCarKitInCarNotification_block_invoke_2;
  v8[3] = &unk_1E8256798;
  v9 = a2;
  v8[4] = a1[4];
  v8[5] = v6;
  v8[6] = v5;
  dispatch_async(v7, v8);
}

void __carPlayHelperWiFi_registerForCarKitInCarNotification_block_invoke_2(uint64_t a1)
{
  const void *v2;

  if (*(_DWORD *)(a1 + 56) == *(_DWORD *)(*(_QWORD *)(a1 + 40) + 40))
  {
    if (gLogCategory_APBrowserCarWiFiHelper <= 30
      && (gLogCategory_APBrowserCarWiFiHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = carPlayHelperWiFi_updateCarKitInCarStatus(*(const void **)(a1 + 48));
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      APSLogErrorAt();
  }
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
}

uint64_t APTransportStreamUnbufferedCreate(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const void *a5, const __CFDictionary *a6, _QWORD *a7)
{
  uint64_t v13;
  _QWORD *DerivedStorage;
  CFTypeRef v15;
  dispatch_queue_t v16;
  dispatch_queue_t v17;
  dispatch_queue_t v18;
  const void *Value;
  uint64_t v20;
  char label[64];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    FigTransportStreamGetClassID();
    v13 = CMDerivedObjectCreate();
    if ((_DWORD)v13)
    {
      v20 = v13;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      if (a2)
        v15 = CFRetain(a2);
      else
        v15 = 0;
      DerivedStorage[4] = v15;
      *DerivedStorage = a3;
      DerivedStorage[1] = a4;
      if (a4)
        CFRetain(a4);
      DerivedStorage[5] = CFRetain(a5);
      SNPrintF();
      v16 = dispatch_queue_create(label, 0);
      DerivedStorage[2] = v16;
      if (v16
        && (SNPrintF(), v17 = dispatch_queue_create(label, 0), (DerivedStorage[13] = v17) != 0)
        && (SNPrintF(), v18 = dispatch_queue_create(label, 0), (DerivedStorage[8] = v18) != 0))
      {
        if (a6)
        {
          Value = CFDictionaryGetValue(a6, CFSTR("EventRecorder"));
          DerivedStorage[7] = Value;
          if (Value)
            CFRetain(Value);
        }
        if (gLogCategory_APTransportStreamUnbuffered <= 50
          && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v20 = 0;
        *a7 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294950685;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v20;
}

uint64_t stream_Invalidate()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

void stream_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStreamUnbuffered <= 50
    && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 24))
  {
    v1 = *(const void **)(DerivedStorage + 56);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
    v2 = *(const void **)(DerivedStorage + 8);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 32);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v4 = *(NSObject **)(DerivedStorage + 64);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
    v5 = *(NSObject **)(DerivedStorage + 104);
    if (v5)
    {
      dispatch_release(v5);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v6 = *(NSObject **)(DerivedStorage + 16);
    if (v6)
    {
      dispatch_release(v6);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
  }
  else
  {
    if (gLogCategory_APTransportStreamUnbuffered <= 100)
      stream_Finalize_cold_1(gLogCategory_APTransportStreamUnbuffered);
    __break(1u);
  }
}

__CFString *stream_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportStreamUnbuffered %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t stream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v9;
  CFNumberRef v10;
  uint64_t *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD block[9];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    v11 = v18;
    v12 = -16617;
    goto LABEL_8;
  }
  v9 = (_QWORD *)DerivedStorage;
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA5468]))
  {
    v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, v9);
    *a4 = v10;
    if (!v10)
    {
      APSLogErrorAt();
      v11 = v18;
      v12 = -16611;
LABEL_8:
      *((_DWORD *)v11 + 6) = v12;
    }
  }
  else
  {
    v13 = v9[2];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __stream_CopyProperty_block_invoke;
    block[3] = &unk_1E82568F0;
    block[4] = &v17;
    block[5] = a1;
    block[6] = a2;
    block[7] = a3;
    block[8] = a4;
    dispatch_sync(v13, block);
  }
  v14 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v17, 8);
  return v14;
}

uint64_t stream_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __stream_SetProperty_block_invoke;
  v9[3] = &unk_1E8256918;
  v9[4] = &v10;
  v9[5] = a1;
  v9[6] = a2;
  v9[7] = a3;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t stream_invalidateInternal()
{
  uint64_t DerivedStorage;
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  const void *v4;
  NSObject *v5;
  const void *v6;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    v1 = (_QWORD *)DerivedStorage;
    *(_BYTE *)(DerivedStorage + 24) = 1;
    v2 = *(_QWORD *)(DerivedStorage + 40);
    v3 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v3)
      v3(v2, 0);
    v4 = (const void *)v1[4];
    if (v4)
      APTransportSessionUnregisterStream(v4);
    v5 = v1[13];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __stream_invalidateInternal_block_invoke;
    block[3] = &__block_descriptor_tmp_5;
    block[4] = v1;
    dispatch_sync(v5, block);
    v6 = (const void *)v1[5];
    if (v6)
      CFRelease(v6);
    if (gLogCategory_APTransportStreamUnbuffered <= 50
      && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v1[5] = 0;
  }
  return 0;
}

uint64_t __stream_invalidateInternal_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 112) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 120) = 0;
  return result;
}

uint64_t stream_Resume(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __stream_Resume_block_invoke;
  v5[3] = &unk_1E8256940;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t stream_SetMessageCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  _QWORD block[9];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __stream_SetMessageCallbacks_block_invoke;
  block[3] = &__block_descriptor_tmp_32;
  block[4] = DerivedStorage;
  block[5] = a4;
  block[6] = a2;
  block[7] = a3;
  block[8] = a1;
  dispatch_sync(v9, block);
  return 0;
}

uint64_t stream_SetReadyToSendCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD, uint64_t);
  void (*v12)(uint64_t, CFTypeRef *, int);
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void *v16;
  uint64_t v17;
  _QWORD v19[7];
  _QWORD block[7];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  v7 = *(NSObject **)(DerivedStorage + 16);
  v8 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __stream_SetReadyToSendCallback_block_invoke;
  block[3] = &unk_1E8256A28;
  block[5] = &v21;
  block[6] = DerivedStorage;
  block[4] = &v25;
  dispatch_sync(v7, block);
  if (!v22[3])
    goto LABEL_11;
  v9 = *(NSObject **)(DerivedStorage + 64);
  v19[0] = v8;
  v19[1] = 0x40000000;
  v19[2] = __stream_SetReadyToSendCallback_block_invoke_2;
  v19[3] = &__block_descriptor_tmp_34;
  v19[4] = a2;
  v19[5] = DerivedStorage;
  v19[6] = a3;
  dispatch_sync(v9, v19);
  v10 = v22[3];
  v11 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (a2)
  {
    if (v11)
    {
      v12 = stream_readyToSendCallback;
      v13 = v10;
      v14 = a1;
LABEL_7:
      v15 = v11(v13, v12, v14);
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v13 = v10;
    v12 = 0;
    v14 = 0;
    goto LABEL_7;
  }
  v15 = -12782;
LABEL_9:
  *((_DWORD *)v26 + 6) = v15;
  if (v15)
    APSLogErrorAt();
LABEL_11:
  v16 = (const void *)v22[3];
  if (v16)
    CFRelease(v16);
  v17 = *((unsigned int *)v26 + 6);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return v17;
}

uint64_t stream_SignalDataAvailable()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __stream_SignalDataAvailable_block_invoke;
  v4[3] = &unk_1E8256A98;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t stream_WaitUntilConnectedEx()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __stream_WaitUntilConnectedEx_block_invoke;
  v4[3] = &unk_1E8256AC0;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t stream_SetReadyToSendBatchCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, void (*)(uint64_t, int, uint64_t (*)(uint64_t, void **), _QWORD *), uint64_t);
  void (*v12)(uint64_t, int, uint64_t (*)(uint64_t, void **), _QWORD *);
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void *v16;
  uint64_t v17;
  _QWORD v19[7];
  _QWORD block[7];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  v7 = *(NSObject **)(DerivedStorage + 16);
  v8 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __stream_SetReadyToSendBatchCallback_block_invoke;
  block[3] = &unk_1E8256AE8;
  block[5] = &v21;
  block[6] = DerivedStorage;
  block[4] = &v25;
  dispatch_sync(v7, block);
  if (!v22[3])
    goto LABEL_11;
  v9 = *(NSObject **)(DerivedStorage + 64);
  v19[0] = v8;
  v19[1] = 0x40000000;
  v19[2] = __stream_SetReadyToSendBatchCallback_block_invoke_2;
  v19[3] = &__block_descriptor_tmp_40;
  v19[4] = a2;
  v19[5] = DerivedStorage;
  v19[6] = a3;
  dispatch_sync(v9, v19);
  v10 = v22[3];
  v11 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, int, uint64_t (*)(uint64_t, void **), _QWORD *), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (a2)
  {
    if (v11)
    {
      v12 = stream_readyToSendBatchCallback;
      v13 = v10;
      v14 = a1;
LABEL_7:
      v15 = v11(v13, v12, v14);
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    v13 = v10;
    v12 = 0;
    v14 = 0;
    goto LABEL_7;
  }
  v15 = -12782;
LABEL_9:
  *((_DWORD *)v26 + 6) = v15;
  if (v15)
    APSLogErrorAt();
LABEL_11:
  v16 = (const void *)v22[3];
  if (v16)
    CFRelease(v16);
  v17 = *((unsigned int *)v26 + 6);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return v17;
}

uint64_t stream_handleEventFromSendConnection(int a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[6];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a3);
  if (a2)
    CFRetain(a2);
  v7 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __stream_handleEventFromSendConnection_block_invoke;
  block[3] = &__block_descriptor_tmp_15_0;
  v10 = a1;
  block[4] = a3;
  block[5] = a2;
  dispatch_async(v7, block);
  return 0;
}

void __stream_handleEventFromSendConnection_block_invoke(uint64_t a1)
{
  int v2;
  const void *v3;
  const void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  NSObject *v7;
  CFTypeID v8;
  CFTypeRef v9;
  NSObject *v10;
  _QWORD *v11;
  CFTypeID v12;
  CFTypeRef v13;
  const void *v14;
  _QWORD v15[7];
  _QWORD v16[7];
  int valuePtr;
  _QWORD block[6];
  CFTypeRef v19;

  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(const void **)(a1 + 32);
  v4 = *(const void **)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  if (*(_BYTE *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    goto LABEL_34;
  }
  v6 = DerivedStorage;
  if (gLogCategory_APTransportStreamUnbuffered <= 50
    && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)(v6 + 25))
  {
    if ((v2 - 4) <= 2)
      *(_DWORD *)(v6 + 28) = v2;
    goto LABEL_32;
  }
  if (v2 == 4)
  {
    *(_DWORD *)(v6 + 28) = 0;
    if (gLogCategory_APTransportStreamUnbuffered <= 90
      && (gLogCategory_APTransportStreamUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v4)
    {
      v12 = CFGetTypeID(v4);
      if (v12 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr);
        FigCreateBlockBufferCopyingMemoryBlock();
      }
    }
    CFRetain(v3);
    if (v19)
    {
      CFRetain(v19);
      v13 = v19;
    }
    else
    {
      v13 = 0;
    }
    v10 = *(NSObject **)(v6 + 104);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = __stream_eventReceived_block_invoke_2;
    v16[3] = &__block_descriptor_tmp_28;
    v16[4] = v6;
    v16[5] = v3;
    v16[6] = v13;
    v11 = v16;
  }
  else
  {
    if (v2 != 6)
    {
      if (v2 == 5)
      {
        *(_DWORD *)(v6 + 28) = 0;
        CFRetain(v3);
        v7 = *(NSObject **)(v6 + 104);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __stream_eventReceived_block_invoke;
        block[3] = &__block_descriptor_tmp_26;
        block[4] = v6;
        block[5] = v3;
        dispatch_async(v7, block);
      }
      goto LABEL_32;
    }
    if (v4)
    {
      v8 = CFGetTypeID(v4);
      if (v8 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr);
        FigCreateBlockBufferCopyingMemoryBlock();
      }
    }
    CFRetain(v3);
    if (v19)
    {
      CFRetain(v19);
      v9 = v19;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(NSObject **)(v6 + 104);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v15[2] = __stream_eventReceived_block_invoke_3;
    v15[3] = &__block_descriptor_tmp_29;
    v15[4] = v6;
    v15[5] = v3;
    v15[6] = v9;
    v11 = v15;
  }
  dispatch_async(v10, v11);
  APTransportSessionHandleStreamEvent(*(const void **)(v6 + 32), v3, 0, v4);
LABEL_32:
  if (v19)
    CFRelease(v19);
LABEL_34:
  v14 = *(const void **)(a1 + 40);
  if (v14)
    CFRelease(v14);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __stream_eventReceived_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v2 + 120);
  if (v3)
    v3(*(_QWORD *)(a1 + 40), 1651470958, 0, *(_QWORD *)(v2 + 112));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __stream_eventReceived_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD);
  const void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v2 + 120);
  if (v3)
    v3(*(_QWORD *)(a1 + 40), 1668179564, *(_QWORD *)(a1 + 48), *(_QWORD *)(v2 + 112));
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __stream_eventReceived_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD);
  const void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v2 + 120);
  if (v3)
    v3(*(_QWORD *)(a1 + 40), 1684628836, *(_QWORD *)(a1 + 48), *(_QWORD *)(v2 + 112));
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __stream_postCachedConnectionEvent_block_invoke(uint64_t a1)
{
  stream_handleEventFromSendConnection(*(_DWORD *)(a1 + 40), 0, *(const void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void stream_readyToSendCallback(uint64_t a1, CFTypeRef *a2, int a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  CFTypeRef v8;
  void (*v9)(CFTypeRef, uint64_t);
  CFTypeRef v10;
  uint64_t v11;
  void (*v12)(CFTypeRef, uint64_t);
  const void *v13;
  _QWORD block[8];
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  if (a2)
  {
    v6 = *(NSObject **)(DerivedStorage + 64);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __stream_readyToSendCallback_block_invoke;
    block[3] = &unk_1E8256A70;
    block[6] = DerivedStorage;
    block[7] = a2;
    v15 = a3;
    block[4] = &v20;
    block[5] = &v16;
    dispatch_sync(v6, block);
    v7 = v21[3];
    v8 = *a2;
    if (v7)
    {
      v9 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v9)
        v9(v8, v7);
      v10 = *a2;
      v11 = *((unsigned int *)v17 + 6);
      v12 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v12)
        v12(v10, v11);
    }
    else if (v8)
    {
      CFRelease(*a2);
      *a2 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
  }
  v13 = (const void *)v21[3];
  if (v13)
    CFRelease(v13);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
}

void __stream_readyToSendCallback_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD, _QWORD, uint64_t);
  const void *v4;

  v1 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v1 + 24))
  {
    APSLogErrorAt();
  }
  else
  {
    v3 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v1 + 72);
    if (v3)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3(*(_QWORD *)(v1 + 80), *(unsigned int *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    }
    else
    {
      v4 = **(const void ***)(a1 + 56);
      if (v4)
      {
        CFRelease(v4);
        **(_QWORD **)(a1 + 56) = 0;
      }
    }
  }
}

void stream_readyToSendBatchCallback(uint64_t a1, int a2, uint64_t (*a3)(uint64_t, void **), _QWORD *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const __CFArray *v13;
  CFIndex v14;
  __CFArray *v15;
  uint64_t v16;
  CFMutableArrayRef Mutable;
  uint64_t v18;
  uint64_t TypedValueAtIndex;
  uint64_t v20;
  CFIndex v21;
  uint64_t v22;
  int v23;
  void *v24;
  void (*v25)(void *, uint64_t);
  void *v26;
  void (*v27)(void *, uint64_t);
  BOOL v28;
  CFTypeRef v29;
  const void *v30;
  const void *v31;
  _QWORD *v32;
  _QWORD block[8];
  int v34;
  void *value;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;

  v44 = 0;
  v45 = &v44;
  v46 = 0x2000000000;
  v47 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  value = 0;
  if (!a3)
  {
    APSLogErrorAt();
    v15 = 0;
    *((_DWORD *)v45 + 6) = APSSignalErrorAt();
    if (!a4)
      goto LABEL_40;
    goto LABEL_33;
  }
  if (!a4)
  {
    APSLogErrorAt();
    v15 = 0;
    *((_DWORD *)v45 + 6) = APSSignalErrorAt();
    goto LABEL_40;
  }
  v8 = *(NSObject **)(DerivedStorage + 64);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __stream_readyToSendBatchCallback_block_invoke;
  block[3] = &unk_1E8256B30;
  block[4] = &v44;
  block[5] = &v40;
  v34 = a2;
  block[6] = &v36;
  block[7] = DerivedStorage;
  dispatch_sync(v8, block);
  if (!*((_DWORD *)v45 + 6))
  {
    v9 = (const __CFArray *)v41[3];
    if (v9)
    {
      Count = CFArrayGetCount(v9);
      v11 = Count - 1;
      if (Count >= 1)
      {
        v12 = Count;
        v13 = (const __CFArray *)v37[3];
        if (v13)
        {
          v14 = CFArrayGetCount(v13);
          if ((v14 | 2) == 3)
            goto LABEL_13;
        }
        else
        {
          v14 = 0;
        }
        v28 = v14 == v12;
        v14 = v12;
        if (!v28)
        {
LABEL_53:
          APSLogErrorAt();
          v15 = 0;
          *((_DWORD *)v45 + 6) = APSSignalErrorAt();
          goto LABEL_33;
        }
LABEL_13:
        v16 = *MEMORY[0x1E0C9AE00];
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v15 = Mutable;
          v32 = a4;
          v18 = 0;
          while (1)
          {
            CMBlockBufferGetTypeID();
            TypedValueAtIndex = CFArrayGetTypedValueAtIndex();
            if (*((_DWORD *)v45 + 6))
              break;
            v20 = v18 != 0;
            if (v11 == v18)
              v20 = 2;
            if (v14 != 3)
              v20 = v18;
            v21 = v14 == 1 ? 0 : v20;
            CFArrayGetValueAtIndex((CFArrayRef)v37[3], v21);
            v22 = CFGetInt64Ranged();
            if (*((_DWORD *)v45 + 6))
              break;
            v23 = a3(v16, &value);
            *((_DWORD *)v45 + 6) = v23;
            if (v23)
              break;
            v24 = value;
            v25 = *(void (**)(void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v25)
              v25(v24, TypedValueAtIndex);
            v26 = value;
            v27 = *(void (**)(void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
            if (v27)
              v27(v26, v22);
            CFArrayAppendValue(v15, value);
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            if (v12 == ++v18)
              goto LABEL_32;
          }
          APSLogErrorAt();
LABEL_32:
          a4 = v32;
          goto LABEL_33;
        }
        goto LABEL_53;
      }
    }
  }
  v15 = 0;
LABEL_33:
  if (*((_DWORD *)v45 + 6))
    v28 = 1;
  else
    v28 = v15 == 0;
  if (v28)
    v29 = 0;
  else
    v29 = CFRetain(v15);
  *a4 = v29;
LABEL_40:
  v30 = (const void *)v41[3];
  if (v30)
    CFRelease(v30);
  v31 = (const void *)v37[3];
  if (v31)
    CFRelease(v31);
  if (v15)
    CFRelease(v15);
  if (value)
    CFRelease(value);
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
}

uint64_t __stream_readyToSendBatchCallback_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD, _QWORD, uint64_t);
  uint64_t v4;
  int v5;

  v1 = result;
  v2 = *(_QWORD *)(result + 56);
  if (*(_BYTE *)(v2 + 24))
  {
    result = APSLogErrorAt();
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
    v5 = -16617;
  }
  else
  {
    v3 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v2 + 88);
    if (v3)
    {
      result = v3(*(_QWORD *)(v2 + 96), *(unsigned int *)(result + 64), *(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 24);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = result;
      return result;
    }
    v4 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    v5 = -6709;
  }
  *(_DWORD *)(v4 + 24) = v5;
  return result;
}

uint64_t APBrowserRapportManagerGetTypeID()
{
  if (gAPBrowserRapportManagerInitOnce != -1)
    dispatch_once(&gAPBrowserRapportManagerInitOnce, &__block_literal_global_5);
  return gAPBrowserRapportManagerTypeID;
}

uint64_t APBrowserRapportManagerCreate()
{
  uint64_t Instance;
  _QWORD *v1;

  if (gAPBrowserRapportManagerInitOnce != -1)
    dispatch_once(&gAPBrowserRapportManagerInitOnce, &__block_literal_global_5);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v1 = (_QWORD *)Instance;
    *(_OWORD *)(Instance + 16) = 0u;
    *(_QWORD *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    if (gLogCategory_APBrowserRapportManager <= 50
      && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (_APBrowserRapportManager_getActiveManagers_once != -1)
      dispatch_once(&_APBrowserRapportManager_getActiveManagers_once, &__block_literal_global_16);
    if (FigCFWeakReferenceTableAddValueAndGetKey())
      APSLogErrorAt();
    v1[5] = 0;
    APSLogErrorAt();
    CFRelease(v1);
  }
  else
  {
    APSLogErrorAt();
  }
  return 4294895016;
}

uint64_t APBrowserRapportManagerInvalidate(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (gLogCategory_APBrowserRapportManager <= 50
    && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APBrowserRapportManagerInvalidate_block_invoke;
  block[3] = &unk_1E8255AE8;
  block[4] = &v6;
  block[5] = a1;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1C93B807C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t APBrowserRapportManagerGetMode(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APBrowserRapportManagerGetMode_block_invoke;
  block[3] = &unk_1E8256C58;
  block[4] = &v6;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t APBrowserRapportManagerSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v3 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __APBrowserRapportManagerSetEventHandler_block_invoke;
  v6[3] = &unk_1E8256C80;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t APBrowserRapportManagerCopyShowInfo(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v3 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __APBrowserRapportManagerCopyShowInfo_block_invoke;
  v6[3] = &unk_1E8256798;
  v6[4] = &v8;
  v6[5] = a1;
  v7 = a2;
  v6[6] = a3;
  dispatch_sync(v3, v6);
  v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

uint64_t APBrowserRapportManagerUpdatePreferences(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __APBrowserRapportManagerUpdatePreferences_block_invoke;
  v4[3] = &unk_1E8255AE8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void _APBrowserRapportManagerFinalize(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;

  if (gLogCategory_APBrowserRapportManager <= 50
    && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (const void *)a1[10];
  if (v2)
  {
    CFRelease(v2);
    a1[10] = 0;
  }
  v3 = a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0;
  }
  v4 = a1[3];
  if (v4)
  {
    dispatch_release(v4);
    a1[3] = 0;
  }
  v5 = a1[4];
  if (v5)
  {
    dispatch_release(v5);
    a1[4] = 0;
  }
}

uint64_t APBrowserRapportManager_stop(uint64_t a1)
{
  uint64_t v2;

  if (!*(_WORD *)(a1 + 48))
    return 0;
  if (gLogCategory_APBrowserRapportManager <= 40
    && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_WORD *)(a1 + 48) = 0;
  v2 = APBrowserRapportManager_update(a1);
  if ((_DWORD)v2)
    APSLogErrorAt();
  else
    APBrowserRapportManager_dispatchEvent((_QWORD *)a1, 3, 0);
  return v2;
}

void APBrowserRapportManager_dispatchEvent(_QWORD *cf, int a2, const void *a3)
{
  uint64_t v3;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[8];
  int v10;

  v3 = cf[7];
  if (v3 && !*((_BYTE *)cf + 51))
  {
    v7 = cf[8];
    CFRetain(cf);
    if (a3)
      CFRetain(a3);
    v8 = cf[3];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APBrowserRapportManager_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    block[4] = v3;
    block[5] = cf;
    v10 = a2;
    block[6] = a3;
    block[7] = v7;
    dispatch_async(v8, block);
  }
}

uint64_t APBrowserRapportManager_sendDeviceEvent(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t TypedValue;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;

  v2 = 4294895013;
  if (!a2)
  {
    v2 = 4294895015;
LABEL_13:
    APSLogErrorAt();
    APSLogErrorAt();
    return v2;
  }
  CFStringGetTypeID();
  TypedValue = CFDictionaryGetTypedValue();
  if (!TypedValue)
    goto LABEL_13;
  v5 = (const void *)TypedValue;
  CFStringGetTypeID();
  v6 = CFDictionaryGetTypedValue();
  CFStringGetTypeID();
  if (!(v6 | CFDictionaryGetTypedValue()))
    goto LABEL_13;
  CFNumberGetTypeID();
  v7 = CFDictionaryGetTypedValue();
  if (!v7)
    goto LABEL_13;
  v8 = (const void *)v7;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v2 = 4294895016;
    goto LABEL_13;
  }
  v10 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("rapportDeviceID"), v5);
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  CFDictionarySetValue(v10, CFSTR("deviceRelationship"), v8);
  APBrowserRapportManager_dispatchEvent(a1, 0, v10);
  CFRelease(v10);
  return 0;
}

uint64_t APBrowserRapportManager_sendGetInfo(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t TypedValue;
  __CFDictionary *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  __CFSet *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[7];
  void *value;

  value = 0;
  if (gLogCategory_APBrowserRapportManager <= 30
    && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryGetTypeID();
  TypedValue = CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    v9 = (__CFDictionary *)TypedValue;
    v10 = objc_alloc_init(MEMORY[0x1E0D83900]);
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "setDispatchQueue:", *(_QWORD *)(a1 + 32));
      v12 = v11;
      v13 = APSWrapperCreate();
      if ((_DWORD)v13)
      {
        v16 = v13;
        APSLogErrorAt();

      }
      else
      {
        CFDictionarySetValue(v9, CFSTR("directClient"), value);
        objc_msgSend(v11, "setServiceType:", CFSTR("com.apple.airplay.discovery.service"));
        objc_msgSend(v11, "setControlFlags:", objc_msgSend(v11, "controlFlags") | 2);
        objc_msgSend(v11, "setDestinationDevice:", a2);
        CFSetGetTypeID();
        v14 = (__CFSet *)CFDictionaryGetTypedValue();
        if (v14)
        {
          CFSetAddValue(v14, a4);
          v15 = *(_QWORD *)(a1 + 40);
          CFRetain(a3);
          CFRetain(a4);
          v18[0] = MEMORY[0x1E0C809B0];
          v18[1] = 3221225472;
          v18[2] = __APBrowserRapportManager_sendGetInfo_block_invoke;
          v18[3] = &__block_descriptor_56_e17_v16__0__NSError_8l;
          v18[4] = v15;
          v18[5] = a3;
          v18[6] = a4;
          objc_msgSend(v11, "activateWithCompletion:", v18);
          v16 = 0;
          goto LABEL_10;
        }
        v16 = 4294895014;
        APSLogErrorAt();
      }
    }
    else
    {
      APSLogErrorAt();
      v16 = 4294895016;
    }
    CFDictionaryRemoveValue(v9, CFSTR("directClient"));
  }
  else
  {
    APSLogErrorAt();
    v11 = 0;
    v16 = 4294895015;
  }
LABEL_10:

  if (value)
    CFRelease(value);
  return v16;
}

void APSBrowserRapportManager_invalidateAndReleaseClient(void *a1)
{
  objc_msgSend(a1, "invalidate");

}

uint64_t APBrowserRapportManager_tryNextEffectiveID(uint64_t result, const void *a2)
{
  uint64_t v2;
  uint64_t TypedValue;
  const __CFSet *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return APSLogErrorAt();
  v2 = result;
  if (!*(_WORD *)(result + 48))
    return result;
  CFDictionaryGetTypeID();
  if (!CFDictionaryGetTypedValue())
    return APSLogErrorAt();
  CFSetGetTypeID();
  TypedValue = CFDictionaryGetTypedValue();
  if (!TypedValue)
    return APSLogErrorAt();
  v5 = (const __CFSet *)TypedValue;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = (void *)objc_msgSend(*(id *)(v2 + 72), "activeDevices");
  result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)v15;
LABEL_7:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v6);
      v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v9);
      if ((const void *)objc_msgSend(v10, "idsDeviceIdentifier", v12, v13) == a2
        || objc_msgSend(v10, "idsDeviceIdentifier") && CFEqual(a2, (CFTypeRef)objc_msgSend(v10, "idsDeviceIdentifier")))
      {
        v11 = (const void *)objc_msgSend(v10, "effectiveIdentifier");
        if (!CFSetContainsValue(v5, v11))
        {
          if (gLogCategory_APBrowserRapportManager <= 40
            && (gLogCategory_APBrowserRapportManager != -1 || _LogCategory_Initialize()))
          {
            v12 = a2;
            v13 = v11;
            LogPrintF();
          }
          result = APBrowserRapportManager_sendGetInfo(v2, v10, a2, v11);
          if (!(_DWORD)result)
            break;
        }
      }
      if (v7 == ++v9)
      {
        result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        v7 = result;
        if (result)
          goto LABEL_7;
        return result;
      }
    }
  }
  return result;
}

uint64_t APConnectivityHelperGetTypeID()
{
  if (gAPConnectivityHelperInitOnce != -1)
    dispatch_once(&gAPConnectivityHelperInitOnce, &__block_literal_global_6);
  return gAPConnectivityHelperTypeID;
}

uint64_t APConnectivityHelperGetSharedHelper()
{
  objc_opt_class();
  return APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass();
}

uint64_t APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass()
{
  if (APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sMutexInitOnce != -1)
    dispatch_once(&APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sMutexInitOnce, &__block_literal_global_24);
  pthread_mutex_lock((pthread_mutex_t *)APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sMutex);
  if (!APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sHelper)
    APConnectivityHelperCreateWithWiFiInterfaceClass();
  pthread_mutex_unlock((pthread_mutex_t *)APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sMutex);
  return APConnectivityHelperGetSharedHelperWithWiFiInterfaceClass_sHelper;
}

uint64_t APConnectivityHelperCreateWithWiFiInterfaceClass()
{
  _OWORD *Instance;
  _QWORD *v1;
  NSObject *v2;
  dispatch_queue_t v3;
  dispatch_queue_t v4;
  uint64_t v6;

  if (gAPConnectivityHelperInitOnce != -1)
    dispatch_once(&gAPConnectivityHelperInitOnce, &__block_literal_global_6);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  v1 = Instance;
  if (Instance)
  {
    Instance[13] = 0u;
    Instance[14] = 0u;
    Instance[11] = 0u;
    Instance[12] = 0u;
    Instance[9] = 0u;
    Instance[10] = 0u;
    Instance[7] = 0u;
    Instance[8] = 0u;
    Instance[5] = 0u;
    Instance[6] = 0u;
    Instance[3] = 0u;
    Instance[4] = 0u;
    Instance[1] = 0u;
    Instance[2] = 0u;
    v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    v3 = dispatch_queue_create("APConnectivityHelperInternalQueue", v2);
    v1[2] = v3;
    if (v3)
    {
      v4 = dispatch_queue_create("APConnectivityHelperEventQueue", 0);
      v1[3] = v4;
      if (v4)
      {
        if (_APConnectivityHelper_getActiveHelpers_once != -1)
          dispatch_once(&_APConnectivityHelper_getActiveHelpers_once, &__block_literal_global_66);
        if (FigCFWeakReferenceTableAddValueAndGetKey())
          APSLogErrorAt();
        v1[4] = 0;
      }
    }
  }
  APSLogErrorAt();
  objc_msgSend(0, "invalidate", v6);
  if (v1)
    CFRelease(v1);
  return 4294895096;
}

uint64_t APConnectivityHelperCreate()
{
  objc_opt_class();
  return APConnectivityHelperCreateWithWiFiInterfaceClass();
}

uint64_t APConnectivityHelperCopyProperty(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD block[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APConnectivityHelperCopyProperty_block_invoke;
  block[3] = &unk_1E8256EE0;
  block[4] = &v5;
  dispatch_sync(v1, block);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t APConnectivityHelperSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[3];
  uint64_t v5;

  v4[0] = a1;
  v4[1] = a2;
  v4[2] = a3;
  v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v4, (dispatch_function_t)_APConnectivityHelperSetProperty);
  return v5;
}

uint64_t _APConnectivityHelperSetProperty(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  if (*(_QWORD *)(result + 8))
  {
    v2 = -12784;
  }
  else
  {
    result = APSLogErrorAt();
    v2 = -72201;
  }
  *(_DWORD *)(v1 + 24) = v2;
  return result;
}

uint64_t APConnectivityHelperQueryWiFiPower(uint64_t a1, uint64_t a2)
{
  _QWORD context[2];
  uint64_t v4;

  context[1] = a2;
  v4 = 0;
  context[0] = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), context, (dispatch_function_t)_APConnectivityHelperQueryWiFiPower);
  return v4;
}

uint64_t _APConnectivityHelperQueryWiFiPower(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  int v4;
  uint64_t result;
  char v6;
  int v7;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 200))
  {
    result = APSLogErrorAt();
    v7 = -72203;
  }
  else
  {
    v3 = *(_BYTE **)(a1 + 8);
    v4 = _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(*(_QWORD *)a1);
    if (v4)
    {
      v7 = v4;
      result = APSLogErrorAt();
    }
    else
    {
      result = objc_msgSend(*(id *)(v2 + 40), "powerOn");
      v6 = result;
      if (gLogCategory_APConnectivityHelper <= 40)
      {
        if (gLogCategory_APConnectivityHelper != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
          result = LogPrintF();
      }
      v7 = 0;
      *v3 = v6;
    }
  }
  *(_DWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t APConnectivityHelperSetWiFiPower(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APConnectivityHelperSetWiFiPower);
  return HIDWORD(v4);
}

uint64_t _APConnectivityHelperSetWiFiPower(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  const char *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *((unsigned __int8 *)a1 + 8);
  v9 = 0;
  if (*(_BYTE *)(v2 + 200))
  {
    result = APSLogErrorAt();
    v6 = -72203;
  }
  else
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      v4 = "ON";
      if (!v3)
        v4 = "OFF";
      v7 = v2;
      v8 = v4;
      LogPrintF();
    }
    objc_msgSend(*(id *)(v2 + 40), "setPower:error:", v3 != 0, &v9, v7, v8);
    result = NSErrorToOSStatus();
    v6 = result;
    if ((_DWORD)result)
      result = APSLogErrorAt();
  }
  *((_DWORD *)a1 + 3) = v6;
  return result;
}

uint64_t APConnectivityHelperUpdateTrafficRegistration()
{
  return APSDispatchSyncTask();
}

uint64_t _APConnectivityHelperUpdateTrafficRegistration(uint64_t *a1)
{
  uint64_t v2;
  id v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;

  v2 = *a1;
  v12 = 0;
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = 0;
    v3 = 0;
    goto LABEL_32;
  }
  if (*(_BYTE *)(v2 + 200))
  {
    APSLogErrorAt();
    v3 = 0;
    v7 = 0;
    v9 = 4294960573;
    goto LABEL_20;
  }
  v3 = objc_alloc_init(MEMORY[0x1E0D1BA28]);
  if (!v3)
  {
    v9 = 4294895096;
LABEL_27:
    APSLogErrorAt();
LABEL_32:
    v7 = 0;
    goto LABEL_20;
  }
  v4 = *((_BYTE *)a1 + 22) != 0;
  v5 = CUPrintAddress();
  if (!v5)
  {
    v9 = 4294895096;
    goto LABEL_27;
  }
  v6 = objc_msgSend(MEMORY[0x1E0D1BA20], "AWDLPeerContextWithMACAddress:interfaceName:", v5, 0);
  if (v6)
  {
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v6, 0);
    if (v7)
    {
      objc_msgSend(v3, "setServiceName:", a1[1]);
      objc_msgSend(v3, "setActive:", *((_BYTE *)a1 + 22) != 0);
      objc_msgSend(v3, "setSessionFlags:", v4);
      objc_msgSend(v3, "setPeerContextList:", v7);
      v8 = objc_msgSend(*(id *)(v2 + 40), "setAWDLPeerTrafficRegistration:error:", v3, &v12);
      if (gLogCategory_APConnectivityHelper <= 30
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        objc_msgSend(*(id *)(v2 + 40), "interfaceName");
        objc_msgSend((id)objc_msgSend(*(id *)(v2 + 40), "AWDL"), "interfaceName");
        objc_msgSend((id)objc_msgSend(*(id *)(v2 + 40), "requestParameters"), "interfaceName");
        LogPrintF();
      }
      if ((v8 & 1) != 0)
      {
        v9 = 0;
      }
      else
      {
        v10 = NSErrorToOSStatus();
        if (v10)
          v9 = v10;
        else
          v9 = 4294895094;
        if (gLogCategory_APConnectivityHelper <= 90
          && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    else
    {
      v9 = 4294895096;
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    v7 = 0;
    v9 = 4294895094;
  }
LABEL_20:

  return v9;
}

uint64_t APConnectivityHelperStopListeningToEvent(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = a1;
  v4 = a2;
  v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APConnectivityHelperStopListeningToEvent);
  return v5;
}

void _APConnectivityHelperStopListeningToEvent(unsigned int *a1)
{
  uint64_t v2;
  const void *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 200))
  {
    APSLogErrorAt();
    v5 = -72203;
  }
  else
  {
    v3 = (const void *)a1[2];
    if ((_DWORD)v3)
    {
      if (gLogCategory_APConnectivityHelper <= 50
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        APConnectivityHelperGetEventString((int)v3);
        LogPrintF();
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 232), v3);
      switch((int)v3)
      {
        case 1:
          *(_BYTE *)(v2 + 79) = 0;
          v4 = _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(v2);
          v5 = 0;
          if (v4)
          {
            v6 = v4;
            goto LABEL_31;
          }
          break;
        case 2:
          v5 = _APConnectivityHelperEnsureWiFiPowerListenerStopped(v2);
          if (v5)
            goto LABEL_40;
          break;
        case 3:
          v5 = _APConnectivityHelperEnsureWiFiNetworkListenerStopped(v2);
          if (v5)
            goto LABEL_40;
          break;
        case 4:
          v5 = _APConnectivityHelperEnsureUSBInterfaceListenerStopped(v2);
          if (v5)
            goto LABEL_40;
          break;
        case 5:
          goto LABEL_18;
        case 6:
          v5 = _APConnectivityHelperEnsureIPv6AddressesListenerStopped(v2);
          if (v5)
            goto LABEL_40;
          break;
        case 7:
          *(_BYTE *)(v2 + 176) = 0;
          v7 = _APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(v2);
          v5 = 0;
          if (v7)
          {
            v6 = v7;
LABEL_31:
            APSLogErrorAt();
            v5 = v6;
          }
          break;
        case 8:
          v5 = _APConnectivityHelperEnsureAWDLSoloSupportListenerStopped(v2);
          if (v5)
            goto LABEL_40;
          break;
        case 9:
          v5 = _APConnectivityHelperStopLinkDebounceFailedListener(v2);
          if (!v5)
            break;
          APSLogErrorAt();
          goto LABEL_40;
        default:
          if (((_DWORD)v3 - 100) <= 9 && ((1 << ((_BYTE)v3 - 100)) & 0x39F) != 0)
          {
            v5 = -72201;
            if (gLogCategory_APConnectivityHelper <= 60
              && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
            {
              APConnectivityHelperGetEventString((int)v3);
LABEL_15:
              LogPrintF();
              break;
            }
          }
          else
          {
LABEL_18:
            v5 = -72201;
            if (gLogCategory_APConnectivityHelper <= 60
              && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
            {
              goto LABEL_15;
            }
          }
          break;
      }
    }
    else
    {
      v5 = -72201;
LABEL_40:
      APSLogErrorAt();
    }
  }
  a1[3] = v5;
}

uint64_t APConnectivityHelperRegisterForEvent(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (a2)
  {
    v3 = *(NSObject **)(a1 + 16);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __APConnectivityHelperRegisterForEvent_block_invoke;
    v6[3] = &unk_1E8256798;
    v7 = a3;
    v6[5] = a1;
    v6[6] = a2;
    v6[4] = &v8;
    dispatch_sync(v3, v6);
    v4 = *((unsigned int *)v9 + 6);
  }
  else
  {
    APSLogErrorAt();
    v4 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1C93BB3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

const char *APConnectivityHelperGetEventString(int a1)
{
  const char *result;
  int v2;

  switch(a1)
  {
    case 'd':
      result = "Invalidated";
      break;
    case 'e':
      result = "WiFi Available Listening Stopped";
      break;
    case 'f':
      result = "WiFi Power Changed Listening Stopped";
      break;
    case 'g':
      result = "WiFi Network Changed Listening Stopped";
      break;
    case 'h':
      result = "USB Interface Changed Listening Stopped";
      break;
    case 'i':
LABEL_15:
      result = "Unknown";
      break;
    case 'j':
      result = "IPv6 Addresses Changed Listening Stopped";
      break;
    case 'k':
      result = "AWDL Available Listening Stopped";
      break;
    case 'l':
      result = "AWDL Solo Support Listening Stopped";
      break;
    case 'm':
      result = "Link Debounce Failed Listening Stopped";
      break;
    default:
      v2 = a1 - 1;
      result = "WiFi Available";
      switch(v2)
      {
        case 0:
          return result;
        case 1:
          result = "WiFi Power Changed";
          break;
        case 2:
          result = "WiFi Network Changed";
          break;
        case 3:
          result = "USB Interface Changed";
          break;
        case 5:
          result = "IPv6 Addresses Changed";
          break;
        case 6:
          result = "AWDL Available";
          break;
        case 7:
          result = "AWDL Solo Support";
          break;
        case 8:
          result = "Link Debounce Failed";
          break;
        default:
          goto LABEL_15;
      }
      break;
  }
  return result;
}

uint64_t APConnectivityHelperDeregisterForEvent(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (a2)
  {
    v3 = *(NSObject **)(a1 + 16);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __APConnectivityHelperDeregisterForEvent_block_invoke;
    v6[3] = &unk_1E8256798;
    v6[4] = &v8;
    v6[5] = a1;
    v6[6] = a2;
    v7 = a3;
    dispatch_sync(v3, v6);
    if (*((_DWORD *)v9 + 6))
    {
      APSLogErrorAt();
      v4 = *((unsigned int *)v9 + 6);
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    v4 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1C93BB948(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _APConnectivityHelperDeregisterForEvent(uint64_t a1, const void *a2, void *key)
{
  int v3;
  unint64_t v6;
  const __CFSet *Value;
  __CFSet *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v13 = a1;
  v14 = (int)key;
  v15 = 0;
  if (a2)
  {
    v3 = (int)key;
    v6 = key;
    Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 216), (const void *)key);
    if (!Value)
      return 0;
    v8 = Value;
    if (!CFSetContainsValue(Value, a2))
      return 0;
    CFSetRemoveValue(v8, a2);
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      APConnectivityHelperGetEventString(v3);
      CFSetGetCount(v8);
      LogPrintF();
    }
    v9 = v3 - 1;
    if ((v3 - 1) <= 8 && ((0x1EFu >> v9) & 1) != 0)
    {
      v10 = dword_1C9432500[v9];
      if (gLogCategory_APConnectivityHelper <= 30
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        APConnectivityHelperGetEventString(v10);
        LogPrintF();
      }
      _APConnectivityHelperDispatchEventToClient(a1, a2, v10, 0);
    }
    if (!CFSetGetCount(v8))
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 216), (const void *)v6);
      _APConnectivityHelperStopListeningToEvent((unsigned int *)&v13);
      v11 = v15;
      if (v15)
        APSLogErrorAt();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v11;
}

uint64_t APConnectivityHelperRegisterActivity(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (a2)
  {
    v3 = *(NSObject **)(a1 + 16);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __APConnectivityHelperRegisterActivity_block_invoke;
    v6[3] = &unk_1E8256798;
    v7 = a3;
    v6[5] = a1;
    v6[6] = a2;
    v6[4] = &v8;
    dispatch_sync(v3, v6);
    v4 = *((unsigned int *)v9 + 6);
  }
  else
  {
    APSLogErrorAt();
    v4 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1C93BBC60(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

const char *APConnectivityHelperGetActivityString(int a1)
{
  if (a1)
    return "Unknown";
  else
    return "Wake on Wireless";
}

uint64_t APConnectivityHelperDeregisterActivity(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (a2)
  {
    v3 = *(NSObject **)(a1 + 16);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __APConnectivityHelperDeregisterActivity_block_invoke;
    v6[3] = &unk_1E8256798;
    v6[4] = &v8;
    v6[5] = a1;
    v6[6] = a2;
    v7 = a3;
    dispatch_sync(v3, v6);
    if (*((_DWORD *)v9 + 6))
    {
      APSLogErrorAt();
      v4 = *((unsigned int *)v9 + 6);
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    v4 = 4294960591;
    *((_DWORD *)v9 + 6) = -6705;
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1C93BC084(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _APConnectivityHelperDeregisterActivity(uint64_t a1, const void *a2, void *key)
{
  int v3;
  unint64_t v6;
  const __CFSet *Value;
  __CFSet *v8;
  uint64_t v9;

  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  v3 = (int)key;
  v6 = key;
  Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 224), (const void *)key);
  if (Value)
  {
    v8 = Value;
    if (CFSetContainsValue(Value, a2))
    {
      CFSetRemoveValue(v8, a2);
      if (gLogCategory_APConnectivityHelper <= 50
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        CFSetGetCount(v8);
        LogPrintF();
      }
      if (!CFSetGetCount(v8))
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 224), (const void *)v6);
        if (v3)
        {
          v9 = 4294960561;
          APSLogErrorAt();
          APSLogErrorAt();
          return v9;
        }
        _APConnectivityHelperStopWakeOnWireless(a1);
      }
    }
  }
  return 0;
}

uint64_t APConnectivityHelperRemoveAllRegistrations(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD block[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  _QWORD v14[6];

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (a2)
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v4 = *(NSObject **)(a1 + 16);
    v5 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APConnectivityHelperRemoveAllRegistrations_block_invoke;
    block[3] = &unk_1E8256C58;
    block[4] = &v10;
    block[5] = a1;
    block[6] = a2;
    dispatch_sync(v4, block);
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = *(NSObject **)(a1 + 16);
    v14[0] = v5;
    v14[1] = 3221225472;
    v14[2] = __APConnectivityHelperDeregisterEventHandler_block_invoke;
    v14[3] = &__block_descriptor_48_e5_v8__0l;
    v14[4] = a1;
    v14[5] = a2;
    dispatch_sync(v6, v14);
    v7 = *((unsigned int *)v11 + 6);
  }
  else
  {
    APSLogErrorAt();
    v7 = 4294960591;
    *((_DWORD *)v11 + 6) = -6705;
  }
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1C93BC408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void APConnectivityHelperDeregisterEventHandler(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a2)
  {
    v2 = *(NSObject **)(a1 + 16);
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __APConnectivityHelperDeregisterEventHandler_block_invoke;
    v3[3] = &__block_descriptor_48_e5_v8__0l;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_sync(v2, v3);
  }
  else
  {
    APSLogErrorAt();
  }
}

uint64_t APConnectivityHelperSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[3];
  uint64_t v5;

  v4[0] = a1;
  v4[1] = a2;
  v4[2] = a3;
  v5 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v4, (dispatch_function_t)_APConnectivityHelperSetEventHandler);
  return v5;
}

uint64_t _APConnectivityHelperSetEventHandler(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = result;
  v2 = *(_QWORD *)result;
  if (*(_BYTE *)(*(_QWORD *)result + 200))
  {
    result = APSLogErrorAt();
    v3 = -72203;
    goto LABEL_5;
  }
  if (*(_BYTE *)(v2 + 80))
  {
    v3 = -72204;
LABEL_9:
    result = APSLogErrorAt();
    goto LABEL_5;
  }
  if (*(_BYTE *)(v2 + 77))
  {
    v3 = -72204;
    goto LABEL_9;
  }
  v3 = 0;
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(result + 8);
LABEL_5:
  *(_DWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t APConnectivityHelperRegisterEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  if (a2 && a3)
  {
    v3 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APConnectivityHelperRegisterEventHandler_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a1;
    block[5] = a2;
    block[6] = a3;
    dispatch_sync(v3, block);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t APConnectivityHelperCopyCurrentWiFiNetworkInfo(dispatch_queue_t *a1, CFTypeRef *a2)
{
  const __CFAllocator *v4;
  dispatch_queue_t *context;
  CFTypeRef cf;
  uint64_t v8;

  v8 = 0;
  context = a1;
  v4 = CFGetAllocator(a1);
  cf = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  dispatch_sync_f(a1[2], &context, (dispatch_function_t)_APConnectivityHelperPopulateCurrentWiFiNetworkInfo);
  if ((_DWORD)v8)
  {
    APSLogErrorAt();
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
  }
  return v8;
}

void _APConnectivityHelperPopulateCurrentWiFiNetworkInfo(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  void *v5;
  void *v6;
  int v7;
  const void **v8;

  v2 = *a1;
  if (*(_BYTE *)(*a1 + 200))
  {
    APSLogErrorAt();
    LODWORD(v6) = -72203;
  }
  else
  {
    v3 = *(const void **)(v2 + 48);
    if (v3)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)a1[1], CFSTR("networkInterfaceName"), v3);
      v4 = (const void *)objc_msgSend(*(id *)(v2 + 40), "networkName");
      if (v4)
        CFDictionarySetValue((CFMutableDictionaryRef)a1[1], CFSTR("wifiNetworkSSID"), v4);
      v5 = (void *)objc_msgSend(*(id *)(v2 + 40), "currentKnownNetworkProfile");
      v6 = v5;
      if (v5)
      {
        v7 = objc_msgSend(v5, "isCarPlay");
        v8 = (const void **)MEMORY[0x1E0C9AE50];
        if (!v7)
          v8 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue((CFMutableDictionaryRef)a1[1], CFSTR("wifiNetworkIsCarPlay"), *v8);
        v6 = (void *)objc_msgSend(v6, "carplayUUID");
        if (v6)
        {
          if (gLogCategory_APConnectivityHelper <= 50
            && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFDictionarySetValue((CFMutableDictionaryRef)a1[1], CFSTR("wifiNetworkCarPlayUUID"), v6);
          LODWORD(v6) = 0;
        }
      }
    }
    else
    {
      LODWORD(v6) = -72205;
      APSLogErrorAt();
    }
  }
  *((_DWORD *)a1 + 4) = (_DWORD)v6;
}

uint64_t APConnectivityHelperInvalidate(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v3, (dispatch_function_t)_APConnectivityHelperInvalidate);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 16), &__block_literal_global_45_0);
  return v4;
}

uint64_t _APConnectivityHelperInvalidate(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 200))
  {
    result = 4294895093;
  }
  else
  {
    _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(*(_QWORD *)a1);
    _APConnectivityHelperEnsureWiFiPowerListenerStopped(v2);
    _APConnectivityHelperEnsureWiFiNetworkListenerStopped(v2);
    _APConnectivityHelperEnsureUSBInterfaceListenerStopped(v2);
    _APConnectivityHelperEnsureIPv6AddressesListenerStopped(v2);
    _APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(v2);
    _APConnectivityHelperEnsureAWDLSoloSupportListenerStopped(v2);
    _APConnectivityHelperStopWakeOnWireless(v2);
    if (*(_QWORD *)(v2 + 32))
    {
      if (_APConnectivityHelper_getActiveHelpers_once != -1)
        dispatch_once(&_APConnectivityHelper_getActiveHelpers_once, &__block_literal_global_66);
      FigCFWeakReferenceTableRemoveValue();
      *(_QWORD *)(v2 + 32) = 0;
    }
    objc_msgSend(*(id *)(v2 + 40), "invalidate");
    result = _APConnectivityHelperDispatchEvent(v2, (void *)0x64, 0);
    *(_BYTE *)(v2 + 200) = 1;
  }
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

void _APConnectivityHelperFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  NSObject *v11;

  if (*(_BYTE *)(a1 + 200))
  {

    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 40) = 0;

    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v2 = *(const void **)(a1 + 104);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v3 = *(const void **)(a1 + 120);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 120) = 0;
    }
    v4 = *(const void **)(a1 + 208);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 208) = 0;
    }
    v5 = *(const void **)(a1 + 216);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 216) = 0;
    }
    v6 = *(const void **)(a1 + 224);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 224) = 0;
    }
    v7 = *(const void **)(a1 + 232);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 232) = 0;
    }
    v8 = *(const void **)(a1 + 144);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 144) = 0;
    }
    v9 = *(const void **)(a1 + 152);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 152) = 0;
    }
    v10 = *(NSObject **)(a1 + 16);
    if (v10)
    {
      dispatch_release(v10);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v11 = *(NSObject **)(a1 + 24);
    if (v11)
    {
      dispatch_release(v11);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  else
  {
    if (gLogCategory_APConnectivityHelper <= 100)
      _APConnectivityHelperFinalize_cold_1(gLogCategory_APConnectivityHelper);
    __break(1u);
  }
}

void _APConnectivityHelperReplayEvent(uint64_t a1, const void *a2, int a3, const void *a4)
{
  const void *v8;

  if (gLogCategory_APConnectivityHelper <= 30
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    APConnectivityHelperGetEventString(a3);
    LogPrintF();
  }
  if ((const void *)*MEMORY[0x1E0C9B0D0] == a4)
    v8 = 0;
  else
    v8 = a4;
  _APConnectivityHelperDispatchEventToClient(a1, a2, a3, v8);
}

void _APConnectivityHelperDispatchEventToClient(uint64_t a1, const void *a2, int a3, const void *a4)
{
  const void *Value;
  const void *v9;
  NSObject *v10;
  _QWORD block[8];
  int v12;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 208), a2);
  if (Value)
  {
    v9 = Value;
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      APConnectivityHelperGetEventString(a3);
      LogPrintF();
    }
    CFRetain((CFTypeRef)a1);
    CFRetain(a2);
    if (a4)
      CFRetain(a4);
    v10 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___APConnectivityHelperDispatchEventToClient_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    block[4] = v9;
    block[5] = a1;
    v12 = a3;
    block[6] = a4;
    block[7] = a2;
    dispatch_async(v10, block);
  }
  else if (gLogCategory_APConnectivityHelper <= 90
         && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    APConnectivityHelperGetEventString(a3);
    LogPrintF();
  }
}

void _APConnectivityHelperStopWakeOnWireless(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 64))
  {
    objc_msgSend(*(id *)(a1 + 40), "endActivity:");

    *(_QWORD *)(a1 + 64) = 0;
  }
}

uint64_t _APConnectivityHelperHandleWiFiLinkChangedInternal(_BYTE *cf, void *a2)
{
  const __CFAllocator *v4;
  void *v5;
  CFMutableDictionaryRef v6;
  uint64_t v7;
  _BYTE *v9;
  CFMutableDictionaryRef theDict;
  uint64_t v11;

  v9 = cf;
  if (!cf[73])
    return 0;
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v4 = CFGetAllocator(cf);
  theDict = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (theDict)
  {
    v11 = 0;
    _APConnectivityHelperPopulateCurrentWiFiNetworkInfo((uint64_t *)&v9);
    if ((_DWORD)v11)
    {
      APSLogErrorAt();
      v7 = 0;
      v6 = theDict;
    }
    else
    {
      if (a2)
      {
        v5 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D1B9F8]);
        if (v5)
        {
          if (objc_msgSend(v5, "isLinkDownDebounceInProgress"))
            CFDictionarySetValue(theDict, CFSTR("wifiNetworkIsLinkDownDebounceInProgress"), (const void *)*MEMORY[0x1E0C9AE50]);
        }
      }
      v6 = theDict;
      v7 = _APConnectivityHelperDispatchEvent((uint64_t)cf, (void *)3, theDict);
      if ((_DWORD)v7)
        APSLogErrorAt();
    }
    if (v6)
      CFRelease(v6);
  }
  else
  {
    APSLogErrorAt();
    return 4294895096;
  }
  return v7;
}

void *_APConnectivityHelperTrySettingWiFiDevice(uint64_t a1)
{
  void *result;

  if (*(_QWORD *)(a1 + 48))
  {
LABEL_2:
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_10;
  }
  result = (void *)objc_msgSend(*(id *)(a1 + 40), "interfaceName");
  if (!result)
    return result;
  *(_QWORD *)(a1 + 48) = result;
  if (gLogCategory_APConnectivityHelper <= 40)
  {
    if (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize())
      LogPrintF();
    goto LABEL_2;
  }
LABEL_10:
  if (*(_BYTE *)(a1 + 79))
  {
    if (_APConnectivityHelperDispatchEvent(a1, (void *)1, 0))
      goto LABEL_28;
    *(_BYTE *)(a1 + 79) = 0;
  }
  if (*(_BYTE *)(a1 + 78))
  {
    if (_APConnectivityHelperStartWiFiPowerListener(a1))
      goto LABEL_28;
    *(_BYTE *)(a1 + 78) = 0;
  }
  if (*(_BYTE *)(a1 + 74))
  {
    if (_APConnectivityHelperStartWiFiNetworkListener(a1))
      goto LABEL_28;
    *(_BYTE *)(a1 + 74) = 0;
  }
  if (*(_BYTE *)(a1 + 76))
  {
    if (_APConnectivityHelperStartLinkDebounceFailedListener(a1))
      goto LABEL_28;
    *(_BYTE *)(a1 + 76) = 0;
  }
  if (!*(_BYTE *)(a1 + 178))
    return (void *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(a1);
  if (!_APConnectivityHelperEnsureAWDLDevicePresentListenerStarted(a1))
  {
    *(_BYTE *)(a1 + 178) = 0;
    return (void *)_APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(a1);
  }
LABEL_28:
  APSLogErrorAt();
  _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(a1);
  return (void *)APSLogErrorAt();
}

id _APConnectivityHelperTrySettingAWDLDevice(uint64_t a1)
{
  id result;
  int v3;

  if (*(_QWORD *)(a1 + 56))
    goto LABEL_24;
  result = (id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "AWDL"), "interfaceName");
  if (result)
  {
    result = result;
    *(_QWORD *)(a1 + 56) = result;
    if (gLogCategory_APConnectivityHelper <= 40)
    {
      if (gLogCategory_APConnectivityHelper != -1 || (v3 = _LogCategory_Initialize(), result = *(id *)(a1 + 56), v3))
      {
        LogPrintF();
        result = *(id *)(a1 + 56);
      }
    }
    if (result)
    {
LABEL_24:
      if (gLogCategory_APConnectivityHelper <= 30
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (*(_BYTE *)(a1 + 176))
      {
        if (gLogCategory_APConnectivityHelper <= 30
          && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (_APConnectivityHelperDispatchEvent(a1, (void *)7, 0))
          APSLogErrorAt();
        else
          *(_BYTE *)(a1 + 176) = 0;
      }
      return (id)_APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(a1);
    }
  }
  return result;
}

uint64_t _APConnectivityHelperDispatchEvent(uint64_t a1, void *key, const void *a3)
{
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  const void *Value;
  const __CFSet *v10;
  CFMutableSetRef Mutable;
  const void *v12;

  if (*(_BYTE *)(a1 + 200))
    return 0;
  v4 = key;
  if (!*(_QWORD *)(a1 + 184))
  {
    if (key > 0x62)
    {
      Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
      if (!Mutable)
      {
        APSLogErrorAt();
        return 4294960568;
      }
      v10 = Mutable;
      CFDictionaryApplyBlock();
    }
    else
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 216), (const void *)key);
      if (Value)
        v10 = (const __CFSet *)CFRetain(Value);
      else
        v10 = 0;
    }
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      APConnectivityHelperGetEventString(v4);
      if (v10)
        CFSetGetCount(v10);
      LogPrintF();
    }
    if (v10)
      CFSetApplyBlock();
    if (v4 <= 8 && ((1 << v4) & 0x1DA) != 0)
    {
      if (a3)
        v12 = a3;
      else
        v12 = (const void *)*MEMORY[0x1E0C9B0D0];
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)v4, v12);
    }
    if (v10)
      CFRelease(v10);
    return 0;
  }
  v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E00404FF7FCA9uLL);
  if (v6)
  {
    v7 = v6;
    CFRetain((CFTypeRef)a1);
    if (a3)
      CFRetain(a3);
    v8 = *(_QWORD *)(a1 + 192);
    *v7 = *(_QWORD *)(a1 + 184);
    v7[1] = a1;
    *((_DWORD *)v7 + 4) = v4;
    v7[3] = a3;
    v7[4] = v8;
    if (gLogCategory_APConnectivityHelper <= 20
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      APConnectivityHelperGetEventString(v4);
      LogPrintF();
    }
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 24), v7, (dispatch_function_t)_APConnectivityHelperDispatchEventExternal);
    return 0;
  }
  APSLogErrorAt();
  return 4294895096;
}

uint64_t _APConnectivityHelperStartWiFiNetworkListener(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (*(_BYTE *)(a1 + 73))
    return 0;
  if (!*(_QWORD *)(a1 + 48))
  {
    v2 = 4294895091;
    goto LABEL_14;
  }
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    v5 = a1;
    LogPrintF();
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "startMonitoringEventType:error:", 6, &v6, v5) & 1) == 0)
  {
    v3 = NSErrorToOSStatus();
    if (v3)
      v2 = v3;
    else
      v2 = 4294895094;
    goto LABEL_14;
  }
  *(_BYTE *)(a1 + 73) = 1;
  v2 = _APConnectivityHelperHandleWiFiLinkChangedInternal((_BYTE *)a1, 0);
  if ((_DWORD)v2)
  {
LABEL_14:
    APSLogErrorAt();
    _APConnectivityHelperStopWiFiNetworkListener(a1);
  }
  return v2;
}

uint64_t _APConnectivityHelperStartLinkDebounceFailedListener(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (*(_BYTE *)(a1 + 75))
    return 0;
  if (!*(_QWORD *)(a1 + 48))
  {
    v2 = 4294895091;
    APSLogErrorAt();
LABEL_17:
    _APConnectivityHelperStopLinkDebounceFailedListener(a1);
    return v2;
  }
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    v5 = a1;
    LogPrintF();
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "startMonitoringEventType:error:", 29, &v6, v5) & 1) == 0)
  {
    v3 = NSErrorToOSStatus();
    if (v3)
      v2 = v3;
    else
      v2 = 4294895094;
    if (gLogCategory_APConnectivityHelper <= 90
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_17;
  }
  v2 = 0;
  *(_BYTE *)(a1 + 75) = 1;
  return v2;
}

uint64_t _APConnectivityHelperEnsureAWDLDevicePresentListenerStarted(uint64_t a1)
{
  uint64_t v2;
  uint64_t updated;

  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_BYTE *)(a1 + 177) || *(_QWORD *)(a1 + 56))
      goto LABEL_11;
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(a1 + 177) = 1;
    updated = _APConnectivityHelperUpdateInterfaceAddedListener(a1);
    if (!(_DWORD)updated)
    {
LABEL_11:
      _APConnectivityHelperTrySettingAWDLDevice(a1);
      return 0;
    }
    v2 = updated;
    APSLogErrorAt();
    _APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(a1);
LABEL_14:
    APSLogErrorAt();
    return v2;
  }
  *(_BYTE *)(a1 + 178) = 1;
  v2 = _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(a1);
  if ((_DWORD)v2)
    goto LABEL_14;
  return v2;
}

uint64_t _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(uint64_t a1)
{
  uint64_t v1;

  v1 = _APConnectivityHelperStopWiFiDeviceAttachmentListener(a1);
  if ((_DWORD)v1)
    APSLogErrorAt();
  return v1;
}

void _APConnectivityHelperDispatchEventExternal(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)a1[1];
  v3 = (const void *)a1[3];
  ((void (*)(const void *, _QWORD, const void *, _QWORD))*a1)(v2, *((unsigned int *)a1 + 4), v3, a1[4]);
  if (v3)
    CFRelease(v3);
  CFRelease(v2);
  free(a1);
}

uint64_t _APConnectivityHelperStopWiFiNetworkListener(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    *(_BYTE *)(a1 + 74) = 0;
    v2 = 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      v5 = a1;
      LogPrintF();
    }
    objc_msgSend(*(id *)(a1 + 40), "stopMonitoringEventType:", 6, v5);
    *(_BYTE *)(a1 + 73) = 0;
    v2 = 1;
  }
  v3 = 0;
  if (v2)
  {
    if (*(_QWORD *)(a1 + 184))
    {
      v3 = _APConnectivityHelperDispatchEvent(a1, (void *)0x67, 0);
      if ((_DWORD)v3)
        APSLogErrorAt();
    }
  }
  return v3;
}

uint64_t _APConnectivityHelperStopLinkDebounceFailedListener(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(a1 + 76);
  if (*(_BYTE *)(a1 + 76))
  {
    *(_BYTE *)(a1 + 76) = 0;
    v2 = 1;
  }
  if (*(_BYTE *)(a1 + 75))
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      v5 = a1;
      LogPrintF();
    }
    objc_msgSend(*(id *)(a1 + 40), "stopMonitoringEventType:", 29, v5);
    *(_BYTE *)(a1 + 75) = 0;
    v2 = 1;
  }
  v3 = 0;
  if (v2)
  {
    if (*(_QWORD *)(a1 + 184))
    {
      v3 = _APConnectivityHelperDispatchEvent(a1, (void *)0x6D, 0);
      if ((_DWORD)v3)
        APSLogErrorAt();
    }
  }
  return v3;
}

uint64_t _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStarted(uint64_t a1)
{
  uint64_t updated;
  uint64_t v3;
  const void *v4;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 80) && !*(_QWORD *)(a1 + 48))
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(a1 + 80) = 1;
    updated = _APConnectivityHelperUpdateInterfaceAddedListener(a1);
    if ((_DWORD)updated)
    {
      v5 = updated;
      APSLogErrorAt();
      _APConnectivityHelperStopWiFiDeviceAttachmentListener(a1);
      APSLogErrorAt();
      _APConnectivityHelperEnsureWiFiDeviceAvailabilityCheckStopped(a1);
      return v5;
    }
    if (CFPrefs_GetInt64())
    {
      CFGetAllocator((CFTypeRef)a1);
      v3 = WiFiManagerClientCreate();
      if (v3)
      {
        v4 = (const void *)v3;
        WiFiManagerClientSetProperty();
        CFRelease(v4);
      }
      else if (gLogCategory_APConnectivityHelper <= 90
             && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
  _APConnectivityHelperTrySettingWiFiDevice(a1);
  return 0;
}

uint64_t _APConnectivityHelperUpdateInterfaceAddedListener(uint64_t a1)
{
  dispatch_source_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  dispatch_time_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD handler[5];

  if (!*(_BYTE *)(a1 + 80) && !*(_BYTE *)(a1 + 177))
  {
    if (*(_BYTE *)(a1 + 96))
    {
      *(_BYTE *)(a1 + 96) = 0;
      if (gLogCategory_APConnectivityHelper <= 40
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      _APConnectivityHelperStopInterfaceAddedRetryTimer(a1);
      objc_msgSend(*(id *)(a1 + 40), "stopMonitoringEventType:", 10);
    }
    return 0;
  }
  v12 = 0;
  if (APSIsVirtualMachine())
  {
    if (gLogCategory_APConnectivityHelper <= 50
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 96))
    return 0;
  *(_BYTE *)(a1 + 96) = 1;
  if (gLogCategory_APConnectivityHelper <= 30
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    v11 = a1;
    LogPrintF();
  }
  if (!*(_QWORD *)(a1 + 88))
  {
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      v11 = a1;
      LogPrintF();
    }
    v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 16));
    *(_QWORD *)(a1 + 88) = v2;
    if (v2)
    {
      CFRetain((CFTypeRef)a1);
      v3 = MEMORY[0x1E0C809B0];
      v4 = *(NSObject **)(a1 + 88);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 3221225472;
      handler[2] = ___APConnectivityHelperStartInterfaceAddedRetryTimer_block_invoke;
      handler[3] = &__block_descriptor_40_e5_v8__0l;
      handler[4] = a1;
      dispatch_source_set_event_handler(v4, handler);
      v5 = *(NSObject **)(a1 + 88);
      v13[0] = v3;
      v13[1] = 3221225472;
      v13[2] = ___APConnectivityHelperStartInterfaceAddedRetryTimer_block_invoke_2;
      v13[3] = &__block_descriptor_40_e5_v8__0l;
      v13[4] = a1;
      dispatch_source_set_cancel_handler(v5, v13);
      v6 = *(NSObject **)(a1 + 88);
      v7 = dispatch_time(0, 5000000000);
      dispatch_source_set_timer(v6, v7, 0x77359400uLL, 0x3B9ACA00uLL);
      dispatch_resume(*(dispatch_object_t *)(a1 + 88));
    }
    else
    {
      APSLogErrorAt();
    }
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "startMonitoringEventType:error:", 10, &v12, v11) & 1) != 0)
    return 0;
  if (gLogCategory_APConnectivityHelper <= 90
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  _APConnectivityHelperStopInterfaceAddedRetryTimer(a1);
  v8 = NSErrorToOSStatus();
  if (v8)
    v9 = v8;
  else
    v9 = 4294895094;
  APSLogErrorAt();
  return v9;
}

uint64_t _APConnectivityHelperEnsureAWDLDevicePresentListenerStopped(uint64_t a1)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 177) && !*(_BYTE *)(a1 + 178))
    return 0;
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_WORD *)(a1 + 177) = 0;
  _APConnectivityHelperUpdateInterfaceAddedListener(a1);
  if (!*(_QWORD *)(a1 + 184))
    return 0;
  v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x6B, 0);
  if ((_DWORD)v2)
  {
    APSLogErrorAt();
    APSLogErrorAt();
  }
  return v2;
}

void _APConnectivityHelperStopInterfaceAddedRetryTimer(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 88);
  if (v1)
  {
    if (gLogCategory_APConnectivityHelper > 30)
      goto LABEL_7;
    if (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize())
      LogPrintF();
    v1 = *(NSObject **)(a1 + 88);
    if (v1)
    {
LABEL_7:
      dispatch_source_cancel(v1);
      dispatch_release(v1);
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
}

uint64_t _APConnectivityHelperStopWiFiDeviceAttachmentListener(uint64_t a1)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 80))
    return 0;
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_BYTE *)(a1 + 80) = 0;
  _APConnectivityHelperUpdateInterfaceAddedListener(a1);
  if (!*(_QWORD *)(a1 + 184))
    return 0;
  v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x65, 0);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t _APConnectivityHelperEnsureWiFiPowerListenerStopped(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 78))
  {
    *(_BYTE *)(a1 + 78) = 0;
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  if (*(_BYTE *)(a1 + 77))
  {
    if (gLogCategory_APConnectivityHelper <= 40
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      v5 = a1;
      LogPrintF();
    }
    v2 = 1;
    objc_msgSend(*(id *)(a1 + 40), "stopMonitoringEventType:", 1, v5);
    *(_BYTE *)(a1 + 77) = 0;
  }
  v3 = 0;
  if (v2)
  {
    if (*(_QWORD *)(a1 + 184))
    {
      v3 = _APConnectivityHelperDispatchEvent(a1, (void *)0x66, 0);
      if ((_DWORD)v3)
      {
        APSLogErrorAt();
        APSLogErrorAt();
      }
    }
  }
  return v3;
}

uint64_t _APConnectivityHelperEnsureWiFiNetworkListenerStopped(uint64_t a1)
{
  uint64_t v1;

  v1 = _APConnectivityHelperStopWiFiNetworkListener(a1);
  if ((_DWORD)v1)
    APSLogErrorAt();
  return v1;
}

uint64_t _APConnectivityHelperEnsureUSBInterfaceListenerStopped(uint64_t a1)
{
  uint64_t v1;

  if (!*(_BYTE *)(a1 + 112))
    return 0;
  v1 = _APConnectivityHelperStopUSBInterfaceListener(a1);
  if ((_DWORD)v1)
    APSLogErrorAt();
  return v1;
}

uint64_t _APConnectivityHelperEnsureIPv6AddressesListenerStopped(uint64_t a1)
{
  uint64_t v1;

  if (!*(_BYTE *)(a1 + 160))
    return 0;
  v1 = _APConnectivityHelperStopIPv6AddressListener(a1);
  if ((_DWORD)v1)
    APSLogErrorAt();
  return v1;
}

uint64_t _APConnectivityHelperEnsureAWDLSoloSupportListenerStopped(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 138))
    return 0;
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    v4 = a1;
    LogPrintF();
  }
  objc_msgSend(*(id *)(a1 + 128), "endMonitoring", v4);

  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 138) = 0;
  if (!*(_QWORD *)(a1 + 184))
    return 0;
  v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x6C, 0);
  if ((_DWORD)v2)
  {
    APSLogErrorAt();
    APSLogErrorAt();
  }
  return v2;
}

uint64_t _APConnectivityHelperStopUSBInterfaceListener(uint64_t a1)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 112))
    return 0;
  _APConnectivityHelperStopListeningToDynamicStoreNetworkEntity(a1, (CFStringRef)*MEMORY[0x1E0CE8B90]);
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 104));
  *(_BYTE *)(a1 + 112) = 0;
  if (!*(_QWORD *)(a1 + 184))
    return 0;
  v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x68, 0);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

void _APConnectivityHelperStopListeningToDynamicStoreNetworkEntity(uint64_t a1, CFStringRef entity)
{
  CFStringRef NetworkInterfaceEntity;
  const __CFArray *v4;
  const void *v5;

  if (*(_QWORD *)(a1 + 152))
  {
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, (CFStringRef)*MEMORY[0x1E0CE8B30], (CFStringRef)*MEMORY[0x1E0CE8B20], entity);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 152), NetworkInterfaceEntity);
    if (!*(_QWORD *)(a1 + 144))
      goto LABEL_11;
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 152)) || *(_BYTE *)(a1 + 72))
    {
      v4 = (const __CFArray *)CFDictionaryCopyKeys();
      if (!SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 144), 0, v4) && SCError())
        SCError();
      if (!NetworkInterfaceEntity)
        goto LABEL_15;
      goto LABEL_14;
    }
    SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 144), 0);
    v5 = *(const void **)(a1 + 144);
    if (v5)
    {
      CFRelease(v5);
      v4 = 0;
      *(_QWORD *)(a1 + 144) = 0;
      if (!NetworkInterfaceEntity)
        goto LABEL_15;
    }
    else
    {
LABEL_11:
      v4 = 0;
      if (!NetworkInterfaceEntity)
      {
LABEL_15:
        if (v4)
          CFRelease(v4);
        return;
      }
    }
LABEL_14:
    CFRelease(NetworkInterfaceEntity);
    goto LABEL_15;
  }
}

uint64_t _APConnectivityHelperStopIPv6AddressListener(uint64_t a1)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 160))
    return 0;
  _APConnectivityHelperStopListeningToDynamicStoreNetworkEntity(a1, (CFStringRef)*MEMORY[0x1E0CE8B80]);
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 120));
  *(_BYTE *)(a1 + 160) = 0;
  if (!*(_QWORD *)(a1 + 184))
    return 0;
  v2 = _APConnectivityHelperDispatchEvent(a1, (void *)0x6A, 0);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t _APConnectivityHelperSendAWDLSoloSupportEvent(uint64_t a1)
{
  int v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void **v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 137))
  {
    if (gLogCategory_APConnectivityHelper <= 30
      && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v2 = *(unsigned __int8 *)(a1 + 136);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v4 = Mutable;
      v5 = (const void **)MEMORY[0x1E0C9AE50];
      if (!v2)
        v5 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(Mutable, CFSTR("isAWDLSoloSupported"), *v5);
      v6 = _APConnectivityHelperDispatchEvent(a1, (void *)8, v4);
      if ((_DWORD)v6)
        APSLogErrorAt();
      CFRelease(v4);
    }
    else
    {
      v6 = 4294895096;
      APSLogErrorAt();
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294895095;
  }
  return v6;
}

uint64_t _APConnectivityHelperStartListeningToDynamicStoreNetworkEntity(uint64_t a1, CFStringRef entity, const void *a3)
{
  const __SCDynamicStore *v6;
  CFMutableDictionaryRef Mutable;
  __CFString *NetworkInterfaceEntity;
  const __CFArray *v9;
  int v10;
  CFDictionaryRef v11;
  const __CFArray *v12;
  void *values;
  SCDynamicStoreContext context;
  unsigned int v16;

  v16 = 0;
  context.version = 0;
  memset(&context.retain, 0, 24);
  context.info = (void *)a1;
  values = 0;
  if (!*(_QWORD *)(a1 + 144))
  {
    v6 = SCDynamicStoreCreate(0, CFSTR("APConnectivityHelper: Network Listener"), (SCDynamicStoreCallBack)_APConnectivityHelperHandleDynamicStoreNetworkEntityValueChange, &context);
    *(_QWORD *)(a1 + 144) = v6;
    if (!v6)
    {
      if (!SCError())
      {
        v16 = -6700;
        goto LABEL_34;
      }
      v16 = SCError();
      if (v16)
        goto LABEL_34;
      v6 = *(const __SCDynamicStore **)(a1 + 144);
    }
    if (SCDynamicStoreSetDispatchQueue(v6, *(dispatch_queue_t *)(a1 + 16)))
    {
      v16 = 0;
    }
    else
    {
      if (!SCError())
      {
        v16 = -6700;
        goto LABEL_34;
      }
      v16 = SCError();
      if (v16)
      {
LABEL_34:
        APSLogErrorAt();
        v9 = 0;
LABEL_35:
        v12 = 0;
        v11 = 0;
        goto LABEL_36;
      }
    }
  }
  if (!*(_QWORD *)(a1 + 152)
    && (Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0), (*(_QWORD *)(a1 + 152) = Mutable) == 0)
    || (NetworkInterfaceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, (CFStringRef)*MEMORY[0x1E0CE8B30], (CFStringRef)*MEMORY[0x1E0CE8B20], entity), (values = NetworkInterfaceEntity) == 0))
  {
    APSLogErrorAt();
    v9 = 0;
    goto LABEL_49;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 152), NetworkInterfaceEntity, a3);
  v9 = (const __CFArray *)CFDictionaryCopyKeys();
  if (v16)
  {
    APSLogErrorAt();
    goto LABEL_35;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v10 = SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 144), 0, v9);
  if (v9)
    CFRelease(v9);
  if (v10)
  {
    v16 = 0;
    goto LABEL_24;
  }
  if (!SCError())
  {
    v16 = -6700;
    goto LABEL_34;
  }
  v16 = SCError();
  if (v16)
    goto LABEL_34;
LABEL_24:
  v9 = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (!v9)
  {
    APSLogErrorAt();
LABEL_49:
    v12 = 0;
    v11 = 0;
    v16 = -72200;
    goto LABEL_36;
  }
  v11 = SCDynamicStoreCopyMultiple(*(SCDynamicStoreRef *)(a1 + 144), 0, v9);
  if (v11)
  {
    v12 = (const __CFArray *)CFDictionaryCopyKeys();
    if (v12)
      _APConnectivityHelperHandleDynamicStoreNetworkEntityValueChange(*(_QWORD *)(a1 + 144), v12, a1);
  }
  else
  {
    v12 = 0;
  }
LABEL_36:
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
  if (v9)
    CFRelease(v9);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  return v16;
}

uint64_t _APConnectivityHelperHandleUSBNetworkChangedEvent(uint64_t result, const __CFString *a2, CFStringRef theString, uint64_t a4)
{
  const __SCDynamicStore *v7;
  uint64_t v8;
  CFPropertyListRef v9;
  const void *v10;
  _BOOL4 v11;
  int v12;
  int v13;
  _BOOL4 v15;
  char buffer[8];
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a4 + 112))
    return result;
  v7 = (const __SCDynamicStore *)result;
  *(_QWORD *)buffer = 0;
  v17 = 0;
  v18 = 0;
  if (*(_BYTE *)(a4 + 72) && CFStringHasPrefix(theString, CFSTR("APCHTestInterface")))
  {
    if (CFStringHasSuffix(theString, CFSTR("USB")))
    {
      v8 = 8;
    }
    else if (CFStringHasSuffix(theString, CFSTR("DirectLink")))
    {
      v8 = 16;
    }
    else
    {
      v8 = 2 * (CFStringHasSuffix(theString, CFSTR("WiFi")) != 0);
    }
  }
  else
  {
    CFStringGetCString(theString, buffer, 17, 0x8000100u);
    v8 = 0;
    SocketGetInterfaceInfo();
  }
  v9 = SCDynamicStoreCopyValue(v7, a2);
  if (v9)
  {
    v10 = v9;
    v11 = CFDictionaryGetInt64() != 0;
    CFRelease(v10);
  }
  else
  {
    v12 = SCError();
    if (v12 != 1004)
    {
      if (gLogCategory_APConnectivityHelper > 90)
      {
        v11 = 0;
        goto LABEL_23;
      }
      v13 = v12;
      if (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize())
      {
        SCErrorString(v13);
        LogPrintF();
      }
    }
    v11 = 0;
  }
  if (gLogCategory_APConnectivityHelper <= 40
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_23:
  result = CFDictionaryContainsKey(*(CFDictionaryRef *)(a4 + 104), theString);
  v15 = (v8 & 0x18) == 0 || !v11;
  if ((_DWORD)result)
  {
    if (v15)
    {
      result = _APConnectivityHelperHandleUSBInterfaceChange(a4, theString, v8, 0);
      if ((_DWORD)result)
        return APSLogErrorAt();
    }
  }
  else if (!v15)
  {
    result = _APConnectivityHelperHandleUSBInterfaceChange(a4, theString, v8, 1);
    if ((_DWORD)result)
      return APSLogErrorAt();
  }
  return result;
}

uint64_t _APConnectivityHelperHandleDynamicStoreNetworkEntityValueChange(int a1, CFArrayRef theArray, uint64_t a3)
{
  uint64_t result;

  if (theArray && !*(_BYTE *)(a3 + 200))
  {
    if (*(_QWORD *)(a3 + 152))
    {
      CFArrayGetCount(theArray);
      return CFArrayApplyBlock();
    }
  }
  return result;
}

uint64_t _APConnectivityHelperHandleUSBInterfaceChange(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  const void **v10;
  __CFDictionary *v11;

  v4 = 4294895095;
  if (!a2)
    goto LABEL_18;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v4 = 4294895096;
LABEL_18:
    APSLogErrorAt();
    APSLogErrorAt();
    return v4;
  }
  v9 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("networkInterfaceName"), a2);
  CFDictionarySetInt64();
  v10 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a4)
    v10 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v9, CFSTR("isAddEvent"), *v10);
  if (gLogCategory_APConnectivityHelper <= 50
    && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = *(__CFDictionary **)(a1 + 104);
  if (a4)
    CFDictionarySetValue(v11, a2, v9);
  else
    CFDictionaryRemoveValue(v11, a2);
  v4 = _APConnectivityHelperDispatchEvent(a1, (void *)4, v9);
  if ((_DWORD)v4)
    APSLogErrorAt();
  CFRelease(v9);
  return v4;
}

void _APConnectivityHelperHandleIPv6ChangedEvent(const __SCDynamicStore *a1, const __CFString *a2, const void *a3, uint64_t a4)
{
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFArray *Value;
  CFArrayRef v9;
  CFTypeID v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  CFIndex Count;
  __CFDictionary *v14;

  v6 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, a2);
  v7 = v6;
  if (v6)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("Addresses"));
    if (Value)
    {
      v9 = Value;
      CFRetain(Value);
LABEL_5:
      v10 = CFGetTypeID(v9);
      if (v10 != CFArrayGetTypeID())
        goto LABEL_21;
      if (gLogCategory_APConnectivityHelper <= 40
        && (gLogCategory_APConnectivityHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v12 = Mutable;
        CFDictionarySetValue(Mutable, CFSTR("networkInterfaceName"), a3);
        CFDictionarySetValue(v12, CFSTR("IPv6Addresses"), v9);
        Count = CFArrayGetCount(v9);
        v14 = *(__CFDictionary **)(a4 + 120);
        if (Count)
          CFDictionarySetValue(v14, a3, v12);
        else
          CFDictionaryRemoveValue(v14, a3);
        if (_APConnectivityHelperDispatchEvent(a4, (void *)6, v12))
          APSLogErrorAt();
        CFRelease(v12);
      }
      else
      {
LABEL_21:
        APSLogErrorAt();
      }
      CFRelease(v9);
      if (v7)
        goto LABEL_20;
      return;
    }
  }
  else
  {
    v9 = CFArrayCreate(0, 0, 0, MEMORY[0x1E0C9B378]);
    if (v9)
      goto LABEL_5;
  }
  APSLogErrorAt();
  if (v7)
LABEL_20:
    CFRelease(v7);
}

uint64_t OUTLINED_FUNCTION_1()
{
  return LogPrintF();
}

uint64_t OUTLINED_FUNCTION_2()
{
  return _LogCategory_Initialize();
}

uint64_t APTransportConnectionAggregateProtocolGetProtocolID()
{
  MEMORY[0x1CAA3C24C](&APTransportConnectionAggregateProtocolGetProtocolID_sRegisterAPTransportConnectionAggregateProtocolTypeOnce, registerAPTransportConnectionAggregateProtocolType);
  return sAPTransportConnectionAggregateProtocolID;
}

uint64_t registerAPTransportConnectionAggregateProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t APTNANDataSessionIssueReportCreate(const void *a1, const void *a2, CFTypeRef *a3)
{
  CFTypeID v6;
  CFTypeID TypeID;
  void *v8;
  uint64_t v9;
  CFTypeID v10;
  id v11;

  if (a1)
  {
    v6 = CFGetTypeID(a1);
    TypeID = CFNumberGetTypeID();
    v8 = 0;
    v9 = 4294960591;
    if (a2 && v6 == TypeID)
    {
      v10 = CFGetTypeID(a2);
      if (v10 == CFNumberGetTypeID())
      {
        v11 = objc_alloc_init(MEMORY[0x1E0DD99E0]);
        v8 = v11;
        if (v11)
        {
          objc_msgSend(v11, "setRtpSequenceNumber:", a1);
          objc_msgSend(v8, "setRtpStartTime:", a2);
          v9 = 0;
          *a3 = CFRetain(v8);
        }
        else
        {
          v9 = 4294960568;
        }
      }
      else
      {
        v8 = 0;
      }
    }
  }
  else
  {
    v8 = 0;
    v9 = 4294960591;
  }

  return v9;
}

uint64_t APTransportPackageTCPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v2;

  v2 = APTransportPackageTCPCreateWithBBuf(a1, 0, a2);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t APTransportPackageTCPCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  uint64_t v6;
  CFAllocatorRef **DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  size_t DataLength;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 destination;
  __int128 v16;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;

  blockBufferOut = 0;
  cf = 0;
  APTransportPackageGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v13 = v6;
LABEL_23:
    APSLogErrorAt();
    goto LABEL_13;
  }
  DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  v8 = APTransportParcelMake(0x20uLL, 0, DerivedStorage);
  if ((_DWORD)v8)
  {
    v13 = v8;
    goto LABEL_23;
  }
  if (!a2)
    goto LABEL_8;
  destination = 0u;
  v16 = 0u;
  v9 = CMBlockBufferCopyDataBytes(a2, 0, 0x20uLL, &destination);
  if ((_DWORD)v9)
  {
    v13 = v9;
    goto LABEL_23;
  }
  APTransportParcelSetMessageType((uint64_t)*DerivedStorage, bswap32(v16));
  DerivedStorage[1] = (CFAllocatorRef *)bswap64(*((unint64_t *)&destination + 1));
  *((_DWORD *)DerivedStorage + 4) = bswap32(DWORD1(destination));
  DerivedStorage[3] = (CFAllocatorRef *)bswap64(*(unint64_t *)((char *)&v16 + 4));
  *((_DWORD *)DerivedStorage + 8) = bswap32(HIDWORD(v16));
  if (CMBlockBufferGetDataLength(a2) < 0x21)
    goto LABEL_8;
  DataLength = CMBlockBufferGetDataLength(a2);
  v11 = CMBlockBufferCreateWithBufferReference(a1, a2, 0x20uLL, DataLength - 32, 0, &blockBufferOut);
  if ((_DWORD)v11)
  {
    v13 = v11;
    goto LABEL_23;
  }
  v12 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
  if ((_DWORD)v12)
  {
    v13 = v12;
    goto LABEL_23;
  }
LABEL_8:
  if (gLogCategory_APTransportPackageTCP <= 30
    && (gLogCategory_APTransportPackageTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v13 = 0;
  *a3 = cf;
  cf = 0;
LABEL_13:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t APTransportPackageTCPCreateWithMessageSize(uint64_t a1, size_t a2, _QWORD *a3)
{
  uint64_t v5;
  CFAllocatorRef **DerivedStorage;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
  {
    APSLogErrorAt();
    return 4294894936;
  }
  APTransportPackageGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v8 = v5;
LABEL_13:
    APSLogErrorAt();
    return v8;
  }
  DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  v7 = APTransportParcelMake(0x20uLL, a2, DerivedStorage);
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_13;
  }
  if (gLogCategory_APTransportPackageTCP <= 30
    && (gLogCategory_APTransportPackageTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = 0;
  *a3 = 0;
  return v8;
}

uint64_t APTransportPackageTCPGetHeaderSize(_DWORD *a1)
{
  if (a1)
  {
    *a1 = 32;
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t APTransportPackageTCPGetPayloadSize(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  uint64_t DataPointer;
  uint64_t v4;
  size_t v6;
  char *dataPointerOut;

  v6 = 0;
  dataPointerOut = 0;
  if (a2 && a1)
  {
    DataPointer = CMBlockBufferGetDataPointer(a1, 0, &v6, 0, &dataPointerOut);
    if ((_DWORD)DataPointer)
    {
      v4 = DataPointer;
    }
    else
    {
      if (v6 == 32)
      {
        v4 = 0;
        *a2 = bswap32(*(_DWORD *)dataPointerOut) - 32;
        return v4;
      }
      v4 = 4294894936;
    }
    APSLogErrorAt();
    return v4;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

void tcppackage_Finalize()
{
  void **DerivedStorage;

  DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageTCP <= 30
    && (gLogCategory_APTransportPackageTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *DerivedStorage = 0;
}

__CFString *tcppackage_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportPackageTCP %p>"), a1);
  return Mutable;
}

const void *tcppackage_CopyMessageData()
{
  uint64_t *DerivedStorage;
  const void *MessageData;
  const void *v2;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageData = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  v2 = MessageData;
  if (MessageData)
    CFRetain(MessageData);
  return v2;
}

uint64_t tcppackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  _QWORD **DerivedStorage;

  DerivedStorage = (_QWORD **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(*DerivedStorage, a2);
}

uint64_t tcppackage_GetMessageType()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(*DerivedStorage);
}

uint64_t tcppackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(*DerivedStorage, a2);
}

uint64_t tcppackage_GetReplyToken()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
}

uint64_t tcppackage_SetReplyToken(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(result + 24) = a2;
  return result;
}

CMBlockBufferRef tcppackage_CreateBBufRepresentation()
{
  uint64_t DerivedStorage;
  unsigned int MessageType;
  OpaqueCMBlockBuffer *MessageData;
  int DataLength;
  unsigned int v4;
  CMBlockBufferRef v6;
  _DWORD v7[2];
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  MessageType = APTransportParcelGetMessageType(*(_QWORD *)DerivedStorage);
  MessageData = (OpaqueCMBlockBuffer *)APTransportParcelGetMessageData(*(_QWORD *)DerivedStorage);
  DataLength = CMBlockBufferGetDataLength(MessageData);
  v4 = bswap32(*(_DWORD *)(DerivedStorage + 16));
  v7[0] = bswap32(DataLength + 32);
  v7[1] = v4;
  v8 = bswap64(*(_QWORD *)(DerivedStorage + 8));
  v9 = bswap32(MessageType);
  v10 = bswap64(*(_QWORD *)(DerivedStorage + 24));
  v11 = bswap32(*(_DWORD *)(DerivedStorage + 32));
  APTransportParcelCreateBBufRepresentation(*(_QWORD *)DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v7, &v6);
  return v6;
}

uint64_t tcppackage_SetGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t tcppackage_GetGroupID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t tcppackage_SetPackageType(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t tcppackage_GetPackageType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 16);
}

uint64_t tcppackage_SetReplyStatus(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t tcppackage_GetReplyStatus()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 32);
}

uint64_t APTConnectionListenerGetTypeID()
{
  if (APTConnectionListenerGetTypeID_gAPTConnectionListenerInitOnce != -1)
    dispatch_once_f(&APTConnectionListenerGetTypeID_gAPTConnectionListenerInitOnce, &APTConnectionListenerGetTypeID_gAPTConnectionListenerTypeID, (dispatch_function_t)connectionlistener_getTypeID);
  return APTConnectionListenerGetTypeID_gAPTConnectionListenerTypeID;
}

uint64_t connectionlistener_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTConnectionListenerCreate(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _OWORD *Instance;
  _OWORD *v17;
  dispatch_queue_t v18;
  uint64_t v19;
  char label[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a8 && a3 && a7)
  {
    if (APTConnectionListenerGetTypeID_gAPTConnectionListenerInitOnce != -1)
      dispatch_once_f(&APTConnectionListenerGetTypeID_gAPTConnectionListenerInitOnce, &APTConnectionListenerGetTypeID_gAPTConnectionListenerTypeID, (dispatch_function_t)connectionlistener_getTypeID);
    Instance = (_OWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      v17 = Instance;
      Instance[4] = 0u;
      Instance[5] = 0u;
      Instance[2] = 0u;
      Instance[3] = 0u;
      Instance[1] = 0u;
      SNPrintF();
      v18 = dispatch_queue_create(label, 0);
      *((_QWORD *)v17 + 2) = v18;
      if (v18)
      {
        v19 = 0;
        *((_DWORD *)v17 + 6) = a1;
        *((_DWORD *)v17 + 7) = a2;
        *((_QWORD *)v17 + 4) = a3;
        *((_QWORD *)v17 + 5) = a4;
        *((_QWORD *)v17 + 6) = a5;
        *((_QWORD *)v17 + 7) = a6;
        *((_QWORD *)v17 + 8) = a7;
        *a8 = v17;
      }
      else
      {
        APSLogErrorAt();
        v19 = APSSignalErrorAt();
        CFRelease(v17);
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294895436;
    }
    return v19;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t APTConnectionListenerResume(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1;
  v3 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v2, (dispatch_function_t)connectionlistener_resumeInternal);
  return v3;
}

void connectionlistener_resumeInternal(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 89))
  {
    v4 = -71862;
  }
  else if (*(_BYTE *)(v2 + 88))
  {
    v4 = 0;
  }
  else
  {
    v3 = ServerSocketPairOpen();
    if (v3)
    {
      v5 = v3;
      APSLogErrorAt();
      v4 = v5;
    }
    else
    {
      if (gLogCategory_APTConnectionListener <= 50
        && (gLogCategory_APTConnectionListener != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v4 = 0;
    }
    free(0);
    free(0);
    if (v4)
      APSLogErrorAt();
    else
      *(_BYTE *)(v2 + 88) = 1;
  }
  a1[2] = v4;
}

uint64_t APTConnectionListenerGetListeningPort(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  v5 = 0xFFFFFFFFLL;
  if (a2)
  {
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v4, (dispatch_function_t)connectionlistener_getListeningPortInternal);
    result = HIDWORD(v5);
    if (HIDWORD(v5))
    {
      APSLogErrorAt();
      return HIDWORD(v5);
    }
    else
    {
      *a2 = v5;
    }
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  return result;
}

_DWORD *connectionlistener_getListeningPortInternal(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;

  v1 = result;
  v2 = -71863;
  v3 = *(_QWORD *)result;
  if (*(_BYTE *)(*(_QWORD *)result + 89))
  {
    v2 = -71862;
  }
  else if (*(_BYTE *)(v3 + 88))
  {
    v2 = 0;
    result[2] = *(_DWORD *)(v3 + 24);
  }
  else
  {
    result = (_DWORD *)APSLogErrorAt();
  }
  v1[3] = v2;
  return result;
}

uint64_t APTConnectionListenerInvalidate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1;
  v3 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &v2, (dispatch_function_t)connectionlistener_invalidateInternal);
  return v3;
}

void connectionlistener_invalidateInternal(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 89))
  {
    v3 = -71862;
  }
  else
  {
    connectionlistener_cleanUp(*(_QWORD *)a1);
    *(_BYTE *)(v2 + 89) = 1;
    if (*(_QWORD *)(v2 + 48))
    {
      CFRetain((CFTypeRef)v2);
      APSDispatchAsyncFHelper();
    }
    v3 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
}

void connectionlistener_Finalize(uint64_t a1)
{
  NSObject *v2;

  connectionlistener_cleanUp(a1);
  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void connectionlistener_cleanUp(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 72));
    dispatch_release(v2);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v3 = *(NSObject **)(a1 + 80);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 80));
    dispatch_release(v3);
    *(_QWORD *)(a1 + 80) = 0;
  }
}

void connectionlistener_listenerSocketEventHandler(uint64_t a1)
{
  const void *v1;
  int v2;

  v1 = *(const void **)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 89))
  {
    if (SocketAccept())
    {
      APSLogErrorAt();
      if (gLogCategory_APTConnectionListener <= 90
        && (gLogCategory_APTConnectionListener != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (gLogCategory_APTConnectionListener <= 40
        && (gLogCategory_APTConnectionListener != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v2 = APSNetworkAddressCreateWithSocketAddr();
      if (v2)
      {
        APSLogErrorAt();
      }
      else
      {
        CFRetain(v1);
        CFRetain(0);
        APSDispatchAsyncFHelper();
      }
      if (v2)
        APSLogErrorAt();
    }
  }
}

void connectionlistener_listenerSocketCancelHandler(_DWORD *a1)
{
  int v2;

  v2 = a1[2];
  if ((v2 & 0x80000000) == 0 && close(v2) && *__error())
    __error();
  free(a1);
}

void connectionlistener_deferCallConnectedCallback(CFTypeRef *a1)
{
  ((void (*)(CFTypeRef, CFTypeRef, _QWORD, CFTypeRef))a1[3])(*a1, a1[4], *((unsigned int *)a1 + 2), a1[2]);
  CFRelease(a1[2]);
  CFRelease(*a1);
}

void connectionlistener_deferCallInvalidatedCallback(CFTypeRef *a1)
{
  ((void (*)(CFTypeRef, CFTypeRef))a1[1])(*a1, a1[2]);
  CFRelease(*a1);
}

uint64_t APTransportKeepAliveControllerGetClassID()
{
  if (APTransportKeepAliveControllerGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APTransportKeepAliveControllerGetClassID_sRegisterOnce, &APTransportKeepAliveControllerGetClassID_sClassID, (dispatch_function_t)APTransportKeepAliveControllerGetClassIDCallback);
  return APTransportKeepAliveControllerGetClassID_sClassID;
}

uint64_t APTransportKeepAliveControllerGetClassIDCallback()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef keepAliveController_copyFormattingDesc()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APTransportKeepAliveController]"));
}

uint64_t APTransportConnectionTCPUnbufferedNWCreate(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t *DerivedStorage;
  uint64_t Instance;
  uint64_t v12;
  int Int64Ranged;
  uint64_t Int64;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *initially_inactive;
  dispatch_queue_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char label[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a6)
  {
    APSLogErrorAt();
    return 4294894974;
  }
  APTransportConnectionGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v25 = v9;
LABEL_45:
    APSLogErrorAt();
    return v25;
  }
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (gAPTransportConnectionTCPUnbufferedNWGutsInitOnce != -1)
    dispatch_once_f(&gAPTransportConnectionTCPUnbufferedNWGutsInitOnce, 0, (dispatch_function_t)_APTransportConnectionTCPUnbufferedNWGutsGetTypeID);
  Instance = _CFRuntimeCreateInstance();
  *DerivedStorage = Instance;
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  *(_QWORD *)(Instance + 352) = 0;
  *(_OWORD *)(Instance + 320) = 0u;
  *(_OWORD *)(Instance + 336) = 0u;
  *(_OWORD *)(Instance + 288) = 0u;
  *(_OWORD *)(Instance + 304) = 0u;
  *(_OWORD *)(Instance + 256) = 0u;
  *(_OWORD *)(Instance + 272) = 0u;
  *(_OWORD *)(Instance + 224) = 0u;
  *(_OWORD *)(Instance + 240) = 0u;
  *(_OWORD *)(Instance + 192) = 0u;
  *(_OWORD *)(Instance + 208) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 176) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  v12 = *DerivedStorage;
  *(_QWORD *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 24) = a3;
  *(_BYTE *)(v12 + 28) = 0;
  if (a5)
  {
    Int64Ranged = CFDictionaryGetInt64Ranged();
    Int64 = CFDictionaryGetInt64();
    *(_BYTE *)(v12 + 29) = Int64 != 0;
    if (Int64
      && gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)(v12 + 30) = CFDictionaryGetInt64() != 0;
    if (CFDictionaryGetInt64())
      v15 = *(_BYTE *)(v12 + 29) == 0;
    else
      v15 = 0;
    *(_BYTE *)(v12 + 31) = v15;
    if (CFDictionaryGetInt64())
      v16 = *(_BYTE *)(v12 + 29) == 0;
    else
      v16 = 0;
    *(_BYTE *)(v12 + 32) = v16;
  }
  else
  {
    Int64Ranged = 0;
  }
  v17 = FigSimpleMutexCreate();
  *(_QWORD *)(v12 + 40) = v17;
  if (!v17)
  {
    v25 = 4294894973;
    goto LABEL_45;
  }
  v18 = FigSimpleMutexCreate();
  *(_QWORD *)(v12 + 240) = v18;
  if (!v18)
  {
    v25 = 4294894973;
    goto LABEL_45;
  }
  v19 = APTransportConnectionCopyNWContextForType(Int64Ranged);
  *(_QWORD *)(v12 + 312) = v19;
  if (!v19)
  {
    v25 = 4294894973;
    goto LABEL_45;
  }
  SNPrintF();
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v21 = dispatch_queue_create(label, initially_inactive);
  *(_QWORD *)(v12 + 320) = v21;
  if (!v21)
  {
    v25 = 4294894973;
    goto LABEL_45;
  }
  nw_queue_context_target_dispatch_queue();
  dispatch_activate(*(dispatch_object_t *)(v12 + 320));
  *(_BYTE *)(v12 + 348) = 1;
  v22 = APSFlatQueueCreate();
  if ((_DWORD)v22)
  {
    v25 = v22;
    goto LABEL_45;
  }
  if (*(_BYTE *)(v12 + 32))
  {
    v23 = APSFlatQueueCreate();
    if ((_DWORD)v23)
    {
      v25 = v23;
      goto LABEL_45;
    }
  }
  if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(v12 + 30))
    v24 = 4;
  else
    v24 = 2;
  APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionTCPUnbufferedNW, 0, (uint64_t *)(v12 + 352), v24);
  v25 = 0;
  *a6 = 0;
  return v25;
}

uint64_t tcpunbufnwTrackingWindowItem_Copy(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  const void *v5;

  v5 = *(const void **)(a2 + 8);
  if (v5)
    CFRetain(v5);
  *a3 = *(_OWORD *)a2;
  return 0;
}

uint64_t tcpunbufnwTrackingWindowItem_Free(uint64_t a1, uint64_t a2)
{
  const void *v2;

  v2 = *(const void **)(a2 + 8);
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t tcpunbufnw_Invalidate()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  tcpunbufnwGuts_invalidate(*DerivedStorage);
  return 0;
}

void tcpunbufnw_Finalize()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    tcpunbufnwGuts_invalidate(*DerivedStorage);
    CFRelease((CFTypeRef)*DerivedStorage);
    *DerivedStorage = 0;
  }
}

uint64_t tcpunbufnw_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *);
  uint64_t v11;
  uint64_t Int64;
  NSObject *v13;
  uint64_t v14;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)DerivedStorage + 40));
  if (CFEqual(a2, CFSTR("LastDeliveredPackage")))
  {
    if (*(_BYTE *)(v7 + 32))
    {
      tcpunbufnwGuts_updatePackageTrackingInternal(v7, 0, 0);
      v8 = *(CFTypeRef *)(v7 + 224);
      if (v8)
        v8 = CFRetain(v8);
      v9 = 0;
      *a4 = (uint64_t)v8;
    }
    else
    {
      v9 = 4294954509;
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, CFSTR("MaxPackageSize")))
  {
    v16 = 0;
    v10 = *(uint64_t (**)(uint64_t *))(v7 + 136);
    if (!v10)
    {
      APSLogErrorAt();
      v9 = 4294894969;
      goto LABEL_16;
    }
    v11 = v10(&v16);
    if ((_DWORD)v11)
    {
      v9 = v11;
      goto LABEL_28;
    }
    Int64 = CFNumberCreateInt64();
    *a4 = Int64;
    if (!Int64)
    {
      v9 = 4294894973;
LABEL_28:
      APSLogErrorAt();
      goto LABEL_16;
    }
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  if (CFEqual(a2, CFSTR("LocalNetworkPort")))
  {
    if (!*(_BYTE *)(v7 + 30))
    {
      APSLogErrorAt();
      v9 = 4294894975;
      goto LABEL_16;
    }
    v13 = *(NSObject **)(v7 + 160);
    if (!v13)
    {
      APSLogErrorAt();
      v9 = 4294894968;
      goto LABEL_16;
    }
    nw_listener_get_port(v13);
    v14 = CFNumberCreateInt64();
    *a4 = v14;
    if (!v14)
    {
      v9 = 4294894973;
      goto LABEL_28;
    }
    goto LABEL_15;
  }
  if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = 4294954512;
LABEL_16:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 40));
  return v9;
}

uint64_t tcpunbufnw_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  int HeaderSize;
  uint64_t (*v8)(_QWORD *);
  uint64_t (*v9)(OpaqueCMBlockBuffer *, _DWORD *);
  void *v10;
  void *v11;
  CFTypeID v12;
  int v13;
  const void *v14;
  __int128 v15;
  CFTypeID v16;
  int v17;
  CFTypeID v18;
  CFTypeID v19;
  CFTypeID v20;
  int v21;
  int TrafficClassForSocketQoS;
  CFTypeID v23;
  const void *v24;
  CFTypeID v25;
  int Value;
  unsigned __int8 *v27;
  int v28;
  BOOL v29;
  NSObject *v30;
  int v32;
  _QWORD block[5];
  _OWORD v34[2];
  uint64_t (*v35)(_QWORD *);
  unsigned int v36;

  v36 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)DerivedStorage + 40));
  if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (CFEqual(a2, CFSTR("PackageType")))
  {
    v35 = 0;
    memset(v34, 0, sizeof(v34));
    if (!*(_BYTE *)(v6 + 48))
    {
      if (a3)
      {
        if (CFEqual(a3, CFSTR("RTPBuffered")))
        {
          HeaderSize = APTPackageRTPBufferedGetHeaderSize(v34);
          if (!HeaderSize)
          {
            v8 = APTPackageRTPBufferedGetMaxPayloadSize;
            v9 = APTPackageRTPBufferedGetPayloadSize;
            v10 = APTPackageRTPBufferedCreateWithBBuf;
            v11 = APTPackageRTPBufferedCreate;
LABEL_19:
            *((_QWORD *)&v34[0] + 1) = v11;
            *(_QWORD *)&v34[1] = v10;
            *((_QWORD *)&v34[1] + 1) = v9;
            v35 = v8;
            if (LODWORD(v34[0]))
            {
              v36 = 0;
              v14 = *(const void **)(v6 + 96);
              *(_QWORD *)(v6 + 96) = a3;
              CFRetain(a3);
              if (v14)
                CFRelease(v14);
              v15 = v34[1];
              *(_OWORD *)(v6 + 104) = v34[0];
              *(_OWORD *)(v6 + 120) = v15;
              *(_QWORD *)(v6 + 136) = v35;
              goto LABEL_69;
            }
            v17 = -72322;
            goto LABEL_83;
          }
          v17 = HeaderSize;
        }
        else
        {
          if (!CFEqual(a3, CFSTR("BufferedAPAP")))
          {
            v17 = -72322;
LABEL_30:
            v36 = v17;
            APSLogErrorAt();
            goto LABEL_69;
          }
          v13 = APTransportPackageBufferedAPAPGetHeaderSize(v34);
          if (!v13)
          {
            v8 = APTransportPackageBufferedAPAPGetMaxPayloadSize;
            v9 = APTransportPackageBufferedAPAPGetPayloadSize;
            v10 = APTransportPackageBufferedAPAPCreateWithBBuf;
            v11 = APTransportPackageBufferedAPAPCreate;
            goto LABEL_19;
          }
          v17 = v13;
        }
      }
      else
      {
        v17 = -72322;
      }
LABEL_83:
      APSLogErrorAt();
      goto LABEL_30;
    }
    goto LABEL_89;
  }
  if (CFEqual(a2, CFSTR("RemoteNetworkIPAddress")))
  {
    if (!*(_BYTE *)(v6 + 48))
    {
      if (a3)
      {
        v12 = CFGetTypeID(a3);
        if (v12 == APSNetworkAddressGetTypeID())
        {
          APSNetworkAddressGetSocketAddr();
          *(_OWORD *)(v6 + 56) = v34[0];
          *(_OWORD *)(v6 + 68) = *(_OWORD *)((char *)v34 + 12);
LABEL_28:
          SockAddrSetPort();
          goto LABEL_69;
        }
      }
      goto LABEL_93;
    }
    goto LABEL_89;
  }
  if (CFEqual(a2, CFSTR("RemoteNetworkPort")))
  {
    if (!*(_BYTE *)(v6 + 48))
    {
      if (a3)
      {
        v16 = CFGetTypeID(a3);
        if (v16 == CFNumberGetTypeID())
        {
          *(_DWORD *)(v6 + 84) = CFGetInt64Ranged();
          goto LABEL_28;
        }
      }
LABEL_93:
      APSLogErrorAt();
      v32 = -72322;
      goto LABEL_94;
    }
LABEL_89:
    APSLogErrorAt();
    v32 = -72342;
LABEL_94:
    v36 = v32;
    goto LABEL_69;
  }
  if (CFEqual(a2, CFSTR("BoundInterfaceIndex")))
  {
    if (!*(_BYTE *)(v6 + 48))
    {
      if (a3)
      {
        v18 = CFGetTypeID(a3);
        if (v18 == CFNumberGetTypeID())
        {
          *(_DWORD *)(v6 + 88) = CFGetInt64Ranged();
          goto LABEL_69;
        }
      }
      goto LABEL_93;
    }
    goto LABEL_89;
  }
  if (CFEqual(a2, CFSTR("BoundLocalNetworkPort")))
  {
    if (!*(_BYTE *)(v6 + 30))
      goto LABEL_93;
    if (!*(_BYTE *)(v6 + 48))
    {
      if (a3)
      {
        v19 = CFGetTypeID(a3);
        if (v19 == CFNumberGetTypeID())
        {
          *(_WORD *)(v6 + 92) = CFGetInt64Ranged();
          goto LABEL_69;
        }
      }
      goto LABEL_93;
    }
    goto LABEL_89;
  }
  if (CFEqual(a2, CFSTR("QualityOfService")))
  {
    if (!a3)
      goto LABEL_93;
    v20 = CFGetTypeID(a3);
    if (v20 != CFNumberGetTypeID())
      goto LABEL_93;
    v21 = CFGetInt64Ranged();
    if (*(_DWORD *)(v6 + 200) != v21)
    {
      *(_DWORD *)(v6 + 200) = v21;
      TrafficClassForSocketQoS = APTransportConnectionGetTrafficClassForSocketQoS(v21);
      if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
        && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (TrafficClassForSocketQoS != *(_DWORD *)(v6 + 204))
      {
        *(_DWORD *)(v6 + 204) = TrafficClassForSocketQoS;
        if (*(_QWORD *)(v6 + 176))
          nw_connection_reset_traffic_class();
      }
    }
  }
  else if (CFEqual(a2, CFSTR("BBufBackingAllocator")))
  {
    if (!a3)
      goto LABEL_93;
    v23 = CFGetTypeID(a3);
    if (v23 != CFAllocatorGetTypeID())
      goto LABEL_93;
    if (*(_BYTE *)(v6 + 48))
      goto LABEL_89;
    v24 = *(const void **)(v6 + 144);
    *(_QWORD *)(v6 + 144) = a3;
    CFRetain(a3);
    if (v24)
      CFRelease(v24);
  }
  else if (CFEqual(a2, CFSTR("ShouldReceivePackages")))
  {
    if (!a3)
      goto LABEL_93;
    v25 = CFGetTypeID(a3);
    if (v25 != CFBooleanGetTypeID())
      goto LABEL_93;
    Value = CFBooleanGetValue((CFBooleanRef)a3);
    v27 = (unsigned __int8 *)(v6 + 348);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(Value, v27));
    if (v28)
      v29 = 1;
    else
      v29 = Value == 0;
    if (!v29)
    {
      CFRetain((CFTypeRef)v6);
      v30 = *(NSObject **)(v6 + 320);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __tcpunbufnw_SetProperty_block_invoke;
      block[3] = &__block_descriptor_tmp_16_0;
      block[4] = v6;
      dispatch_async(v30, block);
    }
  }
  else if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
         && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_69:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 40));
  return v36;
}

uint64_t tcpunbufnwGuts_invalidate(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 240));
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  tcpunbufnwGuts_invalidateInternal(a1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 240));
}

void tcpunbufnwGuts_invalidateInternal(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;

  v2 = (unsigned __int8 *)(a1 + 28);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if (!v3)
  {
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if ((*(_DWORD *)(a1 + 232) | 2) != 6)
      tcpunbufnwGuts_updateStatusInternal(a1, 6, 0);
  }
}

void tcpunbufnwGuts_updateStatusInternal(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  void *Int64;

  v4 = *(_DWORD *)(a1 + 232);
  if (v4 == (_DWORD)a2)
    return;
  if (v4 == 4 || v4 == 6)
  {
    APSLogErrorAt();
    return;
  }
  if (a3)
    v7 = 90;
  else
    v7 = 50;
  if (v7 >= gLogCategory_APTransportConnectionTCPUnbufferedNW)
  {
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_11;
      v4 = *(_DWORD *)(a1 + 232);
    }
    APTransportConnectionGetStatusString(v4);
    APTransportConnectionGetStatusString(a2);
    LogPrintF();
  }
LABEL_11:
  *(_DWORD *)(a1 + 232) = a2;
  if ((_DWORD)a2 == 5)
    goto LABEL_20;
  v8 = *(NSObject **)(a1 + 176);
  if (v8)
  {
    nw_connection_cancel(v8);
  }
  else
  {
    v9 = *(NSObject **)(a1 + 168);
    if (v9)
      nw_connection_group_cancel(v9);
    v10 = *(NSObject **)(a1 + 160);
    if (v10)
      nw_listener_cancel(v10);
  }
  if (!a3)
LABEL_20:
    Int64 = 0;
  else
    Int64 = (void *)CFNumberCreateInt64();
  if (tcpunbufnwGuts_callEventCallbackInternal(a1, a2, Int64))
  {
    APSLogErrorAt();
    if (Int64)
      goto LABEL_23;
  }
  else if (Int64)
  {
LABEL_23:
    CFRelease(Int64);
  }
}

uint64_t tcpunbufnwGuts_callEventCallbackInternal(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  uint64_t Int64;
  void *v7;
  const __CFAllocator *v8;
  CFIndex v9;
  CFArrayRef v10;
  CFArrayRef v11;
  uint64_t v12;
  CFArrayRef v13;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  v3 = atomic_load((unsigned __int8 *)(a1 + 28));
  if (v3 || !*(_QWORD *)(a1 + 280))
    return 0;
  Int64 = CFNumberCreateInt64();
  if (Int64)
  {
    v7 = (void *)Int64;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values[0] = v7;
    values[1] = a3;
    if (a3)
      v9 = 2;
    else
      v9 = 1;
    v10 = CFArrayCreate(v8, (const void **)values, v9, MEMORY[0x1E0C9B378]);
    if (v10)
    {
      v11 = v10;
      v12 = CFArrayEnsureCreatedAndAppend();
      if ((_DWORD)v12)
        APSLogErrorAt();
      else
        tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue((const void *)a1, *(NSObject **)(a1 + 296));
      CFRelease(v7);
      v13 = v11;
    }
    else
    {
      v12 = 4294894973;
      APSLogErrorAt();
      v13 = (CFArrayRef)v7;
    }
    CFRelease(v13);
  }
  else
  {
    v12 = 4294894973;
    APSLogErrorAt();
  }
  return v12;
}

void tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue(const void *a1, NSObject *a2)
{
  _QWORD v4[6];

  CFRetain(a1);
  dispatch_retain(a2);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue_block_invoke;
  v4[3] = &__block_descriptor_tmp_9;
  v4[4] = a1;
  v4[5] = a2;
  dispatch_async(a2, v4);
}

void __tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t v3;
  const void *v4;

  pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)(a1 + 32) + 240));
  v2 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 28));
  v3 = *(_QWORD *)(a1 + 32);
  if (!v2)
  {
    if (*(_QWORD *)(v3 + 304))
    {
      if (*(_QWORD *)(v3 + 296) == *(_QWORD *)(a1 + 40))
      {
        CFArrayGetCount(*(CFArrayRef *)(v3 + 304));
        CFArrayApplyBlock();
        v3 = *(_QWORD *)(a1 + 32);
        v4 = *(const void **)(v3 + 304);
        if (v4)
        {
          CFRelease(v4);
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 304) = 0;
          v3 = *(_QWORD *)(a1 + 32);
        }
      }
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 240));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t __tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue_block_invoke_2(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v3;
  uint64_t ValueAtIndex;

  CFArrayGetValueAtIndex(theArray, 0);
  v3 = CFGetInt64();
  ValueAtIndex = FigCFArrayGetValueAtIndex();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 280))(v3, ValueAtIndex, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288));
}

uint64_t tcpunbufnwGuts_updatePackageTrackingInternal(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;

  if (!atomic_load((unsigned __int8 *)(result + 28)))
  {
    v4 = result;
    if (*(_DWORD *)(result + 232) == 5)
    {
      if (a2)
      {
        APSFlatQueueEnqueue();
        *(_DWORD *)(v4 + 216) += a3;
      }
      result = APSFlatQueueIsEmpty();
      if (!(_DWORD)result)
      {
        nw_tcp_get_available_send_buffer(*(nw_protocol_metadata_t *)(v4 + 192));
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return APSFlatQueueDequeueWhileB();
      }
    }
  }
  return result;
}

uint64_t __tcpunbufnwGuts_updatePackageTrackingInternal_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  if (*(_DWORD *)a2 - *(_DWORD *)(a1 + 40) > 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const void **)(v2 + 224);
  v4 = *(const void **)(a2 + 8);
  *(_QWORD *)(v2 + 224) = v4;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
  return 1;
}

void tcpunbufnwGuts_connectionReceivePackages(CFTypeRef cf)
{
  NSObject *v4;
  uint32_t v5;
  _QWORD completion[5];

  if (!atomic_load((unsigned __int8 *)cf + 28) && *((_DWORD *)cf + 82) == 3)
  {
    if (atomic_load((unsigned __int8 *)cf + 348))
    {
      if (!*((_BYTE *)cf + 349))
      {
        *((_BYTE *)cf + 349) = 1;
        CFRetain(cf);
        APTTrafficMetricsMessageReadStarted(*((_QWORD *)cf + 44));
        v4 = *((_QWORD *)cf + 22);
        v5 = *((_DWORD *)cf + 26);
        completion[0] = MEMORY[0x1E0C809B0];
        completion[1] = 0x40000000;
        completion[2] = __tcpunbufnwGuts_connectionReceivePackages_block_invoke;
        completion[3] = &__block_descriptor_tmp_19_0;
        completion[4] = cf;
        nw_connection_receive(v4, v5, v5, completion);
      }
    }
  }
}

void __tcpunbufnwGuts_connectionReceivePackages_block_invoke(uint64_t a1, int a2, nw_content_context_t context, int a4, nw_error_t error)
{
  uint64_t v7;
  OSStatus DataPointer;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  _QWORD completion[5];
  uint32_t maximum_length;
  char *dataPointerOut;

  v7 = *(_QWORD *)(a1 + 32);
  dataPointerOut = 0;
  maximum_length = 0;
  if (tcpunbufnwGuts_connectionHandlePotentialDisconnect(v7, context, a4, error))
  {
    v12 = 0;
  }
  else
  {
    DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v7 + 184), 0, 0, 0, &dataPointerOut);
    if (DataPointer)
    {
      v12 = DataPointer;
    }
    else
    {
      v9 = APSDispatchDataCopyBytes();
      if (v9)
      {
        v12 = v9;
      }
      else
      {
        v10 = (*(uint64_t (**)(_QWORD, uint32_t *))(v7 + 128))(*(_QWORD *)(v7 + 184), &maximum_length);
        if (!v10)
        {
          if (maximum_length)
          {
            CFRetain((CFTypeRef)v7);
            v11 = *(NSObject **)(v7 + 176);
            completion[0] = MEMORY[0x1E0C809B0];
            completion[1] = 0x40000000;
            completion[2] = __tcpunbufnwGuts_connectionHandlePackageHeader_block_invoke;
            completion[3] = &__block_descriptor_tmp_20;
            completion[4] = v7;
            nw_connection_receive(v11, maximum_length, maximum_length, completion);
          }
          else
          {
            tcpunbufnwGuts_connectionHandlePackagePayload(v7, MEMORY[0x1E0C80D00], 0, 1, 0);
          }
          goto LABEL_8;
        }
        v12 = v10;
      }
    }
    APSLogErrorAt();
  }
  v13 = *(_QWORD *)(v7 + 352);
  if (error)
    nw_error_get_error_code(error);
  APTTrafficMetricsMessageReadFinished(v13);
  APTTrafficMetricsMessageProcessed(*(_QWORD *)(v7 + 352));
  if (v12)
    tcpunbufnwGuts_updateStatus(v7, v12);
LABEL_8:
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

BOOL tcpunbufnwGuts_connectionHandlePotentialDisconnect(uint64_t a1, nw_content_context_t context, int a3, nw_error_t error)
{
  int v4;
  int error_code;
  CFErrorRef v8;
  _BOOL8 result;

  v4 = atomic_load((unsigned __int8 *)(a1 + 28));
  if (v4 || *(_DWORD *)(a1 + 328) != 3)
    return 1;
  if (error)
  {
    error_code = nw_error_get_error_code(error);
    v8 = nw_error_copy_cf_error(error);
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 90
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    tcpunbufnwGuts_updateStatus(a1, error_code);
    if (v8)
      CFRelease(v8);
    return 1;
  }
  result = 0;
  if (context)
  {
    if (a3)
    {
      result = nw_content_context_get_is_final(context);
      if (result)
      {
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        tcpunbufnwGuts_updateStatus(a1, 0);
        return 1;
      }
    }
  }
  return result;
}

void __tcpunbufnwGuts_connectionHandlePackageHeader_block_invoke(uint64_t a1, NSObject *a2, NSObject *a3, int a4, NSObject *a5)
{
  tcpunbufnwGuts_connectionHandlePackagePayload(*(_QWORD *)(a1 + 32), a2, a3, a4, a5);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void tcpunbufnwGuts_connectionHandlePackagePayload(uint64_t a1, dispatch_data_t data, NSObject *a3, int a4, NSObject *a5)
{
  size_t size;
  size_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  OSStatus v14;
  int v15;
  uint64_t v16;
  OSStatus v17;
  int v18;
  void *v19;
  NSObject *v20;
  int v21;
  int v22;
  _QWORD block[5];
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;

  cf = 0;
  blockBufferOut = 0;
  if (data)
    size = dispatch_data_get_size(data);
  else
    size = 0;
  v10 = size + *(unsigned int *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 352);
  if (a5)
    nw_error_get_error_code(a5);
  APTTrafficMetricsMessageReadFinished(v11);
  if (!tcpunbufnwGuts_connectionHandlePotentialDisconnect(a1, a3, a4, a5))
  {
    v12 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 144), v10, 0);
    if (v12)
    {
      v13 = v12;
      v14 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 184), 0, *(unsigned int *)(a1 + 104), v12);
      if (v14)
      {
        v22 = v14;
      }
      else
      {
        v15 = APSDispatchDataCopyBytes();
        if (v15)
        {
          v22 = v15;
        }
        else
        {
          v16 = *MEMORY[0x1E0C9AE00];
          v17 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13, v10, *(CFAllocatorRef *)(a1 + 144), 0, 0, v10, 0, &blockBufferOut);
          if (!v17)
          {
            v18 = (*(uint64_t (**)(uint64_t, CMBlockBufferRef, CFTypeRef *))(a1 + 120))(v16, blockBufferOut, &cf);
            if (!v18)
            {
              v19 = (void *)cf;
              pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 240));
              tcpunbufnwGuts_callEventCallbackInternal(a1, 7, v19);
              pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 240));
              APTTrafficMetricsMessageProcessed(*(_QWORD *)(a1 + 352));
              CFRetain((CFTypeRef)a1);
              v20 = *(NSObject **)(a1 + 320);
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 0x40000000;
              block[2] = __tcpunbufnwGuts_connectionHandlePackagePayload_block_invoke;
              block[3] = &__block_descriptor_tmp_23_0;
              block[4] = a1;
              dispatch_async(v20, block);
              goto LABEL_13;
            }
            v21 = v18;
            APSLogErrorAt();
            goto LABEL_24;
          }
          v22 = v17;
        }
      }
      APSLogErrorAt();
      tcpunbufnwGuts_updateStatus(a1, v22);
      CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 144), v13);
      goto LABEL_13;
    }
    APSLogErrorAt();
    v21 = -72323;
LABEL_24:
    tcpunbufnwGuts_updateStatus(a1, v21);
  }
LABEL_13:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
}

uint64_t tcpunbufnwGuts_updateStatus(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 240));
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  tcpunbufnwGuts_updateStatusInternal(a1, 6, a2);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 240));
}

void __tcpunbufnwGuts_connectionHandlePackagePayload_block_invoke(uint64_t a1)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a1 + 32);
  v2[349] = 0;
  tcpunbufnwGuts_connectionReceivePackages(v2);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t tcpunbufnw_Resume()
{
  uint64_t v0;
  OSStatus v2;
  NSObject *v3;
  NSObject *secure_tcp;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  nw_listener_t v9;
  NSObject *address;
  NSObject *v11;
  int v12;
  CFTypeRef v13;
  dispatch_semaphore_t v14;
  uint64_t *v15;
  NSObject *v16;
  dispatch_time_t v17;
  int v18;
  uint64_t *v19;
  const void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t *v24;
  int v25;
  int v26;
  _QWORD v27[5];
  _QWORD handler[5];
  _QWORD v29[5];
  _QWORD configure_quic[6];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  char __str[8];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = &v37;
  v39 = 0x2000000000;
  v40 = 0;
  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v31 = 0;
  v32 = &v31;
  v33 = 0x3000000000;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(v0 + 240));
  pthread_mutex_lock(*(pthread_mutex_t **)(v0 + 40));
  if (*(_BYTE *)(v0 + 48))
    goto LABEL_60;
  if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (atomic_load((unsigned __int8 *)(v0 + 28)))
  {
    APSLogErrorAt();
    secure_tcp = 0;
    v6 = 0;
    v7 = 0;
    v3 = 0;
    v11 = 0;
    v24 = v38;
    v25 = -72326;
    goto LABEL_78;
  }
  if (!*(_QWORD *)(v0 + 96))
  {
    APSLogErrorAt();
    secure_tcp = 0;
    v6 = 0;
    v7 = 0;
    v3 = 0;
    v11 = 0;
    v24 = v38;
    v25 = -72327;
    goto LABEL_78;
  }
  v2 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(unsigned int *)(v0 + 104), (CFAllocatorRef)*MEMORY[0x1E0C9AE10], 0, 0, *(unsigned int *)(v0 + 104), 1u, (CMBlockBufferRef *)(v0 + 184));
  *((_DWORD *)v38 + 6) = v2;
  if (v2)
  {
    APSLogErrorAt();
LABEL_60:
    secure_tcp = 0;
    v6 = 0;
    v7 = 0;
    v3 = 0;
    goto LABEL_65;
  }
  if (*(_DWORD *)(v0 + 88))
  {
    v3 = nw_interface_create_with_index();
    if (!v3)
    {
      APSLogErrorAt();
      secure_tcp = 0;
LABEL_70:
      v6 = 0;
      v7 = 0;
LABEL_76:
      v11 = 0;
      goto LABEL_77;
    }
  }
  else
  {
    v3 = 0;
  }
  v5 = MEMORY[0x1E0C809B0];
  if (!*(_BYTE *)(v0 + 29))
  {
    secure_tcp = nw_parameters_create_secure_tcp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E0CCED20], &__block_literal_global_7);
    if (secure_tcp)
      goto LABEL_18;
LABEL_69:
    APSLogErrorAt();
    goto LABEL_70;
  }
  configure_quic[0] = MEMORY[0x1E0C809B0];
  configure_quic[1] = 0x40000000;
  configure_quic[2] = __tcpunbufnw_Resume_block_invoke;
  configure_quic[3] = &unk_1E8257410;
  configure_quic[4] = &v37;
  configure_quic[5] = v0;
  secure_tcp = nw_parameters_create_quic(configure_quic);
  if (!secure_tcp)
    goto LABEL_69;
  if (*((_DWORD *)v38 + 6))
  {
    APSLogErrorAt();
    v6 = 0;
    v7 = 0;
LABEL_65:
    v11 = 0;
    goto LABEL_46;
  }
LABEL_18:
  nw_parameters_set_context();
  nw_parameters_set_use_p2p();
  nw_parameters_require_interface(secure_tcp, v3);
  if ((*(_BYTE *)(v0 + 24) & 0x10) != 0)
  {
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 30
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    nw_parameters_prohibit_interface_type(secure_tcp, nw_interface_type_cellular);
  }
  if (!*(_BYTE *)(v0 + 30))
  {
    address = nw_endpoint_create_address((const sockaddr *)(v0 + 56));
    v11 = address;
    if (address)
    {
      v6 = nw_connection_create(address, secure_tcp);
      if (v6)
      {
        v12 = tcpunbufnwGuts_handleNewConnectionInternal(v0, v6);
        *((_DWORD *)v38 + 6) = v12;
        if (v12)
        {
          APSLogErrorAt();
          v7 = 0;
          goto LABEL_46;
        }
        v7 = 0;
        goto LABEL_45;
      }
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      v6 = 0;
    }
    v7 = 0;
LABEL_77:
    v24 = v38;
    v25 = -72323;
    goto LABEL_78;
  }
  v8 = *(unsigned __int16 *)(v0 + 92);
  if (*(_WORD *)(v0 + 92))
  {
    *(_QWORD *)__str = 0;
    if (snprintf(__str, 8uLL, "%u", v8) < 1)
    {
      v26 = -6762;
    }
    else
    {
      v9 = nw_listener_create_with_port(__str, secure_tcp);
      if (v9)
      {
        v7 = v9;
        goto LABEL_34;
      }
      v26 = -72323;
    }
    APSLogErrorAt();
    v6 = 0;
    v7 = 0;
    v11 = 0;
    *((_DWORD *)v38 + 6) = v26;
    goto LABEL_46;
  }
  v7 = nw_listener_create(secure_tcp);
  if (!v7)
  {
LABEL_75:
    APSLogErrorAt();
    v6 = 0;
    goto LABEL_76;
  }
LABEL_34:
  v13 = CFRetain((CFTypeRef)v0);
  v32[3] = (uint64_t)v13;
  v14 = dispatch_semaphore_create(0);
  v15 = v32;
  v32[5] = (uint64_t)v14;
  if (!v14)
    goto LABEL_75;
  CFRetain((CFTypeRef)v15[3]);
  dispatch_retain((dispatch_object_t)v32[5]);
  nw_listener_set_queue(v7, *(dispatch_queue_t *)(v0 + 320));
  v29[0] = v5;
  v29[1] = 0x40000000;
  v29[2] = __tcpunbufnw_Resume_block_invoke_3;
  v29[3] = &unk_1E8257478;
  v29[4] = &v31;
  MEMORY[0x1CAA3CE34](v7, v29);
  nw_listener_set_new_connection_limit(v7, 0);
  if (*(_BYTE *)(v0 + 29))
  {
    handler[0] = v5;
    handler[1] = 0x40000000;
    handler[2] = __tcpunbufnw_Resume_block_invoke_4;
    handler[3] = &__block_descriptor_tmp_34_0;
    handler[4] = v0;
    nw_listener_set_new_connection_group_handler(v7, handler);
  }
  else
  {
    v27[0] = v5;
    v27[1] = 0x40000000;
    v27[2] = __tcpunbufnw_Resume_block_invoke_5;
    v27[3] = &__block_descriptor_tmp_36_0;
    v27[4] = v0;
    nw_listener_set_new_connection_handler(v7, v27);
  }
  nw_listener_start(v7);
  v16 = v32[5];
  v17 = dispatch_time(0, 10000000000);
  if (!dispatch_semaphore_wait(v16, v17))
  {
    v18 = *((_DWORD *)v32 + 9);
    *((_DWORD *)v38 + 6) = v18;
    if (v18)
    {
      APSLogErrorAt();
      nw_listener_cancel(v7);
      v6 = 0;
      goto LABEL_65;
    }
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      nw_listener_get_port(v7);
      LogPrintF();
    }
    *(_QWORD *)(v0 + 160) = nw_retain(v7);
    nw_listener_set_new_connection_limit(v7, 1u);
    v6 = 0;
    v11 = 0;
LABEL_45:
    *(_BYTE *)(v0 + 48) = 1;
    goto LABEL_46;
  }
  APSLogErrorAt();
  nw_listener_cancel(v7);
  v6 = 0;
  v11 = 0;
  v24 = v38;
  v25 = -6722;
LABEL_78:
  *((_DWORD *)v24 + 6) = v25;
LABEL_46:
  if (*((_DWORD *)v38 + 6))
  {
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 90
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    tcpunbufnwGuts_invalidateInternal(v0);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v0 + 40));
  pthread_mutex_unlock(*(pthread_mutex_t **)(v0 + 240));
  nw_release(v11);
  nw_release(v3);
  nw_release(secure_tcp);
  nw_release(v6);
  nw_release(v7);
  v19 = v32;
  v20 = (const void *)v32[3];
  if (v20)
  {
    CFRelease(v20);
    v19 = v32;
  }
  v21 = v19[5];
  if (v21)
    dispatch_release(v21);
  v22 = *((unsigned int *)v38 + 6);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v37, 8);
  return v22;
}

uint64_t tcpunbufnw_AddEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  uint64_t *DerivedStorage;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    v11 = 4294894974;
LABEL_9:
    APSLogErrorAt();
    return v11;
  }
  if (a5)
  {
    v11 = 4294894974;
    goto LABEL_9;
  }
  v10 = *DerivedStorage;
  if (!a4)
    a4 = *(NSObject **)(v10 + 320);
  tcpunbufnwGuts_setEventCallback(v10, a2, a3, a4);
  return 0;
}

uint64_t tcpunbufnw_RemoveEventCallback(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    APSLogErrorAt();
    return 4294894974;
  }
  else
  {
    tcpunbufnwGuts_setEventCallback(*DerivedStorage, 0, 0, 0);
    return 0;
  }
}

uint64_t tcpunbufnw_SetReadyToSendCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, unsigned int (*)(_QWORD, CFTypeRef *), CFArrayRef *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)DerivedStorage + 240));
  v7 = tcpunbufnwGuts_readyToSendBatchSlow;
  *(_QWORD *)(v6 + 248) = a2;
  *(_QWORD *)(v6 + 256) = a3;
  if (!a2)
    v7 = 0;
  *(_QWORD *)(v6 + 264) = v7;
  *(_QWORD *)(v6 + 272) = v6;
  pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 240));
  return 0;
}

uint64_t tcpunbufnw_SignalDataAvailable()
{
  _QWORD *v0;
  NSObject *v1;
  _QWORD block[5];

  v0 = *(_QWORD **)CMBaseObjectGetDerivedStorage();
  CFRetain(v0);
  v1 = v0[40];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __tcpunbufnw_SignalDataAvailable_block_invoke;
  block[3] = &__block_descriptor_tmp_68;
  block[4] = v0;
  dispatch_async(v1, block);
  return 0;
}

uint64_t tcpunbufnw_SetReadyToSendBatchCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)DerivedStorage + 240));
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 256) = 0;
  *(_QWORD *)(v6 + 264) = a2;
  *(_QWORD *)(v6 + 272) = a3;
  pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 240));
  return 0;
}

uint64_t tcpunbufnwGuts_handleNewConnectionInternal(uint64_t a1, NSObject *obj)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD handler[5];

  if (*(_QWORD *)(a1 + 176))
  {
    APSLogErrorAt();
    nw_connection_force_cancel(obj);
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v10 = 4294894954;
  }
  else
  {
    *(_QWORD *)(a1 + 176) = nw_retain(obj);
    v4 = nw_connection_copy_parameters(obj);
    v5 = nw_parameters_copy_required_interface(v4);
    v6 = nw_connection_copy_endpoint(obj);
    if (!v5)
      v5 = nw_endpoint_copy_interface();
    v7 = nw_connection_copy_description(obj);
    if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
      && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
    {
      nw_endpoint_get_address(v6);
      if (v5)
        nw_interface_get_name(v5);
      LogPrintF();
    }
    CFRetain((CFTypeRef)a1);
    nw_connection_set_queue(obj, *(dispatch_queue_t *)(a1 + 320));
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = __tcpunbufnwGuts_handleNewConnectionInternal_block_invoke;
    handler[3] = &__block_descriptor_tmp_53;
    handler[4] = a1;
    nw_connection_set_state_changed_handler(obj, handler);
    *(_QWORD *)(a1 + 152) = mach_absolute_time();
    nw_connection_start(obj);
    v8 = *(NSObject **)(a1 + 168);
    if (v8)
      nw_connection_group_cancel(v8);
    v9 = *(NSObject **)(a1 + 160);
    if (v9)
      nw_listener_cancel(v9);
    v10 = 0;
  }
  free(v7);
  nw_release(v4);
  nw_release(v5);
  nw_release(v6);
  return v10;
}

void __tcpunbufnwGuts_handleNewConnectionGroupInternal_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 4)
    CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t __tcpunbufnwGuts_handleNewConnectionGroupInternal_block_invoke_2(uint64_t a1, NSObject *a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)(a1 + 32) + 40));
  tcpunbufnwGuts_handleNewConnectionInternal(*(_QWORD *)(a1 + 32), a2);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(*(_QWORD *)(a1 + 32) + 40));
}

void __tcpunbufnwGuts_handleNewConnectionInternal_block_invoke(uint64_t a1, int a2, nw_error_t error)
{
  uint64_t v4;
  int error_code;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  int v13;
  NSObject *v16;
  uint64_t v17;
  _QWORD enumerate_block[5];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 32);
  if (error)
    error_code = nw_error_get_error_code(error);
  else
    error_code = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  *(_DWORD *)(v4 + 328) = a2;
  if (error_code)
    v6 = 90;
  else
    v6 = 50;
  if (v6 >= gLogCategory_APTransportConnectionTCPUnbufferedNW
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    nw_connection_state_to_string();
    LogPrintF();
  }
  v7 = 0;
  v8 = a2 - 1;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  switch(v8)
  {
    case 0:
      if (!error_code)
        goto LABEL_26;
      goto LABEL_13;
    case 1:
      break;
    case 2:
      if (atomic_load((unsigned __int8 *)(v4 + 28)))
        goto LABEL_26;
      APTTrafficMetricsConnectionFormed(*(_QWORD *)(v4 + 352));
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 240));
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 40));
      if (*(_BYTE *)(v4 + 29))
      {
        v11 = 0;
      }
      else
      {
        v11 = nw_protocol_copy_tcp_definition();
        *(_QWORD *)(v4 + 192) = nw_connection_copy_protocol_metadata(*(nw_connection_t *)(v4 + 176), v11);
      }
      nw_connection_reset_traffic_class();
      v10 = nw_connection_copy_connected_path();
      v9 = nw_path_copy_effective_local_endpoint(v10);
      v7 = nw_path_copy_effective_remote_endpoint(v10);
      enumerate_block[0] = MEMORY[0x1E0C809B0];
      enumerate_block[1] = 0x40000000;
      enumerate_block[2] = __tcpunbufnwGuts_connectionStateChangedHandler_block_invoke;
      enumerate_block[3] = &unk_1E8257540;
      enumerate_block[4] = &v19;
      nw_path_enumerate_interfaces(v10, enumerate_block);
      if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
        && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
      {
        nw_endpoint_get_address(v7);
        nw_endpoint_get_address(v9);
        v16 = v20[3];
        if (v16)
          nw_interface_get_name(v16);
        mach_absolute_time();
        UpTicksToSecondsF();
        LogPrintF();
      }
      tcpunbufnwGuts_updateStatusInternal(v4, 5, 0);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 40));
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 240));
      tcpunbufnwGuts_connectionSendPackages(v4);
      tcpunbufnwGuts_connectionReceivePackages((CFTypeRef)v4);
      break;
    case 3:
LABEL_13:
      if (atomic_load((unsigned __int8 *)(v4 + 28)))
        goto LABEL_26;
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 240));
      pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 40));
      v13 = *(_DWORD *)(v4 + 232);
      if (v13 == 5 || v13 == 0)
      {
        v7 = nw_connection_copy_endpoint(*(nw_connection_t *)(v4 + 176));
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 90
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          nw_endpoint_get_address(v7);
          LogPrintF();
        }
        if (*(_DWORD *)(v4 + 232))
          v17 = 6;
        else
          v17 = 4;
        tcpunbufnwGuts_updateStatusInternal(v4, v17, error_code);
      }
      else
      {
        v7 = 0;
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 40));
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 240));
      goto LABEL_39;
    case 4:
      APTTrafficMetricsConnectionClosed(*(_QWORD *)(v4 + 352));
      CFRelease((CFTypeRef)v4);
LABEL_26:
      v7 = 0;
LABEL_39:
      v9 = 0;
      v10 = 0;
      v11 = 0;
      break;
    default:
      v9 = 0;
      v10 = 0;
      v11 = 0;
      break;
  }
  nw_release(v11);
  nw_release(v10);
  nw_release(v9);
  nw_release(v7);
  nw_release((void *)v20[3]);
  _Block_object_dispose(&v19, 8);
}

uint64_t __tcpunbufnwGuts_connectionStateChangedHandler_block_invoke(uint64_t a1, void *obj)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = nw_retain(obj);
  return 0;
}

void tcpunbufnwGuts_connectionSendPackages(uint64_t a1)
{
  int v2;
  NSObject *v4;
  char v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  _QWORD batch_block[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v2 = atomic_load((unsigned __int8 *)(a1 + 28));
  if (v2 || !APSFlatQueueIsEmpty() || *(_DWORD *)(a1 + 328) != 3 || !*(_BYTE *)(a1 + 332))
  {
    v5 = 0;
    goto LABEL_13;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 240));
  if (atomic_load((unsigned __int8 *)(a1 + 28)))
    goto LABEL_9;
  if (!*(_QWORD *)(a1 + 264))
  {
LABEL_11:
    v5 = 1;
    goto LABEL_12;
  }
  v4 = *(NSObject **)(a1 + 176);
  batch_block[0] = MEMORY[0x1E0C809B0];
  batch_block[1] = 0x40000000;
  batch_block[2] = __tcpunbufnwGuts_connectionSendPackages_block_invoke;
  batch_block[3] = &unk_1E8257588;
  batch_block[4] = &v11;
  batch_block[5] = &v15;
  batch_block[6] = a1;
  nw_connection_batch(v4, batch_block);
  if (*((_DWORD *)v16 + 6))
  {
    APSLogErrorAt();
    goto LABEL_9;
  }
  if (!v12[3])
  {
    APTTrafficMetricsConsumedAllData(*(_QWORD *)(a1 + 352));
    goto LABEL_11;
  }
LABEL_9:
  v5 = 0;
LABEL_12:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 240));
LABEL_13:
  v6 = v16;
  v7 = *((_DWORD *)v16 + 6);
  if ((v5 & 1) != 0 || v7)
  {
    if (v7)
      v8 = 90;
    else
      v8 = 30;
    if (v8 >= gLogCategory_APTransportConnectionTCPUnbufferedNW)
    {
      if (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || (v9 = _LogCategory_Initialize(), v6 = v16, v9))
      {
        LogPrintF();
        v6 = v16;
      }
    }
    *(_BYTE *)(a1 + 332) = 0;
    v7 = *((_DWORD *)v6 + 6);
  }
  *(_DWORD *)(a1 + 344) = v7;
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void __tcpunbufnwGuts_connectionSendPackages_block_invoke(_QWORD *a1)
{
  CFIndex Count;
  CFIndex v3;
  NSObject *v4;
  const void *ValueAtIndex;
  uint64_t (*v6)(const void *);
  uint64_t v7;
  OpaqueCMBlockBuffer *v8;
  size_t DataLength;
  size_t v10;
  uint64_t v11;
  uint64_t (*v12)(const void *);
  int v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  _QWORD completion[7];
  int v20;
  dispatch_data_t content;
  CFArrayRef theArray;

  content = 0;
  theArray = 0;
  APTTrafficMetricsRequestDataStarted(*(_QWORD *)(a1[6] + 352));
  (*(void (**)(_QWORD, _QWORD, _QWORD, CFArrayRef *))(a1[6] + 264))(*(_QWORD *)(a1[6] + 272), *(unsigned int *)(a1[6] + 344), *(_QWORD *)(a1[6] + 112), &theArray);
  APTTrafficMetricsRequestDataFinished(*(_QWORD *)(a1[6] + 352));
  Count = (CFIndex)theArray;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = Count;
  if (*(uint64_t *)(*(_QWORD *)(a1[4] + 8) + 24) < 1)
  {
LABEL_27:
    v8 = 0;
  }
  else
  {
    v3 = 0;
    v4 = *MEMORY[0x1E0CCECE8];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
      v6 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (!v6 || (v7 = v6(ValueAtIndex)) == 0)
      {
        APSLogErrorAt();
        v8 = 0;
        v17 = *(_QWORD *)(a1[5] + 8);
        v18 = -72323;
LABEL_29:
        *(_DWORD *)(v17 + 24) = v18;
        goto LABEL_30;
      }
      v8 = (OpaqueCMBlockBuffer *)v7;
      *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = APSDispatchDataCreateWithBlockBuffer();
      if (*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
        break;
      DataLength = CMBlockBufferGetDataLength(v8);
      if (HIDWORD(DataLength))
      {
        APSLogErrorAt();
        v17 = *(_QWORD *)(a1[5] + 8);
        v18 = -72322;
        goto LABEL_29;
      }
      v10 = DataLength;
      v20 = DataLength;
      *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = APSFlatQueueEnqueue();
      if (*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
        break;
      v11 = a1[6];
      if (*(_BYTE *)(v11 + 31))
      {
        v12 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
        if (v12)
          v13 = v12(ValueAtIndex);
        else
          v13 = 0;
        v14 = v13 == 0;
        v11 = a1[6];
      }
      else
      {
        v14 = 0;
      }
      if (*(unsigned __int8 *)(v11 + 333) != v14)
      {
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        nw_tcp_set_no_push();
        v11 = a1[6];
        *(_BYTE *)(v11 + 333) = v14;
      }
      if (!v3)
      {
        APTTrafficMetricsSendStarted(*(_QWORD *)(v11 + 352));
        v11 = a1[6];
      }
      CFRetain((CFTypeRef)v11);
      CFRetain(ValueAtIndex);
      v15 = a1[6];
      v16 = *(NSObject **)(v15 + 176);
      completion[0] = MEMORY[0x1E0C809B0];
      completion[1] = 0x40000000;
      completion[2] = __tcpunbufnwGuts_connectionSendPackages_block_invoke_2;
      completion[3] = &__block_descriptor_tmp_64;
      completion[4] = v15;
      completion[5] = ValueAtIndex;
      completion[6] = v10;
      nw_connection_send(v16, content, v4, 1, completion);
      CFRelease(v8);
      if (content)
      {
        dispatch_release(content);
        content = 0;
      }
      if (++v3 >= *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
        goto LABEL_27;
    }
    APSLogErrorAt();
  }
LABEL_30:
  if (theArray)
    CFRelease(theArray);
  if (v8)
    CFRelease(v8);
  if (content)
    dispatch_release(content);
}

void __tcpunbufnwGuts_connectionSendPackages_block_invoke_2(uint64_t *a1, nw_error_t error)
{
  uint64_t v4;
  int error_code;
  uint64_t v6;

  if (!atomic_load((unsigned __int8 *)(a1[4] + 28)))
  {
    v4 = a1[4];
    if (*(_DWORD *)(v4 + 328) == 3)
    {
      if (error)
      {
        error_code = nw_error_get_error_code(error);
        v4 = a1[4];
      }
      else
      {
        error_code = 0;
      }
      *(_DWORD *)(v4 + 344) = error_code;
      APSFlatQueueDequeue();
      v6 = a1[4];
      if (*(_DWORD *)(v6 + 344))
      {
        if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 90
          && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      else if (*(_BYTE *)(v6 + 32))
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v6 + 40));
        tcpunbufnwGuts_updatePackageTrackingInternal(a1[4], a1[5], a1[6]);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1[4] + 40));
      }
      APTTrafficMetricsSendFinished(*(_QWORD *)(a1[4] + 352));
      if (APSFlatQueueIsEmpty())
      {
        tcpunbufnwGuts_connectionSendPackages(a1[4]);
      }
      else
      {
        APSFlatQueuePeek();
        APTTrafficMetricsSendStarted(*(_QWORD *)(a1[4] + 352));
      }
    }
  }
  CFRelease((CFTypeRef)a1[4]);
  CFRelease((CFTypeRef)a1[5]);
}

uint64_t tcpunbufnwGuts_setEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  const __CFArray *v8;
  const void *v9;
  NSObject *v10;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 240));
  if (a3)
  {
    if (a4)
    {
      if (*(NSObject **)(a1 + 296) != a4)
      {
        v8 = *(const __CFArray **)(a1 + 304);
        if (v8)
        {
          if (CFArrayGetCount(v8) >= 1)
            tcpunbufnwGuts_drainEventQueueAsyncOnCallbackQueue((const void *)a1, a4);
        }
      }
    }
  }
  else
  {
    v9 = *(const void **)(a1 + 304);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 304) = 0;
    }
  }
  v10 = *(NSObject **)(a1 + 296);
  if (v10)
    dispatch_release(v10);
  if (a4)
    dispatch_retain(a4);
  *(_QWORD *)(a1 + 280) = a3;
  *(_QWORD *)(a1 + 288) = a2;
  *(_QWORD *)(a1 + 296) = a4;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 240));
}

void tcpunbufnwGuts_readyToSendBatchSlow(uint64_t a1, uint64_t a2, unsigned int (*a3)(_QWORD, CFTypeRef *), CFArrayRef *a4)
{
  const __CFAllocator *v7;
  CFArrayRef v8;
  CFTypeRef cf;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  cf = 0;
  *a4 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a3(*MEMORY[0x1E0C9AE00], &cf))
    goto LABEL_7;
  (*(void (**)(_QWORD, CFTypeRef *, uint64_t))(a1 + 248))(*(_QWORD *)(a1 + 256), &cf, a2);
  if (!cf)
    return;
  values[0] = (void *)cf;
  v8 = CFArrayCreate(v7, (const void **)values, 1, MEMORY[0x1E0C9B378]);
  *a4 = v8;
  if (!v8)
LABEL_7:
    APSLogErrorAt();
  if (cf)
    CFRelease(cf);
}

uint64_t _APTransportConnectionTCPUnbufferedNWGutsGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPTransportConnectionTCPUnbufferedNWGutsTypeID = result;
  return result;
}

void _APTransportConnectionTCPUnbufferedNWGutsFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;

  v2 = *(const void **)(a1 + 352);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 352) = 0;
  }
  FigSimpleMutexDestroy();
  v3 = *(const void **)(a1 + 96);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 144);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 208);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 224);
  if (v6)
    CFRelease(v6);
  nw_release(*(void **)(a1 + 160));
  nw_release(*(void **)(a1 + 168));
  nw_release(*(void **)(a1 + 176));
  v7 = *(const void **)(a1 + 184);
  if (v7)
    CFRelease(v7);
  nw_release(*(void **)(a1 + 192));
  FigSimpleMutexDestroy();
  v8 = *(NSObject **)(a1 + 296);
  if (v8)
    dispatch_release(v8);
  v9 = *(const void **)(a1 + 304);
  if (v9)
    CFRelease(v9);
  v10 = *(NSObject **)(a1 + 320);
  if (v10)
    dispatch_release(v10);
  nw_release(*(void **)(a1 + 312));
  v11 = *(const void **)(a1 + 336);
  if (v11)
    CFRelease(v11);
  if (gLogCategory_APTransportConnectionTCPUnbufferedNW <= 50
    && (gLogCategory_APTransportConnectionTCPUnbufferedNW != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t APBrokerGroupGetTypeID()
{
  if (gAPBrokerGroupInitOnce != -1)
    dispatch_once_f(&gAPBrokerGroupInitOnce, 0, (dispatch_function_t)_APBrokerGroupGetTypeID);
  return gAPBrokerGroupTypeID;
}

uint64_t _APBrokerGroupGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPBrokerGroupTypeID = result;
  return result;
}

uint64_t APBrokerGroupCreate(const void *a1, CFTypeRef *a2)
{
  _OWORD *Instance;
  _QWORD *v5;
  uint64_t v6;
  dispatch_queue_t v7;
  dispatch_queue_t v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  uint64_t v12;
  char label[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)label = 0u;
  v15 = 0u;
  if (a2 && a1)
  {
    if (gAPBrokerGroupInitOnce != -1)
      dispatch_once_f(&gAPBrokerGroupInitOnce, 0, (dispatch_function_t)_APBrokerGroupGetTypeID);
    Instance = (_OWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      v5 = Instance;
      Instance[6] = 0u;
      Instance[7] = 0u;
      Instance[4] = 0u;
      Instance[5] = 0u;
      Instance[2] = 0u;
      Instance[3] = 0u;
      Instance[1] = 0u;
      *((_QWORD *)Instance + 2) = CFRetain(a1);
      v6 = FigSimpleMutexCreate();
      v5[3] = v6;
      if (!v6)
        goto LABEL_20;
      SNPrintF();
      v7 = dispatch_queue_create(label, 0);
      v5[12] = v7;
      if (!v7)
        goto LABEL_20;
      SNPrintF();
      v8 = dispatch_queue_create(label, 0);
      v5[13] = v8;
      if (!v8)
        goto LABEL_20;
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v5[5] = Mutable;
      if (Mutable
        && (v11 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v5[7] = v11) != 0))
      {
        *a2 = CFRetain(v5);
        if (gLogCategory_APBrokerGroup <= 50
          && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v12 = 0;
      }
      else
      {
LABEL_20:
        APSLogErrorAt();
        v12 = 4294960568;
      }
      CFRelease(v5);
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v12;
}

uint64_t APBrokerGroupInvalidate(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  _APBrokerGroupSetDelegateInternal(a1, 0, 0);
  v2 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___APBrokerGroupStopReceiverPollingInternal_block_invoke;
  block[3] = &__block_descriptor_tmp_66;
  block[4] = a1;
  dispatch_sync(v2, block);
  *(_BYTE *)(a1 + 32) = 1;
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
}

void _APBrokerGroupSetDelegateInternal(uint64_t a1, CFTypeRef cf, _QWORD *a3)
{
  const void *v6;
  CFTypeRef v7;

  v6 = *(const void **)(a1 + 80);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(a1 + 80) = 0;
  ++*(_DWORD *)(a1 + 88);
  if (a3)
  {
    if (cf)
      v7 = CFRetain(cf);
    else
      v7 = 0;
    *(_QWORD *)(a1 + 80) = v7;
    *(_QWORD *)(a1 + 72) = *a3;
  }
}

uint64_t APBrokerGroupGetGroupID(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

CFDictionaryRef APBrokerGroupCopyReceivers(uint64_t a1, int *a2)
{
  CFDictionaryRef Copy;
  int v5;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(a1 + 56));
  if (Copy)
  {
    v5 = 0;
  }
  else
  {
    APSLogErrorAt();
    v5 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  if (a2)
    *a2 = v5;
  return Copy;
}

BOOL APBrokerGroupIsEmpty(uint64_t a1)
{
  _BOOL8 v2;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  v2 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40)) == 0;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  return v2;
}

uint64_t APBrokerGroupSetDelegate(uint64_t a1, const void *a2, _QWORD *a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  _APBrokerGroupSetDelegateInternal(a1, a2, a3);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  return 0;
}

uint64_t APBrokerGroupAddOrUpdateBroker(uint64_t a1, const void *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *value;
  CFTypeRef cf1;
  void *key;

  cf1 = 0;
  key = 0;
  value = 0;
  v4 = APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a2, &key, &cf1);
  if ((_DWORD)v4)
  {
    v8 = v4;
    APSLogErrorAt();
    goto LABEL_24;
  }
  v5 = *(CFTypeRef *)(a1 + 16);
  if (cf1 != v5 && (!cf1 || !v5 || !CFEqual(cf1, v5)))
  {
    APSLogErrorAt();
    v8 = 4294960591;
    goto LABEL_24;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), key);
  if (v6)
  {
    v7 = (uint64_t)v6;
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = APBrokerUpdate(v7, a2);
    if ((_DWORD)v8)
    {
      APSLogErrorAt();
      goto LABEL_22;
    }
LABEL_20:
    if (!*(_QWORD *)(a1 + 48))
    {
      *(_QWORD *)(a1 + 48) = CFRetain(key);
      _APBrokerDoReceiverPollingIfNecessary(a1, 5);
    }
    goto LABEL_22;
  }
  v9 = APBrokerCreate(a2, (CFTypeRef *)&value);
  v10 = value;
  if (value)
  {
    v8 = v9;
    if (gLogCategory_APBrokerGroup <= 30)
    {
      if (gLogCategory_APBrokerGroup != -1 || (v11 = _LogCategory_Initialize(), v10 = value, v11))
      {
        LogPrintF();
        v10 = value;
      }
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), key, v10);
    goto LABEL_20;
  }
  APSLogErrorAt();
  v8 = 4294960568;
LABEL_22:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  if (value)
    CFRelease(value);
LABEL_24:
  if (cf1)
    CFRelease(cf1);
  if (key)
    CFRelease(key);
  return v8;
}

void _APBrokerDoReceiverPollingIfNecessary(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 104);
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___APBrokerDoReceiverPollingIfNecessary_block_invoke;
    v3[3] = &__block_descriptor_tmp_68_0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_sync(v2, v3);
  }
}

uint64_t APBrokerGroupRemoveBroker(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  const void *Value;
  const void *v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v11;
  const void *v12;

  v11 = 0;
  v12 = 0;
  v3 = APBrokerCopyBrokerInfoFromBonjourInfo(a2, &v12, &v11);
  if (!(_DWORD)v3)
  {
    v4 = *(CFTypeRef *)(a1 + 16);
    if (v11 != v4 && (!v11 || !v4 || !CFEqual(v11, v4)))
    {
      APSLogErrorAt();
      v7 = 4294960591;
      goto LABEL_27;
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v12);
    if (!Value)
      goto LABEL_26;
    v6 = Value;
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = v11;
    v9 = *(CFTypeRef *)(a1 + 48);
    if (v11 != v9)
    {
      if (!v11 || !v9 || !CFEqual(v11, v9))
      {
LABEL_19:
        APBrokerInvalidate(v6);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v12);
        if (!*(_QWORD *)(a1 + 48))
        {
          CFDictionaryApplyBlock();
          if (!*(_QWORD *)(a1 + 48))
          {
            if (gLogCategory_APBrokerGroup <= 30
              && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            _APBrokerGroupRemoveAllReceivers(a1);
          }
        }
LABEL_26:
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
        v7 = 0;
        goto LABEL_27;
      }
      v8 = *(CFTypeRef *)(a1 + 48);
    }
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 48) = 0;
    }
    goto LABEL_19;
  }
  v7 = v3;
  APSLogErrorAt();
LABEL_27:
  if (v11)
    CFRelease(v11);
  if (v12)
    CFRelease(v12);
  return v7;
}

void _APBrokerGroupRemoveAllReceivers(uint64_t a1)
{
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 56)) >= 1)
  {
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 56));
    _APBrokerGroupFireReceiversChanged(a1);
  }
}

void APBrokerGroupAuthenticate(uint64_t a1, const void *a2, void *aBlock)
{
  int v6;
  void *v7;
  NSObject *v8;
  CFTypeRef v9;
  void (*v10[8])(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v11[6];

  v6 = gLogCategory_APBrokerGroup;
  if (gLogCategory_APBrokerGroup <= 50)
  {
    if (gLogCategory_APBrokerGroup == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_9;
      v6 = gLogCategory_APBrokerGroup;
    }
    if (v6 == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
LABEL_9:
  v7 = _Block_copy(aBlock);
  v8 = *(NSObject **)(a1 + 96);
  dispatch_retain(v8);
  v9 = CFRetain(*(CFTypeRef *)(a1 + 16));
  if (a2)
    CFRetain(a2);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = __APBrokerGroupAuthenticate_block_invoke;
  v11[3] = &__block_descriptor_tmp_12_1;
  v11[4] = a1;
  v11[5] = a2;
  v10[0] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v10[1] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))0x40000000;
  v10[2] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))__APBrokerGroupAuthenticate_block_invoke_2;
  v10[3] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))&unk_1E82576C0;
  v10[4] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v7;
  v10[5] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v8;
  v10[6] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v9;
  v10[7] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))a2;
  _APBrokerGroupCallAllBrokers(a1, v11, v10);
}

void _APBrokerGroupCallAllBrokers(uint64_t a1, const void *a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  CFMutableSetRef Mutable;
  void *v10;
  void *v11;

  v6 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040425D96D4uLL);
  if (v6)
  {
    v7 = v6;
    *v6 = a1;
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v7[1] = v8;
    if (v8
      && (Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]),
          (v7[4] = Mutable) != 0)
      && (v10 = _Block_copy(a2), (v7[2] = v10) != 0)
      && (v11 = _Block_copy(a3), (v7[3] = v11) != 0))
    {
      _APBrokerGroupCallNextBroker(a1, (uint64_t)v7);
    }
    else
    {
      APSLogErrorAt();
      a3[2](a3, a1, 4294960568, 0);
      _APBrokerGroupFreeOperationData(v7);
    }
  }
  else
  {
    APSLogErrorAt();
    a3[2](a3, a1, 4294960568, 0);
  }
}

void APBrokerGroupGetInfo(uint64_t a1, void *aBlock)
{
  void *v4;
  NSObject *v5;
  CFTypeRef v6;
  void (*v7[7])(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v8[5];

  if (gLogCategory_APBrokerGroup <= 50 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v4 = _Block_copy(aBlock);
  v5 = *(NSObject **)(a1 + 96);
  dispatch_retain(v5);
  v6 = CFRetain(*(CFTypeRef *)(a1 + 16));
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __APBrokerGroupGetInfo_block_invoke;
  v8[3] = &__block_descriptor_tmp_18;
  v8[4] = a1;
  v7[0] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v7[1] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))0x40000000;
  v7[2] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))__APBrokerGroupGetInfo_block_invoke_2;
  v7[3] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))&unk_1E8257730;
  v7[4] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v4;
  v7[5] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v5;
  v7[6] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v6;
  _APBrokerGroupCallAllBrokers(a1, v8, v7);
}

void APBrokerGroupResolveReceiverDNSName(uint64_t a1, const void *a2, void (**a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  const void *Value;
  CFTypeRef v7;
  uint64_t ReceiverGroupUUID;
  const void *v9;
  uint64_t v10;
  void *v11;
  void (*v12)(_QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v13;
  void (*v14[8])(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD v15[7];

  if (gLogCategory_APBrokerGroup <= 50 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
  {
    if (a2)
      IsAppleInternalBuild();
    LogPrintF();
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  if (!Value)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
LABEL_14:
    APSLogErrorAt();
    v10 = 4294960587;
    if (!a2)
    {
LABEL_16:
      a3[2](a3, v10, 0, 0, 0);
      return;
    }
LABEL_15:
    CFRelease(a2);
    goto LABEL_16;
  }
  v7 = CFRetain(Value);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  if (!v7)
    goto LABEL_14;
  ReceiverGroupUUID = APBrokeredReceiverGetReceiverGroupUUID((uint64_t)v7);
  if (!ReceiverGroupUUID)
  {
    v10 = 4294960587;
LABEL_24:
    APSLogErrorAt();
    if (a2)
      CFRelease(a2);
    a2 = v7;
    goto LABEL_15;
  }
  v9 = (const void *)ReceiverGroupUUID;
  if (gLogCategory_APBrokerGroup <= 30 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v11 = _Block_copy(a3);
  if (!v11)
  {
    v10 = 4294960568;
    goto LABEL_24;
  }
  v12 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v11;
  v13 = *(NSObject **)(a1 + 96);
  dispatch_retain(v13);
  if (a2)
    CFRetain(a2);
  CFRetain(v9);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = __APBrokerGroupResolveReceiverDNSName_block_invoke;
  v15[3] = &__block_descriptor_tmp_24_0;
  v15[4] = a1;
  v15[5] = v9;
  v15[6] = a2;
  v14[0] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
  v14[1] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))0x40000000;
  v14[2] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))__APBrokerGroupResolveReceiverDNSName_block_invoke_2;
  v14[3] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))&unk_1E82577A0;
  v14[4] = v12;
  v14[5] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v13;
  v14[6] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))a2;
  v14[7] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v9;
  _APBrokerGroupCallAllBrokers(a1, v15, v14);
  CFRelease(v7);
}

uint64_t APBrokerGroupStartReceiverPolling(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  _QWORD v12[5];

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v2 = *(NSObject **)(a1 + 104);
  v3 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APBrokerGroupStartReceiverPolling_block_invoke;
  block[3] = &unk_1E8257828;
  block[4] = &v8;
  block[5] = a1;
  dispatch_sync(v2, block);
  if (*((_DWORD *)v9 + 6))
  {
    v4 = *(NSObject **)(a1 + 104);
    v12[0] = v3;
    v12[1] = 0x40000000;
    v12[2] = ___APBrokerGroupStopReceiverPollingInternal_block_invoke;
    v12[3] = &__block_descriptor_tmp_66;
    v12[4] = a1;
    dispatch_sync(v4, v12);
    v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    v5 = 0;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t APBrokerGroupStopReceiverPolling(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  v2 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___APBrokerGroupStopReceiverPollingInternal_block_invoke;
  block[3] = &__block_descriptor_tmp_66;
  block[4] = a1;
  dispatch_sync(v2, block);
  _APBrokerGroupRemoveAllReceivers(a1);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
}

void _APBrokerGroupFinalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;

  if (gLogCategory_APBrokerGroup <= 50 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(NSObject **)(a1 + 120);
    if (v2)
    {
      dispatch_release(v2);
      *(_QWORD *)(a1 + 120) = 0;
    }
    v3 = *(const void **)(a1 + 80);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 80) = 0;
    }
    v4 = *(NSObject **)(a1 + 104);
    if (v4)
    {
      dispatch_release(v4);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v5 = *(NSObject **)(a1 + 96);
    if (v5)
    {
      dispatch_release(v5);
      *(_QWORD *)(a1 + 96) = 0;
    }
    v6 = *(const void **)(a1 + 56);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v7 = *(const void **)(a1 + 48);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v8 = *(const void **)(a1 + 40);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 40) = 0;
    }
    if (*(_QWORD *)(a1 + 24))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(a1 + 24) = 0;
    }
    v9 = *(const void **)(a1 + 16);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  else
  {
    v10 = FatalErrorF();
    _APBrokerGroupFireReceiversChanged(v10);
  }
}

void _APBrokerGroupFireReceiversChanged(uint64_t a1)
{
  uint64_t v1;
  int v3;
  const void *v4;
  CFTypeRef v5;
  NSObject *v6;
  _QWORD v7[7];
  int v8;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v3 = *(_DWORD *)(a1 + 88);
    v4 = *(const void **)(a1 + 80);
    if (v4)
      v5 = CFRetain(v4);
    else
      v5 = 0;
    CFRetain((CFTypeRef)a1);
    v6 = *(NSObject **)(a1 + 96);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___APBrokerGroupFireReceiversChanged_block_invoke;
    v7[3] = &__block_descriptor_tmp_36_1;
    v8 = v3;
    v7[4] = a1;
    v7[5] = v1;
    v7[6] = v5;
    dispatch_async(v6, v7);
  }
}

void _APBrokerGroupCallNextBroker(uint64_t a1, uint64_t a2)
{
  const __CFSet *v4;
  const void *v5;
  int v6;
  uint64_t *v7;
  const void *v8;
  const void *Value;
  CFTypeRef v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[12];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (gLogCategory_APBrokerGroup <= 30 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v4 = *(const __CFSet **)(a2 + 32);
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 24));
  v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    v6 = CFSetContainsValue(v4, v5);
    v7 = v16;
    if (!v6)
      v16[3] = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v7 = v16;
  }
  v8 = (const void *)v7[3];
  if (v8)
    goto LABEL_11;
  v14[6] = MEMORY[0x1E0C809B0];
  v14[7] = 0x40000000;
  v14[8] = ___APBrokerGroupCopyNextBroker_block_invoke;
  v14[9] = &unk_1E82578F0;
  v14[10] = &v15;
  v14[11] = v4;
  CFDictionaryApplyBlock();
  v8 = (const void *)v16[3];
  if (v8)
  {
LABEL_11:
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v8);
    if (Value)
    {
      v10 = CFRetain(Value);
      if (v10)
      {
        v11 = v10;
        CFSetAddValue(v4, (const void *)v16[3]);
        goto LABEL_16;
      }
    }
    APSLogErrorAt();
  }
  v11 = 0;
LABEL_16:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 24));
  _Block_object_dispose(&v15, 8);
  if (v11)
  {
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 16);
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 0x40000000;
      v14[2] = ___APBrokerGroupCallNextBroker_block_invoke;
      v14[3] = &__block_descriptor_tmp_41;
      v14[4] = v12;
      v14[5] = a2;
      (*(void (**)(uint64_t, uint64_t, const void *, uint64_t, _QWORD *))(v13 + 16))(v13, a1, v11, a2 + 40, v14);
    }
    else
    {
      APSLogErrorAt();
      *(_DWORD *)(a2 + 44) = -6728;
      _APBrokerGroupDoneCallingBrokers(a1, a2);
    }
    CFRelease(v11);
  }
  else
  {
    if (gLogCategory_APBrokerGroup <= 30
      && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    _APBrokerGroupDoneCallingBrokers(a1, a2);
  }
}

void _APBrokerGroupFreeOperationData(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  v3 = (const void *)a1[2];
  if (v3)
  {
    _Block_release(v3);
    a1[2] = 0;
  }
  v4 = (const void *)a1[3];
  if (v4)
  {
    _Block_release(v4);
    a1[3] = 0;
  }
  v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
  free(a1);
}

void _APBrokerGroupDoneCallingBrokers(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;

  if (CFSetGetCount(*(CFSetRef *)(a2 + 32)))
  {
    v4 = *(unsigned int *)(a2 + 44);
    if (*(_BYTE *)(a2 + 40))
      v5 = 0;
    else
      v5 = (_DWORD)v4 == 0;
    if (!v5)
      goto LABEL_13;
    if (gLogCategory_APBrokerGroup > 60)
    {
      v4 = 4294960587;
      goto LABEL_17;
    }
    if (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize())
      LogPrintF();
  }
  v4 = 4294960587;
LABEL_13:
  if (gLogCategory_APBrokerGroup <= 30 && (gLogCategory_APBrokerGroup != -1 || _LogCategory_Initialize()))
  {
    CFSetGetCount(*(CFSetRef *)(a2 + 32));
    LogPrintF();
  }
LABEL_17:
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24), a1, v4, *(_QWORD *)(a2 + 48));
  _APBrokerGroupFreeOperationData((_QWORD *)a2);
}

uint64_t APTransportConnectionTCPUnbufferedCreate(uint64_t a1, const void *a2, int a3, int a4, const __CFDictionary *a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t DerivedStorage;
  CFTypeRef v13;
  const void *Value;
  const void *TypedValue;
  uint64_t v16;
  dispatch_queue_t v17;
  dispatch_queue_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  CMTime v23;
  char label[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    APTransportConnectionGetClassID();
    v11 = CMDerivedObjectCreate();
    if ((_DWORD)v11)
    {
      v21 = v11;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a2)
        v13 = CFRetain(a2);
      else
        v13 = 0;
      *(_QWORD *)(DerivedStorage + 16) = v13;
      *(_DWORD *)(DerivedStorage + 56) = a3;
      *(_DWORD *)(DerivedStorage + 60) = 5;
      Value = CFDictionaryGetValue(a5, CFSTR("ReadyToSendCallbackQueuePool"));
      if (Value)
        Value = CFRetain(Value);
      *(_QWORD *)(DerivedStorage + 64) = Value;
      *(_BYTE *)(DerivedStorage + 72) = CFDictionaryGetInt64() != 0;
      *(_BYTE *)(DerivedStorage + 72) = APSSettingsGetIntWithDefault() != 0;
      CFUUIDGetTypeID();
      TypedValue = (const void *)CFDictionaryGetTypedValue();
      *(_QWORD *)(DerivedStorage + 112) = TypedValue;
      if (TypedValue)
        CFRetain(TypedValue);
      SNPrintF();
      if (a4)
        v16 = FigDispatchQueueCreateWithPriority();
      else
        v16 = (uint64_t)dispatch_queue_create(label, 0);
      *(_QWORD *)(DerivedStorage + 8) = v16;
      SNPrintF();
      v17 = dispatch_queue_create(label, 0);
      *(_QWORD *)(DerivedStorage + 24) = v17;
      if (v17)
      {
        SNPrintF();
        v18 = dispatch_queue_create(label, 0);
        *(_QWORD *)(DerivedStorage + 320) = v18;
        if (v18 && (v19 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 168) = v19) != 0))
        {
          *(_QWORD *)(DerivedStorage + 292) = 0x1E0000000ALL;
          CMTimeMake(&v23, 2000, 1000);
          *(CMTime *)(DerivedStorage + 328) = v23;
          *(_DWORD *)(DerivedStorage + 300) = 4000;
          *(_WORD *)(DerivedStorage + 308) = 1;
          *(_BYTE *)(DerivedStorage + 308) = FigGetCFPreferenceNumberWithDefault();
          if (gLogCategory_APTransportConnectionTCPUnbuffered <= 40
            && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          *(_DWORD *)(DerivedStorage + 304) = CFDictionaryGetInt64();
          *(_BYTE *)(DerivedStorage + 310) = 0;
          FigCFDictionaryGetBooleanIfPresent();
          *(_QWORD *)(DerivedStorage + 200) = dispatch_queue_create("APTransportConnectionTCP.netinfo", 0);
          *(_OWORD *)(DerivedStorage + 208) = xmmword_1C9432540;
          *(_BYTE *)(DerivedStorage + 224) = 1;
          *(_OWORD *)(DerivedStorage + 232) = xmmword_1C9432550;
          *(_BYTE *)(DerivedStorage + 248) = 0;
          *(_DWORD *)(DerivedStorage + 256) = 20;
          if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
            && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          if (*(_BYTE *)(DerivedStorage + 308))
            v20 = 1;
          else
            v20 = 2;
          APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionTCPUnbuffered, 0, (uint64_t *)(DerivedStorage + 520), v20);
          *a6 = 0;
          return 0;
        }
        else
        {
          APSLogErrorAt();
          return APSSignalErrorAt();
        }
      }
      else
      {
        v21 = 4294894973;
        APSLogErrorAt();
        APSSignalErrorAt();
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294894974;
  }
  return v21;
}

uint64_t tcpunbuf_Invalidate(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_invalidateInternal);
  return 0;
}

uint64_t tcpunbuf_Finalize(void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_invalidateInternal);
  APSDispatchSyncFlush();
  if (*(_QWORD *)(DerivedStorage + 64))
    APSPriorityDispatchQueuePoolSyncFlush();
  APSDispatchSyncFlush();
  v3 = *(const void **)(DerivedStorage + 520);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 520) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 120);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 112);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 512);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 512) = 0;
  }
  v9 = *(NSObject **)(DerivedStorage + 24);
  if (v9)
  {
    dispatch_release(v9);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v10 = *(NSObject **)(DerivedStorage + 48);
  if (v10)
  {
    dispatch_release(v10);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v11 = *(NSObject **)(DerivedStorage + 8);
  if (v11)
  {
    dispatch_release(v11);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v12 = *(NSObject **)(DerivedStorage + 320);
  if (v12)
  {
    dispatch_release(v12);
    *(_QWORD *)(DerivedStorage + 320) = 0;
  }
  v13 = *(NSObject **)(DerivedStorage + 200);
  if (v13)
  {
    dispatch_release(v13);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  result = FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 168) = 0;
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50)
  {
    if (gLogCategory_APTransportConnectionTCPUnbuffered != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

__CFString *tcpunbuf_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportConnectionTCPUnbuffered %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t tcpunbuf_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  NSObject *v9;
  uint64_t (*v10)(_QWORD *);
  uint64_t v11;
  CFNumberRef v12;
  uint64_t v13;
  _QWORD block[8];
  _QWORD v16[3];
  int v17;
  _QWORD v18[4];
  _QWORD v19[4];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("NetworkInfo")))
  {
    if (CFEqual(a2, CFSTR("MaxPackageSize")))
    {
      block[0] = 0;
      v10 = *(uint64_t (**)(_QWORD *))(DerivedStorage + 160);
      if (v10)
      {
        v11 = v10(block);
        if ((_DWORD)v11)
        {
          v13 = v11;
          APSLogErrorAt();
          return v13;
        }
        v12 = CFNumberCreate(a3, kCFNumberIntType, block);
        *a4 = v12;
        if (!v12)
        {
          APSLogErrorAt();
          return 4294894973;
        }
        return 0;
      }
      APSLogErrorAt();
    }
    else if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
           && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954512;
  }
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x2000000000;
  v19[3] = 0;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  v18[3] = 0;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v17 = 0;
  Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = *(NSObject **)(DerivedStorage + 200);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __tcpunbuf_networkInfoCopy_block_invoke;
  block[3] = &unk_1E8257B70;
  block[4] = v19;
  block[5] = v18;
  block[6] = v16;
  block[7] = DerivedStorage;
  dispatch_sync(v9, block);
  FigCFDictionarySetDouble();
  FigCFDictionarySetDouble();
  FigCFDictionarySetInt32();
  *a4 = Mutable;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), (void *)DerivedStorage, (dispatch_function_t)tcpunbuf_networkInfoUpdate);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v18, 8);
  _Block_object_dispose(v19, 8);
  return 0;
}

uint64_t tcpunbuf_SetProperty()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

void tcpunbuf_invalidateInternal(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v3 = DerivedStorage;
    APTTrafficMetricsConnectionClosed(*(_QWORD *)(DerivedStorage + 520));
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)v3 = 1;
    v4 = *(NSObject **)(v3 + 352);
    if (v4)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v3 + 352));
      dispatch_release(v4);
      *(_QWORD *)(v3 + 352) = 0;
    }
    tcpunbuf_cleanUp();
    dispatch_sync_f(*(dispatch_queue_t *)(v3 + 24), a1, (dispatch_function_t)tcpunbuf_clearCallbackState);
  }
}

void tcpunbuf_cleanUp()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 136))
  {
    if (!*(_BYTE *)(DerivedStorage + 144)
      || (APSPriorityDispatchSourceResume(), *(_BYTE *)(DerivedStorage + 144) = 0, *(_QWORD *)(DerivedStorage + 136)))
    {
      APSPriorityDispatchSourceCancel();
      CFRelease(*(CFTypeRef *)(DerivedStorage + 136));
      *(_QWORD *)(DerivedStorage + 136) = 0;
    }
  }
  v1 = *(NSObject **)(DerivedStorage + 128);
  if (v1)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 128));
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  *(_DWORD *)(DerivedStorage + 148) = 6;
  v2 = *(const void **)(DerivedStorage + 120);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
}

void tcpunbuf_clearCallbackState()
{
  _QWORD *DerivedStorage;
  NSObject *v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[4] = 0;
  DerivedStorage[5] = 0;
  v1 = DerivedStorage[6];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[6] = 0;
  }
}

double __tcpunbuf_networkInfoCopy_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  double result;

  v1 = a1[7];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_QWORD *)(v1 + 216);
  result = *(double *)(v1 + 240);
  *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_DWORD *)(v1 + 256);
  return result;
}

void tcpunbuf_networkInfoUpdate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  double v11;
  NSObject *v12;
  _QWORD block[7];
  _BYTE v14[408];
  socklen_t v15;
  _QWORD __src[52];

  v15 = 408;
  mach_absolute_time();
  v2 = UpTicksToNanoseconds();
  if (*(_DWORD *)(a1 + 148) == 5)
  {
    v3 = v2;
    Value = APSWrapperGetValue();
    if (Value)
    {
      if ((unint64_t)(v3 - *(_QWORD *)(a1 + 264)) >= 0x2FAF081)
      {
        memset(__src, 0, 408);
        if (getsockopt(*(_DWORD *)(Value + 4), 6, 512, __src, &v15))
        {
          APSLogErrorAt();
          if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
            && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        else
        {
          v5 = *(_QWORD *)((char *)&__src[9] + 4);
          v6 = *(_QWORD *)((char *)&__src[10] + 4);
          v8 = *(_QWORD *)(a1 + 272);
          v7 = *(_QWORD *)(a1 + 280);
          *(_QWORD *)(a1 + 272) = *(_QWORD *)((char *)&__src[9] + 4);
          *(_QWORD *)(a1 + 280) = v6;
          v9 = 0.0;
          v10 = v5 - v8;
          if (v10)
            v9 = (double)(unint64_t)(v6 - v7) / (double)v10;
          if (*(_BYTE *)(a1 + 288))
            v11 = (double)*(_QWORD *)((char *)&__src[16] + 4);
          else
            v11 = 8000000.0;
          v12 = *(NSObject **)(a1 + 200);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = __tcpunbuf_networkInfoUpdate_block_invoke;
          block[3] = &__block_descriptor_tmp_25_0;
          *(double *)&block[4] = v11;
          block[5] = a1;
          *(double *)&block[6] = v9;
          memcpy(v14, __src, sizeof(v14));
          dispatch_sync(v12, block);
          if (gLogCategory_APTransportConnectionTCPUnbuffered <= 20
            && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          *(_QWORD *)(a1 + 264) = v3;
        }
      }
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

uint64_t __tcpunbuf_networkInfoUpdate_block_invoke(uint64_t result)
{
  double v1;
  uint64_t v2;

  v1 = *(double *)(result + 32);
  v2 = *(_QWORD *)(result + 40);
  if (v1 > 0.0)
  {
    if (*(_BYTE *)(v2 + 224))
    {
      *(double *)(v2 + 216) = *(double *)(v2 + 216) + *(double *)(v2 + 208) * (v1 - *(double *)(v2 + 216));
    }
    else
    {
      *(double *)(v2 + 216) = v1;
      *(_BYTE *)(v2 + 224) = 1;
    }
  }
  if (*(_BYTE *)(v2 + 248))
  {
    *(double *)(v2 + 240) = *(double *)(v2 + 240)
                          + *(double *)(v2 + 232) * (*(double *)(result + 48) - *(double *)(v2 + 240));
  }
  else
  {
    *(_QWORD *)(v2 + 240) = *(_QWORD *)(result + 48);
    *(_BYTE *)(v2 + 248) = 1;
  }
  *(_DWORD *)(v2 + 256) = *(_DWORD *)(result + 80);
  return result;
}

uint64_t tcpunbuf_setPropertyInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t Value;
  void *v4;
  uint64_t (*v5)(_QWORD *);
  const void *v6;
  CFTypeID v7;
  const void *v8;
  CFTypeID v9;
  int v11;
  const void *v12;
  CFTypeID v13;
  const void *v15;
  CFTypeID v16;
  int v17;
  int v18;
  _BYTE v19[28];
  unsigned int v20;

  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = APSWrapperGetValue();
  if (CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("PackageType")))
  {
    if (FigCFEqual())
    {
      v4 = APTPackageRTPBufferedCreate;
      v5 = APTPackageRTPBufferedGetMaxPayloadSize;
LABEL_11:
      *(_QWORD *)(DerivedStorage + 152) = v4;
      *(_QWORD *)(DerivedStorage + 160) = v5;
      return v20;
    }
    if (FigCFEqual())
    {
      v4 = APTransportPackageBufferedAPAPCreate;
      v5 = APTransportPackageBufferedAPAPGetMaxPayloadSize;
      goto LABEL_11;
    }
    if (FigCFEqual())
    {
      *(_QWORD *)(DerivedStorage + 152) = APTransportPackageScreenCreate;
      return v20;
    }
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return -12780;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("RemoteNetworkIPAddress")))
  {
    if (!Value)
    {
      v6 = *(const void **)(a1 + 16);
      if (v6)
      {
        v7 = CFGetTypeID(v6);
        if (v7 == APSNetworkAddressGetTypeID())
        {
          APSNetworkAddressGetSocketAddr();
          *(_OWORD *)(DerivedStorage + 76) = *(_OWORD *)v19;
          *(_OWORD *)(DerivedStorage + 88) = *(_OWORD *)&v19[12];
LABEL_17:
          SockAddrSetPort();
          return v20;
        }
      }
    }
    goto LABEL_75;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("RemoteNetworkPort")))
  {
    if (!Value)
    {
      v8 = *(const void **)(a1 + 16);
      if (v8)
      {
        v9 = CFGetTypeID(v8);
        if (v9 == CFNumberGetTypeID())
        {
          *(_DWORD *)(DerivedStorage + 104) = CFGetInt64();
          goto LABEL_17;
        }
      }
    }
LABEL_75:
    APSLogErrorAt();
    return -72322;
  }
  if (CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("BoundInterfaceIndex")))
  {
    if (!Value)
    {
      *(_DWORD *)(DerivedStorage + 108) = CFGetInt64();
      return v20;
    }
    goto LABEL_75;
  }
  if (!CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("PackageSendTimeout")))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("ReadyToSendThreshold")))
    {
      v12 = *(const void **)(a1 + 16);
      if (!v12)
        goto LABEL_75;
      v13 = CFGetTypeID(v12);
      if (v13 != CFNumberGetTypeID())
        goto LABEL_75;
      *(_DWORD *)(DerivedStorage + 300) = CFGetInt64();
      if (gLogCategory_APTransportConnectionTCPUnbuffered > 40
        || gLogCategory_APTransportConnectionTCPUnbuffered == -1 && !_LogCategory_Initialize())
      {
        return v20;
      }
LABEL_39:
      LogPrintF();
      return v20;
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("QualityOfService")))
    {
      v15 = *(const void **)(a1 + 16);
      if (!v15)
        goto LABEL_75;
      v16 = CFGetTypeID(v15);
      if (v16 != CFNumberGetTypeID())
        goto LABEL_75;
      v17 = CFGetInt64();
      if (*(_BYTE *)(DerivedStorage + 309) || !Value || (v20 = SocketSetQoS()) == 0)
      {
        *(_DWORD *)(DerivedStorage + 304) = v17;
        if (gLogCategory_APTransportConnectionTCPUnbuffered > 50
          || gLogCategory_APTransportConnectionTCPUnbuffered == -1 && !_LogCategory_Initialize())
        {
          return v20;
        }
        goto LABEL_39;
      }
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("ReadyToSendCallbackPriority")))
      {
        if (gLogCategory_APTransportConnectionTCPUnbuffered > 30
          || gLogCategory_APTransportConnectionTCPUnbuffered == -1 && !_LogCategory_Initialize())
        {
          return v20;
        }
        goto LABEL_39;
      }
      v18 = CFGetInt64Ranged();
      if (!*(_QWORD *)(DerivedStorage + 64) && v18 != 5)
      {
        APSLogErrorAt();
        return -72321;
      }
      if (!*(_QWORD *)(DerivedStorage + 136) || (v20 = APSPriorityDispatchSourceSetPriority()) == 0)
      {
        *(_DWORD *)(DerivedStorage + 60) = v18;
        return v20;
      }
    }
    APSLogErrorAt();
    return v20;
  }
  v11 = CFGetInt64Ranged();
  *(_DWORD *)(DerivedStorage + 296) = v11;
  if (v11 && Value)
    SocketSetTCPTimeout();
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 40
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_39;
  }
  return v20;
}

uint64_t tcpunbuf_Resume()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v0 = APSDispatchSyncTask();
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v0;
}

uint64_t tcpunbuf_AddEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    v6 = 4294894974;
LABEL_7:
    APSLogErrorAt();
    return v6;
  }
  if (!a4)
  {
    v6 = 4294894974;
    goto LABEL_7;
  }
  dispatch_retain(a4);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t tcpunbuf_RemoveEventCallback()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t tcpunbuf_SetReadyToSendCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 168));
  *(_QWORD *)(DerivedStorage + 176) = a2;
  *(_QWORD *)(DerivedStorage + 184) = a3;
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 168));
  return 0;
}

uint64_t tcpunbuf_SignalDataAvailable(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_signalDataAvailable);
  return 0;
}

uint64_t tcpunbuf_resumeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  CFNumberRef v10;
  const __CFUUID *v11;
  int v12;
  _QWORD *v13;
  int v14;
  CFUUIDBytes v16;
  socklen_t v17;
  sockaddr v18;
  uint64_t v19;
  _QWORD v20[2];
  unsigned int valuePtr;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20[0] = 0;
  v20[1] = 0;
  *(_QWORD *)&v18.sa_len = 0;
  *(_QWORD *)&v18.sa_data[6] = 0;
  v19 = 0;
  v17 = 0;
  if (*(_QWORD *)(DerivedStorage + 120))
  {
LABEL_61:
    *(_DWORD *)(DerivedStorage + 148) = 5;
    tcpunbuf_callEventCallback(a1, 5, 0);
    return valuePtr;
  }
  valuePtr = SockAddrToString();
  if (valuePtr)
  {
    APSLogErrorAt();
    v9 = 0;
    v3 = -1;
    goto LABEL_22;
  }
  v3 = socket(*(unsigned __int8 *)(DerivedStorage + 77), 1, 6);
  if (v3 < 0)
  {
    if (!*__error())
    {
      valuePtr = -6700;
      goto LABEL_20;
    }
    valuePtr = *__error();
    if (valuePtr)
    {
LABEL_20:
      APSLogErrorAt();
LABEL_21:
      v9 = 0;
      goto LABEL_22;
    }
  }
  valuePtr = SocketSetNonBlocking();
  if (valuePtr)
    goto LABEL_20;
  if (*(_DWORD *)(DerivedStorage + 108))
  {
    v4 = *(unsigned __int8 *)(DerivedStorage + 77);
    if (v4 == 2)
    {
      v5 = v3;
      v6 = 0;
      v7 = 25;
    }
    else
    {
      if (v4 != 30)
        goto LABEL_13;
      v5 = v3;
      v6 = 41;
      v7 = 125;
    }
    valuePtr = setsockopt(v5, v6, v7, (const void *)(DerivedStorage + 108), 4u);
    if (valuePtr)
      goto LABEL_20;
  }
LABEL_13:
  v8 = *(_DWORD *)(DerivedStorage + 56);
  if ((v8 & 0xB) != 0)
  {
    SocketSetP2P();
    v8 = *(_DWORD *)(DerivedStorage + 56);
  }
  if ((v8 & 0x10) != 0)
  {
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    HIDWORD(v20[0]) = 4;
    setsockopt(v3, 0xFFFF, 4225, (char *)v20 + 4, 4u);
  }
  if (!*(_BYTE *)(DerivedStorage + 309))
    SocketSetQoS();
  v11 = *(const __CFUUID **)(DerivedStorage + 112);
  if (v11)
  {
    v16 = CFUUIDGetUUIDBytes(v11);
    setsockopt(v3, 0xFFFF, 4360, &v16, 0x10u);
  }
  HIDWORD(v20[0]) = 1;
  setsockopt(v3, 0xFFFF, 4130, (char *)v20 + 4, 4u);
  v12 = *(unsigned __int8 *)(DerivedStorage + 310);
  *(_DWORD *)(DerivedStorage + 312) = *(_BYTE *)(DerivedStorage + 310) != 0;
  tcpunbuf_setAggregationSocketOption(v3, v12);
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  SocketSetBufferSize();
  SocketSetBufferSize();
  if (*(_DWORD *)(DerivedStorage + 296))
    SocketSetTCPTimeout();
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 40
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  mach_absolute_time();
  UpTicksToMicroseconds();
  valuePtr = SocketConnect();
  if (valuePtr)
  {
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_21;
  }
  v17 = 28;
  valuePtr = getsockname(v3, &v18, &v17);
  if (valuePtr)
    goto LABEL_20;
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    mach_absolute_time();
    UpTicksToMicroseconds();
    LogPrintF();
  }
  APTTrafficMetricsConnectionFormed(*(_QWORD *)(DerivedStorage + 520));
  valuePtr = NetSocket_CreateWithNative();
  if (valuePtr)
    goto LABEL_20;
  valuePtr = APSWrapperCreate();
  if (valuePtr)
    goto LABEL_20;
  valuePtr = tcpunbuf_setupDataSocketReadSource(a1);
  if (valuePtr)
    goto LABEL_20;
  if (!*(_BYTE *)(DerivedStorage + 308))
    goto LABEL_59;
  socket_setLowWatermarkWriteable(v3, *(_DWORD *)(DerivedStorage + 300));
  v13 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
  v9 = v13;
  if (v13)
  {
    *v13 = a1;
    v13[1] = CFRetain(*(CFTypeRef *)(DerivedStorage + 120));
    valuePtr = APSPriorityDispatchSourceCreate();
    if (!valuePtr)
    {
      *(_BYTE *)(DerivedStorage + 144) = 1;
LABEL_59:
      HIDWORD(v20[0]) = 1;
      v14 = setsockopt(v3, 6, 514, (char *)v20 + 4, 4u);
      *(_BYTE *)(DerivedStorage + 288) = v14 == 0;
      valuePtr = 0;
      if (!v14)
      {
        *(_QWORD *)&v16.byte0 = 0x1E0000000ALL;
        setsockopt(v3, 6, 515, &v16, 8u);
      }
      goto LABEL_61;
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    valuePtr = -72323;
  }
LABEL_22:
  *(_DWORD *)(DerivedStorage + 148) = 4;
  v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  tcpunbuf_callEventCallback(a1, 4, v10);
  if (v10)
    CFRelease(v10);
  if (v9)
    tcpunbuf_freeDispatchSourceContext(v9);
  if ((v3 & 0x80000000) == 0 && close(v3) && *__error())
    __error();
  return valuePtr;
}

uint64_t tcpunbuf_setAggregationSocketOption(int a1, int a2)
{
  uint64_t result;
  _BOOL4 v5;

  v5 = a2 == 0;
  setsockopt(a1, 6, 1, &v5, 4u);
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = a2 != 0;
  result = setsockopt(a1, 6, 4, &v5, 4u);
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30)
  {
    if (gLogCategory_APTransportConnectionTCPUnbuffered != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t tcpunbuf_finalizeWrappedNetSocket()
{
  NetSocket_Cancel();
  return NetSocket_Delete();
}

uint64_t tcpunbuf_setupDataSocketReadSource(uint64_t a1)
{
  uint64_t DerivedStorage;
  uintptr_t v3;
  dispatch_source_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(unsigned int *)(APSWrapperGetValue() + 4);
  if ((v3 & 0x80000000) != 0)
  {
    APSLogErrorAt();
    v7 = 4294894972;
LABEL_8:
    APSSignalErrorAt();
    return v7;
  }
  v4 = dispatch_source_create(MEMORY[0x1E0C80DB8], v3, 0, *(dispatch_queue_t *)(DerivedStorage + 8));
  *(_QWORD *)(DerivedStorage + 128) = v4;
  if (!v4 || (v5 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL)) == 0)
  {
    v7 = 4294894973;
    APSLogErrorAt();
    goto LABEL_8;
  }
  v6 = v5;
  *v5 = a1;
  v5[1] = CFRetain(*(CFTypeRef *)(DerivedStorage + 120));
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 128), (dispatch_function_t)tcpunbuf_receivedData);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(DerivedStorage + 128), (dispatch_function_t)tcpunbuf_freeDispatchSourceContext);
  dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 128), v6);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 128));
  return 0;
}

uint64_t socket_setLowWatermarkWriteable(int a1, unsigned int a2)
{
  int v2;
  uint64_t result;
  unsigned int v4;

  v4 = a2;
  if (a2 > 0xF9F)
  {
    if (a2 < 0xFA01)
      goto LABEL_6;
    v2 = 64000;
  }
  else
  {
    v2 = 4000;
  }
  v4 = v2;
LABEL_6:
  result = setsockopt(a1, 6, 513, &v4, 4u);
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

void tcpunbuf_canWriteData(void **a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 308))
  {
    v3 = DerivedStorage;
    if (*(_DWORD *)(DerivedStorage + 148) == 5)
    {
      APTTrafficMetricsCanWriteData(*(_QWORD *)(DerivedStorage + 520));
      if (*(_DWORD *)(v3 + 360) == 1)
      {
        *(_DWORD *)(v3 + 360) = 0;
        if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
          && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
      dispatch_source_set_timer(*(dispatch_source_t *)(v3 + 352), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    }
  }
  tcpunbuf_requestAndSendData(*a1);
}

void tcpunbuf_freeDispatchSourceContext(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  free(a1);
}

_BYTE *tcpunbuf_callEventCallback(uint64_t a1, uint64_t a2, const void *a3)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3)
      CFRetain(a3);
    return (_BYTE *)APSDispatchAsyncFHelper();
  }
  return result;
}

void tcpunbuf_receivedData(uint64_t *a1)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  uint64_t Value;
  uint64_t v4;
  uintptr_t data;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFNumberRef v9;
  uint64_t v10;
  int valuePtr;
  _BYTE v12[1024];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  v1 = *a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = APSWrapperGetValue();
  if (!*(_BYTE *)DerivedStorage && *(_DWORD *)(DerivedStorage + 148) == 5)
  {
    v4 = Value;
    data = dispatch_source_get_data(*(dispatch_source_t *)(DerivedStorage + 128));
    if (data)
    {
      v6 = data;
      if (gLogCategory_APTransportConnectionTCPUnbuffered <= 60
        && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      while (1)
      {
        v7 = v6 >= 0x400 ? 1024 : v6;
        v10 = 0;
        valuePtr = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t *, _QWORD, uint64_t))(v4 + 24))(v4, v7, v7, v12, &v10, 0, 1);
        if (valuePtr)
          break;
        v6 -= v10;
        if (!v6)
          return;
      }
      APSLogErrorAt();
    }
    else if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
           && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v8 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)v8)
    {
      APTTrafficMetricsConnectionClosed(*(_QWORD *)(v8 + 520));
      tcpunbuf_cleanUp();
    }
    v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    tcpunbuf_callEventCallback(v1, 6, v9);
    if (v9)
      CFRelease(v9);
  }
}

void tcpunbuf_requestAndSendData(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t Value;
  uint64_t v4;
  void *v5;
  int v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef);
  uint64_t v9;
  int IOVecArrayWithBlockBuffer;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef);
  int v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  const void *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  const void *v33;
  CFTypeRef cf;
  unsigned int v35;

  v35 = 0;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = APSWrapperGetValue();
  if (*(_DWORD *)(DerivedStorage + 148) != 5)
  {
    v5 = 0;
    *(_DWORD *)(DerivedStorage + 192) = -72320;
    goto LABEL_60;
  }
  v4 = Value;
  if (*(_BYTE *)(DerivedStorage + 72) && *(_DWORD *)(DerivedStorage + 504))
  {
    v5 = 0;
    goto LABEL_30;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 168));
  if (!*(_QWORD *)(DerivedStorage + 176))
    goto LABEL_79;
  v6 = (*(uint64_t (**)(_QWORD, CFTypeRef *))(DerivedStorage + 152))(*MEMORY[0x1E0C9AE00], &cf);
  if (v6)
  {
    v14 = v6;
    APSLogErrorAt();
    v5 = 0;
    v15 = 0;
LABEL_16:
    v16 = *(_DWORD *)(DerivedStorage + 148);
    *(_DWORD *)(DerivedStorage + 192) = v14;
    if (v16 == 5)
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_requestAndSendData);
    if ((v15 & 1) != 0)
      goto LABEL_60;
LABEL_19:
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 168));
    goto LABEL_60;
  }
  APTTrafficMetricsRequestDataStarted(*(_QWORD *)(DerivedStorage + 520));
  (*(void (**)(_QWORD, CFTypeRef *, _QWORD))(DerivedStorage + 176))(*(_QWORD *)(DerivedStorage + 184), &cf, *(unsigned int *)(DerivedStorage + 192));
  APTTrafficMetricsRequestDataFinished(*(_QWORD *)(DerivedStorage + 520));
  if (!cf)
  {
    APTTrafficMetricsConsumedAllData(*(_QWORD *)(DerivedStorage + 520));
    if (!cf)
    {
LABEL_79:
      if (*(_QWORD *)(DerivedStorage + 136) && !*(_BYTE *)(DerivedStorage + 144))
      {
        APSPriorityDispatchSourceSuspend();
        *(_BYTE *)(DerivedStorage + 144) = 1;
      }
      v5 = 0;
      *(_DWORD *)(DerivedStorage + 192) = 0;
      goto LABEL_19;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 168));
  v7 = cf;
  v8 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v8 || (v9 = v8(v7)) == 0)
  {
    v14 = -72323;
    APSLogErrorAt();
    APSSignalErrorAt();
    v5 = 0;
LABEL_15:
    v15 = 1;
    goto LABEL_16;
  }
  v5 = (void *)v9;
  IOVecArrayWithBlockBuffer = FigMakeIOVecArrayWithBlockBuffer();
  if (IOVecArrayWithBlockBuffer)
  {
    v14 = IOVecArrayWithBlockBuffer;
    APSLogErrorAt();
    goto LABEL_15;
  }
  v11 = cf;
  v12 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
  if (v12)
    v13 = v12(v11);
  else
    v13 = 0;
  v17 = CMBaseObjectGetDerivedStorage();
  v18 = v13 == 0;
  if (*(_BYTE *)(v17 + 310))
  {
    if (*(_DWORD *)(v17 + 312) != v18)
    {
      *(_DWORD *)(v17 + 312) = v18;
      v19 = APSWrapperGetValue();
      tcpunbuf_setAggregationSocketOption(*(_DWORD *)(v19 + 4), v13 == 0);
      if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50
        && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
  }
  if (!*(_BYTE *)(DerivedStorage + 72))
    goto LABEL_35;
  *(_QWORD *)(DerivedStorage + 496) = DerivedStorage + 368;
  *(_DWORD *)(DerivedStorage + 504) = v35;
  v20 = *(const void **)(DerivedStorage + 512);
  *(_QWORD *)(DerivedStorage + 512) = v5;
  CFRetain(v5);
  if (v20)
    CFRelease(v20);
LABEL_30:
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
LABEL_35:
    CMBlockBufferGetDataLength((CMBlockBufferRef)v5);
    goto LABEL_36;
  }
  v21 = *(_DWORD *)(DerivedStorage + 504);
  if (v21 >= 1)
  {
    v22 = 0;
    v23 = (uint64_t *)(*(_QWORD *)(DerivedStorage + 496) + 8);
    do
    {
      v24 = *v23;
      v23 += 2;
      v22 += v24;
      --v21;
    }
    while (v21);
  }
LABEL_36:
  APTTrafficMetricsSendStarted(*(_QWORD *)(DerivedStorage + 520));
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v4 + 40))(v4, DerivedStorage + 368, v35, *(unsigned int *)(DerivedStorage + 296));
    if (!v31)
    {
LABEL_57:
      APTTrafficMetricsSendFinished(*(_QWORD *)(DerivedStorage + 520));
      tcpunbuf_networkInfoUpdate(DerivedStorage);
      if (!*(_BYTE *)(DerivedStorage + 308))
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_requestAndSendData);
      goto LABEL_59;
    }
    v14 = v31;
    if (v31 == -6723)
    {
LABEL_59:
      *(_DWORD *)(DerivedStorage + 192) = 0;
      goto LABEL_60;
    }
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_15;
  }
  NetSocket_GetNative();
  v25 = (int *)(DerivedStorage + 504);
  v26 = SocketWriteData();
  if (v26 == 35)
  {
    v27 = *v25;
    if (*v25 >= 1)
    {
      v28 = 0;
      v29 = (uint64_t *)(*(_QWORD *)(DerivedStorage + 496) + 8);
      do
      {
        v30 = *v29;
        v29 += 2;
        v28 += v30;
        --v27;
      }
      while (v27);
    }
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 30
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_57;
  }
  v32 = v26;
  v33 = *(const void **)(DerivedStorage + 512);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(DerivedStorage + 512) = 0;
  }
  *v25 = 0;
  if (!v32)
    goto LABEL_57;
  APSLogErrorAt();
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
    && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *(_DWORD *)(DerivedStorage + 192) = v32;
  if (*(_DWORD *)(DerivedStorage + 148) == 5)
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)tcpunbuf_requestAndSendData);
LABEL_60:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
}

void tcpunbuf_deferCallEventCallback(_QWORD *a1)
{
  uint64_t DerivedStorage;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40))
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)tcpunbuf_callEventCallbackOnEventQueue);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
}

uint64_t tcpunbuf_callEventCallbackOnEventQueue(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 40))(*(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(DerivedStorage + 32));
}

void tcpunbuf_addEventCallbackInternal(uint64_t a1)
{
  NSObject *v2;

  tcpunbuf_setEventCallback(a1);
  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_release(v2);
}

uint64_t tcpunbuf_setEventCallback(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)(a1 + 8);
  v3 = *(NSObject **)(DerivedStorage + 48);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(DerivedStorage + 48) = v4;
    dispatch_retain(v4);
  }
  return 0;
}

void tcpunbuf_signalDataAvailable(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  Float64 Seconds;
  dispatch_time_t v9;
  CMTime handler;
  void *v11;
  void *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  APTTrafficMetricsDataAvailable(*(_QWORD *)(DerivedStorage + 520));
  if (*(_QWORD *)(DerivedStorage + 136) && *(_BYTE *)(DerivedStorage + 144))
  {
    APSPriorityDispatchSourceResume();
    *(_BYTE *)(DerivedStorage + 144) = 0;
  }
  if (!*(_BYTE *)(DerivedStorage + 308))
  {
    tcpunbuf_requestAndSendData(a1);
    return;
  }
  v3 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v3 + 308))
  {
    v4 = v3;
    v5 = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(v5 + 352))
      goto LABEL_10;
    v6 = v5;
    if (!*(_BYTE *)(v5 + 308))
      goto LABEL_10;
    v7 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v5 + 8));
    *(_QWORD *)(v6 + 352) = v7;
    if (v7)
    {
      handler.value = MEMORY[0x1E0C809B0];
      *(_QWORD *)&handler.timescale = 0x40000000;
      handler.epoch = (CMTimeEpoch)__tcpunbuf_ensureStallMonitorTimerCreated_block_invoke;
      v11 = &__block_descriptor_tmp_54_0;
      v12 = a1;
      dispatch_source_set_event_handler(v7, &handler);
      dispatch_source_set_timer(*(dispatch_source_t *)(v6 + 352), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      dispatch_resume(*(dispatch_object_t *)(v6 + 352));
LABEL_10:
      handler = *(CMTime *)(v4 + 328);
      Seconds = CMTimeGetSeconds(&handler);
      v9 = dispatch_time(0, (uint64_t)(Seconds * 1000000000.0));
      dispatch_source_set_timer(*(dispatch_source_t *)(v4 + 352), v9, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
      return;
    }
    APSLogErrorAt();
    APSLogErrorAt();
    if (gLogCategory_APTransportConnectionTCPUnbuffered <= 90
      && (gLogCategory_APTransportConnectionTCPUnbuffered != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
}

uint64_t __tcpunbuf_ensureStallMonitorTimerCreated_block_invoke()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 360) = 1;
  if (gLogCategory_APTransportConnectionTCPUnbuffered <= 50)
  {
    if (gLogCategory_APTransportConnectionTCPUnbuffered != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t APBrokeredReceiverGetTypeID()
{
  if (APBrokeredReceiverGetTypeID_initOnce != -1)
    dispatch_once_f(&APBrokeredReceiverGetTypeID_initOnce, &APBrokeredReceiverGetTypeID_typeID, (dispatch_function_t)_APBrokeredReceiverClassRegister);
  return APBrokeredReceiverGetTypeID_typeID;
}

uint64_t _APBrokeredReceiverClassRegister(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APBrokeredReceiverCreateWithTXTRecordBase64(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _OWORD *Instance;
  _OWORD *v16;
  uint64_t v17;
  const __CFData *v18;
  const __CFData *v19;
  uint64_t v20;
  uint64_t v21;

  if (!a1 || !a2 || !a3 || !a4 || !a5 || !a6 || !a8)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (APBrokeredReceiverGetTypeID_initOnce != -1)
    dispatch_once_f(&APBrokeredReceiverGetTypeID_initOnce, &APBrokeredReceiverGetTypeID_typeID, (dispatch_function_t)_APBrokeredReceiverClassRegister);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v16 = Instance;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  *((_QWORD *)Instance + 2) = CFRetain(a1);
  *((_QWORD *)v16 + 3) = CFRetain(a2);
  *((_QWORD *)v16 + 4) = CFRetain(a3);
  *((_QWORD *)v16 + 5) = CFRetain(a4);
  *((_QWORD *)v16 + 6) = CFRetain(a5);
  v17 = APSCFDataCreateWithBase64String();
  *((_QWORD *)v16 + 8) = v17;
  if (!v17)
  {
    APSLogErrorAt();
    v21 = 4294960568;
LABEL_29:
    CFRelease(v16);
    return v21;
  }
  if (a7)
  {
    v18 = (const __CFData *)APSCFDataCreateWithBase64String();
    *((_QWORD *)v16 + 9) = v18;
    if (!v18 || CFDataGetLength(v18) != 32)
    {
      APSLogErrorAt();
      v21 = 4294960591;
      goto LABEL_29;
    }
    v19 = (const __CFData *)*((_QWORD *)v16 + 8);
  }
  else
  {
    v19 = (const __CFData *)v17;
  }
  v20 = APBrokeredReceiverCopyCFStringFromTXTRecord(CFSTR("deviceid"), v19, (CFStringRef *)v16 + 7);
  if ((_DWORD)v20)
  {
    v21 = v20;
    APSLogErrorAt();
    goto LABEL_29;
  }
  if (gLogCategory_APBrokeredReceiver <= 50
    && (gLogCategory_APBrokeredReceiver != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v21 = 0;
  *a8 = v16;
  return v21;
}

uint64_t APBrokeredReceiverCopyCFStringFromTXTRecord(const __CFString *a1, CFDataRef theData, CFStringRef *a3)
{
  const UInt8 *BytePtr;
  uint16_t Length;
  const char *ValuePtr;
  const UInt8 *v9;
  CFStringRef v10;
  CFStringRef v11;
  uint64_t result;
  uint8_t valueLen;
  char buffer[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 && theData)
  {
    valueLen = 0;
    BytePtr = CFDataGetBytePtr(theData);
    Length = CFDataGetLength(theData);
    buffer[0] = 0;
    CFStringGetCString(a1, buffer, 256, 0x8000100u);
    ValuePtr = (const char *)TXTRecordGetValuePtr(Length, BytePtr, buffer, &valueLen);
    if (ValuePtr)
    {
      v9 = (const UInt8 *)ValuePtr;
      valueLen = strnlen(ValuePtr, valueLen);
      v10 = CFStringCreateWithBytes(0, v9, valueLen, 0x8000100u, 0);
      if (v10)
      {
        v11 = v10;
        result = 0;
        *a3 = v11;
      }
      else
      {
        APSLogErrorAt();
        return 4294960554;
      }
    }
    else
    {
      return 4294960569;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APBrokeredReceiverGetDeviceID(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t APBrokeredReceiverGetBrokerGroupID(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t APBrokeredReceiverGetReceiverGroupUUID(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t APBrokeredReceiverGetPublicReceiverUUID(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t APBrokeredReceiverGetLTPKHash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t APBrokeredReceiverGetServiceType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t APBrokeredReceiverCopyBonjourInfo(uint64_t a1, int a2, __CFDictionary **a3)
{
  CFStringRef DNSName;
  CFStringRef v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  CFArrayRef v10;
  CFArrayRef v11;
  __CFDictionary *v12;
  __CFDictionary *v13;
  const void **v14;
  const __CFString *v15;
  uint64_t v16;
  const void *v18[2];

  v18[1] = *(const void **)MEMORY[0x1E0C80C00];
  DNSName = APBrokeredReceiverCreateDNSName(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
  if (!DNSName)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v7 = DNSName;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v9 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("domain"), CFSTR("local."));
    CFDictionarySetValue(v9, CFSTR("ifname"), CFSTR("broker0"));
    CFDictionarySetInt64();
    FigCFDictionarySetValue();
    v18[0] = v9;
    v10 = CFArrayCreate(0, v18, 1, MEMORY[0x1E0C9B378]);
    if (v10)
    {
      v11 = v10;
      CFRelease(v9);
      v12 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v12)
      {
        v13 = v12;
        CFDictionarySetValue(v12, CFSTR("deviceID"), *(const void **)(a1 + 56));
        CFDictionarySetValue(v13, CFSTR("name"), *(const void **)(a1 + 40));
        if (a2)
        {
          v14 = (const void **)(a1 + 48);
          CFDictionarySetValue(v13, CFSTR("removedServices"), v11);
          v15 = CFSTR("serviceType");
        }
        else
        {
          CFDictionarySetValue(v13, CFSTR("services"), v11);
          CFDictionarySetValue(v13, CFSTR("serviceType"), *(const void **)(a1 + 48));
          v14 = (const void **)(a1 + 64);
          v15 = CFSTR("txt");
        }
        CFDictionarySetValue(v13, v15, *v14);
        v16 = 0;
        *a3 = v13;
      }
      else
      {
        APSLogErrorAt();
        v16 = 4294960568;
      }
      CFRelease(v11);
      goto LABEL_10;
    }
    APSLogErrorAt();
    CFRelease(v9);
  }
  else
  {
    APSLogErrorAt();
  }
  v16 = 4294960568;
  APSLogErrorAt();
LABEL_10:
  CFRelease(v7);
  return v16;
}

void APBrokeredReceiverCopyInfoFromDNSName(CFStringRef theString, CFTypeRef *a2, CFTypeRef *a3)
{
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v6;
  const __CFString *ValueAtIndex;
  const __CFString *v8;

  if (theString)
  {
    if (a2)
    {
      if (a3)
      {
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, CFSTR("\x1C"));
        if (ArrayBySeparatingStrings)
        {
          v6 = ArrayBySeparatingStrings;
          if (CFArrayGetCount(ArrayBySeparatingStrings) == 2)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, 0);
            if (CFStringGetLength(ValueAtIndex) >= 1)
            {
              v8 = (const __CFString *)CFArrayGetValueAtIndex(v6, 1);
              if (CFStringGetLength(v8) >= 1)
              {
                *a2 = CFRetain(ValueAtIndex);
                *a3 = CFRetain(v8);
              }
            }
          }
          CFRelease(v6);
        }
      }
    }
  }
}

CFStringRef APBrokeredReceiverCreateDNSName(uint64_t a1, uint64_t a2)
{
  CFStringRef result;

  result = 0;
  if (a1 && a2)
  {
    result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@%@%@"), a1, CFSTR("\x1C"), a2);
    if (!result)
    {
      APSLogErrorAt();
      return 0;
    }
  }
  return result;
}

void _APBrokeredReceiverFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
  v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0;
  }
  v8 = (const void *)a1[8];
  if (v8)
  {
    CFRelease(v8);
    a1[8] = 0;
  }
  v9 = (const void *)a1[9];
  if (v9)
  {
    CFRelease(v9);
    a1[9] = 0;
  }
}

uint64_t _APBrokeredReceiverEqual(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  if (!(a1 | a2))
    return 1;
  result = 0;
  if (a1)
  {
    if (a2)
    {
      v5 = *(const void **)(a1 + 56);
      v6 = *(const void **)(a2 + 56);
      if (v5 == v6 || (result = 0, v5) && v6 && (result = CFEqual(*(CFTypeRef *)(a1 + 56), v6), (_DWORD)result))
      {
        v7 = *(const void **)(a1 + 16);
        v8 = *(const void **)(a2 + 16);
        if (v7 == v8 || (result = 0, v7) && v8 && (result = CFEqual(*(CFTypeRef *)(a1 + 16), v8), (_DWORD)result))
        {
          v9 = *(const void **)(a1 + 24);
          v10 = *(const void **)(a2 + 24);
          if (v9 == v10
            || (result = 0, v9) && v10 && (result = CFEqual(*(CFTypeRef *)(a1 + 24), v10), (_DWORD)result))
          {
            v11 = *(const void **)(a1 + 32);
            v12 = *(const void **)(a2 + 32);
            if (v11 == v12
              || (result = 0, v11) && v12 && (result = CFEqual(*(CFTypeRef *)(a1 + 32), v12), (_DWORD)result))
            {
              v13 = *(const void **)(a1 + 72);
              v14 = *(const void **)(a2 + 72);
              return v13 == v14 || v13 && v14 && CFEqual(v13, v14);
            }
          }
        }
      }
    }
  }
  return result;
}

CFHashCode _APBrokeredReceiverHash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 56));
}

uint64_t APTransportStreamSendBackingProviderGetTypeID()
{
  if (APTransportStreamSendBackingProviderGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTransportStreamSendBackingProviderGetTypeID_sInitOnce, &APTransportStreamSendBackingProviderGetTypeID_sTypeID, (dispatch_function_t)transportStreamBackingProvider_getTypeID);
  return APTransportStreamSendBackingProviderGetTypeID_sTypeID;
}

uint64_t transportStreamBackingProvider_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportStreamSendBackingProviderCreateWithStreamID(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t Instance;
  _QWORD *v7;
  uint64_t v8;
  CFMutableSetRef Mutable;
  CFMutableDictionaryRef v10;
  uint64_t v11;

  if (a2 != 1734700576)
  {
    APSLogErrorAt();
    return 4294894945;
  }
  if (APTransportStreamSendBackingProviderGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTransportStreamSendBackingProviderGetTypeID_sInitOnce, &APTransportStreamSendBackingProviderGetTypeID_sTypeID, (dispatch_function_t)transportStreamBackingProvider_getTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v11 = 4294894946;
LABEL_19:
    APSLogErrorAt();
    return v11;
  }
  v7 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 64) = 0;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 16) = 0u;
  v8 = FigSimpleMutexCreate();
  v7[2] = v8;
  if (!v8)
  {
    v11 = 4294894946;
    goto LABEL_19;
  }
  v7[3] = 1734700576;
  v7[6] = APTransportPackageRTPCreate;
  v7[7] = APTransportPackageRTPCreateWithMessageSize;
  v7[8] = APTransportPackageRTPCreateWithMessageSizeAndType;
  Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E0C9B3B0]);
  v7[4] = Mutable;
  if (!Mutable)
  {
    v11 = 4294894946;
    goto LABEL_19;
  }
  v10 = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E0C9B3A0]);
  v7[5] = v10;
  if (!v10)
  {
    v11 = 4294894946;
    goto LABEL_19;
  }
  if (gLogCategory_APTransportStreamSendBackingProvider <= 40
    && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v11 = 0;
  *a4 = v7;
  return v11;
}

uint64_t APTransportStreamSendBackingProviderAcquireBBuf(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer **a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef);
  OpaqueCMBlockBuffer *v12;
  uint64_t DataPointer;
  char *dataPointerOut;
  CFTypeRef cf;

  dataPointerOut = 0;
  cf = 0;
  v6 = *MEMORY[0x1E0C9AE00];
  if ((_DWORD)a3 == 48)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(a1 + 56))(v6, a2, &cf);
    if ((_DWORD)v7)
    {
      v8 = v7;
LABEL_19:
      APSLogErrorAt();
      v12 = 0;
LABEL_20:
      if (cf)
        CFRelease(cf);
      goto LABEL_14;
    }
  }
  else
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(a1 + 64))(v6, a2, a3, &cf);
    if ((_DWORD)v9)
    {
      v8 = v9;
      goto LABEL_19;
    }
  }
  v10 = cf;
  v11 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v11)
    v12 = (OpaqueCMBlockBuffer *)v11(v10);
  else
    v12 = 0;
  DataPointer = CMBlockBufferGetDataPointer(v12, 0, 0, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
  {
    v8 = DataPointer;
    APSLogErrorAt();
    goto LABEL_20;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v12);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), dataPointerOut, cf);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  if (gLogCategory_APTransportStreamSendBackingProvider <= 10
    && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = 0;
  *a4 = v12;
  cf = 0;
LABEL_14:
  if (v12)
    CFRelease(v12);
  return v8;
}

uint64_t APTransportStreamSendBackingProviderRelinquishBBuf(uint64_t a1, void *a2)
{
  uint64_t DataPointer;
  const void *Value;
  const void *v6;
  uint64_t v7;
  char *dataPointerOut;

  dataPointerOut = 0;
  if (gLogCategory_APTransportStreamSendBackingProvider <= 10
    && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (!CFSetContainsValue(*(CFSetRef *)(a1 + 32), a2))
  {
    APSLogErrorAt();
    v7 = 4294894945;
    goto LABEL_9;
  }
  DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)a2, 0, 0, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
  {
    v7 = DataPointer;
LABEL_13:
    APSLogErrorAt();
    goto LABEL_9;
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), dataPointerOut);
  if (!Value)
  {
    v7 = 4294894944;
    goto LABEL_13;
  }
  v6 = Value;
  CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), dataPointerOut);
  CFRelease(v6);
  v7 = 0;
LABEL_9:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return v7;
}

uint64_t APTransportStreamSendBackingProviderCopyPackageForAcquiredBBuf(uint64_t a1, CMBlockBufferRef theBuffer, CFTypeRef *a3)
{
  uint64_t DataPointer;
  uint64_t v6;
  const void *Value;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;

  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  totalLengthOut = 0;
  if (theBuffer)
  {
    DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if ((_DWORD)DataPointer)
    {
      v6 = DataPointer;
      APSLogErrorAt();
    }
    else
    {
      v6 = 4294894944;
      if (lengthAtOffsetOut == totalLengthOut)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), dataPointerOut);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
        if (Value)
        {
          v6 = 0;
          *a3 = CFRetain(Value);
        }
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294894945;
  }
  return v6;
}

uint64_t APTransportStreamSendBackingProviderCopyPackageForGivenBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, _QWORD *a3)
{
  CFTypeRef v6;
  void (*v7)(CFTypeRef, OpaqueCMBlockBuffer *);
  uint64_t DataPointer;
  CFTypeRef v9;
  char *v11;
  CFTypeRef cf;

  v11 = 0;
  cf = 0;
  (*(void (**)(_QWORD, CFTypeRef *))(a1 + 48))(*MEMORY[0x1E0C9AE00], &cf);
  v6 = cf;
  if (a2)
  {
    v7 = *(void (**)(CFTypeRef, OpaqueCMBlockBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v7)
      v7(v6, a2);
    DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &v11);
    if ((_DWORD)DataPointer)
    {
      APSLogErrorAt();
    }
    else
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), a2);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v11, cf);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
    }
  }
  else
  {
    if (cf)
      v9 = CFRetain(cf);
    else
      v9 = 0;
    DataPointer = 0;
    *a3 = v9;
  }
  return DataPointer;
}

uint64_t APTransportStreamSendBackingProviderUpdateAcquiredBBuf(uint64_t a1, CMBlockBufferRef theBuffer)
{
  uint64_t DataPointer;
  uint64_t v5;
  const void *Value;
  void (*v7)(const void *, CMBlockBufferRef);
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;

  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  totalLengthOut = 0;
  if (theBuffer)
  {
    DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if ((_DWORD)DataPointer)
    {
      v5 = DataPointer;
      APSLogErrorAt();
    }
    else
    {
      v5 = 4294894944;
      if (lengthAtOffsetOut == totalLengthOut)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), dataPointerOut);
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
        if (Value)
        {
          v7 = *(void (**)(const void *, CMBlockBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v7)
            v7(Value, theBuffer);
          if (gLogCategory_APTransportStreamSendBackingProvider <= 10
            && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          return 0;
        }
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294894945;
  }
  return v5;
}

uint64_t transportStreamBackingProvider_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (gLogCategory_APTransportStreamSendBackingProvider <= 40
    && (gLogCategory_APTransportStreamSendBackingProvider != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return FigSimpleMutexDestroy();
}

uint64_t APBrowserCarSessionCreate(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  CFTypeRef v8;
  uint64_t DerivedStorage;
  dispatch_queue_t v10;
  dispatch_queue_t v11;
  CFTypeRef v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  const void *Value;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  dispatch_semaphore_t v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  _QWORD block[6];
  CFTypeRef cf;

  cf = 0;
  if (!a4)
    APBrowserCarSessionCreate_cold_1();
  APBrowserGetClassID();
  if (CMDerivedObjectCreate())
    APBrowserCarSessionCreate_cold_2();
  v8 = cf;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = dispatch_queue_create("APBrowserCarSessionInternalQueue", 0);
  *(_QWORD *)(DerivedStorage + 24) = v10;
  if (!v10)
    goto LABEL_39;
  v11 = dispatch_queue_create("APBrowserCarSessionEventQueue", 0);
  *(_QWORD *)(DerivedStorage + 112) = v11;
  if (!v11)
    goto LABEL_39;
  if (!a2)
  {
    *(_QWORD *)(DerivedStorage + 56) = 0;
    goto LABEL_19;
  }
  v12 = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 56) = v12;
  if (!v12)
  {
LABEL_19:
    APSLogErrorAt();
    v17 = 4294954516;
    goto LABEL_27;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
LABEL_39:
    APSLogErrorAt();
    v17 = 4294954510;
    goto LABEL_27;
  }
  v14 = Mutable;
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("PowerAssertion"));
    *(_QWORD *)(DerivedStorage + 48) = Value;
    if (Value)
    {
      CFRetain(Value);
      CFDictionarySetValue(v14, CFSTR("powerAssertion"), *(const void **)(DerivedStorage + 48));
    }
    v16 = CFDictionaryGetValue(a3, CFSTR("EventRecorder"));
    *(_QWORD *)(DerivedStorage + 40) = v16;
    if (v16)
    {
      CFRetain(v16);
      CFDictionarySetValue(v14, CFSTR("eventRecorder"), *(const void **)(DerivedStorage + 40));
    }
    *(_BYTE *)(DerivedStorage + 16) = CFDictionaryGetInt64() != 0;
  }
  if (APSIsVirtualMachine())
  {
    CFDictionarySetInt64();
    if (gLogCategory_APBrowserCarSession <= 50
      && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    CFDictionarySetInt64();
  }
  CFDictionarySetValue(v14, CFSTR("enableSessionEvents"), (const void *)*MEMORY[0x1E0C9AE50]);
  v18 = APCarPlayHelperSessionCreate(a1, (uint64_t)carSessionBrowser_handleCarPlayHelperEvent, (uint64_t)cf, v14, (_QWORD *)(DerivedStorage + 64));
  if ((_DWORD)v18)
  {
    v17 = v18;
    APSLogErrorAt();
  }
  else
  {
    v19 = dispatch_semaphore_create(0);
    *(_QWORD *)(DerivedStorage + 8) = v19;
    if (v19 && (v20 = dispatch_group_create(), (*(_QWORD *)DerivedStorage = v20) != 0))
    {
      dispatch_group_enter(v20);
      v17 = 0;
      *a4 = v8;
    }
    else
    {
      APSLogErrorAt();
      v17 = 4294954510;
    }
  }
  CFRelease(v14);
LABEL_27:
  v21 = *(NSObject **)DerivedStorage;
  if (*(_QWORD *)DerivedStorage)
  {
    v22 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __APBrowserCarSessionCreate_block_invoke;
    block[3] = &__block_descriptor_tmp_9;
    block[4] = cf;
    block[5] = DerivedStorage;
    dispatch_group_notify(v21, v22, block);
  }
  if ((_DWORD)v17)
  {
    if (gLogCategory_APBrowserCarSession <= 90
      && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (cf)
      CFRelease(cf);
  }
  return v17;
}

void carSessionBrowser_handleCarPlayHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD block[6];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
    CFRetain(a4);
  if (a3)
    CFRetain(a3);
  v8 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __carSessionBrowser_handleCarPlayHelperEvent_block_invoke;
  block[3] = &__block_descriptor_tmp_31_0;
  v10 = a2;
  block[4] = a4;
  block[5] = a3;
  dispatch_async(v8, block);
}

void carSessionBrowser_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[8];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(DerivedStorage + 120);
  if (v7)
  {
    v8 = DerivedStorage;
    v9 = *(_QWORD *)(DerivedStorage + 128);
    if (gLogCategory_APBrowserCarSession <= 20
      && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
    {
      APBrowserGetEventString(a2);
      LogPrintF();
    }
    if (a1)
      CFRetain(a1);
    if (a3)
      CFRetain(a3);
    v10 = *(NSObject **)(v8 + 112);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carSessionBrowser_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_tmp_44;
    block[4] = v7;
    block[5] = a1;
    v12 = a2;
    block[6] = a3;
    block[7] = v9;
    dispatch_async(v10, block);
  }
}

uint64_t carSessionBrowser_invalidate()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carSessionBrowser_invalidate_block_invoke;
    block[3] = &__block_descriptor_tmp_10;
    block[4] = DerivedStorage;
    dispatch_sync(v1, block);
  }
  return 0;
}

void carSessionBrowser_finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carSessionBrowser_finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_11_0;
    block[4] = DerivedStorage;
    dispatch_sync(v1, block);
    carSessionBrowser_invalidate();
    v2 = *(NSObject **)(DerivedStorage + 8);
    if (v2)
      dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 24), &__block_literal_global_9);
    v3 = *(NSObject **)(DerivedStorage + 24);
    if (v3)
    {
      dispatch_release(v3);
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
  }
  v4 = *(NSObject **)(DerivedStorage + 112);
  if (v4)
  {
    dispatch_sync(v4, &__block_literal_global_14);
    v5 = *(NSObject **)(DerivedStorage + 112);
    if (v5)
    {
      dispatch_release(v5);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
  }
  v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 64);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v10 = *(void **)(DerivedStorage + 80);
  if (v10)
  {
    os_release(v10);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v11 = *(NSObject **)(DerivedStorage + 8);
  if (v11)
  {
    dispatch_release(v11);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

uint64_t __carSessionBrowser_invalidate_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v1 + 32))
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 64);
    if (result)
    {
      result = APTransportKeepAliveControllerGetCMBaseObject(result);
      if (result)
      {
        v3 = result;
        result = CMBaseObjectGetVTable();
        v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
        if (v4)
          result = v4(v3);
      }
    }
    *(_BYTE *)(*(_QWORD *)(v2 + 32) + 32) = 1;
  }
  return result;
}

uint64_t __carSessionBrowser_finalize_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 120) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 128) = 0;
  return result;
}

uint64_t carSessionBrowser_getMode(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __carSessionBrowser_getMode_block_invoke;
    block[3] = &unk_1E8257E68;
    block[4] = &v8;
    block[5] = DerivedStorage;
    block[6] = a2;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    v5 = 4294954516;
    *((_DWORD *)v9 + 6) = -12780;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t carSessionBrowser_setMode(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[7];
  __int16 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == 1)
  {
    v6 = 4294895234;
    APSLogErrorAt();
    *((_DWORD *)v11 + 6) = -72062;
  }
  else
  {
    v5 = *(NSObject **)(DerivedStorage + 24);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __carSessionBrowser_setMode_block_invoke;
    v8[3] = &unk_1E8257E90;
    v8[4] = &v10;
    v8[5] = DerivedStorage;
    v9 = a2;
    v8[6] = a1;
    dispatch_sync(v5, v8);
    v6 = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t carSessionBrowser_setEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 24);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __carSessionBrowser_setEventHandler_block_invoke;
  v9[3] = &unk_1E8257EB8;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  v9[6] = a2;
  v9[7] = a3;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t carSessionBrowser_getDNSForDeviceID(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t DerivedStorage;
  NSObject *v14;
  uint64_t v15;
  _QWORD v17[10];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 || !a6)
  {
    APSLogErrorAt();
    v15 = 4294954516;
    *((_DWORD *)v19 + 6) = -12780;
  }
  else
  {
    v14 = *(NSObject **)(DerivedStorage + 24);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 0x40000000;
    v17[2] = __carSessionBrowser_getDNSForDeviceID_block_invoke;
    v17[3] = &unk_1E8257EE0;
    v17[4] = &v18;
    v17[5] = DerivedStorage;
    v17[6] = a2;
    v17[7] = a6;
    v17[8] = a7;
    v17[9] = a8;
    dispatch_sync(v14, v17);
    v15 = *((unsigned int *)v19 + 6);
  }
  _Block_object_dispose(&v18, 8);
  return v15;
}

uint64_t __carSessionBrowser_getMode_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  if (*(_BYTE *)(v2 + 32))
  {
    result = APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = -12785;
  }
  else
  {
    if (*(_BYTE *)(v2 + 72))
      v3 = 3;
    else
      v3 = 0;
    **(_WORD **)(result + 48) = v3;
  }
  return result;
}

void __carSessionBrowser_setMode_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD);
  uint64_t v9;
  uint64_t v10;
  int v11;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v2 + 32))
  {
    APSLogErrorAt();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v11 = -12785;
LABEL_35:
    *(_DWORD *)(v10 + 24) = v11;
    return;
  }
  if (!*(_QWORD *)(v2 + 120))
  {
    APSLogErrorAt();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v11 = -72060;
    goto LABEL_35;
  }
  if (*(_WORD *)(a1 + 56))
  {
    if (*(_WORD *)(a1 + 56) == 3)
    {
      if (!*(_BYTE *)(v2 + 72))
      {
        if (gLogCategory_APBrowserCarSession <= 50
          && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v3 = *(_QWORD *)(a1 + 40);
        if (*(_BYTE *)(v3 + 16))
        {
          if (*(_QWORD *)(v3 + 48))
          {
            APSPowerAssertionRaiseTemporary();
            v3 = *(_QWORD *)(a1 + 40);
          }
          v4 = *(_QWORD *)(v3 + 64);
          v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v5)
            v5(v4, 1);
        }
        *(_BYTE *)(*(_QWORD *)(a1 + 40) + 72) = 1;
      }
    }
    else
    {
      if (gLogCategory_APBrowserCarSession <= 60
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -72062;
      APSLogErrorAt();
    }
  }
  else if (*(_BYTE *)(v2 + 72))
  {
    if (gLogCategory_APBrowserCarSession <= 50
      && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(v6 + 16))
    {
      v7 = *(_QWORD *)(v6 + 64);
      v8 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v8)
        v8(v7, 0);
      v9 = *(_QWORD *)(a1 + 40);
      ++*(_DWORD *)(v9 + 76);
    }
    else
    {
      carSessionBrowser_dispatchEvent(*(const void **)(a1 + 48), 7, 0);
      v9 = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(v9 + 72) = 0;
  }
}

_QWORD *__carSessionBrowser_setEventHandler_block_invoke(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = result;
  v2 = result[5];
  if (*(_BYTE *)(v2 + 32))
  {
    result = (_QWORD *)APSLogErrorAt();
    v3 = *(_QWORD *)(v1[4] + 8);
    v4 = -12785;
  }
  else
  {
    if (!*(_BYTE *)(v2 + 72) && !*(_DWORD *)(v2 + 76))
    {
      *(_QWORD *)(v2 + 120) = result[6];
      *(_QWORD *)(result[5] + 128) = result[7];
      return result;
    }
    result = (_QWORD *)APSLogErrorAt();
    v3 = *(_QWORD *)(v1[4] + 8);
    v4 = -72061;
  }
  *(_DWORD *)(v3 + 24) = v4;
  return result;
}

uint64_t __carSessionBrowser_getDNSForDeviceID_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  _BYTE *v4;
  uint64_t v5;
  int v6;

  v2 = a1[5];
  if (*(_BYTE *)(v2 + 32))
  {
    result = APSLogErrorAt();
    v5 = *(_QWORD *)(a1[4] + 8);
    v6 = -12785;
LABEL_20:
    *(_DWORD *)(v5 + 24) = v6;
    return result;
  }
  if (*(_DWORD *)(v2 + 76) || !*(_BYTE *)(v2 + 72))
  {
    result = APSLogErrorAt();
    v5 = *(_QWORD *)(a1[4] + 8);
    v6 = -72061;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v2 + 88) != a1[6])
  {
    result = APSLogErrorAt();
    v5 = *(_QWORD *)(a1[4] + 8);
    v6 = -72063;
    goto LABEL_20;
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = APSNetworkAddressGetCStringRepresentation();
  result = *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24);
  if ((_DWORD)result)
    return APSLogErrorAt();
  v4 = (_BYTE *)a1[9];
  if (v4)
  {
    *(_DWORD *)(a1[5] + 104) = 2;
    *v4 = 2;
    if (gLogCategory_APBrowserCarSession <= 40)
    {
      if (gLogCategory_APBrowserCarSession != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  else if (gLogCategory_APBrowserCarSession <= 40)
  {
    if (gLogCategory_APBrowserCarSession != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

void __carSessionBrowser_handleCarPlayHelperEvent_block_invoke(uint64_t a1)
{
  const void *v2;
  const __CFDictionary *v3;
  uint64_t DerivedStorage;
  const void *Value;
  const void *v6;
  const void *v7;
  const __CFString *v8;
  uint64_t v9;
  int Int64Ranged;
  const void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  os_signpost_id_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  CFMutableDictionaryRef Mutable;
  const void *v22;
  uint64_t v23;
  dispatch_group_t *v24;
  const __CFAllocator *v25;
  const __CFAllocator *v26;
  const void **v27;
  int v28;
  int v29;
  const void *v30;
  const void *v31;
  void *v32;
  const void *v33;
  const void *v34;
  const __CFString *v35;
  CFTypeRef cf;
  uint8_t buf[16];
  void *v38;
  int v39;

  switch(*(_DWORD *)(a1 + 48))
  {
    case 0:
      if (gLogCategory_APBrowserCarSession <= 30
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      carSessionBrowser_networkChanged(*(const void **)(a1 + 32), *(const __CFDictionary **)(a1 + 40));
      goto LABEL_96;
    case 1:
      if (gLogCategory_APBrowserCarSession <= 30
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v2 = *(const void **)(a1 + 32);
      v3 = *(const __CFDictionary **)(a1 + 40);
      v39 = 0;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v38 = 0;
      Value = CFDictionaryGetValue(v3, CFSTR("advertiserInfo"));
      if (!Value || (v6 = Value, (v7 = CFDictionaryGetValue(v3, CFSTR("networkAddress"))) == 0))
      {
        APSLogErrorAt();
        Mutable = 0;
        v8 = 0;
        v39 = -12780;
        goto LABEL_87;
      }
      cf = v7;
      v8 = (const __CFString *)APAdvertiserInfoCopyProperty((uint64_t)v6, 0, CFSTR("deviceID"), 0, &v39);
      if (!v39)
      {
        FigCFStringGetCStringPtrAndBufferToFree();
        v35 = v8;
        CFStringGetLength(v8);
        v9 = TextToHardwareAddressScalar();
        Int64Ranged = CFDictionaryGetInt64Ranged();
        if (v39)
        {
          APSLogErrorAt();
          Mutable = 0;
          goto LABEL_85;
        }
        v11 = CFDictionaryGetValue(v3, CFSTR("sessionHostInfo"));
        if (Int64Ranged == 1)
        {
          if (*(_QWORD *)(DerivedStorage + 40))
            APSEventRecorderRecordEventWithFlags();
          v12 = LogCategoryCopyOSLogHandle();
          v13 = (void *)v12;
          if (v12)
            v14 = v12;
          else
            v14 = MEMORY[0x1E0C81028];
          if (!os_signpost_enabled(v14))
            goto LABEL_43;
          *(_WORD *)buf = 0;
          v15 = "AP_SIGNPOST_ENDPOINTADDED_USB";
          v16 = v14;
          v17 = 730662900;
        }
        else
        {
          if (Int64Ranged != 2)
            goto LABEL_45;
          if (*(_QWORD *)(DerivedStorage + 40))
            APSEventRecorderRecordEventWithFlags();
          v18 = LogCategoryCopyOSLogHandle();
          v13 = (void *)v18;
          if (v18)
            v19 = v18;
          else
            v19 = MEMORY[0x1E0C81028];
          if (!os_signpost_enabled(v19))
          {
LABEL_43:
            if (v13)
              os_release(v13);
LABEL_45:
            v20 = *(_QWORD *)(DerivedStorage + 88);
            if (v20 == v9)
            {
              if (*(_DWORD *)(DerivedStorage + 104) != Int64Ranged)
                goto LABEL_62;
              if (FigCFEqual())
              {
                Mutable = 0;
LABEL_84:
                APCarPlayControlServerInjectCommand(*(_QWORD *)(DerivedStorage + 56), v9, (uint64_t)"connect");
LABEL_85:
                v8 = v35;
                goto LABEL_86;
              }
              v20 = *(_QWORD *)(DerivedStorage + 88);
            }
            if (v20 && v20 != v9)
            {
              v25 = CFGetAllocator(v2);
              Mutable = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!Mutable)
                goto LABEL_105;
              CFDictionarySetInt64();
              if (gLogCategory_APBrowserCarSession <= 30
                && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              carSessionBrowser_dispatchEvent(v2, 5, Mutable);
              CFRelease(Mutable);
            }
LABEL_62:
            v26 = CFGetAllocator(v2);
            Mutable = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (Mutable)
            {
              CFDictionarySetInt64();
              CFDictionarySetValue(Mutable, CFSTR("deviceInfo"), v6);
              v27 = (const void **)MEMORY[0x1E0C9AE40];
              if (Int64Ranged == 1)
                v27 = (const void **)MEMORY[0x1E0C9AE50];
              CFDictionarySetValue(Mutable, CFSTR("IsConnectedOverUSB"), *v27);
              if (v11)
                CFDictionarySetValue(Mutable, CFSTR("sessionHostInfo"), v11);
              v28 = gLogCategory_APBrowserCarSession;
              if (gLogCategory_APBrowserCarSession > 30)
                goto LABEL_79;
              if (gLogCategory_APBrowserCarSession == -1)
              {
                if (!_LogCategory_Initialize())
                {
LABEL_79:
                  if (*(_QWORD *)(DerivedStorage + 88) == v9)
                    v29 = 4;
                  else
                    v29 = 3;
                  carSessionBrowser_dispatchEvent(v2, v29, Mutable);
                  *(_DWORD *)(DerivedStorage + 104) = Int64Ranged;
                  v30 = *(const void **)(DerivedStorage + 96);
                  *(_QWORD *)(DerivedStorage + 88) = v9;
                  *(_QWORD *)(DerivedStorage + 96) = cf;
                  CFRetain(cf);
                  if (v30)
                    CFRelease(v30);
                  goto LABEL_84;
                }
                v28 = gLogCategory_APBrowserCarSession;
              }
              if (v28 <= 20)
              {
                if (v28 != -1
                  || (_LogCategory_Initialize(),
                      v28 = gLogCategory_APBrowserCarSession,
                      gLogCategory_APBrowserCarSession <= 20))
                {
                  if (v28 == -1)
                    _LogCategory_Initialize();
                }
              }
              LogPrintF();
              goto LABEL_79;
            }
LABEL_105:
            APSLogErrorAt();
            v39 = -12786;
            v8 = v35;
            goto LABEL_87;
          }
          *(_WORD *)buf = 0;
          v15 = "AP_SIGNPOST_ENDPOINTADDED_WIFI";
          v16 = v19;
          v17 = 722862484;
        }
        _os_signpost_emit_with_name_impl(&dword_1C9382000, v16, OS_SIGNPOST_EVENT, v17, v15, "", buf, 2u);
        goto LABEL_43;
      }
      APSLogErrorAt();
      Mutable = 0;
LABEL_86:
      if (!v39)
        goto LABEL_89;
LABEL_87:
      *(_QWORD *)(DerivedStorage + 88) = 0;
      *(_DWORD *)(DerivedStorage + 104) = 0;
      v31 = *(const void **)(DerivedStorage + 96);
      if (v31)
      {
        CFRelease(v31);
        *(_QWORD *)(DerivedStorage + 96) = 0;
      }
LABEL_89:
      if (v8)
        CFRelease(v8);
      if (Mutable)
        CFRelease(Mutable);
      v32 = v38;
      if (v38)
      {
        v38 = 0;
        free(v32);
      }
      if (v39)
        goto LABEL_20;
LABEL_96:
      v33 = *(const void **)(a1 + 32);
      if (v33)
        CFRelease(v33);
      v34 = *(const void **)(a1 + 40);
      if (v34)
        CFRelease(v34);
      return;
    case 2:
      if (gLogCategory_APBrowserCarSession <= 30
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v22 = *(const void **)(a1 + 32);
      v23 = CMBaseObjectGetDerivedStorage();
      carSessionBrowser_networkChanged(v22, 0);
      carSessionBrowser_dispatchEvent(v22, 7, 0);
      --*(_DWORD *)(v23 + 76);
      goto LABEL_96;
    case 3:
      if (gLogCategory_APBrowserCarSession <= 30
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v24 = (dispatch_group_t *)CMBaseObjectGetDerivedStorage();
      dispatch_group_leave(*v24);
      goto LABEL_96;
    default:
      if (gLogCategory_APBrowserCarSession <= 90
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
LABEL_20:
      APSLogErrorAt();
      goto LABEL_96;
  }
}

uint64_t carSessionBrowser_networkChanged(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *Value;
  uint64_t Int64;
  const void *v7;
  void *v8;
  void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (Value = CFDictionaryGetValue(a2, CFSTR("interfaceName")), Int64 = CFDictionaryGetInt64(), Value))
  {
    if (!*(_QWORD *)(DerivedStorage + 80) && Int64)
    {
      CFDictionaryGetInt64Ranged();
      SNPrintF();
      if (gLogCategory_APBrowserCarSession <= 50
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_QWORD *)(DerivedStorage + 80) = os_transaction_create();
    }
  }
  else if (*(_QWORD *)(DerivedStorage + 88))
  {
    *(_QWORD *)(DerivedStorage + 88) = 0;
    *(_DWORD *)(DerivedStorage + 104) = 0;
    v7 = *(const void **)(DerivedStorage + 96);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    carSessionBrowser_dispatchEvent(a1, 6, 0);
    if (*(_QWORD *)(DerivedStorage + 80))
    {
      v8 = (void *)os_transaction_copy_description();
      if (gLogCategory_APBrowserCarSession <= 50
        && (gLogCategory_APBrowserCarSession != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      free(v8);
      v9 = *(void **)(DerivedStorage + 80);
      if (v9)
      {
        os_release(v9);
        *(_QWORD *)(DerivedStorage + 80) = 0;
      }
    }
  }
  APSEventRecorderResetEvent();
  return APSEventRecorderResetEvent();
}

void __carSessionBrowser_dispatchEvent_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t APTransportDeviceGetTypeID()
{
  if (APTransportDeviceGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTransportDeviceGetTypeID_sInitOnce, &APTransportDeviceGetTypeID_sTypeID, (dispatch_function_t)transportDevice_getTypeID);
  return APTransportDeviceGetTypeID_sTypeID;
}

uint64_t transportDevice_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportDeviceCreate(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  if (a2 && a3)
  {
    v7 = transportDevice_create();
    if (v7)
    {
      v8 = (_QWORD *)v7;
      *(_QWORD *)(v7 + 16) = CFRetain(a2);
      v8[3] = CFRetain(a3);
      v9 = FigSimpleMutexCreate();
      v8[6] = v9;
      if (v9)
      {
        if (gLogCategory_APTransportDevice <= 30
          && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        result = 0;
        *a4 = v8;
      }
      else
      {
        APSLogErrorAt();
        CFRelease(v8);
        return 4294960568;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294954510;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
  return result;
}

uint64_t transportDevice_create()
{
  uint64_t Instance;
  uint64_t v1;

  if (APTransportDeviceGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTransportDeviceGetTypeID_sInitOnce, &APTransportDeviceGetTypeID_sTypeID, (dispatch_function_t)transportDevice_getTypeID);
  Instance = _CFRuntimeCreateInstance();
  v1 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 64) = 0;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
  }
  else
  {
    APSLogErrorAt();
  }
  return v1;
}

uint64_t APTransportDeviceCreateWithNetworkAddress(uint64_t a1, const void *a2, char a3, const void *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (a2 && a4 && a5)
  {
    v9 = transportDevice_create();
    if (v9)
    {
      v10 = v9;
      *(_QWORD *)(v9 + 24) = CFRetain(a4);
      *(_QWORD *)(v10 + 32) = CFRetain(a2);
      *(_BYTE *)(v10 + 40) = a3;
      if (gLogCategory_APTransportDevice <= 30
        && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      result = 0;
      *a5 = v10;
    }
    else
    {
      APSLogErrorAt();
      return 4294954510;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
  return result;
}

BOOL APTransportDeviceShouldPerformTrafficRegistration(uint64_t a1)
{
  return !*(_QWORD *)(a1 + 32) || CFDictionaryGetInt64() != 0;
}

const void *APTransportDeviceGetDiscoveryID(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("deviceID"));
}

const void *APTransportDeviceGetAdvertiserInfo(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("deviceInfo"));
}

const void *APTransportDeviceGetEventRecorder(uint64_t a1)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("eventRecorder"));
}

BOOL APTransportDeviceIsConnectedOverUSB()
{
  return CFDictionaryGetInt64() != 0;
}

BOOL APTransportDeviceIsLegacyPresent()
{
  return CFDictionaryGetInt64() != 0;
}

BOOL APTransportDeviceIsModernPresent()
{
  return CFDictionaryGetInt64() != 0;
}

BOOL APTransportDeviceIsModernPresentOnInfra()
{
  return CFDictionaryGetInt64() != 0;
}

BOOL APTransportDeviceIsPresentOnInfra()
{
  return CFDictionaryGetInt64() != 0;
}

uint64_t APTransportDeviceGetTransportsRequiringBroker()
{
  return CFDictionaryGetInt64Ranged();
}

uint64_t APTransportDeviceCopyBrokeredReceiverInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t Int64;
  uint64_t result;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(_QWORD *)(a1 + 16);
  Int64 = CFDictionaryGetInt64();
  result = CMBaseObjectGetVTable();
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 104);
  if (v12)
    return v12(v9, Int64, a2, a3, a4, a5);
  return result;
}

BOOL APTransportDeviceHasMinimumRelationship(uint64_t a1, int a2)
{
  FigCFDictionaryGetInt32IfPresent();
  if (a2 == 2)
    return 0;
  if (a2 == 1)
    return 0;
  return a2 == 0;
}

uint64_t APTransportDeviceIsAssistedDevice(uint64_t a1)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 24), CFSTR("assistedInfo"));
}

CFTypeRef APTransportDeviceCopyAssistedInfo(uint64_t a1)
{
  CFTypeRef result;

  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("assistedInfo"));
  if (result)
    return CFRetain(result);
  return result;
}

BOOL APTransportDeviceIsSelf()
{
  uint64_t Int64;
  uint64_t v1;

  Int64 = CFDictionaryGetInt64();
  v1 = APSGetDeviceID();
  return CFDictionaryGetInt64() || Int64 == v1;
}

BOOL APTransportDeviceIsSameDevice(uint64_t a1, uint64_t a2)
{
  uint64_t Int64;
  uint64_t v5;

  Int64 = CFDictionaryGetInt64();
  v5 = CFDictionaryGetInt64();
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && Int64 == v5;
}

uint64_t APTransportDeviceIsReachable(uint64_t a1, int a2)
{
  uint64_t v4;
  int Int64Ranged;
  uint64_t v7;
  uint64_t Int64;
  uint64_t (*v9)(uint64_t, uint64_t, BOOL, _QWORD, BOOL, char *, uint64_t, _QWORD);
  int v10;
  int v11;
  CFTypeRef v12;
  CFTypeRef v13;
  int v14;
  char v15[1024];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v13 = 0;
  if (*(_QWORD *)(a1 + 32))
    return *(unsigned __int8 *)(a1 + 40) == a2;
  if (a2 == 3)
  {
    transportDevice_getNANDataSession(a1, 2, &v14);
    if (v14)
      goto LABEL_21;
  }
  else
  {
    if (a2 != 2)
    {
      bzero(v15, 0x400uLL);
      Int64Ranged = CFDictionaryGetInt64Ranged();
      v7 = *(_QWORD *)(a1 + 16);
      Int64 = CFDictionaryGetInt64();
      v9 = *(uint64_t (**)(uint64_t, uint64_t, BOOL, _QWORD, BOOL, char *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v9)
      {
        if (a2 == 4)
          v10 = 24;
        else
          v10 = 0;
        if (!a2)
          v10 = 3;
        v11 = v9(v7, Int64, a2 == 1, 0, (v10 & Int64Ranged) != 0, v15, 1024, 0);
        if (!v11)
        {
          if (a2 != 4)
            return 1;
          if (aptransportdevice_copyInterfaceNameFromDNSName(v15, &v13))
          {
            APSLogErrorAt();
            v4 = 0;
            v12 = v13;
            if (!v13)
              return v4;
          }
          else
          {
            v12 = v13;
            v4 = APSIsDirectLinkInterface();
            if (!v12)
              return v4;
          }
          CFRelease(v12);
          return v4;
        }
        v4 = 0;
        if (v11 == -6727)
          return v4;
      }
LABEL_21:
      APSLogErrorAt();
      return 0;
    }
    transportDevice_getNANDataSession(a1, 1, &v14);
    if (v14)
      goto LABEL_21;
  }
  return (uint64_t)APTNANDataSessionIsActivatable();
}

uint64_t transportDevice_getNANDataSession(uint64_t a1, int a2, int *a3)
{
  uint64_t *v6;
  const void *v7;
  uint64_t v8;
  int v9;
  const void *v10;
  uint64_t Int64;
  int v12;
  int v13;
  uint64_t v14;

  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
  if (a2 == 2)
  {
    v6 = (uint64_t *)(a1 + 64);
    if (!*(_QWORD *)(a1 + 64))
    {
      v10 = *(const void **)(a1 + 16);
      Int64 = CFDictionaryGetInt64();
      v12 = APTNANDataSessionCreate(2, v10, Int64, (_QWORD *)(a1 + 64));
      if (!v12)
      {
        if (gLogCategory_APTransportDevice > 50
          || gLogCategory_APTransportDevice == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_21;
        }
LABEL_12:
        LogPrintF();
        goto LABEL_21;
      }
      v13 = v12;
      goto LABEL_24;
    }
LABEL_21:
    v13 = 0;
    v14 = *v6;
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    v6 = (uint64_t *)(a1 + 56);
    if (!*(_QWORD *)(a1 + 56))
    {
      v7 = *(const void **)(a1 + 16);
      v8 = CFDictionaryGetInt64();
      v9 = APTNANDataSessionCreate(1, v7, v8, (_QWORD *)(a1 + 56));
      if (!v9)
      {
        if (gLogCategory_APTransportDevice > 50
          || gLogCategory_APTransportDevice == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_21;
        }
        goto LABEL_12;
      }
      v13 = v9;
LABEL_24:
      APSLogErrorAt();
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  v13 = -12780;
  APSLogErrorAt();
  if (gLogCategory_APTransportDevice > 90)
  {
LABEL_25:
    v14 = 0;
    goto LABEL_26;
  }
  if (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize())
    LogPrintF();
  v14 = 0;
  v13 = -12780;
LABEL_26:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
  *a3 = v13;
  return v14;
}

uint64_t aptransportdevice_copyInterfaceNameFromDNSName(char *a1, CFTypeRef *a2)
{
  char *v3;
  const char *v4;
  char *v5;
  int64_t v6;
  unsigned int v7;
  CFStringRef v8;
  CFStringRef v9;
  unsigned int v11;
  char cStr[8];
  uint64_t v13;
  char v14[17];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)cStr = 0;
  v13 = 0;
  if (!a1)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  v3 = strchr(a1, 37);
  if (!v3)
    return 4294960569;
  v4 = v3 + 1;
  v5 = strchr(v3 + 1, 58);
  if (!v5)
    v5 = (char *)&v4[strlen(v4)];
  v6 = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x11)
    goto LABEL_18;
  __memcpy_chk();
  v14[v6] = 0;
  v7 = if_nametoindex(v14);
  v11 = v7;
  if (v7)
    goto LABEL_9;
  if (sscanf(v14, "%u", &v11) != 1)
  {
LABEL_18:
    APSLogErrorAt();
    return 4294960554;
  }
  v7 = v11;
LABEL_9:
  if (!if_indextoname(v7, cStr))
  {
    APSLogErrorAt();
    return 4294960569;
  }
  v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  if (v8)
  {
    v9 = v8;
    *a2 = CFRetain(v8);
    CFRelease(v9);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
}

void APTransportDeviceGetInfraReachability(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  char IsReachable;
  char v9;
  char v10;
  char Int64Ranged;
  uint64_t v12;
  uint64_t Int64;
  uint64_t (*v14)(uint64_t, uint64_t, _QWORD, _QWORD, BOOL, char *, uint64_t, _QWORD);
  int v15;
  int v16;
  CFTypeRef cf;
  char v18[1024];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  bzero(v18, 0x400uLL);
  cf = 0;
  IsReachable = APTransportDeviceIsReachable(a1, 0);
  v9 = APTransportDeviceIsReachable(a1, 4);
  v10 = 0;
  if (!*(_QWORD *)(a1 + 32))
  {
    Int64Ranged = CFDictionaryGetInt64Ranged();
    v12 = *(_QWORD *)(a1 + 16);
    Int64 = CFDictionaryGetInt64();
    v14 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, BOOL, char *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v14)
      goto LABEL_6;
    v15 = v14(v12, Int64, 0, 0, (Int64Ranged & 3) != 0, v18, 1024, 0);
    if (!v15)
    {
      if (!aptransportdevice_copyInterfaceNameFromDNSName(v18, &cf))
      {
        v10 = APSIsEthernetInterface();
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    v16 = v15;
    v10 = 0;
    if (v16 != -6727)
    {
LABEL_6:
      APSLogErrorAt();
      v10 = 0;
    }
  }
LABEL_7:
  if (a2)
    *a2 = IsReachable;
  if (a3)
    *a3 = v9;
  if (a4)
    *a4 = v10;
  if (cf)
    CFRelease(cf);
}

uint64_t APTransportDeviceGetAddress(uint64_t a1, int a2, uint64_t a3, _BYTE *a4, uint64_t a5, char *a6, uint64_t a7)
{
  int v14;
  int v15;
  uint64_t CStringRepresentation;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t BrowserAddress;
  uint64_t NANDataSession;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef cf;
  unsigned int v29;

  v29 = 0;
  cf = 0;
  if (a2 == 4)
    v14 = 24;
  else
    v14 = 0;
  if (a2)
    v15 = v14;
  else
    v15 = 3;
  if ((v15 & CFDictionaryGetInt64Ranged()) != 0)
  {
    if (gLogCategory_APTransportDevice <= 30
      && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
    {
      CFDictionaryGetInt64Ranged();
      LogPrintF();
    }
    v17 = 1;
    BrowserAddress = APTransportDeviceGetBrowserAddress(a1, a2, a3, 1, a4, a5, a7);
    if (!(_DWORD)BrowserAddress)
      goto LABEL_23;
    v19 = BrowserAddress;
LABEL_36:
    APSLogErrorAt();
    goto LABEL_25;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    if (*(unsigned __int8 *)(a1 + 40) != a2)
    {
      APSLogErrorAt();
      v19 = 4294960569;
      goto LABEL_25;
    }
    CStringRepresentation = APSNetworkAddressGetCStringRepresentation();
    if ((_DWORD)CStringRepresentation)
    {
      v19 = CStringRepresentation;
      goto LABEL_36;
    }
LABEL_14:
    v17 = 0;
    goto LABEL_23;
  }
  if (a2 == 3)
  {
    NANDataSession = transportDevice_getNANDataSession(a1, 2, (int *)&v29);
    v19 = v29;
    if (v29)
      goto LABEL_36;
    v25 = APTNANDataSessionCopyPeerAddress(NANDataSession, (uint64_t)&cf);
    if ((_DWORD)v25)
    {
      v19 = v25;
      goto LABEL_36;
    }
    v26 = APSNetworkAddressGetCStringRepresentation();
    if ((_DWORD)v26)
    {
      v19 = v26;
      goto LABEL_36;
    }
    goto LABEL_14;
  }
  if (a2 == 2)
  {
    v18 = transportDevice_getNANDataSession(a1, 1, (int *)&v29);
    v19 = v29;
    if (v29)
      goto LABEL_36;
    v20 = APTNANDataSessionCopyPeerAddress(v18, (uint64_t)&cf);
    if ((_DWORD)v20)
    {
      v19 = v20;
      goto LABEL_36;
    }
    v21 = APSNetworkAddressGetCStringRepresentation();
    if ((_DWORD)v21)
    {
      v19 = v21;
      goto LABEL_36;
    }
    goto LABEL_14;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    v19 = 4294960561;
    goto LABEL_36;
  }
  v27 = APTransportDeviceGetBrowserAddress(a1, a2, a3, 0, a4, a5, a7);
  v17 = 0;
  if ((_DWORD)v27)
  {
    v19 = v27;
    goto LABEL_36;
  }
LABEL_23:
  v19 = 0;
  if (a6)
    *a6 = v17;
LABEL_25:
  if (cf)
    CFRelease(cf);
  return v19;
}

uint64_t APTransportDeviceGetBrowserAddress(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t Int64;
  uint64_t (*v15)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v13 = *(_QWORD *)(a1 + 16);
  Int64 = CFDictionaryGetInt64();
  v15 = *(uint64_t (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v15)
  {
    v17 = 4294954514;
    goto LABEL_6;
  }
  v16 = v15(v13, Int64, a2 == 1, a3, a4, a5, a6, a7);
  v17 = v16;
  if ((_DWORD)v16)
  {
    if ((_DWORD)v16 == -6727)
    {
      v17 = 0;
      *a5 = 0;
      return v17;
    }
LABEL_6:
    APSLogErrorAt();
  }
  return v17;
}

uint64_t APTransportDeviceResolveAddress(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t Int64;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  if (a3 == 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    Int64 = CFDictionaryGetInt64();
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 96);
    if (v10)
      return v10(v8, Int64, a2, 1, a4, a5);
    v12 = 4294954514;
    APSLogErrorAt();
    a2 = 0;
  }
  else
  {
    v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a5 + 16))(a5, a2, 0, 0, a4, v12);
}

uint64_t APTransportDeviceStartTracking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Int64;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  if (*(_QWORD *)(a1 + 32))
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  Int64 = CFDictionaryGetInt64();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v5)
  {
    v6 = 4294954514;
LABEL_7:
    APSLogErrorAt();
    return v6;
  }
  v6 = v5(v2, Int64, a2);
  if ((_DWORD)v6)
    goto LABEL_7;
  return v6;
}

uint64_t APTransportDeviceStopTracking(uint64_t a1)
{
  uint64_t v1;
  uint64_t Int64;
  uint64_t (*v3)(uint64_t, uint64_t);

  if (*(_QWORD *)(a1 + 32))
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    Int64 = CFDictionaryGetInt64();
    v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v3)
    {
      v1 = 4294954514;
LABEL_7:
      APSLogErrorAt();
      return v1;
    }
    v1 = v3(v1, Int64);
    if ((_DWORD)v1)
      goto LABEL_7;
  }
  return v1;
}

uint64_t APTransportDeviceReconfirm(uint64_t a1)
{
  uint64_t v1;
  uint64_t Int64;
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);

  if (*(_QWORD *)(a1 + 32))
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    Int64 = CFDictionaryGetInt64();
    v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v3)
    {
      v1 = 4294954514;
LABEL_7:
      APSLogErrorAt();
      return v1;
    }
    v1 = v3(v1, Int64, 0);
    if ((_DWORD)v1)
      goto LABEL_7;
  }
  return v1;
}

uint64_t APTransportDeviceTriggerWoLCachingIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Int64;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  if (*(_QWORD *)(a1 + 32))
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  Int64 = CFDictionaryGetInt64();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v5)
  {
    v6 = 4294954514;
LABEL_7:
    APSLogErrorAt();
    return v6;
  }
  v6 = v5(v2, Int64, a2);
  if ((_DWORD)v6)
    goto LABEL_7;
  return v6;
}

uint64_t APTransportDeviceCopyNANDataSession(uint64_t a1, int a2, _QWORD *a3)
{
  const void *NANDataSession;
  uint64_t v5;
  unsigned int v7;

  v7 = 0;
  if (a3)
  {
    NANDataSession = (const void *)transportDevice_getNANDataSession(a1, a2, (int *)&v7);
    v5 = v7;
    if (v7)
    {
      APSLogErrorAt();
    }
    else
    {
      if (NANDataSession)
        NANDataSession = CFRetain(NANDataSession);
      v5 = 0;
      *a3 = NANDataSession;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294954516;
  }
  return v5;
}

const void *APTransportDeviceCopyProximityData(uint64_t a1)
{
  const void *Value;
  const void *v3;
  void *v4;
  const __CFString *v5;
  const __CFString *v6;
  const void *v7;
  uint64_t v8;
  double v9;
  float v10;
  unsigned int CharacterAtIndex;
  __darwin_ct_rune_t v12;
  double v13;
  void *v14;
  const __CFString *v16;
  double v17;
  void *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v19[0] = 0xF0E0E0B0D0A0E0DLL;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("deviceInfo"));
  v18 = 0;
  v3 = 0;
  v4 = 0;
  if (!APSIsProximitySenderEnabled() || !Value)
    goto LABEL_36;
  if (APSSettingsGetInt64())
  {
    v5 = (const __CFString *)APAdvertiserInfoCopyProperty((uint64_t)Value, 0, CFSTR("deviceName"), 0, 0);
    if (!v5)
    {
      v3 = 0;
      v4 = 0;
      goto LABEL_36;
    }
    v6 = v5;
    v7 = APAdvertiserInfoCopyProperty((uint64_t)Value, 0, CFSTR("bluetoothAddress"), 0, 0);
    if (v7 && (getNINearbyObjectClass[0](), (objc_opt_respondsToSelector() & 1) != 0))
    {
      v4 = (void *)objc_msgSend(objc_alloc(getNIDiscoveryTokenClass()), "initWithBytes:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v19, 8));
      if (v4)
      {
        v8 = objc_msgSend((Class)getNINearbyObjectClass[0](), "fauxObjectWithDiscoveryToken:name:deviceIdentifier:", v4, v6, v7);
        if (v8)
        {
          v9 = *(double *)&v8;
          v10 = 5.0;
          if (CFStringGetLength(v6) < 1)
            goto LABEL_20;
          CharacterAtIndex = CFStringGetCharacterAtIndex(v6, 0);
          v12 = CharacterAtIndex;
          if (CharacterAtIndex > 0x7F)
          {
            if (!__maskrune(CharacterAtIndex, 0x100uLL))
              goto LABEL_20;
          }
          else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * CharacterAtIndex + 60) & 0x100) == 0)
          {
LABEL_20:
            if (gLogCategory_APTransportDevice <= 30
              && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
            {
              v17 = v10;
              v16 = v6;
              LogPrintF();
            }
            if ((objc_opt_respondsToSelector() & 1) != 0)
            {
              *(float *)&v13 = v10;
              objc_msgSend(*(id *)&v9, "overrideDistance:", v13);
            }
            goto LABEL_29;
          }
          v10 = (float)(91 - __toupper(v12)) * 0.1;
          goto LABEL_20;
        }
      }
    }
    else
    {
      v4 = 0;
    }
    v3 = 0;
LABEL_33:
    CFRelease(v6);
LABEL_34:
    if (v7)
      CFRelease(v7);
    goto LABEL_36;
  }
  v9 = COERCE_DOUBLE(CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("proximityData")));
  if (gLogCategory_APTransportDevice <= 30
    && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
  {
    v16 = (const __CFString *)a1;
    v17 = v9;
    LogPrintF();
  }
  v7 = 0;
  v6 = 0;
  v4 = 0;
  v3 = 0;
  if (v9 != 0.0)
  {
LABEL_29:
    v3 = (const void *)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", *(_QWORD *)&v9, 1, &v18, v16, *(_QWORD *)&v17);
    v14 = v18;
    if (!v18)
    {
      if (v3)
        CFRetain(v3);
LABEL_32:
      if (!v6)
        goto LABEL_34;
      goto LABEL_33;
    }
    if (gLogCategory_APTransportDevice > 90)
      goto LABEL_32;
    if (gLogCategory_APTransportDevice == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_32;
      v14 = v18;
    }
    objc_msgSend(v14, "localizedFailureReason");
    LogPrintF();
    goto LABEL_32;
  }
LABEL_36:

  return v3;
}

uint64_t APTransportDeviceCopyCUDNSNames(uint64_t a1)
{
  uint64_t v1;
  uint64_t Int64;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t *);
  uint64_t v5;

  v5 = 0;
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    Int64 = CFDictionaryGetInt64();
    v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (!v3 || v3(v1, Int64, &v5))
      APSLogErrorAt();
  }
  return v5;
}

uint64_t transportDevice_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  uint64_t result;

  if (gLogCategory_APTransportDevice <= 30
    && (gLogCategory_APTransportDevice != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
  v6 = (const void *)a1[8];
  if (v6)
  {
    CFRelease(v6);
    a1[8] = 0;
  }
  result = a1[6];
  if (result)
  {
    result = FigSimpleMutexDestroy();
    a1[6] = 0;
  }
  return result;
}

__CFString *transportDevice_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportDevice %p browser '%@' deviceInfo %@>"), a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    APSLogErrorAt();
  return v3;
}

Class initNINearbyObject()
{
  Class result;

  if (NearbyInteractionLibrary_sOnce != -1)
    dispatch_once(&NearbyInteractionLibrary_sOnce, &__block_literal_global_10);
  result = objc_getClass("NINearbyObject");
  classNINearbyObject = (uint64_t)result;
  getNINearbyObjectClass[0] = NINearbyObjectFunction;
  return result;
}

uint64_t NINearbyObjectFunction()
{
  return classNINearbyObject;
}

Class initNIDiscoveryToken()
{
  Class result;

  if (NearbyInteractionLibrary_sOnce != -1)
    dispatch_once(&NearbyInteractionLibrary_sOnce, &__block_literal_global_10);
  result = objc_getClass("NIDiscoveryToken");
  classNIDiscoveryToken = (uint64_t)result;
  getNIDiscoveryTokenClass = NIDiscoveryTokenFunction;
  return result;
}

uint64_t NIDiscoveryTokenFunction()
{
  return classNIDiscoveryToken;
}

void sub_1C93D0CB8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t APTNANDataSessionGetClassID()
{
  if (APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce != -1)
    dispatch_once_f(&APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce, &APTNANDataSessionGetClassID_sAPTNANDataSessionClassID, (dispatch_function_t)_APTNANDataSessionRegisterClass);
  return APTNANDataSessionGetClassID_sAPTNANDataSessionClassID;
}

uint64_t _APTNANDataSessionRegisterClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t APTNANDataSessionGetTypeID()
{
  if (APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce != -1)
    dispatch_once_f(&APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce, &APTNANDataSessionGetClassID_sAPTNANDataSessionClassID, (dispatch_function_t)_APTNANDataSessionRegisterClass);
  return CMBaseClassGetCFTypeID();
}

uint64_t APTNANDataSessionCreate(int a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeID v8;
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  dispatch_queue_t v12;
  dispatch_queue_t v13;
  uint64_t v14;
  char label[64];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (APSNANServiceTypeIsValid() && a2 && (v8 = CFGetTypeID(a2), v8 == APBrowserGetTypeID()))
  {
    if (APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce != -1)
      dispatch_once_f(&APTNANDataSessionGetClassID_sAPTNANDataSessionClassIDOnce, &APTNANDataSessionGetClassID_sAPTNANDataSessionClassID, (dispatch_function_t)_APTNANDataSessionRegisterClass);
    v9 = CMDerivedObjectCreate();
    if ((_DWORD)v9)
    {
      v14 = v9;
      APSLogErrorAt();
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)DerivedStorage = a1;
      *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2);
      *(_QWORD *)(DerivedStorage + 16) = a3;
      v11 = FigSimpleMutexCreate();
      *(_QWORD *)(DerivedStorage + 40) = v11;
      if (v11
        && (SNPrintF(), v12 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 24) = v12) != 0)
        && (SNPrintF(), v13 = dispatch_queue_create(label, 0), (*(_QWORD *)(DerivedStorage + 32) = v13) != 0))
      {
        if (gLogCategory_APTNANDataSession <= 50
          && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v14 = 0;
        *a4 = 0;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v14;
}

CFTypeRef APTNANDataSessionIsActivatable()
{
  unsigned int *DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  CFTypeRef result;
  CFTypeRef cf;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v1 = *((_QWORD *)DerivedStorage + 1);
  v2 = *((_QWORD *)DerivedStorage + 2);
  v3 = *DerivedStorage;
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 80);
  if (!v4 || v4(v1, v2, v3, &cf))
  {
    APSLogErrorAt();
    if (gLogCategory_APTNANDataSession <= 50
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  result = cf;
  if (cf)
  {
    CFRelease(cf);
    return (CFTypeRef)(cf != 0);
  }
  return result;
}

uint64_t APTNANDataSessionRetainActivation(uint64_t a1)
{
  pthread_mutex_t **DerivedStorage;
  id v3;
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  pthread_mutex_t *v7;
  pthread_mutex_t *v8;
  uint64_t v9;
  uint64_t (*v10)(pthread_mutex_t *, pthread_mutex_t *, uint64_t, CFTypeRef *);
  char v11;
  uint64_t v12;
  uint64_t v13;
  dispatch_semaphore_t v14;
  id v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[9];
  _QWORD v22[7];
  _QWORD v23[9];
  _QWORD v24[5];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  CFTypeRef v29;

  DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  v29 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  pthread_mutex_lock(DerivedStorage[5]);
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    v19 = (uint64_t)DerivedStorage[6];
    v20 = v19 + 1;
    v18 = a1;
    LogPrintF();
  }
  if (DerivedStorage[7])
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
LABEL_7:
    v6 = 0;
    DerivedStorage[6] = (pthread_mutex_t *)((char *)DerivedStorage[6] + 1);
    goto LABEL_36;
  }
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    v18 = a1;
    LogPrintF();
  }
  v7 = DerivedStorage[1];
  v8 = DerivedStorage[2];
  v9 = *(unsigned int *)DerivedStorage;
  v10 = *(uint64_t (**)(pthread_mutex_t *, pthread_mutex_t *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 80);
  if (!v10)
  {
    v6 = 4294954514;
    goto LABEL_18;
  }
  v6 = v10(v7, v8, v9, &v29);
  if ((_DWORD)v6)
  {
LABEL_18:
    APSLogErrorAt();
    if (gLogCategory_APTNANDataSession <= 90
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      v18 = a1;
      v19 = v6;
      LogPrintF();
    }
    goto LABEL_34;
  }
  if (*(_DWORD *)DerivedStorage != 1)
  {
    if (*(_DWORD *)DerivedStorage == 2)
    {
      v11 = 0;
      v12 = 2048;
      goto LABEL_22;
    }
    v6 = 4294960561;
    APSLogErrorAt();
LABEL_34:
    v3 = 0;
    v4 = 0;
    v5 = 0;
    goto LABEL_35;
  }
  v12 = 256;
  v11 = 1;
LABEL_22:
  v3 = objc_alloc_init(MEMORY[0x1E0D1B3C0]);
  if (!v3)
  {
    APSLogErrorAt();
    v3 = 0;
LABEL_51:
    v4 = 0;
    v5 = 0;
    goto LABEL_52;
  }
  if (_APTNANDataSessionGetDispatchQueue_sAPTNANDataSessionDispatchQueueOnce != -1)
    dispatch_once(&_APTNANDataSessionGetDispatchQueue_sAPTNANDataSessionDispatchQueueOnce, &__block_literal_global_11);
  objc_msgSend(v3, "setDispatchQueue:", _APTNANDataSessionGetDispatchQueue_sAPTNANDataSessionDispatchQueue, v18, v19, v20);
  objc_msgSend(v3, "setPeerEndpoint:", v29);
  objc_msgSend(v3, "setTrafficFlags:", v12);
  v13 = MEMORY[0x1E0C809B0];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __APTNANDataSessionRetainActivation_block_invoke;
  v24[3] = &__block_descriptor_40_e5_v8__0l;
  v24[4] = a1;
  objc_msgSend(v3, "setInterruptionHandler:", v24);
  if ((v11 & 1) == 0)
    objc_msgSend(v3, "setControlFlags:", 2);
  v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v5)
  {
    APSLogErrorAt();
    if (gLogCategory_APTNANDataSession <= 90
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      v18 = a1;
      LogPrintF();
    }
    goto LABEL_51;
  }
  v14 = dispatch_semaphore_create(0);
  if (!v14)
  {
    APSLogErrorAt();
    v4 = 0;
LABEL_52:
    v6 = 4294960568;
    goto LABEL_35;
  }
  v4 = v14;
  v15 = v3;
  CFRetain(v5);
  dispatch_retain(v4);
  v23[0] = v13;
  v23[1] = 3221225472;
  v23[2] = __APTNANDataSessionRetainActivation_block_invoke_2;
  v23[3] = &unk_1E82581E8;
  v23[6] = &v25;
  v23[7] = a1;
  v23[8] = v5;
  v23[4] = v4;
  v23[5] = v3;
  objc_msgSend(v3, "setInvalidationHandler:", v23);
  v22[0] = v13;
  v22[1] = 3221225472;
  v22[2] = __APTNANDataSessionRetainActivation_block_invoke_3;
  v22[3] = &unk_1E8258230;
  v22[5] = v5;
  v22[6] = a1;
  v22[4] = v3;
  objc_msgSend(v3, "setTerminationHandler:", v22);
  CFRetain(v29);
  v16 = v3;
  dispatch_retain(v4);
  v21[0] = v13;
  v21[1] = 3221225472;
  v21[2] = __APTNANDataSessionRetainActivation_block_invoke_5;
  v21[3] = &unk_1E8258258;
  v21[7] = a1;
  v21[8] = v29;
  v21[5] = v4;
  v21[6] = &v25;
  v21[4] = v3;
  objc_msgSend(v3, "activateWithCompletion:", v21);
  if (dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL))
  {
    APSLogErrorAt();
    v6 = 4294960574;
  }
  else
  {
    v6 = *((unsigned int *)v26 + 6);
    if (!(_DWORD)v6)
    {
      DerivedStorage[7] = (pthread_mutex_t *)v3;
      goto LABEL_7;
    }
    APSLogErrorAt();
  }
LABEL_35:
  objc_msgSend(v3, "invalidate", v18, v19);
LABEL_36:
  pthread_mutex_unlock(DerivedStorage[5]);
  if (v4)
    dispatch_release(v4);
  if (v5)
    CFRelease(v5);

  if (v29)
    CFRelease(v29);
  _Block_object_dispose(&v25, 8);
  return v6;
}

void sub_1C93D5584(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1C93D577C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t APTNANDataSessionReleaseActivation(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    v8 = *(_QWORD *)(DerivedStorage + 48);
    v9 = v8 - 1;
    v7 = a1;
    LogPrintF();
  }
  v3 = *(_QWORD *)(DerivedStorage + 48);
  if (v3)
  {
    v4 = v3 - 1;
    *(_QWORD *)(DerivedStorage + 48) = v4;
    if (v4)
    {
      v5 = 0;
    }
    else
    {
      if (gLogCategory_APTNANDataSession <= 50
        && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
      {
        v7 = a1;
        LogPrintF();
      }
      objc_msgSend(*(id *)(DerivedStorage + 56), "invalidate", v7, v8, v9);

      v5 = 0;
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
  }
  else
  {
    APSLogErrorAt();
    v5 = 4294960548;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
  return v5;
}

uint64_t APTNANDataSessionCopyPeerAddress(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  void *v4;
  uint64_t v5;
  char v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  if (a2)
  {
    v4 = *(void **)(DerivedStorage + 56);
    if (v4 && (objc_msgSend(v4, "peerAddress"), v7))
    {
      v5 = APSNetworkAddressCreateWithSocketAddr();
      if ((_DWORD)v5)
        APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      v5 = 4294960578;
    }
  }
  else
  {
    APSLogErrorAt();
    v5 = 4294960591;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
  return v5;
}

uint64_t APTNANDataSessionPreWarm(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  if (*(_QWORD *)(DerivedStorage + 56))
  {
    if (gLogCategory_APTNANDataSession <= 50
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      v5 = a1;
      LogPrintF();
    }
    objc_msgSend(*(id *)(DerivedStorage + 56), "updateLinkStatus:", 1, v5);
    v3 = 0;
  }
  else
  {
    APSLogErrorAt();
    v3 = 4294960578;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
  return v3;
}

uint64_t APTNANDataSessionCreateStatisticsReport(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v5;
  dispatch_semaphore_t v6;
  NSObject *v7;
  void *v8;
  dispatch_time_t v9;
  const void *ValueAtIndex;
  const void *v11;
  CFTypeID v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v16[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  if (!*(_QWORD *)(DerivedStorage + 56))
  {
    v14 = 4294960578;
LABEL_17:
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
    return v14;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v14 = 4294960568;
    goto LABEL_17;
  }
  v5 = Mutable;
  v6 = dispatch_semaphore_create(0);
  if (v6)
  {
    v7 = v6;
    CFRetain(v5);
    dispatch_retain(v7);
    v8 = *(void **)(DerivedStorage + 56);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __APTNANDataSessionCreateStatisticsReport_block_invoke;
    v16[3] = &unk_1E8258280;
    v16[4] = v7;
    v16[5] = v5;
    objc_msgSend(v8, "generateStatisticsReportWithCompletionHandler:", v16);
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
    v9 = dispatch_time(0, 1000000000);
    if (dispatch_semaphore_wait(v7, v9))
    {
      APSLogErrorAt();
      v14 = 4294960574;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
      v11 = ValueAtIndex;
      if (ValueAtIndex && (v12 = CFGetTypeID(ValueAtIndex), v12 == CFNumberGetTypeID()))
      {
        v13 = CFGetInt64Ranged();
        if (v13)
          v14 = v13;
        else
          v14 = 4294960587;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v14 = 0;
          *a2 = CFRetain(v11);
        }
        else
        {
          APSLogErrorAt();
          v14 = 4294960587;
        }
      }
    }
    dispatch_release(v7);
  }
  else
  {
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
    v14 = 4294960568;
  }
  CFRelease(v5);
  return v14;
}

CFStringRef _APTNANDataSessionCopyFormattingDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<APTNANDataSession %p>"), a1);
}

void _APTNANDataSessionFinalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
    CFRelease(v3);
  FigSimpleMutexDestroy();
  if (*(_QWORD *)(DerivedStorage + 56))
  {
    if (gLogCategory_APTNANDataSession <= 60
      && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      v6 = a1;
      LogPrintF();
    }
    objc_msgSend(*(id *)(DerivedStorage + 56), "invalidate", v6);

    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v5 = *(NSObject **)(DerivedStorage + 32);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  if (gLogCategory_APTNANDataSession <= 50
    && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

CFStringRef _APTNANDataSessionCopyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<APTNANDataSession %p>"), a1);
}

uint64_t _APTNANDataSessionReportIssue(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *TypedValue;
  const void *v4;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;
  unsigned int v10;

  v10 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CFStringGetTypeID();
  CFDictionaryGetTypedValue();
  if (FigCFEqual())
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
    CFNumberGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    CFNumberGetTypeID();
    v4 = (const void *)CFDictionaryGetTypedValue();
    v10 = APTNANDataSessionIssueReportCreate(TypedValue, v4, &cf);
    if (v10)
    {
      APSLogErrorAt();
    }
    else if (gLogCategory_APTNANDataSession <= 50
           && (gLogCategory_APTNANDataSession != -1 || _LogCategory_Initialize()))
    {
      v8 = cf;
      LogPrintF();
      objc_msgSend(*(id *)(DerivedStorage + 56), "reportIssue:", cf, a1, v8);
    }
    else
    {
      objc_msgSend(*(id *)(DerivedStorage + 56), "reportIssue:", cf, v6, v7);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 40));
    if (cf)
      CFRelease(cf);
  }
  return v10;
}

uint64_t APTransportSocketGetTypeID()
{
  if (APTransportSocketGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTransportSocketGetTypeID_sInitOnce, &APTransportSocketGetTypeID_sTypeID, (dispatch_function_t)socket_getTypeID);
  return APTransportSocketGetTypeID_sTypeID;
}

uint64_t socket_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportSocketCreate(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v6;
  uint64_t result;

  if (APTransportSocketGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTransportSocketGetTypeID_sInitOnce, &APTransportSocketGetTypeID_sTypeID, (dispatch_function_t)socket_getTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v6 = Instance;
    *(_QWORD *)(Instance + 16) = 0;
    *(_DWORD *)(Instance + 16) = a2;
    if (gLogCategory_APTransportSocketRef <= 30
      && (gLogCategory_APTransportSocketRef != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    result = 0;
    *a3 = v6;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return result;
}

uint64_t APTransportSocketGetSocket(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t socket_Finalize(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (gLogCategory_APTransportSocketRef <= 30)
  {
    if (gLogCategory_APTransportSocketRef != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
      result = LogPrintF();
  }
  *(_DWORD *)(v1 + 16) = -1;
  return result;
}

uint64_t APBrokerGetTypeID()
{
  if (gAPBrokerInitOnce != -1)
    dispatch_once_f(&gAPBrokerInitOnce, 0, (dispatch_function_t)_APBrokerGetTypeID);
  return gAPBrokerTypeID;
}

uint64_t _APBrokerGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPBrokerTypeID = result;
  return result;
}

uint64_t APBrokerCreate(const void *a1, CFTypeRef *a2)
{
  _OWORD *Instance;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  char HasFeature;
  uint64_t v12;
  dispatch_queue_t v13;
  uint64_t v14;
  char label[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  *(_OWORD *)label = 0u;
  v17 = 0u;
  if (a2 && a1)
  {
    if (gAPBrokerInitOnce != -1)
      dispatch_once_f(&gAPBrokerInitOnce, 0, (dispatch_function_t)_APBrokerGetTypeID);
    Instance = (_OWORD *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      v5 = Instance;
      Instance[1] = 0u;
      v6 = Instance + 1;
      Instance[2] = 0u;
      Instance[3] = 0u;
      *((_QWORD *)Instance + 6) = CFRetain(a1);
      v7 = APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a1, v6, v6 + 1);
      if ((_DWORD)v7)
      {
        v14 = v7;
        APSLogErrorAt();
      }
      else
      {
        *((_BYTE *)v5 + 32) = APSSettingsGetIntWithDefault() != 0;
        if (*((_QWORD *)v5 + 6) && (v8 = BonjourDevice_CopyCFString()) != 0)
        {
          v9 = (const void *)v8;
          v10 = (const void *)APSFeaturesCreateFromStringRepresentation();
          HasFeature = APSFeaturesHasFeature();
          if (v10)
            CFRelease(v10);
          CFRelease(v9);
        }
        else
        {
          HasFeature = 0;
        }
        *((_BYTE *)v5 + 33) = HasFeature;
        v12 = FigSimpleMutexCreate();
        *((_QWORD *)v5 + 5) = v12;
        if (v12 && (SNPrintF(), v13 = dispatch_queue_create(label, 0), (*((_QWORD *)v5 + 7) = v13) != 0))
        {
          if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
          {
            APBrokerHTTPProtocolString(*((unsigned __int8 *)v5 + 32));
            LogPrintF();
          }
          v14 = 0;
          *a2 = CFRetain(v5);
        }
        else
        {
          APSLogErrorAt();
          v14 = 4294960568;
        }
      }
      CFRelease(v5);
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v14;
}

uint64_t APBrokerCopyBrokerInfoFromBonjourInfo(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  const void *v5;
  const void *v6;

  if (a2)
  {
    v5 = (const void *)BonjourDevice_CopyCFString();
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    if (a3)
    {
LABEL_3:
      v6 = (const void *)BonjourDevice_CopyCFString();
      if (!a2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v6 = 0;
  if (a2)
  {
LABEL_4:
    *a2 = v5;
    v5 = 0;
  }
LABEL_5:
  if (a3)
  {
    *a3 = v6;
  }
  else if (v6)
  {
    CFRelease(v6);
  }
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t APBrokerUpdate(uint64_t a1, const void *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef v6;
  const void *v7;
  uint64_t v8;
  CFTypeRef cf;
  CFTypeRef cf1;

  cf = 0;
  cf1 = 0;
  v4 = APBrokerCopyBrokerInfoFromBonjourInfo((uint64_t)a2, &cf1, &cf);
  if ((_DWORD)v4)
  {
    v8 = v4;
    APSLogErrorAt();
  }
  else
  {
    v5 = *(CFTypeRef *)(a1 + 16);
    if ((cf1 == v5 || cf1 && v5 && CFEqual(cf1, v5))
      && ((v6 = *(CFTypeRef *)(a1 + 24), cf == v6) || cf && v6 && CFEqual(cf, v6)))
    {
      FigSimpleMutexCheckIsNotLockedOnThisThread();
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
      v7 = *(const void **)(a1 + 48);
      if (a2)
        CFRetain(a2);
      *(_QWORD *)(a1 + 48) = a2;
      if (v7)
        CFRelease(v7);
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
      v8 = 0;
    }
    else
    {
      APSLogErrorAt();
      v8 = 4294960591;
    }
  }
  if (cf)
    CFRelease(cf);
  if (cf1)
    CFRelease(cf1);
  return v8;
}

void APBrokerGetBrokeredReceivers(uint64_t a1, void *a2)
{
  int v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  __CFDictionary *v8;
  __CFDictionary *v9;
  void *v10;
  BOOL v11;
  void (*v12)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v13;
  CFTypeRef v14;
  void (*v15[8])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  CFArrayRef theArray;

  theArray = 0;
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v4 = -72440;
  APBrokerKeychainUtilsCopyAllAuthTokens(*(CFTypeRef *)(a1 + 24), &theArray);
  if (theArray && CFArrayGetCount(theArray) >= 1)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("Content-Type"), CFSTR("application/json"));
      v8 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v8)
      {
        v9 = v8;
        CFDictionarySetValue(v8, CFSTR("userAuthTokens"), theArray);
        v10 = _Block_copy(a2);
        v11 = v10 != 0;
        if (v10)
        {
          v12 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v10;
          v13 = *(NSObject **)(a1 + 56);
          dispatch_retain(v13);
          v14 = CFRetain(*(CFTypeRef *)(a1 + 24));
          v15[0] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
          v15[1] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))0x40000000;
          v15[2] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))__APBrokerGetBrokeredReceivers_block_invoke;
          v15[3] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&unk_1E82583E8;
          v15[6] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v14;
          v15[7] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v13;
          v15[4] = v12;
          v15[5] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
          APBrokerSendRequest(a1, 2, CFSTR("/public/receiver/receiver-list"), v7, v9, v15);
          v4 = 0;
        }
        else
        {
          APSLogErrorAt();
          v4 = -6728;
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
        CFRelease(v9);
      }
      else
      {
        APSLogErrorAt();
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
        v11 = 0;
        v4 = -6728;
      }
      CFRelease(v7);
      goto LABEL_15;
    }
    APSLogErrorAt();
    v4 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  v11 = 0;
LABEL_15:
  if (theArray)
    CFRelease(theArray);
  if (!v11)
    _CallRequestCallbackBlock(v4, *(NSObject **)(a1 + 56), 0, a2);
}

void APBrokerSendRequest(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, void (**a6)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  const void *v15;
  const void *v16;
  CFStringRef v17;
  const void *v18;
  const void *v19;
  const void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  int v24;
  CFTypeRef cf;
  _QWORD v26[7];
  int DNSName;
  char cStr[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  DNSName = 0;
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    APBrokerHTTPProtocolString(*(unsigned __int8 *)(a1 + 32));
    APBrokerHTTPMethodString(a2);
    LogPrintF();
  }
  if (a6)
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v14 = Mutable;
      if (*(_BYTE *)(a1 + 32))
      {
        CFDictionarySetValue(Mutable, CFSTR("useHTTPS"), (const void *)*MEMORY[0x1E0C9AE50]);
        v15 = (const void *)BonjourDevice_CopyCFString();
        if (!v15)
        {
          APSLogErrorAt();
          DNSName = -6705;
          goto LABEL_26;
        }
        v16 = v15;
        CFDictionarySetValue(v14, CFSTR("sslCertificateHostName"), v15);
      }
      else
      {
        v16 = 0;
      }
      cf = v16;
      if (*(_BYTE *)(a1 + 33))
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        *(_OWORD *)cStr = 0u;
        v29 = 0u;
        DNSName = BonjourDevice_GetDNSName();
        if (DNSName)
        {
          APSLogErrorAt();
        }
        else
        {
          v17 = CFStringCreateWithCString(v12, cStr, 0x8000100u);
          if (v17)
          {
            v18 = v17;
            v19 = a5;
            v20 = 0;
            v21 = 1;
            goto LABEL_16;
          }
          APSLogErrorAt();
          DNSName = -6728;
        }
LABEL_24:
        if (v16)
          CFRelease(v16);
LABEL_26:
        CFRelease(v14);
        if (!DNSName)
          return;
        goto LABEL_27;
      }
      v22 = BonjourDevice_CopyCFString();
      BonjourDevice_GetInt64();
      v18 = (const void *)CFStringCreateF();
      v20 = (const void *)v22;
      v19 = a5;
      v21 = 2;
LABEL_16:
      if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
      {
        APBrokerHTTPProtocolString(*(unsigned __int8 *)(a1 + 32));
        APBrokerHTTPMethodString(a2);
        LogPrintF();
      }
      v23 = _Block_copy(a6);
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 0x40000000;
      v26[2] = __APBrokerSendRequest_block_invoke;
      v26[3] = &unk_1E8258558;
      v26[5] = a1;
      v26[6] = a1;
      v26[4] = v23;
      APBrokerHTTPSendRequest(a1, a1, v18, v21, a2, a3, a4, v19, (uint64_t)v14, v26);
      if (v18)
        CFRelease(v18);
      v16 = cf;
      if (v20)
        CFRelease(v20);
      goto LABEL_24;
    }
    APSLogErrorAt();
    v24 = -6728;
  }
  else
  {
    APSLogErrorAt();
    v24 = -6705;
  }
  DNSName = v24;
LABEL_27:
  a6[2](a6, 0, 0, 0, 0);
}

uint64_t APBrokerCreateBrokeredReceiversFromBrokerResponse(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, uint64_t *a4)
{
  uint64_t v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  const __CFArray *TypedValue;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v8 = 4294960591;
  if (a1 && a2 && a3)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      APSLogErrorAt();
      v8 = 4294960568;
      goto LABEL_17;
    }
    v10 = Mutable;
    CFArrayGetTypeID();
    TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
    if (TypedValue)
    {
      CFArrayGetCount(TypedValue);
      CFArrayApplyBlock();
      v12 = v15[3];
      if (!v12)
      {
        v12 = 300;
        v15[3] = 300;
      }
      *a3 = v10;
      if (a4)
      {
        v8 = 0;
        *a4 = v12;
        goto LABEL_17;
      }
    }
    else
    {
      CFRelease(v10);
    }
    v8 = 0;
  }
LABEL_17:
  _Block_object_dispose(&v14, 8);
  return v8;
}

void _CallRequestCallbackBlock(int a1, NSObject *a2, const void *a3, void *aBlock)
{
  void *v7;
  _QWORD block[6];
  int v9;

  if (aBlock)
  {
    v7 = _Block_copy(aBlock);
    if (a3)
      CFRetain(a3);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___CallRequestCallbackBlock_block_invoke;
    block[3] = &unk_1E8258580;
    v9 = a1;
    block[4] = v7;
    block[5] = a3;
    dispatch_async(a2, block);
  }
}

void APBrokerAuthenticate(uint64_t a1, const void *a2, void *a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  __CFDictionary *v9;
  __CFDictionary *v10;
  void *v11;
  NSObject *v12;
  int v13;
  void (*v14[8])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)(a1 + 24))
      IsAppleInternalBuild();
    if (gLogCategory_APBroker == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a2)
  {
    v13 = -6705;
LABEL_20:
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
LABEL_16:
    _CallRequestCallbackBlock(v13, *(NSObject **)(a1 + 56), 0, a3);
    return;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v13 = -6728;
    goto LABEL_20;
  }
  v8 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("Content-Type"), CFSTR("application/json"));
  v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v9)
  {
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    CFRelease(v8);
    v13 = -6728;
    goto LABEL_16;
  }
  v10 = v9;
  CFDictionarySetValue(v9, CFSTR("brokerToken"), a2);
  v11 = _Block_copy(a3);
  if (v11)
  {
    v12 = *(NSObject **)(a1 + 56);
    dispatch_retain(v12);
    v14[0] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
    v14[1] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))0x40000000;
    v14[2] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))__APBrokerAuthenticate_block_invoke;
    v14[3] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&unk_1E8258410;
    v14[6] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
    v14[7] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    v14[4] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11;
    v14[5] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
    APBrokerSendRequest(a1, 2, CFSTR("/public/broker/user-auth-token"), v8, v10, v14);
    v13 = 0;
  }
  else
  {
    APSLogErrorAt();
    v13 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  CFRelease(v10);
  CFRelease(v8);
  if (!v11)
    goto LABEL_16;
}

void APBrokerGetInfo(uint64_t a1, void *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  void *v6;
  NSObject *v7;
  int v8;
  void (*v9[7])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    if (*(_QWORD *)(a1 + 24))
      IsAppleInternalBuild();
    LogPrintF();
  }
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    v8 = -6728;
LABEL_12:
    _CallRequestCallbackBlock(v8, *(NSObject **)(a1 + 56), 0, a2);
    return;
  }
  v5 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("Content-Type"), CFSTR("application/json"));
  v6 = _Block_copy(a2);
  if (v6)
  {
    v7 = *(NSObject **)(a1 + 56);
    dispatch_retain(v7);
    v9[0] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
    v9[1] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))0x40000000;
    v9[2] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))__APBrokerGetInfo_block_invoke;
    v9[3] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&unk_1E8258438;
    v9[5] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
    v9[6] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v7;
    v9[4] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v6;
    APBrokerSendRequest(a1, 1, CFSTR("/public/info"), v5, 0, v9);
    v8 = 0;
  }
  else
  {
    APSLogErrorAt();
    v8 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  CFRelease(v5);
  if (!v6)
    goto LABEL_12;
}

void APBrokerGetReceiverConnectivityInfo(uint64_t a1, __CFString *a2, const void *a3, void *a4)
{
  int v8;
  const __CFAllocator *v9;
  __CFArray *Mutable;
  const __CFArray *TypedValue;
  const __CFArray *v12;
  CFIndex Count;
  uint64_t i;
  _QWORD *j;
  uint64_t v16;
  int v17;
  CFStringRef v19;
  CFStringRef v20;
  __CFDictionary *v21;
  int v22;
  __CFDictionary *v23;
  __CFDictionary *v24;
  __CFDictionary *v25;
  void *v26;
  void (*v27)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v28;
  void (*v29[8])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *value[4];
  int v31;
  _QWORD *v32;
  char cStr[145];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  value[0] = 0;
  FigSimpleMutexCheckIsNotLockedOnThisThread();
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3)
  {
    APSLogErrorAt();
    v21 = 0;
    Mutable = 0;
    v22 = -6705;
LABEL_54:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    goto LABEL_42;
  }
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
  {
    if (a2)
      IsAppleInternalBuild();
    IsAppleInternalBuild();
    LogPrintF();
  }
  v8 = APBrokerKeychainUtilsCopyAuthToken(*(__CFString **)(a1 + 24), a2, (CFTypeRef *)value);
  if (v8)
  {
    v22 = v8;
    APSLogErrorAt();
    v21 = 0;
    Mutable = 0;
    goto LABEL_54;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable && (CFArrayGetTypeID(), (TypedValue = (const __CFArray *)CFDictionaryGetTypedValue()) != 0))
  {
    v12 = TypedValue;
    if (CFArrayGetCount(TypedValue) <= 0)
    {
      Count = CFArrayGetCount(v12);
      if (Count < 1)
        goto LABEL_36;
    }
    else
    {
      Count = 1;
    }
    for (i = 0; i != Count; ++i)
    {
      v32 = 0;
      CFDictionaryGetTypeID();
      if (CFArrayGetTypedValueAtIndex())
      {
        cStr[128] = 0;
        CFDictionaryGetCString();
        if (CreateUsableInterfaceList())
        {
          APSLogErrorAt();
        }
        else
        {
          for (j = v32; j; j = (_QWORD *)*j)
          {
            memset(&value[1], 0, 24);
            v31 = 0;
            v16 = j[3];
            if (v16)
            {
              v17 = *(unsigned __int8 *)(v16 + 1);
              if (v17 == 30 || v17 == 2)
              {
                SockAddrCopy();
                if (!SockAddrToString())
                {
                  v19 = CFStringCreateWithCString(0, cStr, 0x8000100u);
                  if (v19)
                  {
                    v20 = v19;
                    CFArrayAppendValue(Mutable, v19);
                    CFRelease(v20);
                  }
                }
              }
            }
          }
        }
        ReleaseUsableInterfaceList();
      }
    }
  }
  else
  {
    APSLogErrorAt();
  }
  if (!Mutable)
  {
    v21 = 0;
    v22 = -6728;
    goto LABEL_54;
  }
LABEL_36:
  if (CFArrayGetCount(Mutable) < 1)
  {
    v21 = 0;
    v22 = -6709;
    goto LABEL_54;
  }
  v23 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v21 = v23;
  if (!v23
    || (CFDictionarySetValue(v23, CFSTR("Content-Type"), CFSTR("application/json")),
        (v24 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
  {
    APSLogErrorAt();
    v22 = -6728;
    goto LABEL_54;
  }
  v25 = v24;
  CFDictionarySetValue(v24, CFSTR("userAuthToken"), value[0]);
  CFDictionarySetValue(v25, CFSTR("deviceIPs"), Mutable);
  CFDictionarySetValue(v25, CFSTR("publicReceiverUUID"), a3);
  v26 = _Block_copy(a4);
  if (v26)
  {
    v27 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v26;
    v28 = *(NSObject **)(a1 + 56);
    dispatch_retain(v28);
    CFRetain(a3);
    v29[0] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
    v29[1] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))0x40000000;
    v29[2] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))__APBrokerGetReceiverConnectivityInfo_block_invoke;
    v29[3] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&unk_1E8258460;
    v29[6] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a3;
    v29[7] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v28;
    v29[4] = v27;
    v29[5] = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
    APBrokerSendRequest(a1, 2, CFSTR("/public/receiver/connectivity-info"), v21, v25, v29);
    v22 = 0;
  }
  else
  {
    APSLogErrorAt();
    v22 = -6728;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  CFRelease(v25);
LABEL_42:
  if (value[0])
    CFRelease(value[0]);
  if (Mutable)
    CFRelease(Mutable);
  if (v21)
    CFRelease(v21);
  if (v22)
    _CallRequestCallbackBlock(v22, *(NSObject **)(a1 + 56), 0, a4);
}

uint64_t APBrokerCreateBrokeredReceiverConnectivityInfoFromBrokerResponse(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  __int16 v5;
  const __CFArray *TypedValue;
  const __CFArray *v7;
  CFIndex Count;
  CFAllocatorRef *v9;
  const void **v10;
  const __CFArray *v11;
  __CFDictionary *Mutable;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  CFRange v21;

  v20 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 1;
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (!a1 || !a3)
    goto LABEL_28;
  CFNumberGetTypeID();
  if (!CFDictionaryGetTypedValue())
    goto LABEL_27;
  v5 = CFGetInt64Ranged();
  if (v20)
  {
    APSLogErrorAt();
    goto LABEL_24;
  }
  if (!v5
    || (CFArrayGetTypeID(), (TypedValue = (const __CFArray *)CFDictionaryGetTypedValue()) == 0)
    || (v7 = TypedValue, CFArrayGetCount(TypedValue) <= 0))
  {
LABEL_27:
    APSLogErrorAt();
LABEL_28:
    v20 = -6705;
    goto LABEL_24;
  }
  Count = CFArrayGetCount(v7);
  v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (Count < 11)
  {
    v11 = (const __CFArray *)CFRetain(v7);
  }
  else
  {
    v10 = (const void **)malloc_type_calloc(0xAuLL, 8uLL, 0x80040B8603338uLL);
    v21.location = 0;
    v21.length = 10;
    CFArrayGetValues(v7, v21, v10);
    v11 = CFArrayCreate(*v9, v10, 10, MEMORY[0x1E0C9B378]);
    free(v10);
  }
  CFArrayGetCount(v11);
  CFArrayApplyBlock();
  if (*((_BYTE *)v17 + 24))
  {
    Mutable = CFDictionaryCreateMutable(*v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v20 = CFDictionarySetInt64();
      if (v20 || (v20 = CFDictionarySetInt64()) != 0)
      {
        APSLogErrorAt();
      }
      else
      {
        CFDictionarySetValue(Mutable, CFSTR("addresses"), v11);
        *a3 = Mutable;
        Mutable = 0;
      }
      goto LABEL_20;
    }
    APSLogErrorAt();
    v15 = -6728;
  }
  else
  {
    APSLogErrorAt();
    Mutable = 0;
    v15 = -6705;
  }
  v20 = v15;
LABEL_20:
  if (v11)
    CFRelease(v11);
  if (Mutable)
    CFRelease(Mutable);
LABEL_24:
  v13 = v20;
  _Block_object_dispose(&v16, 8);
  return v13;
}

uint64_t APBrokerCopyAuthInfoFromBrokerResponse(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  uint64_t TypedValue;
  const void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  const __CFData *v15;
  uint64_t v16;
  CFTypeRef cf;

  cf = 0;
  CFStringGetTypeID();
  TypedValue = CFDictionaryGetTypedValue();
  if (!TypedValue)
    goto LABEL_25;
  v10 = (const void *)TypedValue;
  CFNumberGetTypeID();
  v11 = CFDictionaryGetTypedValue();
  if (!v11)
    goto LABEL_25;
  v12 = (const void *)v11;
  CFStringGetTypeID();
  v13 = CFDictionaryGetTypedValue();
  if (!v13)
  {
    v16 = 0;
    v15 = 0;
    goto LABEL_16;
  }
  v14 = (const void *)v13;
  CFDictionaryGetTypeID();
  v15 = (const __CFData *)CFDictionaryGetTypedValue();
  if (!v15)
  {
LABEL_27:
    APSLogErrorAt();
    goto LABEL_28;
  }
  CFStringGetTypeID();
  if (!CFDictionaryGetTypedValue())
  {
LABEL_25:
    APSLogErrorAt();
    v15 = 0;
LABEL_28:
    v16 = 4294960591;
    goto LABEL_16;
  }
  v15 = (const __CFData *)APSCFDataCreateWithBase64String();
  if (!v15)
  {
    APSLogErrorAt();
    v16 = 4294960568;
    goto LABEL_16;
  }
  APBrokeredReceiverCopyCFStringFromTXTRecord(CFSTR("deviceid"), v15, (CFStringRef *)&cf);
  if (!cf)
    goto LABEL_27;
  if (a2)
    *a2 = CFRetain(v10);
  if (a3)
    *a3 = CFRetain(v12);
  if (a4)
    *a4 = CFRetain(v14);
  v16 = 0;
  if (a5)
    *a5 = CFRetain(cf);
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  return v16;
}

uint64_t APBrokerCreateBrokeredReceiverFromBrokerResponseReceiverEntry(const void *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t TypedValue;
  const void *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef cf;

  cf = 0;
  if (gLogCategory_APBroker <= 30 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CFStringGetTypeID();
  TypedValue = CFDictionaryGetTypedValue();
  if (!TypedValue)
    goto LABEL_12;
  v8 = (const void *)TypedValue;
  CFStringGetTypeID();
  v9 = CFDictionaryGetTypedValue();
  if (!v9)
    goto LABEL_12;
  v10 = (const void *)v9;
  CFStringGetTypeID();
  v11 = CFDictionaryGetTypedValue();
  if (v11 && (v12 = (const void *)v11, CFStringGetTypeID(), (v13 = CFDictionaryGetTypedValue()) != 0))
  {
    v14 = v13;
    CFStringGetTypeID();
    v15 = CFDictionaryGetTypedValue();
    v16 = APBrokeredReceiverCreateWithTXTRecordBase64(a1, a2, v8, v10, v12, v14, v15, &cf);
    if ((_DWORD)v16)
    {
      APSLogErrorAt();
      if (cf)
        CFRelease(cf);
    }
    else
    {
      *a4 = cf;
    }
  }
  else
  {
LABEL_12:
    APSLogErrorAt();
    return 4294960591;
  }
  return v16;
}

void _APBrokerFinalize(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (gLogCategory_APBroker <= 50 && (gLogCategory_APBroker != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v2 = a1[7];
  if (v2)
  {
    dispatch_release(v2);
    a1[7] = 0;
  }
  v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
    a1[6] = 0;
  }
  if (a1[5])
  {
    FigSimpleMutexDestroy();
    a1[5] = 0;
  }
  v4 = (const void *)a1[3];
  if (v4)
  {
    CFRelease(v4);
    a1[3] = 0;
  }
  v5 = (const void *)a1[2];
  if (v5)
  {
    CFRelease(v5);
    a1[2] = 0;
  }
}

uint64_t APTransportServiceCreate(uint64_t a1, const void *a2, uint64_t a3, NSObject *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t DerivedStorage;
  dispatch_queue_t v15;
  uint64_t v16;
  uint64_t v17;
  char label[64];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a4 || !a5)
  {
    APSLogErrorAt();
    return 4294950706;
  }
  FigTransportServiceGetClassID();
  v13 = CMDerivedObjectCreate();
  if ((_DWORD)v13)
  {
    v17 = v13;
LABEL_21:
    APSLogErrorAt();
    return v17;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 40) = a2;
  if (a2)
    CFRetain(a2);
  SNPrintF();
  v15 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 8) = v15;
  if (!v15)
  {
    APSLogErrorAt();
    return 4294950705;
  }
  *(_QWORD *)(DerivedStorage + 16) = a4;
  dispatch_retain(a4);
  *(_QWORD *)(DerivedStorage + 24) = a6;
  *(_QWORD *)(DerivedStorage + 32) = a5;
  *(_DWORD *)(DerivedStorage + 64) = 55667;
  *(_BYTE *)(DerivedStorage + 72) = 1;
  if (a3)
    *(_BYTE *)(DerivedStorage + 72) = CFDictionaryGetInt64() != 0;
  v16 = FigCFWeakReferenceTableCreate();
  if ((_DWORD)v16)
  {
    v17 = v16;
    goto LABEL_21;
  }
  if (gLogCategory_APTransportService <= 30
    && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v17 = 0;
  *a7 = 0;
  return v17;
}

uint64_t APTransportServiceUnregisterSession(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

void service_unregisterSessionInternal(CFTypeRef *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportService <= 30
    && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (FigCFWeakReferenceTableRemoveValue())
    APSLogErrorAt();
  if (*a1)
    CFRelease(*a1);
}

uint64_t service_Invalidate(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)service_deferInvalidateInternal);
  return 0;
}

void service_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  NSObject *v2;
  NSObject *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  service_invalidateInternal();
  v1 = (const void *)DerivedStorage[5];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[5] = 0;
  }
  v2 = DerivedStorage[2];
  if (v2)
  {
    dispatch_release(v2);
    DerivedStorage[2] = 0;
  }
  v3 = DerivedStorage[1];
  if (v3)
  {
    dispatch_release(v3);
    DerivedStorage[1] = 0;
  }
}

__CFString *service_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportService %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 40));
  return Mutable;
}

uint64_t service_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t service_SetProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchAsyncSetPropertyImplementation();
}

void service_deferInvalidateInternal(const void *a1)
{
  service_invalidateInternal();
  CFRelease(a1);
}

void service_invalidateInternal()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;
  const void *v2;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v1 = DerivedStorage;
    if (gLogCategory_APTransportService <= 30
      && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *v1 = 1;
    service_cleanUp();
    *((_QWORD *)v1 + 3) = 0;
    *((_QWORD *)v1 + 4) = 0;
    v2 = (const void *)*((_QWORD *)v1 + 6);
    if (v2)
    {
      CFRelease(v2);
      *((_QWORD *)v1 + 6) = 0;
    }
  }
}

void service_cleanUp()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 56);
  if (v1)
  {
    APTConnectionListenerInvalidate(v1);
    v2 = *(const void **)(DerivedStorage + 56);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
  }
}

uint64_t service_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  CFNumberRef v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("listeningPort")))
    return 4294954512;
  v8 = CFNumberCreate(a3, kCFNumberIntType, (const void *)(DerivedStorage + 64));
  *a4 = v8;
  if (v8)
    return 0;
  APSLogErrorAt();
  return 4294950705;
}

uint64_t service_setPropertyInternal(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("listeningPort")))
    return 4294954512;
  if (*(_QWORD *)(DerivedStorage + 56))
  {
    APSLogErrorAt();
    return 4294950704;
  }
  else if (a3 && (v6 = CFGetTypeID(a3), v6 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(a3, kCFNumberIntType, (void *)(DerivedStorage + 64));
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950706;
  }
}

uint64_t service_Resume(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)service_resumeInternal);
  return 0;
}

uint64_t service_Suspend(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)service_deferCleanUp);
  return 0;
}

void service_resumeInternal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  int v6;
  int v7;
  int ListeningPort;
  int v9;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportService <= 30
    && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    if (!service_createSession(a1, -1))
      goto LABEL_13;
    goto LABEL_26;
  }
  v3 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_QWORD *)(v3 + 56))
    goto LABEL_13;
  v4 = v3;
  v5 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v5)
  {
    APSLogErrorAt();
    v9 = APSSignalErrorAt();
    goto LABEL_21;
  }
  v6 = APTConnectionListenerCreate(*(_DWORD *)(v4 + 64), -1, (uint64_t)service_handleListenerConnected, (uint64_t)v5, (uint64_t)service_handleListenerInvalidated, (uint64_t)v5, *(_QWORD *)(v4 + 8), &cf);
  if (v6)
  {
    v9 = v6;
LABEL_19:
    APSLogErrorAt();
    goto LABEL_21;
  }
  v7 = APTConnectionListenerResume((uint64_t)cf);
  if (v7)
  {
    v9 = v7;
    goto LABEL_19;
  }
  ListeningPort = APTConnectionListenerGetListeningPort((uint64_t)cf, (_DWORD *)(v4 + 64));
  if (!ListeningPort)
  {
    *(_QWORD *)(v4 + 56) = cf;
    goto LABEL_13;
  }
  v9 = ListeningPort;
  APSLogErrorAt();
  v5 = 0;
LABEL_21:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (v9)
LABEL_26:
    APSLogErrorAt();
LABEL_13:
  if (a1)
    CFRelease(a1);
}

uint64_t service_createSession(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  const __CFUUID *v8;
  const __CFUUID *v9;
  CFStringRef v10;
  const __CFAllocator *v11;
  uint64_t v12;
  uint64_t Key;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    if (*(_BYTE *)(DerivedStorage + 72))
    {
      if (a2 == -1)
      {
        APSLogErrorAt();
        v15 = APSSignalErrorAt();
        goto LABEL_19;
      }
      CFDictionarySetInt64();
    }
    CFDictionaryAddValue(v7, CFSTR("OwningService"), a1);
    v8 = CFUUIDCreate(v5);
    if (v8)
    {
      v9 = v8;
      v10 = CFUUIDCreateString(v5, v8);
      if (v10)
      {
        v11 = CFGetAllocator(a1);
        v12 = APTransportSessionCreate(v11, 0, v10, 0, v7, &cf);
        if ((_DWORD)v12)
        {
          v15 = v12;
        }
        else
        {
          CMBaseObjectGetDerivedStorage();
          Key = FigCFWeakReferenceTableAddValueAndGetKey();
          if ((_DWORD)Key)
          {
            v15 = Key;
          }
          else
          {
            v14 = APSSetFBOPropertyInt64();
            if (!(_DWORD)v14)
            {
              if (gLogCategory_APTransportService <= 30
                && (gLogCategory_APTransportService != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              CFRetain(a1);
              CFRetain(cf);
              APSDispatchAsyncFHelper();
              v15 = 0;
              goto LABEL_15;
            }
            v15 = v14;
          }
          APSLogErrorAt();
        }
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        v15 = 4294950705;
      }
LABEL_15:
      CFRelease(v9);
      if (cf)
        CFRelease(cf);
      if (v10)
        CFRelease(v10);
      goto LABEL_19;
    }
    APSLogErrorAt();
    v15 = 4294950705;
LABEL_19:
    CFRelease(v7);
    return v15;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

void service_handleListenerConnected(uint64_t a1, uint64_t a2, int a3)
{
  const void *v4;

  if (a2)
  {
    v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4 && !*(_BYTE *)CMBaseObjectGetDerivedStorage())
    {
      if (!service_createSession(v4, a3))
      {
LABEL_5:
        CFRelease(v4);
        return;
      }
      APSLogErrorAt();
    }
  }
  else
  {
    APSLogErrorAt();
    APSSignalErrorAt();
    v4 = 0;
  }
  if ((a3 & 0x80000000) == 0 && close(a3))
  {
    if (*__error())
      __error();
  }
  if (v4)
    goto LABEL_5;
}

void service_handleListenerInvalidated(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void service_notifyNewReceiverSessionCallback(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  (*(void (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 32))(0, *(_QWORD *)(a1 + 8), *(_QWORD *)(DerivedStorage + 24));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
}

void service_deferCleanUp(const void *a1)
{
  service_cleanUp();
  CFRelease(a1);
}

uint64_t wifiManagerClient_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportWifiManagerClientCreate(uint64_t a1, _QWORD *a2)
{
  _OWORD *Instance;
  _OWORD *v4;
  dispatch_queue_t v5;
  uint64_t v6;

  if (APTransportWifiManagerClientGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTransportWifiManagerClientGetTypeID_sInitOnce, &APTransportWifiManagerClientGetTypeID_sTypeID, (dispatch_function_t)wifiManagerClient_getTypeID);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    v4 = Instance;
    Instance[2] = 0u;
    Instance[3] = 0u;
    Instance[1] = 0u;
    v5 = dispatch_queue_create("APTransportWifiManagerClient.queue", 0);
    *((_QWORD *)v4 + 2) = v5;
    if (v5)
    {
      *((_DWORD *)v4 + 6) = 0;
      if (gLogCategory_APTransportWifiManagerClient <= 30
        && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v6 = 0;
      *a2 = v4;
    }
    else
    {
      v6 = 4294895566;
      APSLogErrorAt();
      CFRelease(v4);
    }
  }
  else
  {
    v6 = 4294895566;
    APSLogErrorAt();
  }
  return v6;
}

uint64_t APTransportWifiManagerClientRegister(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __APTransportWifiManagerClientRegister_block_invoke;
  v4[3] = &unk_1E8255AE8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t APTransportWifiManagerClientUnregister(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(NSObject **)(a1 + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __APTransportWifiManagerClientUnregister_block_invoke;
  v4[3] = &unk_1E8255AE8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync(v1, v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t APTransportWifiManagerClientCopyWifiStatistics(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APTransportWifiManagerClientCopyWifiStatistics_block_invoke;
  block[3] = &unk_1E8256C58;
  block[4] = &v6;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t APTransportWifiManagerClientGetPeerRSSI(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v3 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __APTransportWifiManagerClientGetPeerRSSI_block_invoke;
  v6[3] = &unk_1E8256C80;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void wifiManagerClient_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  NSObject *v4;

  if (gLogCategory_APTransportWifiManagerClient <= 30
    && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void __wifiManagerClient_registerInternal_block_invoke(uint64_t a1)
{
  const void *v2;

  wifiManagerClient_dumpWifiStatistics(*(_QWORD *)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void wifiManagerClient_dumpWifiStatistics(uint64_t a1)
{
  const void *Samples;
  int v2;
  _QWORD v3[4];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[4];

  if (wifiManagerClient_ensureSubscribedForStatistics(a1))
  {
    APSLogErrorAt();
    return;
  }
  Samples = (const void *)IOReportCreateSamples();
  if (!Samples)
  {
    APSLogErrorAt();
    if (gLogCategory_APTransportWifiManagerClient <= 90
      && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_20;
  }
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2020000000;
  v16[3] = 0;
  v8 = 0;
  v9 = &v8;
  v10 = 0x5810000000;
  v11 = &unk_1C9434105;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x5810000000;
  v3[3] = &unk_1C9434105;
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0;
  DataBuffer_Init();
  DataBuffer_Init();
  if ((IOReportIterate() & 1) != 0)
  {
    APSLogErrorAt();
    v2 = APSSignalErrorAt();
  }
  else
  {
    v2 = DataBuffer_Append();
    if (!v2)
    {
      v2 = DataBuffer_Commit();
      if (!v2)
      {
        if (gLogCategory_APTransportWifiManagerClient <= 50
          && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (!v9[8])
          goto LABEL_17;
        v2 = DataBuffer_Append();
        if (!v2)
        {
          v2 = DataBuffer_Commit();
          if (!v2)
          {
            if (gLogCategory_APTransportWifiManagerClient <= 30
              && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
LABEL_17:
            v2 = 0;
            goto LABEL_18;
          }
        }
      }
    }
    APSLogErrorAt();
  }
LABEL_18:
  DataBuffer_Free();
  DataBuffer_Free();
  _Block_object_dispose(v3, 8);
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v16, 8);
  if (v2)
    APSLogErrorAt();
LABEL_20:
  if (Samples)
    CFRelease(Samples);
}

void sub_1C93DB6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 152), 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t wifiManagerClient_ensureSubscribedForStatistics(uint64_t a1)
{
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
    return 0;
  if (Apple80211GetIOReportingService())
  {
    if (gLogCategory_APTransportWifiManagerClient <= 90
      && (gLogCategory_APTransportWifiManagerClient != -1 || _LogCategory_Initialize()))
    {
      Apple80211ErrToStr();
      LogPrintF();
    }
    return 4294960534;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t __wifiManagerClient_pruneIOReport_block_invoke(uint64_t a1)
{
  const void *SubGroup;
  const __CFString *ChannelName;
  uint64_t v4;
  const __CFString *v5;
  CFIndex Length;
  __CFString *MutableCopy;

  SubGroup = (const void *)IOReportChannelGetSubGroup();
  ChannelName = (const __CFString *)IOReportChannelGetChannelName();
  v4 = 273;
  if (SubGroup)
  {
    v5 = ChannelName;
    if (ChannelName)
    {
      Length = CFStringGetLength(ChannelName);
      MutableCopy = CFStringCreateMutableCopy(0, Length, v5);
      CFStringTrimWhitespace(MutableCopy);
      if (!CFSetContainsValue(*(CFSetRef *)(a1 + 32), MutableCopy))
      {
        v4 = 16;
        if (!MutableCopy)
          return v4;
        goto LABEL_5;
      }
      v4 = 16 * (CFSetContainsValue(*(CFSetRef *)(a1 + 40), SubGroup) == 0);
      if (MutableCopy)
LABEL_5:
        CFRelease(MutableCopy);
    }
  }
  return v4;
}

uint64_t __wifiManagerClient_printSamples_block_invoke(uint64_t a1, uint64_t a2)
{
  const __CFString *Group;
  uint64_t v5;
  const __CFString *ChannelName;
  CFIndex Length;
  __CFString *MutableCopy;

  Group = (const __CFString *)IOReportChannelGetGroup();
  if (CFStringHasPrefix(Group, CFSTR("Interface awdl0 Peer")))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    IOReportChannelGetGroup();
    IOReportSimpleGetIntegerValue();
    if (!a2
      || !*(_QWORD *)(v5 + 64) && DataBuffer_AppendF()
      || !FigCFStringGetCStringPtrAndBufferToFree()
      || SNScanF() != 1
      || DataBuffer_AppendF()
      || DataBuffer_AppendF())
    {
      APSLogErrorAt();
    }
    free(0);
  }
  else
  {
    if (!FigCFEqual())
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = Group;
      DataBuffer_AppendF();
    }
    ChannelName = (const __CFString *)IOReportChannelGetChannelName();
    Length = CFStringGetLength(ChannelName);
    MutableCopy = CFStringCreateMutableCopy(0, Length, ChannelName);
    CFStringTrimWhitespace(MutableCopy);
    IOReportChannelGetUnitLabel();
    IOReportSimpleGetIntegerValue();
    DataBuffer_AppendF();
    DataBuffer_AppendF();
    DataBuffer_AppendF();
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  return 0;
}

void __wifiManagerClient_unregisterInternal_block_invoke(uint64_t a1)
{
  const void *v2;

  wifiManagerClient_dumpWifiStatistics(*(_QWORD *)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

uint64_t __wifiManagerClient_copyWifiStatistics_block_invoke(uint64_t a1)
{
  int v2;
  const __CFString *ChannelName;
  const __CFString *v4;
  CFIndex Length;
  __CFString *MutableCopy;
  uint64_t UnitLabel;
  uint64_t IntegerValue;
  CFStringRef v9;
  __CFDictionary *v10;
  const __CFString *v11;

  IOReportChannelGetGroup();
  v2 = FigCFEqual();
  ChannelName = (const __CFString *)IOReportChannelGetChannelName();
  if (!ChannelName)
    return 0;
  v4 = ChannelName;
  Length = CFStringGetLength(ChannelName);
  MutableCopy = CFStringCreateMutableCopy(0, Length, v4);
  CFStringTrimWhitespace(MutableCopy);
  UnitLabel = IOReportChannelGetUnitLabel();
  IntegerValue = IOReportSimpleGetIntegerValue();
  v9 = CFStringCreateWithFormat(0, 0, CFSTR("%lld%@"), IntegerValue, UnitLabel);
  if (FigCFEqual())
  {
    v10 = *(__CFDictionary **)(a1 + 32);
    if (v2)
      v11 = CFSTR("P2PCCA");
    else
      v11 = CFSTR("InfraCCA");
  }
  else if (FigCFEqual())
  {
    v10 = *(__CFDictionary **)(a1 + 32);
    v11 = CFSTR("InfraRSSI");
  }
  else
  {
    if (!FigCFEqual() || v2)
      goto LABEL_12;
    v10 = *(__CFDictionary **)(a1 + 32);
    v11 = CFSTR("InfraSNR");
  }
  CFDictionarySetValue(v10, v11, v9);
LABEL_12:
  if (v9)
    CFRelease(v9);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return 0;
}

uint64_t __wifiManagerClient_getPeerRSSI_block_invoke(uint64_t a1)
{
  **(_QWORD **)(a1 + 32) = IOReportSimpleGetIntegerValue();
  return 0;
}

uint64_t APTransportPackageScreenCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = APTransportPackageScreenCreateWithBBuf(a1, 0, a2);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t APTransportPackageScreenCreateWithBBuf(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;

  APTransportPackageGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    APSLogErrorAt();
  }
  else
  {
    *(_QWORD *)CMBaseObjectGetDerivedStorage() = a2;
    if (a2)
      CFRetain(a2);
    if (gLogCategory_APTransportPackageScreen <= 30
      && (gLogCategory_APTransportPackageScreen != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *a3 = 0;
  }
  return v5;
}

void screenpackage_Finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageScreen <= 30
    && (gLogCategory_APTransportPackageScreen != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *screenpackage_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportPackageScreen %p>"), a1);
  return Mutable;
}

CFTypeRef screenpackage_CopyMessageData()
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v1;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  v1 = *DerivedStorage;
  if (*DerivedStorage)
    CFRetain(*DerivedStorage);
  return v1;
}

void screenpackage_SetMessageData(uint64_t a1, const void *a2)
{
  const void **DerivedStorage;
  const void *v4;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  v4 = *DerivedStorage;
  *DerivedStorage = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
}

uint64_t screenpackage_GetMessageType()
{
  return 0;
}

CFTypeRef screenpackage_CreateBBufRepresentation()
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v1;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  v1 = *DerivedStorage;
  if (*DerivedStorage)
    CFRetain(*DerivedStorage);
  return v1;
}

uint64_t APTransportStreamAggregateCreate(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFMutableDictionaryRef Mutable;
  dispatch_semaphore_t v10;
  const void *Value;
  uint64_t v12;

  if (!a3)
  {
    APSLogErrorAt();
    return 4294950686;
  }
  FigTransportStreamGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v12 = v5;
    APSLogErrorAt();
    return v12;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  SNPrintF();
  v7 = FigDispatchQueueCreateWithPriority();
  DerivedStorage[2] = v7;
  if (!v7
    || (v8 = FigSimpleMutexCreate(), (DerivedStorage[5] = v8) == 0)
    || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (DerivedStorage[7] = Mutable) == 0)|| (v10 = dispatch_semaphore_create(0), (DerivedStorage[3] = v10) == 0))
  {
    APSLogErrorAt();
    return 4294950685;
  }
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("SendBackingProvider"));
    if (Value)
      Value = CFRetain(Value);
    DerivedStorage[1] = Value;
    if (Value)
      goto LABEL_11;
LABEL_15:
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  if (!DerivedStorage[1])
    goto LABEL_15;
LABEL_11:
  if (gLogCategory_APTransportStreamAggregate <= 50
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v12 = 0;
  *a3 = 0;
  return v12;
}

uint64_t APTransportStreamAggregateAddSubStream(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, void **);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t ProtocolVTable;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void *);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const __CFString *, _QWORD, void **);
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, const void *, CFTypeRef *);
  uint64_t v26;
  CFTypeRef v27;
  uint64_t v28;
  uint64_t (*v29)(CFTypeRef, uint64_t, uint64_t (*)(int), uint64_t, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, const __CFString *, const __CFString *);
  uint64_t v33;
  CFTypeRef v34;
  uint64_t (*v35)(CFTypeRef);
  uint64_t v36;
  NSObject *v37;
  dispatch_time_t v38;
  CFTypeRef v39;
  void (*v40)(CFTypeRef, _QWORD);
  CFTypeRef cf;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1
    || (v5 = DerivedStorage,
        *(_UNKNOWN **)(CMBaseObjectGetVTable() + 16) != &kAPTransportStreamAggregate_FigTransportStreamClass))
  {
    APSLogErrorAt();
    return 4294950686;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 40));
  if (gLogCategory_APTransportStreamAggregate <= 50
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v6 = *(_QWORD *)(v5 + 48);
  v7 = CMBaseObjectGetDerivedStorage();
  if (v6)
  {
    value = 0;
    FigSimpleMutexCheckIsLockedOnThisThread();
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v7 + 56), a2))
    {
      APSLogErrorAt();
      v16 = 4294950686;
    }
    else
    {
      CMBaseObject = FigTransportStreamGetCMBaseObject();
      v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
      if (v9)
      {
        v10 = v9(CMBaseObject, CFSTR("SendConnection"), *MEMORY[0x1E0C9AE00], &value);
        if ((_DWORD)v10)
        {
          v16 = v10;
        }
        else
        {
          v11 = *(_QWORD *)(v7 + 48);
          v12 = value;
          APTransportConnectionAggregateProtocolGetProtocolID();
          ProtocolVTable = CMBaseObjectGetProtocolVTable();
          if (ProtocolVTable && (v14 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
          {
            v15 = *(uint64_t (**)(uint64_t, void *))(v14 + 16);
            if (v15)
            {
              v16 = v15(v11, v12);
              if (!(_DWORD)v16)
              {
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 56), a2, value);
                goto LABEL_40;
              }
            }
            else
            {
              v16 = 4294954514;
            }
          }
          else
          {
            v16 = 4294954508;
          }
        }
      }
      else
      {
        v16 = 4294954514;
      }
      APSLogErrorAt();
    }
LABEL_40:
    if (value)
      CFRelease(value);
    if (!(_DWORD)v16)
      goto LABEL_60;
    goto LABEL_71;
  }
  cf = 0;
  value = 0;
  FigSimpleMutexCheckIsLockedOnThisThread();
  v17 = FigTransportStreamGetCMBaseObject();
  v18 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v18)
  {
    v16 = 4294954514;
LABEL_45:
    APSLogErrorAt();
    v21 = 0;
    goto LABEL_49;
  }
  v19 = v18(v17, CFSTR("SendConnection"), *MEMORY[0x1E0C9AE00], &value);
  if ((_DWORD)v19)
  {
    v16 = v19;
    goto LABEL_45;
  }
  APTransportConnectionAggregateProtocolGetProtocolID();
  v20 = CMBaseObjectGetProtocolVTable();
  if (!v20 || !*(_QWORD *)(v20 + 16))
  {
    APSLogErrorAt();
    v21 = 0;
    v16 = 4294950686;
    goto LABEL_49;
  }
  v21 = (const void *)CFStringCreateF();
  if (!v21)
  {
    APSLogErrorAt();
    v16 = 4294950685;
    goto LABEL_49;
  }
  v22 = value;
  APTransportConnectionAggregateProtocolGetProtocolID();
  v23 = CMBaseObjectGetProtocolVTable();
  if (!v23 || (v24 = *(_QWORD *)(v23 + 16)) == 0)
  {
    v16 = 4294954508;
LABEL_47:
    APSLogErrorAt();
    goto LABEL_49;
  }
  v25 = *(uint64_t (**)(void *, const void *, CFTypeRef *))(v24 + 8);
  if (!v25)
  {
    v16 = 4294954514;
    goto LABEL_47;
  }
  v26 = v25(v22, v21, &cf);
  if ((_DWORD)v26)
  {
    v16 = v26;
    goto LABEL_47;
  }
  v27 = cf;
  v28 = *(_QWORD *)(v7 + 16);
  v29 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t (*)(int), uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v29)
  {
    v16 = 4294954514;
    goto LABEL_47;
  }
  v30 = v29(v27, a1, streamAggregate_eventReceived, v28, 0);
  if ((_DWORD)v30)
  {
    v16 = v30;
    goto LABEL_47;
  }
  v31 = APTransportConnectionGetCMBaseObject(cf);
  v32 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
  if (!v32)
  {
    v16 = 4294954514;
    goto LABEL_47;
  }
  v33 = v32(v31, CFSTR("PackageType"), CFSTR("RTP"));
  if ((_DWORD)v33)
  {
    v16 = v33;
    goto LABEL_47;
  }
  v34 = cf;
  v35 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v35)
  {
    v16 = 4294954514;
    goto LABEL_47;
  }
  v36 = v35(v34);
  if ((_DWORD)v36)
  {
    v16 = v36;
    goto LABEL_47;
  }
  v37 = *(NSObject **)(v7 + 24);
  v38 = dispatch_time(0, 4000000000);
  if (!dispatch_semaphore_wait(v37, v38) && !*(_DWORD *)(v7 + 32))
  {
    if (gLogCategory_APTransportStreamAggregate <= 50
      && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 56), a2, value);
    v16 = 0;
    *(_QWORD *)(v7 + 48) = cf;
    cf = 0;
    goto LABEL_53;
  }
  APSLogErrorAt();
  v16 = APSSignalErrorAt();
LABEL_49:
  if ((_DWORD)v16)
  {
    v39 = cf;
    if (cf)
    {
      v40 = *(void (**)(CFTypeRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v40)
        v40(v39, 0);
    }
  }
LABEL_53:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  if (!(_DWORD)v16)
    goto LABEL_60;
LABEL_71:
  APSLogErrorAt();
LABEL_60:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 40));
  return v16;
}

uint64_t APTransportStreamAggregateRemoveSubStream(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *Value;
  const void *v7;
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const void *);
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1
    || (v5 = DerivedStorage,
        *(_UNKNOWN **)(CMBaseObjectGetVTable() + 16) != &kAPTransportStreamAggregate_FigTransportStreamClass)
    || !*(_QWORD *)(v5 + 48))
  {
    APSLogErrorAt();
    return 4294950686;
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 40));
  if (gLogCategory_APTransportStreamAggregate <= 50
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 56), a2);
  if (!Value)
  {
    APSLogErrorAt();
    v12 = 4294950686;
    goto LABEL_16;
  }
  v7 = Value;
  v8 = *(_QWORD *)(v5 + 48);
  APTransportConnectionAggregateProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v10 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v12 = 4294954508;
    goto LABEL_15;
  }
  v11 = *(uint64_t (**)(uint64_t, const void *))(v10 + 24);
  if (!v11)
  {
    v12 = 4294954514;
    goto LABEL_15;
  }
  v12 = v11(v8, v7);
  if ((_DWORD)v12)
  {
LABEL_15:
    APSLogErrorAt();
    goto LABEL_16;
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 56), a2);
LABEL_16:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 40));
  return v12;
}

uint64_t streamAggregate_Invalidate()
{
  streamAggregate_invalidateInternal();
  return 0;
}

void streamAggregate_Finalize()
{
  _QWORD *DerivedStorage;
  NSObject *v1;
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStreamAggregate <= 30
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  streamAggregate_invalidateInternal();
  FigSimpleMutexDestroy();
  v1 = DerivedStorage[2];
  if (v1)
    dispatch_release(v1);
  v2 = DerivedStorage[3];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)DerivedStorage[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[7];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)DerivedStorage[1];
  if (v5)
    CFRelease(v5);
}

__CFString *streamAggregate_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportStreamAggregate %p>"), a1);
  return Mutable;
}

uint64_t streamAggregate_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  uint64_t v14;
  const void *Object;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    return 4294950679;
  }
  v8 = DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 40));
  v9 = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (*(_BYTE *)v9)
  {
    APSLogErrorAt();
    v14 = 4294950679;
    goto LABEL_15;
  }
  if (!CFEqual(a2, CFSTR("PrimaryPacketDropCount")))
  {
    if (gLogCategory_APTransportStreamAggregate <= 50
      && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v14 = 4294954509;
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v9 + 48);
  if (!v10)
  {
    Object = (const void *)CFNumberGetObject();
    *a4 = CFRetain(Object);
    goto LABEL_7;
  }
  CMBaseObject = APTransportConnectionGetCMBaseObject(v10);
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v12)
  {
    v14 = 4294954514;
LABEL_12:
    APSLogErrorAt();
LABEL_15:
    pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 40));
    APSLogErrorAt();
    return v14;
  }
  v13 = v12(CMBaseObject, CFSTR("PrimaryPacketDropCount"), a3, a4);
  if ((_DWORD)v13)
  {
    v14 = v13;
    goto LABEL_12;
  }
LABEL_7:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 40));
  return 0;
}

uint64_t streamAggregate_SetProperty()
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    return 4294950679;
  }
  else
  {
    if (gLogCategory_APTransportStreamAggregate <= 50
      && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 4294954509;
  }
}

uint64_t streamAggregate_invalidateInternal()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v1 = result;
    *(_BYTE *)result = 1;
    result = FigCFDictionaryGetCount();
    if (result >= 1 && gLogCategory_APTransportStreamAggregate <= 90)
    {
      if (gLogCategory_APTransportStreamAggregate != -1 || (result = _LogCategory_Initialize(), (_DWORD)result))
        result = LogPrintF();
    }
    v2 = *(_QWORD *)(v1 + 48);
    if (v2)
    {
      v3 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v3)
        v3(v2, 0);
      result = APTransportConnectionGetCMBaseObject(*(_QWORD *)(v1 + 48));
      if (result)
      {
        v4 = result;
        result = CMBaseObjectGetVTable();
        v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
        if (v5)
          result = v5(v4);
      }
    }
    if (gLogCategory_APTransportStreamAggregate <= 30)
    {
      if (gLogCategory_APTransportStreamAggregate != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

uint64_t streamAggregate_Resume()
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStreamAggregate <= 50
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*DerivedStorage)
    return 0;
  APSLogErrorAt();
  return 4294950679;
}

uint64_t streamAggregate_SendMessage(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  char v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v14 = 0;
  if (*(_BYTE *)DerivedStorage)
    return 0;
  v7 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    v8 = streamAggregate_copyFormattedAsyncPackageForBBuf(a1, a3, a2, &v15, &v14);
    if ((_DWORD)v8)
    {
      v12 = v8;
    }
    else
    {
      if (gLogCategory_APTransportStreamAggregate <= 10
        && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v9 = *(_QWORD *)(v7 + 48);
      v10 = v15;
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (v11)
      {
        v12 = v11(v9, v10);
        if (!(_DWORD)v12)
          goto LABEL_13;
      }
      else
      {
        v12 = 4294954514;
      }
    }
    APSLogErrorAt();
  }
  else
  {
    v12 = 0;
  }
LABEL_13:
  if (v14)
    APTransportStreamSendBackingProviderRelinquishBBuf(*(_QWORD *)(v7 + 8), a3);
  return v12;
}

uint64_t streamAggregate_SendBatch(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  uint64_t v8;
  const __CFAllocator *v9;
  CFMutableArrayRef Mutable;
  const __CFArray *v11;
  const __CFAllocator *v12;
  char *v13;
  char *v14;
  CFIndex v15;
  OpaqueCMBlockBuffer *ValueAtIndex;
  OpaqueCMBlockBuffer *v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const __CFArray *);
  uint64_t v23;
  uint64_t v24;
  CFIndex i;
  void *v26;
  const __CFAllocator *v27;
  uint64_t v29;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  Count = CFArrayGetCount(a3);
  if (*(_BYTE *)DerivedStorage || !*(_QWORD *)(DerivedStorage + 48))
    return 0;
  v8 = Count;
  v9 = CFGetAllocator(a3);
  Mutable = CFArrayCreateMutable(v9, v8, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v11 = Mutable;
    v12 = CFGetAllocator(a3);
    v13 = (char *)CFAllocatorAllocate(v12, v8, 0);
    if (v13)
    {
      v14 = v13;
      v29 = DerivedStorage;
      bzero(v13, v8);
      if (gLogCategory_APTransportStreamAggregate <= 10
        && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      if (v8 < 1)
      {
LABEL_21:
        if (gLogCategory_APTransportStreamAggregate <= 10
          && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v20 = v29;
        v21 = *(_QWORD *)(v29 + 48);
        v22 = *(uint64_t (**)(uint64_t, const __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
        if (v22)
          v23 = v22(v21, v11);
        else
          v23 = APTransportConnectionSendBatchSlow(v21, v11);
        v24 = v23;
        if ((_DWORD)v23)
          APSLogErrorAt();
      }
      else
      {
        v15 = 0;
        while (1)
        {
          ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(a3, v15);
          if (!ValueAtIndex || (v17 = ValueAtIndex, v18 = CFGetTypeID(ValueAtIndex), v18 != CMBlockBufferGetTypeID()))
          {
            APSLogErrorAt();
            v24 = 4294950686;
            goto LABEL_40;
          }
          v19 = streamAggregate_copyFormattedAsyncPackageForBBuf(a1, v17, a2, (uint64_t *)&value, &v14[v15]);
          if ((_DWORD)v19)
            break;
          if (gLogCategory_APTransportStreamAggregate <= 10
            && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          CFArrayAppendValue(v11, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
          if (v8 == ++v15)
            goto LABEL_21;
        }
        v24 = v19;
        APSLogErrorAt();
LABEL_40:
        v20 = v29;
      }
      if (v8 >= 1)
      {
        for (i = 0; i != v8; ++i)
        {
          if (v14[i])
          {
            v26 = (void *)CFArrayGetValueAtIndex(a3, i);
            APTransportStreamSendBackingProviderRelinquishBBuf(*(_QWORD *)(v20 + 8), v26);
          }
        }
      }
      v27 = CFGetAllocator(a3);
      CFAllocatorDeallocate(v27, v14);
    }
    else
    {
      APSLogErrorAt();
      v24 = 4294950685;
    }
    CFRelease(v11);
  }
  else
  {
    APSLogErrorAt();
    return 4294950685;
  }
  return v24;
}

uint64_t streamAggregate_copyFormattedAsyncPackageForBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, uint64_t *a4, char *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t DataPointer;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  const void *v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, OpaqueCMBlockBuffer *);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  size_t v27;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  uint64_t v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4 || !a5)
  {
    APSLogErrorAt();
    return 4294950686;
  }
  v10 = DerivedStorage;
  v11 = CMBaseObjectGetDerivedStorage();
  dataPointerOut = 0;
  v30 = 0;
  v27 = 0;
  lengthAtOffsetOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, &v27, &dataPointerOut);
  if ((_DWORD)DataPointer)
  {
    v25 = DataPointer;
    goto LABEL_28;
  }
  if (lengthAtOffsetOut != v27
    || (APTransportStreamSendBackingProviderCopyPackageForAcquiredBBuf(*(_QWORD *)(v11 + 8), a2, (CFTypeRef *)&v30),
        (v13 = v30) == 0))
  {
    v15 = APTransportStreamSendBackingProviderCopyPackageForGivenBBuf(*(_QWORD *)(v11 + 8), a2, &v30);
    if (!(_DWORD)v15)
    {
      v14 = 1;
      v13 = v30;
      goto LABEL_10;
    }
    v25 = v15;
LABEL_28:
    APSLogErrorAt();
    APSLogErrorAt();
    return v25;
  }
  v14 = 0;
LABEL_10:
  *a4 = v13;
  *a5 = v14;
  v16 = *a4;
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v17)
    v18 = (const void *)v17(v16);
  else
    v18 = 0;
  v19 = *a4;
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v20)
    v20(v19, a3);
  if (*(_QWORD *)(v10 + 8))
  {
    if (!v18)
    {
      v21 = *a4;
      v22 = *(void (**)(uint64_t, OpaqueCMBlockBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v22)
        v22(v21, a2);
    }
  }
  v23 = *a4;
  v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v24)
    v24(v23, 1634957678);
  if (v18)
    CFRelease(v18);
  return 0;
}

uint64_t streamAggregate_eventReceived(int a1)
{
  uint64_t DerivedStorage;
  int v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a1 - 4) > 4)
    LOBYTE(v3) = 30;
  else
    v3 = dword_1C94325A8[a1 - 4];
  if ((v3 & 0x3E) >= gLogCategory_APTransportStreamAggregate
    && (gLogCategory_APTransportStreamAggregate != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1 == 5)
    goto LABEL_11;
  if (a1 == 4)
  {
    *(_DWORD *)(DerivedStorage + 32) = CFGetInt64();
LABEL_11:
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(DerivedStorage + 24));
  }
  return 0;
}

uint64_t APTransportStreamIDMake(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a2 << 32) | (a1 << 48) | a3;
}

unint64_t APTransportStreamIDInsertPort(uint64_t a1, unsigned __int16 a2)
{
  return a1 & 0xFFFFFFFFFFFFLL | ((unint64_t)a2 << 48);
}

unint64_t APTransportStreamIDInsertStreamCategory(uint64_t a1, uint64_t a2)
{
  return a1 & 0xFFFFFFFCFFFFFFFFLL | (a2 << 32);
}

unint64_t APTransportStreamIDInsertIdentifier(uint64_t a1, unsigned int a2)
{
  return a1 & 0xFFFFFFFF00000000 | a2;
}

uint64_t APTransportStreamIDMakeWithPort(uint64_t a1)
{
  return (a1 << 48) | 0x200000000;
}

uint64_t APTransportStreamIDGetStreamCategory(unint64_t a1)
{
  return HIDWORD(a1) & 3;
}

unint64_t APTransportStreamIDGetPort(unint64_t a1)
{
  return HIWORD(a1);
}

uint64_t APTransportStreamIDGetToken(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL;
}

CFStringRef APTransportStreamIDCreateStringRepresentation()
{
  char cStr[8];
  __int16 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = 0;
  *(_QWORD *)cStr = 0;
  SNPrintF();
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
}

const char *APBrokerHTTPMethodString(int a1)
{
  const char *v1;

  v1 = "UNKNOWNMETHOD";
  if (a1 == 2)
    v1 = "POST";
  if (a1 == 1)
    return "GET";
  else
    return v1;
}

const char *APBrokerHTTPProtocolString(int a1)
{
  if (a1)
    return "https";
  else
    return "http";
}

void APBrokerHTTPSendRequest(uint64_t a1, uint64_t a2, const void *a3, int a4, int a5, const void *a6, const void *a7, const void *a8, uint64_t a9, void *a10)
{
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  void *v25;
  uint64_t Int64;
  uint64_t TypedValue;
  APBrokerHTTPUtilsTaskDelegate *v28;
  _QWORD *v29;
  _QWORD *v30;
  dispatch_queue_t v31;
  const void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void *aBlock;
  _QWORD v38[2];
  void (*v39)(uint64_t, CFTypeRef, _OWORD *, int, int);
  void *v40;
  uint64_t v41;
  int v42;
  _QWORD v43[3];
  int v44;
  void *v45;
  char label[16];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v18 = a10;
  v50 = *MEMORY[0x1E0C80C00];
  v42 = 0;
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!a10)
  {
    APSLogErrorAt();
    return;
  }
  if (!a3 || !a4)
  {
    APSLogErrorAt();
    v33 = -6705;
    goto LABEL_39;
  }
  aBlock = a10;
  v19 = malloc_type_calloc(1uLL, 0x68uLL, 0x10E00402108E38DuLL);
  if (!v19)
  {
    APSLogErrorAt();
    v42 = -6728;
    goto LABEL_40;
  }
  v20 = (uint64_t)v19;
  *v19 = a1;
  if (a2)
  {
    v21 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_QWORD *)(v20 + 8) = v21;
    if (!v21)
      goto LABEL_61;
  }
  *(_DWORD *)(v20 + 16) = a5;
  v22 = a6 ? CFRetain(a6) : 0;
  *(_QWORD *)(v20 + 32) = v22;
  v23 = a7 ? CFRetain(a7) : 0;
  *(_QWORD *)(v20 + 40) = v23;
  v24 = a8 ? CFRetain(a8) : 0;
  *(_QWORD *)(v20 + 48) = v24;
  v25 = _Block_copy(a10);
  *(_QWORD *)(v20 + 56) = v25;
  if (!v25)
    goto LABEL_61;
  if (a9)
  {
    Int64 = CFDictionaryGetInt64();
    *(_BYTE *)(v20 + 20) = Int64 != 0;
    if (Int64)
    {
      CFStringGetTypeID();
      TypedValue = CFDictionaryGetTypedValue();
      if (!TypedValue)
      {
        APSLogErrorAt();
        v36 = -6705;
LABEL_62:
        v42 = v36;
        goto LABEL_35;
      }
      v28 = -[APBrokerHTTPUtilsTaskDelegate initWithLogContext:sslCertificateHostName:]([APBrokerHTTPUtilsTaskDelegate alloc], "initWithLogContext:sslCertificateHostName:", a1, TypedValue);
      *(_QWORD *)(v20 + 24) = v28;
      if (v28)
        goto LABEL_25;
LABEL_61:
      APSLogErrorAt();
      v36 = -6728;
      goto LABEL_62;
    }
  }
LABEL_25:
  if (a4 != 1)
  {
    *(_QWORD *)(v20 + 64) = CFRetain(a3);
    v32 = (const void *)CFStringCreateF();
    if (v42)
    {
      APSLogErrorAt();
      if (!v32)
      {
LABEL_34:
        if (!v20)
        {
LABEL_36:
          v18 = aBlock;
          if (!aBlock)
            return;
          if (v42)
          {
LABEL_40:
            (*((void (**)(void *, _QWORD, _QWORD, _QWORD, _QWORD))v18 + 2))(v18, 0, 0, 0, 0);
            return;
          }
          v33 = -6762;
LABEL_39:
          v42 = v33;
          goto LABEL_40;
        }
LABEL_35:
        _APBrokerHTTPReleaseRequestData(v20);
        goto LABEL_36;
      }
    }
    else
    {
      _APBrokerHTTPSendRequestToURL(v20, (uint64_t)v32);
      aBlock = 0;
      v20 = 0;
      if (!v32)
        goto LABEL_34;
    }
    CFRelease(v32);
    goto LABEL_34;
  }
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v39 = __APBrokerHTTPSendRequest_block_invoke;
  v40 = &__block_descriptor_40_e131_v52__0____CFString__8____sockaddr_CC_14c___sockaddr_in_CCS_in_addr_I__8c___sockaddr_in6_CCSI_in6_addr_____16C__8S__4I___I__16I44i48l;
  v41 = v20;
  v48 = 0u;
  v49 = 0u;
  *(_OWORD *)label = 0u;
  v47 = 0u;
  v45 = 0;
  v29 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E004006E54201uLL);
  v30 = v29;
  if (!v29
    || (*v29 = v20, v29[1] = _Block_copy(v38),
                    SNPrintF(),
                    v31 = dispatch_queue_create(label, 0),
                    (v30[2] = v31) == 0))
  {
    APSLogErrorAt();
    v35 = 4294960568;
LABEL_59:
    memset(v43, 0, sizeof(v43));
    v44 = 0;
    v39((uint64_t)v38, 0, v43, 0, v35);
    goto LABEL_44;
  }
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  FigCFStringGetCStringPtrAndBufferToFree();
  v34 = AsyncConnection_Connect();
  if ((_DWORD)v34)
  {
    v35 = v34;
    APSLogErrorAt();
    goto LABEL_59;
  }
  v30 = 0;
LABEL_44:
  if (v45)
    free(v45);
  if (v30)
    _APBrokerHTTPReleaseResolutionData(v30);
}

uint64_t _APBrokerHTTPSendRequestToURL(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  int v6;
  const char *v7;
  const char *v8;
  double IntWithDefault;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  const __CFString *v15;
  const char *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  int v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  _QWORD v31[5];
  _QWORD v32[6];

  v4 = *(_QWORD *)a1;
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    if (*(_BYTE *)(a1 + 20))
      v5 = "https";
    else
      v5 = "http";
    v6 = *(_DWORD *)(a1 + 16);
    v7 = "UNKNOWNMETHOD";
    if (v6 == 2)
      v7 = "POST";
    if (v6 == 1)
      v8 = "GET";
    else
      v8 = v7;
    v25 = v4;
    v27 = v5;
    v29 = v8;
    v30 = a2;
    LogPrintF();
  }
  IntWithDefault = (double)(int)APSSettingsGetIntWithDefault();
  v10 = (void *)objc_msgSend(MEMORY[0x1E0CB39F8], "ephemeralSessionConfiguration");
  objc_msgSend(v10, "setWaitsForConnectivity:", 1);
  objc_msgSend(v10, "setAllowsCellularAccess:", 0);
  objc_msgSend(v10, "setTimeoutIntervalForResource:", IntWithDefault);
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CB39F0], "sessionWithConfiguration:", v10);
  v12 = (void *)objc_msgSend(MEMORY[0x1E0CB37A8], "requestWithURL:cachePolicy:timeoutInterval:", objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", a2), 1, IntWithDefault);
  if (!v12)
    goto LABEL_22;
  v13 = v12;
  v14 = *(_DWORD *)(a1 + 16);
  if (v14 != 1)
  {
    if (v14 == 2)
    {
      v15 = CFSTR("POST");
      goto LABEL_18;
    }
LABEL_22:
    APSLogErrorAt();
    goto LABEL_23;
  }
  v15 = CFSTR("GET");
LABEL_18:
  objc_msgSend(v12, "setHTTPMethod:", v15, v25, v27, v29, v30);
  v16 = *(const char **)(a1 + 40);
  v17 = MEMORY[0x1E0C809B0];
  if (v16)
  {
    if (gLogCategory_APBrokerHTTPUtils <= 10)
    {
      if (gLogCategory_APBrokerHTTPUtils != -1
        || (v18 = _LogCategory_Initialize(), v16 = *(const char **)(a1 + 40), v18))
      {
        v25 = *(_QWORD *)a1;
        v27 = v16;
        LogPrintF();
      }
    }
    v32[1] = v17;
    v32[2] = 3221225472;
    v32[3] = ___APBrokerHTTPGetSessionAndRequest_block_invoke;
    v32[4] = &unk_1E8258A30;
    v32[5] = v13;
    CFDictionaryApplyBlock();
  }
  v19 = *(const char **)(a1 + 48);
  if (v19)
  {
    v32[0] = 0;
    if (gLogCategory_APBrokerHTTPUtils <= 10)
    {
      if (gLogCategory_APBrokerHTTPUtils != -1
        || (v20 = _LogCategory_Initialize(), v19 = *(const char **)(a1 + 48), v20))
      {
        v25 = *(_QWORD *)a1;
        v27 = v19;
        LogPrintF();
        v19 = *(const char **)(a1 + 48);
      }
    }
    v21 = objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v19, 1, v32, v25, v27);
    if (!NSErrorToOSStatus())
    {
      objc_msgSend(v13, "setHTTPBody:", v21);
      goto LABEL_34;
    }
    APSLogErrorAt();
LABEL_23:
    objc_msgSend(v11, "finishTasksAndInvalidate", v25, v27);
    APSLogErrorAt();
    v11 = 0;
LABEL_24:
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    _APBrokerHTTPReleaseRequestData(a1);
    return objc_msgSend(v11, "finishTasksAndInvalidate", v26, v28, v29);
  }
LABEL_34:
  objc_msgSend(0, "finishTasksAndInvalidate", v25, v27);
  v31[0] = v17;
  v31[1] = 3221225472;
  v31[2] = ___APBrokerHTTPSendRequestToURL_block_invoke;
  v31[3] = &__block_descriptor_40_e46_v32__0__NSData_8__NSURLResponse_16__NSError_24l;
  v31[4] = a1;
  v22 = (void *)objc_msgSend(v11, "dataTaskWithRequest:completionHandler:", v13, v31);
  if (!v22)
  {
    APSLogErrorAt();
    goto LABEL_24;
  }
  v23 = v22;
  objc_msgSend(v22, "setDelegate:", *(_QWORD *)(a1 + 24));
  objc_msgSend(v23, "resume");
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    v28 = v11;
    v29 = (const char *)v23;
    v26 = v4;
    LogPrintF();
  }
  return objc_msgSend(v11, "finishTasksAndInvalidate", v26, v28, v29);
}

void _APBrokerHTTPReleaseRequestData(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }

  *(_QWORD *)(a1 + 24) = 0;
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v6 = *(const void **)(a1 + 56);
  if (v6)
  {
    _Block_release(v6);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v7 = *(const void **)(a1 + 64);
  if (v7)
    CFRelease(v7);
  free((void *)a1);
}

void APBrokerHTTPResolutionProgressHandler(int a1, __int128 *a2, uint64_t a3)
{
  const void *v6;
  const void *v7;
  const void *v8;
  char *v9;
  size_t v10;
  size_t v11;
  unsigned int v12;
  __int128 v13;
  unsigned int v14;
  char v15[8];
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (a1 != 4)
  {
    if (a1 != 2)
      return;
    v6 = (const void *)CFStringCreateF();
    if (!v6)
    {
      APSLogErrorAt();
      return;
    }
    v7 = v6;
    v8 = *(const void **)(a3 + 32);
    *(_QWORD *)(a3 + 32) = v6;
    CFRetain(v6);
    if (v8)
      CFRelease(v8);
    *(_QWORD *)v15 = 0;
    v16 = 0;
    v17 = 0;
    v9 = strchr((char *)a2, 37);
    if (!v9)
      goto LABEL_16;
    v10 = strlen(v9 + 1);
    if (v10 <= 0x10)
    {
      v11 = v10;
      __memcpy_chk();
      v15[v11] = 0;
      v12 = if_nametoindex(v15);
      v14 = v12;
      if (v12)
      {
LABEL_15:
        *(_DWORD *)(a3 + 68) = v12;
LABEL_16:
        if (gLogCategory_APBrokerHTTPUtils <= 30
          && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        CFRelease(v7);
        return;
      }
      if (sscanf(v15, "%u", &v14) == 1)
      {
        v12 = v14;
        goto LABEL_15;
      }
    }
    APSLogErrorAt();
    if (gLogCategory_APBrokerHTTPUtils <= 60
      && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)(a3 + 68) = 0;
    goto LABEL_16;
  }
  v13 = *a2;
  *(_OWORD *)(a3 + 52) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(a3 + 40) = v13;
  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void APBrokerHTTPResolutionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t);
  _OWORD v12[2];

  if (gLogCategory_APBrokerHTTPUtils <= 30
    && (gLogCategory_APBrokerHTTPUtils != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 32);
  v10 = *(unsigned int *)(a3 + 68);
  v11 = *(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v8 + 16);
  v12[0] = *(_OWORD *)(a3 + 40);
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a3 + 52);
  v11(v8, v9, v12, v10, a2, a6);
  _APBrokerHTTPReleaseResolutionData((_QWORD *)a3);
}

void _APBrokerHTTPReleaseResolutionData(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  const void *v4;

  v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  if (a1[3])
  {
    AsyncConnection_Release();
    a1[3] = 0;
  }
  v3 = a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0;
  }
  v4 = (const void *)a1[1];
  if (v4)
    _Block_release(v4);
  free(a1);
}

uint64_t APTNANDataSessionStatisticsReportCopyDictionary(void *a1, CFTypeRef *a2)
{
  char isKindOfClass;
  uint64_t result;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  int v8;
  const void **v9;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  result = 4294960591;
  if (a2 && (isKindOfClass & 1) != 0)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      objc_msgSend(a1, "infrastructureChannel");
      FigCFDictionarySetValue();
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, CFSTR("TxCCA"), (void *)objc_msgSend(a1, "txCCAHistogram"));
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, CFSTR("RxRSSI"), (void *)objc_msgSend(a1, "rxRSSIHistogram"));
      objc_msgSend(a1, "preferred2GChannelsCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "preferred5GChannelsCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "dfsChannelsCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "csaCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "quietIECount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txErrorCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "packetsOn2GCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "packetsNAVOn2GCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "packetsHOFOn2GCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "packetsOverridenOn5GCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "packetsOn5GCount");
      FigCFDictionarySetValue();
      v8 = objc_msgSend(a1, "infraRelayOperationStatus");
      v9 = (const void **)MEMORY[0x1E0C9AE50];
      if (!v8)
        v9 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v7, CFSTR("InfraRelayOperationStatus"), *v9);
      objc_msgSend(a1, "infraRelayRequestersCount");
      FigCFDictionarySetValue();
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, CFSTR("RxFWDelayHistogram"), (void *)objc_msgSend(a1, "rxFWDelayHistogram"));
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, CFSTR("RxIPCDelayHistogram"), (void *)objc_msgSend(a1, "rxIPCDelayHistogram"));
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, CFSTR("TxConsecutiveErrorsHistogram"), (void *)objc_msgSend(a1, "txConsecutiveErrorsHistogram"));
      _APTNANDataSessionStatisticsReportDictionarySetHistogram(v7, CFSTR("TxPacketExpiryHistogram"), (void *)objc_msgSend(a1, "txPacketExpiryHistogram"));
      objc_msgSend(a1, "txExpiredCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txNoACKCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txFailedCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txNoResourcesCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txIOErrorCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txMemoryErrorCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txChipModeErrorCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txNoRemotePeerCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txInternalErrorCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txDroppedCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txFirmwareFreePacketCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txMaxRetriesCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "txForceLifetimeExpiredCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "channelSequenceMismatchOn5GCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "channelSequenceMismatchOn2GCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "infraScanCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "infraAssocCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "infraDisassocCount");
      FigCFDictionarySetValue();
      objc_msgSend(a1, "countryCode");
      FigCFDictionarySetValue();
      *a2 = CFRetain(v7);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294960568;
    }
  }
  return result;
}

void _APTNANDataSessionStatisticsReportDictionarySetHistogram(CFMutableDictionaryRef theDict, void *key, void *a3)
{
  __CFString *Mutable;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (theDict && key)
  {
    if (a3)
    {
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      if (Mutable)
      {
        v7 = Mutable;
        CFStringAppendFormat(Mutable, 0, CFSTR("["));
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v19;
          do
          {
            for (i = 0; i != v9; ++i)
            {
              if (*(_QWORD *)v19 != v10)
                objc_enumerationMutation(a3);
              v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
              objc_msgSend(v12, "binStart");
              v14 = v13;
              objc_msgSend(v12, "binEnd");
              v16 = v15;
              objc_msgSend(v12, "value");
              CFStringAppendFormat(v7, 0, CFSTR("[%.2f, %.2f, %.2f], "), v14, v16, v17);
            }
            v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
          }
          while (v9);
        }
        CFStringAppendFormat(v7, 0, CFSTR("]"));
        CFDictionarySetValue(theDict, key, v7);
        CFRelease(v7);
      }
    }
    else
    {
      CFDictionaryRemoveValue(theDict, key);
    }
  }
}

uint64_t APTransportGetSharedTransport()
{
  if (APTransportGetSharedTransport_sInitOnce != -1)
    dispatch_once_f(&APTransportGetSharedTransport_sInitOnce, &APTransportGetSharedTransport_sTransport, (dispatch_function_t)transport_getSharedTransport);
  return APTransportGetSharedTransport_sTransport;
}

void transport_getSharedTransport(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *DerivedStorage;
  dispatch_queue_t v4;
  dispatch_queue_t v5;

  v2 = *MEMORY[0x1E0C9AE00];
  FigTransportGetClassID();
  if (CMDerivedObjectCreate()
    || (DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage(),
        v4 = dispatch_queue_create("APTransport", 0),
        (*DerivedStorage = v4) == 0)
    || (v5 = dispatch_queue_create("APTransport.notification", 0), (DerivedStorage[1] = v5) == 0)
    || FigCFWeakReferenceTableCreate()
    || APTransportTrafficRegistrarCreate(v2, DerivedStorage + 3)
    || APTransportWifiManagerClientCreate(v2, DerivedStorage + 4))
  {
    APSLogErrorAt();
  }
  else
  {
    if (gLogCategory_APTransport <= 30 && (gLogCategory_APTransport != -1 || _LogCategory_Initialize()))
      LogPrintF();
    *a1 = 0;
  }
}

uint64_t APTransportUnregisterSession(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    APSDispatchAsyncFHelper();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950716;
  }
}

uint64_t transport_unregisterSessionInternal()
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransport <= 30 && (gLogCategory_APTransport != -1 || _LogCategory_Initialize()))
    LogPrintF();
  result = FigCFWeakReferenceTableRemoveValue();
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

uint64_t transport_Finalize()
{
  uint64_t result;

  if (gLogCategory_APTransport <= 90)
  {
    if (gLogCategory_APTransport != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

__CFString *transport_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransport %p>"), a1);
  return Mutable;
}

uint64_t transport_CopyProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t transport_SetProperty()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchAsyncSetPropertyImplementation();
}

uint64_t transport_copyPropertyInternal(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v7;
  CFTypeRef v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("TrafficRegistrar")))
  {
    v7 = *(const void **)(DerivedStorage + 24);
    if (v7)
    {
LABEL_3:
      v8 = CFRetain(v7);
LABEL_7:
      result = 0;
      *a4 = v8;
      return result;
    }
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("WifiManagerClient")))
  {
    v7 = *(const void **)(DerivedStorage + 32);
    if (v7)
      goto LABEL_3;
    goto LABEL_6;
  }
  return 4294954512;
}

uint64_t transport_setPropertyInternal()
{
  CMBaseObjectGetDerivedStorage();
  return 4294954512;
}

uint64_t transport_CreateAndRegisterService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[8];
  unsigned int v18;

  v18 = 0;
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[0] = &v18;
  context[1] = a2;
  context[2] = a3;
  context[3] = a4;
  context[4] = a5;
  context[5] = a6;
  context[6] = a7;
  context[7] = a8;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)transport_createAndRegisterServiceInternal);
  return v18;
}

uint64_t transport_UnregisterService()
{
  CMBaseObjectGetDerivedStorage();
  APSDispatchAsyncFHelper();
  return 4294954514;
}

uint64_t transport_CreateSessionToService(uint64_t a1, const __CFAllocator *a2, const void *a3, const void *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  dispatch_queue_t *DerivedStorage;
  CFTypeID v12;
  uint64_t v13;
  uint64_t v15;
  CFTypeRef cf;

  v15 = a1;
  cf = 0;
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  if (a4 && (v12 = CFGetTypeID(a4), v12 != APTransportDeviceGetTypeID()))
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  else
  {
    v13 = APTransportSessionCreate(a2, 1, a3, a4, a5, &cf);
    if ((_DWORD)v13)
    {
      if (cf)
        CFRelease(cf);
    }
    else
    {
      dispatch_sync_f(*DerivedStorage, &v15, (dispatch_function_t)transport_registerSession);
      *a6 = cf;
    }
    return v13;
  }
}

uint64_t transport_createAndRegisterServiceInternal(uint64_t a1)
{
  uint64_t result;

  result = APTransportServiceCreate(*(_QWORD *)(a1 + 8), *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), *(NSObject **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56));
  **(_DWORD **)a1 = result;
  if ((_DWORD)result)
    return APSLogErrorAt();
  return result;
}

uint64_t transport_registerSession()
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  if (!FigCFWeakReferenceTableAddValueAndGetKey())
  {
    result = APSSetFBOPropertyInt64();
    if (!(_DWORD)result)
    {
      if (gLogCategory_APTransport > 30)
        return result;
      if (gLogCategory_APTransport == -1)
      {
        result = _LogCategory_Initialize();
        if (!(_DWORD)result)
          return result;
      }
      return LogPrintF();
    }
  }
  result = APSLogErrorAt();
  if (gLogCategory_APTransport <= 60)
  {
    if (gLogCategory_APTransport != -1)
      return LogPrintF();
    result = _LogCategory_Initialize();
    if ((_DWORD)result)
      return LogPrintF();
  }
  return result;
}

uint64_t APBrowserCreateAdvertiserInfoForDevice(uint64_t a1, const __CFDictionary *a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  const __CFData *Value;
  const __CFData *v9;
  const __CFString *v10;
  const void *v11;
  unint64_t v12;
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  if (!((unint64_t)a2 | (unint64_t)theDict))
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (theDict)
  {
    Value = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("txt"));
    if (!Value)
      goto LABEL_17;
    v9 = Value;
    v10 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("name"));
    if (!v10)
      goto LABEL_17;
    if (a2)
      goto LABEL_6;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if (a2)
    {
LABEL_6:
      v11 = CFDictionaryGetValue(a2, CFSTR("txt"));
      if (!v11
        || (v12 = (unint64_t)v11, (v10 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("name"))) == 0))
      {
LABEL_17:
        APSLogErrorAt();
        return 4294960534;
      }
      goto LABEL_11;
    }
  }
  v12 = 0;
LABEL_11:
  v13 = APAdvertiserInfoCreateWithRAOPAndAirPlayDataAndDeviceName(a1, v9, v12, v10, (CFMutableDictionaryRef **)&cf);
  if ((_DWORD)v13)
  {
    APSLogErrorAt();
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a4 = cf;
  }
  return v13;
}

uint64_t APBrowserCreateDetailedModeEventInfoDictionary(const __CFAllocator *a1, const void *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10, char a11, uint64_t a12, __CFDictionary **a13)
{
  __CFDictionary *Mutable;
  __CFDictionary *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t result;

  if (a2)
  {
    Mutable = CFDictionaryCreateMutable(a1, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v19 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("deviceID"), a2);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      v20 = (const void *)*MEMORY[0x1E0C9AE50];
      v21 = (const void *)*MEMORY[0x1E0C9AE40];
      if (a5)
        v22 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v22 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v19, CFSTR("isLegacyPresent"), v22);
      if (a11)
        v23 = v20;
      else
        v23 = v21;
      CFDictionarySetValue(v19, CFSTR("isLocallyAdvertised"), v23);
      if (a6)
        v24 = v20;
      else
        v24 = v21;
      CFDictionarySetValue(v19, CFSTR("isModernPresent"), v24);
      if (a7)
        v25 = v20;
      else
        v25 = v21;
      CFDictionarySetValue(v19, CFSTR("isModernPresentOnInfra"), v25);
      if (a8)
        v26 = v20;
      else
        v26 = v21;
      CFDictionarySetValue(v19, CFSTR("isPresentOnInfra"), v26);
      CFDictionarySetInt64();
      FigCFDictionarySetValue();
      if (a9)
        CFDictionarySetInt64();
      result = 0;
      *a13 = v19;
    }
    else
    {
      APSLogErrorAt();
      return 4294960568;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APBrowserGetTransports(const __CFDictionary *a1, int a2, _DWORD *a3)
{
  const __CFString *v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  int v10;

  if (a1
    && (a2 ? (v4 = CFSTR("removedServices")) : (v4 = CFSTR("services")),
        (Value = (const __CFArray *)CFDictionaryGetValue(a1, v4)) != 0
     && (v6 = Value, Count = CFArrayGetCount(Value), Count >= 1)))
  {
    v8 = Count;
    v9 = 0;
    v10 = 0;
    do
    {
      CFArrayGetValueAtIndex(v6, v9);
      v10 |= CFDictionaryGetInt64();
      ++v9;
    }
    while (v8 != v9);
  }
  else
  {
    v10 = 0;
  }
  *a3 = v10;
  return 0;
}

uint64_t APBrowserGetTransportsRequiringBroker(const __CFDictionary *a1, _DWORD *a2)
{
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  int v8;
  const __CFDictionary *ValueAtIndex;
  const void *Value;

  if (a1
    && (v3 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("services"))) != 0
    && (v4 = v3, Count = CFArrayGetCount(v3), Count >= 1))
  {
    v6 = Count;
    v7 = 0;
    v8 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v4, v7);
      if (CFDictionaryGetValue(ValueAtIndex, CFSTR("ifname")) == CFSTR("broker0")
        || CFDictionaryGetValue(ValueAtIndex, CFSTR("ifname"))
        && (Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("ifname")), CFEqual(CFSTR("broker0"), Value)))
      {
        v8 |= CFDictionaryGetInt64();
      }
      ++v7;
    }
    while (v6 != v7);
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
  return 0;
}

const __CFDictionary *APBrowserGetIsLocallyAdvertised(const __CFDictionary *result, char *a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  int Int64;
  char v8;

  if (!result)
    goto LABEL_9;
  result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("services"));
  if (!result)
    goto LABEL_9;
  v3 = result;
  Count = CFArrayGetCount(result);
  if (Count < 1)
  {
    result = 0;
LABEL_9:
    v8 = 0;
    goto LABEL_10;
  }
  v5 = Count;
  v6 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(v3, v6);
    Int64 = CFDictionaryGetInt64();
    result = 0;
    if (!Int64)
      break;
    if (v5 == ++v6)
      goto LABEL_9;
  }
  result = 0;
  v8 = 1;
LABEL_10:
  *a2 = v8;
  return result;
}

uint64_t APBrowserIsDeviceAvailableOnTransport(const __CFDictionary *a1, int a2, BOOL *a3)
{
  uint64_t result;
  int v6;
  int v7;

  v7 = 0;
  if (a1)
  {
    APBrowserGetTransports(a1, 0, &v7);
    result = 0;
    if (a2)
      v6 = a2;
    else
      v6 = -1;
    *a3 = (v7 & v6) != 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t APBrowserCopyDeviceIDFromBonjourInfo(const void *a1, uint64_t a2, CFNumberRef *a3)
{
  const __CFAllocator *v5;
  CFNumberRef v6;
  uint64_t DeviceID;
  unsigned int v10;

  v10 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return -6705;
  }
  DeviceID = BonjourDevice_GetDeviceID();
  v5 = CFGetAllocator(a1);
  v6 = CFNumberCreate(v5, kCFNumberSInt64Type, &DeviceID);
  if (!v6)
  {
    APSLogErrorAt();
    return -6728;
  }
  *a3 = v6;
  return v10;
}

uint64_t APBrowserCreateDeviceIDFromString(const void *a1, CFNumberRef *a2)
{
  const void *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v6;
  uint64_t v7;

  v4 = (const void *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v6 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("deviceID"), a1);
    v7 = APBrowserCopyDeviceIDFromBonjourInfo(v4, (uint64_t)v6, a2);
    if ((_DWORD)v7)
      APSLogErrorAt();
    CFRelease(v6);
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
  return v7;
}

uint64_t APBrowserGetStartEventForBrowserDeviceEvent(uint64_t a1, uint64_t a2, int a3)
{
  double v4;
  double v5;
  double v6;

  APSEventRecorderGetEventTimeRecursive();
  if (v4 == 0.0)
    return 268431360;
  v5 = v4;
  if ((a3 - 268374017) < 0xB && ((0x583u >> (a3 - 1)) & 1) != 0)
    return 268431362;
  APSEventRecorderGetEventTimeRecursive();
  if (v5 <= v6 || v6 == 0.0)
    return 268431360;
  else
    return 268431361;
}

uint64_t APTKeepAliveControllerLowPowerCreate(int a1, CFTypeRef cf, const void *a3, _QWORD *a4)
{
  CFTypeID v7;
  CFTypeID v8;
  uint64_t v9;
  _QWORD *DerivedStorage;
  const __CFUUID *Value;
  uint64_t v12;
  const __CFUUID *v13;
  CFTypeID v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  const void *v22;
  uint64_t v23;
  uint64_t CMBaseObject;
  uint64_t (*v25)(uint64_t, const __CFString *, const void *);
  uint64_t v26;
  uint64_t v27;
  dispatch_queue_t v28;
  dispatch_queue_t v29;
  dispatch_queue_t v30;
  _BYTE sourceBytes[10];

  if (cf)
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFDictionaryGetTypeID())
    {
      if (a3)
      {
        v8 = CFGetTypeID(a3);
        if (v8 == FigTransportStreamGetTypeID())
        {
          if (a4)
          {
            APTransportKeepAliveControllerGetClassID();
            v9 = CMDerivedObjectCreate();
            if ((_DWORD)v9)
            {
              v12 = v9;
              goto LABEL_49;
            }
            DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
            if (gLogCategory_APTKeepAliveControllerLowPower <= 50
              && (gLogCategory_APTKeepAliveControllerLowPower != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            Value = (const __CFUUID *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("SessionUUID"));
            if (Value)
            {
              v13 = Value;
              v14 = CFGetTypeID(Value);
              if (v14 == CFUUIDGetTypeID())
              {
                *(_WORD *)&sourceBytes[8] = 0;
                *(_QWORD *)sourceBytes = bswap32(*(_OWORD *)&CFUUIDGetUUIDBytes(v13)) >> 16;
                if (CMBlockBufferCreateWithMemoryBlock(0, 0, 2uLL, 0, 0, 0, 2uLL, 1u, (CMBlockBufferRef *)&sourceBytes[2])|| CMBlockBufferReplaceDataBytes(sourceBytes, *(CMBlockBufferRef *)&sourceBytes[2], 0, 2uLL))
                {
                  APSLogErrorAt();
                }
                v15 = *(_QWORD *)&sourceBytes[2];
                DerivedStorage[6] = *(_QWORD *)&sourceBytes[2];
                if (!v15)
                {
                  v12 = 4294895536;
                  goto LABEL_49;
                }
                *(_QWORD *)&sourceBytes[2] = 0;
                if (APTPackageLowPowerKeepAliveCreate(*MEMORY[0x1E0C9AE00], &sourceBytes[2]))
                {
                  APSLogErrorAt();
                }
                else
                {
                  v16 = *(_QWORD *)&sourceBytes[2];
                  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
                  if (v17)
                    v17(v16, 1819308912);
                  v18 = *(_QWORD *)&sourceBytes[2];
                  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                  if (v19)
                    v19(v18, v15);
                  v20 = *(_QWORD *)&sourceBytes[2];
                  v21 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
                  if (v21)
                  {
                    v22 = (const void *)v21(v20);
LABEL_33:
                    if (*(_QWORD *)&sourceBytes[2])
                      CFRelease(*(CFTypeRef *)&sourceBytes[2]);
                    if (v22)
                    {
                      v23 = APSSetFBOPropertyInt64();
                      if ((_DWORD)v23)
                      {
                        v12 = v23;
                      }
                      else
                      {
                        CMBaseObject = FigTransportStreamGetCMBaseObject();
                        v25 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 56);
                        if (v25)
                        {
                          v26 = v25(CMBaseObject, CFSTR("LowPowerOffloadBBuf"), v22);
                          if ((_DWORD)v26)
                          {
                            v12 = v26;
                          }
                          else
                          {
                            v27 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                            DerivedStorage[5] = v27;
                            if (!v27)
                            {
                              APSLogErrorAt();
                              v12 = APSSignalErrorAt();
                              goto LABEL_46;
                            }
                            v28 = dispatch_queue_create("com.apple.AirPlay.APTKeepAliveControllerLowPower.state", 0);
                            DerivedStorage[2] = v28;
                            if (v28)
                            {
                              v29 = dispatch_queue_create("com.apple.AirPlay.APTKeepAliveControllerLowPower.network", 0);
                              *DerivedStorage = v29;
                              if (v29)
                              {
                                v30 = dispatch_queue_create("com.apple.AirPlay.APTKeepAliveControllerLowPower.notification", 0);
                                DerivedStorage[1] = v30;
                                if (v30)
                                {
                                  v12 = 0;
                                  *a4 = 0;
LABEL_46:
                                  CFRelease(v22);
                                  return v12;
                                }
                                v12 = 4294895536;
                              }
                              else
                              {
                                v12 = 4294895536;
                              }
                            }
                            else
                            {
                              v12 = 4294895536;
                            }
                          }
                        }
                        else
                        {
                          v12 = 4294954514;
                        }
                      }
                      APSLogErrorAt();
                      goto LABEL_46;
                    }
                    v12 = 4294895536;
LABEL_49:
                    APSLogErrorAt();
                    return v12;
                  }
                }
                v22 = 0;
                goto LABEL_33;
              }
            }
          }
        }
      }
    }
  }
  APSLogErrorAt();
  return 4294895535;
}

void lowPowerKeepAliveController_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTKeepAliveControllerLowPower <= 30
    && (gLogCategory_APTKeepAliveControllerLowPower != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v3 = *(NSObject **)(DerivedStorage + 24);
  if (v3)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 24));
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v5 = *(NSObject **)(DerivedStorage + 8);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *lowPowerKeepAliveController_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTKeepAliveControllerLowPower %p>"), a1);
  return Mutable;
}

uint64_t lowPowerKeepAliveController_Resume(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  v3 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __lowPowerKeepAliveController_Resume_block_invoke;
  block[3] = &__block_descriptor_tmp_11;
  block[4] = a1;
  dispatch_async(v3, block);
  return 0;
}

uint64_t lowPowerKeepAliveController_Suspend()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __lowPowerKeepAliveController_Suspend_block_invoke;
  block[3] = &__block_descriptor_tmp_16_2;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
  return 0;
}

void __lowPowerKeepAliveController_resumeInternal_block_invoke(uint64_t a1)
{
  const void *v1;
  NSObject **DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[6];

  v1 = *(const void **)(a1 + 32);
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = v3;
    if (v1)
      CFRetain(v1);
    v5 = *DerivedStorage;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = __lowPowerKeepAliveController_timerFired_block_invoke;
    v6[3] = &__block_descriptor_tmp_13_2;
    v6[4] = v1;
    v6[5] = v4;
    dispatch_async(v5, v6);
  }
}

void __lowPowerKeepAliveController_timerFired_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  int v7;
  int v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  _QWORD v12[5];
  int v13;

  v2 = *(const void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTKeepAliveControllerLowPower <= 10
    && (gLogCategory_APTKeepAliveControllerLowPower != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v5 = *(_QWORD *)(DerivedStorage + 48);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v6)
  {
    v7 = v6(v3, 1819309931, v5);
    if (!v7)
      goto LABEL_12;
    v8 = v7;
  }
  else
  {
    v8 = -12782;
  }
  APSLogErrorAt();
  if (v2)
    CFRetain(v2);
  v9 = *(NSObject **)(DerivedStorage + 8);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __lowPowerKeepAliveController_sendKeepAlive_block_invoke;
  v12[3] = &__block_descriptor_tmp_15_2;
  v12[4] = v2;
  v13 = v8;
  dispatch_async(v9, v12);
LABEL_12:
  v10 = *(const void **)(a1 + 32);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 40);
  if (v11)
    CFRelease(v11);
}

void __lowPowerKeepAliveController_sendKeepAlive_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;
  const void *v4;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 32))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v3 = Mutable;
      CFDictionarySetInt64();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v3);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

void sub_1C93E2694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

uint64_t APTPackageMusicDataCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v2;

  v2 = APTPackageMusicDataCreateWithBBuf(a1, 0, a2);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t APTPackageMusicDataCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  uint64_t v6;
  CFAllocatorRef **DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  size_t DataLength;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t destination;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;

  blockBufferOut = 0;
  cf = 0;
  APTransportPackageGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v13 = v6;
LABEL_23:
    APSLogErrorAt();
    goto LABEL_13;
  }
  DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  v8 = APTransportParcelMake(8uLL, 0, DerivedStorage);
  if ((_DWORD)v8)
  {
    v13 = v8;
    goto LABEL_23;
  }
  if (!a2)
    goto LABEL_8;
  destination = 0;
  v9 = CMBlockBufferCopyDataBytes(a2, 0, 8uLL, &destination);
  if ((_DWORD)v9)
  {
    v13 = v9;
    goto LABEL_23;
  }
  APTransportParcelSetMessageType((uint64_t)*DerivedStorage, bswap32(HIDWORD(destination)));
  if (CMBlockBufferGetDataLength(a2) < 9)
    goto LABEL_8;
  DataLength = CMBlockBufferGetDataLength(a2);
  v11 = CMBlockBufferCreateWithBufferReference(a1, a2, 8uLL, DataLength - 8, 0, &blockBufferOut);
  if ((_DWORD)v11)
  {
    v13 = v11;
    goto LABEL_23;
  }
  v12 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
  if ((_DWORD)v12)
  {
    v13 = v12;
    goto LABEL_23;
  }
LABEL_8:
  if (gLogCategory_APTPackageMusicData <= 30
    && (gLogCategory_APTPackageMusicData != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v13 = 0;
  *a3 = cf;
  cf = 0;
LABEL_13:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t APTPackageMusicDataCreateWithMessageSize(uint64_t a1, size_t a2, _QWORD *a3)
{
  uint64_t v5;
  CFAllocatorRef **DerivedStorage;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
  {
    APSLogErrorAt();
    return 4294894936;
  }
  APTransportPackageGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v8 = v5;
LABEL_13:
    APSLogErrorAt();
    return v8;
  }
  DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  v7 = APTransportParcelMake(8uLL, a2, DerivedStorage);
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_13;
  }
  if (gLogCategory_APTPackageMusicData <= 30
    && (gLogCategory_APTPackageMusicData != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = 0;
  *a3 = 0;
  return v8;
}

uint64_t APTPackageMusicDataGetHeaderSize(_DWORD *a1)
{
  if (a1)
  {
    *a1 = 8;
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

uint64_t APTPackageMusicDataGetPayloadSize(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  uint64_t DataPointer;
  uint64_t v4;
  size_t v6;
  char *dataPointerOut;

  v6 = 0;
  dataPointerOut = 0;
  if (a2 && a1)
  {
    DataPointer = CMBlockBufferGetDataPointer(a1, 0, &v6, 0, &dataPointerOut);
    if ((_DWORD)DataPointer)
    {
      v4 = DataPointer;
    }
    else
    {
      if (v6 == 8)
      {
        v4 = 0;
        *a2 = bswap32(*(_DWORD *)dataPointerOut) - 8;
        return v4;
      }
      v4 = 4294894936;
    }
    APSLogErrorAt();
    return v4;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

void musicdatapackage_Finalize()
{
  void **DerivedStorage;

  DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTPackageMusicData <= 30
    && (gLogCategory_APTPackageMusicData != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *DerivedStorage = 0;
}

__CFString *musicdatapackage_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTPackageMusicData %p>"), a1);
  return Mutable;
}

const void *musicdatapackage_CopyMessageData()
{
  uint64_t *DerivedStorage;
  const void *MessageData;
  const void *v2;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageData = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  v2 = MessageData;
  if (MessageData)
    CFRetain(MessageData);
  return v2;
}

uint64_t musicdatapackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  _QWORD **DerivedStorage;

  DerivedStorage = (_QWORD **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(*DerivedStorage, a2);
}

uint64_t musicdatapackage_GetMessageType()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(*DerivedStorage);
}

uint64_t musicdatapackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(*DerivedStorage, a2);
}

CMBlockBufferRef musicdatapackage_CreateBBufRepresentation()
{
  uint64_t *DerivedStorage;
  unsigned int MessageType;
  OpaqueCMBlockBuffer *MessageData;
  CMBlockBufferRef v4;
  _DWORD v5[2];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v4 = 0;
  MessageType = APTransportParcelGetMessageType(*DerivedStorage);
  MessageData = (OpaqueCMBlockBuffer *)APTransportParcelGetMessageData(*DerivedStorage);
  v5[0] = bswap32(CMBlockBufferGetDataLength(MessageData) + 8);
  v5[1] = bswap32(MessageType);
  APTransportParcelCreateBBufRepresentation(*DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v5, &v4);
  return v4;
}

CFStringRef carPlayHelperUSB_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APCarPlayHelperUSB %p]"), a1);
}

uint64_t APCarPlayHelperUSBCreate(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *DerivedStorage;
  dispatch_semaphore_t v11;
  dispatch_queue_t v12;
  dispatch_queue_t v13;
  const void *SharedHelper;
  CFTypeRef v15;
  uint64_t v16;
  const void *Value;
  const void *v18;
  uint64_t v19;

  if (APCarPlayHelperUSBGetClassID_sRegisterOnce != -1)
    dispatch_once(&APCarPlayHelperUSBGetClassID_sRegisterOnce, &__block_literal_global_12);
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v19 = v9;
LABEL_24:
    APSLogErrorAt();
    return v19;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v11 = dispatch_semaphore_create(0);
  DerivedStorage[1] = v11;
  if (!v11
    || (v12 = dispatch_queue_create("APCarPlayHelperUSBInternalQueue", 0), (DerivedStorage[2] = v12) == 0)
    || (v13 = dispatch_queue_create("APCarPlayHelperUSBEventQueue", 0), (DerivedStorage[3] = v13) == 0))
  {
    APSLogErrorAt();
    return 4294954510;
  }
  DerivedStorage[8] = a2;
  DerivedStorage[9] = a3;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294954516;
  }
  SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
  if (!SharedHelper)
  {
    DerivedStorage[5] = 0;
    goto LABEL_18;
  }
  v15 = CFRetain(SharedHelper);
  DerivedStorage[5] = v15;
  if (!v15)
  {
LABEL_18:
    APSLogErrorAt();
    return 4294960568;
  }
  v16 = APConnectivityHelperRegisterEventHandler((uint64_t)v15, 0, (uint64_t)carPlayHelperUSB_handleConnectivityHelperEvent);
  if ((_DWORD)v16)
  {
    v19 = v16;
    goto LABEL_24;
  }
  if (a4)
  {
    Value = CFDictionaryGetValue(a4, CFSTR("powerAssertion"));
    DerivedStorage[4] = Value;
    if (Value)
      CFRetain(Value);
    v18 = CFDictionaryGetValue(a4, CFSTR("eventRecorder"));
    DerivedStorage[10] = v18;
    if (v18)
      CFRetain(v18);
  }
  v19 = 0;
  *a5 = 0;
  return v19;
}

void carPlayHelperUSB_handleConnectivityHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD v9[7];
  int v10;
  _QWORD v11[3];
  int v12;

  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v12 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
    CFRetain(a4);
  if (a3)
    CFRetain(a3);
  v8 = *(NSObject **)(DerivedStorage + 16);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __carPlayHelperUSB_handleConnectivityHelperEvent_block_invoke;
  v9[3] = &unk_1E8256798;
  v10 = a2;
  v9[4] = v11;
  v9[5] = a4;
  v9[6] = a3;
  dispatch_async(v8, v9);
  _Block_object_dispose(v11, 8);
}

void sub_1C93E32E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t carPlayHelperUSB_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD v5[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __carPlayHelperUSB_invalidate_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = DerivedStorage;
    v5[5] = a1;
    dispatch_sync(v3, v5);
  }
  return 0;
}

void carPlayHelperUSB_finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD block[5];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage[2];
  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperUSB_finalize_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = DerivedStorage;
    dispatch_sync(v3, block);
  }
  carPlayHelperUSB_invalidate(a1);
  v4 = DerivedStorage[1];
  if (v4)
  {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    v5 = DerivedStorage[1];
    if (v5)
    {
      dispatch_release(v5);
      DerivedStorage[1] = 0;
    }
  }
  v6 = DerivedStorage[2];
  if (v6)
  {
    dispatch_sync(v6, &__block_literal_global_11_0);
    v7 = DerivedStorage[2];
    if (v7)
    {
      dispatch_release(v7);
      DerivedStorage[2] = 0;
    }
  }
  v8 = DerivedStorage[3];
  if (v8)
  {
    dispatch_sync(v8, &__block_literal_global_12_0);
    v9 = DerivedStorage[3];
    if (v9)
    {
      dispatch_release(v9);
      DerivedStorage[3] = 0;
    }
  }
  v10 = (const void *)DerivedStorage[10];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[10] = 0;
  }
  v11 = (const void *)DerivedStorage[4];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[4] = 0;
  }
  v12 = (const void *)DerivedStorage[5];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[5] = 0;
  }
  v13 = (const void *)DerivedStorage[7];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[7] = 0;
  }
  v14 = DerivedStorage[3];
  if (v14)
  {
    dispatch_release(v14);
    DerivedStorage[3] = 0;
  }
  v15 = DerivedStorage[2];
  if (v15)
  {
    dispatch_release(v15);
    DerivedStorage[2] = 0;
  }
  v16 = DerivedStorage[1];
  if (v16)
  {
    dispatch_release(v16);
    DerivedStorage[1] = 0;
  }
}

NSObject *__carPlayHelperUSB_invalidate_block_invoke(NSObject *result)
{
  Class isa;
  NSObject *v2;
  uint64_t v3;
  Class v4;
  uint64_t DerivedStorage;

  isa = result[4].isa;
  if (!*(_BYTE *)isa)
  {
    v2 = result;
    v3 = *((_QWORD *)isa + 5);
    if (v3)
      APConnectivityHelperRemoveAllRegistrations(v3, (uint64_t)v2[5].isa);
    v4 = v2[5].isa;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    carPlayHelperUSB_dispatchEvent(v4, 3, 0);
    result = *(NSObject **)(DerivedStorage + 8);
    if (result)
      result = dispatch_semaphore_signal(result);
    *(_BYTE *)v2[4].isa = 1;
  }
  return result;
}

void carPlayHelperUSB_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[8];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(DerivedStorage + 64);
  if (v7)
  {
    v8 = DerivedStorage;
    v9 = *(_QWORD *)(DerivedStorage + 72);
    if (gLogCategory_APBrowserCarUSBHelper <= 20
      && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a1)
      CFRetain(a1);
    if (a3)
      CFRetain(a3);
    v10 = *(NSObject **)(v8 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperUSB_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_68_e5_v8__0l;
    block[4] = v7;
    block[5] = a1;
    v12 = a2;
    block[6] = a3;
    block[7] = v9;
    dispatch_async(v10, block);
  }
}

void __carPlayHelperUSB_dispatchEvent_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t __carPlayHelperUSB_finalize_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 64) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 72) = 0;
  return result;
}

void carPlayHelperUSB_setInterfaceWatchingEnabled(const void *a1, char a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[6];
  char v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    v5 = DerivedStorage;
    CFRetain(a1);
    v6 = *(NSObject **)(v5 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperUSB_setInterfaceWatchingEnabled_block_invoke;
    block[3] = &__block_descriptor_49_e5_v8__0l;
    v8 = a2;
    block[4] = v5;
    block[5] = a1;
    dispatch_async(v6, block);
  }
}

void __carPlayHelperUSB_setInterfaceWatchingEnabled_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned __int8 *)(v2 + 48) == v3)
      goto LABEL_8;
    v4 = *(_QWORD *)(v2 + 40);
    v5 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      if (APConnectivityHelperRegisterForEvent(v4, v5, 4))
        goto LABEL_10;
    }
    else if (APConnectivityHelperDeregisterForEvent(v4, v5, 4))
    {
LABEL_10:
      APSLogErrorAt();
      goto LABEL_11;
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = *(_BYTE *)(a1 + 48);
    goto LABEL_8;
  }
LABEL_11:
  if (gLogCategory_APBrowserCarUSBHelper <= 90
    && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_8:
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __carPlayHelperUSB_handleConnectivityHelperEvent_block_invoke(uint64_t a1)
{
  int v2;
  const void *v3;
  const __CFDictionary *v4;
  uint64_t v5;
  _QWORD *v6;
  const __CFString *Value;
  const __CFString *v8;
  BOOL v9;
  BOOL v10;
  const void *v11;
  uint64_t DerivedStorage;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  const void *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  const __CFAllocator *v22;
  CFDictionaryRef v23;
  CFDictionaryRef v24;
  const void *v25;
  const void *v26;
  void *values;
  uint8_t buf[8];

  v2 = *(_DWORD *)(a1 + 56);
  if (v2 == 104)
  {
    if (gLogCategory_APBrowserCarUSBHelper <= 30
      && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v11 = *(const void **)(a1 + 40);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v13 = *(const void **)(DerivedStorage + 56);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(DerivedStorage + 56) = 0;
      CMBaseObjectGetDerivedStorage();
      APSLogErrorAt();
    }
    carPlayHelperUSB_dispatchEvent(v11, 2, 0);
  }
  else
  {
    if (v2 == 4)
    {
      v3 = *(const void **)(a1 + 40);
      v4 = *(const __CFDictionary **)(a1 + 48);
      v5 = CMBaseObjectGetDerivedStorage();
      if (!v4)
      {
LABEL_68:
        APSLogErrorAt();
        goto LABEL_56;
      }
      v6 = (_QWORD *)v5;
      Value = (const __CFString *)CFDictionaryGetValue(v4, CFSTR("networkInterfaceName"));
      v8 = Value;
      v9 = Value == 0;
      if (Value && CFStringHasPrefix(Value, CFSTR("anpi")))
      {
        if (gLogCategory_APBrowserCarUSBHelper <= 50
          && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_56;
      }
      if (CFDictionaryGetInt64())
      {
        if (v8)
          v10 = v6[4] == 0;
        else
          v10 = 1;
        if (!v10)
        {
          APSPowerAssertionRaiseTemporary();
          v9 = 0;
        }
      }
      else
      {
        if (!FigCFEqual())
          goto LABEL_56;
        v8 = 0;
        v9 = 1;
      }
      if (FigCFEqual())
      {
LABEL_56:
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          APSLogErrorAt();
        goto LABEL_58;
      }
      if (gLogCategory_APBrowserCarUSBHelper <= 50
        && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v14 = v6[10];
      if (v9)
      {
        if (v14)
          APSEventRecorderRecordEvent();
        v15 = LogCategoryCopyOSLogHandle();
        v16 = (void *)v15;
        if (v15)
          v17 = v15;
        else
          v17 = MEMORY[0x1E0C81028];
        if (os_signpost_enabled(v17))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1C9382000, v17, OS_SIGNPOST_EVENT, 0x2B8D08DCuLL, "AP_SIGNPOST_CAR_USB_LINKDOWN", "", buf, 2u);
        }
        if (v16)

        v18 = (const void *)v6[7];
        v6[7] = v8;
        if (!v18)
          goto LABEL_54;
      }
      else
      {
        if (v14)
          APSEventRecorderRecordEvent();
        v19 = LogCategoryCopyOSLogHandle();
        v20 = (void *)v19;
        if (v19)
          v21 = v19;
        else
          v21 = MEMORY[0x1E0C81028];
        if (os_signpost_enabled(v21))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1C9382000, v21, OS_SIGNPOST_EVENT, 0x2B8D07FCuLL, "AP_SIGNPOST_CAR_USB_LINKUP", "", buf, 2u);
        }
        if (v20)

        v18 = (const void *)v6[7];
        v6[7] = v8;
        CFRetain(v8);
        if (!v18)
          goto LABEL_54;
      }
      CFRelease(v18);
LABEL_54:
      values = *(void **)(CMBaseObjectGetDerivedStorage() + 56);
      *(_QWORD *)buf = 0x1E825E558;
      v22 = CFGetAllocator(v3);
      v23 = CFDictionaryCreate(v22, (const void **)buf, (const void **)&values, values != 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v23)
      {
        v24 = v23;
        carPlayHelperUSB_dispatchEvent(v3, 0, v23);
        CFRelease(v24);
        goto LABEL_56;
      }
      APSLogErrorAt();
      goto LABEL_68;
    }
    if (gLogCategory_APBrowserCarUSBHelper <= 30
      && (gLogCategory_APBrowserCarUSBHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
LABEL_58:
  v25 = *(const void **)(a1 + 40);
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(a1 + 48);
  if (v26)
    CFRelease(v26);
}

uint64_t APTransportKeepAliveControllerStandardCreate(int a1, CFTypeRef cf, CFTypeRef a3, _QWORD *a4)
{
  CFTypeID v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  dispatch_queue_t v12;
  dispatch_queue_t v13;
  dispatch_queue_t v14;
  uint64_t v15;
  char label[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (cf && (v7 = CFGetTypeID(cf), v7 != CFDictionaryGetTypeID())
    || !a3
    || (v8 = CFGetTypeID(a3), v8 != FigTransportStreamGetTypeID())
    || !a4)
  {
    APSLogErrorAt();
    return 4294895535;
  }
  APTransportKeepAliveControllerGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v15 = v9;
LABEL_26:
    APSLogErrorAt();
    return v15;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
    && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (cf)
    *(_BYTE *)(DerivedStorage + 32) = CFDictionaryGetInt64() != 0;
  v11 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 40) = v11;
  if (!v11)
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
  SNPrintF();
  v12 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 16) = v12;
  if (!v12)
  {
    v15 = 4294895536;
    goto LABEL_26;
  }
  SNPrintF();
  v13 = dispatch_queue_create(label, 0);
  *(_QWORD *)DerivedStorage = v13;
  if (!v13)
  {
    v15 = 4294895536;
    goto LABEL_26;
  }
  SNPrintF();
  v14 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 8) = v14;
  if (!v14)
  {
    v15 = 4294895536;
    goto LABEL_26;
  }
  v15 = 0;
  *(_DWORD *)(DerivedStorage + 36) = 2017;
  *a4 = 0;
  return v15;
}

void standardKeepAliveController_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
    && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v2 = *(NSObject **)(DerivedStorage + 24);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 24));
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 8);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *standardKeepAliveController_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportKeepAliveControllerStandard %p>"), a1);
  return Mutable;
}

uint64_t standardKeepAliveController_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  CFNumberRef v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("KeepAliveInterval")))
    return 4294954512;
  v8 = CFNumberCreate(a3, kCFNumberSInt32Type, (const void *)(DerivedStorage + 36));
  *a4 = v8;
  if (v8)
    return 0;
  APSLogErrorAt();
  return 4294895536;
}

uint64_t standardKeepAliveController_SetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("KeepAliveInterval")))
    return 4294954512;
  if (*(_BYTE *)(DerivedStorage + 33))
  {
    v7 = 4294895534;
    APSLogErrorAt();
  }
  else if (a3 && (v6 = CFGetTypeID(a3), v6 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(DerivedStorage + 36));
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294895535;
  }
  return v7;
}

uint64_t standardKeepAliveController_Resume(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 16), a1, (dispatch_function_t)standardKeepAliveController_controllerResumedCallback);
  return 0;
}

uint64_t standardKeepAliveController_Suspend(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 16), a1, (dispatch_function_t)standardKeepAliveController_controllerSuspendedCallback);
  return 0;
}

void standardKeepAliveController_controllerResumedCallback(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  dispatch_time_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 33))
  {
    v3 = DerivedStorage;
    v4 = MEMORY[0x1E0CA2E18];
    v5 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 48) = *MEMORY[0x1E0CA2E18];
    v6 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(DerivedStorage + 64) = v6;
    *(_OWORD *)(DerivedStorage + 96) = v5;
    *(_QWORD *)(DerivedStorage + 112) = v6;
    *(_QWORD *)(DerivedStorage + 120) = 0;
    v7 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 16));
    *(_QWORD *)(v3 + 24) = v7;
    if (!v7)
    {
      APSLogErrorAt();
      if (a1)
        goto LABEL_9;
      return;
    }
    dispatch_set_context(v7, a1);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v3 + 24), (dispatch_function_t)standardKeepAliveController_timerFiredCallback);
    v8 = 1000000 * *(unsigned int *)(v3 + 36);
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 30
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v9 = *(NSObject **)(v3 + 24);
    v10 = dispatch_time(0, v8);
    dispatch_source_set_timer(v9, v10, v8, 0x5F5E100uLL);
    dispatch_resume(*(dispatch_object_t *)(v3 + 24));
    *(_BYTE *)(v3 + 33) = 1;
  }
  if (a1)
LABEL_9:
    CFRelease(a1);
}

void standardKeepAliveController_timerFiredCallback(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  OpaqueCMClock *v4;
  uint64_t v5;
  CMTimeEpoch v6;
  OpaqueCMClock *HostTimeClock;
  int v8;
  __CFNotificationCenter *DarwinNotifyCenter;
  __int128 v10;
  CMTime time;
  CMTime lhs[2];
  CMTime time2;
  CMTime v14;
  CMTime rhs;
  CMTime v16;
  CMTime v17;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if ((*(_BYTE *)(DerivedStorage + 60) & 1) != 0)
    {
      v5 = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)&v17.value = *MEMORY[0x1E0CA2E18];
      v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v17.epoch = v6;
      v10 = *(_OWORD *)&v17.value;
      *(_OWORD *)&v16.value = *(_OWORD *)&v17.value;
      v16.epoch = v6;
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&v17, HostTimeClock);
      ++*(_DWORD *)(v5 + 120);
      lhs[0] = v17;
      rhs = *(CMTime *)(v5 + 48);
      CMTimeSubtract(&v16, lhs, &rhs);
      if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
        && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
      {
        lhs[0] = v16;
        CMTimeGetSeconds(lhs);
        LogPrintF();
      }
      CMTimeMake(&rhs, 10, 1);
      lhs[0] = v16;
      if ((CMTimeCompare(lhs, &rhs) & 0x80000000) == 0)
      {
        *(_OWORD *)&v14.value = v10;
        v14.epoch = v6;
        lhs[0] = v17;
        time2 = *(CMTime *)(v5 + 96);
        CMTimeSubtract(&v14, lhs, &time2);
        if ((*(_BYTE *)(v5 + 108) & 1) == 0
          || (CMTimeMake(&time2, 180, 1), lhs[0] = v14, CMTimeCompare(lhs, &time2) >= 1))
        {
          memset(&lhs[0].timescale, 0, 32);
          lhs[0].value = (CMTimeValue)CFRetain(a1);
          LOBYTE(lhs[0].timescale) = 1;
          *(CMTime *)(v5 + 96) = v17;
          ++*(_DWORD *)(v5 + 124);
          if (gLogCategory_APTransportKeepAliveControllerStandard <= 50
            && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
          {
            time = v16;
            CMTimeGetSeconds(&time);
            LogPrintF();
          }
          *(CMTime *)&lhs[0].flags = v16;
          APSDispatchAsyncFHelper();
          IsAppleInternalBuild();
          if (IsAppleInternalBuild())
            v8 = 50;
          else
            v8 = 30;
          if (v8 >= gLogCategory_APTransportKeepAliveControllerStandard)
          {
            if (gLogCategory_APTransportKeepAliveControllerStandard != -1
              || (IsAppleInternalBuild(), _LogCategory_Initialize()))
            {
              IsAppleInternalBuild();
              LogPrintF();
            }
          }
          DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
          CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.airplay.connection.stalled"), 0, 0, 1u);
        }
      }
    }
    else
    {
      v3 = DerivedStorage;
      CFRetain(a1);
      v4 = CMClockGetHostTimeClock();
      CMClockGetTime(lhs, v4);
      *(CMTime *)(v3 + 48) = lhs[0];
      dispatch_async_f(*(dispatch_queue_t *)v3, a1, (dispatch_function_t)standardKeepAliveController_sendKeepAliveCallback);
    }
  }
}

void standardKeepAliveController_sendKeepAliveCallback(const void *a1)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;
  uint64_t (*v4)(CFTypeRef, uint64_t, _QWORD, _QWORD);
  int v5;
  int v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, uint64_t, _QWORD, const __CFDictionary **);
  int v9;
  CFDictionaryRef v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t v13;
  CFTypeRef v14;
  __int128 v15;
  _BYTE context[40];
  CMTime v17;
  CMTime time2;
  CFTypeRef v19;
  __int128 v20;
  uint64_t v21;
  const __CFDictionary *v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  v19 = 0;
  *(_QWORD *)context = a1;
  *(_QWORD *)&context[8] = &v19;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 16), context, (dispatch_function_t)standardKeepAliveController_copyTransportStreamCallback);
  if (!v19)
  {
    APSLogErrorAt();
    v6 = -71761;
    goto LABEL_24;
  }
  if (*(_BYTE *)(DerivedStorage + 32))
  {
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 10
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v3 = v19;
    v4 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v4)
    {
      v6 = -12782;
      goto LABEL_23;
    }
    v5 = v4(v3, 1818977637, 0, 0);
    if (v5)
    {
      v6 = v5;
LABEL_23:
      APSLogErrorAt();
LABEL_24:
      *(_QWORD *)&context[8] = 0;
      if (a1)
        v12 = CFRetain(a1);
      else
        v12 = 0;
      *(_QWORD *)context = v12;
      *(_DWORD *)&context[8] = v6;
LABEL_43:
      APSDispatchAsyncFHelper();
      goto LABEL_44;
    }
  }
  else
  {
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 10
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v7 = v19;
    v8 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
    if (!v8)
    {
      v6 = -12782;
      goto LABEL_23;
    }
    v9 = v8(v7, 1801807216, 0, &v22);
    if (v9)
    {
      v6 = v9;
      goto LABEL_23;
    }
    v10 = v22;
    *(_QWORD *)context = v22;
    v11 = CMBaseObjectGetDerivedStorage();
    if (v10)
      v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kAPTransportKeepAliveControllerNotificationKey_BlockBuffer, (const void **)context, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (gLogCategory_APTransportKeepAliveControllerStandard <= 30
      && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (*(_BYTE *)(v11 + 33))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    if (v10)
      CFRelease(v10);
  }
  *(_QWORD *)context = a1;
  v15 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&context[8] = *MEMORY[0x1E0CA2E18];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_QWORD *)&context[24] = v13;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 16), context, (dispatch_function_t)standardKeepAliveController_setKeepAliveReceivedCallback);
  v20 = *(_OWORD *)&context[8];
  v21 = *(_QWORD *)&context[24];
  CMTimeMake(&time2, *(unsigned int *)(DerivedStorage + 36), 1000);
  *(_OWORD *)context = v20;
  *(_QWORD *)&context[16] = v21;
  if (CMTimeCompare((CMTime *)context, &time2) >= 1
    && gLogCategory_APTransportKeepAliveControllerStandard <= 50
    && (gLogCategory_APTransportKeepAliveControllerStandard != -1 || _LogCategory_Initialize()))
  {
    *(_OWORD *)context = v20;
    *(_QWORD *)&context[16] = v21;
    CMTimeGetSeconds((CMTime *)context);
    LogPrintF();
  }
  CMTimeMake(&v17, 10, 1);
  *(_OWORD *)context = v20;
  *(_QWORD *)&context[16] = v21;
  if (CMTimeCompare((CMTime *)context, &v17) >= 1)
  {
    *(_OWORD *)(DerivedStorage + 96) = v15;
    *(_QWORD *)(DerivedStorage + 112) = v13;
    memset(&context[8], 0, 32);
    if (a1)
      v14 = CFRetain(a1);
    else
      v14 = 0;
    *(_QWORD *)context = v14;
    context[8] = 0;
    *(_OWORD *)&context[12] = v20;
    *(_QWORD *)&context[28] = v21;
    goto LABEL_43;
  }
LABEL_44:
  if (v22)
    CFRelease(v22);
  if (v19)
    CFRelease(v19);
  if (a1)
    CFRelease(a1);
}

uint64_t standardKeepAliveController_copyTransportStreamCallback(uint64_t a1)
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  result = FigCFWeakReferenceHolderCopyReferencedObject();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

__n128 standardKeepAliveController_setKeepAliveReceivedCallback(uint64_t a1)
{
  OpaqueCMClock *HostTimeClock;
  uint64_t DerivedStorage;
  __int128 v4;
  CMTimeEpoch epoch;
  uint64_t v6;
  __n128 result;
  CMTime v8;
  CMTime lhs;
  CMTime v10;
  CMTime v11;

  memset(&v11, 0, sizeof(v11));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v11, HostTimeClock);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_OWORD *)&v11.value;
  *(_OWORD *)(DerivedStorage + 72) = *(_OWORD *)&v11.value;
  epoch = v11.epoch;
  *(_QWORD *)(DerivedStorage + 88) = v11.epoch;
  *(_OWORD *)&lhs.value = v4;
  lhs.epoch = epoch;
  v8 = *(CMTime *)(DerivedStorage + 48);
  CMTimeSubtract(&v10, &lhs, &v8);
  *(CMTime *)(a1 + 8) = v10;
  v6 = MEMORY[0x1E0CA2E18];
  result = *(__n128 *)MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 48) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 64) = *(_QWORD *)(v6 + 16);
  return result;
}

void standardKeepAliveController_sendConnectionStallStateChangedCallback(uint64_t a1)
{
  CFTypeRef v2;
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  const __CFAllocator *v6;
  CFDictionaryRef v7;
  CFDictionaryRef v8;
  __CFDictionary *v9;
  CMTime v10;
  CMTime time;

  v2 = *(CFTypeRef *)a1;
  *(_OWORD *)&v10.value = *(_OWORD *)(a1 + 12);
  v10.epoch = *(_QWORD *)(a1 + 28);
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 33))
  {
    v3 = CFGetAllocator(v2);
    Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v5 = Mutable;
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      time = v10;
      v7 = CMTimeCopyAsDictionary(&time, v6);
      if (v7)
      {
        v8 = v7;
        CFDictionarySetValue(v5, CFSTR("StallDuration"), v7);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v5);
        v9 = v8;
      }
      else
      {
        APSLogErrorAt();
        v9 = v5;
      }
      CFRelease(v9);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void standardKeepAliveController_sendConnectionFailedCallback(CFTypeRef *a1)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v3;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 33))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v3 = Mutable;
      CFDictionarySetInt64();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v3);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  if (*a1)
    CFRelease(*a1);
}

void standardKeepAliveController_controllerSuspendedCallback()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 33))
  {
    v1 = DerivedStorage;
    dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 24), 0);
    v2 = *(NSObject **)(v1 + 24);
    if (v2)
    {
      dispatch_source_cancel(*(dispatch_source_t *)(v1 + 24));
      dispatch_release(v2);
      *(_QWORD *)(v1 + 24) = 0;
    }
    *(_BYTE *)(v1 + 33) = 0;
  }
}

uint64_t APTransportPackageRTCPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  uint64_t v2;

  v2 = APTransportPackageRTCPCreateWithBBuf(a1, 0, a2);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t APTransportPackageRTCPCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  uint64_t v6;
  CFAllocatorRef **DerivedStorage;
  uint64_t v8;
  uint64_t DataPointer;
  size_t DataLength;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;

  blockBufferOut = 0;
  cf = 0;
  APTransportPackageGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v13 = v6;
LABEL_32:
    APSLogErrorAt();
    goto LABEL_20;
  }
  DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  v8 = APTransportParcelMake(4uLL, 0, DerivedStorage);
  if ((_DWORD)v8)
  {
    v13 = v8;
    goto LABEL_32;
  }
  if (!a2)
    goto LABEL_10;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  DataPointer = CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if ((_DWORD)DataPointer)
  {
    v13 = DataPointer;
    goto LABEL_32;
  }
  if (lengthAtOffsetOut <= 3)
  {
    APSLogErrorAt();
LABEL_19:
    v13 = 4294960591;
    goto LABEL_20;
  }
  if ((*dataPointerOut & 0xC0) != 0x80)
  {
    APSLogErrorAt();
    v13 = 4294960581;
    goto LABEL_20;
  }
  if (dataPointerOut[1] != 213)
  {
    if (gLogCategory_APTransportPackageRTCP <= 90
      && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_19;
  }
  APTransportParcelSetMessageType((uint64_t)*DerivedStorage, 1634168383);
  DataLength = CMBlockBufferGetDataLength(a2);
  v11 = CMBlockBufferCreateWithBufferReference(a1, a2, 4uLL, DataLength - 4, 0, &blockBufferOut);
  if ((_DWORD)v11)
  {
    v13 = v11;
    goto LABEL_32;
  }
  v12 = APTransportParcelSetMessageData(*DerivedStorage, blockBufferOut);
  if ((_DWORD)v12)
  {
    v13 = v12;
    goto LABEL_32;
  }
LABEL_10:
  if (gLogCategory_APTransportPackageRTCP <= 30
    && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v13 = 0;
  *a3 = cf;
  cf = 0;
LABEL_20:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t APTransportPackageRTCPCreateWithMessageSize(uint64_t a1, size_t a2, _QWORD *a3)
{
  uint64_t v5;
  CFAllocatorRef **DerivedStorage;
  uint64_t v7;
  uint64_t v8;

  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  APTransportPackageGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v8 = v5;
LABEL_13:
    APSLogErrorAt();
    return v8;
  }
  DerivedStorage = (CFAllocatorRef **)CMBaseObjectGetDerivedStorage();
  v7 = APTransportParcelMake(4uLL, a2, DerivedStorage);
  if ((_DWORD)v7)
  {
    v8 = v7;
    goto LABEL_13;
  }
  if (gLogCategory_APTransportPackageRTCP <= 30
    && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = 0;
  *a3 = 0;
  return v8;
}

void rtcppackage_Finalize()
{
  void **DerivedStorage;

  DerivedStorage = (void **)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageRTCP <= 30
    && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTransportParcelFree(*DerivedStorage);
  *DerivedStorage = 0;
}

__CFString *rtcppackage_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportPackageRTCP %p>"), a1);
  return Mutable;
}

const void *rtcppackage_CopyMessageData()
{
  uint64_t *DerivedStorage;
  const void *MessageData;
  const void *v2;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MessageData = (const void *)APTransportParcelGetMessageData(*DerivedStorage);
  v2 = MessageData;
  if (MessageData)
    CFRetain(MessageData);
  return v2;
}

uint64_t rtcppackage_SetMessageData(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  _QWORD **DerivedStorage;

  DerivedStorage = (_QWORD **)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageData(*DerivedStorage, a2);
}

uint64_t rtcppackage_GetMessageType()
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelGetMessageType(*DerivedStorage);
}

uint64_t rtcppackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t *DerivedStorage;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return APTransportParcelSetMessageType(*DerivedStorage, a2);
}

CMBlockBufferRef rtcppackage_CreateBBufRepresentation()
{
  uint64_t *DerivedStorage;
  int MessageType;
  OpaqueCMBlockBuffer *MessageData;
  size_t DataLength;
  char v4;
  char v5;
  __int16 v6;
  char v7;
  CMBlockBufferRef result;
  CMBlockBufferCustomBlockSource customBlockSource;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CMBlockBufferRef v13;
  int v14;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v14 = 0;
  v13 = 0;
  MessageType = APTransportParcelGetMessageType(*DerivedStorage);
  MessageData = (OpaqueCMBlockBuffer *)APTransportParcelGetMessageData(*DerivedStorage);
  DataLength = CMBlockBufferGetDataLength(MessageData);
  if (MessageType > 1951421519)
  {
    switch(MessageType)
    {
      case 1951421520:
        if (DataLength != 24)
          goto LABEL_37;
        v5 = -112;
        break;
      case 1952542318:
        if (DataLength == 16)
        {
          v4 = 0x80;
          goto LABEL_23;
        }
        goto LABEL_37;
      case 1953526896:
        if (DataLength != 24)
          goto LABEL_37;
        v5 = 0x80;
        break;
      default:
        goto LABEL_27;
    }
    LOBYTE(v14) = v5;
    v6 = 1536;
    v7 = -41;
    goto LABEL_24;
  }
  if (MessageType == 560031598)
  {
    if (DataLength == 4)
    {
      LOBYTE(v14) = 0x80;
      v6 = 256;
      v7 = -42;
LABEL_24:
      BYTE1(v14) = v7;
      HIWORD(v14) = v6;
      APTransportParcelCreateBBufRepresentation(*DerivedStorage, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v14, &v13);
      return v13;
    }
LABEL_37:
    APSLogErrorAt();
    return 0;
  }
  if (MessageType != 1634168352)
  {
    if (MessageType == 1950436942)
    {
      if (DataLength == 16)
      {
        v4 = -112;
LABEL_23:
        LOBYTE(v14) = v4;
        v6 = 1024;
        v7 = -44;
        goto LABEL_24;
      }
      goto LABEL_37;
    }
LABEL_27:
    if (gLogCategory_APTransportPackageRTCP <= 90
      && (gLogCategory_APTransportPackageRTCP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return 0;
  }
  LOWORD(v14) = -10624;
  HIWORD(v14) = bswap32((DataLength + 2) >> 2) >> 16;
  dataPointerOut = 0;
  totalLengthOut = 0;
  lengthAtOffsetOut = 0;
  if (!FigCreateBlockBufferCopyingMemoryBlock())
  {
    customBlockSource.version = 0;
    customBlockSource.AllocateBlock = 0;
    customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))rtcppackage_bbufFree;
    customBlockSource.refCon = (void *)CFRetain(MessageData);
    if (!CMBlockBufferGetDataPointer(MessageData, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
    {
      dataPointerOut -= 2;
      totalLengthOut += 2;
      if (!CMBlockBufferAppendMemoryBlock(v13, dataPointerOut, totalLengthOut, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], &customBlockSource, 0, totalLengthOut, 0))return v13;
    }
  }
  APSLogErrorAt();
  result = v13;
  if (v13)
  {
    CFRelease(v13);
    return 0;
  }
  return result;
}

uint64_t APTransportTrafficRegistrarGetTypeID()
{
  if (APTransportTrafficRegistrarGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTransportTrafficRegistrarGetTypeID_sInitOnce, &APTransportTrafficRegistrarGetTypeID_sTypeID, (dispatch_function_t)trafficRegistrar_getTypeID);
  return APTransportTrafficRegistrarGetTypeID_sTypeID;
}

uint64_t trafficRegistrar_getTypeID(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t APTransportTrafficRegistrarCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v4;
  dispatch_queue_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (APTransportTrafficRegistrarGetTypeID_sInitOnce != -1)
    dispatch_once_f(&APTransportTrafficRegistrarGetTypeID_sInitOnce, &APTransportTrafficRegistrarGetTypeID_sTypeID, (dispatch_function_t)trafficRegistrar_getTypeID);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v4 = (_QWORD *)Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  v5 = dispatch_queue_create("APTransportTrafficRegistrar.queue", 0);
  v4[2] = v5;
  if (!v5)
    goto LABEL_16;
  v6 = WiFiManagerCreate();
  if ((_DWORD)v6)
  {
    v8 = v6;
    APSLogErrorAt();
LABEL_17:
    CFRelease(v4);
    return v8;
  }
  WiFiManagerSetProperty();
  v7 = objc_opt_new();
  v4[4] = v7;
  if (!v7)
  {
LABEL_16:
    APSLogErrorAt();
    v8 = 4294960568;
    goto LABEL_17;
  }
  if (gLogCategory_APTransportTrafficRegistrar <= 50
    && (gLogCategory_APTransportTrafficRegistrar != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v8 = 0;
  *a2 = v4;
  return v8;
}

uint64_t APTransportTrafficRegistrarAWDLTrafficRegistrationCreate(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  return APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx(a1, a2, 0, 0, a3);
}

uint64_t APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD block[11];
  CFTypeRef v17;
  int v18;
  unsigned __int16 v19;

  v17 = 0;
  v19 = 0;
  v18 = 0;
  v7 = bswap32(0);
  v8 = bswap32(*(_DWORD *)a2);
  if (v7 != v8)
    goto LABEL_5;
  v7 = bswap32(v19) >> 16;
  v9 = bswap32(*(unsigned __int16 *)(a2 + 4));
  if (v7 != HIWORD(v9))
  {
    v8 = HIWORD(v9);
LABEL_5:
    if (v7 < v8)
      v10 = -1;
    else
      v10 = 1;
    goto LABEL_8;
  }
  v10 = 0;
LABEL_8:
  if (v10)
  {
    v11 = APSWiFiTrafficRegistrationCreate();
    if ((_DWORD)v11)
    {
      v14 = v11;
      APSLogErrorAt();
    }
    else
    {
      CFRetain(a1);
      v12 = MEMORY[0x1E0C809B0];
      block[5] = MEMORY[0x1E0C809B0];
      block[6] = 3221225472;
      block[7] = __APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx_block_invoke;
      block[8] = &__block_descriptor_48_e5_v8__0l;
      block[9] = a1;
      block[10] = v17;
      APSWiFiTrafficRegistrationSetRemovalHandler();
      CFRetain(a1);
      v13 = a1[2];
      block[0] = v12;
      block[1] = 3221225472;
      block[2] = __APTransportTrafficRegistrarAWDLTrafficRegistrationCreateEx_block_invoke_3;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_async(v13, block);
      v14 = 0;
      *a5 = CFRetain(v17);
    }
  }
  else
  {
    APSLogErrorAt();
    v14 = 4294960591;
  }
  if (v17)
    CFRelease(v17);
  return v14;
}

uint64_t APTransportTrafficRegistrarInfraTransactionCreate(_QWORD *a1, CFTypeRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[11];
  CFTypeRef v9;

  v9 = 0;
  v4 = APSWiFiTransactionCreate();
  if ((_DWORD)v4)
  {
    APSLogErrorAt();
  }
  else
  {
    CFRetain(a1);
    v5 = MEMORY[0x1E0C809B0];
    v8[5] = MEMORY[0x1E0C809B0];
    v8[6] = 3221225472;
    v8[7] = __APTransportTrafficRegistrarInfraTransactionCreate_block_invoke;
    v8[8] = &__block_descriptor_48_e5_v8__0l;
    v8[9] = a1;
    v8[10] = v9;
    APSWiFiTransactionSetReleaseHandler();
    CFRetain(a1);
    v6 = a1[2];
    v8[0] = v5;
    v8[1] = 3221225472;
    v8[2] = __APTransportTrafficRegistrarInfraTransactionCreate_block_invoke_3;
    v8[3] = &__block_descriptor_40_e5_v8__0l;
    v8[4] = a1;
    dispatch_async(v6, v8);
    *a2 = CFRetain(v9);
  }
  if (v9)
    CFRelease(v9);
  return v4;
}

void APTransportTrafficRegistrarGetRegistration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APTransportTrafficRegistrarGetRegistration_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a2;
  block[5] = a1;
  block[6] = a3;
  dispatch_sync(v3, block);
}

uint64_t APTransportTrafficRegistrarGetAWDLChannelSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[9];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (a2 && a3 && a4)
  {
    v4 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APTransportTrafficRegistrarGetAWDLChannelSequence_block_invoke;
    block[3] = &unk_1E8259220;
    block[4] = &v8;
    block[5] = a1;
    block[6] = a2;
    block[7] = a3;
    block[8] = a4;
    dispatch_sync(v4, block);
    v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    APSLogErrorAt();
    v5 = APSSignalErrorAt();
    *((_DWORD *)v9 + 6) = v5;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1C93E62B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t APTransportTrafficRegistrarGetRSSI(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (a2)
  {
    v2 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APTransportTrafficRegistrarGetRSSI_block_invoke;
    block[3] = &unk_1E8256C58;
    block[4] = &v6;
    block[5] = a1;
    block[6] = a2;
    dispatch_sync(v2, block);
    v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    APSLogErrorAt();
    v3 = APSSignalErrorAt();
    *((_DWORD *)v7 + 6) = v3;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1C93E6550(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t APTransportTrafficRegistrarGetWifiChannel(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    *a2 = WiFiManagerGetInt64();
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return APSSignalErrorAt();
  }
}

void trafficRegistrar_Finalize(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }

  *(_QWORD *)(a1 + 32) = 0;
  if (gLogCategory_APTransportTrafficRegistrar <= 50
    && (gLogCategory_APTransportTrafficRegistrar != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t APTNANEndpointCopyTextInfo(void *a1, _QWORD *a2)
{
  char isKindOfClass;
  uint64_t result;
  const void *Empty;
  CFTypeRef v7;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  result = 4294960591;
  if (a2 && (isKindOfClass & 1) != 0)
  {
    Empty = (const void *)objc_msgSend(a1, "textInfo");
    if (!Empty)
      Empty = (const void *)CFDictionaryGetEmpty();
    v7 = CFRetain(Empty);
    result = 0;
    *a2 = v7;
  }
  return result;
}

uint64_t APTNANEndpointGetServiceType(void *a1)
{
  uint64_t v1;
  CFTypeRef cf;

  cf = 0;
  if (APTNANEndpointCopyTextInfo(a1, &cf) || (CFStringGetTypeID(), !CFDictionaryGetTypedValue()))
    v1 = 0;
  else
    v1 = APSNANServiceTypeMakeWithTXTString();
  if (cf)
    CFRelease(cf);
  return v1;
}

uint64_t APTNANEndpointSupportsServiceType(void *a1)
{
  APTNANEndpointGetServiceType(a1);
  return APSNANServiceTypeIsKindOfType();
}

uint64_t APCarPlayHelperGetClassID()
{
  if (APCarPlayHelperGetClassID_sRegisterOnce != -1)
    dispatch_once(&APCarPlayHelperGetClassID_sRegisterOnce, &__block_literal_global_13);
  return APCarPlayHelperGetClassID_sClassID;
}

CFStringRef carPlayHelper_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APCarPlayHelper %p]"), a1);
}

uint64_t APCarPlayControlServerGetTypeID()
{
  if (APCarPlayControlServerGetTypeID_carPlayControlServerInitOnce != -1)
    dispatch_once(&APCarPlayControlServerGetTypeID_carPlayControlServerInitOnce, &__block_literal_global_14);
  return APCarPlayControlServerGetTypeID_carPlayControlServerTypeID;
}

void _APCarPlayControlServerFinalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  void *v6;
  const void *v7;
  _QWORD block[5];

  v2 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___APCarPlayControlServerFinalize_block_invoke;
  block[3] = &__block_descriptor_tmp_23_1;
  block[4] = a1;
  dispatch_sync(v2, block);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 24), &__block_literal_global_25);
  v3 = *(const void **)(a1 + 104);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v5 = *(NSObject **)(a1 + 24);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(a1 + 24) = 0;
  }
  TXTRecordDeallocate((TXTRecordRef *)(a1 + 48));
  v6 = *(void **)(a1 + 40);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 72) = 0;
  }
}

uint64_t APCarPlayControlServerInvalidate(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APCarPlayControlServerInvalidate_block_invoke;
  block[3] = &__block_descriptor_tmp_5;
  block[4] = a1;
  dispatch_sync(v1, block);
  return 0;
}

uint64_t _APCarPlayControlServerInvalidate(uint64_t a1)
{
  const __CFArray *v1;

  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  v1 = (const __CFArray *)CFDictionaryCopyKeys();
  CFArrayGetCount(v1);
  return CFArrayApplyBlock();
}

uint64_t APCarPlayControlServerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, const __CFDictionary *a6, TXTRecordRef **a7)
{
  TXTRecordRef *Instance;
  TXTRecordRef *v12;
  dispatch_queue_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint16_t v18;
  void *v19;
  uint8_t v20;
  uint64_t v21;
  uint8_t v22;
  uint64_t v23;
  CFMutableDictionaryRef Mutable;
  const void *Value;
  uint64_t v26;

  if (!a2 || !a3 || !a4)
  {
    APSLogErrorAt();
    v12 = 0;
    v26 = 4294960591;
    goto LABEL_19;
  }
  if (APCarPlayControlServerGetTypeID_carPlayControlServerInitOnce != -1)
    dispatch_once(&APCarPlayControlServerGetTypeID_carPlayControlServerInitOnce, &__block_literal_global_14);
  Instance = (TXTRecordRef *)_CFRuntimeCreateInstance();
  v12 = Instance;
  if (!Instance)
    goto LABEL_32;
  Instance[5] = 0u;
  Instance[6] = 0u;
  Instance[3] = 0u;
  Instance[4] = 0u;
  Instance[1] = 0u;
  Instance[2] = 0u;
  v13 = dispatch_queue_create("com.apple.carplaycontrolserver", 0);
  *((_QWORD *)&v12[1].ForceNaturalAlignment + 1) = v13;
  if (!v13)
    goto LABEL_32;
  v14 = HTTPServerCreate();
  if ((_DWORD)v14)
  {
    v26 = v14;
LABEL_31:
    APSLogErrorAt();
    goto LABEL_19;
  }
  HTTPServerSetDispatchQueue();
  HTTPServerSetLogging();
  v15 = CFStringCopyUTF8CString();
  if ((_DWORD)v15)
  {
    v26 = v15;
    goto LABEL_31;
  }
  v16 = CFStringCopyUTF8CString();
  if ((_DWORD)v16)
  {
    v26 = v16;
    goto LABEL_31;
  }
  v17 = strlen(0);
  v18 = v17 + strlen(0) + 13;
  v19 = malloc_type_malloc(v18, 0xB94BF51FuLL);
  *((_QWORD *)&v12[2].ForceNaturalAlignment + 1) = v19;
  if (!v19)
    goto LABEL_32;
  TXTRecordCreate(v12 + 3, v18, v19);
  v20 = strlen(0);
  v21 = TXTRecordSetValue(v12 + 3, "id", v20, 0);
  if ((_DWORD)v21)
  {
    v26 = v21;
    goto LABEL_31;
  }
  v22 = strlen(0);
  v23 = TXTRecordSetValue(v12 + 3, "srcvers", v22, 0);
  if ((_DWORD)v23)
  {
    v26 = v23;
    goto LABEL_31;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_QWORD *)&v12[4].ForceNaturalAlignment + 1) = Mutable;
  if (!Mutable)
  {
LABEL_32:
    APSLogErrorAt();
    v26 = 4294960568;
    goto LABEL_19;
  }
  *((_QWORD *)&v12[5].ForceNaturalAlignment + 1) = a4;
  v12[6].ForceNaturalAlignment = a5;
  if (a6)
  {
    Value = CFDictionaryGetValue(a6, CFSTR("EventRecorder"));
    *((_QWORD *)&v12[6].ForceNaturalAlignment + 1) = Value;
    if (Value)
      CFRetain(Value);
  }
  v26 = 0;
  *a7 = v12;
  v12 = 0;
LABEL_19:
  free(0);
  free(0);
  if (v12)
    CFRelease(v12);
  return v26;
}

uint64_t _APCarPlayControlServerControl(uint64_t a1, int a2, CFTypeRef cf1, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v9;
  _QWORD *v10;
  _QWORD v12[5];
  _QWORD v13[5];

  if (CFEqual(cf1, CFSTR("startServer")))
  {
    v9 = *(NSObject **)(a1 + 16);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v13[2] = ___APCarPlayControlServerControl_block_invoke;
    v13[3] = &__block_descriptor_tmp_29_1;
    v13[4] = a6;
    v10 = v13;
  }
  else
  {
    if (!CFEqual(cf1, CFSTR("stopServer")))
      return 4294960582;
    v9 = *(NSObject **)(a1 + 16);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___APCarPlayControlServerControl_block_invoke_2_30;
    v12[3] = &__block_descriptor_tmp_33_0;
    v12[4] = a6;
    v10 = v12;
  }
  dispatch_async(v9, v10);
  return 0;
}

uint64_t _APCarPlayControlServerHandleMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;

  v10 = 0;
  if (!*(_QWORD *)(a3 + 88))
  {
    APSLogErrorAt();
    return 503;
  }
  if (!HTTPConnectionGetNextURLSegmentEx())
    return v10;
  if (strnicmpx())
    goto LABEL_24;
  if (!HTTPConnectionGetNextURLSegmentEx())
    return v10;
  if (strnicmpx())
  {
LABEL_24:
    if (gLogCategory_CarPlayControlServer <= 60
      && (gLogCategory_CarPlayControlServer != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = 404;
    goto LABEL_11;
  }
  if (!HTTPConnectionGetNextURLSegmentEx())
    return v10;
  v9 = *(_QWORD *)(a2 + 8272) + *(_QWORD *)(a2 + 8264);
  if (HTTPScanFHeaderValue() != 1)
    return 456;
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(a3 + 88))(a3, 0, 0, v9, *(_QWORD *)(a3 + 96));
  if (v10)
    v6 = 400;
  else
    v6 = 200;
LABEL_11:
  v10 = MEMORY[0x1CAA3C384](a1, v6, v10, 0, 0, 0);
  if (v10)
    APSLogErrorAt();
  return v10;
}

uint64_t APCarPlayControlServerAddInterface(uint64_t a1, CFStringRef theString)
{
  uint64_t v4;
  CFTypeRef v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD block[7];
  int v10;
  CFTypeRef cf;
  char buffer[17];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v10 = 0;
  if (!CFStringGetCString(theString, buffer, 17, 0x600u))
  {
    v7 = 4294960591;
LABEL_9:
    APSLogErrorAt();
    APSLogErrorAt();
    return v7;
  }
  SocketGetInterfaceInfo();
  v4 = BonjourAdvertiserCreate();
  if ((_DWORD)v4)
  {
    v7 = v4;
    goto LABEL_9;
  }
  BonjourAdvertiserSetDispatchQueue();
  BonjourAdvertiserSetInterfaceName();
  BonjourAdvertiserSetFlags();
  BonjourAdvertiserSetServiceType();
  BonjourAdvertiserSetDomain();
  TXTRecordGetBytesPtr((const TXTRecordRef *)(a1 + 48));
  TXTRecordGetLength((const TXTRecordRef *)(a1 + 48));
  BonjourAdvertiserSetTXTRecord();
  v5 = cf;
  CFRetain(cf);
  CFRetain(theString);
  v6 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APCarPlayControlServerAddInterface_block_invoke;
  block[3] = &__block_descriptor_tmp_14_1;
  block[4] = a1;
  block[5] = v5;
  block[6] = theString;
  dispatch_async(v6, block);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t APCarPlayControlServerRemoveInterface(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  _QWORD v6[6];

  CFRetain(cf);
  v4 = *(NSObject **)(a1 + 24);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __APCarPlayControlServerRemoveInterface_block_invoke;
  v6[3] = &__block_descriptor_tmp_19_3;
  v6[4] = a1;
  v6[5] = cf;
  dispatch_async(v4, v6);
  return 0;
}

uint64_t APCarPlayControlServerInjectCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __APCarPlayControlServerInjectCommand_block_invoke;
  block[3] = &__block_descriptor_tmp_20_2;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_async(v3, block);
  return 0;
}

uint64_t APTransportConnectionUDPCreate(uint64_t a1, const void *a2, int a3, int a4, uint64_t a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  const void *TypedValue;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  char label[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a6)
  {
    APSLogErrorAt();
    v16 = -72322;
LABEL_22:
    APSSignalErrorAt();
    return v16;
  }
  APTransportConnectionGetClassID();
  v16 = CMDerivedObjectCreate();
  if (v16)
  {
    APSLogErrorAt();
    return v16;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 88) = CFDictionaryGetInt64() != 0;
  *(_DWORD *)(DerivedStorage + 112) = CFDictionaryGetInt64();
  CFUUIDGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  *(_QWORD *)(DerivedStorage + 120) = TypedValue;
  if (TypedValue)
    CFRetain(TypedValue);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  *(_DWORD *)(DerivedStorage + 108) = a3;
  *(_QWORD *)(DerivedStorage + 176) = -1;
  SNPrintF();
  if (a4)
    v12 = FigDispatchQueueCreateWithPriority();
  else
    v12 = (uint64_t)dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 8) = v12;
  if (!v12
    || (SNPrintF(), v13 = FigDispatchQueueCreateWithPriority(), (*(_QWORD *)(DerivedStorage + 24) = v13) == 0)
    || (*(_DWORD *)(DerivedStorage + 56) = 0,
        v14 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(_QWORD *)(DerivedStorage + 128) = v14) == 0))
  {
    APSLogErrorAt();
    v16 = -72323;
    goto LABEL_22;
  }
  if (gLogCategory_APTransportConnectionUDP <= 50
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  APTTrafficMetricsCreate(&gLogCategory_APTransportConnectionUDP, 0, (uint64_t *)(DerivedStorage + 208), 0);
  *a6 = 0;
  return v16;
}

uint64_t udpconnection_Invalidate_0(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)udpconnection_invalidate);
  return 0;
}

void udpconnection_Finalize_0(void *a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionUDP <= 50
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  udpconnection_invalidateInternal_0(a1, 0);
  v3 = (const void *)DerivedStorage[26];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[26] = 0;
  }
  v4 = (const void *)DerivedStorage[12];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[12] = 0;
  }
  v5 = (const void *)DerivedStorage[2];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[2] = 0;
  }
  v6 = (const void *)DerivedStorage[15];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[15] = 0;
  }
  v7 = DerivedStorage[3];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[3] = 0;
  }
  v8 = DerivedStorage[6];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[6] = 0;
  }
  v9 = DerivedStorage[1];
  if (v9)
  {
    dispatch_release(v9);
    DerivedStorage[1] = 0;
  }
  v10 = (const void *)DerivedStorage[16];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[16] = 0;
  }
}

__CFString *udpconnection_CopyDebugDescription_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportConnectionUDP %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t udpconnection_CopyProperty_0()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchSyncCopyPropertyImplementation();
}

uint64_t udpconnection_SetProperty_0()
{
  CMBaseObjectGetDerivedStorage();
  return FigDispatchAsyncSetPropertyImplementation();
}

void udpconnection_invalidate(void *a1)
{
  udpconnection_invalidateInternal_0(a1, 1);
}

void udpconnection_invalidateInternal_0(void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v5 = DerivedStorage;
    APTTrafficMetricsConnectionClosed(*(_QWORD *)(DerivedStorage + 208));
    if (gLogCategory_APTransportConnectionUDP <= 30
      && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_BYTE *)v5 = 1;
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = v6;
    if (*(_BYTE *)(v6 + 88))
    {
      v8 = *(NSObject **)(v6 + 192);
      if (v8)
      {
        dispatch_source_cancel(*(dispatch_source_t *)(v6 + 192));
        dispatch_release(v8);
        *(_QWORD *)(v7 + 192) = 0;
      }
      *(_DWORD *)(v7 + 176) = -1;
      v9 = *(NSObject **)(v7 + 200);
      if (v9)
      {
        dispatch_source_cancel(*(dispatch_source_t *)(v7 + 200));
        dispatch_release(v9);
        *(_QWORD *)(v7 + 200) = 0;
      }
      *(_DWORD *)(v7 + 180) = -1;
    }
    else
    {
      v10 = *(_DWORD *)(v6 + 176);
      if ((v10 & 0x80000000) == 0)
      {
        if (close(v10) && *__error())
          __error();
        *(_DWORD *)(v7 + 176) = -1;
      }
    }
    *(_DWORD *)(v7 + 56) = 6;
    if (a2)
      dispatch_sync_f(*(dispatch_queue_t *)(v5 + 24), a1, (dispatch_function_t)udpconnection_clearCallbackState_0);
    else
      udpconnection_clearCallbackState_0();
  }
}

void udpconnection_clearCallbackState_0()
{
  _QWORD *DerivedStorage;
  NSObject *v1;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[4] = 0;
  DerivedStorage[5] = 0;
  v1 = DerivedStorage[6];
  if (v1)
  {
    dispatch_release(v1);
    DerivedStorage[6] = 0;
  }
}

uint64_t udpconnection_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  CFNumberRef v8;
  uint64_t v9;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    APSLogErrorAt();
    v9 = 4294954511;
    APSSignalErrorAt();
    return v9;
  }
  if (!CFEqual(a2, CFSTR("LocalNetworkPort")))
    return 4294954512;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v9 = 4294954511;
    APSSignalErrorAt();
    goto LABEL_8;
  }
  if (!*(_BYTE *)(DerivedStorage + 88) || !*(_DWORD *)(DerivedStorage + 184))
  {
    v9 = 4294954509;
LABEL_8:
    APSLogErrorAt();
    return v9;
  }
  v8 = CFNumberCreate(a3, kCFNumberIntType, (const void *)(DerivedStorage + 184));
  v9 = 0;
  *a4 = v8;
  return v9;
}

uint64_t udpconnection_setPropertyInternal(uint64_t a1, const void *a2, __CFString *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;
  uint64_t (*v7)(uint64_t, size_t, _QWORD *);
  CFTypeID v9;
  const void *v10;
  CFTypeID v11;
  _BYTE v13[28];
  unsigned int v14;

  v14 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    APSLogErrorAt();
    v14 = -12785;
    goto LABEL_11;
  }
  v6 = DerivedStorage;
  if (CFEqual(a2, CFSTR("PackageType")))
  {
    if (CFSTR("RTCP") == a3 || a3 && CFSTR("RTCP") && CFEqual(a3, CFSTR("RTCP")))
    {
      *((_QWORD *)v6 + 8) = APTransportPackageRTCPCreateWithBBuf;
      *((_QWORD *)v6 + 9) = APTransportPackageRTCPCreate;
      v7 = APTransportPackageRTCPCreateWithMessageSize;
LABEL_17:
      *((_QWORD *)v6 + 10) = v7;
      return v14;
    }
    if (CFSTR("RTP") == a3 || a3 && CFSTR("RTP") && CFEqual(a3, CFSTR("RTP")))
    {
      *((_QWORD *)v6 + 8) = APTransportPackageRTPCreateWithBBuf;
      *((_QWORD *)v6 + 9) = APTransportPackageRTPCreate;
      v7 = APTransportPackageRTPCreateWithMessageSize;
      goto LABEL_17;
    }
    if (CFSTR("LowPowerKeepAlive") == a3 || a3 && CFSTR("LowPowerKeepAlive") && CFEqual(a3, CFSTR("LowPowerKeepAlive")))
    {
      *((_QWORD *)v6 + 8) = APTPackageLowPowerKeepAliveCreateWithBBuf;
      *((_QWORD *)v6 + 9) = APTPackageLowPowerKeepAliveCreate;
      *((_QWORD *)v6 + 10) = 0;
      return v14;
    }
    if (gLogCategory_APTransportConnectionUDP <= 90
      && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    return -12780;
  }
  if (CFEqual(a2, CFSTR("LowPowerOffloadBBuf")))
  {
    if (a3)
    {
      v9 = CFGetTypeID(a3);
      if (v9 == CMBlockBufferGetTypeID() && CMBlockBufferGetDataLength((CMBlockBufferRef)a3) < 0x21)
      {
        v10 = (const void *)*((_QWORD *)v6 + 12);
        *((_QWORD *)v6 + 12) = a3;
        CFRetain(a3);
        if (v10)
          CFRelease(v10);
        v14 = udpconnection_setupKeepAliveOffload();
        if (v14)
          APSLogErrorAt();
        return v14;
      }
    }
    goto LABEL_10;
  }
  if (CFEqual(a2, CFSTR("LowPowerOffloadInterval")))
  {
    *((_DWORD *)v6 + 26) = CFGetInt64();
    return v14;
  }
  if (CFEqual(a2, CFSTR("RemoteNetworkIPAddress")))
  {
    if (a3)
    {
      v11 = CFGetTypeID(a3);
      if (v11 == APSNetworkAddressGetTypeID())
      {
        APSNetworkAddressGetSocketAddr();
        *(_OWORD *)(v6 + 136) = *(_OWORD *)v13;
        *(_OWORD *)(v6 + 148) = *(_OWORD *)&v13[12];
        SockAddrSetPort();
        return v14;
      }
    }
LABEL_10:
    APSLogErrorAt();
    v14 = -72322;
LABEL_11:
    APSSignalErrorAt();
    return v14;
  }
  if (!CFEqual(a2, CFSTR("RemoteNetworkPort")))
  {
    if (CFEqual(a2, CFSTR("BoundInterfaceIndex")))
    {
      if (*((_DWORD *)v6 + 44) == -1)
      {
        *((_DWORD *)v6 + 42) = CFGetInt64();
        return v14;
      }
      APSLogErrorAt();
      if (gLogCategory_APTransportConnectionUDP <= 90
        && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return -72322;
    }
    else
    {
      return -12784;
    }
  }
  *((_DWORD *)v6 + 41) = CFGetInt64();
  SockAddrSetPort();
  if (gLogCategory_APTransportConnectionUDP <= 50
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  return v14;
}

uint64_t udpconnection_setupKeepAliveOffload()
{
  uint64_t DerivedStorage;
  OpaqueCMBlockBuffer *v1;
  size_t DataLength;
  char v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  _OWORD v8[2];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 96);
  if (!v1 || (*(_DWORD *)(DerivedStorage + 176) & 0x80000000) != 0)
    return 0;
  if (*(int *)(DerivedStorage + 104) <= 0)
  {
    v5 = 4294894974;
    APSLogErrorAt();
    APSSignalErrorAt();
    return v5;
  }
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  DataLength = CMBlockBufferGetDataLength(v1);
  v3 = DataLength;
  v4 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(DerivedStorage + 96), 0, DataLength, v8);
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_12;
  }
  BYTE2(v9) = v3;
  LOWORD(v9) = *(_DWORD *)(DerivedStorage + 104);
  HIBYTE(v9) = 1;
  if (!setsockopt(*(_DWORD *)(DerivedStorage + 176), 17, 2, v8, 0x24u))
    goto LABEL_8;
  if (!*__error())
  {
    v5 = 4294960596;
    goto LABEL_12;
  }
  v5 = *__error();
  if ((_DWORD)v5)
  {
LABEL_12:
    APSLogErrorAt();
    return v5;
  }
LABEL_8:
  v6 = *(const void **)(DerivedStorage + 96);
  if (!v6)
    return 0;
  CFRelease(v6);
  v5 = 0;
  *(_QWORD *)(DerivedStorage + 96) = 0;
  return v5;
}

uint64_t udpconnection_Resume_0(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), a1, (dispatch_function_t)udpconnection_resumeInternal);
  return 0;
}

uint64_t udpconnection_AddEventCallback_0(const void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8;

  CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    v8 = 4294894974;
LABEL_11:
    APSLogErrorAt();
    return v8;
  }
  if (!a3)
  {
    v8 = 4294894974;
    goto LABEL_11;
  }
  if (!a4)
  {
    v8 = 4294894974;
    goto LABEL_11;
  }
  dispatch_retain(a4);
  if (a1)
    CFRetain(a1);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t udpconnection_RemoveEventCallback_0()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t udpconnection_AcquirePackage_0()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t udpconnection_AcquirePackageWithMessageSize_0()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t udpconnection_RelinquishPackage_0(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  return 0;
}

uint64_t udpconnection_SendPackage_0(const void *a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  CFRetain(a2);
  APSDispatchAsyncFHelper();
  return 0;
}

void udpconnection_resumeInternal(const void *a1)
{
  uint64_t DerivedStorage;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  CFNumberRef v13;
  int v14;
  const __CFUUID *v15;
  socklen_t Size;
  int v17;
  _DWORD valuePtr[2];
  int handle;
  CFUUIDBytes handle_4;
  socklen_t v21;
  sockaddr v22;
  uint64_t v23;
  int v24;

  valuePtr[0] = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportConnectionUDP <= 50
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (!*(_QWORD *)(DerivedStorage + 64) || !*(_QWORD *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    v12 = -6709;
LABEL_29:
    valuePtr[0] = v12;
    goto LABEL_30;
  }
  if (*(_BYTE *)(DerivedStorage + 88))
  {
    CMBaseObjectGetDerivedStorage();
    v21 = -1;
    valuePtr[1] = 0;
    handle = -1;
    *(_QWORD *)&v22.sa_len = 0;
    *(_QWORD *)&v22.sa_data[6] = 0;
    v24 = 0;
    v23 = 0;
    v3 = ServerSocketPairOpen();
    if (v3)
    {
      v11 = v3;
      APSLogErrorAt();
    }
    else
    {
      v11 = 0;
    }
    free(0);
    free(0);
    valuePtr[0] = v11;
    if (!v11)
    {
LABEL_23:
      *(_DWORD *)(DerivedStorage + 56) = 5;
      APTTrafficMetricsConnectionFormed(*(_QWORD *)(DerivedStorage + 208));
      udpconnection_callEventCallback_0(a1, 5, 0);
      goto LABEL_24;
    }
    goto LABEL_67;
  }
  if (!*(_BYTE *)(DerivedStorage + 137) || !*(_DWORD *)(DerivedStorage + 164))
  {
    if (gLogCategory_APTransportConnectionUDP <= 90
      && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v12 = -72320;
    goto LABEL_29;
  }
  v4 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&v22.sa_len = 0;
  *(_QWORD *)&v22.sa_data[6] = 0;
  v24 = 0;
  v23 = 0;
  v21 = 0;
  v5 = socket(*(unsigned __int8 *)(v4 + 137), 2, 17);
  if ((v5 & 0x80000000) == 0)
    goto LABEL_15;
  if (!*__error())
  {
    v6 = -6700;
    goto LABEL_41;
  }
  v6 = *__error();
  if (v6)
  {
LABEL_41:
    APSLogErrorAt();
    goto LABEL_66;
  }
LABEL_15:
  SocketSetNonBlocking();
  if (*(_DWORD *)(v4 + 168))
  {
    v7 = *(unsigned __int8 *)(v4 + 137);
    if (v7 == 2)
    {
      v8 = v5;
      v9 = 0;
      v10 = 25;
LABEL_33:
      v6 = setsockopt(v8, v9, v10, (const void *)(v4 + 168), 4u);
      if (v6)
        goto LABEL_72;
      goto LABEL_34;
    }
    if (v7 == 30)
    {
      v8 = v5;
      v9 = 41;
      v10 = 125;
      goto LABEL_33;
    }
  }
LABEL_34:
  v14 = *(_DWORD *)(v4 + 108);
  if ((v14 & 0xB) != 0)
  {
    SocketSetP2P();
    v14 = *(_DWORD *)(v4 + 108);
  }
  if ((v14 & 0x10) != 0)
  {
    if (gLogCategory_APTransportConnectionUDP <= 30
      && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_DWORD *)&handle_4.byte0 = 4;
    setsockopt(v5, 0xFFFF, 4225, &handle_4, 4u);
  }
  SocketSetQoS();
  v15 = *(const __CFUUID **)(v4 + 120);
  if (v15)
  {
    handle_4 = CFUUIDGetUUIDBytes(v15);
    setsockopt(v5, 0xFFFF, 4360, &handle_4, 0x10u);
  }
  Size = SockAddrGetSize();
  if (!connect(v5, (const sockaddr *)(v4 + 136), Size))
    goto LABEL_49;
  if (*__error())
  {
    v6 = *__error();
    if (!v6)
    {
LABEL_49:
      v21 = 28;
      v17 = getsockname(v5, &v22, &v21);
      if (!v17)
      {
        if (gLogCategory_APTransportConnectionUDP <= 50
          && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        *(_DWORD *)(v4 + 176) = v5;
        valuePtr[0] = udpconnection_setupKeepAliveOffload();
        if (!valuePtr[0])
          goto LABEL_23;
        goto LABEL_67;
      }
      v6 = v17;
LABEL_72:
      APSLogErrorAt();
      if (v5 < 0)
        goto LABEL_66;
LABEL_63:
      if (close(v5) && *__error())
        __error();
      goto LABEL_66;
    }
  }
  else
  {
    v6 = -6700;
  }
  APSLogErrorAt();
  if (gLogCategory_APTransportConnectionUDP <= 90
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
    if ((v5 & 0x80000000) == 0)
      goto LABEL_63;
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
LABEL_66:
  valuePtr[0] = v6;
LABEL_67:
  APSLogErrorAt();
LABEL_30:
  *(_DWORD *)(DerivedStorage + 56) = 4;
  v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  udpconnection_callEventCallback_0(a1, 4, v13);
  if (v13)
    CFRelease(v13);
LABEL_24:
  if (a1)
    CFRelease(a1);
}

_BYTE *udpconnection_callEventCallback_0(const void *a1, uint64_t a2, const void *a3)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    if (a3)
      CFRetain(a3);
    if (a1)
      CFRetain(a1);
    return (_BYTE *)APSDispatchAsyncFHelper();
  }
  return result;
}

void udpconnection_sourceEventHandlerCallback(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  CFAllocatorRef *v4;
  const void *v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFAllocator *v8;
  void *v9;
  void *v10;
  ssize_t v11;
  uint64_t v12;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  cf = 0;
  blockBufferOut = 0;
  v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE10];
  if (!v2)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
    v10 = 0;
    v5 = 0;
    goto LABEL_12;
  }
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
  {
    v10 = 0;
    goto LABEL_12;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_9;
  v7 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 56) != 5)
    goto LABEL_9;
  v8 = *v4;
  v9 = CFAllocatorAllocate(*v4, 1472, 0);
  if (!v9)
  {
    APSLogErrorAt();
    APSSignalErrorAt();
LABEL_9:
    v10 = 0;
    goto LABEL_10;
  }
  v10 = v9;
  v11 = recvfrom(v3, v9, 0x5C0uLL, 0, 0, 0);
  v12 = *MEMORY[0x1E0C9AE00];
  if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, 0x5C0uLL, v8, 0, 0, v11, 0, &blockBufferOut))
  {
    if ((*(unsigned int (**)(uint64_t, CMBlockBufferRef, CFTypeRef *))(v7 + 64))(v12, blockBufferOut, &cf))
      APSLogErrorAt();
    else
      udpconnection_callEventCallback_0(v5, 7, cf);
    goto LABEL_9;
  }
  APSLogErrorAt();
LABEL_10:
  if (cf)
    CFRelease(cf);
LABEL_12:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v10)
    CFAllocatorDeallocate(*v4, v10);
  if (v5)
    CFRelease(v5);
}

void udpconnection_sourceCanceledCallback(CFTypeRef *a1)
{
  int v2;

  v2 = *((_DWORD *)a1 + 2);
  if ((v2 & 0x80000000) == 0)
  {
    if (close(v2) && *__error())
      __error();
    *((_DWORD *)a1 + 2) = -1;
  }
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

void udpconnection_deferCallEventCallback_0(CFTypeRef *a1)
{
  uint64_t DerivedStorage;
  CFTypeRef v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 40))
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), a1, (dispatch_function_t)udpconnection_callEventCallbackOnEventQueue_0);
  v3 = a1[2];
  if (v3)
    CFRelease(v3);
  if (*a1)
    CFRelease(*a1);
}

uint64_t udpconnection_callEventCallbackOnEventQueue_0(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(DerivedStorage + 40))(*(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(DerivedStorage + 32));
}

void udpconnection_addEventCallbackInternal_0(uint64_t a1)
{
  NSObject *v2;

  udpconnection_setEventCallback_0(a1);
  v2 = *(NSObject **)(a1 + 24);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

uint64_t udpconnection_setEventCallback_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)(a1 + 8);
  v3 = *(NSObject **)(DerivedStorage + 48);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(DerivedStorage + 48) = v4;
    dispatch_retain(v4);
  }
  return 0;
}

uint64_t udpconnection_acquirePackageInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t (*v3)(CFAllocatorRef, _QWORD);
  CFAllocatorRef v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v6 = 4294954511;
    APSSignalErrorAt();
  }
  else
  {
    v3 = *(uint64_t (**)(CFAllocatorRef, _QWORD))(DerivedStorage + 72);
    v4 = CFGetAllocator(*(CFTypeRef *)a1);
    v5 = v3(v4, *(_QWORD *)(a1 + 8));
    if ((_DWORD)v5)
    {
      v6 = v5;
      APSLogErrorAt();
    }
    else
    {
      if (gLogCategory_APTransportConnectionUDP <= 30
        && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      return 0;
    }
  }
  return v6;
}

uint64_t udpconnection_acquirePackageWithMessageSizeInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t (*v3)(CFAllocatorRef, _QWORD, _QWORD);
  CFAllocatorRef v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    APSLogErrorAt();
    v6 = 4294954511;
    APSSignalErrorAt();
  }
  else
  {
    v3 = *(uint64_t (**)(CFAllocatorRef, _QWORD, _QWORD))(DerivedStorage + 80);
    if (v3)
    {
      v4 = CFGetAllocator(*(CFTypeRef *)a1);
      v5 = v3(v4, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
      if ((_DWORD)v5)
      {
        v6 = v5;
        APSLogErrorAt();
      }
      else
      {
        if (gLogCategory_APTransportConnectionUDP <= 30
          && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        return 0;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294894969;
    }
  }
  return v6;
}

void udpconnection_sendPackageInternal_0(const void **a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t (*v4)(const void *);
  uint64_t v5;
  OpaqueCMBlockBuffer *v6;
  int v7;
  int *v8;
  socklen_t v9;
  ssize_t v10;
  int v11;
  int v12;
  ssize_t v13;
  const void *v14;
  msghdr v15;
  int v16;
  iovec v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  kdebug_trace();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_10;
  if (*(_DWORD *)(DerivedStorage + 56) != 5)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_24;
  }
  v3 = a1[1];
  v4 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v4 || (v5 = v4(v3)) == 0)
  {
LABEL_10:
    APSLogErrorAt();
    APSSignalErrorAt();
    goto LABEL_11;
  }
  v6 = (OpaqueCMBlockBuffer *)v5;
  if (FigMakeIOVecArrayWithBlockBuffer())
  {
    APSLogErrorAt();
LABEL_24:
    udpconnection_callEventCallback_0(*a1, 8, a1[1]);
    if (!v6)
      goto LABEL_26;
    goto LABEL_25;
  }
  CMBlockBufferGetDataLength(v6);
  APTTrafficMetricsSendStarted(*(_QWORD *)(DerivedStorage + 208));
  if (!*(_BYTE *)(DerivedStorage + 88))
  {
    kdebug_trace();
    v10 = writev(*(_DWORD *)(DerivedStorage + 176), &v17, v16);
    if (v10 != CMBlockBufferGetDataLength(v6))
    {
      if (*__error())
      {
        v11 = *__error();
        if (!v11)
          goto LABEL_21;
      }
      else
      {
        v11 = -6700;
      }
      if (gLogCategory_APTransportConnectionUDP <= 90
        && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  memset(&v15.msg_namelen, 0, 24);
  v7 = *(unsigned __int8 *)(DerivedStorage + 137);
  if (v7 == 30)
  {
    v8 = (int *)(DerivedStorage + 180);
    v9 = 28;
  }
  else
  {
    if (v7 != 2)
    {
      v11 = 0;
      goto LABEL_23;
    }
    v8 = (int *)(DerivedStorage + 176);
    v9 = 16;
  }
  v12 = *v8;
  v15.msg_name = (void *)(DerivedStorage + 136);
  v15.msg_namelen = v9;
  v15.msg_iov = &v17;
  v15.msg_iovlen = v16;
  v15.msg_control = 0;
  *(_QWORD *)&v15.msg_controllen = 0;
  v13 = sendmsg(v12, &v15, 0);
  if (v13 == CMBlockBufferGetDataLength(v6))
  {
LABEL_20:
    v11 = 0;
LABEL_21:
    APTTrafficMetricsSendFinished(*(_QWORD *)(DerivedStorage + 208));
    goto LABEL_23;
  }
  if (*__error())
  {
    v11 = *__error();
    if (!v11)
      goto LABEL_20;
  }
  else
  {
    v11 = -6700;
  }
  if (gLogCategory_APTransportConnectionUDP <= 90
    && (gLogCategory_APTransportConnectionUDP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_23:
  if (v11)
    goto LABEL_24;
LABEL_25:
  CFRelease(v6);
LABEL_26:
  v14 = a1[1];
  if (v14)
    CFRelease(v14);
  if (*a1)
    CFRelease(*a1);
}

uint64_t APTransportPackageAPAPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  return apapPackage_create(a1, 0, 0, a2);
}

uint64_t apapPackage_create(const __CFAllocator *a1, int a2, OpaqueCMBlockBuffer *a3, CFTypeRef *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Empty;
  _DWORD dataLength[3];

  memset(dataLength, 0, sizeof(dataLength));
  if (!a4)
  {
    v15 = 4294894936;
    goto LABEL_28;
  }
  APTransportPackageGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
  {
    v15 = v8;
    goto LABEL_28;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)DerivedStorage = a2;
  if (a2)
    v10 = 1634754914;
  else
    v10 = 1634754928;
  *(_DWORD *)(DerivedStorage + 4) = v10;
  if (a3)
  {
    v11 = DerivedStorage;
    if (a2)
    {
      v12 = APTransportPackageBufferedAPAPGetPayloadSize(a3, dataLength);
      if ((_DWORD)v12)
      {
        v15 = v12;
        goto LABEL_28;
      }
      v13 = CMBlockBufferGetDataLength(a3);
      if (v13 != dataLength[0] + 4)
      {
        v15 = 4294894936;
        goto LABEL_28;
      }
      if (dataLength[0])
      {
        v14 = CMBlockBufferCreateWithBufferReference(a1, a3, 4uLL, dataLength[0], 0, (CMBlockBufferRef *)(v11 + 8));
        if ((_DWORD)v14)
        {
          v15 = v14;
LABEL_28:
          APSLogErrorAt();
          goto LABEL_20;
        }
      }
      else
      {
        Empty = CMBlockBufferCreateEmpty(a1, 0, 0, (CMBlockBufferRef *)(v11 + 8));
        if ((_DWORD)Empty)
        {
          v15 = Empty;
          goto LABEL_28;
        }
      }
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 8) = CFRetain(a3);
    }
  }
  if (gLogCategory_APTransportPackageAPAP <= 30
    && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v15 = 0;
  *a4 = CFRetain(*(CFTypeRef *)&dataLength[1]);
LABEL_20:
  if (*(_QWORD *)&dataLength[1])
    CFRelease(*(CFTypeRef *)&dataLength[1]);
  return v15;
}

uint64_t APTransportPackageBufferedAPAPCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  return apapPackage_create(a1, 1, 0, a2);
}

uint64_t APTransportPackageBufferedAPAPCreateWithBBuf(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3)
{
  return apapPackage_create(a1, 1, a2, a3);
}

uint64_t APTransportPackageBufferedAPAPGetHeaderSize(_DWORD *a1)
{
  uint64_t result;

  if (a1)
  {
    result = 0;
    *a1 = 4;
  }
  else
  {
    APSLogErrorAt();
    return 4294894936;
  }
  return result;
}

uint64_t APTransportPackageBufferedAPAPGetPayloadSize(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int destination;

  destination = 0;
  if (!a1)
  {
    v6 = 4294894936;
LABEL_13:
    APSLogErrorAt();
    return v6;
  }
  if (!a2)
  {
    v6 = 4294894936;
    goto LABEL_13;
  }
  if (CMBlockBufferGetDataLength(a1) <= 3)
  {
    v6 = 4294894936;
    goto LABEL_13;
  }
  v4 = CMBlockBufferCopyDataBytes(a1, 0, 4uLL, &destination);
  if ((_DWORD)v4)
  {
    v6 = v4;
    goto LABEL_13;
  }
  v5 = bswap32(destination);
  if (v5 <= 3)
  {
    v6 = 4294894936;
    goto LABEL_13;
  }
  v6 = 0;
  *a2 = v5 - 4;
  return v6;
}

uint64_t APTransportPackageBufferedAPAPGetMaxPayloadSize(_QWORD *a1)
{
  uint64_t result;

  if (a1)
  {
    result = 0;
    *a1 = 4294967291;
  }
  else
  {
    APSLogErrorAt();
    return 4294894936;
  }
  return result;
}

void apapPackage_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageAPAP <= 30
    && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

CFMutableStringRef apapPackage_CopyDebugDescription()
{
  uint64_t DerivedStorage;
  CFMutableStringRef Mutable;
  OpaqueCMBlockBuffer *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 8);
  if (v2)
  {
    CMBlockBufferGetDataLength(v2);
    if (apapPackage_isMessageTypeSupported())
      APSAPAPBBufDecodeHeader();
  }
  CFStringAppendF();
  return Mutable;
}

uint64_t apapPackage_isMessageTypeSupported()
{
  _DWORD *DerivedStorage;
  int v1;

  DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage[1];
  if (v1 == 1634754914 || v1 == 1634754917)
    return *(unsigned __int8 *)DerivedStorage;
  if (v1 == 1634754928)
    return *(_BYTE *)DerivedStorage == 0;
  return 0;
}

CFTypeRef apapPackage_CopyMessageData()
{
  CFTypeRef result;

  result = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 8);
  if (result)
    return CFRetain(result);
  return result;
}

void apapPackage_SetMessageData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
}

uint64_t apapPackage_GetMessageType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 4);
}

uint64_t apapPackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 4) = a2;
  return result;
}

CMBlockBufferRef apapPackage_CreateBBufRepresentation(const void *a1)
{
  uint64_t DerivedStorage;
  OpaqueCMBlockBuffer *v3;
  size_t DataLength;
  const void *v6;
  CMBlockBufferRef theBuffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theBuffer = 0;
  if (!apapPackage_isMessageTypeSupported())
  {
    if (gLogCategory_APTransportPackageAPAP <= 90
      && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_28;
    }
    return theBuffer;
  }
  v3 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 8);
  if (!v3)
  {
    if (gLogCategory_APTransportPackageAPAP <= 90
      && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_28;
    }
    return theBuffer;
  }
  DataLength = CMBlockBufferGetDataLength(v3);
  if (!DataLength)
  {
    if (*(_BYTE *)DerivedStorage)
      goto LABEL_11;
LABEL_22:
    v6 = *(const void **)(DerivedStorage + 8);
    if (v6)
      return (CMBlockBufferRef)CFRetain(v6);
    return (CMBlockBufferRef)v6;
  }
  if (APSAPAPBBufDecodeHeader())
  {
    if (gLogCategory_APTransportPackageAPAP <= 90
      && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
    {
      goto LABEL_28;
    }
    return theBuffer;
  }
  if (!*(_BYTE *)DerivedStorage)
    goto LABEL_22;
  if (DataLength <= 0xFFFFFFFB)
  {
LABEL_11:
    CFGetAllocator(a1);
    if (FigCreateBlockBufferCopyingMemoryBlock()
      || DataLength
      && CMBlockBufferAppendBufferReference(0, *(CMBlockBufferRef *)(DerivedStorage + 8), 0, DataLength, 0))
    {
      APSLogErrorAt();
    }
    return theBuffer;
  }
  if (gLogCategory_APTransportPackageAPAP <= 90
    && (gLogCategory_APTransportPackageAPAP != -1 || _LogCategory_Initialize()))
  {
LABEL_28:
    LogPrintF();
  }
  return theBuffer;
}

BOOL apapPackage_IsEndOfBurst()
{
  return *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 4) == 1634754917;
}

uint64_t APTransportPackageHTTPCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = httppackage_createWithHTTPMessage(a1, 0, a2);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t httppackage_createWithHTTPMessage(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v13;

  APTransportPackageGetClassID();
  v13 = CMDerivedObjectCreate();
  if (v13)
    goto LABEL_33;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = HTTPMessageCopy();
    *(_QWORD *)(DerivedStorage + 24) = v6;
    *(_QWORD *)(v6 + 9672) = *(_QWORD *)(a2 + 9672);
    *(_OWORD *)(v6 + 9680) = *(_OWORD *)(a2 + 9680);
    *(_QWORD *)(v6 + 9696) = *(_QWORD *)(a2 + 9696);
  }
  else
  {
    v13 = HTTPMessageCreate();
    if (v13)
      goto LABEL_33;
    v6 = *(_QWORD *)(DerivedStorage + 24);
  }
  *(_DWORD *)(DerivedStorage + 40) = 1634957678;
  v7 = *(_QWORD *)(v6 + 8248);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8240);
    v9 = *(_QWORD *)(v6 + 8344);
    v10 = *(_QWORD *)(v6 + 8352);
    if (httppackage_matchIncomingMessageMethodAndURL(v8, v7, (uint64_t)"SETUP", v9, v10, ""))
    {
      v11 = 1937012080;
LABEL_21:
      *(_DWORD *)(DerivedStorage + 8) = v11;
      v13 = 0;
      goto LABEL_22;
    }
    if (httppackage_matchIncomingMessageMethodAndURL(v8, v7, (uint64_t)"TEARDOWN", v9, v10, ""))
    {
      v11 = 1952741230;
      goto LABEL_21;
    }
    if (httppackage_matchIncomingMessageMethodAndURL(v8, v7, (uint64_t)"POST", v9, v10, "/event"))
    {
      v11 = 1702260340;
      goto LABEL_21;
    }
    if (httppackage_matchIncomingMessageMethodAndURL(v8, v7, (uint64_t)"POST", v9, v10, "/command"))
    {
      v11 = 1668116068;
      goto LABEL_21;
    }
    APSLogErrorAt();
    if (gLogCategory_APTransportPackageHTTP <= 50
      && (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v13 = -16643;
LABEL_33:
    APSLogErrorAt();
    return v13;
  }
  if (!*(_QWORD *)(v6 + 8272))
  {
LABEL_22:
    if (gLogCategory_APTransportPackageHTTP <= 30
      && (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    goto LABEL_26;
  }
  if (gLogCategory_APTransportPackageHTTP <= 60)
  {
    if (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize())
      LogPrintF();
    goto LABEL_22;
  }
LABEL_26:
  *a3 = 0;
  return v13;
}

uint64_t APTransportPackageHTTPCreateWithHTTPMessage(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  if (a2)
  {
    v3 = httppackage_createWithHTTPMessage(a1, a2, a3);
    if ((_DWORD)v3)
      APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return v3;
}

uint64_t APTransportPackageHTTPGetHTTPMessage(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  int v5;
  const __CFDictionary *v6;
  int v7;
  int v8;
  const __CFAllocator *v9;
  const __CFDictionary *v10;
  CFTypeID v11;
  const void *TypedValue;
  const void *v13;
  int v14;
  const __CFData *v15;
  const __CFData *v16;
  OpaqueCMBlockBuffer *v17;
  int v18;
  uint64_t v19;
  char *dataPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  CFDataRef data;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  data = 0;
  v25 = 0;
  v4 = *(_DWORD *)(DerivedStorage + 8);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  if (v4 <= 1885435251)
  {
    if (v4 > 1768842862)
    {
      if (v4 <= 1835428127)
      {
        if (v4 <= 1818977636)
        {
          switch(v4)
          {
            case 1768842863:
              v6 = 0;
              goto LABEL_145;
            case 1785750887:
              v6 = 0;
              goto LABEL_144;
            case 1801807216:
              v6 = 0;
              goto LABEL_145;
          }
          goto LABEL_195;
        }
        if (v4 > 1819243875)
        {
          if (v4 == 1819243876)
          {
            v6 = 0;
            goto LABEL_144;
          }
          if (v4 == 1835100003)
          {
            v6 = 0;
            goto LABEL_144;
          }
          goto LABEL_195;
        }
        if (v4 != 1818977637)
        {
          if (v4 == 1819240307)
          {
            v6 = 0;
            goto LABEL_145;
          }
          goto LABEL_195;
        }
        goto LABEL_97;
      }
      if (v4 <= 1885430127)
      {
        if (v4 == 1835428128)
        {
          v6 = 0;
          goto LABEL_145;
        }
        if (v4 != 1835428205)
        {
          if (v4 == 1852796517)
          {
            v6 = 0;
            goto LABEL_144;
          }
          goto LABEL_195;
        }
        v5 = 0;
      }
      else if (v4 > 1885434479)
      {
        if (v4 == 1885434480)
        {
          v5 = 0;
        }
        else
        {
          if (v4 != 1885434725)
            goto LABEL_195;
          v5 = 0;
        }
      }
      else if (v4 == 1885430128)
      {
        v5 = 0;
      }
      else
      {
        if (v4 != 1885432944)
          goto LABEL_195;
        v5 = 0;
      }
    }
    else
    {
      if (v4 <= 1668247141)
      {
        if (v4 <= 1634627170)
        {
          switch(v4)
          {
            case 1633907822:
              v6 = 0;
              goto LABEL_145;
            case 1634562925:
              v6 = 0;
              goto LABEL_145;
            case 1634624360:
              v6 = 0;
              goto LABEL_144;
          }
          goto LABEL_195;
        }
        if (v4 <= 1635087463)
        {
          if (v4 == 1634627171)
          {
            v6 = 0;
            goto LABEL_144;
          }
          if (v4 == 1634956656)
          {
            v5 = 0;
            goto LABEL_132;
          }
LABEL_195:
          if (gLogCategory_APTransportPackageHTTP <= 50
            && (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_199;
        }
        if (v4 != 1635087464)
        {
          if (v4 == 1668246893)
          {
            v6 = 0;
            goto LABEL_145;
          }
          goto LABEL_195;
        }
LABEL_97:
        v6 = 0;
        goto LABEL_145;
      }
      if (v4 > 1718628916)
      {
        if (v4 <= 1735422065)
        {
          if (v4 == 1718628917)
          {
            v6 = 0;
            goto LABEL_145;
          }
          if (v4 == 1718839394)
          {
            v6 = 0;
            goto LABEL_144;
          }
          goto LABEL_195;
        }
        if (v4 != 1735422066)
        {
          if (v4 == 1735815020)
          {
            v6 = 0;
            goto LABEL_144;
          }
          goto LABEL_195;
        }
LABEL_104:
        v5 = 1;
        goto LABEL_132;
      }
      if (v4 == 1668247142)
      {
        v6 = 0;
        goto LABEL_145;
      }
      if (v4 == 1702064240)
      {
        v6 = 0;
        goto LABEL_145;
      }
      if (v4 != 1718383464)
        goto LABEL_195;
      v5 = 1;
    }
    goto LABEL_132;
  }
  if (v4 <= 1936024938)
  {
    if (v4 > 1886613611)
    {
      if (v4 <= 1918984563)
      {
        if (v4 == 1886613612)
        {
          v6 = 0;
          goto LABEL_145;
        }
        if (v4 == 1886614892)
        {
          v6 = 0;
          goto LABEL_145;
        }
        v7 = 1886809964;
      }
      else
      {
        if (v4 > 1919119971)
        {
          if (v4 == 1919119972)
          {
            v6 = 0;
            goto LABEL_144;
          }
          if (v4 != 1920164128)
            goto LABEL_195;
          goto LABEL_97;
        }
        if (v4 == 1918984564)
        {
          v6 = 0;
          goto LABEL_145;
        }
        v7 = 1918989413;
      }
      if (v4 != v7)
        goto LABEL_195;
      v5 = 1;
      goto LABEL_132;
    }
    if (v4 <= 1886283374)
    {
      switch(v4)
      {
        case 1885435252:
          v5 = 0;
          break;
        case 1885435493:
          v5 = 0;
          break;
        case 1886151033:
          v6 = 0;
          goto LABEL_145;
        default:
          goto LABEL_195;
      }
      goto LABEL_132;
    }
    if (v4 <= 1886417779)
    {
      if (v4 == 1886283375)
      {
        v6 = 0;
        goto LABEL_145;
      }
      if (v4 == 1886283552)
      {
        v6 = 0;
        goto LABEL_144;
      }
      goto LABEL_195;
    }
    if (v4 == 1886417780)
    {
      v5 = 0;
      goto LABEL_132;
    }
    v8 = 1886547815;
LABEL_84:
    if (v4 == v8)
    {
      v6 = 0;
      goto LABEL_144;
    }
    goto LABEL_195;
  }
  if (v4 > 1937011315)
  {
    if (v4 > 1952741229)
    {
      if (v4 > 1953719407)
      {
        if (v4 == 1953719408)
        {
          v6 = 0;
          goto LABEL_144;
        }
        if (v4 == 2053925920)
        {
          v6 = 0;
          goto LABEL_144;
        }
      }
      else
      {
        if (v4 == 1952741230)
        {
          v6 = 0;
          goto LABEL_144;
        }
        if (v4 == 1952807028)
        {
          v6 = 0;
          goto LABEL_144;
        }
      }
      goto LABEL_195;
    }
    if (v4 == 1937011316)
    {
      v6 = 0;
      goto LABEL_144;
    }
    if (v4 == 1937012080)
    {
      v6 = 0;
      goto LABEL_144;
    }
    v8 = 1937141612;
    goto LABEL_84;
  }
  if (v4 <= 1936748657)
  {
    if (v4 != 1936024939)
    {
      if (v4 == 1936027749)
      {
        v6 = 0;
        goto LABEL_144;
      }
      if (v4 == 1936027768)
      {
        v6 = 0;
        goto LABEL_144;
      }
      goto LABEL_195;
    }
    goto LABEL_104;
  }
  if (v4 > 1936942191)
  {
    if (v4 == 1936942192)
    {
      v6 = 0;
      goto LABEL_144;
    }
    if (v4 == 1937010544)
    {
      v6 = 0;
      goto LABEL_145;
    }
    goto LABEL_195;
  }
  if (v4 != 1936748658)
  {
    if (v4 == 1936875892)
    {
      v6 = 0;
      goto LABEL_144;
    }
    goto LABEL_195;
  }
  v5 = 1;
LABEL_132:
  if (!*(_QWORD *)(DerivedStorage + 16))
  {
    v6 = 0;
    if (!v5)
      goto LABEL_145;
LABEL_144:
    if (CFStringCopyUTF8CString())
      goto LABEL_200;
    goto LABEL_145;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (FigCreateCFDataWithBlockBufferNoCopy())
    goto LABEL_199;
  v10 = (const __CFDictionary *)CFPropertyListCreateWithData(v9, data, 0, 0, 0);
  v6 = v10;
  if (!v10)
    goto LABEL_200;
  v11 = CFGetTypeID(v10);
  if (v11 != CFDictionaryGetTypeID())
    goto LABEL_200;
  CFStringGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    v13 = *(const void **)v3;
    *(_QWORD *)v3 = TypedValue;
    CFRetain(TypedValue);
    if (v13)
      CFRelease(v13);
  }
  if (v5)
    goto LABEL_144;
LABEL_145:
  if (!HTTPHeader_InitRequest())
  {
    v14 = *(_DWORD *)(v3 + 8);
    if (v14 == 1886151033)
    {
      MakeFractionalDateString();
      HTTPHeader_SetField();
      goto LABEL_153;
    }
    if (v14 != 1768842863)
    {
      if (v14 == 1718628917 && HTTPHeader_SetField())
        goto LABEL_200;
LABEL_153:
      if (*(_QWORD *)(v3 + 32) && HTTPHeader_SetField())
        goto LABEL_200;
      if (v6)
      {
        CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)httppackage_appendCustomHeaderField, a1);
        CFDataGetTypeID();
        v15 = (const __CFData *)CFDictionaryGetTypedValue();
        if (v15)
        {
          v16 = v15;
          CFDataGetLength(v15);
          CFDataGetBytePtr(v16);
          if (HTTPMessageSetBody())
            goto LABEL_200;
        }
LABEL_187:
        v19 = *(_QWORD *)(v3 + 24);
        goto LABEL_188;
      }
      v17 = *(OpaqueCMBlockBuffer **)(v3 + 16);
      if (!v17)
        goto LABEL_187;
      totalLengthOut = 0;
      lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      if (!CMBlockBufferGetDataPointer(v17, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
      {
        v18 = *(_DWORD *)(v3 + 8);
        if (v18 <= 1886547814)
        {
          if (v18 != 1785750887 && v18 != 1852796517 && v18 != 1886283552)
            goto LABEL_185;
        }
        else if (v18 > 1936942191)
        {
          if (v18 != 1952807028)
          {
            if (v18 == 1936942192)
            {
              if (lengthAtOffsetOut == totalLengthOut && !HTTPHeader_SetField())
                goto LABEL_187;
              goto LABEL_199;
            }
            goto LABEL_185;
          }
        }
        else if (v18 != 1886547815)
        {
          if (v18 == 1920164128)
          {
            if (lengthAtOffsetOut == totalLengthOut && !HTTPHeader_SetField())
              goto LABEL_187;
            goto LABEL_199;
          }
LABEL_185:
          if (lengthAtOffsetOut == totalLengthOut && !HTTPMessageSetBody())
            goto LABEL_187;
          goto LABEL_199;
        }
        if (!HTTPHeader_SetField())
        {
          if (totalLengthOut < 5)
          {
            if (!HTTPMessageSetBody())
              goto LABEL_187;
          }
          else if (!CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v3 + 16), 4uLL, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut)&& lengthAtOffsetOut + 4 == totalLengthOut&& !HTTPMessageSetBody())
          {
            goto LABEL_187;
          }
        }
      }
LABEL_199:
      APSLogErrorAt();
      v19 = 0;
      v6 = 0;
      goto LABEL_188;
    }
    APSSystemGetUserVersion();
    if (!HTTPHeader_SetField())
      goto LABEL_153;
  }
LABEL_200:
  APSLogErrorAt();
  v19 = 0;
LABEL_188:
  if (v25)
  {
    free(v25);
    v25 = 0;
  }
  if (data)
    CFRelease(data);
  if (v6)
    CFRelease(v6);
  return v19;
}

void httppackage_appendCustomHeaderField(const void *a1, const void *a2)
{
  CFTypeID v4;

  CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CF75C0]) && !CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CF75B8]))
  {
    if (a2 && (v4 = CFGetTypeID(a2), v4 == CFStringGetTypeID()))
    {
      CFStringCopyUTF8CString();
      CFStringCopyUTF8CString();
      HTTPHeader_SetField();
    }
    else
    {
      APSLogErrorAt();
    }
  }
}

void APTransportPackageHTTPSetURL(uint64_t a1, const void *a2)
{
  const void **DerivedStorage;
  const void *v4;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  v4 = *DerivedStorage;
  if (a2)
    CFRetain(a2);
  *DerivedStorage = a2;
  if (v4)
    CFRelease(v4);
}

void httppackage_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportPackageHTTP <= 30
    && (gLogCategory_APTransportPackageHTTP != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

__CFString *httppackage_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportPackageHTTP %p>"), a1);
  return Mutable;
}

CMBlockBufferRef httppackage_CopyMessageData(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  const __CFAllocator *v7;
  CFDictionaryRef v8;
  char v10;
  char v11;
  CMTime time;
  uint64_t v13;
  uint64_t v14;
  timeval v15;
  CMBlockBufferCustomBlockSource customBlockSource;
  uint64_t v17;
  uint64_t v18;
  CMBlockBufferRef blockBufferOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  blockBufferOut = 0;
  v17 = 0;
  v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    blockBufferOut = (CMBlockBufferRef)CFRetain(v3);
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(DerivedStorage + 24);
  v5 = *(_QWORD *)(v4 + 8528);
  if (!v5)
  {
    *(_QWORD *)&customBlockSource.version = 0;
    time.value = 0;
    v10 = 1;
    do
    {
      v11 = v10;
      if (!HTTPGetHeaderField())
        break;
      v10 = 0;
    }
    while ((v11 & 1) != 0);
LABEL_5:
    HTTPGetHeaderField();
    if (v18)
    {
      v15.tv_sec = 0;
      *(_QWORD *)&v15.tv_usec = 0;
      v13 = 0;
      v14 = 0;
      *(_OWORD *)&customBlockSource.version = *MEMORY[0x1E0CA2E68];
      *(void (__cdecl **)(void *, void *, size_t))((char *)&customBlockSource.FreeBlock + 4) = *(void (__cdecl **)(void *, void *, size_t))(MEMORY[0x1E0CA2E68] + 16);
      gettimeofday(&v15, 0);
      if (ParseFractionalDateString())
      {
        APSLogErrorAt();
      }
      else
      {
        CMTimeMake((CMTime *)&customBlockSource, 1000000 * (v15.tv_sec - v13) - (int)v14 + v15.tv_usec, 1000000);
        v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        *(_OWORD *)&time.value = *(_OWORD *)&customBlockSource.version;
        time.epoch = *(CMTimeEpoch *)((char *)&customBlockSource.FreeBlock + 4);
        v8 = CMTimeCopyAsDictionary(&time, v7);
        CMSetAttachment(blockBufferOut, (CFStringRef)*MEMORY[0x1E0CF75B0], v8, 0);
        if (v8)
          CFRelease(v8);
      }
    }
    return blockBufferOut;
  }
  v6 = *(void **)(v4 + 8520);
  HIDWORD(customBlockSource.AllocateBlock) = 0;
  *(_QWORD *)&customBlockSource.version = 0;
  customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))httppackage_bbufFree;
  customBlockSource.refCon = (void *)CFRetain(a1);
  if (!CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], &customBlockSource, 0, v5, 0, &blockBufferOut))goto LABEL_5;
  APSLogErrorAt();
  if (blockBufferOut)
  {
    CFRelease(blockBufferOut);
    return 0;
  }
  return blockBufferOut;
}

void httppackage_SetMessageData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 16);
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (v4)
    CFRelease(v4);
}

uint64_t httppackage_GetMessageType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t httppackage_SetMessageType(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t httppackage_GetReplyToken()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return *(unsigned int *)(*(_QWORD *)(DerivedStorage + 24) + 9688) | (*(_QWORD *)(*(_QWORD *)(DerivedStorage + 24)
                                                                                   + 9680) << 32);
}

uint64_t httppackage_SetReplyToken(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(result + 24);
  *(_QWORD *)(v4 + 9680) = HIDWORD(a2);
  *(_QWORD *)(v4 + 9688) = a2;
  return result;
}

uint64_t httppackage_GetErrorFromHeader()
{
  int v0;
  unsigned int v1;
  unsigned int v2;

  v0 = *(_DWORD *)(*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24) + 8456);
  v1 = v0 - 200;
  v2 = v0 + 200000;
  if (v1 >= 0x64)
    return v2;
  else
    return 0;
}

uint64_t httppackage_SetGroupID(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t httppackage_GetGroupID()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 32);
  if (!result)
  {
    result = *(_QWORD *)(DerivedStorage + 24);
    if (result)
    {
      HTTPMessageGetHeaderField();
      return 0;
    }
  }
  return result;
}

uint64_t httppackage_SetPackageType(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t httppackage_GetPackageType()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 40);
}

uint64_t httppackage_SetReplyStatus(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t httppackage_GetReplyStatus()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 48);
}

uint64_t httppackage_SetReplySequenceNumber(uint64_t a1, int a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(result + 44) = a2;
  return result;
}

uint64_t httppackage_GetReplySequenceNumber()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 44);
}

BOOL httppackage_matchIncomingMessageMethodAndURL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL8 result;
  BOOL v12;

  v7 = strncmpx();
  v8 = strncmp_prefix();
  v9 = strncmpx();
  v10 = strncmp_prefix();
  if (v7)
  {
    if (v8)
      return 0;
    return *a6 == 0;
  }
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  result = v12;
  if (!v12 && !v8)
    return *a6 == 0;
  return result;
}

uint64_t APTransportConnectionGetClassID()
{
  if (APTransportConnectionGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APTransportConnectionGetClassID_sRegisterOnce, &APTransportConnectionGetClassID_sClassID, (dispatch_function_t)connection_getClassID);
  return APTransportConnectionGetClassID_sClassID;
}

uint64_t connection_getClassID()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t APTransportConnectionGetTypeID()
{
  if (APTransportConnectionGetClassID_sRegisterOnce != -1)
    dispatch_once_f(&APTransportConnectionGetClassID_sRegisterOnce, &APTransportConnectionGetClassID_sClassID, (dispatch_function_t)connection_getClassID);
  return CMBaseClassGetCFTypeID();
}

const __CFString *APTransportConnectionGetStallStateString(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("Stalled");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return CFSTR("NotStalled");
}

uint64_t APTransportConnectionGetStatusString(unsigned int a1)
{
  if (a1 > 6)
    return 0;
  else
    return (uint64_t)*(&off_1E8259BE8 + (int)a1);
}

uint64_t APTransportConnectionGetTrafficClassForSocketQoS(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 200;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
    case 11:
      result = 700;
      break;
    case 2:
    case 10:
      result = 800;
      break;
    case 9:
      result = 500;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void *APTransportConnectionCopyNWContextForType(int a1)
{
  uint64_t v1;
  void *v3;

  switch(a1)
  {
    case 1:
      if (APTransportConnectionCopyNWContextForType_sAPTNWContextBufferedAudioOnce != -1)
        dispatch_once(&APTransportConnectionCopyNWContextForType_sAPTNWContextBufferedAudioOnce, &__block_literal_global_142);
      v3 = (void *)APTransportConnectionCopyNWContextForType_sAPTNWContextBufferedAudio;
      break;
    case 2:
      if (APTransportConnectionCopyNWContextForType_sAPTNWContextLowLatencyOnce != -1)
        dispatch_once(&APTransportConnectionCopyNWContextForType_sAPTNWContextLowLatencyOnce, &__block_literal_global_145);
      v3 = (void *)APTransportConnectionCopyNWContextForType_sAPTNWContextLowLatency;
      break;
    case 3:
      v1 = nw_context_create();
      nw_context_set_isolate_protocol_stack();
      nw_context_set_scheduling_mode();
      nw_context_activate();
      return (void *)v1;
    default:
      if (APTransportConnectionCopyNWContextForType_sAPTNWContextDefaultOnce != -1)
        dispatch_once(&APTransportConnectionCopyNWContextForType_sAPTNWContextDefaultOnce, &__block_literal_global_15);
      v3 = (void *)APTransportConnectionCopyNWContextForType_sAPTNWContextDefault;
      break;
  }
  return nw_retain(v3);
}

uint64_t APTransportConnectionGetSharedSelfSignedIdentity()
{
  if (APTransportConnectionGetSharedSelfSignedIdentity_sIdentityOnce != -1)
    dispatch_once_f(&APTransportConnectionGetSharedSelfSignedIdentity_sIdentityOnce, &APTransportConnectionGetSharedSelfSignedIdentity_sIdentity, (dispatch_function_t)transportConnection_createSelfSignedIdentity);
  return APTransportConnectionGetSharedSelfSignedIdentity_sIdentity;
}

void transportConnection_createSelfSignedIdentity(void **a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  SecKeyRef RandomKey;
  SecKeyRef v6;
  CFMutableArrayRef v7;
  CFMutableDictionaryRef v8;
  const void *SelfSignedCertificate;
  __SecIdentity *v10;
  __SecIdentity *v11;
  sec_identity_t v12;
  sec_identity_t v13;

  if (!a1
    || (v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
  {
    APSLogErrorAt();
LABEL_22:
    v13 = 0;
    goto LABEL_19;
  }
  v4 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CD6A38], (const void *)*MEMORY[0x1E0CD6A50]);
  if (CFDictionarySetInt64() || (RandomKey = SecKeyCreateRandomKey(v4, 0)) == 0)
  {
    APSLogErrorAt();
    CFRelease(v4);
    goto LABEL_22;
  }
  v6 = RandomKey;
  v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  if (!v7)
  {
    APSLogErrorAt();
    v8 = 0;
LABEL_25:
    SelfSignedCertificate = 0;
LABEL_27:
    v11 = 0;
    goto LABEL_29;
  }
  v8 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (CFDictionarySetInt64())
  {
    APSLogErrorAt();
    goto LABEL_25;
  }
  SelfSignedCertificate = (const void *)SecGenerateSelfSignedCertificate();
  if (!SelfSignedCertificate)
  {
    APSLogErrorAt();
    goto LABEL_27;
  }
  v10 = (__SecIdentity *)SecIdentityCreate();
  v11 = v10;
  if (v10)
  {
    v12 = sec_identity_create(v10);
    v13 = v12;
    if (v12)
      *a1 = sec_retain(v12);
    else
      APSLogErrorAt();
    goto LABEL_11;
  }
  APSLogErrorAt();
LABEL_29:
  v13 = 0;
LABEL_11:
  CFRelease(v4);
  CFRelease(v6);
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  if (SelfSignedCertificate)
    CFRelease(SelfSignedCertificate);
  if (v11)
    CFRelease(v11);
LABEL_19:
  sec_release(v13);
}

uint64_t APTransportConnectionSendBatchSlow(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  const void *v8;
  CFTypeID v9;
  uint64_t (*v10)(uint64_t, const void *);
  uint64_t v11;
  uint64_t v12;

  if (!a1)
  {
    v12 = 4294894974;
LABEL_12:
    APSLogErrorAt();
    return v12;
  }
  if (!theArray)
  {
    v12 = 4294894974;
    goto LABEL_12;
  }
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v5 = Count;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
      if (!ValueAtIndex || (v8 = ValueAtIndex, v9 = CFGetTypeID(ValueAtIndex), v9 != APTransportPackageGetTypeID()))
      {
        v12 = 4294894974;
        goto LABEL_12;
      }
      v10 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v10)
      {
        v12 = 4294954514;
        goto LABEL_12;
      }
      v11 = v10(a1, v8);
      if ((_DWORD)v11)
        break;
      if (v5 == ++v6)
        return 0;
    }
    v12 = v11;
    goto LABEL_12;
  }
  return 0;
}

CFStringRef connection_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APTransportConnection %p]"), a1);
}

CFStringRef carPlayHelperSession_copyFormattingDesc(uint64_t a1)
{
  _BYTE *DerivedStorage;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = "[Session/WiFi/USB]";
  if (!DerivedStorage[104])
    v3 = "[Session/USB]";
  v4 = "[Session/WiFi]";
  if (!DerivedStorage[104])
    v4 = "<Invalid>";
  if (!DerivedStorage[64])
    v3 = v4;
  v5 = "[Bonjour/USB]";
  v6 = "[Bonjour/WiFi]";
  if (DerivedStorage[104])
    v5 = "[Bonjour/WiFi/USB]";
  else
    v6 = "<Invalid>";
  if (DerivedStorage[64])
    v7 = v5;
  else
    v7 = v6;
  if (DerivedStorage[160])
    v8 = v3;
  else
    v8 = v7;
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[APCarPlayHelperSession %p] - %s"), a1, v8);
}

uint64_t APCarPlayHelperSessionCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  dispatch_semaphore_t v11;
  dispatch_queue_t v12;
  dispatch_queue_t v13;
  dispatch_group_t v14;
  const void *SharedHelper;
  CFTypeRef v16;
  CFMutableDictionaryRef Mutable;
  const void *Value;
  const void *v19;
  uint64_t v20;
  unsigned int v23;

  if (APCarPlayHelperSessionGetClassID_sRegisterOnce != -1)
    dispatch_once(&APCarPlayHelperSessionGetClassID_sRegisterOnce, &__block_literal_global_16);
  v23 = CMDerivedObjectCreate();
  if (v23)
    goto LABEL_39;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = dispatch_semaphore_create(0);
  *(_QWORD *)(DerivedStorage + 8) = v11;
  if (!v11
    || (v12 = dispatch_queue_create("APCarPlayHelperSessionInternalQueue", 0),
        (*(_QWORD *)(DerivedStorage + 16) = v12) == 0)
    || (v13 = dispatch_queue_create("APCarPlayHelperSessionEventQueue", 0),
        (*(_QWORD *)(DerivedStorage + 24) = v13) == 0)
    || (v14 = dispatch_group_create(), (*(_QWORD *)(DerivedStorage + 216) = v14) == 0))
  {
    APSLogErrorAt();
    return -12786;
  }
  *(_QWORD *)(DerivedStorage + 224) = a2;
  *(_QWORD *)(DerivedStorage + 232) = a3;
  if (!a2)
  {
LABEL_38:
    APSLogErrorAt();
    return -12780;
  }
  SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
  if (!SharedHelper)
  {
    *(_QWORD *)(DerivedStorage + 40) = 0;
    goto LABEL_31;
  }
  v16 = CFRetain(SharedHelper);
  *(_QWORD *)(DerivedStorage + 40) = v16;
  if (!v16)
  {
LABEL_31:
    APSLogErrorAt();
    return -6728;
  }
  v23 = APConnectivityHelperRegisterEventHandler((uint64_t)v16, 0, (uint64_t)carPlayHelperSession_handleConnectivityHelperEvent);
  if (v23)
  {
LABEL_39:
    APSLogErrorAt();
    return v23;
  }
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 152) = Mutable;
  if (!Mutable)
  {
    APSLogErrorAt();
    return -72200;
  }
  if (GetSharedCarSession_once != -1)
    dispatch_once(&GetSharedCarSession_once, &__block_literal_global_149);
  objc_msgSend((id)GetSharedCarSession_session, "addCarPlayHelper:", 0);
  if (a4)
  {
    Value = CFDictionaryGetValue(a4, CFSTR("powerAssertion"));
    *(_QWORD *)(DerivedStorage + 32) = Value;
    if (Value)
      CFRetain(Value);
    v19 = CFDictionaryGetValue(a4, CFSTR("eventRecorder"));
    *(_QWORD *)(DerivedStorage + 256) = v19;
    if (v19)
      CFRetain(v19);
    *(_BYTE *)(DerivedStorage + 64) = CFDictionaryGetInt64Ranged() & 1;
    *(_BYTE *)(DerivedStorage + 104) = (CFDictionaryGetInt64Ranged() & 2) != 0;
    *(_BYTE *)(DerivedStorage + 160) = CFDictionaryGetInt64() != 0;
  }
  if (!*(_BYTE *)(DerivedStorage + 64) && !*(_BYTE *)(DerivedStorage + 104))
    goto LABEL_38;
  CFPrefs_GetDouble();
  *(_QWORD *)(DerivedStorage + 56) = v20;
  if (*(_BYTE *)(DerivedStorage + 160))
  {
    if (GetSharedCarSession_once != -1)
      dispatch_once(&GetSharedCarSession_once, &__block_literal_global_149);
    objc_msgSend((id)GetSharedCarSession_session, "registerSessionRequestHandlerMachService");
  }
  if (gLogCategory_APBrowserCarSessionHelper <= 90
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  *a5 = 0;
  return v23;
}

void carPlayHelperSession_handleConnectivityHelperEvent(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD block[8];
  int v10;
  _QWORD v11[3];
  int v12;

  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v12 = 0;
  if (a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFRetain(a4);
    if (a3)
      CFRetain(a3);
    v8 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperSession_handleConnectivityHelperEvent_block_invoke;
    block[3] = &unk_1E8259E78;
    v10 = a2;
    block[4] = v11;
    block[5] = a4;
    block[6] = a3;
    block[7] = DerivedStorage;
    dispatch_async(v8, block);
  }
  _Block_object_dispose(v11, 8);
}

void sub_1C93ED404(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void carPlayHelperSession_connectivityHelperCheckIfWiFiUUIDChanged()
{
  uint64_t DerivedStorage;
  int v1;
  CFTypeRef v2;
  BOOL v3;
  const void *TypedValue;
  const void *v5;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = APConnectivityHelperCopyCurrentWiFiNetworkInfo(*(dispatch_queue_t **)(DerivedStorage + 40), &cf);
  v2 = cf;
  if (v1)
    v3 = 1;
  else
    v3 = cf == 0;
  if (!v3)
  {
    CFStringGetTypeID();
    TypedValue = (const void *)CFDictionaryGetTypedValue();
    if (FigCFEqual())
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 50
        && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 50
        && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v5 = *(const void **)(DerivedStorage + 128);
      *(_QWORD *)(DerivedStorage + 128) = TypedValue;
      if (TypedValue)
        CFRetain(TypedValue);
      if (v5)
        CFRelease(v5);
      *(CFAbsoluteTime *)(DerivedStorage + 112) = CFAbsoluteTimeGetCurrent();
    }
    v2 = cf;
  }
  if (v2)
    CFRelease(v2);
}

uint64_t carPlayHelperSession_updateNetworkAndSessionState(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void *v4;
  const __CFArray *Value;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  const __CFArray *v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  void *v15;
  const char *v16;
  const __CFArray *v17;
  const char *v18;
  void *v19;
  void *v20;
  const __CFArray *v21;
  double v22;
  double v23;
  uint64_t v24;
  int v25;
  void *v26;
  const char *v27;
  void *v28;
  void *v29;
  int v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  const __CFArray *v34;
  const char *v35;
  const void *v36;
  const __CFArray *v37;
  int v38;
  const void *v39;
  double v40;
  double v41;
  uint64_t v42;
  const __CFArray *v43;
  char *v44;
  size_t v45;
  const char *v46;
  const char *v47;
  const __CFArray *v48;
  const char *v49;
  const char *v50;
  const void *v51;
  void *v52;
  void *v53;
  int v54;
  int v55;
  const char *v56;
  const char *v57;
  const char *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  const char *v69;
  const void *v70;
  const __CFAllocator *v71;
  __CFDictionary *Mutable;
  __CFDictionary *v73;
  const void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t i;
  void *v80;
  uint64_t v81;
  const void *v82;
  __CFDictionary *v83;
  const __CFAllocator *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *v91;
  const __CFAllocator *v92;
  const void *v93;
  const __CFAllocator *v94;
  uint64_t v95;
  uint64_t v96;
  const __CFAllocator *v97;
  __CFDictionary *v98;
  __CFDictionary *v99;
  uint64_t v100;
  const void *v101;
  const char *v102;
  const void *v103;
  const char *v104;
  char *v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  char *v109;
  const char *v110;
  int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  int v118;
  CFTypeRef v119;
  CFTypeRef cf;
  _BYTE v121[128];
  char v122[32];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char __str[16];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  *(_OWORD *)__str = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  memset(v122, 0, sizeof(v122));
  v119 = 0;
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 160))
  {
    if (*(_BYTE *)(DerivedStorage + 104))
    {
      if (*(_QWORD *)(DerivedStorage + 120))
      {
        if (FigCFEqual())
        {
          if (*(double *)(v3 + 184) - *(double *)(v3 + 112) > -*(double *)(v3 + 56))
          {
            v4 = *(void **)(v3 + 168);
            if (v4)
            {
              if (objc_msgSend(v4, "wirelessIPv6Addresses"))
              {
                if (objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "wirelessIPv6Addresses"), "count"))
                {
                  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120)))
                  {
                    Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120));
                    if (CFArrayGetCount(Value))
                    {
                      v6 = 1;
                      goto LABEL_55;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (gLogCategory_APBrowserCarSessionHelper <= 50
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      if (!*(_BYTE *)(v3 + 104))
      {
        v6 = 0;
        strcpy(__str, "<disabled>");
        goto LABEL_55;
      }
      if (!*(_QWORD *)(v3 + 120))
      {
        v6 = 0;
        strcpy(__str, "No Network SSID");
        goto LABEL_55;
      }
      v7 = FigCFEqual();
      if (v7)
      {
        v8 = 0;
        v9 = 0;
      }
      else
      {
        v8 = snprintf(__str, 0x80uLL, "%sUUID Mismatch", "");
        v9 = 1;
      }
      if (*(double *)(v3 + 184) - *(double *)(v3 + 112) <= -*(double *)(v3 + 56))
      {
        v14 = "";
        if (!v7)
          v14 = ", ";
        v8 += snprintf(&__str[v8], 128 - v8, "%sSession Start Timeout", v14);
        v9 = 1;
      }
      v15 = *(void **)(v3 + 168);
      if (!v15
        || !objc_msgSend(v15, "wirelessIPv6Addresses")
        || !objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "wirelessIPv6Addresses"), "count"))
      {
        v16 = ", ";
        if (!v9)
          v16 = "";
        v8 += snprintf(&__str[v8], 128 - v8, "%sNo Remote IP", v16);
        v9 = 1;
      }
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120))
        || (v17 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120)),
            !CFArrayGetCount(v17)))
      {
        v18 = ", ";
        if (!v9)
          v18 = "";
        snprintf(&__str[v8], 128 - v8, "%sNo Local IP", v18);
      }
    }
    v6 = 0;
LABEL_55:
    if (!*(_BYTE *)(v3 + 64)
      || !*(_QWORD *)(v3 + 80)
      || (v19 = *(void **)(v3 + 168)) == 0
      || (*(_BYTE *)(v3 + 88) & 0x10) == 0
      && (!objc_msgSend(v19, "isWiredCarPlaySimulator") || (*(_BYTE *)(v3 + 88) & 8) == 0)
      || *(double *)(v3 + 184) - *(double *)(v3 + 72) <= -*(double *)(v3 + 56)
      || (v20 = *(void **)(v3 + 168)) == 0
      || !objc_msgSend(v20, "wiredIPv6Addresses")
      || !objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "wiredIPv6Addresses"), "count")
      || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80))
      || (v21 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80)),
          !CFArrayGetCount(v21)))
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 50)
      {
        if (gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
          goto LABEL_136;
        if (*(_BYTE *)(v3 + 64))
        {
          if (*(_QWORD *)(v3 + 80))
          {
            v22 = *(double *)(v3 + 184) - *(double *)(v3 + 72);
            v23 = -*(double *)(v3 + 56);
            if (v22 <= v23)
            {
              v24 = snprintf(v122, 0x80uLL, "%sSession Start Timeout", "");
              v25 = 1;
            }
            else
            {
              v24 = 0;
              v25 = 0;
            }
            v26 = *(void **)(v3 + 168);
            if (!v26
              || !objc_msgSend(v26, "wiredIPv6Addresses")
              || !objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "wiredIPv6Addresses"), "count"))
            {
              v27 = ", ";
              if (v22 > v23)
                v27 = "";
              v24 += snprintf(&v122[v24], 128 - v24, "%sNo Remote IP", v27);
              v25 = 1;
            }
            v28 = *(void **)(v3 + 168);
            if (!v28
              || (*(_BYTE *)(v3 + 88) & 0x10) != 0
              || objc_msgSend(v28, "isWiredCarPlaySimulator") && (*(_BYTE *)(v3 + 88) & 8) != 0)
            {
              goto LABEL_131;
            }
            v29 = *(void **)(v3 + 168);
            if (!v29)
              goto LABEL_131;
            v30 = objc_msgSend(v29, "isWiredCarPlaySimulator");
            v31 = *(unsigned int *)(v3 + 88);
            if (v30)
            {
              if ((v31 & 8) == 0)
              {
                v32 = "%sUSB transport type mismatch:%d, Sim:Yes";
LABEL_128:
                v47 = ", ";
                if (!v25)
                  v47 = "";
                v24 += snprintf(&v122[v24], 128 - v24, v32, v47, v31);
                v25 = 1;
              }
            }
            else if ((v31 & 8) != 0)
            {
              v32 = "%sUSB transport type mismatch:%d, Sim:No";
              goto LABEL_128;
            }
LABEL_131:
            if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80)))
            {
              v48 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80));
              if (CFArrayGetCount(v48))
                goto LABEL_136;
            }
            v44 = &v122[v24];
            v45 = 128 - v24;
            v46 = ", ";
            if (!v25)
              v46 = "";
            goto LABEL_135;
          }
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      goto LABEL_114;
    }
    goto LABEL_107;
  }
  if (!*(_BYTE *)(DerivedStorage + 104)
    || !*(_QWORD *)(DerivedStorage + 120)
    || !FigCFEqual()
    || *(double *)(v3 + 144) - *(double *)(v3 + 112) <= -*(double *)(v3 + 56)
    || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120))
    || (v10 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120)),
        !CFArrayGetCount(v10)))
  {
    if (gLogCategory_APBrowserCarSessionHelper <= 50
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      if (!*(_BYTE *)(v3 + 104))
      {
        v6 = 0;
        strcpy(__str, "<disabled>");
        goto LABEL_102;
      }
      if (!*(_QWORD *)(v3 + 120))
      {
        v6 = 0;
        strcpy(__str, "No Network SSID");
        goto LABEL_102;
      }
      v11 = FigCFEqual();
      if (v11)
      {
        v12 = 0;
        v13 = 0;
      }
      else
      {
        v12 = snprintf(__str, 0x80uLL, "%sUUID Mismatch", "");
        v13 = 1;
      }
      if (*(double *)(v3 + 144) - *(double *)(v3 + 112) <= -*(double *)(v3 + 56))
      {
        v33 = "";
        if (!v11)
          v33 = ", ";
        v12 += snprintf(&__str[v12], 128 - v12, "%sSession Start Timeout", v33);
        v13 = 1;
      }
      if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120))
        || (v34 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 120)),
            !CFArrayGetCount(v34)))
      {
        v35 = ", ";
        if (!v13)
          v35 = "";
        snprintf(&__str[v12], 128 - v12, "%sNo Local IP", v35);
      }
    }
    v6 = 0;
    goto LABEL_102;
  }
  v6 = 1;
LABEL_102:
  if (!*(_BYTE *)(v3 + 64)
    || (v36 = *(const void **)(v3 + 80)) == 0
    || *(double *)(v3 + 96) - *(double *)(v3 + 72) <= -*(double *)(v3 + 56)
    || !CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), v36)
    || (v37 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80)),
        !CFArrayGetCount(v37)))
  {
    if (gLogCategory_APBrowserCarSessionHelper <= 50)
    {
      if (gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
        goto LABEL_136;
      if (*(_BYTE *)(v3 + 64))
      {
        v39 = *(const void **)(v3 + 80);
        if (v39)
        {
          v40 = *(double *)(v3 + 96) - *(double *)(v3 + 72);
          v41 = -*(double *)(v3 + 56);
          if (v40 <= v41)
          {
            v42 = snprintf(v122, 0x80uLL, "%sSession Start Timeout", "");
            v39 = *(const void **)(v3 + 80);
          }
          else
          {
            v42 = 0;
          }
          if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v3 + 152), v39))
          {
            v43 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 152), *(const void **)(v3 + 80));
            if (CFArrayGetCount(v43))
              goto LABEL_136;
          }
          v44 = &v122[v42];
          v45 = 128 - v42;
          v46 = ", ";
          if (v40 > v41)
            v46 = "";
LABEL_135:
          snprintf(v44, v45, "%sNo Local IP", v46);
          goto LABEL_136;
        }
LABEL_117:
        strcpy(v122, "No Network Interface");
        goto LABEL_136;
      }
LABEL_116:
      strcpy(v122, "<disabled>");
LABEL_136:
      v38 = 1;
      goto LABEL_137;
    }
LABEL_114:
    if ((v6 & 1) != 0)
    {
LABEL_144:
      v51 = *(const void **)(v3 + 120);
      CFRetain(v51);
      v52 = *(void **)(v3 + 168);
      if (v52)
        v53 = (void *)objc_msgSend(v52, "wirelessIPv6Addresses");
      else
        v53 = 0;
      v54 = 2;
      v55 = 1;
      goto LABEL_175;
    }
LABEL_170:
    v55 = 0;
    v54 = 0;
    v53 = 0;
    v51 = 0;
    goto LABEL_175;
  }
LABEL_107:
  v38 = 0;
LABEL_137:
  if (gLogCategory_APBrowserCarSessionHelper <= 50
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    if (*(_BYTE *)(v3 + 160))
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v49 = "[Session/WiFi/USB]";
        v50 = "[Session/USB]";
        goto LABEL_150;
      }
      if (*(_BYTE *)(v3 + 104))
      {
        v56 = "[Session/WiFi]";
        goto LABEL_153;
      }
    }
    else
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v49 = "[Bonjour/WiFi/USB]";
        v50 = "[Bonjour/USB]";
LABEL_150:
        if (*(_BYTE *)(v3 + 104))
          v56 = v49;
        else
          v56 = v50;
        goto LABEL_153;
      }
      if (*(_BYTE *)(v3 + 104))
      {
        v56 = "[Bonjour/WiFi]";
        goto LABEL_153;
      }
    }
    v56 = "<Invalid>";
LABEL_153:
    v57 = "";
    v58 = " (";
    if (v38)
      v59 = " (";
    else
      v59 = "";
    if (v38)
      v60 = ")";
    else
      v60 = "";
    if (v38)
      v61 = 78;
    else
      v61 = 89;
    if (v6)
      v58 = "";
    else
      v57 = ")";
    v101 = a1;
    v102 = v56;
    v109 = v122;
    v110 = v60;
    v107 = v61;
    v108 = v59;
    if (v6)
      v62 = 89;
    else
      v62 = 78;
    v105 = __str;
    v106 = v57;
    v103 = (const void *)v62;
    v104 = v58;
    LogPrintF();
    if ((v6 & 1) != 0)
      goto LABEL_144;
    goto LABEL_169;
  }
  if (v6)
    goto LABEL_144;
LABEL_169:
  if ((v38 & 1) != 0)
    goto LABEL_170;
  v51 = *(const void **)(v3 + 80);
  CFRetain(v51);
  v63 = *(void **)(v3 + 168);
  if (v63)
  {
    v53 = (void *)objc_msgSend(v63, "wiredIPv6Addresses");
    v55 = 0;
  }
  else
  {
    v55 = 0;
    v53 = 0;
  }
  v54 = 1;
LABEL_175:
  if (!FigCFEqual())
  {
    if (gLogCategory_APBrowserCarSessionHelper > 30
      || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_204;
    }
    if (*(_BYTE *)(v3 + 160))
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v66 = "[Session/WiFi/USB]";
        v67 = "[Session/USB]";
        goto LABEL_200;
      }
      if (*(_BYTE *)(v3 + 104))
      {
        v69 = "[Session/WiFi]";
LABEL_203:
        v102 = v69;
        v103 = v51;
        v101 = a1;
        LogPrintF();
LABEL_204:
        v70 = *(const void **)(v3 + 208);
        *(_QWORD *)(v3 + 208) = v51;
        if (v51)
          CFRetain(v51);
        if (v70)
          CFRelease(v70);
        v71 = CFGetAllocator(a1);
        Mutable = CFDictionaryCreateMutable(v71, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
        {
          APSLogErrorAt();
          v82 = 0;
LABEL_327:
          v83 = 0;
LABEL_332:
          v81 = 4294954510;
          goto LABEL_231;
        }
        v73 = Mutable;
        v74 = *(const void **)(v3 + 208);
        if (v74)
          CFDictionarySetValue(Mutable, CFSTR("interfaceName"), v74);
        if (*(_BYTE *)(v3 + 248) && *(_QWORD *)(v3 + 208))
        {
          CFDictionarySetValue(v73, CFSTR("setUpForOSTransaction"), (const void *)*MEMORY[0x1E0C9AE50]);
          CFDictionarySetInt64();
        }
        else
        {
          *(_BYTE *)(v3 + 248) = 0;
        }
        carPlayHelperSession_dispatchEvent(a1, 0, v73);
        CFRelease(v73);
        goto LABEL_216;
      }
    }
    else
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v66 = "[Bonjour/WiFi/USB]";
        v67 = "[Bonjour/USB]";
LABEL_200:
        if (*(_BYTE *)(v3 + 104))
          v69 = v66;
        else
          v69 = v67;
        goto LABEL_203;
      }
      if (*(_BYTE *)(v3 + 104))
      {
        v69 = "[Bonjour/WiFi]";
        goto LABEL_203;
      }
    }
    v69 = "<Invalid>";
    goto LABEL_203;
  }
  if (gLogCategory_APBrowserCarSessionHelper <= 30
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    if (*(_BYTE *)(v3 + 160))
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v64 = "[Session/WiFi/USB]";
        v65 = "[Session/USB]";
        goto LABEL_190;
      }
      if (*(_BYTE *)(v3 + 104))
      {
        v68 = "[Session/WiFi]";
LABEL_193:
        v103 = *(const void **)(v3 + 208);
        v104 = (const char *)v51;
        v101 = a1;
        v102 = v68;
        LogPrintF();
        goto LABEL_216;
      }
    }
    else
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v64 = "[Bonjour/WiFi/USB]";
        v65 = "[Bonjour/USB]";
LABEL_190:
        if (*(_BYTE *)(v3 + 104))
          v68 = v64;
        else
          v68 = v65;
        goto LABEL_193;
      }
      if (*(_BYTE *)(v3 + 104))
      {
        v68 = "[Bonjour/WiFi]";
        goto LABEL_193;
      }
    }
    v68 = "<Invalid>";
    goto LABEL_193;
  }
LABEL_216:
  if (!*(_BYTE *)(v3 + 160) || !*(_QWORD *)(v3 + 208) || !*(_QWORD *)(v3 + 168))
  {
    v81 = 0;
    v82 = 0;
    v83 = 0;
    *(_QWORD *)(v3 + 200) = 0;
    goto LABEL_231;
  }
  v111 = v55;
  v116 = 0uLL;
  v118 = 0;
  v117 = 0;
  v75 = (void *)objc_msgSend(v53, "firstObject");
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v76 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v112, v121, 16);
  if (v76)
  {
    v77 = v76;
    v78 = *(_QWORD *)v113;
    while (2)
    {
      for (i = 0; i != v77; ++i)
      {
        if (*(_QWORD *)v113 != v78)
          objc_enumerationMutation(v53);
        v80 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * i);
        objc_msgSend(v80, "cStringUsingEncoding:", 4, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110);
        StringToSockAddr();
        if (BYTE1(v116) == 30 && BYTE8(v116) == 254 && (BYTE9(v116) & 0xC0) == 0x80)
        {
          v75 = v80;
          goto LABEL_243;
        }
      }
      v77 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v112, v121, 16);
      if (v77)
        continue;
      break;
    }
  }
LABEL_243:
  if (!v75)
  {
    v81 = 0;
    v82 = 0;
    v83 = 0;
    goto LABEL_231;
  }
  v82 = (const void *)APSFeaturesCreateMutable();
  if (!v82)
  {
    APSLogErrorAt();
    goto LABEL_327;
  }
  APSFeaturesSetFeature();
  APSFeaturesSetFeature();
  APSFeaturesSetFeature();
  APSFeaturesSetFeature();
  APSFeaturesSetFeature();
  if (!objc_msgSend(*(id *)(v3 + 168), "supportsMutualAuthentication"))
  {
    if (gLogCategory_APBrowserCarSessionHelper > 30
      || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
    {
      goto LABEL_281;
    }
    if (*(_BYTE *)(v3 + 160))
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v88 = "[Session/WiFi/USB]";
        v89 = "[Session/USB]";
        goto LABEL_277;
      }
      if (*(_BYTE *)(v3 + 104))
      {
        v90 = "[Session/WiFi]";
LABEL_280:
        v101 = a1;
        v102 = v90;
        LogPrintF();
LABEL_281:
        APSFeaturesSetFeature();
        v83 = 0;
        goto LABEL_288;
      }
    }
    else
    {
      if (*(_BYTE *)(v3 + 64))
      {
        v88 = "[Bonjour/WiFi/USB]";
        v89 = "[Bonjour/USB]";
LABEL_277:
        if (*(_BYTE *)(v3 + 104))
          v90 = v88;
        else
          v90 = v89;
        goto LABEL_280;
      }
      if (*(_BYTE *)(v3 + 104))
      {
        v90 = "[Bonjour/WiFi]";
        goto LABEL_280;
      }
    }
    v90 = "<Invalid>";
    goto LABEL_280;
  }
  APSFeaturesSetFeature();
  v85 = CFGetAllocator(a1);
  v83 = CFDictionaryCreateMutable(v85, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v83)
    goto LABEL_331;
  CFDictionarySetValue(v83, CFSTR("authenticationCertificateSerial"), (const void *)objc_msgSend(*(id *)(v3 + 168), "authenticationCertificateSerial"));
  if (gLogCategory_APBrowserCarSessionHelper > 30
    || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
  {
    goto LABEL_288;
  }
  if (!*(_BYTE *)(v3 + 160))
  {
    if (*(_BYTE *)(v3 + 64))
    {
      v86 = "[Bonjour/WiFi/USB]";
      v87 = "[Bonjour/USB]";
LABEL_284:
      if (*(_BYTE *)(v3 + 104))
        v91 = v86;
      else
        v91 = v87;
      goto LABEL_287;
    }
    if (*(_BYTE *)(v3 + 104))
    {
      v91 = "[Bonjour/WiFi]";
      goto LABEL_287;
    }
LABEL_324:
    v91 = "<Invalid>";
    goto LABEL_287;
  }
  if (*(_BYTE *)(v3 + 64))
  {
    v86 = "[Session/WiFi/USB]";
    v87 = "[Session/USB]";
    goto LABEL_284;
  }
  if (!*(_BYTE *)(v3 + 104))
    goto LABEL_324;
  v91 = "[Session/WiFi]";
LABEL_287:
  v102 = v91;
  v103 = v83;
  v101 = a1;
  LogPrintF();
LABEL_288:
  if (objc_msgSend(*(id *)(v3 + 168), "pairedVehicleIdentifier", v101, v102, v103))
  {
    if (!v83)
    {
      v92 = CFGetAllocator(a1);
      v83 = CFDictionaryCreateMutable(v92, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v83)
        goto LABEL_331;
    }
    CFDictionarySetValue(v83, CFSTR("pairedVehicleIdentifier"), (const void *)objc_msgSend((id)objc_msgSend(*(id *)(v3 + 168), "pairedVehicleIdentifier"), "UUIDString"));
    if (gLogCategory_APBrowserCarSessionHelper <= 30
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v93 = *(const void **)(v3 + 176);
  if (!v93)
    goto LABEL_303;
  if (!v83)
  {
    v94 = CFGetAllocator(a1);
    v83 = CFDictionaryCreateMutable(v94, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v83)
    {
      v93 = *(const void **)(v3 + 176);
      goto LABEL_299;
    }
LABEL_331:
    APSLogErrorAt();
    goto LABEL_332;
  }
LABEL_299:
  CFDictionarySetValue(v83, CFSTR("requestIdentifier"), v93);
  if (gLogCategory_APBrowserCarSessionHelper <= 30
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_303:
  v95 = APAdvertiserInfoCreate(*MEMORY[0x1E0C9AE00], &v119);
  if ((_DWORD)v95)
  {
    v81 = v95;
LABEL_330:
    APSLogErrorAt();
    goto LABEL_231;
  }
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, CFSTR("airPlayVersion"), 0, (const void *)objc_msgSend(*(id *)(v3 + 168), "sourceVersion"));
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, CFSTR("deviceID"), 0, (const void *)objc_msgSend(*(id *)(v3 + 168), "deviceIdentifier"));
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, CFSTR("deviceName"), 0, (const void *)objc_msgSend(*(id *)(v3 + 168), "displayName"));
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, CFSTR("featuresEx"), 0, v82);
  APAdvertiserInfoSetProperty((uint64_t)v119, 0, CFSTR("publicCUAirPlayPairingIdentity"), 0, (const void *)objc_msgSend(*(id *)(v3 + 168), "publicKey"));
  objc_msgSend(v75, "cStringUsingEncoding:", 4);
  StringToSockAddr();
  v96 = APSNetworkAddressCreateWithSocketAddr();
  if ((_DWORD)v96)
  {
    v81 = v96;
    goto LABEL_330;
  }
  objc_msgSend(*(id *)(v3 + 168), "port");
  APSNetworkAddressSetPort();
  APSNetworkAddressSetInterfaceName();
  if (gLogCategory_APBrowserCarSessionHelper <= 30
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v97 = CFGetAllocator(a1);
  v98 = CFDictionaryCreateMutable(v97, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v98)
    goto LABEL_331;
  v99 = v98;
  CFDictionarySetValue(v98, CFSTR("advertiserInfo"), v119);
  CFDictionarySetValue(v99, CFSTR("networkAddress"), cf);
  CFDictionarySetInt64();
  if (v83)
    CFDictionarySetValue(v99, CFSTR("sessionHostInfo"), v83);
  *(_DWORD *)(v3 + 192) = v54;
  v100 = 0;
  if (v111)
    v100 = *(_QWORD *)(v3 + 112);
  *(_QWORD *)(v3 + 200) = v100;
  carPlayHelperSession_dispatchEvent(a1, 1, v99);
  CFRelease(v99);
  v81 = 0;
LABEL_231:
  if (v51)
    CFRelease(v51);
  if (cf)
    CFRelease(cf);
  if (v82)
    CFRelease(v82);
  if (v119)
    CFRelease(v119);
  if (v83)
    CFRelease(v83);
  return v81;
}

uint64_t carPlayHelperSession_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 16);
  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperSession_invalidate_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = a1;
    block[6] = a1;
    dispatch_sync(v3, block);
  }
  return 0;
}

void carPlayHelperSession_finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD block[5];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage[2];
  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperSession_finalize_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = DerivedStorage;
    dispatch_sync(v3, block);
  }
  carPlayHelperSession_invalidate(a1);
  v4 = DerivedStorage[1];
  if (v4)
  {
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    v5 = DerivedStorage[1];
    if (v5)
    {
      dispatch_release(v5);
      DerivedStorage[1] = 0;
    }
  }
  v6 = DerivedStorage[2];
  if (v6)
  {
    dispatch_sync(v6, &__block_literal_global_122);
    v7 = DerivedStorage[2];
    if (v7)
    {
      dispatch_release(v7);
      DerivedStorage[2] = 0;
    }
  }
  v8 = DerivedStorage[3];
  if (v8)
  {
    dispatch_sync(v8, &__block_literal_global_123);
    v9 = DerivedStorage[3];
    if (v9)
    {
      dispatch_release(v9);
      DerivedStorage[3] = 0;
    }
  }
  v10 = (const void *)DerivedStorage[32];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[32] = 0;
  }
  v11 = (const void *)DerivedStorage[4];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[4] = 0;
  }
  v12 = (const void *)DerivedStorage[5];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[5] = 0;
  }
  v13 = (const void *)DerivedStorage[26];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[26] = 0;
  }
  v14 = (const void *)DerivedStorage[10];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[10] = 0;
  }
  v15 = (const void *)DerivedStorage[19];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[19] = 0;
  }
  v16 = (const void *)DerivedStorage[15];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[15] = 0;
  }
  v17 = (const void *)DerivedStorage[16];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[16] = 0;
  }
  v18 = (const void *)DerivedStorage[17];
  if (v18)
  {
    CFRelease(v18);
    DerivedStorage[17] = 0;
  }
  v19 = (void *)DerivedStorage[30];
  if (v19)
  {

    DerivedStorage[30] = 0;
  }
  v20 = DerivedStorage[27];
  if (v20)
  {
    dispatch_release(v20);
    DerivedStorage[27] = 0;
  }
  v21 = DerivedStorage[3];
  if (v21)
  {
    dispatch_release(v21);
    DerivedStorage[3] = 0;
  }
  v22 = DerivedStorage[2];
  if (v22)
  {
    dispatch_release(v22);
    DerivedStorage[2] = 0;
  }
  v23 = DerivedStorage[1];
  if (v23)
  {
    dispatch_release(v23);
    DerivedStorage[1] = 0;
  }
}

intptr_t __carPlayHelperSession_invalidate_block_invoke(intptr_t result)
{
  _QWORD *v1;
  uint64_t v2;
  const void *v3;
  uint64_t DerivedStorage;

  if (!**(_BYTE **)(result + 32))
  {
    v1 = (_QWORD *)result;
    if (GetSharedCarSession_once != -1)
      dispatch_once(&GetSharedCarSession_once, &__block_literal_global_149);
    objc_msgSend((id)GetSharedCarSession_session, "removeCarPlayHelper:", v1[5]);
    v2 = *(_QWORD *)(v1[4] + 40);
    if (v2)
      APConnectivityHelperRemoveAllRegistrations(v2, v1[6]);
    v3 = (const void *)v1[6];
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    carPlayHelperSession_dispatchEvent(v3, 3, 0);
    result = *(_QWORD *)(DerivedStorage + 8);
    if (result)
      result = dispatch_semaphore_signal((dispatch_semaphore_t)result);
    *(_BYTE *)v1[4] = 1;
  }
  return result;
}

void carPlayHelperSession_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[9];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(DerivedStorage + 224);
  if (v7)
  {
    v8 = DerivedStorage;
    v9 = *(_QWORD *)(DerivedStorage + 232);
    if (gLogCategory_APBrowserCarSessionHelper <= 20
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (a1)
      CFRetain(a1);
    if (a3)
      CFRetain(a3);
    v10 = *(NSObject **)(v8 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __carPlayHelperSession_dispatchEvent_block_invoke;
    block[3] = &__block_descriptor_76_e5_v8__0l;
    block[4] = v7;
    block[5] = a1;
    v12 = a2;
    block[6] = a3;
    block[7] = v9;
    block[8] = v8;
    dispatch_async(v10, block);
  }
}

void __carPlayHelperSession_dispatchEvent_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;
  const void *v5;

  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 240))
  {
    v2 = (void *)os_transaction_copy_description();
    if (gLogCategory_APBrowserCarSessionHelper <= 50
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    free(v2);
    v3 = *(void **)(*(_QWORD *)(a1 + 64) + 240);
    if (v3)
    {

      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 240) = 0;
    }
  }
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
}

uint64_t __carPlayHelperSession_finalize_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 224) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 232) = 0;
  return result;
}

void carPlayHelperSession_setInterfaceWatchingEnabled(const void *a1, char a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD v6[7];
  char v7;
  _QWORD v8[3];
  int v9;

  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v9 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    CFRetain(a1);
    v5 = *(NSObject **)(DerivedStorage + 16);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __carPlayHelperSession_setInterfaceWatchingEnabled_block_invoke;
    v6[3] = &unk_1E8259E50;
    v6[4] = v8;
    v6[5] = DerivedStorage;
    v7 = a2;
    v6[6] = a1;
    dispatch_async(v5, v6);
  }
  _Block_object_dispose(v8, 8);
}

void sub_1C93F0C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __carPlayHelperSession_setInterfaceWatchingEnabled_block_invoke(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD block[5];

  v2 = *(_BYTE **)(a1 + 40);
  if (*v2)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12785;
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 56);
    if (v2[48] != v3)
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 30)
      {
        if (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize())
          LogPrintF();
        v3 = *(unsigned __int8 *)(a1 + 56);
      }
      v4 = *(_QWORD *)(a1 + 40);
      if (v3)
      {
        if (*(_BYTE *)(v4 + 64))
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = APConnectivityHelperRegisterForEvent(*(_QWORD *)(v4 + 40), *(_QWORD *)(a1 + 48), 4);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
            goto LABEL_31;
          v4 = *(_QWORD *)(a1 + 40);
        }
        if (*(_BYTE *)(v4 + 104))
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = APConnectivityHelperRegisterForEvent(*(_QWORD *)(v4 + 40), *(_QWORD *)(a1 + 48), 3);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
            goto LABEL_31;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = APConnectivityHelperRegisterForEvent(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), *(_QWORD *)(a1 + 48), 9);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
            goto LABEL_31;
          v4 = *(_QWORD *)(a1 + 40);
        }
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = APConnectivityHelperRegisterForEvent(*(_QWORD *)(v4 + 40), *(_QWORD *)(a1 + 48), 6);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        {
LABEL_31:
          APSLogErrorAt();
          goto LABEL_24;
        }
      }
      else
      {
        v5 = APConnectivityHelperDeregisterForEvent(*(_QWORD *)(v4 + 40), *(_QWORD *)(a1 + 48), 6);
        v6 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v5;
        if (*(_BYTE *)(v6 + 64))
        {
          v7 = APConnectivityHelperDeregisterForEvent(*(_QWORD *)(v6 + 40), *(_QWORD *)(a1 + 48), 4);
          v8 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
          dispatch_group_enter(*(dispatch_group_t *)(v8 + 216));
          v6 = *(_QWORD *)(a1 + 40);
        }
        if (*(_BYTE *)(v6 + 104))
        {
          v9 = APConnectivityHelperDeregisterForEvent(*(_QWORD *)(v6 + 40), *(_QWORD *)(a1 + 48), 3);
          v10 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v9;
          v11 = APConnectivityHelperDeregisterForEvent(*(_QWORD *)(v10 + 40), *(_QWORD *)(a1 + 48), 9);
          v12 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v11;
          dispatch_group_enter(*(dispatch_group_t *)(v12 + 216));
          v6 = *(_QWORD *)(a1 + 40);
        }
        v13 = *(NSObject **)(v6 + 216);
        v14 = *(NSObject **)(v6 + 24);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __carPlayHelperSession_setInterfaceWatchingEnabled_block_invoke_2;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = *(_QWORD *)(a1 + 48);
        dispatch_group_notify(v13, v14, block);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 48) = *(_BYTE *)(a1 + 56);
    }
  }
LABEL_24:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
    && gLogCategory_APBrowserCarSessionHelper <= 90
    && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void __carPlayHelperSession_setInterfaceWatchingEnabled_block_invoke_2(uint64_t a1)
{
  carPlayHelperSession_dispatchEvent(*(const void **)(a1 + 32), 2, 0);
}

void __carPlayHelperSession_handleConnectivityHelperEvent_block_invoke(uint64_t a1)
{
  int v2;
  const void *v3;
  const __CFDictionary *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFString *Value;
  const __CFString *v8;
  _BOOL4 v9;
  int Int64;
  BOOL v11;
  const char *v12;
  const void *v13;
  const __CFDictionary *v14;
  uint64_t v15;
  const void *v16;
  const __CFArray *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const void *v21;
  NSObject *v22;
  const void *v23;
  uint64_t v24;
  const void *v25;
  const char *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const void *v34;
  const char *v35;
  const char *v36;
  const void *v37;
  const void *v38;
  const char *v39;
  const void *v40;
  const char *v41;
  const __CFString *v42;
  const char *v43;
  uint8_t buf[16];
  uint8_t v45[12];
  int updated;

  v2 = *(_DWORD *)(a1 + 64);
  switch(v2)
  {
    case 3:
    case 9:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = carPlayHelperSession_wifiNetworkChanged(*(const void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        goto LABEL_131;
      goto LABEL_107;
    case 4:
      v3 = *(const void **)(a1 + 40);
      v4 = *(const __CFDictionary **)(a1 + 48);
      updated = 0;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!v4)
        goto LABEL_135;
      v6 = DerivedStorage;
      Value = (const __CFString *)CFDictionaryGetValue(v4, CFSTR("networkInterfaceName"));
      v8 = Value;
      v9 = Value == 0;
      if (Value && CFStringHasPrefix(Value, CFSTR("anpi")))
      {
        if (gLogCategory_APBrowserCarSessionHelper <= 50
          && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        goto LABEL_106;
      }
      Int64 = CFDictionaryGetInt64();
      if (CFDictionaryGetInt64())
      {
        if (v8)
          v11 = *(_QWORD *)(v6 + 32) == 0;
        else
          v11 = 1;
        if (!v11)
        {
          APSPowerAssertionRaiseTemporary();
          v9 = 0;
          v12 = "Yes";
          goto LABEL_36;
        }
      }
      else
      {
        if (!FigCFEqual())
          goto LABEL_106;
        v8 = 0;
        v9 = 1;
      }
      v12 = "No";
LABEL_36:
      if (FigCFEqual())
        goto LABEL_106;
      if (gLogCategory_APBrowserCarSessionHelper > 50
        || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
      {
        goto LABEL_69;
      }
      if (*(_BYTE *)(v6 + 160))
      {
        if (*(_BYTE *)(v6 + 64))
        {
          v18 = "[Session/WiFi/USB]";
          v19 = "[Session/USB]";
          goto LABEL_65;
        }
        if (*(_BYTE *)(v6 + 104))
        {
          v26 = "[Session/WiFi]";
          goto LABEL_68;
        }
LABEL_118:
        v26 = "<Invalid>";
        goto LABEL_68;
      }
      if (!*(_BYTE *)(v6 + 64))
      {
        if (*(_BYTE *)(v6 + 104))
        {
          v26 = "[Bonjour/WiFi]";
          goto LABEL_68;
        }
        goto LABEL_118;
      }
      v18 = "[Bonjour/WiFi/USB]";
      v19 = "[Bonjour/USB]";
LABEL_65:
      if (*(_BYTE *)(v6 + 104))
        v26 = v18;
      else
        v26 = v19;
LABEL_68:
      v42 = v8;
      v43 = v12;
      v40 = v3;
      v41 = v26;
      LogPrintF();
LABEL_69:
      if (!*(_QWORD *)(v6 + 256))
      {
        v30 = *(const void **)(v6 + 80);
        *(_QWORD *)(v6 + 80) = v8;
        if (v9)
          goto LABEL_88;
LABEL_87:
        CFRetain(v8);
        goto LABEL_88;
      }
      v27 = MEMORY[0x1E0C81028];
      if (!v9)
      {
        APSEventRecorderRecordEvent();
        v31 = LogCategoryCopyOSLogHandle();
        v32 = (void *)v31;
        if (v31)
          v27 = v31;
        if (os_signpost_enabled(v27))
        {
          *(_WORD *)v45 = 0;
          _os_signpost_emit_with_name_impl(&dword_1C9382000, v27, OS_SIGNPOST_EVENT, 0x2B8D07FCuLL, "AP_SIGNPOST_CAR_USB_LINKUP", "", v45, 2u);
        }
        if (v32)

        v30 = *(const void **)(v6 + 80);
        *(_QWORD *)(v6 + 80) = v8;
        goto LABEL_87;
      }
      APSEventRecorderRecordEvent();
      v28 = LogCategoryCopyOSLogHandle();
      v29 = (void *)v28;
      if (v28)
        v27 = v28;
      if (os_signpost_enabled(v27))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1C9382000, v27, OS_SIGNPOST_EVENT, 0x2B8D08DCuLL, "AP_SIGNPOST_CAR_USB_LINKDOWN", "", buf, 2u);
      }
      if (v29)

      v30 = *(const void **)(v6 + 80);
      *(_QWORD *)(v6 + 80) = v8;
LABEL_88:
      if (v30)
        CFRelease(v30);
      if (v9)
      {
        *(_DWORD *)(v6 + 88) = 0;
        *(_QWORD *)(v6 + 72) = 0;
        v33 = *(void **)(v6 + 168);
        if (!v33 || *(_DWORD *)(v6 + 192) != 1)
          goto LABEL_101;

        *(_QWORD *)(v6 + 168) = 0;
        v34 = *(const void **)(v6 + 176);
        if (v34)
        {
          CFRelease(v34);
          *(_QWORD *)(v6 + 176) = 0;
        }
        *(_QWORD *)(v6 + 184) = 0;
        *(_DWORD *)(v6 + 192) = 0;
        if (gLogCategory_APBrowserCarSessionHelper > 50
          || gLogCategory_APBrowserCarSessionHelper == -1 && !_LogCategory_Initialize())
        {
          goto LABEL_101;
        }
        if (*(_BYTE *)(v6 + 160))
        {
          if (*(_BYTE *)(v6 + 64))
          {
            v35 = "[Session/WiFi/USB]";
            v36 = "[Session/USB]";
LABEL_126:
            if (*(_BYTE *)(v6 + 104))
              v39 = v35;
            else
              v39 = v36;
            v41 = "OSStatus carPlayHelperSession_usbInterfaceChanged(APCarPlayHelperRef, CFDictionaryRef)";
            v42 = (const __CFString *)v39;
            v40 = v3;
            LogPrintF();
            goto LABEL_101;
          }
          v35 = "[Session/WiFi]";
        }
        else
        {
          if (*(_BYTE *)(v6 + 64))
          {
            v35 = "[Bonjour/WiFi/USB]";
            v36 = "[Bonjour/USB]";
            goto LABEL_126;
          }
          v35 = "[Bonjour/WiFi]";
        }
        v36 = "<Invalid>";
        goto LABEL_126;
      }
      *(_DWORD *)(v6 + 88) = Int64;
      *(CFAbsoluteTime *)(v6 + 72) = CFAbsoluteTimeGetCurrent();
LABEL_101:
      if (!*(_BYTE *)(v6 + 160))
      {
        if (GetSharedCarSession_once != -1)
          dispatch_once(&GetSharedCarSession_once, &__block_literal_global_149);
        objc_msgSend((id)GetSharedCarSession_session, "checkCarPlayControlAdvertisingForUSB", v40, v41, v42, v43);
      }
      updated = carPlayHelperSession_updateNetworkAndSessionState(v3);
      if (updated)
LABEL_135:
        APSLogErrorAt();
LABEL_106:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        goto LABEL_131;
LABEL_107:
      v37 = *(const void **)(a1 + 40);
      if (v37)
        CFRelease(v37);
      v38 = *(const void **)(a1 + 48);
      if (v38)
        CFRelease(v38);
      return;
    case 5:
    case 7:
    case 8:
      goto LABEL_9;
    case 6:
      v13 = *(const void **)(a1 + 40);
      v14 = *(const __CFDictionary **)(a1 + 48);
      v15 = CMBaseObjectGetDerivedStorage();
      if (v14)
      {
        v16 = CFDictionaryGetValue(v14, CFSTR("networkInterfaceName"));
        v14 = (const __CFDictionary *)CFDictionaryGetValue(v14, CFSTR("IPv6Addresses"));
      }
      else
      {
        v16 = 0;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 152), v16, v14);
      if (*(double *)(v15 + 200) == 0.0
        || CFAbsoluteTimeGetCurrent() - *(double *)(v15 + 200) >= 2.0
        || (v17 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v15 + 152), *(const void **)(v15 + 120)),
            CFArrayGetCount(v17)))
      {
        if (gLogCategory_APBrowserCarSessionHelper <= 30
          && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (carPlayHelperSession_updateNetworkAndSessionState(v13))
          APSLogErrorAt();
      }
      else if (gLogCategory_APBrowserCarSessionHelper <= 50
             && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
LABEL_131:
        APSLogErrorAt();
      goto LABEL_107;
    default:
      if (v2 == 103)
      {
        if (gLogCategory_APBrowserCarSessionHelper <= 30
          && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v23 = *(const void **)(a1 + 40);
        v24 = CMBaseObjectGetDerivedStorage();
        v25 = *(const void **)(v24 + 120);
        if (v25)
        {
          CFRelease(v25);
          *(_QWORD *)(v24 + 120) = 0;
          carPlayHelperSession_wifiNetworkChanged(v23, 0);
        }
        v22 = *(NSObject **)(v24 + 216);
      }
      else
      {
        if (v2 != 104)
        {
LABEL_9:
          if (gLogCategory_APBrowserCarSessionHelper <= 30
            && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_107;
        }
        if (gLogCategory_APBrowserCarSessionHelper <= 30
          && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v20 = CMBaseObjectGetDerivedStorage();
        v21 = *(const void **)(v20 + 80);
        if (v21)
        {
          CFRelease(v21);
          *(_QWORD *)(v20 + 80) = 0;
          CMBaseObjectGetDerivedStorage();
          APSLogErrorAt();
        }
        v22 = *(NSObject **)(v20 + 216);
      }
      dispatch_group_leave(v22);
      goto LABEL_107;
  }
}

uint64_t carPlayHelperSession_wifiNetworkChanged(const void *a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v5;
  _BOOL4 v6;
  const void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  unsigned int updated;

  updated = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v5 = DerivedStorage;
    if (a2)
    {
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      CFStringGetTypeID();
      CFDictionaryGetTypedValue();
      FigCFDictionaryGetBooleanIfPresent();
      v6 = CFDictionaryGetInt64() != 0;
      updated = 0;
    }
    else
    {
      v6 = 0;
    }
    if (gLogCategory_APBrowserCarSessionHelper <= 50
      && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    if (v6)
    {
      if (gLogCategory_APBrowserCarSessionHelper <= 50
        && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
    }
    else
    {
      v7 = (const void *)*((_QWORD *)v5 + 15);
      if (v7)
      {
        CFRelease(v7);
        *((_QWORD *)v5 + 15) = 0;
        v8 = (const void *)*((_QWORD *)v5 + 16);
        if (v8)
        {
          CFRelease(v8);
          *((_QWORD *)v5 + 16) = 0;
        }
        *((CFAbsoluteTime *)v5 + 14) = CFAbsoluteTimeGetCurrent();
        v9 = (void *)*((_QWORD *)v5 + 21);
        if (v9 && *((_DWORD *)v5 + 48) == 2)
        {

          *((_QWORD *)v5 + 21) = 0;
          v10 = (const void *)*((_QWORD *)v5 + 22);
          if (v10)
          {
            CFRelease(v10);
            *((_QWORD *)v5 + 22) = 0;
          }
          *((_QWORD *)v5 + 23) = 0;
          *((_DWORD *)v5 + 48) = 0;
          if (gLogCategory_APBrowserCarSessionHelper <= 50
            && (gLogCategory_APBrowserCarSessionHelper != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
        }
        APConnectivityHelperDeregisterActivity(*((_QWORD *)v5 + 5), (uint64_t)a1, 0);
        updated = carPlayHelperSession_updateNetworkAndSessionState(a1);
        if (updated)
          APSLogErrorAt();
      }
    }
  }
  return updated;
}

Class initCARSessionRequestAgent()
{
  Class result;

  if (CarKitLibrary_sOnce_0 != -1)
    dispatch_once(&CarKitLibrary_sOnce_0, &__block_literal_global_151);
  result = objc_getClass("CARSessionRequestAgent");
  classCARSessionRequestAgent = (uint64_t)result;
  getCARSessionRequestAgentClass = CARSessionRequestAgentFunction;
  return result;
}

uint64_t CARSessionRequestAgentFunction()
{
  return classCARSessionRequestAgent;
}

uint64_t APTransportStreamCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, const void *a4, int a5, const void *a6, uint64_t a7, const __CFDictionary *a8, _QWORD *a9)
{
  uint64_t v17;
  uint64_t DerivedStorage;
  CFTypeRef v19;
  uint64_t v20;
  dispatch_queue_t v21;
  dispatch_semaphore_t v22;
  CFMutableSetRef Mutable;
  CFMutableDictionaryRef v24;
  uint64_t v25;
  const void *Value;
  uint64_t ConnectionState;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  CFMutableDictionaryRef v34;
  const void *v35;
  const void *v36;
  const void *v37;
  uint64_t v38;
  char label[64];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a6)
  {
    APSLogErrorAt();
    return 4294950686;
  }
  FigTransportStreamGetClassID();
  v17 = CMDerivedObjectCreate();
  if ((_DWORD)v17)
  {
    v38 = v17;
LABEL_56:
    APSLogErrorAt();
    return v38;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = CFRetain(a2);
  *(_QWORD *)DerivedStorage = a3;
  *(_QWORD *)(DerivedStorage + 80) = v19;
  *(_QWORD *)(DerivedStorage + 88) = a4;
  if (a4)
    CFRetain(a4);
  SNPrintF();
  if (a5)
    v20 = FigDispatchQueueCreateWithPriority();
  else
    v20 = (uint64_t)dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 64) = v20;
  if (!v20)
    goto LABEL_49;
  SNPrintF();
  v21 = dispatch_queue_create(label, 0);
  *(_QWORD *)(DerivedStorage + 184) = v21;
  if (!v21)
    goto LABEL_49;
  v22 = dispatch_semaphore_create(1);
  *(_QWORD *)(DerivedStorage + 32) = v22;
  if (!v22)
    goto LABEL_49;
  Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(DerivedStorage + 104) = Mutable;
  if (!Mutable)
    goto LABEL_49;
  v24 = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 112) = v24;
  if (!v24)
    goto LABEL_49;
  *(_QWORD *)(DerivedStorage + 96) = a7;
  *(_DWORD *)(DerivedStorage + 24) = 0;
  v25 = CMBaseObjectGetDerivedStorage();
  if (a8)
  {
    Value = CFDictionaryGetValue(a8, CFSTR("SendConnection"));
    if (Value)
    {
      ConnectionState = stream_createConnectionState(Value, (uint64_t)stream_handleEventFromSendConnection_0, 0, 0, (_QWORD *)(v25 + 48));
      if ((_DWORD)ConnectionState)
      {
        v38 = ConnectionState;
        goto LABEL_55;
      }
      v28 = stream_createConnectionState(a6, (uint64_t)stream_handleEventFromReceiveConnection, 0, 1, (_QWORD *)(v25 + 56));
      if ((_DWORD)v28)
      {
        v38 = v28;
        goto LABEL_55;
      }
      *(_DWORD *)(v25 + 24) = 1;
    }
    v29 = CFDictionaryGetValue(a8, CFSTR("ReceiveConnection"));
    if (!v29)
      goto LABEL_23;
    v30 = stream_createConnectionState(v29, (uint64_t)stream_handleEventFromReceiveConnection, 0, 1, (_QWORD *)(v25 + 56));
    if ((_DWORD)v30)
    {
      v38 = v30;
    }
    else
    {
      v31 = stream_createConnectionState(a6, (uint64_t)stream_handleEventFromSendConnection_0, 0, 0, (_QWORD *)(v25 + 48));
      if (!(_DWORD)v31)
      {
        *(_DWORD *)(v25 + 24) = 0;
        goto LABEL_23;
      }
      v38 = v31;
    }
LABEL_55:
    APSLogErrorAt();
    goto LABEL_56;
  }
LABEL_23:
  if (*(_QWORD *)(v25 + 48))
    goto LABEL_26;
  v32 = stream_createConnectionState(a6, (uint64_t)stream_handleEventFromSendConnection_0, 0, 0, (_QWORD *)(v25 + 48));
  if ((_DWORD)v32)
  {
    v38 = v32;
    goto LABEL_55;
  }
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(v25 + 48);
LABEL_26:
  if (!a8)
    goto LABEL_40;
  v33 = CFDictionaryGetValue(a8, CFSTR("EventRecorder"));
  *(_QWORD *)(DerivedStorage + 136) = v33;
  if (v33)
  {
    CFRetain(v33);
    if (*(_QWORD *)(DerivedStorage + 136))
    {
      v34 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(DerivedStorage + 144) = v34;
      if (!v34)
      {
LABEL_49:
        APSLogErrorAt();
        return 4294950685;
      }
    }
  }
  v35 = CFDictionaryGetValue(a8, CFSTR("SendBackingProvider"));
  *(_QWORD *)(DerivedStorage + 40) = v35;
  if (v35)
    CFRetain(v35);
  v36 = CFDictionaryGetValue(a8, CFSTR("IssueReporter"));
  *(_QWORD *)(DerivedStorage + 8) = v36;
  if (v36)
    CFRetain(v36);
  v37 = CFDictionaryGetValue(a8, CFSTR("NANDataSession"));
  *(_QWORD *)(DerivedStorage + 16) = v37;
  if (v37)
    CFRetain(v37);
  if (gLogCategory_APTransportStream > 50)
    goto LABEL_44;
  if (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize())
    LogPrintF();
LABEL_40:
  if (gLogCategory_APTransportStream <= 50
    && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
LABEL_44:
  v38 = 0;
  *a9 = 0;
  return v38;
}

uint64_t APTransportStreamEnableReverseControl(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 64);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __APTransportStreamEnableReverseControl_block_invoke;
  v5[3] = &unk_1E825A068;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t APTransportStreamWaitUntilReverseControlConnected(uint64_t a1)
{
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  v2 = stream_waitUntilConnectionSetup(a1, 1);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t stream_waitUntilConnectionSetup(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v12[8];
  int v13;
  _QWORD block[9];
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;

  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2000000000;
  v20[3] = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  v5 = *(NSObject **)(DerivedStorage + 64);
  v6 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __stream_waitUntilConnectionSetup_block_invoke;
  block[3] = &unk_1E825A370;
  v15 = a2;
  block[4] = &v21;
  block[5] = v20;
  block[6] = &v16;
  block[7] = DerivedStorage;
  block[8] = a1;
  dispatch_sync(v5, block);
  v7 = v17[3];
  if (v7)
  {
    dispatch_semaphore_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
    v8 = *(NSObject **)(DerivedStorage + 64);
    v12[0] = v6;
    v12[1] = 0x40000000;
    v12[2] = __stream_waitUntilConnectionSetup_block_invoke_2;
    v12[3] = &unk_1E825A398;
    v13 = a2;
    v12[4] = &v21;
    v12[5] = v20;
    v12[6] = DerivedStorage;
    v12[7] = a1;
    dispatch_sync(v8, v12);
    v9 = v17[3];
    if (v9)
      dispatch_release(v9);
  }
  v10 = *((unsigned int *)v22 + 6);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(v20, 8);
  _Block_object_dispose(&v21, 8);
  return v10;
}

uint64_t stream_Invalidate_0()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

void stream_Finalize_0()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStream <= 50
    && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    if (*(_QWORD *)(DerivedStorage + 48) == *(_QWORD *)(DerivedStorage + 56))
      *(_QWORD *)(DerivedStorage + 56) = 0;
    stream_forgetConnectionState((uint64_t *)(DerivedStorage + 48));
    stream_forgetConnectionState((uint64_t *)(DerivedStorage + 56));
    v1 = *(const void **)(DerivedStorage + 136);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 136) = 0;
    }
    v2 = *(const void **)(DerivedStorage + 144);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 144) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 88);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
    v4 = *(const void **)(DerivedStorage + 80);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 80) = 0;
    }
    v5 = *(NSObject **)(DerivedStorage + 168);
    if (v5)
    {
      dispatch_release(v5);
      *(_QWORD *)(DerivedStorage + 168) = 0;
    }
    v6 = *(NSObject **)(DerivedStorage + 32);
    if (v6)
    {
      dispatch_release(v6);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v7 = *(NSObject **)(DerivedStorage + 184);
    if (v7)
    {
      dispatch_release(v7);
      *(_QWORD *)(DerivedStorage + 184) = 0;
    }
    v8 = *(NSObject **)(DerivedStorage + 64);
    if (v8)
    {
      dispatch_release(v8);
      *(_QWORD *)(DerivedStorage + 64) = 0;
    }
  }
  else
  {
    if (gLogCategory_APTransportStream <= 100)
      stream_Finalize_cold_1_0(gLogCategory_APTransportStream);
    __break(1u);
  }
}

__CFString *stream_CopyDebugDescription_0(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<APTransportStream %p '%@'>"), a1, *(_QWORD *)(DerivedStorage + 88));
  return Mutable;
}

uint64_t stream_CopyProperty_0(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  const void *v12;
  void *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  v7 = (_QWORD *)DerivedStorage;
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA5468]))
  {
    if (CFEqual(a2, CFSTR("IssueReporter")))
    {
      v12 = (const void *)v7[1];
      if (v12)
        goto LABEL_11;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("NANDataSession")))
        return FigDispatchSyncCopyPropertyImplementation();
      v12 = (const void *)v7[2];
      if (v12)
      {
LABEL_11:
        v10 = (void *)CFRetain(v12);
LABEL_12:
        v13 = v10;
LABEL_13:
        result = 0;
        *a4 = v13;
        return result;
      }
    }
    v13 = 0;
    goto LABEL_13;
  }
  v8 = 7;
  if (!*((_DWORD *)v7 + 6))
    v8 = 6;
  v9 = v7[v8];
  if (APTransportStreamIDGetStreamCategory(*v7) != 2 || *(_BYTE *)(v9 + 9))
  {
    v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, v7);
    if (!v10)
    {
      APSLogErrorAt();
      return 4294950685;
    }
    goto LABEL_12;
  }
  APSLogErrorAt();
  return APSSignalErrorAt();
}

uint64_t stream_SetProperty_0()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t stream_invalidateInternal_0(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v3 = DerivedStorage;
    *(_BYTE *)(DerivedStorage + 72) = 1;
    v4 = 56;
    if (*(_DWORD *)(DerivedStorage + 24))
      v5 = 56;
    else
      v5 = 48;
    v6 = *(_QWORD *)(DerivedStorage + v5);
    if (*(_DWORD *)(DerivedStorage + 24))
      v4 = 48;
    v7 = *(_QWORD *)(DerivedStorage + v4);
    if (v6 == v7)
      v8 = 0;
    else
      v8 = v7;
    v9 = *(_QWORD *)(v6 + 24);
    v10 = *(_QWORD *)(DerivedStorage + 96);
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v11)
      v11(v9, v10);
    if (v8)
    {
      v12 = *(_QWORD *)(v8 + 24);
      v13 = *(_QWORD *)(v3 + 96);
      v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v14)
        v14(v12, v13);
    }
    APTransportSessionUnregisterStream(*(const void **)(v3 + 80));
    v15 = *(NSObject **)(v3 + 32);
    if (v15)
      dispatch_semaphore_signal(v15);
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 112), (CFDictionaryApplierFunction)stream_relinquishPackage, a1);
    stream_invalidateConnectionState(v6);
    stream_invalidateConnectionState(v8);
    v16 = *(NSObject **)(v3 + 184);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __stream_invalidateInternal_block_invoke_0;
    block[3] = &__block_descriptor_tmp_92;
    block[4] = v3;
    dispatch_sync(v16, block);
    v17 = *(NSObject **)(v3 + 168);
    if (v17)
    {
      *(_DWORD *)(v3 + 152) = -16617;
      dispatch_semaphore_signal(v17);
    }
    CFSetRemoveAllValues(*(CFMutableSetRef *)(v3 + 104));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 112));
    v18 = *(const void **)(v3 + 120);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(v3 + 120) = 0;
    }
    v19 = *(const void **)(v3 + 128);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(v3 + 128) = 0;
    }
    v20 = *(const void **)(v3 + 40);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(v3 + 40) = 0;
    }
    v21 = *(const void **)(v3 + 104);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v3 + 104) = 0;
    }
    v22 = *(const void **)(v3 + 112);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(v3 + 112) = 0;
    }
    v23 = *(const void **)(v3 + 8);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(v3 + 8) = 0;
    }
    v24 = *(const void **)(v3 + 16);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(v3 + 16) = 0;
    }
    if (gLogCategory_APTransportStream <= 30
      && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  return 0;
}

uint64_t stream_getConnectionState(uint64_t result, int a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;

  if (a3 && result)
  {
    v3 = *(_DWORD *)(result + 24);
    if (a2 == 1)
    {
      if (v3)
      {
LABEL_5:
        v4 = *(_QWORD *)(result + 48);
LABEL_8:
        *a3 = v4;
        return result;
      }
    }
    else if (!v3)
    {
      goto LABEL_5;
    }
    v4 = *(_QWORD *)(result + 56);
    goto LABEL_8;
  }
  return APSLogErrorAt();
}

uint64_t stream_relinquishPackage(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    stream_relinquishPackage_cold_1();
  v4 = 56;
  if (!*(_DWORD *)(DerivedStorage + 24))
    v4 = 48;
  v5 = *(_QWORD *)(*(_QWORD *)(DerivedStorage + v4) + 24);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 48);
  if (v7)
    return v7(v5, a2);
  return result;
}

void stream_invalidateConnectionState(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = *(NSObject **)a1;
    if (v2)
    {
      *(_BYTE *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 12) = -16617;
      dispatch_semaphore_signal(v2);
    }
    v3 = *(const void **)(a1 + 24);
    if (v3)
    {
      CFRelease(v3);
      if (*(_QWORD *)(a1 + 24))
      {
        if (gLogCategory_APTransportStream <= 50
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    *(_QWORD *)(a1 + 24) = 0;
    v4 = *(const void **)(a1 + 40);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 40) = 0;
    }
    v5 = *(const void **)(a1 + 88);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
}

uint64_t __stream_invalidateInternal_block_invoke_0(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 200) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 208) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 192) = 0;
  return result;
}

void stream_forgetConnectionState(uint64_t *a1)
{
  dispatch_object_t *v2;

  if (a1)
  {
    v2 = (dispatch_object_t *)*a1;
    if (*a1)
    {
      stream_invalidateConnectionState(*a1);
      if (*v2)
        dispatch_release(*v2);
      free(v2);
      *a1 = 0;
    }
  }
}

uint64_t stream_copyPropertyInternal(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  uint64_t v16;
  uint64_t v17;
  uint64_t CMBaseObject;
  uint64_t (*v19)(uint64_t, const __CFString *, uint64_t, _QWORD *);
  const void *v20;
  CFTypeRef v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, const void *, uint64_t, _QWORD *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  v8 = DerivedStorage;
  v9 = 56;
  if (*(_DWORD *)(DerivedStorage + 24))
    v10 = 56;
  else
    v10 = 48;
  v11 = *(_QWORD *)(DerivedStorage + v10);
  if (*(_DWORD *)(DerivedStorage + 24))
    v9 = 48;
  v12 = *(_QWORD *)(DerivedStorage + v9);
  if (!CFEqual(a2, CFSTR("ReverseConnectionLocalPort")))
  {
    if (CFEqual(a2, CFSTR("ReverseConnectionRemotePort")))
    {
      v17 = *(_QWORD *)(v12 + 24);
      if (v17)
      {
        CMBaseObject = APTransportConnectionGetCMBaseObject(v17);
        v19 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
        if (v19)
        {
          v16 = v19(CMBaseObject, CFSTR("RemoteNetworkPort"), a3, a4);
          if ((_DWORD)v16)
            goto LABEL_23;
          return v16;
        }
        v16 = 4294954514;
LABEL_23:
        APSLogErrorAt();
        return v16;
      }
    }
    else
    {
      if (CFEqual(a2, CFSTR("SendConnection")))
      {
        v20 = *(const void **)(*(_QWORD *)(v8 + 48) + 24);
        if (v20)
        {
          v21 = CFRetain(v20);
          *a4 = v21;
          if (v21)
            return 0;
        }
        else
        {
          *a4 = 0;
        }
        APSLogErrorAt();
        return 4294960569;
      }
      v23 = *(_QWORD *)(v11 + 24);
      if (v23)
      {
        v24 = APTransportConnectionGetCMBaseObject(v23);
        v25 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
        if (v25)
        {
          v16 = v25(v24, a2, a3, a4);
          if (!(_DWORD)v16)
            return v16;
        }
        else
        {
          v16 = 4294954514;
        }
        goto LABEL_23;
      }
    }
LABEL_33:
    APSLogErrorAt();
    return 4294960587;
  }
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13)
    goto LABEL_33;
  v14 = APTransportConnectionGetCMBaseObject(v13);
  v15 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v15)
  {
    v16 = 4294954514;
    goto LABEL_23;
  }
  v16 = v15(v14, CFSTR("LocalNetworkPort"), a3, a4);
  if ((_DWORD)v16)
    goto LABEL_23;
  return v16;
}

uint64_t stream_setPropertyInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const __CFString *, uint64_t);
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, const __CFString *, uint64_t);
  int v26;
  unsigned int v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  v3 = DerivedStorage;
  v4 = 56;
  if (*(_DWORD *)(DerivedStorage + 24))
    v5 = 56;
  else
    v5 = 48;
  v6 = *(_QWORD *)(DerivedStorage + v5);
  if (*(_DWORD *)(DerivedStorage + 24))
    v4 = 48;
  v7 = *(_QWORD *)(DerivedStorage + v4);
  if (!CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("ReverseConnectionLocalPort")))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("ReverseConnectionRemotePort")))
    {
      v13 = *(_QWORD *)(v7 + 24);
      if (!v13)
        goto LABEL_40;
      v14 = *(_QWORD *)(a1 + 16);
      CMBaseObject = APTransportConnectionGetCMBaseObject(v13);
      v16 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (v16)
      {
        v12 = v16(CMBaseObject, CFSTR("RemoteNetworkPort"), v14);
        if ((_DWORD)v12)
          goto LABEL_32;
        return v12;
      }
      v12 = 4294954514;
    }
    else
    {
      if (!CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("QualityOfService")))
      {
        v21 = CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("PackageSendTimeout"));
        v22 = *(_QWORD *)(v6 + 24);
        if (v21)
        {
          if (v22)
          {
            v23 = *(_QWORD *)(a1 + 16);
            v24 = APTransportConnectionGetCMBaseObject(v22);
            v25 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
            if (v25)
            {
              v26 = v25(v24, CFSTR("PackageSendTimeout"), v23);
              v28 = v26;
              if (v26 == -12784)
              {
                *(_DWORD *)(v3 + 176) = CFGetInt64Ranged();
                v26 = -12784;
              }
              if (!v26)
                return 0;
            }
            else
            {
              v28 = -12782;
            }
            APSLogErrorAt();
            return v28;
          }
        }
        else if (v22)
        {
          v12 = APTransportConnectionSetProperty(v22, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
          if (!(_DWORD)v12)
            return v12;
          goto LABEL_32;
        }
LABEL_40:
        APSLogErrorAt();
        return 4294960587;
      }
      v17 = *(_QWORD *)(v7 + 24);
      if (!v17)
        goto LABEL_40;
      v18 = *(_QWORD *)(a1 + 16);
      v19 = APTransportConnectionGetCMBaseObject(v17);
      v20 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
      if (v20)
      {
        v12 = v20(v19, CFSTR("QualityOfService"), v18);
        if ((_DWORD)v12)
          goto LABEL_32;
        return v12;
      }
      v12 = 4294954514;
    }
LABEL_32:
    APSLogErrorAt();
    return v12;
  }
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    goto LABEL_40;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = APTransportConnectionGetCMBaseObject(v8);
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v11)
  {
    v12 = 4294954514;
    goto LABEL_32;
  }
  v12 = v11(v10, CFSTR("LocalNetworkPort"), v9);
  if ((_DWORD)v12)
    goto LABEL_32;
  return v12;
}

uint64_t stream_Resume_0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 64);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __stream_Resume_block_invoke_0;
  v5[3] = &unk_1E825A180;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t stream_WaitUntilConnected_0(uint64_t a1)
{
  return stream_waitUntilConnectedInternal(a1, 0);
}

uint64_t stream_SetMessageCallbacks_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD v10[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(NSObject **)(DerivedStorage + 184);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __stream_SetMessageCallbacks_block_invoke_0;
  v10[3] = &__block_descriptor_tmp_106;
  v10[4] = DerivedStorage;
  v10[5] = a2;
  v10[6] = a3;
  v10[7] = a4;
  dispatch_sync(v8, v10);
  return 0;
}

uint64_t stream_AcquireMessageBBuf()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t stream_RelinquishMessageBBuf(const void *a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFRetain(a1);
    APSDispatchAsyncFHelper();
  }
  return 0;
}

uint64_t stream_SendMessage(const void *a1, uint64_t a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a3)
    CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t stream_SendMessageCreatingReply(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  dispatch_time_t v16;
  intptr_t v17;
  BOOL v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t *v25;
  int v26;
  _QWORD v27[5];
  _QWORD v28[7];
  BOOL v29;
  _QWORD block[11];
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;

  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  v32 = 0;
  v33 = &v32;
  v34 = 0x2000000000;
  v35 = 0;
  v10 = MEMORY[0x1E0C809B0];
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    v25 = v41;
    v26 = -16617;
  }
  else
  {
    v11 = 56;
    if (!*(_DWORD *)(DerivedStorage + 24))
      v11 = 48;
    v12 = *(_QWORD *)(DerivedStorage + v11);
    if (*(_BYTE *)(v12 + 9))
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(DerivedStorage + 32), 0xFFFFFFFFFFFFFFFFLL);
      v13 = *(NSObject **)(v9 + 64);
      block[0] = v10;
      block[1] = 0x40000000;
      block[2] = __stream_SendMessageCreatingReply_block_invoke;
      block[3] = &unk_1E825A210;
      v31 = a2;
      block[8] = a3;
      block[9] = v9;
      block[10] = v12;
      block[4] = &v40;
      block[5] = &v36;
      block[6] = &v32;
      block[7] = a1;
      dispatch_sync(v13, block);
      if (*((_DWORD *)v41 + 6))
        goto LABEL_19;
      v14 = v33[3];
      v15 = *((_DWORD *)v37 + 6);
      if (v15)
        v16 = dispatch_time(0, 1000000000 * v15);
      else
        v16 = -1;
      v17 = dispatch_semaphore_wait(v14, v16);
      v18 = v17 != 0;
      if (!v17)
        goto LABEL_18;
      v19 = gLogCategory_APTransportStream;
      if (gLogCategory_APTransportStream > 50)
        goto LABEL_18;
      if (gLogCategory_APTransportStream == -1)
      {
        if (!_LogCategory_Initialize())
        {
LABEL_18:
          v20 = *(NSObject **)(v9 + 64);
          v28[0] = v10;
          v28[1] = 0x40000000;
          v28[2] = __stream_SendMessageCreatingReply_block_invoke_2;
          v28[3] = &unk_1E825A238;
          v28[4] = &v40;
          v28[5] = v9;
          v29 = v18;
          v28[6] = a4;
          dispatch_sync(v20, v28);
          goto LABEL_19;
        }
        v19 = gLogCategory_APTransportStream;
      }
      if (v19 == -1)
        _LogCategory_Initialize();
      LogPrintF();
      goto LABEL_18;
    }
    APSLogErrorAt();
    v25 = v41;
    v26 = -16614;
  }
  *((_DWORD *)v25 + 6) = v26;
LABEL_19:
  v21 = v33[3];
  if (v21)
    dispatch_release(v21);
  v22 = *(NSObject **)(v9 + 64);
  v27[0] = v10;
  v27[1] = 0x40000000;
  v27[2] = __stream_SendMessageCreatingReply_block_invoke_3;
  v27[3] = &__block_descriptor_tmp_113;
  v27[4] = v9;
  dispatch_sync(v22, v27);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v9 + 32));
  v23 = *((unsigned int *)v41 + 6);
  if ((_DWORD)v23 == -6722)
  {
    CMBaseObjectGetDerivedStorage();
    APSDispatchSyncTask();
    v23 = *((unsigned int *)v41 + 6);
  }
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  return v23;
}

uint64_t stream_ConfigureEncryption()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  if (gLogCategory_APTransportStream <= 30
    && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t stream_SendBatch(const void *a1, uint64_t a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (a1 && a3)
  {
    if (CFArrayGetCount((CFArrayRef)a3) >= 1)
    {
      CFRetain(a1);
      CFRetain(a3);
      APSDispatchAsyncFHelper();
    }
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294950686;
  }
}

void stream_postCachedConnectionEvent(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[6];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(a2 + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 16);
    if (v6)
    {
      v7 = DerivedStorage;
      CFRetain(a1);
      v8 = *(NSObject **)(v7 + 184);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __stream_postCachedConnectionEvent_block_invoke_0;
      block[3] = &__block_descriptor_tmp_104;
      v10 = v6;
      block[4] = v5;
      block[5] = a1;
      dispatch_async(v8, block);
    }
  }
  else
  {
    APSLogErrorAt();
  }
}

void __stream_postCachedConnectionEvent_block_invoke_0(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 32))(*(unsigned int *)(a1 + 48), 0, *(_QWORD *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t stream_waitUntilConnectedInternal(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage;
  int v5;
  CFMutableDictionaryRef Mutable;
  NSObject *v7;
  const void *v8;
  uint64_t v9;
  _QWORD v11[8];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v16[3] = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v5 = stream_waitUntilConnectionSetup(a1, 0);
  *((_DWORD *)v18 + 6) = v5;
  if (v5)
  {
    APSLogErrorAt();
  }
  else if (a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v13[3] = (uint64_t)Mutable;
    if (Mutable)
    {
      v7 = *(NSObject **)(DerivedStorage + 64);
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 0x40000000;
      v11[2] = __stream_waitUntilConnectedInternal_block_invoke;
      v11[3] = &unk_1E825A1C8;
      v11[4] = &v17;
      v11[5] = v16;
      v11[6] = &v12;
      v11[7] = DerivedStorage;
      dispatch_sync(v7, v11);
      if (!*((_DWORD *)v18 + 6))
        *a2 = CFRetain((CFTypeRef)v13[3]);
    }
    else
    {
      APSLogErrorAt();
      *((_DWORD *)v18 + 6) = -16611;
    }
  }
  v8 = (const void *)v13[3];
  if (v8)
    CFRelease(v8);
  v9 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(&v17, 8);
  return v9;
}

uint64_t __stream_waitUntilConnectedInternal_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[7];
  if (*(_BYTE *)(v2 + 72))
  {
    result = APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -16617;
  }
  else
  {
    stream_getConnectionState(v2, 0, (_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24));
    CFDictionarySetData();
    return CFDictionarySetInt64();
  }
  return result;
}

uint64_t stream_acquireMessageBBufInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, const void **);
  uint64_t v9;
  const void *v10;
  uint64_t (*v11)(const void *);
  void *v12;
  uint64_t DataPointer;
  const void *v14;
  uint64_t v15;
  void (*v16)(uint64_t, const void *);
  char *v18;
  const void *v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v19 = 0;
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    DataPointer = APSSignalErrorAt();
    v5 = 0;
    goto LABEL_10;
  }
  v3 = DerivedStorage;
  v4 = 56;
  if (!*(_DWORD *)(DerivedStorage + 24))
    v4 = 48;
  v5 = *(_QWORD *)(DerivedStorage + v4);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v8)
  {
    DataPointer = 4294954514;
LABEL_9:
    APSLogErrorAt();
LABEL_10:
    v12 = 0;
    goto LABEL_11;
  }
  v9 = v8(v6, v7, &v19);
  if ((_DWORD)v9)
  {
    DataPointer = v9;
    goto LABEL_9;
  }
  v10 = v19;
  v11 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v11)
    v12 = (void *)v11(v10);
  else
    v12 = 0;
  CFSetAddValue(*(CFMutableSetRef *)(v3 + 104), v12);
  DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)v12, 0, 0, 0, &v18);
  if (!(_DWORD)DataPointer)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 112), v18, v19);
    **(_QWORD **)(a1 + 16) = v12;
    v19 = 0;
    goto LABEL_17;
  }
  APSLogErrorAt();
LABEL_11:
  v14 = v19;
  if (v19)
  {
    v15 = *(_QWORD *)(v5 + 24);
    v16 = *(void (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v16)
      v16(v15, v14);
  }
LABEL_17:
  if (v12)
    CFRelease(v12);
  return DataPointer;
}

void stream_relinquishMessageBBufInternal(CFTypeRef *a1)
{
  uint64_t DerivedStorage;
  const void *Value;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, const void *);
  char *dataPointerOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  dataPointerOut = 0;
  if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 104), a1[1]))
    goto LABEL_8;
  if (CMBlockBufferGetDataPointer((CMBlockBufferRef)a1[1], 0, 0, 0, &dataPointerOut))
    goto LABEL_8;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), dataPointerOut);
  if (!Value)
    goto LABEL_8;
  v4 = Value;
  CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 104), a1[1]);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 112), dataPointerOut);
  v5 = 56;
  if (!*(_DWORD *)(DerivedStorage + 24))
    v5 = 48;
  v6 = *(_QWORD *)(*(_QWORD *)(DerivedStorage + v5) + 24);
  v7 = *(unsigned int (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v7 || v7(v6, v4))
LABEL_8:
    APSLogErrorAt();
  if (*a1)
    CFRelease(*a1);
}

void stream_sendMessageInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  unsigned int (*v8)(uint64_t, CFTypeRef);
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  void (*v12)(uint64_t, CFTypeRef);
  const void *v13;
  char v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  cf = 0;
  v14 = 0;
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    v5 = 0;
  }
  else
  {
    v4 = 56;
    if (!*(_DWORD *)(DerivedStorage + 24))
      v4 = 48;
    v5 = *(_QWORD *)(DerivedStorage + v4);
    if (!*(_BYTE *)(v5 + 9)
      || stream_copyFormattedAsyncPackageForBBuf(*(_QWORD *)a1, *(OpaqueCMBlockBuffer **)(a1 + 16), *(unsigned int *)(a1 + 8), &cf, &v14))
    {
      goto LABEL_12;
    }
    if (gLogCategory_APTransportStream <= 10
      && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v6 = *(_QWORD *)(v5 + 24);
    v7 = cf;
    v8 = *(unsigned int (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v8 || v8(v6, v7))
LABEL_12:
      APSLogErrorAt();
  }
  if (v14)
  {
    v9 = *(_QWORD *)(v3 + 40);
    if (v9)
    {
      APTransportStreamSendBackingProviderRelinquishBBuf(v9, *(void **)(a1 + 16));
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 24);
      v11 = cf;
      v12 = *(void (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v12)
        v12(v10, v11);
    }
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v13 = *(const void **)(a1 + 16);
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
}

uint64_t stream_copyFormattedAsyncPackageForBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, uint64_t a3, CFTypeRef *a4, char *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef);
  const void *v15;
  CFTypeRef v16;
  void (*v17)(CFTypeRef, uint64_t);
  CFTypeRef v18;
  void (*v19)(CFTypeRef, OpaqueCMBlockBuffer *);
  uint64_t v20;
  CFTypeRef v21;
  void (*v22)(CFTypeRef, uint64_t);
  CFTypeRef v23;
  void (*v24)(CFTypeRef, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  else if (a2 && a4 && a5)
  {
    v11 = DerivedStorage;
    v12 = stream_copyPackageForBBuf(a1, a2, a4, a5);
    if ((_DWORD)v12)
    {
      v15 = (const void *)v12;
      APSLogErrorAt();
    }
    else
    {
      v13 = *a4;
      v14 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v14)
        v15 = (const void *)v14(v13);
      else
        v15 = 0;
      v16 = *a4;
      v17 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v17)
        v17(v16, a3);
      if (!*(_QWORD *)(v11 + 40) || !v15)
      {
        v18 = *a4;
        v19 = *(void (**)(CFTypeRef, OpaqueCMBlockBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v19)
          v19(v18, a2);
      }
      v20 = *(_QWORD *)(v11 + 96);
      if (v20)
      {
        v21 = *a4;
        v22 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
        if (v22)
          v22(v21, v20);
      }
      v23 = *a4;
      v24 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
      if (v24)
        v24(v23, 1634957678);
      if (v15)
      {
        CFRelease(v15);
        return 0;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294950686;
  }
  return (uint64_t)v15;
}

uint64_t stream_copyPackageForBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, CFTypeRef *a3, char *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t DataPointer;
  uint64_t v10;
  const void *Value;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, CFTypeRef *);
  uint64_t v20;
  size_t v21;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  v8 = DerivedStorage;
  if (!a2)
    goto LABEL_11;
  lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  v21 = 0;
  DataPointer = CMBlockBufferGetDataPointer(a2, 0, &lengthAtOffsetOut, &v21, &dataPointerOut);
  if ((_DWORD)DataPointer)
  {
    v15 = DataPointer;
    goto LABEL_23;
  }
  if (lengthAtOffsetOut == v21)
  {
    v10 = *(_QWORD *)(v8 + 40);
    if (v10)
    {
      APTransportStreamSendBackingProviderCopyPackageForAcquiredBBuf(v10, a2, &cf);
    }
    else
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 112), dataPointerOut);
      cf = Value;
      if (!Value)
        goto LABEL_11;
      CFRetain(Value);
    }
  }
  if (!cf)
  {
LABEL_11:
    v13 = *(_QWORD *)(v8 + 40);
    if (v13)
    {
      v14 = APTransportStreamSendBackingProviderCopyPackageForGivenBBuf(v13, a2, &cf);
      if (!(_DWORD)v14)
      {
LABEL_13:
        v12 = 1;
        goto LABEL_14;
      }
      v15 = v14;
    }
    else
    {
      v17 = 56;
      if (!*(_DWORD *)(v8 + 24))
        v17 = 48;
      v18 = *(_QWORD *)(*(_QWORD *)(v8 + v17) + 24);
      v19 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v19)
      {
        v20 = v19(v18, &cf);
        if (!(_DWORD)v20)
        {
          if (cf)
            CFRetain(cf);
          goto LABEL_13;
        }
        v15 = v20;
      }
      else
      {
        v15 = 4294954514;
      }
    }
LABEL_23:
    APSLogErrorAt();
    return v15;
  }
  v12 = 0;
LABEL_14:
  v15 = 0;
  *a3 = cf;
  *a4 = v12;
  return v15;
}

void stream_sendMessageExpectingReplyInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  CFTypeRef v7;
  uint64_t v8;
  void (*v9)(CFTypeRef, uint64_t);
  uint64_t v10;
  void (*v11)(CFTypeRef, uint64_t);
  uint64_t v12;
  void (*v13)(CFTypeRef, uint64_t);
  uint64_t v14;
  void (*v15)(CFTypeRef, uint64_t);
  void (*v16)(CFTypeRef, uint64_t);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CFTypeRef);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  void (*v24)(uint64_t, CFTypeRef);
  const void *v25;
  char v26;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  cf = 0;
  v26 = 0;
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    v5 = 0;
    v20 = -16617;
  }
  else
  {
    v4 = 56;
    if (!*(_DWORD *)(DerivedStorage + 24))
      v4 = 48;
    v5 = *(_QWORD *)(DerivedStorage + v4);
    if (*(_BYTE *)(v5 + 9))
    {
      v6 = stream_copyPackageForBBuf(*(_QWORD *)a1, *(OpaqueCMBlockBuffer **)(a1 + 16), &cf, &v26);
      if (v6)
      {
        v20 = v6;
      }
      else
      {
        v7 = cf;
        v8 = *(unsigned int *)(a1 + 8);
        v9 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v9)
          v9(v7, v8);
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v11)
          v11(v7, v10);
        v12 = *(_QWORD *)a1;
        v13 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v13)
          v13(v7, v12);
        v14 = *(_QWORD *)(v3 + 96);
        if (v14)
        {
          v15 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          if (v15)
            v15(v7, v14);
        }
        v16 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
        if (v16)
          v16(v7, 1937337955);
        if (gLogCategory_APTransportStream <= 10
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v17 = *(_QWORD *)(v5 + 24);
        v18 = *(uint64_t (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
        if (v18)
        {
          v19 = v18(v17, v7);
          if (!v19)
            goto LABEL_28;
          v20 = v19;
        }
        else
        {
          v20 = -12782;
        }
      }
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      v20 = -16614;
    }
  }
  if (!*(_BYTE *)(v3 + 72))
  {
    *(_DWORD *)(v3 + 152) = v20;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 168));
  }
LABEL_28:
  if (v26)
  {
    v21 = *(_QWORD *)(v3 + 40);
    if (v21)
    {
      APTransportStreamSendBackingProviderRelinquishBBuf(v21, *(void **)(a1 + 16));
    }
    else
    {
      v22 = *(_QWORD *)(v5 + 24);
      v23 = cf;
      v24 = *(void (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v24)
        v24(v22, v23);
    }
  }
  CFRelease(*(CFTypeRef *)a1);
  v25 = *(const void **)(a1 + 16);
  if (v25)
    CFRelease(v25);
  if (cf)
    CFRelease(cf);
}

uint64_t stream_configureEncryptionInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    return 4294950679;
  }
  v3 = DerivedStorage;
  v4 = *(const void **)(DerivedStorage + 120);
  v5 = *(const void **)(a1 + 8);
  *(_QWORD *)(v3 + 120) = v5;
  if (v5)
    CFRetain(v5);
  if (v4)
    CFRelease(v4);
  v6 = *(const void **)(v3 + 128);
  v7 = *(const void **)(a1 + 16);
  *(_QWORD *)(v3 + 128) = v7;
  if (v7)
    CFRetain(v7);
  if (v6)
    CFRelease(v6);
  v8 = 56;
  if (!*(_DWORD *)(v3 + 24))
    v8 = 48;
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + v8) + 24);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (!v12)
  {
    v13 = 4294954514;
LABEL_16:
    APSLogErrorAt();
    return v13;
  }
  v13 = v12(v9, v11, v10);
  if ((_DWORD)v13)
    goto LABEL_16;
  return v13;
}

void stream_sendBatchInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  const __CFAllocator *v10;
  char *v11;
  char *v12;
  CFIndex v13;
  OpaqueCMBlockBuffer *ValueAtIndex;
  OpaqueCMBlockBuffer *v15;
  CFTypeID v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, CFMutableArrayRef);
  CFIndex i;
  void *v21;
  void *v22;
  uint64_t v23;
  void (*v24)(uint64_t, void *);
  const __CFAllocator *v25;
  const void *v26;
  uint64_t v27;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
  if (!*(_BYTE *)(DerivedStorage + 72))
  {
    v4 = 56;
    if (!*(_DWORD *)(DerivedStorage + 24))
      v4 = 48;
    v5 = *(_QWORD *)(DerivedStorage + v4);
    if (*(_BYTE *)(v5 + 9))
    {
      v6 = Count;
      v7 = CFGetAllocator(*(CFTypeRef *)(a1 + 16));
      Mutable = CFArrayCreateMutable(v7, v6, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v9 = Mutable;
        v10 = CFGetAllocator(*(CFTypeRef *)(a1 + 16));
        v11 = (char *)CFAllocatorAllocate(v10, v6, 0);
        if (!v11)
        {
          APSLogErrorAt();
LABEL_40:
          CFRelease(v9);
          goto LABEL_41;
        }
        v12 = v11;
        v27 = v5;
        bzero(v11, v6);
        if (gLogCategory_APTransportStream <= 10
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (v6 >= 1)
        {
          v13 = 0;
          while (1)
          {
            ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v13);
            if (!ValueAtIndex)
              break;
            v15 = ValueAtIndex;
            v16 = CFGetTypeID(ValueAtIndex);
            if (v16 != CMBlockBufferGetTypeID()
              || stream_copyFormattedAsyncPackageForBBuf(*(_QWORD *)a1, v15, *(unsigned int *)(a1 + 8), (CFTypeRef *)&value, &v12[v13]))
            {
              break;
            }
            if (gLogCategory_APTransportStream <= 10
              && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            CFArrayAppendValue(v9, value);
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            if (v6 == ++v13)
              goto LABEL_23;
          }
          APSLogErrorAt();
          v17 = v27;
          goto LABEL_31;
        }
LABEL_23:
        if (gLogCategory_APTransportStream <= 10
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        v17 = v27;
        v18 = *(_QWORD *)(v27 + 24);
        v19 = *(unsigned int (**)(uint64_t, CFMutableArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 88);
        if (v19)
        {
          if (v19(v18, v9))
            goto LABEL_49;
        }
        else if (APTransportConnectionSendBatchSlow(v18, v9))
        {
LABEL_49:
          APSLogErrorAt();
        }
LABEL_31:
        if (v6 >= 1)
        {
          for (i = 0; i != v6; ++i)
          {
            if (v12[i])
            {
              if (*(_QWORD *)(DerivedStorage + 40))
              {
                v21 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
                APTransportStreamSendBackingProviderRelinquishBBuf(*(_QWORD *)(DerivedStorage + 40), v21);
              }
              else
              {
                v22 = (void *)CFArrayGetValueAtIndex(v9, i);
                value = v22;
                v23 = *(_QWORD *)(v17 + 24);
                v24 = *(void (**)(uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                if (v24)
                  v24(v23, v22);
              }
            }
          }
        }
        v25 = CFGetAllocator(*(CFTypeRef *)(a1 + 16));
        CFAllocatorDeallocate(v25, v12);
        goto LABEL_40;
      }
    }
  }
  APSLogErrorAt();
LABEL_41:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v26 = *(const void **)(a1 + 16);
  if (v26)
    CFRelease(v26);
}

uint64_t stream_createConnectionState(const void *a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  void *v11;
  _DWORD *v12;
  dispatch_semaphore_t v13;
  const void *v14;
  uint64_t v15;
  void *v17;

  v17 = 0;
  if (a5 && a1 && a3)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v11 = malloc_type_calloc(1uLL, 0x68uLL, 0x10E00401F955E56uLL);
    v17 = v11;
    if (v11 && (v12 = v11, v13 = dispatch_semaphore_create(0), (*(_QWORD *)v12 = v13) != 0))
    {
      v12[4] = 0;
      *((_QWORD *)v12 + 3) = CFRetain(a1);
      *((_QWORD *)v12 + 4) = a2;
      v12[24] = a4;
      v14 = *(const void **)(DerivedStorage + 88);
      *((_QWORD *)v12 + 11) = v14;
      if (v14)
        CFRetain(v14);
      *((_QWORD *)v12 + 10) = a3;
      if (gLogCategory_APTransportStream <= 50
        && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
      {
        LogPrintF();
      }
      v15 = 0;
      *a5 = v12;
      v17 = 0;
    }
    else
    {
      APSLogErrorAt();
      v15 = 4294950685;
    }
  }
  else
  {
    APSLogErrorAt();
    v15 = 4294950686;
  }
  stream_forgetConnectionState((uint64_t *)&v17);
  return v15;
}

uint64_t stream_handleEventFromSendConnection_0(int a1, const void *a2, const void *a3)
{
  stream_handleEventFromConnection(a3, a1, a2, 1);
  return 0;
}

uint64_t stream_handleEventFromReceiveConnection(int a1, const void *a2, const void *a3)
{
  stream_handleEventFromConnection(a3, a1, a2, 0);
  return 0;
}

void stream_handleEventFromConnection(const void *a1, int a2, const void *a3, char a4)
{
  uint64_t DerivedStorage;
  NSObject *v9;
  _QWORD v10[7];
  int v11;
  char v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a3)
    CFRetain(a3);
  v9 = *(NSObject **)(DerivedStorage + 64);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __stream_handleEventFromConnection_block_invoke;
  v10[3] = &__block_descriptor_tmp_119;
  v11 = a2;
  v10[4] = a1;
  v10[5] = a3;
  v12 = a4;
  v10[6] = DerivedStorage;
  dispatch_async(v9, v10);
}

void __stream_handleEventFromConnection_block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  int v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t (*v12)(const void *);
  uint64_t v13;
  uint64_t CMBaseObject;
  uint64_t (*v15)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const void *v16;
  CFTypeRef v17;
  CFTypeID v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t (*v21)(const void *);
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(const void *);
  uint64_t v26;
  NSObject *v27;
  uint64_t (*v28)(const void *);
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  const void *v36;
  NSObject *v37;
  uint64_t (*v38)(const void *);
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(const void *);
  uint64_t v42;
  CFTypeID v43;
  CFTypeRef v44;
  NSObject *v45;
  uint64_t (*v46)(const void *);
  int v47;
  uint64_t (*v48)(const void *);
  int v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, const __CFString *, _QWORD, CFDataRef *);
  BOOL v53;
  NSObject *v54;
  NSObject *v55;
  int v56;
  const void *v57;
  const void *v58;
  int v59;
  CFDataRef theData;
  CFTypeRef cf;
  CFTypeRef v62;
  int v63;
  uint64_t valuePtr;
  uint64_t v65;
  void (*v66)(uint64_t);
  void *v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  const void *v71;
  const void *v72;
  const void *v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  CFRange v82;

  v2 = *(_DWORD *)(a1 + 56);
  v3 = *(void **)(a1 + 32);
  v4 = *(const void **)(a1 + 40);
  v5 = 48;
  if (!*(_BYTE *)(a1 + 60))
    v5 = 56;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v5);
  v63 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v62 = 0;
  theData = 0;
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    v59 = -16617;
    goto LABEL_149;
  }
  v8 = DerivedStorage;
  if (v2 == 7)
    v9 = 30;
  else
    v9 = 50;
  if (v9 >= gLogCategory_APTransportStream
    && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
  {
    if (gLogCategory_APTransportStream == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
  if (*(_BYTE *)(v6 + 9))
  {
    if (v4)
    {
      v10 = CFGetTypeID(v4);
      if (v10 == APTransportPackageGetTypeID())
      {
        v11 = *(_QWORD *)(v8 + 96);
        v12 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
        v13 = v12 ? v12(v4) : 0;
        if (v11 != v13)
        {
          APSLogErrorAt();
          v59 = -16618;
          goto LABEL_149;
        }
      }
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
        stream_recordConnectionEvent((int)v3, v2, (const __CFData *)v4);
        goto LABEL_136;
      case 4:
        *(_DWORD *)(v6 + 16) = 0;
        if (gLogCategory_APTransportStream <= 90
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
        if (*(_BYTE *)(v6 + 9))
        {
          *(_BYTE *)(v6 + 8) = 0;
          if (v4)
          {
            v43 = CFGetTypeID(v4);
            if (v43 == CFNumberGetTypeID())
            {
              CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, (void *)(v6 + 12));
              FigCreateBlockBufferCopyingMemoryBlock();
            }
          }
          CFRetain(v3);
          if (v62)
          {
            CFRetain(v62);
            v44 = v62;
          }
          else
          {
            v44 = 0;
          }
          v45 = *(NSObject **)(v8 + 184);
          valuePtr = MEMORY[0x1E0C809B0];
          v65 = 0x40000000;
          v66 = __stream_eventReceived_block_invoke_2_0;
          v67 = &__block_descriptor_tmp_134;
          v68 = (_QWORD *)v8;
          v69 = (uint64_t *)v3;
          v70 = (uint64_t)v44;
          dispatch_async(v45, &valuePtr);
        }
        APTransportSessionHandleStreamEvent(*(const void **)(v8 + 80), v3, 0, v4);
        goto LABEL_123;
      case 5:
        stream_recordConnectionEvent((int)v3, 5, (const __CFData *)v4);
        if (*(_QWORD *)(v8 + 48) == *(_QWORD *)(v8 + 56))
          goto LABEL_34;
        CMBaseObject = APTransportConnectionGetCMBaseObject(*(_QWORD *)(v6 + 24));
        v15 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v15)
        {
          v63 = v15(CMBaseObject, CFSTR("RemoteNetworkIPAddress"), 0, &cf);
          if (!v63)
          {
            v16 = *(const void **)(v6 + 40);
            v17 = cf;
            *(_QWORD *)(v6 + 40) = cf;
            if (v17)
              CFRetain(v17);
            if (v16)
              CFRelease(v16);
LABEL_34:
            *(_DWORD *)(v6 + 76) = APSGetFBOPropertyInt64();
            if (v63)
            {
              if (gLogCategory_APTransportStream <= 30
                && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
              {
                LogPrintF();
              }
              v63 = 0;
            }
            v51 = APTransportConnectionGetCMBaseObject(*(_QWORD *)(v6 + 24));
            v52 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
            if (v52)
            {
              v63 = v52(v51, CFSTR("LocalNetworkIPAddress"), 0, &theData);
              if (v63)
                v53 = 1;
              else
                v53 = theData == 0;
              if (!v53)
              {
                if (CFDataGetLength(theData) == 28)
                {
                  v82.location = 0;
                  v82.length = 28;
                  CFDataGetBytes(theData, v82, (UInt8 *)(v6 + 48));
LABEL_121:
                  *(_DWORD *)(v6 + 16) = 0;
                  if (*(_BYTE *)(v6 + 9))
                  {
                    *(_BYTE *)(v6 + 8) = 1;
                    *(_DWORD *)(v6 + 12) = 0;
                    CFRetain(v3);
                    v54 = *(NSObject **)(v8 + 184);
                    valuePtr = MEMORY[0x1E0C809B0];
                    v65 = 0x40000000;
                    v66 = __stream_eventReceived_block_invoke_0;
                    v67 = &__block_descriptor_tmp_132;
                    v68 = (_QWORD *)v8;
                    v69 = (uint64_t *)v3;
                    dispatch_async(v54, &valuePtr);
                  }
LABEL_123:
                  v37 = *(NSObject **)v6;
LABEL_124:
                  dispatch_semaphore_signal(v37);
                  goto LABEL_136;
                }
                APSLogErrorAt();
                v59 = -6742;
LABEL_149:
                v63 = v59;
                goto LABEL_136;
              }
            }
            else
            {
              v63 = -12782;
            }
            if (gLogCategory_APTransportStream <= 30
              && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
            }
            v63 = 0;
            goto LABEL_121;
          }
        }
        else
        {
          v63 = -12782;
        }
        APSLogErrorAt();
        goto LABEL_136;
      case 6:
        *(_DWORD *)(v6 + 16) = 0;
        *(_BYTE *)(v6 + 8) = 0;
        if (v4)
        {
          v18 = CFGetTypeID(v4);
          if (v18 == CFNumberGetTypeID())
          {
            LODWORD(valuePtr) = 0;
            CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr);
            FigCreateBlockBufferCopyingMemoryBlock();
          }
        }
        CFRetain(v3);
        if (v62)
        {
          CFRetain(v62);
          v19 = v62;
        }
        else
        {
          v19 = 0;
        }
        v27 = *(NSObject **)(v8 + 184);
        valuePtr = MEMORY[0x1E0C809B0];
        v65 = 0x40000000;
        v66 = __stream_eventReceived_block_invoke_3_0;
        v67 = &__block_descriptor_tmp_135;
        v68 = (_QWORD *)v8;
        v69 = (uint64_t *)v3;
        v70 = (uint64_t)v19;
        dispatch_async(v27, &valuePtr);
        APTransportSessionHandleStreamEvent(*(const void **)(v8 + 80), v3, 0, v4);
        goto LABEL_136;
      case 7:
        v20 = CMBaseObjectGetDerivedStorage();
        v21 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v21)
          v22 = (const void *)v21(v4);
        else
          v22 = 0;
        v28 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
        if (v28)
          v29 = v28(v4);
        else
          v29 = 1634957678;
        v78 = 0;
        v79 = &v78;
        v80 = 0x2000000000;
        v81 = 0;
        if (*(_BYTE *)(v20 + 72))
        {
          v56 = -16617;
        }
        else
        {
          v30 = *(_DWORD *)(v20 + 24);
          v31 = v30 == 0;
          v32 = 56;
          if (v30)
            v33 = 56;
          else
            v33 = 48;
          if (!v31)
            v32 = 48;
          v34 = *(_QWORD *)(v20 + v32);
          if (v29 == 1937337955)
          {
            v76[0] = 0;
            v76[1] = v76;
            v76[2] = 0x2000000000;
            v77 = 0;
            v38 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (v38)
              v39 = v38(v4);
            else
              v39 = 0;
            v46 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
            if (v46)
              v47 = v46(v4);
            else
              v47 = 0;
            if (*(_BYTE *)(v34 + 9))
            {
              CFRetain(v3);
              if (v4)
                CFRetain(v4);
              if (v22)
                CFRetain(v22);
              v50 = *(NSObject **)(v20 + 184);
              valuePtr = MEMORY[0x1E0C809B0];
              v65 = 0x40000000;
              v66 = __stream_packageReceived_block_invoke_2;
              v67 = &unk_1E825A348;
              v70 = v20;
              v71 = v3;
              v72 = v4;
              v73 = v22;
              v68 = v76;
              v69 = &v78;
              v74 = v39;
              v75 = v47;
              dispatch_async(v50, &valuePtr);
            }
            _Block_object_dispose(v76, 8);
          }
          else if (v29 == 1919970425)
          {
            v40 = *(_QWORD *)(v20 + v33);
            v41 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (v41)
              v42 = v41(v4);
            else
              v42 = 0;
            if ((void *)v42 == v3)
            {
              if (*(_BYTE *)(v40 + 9))
              {
                v48 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                v49 = v48 ? v48(v4) : 0;
                *(_DWORD *)(v20 + 152) = v49;
                *(_QWORD *)(v20 + 160) = v22;
                v22 = 0;
              }
              else
              {
                *(_DWORD *)(v20 + 152) = -16613;
              }
              v55 = *(NSObject **)(v20 + 168);
              if (v55)
                dispatch_semaphore_signal(v55);
            }
          }
          else if (v29 == 1634957678 && *(_BYTE *)(v34 + 9))
          {
            CFRetain(v3);
            if (v4)
              CFRetain(v4);
            if (v22)
              CFRetain(v22);
            v35 = *(NSObject **)(v20 + 184);
            valuePtr = MEMORY[0x1E0C809B0];
            v65 = 0x40000000;
            v66 = __stream_packageReceived_block_invoke;
            v67 = &__block_descriptor_tmp_142;
            v68 = (_QWORD *)v20;
            v69 = (uint64_t *)v3;
            v70 = (uint64_t)v4;
            v71 = v22;
            dispatch_async(v35, &valuePtr);
          }
          v56 = 0;
        }
        v57 = (const void *)v79[3];
        if (v57)
          CFRelease(v57);
        if (v22)
          CFRelease(v22);
        _Block_object_dispose(&v78, 8);
        v63 = v56;
        goto LABEL_136;
      case 8:
        v23 = CMBaseObjectGetDerivedStorage();
        if (*(_BYTE *)(v23 + 72))
          goto LABEL_136;
        v24 = v23;
        v25 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        v26 = v25 ? v25(v4) : 0;
        if ((void *)v26 != v3)
          goto LABEL_136;
        *(_DWORD *)(v24 + 152) = -16612;
        v36 = *(const void **)(v24 + 160);
        if (v36)
        {
          CFRelease(v36);
          *(_QWORD *)(v24 + 160) = 0;
        }
        v37 = *(NSObject **)(v24 + 168);
        goto LABEL_124;
      default:
        goto LABEL_136;
    }
  }
  if ((v2 - 4) <= 2)
    *(_DWORD *)(v6 + 16) = v2;
LABEL_136:
  if (v62)
    CFRelease(v62);
  if (cf)
    CFRelease(cf);
  if (theData)
    CFRelease(theData);
  if (v63 && v63 != -16618)
    APSLogErrorAt();
  v58 = *(const void **)(a1 + 40);
  if (v58)
    CFRelease(v58);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void stream_recordConnectionEvent(int a1, int a2, const __CFData *a3)
{
  _QWORD *DerivedStorage;
  uint64_t ConnectionAddressFromEventData;
  const void *v8;
  uint64_t v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  CFAbsoluteTimeGetCurrent();
  if (*DerivedStorage == 1702260340)
  {
    if (a2 == 3 || a2 == 5)
    {
LABEL_20:
      APSEventRecorderRecordEventWithFlagsAtTime();
    }
    else if (gLogCategory_APTransportStream <= 60
           && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
    {
LABEL_16:
      LogPrintF();
    }
  }
  else if (*DerivedStorage == 1668575852)
  {
    switch(a2)
    {
      case 1:
      case 2:
        goto LABEL_20;
      case 3:
        if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144))
        {
          ConnectionAddressFromEventData = stream_createConnectionAddressFromEventData(a1, a3);
          if (ConnectionAddressFromEventData)
          {
            v8 = (const void *)ConnectionAddressFromEventData;
            CFDictionarySetDouble();
            CFRelease(v8);
          }
        }
        goto LABEL_20;
      case 5:
        if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144))
        {
          v9 = stream_createConnectionAddressFromEventData(a1, a3);
          if (v9)
          {
            v10 = (const void *)v9;
            CFDictionaryGetDouble();
            APSEventRecorderRecordEventWithFlagsAtTime();
            CFRelease(v10);
          }
        }
        goto LABEL_20;
      default:
        if (gLogCategory_APTransportStream <= 60
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          goto LABEL_16;
        }
        break;
    }
  }
}

void __stream_eventReceived_block_invoke_0(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD);

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v2 + 200);
  if (v3)
    v3(*(_QWORD *)(a1 + 40), 1651470958, 0, *(_QWORD *)(v2 + 192));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __stream_eventReceived_block_invoke_2_0(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD);
  const void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v2 + 200);
  if (v3)
    v3(*(_QWORD *)(a1 + 40), 1668179564, *(_QWORD *)(a1 + 48), *(_QWORD *)(v2 + 192));
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __stream_eventReceived_block_invoke_3_0(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD);
  const void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(v2 + 200);
  if (v3)
    v3(*(_QWORD *)(a1 + 40), 1684628836, *(_QWORD *)(a1 + 48), *(_QWORD *)(v2 + 192));
  v4 = *(const void **)(a1 + 48);
  if (v4)
    CFRelease(v4);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t stream_createConnectionAddressFromEventData(int a1, CFDataRef theData)
{
  uint64_t result;
  UInt8 buffer[8];
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  CFRange v9;

  v8 = 0;
  *(_QWORD *)buffer = 0;
  v5 = 0;
  v7 = 0;
  v6 = 0;
  if (!theData)
    return 0;
  if (CFDataGetLength(theData) != 28)
  {
    if (gLogCategory_APTransportStream > 60
      || gLogCategory_APTransportStream == -1 && !_LogCategory_Initialize())
    {
      return 0;
    }
LABEL_10:
    LogPrintF();
    return 0;
  }
  v9.location = 0;
  v9.length = 28;
  CFDataGetBytes(theData, v9, buffer);
  result = CFStringCreateF();
  if (!result)
  {
    if (gLogCategory_APTransportStream > 60
      || gLogCategory_APTransportStream == -1 && !_LogCategory_Initialize())
    {
      return 0;
    }
    goto LABEL_10;
  }
  return result;
}

void __stream_packageReceived_block_invoke(uint64_t a1)
{
  void (*v2)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  const void *v7;
  const void *v8;

  v2 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 200);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v5)
      v6 = v5(v4);
    else
      v6 = 0;
    v2(v3, v6, *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192));
  }
  v7 = *(const void **)(a1 + 56);
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(a1 + 48);
  if (v8)
    CFRelease(v8);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __stream_packageReceived_block_invoke_2(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  int v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  _QWORD block[8];
  int v16;

  v2 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 208);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v5)
      v6 = v5(v4);
    else
      v6 = 0;
    v7 = v2(v3, v6, *(_QWORD *)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 192), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  else
  {
    v7 = -16616;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != -16618)
  {
    CFRetain(*(CFTypeRef *)(a1 + 56));
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(const void **)(*(_QWORD *)(v8 + 8) + 24);
    if (v9)
    {
      CFRetain(v9);
      v8 = *(_QWORD *)(a1 + 40);
    }
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(NSObject **)(*(_QWORD *)(a1 + 48) + 64);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __stream_packageReceived_block_invoke_3;
    block[3] = &unk_1E825A320;
    v12 = *(_QWORD *)(a1 + 80);
    block[6] = v10;
    block[7] = v12;
    v16 = *(_DWORD *)(a1 + 88);
    block[4] = *(_QWORD *)(a1 + 32);
    block[5] = v8;
    dispatch_async(v11, block);
  }
  v13 = *(const void **)(a1 + 72);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 64);
  if (v14)
    CFRelease(v14);
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

void __stream_packageReceived_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t *);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  const void *v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned int *)(a1 + 64);
  v4 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v32 = 0;
  if (*(_BYTE *)(DerivedStorage + 72))
  {
    APSLogErrorAt();
    v9 = 0;
  }
  else
  {
    v7 = DerivedStorage;
    v8 = 48;
    if (!*(_DWORD *)(DerivedStorage + 24))
      v8 = 56;
    v9 = *(_QWORD *)(DerivedStorage + v8);
    v10 = *(_QWORD *)(v9 + 24);
    v11 = *(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v11 || v11(v10, &v32))
      goto LABEL_26;
    v12 = v32;
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v13)
      v13(v12, v5);
    v14 = *(_QWORD *)(v7 + 96);
    if (v14)
    {
      v15 = v32;
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (v16)
        v16(v15, v14);
    }
    v17 = v32;
    v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v18)
      v18(v17, v2);
    v19 = v32;
    v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
    if (v20)
      v20(v19, v4);
    v21 = v32;
    v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
    if (v22)
      v22(v21, v3);
    v23 = v32;
    v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (v24)
      v24(v23, 1919970425);
    if (gLogCategory_APTransportStream <= 10
      && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    v25 = *(_QWORD *)(v9 + 24);
    v26 = v32;
    v27 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v27 || v27(v25, v26))
LABEL_26:
      APSLogErrorAt();
  }
  v28 = v32;
  if (v32)
  {
    v29 = *(_QWORD *)(v9 + 24);
    v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v30)
      v30(v29, v28);
  }
  v31 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v31)
    CFRelease(v31);
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void __stream_waitUntilConnectionSetup_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v2 + 72))
  {
    APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16617;
  }
  else
  {
    stream_getConnectionState(v2, *(_DWORD *)(a1 + 72), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (*(_BYTE *)(v3 + 9))
    {
      if (!*(_BYTE *)(v3 + 8))
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_QWORD *)v3;
        dispatch_retain(*(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
        if (gLogCategory_APTransportStream <= 50
          && (gLogCategory_APTransportStream != -1 || _LogCategory_Initialize()))
        {
          LogPrintF();
        }
      }
    }
    else
    {
      APSLogErrorAt();
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = APSSignalErrorAt();
    }
  }
}

uint64_t __stream_waitUntilConnectionSetup_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v2 + 72))
  {
    result = APSLogErrorAt();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16617;
  }
  else
  {
    result = stream_getConnectionState(v2, *(_DWORD *)(a1 + 64), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (!*(_BYTE *)(v4 + 8))
    {
      *(_BYTE *)(v4 + 9) = 0;
      v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 12);
      if (v5 == -71882)
        v6 = -71891;
      else
        v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 12);
      if (v5 == -71880)
        v7 = -71890;
      else
        v7 = v6;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 12) = 0;
    }
    if (gLogCategory_APTransportStream <= 50)
    {
      if (gLogCategory_APTransportStream != -1)
        return LogPrintF();
      result = _LogCategory_Initialize();
      if ((_DWORD)result)
        return LogPrintF();
    }
  }
  return result;
}

uint64_t APTTrafficMetricsGetTypeID()
{
  if (gAPTTrafficMetricsInitOnce != -1)
    dispatch_once_f(&gAPTTrafficMetricsInitOnce, 0, (dispatch_function_t)_APTTrafficMetricsGetTypeID);
  return gAPTTrafficMetricsTypeID;
}

uint64_t _APTTrafficMetricsGetTypeID()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gAPTTrafficMetricsTypeID = result;
  return result;
}

uint64_t APTTrafficMetricsCreate(int *a1, int *a2, uint64_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Instance;
  uint64_t v11;
  NSObject *v12;
  dispatch_source_t v13;
  uint64_t v14;
  char label[64];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = mach_absolute_time();
  label[0] = IsAppleInternalBuild();
  if (APSSettingsGetBooleanIfPresent()
    && *a2 <= 50
    && (*a2 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v9 = 0;
  if (a2 && a1 && label[0])
  {
    if (gAPTTrafficMetricsInitOnce != -1)
      dispatch_once_f(&gAPTTrafficMetricsInitOnce, 0, (dispatch_function_t)_APTTrafficMetricsGetTypeID);
    Instance = _CFRuntimeCreateInstance();
    if (!Instance)
    {
      APSLogErrorAt();
      return 4294960568;
    }
    v11 = Instance;
    bzero((void *)(Instance + 16), 0x2B8uLL);
    *(_QWORD *)(v11 + 16) = a1;
    *(_QWORD *)(v11 + 24) = a2;
    *(_WORD *)(v11 + 32) = CUObfuscatedPtr();
    *(_QWORD *)(v11 + 88) = 1;
    *(_QWORD *)label = 5;
    if (APSSettingsGetInt64IfPresent()
      && *a1 <= 50
      && (*a1 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    *(_QWORD *)(v11 + 96) = SecondsToUpTicks() / 0xAuLL;
    *(_QWORD *)(v11 + 72) = v8;
    *(_DWORD *)(v11 + 104) = a4;
    SNPrintF();
    v12 = dispatch_queue_create(label, 0);
    *(_QWORD *)(v11 + 40) = v12;
    if (v12 && (v13 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v12), (*(_QWORD *)(v11 + 48) = v13) != 0))
    {
      v14 = APSAtomicMessageQueueCreate();
      if ((_DWORD)v14)
      {
        v9 = v14;
      }
      else
      {
        v9 = APSRealTimeSignalCreate();
        if (!(_DWORD)v9)
        {
          dispatch_set_context(*(dispatch_object_t *)(v11 + 48), (void *)v11);
          dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v11 + 48), (dispatch_function_t)aptTrafficMetrics_intervalTimerHandler);
          dispatch_source_set_timer(*(dispatch_source_t *)(v11 + 48), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          dispatch_resume(*(dispatch_object_t *)(v11 + 48));
          *a3 = v11;
          return v9;
        }
      }
      APSLogErrorAt();
    }
    else
    {
      APSLogErrorAt();
      v9 = 0;
    }
    CFRelease((CFTypeRef)v11);
  }
  return v9;
}

void aptTrafficMetrics_intervalTimerHandler(uint64_t a1)
{
  int64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  int v16;
  NSObject *v17;
  CFAbsoluteTime Current;
  dispatch_time_t v19;
  _BYTE v20[22];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1 && *(_QWORD *)(a1 + 112))
  {
    v2 = (int64x2_t *)(a1 + 392);
    if (*(_DWORD *)(a1 + 104) == 4)
    {
      aptTrafficMetrics_handleQueuedEvents(a1);
      v3 = mach_absolute_time();
      aptTrafficMetrics_fillSendingWindowsRep(a1, v3 - *(_QWORD *)(a1 + 72), (uint64_t)v20);
      v4 = 0;
      *(_QWORD *)(a1 + 392) += *(_QWORD *)(a1 + 128);
      *(int64x2_t *)(a1 + 408) = vaddq_s64(*(int64x2_t *)(a1 + 408), *(int64x2_t *)(a1 + 144));
      v5 = 1;
      do
      {
        v6 = *(_QWORD *)(a1 + v4 + 320);
        *(_QWORD *)(a1 + v4 + 584) += v6;
        if (v6)
          v7 = v4 == 48;
        else
          v7 = 1;
        if (!v7)
          v5 = 0;
        v4 += 8;
      }
      while (v4 != 72);
      if (*(_BYTE *)(a1 + 80))
        v8 = v5 == 0;
      else
        v8 = 1;
      if (v8)
      {
        v9 = **(_DWORD **)(a1 + 16);
        if (v9 <= 50 && (v9 != -1 || _LogCategory_Initialize()))
        {
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          LogPrintF();
        }
      }
      *(_QWORD *)(a1 + 384) = 0;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
    }
    else
    {
      aptTrafficMetrics_handleQueuedEvents(a1);
      v3 = mach_absolute_time();
      v10 = a1 + 128 + 8 * *(unsigned int *)(a1 + 672);
      *(_QWORD *)(v10 + 192) += v3 - *(_QWORD *)(a1 + 688);
      *(_QWORD *)(a1 + 688) = v3;
      aptTrafficMetrics_fillSendingWindowsRep(a1, v3 - *(_QWORD *)(a1 + 72), (uint64_t)v20);
      v11 = 0;
      *v2 = vaddq_s64(*v2, *(int64x2_t *)(a1 + 128));
      *(_QWORD *)(a1 + 416) += *(_QWORD *)(a1 + 152);
      v12 = 1;
      do
      {
        v13 = *(_QWORD *)(a1 + v11 + 320);
        *(_QWORD *)(a1 + v11 + 584) += v13;
        if (v13)
          v14 = v11 == 8;
        else
          v14 = 1;
        if (!v14)
          v12 = 0;
        v11 += 8;
      }
      while (v11 != 72);
      if (*(_BYTE *)(a1 + 80))
        v15 = v12 == 0;
      else
        v15 = 1;
      if (v15)
      {
        v16 = **(_DWORD **)(a1 + 16);
        if (v16 <= 50 && (v16 != -1 || _LogCategory_Initialize()))
        {
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          UpTicksToMilliseconds();
          LogPrintF();
        }
      }
      *(_QWORD *)(a1 + 384) = 0;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_BYTE *)(a1 + 80) = v12;
    }
    *(_QWORD *)(a1 + 72) = v3;
    if (!*(_BYTE *)(a1 + 120))
    {
      v17 = *(NSObject **)(a1 + 48);
      Current = CFAbsoluteTimeGetCurrent();
      v19 = dispatch_time(0, (uint64_t)(-(Current - (floor(Current / 5.0) + 1.0) * 5.0) * 1000000000.0));
      dispatch_source_set_timer(v17, v19, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    }
  }
}

uint64_t APTTrafficMetricsConnectionFormed(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsConnectionClosed(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsSendStarted(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsSendFinished(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsResponseReceived(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsDataAvailable(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsCanWriteData(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsRequestDataStarted(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsRequestDataFinished(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsConsumedAllData(uint64_t result)
{
  if (result)
  {
    kdebug_trace();
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsMessageReadStarted(uint64_t result)
{
  if (result)
  {
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsMessageReadFinished(uint64_t result)
{
  if (result)
  {
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

uint64_t APTTrafficMetricsMessageProcessed(uint64_t result)
{
  if (result)
  {
    mach_absolute_time();
    APSAtomicMessageQueueSendMessage();
    return APSRealTimeSignalRaise();
  }
  return result;
}

void _APTTrafficMetricsFinalize(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  _QWORD block[5];

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 48));
  if (*(_QWORD *)(a1 + 64))
    APSRealTimeSignalInvalidate();
  v2 = *(NSObject **)(a1 + 40);
  if (v2 && *(_QWORD *)(a1 + 56))
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___APTTrafficMetricsFinalize_block_invoke;
    block[3] = &__block_descriptor_tmp_16;
    block[4] = a1;
    dispatch_sync(v2, block);
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
    CFRelease(v3);
  v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v5 = *(NSObject **)(a1 + 40);
  if (v5)
    dispatch_release(v5);
  v6 = *(const void **)(a1 + 64);
  if (v6)
    CFRelease(v6);
}

uint64_t aptTrafficMetrics_handleQueuedEvents(uint64_t a1)
{
  uint64_t result;
  int v3;

  if (!a1 || !*(_QWORD *)(a1 + 56))
    return APSLogErrorAt();
  for (result = APSAtomicMessageQueueReadMessage(); (_DWORD)result; result = APSAtomicMessageQueueReadMessage())
  {
    v3 = **(_DWORD **)(a1 + 16);
    if (v3 <= 10 && (v3 != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  return result;
}

uint64_t aptTrafficMetrics_fillSendingWindowsRep(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = 0;
  v6 = 0;
  if (a2 / *(_QWORD *)(a1 + 96) >= 0x13)
    v7 = 19;
  else
    v7 = a2 / *(_QWORD *)(a1 + 96);
  do
  {
    if (*(_QWORD *)(a1 + 160 + 8 * v5) > v6)
      v6 = *(_QWORD *)(a1 + 160 + 8 * v5);
    ++v5;
  }
  while (v7 + 1 != v5);
  v8 = *(_QWORD *)(a1 + 88);
  if (v6 > v8)
    *(_QWORD *)(a1 + 88) = v6;
  result = UpTicksToMilliseconds();
  if (v7 && result - 500 * v7 <= 0x63)
    v7 = (__PAIR128__(v7, *(_QWORD *)(a1 + 8 * v7 + 160)) - 1) >> 64;
  v10 = 0;
  v11 = 19;
  if (v7 < 0x13)
    v11 = v7;
  v12 = v11 + 1;
  do
  {
    *(_BYTE *)(a3 + v10) = (unint64_t)(*(_QWORD *)(a1 + 88) + 9 * *(_QWORD *)(a1 + 160 + 8 * v10) - 1)
                         / *(_QWORD *)(a1 + 88)
                         + 48;
    ++v10;
  }
  while (v12 != v10);
  if (v6 > v8)
  {
    *(_BYTE *)(a3 + v12) = 42;
    v12 = v10 + 1;
  }
  *(_BYTE *)(a3 + v12) = 0;
  return result;
}

void handleBluetoothChangedNotification(uint64_t a1, void *a2)
{
  NSObject *v3;
  _QWORD block[5];

  if (gLogCategory_APDBluetoothHelper <= 40
    && (gLogCategory_APDBluetoothHelper != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  v3 = objc_msgSend(a2, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __handleBluetoothChangedNotification_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_sync(v3, block);
}

uint64_t APDBluetoothHelperGetTypeID()
{
  if (gAPDBluetoothHelperInitOnce != -1)
    dispatch_once(&gAPDBluetoothHelperInitOnce, &__block_literal_global_17);
  return gAPDBluetoothHelperTypeID;
}

uint64_t APDBluetoothHelperCreate(_QWORD *a1)
{
  uint64_t Instance;
  _QWORD *v3;
  APDBrowserBluetoothHelper *v4;
  uint64_t v5;

  if (gAPDBluetoothHelperInitOnce != -1)
    dispatch_once(&gAPDBluetoothHelperInitOnce, &__block_literal_global_17);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v3 = (_QWORD *)Instance;
    *(_QWORD *)(Instance + 16) = 0;
    v4 = objc_alloc_init(APDBrowserBluetoothHelper);
    v3[2] = v4;
    if (v4)
    {
      v5 = 0;
      *a1 = v3;
    }
    else
    {
      v5 = 4294895116;
      APSLogErrorAt();
      CFRelease(v3);
    }
  }
  else
  {
    v5 = 4294895116;
    APSLogErrorAt();
  }
  return v5;
}

uint64_t APDBluetoothHelperSetEventHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD block[9];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v6 = *(void **)(a1 + 16);
  v7 = objc_msgSend(v6, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperSetEventHandler_block_invoke;
  block[3] = &unk_1E8254DC0;
  block[4] = v6;
  block[5] = &v11;
  block[6] = a2;
  block[7] = a3;
  block[8] = a1;
  dispatch_sync(v7, block);
  v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1C93FA370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APDBluetoothHelperStartListeningToEvent(uint64_t a1, int a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v3 = *(void **)(a1 + 16);
  v4 = objc_msgSend(v3, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperStartListeningToEvent_block_invoke;
  block[3] = &unk_1E825A518;
  block[4] = v3;
  block[5] = &v9;
  v8 = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1C93FA464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APDBluetoothHelperStopListeningToEvent(uint64_t a1, int a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v3 = *(void **)(a1 + 16);
  v4 = objc_msgSend(v3, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperStopListeningToEvent_block_invoke;
  block[3] = &unk_1E825A518;
  block[4] = v3;
  block[5] = &v9;
  v8 = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1C93FA554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APDBluetoothHelperQueryBluetoothPower(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v3 = *(void **)(a1 + 16);
  v4 = objc_msgSend(v3, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperQueryBluetoothPower_block_invoke;
  block[3] = &unk_1E8254D98;
  block[4] = v3;
  block[5] = &v8;
  block[6] = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1C93FA644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APDBluetoothHelperSetBluetoothPower(uint64_t a1, char a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[6];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v3 = *(void **)(a1 + 16);
  v4 = objc_msgSend(v3, "queue");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __APDBluetoothHelperSetBluetoothPower_block_invoke;
  block[3] = &unk_1E8254E10;
  block[4] = v3;
  block[5] = &v9;
  v8 = a2;
  dispatch_sync(v4, block);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1C93FA734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t APDBluetoothHelperInvalidate(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v1 = *(void **)(a1 + 16);
  v2 = objc_msgSend(v1, "queue");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __APDBluetoothHelperInvalidate_block_invoke;
  v5[3] = &unk_1E8254D48;
  v5[4] = v1;
  v5[5] = &v6;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1C93FA81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __handleBluetoothChangedNotification_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleBluetoothChangedNotificationInternal:", 0);
}

void _APDBluetoothHelperFinalize(uint64_t a1)
{

}

uint64_t APBrowserCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  dispatch_queue_t v10;
  dispatch_queue_t v11;
  const void *Value;
  CFTypeRef v13;
  CFTypeID v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t Int64;
  const void *v21;
  int v22;
  const char *v23;
  __CFString **v24;
  const __CFString *v25;
  __CFString *v26;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v28;
  const void *v29;
  _BOOL4 v30;
  _BOOL4 v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __CFDictionary *v43;
  __CFDictionary *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CFMutableDictionaryRef v48;
  CFMutableDictionaryRef v49;
  CFMutableDictionaryRef v50;
  CFMutableDictionaryRef v51;
  CFMutableDictionaryRef v52;
  uint64_t v53;
  uint64_t v54;
  CFMutableDictionaryRef v55;
  const void *SharedHelper;
  CFTypeRef v57;
  uint64_t v58;
  CFMutableDictionaryRef v59;
  CFMutableDictionaryRef v60;
  int v61;
  _QWORD *v63;

  if (!a3)
  {
    APSLogErrorAt();
    return 0;
  }
  APBrowserGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
  {
    v15 = v8;
    APSLogErrorAt();
    return v15;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = a3;
  v10 = dispatch_queue_create("APBrowserInternalQueue", 0);
  *(_QWORD *)(DerivedStorage + 8) = v10;
  if (!v10)
    goto LABEL_74;
  v11 = dispatch_queue_create("APBrowserEventQueue", 0);
  *(_QWORD *)(DerivedStorage + 16) = v11;
  if (!v11)
    goto LABEL_74;
  if (!a2)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    goto LABEL_16;
  }
  Value = CFDictionaryGetValue(a2, CFSTR("EventRecorder"));
  if (!Value)
  {
    *(_QWORD *)(DerivedStorage + 368) = 0;
    goto LABEL_12;
  }
  v13 = CFRetain(Value);
  *(_QWORD *)(DerivedStorage + 368) = v13;
  if (!v13 || (v14 = CFGetTypeID(v13), v14 == APSEventRecorderGetTypeID()))
  {
LABEL_12:
    *(CFAbsoluteTime *)(DerivedStorage + 416) = CFAbsoluteTimeGetCurrent();
    *(_BYTE *)(DerivedStorage + 248) = CFDictionaryGetInt64() != 0;
    v18 = CFDictionaryGetInt64() != 0;
    v17 = CFDictionaryGetInt64() != 0;
    v16 = CFDictionaryGetInt64() != 0;
    Int64 = CFDictionaryGetInt64();
    v21 = CFDictionaryGetValue(a2, CFSTR("BrokerManager"));
    if (v21)
      v21 = CFRetain(v21);
    *(_QWORD *)(DerivedStorage + 328) = v21;
    v19 = CFDictionaryGetInt64() != 0;
    if (Int64)
    {
      v22 = 0;
      v23 = "SidePlay";
      v24 = &kAPBonjourBrowserServiceType_SidePlay;
      v25 = CFSTR("SidePlayBonjourInfo");
      goto LABEL_17;
    }
LABEL_16:
    v22 = 1;
    v23 = "AirPlay";
    v24 = kAPBonjourBrowserServiceType_AirPlay;
    v25 = CFSTR("AirPlayBonjourInfo");
LABEL_17:
    v26 = *v24;
    *(_QWORD *)(DerivedStorage + 56) = v25;
    *(_QWORD *)(DerivedStorage + 64) = v26;
    *(_QWORD *)(DerivedStorage + 72) = v23;
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v63 = a4;
      v28 = Mutable;
      CFDictionarySetInt64();
      v29 = (const void *)*MEMORY[0x1E0C9AE50];
      v30 = v19;
      v31 = v16;
      v32 = (const void *)*MEMORY[0x1E0C9AE40];
      if (v22)
        v33 = (const void *)*MEMORY[0x1E0C9AE50];
      else
        v33 = (const void *)*MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v28, CFSTR("raopEnabled"), v33);
      CFDictionarySetValue(v28, CFSTR("localEnabled"), v33);
      if (v18)
        v34 = v29;
      else
        v34 = v32;
      CFDictionarySetValue(v28, CFSTR("partialAWDLAllowed"), v34);
      if (*(_BYTE *)(DerivedStorage + 248))
        v35 = v29;
      else
        v35 = v32;
      CFDictionarySetValue(v28, CFSTR("fullAWDLAllowed"), v35);
      if (v17)
        v36 = v29;
      else
        v36 = v32;
      CFDictionarySetValue(v28, CFSTR("openFullNANAllowed"), v36);
      if (v31)
        v37 = v29;
      else
        v37 = v32;
      CFDictionarySetValue(v28, CFSTR("securePartialNANAllowed"), v37);
      if (v30)
        v38 = v29;
      else
        v38 = v32;
      CFDictionarySetValue(v28, CFSTR("browseForAltReceiver"), v38);
      CFDictionarySetValue(v28, CFSTR("enableCache"), v33);
      v39 = APBonjourBrowserCreate((uint64_t)a1, (uint64_t)v28, (_QWORD *)(DerivedStorage + 80));
      if ((_DWORD)v39)
      {
        v15 = v39;
      }
      else
      {
        v40 = APBonjourBrowserSetEventHandler(*(_QWORD *)(DerivedStorage + 80), (uint64_t)browser_handleBonjourEventExternal, 0);
        if ((_DWORD)v40)
        {
          v15 = v40;
        }
        else
        {
          CFRetain(0);
          *(_BYTE *)(DerivedStorage + 228) = 0;
          v41 = APDBluetoothHelperCreate((_QWORD *)(DerivedStorage + 88));
          if ((_DWORD)v41)
          {
            v15 = v41;
          }
          else
          {
            v42 = APDBluetoothHelperSetEventHandler(*(_QWORD *)(DerivedStorage + 88), (uint64_t)browser_handleBluetoothHelperEventExternal, 0);
            if (!(_DWORD)v42)
            {
              CFRetain(0);
              if (v30)
              {
                v43 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (!v43)
                {
                  APSLogErrorAt();
                  v15 = 4294960568;
                  goto LABEL_70;
                }
                v44 = v43;
                CFDictionarySetValue(v43, CFSTR("BrowseForAltReceivers"), v29);
              }
              else
              {
                v44 = 0;
              }
              v45 = APBrowserBTLEManagerCreate((uint64_t)v44, (id **)(DerivedStorage + 96));
              if ((_DWORD)v45)
              {
                v15 = v45;
              }
              else
              {
                v46 = APBrowserBTLEManagerSetEventHandler(*(_QWORD *)(DerivedStorage + 96), (uint64_t)browser_handleBTLEEventExternal, 0);
                if ((_DWORD)v46)
                {
                  v15 = v46;
                }
                else
                {
                  CFRetain(0);
                  v47 = APBrowserDeviceQueryManagerGetInfoCreate((_QWORD *)(DerivedStorage + 104));
                  if ((_DWORD)v47)
                  {
                    v15 = v47;
                  }
                  else
                  {
                    v48 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    *(_QWORD *)(DerivedStorage + 112) = v48;
                    if (!v48)
                      goto LABEL_65;
                    v49 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    *(_QWORD *)(DerivedStorage + 152) = v49;
                    if (!v49)
                      goto LABEL_65;
                    v50 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    *(_QWORD *)(DerivedStorage + 160) = v50;
                    if (!v50)
                      goto LABEL_65;
                    v51 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    *(_QWORD *)(DerivedStorage + 168) = v51;
                    if (!v51)
                      goto LABEL_65;
                    v52 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    *(_QWORD *)(DerivedStorage + 176) = v52;
                    if (!v52)
                      goto LABEL_65;
                    v53 = APBrowserRapportManagerCreate();
                    if ((_DWORD)v53)
                    {
                      v15 = v53;
                    }
                    else
                    {
                      v54 = APBrowserRapportManagerSetEventHandler(*(_QWORD *)(DerivedStorage + 144), (uint64_t)browser_handleRapportEventExternal, 0);
                      if ((_DWORD)v54)
                      {
                        v15 = v54;
                      }
                      else
                      {
                        CFRetain(0);
                        v55 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                        *(_QWORD *)(DerivedStorage + 344) = v55;
                        if (!v55)
                          goto LABEL_65;
                        SharedHelper = (const void *)APConnectivityHelperGetSharedHelper();
                        if (!SharedHelper)
                        {
                          *(_QWORD *)(DerivedStorage + 184) = 0;
                          goto LABEL_65;
                        }
                        v57 = CFRetain(SharedHelper);
                        *(_QWORD *)(DerivedStorage + 184) = v57;
                        if (!v57)
                          goto LABEL_65;
                        v58 = APConnectivityHelperRegisterEventHandler((uint64_t)v57, 0, (uint64_t)browser_handleConnectivityHelperEventExternal);
                        if (!(_DWORD)v58)
                        {
                          v59 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                          *(_QWORD *)(DerivedStorage + 200) = v59;
                          if (v59)
                          {
                            if (!IsAppleInternalBuild()
                              || (v60 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
                                  (*(_QWORD *)(DerivedStorage + 216) = v60) != 0))
                            {
                              v61 = **(_DWORD **)DerivedStorage;
                              if (v61 <= 50 && (v61 != -1 || _LogCategory_Initialize()))
                                LogPrintF();
                              browser_sendPowerLogDiscoveryModeEvent();
                              v15 = 0;
                              *v63 = 0;
                              if (!v44)
                                goto LABEL_70;
LABEL_69:
                              CFRelease(v44);
LABEL_70:
                              CFRelease(v28);
                              return v15;
                            }
                          }
LABEL_65:
                          APSLogErrorAt();
                          v15 = 4294960568;
                          if (!v44)
                            goto LABEL_70;
                          goto LABEL_69;
                        }
                        v15 = v58;
                      }
                    }
                  }
                }
              }
              APSLogErrorAt();
              if (!v44)
                goto LABEL_70;
              goto LABEL_69;
            }
            v15 = v42;
          }
        }
      }
      APSLogErrorAt();
      goto LABEL_70;
    }
LABEL_74:
    APSLogErrorAt();
    return 4294960568;
  }
  APSLogErrorAt();
  return 4294960591;
}

uint64_t browser_handleBonjourEventExternal(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3)
    CFRetain(a3);
  return APSDispatchAsyncFHelper();
}

void browser_handleBluetoothHelperEventExternal(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD block[6];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3)
    CFRetain(a3);
  v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __browser_handleBluetoothHelperEventExternal_block_invoke;
  block[3] = &__block_descriptor_52_e5_v8__0l;
  v10 = a2;
  block[4] = a4;
  block[5] = a3;
  dispatch_async(v8, block);
}

void browser_handleBTLEEventExternal(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD block[6];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3)
    CFRetain(a3);
  v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __browser_handleBTLEEventExternal_block_invoke;
  block[3] = &__block_descriptor_52_e5_v8__0l;
  v10 = a2;
  block[4] = a4;
  block[5] = a3;
  dispatch_async(v8, block);
}

void browser_handleRapportEventExternal(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD block[6];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3)
    CFRetain(a3);
  v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __browser_handleRapportEventExternal_block_invoke;
  block[3] = &__block_descriptor_52_e5_v8__0l;
  v10 = a2;
  block[4] = a4;
  block[5] = a3;
  dispatch_async(v8, block);
}

void browser_handleConnectivityHelperEventExternal(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD block[6];
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  if (a3)
    CFRetain(a3);
  v8 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __browser_handleConnectivityHelperEventExternal_block_invoke;
  block[3] = &__block_descriptor_52_e5_v8__0l;
  v10 = a2;
  block[4] = a4;
  block[5] = a3;
  dispatch_async(v8, block);
}

uint64_t browser_invalidateNoQueueCheck(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t CMBaseObject;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 229))
    return 4294960573;
  v3 = DerivedStorage;
  browser_setModeInternal(a1, 0);
  v4 = *(_QWORD *)(v3 + 96);
  if (v4)
    APBrowserBTLEManagerInvalidate(v4);
  if (*(_QWORD *)(v3 + 104))
  {
    CMBaseObject = APBrowserDeviceQueryManagerGetCMBaseObject();
    if (CMBaseObject)
    {
      v6 = CMBaseObject;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v7)
        v7(v6);
    }
  }
  v8 = *(_QWORD *)(v3 + 184);
  if (v8)
    APConnectivityHelperRemoveAllRegistrations(v8, (uint64_t)a1);
  v9 = *(_QWORD *)(v3 + 88);
  if (v9)
    APDBluetoothHelperInvalidate(v9);
  v10 = *(_QWORD *)(v3 + 144);
  if (v10)
    APBrowserRapportManagerInvalidate(v10);
  v11 = *(_QWORD *)(v3 + 80);
  if (v11)
    APBonjourBrowserInvalidate(v11);
  objc_msgSend(*(id *)(v3 + 208), "stopBrowsing");
  browser_stopNI();
  browser_ensureDetailedForeverTimerStopped();
  result = browser_dispatchEvent(a1, 8, 0);
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_BYTE *)(v3 + 229) = 1;
  return result;
}

uint64_t APBrowserTickleDetailedMode()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t browser_tickleDetailedMode()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t WiFiPower;
  uint64_t v3;
  char v5;

  v5 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 229))
  {
    APSLogErrorAt();
    return 4294960573;
  }
  v1 = DerivedStorage;
  if (*(_WORD *)(DerivedStorage + 24) != 3)
  {
    APSLogErrorAt();
    return 4294960587;
  }
  if (!*(_BYTE *)(DerivedStorage + 130) || !*(_BYTE *)(DerivedStorage + 129))
    return 0;
  WiFiPower = APConnectivityHelperQueryWiFiPower(*(_QWORD *)(DerivedStorage + 184), (uint64_t)&v5);
  if ((_DWORD)WiFiPower)
  {
    v3 = WiFiPower;
    goto LABEL_13;
  }
  if (v5)
  {
    v3 = APBonjourBrowserTickleDetailedMode(*(_QWORD *)(v1 + 80));
    if (!(_DWORD)v3)
      return v3;
LABEL_13:
    APSLogErrorAt();
    return v3;
  }
  return 0;
}

uint64_t APBrowserDiscoverAndInjectDevice(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APBrowserDiscoverAndInjectDevice_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = a1;
    block[6] = a2;
    dispatch_sync(v5, block);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t browser_dispatchEvent(const void *a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  int **v7;
  int v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 232))
    return 4294960587;
  v7 = (int **)DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 229))
    return 4294960587;
  CFRetain(a1);
  if (a3)
  {
    CFRetain(a3);
    CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("deviceID"));
  }
  v9 = **v7;
  if (v9 <= 20 && (v9 != -1 || _LogCategory_Initialize()))
  {
    APBrowserGetEventString(a2);
    if (**v7 == -1)
      _LogCategory_Initialize();
    LogPrintF();
  }
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t APBrowserRemoveInjectedDevice(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __APBrowserRemoveInjectedDevice_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = a2;
    block[6] = a1;
    dispatch_sync(v5, block);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t browser_Invalidate()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

void browser_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 80);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }

  *(_QWORD *)(DerivedStorage + 208) = 0;
  v3 = *(const void **)(DerivedStorage + 368);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 368) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 88);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 96);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 104);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 112);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 144);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 152);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 160);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 168);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 176);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 176) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 328);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 328) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 344);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 344) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 184);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 32);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 200);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 200) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 216);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  v19 = *(NSObject **)(DerivedStorage + 8);
  if (v19)
  {
    dispatch_release(v19);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v20 = *(NSObject **)(DerivedStorage + 16);
  if (v20)
  {
    dispatch_release(v20);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v21 = *(void **)(DerivedStorage + 352);
  if (v21)
  {

    *(_QWORD *)(DerivedStorage + 352) = 0;
  }
}

CFTypeRef browser_CopyDescription()
{
  CMBaseObjectGetDerivedStorage();
  if (!APSDispatchSyncTask())
    return 0;
  APSLogErrorAt();
  return CFRetain(CFSTR("Description not available"));
}

uint64_t browser_CopyProperty()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = FigDispatchSyncCopyPropertyImplementation();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t browser_invalidate(void *a1)
{
  uint64_t v2;

  CMBaseObjectGetDerivedStorage();
  v2 = browser_invalidateNoQueueCheck(a1);
  if ((_DWORD)v2)
    APSLogErrorAt();
  return v2;
}

uint64_t browser_copyDescription(uint64_t a1)
{
  CFTypeRef v1;
  int v2;
  _QWORD *v3;
  const __CFAllocator *v4;

  v1 = *(CFTypeRef *)a1;
  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  v4 = CFGetAllocator(*(CFTypeRef *)a1);
  return browser_copyDescriptionInternal((uint64_t)v1, v4, v2, v3);
}

uint64_t browser_copyDescriptionInternal(uint64_t a1, const __CFAllocator *a2, int a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  __CFString *v10;
  const char *StringForMode;
  int WiFiPower;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  int v20;
  double Current;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  _QWORD context[3];
  int v29;
  int v30;
  char v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFMutableStringRef v34;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v32 = 0;
  v33 = 0;
  Mutable = CFStringCreateMutable(a2, 0);
  v34 = Mutable;
  if (Mutable)
  {
    v10 = Mutable;
    v27 = a3;
    CFStringAppend(Mutable, CFSTR("+-+ APBrowser state +-+\n"));
    CFStringAppend(v10, CFSTR("\n"));
    StringForMode = browser_getStringForMode(*(unsigned __int16 *)(DerivedStorage + 24), *(int **)DerivedStorage);
    CFStringAppendFormat(v10, 0, CFSTR("mode=%s"), StringForMode);
    if (*(_QWORD *)(DerivedStorage + 32))
      CFStringAppendFormat(v10, 0, CFSTR(" (%@)"), *(_QWORD *)(DerivedStorage + 32));
    v31 = 1;
    WiFiPower = APConnectivityHelperQueryWiFiPower(*(_QWORD *)(DerivedStorage + 184), (uint64_t)&v31);
    if (*(_BYTE *)(DerivedStorage + 130))
    {
      if (*(_BYTE *)(DerivedStorage + 129))
        v13 = "yes";
      else
        v13 = "no";
    }
    else
    {
      v13 = "<not queried, assuming no>";
    }
    if (*(_BYTE *)(DerivedStorage + 192))
      v14 = "yes";
    else
      v14 = "no";
    if (*(_BYTE *)(DerivedStorage + 193))
      v15 = "yes";
    else
      v15 = "no";
    v16 = "<power reading not available, assuming no>";
    if (v31)
      v17 = "yes";
    else
      v17 = "no";
    if (!WiFiPower)
      v16 = v17;
    if (*(_BYTE *)(DerivedStorage + 228))
      v18 = "yes";
    else
      v18 = "no";
    CFStringAppendFormat(v10, 0, CFSTR(" soloSupported=%s wifiSystemReady=%s awdlSystemReady=%s wifiPowered=%s avDevicePresent=%s"), v13, v14, v15, v16, v18);
    if (*(_BYTE *)(DerivedStorage + 229))
      v19 = "yes";
    else
      v19 = "no";
    CFStringAppendFormat(v10, 0, CFSTR(" invalidated=%s\n"), v19);
    v20 = *(unsigned __int16 *)(DerivedStorage + 24);
    Current = CFAbsoluteTimeGetCurrent();
    v22 = CMBaseObjectGetDerivedStorage();
    v23 = (double *)(v22 + 384);
    if (v20)
      v23 = 0;
    if (v20 == 1)
      v23 = (double *)(v22 + 392);
    if (v20 == 2)
      v23 = (double *)(v22 + 400);
    if (v20 == 3)
      v23 = (double *)(v22 + 408);
    *v23 = *v23 + Current - *(double *)(v22 + 416);
    *(double *)(v22 + 416) = Current;
    CFStringAppendFormat(v10, 0, CFSTR("%-34s %3lluh %02llum %02llus\n"), "Time spent in None mode:", (unint64_t)*(double *)(DerivedStorage + 384) / 0xE10, (unint64_t)*(double *)(DerivedStorage + 384) % 0xE10 / 0x3C, (unint64_t)*(double *)(DerivedStorage + 384) % 0x3C);
    CFStringAppendFormat(v10, 0, CFSTR("%-34s %3lluh %02llum %02llus\n"), "Time spent in Presence mode:", (unint64_t)*(double *)(DerivedStorage + 392) / 0xE10, (unint64_t)*(double *)(DerivedStorage + 392) % 0xE10 / 0x3C, (unint64_t)*(double *)(DerivedStorage + 392) % 0x3C);
    CFStringAppendFormat(v10, 0, CFSTR("%-34s %3lluh %02llum %02llus\n"), "Time spent in DetailedNonP2P mode:", (unint64_t)*(double *)(DerivedStorage + 400) / 0xE10, (unint64_t)*(double *)(DerivedStorage + 400) % 0xE10 / 0x3C, (unint64_t)*(double *)(DerivedStorage + 400) % 0x3C);
    CFStringAppendFormat(v10, 0, CFSTR("%-34s %3lluh %02llum %02llus\n"), "Time spent in Detailed mode:", (unint64_t)*(double *)(DerivedStorage + 408) / 0xE10, (unint64_t)*(double *)(DerivedStorage + 408) % 0xE10 / 0x3C, (unint64_t)*(double *)(DerivedStorage + 408) % 0x3C);
    CFStringAppendFormat(v10, 0, CFSTR("Discovery mode increase transitions: %u\n"), *(unsigned int *)(DerivedStorage + 376));
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 200)))
    {
      context[0] = &v34;
      context[1] = a1;
      context[2] = a2;
      v29 = v27;
      v30 = FigCFEqual();
      CFStringAppend(v34, CFSTR("\n"));
      CFStringAppend(v34, CFSTR("Nearby devices:\n"));
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 200), (CFDictionaryApplierFunction)browser_copyDescriptionForDevice, context);
    }
    if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 112)))
    {
      CFStringAppend(v34, CFSTR("\n"));
      CFStringAppend(v34, CFSTR("BTLE devices:\n"));
      CFDictionaryApplyBlock();
    }
    v24 = APBrowserBTLEManagerCopyShowInfo(*(_QWORD *)(DerivedStorage + 96), v27, (uint64_t)&v33);
    if ((_DWORD)v24)
    {
      v25 = v24;
    }
    else
    {
      CFStringAppend(v34, CFSTR("\n"));
      CFStringAppendFormat(v34, 0, CFSTR("%@"), v33);
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 152)))
      {
        CFStringAppend(v34, CFSTR("\n"));
        CFStringAppend(v34, CFSTR("Rapport devices:\n"));
        CFDictionaryApplyBlock();
      }
      v25 = APBrowserRapportManagerCopyShowInfo(*(_QWORD *)(DerivedStorage + 144), v27, (uint64_t)&v32);
      if (!(_DWORD)v25)
      {
        CFStringAppend(v34, CFSTR("\n"));
        CFStringAppendFormat(v34, 0, CFSTR("%@"), v32);
        *a4 = v34;
        v34 = 0;
        goto LABEL_43;
      }
    }
    APSLogErrorAt();
  }
  else
  {
    APSLogErrorAt();
    v25 = 4294960568;
  }
LABEL_43:
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  if (v34)
    CFRelease(v34);
  return v25;
}

void browser_copyDescriptionForDevice(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  int **DerivedStorage;
  CFMutableStringRef *v7;
  int v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  const void *v11;
  uint64_t v12;
  const __CFString *v13;
  const __CFString *v14;
  const char *v15;
  const __CFDictionary *v16;
  const char *v17;
  const char *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  unsigned int DeviceRelationship;
  __CFString *v28;
  const char *DeviceRelationshipString;
  const __CFDictionary *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const __CFDictionary *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const void *v41;
  int v42;
  uint64_t v43;
  char buffer[16];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  v43 = 0;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  *(_OWORD *)buffer = 0u;
  v45 = 0u;
  v7 = *(CFMutableStringRef **)a3;
  v8 = *(_DWORD *)(a3 + 24);
  CFStringAppendFormat(**(CFMutableStringRef **)a3, 0, CFSTR("    DeviceID:%15@"), a1);
  Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("LastEventInfo"));
  v10 = Value;
  if (Value)
  {
    v11 = CFDictionaryGetValue(Value, CFSTR("deviceInfo"));
    v12 = (uint64_t)v11;
    if (v11)
    {
      v13 = (const __CFString *)APAdvertiserInfoCopyProperty((uint64_t)v11, 0, CFSTR("deviceName"), 0, (int *)&v43 + 1);
      if (!HIDWORD(v43))
      {
        v14 = v13;
        CFStringGetCString(v13, buffer, 256, 0x8000100u);
        CFStringAppendFormat(*v7, 0, CFSTR(" Name:%-15s"), buffer);
        if (v14)
          CFRelease(v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v15 = "yes";
  if (!v12)
    v15 = "no";
  CFStringAppendFormat(*v7, 0, CFSTR(" AdvertiserInfo:%s"), v15);
  if (*(_BYTE *)(a3 + 28))
  {
    v16 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("SidePlayBonjourInfo"));
    HIDWORD(v43) = APBrowserGetTransports(v16, 0, &v43);
    v17 = "W";
    if ((v43 & 2) == 0)
      v17 = "w";
    if ((v43 & 1) != 0)
      v18 = "E";
    else
      v18 = "e";
    CFStringAppendFormat(*v7, 0, CFSTR(" _sideplay=%s%s"), v17, v18);
    if (v10)
    {
LABEL_16:
      CFDictionaryGetValue(v10, CFSTR("isLegacyPresent"));
      CFDictionaryGetValue(v10, CFSTR("isModernPresent"));
      CFDictionaryGetValue(a2, CFSTR("DispatchTimeStamp"));
      CFStringAppendF();
    }
  }
  else
  {
    v42 = v8;
    v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("AirPlayBonjourInfo"));
    v20 = v19;
    if (v19)
      v41 = CFDictionaryGetValue(v19, CFSTR("cached"));
    else
      v41 = (const void *)*MEMORY[0x1E0C9AE40];
    HIDWORD(v43) = APBrowserGetTransports(v20, 0, &v43);
    v21 = "w";
    if ((v43 & 2) != 0)
      v21 = "W";
    v22 = "a";
    if ((v43 & 4) != 0)
      v22 = "A";
    v23 = "u";
    if ((v43 & 8) != 0)
      v23 = "U";
    v24 = "n";
    if ((v43 & 0x80) != 0)
      v24 = "N";
    if ((v43 & 1) != 0)
      v25 = "E";
    else
      v25 = "e";
    CFStringAppendFormat(*v7, 0, CFSTR(" _airplay=%s%s%s%s%s"), v21, v22, v23, v24, v25);
    if ((v43 & 0x20) != 0)
      v26 = "B";
    else
      v26 = "b";
    CFStringAppendFormat(*v7, 0, CFSTR("%s"), v26);
    DeviceRelationship = browser_getDeviceRelationship(*(_QWORD *)(a3 + 8), a1, v12);
    v28 = *v7;
    DeviceRelationshipString = browser_getDeviceRelationshipString((uint64_t)a1, DeviceRelationship, *DerivedStorage);
    CFStringAppendFormat(v28, 0, CFSTR("%s"), DeviceRelationshipString);
    v30 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("RAOPBonjourInfo"));
    HIDWORD(v43) = APBrowserGetTransports(v30, 0, &v43);
    v31 = "w";
    if ((v43 & 2) != 0)
      v31 = "W";
    if ((v43 & 4) != 0)
      v32 = "A";
    else
      v32 = "a";
    v33 = "u";
    if ((v43 & 8) != 0)
      v33 = "U";
    if ((v43 & 0x80) != 0)
      v34 = "N";
    else
      v34 = "n";
    v35 = "e";
    if ((v43 & 1) != 0)
      v35 = "E";
    CFStringAppendFormat(*v7, 0, CFSTR(" _raop=%s%s%s%s%s"), v31, v32, v33, v34, v35);
    v36 = "B";
    if ((v43 & 0x20) == 0)
      v36 = "b";
    CFStringAppendFormat(*v7, 0, CFSTR("%s"), v36);
    v37 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("AirPlayP2PBonjourInfo"));
    HIDWORD(v43) = APBrowserGetTransports(v37, 0, &v43);
    if ((v43 & 4) != 0)
      v38 = "A";
    else
      v38 = "a";
    if ((v43 & 0x80) != 0)
      v39 = "N";
    else
      v39 = "n";
    CFStringAppendFormat(*v7, 0, CFSTR(" _airplay-p2p=%s%s"), v38, v39);
    if (v41 == (const void *)*MEMORY[0x1E0C9AE50])
      v40 = "Y";
    else
      v40 = "N";
    CFStringAppendFormat(*v7, 0, CFSTR(" cached=%s"), v40);
    v8 = v42;
    if (v10)
      goto LABEL_16;
  }
  CFStringAppend(*v7, CFSTR("\n"));
  if (v8)
    CFStringAppendFormat(*v7, 0, CFSTR("        AdvertiserInfo=%@\n"), v12);
}

void __browser_copyDescriptionInternal_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  const __CFString *Value;
  __CFString *v6;
  const void *v7;
  const void *v8;
  const __CFString *v9;
  char *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  char buffer[16];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)buffer = 0u;
  v16 = 0u;
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR("    DeviceID:%@"), a2);
  Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("IPAddress"));
  CFStringGetCString(Value, buffer, 32, 0x8000100u);
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR(" IP=%-15s"), buffer);
  v6 = *(__CFString **)(a1 + 32);
  v7 = CFDictionaryGetValue(a3, CFSTR("port"));
  v8 = CFDictionaryGetValue(a3, CFSTR("supportsSolo"));
  CFStringAppendFormat(v6, 0, CFSTR(" port=%-5@ supportsSolo=%@"), v7, v8);
  v9 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("deviceName"));
  buffer[0] = 0;
  if (v9)
  {
    v10 = buffer;
    CFStringGetCString(v9, buffer, 32, 0x8000100u);
  }
  else
  {
    v10 = "N/A";
  }
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR(" name: %-15s"), v10);
  v11 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("bonjourDeviceID"));
  v12 = CFSTR("N/A");
  if (v11)
    v12 = v11;
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR(" bonjourID: %@"), v12);
  if (!v11)
  {
    v13 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("connectionError"));
    v14 = CFSTR("Pending");
    if (v13)
      v14 = v13;
    CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR(" (%@)"), v14);
  }
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR("\n"));
}

void __browser_copyDescriptionInternal_block_invoke_2(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  const void *Value;
  int Int64;
  const char *v7;

  Value = CFDictionaryGetValue(theDict, CFSTR("rapportBonjourCorrelationID"));
  Int64 = CFDictionaryGetInt64();
  v7 = "SystemPairingID";
  if (Int64 == 1)
    v7 = "BonjourDeviceID";
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, CFSTR("    RapportDeviceID:%@ %s: %@\n"), a2, v7, Value);
}

const void *browser_getDeviceRelationship(uint64_t a1, const void *a2, uint64_t a3)
{
  int **DerivedStorage;
  CFMutableDictionaryRef *v6;
  const void *v7;
  const void *TypedValue;
  const void *v9;
  int v10;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  v6 = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
  CFDictionaryGetTypeID();
  if (CFDictionaryGetTypedValue())
    goto LABEL_8;
  if (!a3)
    return 0;
  v7 = APAdvertiserInfoCopyProperty(a3, 0, CFSTR("publicCUSystemPairingIdentity"), 0, 0);
  CFDictionaryGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  if (TypedValue)
  {
    CFDictionarySetValue(v6[20], a2, TypedValue);
    CFDictionaryRemoveValue(v6[21], v7);
    CFStringGetTypeID();
    v12[0] = CFSTR("rapportBonjourCorrelationType");
    v12[1] = CFSTR("rapportBonjourCorrelationID");
    v13[0] = &unk_1E82624B0;
    v13[1] = a2;
    v9 = (const void *)CFDictionaryGetTypedValue();
    CFDictionarySetValue(v6[19], v9, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
  }
  if (v7)
    CFRelease(v7);
  if (TypedValue)
  {
LABEL_8:
    TypedValue = (const void *)CFDictionaryGetInt64Ranged();
    if (TypedValue >= 3)
    {
      v10 = **DerivedStorage;
      if (v10 <= 90 && (v10 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      return 0;
    }
  }
  return TypedValue;
}

const char *browser_getDeviceRelationshipString(uint64_t a1, unsigned int a2, int *a3)
{
  if (a2 < 3)
    return off_1E825A810[a2];
  if (*a3 <= 90 && (*a3 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  return "?";
}

uint64_t browser_copyPropertyInternal(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t v8;
  __CFDictionary *Mutable;
  __CFArray *v10;
  void *v11;
  uint64_t IsConfiguredForMaximumDiscovery;
  uint64_t DerivedStorage;
  uint64_t WiFiPower;
  uint64_t BluetoothPower;
  __CFArray *v16;
  __CFArray *v18;
  void *value;
  char v20;

  CMBaseObjectGetDerivedStorage();
  v18 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  if (CFEqual(a2, CFSTR("showInfo")))
  {
    CMBaseObjectGetDerivedStorage();
    value = 0;
    v8 = browser_copyDescriptionInternal(a1, a3, 0, &value);
    if ((_DWORD)v8)
    {
      IsConfiguredForMaximumDiscovery = v8;
      APSLogErrorAt();
    }
    else
    {
      Mutable = CFDictionaryCreateMutable(a3, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v10 = Mutable;
        v11 = value;
        CFDictionaryAddValue(Mutable, CFSTR("detailedDescription"), value);
        IsConfiguredForMaximumDiscovery = 0;
        if (!v11)
          goto LABEL_7;
        goto LABEL_6;
      }
      APSLogErrorAt();
      IsConfiguredForMaximumDiscovery = 4294960568;
    }
    v10 = 0;
    v11 = value;
    if (!value)
    {
LABEL_7:
      if ((_DWORD)IsConfiguredForMaximumDiscovery)
        goto LABEL_37;
      goto LABEL_24;
    }
LABEL_6:
    CFRelease(v11);
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("isConfiguredForMaximumDiscovery")))
  {
    IsConfiguredForMaximumDiscovery = browser_copyIsConfiguredForMaximumDiscovery(a1, &v18);
    if ((_DWORD)IsConfiguredForMaximumDiscovery)
      goto LABEL_37;
    v10 = v18;
    goto LABEL_24;
  }
  if (!CFEqual(a2, CFSTR("radiosNeededForMaximumDiscovery")))
  {
    v10 = 0;
    IsConfiguredForMaximumDiscovery = 4294954512;
    goto LABEL_24;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LOBYTE(value) = 0;
  v20 = 0;
  WiFiPower = APConnectivityHelperQueryWiFiPower(*(_QWORD *)(DerivedStorage + 184), (uint64_t)&v20);
  if ((_DWORD)WiFiPower)
  {
    IsConfiguredForMaximumDiscovery = WiFiPower;
LABEL_34:
    APSLogErrorAt();
    goto LABEL_37;
  }
  BluetoothPower = APDBluetoothHelperQueryBluetoothPower(*(_QWORD *)(DerivedStorage + 88), (uint64_t)&value);
  if ((_DWORD)BluetoothPower)
  {
    IsConfiguredForMaximumDiscovery = BluetoothPower;
    goto LABEL_34;
  }
  if (!(_BYTE)value || !v20)
  {
    v16 = CFArrayCreateMutable(a3, 2, MEMORY[0x1E0C9B378]);
    if (v16)
    {
      v10 = v16;
      if (!(_BYTE)value)
        CFArrayAppendValue(v16, CFSTR("MaximumDiscoveryNeeds_BluetoothRadio"));
      if (!v20)
        CFArrayAppendValue(v10, CFSTR("MaximumDiscoveryNeeds_WiFiRadio"));
      goto LABEL_22;
    }
    APSLogErrorAt();
    IsConfiguredForMaximumDiscovery = 4294960568;
LABEL_37:
    APSLogErrorAt();
    return IsConfiguredForMaximumDiscovery;
  }
  v10 = 0;
LABEL_22:
  IsConfiguredForMaximumDiscovery = 0;
LABEL_24:
  *a4 = v10;
  return IsConfiguredForMaximumDiscovery;
}

uint64_t browser_copyIsConfiguredForMaximumDiscovery(uint64_t a1, _QWORD *a2)
{
  int **DerivedStorage;
  uint64_t WiFiPower;
  int v5;
  uint64_t BluetoothPower;
  int v7;
  BOOL v8;
  CFTypeRef *v9;
  CFTypeRef v10;
  uint64_t v11;
  __int16 v13;

  DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  v13 = 0;
  WiFiPower = APConnectivityHelperQueryWiFiPower((uint64_t)DerivedStorage[23], (uint64_t)&v13);
  if ((_DWORD)WiFiPower)
  {
    v11 = WiFiPower;
LABEL_21:
    APSLogErrorAt();
    return v11;
  }
  v5 = **DerivedStorage;
  if (v5 <= 20 && (v5 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  BluetoothPower = APDBluetoothHelperQueryBluetoothPower((uint64_t)DerivedStorage[11], (uint64_t)&v13 + 1);
  if ((_DWORD)BluetoothPower)
  {
    v11 = BluetoothPower;
    goto LABEL_21;
  }
  v7 = **DerivedStorage;
  if (v7 <= 20 && (v7 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if ((_BYTE)v13)
    v8 = HIBYTE(v13) == 0;
  else
    v8 = 1;
  v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (v8)
    v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v10 = *v9;
  CFRetain(*v9);
  v11 = 0;
  *a2 = v10;
  return v11;
}

uint64_t browser_GetMode()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t browser_SetEventHandler()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t browser_GetDNSForDeviceID()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t browser_StartTrackingDevice()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t browser_StopTrackingDevice()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t browser_ReconfirmDevice()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t browser_ConfigureForMaximumDiscovery()
{
  uint64_t v0;

  CMBaseObjectGetDerivedStorage();
  v0 = APSDispatchSyncTask();
  if ((_DWORD)v0)
    APSLogErrorAt();
  return v0;
}

uint64_t browser_TriggerWoLCachingIfNeeded(const void *a1, uint64_t a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  if (a3)
    CFRetain(a3);
  APSDispatchAsyncFHelper();
  return 0;
}

uint64_t browser_CopyNANEndpointForDeviceID()
{
  CMBaseObjectGetDerivedStorage();
  return APSDispatchSyncTask();
}

uint64_t browser_CopyCUDNSNamesForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __browser_CopyCUDNSNamesForDeviceID_block_invoke;
  v9[3] = &unk_1E8256C80;
  v9[4] = &v10;
  v9[5] = a1;
  v9[6] = a2;
  v9[7] = a3;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1C93FE264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void browser_ResolveAddress(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  _QWORD v13[9];
  char v14;

  v12 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __browser_ResolveAddress_block_invoke;
  v13[3] = &unk_1E825A780;
  v13[6] = a2;
  v13[7] = a3;
  v14 = a4;
  v13[8] = a5;
  v13[4] = a6;
  v13[5] = a1;
  dispatch_sync(v12, v13);
}

uint64_t browser_CopyBrokerInfoForDeviceID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  uint64_t v13;
  _QWORD block[11];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v12 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __browser_CopyBrokerInfoForDeviceID_block_invoke;
  block[3] = &unk_1E825A7D0;
  block[4] = &v16;
  block[5] = a1;
  block[6] = a2;
  block[7] = a3;
  block[8] = a4;
  block[9] = a5;
  block[10] = a6;
  dispatch_sync(v12, block);
  v13 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(&v16, 8);
  return v13;
}

void sub_1C93FE3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t browser_getMode(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 229))
    return 4294960573;
  v3 = DerivedStorage;
  result = 0;
  **(_WORD **)(a1 + 8) = *(_WORD *)(v3 + 24);
  return result;
}

void __browser_updateDetailedDiscoveryThresholdTimer_block_invoke()
{
  int v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  const void *v4;

  v0 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v0 <= 50 && (v0 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v1 = CFStringCreateF();
  if (v1)
  {
    v2 = (const void *)v1;
    v3 = CFStringCreateF();
    if (v3)
    {
      v4 = (const void *)v3;
      APSTapToRadarInvoke();
      CFRelease(v2);
      v2 = v4;
    }
    CFRelease(v2);
  }
}

void __browser_updateDetailedDiscoveryThresholdTimer_block_invoke_2(uint64_t a1)
{
  int v2;

  v2 = ***(_DWORD ***)(a1 + 32);
  if (v2 <= 30 && (v2 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void browser_ensureDetailedForeverTimerStopped()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 360);
  if (v1)
  {
    v2 = DerivedStorage;
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 360));
    dispatch_release(v1);
    *(_QWORD *)(v2 + 360) = 0;
  }
}

void browser_batchAndSendDiscoveredDeviceRTCMetrics()
{
  uint64_t DerivedStorage;
  int v1;
  int v2;
  double v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  int v7;
  int *v8;
  int v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_DWORD *)(DerivedStorage + 428);
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 200)))
  {
    APSEventRecorderGetEventTimeRecursive();
    v2 = **(_DWORD **)DerivedStorage;
    if (v3 == 0.0)
    {
      if (v2 <= 50 && (v2 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      if (!APSRTCReportingAgentCreate()
        && (v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
            Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v17[3] = (uint64_t)Mutable) != 0)&& (v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v13[3] = (uint64_t)v6) != 0))
      {
        CFDictionaryApplyBlock();
        FigCFDictionaryApplyBlock();
        APSVersionUtilsGetShortVersionLength();
        CFDictionarySetCString();
        CFDictionarySetInt64();
        if ((v1 & 1) != 0)
          CFDictionarySetValue((CFMutableDictionaryRef)v13[3], CFSTR("userActivationSeen"), (const void *)*MEMORY[0x1E0C9AE50]);
        if ((v1 & 2) != 0)
          CFDictionarySetValue((CFMutableDictionaryRef)v13[3], CFSTR("backgroundActivationSeen"), (const void *)*MEMORY[0x1E0C9AE50]);
        APSRTCReportingAgentSendEvent();
        v7 = **(_DWORD **)DerivedStorage;
        if (v7 <= 50)
        {
          if (v7 != -1 || (v9 = _LogCategory_Initialize(), v8 = *(int **)DerivedStorage, v9))
          {
            LogPrintF();
            v8 = *(int **)DerivedStorage;
          }
          if (*v8 <= 15 && (*v8 != -1 || _LogCategory_Initialize()))
            CFDictionaryApplyBlock();
        }
      }
      else
      {
        APSLogErrorAt();
      }
    }
    else if (v2 <= 50 && (v2 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  v10 = (const void *)v17[3];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)v13[3];
  if (v11)
    CFRelease(v11);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
}

void sub_1C93FE9F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void browser_ensureDiscoverySessionThresholdTimerStopped()
{
  uint64_t DerivedStorage;
  int v1;
  NSObject *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = **(_DWORD **)DerivedStorage;
  if (v1 <= 50 && (v1 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v2 = *(NSObject **)(DerivedStorage + 432);
  if (v2)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 432));
    dispatch_release(v2);
    *(_QWORD *)(DerivedStorage + 432) = 0;
  }
}

void __browser_batchAndSendDiscoveredDeviceRTCMetrics_block_invoke(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  const __CFDictionary *Value;
  const void *v6;
  const __CFString *v7;
  uint64_t v8;
  const void *v9;
  const __CFString *v10;
  double v11;
  uint64_t TimeBetweenEventsInMilliSecondRecursive;
  int v13;
  const __CFDictionary *v14;
  __CFString *v15;
  __CFString *CFStringReplacingSuffix;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  int v27;
  unsigned int v29;
  const void *v30;
  unsigned int v31;

  v30 = 0;
  if (!browser_copyDeviceEventRecorder(a3, a2, &v30))
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("LastEventInfo"));
    if (Value && (v6 = CFDictionaryGetValue(Value, CFSTR("deviceInfo"))) != 0)
      v7 = (const __CFString *)APAdvertiserInfoCopyProperty((uint64_t)v6, 0, CFSTR("deviceModel"), 0, 0);
    else
      v7 = 0;
    v8 = 0;
    v27 = 0;
    v9 = v30;
    while (1)
    {
      v29 = 0;
      APBrowserGetStartEventForBrowserDeviceEvent(*(_QWORD *)(a1 + 48), (uint64_t)v9, v8 + 268374016);
      if (v8 >= 0x12)
        goto LABEL_28;
      v10 = *(&off_1E825A828 + v8);
      APSEventRecorderGetEventTimeRecursive();
      if (v11 == 0.0)
        goto LABEL_28;
      TimeBetweenEventsInMilliSecondRecursive = APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx();
      v29 = TimeBetweenEventsInMilliSecondRecursive;
      if ((_DWORD)TimeBetweenEventsInMilliSecondRecursive)
      {
        if (!v27)
        {
          v20 = TimeBetweenEventsInMilliSecondRecursive;
          v21 = ***(_DWORD ***)(a1 + 56);
          if (v21 <= 90)
          {
            if (v21 != -1)
              goto LABEL_33;
            if (_LogCategory_Initialize())
            {
              v20 = v29;
LABEL_33:
              v23 = (uint64_t)v10;
              v24 = v20;
              v22 = a2;
              LogPrintF();
            }
          }
        }
        v27 = 1;
        goto LABEL_28;
      }
      if (!browser_ensureAndGetMutableArrayFromCFDictionary(*(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v10, (int *)&v29))goto LABEL_38;
      FigCFArrayAppendInt64();
      v13 = ***(_DWORD ***)(a1 + 56);
      if (v13 <= 15 && (v13 != -1 || _LogCategory_Initialize()))
      {
        v25 = v10;
        v26 = 0;
        v23 = a2;
        v24 = v8 + 268374016;
        v22 = *(_QWORD *)(a1 + 64);
        LogPrintF();
      }
      if ((_DWORD)v8)
        goto LABEL_28;
      if (v7)
      {
        v14 = *(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v31 = 0;
        if (!v14)
          break;
        GestaltProductTypeStringToDeviceClass();
        v15 = (__CFString *)CUGestaltDeviceClassToString();
        if (-[__CFString isEqualToString:](v15, "isEqualToString:", CFSTR("?")))
        {
          v15 = CFSTR("AirPort");
          if (!CFStringHasPrefix(v7, CFSTR("AirPort")))
            v15 = CFSTR("3rdParty");
        }
        CFStringReplacingSuffix = browser_createCFStringReplacingSuffix(v10, (const __CFString *)-[__CFString stringByAppendingString:](v15, "stringByAppendingString:", CFSTR("Ms"), v22, v23, v24, v25, v26));
        if (CFStringReplacingSuffix)
        {
          v17 = CFStringReplacingSuffix;
          if (browser_ensureAndGetMutableArrayFromCFDictionary(v14, CFStringReplacingSuffix, (int *)&v31))
            CFArrayAppendInt64();
          else
            APSLogErrorAt();
          CFRelease(v17);
          v29 = v31;
          if (v31)
            goto LABEL_38;
        }
        else
        {
          APSLogErrorAt();
          v29 = 0;
        }
      }
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
        break;
      v18 = browser_createCFStringReplacingSuffix(v10, CFSTR("Bucket1"));
      if (!v18)
        goto LABEL_38;
      v19 = v18;
      CFDictionaryGetInt64();
      FigCFDictionarySetInt64();
      CFRelease(v19);
LABEL_28:
      if ((_DWORD)++v8 == 18)
        goto LABEL_46;
    }
    APSLogErrorAt();
    v29 = -6705;
LABEL_38:
    APSLogErrorAt();
    goto LABEL_28;
  }
  APSLogErrorAt();
  v7 = 0;
  v9 = v30;
LABEL_46:
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
}

uint64_t browser_copyDeviceEventRecorder(const __CFDictionary *a1, uint64_t a2, _QWORD *a3)
{
  const void *Value;
  const void *v7;
  CFStringRef v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1 || !a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  Value = CFDictionaryGetValue(a1, CFSTR("eventRecorder"));
  if (Value)
  {
    v7 = Value;
    CFRetain(Value);
    v8 = 0;
LABEL_7:
    v10 = 0;
    *a3 = v7;
    goto LABEL_8;
  }
  v8 = CFStringCreateWithFormat(0, 0, CFSTR("APBrowser-%@"), a2);
  v9 = APSEventRecorderCreate();
  if (!(_DWORD)v9)
  {
    CFDictionarySetValue(a1, CFSTR("eventRecorder"), 0);
    v7 = 0;
    goto LABEL_7;
  }
  v10 = v9;
  APSLogErrorAt();
LABEL_8:
  if (v8)
    CFRelease(v8);
  return v10;
}

CFMutableArrayRef browser_ensureAndGetMutableArrayFromCFDictionary(const __CFDictionary *a1, const void *a2, int *a3)
{
  __CFArray *Value;
  CFMutableArrayRef v7;
  int v8;
  CFMutableArrayRef Mutable;

  Value = (__CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v7 = Value;
    v8 = 0;
    Mutable = 0;
    if (!a3)
      goto LABEL_7;
    goto LABEL_6;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    CFDictionaryAddValue(a1, a2, Mutable);
    v8 = 0;
    v7 = Mutable;
    if (!a3)
      goto LABEL_7;
    goto LABEL_6;
  }
  APSLogErrorAt();
  v7 = 0;
  v8 = -6728;
  if (a3)
LABEL_6:
    *a3 = v8;
LABEL_7:
  if (Mutable)
    CFRelease(Mutable);
  return v7;
}

void __browser_batchAndSendDiscoveredDeviceRTCMetrics_block_invoke_2(uint64_t a1, const __CFString *a2, CFArrayRef theArray)
{
  CFIndex v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *CFStringReplacingSuffix;
  __CFString *v9;
  CFIndex Count;
  float v11;
  CFIndex v12;
  CFRange v13;

  if (a2
    && theArray
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
    && (v5 = CFArrayGetCount(theArray)) != 0
    && (v13.length = v5,
        v13.location = 0,
        CFArraySortValues(theArray, v13, MEMORY[0x1E0C98910], 0),
        (v6 = browser_createCFStringReplacingSuffix(a2, CFSTR("P95Ms"))) != 0))
  {
    v7 = v6;
    CFStringReplacingSuffix = browser_createCFStringReplacingSuffix(a2, CFSTR("MedianMs"));
    if (CFStringReplacingSuffix)
    {
      v9 = CFStringReplacingSuffix;
      Count = CFArrayGetCount(theArray);
      if (Count)
      {
        v11 = (double)(Count - 1) * 0.95;
        if (vcvtps_s32_f32(v11) != vcvtms_s32_f32(v11))
          FigCFArrayGetInt64AtIndex();
        FigCFArrayGetInt64AtIndex();
      }
      else
      {
        APSLogErrorAt();
      }
      v12 = CFArrayGetCount(theArray);
      if (v12)
      {
        if ((v12 & 1) == 0)
          FigCFArrayGetInt64AtIndex();
        FigCFArrayGetInt64AtIndex();
      }
      else
      {
        APSLogErrorAt();
      }
      FigCFDictionarySetInt64();
      FigCFDictionarySetInt64();
      CFRelease(v9);
    }
    else
    {
      APSLogErrorAt();
    }
    CFRelease(v7);
  }
  else
  {
    APSLogErrorAt();
  }
}

int *__browser_batchAndSendDiscoveredDeviceRTCMetrics_block_invoke_3(uint64_t a1)
{
  int *result;

  result = **(int ***)(a1 + 32);
  if (*result <= 15)
  {
    if (*result != -1)
      return (int *)LogPrintF();
    result = (int *)_LogCategory_Initialize();
    if ((_DWORD)result)
      return (int *)LogPrintF();
  }
  return result;
}

__CFString *browser_createCFStringReplacingSuffix(const __CFString *a1, const __CFString *a2)
{
  CFIndex Length;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  __CFString *MutableCopy;
  __CFString *v9;
  CFRange v11;

  if (!CFStringHasSuffix(a1, CFSTR("Ms"))
    || (Length = CFStringGetLength(a1),
        v5 = Length - CFStringGetLength(CFSTR("Ms")),
        v6 = CFStringGetLength(CFSTR("Ms")),
        v5 < 0))
  {
    APSLogErrorAt();
    return 0;
  }
  else
  {
    v7 = v6;
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
    v9 = MutableCopy;
    if (MutableCopy)
    {
      v11.location = v5;
      v11.length = v7;
      CFStringReplace(MutableCopy, v11, a2);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  return v9;
}

void __browser_ensureDetailedForeverTimerStarted_block_invoke()
{
  int v0;
  int **DerivedStorage;
  __CFDictionary *Mutable;
  int v3;

  v0 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v0 <= 30 && (v0 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  if (APSRTCReportingAgentCreate())
  {
    APSLogErrorAt();
    Mutable = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      CFDictionarySetInt64();
      CFDictionarySetValue(Mutable, CFSTR("sessionType"), CFSTR("Discovery"));
      APSRTCReportingAgentSendEvent();
      v3 = **DerivedStorage;
      if (v3 <= 30 && (v3 != -1 || _LogCategory_Initialize()))
        LogPrintF();
    }
  }
  if (Mutable)
    CFRelease(Mutable);
  browser_ensureDetailedForeverTimerStopped();
}

void __browser_ensureDetailedForeverTimerStarted_block_invoke_2(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __browser_startOrExtendDiscoverySessionThresholdTimer_block_invoke()
{
  uint64_t DerivedStorage;
  int v1;
  int v2;

  CFAbsoluteTimeGetCurrent();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(unsigned __int16 *)(DerivedStorage + 24);
  v2 = **(_DWORD **)DerivedStorage;
  if (v2 <= 50 && (v2 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  if (v1)
  {
    browser_batchAndSendDiscoveredDeviceRTCMetrics();
    APSEventRecorderRecordEventWithFlagsAtTime();
    browser_ensureDiscoverySessionThresholdTimerStopped();
  }
}

void __browser_startOrExtendDiscoverySessionThresholdTimer_block_invoke_2(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t browser_updateDevice(const void *a1, const void *a2, const void *a3)
{
  uint64_t v6;
  uint64_t updated;
  BOOL v9;
  __int16 v10;

  CMBaseObjectGetDerivedStorage();
  v10 = 0;
  v9 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    updated = 4294960591;
    if (!a3)
      return updated;
    goto LABEL_9;
  }
  if (!a3)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  CFRetain(a3);
  v6 = browser_queryServiceAvailabilityForDevice((uint64_t)a1, a2, (BOOL *)&v10 + 1, (BOOL *)&v10, &v9);
  if ((_DWORD)v6)
  {
    updated = v6;
    goto LABEL_15;
  }
  if (v10 || v9)
  {
    updated = browser_updateEventInfoForDevice(a1, a2);
    if (!(_DWORD)updated)
      goto LABEL_9;
LABEL_15:
    APSLogErrorAt();
    goto LABEL_9;
  }
  updated = browser_removeNearbyDevice(a1, a2);
  if ((_DWORD)updated)
    goto LABEL_15;
LABEL_9:
  CFRelease(a3);
  return updated;
}

uint64_t browser_queryServiceAvailabilityForDevice(uint64_t a1, const void *a2, BOOL *a3, BOOL *a4, BOOL *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  const __CFDictionary *Value;
  const __CFDictionary *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v10 = DerivedStorage;
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), a2);
    if (Value)
    {
      v12 = Value;
      v13 = CFDictionaryGetValue(Value, *(const void **)(v10 + 56)) != 0;
      v14 = CFDictionaryGetValue(v12, CFSTR("RAOPBonjourInfo")) != 0;
      v15 = CFDictionaryGetValue(v12, CFSTR("AirPlayP2PBonjourInfo")) != 0;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
    }
    *a3 = v13;
    *a4 = v14;
    result = 0;
    if (a5)
      *a5 = v15;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t browser_updateEventInfoForDevice(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  uint64_t ServiceAvailabilityForDevice;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  char v12;
  int v13;
  CFAllocatorRef v14;
  int *v15;
  char v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  const __CFData *v19;
  const __CFData *v20;
  const __CFString *v21;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  CFMutableDictionaryRef *v24;
  _BOOL4 v25;
  unsigned int DeviceRelationship;
  int *v27;
  int v28;
  const void *v29;
  const __CFAllocator *v30;
  uint64_t DetailedModeEventInfoDictionary;
  const void *v32;
  __CFDictionary *v33;
  int v34;
  int v35;
  char v36;
  __CFDictionary *v37;
  CFMutableDictionaryRef *v38;
  uint64_t v39;
  _BOOL4 v41;
  char v42;
  const __CFDictionary *v43;
  const void *v44;
  _BOOL4 v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  CFTypeRef v49;
  int v50;
  __int16 v51;
  __int16 v52;
  __CFDictionary *v53[2];
  CFMutableDictionaryRef *v54[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v53[0] = 0;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    v24 = 0;
    v32 = 0;
    v39 = 4294960591;
    goto LABEL_61;
  }
  v5 = DerivedStorage;
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), a2);
  if (!Value)
  {
    APSLogErrorAt();
    v24 = 0;
    v32 = 0;
    v39 = 4294960534;
    goto LABEL_61;
  }
  v7 = Value;
  ServiceAvailabilityForDevice = browser_queryServiceAvailabilityForDevice((uint64_t)a1, a2, (BOOL *)&v52 + 1, (BOOL *)&v52, 0);
  if ((_DWORD)ServiceAvailabilityForDevice)
  {
    v39 = ServiceAvailabilityForDevice;
    APSLogErrorAt();
    v24 = 0;
LABEL_91:
    v32 = 0;
    goto LABEL_61;
  }
  v9 = (const __CFDictionary *)CFDictionaryGetValue(v7, *(const void **)(v5 + 56));
  APBrowserGetIsLocallyAdvertised(v9, (char *)&v51 + 1);
  APBrowserGetTransports(v9, 0, (_DWORD *)&v48 + 1);
  APBrowserGetTransportsRequiringBroker(v9, &v50);
  if (v9)
    CFDictionaryGetValue(v9, CFSTR("cached"));
  v10 = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("RAOPBonjourInfo"));
  APBrowserGetIsLocallyAdvertised(v10, (char *)&v51);
  APBrowserGetTransports(v10, 0, &v48);
  v11 = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("AirPlayP2PBonjourInfo"));
  APBrowserGetTransports(v11, 0, &v47);
  v12 = (HIBYTE(v51) | v51) != 0;
  v13 = FigCFEqual();
  v14 = CFGetAllocator(a1);
  v15 = *(int **)v5;
  if (v13)
  {
    v16 = v12;
    v54[0] = 0;
    v17 = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("SidePlayBonjourInfo"));
    if (!v17)
    {
      v24 = 0;
      goto LABEL_17;
    }
    v18 = v17;
    v19 = (const __CFData *)CFDictionaryGetValue(v17, CFSTR("txt"));
    if (v19)
    {
      v20 = v19;
      v21 = (const __CFString *)CFDictionaryGetValue(v18, CFSTR("name"));
      if (v21)
      {
        v12 = v16;
        if (APAdvertiserInfoCreateWithSidePlayDataAndDeviceName((uint64_t)v14, v20, v21, v54))
        {
          APSLogErrorAt();
          if (*v15 > 40 || *v15 == -1 && !_LogCategory_Initialize())
            goto LABEL_97;
          goto LABEL_102;
        }
        goto LABEL_16;
      }
    }
    APSLogErrorAt();
    v12 = v16;
  }
  else
  {
    v54[0] = 0;
    v22 = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("AirPlayBonjourInfo"));
    v23 = (const __CFDictionary *)CFDictionaryGetValue(v7, CFSTR("RAOPBonjourInfo"));
    if ((unint64_t)v22 | (unint64_t)v23)
    {
      if (APBrowserCreateAdvertiserInfoForDevice((uint64_t)v14, v22, v23, (CFTypeRef *)v54))
      {
        APSLogErrorAt();
        if (*v15 > 40 || *v15 == -1 && !_LogCategory_Initialize())
          goto LABEL_97;
LABEL_102:
        LogPrintF();
        goto LABEL_97;
      }
LABEL_16:
      v24 = v54[0];
      goto LABEL_17;
    }
  }
LABEL_97:
  if (v54[0])
    CFRelease(v54[0]);
  v24 = 0;
LABEL_17:
  v25 = (v48 & 0x2B00000000) != 0;
  v45 = ((BYTE4(v48) | v48) & 0x2B) != 0;
  DeviceRelationship = browser_getDeviceRelationship((uint64_t)a1, a2, (uint64_t)v24);
  v27 = *(int **)v5;
  v28 = **(_DWORD **)v5;
  v46 = DeviceRelationship;
  if (v28 <= 40)
  {
    if (v28 == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_22;
      v41 = v25;
      v42 = v12;
      v43 = v7;
      v44 = a1;
      v27 = *(int **)v5;
    }
    else
    {
      v41 = v25;
      v42 = v12;
      v43 = v7;
      v44 = a1;
    }
    browser_getDeviceRelationshipString((uint64_t)a2, DeviceRelationship, v27);
    LogPrintF();
    v7 = v43;
    a1 = v44;
    v25 = v41;
    v12 = v42;
  }
LABEL_22:
  CMBaseObjectGetDerivedStorage();
  if (v24 && APSRotatingKeyMapperIsInitialized())
  {
    v29 = APAdvertiserInfoCopyProperty((uint64_t)v24, 0, CFSTR("bluetoothAddress"), 0, 0);
    if (!APSRotatingKeyMapperSetDesiredKeyForID())
    {
      if (!v29)
        goto LABEL_27;
      goto LABEL_26;
    }
    APSLogErrorAt();
    if (v29)
LABEL_26:
      CFRelease(v29);
  }
LABEL_27:
  v30 = CFGetAllocator(a1);
  DetailedModeEventInfoDictionary = APBrowserCreateDetailedModeEventInfoDictionary(v30, a2, *(_QWORD *)(v5 + 40), (uint64_t)v24, v52, HIBYTE(v52), v25, v45, v50, DeviceRelationship, v12, (uint64_t)v49, v53);
  if ((_DWORD)DetailedModeEventInfoDictionary)
  {
    v39 = DetailedModeEventInfoDictionary;
    APSLogErrorAt();
    goto LABEL_91;
  }
  if (v24)
  {
    v32 = APAdvertiserInfoCopyProperty((uint64_t)v24, 0, CFSTR("publicCUSystemPairingIdentity"), 0, 0);
    if (v32)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v5 + 176), v32, a2);
  }
  else
  {
    v32 = 0;
  }
  v33 = v53[0];
  v35 = v48;
  v34 = HIDWORD(v48);
  v36 = v47;
  CFAbsoluteTimeGetCurrent();
  v54[0] = 0;
  if (v33)
  {
    if (!browser_copyDeviceEventRecorder(v7, (uint64_t)a2, v54))
    {
      if ((v34 & 2) != 0)
      {
        APSEventRecorderRecordEventWithFlagsAtTime();
        if ((v34 & 4) == 0)
        {
LABEL_36:
          if ((v34 & 0x80) == 0)
            goto LABEL_37;
          goto LABEL_72;
        }
      }
      else if ((v34 & 4) == 0)
      {
        goto LABEL_36;
      }
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 0x80) == 0)
      {
LABEL_37:
        if ((v34 & 8) == 0)
          goto LABEL_38;
        goto LABEL_73;
      }
LABEL_72:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 8) == 0)
      {
LABEL_38:
        if ((v34 & 1) == 0)
          goto LABEL_39;
        goto LABEL_74;
      }
LABEL_73:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 1) == 0)
      {
LABEL_39:
        if ((v34 & 0x10) == 0)
          goto LABEL_40;
        goto LABEL_75;
      }
LABEL_74:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 0x10) == 0)
      {
LABEL_40:
        if ((v34 & 0x20) == 0)
          goto LABEL_41;
        goto LABEL_76;
      }
LABEL_75:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v34 & 0x20) == 0)
      {
LABEL_41:
        if ((v35 & 2) == 0)
          goto LABEL_42;
        goto LABEL_77;
      }
LABEL_76:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 2) == 0)
      {
LABEL_42:
        if ((v35 & 4) == 0)
          goto LABEL_43;
        goto LABEL_78;
      }
LABEL_77:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 4) == 0)
      {
LABEL_43:
        if ((v35 & 8) == 0)
          goto LABEL_44;
        goto LABEL_79;
      }
LABEL_78:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 8) == 0)
      {
LABEL_44:
        if ((v35 & 1) == 0)
          goto LABEL_45;
        goto LABEL_80;
      }
LABEL_79:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 1) == 0)
      {
LABEL_45:
        if ((v35 & 0x10) == 0)
          goto LABEL_46;
        goto LABEL_81;
      }
LABEL_80:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 0x10) == 0)
      {
LABEL_46:
        if ((v35 & 0x20) == 0)
          goto LABEL_47;
        goto LABEL_82;
      }
LABEL_81:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v35 & 0x20) == 0)
      {
LABEL_47:
        if ((v36 & 4) == 0)
          goto LABEL_48;
        goto LABEL_83;
      }
LABEL_82:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v36 & 4) == 0)
      {
LABEL_48:
        if ((v36 & 0x80) == 0)
          goto LABEL_50;
        goto LABEL_49;
      }
LABEL_83:
      APSEventRecorderRecordEventWithFlagsAtTime();
      if ((v36 & 0x80) == 0)
      {
LABEL_50:
        if (v46)
          APSEventRecorderRecordEventWithFlagsAtTime();
        if ((v34 & 0x20) != 0)
        {
          v53[1] = 0;
          v37 = (__CFDictionary *)CFDictionaryGetValue(v7, CFSTR("DiscoveryMetrics"));
          if (FigCFDictionaryGetDoubleIfPresent())
          {
            APSEventRecorderRecordEventWithFlagsAtTime();
            CFDictionaryRemoveValue(v37, CFSTR("btleBeaconEventTime"));
          }
        }
        v38 = v54[0];
        if (v35 | v34)
          APSEventRecorderRecordEventWithFlagsAtTime();
        CFDictionarySetValue(v33, CFSTR("eventRecorder"), v38);
        if (!v38)
          goto LABEL_59;
        goto LABEL_58;
      }
LABEL_49:
      APSEventRecorderRecordEventWithFlagsAtTime();
      goto LABEL_50;
    }
    APSLogErrorAt();
    v38 = v54[0];
    if (v54[0])
LABEL_58:
      CFRelease(v38);
  }
  else
  {
    APSLogErrorAt();
  }
LABEL_59:
  v39 = browser_setEventInfoForDevice(a1, a2, v53[0]);
  if ((_DWORD)v39)
    APSLogErrorAt();
LABEL_61:
  if (v49)
    CFRelease(v49);
  if (v53[0])
    CFRelease(v53[0]);
  if (v32)
    CFRelease(v32);
  if (v24)
    CFRelease(v24);
  return v39;
}

uint64_t browser_removeNearbyDevice(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  uint64_t DetailedModeEventInfoDictionary;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  CMBaseObjectGetDerivedStorage();
  if (APSRotatingKeyMapperIsInitialized() && APSRotatingKeyMapperRemoveID())
    APSLogErrorAt();
  v5 = CFGetAllocator(a1);
  DetailedModeEventInfoDictionary = APBrowserCreateDetailedModeEventInfoDictionary(v5, a2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (__CFDictionary **)&cf);
  if ((_DWORD)DetailedModeEventInfoDictionary)
  {
    v10 = DetailedModeEventInfoDictionary;
LABEL_21:
    APSLogErrorAt();
    goto LABEL_15;
  }
  if (*(_WORD *)(DerivedStorage + 24))
  {
    v7 = browser_dispatchEvent(a1, 5, cf);
    if ((_DWORD)v7)
    {
      v10 = v7;
      goto LABEL_21;
    }
  }
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), a2))
  {
    if (CFDictionaryGetInt64())
    {
      v8 = CMBaseObjectGetDerivedStorage();
      --*(_DWORD *)(v8 + 224);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 200), a2);
    v9 = **(_DWORD **)DerivedStorage;
    if (v9 <= 40 && (v9 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v10 = 0;
  }
  else
  {
    APSLogErrorAt();
    v10 = 4294960569;
  }
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t browser_setEventInfoForDevice(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Value;
  __CFDictionary *v8;
  const void *v9;
  uint64_t Int64;
  uint64_t v11;
  int v12;
  const void *v13;
  unsigned int v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 200), a2);
  if (!Value)
  {
    APSLogErrorAt();
    return -6762;
  }
  v8 = Value;
  v9 = CFDictionaryGetValue(Value, CFSTR("LastEventInfo"));
  Int64 = CFDictionaryGetInt64();
  v15 = 0;
  if (v9 != a3)
  {
    v11 = Int64;
    if (!a3 || !v9 || !CFEqual(a3, v9))
    {
      CFDictionarySetValue(v8, CFSTR("LastEventInfo"), a3);
      if (CFDictionaryContainsKey((CFDictionaryRef)a3, CFSTR("deviceInfo")))
      {
        if (*(_WORD *)(DerivedStorage + 24))
        {
          if (v11)
            v12 = 4;
          else
            v12 = 3;
          v15 = browser_dispatchEvent(a1, v12, a3);
          if (!v15)
          {
            v13 = (const void *)CFStringCreateF();
            CFDictionarySetValue(v8, CFSTR("DispatchTimeStamp"), v13);
            CFDictionarySetValue(v8, CFSTR("WasLastEventInfoDispatched"), (const void *)*MEMORY[0x1E0C9AE50]);
            if (v13)
              CFRelease(v13);
            return v15;
          }
          APSLogErrorAt();
        }
        CFDictionarySetValue(v8, CFSTR("WasLastEventInfoDispatched"), (const void *)*MEMORY[0x1E0C9AE40]);
      }
    }
  }
  return v15;
}

uint64_t browser_handleConnectivityHelperEventInternal(const void *a1, int a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t started;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t updated;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v33;

  v6 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v6 <= 40 && (v6 != -1 || _LogCategory_Initialize()))
  {
    APConnectivityHelperGetEventString(a2);
    LogPrintF();
  }
  v7 = 0;
  switch(a2)
  {
    case 1:
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v9 = **(_DWORD **)DerivedStorage;
      if (v9 <= 40 && (v9 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      *(_BYTE *)(DerivedStorage + 192) = 1;
      if (*(_BYTE *)(DerivedStorage + 197))
      {
        started = browser_startWiFiPowerChangedListener((uint64_t)a1);
        if ((_DWORD)started)
        {
          v7 = started;
          goto LABEL_75;
        }
        *(_BYTE *)(DerivedStorage + 197) = 0;
      }
      v18 = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)(v18 + 194))
        goto LABEL_63;
      if (APSIsVirtualMachine())
      {
        v19 = **(_DWORD **)v18;
        if (v19 <= 40 && (v19 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v31 = browser_handleConnectivityHelperEventInternal(a1, 101, 0);
        if (!(_DWORD)v31)
        {
LABEL_63:
          *(_BYTE *)(v18 + 194) = 0;
          v29 = APBonjourBrowserSetWiFiSystemReady(*(_QWORD *)(DerivedStorage + 80));
          v7 = 0;
          if ((_DWORD)v29)
            goto LABEL_56;
          return v7;
        }
        v7 = v31;
      }
      else
      {
        v20 = APConnectivityHelperDeregisterForEvent(*(_QWORD *)(v18 + 184), (uint64_t)a1, 1);
        if (!(_DWORD)v20)
          goto LABEL_63;
        v7 = v20;
      }
      APSLogErrorAt();
      *(_BYTE *)(v18 + 194) = 0;
      goto LABEL_75;
    case 2:
      v10 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
      if (v10 <= 40 && (v10 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      updated = browser_updateAVDevicePresent(a1);
      if ((_DWORD)updated)
      {
        v7 = updated;
      }
      else
      {
        v7 = browser_updateConfigurationForMaximumDiscoveryStatus(a1);
        if (!(_DWORD)v7)
          return v7;
      }
LABEL_75:
      APSLogErrorAt();
      goto LABEL_76;
    case 7:
      v11 = CMBaseObjectGetDerivedStorage();
      v12 = **(_DWORD **)v11;
      if (v12 <= 40 && (v12 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      *(_BYTE *)(v11 + 193) = 1;
      v22 = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)(v22 + 195))
        goto LABEL_55;
      if (!APSIsVirtualMachine())
      {
        v24 = APConnectivityHelperDeregisterForEvent(*(_QWORD *)(v22 + 184), (uint64_t)a1, 7);
        if (!(_DWORD)v24)
          goto LABEL_55;
        v7 = v24;
LABEL_71:
        APSLogErrorAt();
        *(_BYTE *)(v22 + 195) = 0;
        APSLogErrorAt();
        goto LABEL_76;
      }
      v23 = **(_DWORD **)v22;
      if (v23 <= 40 && (v23 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v28 = browser_handleConnectivityHelperEventInternal(a1, 107, 0);
      if ((_DWORD)v28)
      {
        v7 = v28;
        goto LABEL_71;
      }
LABEL_55:
      *(_BYTE *)(v22 + 195) = 0;
      v29 = APBonjourBrowserSetAWDLSystemReady(*(_QWORD *)(v11 + 80));
      v7 = 0;
      if (!(_DWORD)v29)
        return v7;
LABEL_56:
      v30 = v29;
      APSLogErrorAt();
      v7 = v30;
LABEL_76:
      APSLogErrorAt();
      return v7;
    case 8:
      v33 = 0;
      v13 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(v13 + 131))
      {
        if (a3)
        {
          v14 = v13;
          v15 = CFDictionaryGetInt64() != 0;
          *(_BYTE *)(v14 + 129) = v15;
          *(_BYTE *)(v14 + 130) = 1;
          v16 = **(_DWORD **)v14;
          if (v16 <= 40)
          {
            if (v16 != -1 || (v25 = _LogCategory_Initialize(), v15 = *(_BYTE *)(v14 + 129), v25))
            {
              LogPrintF();
              v15 = *(_BYTE *)(v14 + 129);
            }
          }
          v33 = APBrowserBTLEManagerSetLocalDeviceSupportsSolo(*(_QWORD *)(v14 + 96), v15);
          if (v33)
            APSLogErrorAt();
        }
        else
        {
          APSLogErrorAt();
          v33 = -6705;
        }
      }
      v26 = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)(v26 + 131))
        goto LABEL_59;
      if (APSIsVirtualMachine())
      {
        v27 = **(_DWORD **)v26;
        if (v27 <= 40 && (v27 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        if (!browser_handleConnectivityHelperEventInternal(a1, 108, 0))
        {
LABEL_59:
          v7 = 0;
          *(_BYTE *)(v26 + 131) = 0;
          if (v33)
          {
            APSLogErrorAt();
            return v33;
          }
          return v7;
        }
      }
      else if (!APConnectivityHelperDeregisterForEvent(*(_QWORD *)(v26 + 184), (uint64_t)a1, 8))
      {
        goto LABEL_59;
      }
      APSLogErrorAt();
      goto LABEL_59;
    default:
      return v7;
  }
}

uint64_t browser_updateAVDevicePresent(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t WiFiPower;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 112)) < 1)
  {
    v4 = 0;
    goto LABEL_5;
  }
  WiFiPower = APConnectivityHelperQueryWiFiPower(*(_QWORD *)(DerivedStorage + 184), (uint64_t)&v10);
  if ((_DWORD)WiFiPower == -6738)
  {
    v4 = 0;
    v10 = 0;
LABEL_5:
    v5 = 2;
    goto LABEL_10;
  }
  v6 = WiFiPower;
  if ((_DWORD)WiFiPower)
    goto LABEL_21;
  v4 = v10 != 0;
  if (v10)
    v5 = 1;
  else
    v5 = 2;
LABEL_10:
  if (*(unsigned __int8 *)(DerivedStorage + 228) == v4)
    return 0;
  v7 = browser_dispatchEvent(a1, v5, 0);
  if ((_DWORD)v7)
  {
    v6 = v7;
LABEL_21:
    APSLogErrorAt();
    return v6;
  }
  v8 = **(_DWORD **)DerivedStorage;
  if (v8 <= 50 && (v8 != -1 || _LogCategory_Initialize()))
  {
    APBrowserGetEventString(v5);
    LogPrintF();
  }
  v6 = 0;
  *(_BYTE *)(DerivedStorage + 228) = v4;
  return v6;
}

uint64_t browser_updateConfigurationForMaximumDiscoveryStatus(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t IsConfiguredForMaximumDiscovery;
  const void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  IsConfiguredForMaximumDiscovery = browser_copyIsConfiguredForMaximumDiscovery((uint64_t)a1, &v9);
  if ((_DWORD)IsConfiguredForMaximumDiscovery)
  {
    v5 = IsConfiguredForMaximumDiscovery;
    APSLogErrorAt();
    v4 = v9;
    if (!v9)
      return v5;
    goto LABEL_10;
  }
  v4 = v9;
  if (v9)
  {
    v6 = **(_DWORD **)DerivedStorage;
    if (v6 <= 40 && (v6 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v7 = browser_dispatchEvent(a1, 9, 0);
    if ((_DWORD)v7)
    {
      v5 = v7;
    }
    else
    {
      v5 = APDBluetoothHelperStopListeningToEvent(*(_QWORD *)(DerivedStorage + 88), 1);
      if (!(_DWORD)v5)
      {
LABEL_10:
        CFRelease(v4);
        return v5;
      }
    }
    APSLogErrorAt();
    goto LABEL_10;
  }
  return 0;
}

void __browser_flushAllBTLEDevices_block_invoke(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  const __CFDictionary *Value;
  __CFDictionary *v5;
  CFTypeRef cf;
  __CFDictionary *v7;

  cf = 0;
  v7 = 0;
  if (theDict)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("lastInfo"));
    if (Value)
    {
      if (browser_createBonjourInfoForBTLEDevice(Value, 1, &v7, (__CFDictionary **)&cf))
      {
        APSLogErrorAt();
        v5 = v7;
      }
      else
      {
        v5 = v7;
        if (browser_removeService(*(const void **)(a1 + 32), CFSTR("AirPlay"), v7)
          || browser_removeService(*(const void **)(a1 + 32), CFSTR("RAOP"), (const __CFDictionary *)cf))
        {
          APSLogErrorAt();
        }
      }
      if (v5)
        CFRelease(v5);
      if (cf)
        CFRelease(cf);
    }
  }
}

uint64_t browser_createBonjourInfoForBTLEDevice(const __CFDictionary *a1, int a2, __CFDictionary **a3, __CFDictionary **a4)
{
  const void *TypedValue;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const __CFAllocator *v12;
  CFStringRef v13;
  CFStringRef v14;
  __CFDictionary *Mutable;
  __CFDictionary *v16;
  __CFDictionary **v17;
  const void *v18;
  CFStringRef v19;
  CFStringRef v20;
  __CFDictionary *v21;
  __CFDictionary *v22;
  const __CFString *v23;
  const __CFString *v24;
  __CFDictionary *v25;
  uint64_t v26;
  CFStringRef v27;
  int v29;
  __CFDictionary **v30;
  void *v31;
  void *value;
  CFTypeRef cf;
  unsigned int BTLEBonjourServiceArray;

  BTLEBonjourServiceArray = 0;
  value = 0;
  cf = 0;
  CFStringGetTypeID();
  TypedValue = (const void *)CFDictionaryGetTypedValue();
  CFStringGetTypeID();
  v9 = CFDictionaryGetTypedValue();
  v10 = CFDictionaryGetValue(a1, CFSTR("controlPort"));
  if (!v10)
  {
    APSLogErrorAt();
    v29 = -6705;
LABEL_27:
    BTLEBonjourServiceArray = v29;
    goto LABEL_20;
  }
  v11 = v10;
  CFStringGetTypeID();
  v31 = (void *)CFDictionaryGetTypedValue();
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@:%@"), v9, v11);
  if (!v13)
  {
    APSLogErrorAt();
    v29 = -6728;
    goto LABEL_27;
  }
  v14 = v13;
  BTLEBonjourServiceArray = browser_createBTLEBonjourServiceArray(v13, (CFArrayRef *)&value);
  if (BTLEBonjourServiceArray)
  {
    APSLogErrorAt();
LABEL_30:
    v27 = v14;
    goto LABEL_19;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    APSLogErrorAt();
    BTLEBonjourServiceArray = -6728;
    goto LABEL_30;
  }
  v16 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("deviceID"), TypedValue);
  CFDictionarySetValue(v16, CFSTR("dnsName"), v14);
  if (a2)
  {
    CFDictionarySetValue(v16, CFSTR("removedServices"), value);
    CFDictionarySetValue(v16, CFSTR("serviceType"), CFSTR("_airplay._tcp."));
  }
  else
  {
    v30 = a3;
    v17 = a4;
    CFDictionarySetValue(v16, CFSTR("services"), value);
    CFDictionarySetValue(v16, CFSTR("serviceType"), CFSTR("_airplay._tcp."));
    CFDataGetTypeID();
    v18 = (const void *)CFDictionaryGetTypedValue();
    if (BTLEBonjourServiceArray)
    {
      APSLogErrorAt();
      v20 = 0;
      goto LABEL_34;
    }
    CFDictionarySetValue(v16, CFSTR("name"), v31);
    CFDictionarySetValue(v16, CFSTR("txt"), v18);
    a4 = v17;
    a3 = v30;
  }
  v19 = CFStringCreateWithFormat(v12, 0, CFSTR("%@:%@"), v9, v11);
  v20 = v19;
  if (v19)
  {
    BTLEBonjourServiceArray = browser_createBTLEBonjourServiceArray(v19, (CFArrayRef *)&cf);
    if (BTLEBonjourServiceArray)
    {
      APSLogErrorAt();
      goto LABEL_34;
    }
    v21 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v21)
    {
      v22 = v21;
      CFDictionarySetValue(v21, CFSTR("deviceID"), TypedValue);
      CFDictionarySetValue(v22, CFSTR("dnsName"), v20);
      if (a2)
      {
        CFDictionarySetValue(v22, CFSTR("removedServices"), cf);
        v23 = CFSTR("serviceType");
        v24 = CFSTR("_raop._tcp.");
        v25 = v22;
      }
      else
      {
        CFDictionarySetValue(v22, CFSTR("services"), cf);
        CFDictionarySetValue(v22, CFSTR("serviceType"), CFSTR("_raop._tcp."));
        CFDataGetTypeID();
        v26 = CFDictionaryGetTypedValue();
        if (BTLEBonjourServiceArray)
        {
          APSLogErrorAt();
          CFRelease(v16);
          CFRelease(v22);
          goto LABEL_17;
        }
        CFDictionarySetValue(v22, CFSTR("name"), v31);
        v23 = CFSTR("txt");
        v25 = v22;
        v24 = (const __CFString *)v26;
      }
      CFDictionarySetValue(v25, v23, v24);
      *a3 = v16;
      *a4 = v22;
LABEL_17:
      CFRelease(v14);
LABEL_18:
      v27 = v20;
LABEL_19:
      CFRelease(v27);
      goto LABEL_20;
    }
  }
  APSLogErrorAt();
  BTLEBonjourServiceArray = -6728;
LABEL_34:
  CFRelease(v16);
  CFRelease(v14);
  if (v20)
    goto LABEL_18;
LABEL_20:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  return BTLEBonjourServiceArray;
}

uint64_t browser_removeService(const void *a1, __CFString *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  int **v7;
  const __CFString *v8;
  __CFString *v9;
  CFAllocatorRef v10;
  const __CFDictionary *v11;
  __CFDictionary *v12;
  void *v13;
  const void *v14;
  int v15;
  const __CFArray *TypedValue;
  BOOL v17;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  __int16 v23;
  int v24;
  void *value;
  void *key;
  unsigned int Transports;

  Transports = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  key = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  if (!a2 || !a3)
    goto LABEL_25;
  v7 = (int **)DerivedStorage;
  if (browser_skipBonjourUpdate(a1, (uint64_t)a3))
    goto LABEL_43;
  CFDictionaryGetValue(a3, CFSTR("name"));
  if (CFSTR("RAOP") == a2 || CFSTR("RAOP") && CFEqual(a2, CFSTR("RAOP")))
  {
    v8 = CFSTR("RAOPBonjourInfo");
    goto LABEL_17;
  }
  v9 = (__CFString *)v7[8];
  if (v9 != a2 && (!v9 || !CFEqual(a2, v9)))
  {
    if (CFSTR("AirPlayPartial") == a2 || CFSTR("AirPlayPartial") && CFEqual(a2, CFSTR("AirPlayPartial")))
    {
      v8 = CFSTR("AirPlayP2PBonjourInfo");
      goto LABEL_17;
    }
LABEL_25:
    APSLogErrorAt();
    Transports = -6705;
    goto LABEL_43;
  }
  v8 = (const __CFString *)v7[7];
  if (!v8)
    goto LABEL_25;
LABEL_17:
  v10 = CFGetAllocator(a1);
  Transports = APBrowserCopyDeviceIDFromBonjourInfo(v10, (uint64_t)a3, (CFNumberRef *)&key);
  if (Transports)
    goto LABEL_41;
  v11 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v7[25], key);
  if (!v11)
  {
    v19 = **v7;
    if (v19 > 40 || v19 == -1 && !_LogCategory_Initialize())
      goto LABEL_66;
LABEL_54:
    LogPrintF();
LABEL_66:
    Transports = 0;
    goto LABEL_43;
  }
  v12 = v11;
  v13 = (void *)CFDictionaryGetValue(v11, v8);
  value = v13;
  if (!v13)
  {
    v20 = **v7;
    if (v20 > 40 || v20 == -1 && !_LogCategory_Initialize())
      goto LABEL_66;
    goto LABEL_54;
  }
  v14 = v13;
  Transports = APBrowserGetTransports(a3, 1, &v24);
  if (Transports)
    goto LABEL_41;
  v15 = **v7;
  if (v15 <= 40 && (v15 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CFRetain(v14);
  CFDictionaryRemoveValue(v12, v8);
  Transports = BonjourDevice_MergeInfo();
  if (Transports)
    goto LABEL_41;
  CFDictionarySetValue(v12, v8, value);
  CFRelease(value);
  CFArrayGetTypeID();
  TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
  if (Transports != -6727)
  {
    if (Transports)
      goto LABEL_41;
  }
  Transports = 0;
  if (TypedValue && CFArrayGetCount(TypedValue))
  {
    v17 = 0;
  }
  else
  {
    CFDictionaryRemoveValue(v12, v8);
    Transports = browser_queryServiceAvailabilityForDevice((uint64_t)a1, key, (BOOL *)&v23 + 1, (BOOL *)&v23, &v22);
    if (Transports)
      goto LABEL_41;
    v17 = (HIBYTE(v23) | v23 | v22) == 0;
  }
  if (CFDictionaryGetInt64())
  {
    if (*((_WORD *)v7 + 12) == 1)
    {
      v21 = **v7;
      if (v21 <= 40 && (v21 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      goto LABEL_43;
    }
    if ((v24 & 4) != 0)
    {
      Transports = browser_cacheP2PDNSAddresses(a1, (uint64_t)key, v12);
      if (Transports)
        goto LABEL_41;
    }
  }
  if (v17)
  {
    Transports = browser_removeNearbyDevice(a1, key);
    if (!Transports)
      goto LABEL_43;
    goto LABEL_41;
  }
  Transports = browser_updateEventInfoForDevice(a1, key);
  if (Transports)
LABEL_41:
    APSLogErrorAt();
LABEL_43:
  if (key)
    CFRelease(key);
  return Transports;
}

uint64_t browser_createBTLEBonjourServiceArray(const void *a1, CFArrayRef *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  const void *v7[2];

  v7[1] = *(const void **)MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("domain"), CFSTR("local."));
    CFDictionarySetValue(v5, CFSTR("ifname"), CFSTR("btle0"));
    CFDictionarySetInt64();
    CFDictionarySetValue(v5, CFSTR("dnsName"), a1);
    v7[0] = v5;
    *a2 = CFArrayCreate(0, v7, 1, MEMORY[0x1E0C9B378]);
    CFRelease(v5);
    return 0;
  }
  else
  {
    APSLogErrorAt();
    return 4294960568;
  }
}

uint64_t browser_skipBonjourUpdate(const void *a1, uint64_t a2)
{
  int **DerivedStorage;
  CFAllocatorRef v5;
  int v6;
  uint64_t Int64;
  int v8;
  const void *TypedValue;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex Count;
  __CFString *v19;
  uint64_t v20;
  int v21;
  CFTypeRef cf;

  DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!APSSettingsGetInt64())
    return 0;
  v5 = CFGetAllocator(a1);
  if (APBrowserCopyDeviceIDFromBonjourInfo(v5, a2, (CFNumberRef *)&cf))
  {
    APSLogErrorAt();
  }
  else
  {
    v6 = **DerivedStorage;
    if (v6 <= 30 && (v6 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    Int64 = APSSettingsGetInt64();
    if (Int64 == FigCFNumberGetUInt64())
    {
      v8 = **DerivedStorage;
      if (v8 <= 30 && (v8 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CFStringGetTypeID();
      if ((__CFString *)CFDictionaryGetTypedValue() != CFSTR("com.apple.airplay"))
      {
        CFStringGetTypeID();
        if (!CFDictionaryGetTypedValue()
          || (CFStringGetTypeID(),
              TypedValue = (const void *)CFDictionaryGetTypedValue(),
              !CFEqual(CFSTR("com.apple.airplay"), TypedValue)))
        {
LABEL_31:
          v21 = **DerivedStorage;
          if (v21 <= 30 && (v21 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          v20 = 1;
          goto LABEL_36;
        }
      }
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = v11;
        CFArrayGetTypeID();
        v13 = CFDictionaryGetTypedValue();
        v14 = (const __CFArray *)v13;
        v15 = 0;
        if (v10 <= 1)
          v16 = 1;
        else
          v16 = v10;
        v17 = v10 - v16;
        if (v13)
        {
LABEL_20:
          Count = CFArrayGetCount(v14);
          goto LABEL_22;
        }
        while (1)
        {
          Count = 0;
LABEL_22:
          if (v15 >= Count)
            break;
          CFDictionaryGetTypeID();
          CFArrayGetTypedValueAtIndex();
          CFStringGetTypeID();
          v19 = (__CFString *)CFDictionaryGetTypedValue();
          if (!(v17 + v15) || v19 != CFSTR("nan0") && (!v19 || !CFEqual(v19, CFSTR("nan0"))))
            goto LABEL_31;
          ++v15;
          if (v14)
            goto LABEL_20;
        }
        v11 = 0;
        v10 += v15;
      }
      while ((v12 & 1) != 0);
    }
  }
  v20 = 0;
LABEL_36:
  if (cf)
    CFRelease(cf);
  return v20;
}

uint64_t browser_cacheP2PDNSAddresses(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t DNSForDeviceIDInternal;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  CFStringRef v14;
  const void *Value;
  int v16;
  int v17;
  const __CFAllocator *v18;
  const void *v19;
  int v20;
  int v21;
  char __s1[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char cStr[16];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)cStr = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)__s1 = 0u;
  v24 = 0u;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  v7 = (int **)DerivedStorage;
  v8 = CFGetInt64();
  if (!v8)
  {
    APSLogErrorAt();
    return 4294960534;
  }
  v9 = v8;
  DNSForDeviceIDInternal = browser_getDNSForDeviceIDInternal(a1, v8, 1, 1, 0, 1, cStr, 0x100uLL, 0);
  if ((_DWORD)DNSForDeviceIDInternal != -6727 && (v11 = DNSForDeviceIDInternal, (_DWORD)DNSForDeviceIDInternal)
    || (v12 = browser_getDNSForDeviceIDInternal(a1, v9, 1, 0, 0, 1, __s1, 0x100uLL, 0), (_DWORD)v12 != -6727)
    && (v11 = v12, (_DWORD)v12))
  {
    APSLogErrorAt();
    return v11;
  }
  if (cStr[0])
  {
    v13 = CFGetAllocator(a1);
    v14 = CFStringCreateWithCString(v13, cStr, 0x8000100u);
    if (!v14)
    {
      APSLogErrorAt();
      return 4294960568;
    }
    Value = v14;
    CFDictionarySetValue(a3, CFSTR("CachedAirPlayP2PDNS"), v14);
    v16 = **v7;
    if (v16 <= 40 && (v16 != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  else
  {
    Value = CFDictionaryGetValue(a3, CFSTR("CachedAirPlayP2PDNS"));
    if (Value)
    {
      v17 = **v7;
      if (v17 <= 40 && (v17 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CFDictionaryRemoveValue(a3, CFSTR("CachedAirPlayP2PDNS"));
      Value = 0;
    }
  }
  if (!__s1[0] || !strncmp(__s1, cStr, 0x100uLL))
  {
    v19 = CFDictionaryGetValue(a3, CFSTR("CachedRAOPP2PDNS"));
    if (v19)
    {
      v21 = **v7;
      if (v21 <= 40 && (v21 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CFDictionaryRemoveValue(a3, CFSTR("CachedRAOPP2PDNS"));
      v11 = 0;
      v19 = 0;
      if (!Value)
        goto LABEL_37;
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  v18 = CFGetAllocator(a1);
  v19 = CFStringCreateWithCString(v18, __s1, 0x8000100u);
  if (v19)
  {
    CFDictionarySetValue(a3, CFSTR("CachedRAOPP2PDNS"), v19);
    v20 = **v7;
    if (v20 <= 40 && (v20 != -1 || _LogCategory_Initialize()))
      LogPrintF();
LABEL_32:
    v11 = 0;
    if (!Value)
      goto LABEL_37;
LABEL_36:
    CFRelease(Value);
    goto LABEL_37;
  }
  APSLogErrorAt();
  v11 = 4294960568;
  if (Value)
    goto LABEL_36;
LABEL_37:
  if (v19)
    CFRelease(v19);
  return v11;
}

uint64_t browser_getDNSForDeviceIDInternal(const void *a1, uint64_t a2, int a3, int a4, int a5, int a6, char *a7, size_t a8, _BYTE *a9)
{
  uint64_t DerivedStorage;
  int **v17;
  const __CFAllocator *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  const __CFDictionary *v21;
  const __CFString *Value;
  const void *v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  void *v27;
  const __CFArray *v28;
  const __CFArray *v29;
  CFIndex Count;
  CFIndex v31;
  CFIndex v32;
  __CFString *TypedValue;
  int v34;
  void *v35;
  unsigned int DNSName;
  void *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFArray *v40;
  const __CFDictionary *TypedValueAtIndex;
  const __CFString *v42;
  int v43;
  BOOL v44;
  BOOL v45;
  const __CFString *v46;
  int v47;
  int v49;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t valuePtr;
  int v56;
  char buffer[16];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  valuePtr = a2;
  v54 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v64 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  *(_OWORD *)buffer = 0u;
  if (*(_BYTE *)(DerivedStorage + 229))
    return -6723;
  v17 = (int **)DerivedStorage;
  v18 = CFGetAllocator(a1);
  v19 = CFNumberCreate(v18, kCFNumberSInt64Type, &valuePtr);
  if (!v19)
  {
    APSLogErrorAt();
    return -6728;
  }
  v20 = v19;
  if (IsAppleInternalBuild())
  {
    v21 = *(const __CFDictionary **)(CMBaseObjectGetDerivedStorage() + 216);
    if (v21)
    {
      Value = (const __CFString *)CFDictionaryGetValue(v21, v20);
      if (Value)
      {
        if (CFStringGetCString(Value, a7, a8, 0x8000100u))
        {
          v54 = 0;
        }
        else
        {
          APSLogErrorAt();
          v54 = -6762;
          APSLogErrorAt();
        }
        goto LABEL_8;
      }
    }
    v54 = 0;
  }
  v24 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v17[25], v20);
  if (!v24)
  {
    v51 = -6727;
    goto LABEL_80;
  }
  v25 = v24;
  v53 = a3;
  if (!a5)
  {
    if (a4 || (v37 = (void *)CFDictionaryGetValue(v24, CFSTR("RAOPBonjourInfo"))) == 0)
    {
      v34 = 0;
    }
    else
    {
      v27 = v37;
      DNSName = BonjourDevice_GetDNSName();
      v54 = DNSName;
      v34 = -6727;
      if (DNSName != -6727)
      {
LABEL_32:
        if (a6)
          goto LABEL_33;
        v44 = DNSName == -6727 || buffer[0] == 0;
        v45 = !v44;
        if (!v53 || v45)
          goto LABEL_33;
        if (a4 || (v46 = (const __CFString *)CFDictionaryGetValue(v25, CFSTR("CachedRAOPP2PDNS"))) == 0)
        {
          v46 = (const __CFString *)CFDictionaryGetValue(v25, CFSTR("CachedAirPlayP2PDNS"));
          if (!v46)
            goto LABEL_33;
        }
        if (CFStringGetCString(v46, buffer, 256, 0x8000100u))
        {
          v54 = 0;
          v49 = **v17;
          if (v49 <= 40 && (v49 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          goto LABEL_33;
        }
        APSLogErrorAt();
        v51 = -6762;
LABEL_80:
        v54 = v51;
LABEL_8:
        v23 = v20;
LABEL_66:
        CFRelease(v23);
        return v54;
      }
    }
    v35 = (void *)CFDictionaryGetValue(v25, v17[7]);
    if (!v35 || (v27 = v35, DNSName = BonjourDevice_GetDNSName(), v54 = DNSName, v34 = -6727, DNSName == -6727))
    {
      v27 = (void *)CFDictionaryGetValue(v25, CFSTR("AirPlayP2PBonjourInfo"));
      if (v27)
      {
        DNSName = BonjourDevice_GetDNSName();
        v54 = DNSName;
      }
      else
      {
        DNSName = v34;
      }
    }
    goto LABEL_32;
  }
  v26 = (const __CFDictionary *)CFDictionaryGetValue(v24, v17[7]);
  v27 = v26;
  if (v26)
  {
    v28 = (const __CFArray *)CFDictionaryGetValue(v26, CFSTR("services"));
    if (v28)
    {
      v29 = v28;
      Count = CFArrayGetCount(v28);
      if (Count >= 1)
      {
        v31 = Count;
        v32 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(v29, v32);
          CFStringGetTypeID();
          TypedValue = (__CFString *)CFDictionaryGetTypedValue();
          if (TypedValue == CFSTR("broker0") || TypedValue && CFEqual(TypedValue, CFSTR("broker0")))
            break;
          if (v31 == ++v32)
            goto LABEL_33;
        }
        CFDictionaryGetCString();
      }
    }
  }
LABEL_33:
  if (a9)
    *a9 = 0;
  v38 = (const __CFString *)APSSettingsCopyValue();
  v39 = v38;
  if (v38 && CFStringGetLength(v38) >= 1)
  {
    buffer[0] = 0;
    v56 = 0;
    if (!v27)
    {
      APSLogErrorAt();
      v56 = -6705;
LABEL_45:
      v54 = v56;
      v43 = **v17;
      if (v43 <= 50 && (v43 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      goto LABEL_60;
    }
    v40 = (const __CFArray *)BonjourDevice_CopyConnectionInfo();
    if (v56)
    {
      APSLogErrorAt();
    }
    else
    {
      if (CFArrayGetCount(v40)
        && (CFDictionaryGetTypeID(), (TypedValueAtIndex = (const __CFDictionary *)CFArrayGetTypedValueAtIndex()) != 0)
        && (v42 = (const __CFString *)CFDictionaryGetValue(TypedValueAtIndex, CFSTR("dnsName"))) != 0)
      {
        if (CFStringGetCString(v42, buffer, 256, 0x8000100u))
          goto LABEL_43;
        APSLogErrorAt();
        v52 = -6762;
      }
      else
      {
        APSLogErrorAt();
        v52 = -6727;
      }
      v56 = v52;
    }
LABEL_43:
    if (v40)
      CFRelease(v40);
    goto LABEL_45;
  }
LABEL_60:
  v47 = **v17;
  if (v47 <= 40 && (v47 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  strncpy(a7, buffer, a8);
  CFRelease(v20);
  if (v39)
  {
    v23 = v39;
    goto LABEL_66;
  }
  return v54;
}

uint64_t __browser_ensureConnectivityCheckTimerStarted_block_invoke()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 112))
  {
    mach_absolute_time();
    return CFDictionaryApplyBlock();
  }
  return result;
}

void __browser_ensureConnectivityCheckTimerStarted_block_invoke_2(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

int *__browser_handleConnectivityCheckTimerFired_block_invoke(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  int *result;
  const __CFString *Value;
  int v8;
  char v9;

  v9 = 0;
  if (!a2 || !a3)
  {
    APSLogErrorAt();
LABEL_14:
    result = **(int ***)(a1 + 40);
    if (*result <= 60)
    {
      if (*result != -1)
        return (int *)LogPrintF();
      result = (int *)_LogCategory_Initialize();
      if ((_DWORD)result)
        return (int *)LogPrintF();
    }
    return result;
  }
  CFDictionaryGetInt64();
  result = (int *)UpTicksToSeconds();
  if ((unint64_t)result >= 0x3D)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("IPAddress"));
    result = (int *)browser_shouldQueryIPv4Address(Value, &v9);
    if ((_DWORD)result)
      goto LABEL_13;
    if (v9 == 1)
    {
      v8 = ***(_DWORD ***)(a1 + 40);
      if (v8 <= 20 && (v8 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      result = (int *)browser_startBTLEDeviceQuery(*(const void **)(a1 + 48), a2);
      if ((_DWORD)result)
      {
LABEL_13:
        APSLogErrorAt();
        goto LABEL_14;
      }
    }
  }
  return result;
}

uint64_t browser_shouldQueryIPv4Address(const __CFString *a1, char *a2)
{
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  char v6;
  unsigned int v7;
  char buffer[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)buffer = 0u;
  v9 = 0u;
  if (a1 && CFStringGetCString(a1, buffer, 128, 0x8000100u))
  {
    inet_pton(2, buffer, &v7);
    result = 0;
    v4 = bswap32(v7) >> 16;
    if (v4)
      v5 = v4 == 43518;
    else
      v5 = 1;
    v6 = !v5;
    *a2 = v6;
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
  return result;
}

uint64_t browser_startBTLEDeviceQuery(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const __CFString *v8;
  uint64_t shouldQueryIPv4Address;
  const void *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const void *, const __CFString *, const void *, void (*)(uint64_t, const void *, const void *, const void *, int), const void *);
  uint64_t v13;
  const void *Int64;
  const void *v15;
  uint64_t v16;
  char v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  if (!a2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  v5 = DerivedStorage;
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), a2);
  if (!Value)
  {
    APSLogErrorAt();
    return 4294960534;
  }
  v7 = Value;
  v8 = (const __CFString *)CFDictionaryGetValue(Value, CFSTR("IPAddress"));
  shouldQueryIPv4Address = browser_shouldQueryIPv4Address(v8, &v18);
  if ((_DWORD)shouldQueryIPv4Address)
  {
    v16 = shouldQueryIPv4Address;
    goto LABEL_14;
  }
  if (v18 == 1)
  {
    v10 = CFDictionaryGetValue(v7, CFSTR("port"));
    v11 = *(_QWORD *)(v5 + 104);
    v12 = *(uint64_t (**)(uint64_t, const void *, const __CFString *, const void *, void (*)(uint64_t, const void *, const void *, const void *, int), const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v12)
    {
      v13 = v12(v11, a2, v8, v10, browser_handleBTLEQueryEventExternal, a1);
      if (!(_DWORD)v13)
      {
        CFRetain(a1);
        mach_absolute_time();
        Int64 = (const void *)CFNumberCreateInt64();
        if (!Int64)
        {
          APSLogErrorAt();
          return 4294960568;
        }
        v15 = Int64;
        CFDictionarySetValue(v7, CFSTR("lastQueryTicks"), Int64);
        CFRelease(v15);
        return 0;
      }
      v16 = v13;
    }
    else
    {
      v16 = 4294954514;
    }
LABEL_14:
    APSLogErrorAt();
    return v16;
  }
  if (!v18)
    browser_removeBonjourWithBTLE(a1, a2);
  return 0;
}

uint64_t browser_removeBonjourWithBTLE(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  uint64_t v7;
  __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  CFTypeRef cf;
  __CFDictionary *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v14 = 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), a2);
  if (!Value)
  {
    v11 = **(_DWORD **)DerivedStorage;
    if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    goto LABEL_15;
  }
  v6 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("lastInfo"));
  if (!v6)
  {
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  v7 = browser_createBonjourInfoForBTLEDevice(v6, 1, &v14, (__CFDictionary **)&cf);
  if ((_DWORD)v7)
  {
    v10 = v7;
    APSLogErrorAt();
    v8 = v14;
  }
  else
  {
    v8 = v14;
    v9 = browser_removeService(a1, CFSTR("AirPlay"), v14);
    if ((_DWORD)v9)
    {
      v10 = v9;
    }
    else
    {
      v10 = browser_removeService(a1, CFSTR("RAOP"), (const __CFDictionary *)cf);
      if (!(_DWORD)v10)
        goto LABEL_6;
    }
    APSLogErrorAt();
  }
LABEL_6:
  if (v8)
    CFRelease(v8);
LABEL_16:
  if (cf)
    CFRelease(cf);
  return v10;
}

void browser_handleBTLEQueryEventExternal(uint64_t a1, const void *a2, const void *a3, const void *a4, int a5)
{
  uint64_t DerivedStorage;
  NSObject *v10;
  _QWORD v11[7];
  int v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a4);
  CFRetain(a2);
  if (a3)
    CFRetain(a3);
  v10 = *(NSObject **)(DerivedStorage + 8);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __browser_handleBTLEQueryEventExternal_block_invoke;
  v11[3] = &__block_descriptor_60_e5_v8__0l;
  v11[4] = a4;
  v11[5] = a2;
  v11[6] = a3;
  v12 = a5;
  dispatch_async(v10, v11);
}

void __browser_handleBTLEQueryEventExternal_block_invoke(uint64_t a1)
{
  const void *v2;
  CFStringRef v3;
  const void *v4;
  int v5;
  uint64_t DerivedStorage;
  int **v7;
  __CFDictionary *v8;
  __CFDictionary *v9;
  const __CFString *TypedValue;
  const __CFString *v11;
  const void *v12;
  CFAllocatorRef v13;
  const __CFDictionary *v14;
  const __CFAllocator *v15;
  __CFDictionary *Mutable;
  const void *v17;
  int v18;
  int v19;
  int v20;
  const __CFDictionary *v21;
  const void *v22;
  int v23;
  void *value;
  CFTypeRef v25;
  CFTypeRef cf;
  int BonjourInfoForBTLEDevice;
  char cStr[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)(a1 + 32);
  v3 = *(CFStringRef *)(a1 + 40);
  v4 = *(const void **)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 56);
  BonjourInfoForBTLEDevice = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = 0;
  cf = 0;
  value = 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  *(_OWORD *)cStr = 0u;
  v29 = 0u;
  if (!v3)
  {
    APSLogErrorAt();
    Mutable = 0;
    goto LABEL_17;
  }
  v7 = (int **)DerivedStorage;
  v8 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 112), v3);
  if (v8)
  {
    v9 = v8;
    if (v4)
    {
      CFStringGetTypeID();
      TypedValue = (const __CFString *)CFDictionaryGetTypedValue();
      CFStringGetTypeID();
      v11 = (const __CFString *)CFDictionaryGetTypedValue();
      if (TypedValue && v11 && !CFStringHasPrefix(v11, TypedValue))
      {
        v19 = **v7;
        if (v19 <= 50 && (v19 != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
      else if (!v5)
      {
        CFDictionarySetValue(v9, CFSTR("lastInfo"), v4);
        BonjourInfoForBTLEDevice = browser_createBonjourInfoForBTLEDevice((const __CFDictionary *)v4, 0, (__CFDictionary **)&cf, (__CFDictionary **)&v25);
        if (BonjourInfoForBTLEDevice
          || (CFStringGetTypeID(), v12 = (const void *)CFDictionaryGetTypedValue(), BonjourInfoForBTLEDevice)
          || (v13 = CFGetAllocator(v2),
              v14 = (const __CFDictionary *)cf,
              (BonjourInfoForBTLEDevice = APBrowserCopyDeviceIDFromBonjourInfo(v13, (uint64_t)cf, (CFNumberRef *)&value)) != 0))
        {
          APSLogErrorAt();
          Mutable = 0;
LABEL_14:
          v3 = 0;
          goto LABEL_32;
        }
        CFDictionarySetValue(v9, CFSTR("deviceName"), v12);
        CFDictionarySetValue(v9, CFSTR("bonjourDeviceID"), value);
        CFDictionarySetValue(v9, CFSTR("connectionError"), CFSTR("No Error"));
        v15 = CFGetAllocator(v2);
        Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v17 = CFDictionaryGetValue(v9, CFSTR("btleRSSI"));
          FigCFDictionarySetValueFromKeyInDict();
          CFDictionarySetValue(Mutable, CFSTR("btleRSSI"), v17);
          BonjourInfoForBTLEDevice = browser_addOrUpdateService(v2, CFSTR("AirPlay"), v14, Mutable);
          if (BonjourInfoForBTLEDevice
            || (BonjourInfoForBTLEDevice = browser_addOrUpdateService(v2, CFSTR("RAOP"), (const __CFDictionary *)v25, Mutable)) != 0)
          {
            APSLogErrorAt();
          }
          goto LABEL_14;
        }
        APSLogErrorAt();
        v3 = 0;
        v18 = -6728;
        goto LABEL_18;
      }
      goto LABEL_23;
    }
    if (v5)
    {
LABEL_23:
      v20 = **v7;
      if (v20 <= 20 && (v20 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      DebugGetErrorString();
      v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
      CFDictionarySetValue(v9, CFSTR("connectionError"), v3);
      v21 = (const __CFDictionary *)CFDictionaryGetValue(v9, CFSTR("lastInfo"));
      if (v21)
      {
        BonjourInfoForBTLEDevice = browser_createBonjourInfoForBTLEDevice(v21, 1, (__CFDictionary **)&cf, (__CFDictionary **)&v25);
        if (BonjourInfoForBTLEDevice
          || (BonjourInfoForBTLEDevice = browser_removeService(v2, CFSTR("AirPlay"), (const __CFDictionary *)cf)) != 0
          || (BonjourInfoForBTLEDevice = browser_removeService(v2, CFSTR("RAOP"), (const __CFDictionary *)v25)) != 0)
        {
          APSLogErrorAt();
        }
      }
      Mutable = 0;
      goto LABEL_32;
    }
    APSLogErrorAt();
    Mutable = 0;
    v3 = 0;
LABEL_17:
    v18 = -6705;
LABEL_18:
    BonjourInfoForBTLEDevice = v18;
    goto LABEL_32;
  }
  v23 = **v7;
  if (v23 <= 40 && (v23 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  Mutable = 0;
  v3 = 0;
  BonjourInfoForBTLEDevice = 0;
LABEL_32:
  CFRelease(v2);
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  if (v3)
    CFRelease(v3);
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  v22 = *(const void **)(a1 + 48);
  if (v22)
    CFRelease(v22);
}

uint64_t browser_addOrUpdateService(const void *a1, __CFString *a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CFAllocatorRef v10;
  uint64_t v11;
  __CFDictionary *v12;
  const __CFDictionary *v13;
  void *v14;
  uint64_t v15;
  const __CFString *v16;
  void *v17;
  uint64_t v18;
  const __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  int v22;
  uint64_t Transports;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  uint64_t v28;
  int v29;
  const __CFAllocator *v30;
  __CFDictionary *Mutable;
  __CFDictionary *v32;
  void *key;
  int v35;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  key = 0;
  if (!*(_WORD *)(DerivedStorage + 24))
    return 0;
  if (a2 && a3)
  {
    v9 = DerivedStorage;
    if (browser_skipBonjourUpdate(a1, (uint64_t)a3))
      goto LABEL_48;
    v10 = CFGetAllocator(a1);
    v11 = APBrowserCopyDeviceIDFromBonjourInfo(v10, (uint64_t)a3, (CFNumberRef *)&key);
    if ((_DWORD)v11)
    {
      v28 = v11;
      goto LABEL_67;
    }
    v12 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 200), key);
    if (v12)
    {
      v13 = v12;
      if (a4)
        CFDictionarySetValue(v12, CFSTR("DiscoveryMetrics"), a4);
      v14 = key;
      v15 = CMBaseObjectGetDerivedStorage();
      v35 = 0;
      if (CFDictionaryGetValue(a3, CFSTR("name")))
      {
        if (CFSTR("RAOP") == a2 || CFSTR("RAOP") && CFEqual(a2, CFSTR("RAOP")))
        {
          v16 = CFSTR("RAOPBonjourInfo");
LABEL_34:
          v22 = **(_DWORD **)v15;
          if (v22 <= 40 && (v22 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          Transports = APBrowserGetTransports(a3, 1, &v35);
          if ((_DWORD)Transports)
          {
            v28 = Transports;
          }
          else
          {
            v24 = (void *)CFDictionaryGetValue(v13, v16);
            value = v24;
            if (!v24)
            {
              CFDictionarySetValue(v13, v16, a3);
              goto LABEL_43;
            }
            CFRetain(v24);
            CFDictionaryRemoveValue(v13, v16);
            v25 = BonjourDevice_MergeInfo();
            if (!(_DWORD)v25)
            {
              CFDictionarySetValue(v13, v16, value);
              CFRelease(value);
LABEL_43:
              if (CFDictionaryGetInt64()
                && *(_WORD *)(v15 + 24) != 1
                && (v35 & 4) != 0
                && (v26 = browser_cacheP2PDNSAddresses(a1, (uint64_t)v14, v13), (_DWORD)v26))
              {
                v28 = v26;
              }
              else
              {
                updated = browser_updateEventInfoForDevice(a1, v14);
                if (!(_DWORD)updated)
                  goto LABEL_48;
                v28 = updated;
              }
              goto LABEL_80;
            }
            v28 = v25;
          }
LABEL_80:
          APSLogErrorAt();
          goto LABEL_67;
        }
        v20 = *(__CFString **)(v15 + 64);
        if (v20 == a2 || v20 && CFEqual(a2, v20))
        {
          v16 = *(const __CFString **)(v15 + 56);
          if (v16)
            goto LABEL_34;
          goto LABEL_66;
        }
        if (CFSTR("AirPlayPartial") == a2 || CFSTR("AirPlayPartial") && CFEqual(a2, CFSTR("AirPlayPartial")))
        {
          if (*(_WORD *)(v15 + 24) == 3)
          {
            v16 = CFSTR("AirPlayP2PBonjourInfo");
            goto LABEL_34;
          }
LABEL_48:
          v28 = 0;
          goto LABEL_63;
        }
LABEL_66:
        APSLogErrorAt();
        v28 = 4294960591;
LABEL_67:
        APSLogErrorAt();
        goto LABEL_63;
      }
    }
    else
    {
      v17 = key;
      v18 = CMBaseObjectGetDerivedStorage();
      if (CFDictionaryGetValue(a3, CFSTR("name")))
      {
        if (CFSTR("RAOP") == a2 || CFSTR("RAOP") && CFEqual(a2, CFSTR("RAOP")))
        {
          v19 = CFSTR("RAOPBonjourInfo");
        }
        else
        {
          v21 = *(__CFString **)(v18 + 64);
          if (v21 == a2 || v21 && CFEqual(a2, v21))
          {
            v19 = *(const __CFString **)(v18 + 56);
            if (!v19)
              goto LABEL_66;
          }
          else
          {
            if (CFSTR("AirPlayPartial") != a2 && (!CFSTR("AirPlayPartial") || !CFEqual(a2, CFSTR("AirPlayPartial"))))
              goto LABEL_66;
            if (*(_WORD *)(v18 + 24) != 3)
              goto LABEL_48;
            v19 = CFSTR("AirPlayP2PBonjourInfo");
          }
        }
        v29 = **(_DWORD **)v18;
        if (v29 <= 40 && (v29 != -1 || _LogCategory_Initialize()))
          LogPrintF();
        v30 = CFGetAllocator(a1);
        Mutable = CFDictionaryCreateMutable(v30, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v32 = Mutable;
          CFDictionarySetValue(Mutable, v19, a3);
          if (a4)
            CFDictionarySetValue(v32, CFSTR("DiscoveryMetrics"), a4);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v18 + 200), v17, v32);
          v28 = browser_updateEventInfoForDevice(a1, v17);
          if (!(_DWORD)v28)
          {
            CFRelease(v32);
            goto LABEL_63;
          }
          APSLogErrorAt();
          CFRelease(v32);
        }
        else
        {
          APSLogErrorAt();
          v28 = 4294960568;
        }
        goto LABEL_67;
      }
    }
    APSLogErrorAt();
    v28 = 4294960534;
    goto LABEL_67;
  }
  APSLogErrorAt();
  v28 = 4294960591;
LABEL_63:
  if (key)
    CFRelease(key);
  return v28;
}

void browser_handleIPv4EventInternal(uint64_t a1, const __CFArray *a2)
{
  int v3;
  int v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  uint64_t v8;
  void *v9;
  int v10;

  v3 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
  if (v3 <= 20 && (v3 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  v4 = socket(2, 2, 0);
  if (v4 < 0 && (!*__error() || *__error()))
  {
    APSLogErrorAt();
  }
  else
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v6 = Count;
      for (i = 0; i != v6; ++i)
      {
        CFArrayGetValueAtIndex(a2, i);
        v8 = CFCopyCString();
        if (v8)
        {
          v9 = (void *)v8;
          v10 = SNScanF();
          free(v9);
          if (v10 == 1)
            SocketGetInterfaceInfo();
        }
      }
    }
    if ((v4 & 0x80000000) == 0 && close(v4))
    {
      if (*__error())
        __error();
    }
  }
}

int *__browser_requeryBTLEDevices_block_invoke(uint64_t a1, const void *a2)
{
  int *result;

  if (a2)
  {
    result = (int *)browser_startBTLEDeviceQuery(*(const void **)(a1 + 32), a2);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    APSLogErrorAt();
  }
  result = **(int ***)(a1 + 40);
  if (*result <= 60)
  {
    if (*result != -1)
      return (int *)LogPrintF();
    result = (int *)_LogCategory_Initialize();
    if ((_DWORD)result)
      return (int *)LogPrintF();
  }
  return result;
}

uint64_t __browser_flushAllRapportDevices_block_invoke(uint64_t a1, const void *a2)
{
  return browser_updateEventInfoForDevice(*(const void **)(a1 + 32), a2);
}

void __browser_flushAllBrokerResults_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  CFTypeRef cf;

  cf = 0;
  v5 = ***(_DWORD ***)(a1 + 32);
  if (v5 > 40)
    goto LABEL_9;
  if (v5 == -1)
  {
    if (!_LogCategory_Initialize())
      goto LABEL_9;
    v5 = ***(_DWORD ***)(a1 + 32);
  }
  if (v5 == -1)
    _LogCategory_Initialize();
  APBrokeredReceiverGetDeviceID(a3);
  LogPrintF();
LABEL_9:
  APBrokeredReceiverCopyBonjourInfo(a3, 1, (__CFDictionary **)&cf);
  if (cf)
    browser_removeService(*(const void **)(a1 + 40), CFSTR("AirPlay"), (const __CFDictionary *)cf);
  else
    APSLogErrorAt();
  if (cf)
    CFRelease(cf);
}

int *browser_handleBrokerGroupAddOrUpdate()
{
  int *result;

  result = *(int **)CMBaseObjectGetDerivedStorage();
  if (*result <= 50)
  {
    if (*result != -1)
      return (int *)LogPrintF();
    result = (int *)_LogCategory_Initialize();
    if ((_DWORD)result)
      return (int *)LogPrintF();
  }
  return result;
}

int *browser_handleBrokerGroupRemove()
{
  int *result;

  result = *(int **)CMBaseObjectGetDerivedStorage();
  if (*result <= 50)
  {
    if (*result != -1)
      return (int *)LogPrintF();
    result = (int *)_LogCategory_Initialize();
    if ((_DWORD)result)
      return (int *)LogPrintF();
  }
  return result;
}

void browser_handleBrokeredReceiverAddOrUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  int v6;
  const void *Int64;
  NSObject *v8;
  _QWORD block[9];
  __CFDictionary *v10;
  int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  v6 = **(_DWORD **)DerivedStorage;
  if (v6 <= 50)
  {
    if (v6 == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_9;
      v6 = **(_DWORD **)DerivedStorage;
    }
    if (v6 == -1)
      _LogCategory_Initialize();
    APBrokeredReceiverGetDeviceID(a2);
    LogPrintF();
  }
LABEL_9:
  v11 = APBrokeredReceiverCopyBonjourInfo(a2, 0, &v10);
  if (v11 || (BonjourDevice_GetDeviceID(), v11))
  {
    APSLogErrorAt();
  }
  else
  {
    Int64 = (const void *)CFNumberCreateInt64();
    v8 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __browser_handleBrokeredReceiverAddOrUpdate_block_invoke;
    block[3] = &__block_descriptor_72_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = Int64;
    block[6] = a2;
    block[7] = a3;
    block[8] = v10;
    dispatch_sync(v8, block);
    if (Int64)
      CFRelease(Int64);
  }
  if (v10)
    CFRelease(v10);
}

void browser_handleBrokeredReceiverRemoved(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  int v6;
  const void *Int64;
  NSObject *v8;
  _QWORD block[8];
  __CFDictionary *v10;
  int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  v6 = **(_DWORD **)DerivedStorage;
  if (v6 <= 50)
  {
    if (v6 == -1)
    {
      if (!_LogCategory_Initialize())
        goto LABEL_9;
      v6 = **(_DWORD **)DerivedStorage;
    }
    if (v6 == -1)
      _LogCategory_Initialize();
    APBrokeredReceiverGetDeviceID(a2);
    LogPrintF();
  }
LABEL_9:
  v11 = APBrokeredReceiverCopyBonjourInfo(a2, 1, &v10);
  if (v11 || (BonjourDevice_GetDeviceID(), v11))
  {
    APSLogErrorAt();
  }
  else
  {
    Int64 = (const void *)CFNumberCreateInt64();
    v8 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __browser_handleBrokeredReceiverRemoved_block_invoke;
    block[3] = &__block_descriptor_64_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = Int64;
    block[6] = a3;
    block[7] = v10;
    dispatch_sync(v8, block);
    if (Int64)
      CFRelease(Int64);
  }
  if (v10)
    CFRelease(v10);
}

uint64_t __browser_handleBrokeredReceiverAddOrUpdate_block_invoke(uint64_t a1)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 344), *(const void **)(a1 + 40), *(const void **)(a1 + 48));
  return browser_handleBonjourAddOrUpdate(*(const void **)(a1 + 56), CFSTR("AirPlay"), *(const __CFDictionary **)(a1 + 64));
}

uint64_t browser_handleBonjourAddOrUpdate(const void *a1, __CFString *a2, const __CFDictionary *a3)
{
  const __CFArray *TypedValue;
  unsigned int updated;

  CMBaseObjectGetDerivedStorage();
  if (!a3 || !a2)
  {
    APSLogErrorAt();
    return -6705;
  }
  CFArrayGetTypeID();
  TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
  if (TypedValue && CFArrayGetCount(TypedValue))
  {
    updated = browser_removeService(a1, a2, a3);
    if (updated)
      goto LABEL_8;
  }
  else
  {
    updated = browser_addOrUpdateService(a1, a2, a3, 0);
    if (updated)
LABEL_8:
      APSLogErrorAt();
  }
  return updated;
}

uint64_t __browser_handleBrokeredReceiverRemoved_block_invoke(uint64_t a1)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 344), *(const void **)(a1 + 40));
  return browser_handleBonjourRemove(*(const void **)(a1 + 48), CFSTR("AirPlay"), *(const __CFDictionary **)(a1 + 56));
}

uint64_t browser_handleBonjourRemove(const void *a1, __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v6;

  CMBaseObjectGetDerivedStorage();
  v6 = browser_removeService(a1, a2, a3);
  if ((_DWORD)v6)
    APSLogErrorAt();
  return v6;
}

Class initNISession()
{
  Class result;

  if (NearbyInteractionLibrary_sOnce_0 != -1)
    dispatch_once(&NearbyInteractionLibrary_sOnce_0, &__block_literal_global_18);
  result = objc_getClass("NISession");
  classNISession = (uint64_t)result;
  getNISessionClass = NISessionFunction;
  return result;
}

uint64_t NISessionFunction()
{
  return classNISession;
}

Class initNISpatialBrowsingConfiguration()
{
  Class result;

  if (NearbyInteractionLibrary_sOnce_0 != -1)
    dispatch_once(&NearbyInteractionLibrary_sOnce_0, &__block_literal_global_18);
  result = objc_getClass("NISpatialBrowsingConfiguration");
  classNISpatialBrowsingConfiguration = (uint64_t)result;
  getNISpatialBrowsingConfigurationClass = NISpatialBrowsingConfigurationFunction;
  return result;
}

uint64_t NISpatialBrowsingConfigurationFunction()
{
  return classNISpatialBrowsingConfiguration;
}

uint64_t browser_setEventHandler(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 229))
    return 4294960573;
  v3 = DerivedStorage;
  if (*(_WORD *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  else
  {
    result = 0;
    *(_OWORD *)(v3 + 232) = *(_OWORD *)(a1 + 8);
  }
  return result;
}

uint64_t browser_getDNSForDeviceID(uint64_t a1)
{
  return browser_getDNSForDeviceIDInternal(*(const void **)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 17), *(unsigned __int8 *)(a1 + 18), 0, *(char **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE **)(a1 + 40));
}

uint64_t browser_startTrackingDevice(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *Value;
  __CFDictionary *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t valuePtr;
  unsigned int v16;

  v16 = 0;
  v3 = *(const void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  valuePtr = v2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 229))
    return 4294960573;
  if (v2)
  {
    v5 = DerivedStorage;
    if (*(unsigned __int16 *)(DerivedStorage + 24) - 4 <= 0xFFFFFFFD)
    {
      APSLogErrorAt();
      return 4294960587;
    }
    else
    {
      v6 = CFGetAllocator(v3);
      v7 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr);
      if (v7)
      {
        v8 = v7;
        Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 200), v7);
        if (Value)
        {
          v10 = Value;
          CFDictionaryGetInt64();
          CFDictionaryGetInt64();
          v16 = browser_cacheP2PDNSAddresses(v3, (uint64_t)v8, v10);
          if (v16)
          {
            APSLogErrorAt();
          }
          else
          {
            v11 = CMBaseObjectGetDerivedStorage();
            ++*(_DWORD *)(v11 + 224);
            v16 = 0;
            CFDictionarySetInt64();
            CFDictionarySetValue(v10, CFSTR("IsTracked"), (const void *)*MEMORY[0x1E0C9AE50]);
            if (*(_BYTE *)(a1 + 24))
              v12 = 1;
            else
              v12 = 2;
            *(_DWORD *)(v5 + 428) |= v12;
            v13 = **(_DWORD **)v5;
            if (v13 <= 40 && (v13 != -1 || _LogCategory_Initialize()))
              LogPrintF();
          }
        }
        else
        {
          APSLogErrorAt();
          v16 = -6727;
        }
        CFRelease(v8);
        return v16;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t browser_stopTrackingDevice(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t DerivedStorage;
  int **v4;
  const __CFAllocator *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *Value;
  __CFDictionary *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v15;
  uint64_t valuePtr;
  unsigned int updated;

  updated = 0;
  v2 = *(const void **)a1;
  v1 = *(_QWORD *)(a1 + 8);
  valuePtr = v1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 229))
    return 4294960573;
  if (v1)
  {
    v4 = (int **)DerivedStorage;
    if (*(_WORD *)(DerivedStorage + 24))
    {
      v5 = CFGetAllocator(v2);
      v6 = CFNumberCreate(v5, kCFNumberSInt64Type, &valuePtr);
      if (v6)
      {
        v7 = v6;
        Value = (__CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v4[25], v6);
        if (Value)
        {
          v9 = Value;
          CFRetain(Value);
          if (!CFDictionaryGetInt64())
            goto LABEL_20;
          v10 = CFDictionaryGetInt64() - 1;
          CFDictionarySetInt64();
          v11 = **v4;
          if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          if (v10)
          {
LABEL_20:
            updated = 0;
          }
          else
          {
            CFDictionaryRemoveValue(v9, CFSTR("CachedRAOPP2PDNS"));
            CFDictionaryRemoveValue(v9, CFSTR("CachedAirPlayP2PDNS"));
            CFDictionaryRemoveValue(v9, CFSTR("IsTracked"));
            v12 = CMBaseObjectGetDerivedStorage();
            --*(_DWORD *)(v12 + 224);
            updated = 0;
            updated = browser_updateDevice(v2, v7, v9);
            if (updated)
            {
              APSLogErrorAt();
            }
            else
            {
              v13 = **v4;
              if (v13 <= 40 && (v13 != -1 || _LogCategory_Initialize()))
                LogPrintF();
            }
          }
          CFRelease(v9);
        }
        else
        {
          v15 = **v4;
          if (v15 <= 40 && (v15 != -1 || _LogCategory_Initialize()))
            LogPrintF();
          updated = 0;
        }
        CFRelease(v7);
        return updated;
      }
      else
      {
        APSLogErrorAt();
        return 4294960568;
      }
    }
    else
    {
      APSLogErrorAt();
      return 4294960587;
    }
  }
  else
  {
    APSLogErrorAt();
    return 4294960591;
  }
}

uint64_t browser_reconfirmDevice(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  int **v5;
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  const void *v11;
  uint64_t v12;
  int v13;
  const void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t valuePtr;

  v1 = *(const void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  valuePtr = v2;
  v3 = *(_QWORD *)(a1 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 229))
    return 4294960573;
  if (!v2)
  {
    APSLogErrorAt();
    return 4294960591;
  }
  v5 = (int **)DerivedStorage;
  if (!*(_WORD *)(DerivedStorage + 24))
  {
    APSLogErrorAt();
    return 4294960587;
  }
  v6 = CFGetAllocator(v1);
  v7 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr);
  if (!v7)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v8 = v7;
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v5[25], v7);
  if (!Value)
  {
    APSLogErrorAt();
    v17 = 4294960569;
    goto LABEL_19;
  }
  v10 = Value;
  v11 = CFDictionaryGetValue(Value, v5[7]);
  if (v11)
  {
    v12 = APBonjourBrowserReconfirmDevice((uint64_t)v5[10], (uint64_t)v11, (uint64_t)v5[8], v3);
    if ((_DWORD)v12)
    {
      v17 = v12;
      goto LABEL_28;
    }
    v13 = **v5;
    if (v13 <= 40 && (v13 != -1 || _LogCategory_Initialize()))
      LogPrintF();
  }
  v14 = CFDictionaryGetValue(v10, CFSTR("RAOPBonjourInfo"));
  if (v14)
  {
    v15 = APBonjourBrowserReconfirmDevice((uint64_t)v5[10], (uint64_t)v14, (uint64_t)CFSTR("RAOP"), v3);
    if (!(_DWORD)v15)
    {
      v16 = **v5;
      if (v16 <= 40 && (v16 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      goto LABEL_18;
    }
    v17 = v15;
LABEL_28:
    APSLogErrorAt();
    goto LABEL_19;
  }
LABEL_18:
  v17 = 0;
LABEL_19:
  CFRelease(v8);
  return v17;
}

uint64_t browser_configureForMaximumDiscovery()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  char v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = 0;
  if (*(_WORD *)(DerivedStorage + 24) == 3)
  {
    v1 = DerivedStorage;
    if (APDBluetoothHelperStartListeningToEvent(*(_QWORD *)(DerivedStorage + 88), 1)
      || APDBluetoothHelperSetBluetoothPower(*(_QWORD *)(v1 + 88), 1)
      || APConnectivityHelperQueryWiFiPower(*(_QWORD *)(v1 + 184), (uint64_t)&v3)
      || !v3 && APConnectivityHelperSetWiFiPower(*(_QWORD *)(v1 + 184), 1u))
    {
      APSLogErrorAt();
    }
  }
  return 0;
}

void browser_triggerWoLCachingIfNeeded(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  const __CFDictionary *Value;
  const void *v10;
  int v11;
  uint64_t valuePtr;

  v1 = *(const void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  valuePtr = v2;
  v3 = *(const void **)(a1 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 229))
  {
    if (v2
      && (v5 = DerivedStorage, *(_WORD *)(DerivedStorage + 24))
      && (v6 = CFGetAllocator(v1), (v7 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr)) != 0))
    {
      v8 = v7;
      Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 200), v7);
      if (Value)
      {
        v10 = CFDictionaryGetValue(Value, *(const void **)(v5 + 56));
        if (v10)
        {
          APBonjourBrowserTriggerWoLCachingIfNeeded(*(const void **)(v5 + 80), v10, v3);
          v11 = **(_DWORD **)v5;
          if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize()))
            LogPrintF();
        }
      }
      else
      {
        APSLogErrorAt();
      }
      CFRelease(v8);
    }
    else
    {
      APSLogErrorAt();
    }
  }
  CFRelease(v1);
  if (v3)
    CFRelease(v3);
}

uint64_t browser_copyNANEndpointForDeviceID(uint64_t a1)
{
  const void *v1;
  CFTypeRef *v2;
  const __CFAllocator *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  char v6;
  char v7;
  const __CFArray *TypedValue;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  const __CFDictionary *TypedValueAtIndex;
  void *Value;
  const void *v14;
  unsigned int v16;
  uint64_t valuePtr;

  v1 = *(const void **)a1;
  v2 = *(CFTypeRef **)(a1 + 24);
  valuePtr = *(_QWORD *)(a1 + 8);
  v16 = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 229))
    return 4294960573;
  v3 = CFGetAllocator(v1);
  v4 = CFNumberCreate(v3, kCFNumberSInt64Type, &valuePtr);
  if (!v4)
  {
    APSLogErrorAt();
    return 4294960568;
  }
  v5 = v4;
  CFDictionaryGetTypeID();
  CFDictionaryGetTypedValue();
  v6 = 1;
  while (1)
  {
    v7 = v6;
    CFDictionaryGetTypeID();
    CFDictionaryGetTypedValue();
    CFArrayGetTypeID();
    TypedValue = (const __CFArray *)CFDictionaryGetTypedValue();
    Count = CFArrayGetCount(TypedValue);
    if (Count >= 1)
      break;
LABEL_5:
    v6 = 0;
    if ((v7 & 1) == 0)
    {
      APSLogErrorAt();
      v16 = -72065;
      goto LABEL_16;
    }
  }
  v10 = Count;
  v11 = 0;
  while (1)
  {
    CFDictionaryGetTypeID();
    TypedValueAtIndex = (const __CFDictionary *)CFArrayGetTypedValueAtIndex();
    Value = (void *)CFDictionaryGetValue(TypedValueAtIndex, CFSTR("nanEP"));
    v14 = Value;
    if (!(v7 & 1 | (Value == 0)))
      break;
    if (Value)
      goto LABEL_15;
LABEL_13:
    if (v10 == ++v11)
      goto LABEL_5;
  }
  if (!APTNANEndpointSupportsServiceType(Value))
    goto LABEL_13;
LABEL_15:
  *v2 = CFRetain(v14);
LABEL_16:
  CFRelease(v5);
  return v16;
}

void __browser_resolveBrokerAddress_block_invoke(uint64_t a1, int a2, const __CFArray *a3, uint64_t a4, uint64_t a5)
{
  const void *v10;
  int v11;
  int v12;
  CFStringRef v13;
  const void *v14;

  if (*(_QWORD *)(a1 + 40))
  {
    v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v10)
    {
      v11 = **(_DWORD **)(a1 + 48);
      if (v11 <= 40 && (v11 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v13 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v10 = 0;
  }
  v12 = **(_DWORD **)(a1 + 48);
  if (a2)
  {
    if (v12 <= 90 && (v12 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v13 = 0;
    a5 = 0;
  }
  else
  {
    if (v12 <= 50 && (v12 != -1 || _LogCategory_Initialize()))
      LogPrintF();
    v13 = CFStringCreateByCombiningStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, CFSTR("\x1E"));
    if (!v13)
    {
      APSLogErrorAt();
      a5 = 0;
    }
  }
  (*(void (**)(_QWORD, CFStringRef, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v13, a4, a5);
  if (v10)
    CFRelease(v10);
LABEL_16:
  v14 = *(const void **)(a1 + 40);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  _Block_release(*(const void **)(a1 + 32));
}

void browser_callEventHandler(uint64_t a1)
{
  const void *v1;
  const void *v2;

  v1 = *(const void **)a1;
  v2 = *(const void **)(a1 + 16);
  (*(void (**)(_QWORD, _QWORD, const void *, _QWORD))(a1 + 24))(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), v2, *(_QWORD *)(a1 + 32));
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
}

void browser_handleBonjourEvent(uint64_t a1)
{
  const void *v1;
  int v2;
  const __CFDictionary *v3;
  int **DerivedStorage;
  __CFString *Value;
  __CFString *v6;
  const __CFDictionary *v7;
  int v8;
  __CFString *v9;
  __CFString *v10;
  const __CFDictionary *v11;
  int v12;
  int v13;
  int v14;
  const __CFDictionary *v15;

  v1 = *(const void **)a1;
  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(const __CFDictionary **)(a1 + 16);
  DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  switch(v2)
  {
    case 0:
      if (!v3)
        goto LABEL_39;
      Value = (__CFString *)CFDictionaryGetValue(v3, CFSTR("serviceType"));
      if (Value)
      {
        v6 = Value;
        v7 = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("deviceInfo"));
        if (v7)
        {
          if (!browser_handleBonjourAddOrUpdate(v1, v6, v7))
            goto LABEL_14;
        }
      }
      goto LABEL_40;
    case 1:
      if (v3)
      {
        v9 = (__CFString *)CFDictionaryGetValue(v3, CFSTR("serviceType"));
        if (!v9
          || (v10 = v9, (v11 = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("deviceInfo"))) == 0)
          || browser_handleBonjourRemove(v1, v10, v11))
        {
LABEL_40:
          APSLogErrorAt();
        }
LABEL_14:
        CFRelease(v1);
LABEL_31:
        v15 = v3;
      }
      else
      {
LABEL_39:
        APSLogErrorAt();
        v15 = (const __CFDictionary *)v1;
      }
      CFRelease(v15);
      return;
    case 2:
      v12 = **DerivedStorage;
      if (v12 <= 40 && (v12 != -1 || _LogCategory_Initialize()))
        goto LABEL_23;
      goto LABEL_30;
    case 3:
      v13 = **DerivedStorage;
      if (v13 <= 40 && (v13 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CFRelease(v1);
      goto LABEL_30;
    case 4:
      v14 = **DerivedStorage;
      if (v14 <= 60 && (v14 != -1 || _LogCategory_Initialize()))
        goto LABEL_23;
      goto LABEL_30;
    default:
      v8 = **DerivedStorage;
      if (v8 <= 60 && (v8 != -1 || _LogCategory_Initialize()))
LABEL_23:
        LogPrintF();
LABEL_30:
      CFRelease(v1);
      if (v3)
        goto LABEL_31;
      return;
  }
}

void __browser_handleBTLEEventExternal_block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  const __CFDictionary *v4;
  int **DerivedStorage;
  const void *Value;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  __CFDictionary *v13;
  __CFDictionary *v14;
  __CFDictionary *Mutable;
  int v16;
  const void *v17;
  const void *v18;
  int v19;
  int v20;
  int v21;
  const __CFAllocator *v22;
  int v23;
  uint64_t v24;
  __CFDictionary *v25;
  uint64_t v26;
  const void *v27;

  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(void **)(a1 + 32);
  v4 = *(const __CFDictionary **)(a1 + 40);
  DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  switch(v2)
  {
    case 0:
    case 1:
      Value = CFDictionaryGetValue(v4, CFSTR("deviceID"));
      v7 = CFDictionaryGetValue(v4, CFSTR("ipAddress"));
      v8 = CFDictionaryGetValue(v4, CFSTR("port"));
      v9 = CFDictionaryGetValue(v4, CFSTR("supportsSolo"));
      v10 = CFDictionaryGetValue(v4, CFSTR("rssi"));
      if (!Value)
        goto LABEL_57;
      if (!v7)
        goto LABEL_57;
      if (!v8)
        goto LABEL_57;
      if (!v9)
        goto LABEL_57;
      v11 = v10;
      if (!v10)
        goto LABEL_57;
      v12 = CMBaseObjectGetDerivedStorage();
      v13 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 112), Value);
      v14 = v13;
      if (v13)
      {
        CFRetain(v13);
        Mutable = v14;
      }
      else
      {
        v22 = CFGetAllocator(v3);
        Mutable = CFDictionaryCreateMutable(v22, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!Mutable)
          goto LABEL_53;
      }
      v23 = **(_DWORD **)v12;
      if (v23 <= 40 && (v23 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CFDictionarySetValue(Mutable, CFSTR("deviceID "), Value);
      CFDictionarySetValue(Mutable, CFSTR("IPAddress"), v7);
      CFDictionarySetValue(Mutable, CFSTR("port"), v8);
      CFDictionarySetValue(Mutable, CFSTR("supportsSolo"), v9);
      CFDictionarySetValue(Mutable, CFSTR("btleRSSI"), v11);
      if (!v14
        && (CFAbsoluteTimeGetCurrent(),
            v24 = CMBaseObjectGetDerivedStorage(),
            CFDictionarySetDouble(),
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v24 + 112), Value, Mutable),
            browser_updateAVDevicePresent(v3)))
      {
        APSLogErrorAt();
      }
      else if (!browser_startBTLEDeviceQuery(v3, Value))
      {
        v25 = Mutable;
        goto LABEL_37;
      }
      APSLogErrorAt();
      CFRelease(Mutable);
      goto LABEL_57;
    case 2:
      v17 = CFDictionaryGetValue(v4, CFSTR("deviceID"));
      if (!v17)
        goto LABEL_57;
      v18 = v17;
      v19 = **(_DWORD **)CMBaseObjectGetDerivedStorage();
      if (v19 <= 20 && (v19 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      if (browser_removeBonjourWithBTLE(v3, v18))
        goto LABEL_53;
      v26 = CMBaseObjectGetDerivedStorage();
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v26 + 112), v18);
      if (browser_updateAVDevicePresent(v3))
      {
        APSLogErrorAt();
LABEL_53:
        APSLogErrorAt();
LABEL_57:
        APSLogErrorAt();
      }
LABEL_41:
      CFRelease(*(CFTypeRef *)(a1 + 32));
      v27 = *(const void **)(a1 + 40);
      if (v27)
        CFRelease(v27);
      return;
    case 3:
      v20 = **DerivedStorage;
      if (v20 <= 40 && (v20 != -1 || _LogCategory_Initialize()))
        goto LABEL_18;
      goto LABEL_41;
    case 4:
      v21 = **DerivedStorage;
      if (v21 <= 40 && (v21 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      v25 = (__CFDictionary *)v3;
LABEL_37:
      CFRelease(v25);
      goto LABEL_41;
    default:
      v16 = **DerivedStorage;
      if (v16 <= 60 && (v16 != -1 || _LogCategory_Initialize()))
LABEL_18:
        LogPrintF();
      goto LABEL_41;
  }
}

void __browser_handleBluetoothHelperEventExternal_block_invoke(uint64_t a1)
{
  const void *v2;
  int v3;
  int **DerivedStorage;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const void *v10;

  v2 = *(const void **)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 48);
  DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  if (v3 == 101)
  {
    v7 = **DerivedStorage;
    if (v7 > 40 || v7 == -1 && !_LogCategory_Initialize())
      goto LABEL_24;
    goto LABEL_15;
  }
  if (v3 != 100)
  {
    if (v3 == 1)
    {
      v5 = CMBaseObjectGetDerivedStorage();
      v6 = **(_DWORD **)v5;
      if (v6 <= 40 && (v6 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      if (*(_WORD *)(v5 + 24) == 3 && browser_updateConfigurationForMaximumDiscoveryStatus(v2))
      {
        APSLogErrorAt();
        APSLogErrorAt();
      }
      goto LABEL_24;
    }
    v9 = **DerivedStorage;
    if (v9 > 60 || v9 == -1 && !_LogCategory_Initialize())
      goto LABEL_24;
LABEL_15:
    LogPrintF();
    goto LABEL_24;
  }
  v8 = **DerivedStorage;
  if (v8 <= 40 && (v8 != -1 || _LogCategory_Initialize()))
    LogPrintF();
  CFRelease(v2);
LABEL_24:
  CFRelease(*(CFTypeRef *)(a1 + 32));
  v10 = *(const void **)(a1 + 40);
  if (v10)
    CFRelease(v10);
}

void __browser_handleRapportEventExternal_block_invoke(uint64_t a1)
{
  int v2;
  const void *v3;
  const void *v4;
  int **DerivedStorage;
  const void *TypedValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  const void *v12;
  int v13;
  const void *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int DeviceIDFromString;
  const void *v20;
  int v21;
  const __CFDictionary *v22;
  int Int64;
  const void *Value;
  const void *v25;
  const void *v26;
  CFTypeRef v27;
  CFMutableDictionaryRef *v28;
  const void *v29;
  int v30;
  void *key;
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(const void **)(a1 + 32);
  v4 = *(const void **)(a1 + 40);
  DerivedStorage = (int **)CMBaseObjectGetDerivedStorage();
  switch(v2)
  {
    case 0:
    case 1:
      CFStringGetTypeID();
      TypedValue = (const void *)CFDictionaryGetTypedValue();
      v7 = CMBaseObjectGetDerivedStorage();
      key = 0;
      if (TypedValue
        && v4
        && (CFStringGetTypeID(),
            v8 = CFDictionaryGetTypedValue(),
            CFStringGetTypeID(),
            v9 = CFDictionaryGetTypedValue(),
            v8 | v9))
      {
        if (v8)
        {
          CFNumberGetTypeID();
          v10 = (const void *)CFDictionaryGetTypedValue();
          if (!v10 || (v11 = (void *)CFRetain(v10), (key = v11) == 0))
          {
            v34[0] = CFSTR("rapportBonjourCorrelationType");
            v34[1] = CFSTR("rapportBonjourCorrelationID");
            v35[0] = &unk_1E82624C8;
            v35[1] = v8;
            v12 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, v34, 2);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 168), (const void *)v8, v4);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 152), TypedValue, v12);
            goto LABEL_49;
          }
LABEL_24:
          v32[0] = CFSTR("rapportBonjourCorrelationType");
          v32[1] = CFSTR("rapportBonjourCorrelationID");
          v33[0] = &unk_1E82624B0;
          v33[1] = v11;
          v20 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, v32, 2);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 160), key, v4);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 152), TypedValue, v20);
          browser_updateEventInfoForDevice(v3, key);
          v21 = 0;
          goto LABEL_25;
        }
        if (!v9)
          goto LABEL_49;
        DeviceIDFromString = APBrowserCreateDeviceIDFromString((const void *)v9, (CFNumberRef *)&key);
        if (!DeviceIDFromString)
        {
          v11 = key;
          if (!key)
            goto LABEL_49;
          goto LABEL_24;
        }
        v21 = DeviceIDFromString;
        APSLogErrorAt();
      }
      else
      {
        APSLogErrorAt();
        v21 = -6705;
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v7 + 152), TypedValue);
      if (key)
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v7 + 160), key);
      }
      else
      {
        v30 = **(_DWORD **)v7;
        if (v30 <= 90 && (v30 != -1 || _LogCategory_Initialize()))
          LogPrintF();
      }
LABEL_25:
      if (key)
        CFRelease(key);
      if (v21)
        goto LABEL_59;
LABEL_49:
      CFRelease(*(CFTypeRef *)(a1 + 32));
      v29 = *(const void **)(a1 + 40);
      if (v29)
        CFRelease(v29);
      return;
    case 2:
      CFStringGetTypeID();
      v14 = (const void *)CFDictionaryGetTypedValue();
      LODWORD(v35[0]) = 0;
      v15 = CMBaseObjectGetDerivedStorage();
      v16 = **(_DWORD **)v15;
      if (v16 <= 20 && (v16 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      if (!v14
        || (CFDictionaryGetTypeID(),
            v22 = (const __CFDictionary *)CFDictionaryGetTypedValue(),
            Int64 = CFDictionaryGetInt64(),
            (Value = CFDictionaryGetValue(v22, CFSTR("rapportBonjourCorrelationID"))) == 0))
      {
        APSLogErrorAt();
LABEL_59:
        APSLogErrorAt();
        goto LABEL_49;
      }
      v25 = Value;
      if (Int64 == 1)
      {
        v27 = CFRetain(Value);
        v28 = (CFMutableDictionaryRef *)(v15 + 160);
      }
      else
      {
        if (Int64)
        {
          LODWORD(v35[0]) = -6736;
          APSLogErrorAt();
          goto LABEL_48;
        }
        CFNumberGetTypeID();
        v26 = (const void *)CFDictionaryGetTypedValue();
        if (v26)
          v27 = CFRetain(v26);
        else
          v27 = 0;
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v15 + 176), v25);
        v28 = (CFMutableDictionaryRef *)(v15 + 168);
      }
      CFDictionaryRemoveValue(*v28, v25);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v15 + 152), v14);
      if (v27)
      {
        browser_updateEventInfoForDevice(v3, v27);
        CFRelease(v27);
      }
LABEL_48:
      if (!LODWORD(v35[0]))
        goto LABEL_49;
      goto LABEL_59;
    case 3:
      v17 = **DerivedStorage;
      if (v17 <= 40 && (v17 != -1 || _LogCategory_Initialize()))
        goto LABEL_17;
      goto LABEL_49;
    case 4:
      v18 = **DerivedStorage;
      if (v18 <= 40 && (v18 != -1 || _LogCategory_Initialize()))
        LogPrintF();
      CFRelease(v3);
      goto LABEL_49;
    default:
      v13 = **DerivedStorage;
      if (v13 <= 60 && (v13 != -1 || _LogCategory_Initialize()))
LABEL_17:
        LogPrintF();
      goto LABEL_49;
  }
}

void __browser_handleConnectivityHelperEventExternal_block_invoke(uint64_t a1)
{
  const void *v2;

  browser_handleConnectivityHelperEventInternal(*(const void **)(a1 + 32), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
}

int *initValNINearbyObjectDistanceNotAvailable()
{
  int *result;

  if (NearbyInteractionLibrary_sOnce_0 != -1)
    dispatch_once(&NearbyInteractionLibrary_sOnce_0, &__block_literal_global_18);
  result = (int *)dlsym((void *)NearbyInteractionLibrary_sLib_0, "NINearbyObjectDistanceNotAvailable");
  if (result)
    constantValNINearbyObjectDistanceNotAvailable = *result;
  getNINearbyObjectDistanceNotAvailable = (uint64_t (*)())NINearbyObjectDistanceNotAvailableFunction;
  return result;
}

float NINearbyObjectDistanceNotAvailableFunction()
{
  return *(float *)&constantValNINearbyObjectDistanceNotAvailable;
}

void APBrowserCarBonjourCreate_cold_1()
{
  OUTLINED_FUNCTION_0();
  __break(1u);
}

void APBrowserCarBonjourCreate_cold_2()
{
  OUTLINED_FUNCTION_0();
  __break(1u);
}

void APBrowserCarBonjourCreate_cold_3()
{
  OUTLINED_FUNCTION_0();
  __break(1u);
}

uint64_t stream_Finalize_cold_1(int a1)
{
  uint64_t result;

  if (a1 != -1)
    return LogPrintF();
  result = _LogCategory_Initialize();
  if ((_DWORD)result)
    return LogPrintF();
  return result;
}

void _APConnectivityHelperFinalize_cold_1(int a1)
{
  if (a1 != -1 || OUTLINED_FUNCTION_2())
    OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0();
}

void APBrowserCarSessionCreate_cold_1()
{
  APSLogErrorAt();
  __break(1u);
}

void APBrowserCarSessionCreate_cold_2()
{
  APSLogErrorAt();
  __break(1u);
}

uint64_t stream_Finalize_cold_1_0(int a1)
{
  uint64_t result;

  if (a1 != -1)
    return LogPrintF();
  result = _LogCategory_Initialize();
  if ((_DWORD)result)
    return LogPrintF();
  return result;
}

void stream_relinquishPackage_cold_1()
{
  APSLogErrorAt();
  __break(1u);
  APSAPAPBBufDecodeHeader();
}

uint64_t APSAPAPBBufDecodeHeader()
{
  return MEMORY[0x1E0CF6460]();
}

uint64_t APSAsyncLoggerGetSharedLogger()
{
  return MEMORY[0x1E0CF64B8]();
}

uint64_t APSAsyncLoggerLogMessage()
{
  return MEMORY[0x1E0CF64C0]();
}

uint64_t APSAtomicMessageQueueCreate()
{
  return MEMORY[0x1E0CF64C8]();
}

uint64_t APSAtomicMessageQueueReadMessage()
{
  return MEMORY[0x1E0CF64D0]();
}

uint64_t APSAtomicMessageQueueSendMessage()
{
  return MEMORY[0x1E0CF64D8]();
}

uint64_t APSCFDataCreateWithBase64String()
{
  return MEMORY[0x1E0CF6750]();
}

uint64_t APSCMBlockBufferCreateWithDispatchData()
{
  return MEMORY[0x1E0CF6788]();
}

uint64_t APSCanSendToAltReceiver()
{
  return MEMORY[0x1E0CF67A0]();
}

uint64_t APSCopyTightSyncInfo()
{
  return MEMORY[0x1E0CF67E8]();
}

uint64_t APSDispatchAsyncFHelper()
{
  return MEMORY[0x1E0CF6840]();
}

uint64_t APSDispatchDataCopyBytes()
{
  return MEMORY[0x1E0CF6848]();
}

uint64_t APSDispatchDataCreateWithBlockBuffer()
{
  return MEMORY[0x1E0CF6850]();
}

uint64_t APSDispatchSyncBatchAssignment()
{
  return MEMORY[0x1E0CF6878]();
}

uint64_t APSDispatchSyncFlush()
{
  return MEMORY[0x1E0CF6880]();
}

uint64_t APSDispatchSyncTask()
{
  return MEMORY[0x1E0CF6888]();
}

uint64_t APSEventRecorderAddSignPostForEvent()
{
  return MEMORY[0x1E0CF68F0]();
}

uint64_t APSEventRecorderCopyChildEventRecorderOfType()
{
  return MEMORY[0x1E0CF68F8]();
}

uint64_t APSEventRecorderCreate()
{
  return MEMORY[0x1E0CF6900]();
}

uint64_t APSEventRecorderGetEventTimeRecursive()
{
  return MEMORY[0x1E0CF6918]();
}

uint64_t APSEventRecorderGetTimeBetweenEventsInMilliSecondRecursiveEx()
{
  return MEMORY[0x1E0CF6938]();
}

uint64_t APSEventRecorderGetTypeID()
{
  return MEMORY[0x1E0CF6950]();
}

uint64_t APSEventRecorderRecordEvent()
{
  return MEMORY[0x1E0CF6958]();
}

uint64_t APSEventRecorderRecordEventWithFlags()
{
  return MEMORY[0x1E0CF6960]();
}

uint64_t APSEventRecorderRecordEventWithFlagsAtTime()
{
  return MEMORY[0x1E0CF6968]();
}

uint64_t APSEventRecorderResetEvent()
{
  return MEMORY[0x1E0CF6980]();
}

uint64_t APSFeaturesCopyStringRepresentation()
{
  return MEMORY[0x1E0CF6998]();
}

uint64_t APSFeaturesCreateFromLegacyFlags()
{
  return MEMORY[0x1E0CF69A8]();
}

uint64_t APSFeaturesCreateFromStringRepresentation()
{
  return MEMORY[0x1E0CF69B0]();
}

uint64_t APSFeaturesCreateMutable()
{
  return MEMORY[0x1E0CF69B8]();
}

uint64_t APSFeaturesCreateMutableCopy()
{
  return MEMORY[0x1E0CF69C0]();
}

uint64_t APSFeaturesGetLegacyFlags()
{
  return MEMORY[0x1E0CF69C8]();
}

uint64_t APSFeaturesHasFeature()
{
  return MEMORY[0x1E0CF69D8]();
}

uint64_t APSFeaturesSetFeature()
{
  return MEMORY[0x1E0CF69E8]();
}

uint64_t APSFeaturesSetLegacyFlags()
{
  return MEMORY[0x1E0CF69F0]();
}

uint64_t APSFlatQueueCreate()
{
  return MEMORY[0x1E0CF69F8]();
}

uint64_t APSFlatQueueDequeue()
{
  return MEMORY[0x1E0CF6A00]();
}

uint64_t APSFlatQueueDequeueWhileB()
{
  return MEMORY[0x1E0CF6A08]();
}

uint64_t APSFlatQueueEnqueue()
{
  return MEMORY[0x1E0CF6A10]();
}

uint64_t APSFlatQueueIsEmpty()
{
  return MEMORY[0x1E0CF6A18]();
}

uint64_t APSFlatQueuePeek()
{
  return MEMORY[0x1E0CF6A20]();
}

uint64_t APSGetDeviceID()
{
  return MEMORY[0x1E0CF6A60]();
}

uint64_t APSGetFBOPropertyInt64()
{
  return MEMORY[0x1E0CF6A80]();
}

uint64_t APSIntrospectorAddCommand()
{
  return MEMORY[0x1E0CF6B08]();
}

uint64_t APSIntrospectorSetCommandContext()
{
  return MEMORY[0x1E0CF6B18]();
}

uint64_t APSIsAPMSpeaker()
{
  return MEMORY[0x1E0CF6B20]();
}

uint64_t APSIsDemoModeEnabled()
{
  return MEMORY[0x1E0CF6B40]();
}

uint64_t APSIsDirectLinkInterface()
{
  return MEMORY[0x1E0CF6B48]();
}

uint64_t APSIsEthernetInterface()
{
  return MEMORY[0x1E0CF6B58]();
}

uint64_t APSIsPairingGroupEnabled()
{
  return MEMORY[0x1E0CF6BA0]();
}

uint64_t APSIsPersistentGroupSDBCapable()
{
  return MEMORY[0x1E0CF6BB0]();
}

uint64_t APSIsProximitySenderEnabled()
{
  return MEMORY[0x1E0CF6BB8]();
}

uint64_t APSIsValidDeviceEnclosureColorString()
{
  return MEMORY[0x1E0CF6BD0]();
}

uint64_t APSIsVirtualMachine()
{
  return MEMORY[0x1E0CF6BD8]();
}

uint64_t APSKeyHolderGetTypeID()
{
  return MEMORY[0x1E0CF6BF0]();
}

uint64_t APSLogErrorAt()
{
  return MEMORY[0x1E0CF6C08]();
}

uint64_t APSLogUtilsGetAsyncCnxLogCategory()
{
  return MEMORY[0x1E0CF6C10]();
}

uint64_t APSLogUtilsGetHTTPClientCoreLogCategory()
{
  return MEMORY[0x1E0CF6C18]();
}

uint64_t APSNANServiceTypeGetTXTString()
{
  return MEMORY[0x1E0CF6C28]();
}

uint64_t APSNANServiceTypeIsKindOfType()
{
  return MEMORY[0x1E0CF6C30]();
}

uint64_t APSNANServiceTypeIsValid()
{
  return MEMORY[0x1E0CF6C38]();
}

uint64_t APSNANServiceTypeMakeWithTXTString()
{
  return MEMORY[0x1E0CF6C40]();
}

uint64_t APSNetworkAddressCopyInterfaceName()
{
  return MEMORY[0x1E0CF6C48]();
}

uint64_t APSNetworkAddressCopyStringRepresentation()
{
  return MEMORY[0x1E0CF6C50]();
}

uint64_t APSNetworkAddressCreateWithSocketAddr()
{
  return MEMORY[0x1E0CF6C60]();
}

uint64_t APSNetworkAddressCreateWithString()
{
  return MEMORY[0x1E0CF6C68]();
}

uint64_t APSNetworkAddressGetCStringRepresentation()
{
  return MEMORY[0x1E0CF6C70]();
}

uint64_t APSNetworkAddressGetPort()
{
  return MEMORY[0x1E0CF6C78]();
}

uint64_t APSNetworkAddressGetSocketAddr()
{
  return MEMORY[0x1E0CF6C80]();
}

uint64_t APSNetworkAddressGetTypeID()
{
  return MEMORY[0x1E0CF6C88]();
}

uint64_t APSNetworkAddressIsIPv6()
{
  return MEMORY[0x1E0CF6C90]();
}

uint64_t APSNetworkAddressSetInterfaceName()
{
  return MEMORY[0x1E0CF6C98]();
}

uint64_t APSNetworkAddressSetPort()
{
  return MEMORY[0x1E0CF6CA0]();
}

uint64_t APSPowerAssertionCreate()
{
  return MEMORY[0x1E0CF6D38]();
}

uint64_t APSPowerAssertionRaise()
{
  return MEMORY[0x1E0CF6D40]();
}

uint64_t APSPowerAssertionRaiseTemporary()
{
  return MEMORY[0x1E0CF6D48]();
}

uint64_t APSPowerAssertionRelease()
{
  return MEMORY[0x1E0CF6D50]();
}

uint64_t APSPriorityDispatchQueuePoolCreate()
{
  return MEMORY[0x1E0CF6D58]();
}

uint64_t APSPriorityDispatchQueuePoolSyncFlush()
{
  return MEMORY[0x1E0CF6D60]();
}

uint64_t APSPriorityDispatchSourceCancel()
{
  return MEMORY[0x1E0CF6D68]();
}

uint64_t APSPriorityDispatchSourceCreate()
{
  return MEMORY[0x1E0CF6D70]();
}

uint64_t APSPriorityDispatchSourceResume()
{
  return MEMORY[0x1E0CF6D78]();
}

uint64_t APSPriorityDispatchSourceSetPriority()
{
  return MEMORY[0x1E0CF6D80]();
}

uint64_t APSPriorityDispatchSourceSuspend()
{
  return MEMORY[0x1E0CF6D90]();
}

uint64_t APSRTCReportingAgentCreate()
{
  return MEMORY[0x1E0CF6DD0]();
}

uint64_t APSRTCReportingAgentSendEvent()
{
  return MEMORY[0x1E0CF6DD8]();
}

uint64_t APSRealTimeAllocatorAllocate()
{
  return MEMORY[0x1E0CF6E18]();
}

uint64_t APSRealTimeAllocatorDeallocate()
{
  return MEMORY[0x1E0CF6E20]();
}

uint64_t APSRealTimeAllocatorGetDefault()
{
  return MEMORY[0x1E0CF6E28]();
}

uint64_t APSRealTimeDispatcherAsync()
{
  return MEMORY[0x1E0CF6E30]();
}

uint64_t APSRealTimeDispatcherCreate()
{
  return MEMORY[0x1E0CF6E38]();
}

uint64_t APSRealTimePTPClockCreate()
{
  return MEMORY[0x1E0CF6E40]();
}

uint64_t APSRealTimePTPClockGetEstimatedPTPTimeForHostTime()
{
  return MEMORY[0x1E0CF6E48]();
}

uint64_t APSRealTimeReadableRingBufferGetTypeID()
{
  return MEMORY[0x1E0CF6E60]();
}

uint64_t APSRealTimeReadableRingBufferWrite()
{
  return MEMORY[0x1E0CF6E68]();
}

uint64_t APSRealTimeSignalCreate()
{
  return MEMORY[0x1E0CF6E78]();
}

uint64_t APSRealTimeSignalInvalidate()
{
  return MEMORY[0x1E0CF6E80]();
}

uint64_t APSRealTimeSignalRaise()
{
  return MEMORY[0x1E0CF6E88]();
}

uint64_t APSRecycleBinAddItem()
{
  return MEMORY[0x1E0CF6EA8]();
}

uint64_t APSRecycleBinCreate()
{
  return MEMORY[0x1E0CF6EB0]();
}

uint64_t APSRecycleBinTakeItem()
{
  return MEMORY[0x1E0CF6EB8]();
}

uint64_t APSRotatingKeyMapperClear()
{
  return MEMORY[0x1E0CF6EF0]();
}

uint64_t APSRotatingKeyMapperInitialize()
{
  return MEMORY[0x1E0CF6EF8]();
}

uint64_t APSRotatingKeyMapperIsInitialized()
{
  return MEMORY[0x1E0CF6F00]();
}

uint64_t APSRotatingKeyMapperRemoveID()
{
  return MEMORY[0x1E0CF6F08]();
}

uint64_t APSRotatingKeyMapperSetDataForKey()
{
  return MEMORY[0x1E0CF6F10]();
}

uint64_t APSRotatingKeyMapperSetDesiredKeyForID()
{
  return MEMORY[0x1E0CF6F18]();
}

uint64_t APSSetFBOPropertyInt64()
{
  return MEMORY[0x1E0CF6F50]();
}

uint64_t APSSettingsCopyValue()
{
  return MEMORY[0x1E0CF6F58]();
}

uint64_t APSSettingsGetBooleanIfPresent()
{
  return MEMORY[0x1E0CF6F68]();
}

uint64_t APSSettingsGetCString()
{
  return MEMORY[0x1E0CF6F70]();
}

uint64_t APSSettingsGetInt64()
{
  return MEMORY[0x1E0CF6F80]();
}

uint64_t APSSettingsGetInt64IfPresent()
{
  return MEMORY[0x1E0CF6F88]();
}

uint64_t APSSettingsGetIntWithDefault()
{
  return MEMORY[0x1E0CF6F90]();
}

uint64_t APSSettingsIsFeatureEnabled()
{
  return MEMORY[0x1E0CF6FA0]();
}

uint64_t APSSignalErrorAt()
{
  return MEMORY[0x1E0CF7020]();
}

uint64_t APSSystemGetUserVersion()
{
  return MEMORY[0x1E0CF7058]();
}

uint64_t APSTapToRadarInvoke()
{
  return MEMORY[0x1E0CF7060]();
}

uint64_t APSTransportMessageGetAudioDataHeader()
{
  return MEMORY[0x1E0CF7128]();
}

uint64_t APSVersionUtilsGetShortVersionLength()
{
  return MEMORY[0x1E0CF71B0]();
}

uint64_t APSWiFiTrafficRegistrationCreate()
{
  return MEMORY[0x1E0CF71F0]();
}

uint64_t APSWiFiTrafficRegistrationSetRemovalHandler()
{
  return MEMORY[0x1E0CF71F8]();
}

uint64_t APSWiFiTransactionCreate()
{
  return MEMORY[0x1E0CF7200]();
}

uint64_t APSWiFiTransactionSetReleaseHandler()
{
  return MEMORY[0x1E0CF7208]();
}

uint64_t APSWrapperCreate()
{
  return MEMORY[0x1E0CF7220]();
}

uint64_t APSWrapperGetValue()
{
  return MEMORY[0x1E0CF7228]();
}

uint64_t ASPrintF()
{
  return MEMORY[0x1E0D1A790]();
}

uint64_t Apple80211ErrToStr()
{
  return MEMORY[0x1E0D39D18]();
}

uint64_t Apple80211GetIOReportingService()
{
  return MEMORY[0x1E0D39D30]();
}

uint64_t AsyncConnection_Connect()
{
  return MEMORY[0x1E0D1A7A0]();
}

uint64_t AsyncConnection_ConnectEx()
{
  return MEMORY[0x1E0D1A7A8]();
}

uint64_t AsyncConnection_Release()
{
  return MEMORY[0x1E0D1A7B0]();
}

uint64_t BitListString_Make()
{
  return MEMORY[0x1E0D1A7D8]();
}

uint64_t BitListString_Parse()
{
  return MEMORY[0x1E0D1A7E0]();
}

uint64_t BonjourAdvertiserCreate()
{
  return MEMORY[0x1E0D1A7E8]();
}

uint64_t BonjourAdvertiserSetDispatchQueue()
{
  return MEMORY[0x1E0D1A7F0]();
}

uint64_t BonjourAdvertiserSetDomain()
{
  return MEMORY[0x1E0D1A7F8]();
}

uint64_t BonjourAdvertiserSetFlags()
{
  return MEMORY[0x1E0D1A800]();
}

uint64_t BonjourAdvertiserSetInterfaceName()
{
  return MEMORY[0x1E0D1A808]();
}

uint64_t BonjourAdvertiserSetPort()
{
  return MEMORY[0x1E0D1A810]();
}

uint64_t BonjourAdvertiserSetServiceType()
{
  return MEMORY[0x1E0D1A818]();
}

uint64_t BonjourAdvertiserSetTXTRecord()
{
  return MEMORY[0x1E0D1A820]();
}

uint64_t BonjourAdvertiserStart()
{
  return MEMORY[0x1E0D1A828]();
}

uint64_t BonjourAdvertiserStop()
{
  return MEMORY[0x1E0D1A830]();
}

uint64_t BonjourBrowser_CreateEx()
{
  return MEMORY[0x1E0D1A848]();
}

uint64_t BonjourBrowser_ReconfirmDeviceEx()
{
  return MEMORY[0x1E0D1A850]();
}

uint64_t BonjourBrowser_SetDispatchQueue()
{
  return MEMORY[0x1E0D1A858]();
}

uint64_t BonjourBrowser_SetEventHandler()
{
  return MEMORY[0x1E0D1A860]();
}

uint64_t BonjourBrowser_SetEventHandlerBlock()
{
  return MEMORY[0x1E0D1A868]();
}

uint64_t BonjourBrowser_SetNANControlFlags()
{
  return MEMORY[0x1E0D1A870]();
}

uint64_t BonjourBrowser_Start()
{
  return MEMORY[0x1E0D1A878]();
}

uint64_t BonjourBrowser_Stop()
{
  return MEMORY[0x1E0D1A880]();
}

uint64_t BonjourDevice_CopyCFString()
{
  return MEMORY[0x1E0D1A888]();
}

uint64_t BonjourDevice_CopyConnectionInfo()
{
  return MEMORY[0x1E0D1A890]();
}

uint64_t BonjourDevice_CopyDNSNames()
{
  return MEMORY[0x1E0D1A898]();
}

uint64_t BonjourDevice_GetDNSName()
{
  return MEMORY[0x1E0D1A8A0]();
}

uint64_t BonjourDevice_GetDeviceID()
{
  return MEMORY[0x1E0D1A8A8]();
}

uint64_t BonjourDevice_GetInt64()
{
  return MEMORY[0x1E0D1A8B0]();
}

uint64_t BonjourDevice_MergeInfo()
{
  return MEMORY[0x1E0D1A8B8]();
}

uint64_t BonjourDevice_RemoveInterfaceInfo()
{
  return MEMORY[0x1E0D1A8C8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

CFTypeID CFAllocatorGetTypeID(void)
{
  return MEMORY[0x1E0C97CD0]();
}

uint64_t CFArrayAppendInt64()
{
  return MEMORY[0x1E0D1A8D8]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

uint64_t CFArrayApplyBlock()
{
  return MEMORY[0x1E0D1A8E0]();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

uint64_t CFArrayEnsureCreatedAndAppend()
{
  return MEMORY[0x1E0D1A8E8]();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

uint64_t CFArrayGetTypedValueAtIndex()
{
  return MEMORY[0x1E0D1A8F0]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
  MEMORY[0x1E0C97DA8](theArray, range.location, range.length, values);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

uint64_t CFCopyCString()
{
  return MEMORY[0x1E0D1A8F8]();
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

uint64_t CFCreateWithPlistBytes()
{
  return MEMORY[0x1E0D1A908]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1E0C983B0](allocator, theData);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

uint64_t CFDictionaryApplyBlock()
{
  return MEMORY[0x1E0D1A910]();
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

uint64_t CFDictionaryCopyKeys()
{
  return MEMORY[0x1E0D1A920]();
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

uint64_t CFDictionaryGetCString()
{
  return MEMORY[0x1E0D1A940]();
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

uint64_t CFDictionaryGetDouble()
{
  return MEMORY[0x1E0D1A950]();
}

uint64_t CFDictionaryGetEmpty()
{
  return MEMORY[0x1E0D1A960]();
}

uint64_t CFDictionaryGetInt64()
{
  return MEMORY[0x1E0D1A970]();
}

uint64_t CFDictionaryGetInt64Ranged()
{
  return MEMORY[0x1E0D1A980]();
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

uint64_t CFDictionaryGetTypedValue()
{
  return MEMORY[0x1E0D1A990]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C985F8](theDict, key, value);
}

uint64_t CFDictionarySetCString()
{
  return MEMORY[0x1E0D1A9A8]();
}

uint64_t CFDictionarySetData()
{
  return MEMORY[0x1E0D1A9B0]();
}

uint64_t CFDictionarySetDouble()
{
  return MEMORY[0x1E0D1A9B8]();
}

uint64_t CFDictionarySetInt64()
{
  return MEMORY[0x1E0D1A9C0]();
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

uint64_t CFGetInt64()
{
  return MEMORY[0x1E0D1A9E8]();
}

uint64_t CFGetInt64Ranged()
{
  return MEMORY[0x1E0D1A9F0]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1E0C98758](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

uint64_t CFNumberCreateInt64()
{
  return MEMORY[0x1E0D1AA00]();
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1E0C98938](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x1E0C98940](allocator, formatter, string, rangep, options);
}

uint64_t CFNumberGetObject()
{
  return MEMORY[0x1E0D1AA08]();
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

uint64_t CFObjectSetInt64()
{
  return MEMORY[0x1E0D1AA18]();
}

uint64_t CFObjectSetProperty()
{
  return MEMORY[0x1E0D1AA20]();
}

uint64_t CFObjectSetValue()
{
  return MEMORY[0x1E0D1AA30]();
}

uint64_t CFPrefs_GetDouble()
{
  return MEMORY[0x1E0D1AA50]();
}

uint64_t CFPrefs_GetInt64()
{
  return MEMORY[0x1E0D1AA60]();
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

uint64_t CFSetApplyBlock()
{
  return MEMORY[0x1E0D1AAC0]();
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1E0C98D88](allocator, values, numValues, callBacks);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

CFTypeID CFSetGetTypeID(void)
{
  return MEMORY[0x1E0C98DB8]();
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
  MEMORY[0x1E0C98DD8](theSet);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

uint64_t CFStringAppendF()
{
  return MEMORY[0x1E0D1AAC8]();
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

uint64_t CFStringCopyUTF8CString()
{
  return MEMORY[0x1E0D1AAD0]();
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

uint64_t CFStringCreateF()
{
  return MEMORY[0x1E0D1AAD8]();
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C99058](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1E0C99190](theString, suffix);
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
  MEMORY[0x1E0C991F0](theString, range.location, range.length, replacement);
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
  MEMORY[0x1E0C99250](theString, trimString);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1E0C99530](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1E0C99560]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99568](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

uint64_t CMBaseClassGetCFTypeID()
{
  return MEMORY[0x1E0C9EAF8]();
}

uint64_t CMBaseGetClassID()
{
  return MEMORY[0x1E0C9EB00]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x1E0C9EB10]();
}

uint64_t CMBaseObjectGetProtocolVTable()
{
  return MEMORY[0x1E0C9EB18]();
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x1E0C9EB28]();
}

OSStatus CMBlockBufferAppendBufferReference(CMBlockBufferRef theBuffer, CMBlockBufferRef targetBBuf, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags)
{
  return MEMORY[0x1E0C9EB50](theBuffer, targetBBuf, offsetToData, dataLength, *(_QWORD *)&flags);
}

OSStatus CMBlockBufferAppendMemoryBlock(CMBlockBufferRef theBuffer, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags)
{
  return MEMORY[0x1E0C9EB58](theBuffer, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

OSStatus CMBlockBufferCopyDataBytes(CMBlockBufferRef theSourceBuffer, size_t offsetToData, size_t dataLength, void *destination)
{
  return MEMORY[0x1E0C9EB68](theSourceBuffer, offsetToData, dataLength, destination);
}

OSStatus CMBlockBufferCreateEmpty(CFAllocatorRef structureAllocator, uint32_t subBlockCapacity, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB78](structureAllocator, *(_QWORD *)&subBlockCapacity, *(_QWORD *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithBufferReference(CFAllocatorRef structureAllocator, CMBlockBufferRef bufferReference, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB80](structureAllocator, bufferReference, offsetToData, dataLength, *(_QWORD *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB88](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1E0C9EB98](theBuffer);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x1E0C9EBA8](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

CFTypeID CMBlockBufferGetTypeID(void)
{
  return MEMORY[0x1E0C9EBB0]();
}

Boolean CMBlockBufferIsEmpty(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1E0C9EBB8](theBuffer);
}

OSStatus CMBlockBufferReplaceDataBytes(const void *sourceBytes, CMBlockBufferRef destinationBuffer, size_t offsetIntoDestination, size_t dataLength)
{
  return MEMORY[0x1E0C9EBC8](sourceBytes, destinationBuffer, offsetIntoDestination, dataLength);
}

CMClockRef CMClockGetHostTimeClock(void)
{
  return (CMClockRef)MEMORY[0x1E0C9ED40]();
}

CMTime *__cdecl CMClockGetTime(CMTime *__return_ptr retstr, CMClockRef clock)
{
  return (CMTime *)MEMORY[0x1E0C9ED48](retstr, clock);
}

CMTime *__cdecl CMClockMakeHostTimeFromSystemUnits(CMTime *__return_ptr retstr, uint64_t hostTime)
{
  return (CMTime *)MEMORY[0x1E0C9ED60](retstr, hostTime);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x1E0C9ED90]();
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x1E0C9EEB8]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x1E0C9EEC8]();
}

uint64_t CMNotificationCenterPostNotification()
{
  return MEMORY[0x1E0C9EED0]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x1E0C9EEE8]();
}

void CMSetAttachment(CMAttachmentBearerRef target, CFStringRef key, CFTypeRef value, CMAttachmentMode attachmentMode)
{
  MEMORY[0x1E0C9F0C8](target, key, value, *(_QWORD *)&attachmentMode);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F2F0](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1E0C9F320](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1E0C9F330](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

uint64_t CUDispatchTimerSet()
{
  return MEMORY[0x1E0D1AB18]();
}

uint64_t CUGestaltDeviceClassToString()
{
  return MEMORY[0x1E0D1AB30]();
}

uint64_t CUGetInterfaceAddresses()
{
  return MEMORY[0x1E0D1AB38]();
}

uint64_t CUObfuscatedPtr()
{
  return MEMORY[0x1E0D1AB58]();
}

uint64_t CUPrintAddress()
{
  return MEMORY[0x1E0D1AB68]();
}

uint64_t CUPrintFlags32()
{
  return MEMORY[0x1E0D1AB98]();
}

uint64_t CreateTXTRecordFromBinaryTXTRecord()
{
  return MEMORY[0x1E0CF7260]();
}

uint64_t CreateUsableInterfaceList()
{
  return MEMORY[0x1E0D1ACC8]();
}

uint64_t DataBuffer_Append()
{
  return MEMORY[0x1E0D1AD58]();
}

uint64_t DataBuffer_AppendF()
{
  return MEMORY[0x1E0D1AD60]();
}

uint64_t DataBuffer_Commit()
{
  return MEMORY[0x1E0D1AD68]();
}

uint64_t DataBuffer_Free()
{
  return MEMORY[0x1E0D1AD70]();
}

uint64_t DataBuffer_Init()
{
  return MEMORY[0x1E0D1AD78]();
}

uint64_t DebugGetErrorString()
{
  return MEMORY[0x1E0D1AD88]();
}

uint64_t FPrintF()
{
  return MEMORY[0x1E0D1ADB0]();
}

uint64_t FatalErrorF()
{
  return MEMORY[0x1E0D1ADC0]();
}

uint64_t FigBaseClassRegisterClass()
{
  return MEMORY[0x1E0C9F868]();
}

uint64_t FigBaseProtocolRegisterProtocol()
{
  return MEMORY[0x1E0C9F870]();
}

uint64_t FigCFArrayAppendInt64()
{
  return MEMORY[0x1E0C9FA28]();
}

uint64_t FigCFArrayGetInt64AtIndex()
{
  return MEMORY[0x1E0C9FAE8]();
}

uint64_t FigCFArrayGetValueAtIndex()
{
  return MEMORY[0x1E0C9FB00]();
}

uint64_t FigCFDictionaryApplyBlock()
{
  return MEMORY[0x1E0C9FB58]();
}

uint64_t FigCFDictionaryCreateMutableCopy()
{
  return MEMORY[0x1E0C9FB80]();
}

uint64_t FigCFDictionaryGetBooleanIfPresent()
{
  return MEMORY[0x1E0C9FB98]();
}

uint64_t FigCFDictionaryGetCMTimeIfPresent()
{
  return MEMORY[0x1E0C9FBC8]();
}

uint64_t FigCFDictionaryGetCount()
{
  return MEMORY[0x1E0C9FBD8]();
}

uint64_t FigCFDictionaryGetDoubleIfPresent()
{
  return MEMORY[0x1E0C9FBF0]();
}

uint64_t FigCFDictionaryGetInt32IfPresent()
{
  return MEMORY[0x1E0C9FC10]();
}

uint64_t FigCFDictionarySetCMTime()
{
  return MEMORY[0x1E0C9FCA0]();
}

uint64_t FigCFDictionarySetDouble()
{
  return MEMORY[0x1E0C9FCB0]();
}

uint64_t FigCFDictionarySetInt()
{
  return MEMORY[0x1E0C9FCC8]();
}

uint64_t FigCFDictionarySetInt32()
{
  return MEMORY[0x1E0C9FCD8]();
}

uint64_t FigCFDictionarySetInt64()
{
  return MEMORY[0x1E0C9FCE0]();
}

uint64_t FigCFDictionarySetValue()
{
  return MEMORY[0x1E0C9FD00]();
}

uint64_t FigCFDictionarySetValueFromKeyInDict()
{
  return MEMORY[0x1E0C9FD08]();
}

uint64_t FigCFEqual()
{
  return MEMORY[0x1E0C9FD10]();
}

uint64_t FigCFNumberCreateUInt64()
{
  return MEMORY[0x1E0C9FD70]();
}

uint64_t FigCFNumberGetUInt64()
{
  return MEMORY[0x1E0C9FDB0]();
}

uint64_t FigCFStringGetCStringPtrAndBufferToFree()
{
  return MEMORY[0x1E0C9FE38]();
}

uint64_t FigCFWeakReferenceHolderCopyReferencedObject()
{
  return MEMORY[0x1E0C9FEB8]();
}

uint64_t FigCFWeakReferenceHolderCreateWithReferencedObject()
{
  return MEMORY[0x1E0C9FEC0]();
}

uint64_t FigCFWeakReferenceTableAddValueAndGetKey()
{
  return MEMORY[0x1E0C9FEE8]();
}

uint64_t FigCFWeakReferenceTableAddValueAssociatedWithKey()
{
  return MEMORY[0x1E0C9FEF0]();
}

uint64_t FigCFWeakReferenceTableCopyValue()
{
  return MEMORY[0x1E0C9FF00]();
}

uint64_t FigCFWeakReferenceTableCreate()
{
  return MEMORY[0x1E0C9FF10]();
}

uint64_t FigCFWeakReferenceTableRemoveValue()
{
  return MEMORY[0x1E0C9FF18]();
}

uint64_t FigCreateBlockBufferCopyingMemoryBlock()
{
  return MEMORY[0x1E0CA0218]();
}

uint64_t FigCreateBlockBufferWithCFDataNoCopy()
{
  return MEMORY[0x1E0CA0220]();
}

uint64_t FigCreateCFDataWithBlockBufferNoCopy()
{
  return MEMORY[0x1E0CA0258]();
}

uint64_t FigDispatchAsyncPostNotification()
{
  return MEMORY[0x1E0CA0588]();
}

uint64_t FigDispatchAsyncSetPropertyImplementation()
{
  return MEMORY[0x1E0CA0590]();
}

uint64_t FigDispatchQueueCreateWithPriority()
{
  return MEMORY[0x1E0CA05C0]();
}

uint64_t FigDispatchSyncCopyPropertyImplementation()
{
  return MEMORY[0x1E0CA05F0]();
}

uint64_t FigGetCFPreferenceNumberWithDefault()
{
  return MEMORY[0x1E0CA0A70]();
}

uint64_t FigMakeIOVecArrayWithBlockBuffer()
{
  return MEMORY[0x1E0CA0DB0]();
}

uint64_t FigNotificationCenterAddWeakListener()
{
  return MEMORY[0x1E0CA0FC0]();
}

uint64_t FigNotificationCenterRemoveWeakListener()
{
  return MEMORY[0x1E0CA0FD8]();
}

uint64_t FigSimpleMutexCheckIsLockedOnThisThread()
{
  return MEMORY[0x1E0CA1560]();
}

uint64_t FigSimpleMutexCheckIsNotLockedOnThisThread()
{
  return MEMORY[0x1E0CA1568]();
}

uint64_t FigSimpleMutexCreate()
{
  return MEMORY[0x1E0CA1570]();
}

uint64_t FigSimpleMutexDestroy()
{
  return MEMORY[0x1E0CA1578]();
}

uint64_t FigSimpleMutexLock()
{
  return MEMORY[0x1E0CA1580]();
}

uint64_t FigSimpleMutexTryLock()
{
  return MEMORY[0x1E0CA1588]();
}

uint64_t FigSimpleMutexUnlock()
{
  return MEMORY[0x1E0CA1590]();
}

uint64_t FigThreadRunOnce()
{
  return MEMORY[0x1E0CA1810]();
}

uint64_t FigTransportGetCMBaseObject()
{
  return MEMORY[0x1E0CA1970]();
}

uint64_t FigTransportGetClassID()
{
  return MEMORY[0x1E0CA1978]();
}

uint64_t FigTransportServiceGetClassID()
{
  return MEMORY[0x1E0CA1990]();
}

uint64_t FigTransportSessionGetClassID()
{
  return MEMORY[0x1E0CA19A0]();
}

uint64_t FigTransportStreamGetCMBaseObject()
{
  return MEMORY[0x1E0CA19B0]();
}

uint64_t FigTransportStreamGetClassID()
{
  return MEMORY[0x1E0CA19B8]();
}

uint64_t FigTransportStreamGetTypeID()
{
  return MEMORY[0x1E0CA19C0]();
}

uint64_t GestaltProductTypeStringToDeviceClass()
{
  return MEMORY[0x1E0D1AE08]();
}

uint64_t GetPeerMACAddress()
{
  return MEMORY[0x1E0D1AE38]();
}

uint64_t HTTPClientCreate()
{
  return MEMORY[0x1E0D1AE60]();
}

uint64_t HTTPClientCreateWithSocket()
{
  return MEMORY[0x1E0D1AE68]();
}

uint64_t HTTPClientGetClientID()
{
  return MEMORY[0x1E0D1AE70]();
}

uint64_t HTTPClientGetSelfAddress()
{
  return MEMORY[0x1E0D1AE80]();
}

uint64_t HTTPClientInvalidate()
{
  return MEMORY[0x1E0D1AE88]();
}

uint64_t HTTPClientSendMessage()
{
  return MEMORY[0x1E0D1AE90]();
}

uint64_t HTTPClientSetConnectionLogging()
{
  return MEMORY[0x1E0D1AE98]();
}

uint64_t HTTPClientSetDelegate()
{
  return MEMORY[0x1E0D1AEA8]();
}

uint64_t HTTPClientSetDestination()
{
  return MEMORY[0x1E0D1AEB0]();
}

uint64_t HTTPClientSetDispatchQueue()
{
  return MEMORY[0x1E0D1AEB8]();
}

uint64_t HTTPClientSetFlags()
{
  return MEMORY[0x1E0D1AEC0]();
}

uint64_t HTTPClientSetLogging()
{
  return MEMORY[0x1E0D1AEC8]();
}

uint64_t HTTPClientSetTimeout()
{
  return MEMORY[0x1E0D1AED0]();
}

uint64_t HTTPClientSetTransportDelegate()
{
  return MEMORY[0x1E0D1AED8]();
}

uint64_t HTTPConnectionCreate()
{
  return MEMORY[0x1E0D1AEE0]();
}

uint64_t HTTPConnectionGetNextURLSegmentEx()
{
  return MEMORY[0x1E0D1AEE8]();
}

uint64_t HTTPConnectionSendSimpleResponseEx()
{
  return MEMORY[0x1E0D1AF00]();
}

uint64_t HTTPConnectionSetDispatchQueue()
{
  return MEMORY[0x1E0D1AF08]();
}

uint64_t HTTPConnectionSetTimeout()
{
  return MEMORY[0x1E0D1AF10]();
}

uint64_t HTTPConnectionSetTransportDelegate()
{
  return MEMORY[0x1E0D1AF18]();
}

uint64_t HTTPConnectionStart()
{
  return MEMORY[0x1E0D1AF20]();
}

uint64_t HTTPConnectionStopAsync()
{
  return MEMORY[0x1E0D1AF28]();
}

uint64_t HTTPGetHeaderField()
{
  return MEMORY[0x1E0D1AF30]();
}

uint64_t HTTPHeader_InitRequest()
{
  return MEMORY[0x1E0D1AF40]();
}

uint64_t HTTPHeader_SetField()
{
  return MEMORY[0x1E0D1AF48]();
}

uint64_t HTTPMessageCopy()
{
  return MEMORY[0x1E0D1AF58]();
}

uint64_t HTTPMessageCreate()
{
  return MEMORY[0x1E0D1AF60]();
}

uint64_t HTTPMessageGetHeaderField()
{
  return MEMORY[0x1E0D1AF68]();
}

uint64_t HTTPMessageSetBody()
{
  return MEMORY[0x1E0D1AF70]();
}

uint64_t HTTPMessageSetCompletionBlock()
{
  return MEMORY[0x1E0D1AF80]();
}

uint64_t HTTPScanFHeaderValue()
{
  return MEMORY[0x1E0D1AFA0]();
}

uint64_t HTTPServerCreate()
{
  return MEMORY[0x1E0D1AFA8]();
}

uint64_t HTTPServerSetDispatchQueue()
{
  return MEMORY[0x1E0D1AFB0]();
}

uint64_t HTTPServerSetLogging()
{
  return MEMORY[0x1E0D1AFB8]();
}

uint64_t HexToData()
{
  return MEMORY[0x1E0D1AFE8]();
}

uint64_t IOReportChannelGetChannelName()
{
  return MEMORY[0x1E0DE0290]();
}

uint64_t IOReportChannelGetGroup()
{
  return MEMORY[0x1E0DE02A0]();
}

uint64_t IOReportChannelGetSubGroup()
{
  return MEMORY[0x1E0DE02A8]();
}

uint64_t IOReportChannelGetUnitLabel()
{
  return MEMORY[0x1E0DE02B8]();
}

uint64_t IOReportCopyChannelsForDriver()
{
  return MEMORY[0x1E0DE02C0]();
}

uint64_t IOReportCreateSamples()
{
  return MEMORY[0x1E0DE02F8]();
}

uint64_t IOReportCreateSubscription()
{
  return MEMORY[0x1E0DE0310]();
}

uint64_t IOReportGetChannelCount()
{
  return MEMORY[0x1E0DE0318]();
}

uint64_t IOReportIterate()
{
  return MEMORY[0x1E0DE0338]();
}

uint64_t IOReportPrune()
{
  return MEMORY[0x1E0DE0348]();
}

uint64_t IOReportSelectChannelsInGroup()
{
  return MEMORY[0x1E0DE0358]();
}

uint64_t IOReportSimpleGetIntegerValue()
{
  return MEMORY[0x1E0DE0360]();
}

uint64_t IPv4AddressToCString()
{
  return MEMORY[0x1E0D1AFF0]();
}

uint64_t IsAppleInternalBuild()
{
  return MEMORY[0x1E0D1AFF8]();
}

uint64_t IsAppleTV()
{
  return MEMORY[0x1E0D1B008]();
}

uint64_t LogCategoryCopyOSLogHandle()
{
  return MEMORY[0x1E0D1B038]();
}

uint64_t LogCategoryReplaceF()
{
  return MEMORY[0x1E0D1B050]();
}

uint64_t LogCategory_Remove()
{
  return MEMORY[0x1E0D1B068]();
}

uint64_t LogHTTP()
{
  return MEMORY[0x1E0D1B088]();
}

uint64_t LogPrintF()
{
  return MEMORY[0x1E0D1B098]();
}

uint64_t MakeFractionalDateString()
{
  return MEMORY[0x1E0D1B100]();
}

uint64_t MillisecondsToUpTicks()
{
  return MEMORY[0x1E0D1B110]();
}

uint64_t NSErrorToOSStatus()
{
  return MEMORY[0x1E0D1B1F0]();
}

uint64_t NSPrintF()
{
  return MEMORY[0x1E0D1B210]();
}

uint64_t NetSocketChaCha20Poly1305Configure()
{
  return MEMORY[0x1E0D1B2D0]();
}

uint64_t NetSocket_Cancel()
{
  return MEMORY[0x1E0D1B2D8]();
}

uint64_t NetSocket_CreateWithNative()
{
  return MEMORY[0x1E0D1B2E0]();
}

uint64_t NetSocket_Delete()
{
  return MEMORY[0x1E0D1B2E8]();
}

uint64_t NetSocket_GetNative()
{
  return MEMORY[0x1E0D1B2F0]();
}

uint64_t NetTransportChaCha20Poly1305Configure()
{
  return MEMORY[0x1E0D1B2F8]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1E0D7FE28]();
}

uint64_t ParseFractionalDateString()
{
  return MEMORY[0x1E0D1B5E8]();
}

uint64_t ReleaseUsableInterfaceList()
{
  return MEMORY[0x1E0D1B608]();
}

CFDictionaryRef SCDynamicStoreCopyMultiple(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return (CFDictionaryRef)MEMORY[0x1E0CE8758](store, keys, patterns);
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1E0CE8768](store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return (SCDynamicStoreRef)MEMORY[0x1E0CE8770](allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return (CFStringRef)MEMORY[0x1E0CE87A8](allocator, domain, ifname, entity);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return MEMORY[0x1E0CE87C8](store, queue);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return MEMORY[0x1E0CE87D8](store, keys, patterns);
}

int SCError(void)
{
  return MEMORY[0x1E0CE87E0]();
}

const char *__cdecl SCErrorString(int status)
{
  return (const char *)MEMORY[0x1E0CE87E8](*(_QWORD *)&status);
}

uint64_t SNPrintF()
{
  return MEMORY[0x1E0D1B610]();
}

uint64_t SNScanF()
{
  return MEMORY[0x1E0D1B620]();
}

uint64_t SecGenerateSelfSignedCertificate()
{
  return MEMORY[0x1E0CD6268]();
}

uint64_t SecIdentityCreate()
{
  return MEMORY[0x1E0CD6280]();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1E0CD6388](parameters, error);
}

SecPolicyRef SecPolicyCreateSSL(Boolean server, CFStringRef hostname)
{
  return (SecPolicyRef)MEMORY[0x1E0CD6520](server, hostname);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1E0CD66C8](trust, error);
}

OSStatus SecTrustSetPolicies(SecTrustRef trust, CFTypeRef policies)
{
  return MEMORY[0x1E0CD6748](trust, policies);
}

uint64_t SecondsToUpTicks()
{
  return MEMORY[0x1E0D1B628]();
}

uint64_t ServerSocketPairOpen()
{
  return MEMORY[0x1E0D1B648]();
}

uint64_t SipHash()
{
  return MEMORY[0x1E0D1B658]();
}

uint64_t SockAddrCopy()
{
  return MEMORY[0x1E0D1B670]();
}

uint64_t SockAddrGetPort()
{
  return MEMORY[0x1E0D1B678]();
}

uint64_t SockAddrGetSize()
{
  return MEMORY[0x1E0D1B680]();
}

uint64_t SockAddrSetPort()
{
  return MEMORY[0x1E0D1B688]();
}

uint64_t SockAddrToString()
{
  return MEMORY[0x1E0D1B698]();
}

uint64_t SocketAccept()
{
  return MEMORY[0x1E0D1B6A0]();
}

uint64_t SocketConnect()
{
  return MEMORY[0x1E0D1B6A8]();
}

uint64_t SocketGetInterfaceInfo()
{
  return MEMORY[0x1E0D1B6B0]();
}

uint64_t SocketSetBufferSize()
{
  return MEMORY[0x1E0D1B6C0]();
}

uint64_t SocketSetMulticastInterface()
{
  return MEMORY[0x1E0D1B6C8]();
}

uint64_t SocketSetNonBlocking()
{
  return MEMORY[0x1E0D1B6D8]();
}

uint64_t SocketSetP2P()
{
  return MEMORY[0x1E0D1B6E0]();
}

uint64_t SocketSetQoS()
{
  return MEMORY[0x1E0D1B6E8]();
}

uint64_t SocketSetTCPTimeout()
{
  return MEMORY[0x1E0D1B6F0]();
}

uint64_t SocketWriteData()
{
  return MEMORY[0x1E0D1B6F8]();
}

uint64_t StringToSockAddr()
{
  return MEMORY[0x1E0D1B710]();
}

void TXTRecordCreate(TXTRecordRef *txtRecord, uint16_t bufferLen, void *buffer)
{
  MEMORY[0x1E0C806F0](txtRecord, bufferLen, buffer);
}

void TXTRecordDeallocate(TXTRecordRef *txtRecord)
{
  MEMORY[0x1E0C806F8](txtRecord);
}

const void *__cdecl TXTRecordGetBytesPtr(const TXTRecordRef *txtRecord)
{
  return (const void *)MEMORY[0x1E0C80700](txtRecord);
}

uint16_t TXTRecordGetLength(const TXTRecordRef *txtRecord)
{
  return MEMORY[0x1E0C80718](txtRecord);
}

const void *__cdecl TXTRecordGetValuePtr(uint16_t txtLen, const void *txtRecord, const char *key, uint8_t *valueLen)
{
  return (const void *)MEMORY[0x1E0C80720](txtLen, txtRecord, key, valueLen);
}

DNSServiceErrorType TXTRecordSetValue(TXTRecordRef *txtRecord, const char *key, uint8_t valueSize, const void *value)
{
  return MEMORY[0x1E0C80730](txtRecord, key, valueSize, value);
}

uint64_t TextToHardwareAddressScalar()
{
  return MEMORY[0x1E0D1B7A8]();
}

uint64_t UUIDGet()
{
  return MEMORY[0x1E0D1B7C8]();
}

uint64_t UpTicksToMicroseconds()
{
  return MEMORY[0x1E0D1B7E8]();
}

uint64_t UpTicksToMilliseconds()
{
  return MEMORY[0x1E0D1B7F0]();
}

uint64_t UpTicksToNanoseconds()
{
  return MEMORY[0x1E0D1B800]();
}

uint64_t UpTicksToSeconds()
{
  return MEMORY[0x1E0D1B808]();
}

uint64_t UpTicksToSecondsF()
{
  return MEMORY[0x1E0D1B818]();
}

uint64_t WiFiManagerClientCreate()
{
  return MEMORY[0x1E0D4FC08]();
}

uint64_t WiFiManagerClientSetProperty()
{
  return MEMORY[0x1E0D4FCA0]();
}

uint64_t WiFiManagerCreate()
{
  return MEMORY[0x1E0D1B848]();
}

uint64_t WiFiManagerGetInt64()
{
  return MEMORY[0x1E0D1B850]();
}

uint64_t WiFiManagerSetProperty()
{
  return MEMORY[0x1E0D1B858]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _LogCategory_Initialize()
{
  return MEMORY[0x1E0D1B880]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1E0C826D8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82BD0](when, queue, context, work);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1E0C82CE8](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
  MEMORY[0x1E0C82EE8](object, finalizer);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_cancel_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F50](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F60](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82FA0](queue, context, work);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x1E0C834D0](a1);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1E0C836C8](a1);
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1E0C83748](*(_QWORD *)&a1, a2, a3);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1E0C83810](*(_QWORD *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1E0C83818](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1E0C83900](*(_QWORD *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1E0C83910](a1);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1E0C83970](*(_QWORD *)&a1, a2, a3);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x1E0C843F0](*(_QWORD *)&val);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

void nw_connection_batch(nw_connection_t connection, dispatch_block_t batch_block)
{
  MEMORY[0x1E0CCEFA8](connection, batch_block);
}

void nw_connection_cancel(nw_connection_t connection)
{
  MEMORY[0x1E0CCEFB8](connection);
}

uint64_t nw_connection_copy_connected_path()
{
  return MEMORY[0x1E0CCEFD8]();
}

char *__cdecl nw_connection_copy_description(nw_connection_t connection)
{
  return (char *)MEMORY[0x1E0CCEFF0](connection);
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCEFF8](connection);
}

nw_parameters_t nw_connection_copy_parameters(nw_connection_t connection)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF018](connection);
}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  return (nw_protocol_metadata_t)MEMORY[0x1E0CCF020](connection, definition);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x1E0CCF030](endpoint, parameters);
}

void nw_connection_force_cancel(nw_connection_t connection)
{
  MEMORY[0x1E0CCF088](connection);
}

void nw_connection_group_cancel(nw_connection_group_t group)
{
  MEMORY[0x1E0CCF0B0](group);
}

void nw_connection_group_set_new_connection_handler(nw_connection_group_t group, nw_connection_group_new_connection_handler_t new_connection_handler)
{
  MEMORY[0x1E0CCF0C8](group, new_connection_handler);
}

uint64_t nw_connection_group_set_new_connection_limit()
{
  return MEMORY[0x1E0CCF0D0]();
}

void nw_connection_group_set_queue(nw_connection_group_t group, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF0D8](group, queue);
}

void nw_connection_group_set_state_changed_handler(nw_connection_group_t group, nw_connection_group_state_changed_handler_t state_changed_handler)
{
  MEMORY[0x1E0CCF0E0](group, state_changed_handler);
}

void nw_connection_group_start(nw_connection_group_t group)
{
  MEMORY[0x1E0CCF0E8](group);
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
  MEMORY[0x1E0CCF128](connection, *(_QWORD *)&minimum_incomplete_length, *(_QWORD *)&maximum_length, completion);
}

uint64_t nw_connection_receive_multiple()
{
  return MEMORY[0x1E0CCF138]();
}

uint64_t nw_connection_reset_traffic_class()
{
  return MEMORY[0x1E0CCF158]();
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
  MEMORY[0x1E0CCF168](connection, content, context, is_complete, completion);
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF1B0](connection, queue);
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
  MEMORY[0x1E0CCF1C0](connection, handler);
}

void nw_connection_start(nw_connection_t connection)
{
  MEMORY[0x1E0CCF1D8](connection);
}

uint64_t nw_connection_state_to_string()
{
  return MEMORY[0x1E0CCF1E8]();
}

nw_content_context_t nw_content_context_create(const char *context_identifier)
{
  return (nw_content_context_t)MEMORY[0x1E0CCF220](context_identifier);
}

BOOL nw_content_context_get_is_final(nw_content_context_t context)
{
  return MEMORY[0x1E0CCF238](context);
}

void nw_content_context_set_expiration_milliseconds(nw_content_context_t context, uint64_t expiration_milliseconds)
{
  MEMORY[0x1E0CCF248](context, expiration_milliseconds);
}

uint64_t nw_content_context_set_packet_id()
{
  return MEMORY[0x1E0CCF260]();
}

uint64_t nw_context_activate()
{
  return MEMORY[0x1E0CCF268]();
}

uint64_t nw_context_cancel()
{
  return MEMORY[0x1E0CCF278]();
}

uint64_t nw_context_create()
{
  return MEMORY[0x1E0CCF290]();
}

uint64_t nw_context_run_queued_blocks_inline()
{
  return MEMORY[0x1E0CCF2B8]();
}

uint64_t nw_context_set_isolate_protocol_stack()
{
  return MEMORY[0x1E0CCF2C8]();
}

uint64_t nw_context_set_scheduling_mode()
{
  return MEMORY[0x1E0CCF2D8]();
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  return (char *)MEMORY[0x1E0CCF340](endpoint);
}

uint64_t nw_endpoint_copy_interface()
{
  return MEMORY[0x1E0CCF360]();
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF388](address);
}

uint64_t nw_endpoint_create_address_with_ethernet()
{
  return MEMORY[0x1E0CCF390]();
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return (const sockaddr *)MEMORY[0x1E0CCF3D8](endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1E0CCF410](endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x1E0CCF428](endpoint);
}

CFErrorRef nw_error_copy_cf_error(nw_error_t error)
{
  return (CFErrorRef)MEMORY[0x1E0CCF458](error);
}

int nw_error_get_error_code(nw_error_t error)
{
  return MEMORY[0x1E0CCF468](error);
}

nw_error_domain_t nw_error_get_error_domain(nw_error_t error)
{
  return MEMORY[0x1E0CCF470](error);
}

uint64_t nw_interface_create_with_index()
{
  return MEMORY[0x1E0CCF6F0]();
}

uint64_t nw_interface_create_with_name()
{
  return MEMORY[0x1E0CCF6F8]();
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return (const char *)MEMORY[0x1E0CCF710](interface);
}

void nw_listener_cancel(nw_listener_t listener)
{
  MEMORY[0x1E0CCF7C8](listener);
}

uint64_t nw_listener_copy_local_endpoint()
{
  return MEMORY[0x1E0CCF7D0]();
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1E0CCF7D8](parameters);
}

nw_listener_t nw_listener_create_with_port(const char *port, nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1E0CCF7E8](port, parameters);
}

uint16_t nw_listener_get_port(nw_listener_t listener)
{
  return MEMORY[0x1E0CCF7F0](listener);
}

uint64_t nw_listener_set_event_handler()
{
  return MEMORY[0x1E0CCF800]();
}

void nw_listener_set_new_connection_group_handler(nw_listener_t listener, nw_listener_new_connection_group_handler_t handler)
{
  MEMORY[0x1E0CCF808](listener, handler);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
  MEMORY[0x1E0CCF810](listener, handler);
}

void nw_listener_set_new_connection_limit(nw_listener_t listener, uint32_t new_connection_limit)
{
  MEMORY[0x1E0CCF818](listener, *(_QWORD *)&new_connection_limit);
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF820](listener, queue);
}

void nw_listener_start(nw_listener_t listener)
{
  MEMORY[0x1E0CCF830](listener);
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1E0CCF8C8](parameters);
}

nw_endpoint_t nw_parameters_copy_local_endpoint(nw_parameters_t parameters)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF8E8](parameters);
}

nw_interface_t nw_parameters_copy_required_interface(nw_parameters_t parameters)
{
  return (nw_interface_t)MEMORY[0x1E0CCF928](parameters);
}

nw_parameters_t nw_parameters_create_quic(nw_parameters_configure_protocol_block_t configure_quic)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF968](configure_quic);
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF980](configure_tls, configure_tcp);
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF990](configure_dtls, configure_udp);
}

void nw_parameters_prohibit_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
  MEMORY[0x1E0CCFA38](parameters, *(_QWORD *)&interface_type);
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
  MEMORY[0x1E0CCFA48](parameters, interface);
}

uint64_t nw_parameters_set_context()
{
  return MEMORY[0x1E0CCFA90]();
}

uint64_t nw_parameters_set_delegated_unique_pid()
{
  return MEMORY[0x1E0CCFAA0]();
}

uint64_t nw_parameters_set_disable_listener_datapath()
{
  return MEMORY[0x1E0CCFAA8]();
}

void nw_parameters_set_include_peer_to_peer(nw_parameters_t parameters, BOOL include_peer_to_peer)
{
  MEMORY[0x1E0CCFB08](parameters, include_peer_to_peer);
}

uint64_t nw_parameters_set_local_address()
{
  return MEMORY[0x1E0CCFB30]();
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
  MEMORY[0x1E0CCFB38](parameters, local_endpoint);
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
  MEMORY[0x1E0CCFC18](parameters, reuse_local_address);
}

uint64_t nw_parameters_set_traffic_class()
{
  return MEMORY[0x1E0CCFC68]();
}

uint64_t nw_parameters_set_use_p2p()
{
  return MEMORY[0x1E0CCFC90]();
}

nw_endpoint_t nw_path_copy_effective_local_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCFCB0](path);
}

nw_endpoint_t nw_path_copy_effective_remote_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCFCB8](path);
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x1E0CCFD10]();
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
  MEMORY[0x1E0CCFD18](path, enumerate_block);
}

uint64_t nw_path_evaluator_get_client_id()
{
  return MEMORY[0x1E0CCFD40]();
}

uint64_t nw_protocol_copy_replicate_definition()
{
  return MEMORY[0x1E0CCFEC8]();
}

nw_protocol_definition_t nw_protocol_copy_tcp_definition(void)
{
  return (nw_protocol_definition_t)MEMORY[0x1E0CCFED8]();
}

uint64_t nw_protocol_stack_append_application_protocol()
{
  return MEMORY[0x1E0CCFFC0]();
}

uint64_t nw_queue_context_target_dispatch_queue()
{
  return MEMORY[0x1E0CD0110]();
}

void nw_quic_add_tls_application_protocol(nw_protocol_options_t options, const char *application_protocol)
{
  MEMORY[0x1E0CD0130](options, application_protocol);
}

sec_protocol_options_t nw_quic_copy_sec_protocol_options(nw_protocol_options_t options)
{
  return (sec_protocol_options_t)MEMORY[0x1E0CD01E0](options);
}

void nw_quic_set_idle_timeout(nw_protocol_options_t options, uint32_t idle_timeout)
{
  MEMORY[0x1E0CD0208](options, *(_QWORD *)&idle_timeout);
}

void nw_release(void *obj)
{
  MEMORY[0x1E0CD0248](obj);
}

uint64_t nw_replicate_create_options()
{
  return MEMORY[0x1E0CD0250]();
}

uint64_t nw_replicate_metadata_add_endpoint()
{
  return MEMORY[0x1E0CD0258]();
}

uint64_t nw_replicate_metadata_remove_endpoint()
{
  return MEMORY[0x1E0CD0260]();
}

void *__cdecl nw_retain(void *obj)
{
  return (void *)MEMORY[0x1E0CD0318](obj);
}

uint32_t nw_tcp_get_available_send_buffer(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x1E0CD0368](metadata);
}

void nw_tcp_options_set_no_delay(nw_protocol_options_t options, BOOL no_delay)
{
  MEMORY[0x1E0CD03A8](options, no_delay);
}

uint64_t nw_tcp_set_no_push()
{
  return MEMORY[0x1E0CD03B0]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

uint64_t os_transaction_copy_description()
{
  return MEMORY[0x1E0C84968]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

ssize_t recvfrom(int a1, void *a2, size_t a3, int a4, sockaddr *a5, socklen_t *a6)
{
  return MEMORY[0x1E0C85068](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4, a5, a6);
}

sec_identity_t sec_identity_create(SecIdentityRef identity)
{
  return (sec_identity_t)MEMORY[0x1E0CD7148](identity);
}

void sec_protocol_options_append_tls_ciphersuite(sec_protocol_options_t options, tls_ciphersuite_t ciphersuite)
{
  MEMORY[0x1E0CD7240](options, ciphersuite);
}

void sec_protocol_options_set_local_identity(sec_protocol_options_t options, sec_identity_t identity)
{
  MEMORY[0x1E0CD72B8](options, identity);
}

void sec_protocol_options_set_peer_authentication_required(sec_protocol_options_t options, BOOL peer_authentication_required)
{
  MEMORY[0x1E0CD72E8](options, peer_authentication_required);
}

void sec_release(void *obj)
{
  MEMORY[0x1E0CD7358](obj);
}

void *__cdecl sec_retain(void *obj)
{
  return (void *)MEMORY[0x1E0CD7360](obj);
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return MEMORY[0x1E0C85300](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

ssize_t sendto(int a1, const void *a2, size_t a3, int a4, const sockaddr *a5, socklen_t a6)
{
  return MEMORY[0x1E0C85310](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4, a5, *(_QWORD *)&a6);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1E0C85388](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85450](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

uint64_t strncmp_prefix()
{
  return MEMORY[0x1E0D1B990]();
}

uint64_t strncmpx()
{
  return MEMORY[0x1E0D1B998]();
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

uint64_t strnicmpx()
{
  return MEMORY[0x1E0D1B9A8]();
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85678](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t symptom_framework_init()
{
  return MEMORY[0x1E0C85728]();
}

uint64_t symptom_new()
{
  return MEMORY[0x1E0C85730]();
}

uint64_t symptom_send()
{
  return MEMORY[0x1E0C85738]();
}

uint64_t symptom_set_additional_qualifier()
{
  return MEMORY[0x1E0C85748]();
}

uint64_t symptom_set_qualifier()
{
  return MEMORY[0x1E0C85750]();
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  MEMORY[0x1E0C85A10](dst, src);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1E0C85D48](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

