uint64_t sub_19C163210(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19C163260(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char __p[21];

  v2 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 200))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = *(_QWORD *)(a1 + 80);
    }
    while (v3 < (*(_QWORD *)(a1 + 88) - v2) >> 3);
  }
  strcpy(__p, "From allocAllBuffers");
  sub_19C11B874(a1);
}

void sub_19C16330C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C163328(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v3 = a1[35];
  v2 = a1[36];
  if (v2 == v3)
  {
    v3 = a1[36];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        *v5 = 0;
        v3 = a1[35];
        v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  v6 = a1[10];
  if (a1[11] != v6)
  {
    v7 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 208))(*(_QWORD *)(v6 + 8 * v7));
      ++v7;
      v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  v9 = a1[25];
  v8 = a1[26];
  if (v8 != v9)
  {
    v10 = a1[26];
    do
    {
      v12 = *(void **)(v10 - 24);
      v10 -= 24;
      v11 = v12;
      if (v12)
      {
        *(_QWORD *)(v8 - 16) = v11;
        operator delete(v11);
      }
      v8 = v10;
    }
    while (v10 != v9);
  }
  a1[26] = v9;
  v14 = a1[59];
  v13 = a1[60];
  if (v13 != v14)
  {
    v15 = a1[60];
    do
    {
      v17 = *(void **)(v15 - 24);
      v15 -= 24;
      v16 = v17;
      if (v17)
      {
        *(_QWORD *)(v13 - 16) = v16;
        operator delete(v16);
      }
      v13 = v15;
    }
    while (v15 != v14);
  }
  a1[60] = v14;
  a1[39] = a1[38];
}

void sub_19C163458(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, char a5)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  int *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  uint64_t *v43;
  int v45;

  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  if (a4 >= 1)
  {
    v8 = 0;
    while ((a5 & 1) != 0)
    {
      if (a3[1] == *a3)
      {
        if (v45 >= 1)
        {
          v17 = 0;
          v24 = 0;
          v25 = 1.1755e-38;
          do
          {
            v26 = *(float *)(*(_QWORD *)(*a2 + 8 * v8) + 4 * v24);
            if (v26 > v25)
              v17 = v24;
            v25 = fmaxf(v26, v25);
            ++v24;
          }
          while (v45 != v24);
          goto LABEL_21;
        }
LABEL_24:
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 376);
        *(_DWORD *)(v18 + 4 * v8) = 0;
        v19 = *(_QWORD **)(a1 + 496);
        v20 = v19[8];
        if (v20)
          goto LABEL_22;
        goto LABEL_25;
      }
      if (v8 >= (a4 - 1))
      {
        v17 = 2;
        v18 = *(_QWORD *)(a1 + 376);
        *(_DWORD *)(v18 + 4 * v8) = 2;
        v19 = *(_QWORD **)(a1 + 496);
        v20 = v19[8];
        if (v20)
        {
LABEL_22:
          v27 = (int *)(v20 + 8 * v17 + 4);
LABEL_23:
          v28 = *v27;
          goto LABEL_36;
        }
      }
      else
      {
        v17 = **(_DWORD **)(*a3 + 24 * v8 + 24);
        v18 = *(_QWORD *)(a1 + 376);
        *(_DWORD *)(v18 + 4 * v8) = v17;
        v19 = *(_QWORD **)(a1 + 496);
        v20 = v19[8];
        if (v20)
          goto LABEL_22;
      }
LABEL_25:
      v29 = v19[6];
      if (v29)
      {
        v30 = v19 + 6;
        do
        {
          v31 = *(_DWORD *)(v29 + 28);
          v32 = v31 < v17;
          if (v31 >= v17)
            v33 = (uint64_t *)v29;
          else
            v33 = (uint64_t *)(v29 + 8);
          if (!v32)
            v30 = (_QWORD *)v29;
          v29 = *v33;
        }
        while (*v33);
        if (v30 != v19 + 6 && *((_DWORD *)v30 + 7) <= v17)
        {
          v27 = (int *)(v30 + 4);
          goto LABEL_23;
        }
      }
      v28 = -1;
LABEL_36:
      *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v8) = v28 + 1;
      v34 = *(int *)(v18 + 4 * v8);
      v35 = v19[13];
      if (v35)
      {
        v36 = (int *)(v35 + 8 * v34 + 4);
LABEL_38:
        v9 = *v36;
        goto LABEL_4;
      }
      v39 = v19[11];
      v37 = v19 + 11;
      v38 = v39;
      if (v39)
      {
        v40 = v37;
        do
        {
          v41 = *(_DWORD *)(v38 + 28);
          v42 = v41 < (int)v34;
          if (v41 >= (int)v34)
            v43 = (uint64_t *)v38;
          else
            v43 = (uint64_t *)(v38 + 8);
          if (!v42)
            v40 = (_QWORD *)v38;
          v38 = *v43;
        }
        while (*v43);
        if (v40 != v37 && *((_DWORD *)v40 + 7) <= (int)v34)
        {
          v36 = (int *)(v40 + 4);
          goto LABEL_38;
        }
      }
      v9 = -1;
LABEL_4:
      *(_DWORD *)(*(_QWORD *)(a1 + 424) + 4 * v8) = v9;
      v10 = **(_QWORD **)(a1 + 200);
      v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 272))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v10 + 8 * v8), 4 * v11);
      v12 = *(_QWORD **)(a1 + 200);
      v13 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v8);
      v14 = v12[3 * (int)v13];
      *(_DWORD *)(*(_QWORD *)(*v12 + 8 * v8) + 4 * v13 - 4) = 1065353216;
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 272))(v15);
      bzero(*(void **)(v14 + 8 * v8), 4 * v16);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * *(int *)(*(_QWORD *)(a1 + 400) + 4 * v8))
                            + 8 * v8)
                + 4 * *(int *)(*(_QWORD *)(a1 + 424) + 4 * v8)) = 1065353216;
      if (++v8 == a4)
        return;
    }
    if (v45 >= 1)
    {
      v17 = 0;
      v21 = 0;
      v22 = 1.1755e-38;
      do
      {
        v23 = *(float *)(*(_QWORD *)(*a2 + 8 * v8) + 4 * v21);
        if (v23 > v22)
          v17 = v21;
        v22 = fmaxf(v23, v22);
        ++v21;
      }
      while (v45 != v21);
LABEL_21:
      v18 = *(_QWORD *)(a1 + 376);
      *(_DWORD *)(v18 + 4 * v8) = v17;
      v19 = *(_QWORD **)(a1 + 496);
      v20 = v19[8];
      if (v20)
        goto LABEL_22;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
}

uint64_t sub_19C163780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)(*(_QWORD *)(a1 + 88) - v1) < 9)
    return 0;
  LODWORD(v3) = 0;
  v4 = 1;
  do
  {
    v3 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v4) + 272))(*(_QWORD *)(v1 + 8 * v4))
       + v3;
    ++v4;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v4 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return v3;
}

uint64_t sub_19C163800(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)(result + 528) = a2;
  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void sub_19C163864()
{
  sub_19C2210D4(5);
}

void sub_19C163874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  float32x4_t *v25;
  float32x4_t *v26;
  int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float32x4_t v41;
  uint64_t v42;
  float *v43;
  float *v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  float32x4_t *v58;
  float32x4_t *v59;
  int v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v71;
  float32x4_t *v72;
  float32x4_t *v73;
  float32x4_t v74;
  uint64_t v75;
  float *v76;
  float *v77;
  float v78;

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = 8 * a5;
    v9 = a5;
    do
    {
      v10 = *(_QWORD *)(a1 + 504);
      v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 264))(**(_QWORD **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    for (i = 0; i != v9; ++i)
    {
      v13 = *(int *)(a1 + 332);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 248))(v14, *(_QWORD *)(a1 + 472) + 24 * (int)v13, a3, i, *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v13), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v13));
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
      v18 = *(const void **)v16;
      v17 = *(_QWORD *)(v16 + 8);
      v19 = v17 - *(_QWORD *)v16;
      if (v17 == *(_QWORD *)v16)
      {
        v20 = 0;
      }
      else
      {
        if (v19 < 0)
          sub_19C07DA0C();
        v20 = operator new(v17 - *(_QWORD *)v16);
        memcpy(v20, v18, v19 & 0xFFFFFFFFFFFFFFF8);
      }
      v21 = *(_QWORD *)(a1 + 504);
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v13);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 264))(v22);
      v24 = v23 / 8;
      if (v23 >= 8)
      {
        v25 = *(float32x4_t **)(v21 + 8 * i);
        v26 = (float32x4_t *)*((_QWORD *)v20 + i);
        v27 = v23 / 8;
        do
        {
          v28 = *v26;
          v29 = v26[1];
          v26 += 2;
          v30 = vaddq_f32(v25[1], v29);
          *v25 = vaddq_f32(*v25, v28);
          v25[1] = v30;
          v25 += 2;
          --v27;
        }
        while (v27);
      }
      v31 = 8 * v24;
      if (8 * v24 < v23)
      {
        v32 = *((_QWORD *)v20 + i);
        v33 = *(_QWORD *)(v21 + 8 * i);
        v34 = v31;
        if ((unint64_t)(v23 - (uint64_t)v31) < 8)
          goto LABEL_23;
        v35 = v33 + 4 * v31;
        v36 = v32 + 4 * v31;
        if (v35 < v32 + 4 * v23 && v36 < v33 + 4 * v23)
          goto LABEL_23;
        v38 = v31 + (v23 & 7) - v23;
        v39 = (float32x4_t *)(v36 + 16);
        v40 = (float32x4_t *)(v35 + 16);
        do
        {
          v41 = vaddq_f32(*v40, *v39);
          v40[-1] = vaddq_f32(v40[-1], v39[-1]);
          *v40 = v41;
          v39 += 2;
          v40 += 2;
          v38 += 8;
        }
        while (v38);
        v34 = v23 - (v23 & 7);
        if ((v23 & 7) != 0)
        {
LABEL_23:
          v42 = v23 - v34;
          v43 = (float *)(v33 + 4 * v34);
          v44 = (float *)(v32 + 4 * v34);
          do
          {
            v45 = *v44++;
            *v43 = *v43 + v45;
            ++v43;
            --v42;
          }
          while (v42);
        }
      }
      v46 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * i);
      v47 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v46);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v47 + 248))(v47, *(_QWORD *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v46));
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v46);
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48);
      v51 = *(const void **)v49;
      v50 = *(_QWORD *)(v49 + 8);
      v52 = v50 - *(_QWORD *)v49;
      if (v50 == *(_QWORD *)v49)
      {
        v53 = 0;
      }
      else
      {
        if (v52 < 0)
          sub_19C07DA0C();
        v53 = operator new(v50 - *(_QWORD *)v49);
        memcpy(v53, v51, v52 & 0xFFFFFFFFFFFFFFF8);
      }
      v54 = *(_QWORD *)(a1 + 504);
      v55 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v46);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 264))(v55);
      v57 = v56 / 8;
      if (v56 >= 8)
      {
        v58 = *(float32x4_t **)(v54 + 8 * i);
        v59 = (float32x4_t *)*((_QWORD *)v53 + i);
        v60 = v56 / 8;
        do
        {
          v61 = *v59;
          v62 = v59[1];
          v59 += 2;
          v63 = vaddq_f32(v58[1], v62);
          *v58 = vaddq_f32(*v58, v61);
          v58[1] = v63;
          v58 += 2;
          --v60;
        }
        while (v60);
      }
      v64 = 8 * v57;
      if (8 * v57 < v56)
      {
        v65 = *((_QWORD *)v53 + i);
        v66 = *(_QWORD *)(v54 + 8 * i);
        v67 = v64;
        if ((unint64_t)(v56 - (uint64_t)v64) < 8)
          goto LABEL_42;
        v68 = v66 + 4 * v64;
        v69 = v65 + 4 * v64;
        if (v68 < v65 + 4 * v56 && v69 < v66 + 4 * v56)
          goto LABEL_42;
        v71 = v64 + (v56 & 7) - v56;
        v72 = (float32x4_t *)(v69 + 16);
        v73 = (float32x4_t *)(v68 + 16);
        do
        {
          v74 = vaddq_f32(*v73, *v72);
          v73[-1] = vaddq_f32(v73[-1], v72[-1]);
          *v73 = v74;
          v72 += 2;
          v73 += 2;
          v71 += 8;
        }
        while (v71);
        v67 = v56 - (v56 & 7);
        if ((v56 & 7) != 0)
        {
LABEL_42:
          v75 = v56 - v67;
          v76 = (float *)(v66 + 4 * v67);
          v77 = (float *)(v65 + 4 * v67);
          do
          {
            v78 = *v77++;
            *v76 = *v76 + v78;
            ++v76;
            --v75;
          }
          while (v75);
        }
      }
      if (v53)
        operator delete(v53);
      if (v20)
        operator delete(v20);
    }
  }
}

void sub_19C163CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_19C163D0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  float v36;
  float v37;
  int v38;
  char *v39;
  int *v40;
  uint64_t v41;
  int v42;
  int *v43;
  void **p_p;
  int *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  int *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  _DWORD *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  int *v70;
  uint64_t v71;
  int v72;
  int *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  uint64_t *v85;
  int *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  int *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  _OWORD *v98;
  int *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _BYTE *v122;
  int *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _OWORD *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  _DWORD *v133;
  int *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int *v138;
  char *v139;
  int *v140;
  int64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  char *v155;
  __int128 *v156;
  uint64_t v157;
  __int128 v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  _OWORD *v164;
  int *v165;
  uint64_t v166;
  __int128 v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  int64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  int v195;
  int *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void **v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  float v207;
  float32x4_t *v208;
  unint64_t v209;
  float32x4_t *v210;
  uint64_t v211;
  float32x4_t v212;
  unint64_t v213;
  float *v214;
  int *v215;
  _DWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  vDSP_Length v221;
  char *v222;
  uint64_t v223;
  char *v224;
  int64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int *v229;
  int *v230;
  int *v231;
  uint64_t *v232;
  void *__p;
  int *v234;
  char *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  int *v239;
  int *v240;
  char *v241;
  float __C[3];

  v239 = 0;
  v240 = 0;
  v241 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 304);
    do
    {
      *(_DWORD *)(v14 + 4 * v13) = 0;
      v84 = v13++ < *(int *)(a1 + 340);
    }
    while (v84);
  }
  v15 = *(_QWORD *)(a1 + 224);
  if (v15)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  v16 = a4 & 0xFFFFFF;
  if (v16 > (a5 != 0))
  {
    v17 = a5 != 0;
    v223 = a7;
    v226 = a2;
    v227 = a3;
    v228 = v16;
    do
    {
      v18 = *(int *)(a1 + 332);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 272))(v19);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 264))(v20);
      v21 = *(_QWORD *)(a1 + 304);
      if (!*(_DWORD *)(v21 + 4 * v18))
      {
        *(_DWORD *)(v21 + 4 * v18) = 1;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 256))(v22, v228);
      }
      v236 = 0;
      v237 = 0;
      v238 = 0;
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v23 + 224))(v23, a2, a3, v17, &v236);
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v18);
      v232 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      __p = 0;
      v234 = 0;
      v235 = 0;
      v25 = *(_DWORD *)(a1 + 328);
      if (v25 == 1)
      {
        v42 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * v17);
        v43 = (int *)operator new(4uLL);
        *v43 = v42;
        v234 = v43 + 1;
        v235 = (char *)(v43 + 1);
        __p = v43;
        goto LABEL_212;
      }
      if (v25 == 2)
      {
        v31 = *v232;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 272))(v32);
        if (v33 < 1)
        {
          v38 = 1;
          v40 = v234;
          v39 = v235;
          if (v234 < (int *)v235)
            goto LABEL_25;
        }
        else
        {
          v34 = 0;
          v35 = 0;
          v36 = 1.1755e-38;
          do
          {
            v37 = *(float *)(*(_QWORD *)(v31 + 8 * v17) + 4 * v35);
            if (v37 > v36)
              v34 = v35;
            v36 = fmaxf(v37, v36);
            ++v35;
          }
          while (v33 != v35);
          v38 = v34 + 1;
          v40 = v234;
          v39 = v235;
          if (v234 < (int *)v235)
          {
LABEL_25:
            *v40 = v38;
            v41 = (uint64_t)(v40 + 1);
LABEL_182:
            v234 = (int *)v41;
            p_p = &__p;
            goto LABEL_213;
          }
        }
        v45 = (int *)__p;
        v46 = (char *)v40 - (_BYTE *)__p;
        v47 = ((char *)v40 - (_BYTE *)__p) >> 2;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62)
          sub_19C07DA0C();
        v49 = v39 - (_BYTE *)__p;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 62)
            sub_19C07C7FC();
          v51 = operator new(4 * v50);
          v52 = (int *)&v51[4 * v47];
          *v52 = v38;
          v41 = (uint64_t)(v52 + 1);
          if (v40 == v45)
            goto LABEL_180;
LABEL_174:
          v160 = (char *)(v40 - 1) - (char *)v45;
          if (v160 < 0x2C)
            goto LABEL_259;
          if ((unint64_t)((char *)v40 - &v51[v46]) < 0x20)
            goto LABEL_259;
          v161 = (v160 >> 2) + 1;
          v162 = 4 * (v161 & 0x7FFFFFFFFFFFFFF8);
          v163 = &v40[v162 / 0xFFFFFFFFFFFFFFFCLL];
          v52 = (int *)((char *)v52 - v162);
          v164 = &v51[4 * v47 - 16];
          v165 = v40 - 4;
          v166 = v161 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v167 = *(_OWORD *)v165;
            *(v164 - 1) = *((_OWORD *)v165 - 1);
            *v164 = v167;
            v164 -= 2;
            v165 -= 8;
            v166 -= 8;
          }
          while (v166);
          v40 = v163;
          if (v161 != (v161 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_259:
            do
            {
              v168 = *--v40;
              *--v52 = v168;
            }
            while (v40 != v45);
          }
        }
        else
        {
          v51 = 0;
          v52 = (int *)(4 * v47);
          *(_DWORD *)(4 * v47) = v38;
          v41 = 4 * v47 + 4;
          if (v40 != v45)
            goto LABEL_174;
        }
LABEL_180:
        __p = v52;
        v234 = (int *)v41;
        v235 = &v51[4 * v50];
        if (v45)
          operator delete(v45);
        goto LABEL_182;
      }
      if (v25 != 4)
      {
        p_p = &__p;
        sub_19C11EC14(*v232 + 8 * v17, (float32x4_t **)(*v232 + 8 * v17), *(_DWORD *)(a1 + 340), (unint64_t *)&__p, *(_DWORD *)(*(_QWORD *)(a1 + 496) + 8), 1u);
        goto LABEL_213;
      }
      v26 = v239;
      v240 = v239;
      v27 = *(_QWORD *)(a1 + 536);
      v28 = *(_QWORD *)(a1 + 544) - v27;
      if (!v28)
        goto LABEL_44;
      v29 = v28 / 24;
      if (v29 <= 1)
        v29 = 1;
      if (v29 >= 2)
      {
        v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
        v53 = (_QWORD *)(v27 + 32);
        v54 = v29 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v55 = *(v53 - 1);
          *(v53 - 3) = *(v53 - 4);
          *v53 = v55;
          v53 += 6;
          v54 -= 2;
        }
        while (v54);
        if (v29 == v30)
          goto LABEL_44;
      }
      else
      {
        v30 = 0;
      }
      v56 = (_QWORD *)(v27 + 24 * v30 + 8);
      v57 = v29 - v30;
      do
      {
        *v56 = *(v56 - 1);
        v56 += 3;
        --v57;
      }
      while (v57);
LABEL_44:
      v59 = *(_DWORD **)a7;
      v58 = *(_QWORD *)(a7 + 8);
      p_p = (void **)(a1 + 352);
      v60 = v58 - *(_QWORD *)a7;
      if (v58 == *(_QWORD *)a7)
        goto LABEL_213;
      if (v60 < 5)
      {
        v240 = v26;
        if (v60 != 4)
          goto LABEL_212;
        v133 = operator new(4uLL);
        *v133 = *v59;
        v62 = (char *)(v133 + 1);
        v134 = v133;
        if (*v133 != -1)
          goto LABEL_145;
LABEL_184:
        v169 = *(_QWORD *)(a1 + 544);
        v170 = *(_QWORD *)(a1 + 536);
        if (v169 == v170)
        {
LABEL_211:
          operator delete(v134);
          goto LABEL_212;
        }
        v171 = 0;
        v231 = v134;
        while (2)
        {
          v173 = *(_QWORD *)(v170 + 24 * v171);
          v174 = *(_QWORD *)(v170 + 24 * v171++ + 8);
          if (v174 == v173)
            goto LABEL_188;
          v175 = (char *)v234;
          if (v234 < (int *)v235)
          {
            *v234 = v171;
            v172 = (uint64_t)(v175 + 4);
            goto LABEL_187;
          }
          v176 = (char *)__p;
          v177 = (char *)v234 - (_BYTE *)__p;
          v178 = ((char *)v234 - (_BYTE *)__p) >> 2;
          v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) >> 62)
            sub_19C07DA0C();
          v180 = v235 - (_BYTE *)__p;
          if ((v235 - (_BYTE *)__p) >> 1 > v179)
            v179 = v180 >> 1;
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL)
            v181 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v181 = v179;
          if (v181)
          {
            v225 = (char *)v234 - (_BYTE *)__p;
            if (v181 >> 62)
              sub_19C07C7FC();
            v182 = ((char *)v234 - (_BYTE *)__p) >> 2;
            v183 = v170;
            v184 = v181;
            v185 = (char *)operator new(4 * v181);
            v170 = v183;
            v181 = v184;
            v178 = v182;
            v177 = v225;
            v186 = &v185[4 * v182];
            *(_DWORD *)v186 = v171;
            v172 = (uint64_t)(v186 + 4);
            if (v175 != v176)
            {
LABEL_200:
              v187 = v175 - 4 - v176;
              if (v187 < 0x2C)
              {
                v134 = v231;
                goto LABEL_208;
              }
              v134 = v231;
              if ((unint64_t)(v175 - &v185[v177]) < 0x20)
                goto LABEL_260;
              v188 = (v187 >> 2) + 1;
              v189 = 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
              v190 = &v175[-v189];
              v186 -= v189;
              v191 = &v185[4 * v178 - 16];
              v192 = v175 - 16;
              v193 = v188 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v194 = *(_OWORD *)v192;
                *((_OWORD *)v191 - 1) = *((_OWORD *)v192 - 1);
                *(_OWORD *)v191 = v194;
                v191 -= 32;
                v192 -= 32;
                v193 -= 8;
              }
              while (v193);
              v175 = v190;
              if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_260:
                do
                {
LABEL_208:
                  v195 = *((_DWORD *)v175 - 1);
                  v175 -= 4;
                  *((_DWORD *)v186 - 1) = v195;
                  v186 -= 4;
                }
                while (v175 != v176);
              }
LABEL_209:
              __p = v186;
              v234 = (int *)v172;
              v235 = &v185[4 * v181];
              if (v176)
              {
                operator delete(v176);
                v169 = *(_QWORD *)(a1 + 544);
                v170 = *(_QWORD *)(a1 + 536);
              }
LABEL_187:
              v234 = (int *)v172;
LABEL_188:
              if (0xAAAAAAAAAAAAAAABLL * ((v169 - v170) >> 3) <= v171)
                goto LABEL_171;
              continue;
            }
          }
          else
          {
            v185 = 0;
            v186 = (char *)(4 * v178);
            *(_DWORD *)(4 * v178) = v171;
            v172 = 4 * v178 + 4;
            if (v175 != v176)
              goto LABEL_200;
          }
          break;
        }
        v134 = v231;
        goto LABEL_209;
      }
      v61 = operator new(4uLL);
      v229 = v61;
      *v61 = *v59;
      v62 = (char *)(v61 + 1);
      if (v59[1] != -1)
        sub_19C2210D4(900);
      if (v60 < 9)
      {
        v134 = v61;
        if (*v61 == -1)
          goto LABEL_184;
        goto LABEL_145;
      }
      v63 = 2;
      v224 = (char *)(v61 + 1);
      do
      {
        v65 = (int)v59[v63];
        v66 = *(_QWORD *)(a1 + 496);
        v67 = *(_QWORD *)(v66 + 104);
        if (*v59 != -1)
        {
          if (v67)
          {
            v68 = *(_DWORD *)(v67 + 8 * (_DWORD)v65 + 4);
            v70 = v240;
            v69 = v241;
            if (v240 >= (int *)v241)
              goto LABEL_74;
LABEL_49:
            *v70 = v68;
            v64 = (uint64_t)(v70 + 1);
LABEL_50:
            v240 = (int *)v64;
            goto LABEL_51;
          }
          v81 = *(_QWORD *)(v66 + 88);
          v79 = v66 + 88;
          v80 = v81;
          if (!v81)
            goto LABEL_73;
          v82 = v79;
          do
          {
            v83 = *(_DWORD *)(v80 + 28);
            v84 = v83 < (int)v65;
            if (v83 >= (int)v65)
              v85 = (uint64_t *)v80;
            else
              v85 = (uint64_t *)(v80 + 8);
            if (!v84)
              v82 = v80;
            v80 = *v85;
          }
          while (*v85);
          if (v82 == v79 || *(_DWORD *)(v82 + 28) > (int)v65)
          {
LABEL_73:
            v68 = -1;
            v70 = v240;
            v69 = v241;
            if (v240 >= (int *)v241)
              goto LABEL_74;
            goto LABEL_49;
          }
          v68 = *(_DWORD *)(v82 + 32);
          v70 = v240;
          v69 = v241;
          if (v240 < (int *)v241)
            goto LABEL_49;
LABEL_74:
          v86 = v239;
          v87 = v70 - v239;
          v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62)
            sub_19C07DA0C();
          v89 = v69 - (char *)v239;
          if (v89 >> 1 > v88)
            v88 = v89 >> 1;
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
            v90 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v90 = v88;
          if (v90)
          {
            if (v90 >> 62)
              sub_19C07C7FC();
            v91 = v90;
            v92 = operator new(4 * v90);
            v90 = v91;
            v93 = (int *)&v92[4 * v87];
            *v93 = v68;
            v64 = (uint64_t)(v93 + 1);
            if (v70 != v86)
            {
LABEL_83:
              v94 = (char *)(v70 - 1) - (char *)v86;
              if (v94 < 0x2C)
              {
                v62 = v224;
                goto LABEL_93;
              }
              v62 = v224;
              if ((unint64_t)((char *)v86 - v92) < 0x20)
                goto LABEL_261;
              v95 = (v94 >> 2) + 1;
              v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
              v97 = &v70[v96 / 0xFFFFFFFFFFFFFFFCLL];
              v93 = (int *)((char *)v93 - v96);
              v98 = &v92[4 * v87 - 16];
              v99 = v70 - 4;
              v100 = v95 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v101 = *(_OWORD *)v99;
                *(v98 - 1) = *((_OWORD *)v99 - 1);
                *v98 = v101;
                v98 -= 2;
                v99 -= 8;
                v100 -= 8;
              }
              while (v100);
              v70 = v97;
              if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_261:
                do
                {
LABEL_93:
                  v102 = *--v70;
                  *--v93 = v102;
                }
                while (v70 != v86);
              }
LABEL_94:
              v239 = v93;
              v240 = (int *)v64;
              v241 = &v92[4 * v90];
              if (v86)
                operator delete(v86);
              goto LABEL_50;
            }
          }
          else
          {
            v92 = 0;
            v93 = (int *)(4 * v87);
            *(_DWORD *)(4 * v87) = v68;
            v64 = 4 * v87 + 4;
            if (v70 != v86)
              goto LABEL_83;
          }
          v62 = v224;
          goto LABEL_94;
        }
        if (v67)
        {
          if ((int)v65 >= *(_DWORD *)(v66 + 112))
            goto LABEL_86;
        }
        else if ((int)v65 >= *(_DWORD *)(v66 + 96))
        {
LABEL_86:
          fprintf((FILE *)*MEMORY[0x1E0C80C20], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v59[v63]);
          goto LABEL_51;
        }
        v71 = *(_QWORD *)(v66 + 64);
        if (v71)
        {
          v72 = *(_DWORD *)(v71 + 8 * v65 + 4);
          if (v67)
            goto LABEL_60;
        }
        else
        {
          v103 = *(_QWORD *)(v66 + 48);
          if (!v103)
            goto LABEL_106;
          v104 = v66 + 48;
          do
          {
            v105 = *(_DWORD *)(v103 + 28);
            v106 = v105 < (int)v65;
            if (v105 >= (int)v65)
              v107 = (uint64_t *)v103;
            else
              v107 = (uint64_t *)(v103 + 8);
            if (!v106)
              v104 = v103;
            v103 = *v107;
          }
          while (*v107);
          if (v104 != v66 + 48 && *(_DWORD *)(v104 + 28) <= (int)v65)
          {
            v72 = *(_DWORD *)(v104 + 32);
            if (v67)
            {
LABEL_60:
              v73 = (int *)(v67 + 8 * v65 + 4);
              goto LABEL_61;
            }
          }
          else
          {
LABEL_106:
            v72 = -1;
            if (v67)
              goto LABEL_60;
          }
        }
        v110 = *(_QWORD *)(v66 + 88);
        v108 = v66 + 88;
        v109 = v110;
        if (v110)
        {
          v111 = v108;
          do
          {
            v112 = *(_DWORD *)(v109 + 28);
            v113 = v112 < (int)v65;
            if (v112 >= (int)v65)
              v114 = (uint64_t *)v109;
            else
              v114 = (uint64_t *)(v109 + 8);
            if (!v113)
              v111 = v109;
            v109 = *v114;
          }
          while (*v114);
          if (v111 != v108 && *(_DWORD *)(v111 + 28) <= (int)v65)
          {
            v73 = (int *)(v111 + 32);
LABEL_61:
            v74 = *v73;
            v75 = *(_QWORD *)(a1 + 536) + 24 * v72;
            v77 = *(char **)(v75 + 8);
            v76 = *(_QWORD *)(v75 + 16);
            if ((unint64_t)v77 >= v76)
              goto LABEL_118;
            goto LABEL_62;
          }
        }
        v74 = -1;
        v75 = *(_QWORD *)(a1 + 536) + 24 * v72;
        v77 = *(char **)(v75 + 8);
        v76 = *(_QWORD *)(v75 + 16);
        if ((unint64_t)v77 >= v76)
        {
LABEL_118:
          v115 = *(char **)v75;
          v116 = (uint64_t)&v77[-*(_QWORD *)v75];
          v117 = v116 >> 2;
          v118 = (v116 >> 2) + 1;
          if (v118 >> 62)
            sub_19C07DA0C();
          v119 = v76 - (_QWORD)v115;
          if (v119 >> 1 > v118)
            v118 = v119 >> 1;
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
            v120 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v120 = v118;
          if (v120)
          {
            v222 = &v77[-*(_QWORD *)v75];
            if (v120 >> 62)
              sub_19C07C7FC();
            v121 = v120;
            v122 = operator new(4 * v120);
            v120 = v121;
            v116 = (uint64_t)v222;
            v123 = (int *)&v122[4 * v117];
            *v123 = v74;
            v78 = (uint64_t)(v123 + 1);
            if (v77 == v115)
              goto LABEL_137;
LABEL_131:
            v124 = v77 - 4 - v115;
            if (v124 < 0x2C)
              goto LABEL_262;
            if ((unint64_t)(v77 - &v122[v116]) < 0x20)
              goto LABEL_262;
            v125 = (v124 >> 2) + 1;
            v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
            v127 = &v77[-v126];
            v123 = (int *)((char *)v123 - v126);
            v128 = &v122[4 * v117 - 16];
            v129 = v77 - 16;
            v130 = v125 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v131 = *(_OWORD *)v129;
              *(v128 - 1) = *((_OWORD *)v129 - 1);
              *v128 = v131;
              v128 -= 2;
              v129 -= 32;
              v130 -= 8;
            }
            while (v130);
            v77 = v127;
            if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_262:
              do
              {
                v132 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *--v123 = v132;
              }
              while (v77 != v115);
            }
          }
          else
          {
            v122 = 0;
            v123 = (int *)(4 * v117);
            *(_DWORD *)(4 * v117) = v74;
            v78 = 4 * v117 + 4;
            if (v77 != v115)
              goto LABEL_131;
          }
LABEL_137:
          *(_QWORD *)v75 = v123;
          *(_QWORD *)(v75 + 8) = v78;
          *(_QWORD *)(v75 + 16) = &v122[4 * v120];
          if (v115)
            operator delete(v115);
          goto LABEL_139;
        }
LABEL_62:
        *(_DWORD *)v77 = v74;
        v78 = (uint64_t)(v77 + 4);
LABEL_139:
        *(_QWORD *)(v75 + 8) = v78;
        v62 = v224;
LABEL_51:
        ++v63;
        v59 = *(_DWORD **)a7;
      }
      while (v63 < (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2);
      v134 = v229;
      if (*v229 == -1)
        goto LABEL_184;
LABEL_145:
      v135 = 0;
      while (1)
      {
LABEL_147:
        v136 = v134[v135];
        if ((v136 & 0x80000000) != 0
          || (v137 = v136 + 1,
              (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3 <= (unint64_t)(v136 + 1)))
        {
          sub_19C2210D4(45);
        }
        v138 = v234;
        if (v234 >= (int *)v235)
          break;
        *v234 = v137;
        v234 = v138 + 1;
        if (++v135 >= (unint64_t)((v62 - (char *)v134) >> 2))
          goto LABEL_171;
      }
      v139 = v62;
      v230 = v134;
      v140 = (int *)__p;
      v141 = (char *)v234 - (_BYTE *)__p;
      v142 = ((char *)v234 - (_BYTE *)__p) >> 2;
      v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 62)
        sub_19C07DA0C();
      v144 = v235 - (_BYTE *)__p;
      if ((v235 - (_BYTE *)__p) >> 1 > v143)
        v143 = v144 >> 1;
      if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
        v145 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v145 = v143;
      if (!v145)
      {
        v147 = 0;
        v148 = (char *)(4 * v142);
        *(_DWORD *)(4 * v142) = v137;
        v149 = 4 * v142 + 4;
        if (v138 != v140)
          goto LABEL_159;
LABEL_162:
        v62 = v139;
        a7 = v223;
        goto LABEL_168;
      }
      if (v145 >> 62)
        sub_19C07C7FC();
      v146 = v145;
      v147 = (char *)operator new(4 * v145);
      v145 = v146;
      v148 = &v147[4 * v142];
      *(_DWORD *)v148 = v137;
      v149 = (uint64_t)(v148 + 4);
      if (v138 == v140)
        goto LABEL_162;
LABEL_159:
      v150 = (char *)(v138 - 1) - (char *)v140;
      if (v150 < 0x2C)
      {
        v62 = v139;
        a7 = v223;
        goto LABEL_167;
      }
      v151 = (char *)v138 - &v147[v141];
      v62 = v139;
      a7 = v223;
      if (v151 < 0x20)
        goto LABEL_263;
      v152 = (v150 >> 2) + 1;
      v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
      v154 = &v138[v153 / 0xFFFFFFFFFFFFFFFCLL];
      v148 -= v153;
      v155 = &v147[4 * v142 - 16];
      v156 = (__int128 *)(v138 - 4);
      v157 = v152 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v158 = *v156;
        *((_OWORD *)v155 - 1) = *(v156 - 1);
        *(_OWORD *)v155 = v158;
        v155 -= 32;
        v156 -= 2;
        v157 -= 8;
      }
      while (v157);
      v138 = v154;
      if (v152 != (v152 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_263:
        do
        {
LABEL_167:
          v159 = *--v138;
          *((_DWORD *)v148 - 1) = v159;
          v148 -= 4;
        }
        while (v138 != v140);
      }
LABEL_168:
      __p = v148;
      v234 = (int *)v149;
      v235 = &v147[4 * v145];
      if (v140)
        operator delete(v140);
      v134 = v230;
      v234 = (int *)v149;
      if (++v135 < (unint64_t)((v62 - (char *)v230) >> 2))
        goto LABEL_147;
LABEL_171:
      if (v134)
        goto LABEL_211;
LABEL_212:
      p_p = &__p;
LABEL_213:
      bzero(*(void **)(*(_QWORD *)(a1 + 104) + 8 * v17), 4 * *(int *)(a1 + 348));
      v196 = (int *)*p_p;
      a2 = v226;
      a3 = v227;
      if (p_p[1] != *p_p)
      {
        v197 = 0;
        while (1)
        {
          v198 = v196[v197];
          v199 = *(_QWORD *)(a1 + 304);
          if (!*(_DWORD *)(v199 + 4 * v198))
          {
            *(_DWORD *)(v199 + 4 * v198) = 1;
            v200 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v198);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v200 + 256))(v200, v228);
          }
          v201 = *(_QWORD *)(a7 + 8) != *(_QWORD *)a7 && **(_DWORD **)a7 == -1
               ? (void **)(*(_QWORD *)(a1 + 536) + 24 * (int)v198 - 24)
               : (void **)&v239;
          v202 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v198);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v202 + 224))(v202, v226, v227, v17, v201);
          v203 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v198);
          v204 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v203 + 32))(v203);
          v205 = *(_QWORD *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2)
            break;
          v206 = *(unsigned int *)(v205 + 4 * v198);
          if ((int)v206 >= 1)
          {
            v207 = *(float *)(*(_QWORD *)(*v232 + 8 * v17) + 4 * v198 - 4);
            v208 = *(float32x4_t **)(*v204 + 8 * v17);
            if (v206 < 8)
            {
              v209 = 0;
              goto LABEL_230;
            }
            v209 = v206 & 0x7FFFFFF8;
            v210 = v208 + 1;
            v211 = v206 & 0xFFFFFFF8;
            do
            {
              v212 = vmulq_n_f32(*v210, v207);
              v210[-1] = vmulq_n_f32(v210[-1], v207);
              *v210 = v212;
              v210 += 2;
              v211 -= 8;
            }
            while (v211);
            if (v209 != v206)
            {
LABEL_230:
              v213 = v206 - v209;
              v214 = &v208->f32[v209];
              do
              {
                *v214 = *v214 * v207;
                ++v214;
                --v213;
              }
              while (v213);
            }
LABEL_232:
            if ((int)v206 >= 1)
            {
              v215 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 496) + 120) + 24 * (int)v198 - 24);
              v216 = *(_DWORD **)(*v204 + 8 * v17);
              v217 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v17);
              do
              {
                v219 = *v215++;
                v218 = v219;
                LODWORD(v219) = *v216++;
                *(_DWORD *)(v217 + 4 * v218) = v219;
                --v206;
              }
              while (v206);
            }
          }
          ++v197;
          v196 = (int *)*p_p;
          if (v197 >= ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 2)
            goto LABEL_236;
        }
        v206 = *(unsigned int *)(v205 + 4 * v198);
        goto LABEL_232;
      }
LABEL_236:
      v220 = *(_QWORD *)(a1 + 104);
      v221 = *(int *)(a1 + 348);
      __C[0] = 0.0;
      vDSP_sve(*(const float **)(v220 + 8 * v17), 1, __C, v221);
      if (__p)
      {
        v234 = (int *)__p;
        operator delete(__p);
      }
      if (v236)
      {
        v237 = v236;
        operator delete(v236);
      }
      ++v17;
    }
    while (v17 != v228);
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
}

void sub_19C164C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 120);
  if (!v26)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v24 - 112) = v26;
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

void *sub_19C164D68(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  void *result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CEC8, 0);
  if (!result)
    __cxa_bad_cast();
  v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = (uint64_t)result;
    v12 = 0;
    do
    {
      if (*(int *)(*(_QWORD *)(v11 + 304) + 4 * v12) >= 1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v12);
        result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, float, float))(*(_QWORD *)v14 + 336))(v14, *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v12), a3, a4, a5);
        v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

uint64_t sub_19C164E2C(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 >= 1)
  {
    v19 = v6;
    v20 = v7;
    v10 = result;
    v11 = 0;
    v12 = a4;
    do
    {
      v18 = 0;
      v13 = *(int *)(v10 + 332);
      v14 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v14 + 240))(v14, *(_QWORD *)(v10 + 200) + 24 * v13, *(_QWORD *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      v17 = 0;
      v15 = *(int *)(*(_QWORD *)(v10 + 400) + 4 * v11);
      v16 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v15);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v16 + 240))(v16, *(_QWORD *)(v10 + 200) + 24 * (int)v15, *(_QWORD *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1)
        ++*a5;
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

float sub_19C164F34(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v13;

  v13 = 0;
  if (a3 < 1)
    return 0.0;
  v4 = 0;
  v5 = a3;
  v6 = 0.0;
  do
  {
    v7 = *(int *)(a1 + 332);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v8 + 232))(v8, *(_QWORD *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    v9 = *(int *)(*(_QWORD *)(a1 + 400) + 4 * v4);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 232))(v10, *(_QWORD *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2)
      v11 = -0.0;
    v6 = (float)(*(float *)&v13 + v6) + v11;
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

void sub_19C165014(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C165028(a1);
  operator delete(v1);
}

_QWORD *sub_19C165028(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  *a1 = &unk_1E3D1EBC8;
  v3 = a1[35];
  v2 = a1[36];
  if (v2 == v3)
  {
    v3 = a1[36];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(v3 + 8 * v4);
      if (*v5)
      {
        operator delete[](*v5);
        *v5 = 0;
        v3 = a1[35];
        v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  v6 = a1[67];
  if (v6)
  {
    v7 = a1[68];
    v8 = (void *)a1[67];
    if (v7 != v6)
    {
      v9 = a1[68];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v7 - 16) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = (void *)a1[67];
    }
    a1[68] = v6;
    operator delete(v8);
  }
  v12 = (void *)a1[63];
  if (v12)
  {
    a1[64] = v12;
    operator delete(v12);
  }
  v13 = a1[59];
  if (v13)
  {
    v14 = a1[60];
    v15 = (void *)a1[59];
    if (v14 != v13)
    {
      v16 = a1[60];
      do
      {
        v18 = *(void **)(v16 - 24);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *(_QWORD *)(v14 - 16) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = (void *)a1[59];
    }
    a1[60] = v13;
    operator delete(v15);
  }
  v19 = (void *)a1[56];
  if (v19)
  {
    a1[57] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[53];
  if (v20)
  {
    a1[54] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[50];
  if (v21)
  {
    a1[51] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[47];
  if (v22)
  {
    a1[48] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[44];
  if (v23)
  {
    a1[45] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[38];
  if (v24)
  {
    a1[39] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[35];
  if (v25)
  {
    a1[36] = v25;
    operator delete(v25);
  }
  return sub_19C10850C(a1);
}

uint64_t sub_19C1651C0(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, char a9)
{
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;

  v21 = 0;
  v17 = atomic_load((unsigned __int8 *)&qword_1EE419170);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419170))
  {
    qword_1EE419158 = 0;
    unk_1EE419160 = 0;
    qword_1EE419168 = 0;
    __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419158, &dword_19C079000);
    __cxa_guard_release(&qword_1EE419170);
  }
  (*(void (**)(float *, uint64_t, uint64_t, uint64_t, _QWORD, int *, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a5, 0, &v21, &qword_1EE419158);
  v18 = (*(uint64_t (**)(float *))(*(_QWORD *)a1 + 40))(a1);
  (*(void (**)(float *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, a4, v18, a5, a6, a8);
  *a7 = (*(float (**)(float *, uint64_t, uint64_t))(*(_QWORD *)a1 + 352))(a1, a4, a5);
  v19 = (*(uint64_t (**)(float *))(*(_QWORD *)a1 + 40))(a1);
  result = (*(uint64_t (**)(float *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(a1, a2, a3, v19, a5);
  if ((a9 & 1) == 0)
    return (*(uint64_t (**)(float *, float, float))(*(_QWORD *)a1 + 288))(a1, a1[8], a1[9]);
  return result;
}

void sub_19C165340(uint64_t a1, FILE *a2, _DWORD *a3)
{
  unsigned int *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  _DWORD *v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  float *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t *v37;
  uint64_t v38;
  float *v39;
  int32x4_t v40;
  const float *v41;
  int32x4_t v42;
  int32x4_t v43;
  uint64_t v44;
  const float *v45;
  unsigned __int128 v46;
  float *v47;
  int *v48;
  float *v49;
  int v50;
  int v51;
  float *v52;
  float *v53;
  uint64_t v54;
  unsigned int v55;
  int *v56;
  uint64_t v57;
  int v58;
  int i;
  uint64_t v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t v78;
  float *v79;
  int32x4_t v80;
  const float *v81;
  int32x4_t v82;
  int32x4_t v83;
  uint64_t v84;
  const float *v85;
  unsigned __int128 v86;
  float *v87;
  float *v88;
  int *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int32x4_t v95;
  float *v96;
  int32x4_t v97;
  __int128 v98;
  int32x4_t v99;
  uint64_t v100;
  int32x4_t v101;
  __int128 v102;
  float *v103;
  float *v104;
  int32x4_t v105;
  float *v106;
  int32x4_t v107;
  __int128 v108;
  int32x4_t v109;
  uint64_t v110;
  int32x4_t v111;
  __int128 v112;
  float *v113;
  float *v114;
  int v115;
  int __ptr;
  float32x4x2_t v117;
  float32x4x2_t v118;

  v6 = (unsigned int *)(a1 + 8);
  v7 = operator new[]();
  v8 = (void *)v7;
  v9 = *v6;
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 16);
    if (v9 < 8)
      goto LABEL_7;
    if ((unint64_t)(v7 - v11) < 0x20)
      goto LABEL_7;
    v10 = v9 & 0x7FFFFFF8;
    v12 = (__int128 *)(v11 + 16);
    v13 = (_OWORD *)(v7 + 16);
    v14 = v9 & 0xFFFFFFF8;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    if (v10 != v9)
    {
LABEL_7:
      v16 = (_DWORD *)(v7 + 4 * v10);
      v17 = (int *)(v11 + 4 * v10);
      v18 = v9 - v10;
      do
      {
        v19 = *v17++;
        *v16++ = v19;
        --v18;
      }
      while (v18);
    }
  }
  fwrite(v6, 4uLL, 1uLL, a2);
  *a3 += 4;
  fwrite(v8, 4uLL, *(int *)(a1 + 8), a2);
  *a3 += 4 * *(_DWORD *)(a1 + 8);
  operator delete[](v8);
  if (*(_QWORD *)(a1 + 64))
    v20 = *(_DWORD *)(a1 + 72);
  else
    v20 = *(_DWORD *)(a1 + 56);
  __ptr = v20;
  fwrite(&__ptr, 4uLL, 1uLL, a2);
  *a3 += 4;
  v21 = (float *)operator new[]();
  v22 = v21;
  v23 = *(_QWORD *)(a1 + 64);
  if (v23)
  {
    v24 = *(unsigned int *)(a1 + 72);
    if ((int)v24 >= 1)
    {
      if (v24 > 8
        && ((unint64_t)v21 >= v23 + 8 * v24 || v23 + 4 >= (unint64_t)&v21[2 * v24]))
      {
        v38 = v24 & 7;
        if ((v24 & 7) == 0)
          v38 = 8;
        v25 = v24 - v38;
        v26 = 2 * v25;
        v39 = v21 + 8;
        v40 = (int32x4_t)xmmword_19C276E70;
        v41 = (const float *)(v23 + 36);
        v42.i64[0] = 0x400000004;
        v42.i64[1] = 0x400000004;
        v43.i64[0] = 0x800000008;
        v43.i64[1] = 0x800000008;
        v44 = v25;
        do
        {
          v117.val[0] = (float32x4_t)vaddq_s32(v40, v42);
          v117.val[1] = (float32x4_t)vld2q_f32(v41);
          v45 = v41 - 8;
          v46 = (unsigned __int128)vld2q_f32(v45);
          v47 = v39 - 8;
          vst2q_f32(v47, *(float32x4x2_t *)v40.i8);
          vst2q_f32(v39, v117);
          v40 = vaddq_s32(v40, v43);
          v39 += 16;
          v41 += 16;
          v44 -= 8;
        }
        while (v44);
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
      v48 = (int *)(v23 + 8 * v25 + 4);
      v49 = &v21[v26 + 1];
      do
      {
        v50 = *v48;
        v48 += 2;
        *((_DWORD *)v49 - 1) = v25;
        *(_DWORD *)v49 = v50;
        ++v25;
        v49 += 2;
      }
      while (v24 != v25);
    }
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 56);
    if ((int)v27 >= 1)
    {
      v28 = *(_QWORD *)(a1 + 48);
      if (v28)
      {
        v29 = 0;
        v30 = 0.0;
        do
        {
          v33 = a1 + 48;
          v34 = v28;
          do
          {
            v35 = *(_DWORD *)(v34 + 28);
            v36 = v35 < SLODWORD(v30);
            if (v35 >= SLODWORD(v30))
              v37 = (uint64_t *)v34;
            else
              v37 = (uint64_t *)(v34 + 8);
            if (!v36)
              v33 = v34;
            v34 = *v37;
          }
          while (*v37);
          if (v33 == a1 + 48 || *(_DWORD *)(v33 + 28) > SLODWORD(v30))
            v31 = -1;
          else
            v31 = *(_DWORD *)(v33 + 32);
          v32 = v29;
          v21[v32] = v30;
          v29 += 2;
          LODWORD(v21[v32 + 1]) = v31;
          ++LODWORD(v30);
        }
        while (LODWORD(v30) != (_DWORD)v27);
      }
      else
      {
        if (*(_QWORD *)(a1 + 56) >= 8uLL)
        {
          v92 = *(_QWORD *)(a1 + 56) & 0xFFFFFFF8;
          v91 = 2 * v92;
          v95 = (int32x4_t)xmmword_19C276E70;
          v96 = v21 + 8;
          v97.i64[0] = 0x400000004;
          v97.i64[1] = 0x400000004;
          *(_QWORD *)&v98 = -1;
          *((_QWORD *)&v98 + 1) = -1;
          v99.i64[0] = 0x800000008;
          v99.i64[1] = 0x800000008;
          v100 = v92;
          do
          {
            v101 = vaddq_s32(v95, v97);
            v102 = v98;
            v103 = v96 - 8;
            vst2q_f32(v103, *(float32x4x2_t *)v95.i8);
            vst2q_f32(v96, *(float32x4x2_t *)(&v98 - 1));
            v95 = vaddq_s32(v95, v99);
            v96 += 16;
            v100 -= 8;
          }
          while (v100);
          if ((v27 & 7) == 0)
            goto LABEL_39;
        }
        else
        {
          v91 = 0;
          LODWORD(v92) = 0;
        }
        v104 = &v21[v91 + 1];
        do
        {
          *((_DWORD *)v104 - 1) = v92;
          *v104 = NAN;
          LODWORD(v92) = v92 + 1;
          v104 += 2;
        }
        while ((_DWORD)v27 != (_DWORD)v92);
      }
    }
  }
LABEL_39:
  fwrite(v21, 4uLL, 2 * __ptr, a2);
  *a3 += 8 * __ptr;
  operator delete[](v22);
  if (*(_QWORD *)(a1 + 104))
    v51 = *(_DWORD *)(a1 + 112);
  else
    v51 = *(_DWORD *)(a1 + 96);
  v115 = v51;
  fwrite(&v115, 4uLL, 1uLL, a2);
  *a3 += 4;
  v52 = (float *)operator new[]();
  v53 = v52;
  v54 = *(_QWORD *)(a1 + 104);
  if (v54)
  {
    v55 = *(_DWORD *)(a1 + 112);
    if ((int)v55 >= 1)
    {
      v56 = (int *)(v54 + 4);
      v57 = *(unsigned int *)(a1 + 112);
      while (1)
      {
        v58 = *v56;
        v56 += 2;
        if (v58 == -1)
          break;
        if (!--v57)
          goto LABEL_62;
      }
LABEL_104:
      sub_19C2210D4(56);
    }
  }
  else
  {
    v55 = *(_DWORD *)(a1 + 96);
    if ((int)v55 <= 0)
      goto LABEL_87;
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_104;
    for (i = 0; i != v55; ++i)
    {
      v60 = a1 + 88;
      v61 = *(_QWORD *)(a1 + 88);
      do
      {
        v62 = *(_DWORD *)(v61 + 28);
        v63 = v62 < i;
        if (v62 >= i)
          v64 = (uint64_t *)v61;
        else
          v64 = (uint64_t *)(v61 + 8);
        if (!v63)
          v60 = v61;
        v61 = *v64;
      }
      while (*v64);
      if (v60 == a1 + 88 || *(_DWORD *)(v60 + 28) > i || *(_DWORD *)(v60 + 32) == -1)
        goto LABEL_104;
    }
LABEL_62:
    if (v54)
    {
      v65 = v55;
      if (v55 > 8
        && ((unint64_t)v52 >= v54 + 8 * (unint64_t)v55 || v54 + 4 >= (unint64_t)&v52[2 * v55]))
      {
        v78 = v55 & 7;
        if ((v65 & 7) == 0)
          v78 = 8;
        v67 = v65 - v78;
        v66 = 2 * v67;
        v79 = v52 + 8;
        v80 = (int32x4_t)xmmword_19C276E70;
        v81 = (const float *)(v54 + 36);
        v82.i64[0] = 0x400000004;
        v82.i64[1] = 0x400000004;
        v83.i64[0] = 0x800000008;
        v83.i64[1] = 0x800000008;
        v84 = v67;
        do
        {
          v118.val[0] = (float32x4_t)vaddq_s32(v80, v82);
          v118.val[1] = (float32x4_t)vld2q_f32(v81);
          v85 = v81 - 8;
          v86 = (unsigned __int128)vld2q_f32(v85);
          v87 = v79 - 8;
          vst2q_f32(v87, *(float32x4x2_t *)v80.i8);
          vst2q_f32(v79, v118);
          v80 = vaddq_s32(v80, v83);
          v79 += 16;
          v81 += 16;
          v84 -= 8;
        }
        while (v84);
      }
      else
      {
        v66 = 0;
        v67 = 0;
      }
      v88 = &v52[v66 + 1];
      v89 = (int *)(v54 + 8 * v67 + 4);
      do
      {
        v90 = *v89;
        v89 += 2;
        *((_DWORD *)v88 - 1) = v67;
        *(_DWORD *)v88 = v90;
        ++v67;
        v88 += 2;
      }
      while (v65 != v67);
    }
    else
    {
      v68 = *(_QWORD *)(a1 + 88);
      if (!v68)
      {
        if (v55 >= 8)
        {
          v94 = v55 & 0xFFFFFFF8;
          v93 = 2 * v94;
          v105 = (int32x4_t)xmmword_19C276E70;
          v106 = v52 + 8;
          v107.i64[0] = 0x400000004;
          v107.i64[1] = 0x400000004;
          *(_QWORD *)&v108 = -1;
          *((_QWORD *)&v108 + 1) = -1;
          v109.i64[0] = 0x800000008;
          v109.i64[1] = 0x800000008;
          v110 = v94;
          do
          {
            v111 = vaddq_s32(v105, v107);
            v112 = v108;
            v113 = v106 - 8;
            vst2q_f32(v113, *(float32x4x2_t *)v105.i8);
            vst2q_f32(v106, *(float32x4x2_t *)(&v108 - 1));
            v105 = vaddq_s32(v105, v109);
            v106 += 16;
            v110 -= 8;
          }
          while (v110);
          if (v94 == v55)
            goto LABEL_87;
        }
        else
        {
          v93 = 0;
          LODWORD(v94) = 0;
        }
        v114 = &v52[v93 + 1];
        do
        {
          *((_DWORD *)v114 - 1) = v94;
          *v114 = NAN;
          LODWORD(v94) = v94 + 1;
          v114 += 2;
        }
        while (v55 != (_DWORD)v94);
        goto LABEL_87;
      }
      v69 = 0;
      v70 = 0.0;
      do
      {
        v73 = a1 + 88;
        v74 = v68;
        do
        {
          v75 = *(_DWORD *)(v74 + 28);
          v76 = v75 < SLODWORD(v70);
          if (v75 >= SLODWORD(v70))
            v77 = (uint64_t *)v74;
          else
            v77 = (uint64_t *)(v74 + 8);
          if (!v76)
            v73 = v74;
          v74 = *v77;
        }
        while (*v77);
        if (v73 == a1 + 88 || *(_DWORD *)(v73 + 28) > SLODWORD(v70))
          v71 = -1;
        else
          v71 = *(_DWORD *)(v73 + 32);
        v72 = v69;
        v52[v72] = v70;
        v69 += 2;
        LODWORD(v52[v72 + 1]) = v71;
        ++LODWORD(v70);
      }
      while (LODWORD(v70) != v55);
    }
  }
LABEL_87:
  fwrite(v52, 4uLL, 2 * v115, a2);
  *a3 += 8 * v115;
  operator delete[](v53);
}

void sub_19C1659E4(uint64_t a1, FILE *__stream, char a3)
{
  int *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  int *v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  int __ptr;
  int v57;

  *(_DWORD *)(a1 + 8) = -1;
  v6 = (int *)(a1 + 8);
  sub_19C2212D8(__stream, (int)"", (void *)(a1 + 8));
  sub_19C16681C((_QWORD *)a1, *v6);
  v7 = (void *)operator new[]();
  fread(v7, 4uLL, *v6, __stream);
  if (*v6 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 16);
    do
    {
      *(_DWORD *)(v9 + 4 * v8) = *((_DWORD *)v7 + v8);
      ++v8;
    }
    while (v8 < *v6);
  }
  operator delete[](v7);
  __ptr = -1;
  sub_19C2212D8(__stream, (int)"", &__ptr);
  v10 = (char *)operator new[]();
  fread(v10, 4uLL, 2 * __ptr, __stream);
  if (*(_QWORD *)(a1 + 64))
  {
    if ((a3 & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    sub_19C07C924(a1 + 40, *(_QWORD **)(a1 + 48));
    *(_QWORD *)(a1 + 40) = a1 + 48;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    if ((a3 & 1) != 0)
      goto LABEL_23;
  }
  v11 = __ptr;
  if (__ptr >= 1)
  {
    v12 = 0;
    v13 = (uint64_t **)(a1 + 48);
    do
    {
      if (*(_QWORD *)(a1 + 64))
        sub_19C2210D4(90);
      v17 = *(_QWORD *)&v10[4 * v12];
      v18 = *v13;
      v19 = (uint64_t **)(a1 + 48);
      v20 = (uint64_t **)(a1 + 48);
      if (*v13)
      {
        while (1)
        {
          while (1)
          {
            v20 = (uint64_t **)v18;
            v21 = *((_DWORD *)v18 + 7);
            if (v21 <= (int)v17)
              break;
            v18 = *v20;
            v19 = v20;
            if (!*v20)
              goto LABEL_10;
          }
          if (v21 >= (int)v17)
            break;
          v18 = v20[1];
          if (!v18)
          {
            v19 = v20 + 1;
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        v53 = *(_QWORD *)&v10[4 * v12];
        v14 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v14 + 28) = v53;
        *v14 = 0;
        v14[1] = 0;
        v14[2] = (uint64_t)v20;
        *v19 = v14;
        v15 = **(_QWORD **)(a1 + 40);
        if (v15)
        {
          *(_QWORD *)(a1 + 40) = v15;
          v16 = *v19;
        }
        else
        {
          v16 = v14;
        }
        sub_19C07CC40(*(uint64_t **)(a1 + 48), v16);
        ++*(_QWORD *)(a1 + 56);
        v11 = __ptr;
      }
      v12 += 2;
    }
    while (v12 < 2 * v11);
  }
LABEL_23:
  operator delete[](v10);
  v55 = -1;
  sub_19C2212D8(__stream, (int)"", &v55);
  v22 = (void *)operator new[]();
  fread(v22, 4uLL, 2 * v55, __stream);
  if (*(_QWORD *)(a1 + 104))
  {
    if ((a3 & 1) != 0)
    {
LABEL_25:
      operator delete[](v22);
      return;
    }
  }
  else
  {
    sub_19C07C924(a1 + 80, *(_QWORD **)(a1 + 88));
    *(_QWORD *)(a1 + 80) = a1 + 88;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    if ((a3 & 1) != 0)
      goto LABEL_25;
  }
  if (v55 >= 1)
  {
    v23 = 0;
    v24 = (uint64_t **)(a1 + 88);
    v54 = (uint64_t *)(a1 + 48);
    do
    {
      if (*(_QWORD *)(a1 + 104))
        sub_19C2210D4(91);
      v26 = *((_DWORD *)v22 + v23);
      v27 = *((_DWORD *)v22 + v23 + 1);
      v28 = *v24;
      v29 = (uint64_t **)(a1 + 88);
      v30 = (uint64_t **)(a1 + 88);
      if (*v24)
      {
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = *((_DWORD *)v28 + 7);
            if (v31 <= v26)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_39;
          }
          if (v31 >= v26)
            break;
          v28 = v30[1];
          if (!v28)
          {
            v29 = v30 + 1;
            goto LABEL_39;
          }
        }
      }
      else
      {
LABEL_39:
        v32 = operator new(0x28uLL);
        v32[7] = v26;
        v32[8] = v27;
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = v30;
        *v29 = (uint64_t *)v32;
        v33 = **(_QWORD **)(a1 + 80);
        if (v33)
        {
          *(_QWORD *)(a1 + 80) = v33;
          v34 = *v29;
        }
        else
        {
          v34 = (uint64_t *)v32;
        }
        sub_19C07CC40(*(uint64_t **)(a1 + 88), v34);
        ++*(_QWORD *)(a1 + 96);
      }
      v35 = *(_QWORD *)(a1 + 64);
      if (v35)
      {
        v36 = (int *)(v35 + 8 * v26 + 4);
      }
      else
      {
        v38 = a1 + 48;
        v39 = *v54;
        if (!*v54)
          goto LABEL_55;
        do
        {
          v40 = *(_DWORD *)(v39 + 28);
          v41 = v40 < v26;
          if (v40 >= v26)
            v42 = (uint64_t *)v39;
          else
            v42 = (uint64_t *)(v39 + 8);
          if (!v41)
            v38 = v39;
          v39 = *v42;
        }
        while (*v42);
        if ((uint64_t *)v38 == v54 || *(_DWORD *)(v38 + 28) > v26)
        {
LABEL_55:
          v37 = -1;
          goto LABEL_56;
        }
        v36 = (int *)(v38 + 32);
      }
      v37 = *v36;
LABEL_56:
      v43 = v27;
      v44 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 24 * v37);
      v57 = -1;
      v25 = *v44;
      v45 = (v44[1] - *v44) >> 2;
      if (v45 <= v43)
      {
        if (v43 + 1 > v45)
        {
          sub_19C16691C((uint64_t)v44, v43 + 1 - v45, (const float *)&v57);
          v25 = *v44;
        }
        else if (v43 + 1 < v45)
        {
          v44[1] = v25 + 4 * v43 + 4;
        }
      }
      *(_DWORD *)(v25 + 4 * v43) = v26;
      v23 += 2;
    }
    while (v23 < 2 * v55);
  }
  operator delete[](v22);
  v46 = *v6;
  if ((int)v46 >= 1)
  {
    v47 = 0;
    v48 = *(_QWORD *)(a1 + 120);
    do
    {
      v49 = *(_DWORD **)(v48 + 8 + 24 * v47);
      v50 = *(int **)(v48 + 24 * v47);
      v51 = v49 - v50;
      if (v51 != *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v47))
        sub_19C2210D4(23);
      if (v49 != v50)
      {
        if (v51 <= 1)
          v51 = 1;
        do
        {
          v52 = *v50++;
          if (v52 < 0)
            sub_19C2210D4(45);
          --v51;
        }
        while (v51);
      }
      ++v47;
    }
    while (v47 != v46);
  }
}

void sub_19C165EE8(uint64_t a1, uint64_t *a2)
{
  int *v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  int *v26;
  uint64_t v27;
  _BOOL4 v28;
  int v29;
  int v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  int v34;
  BOOL v35;
  uint64_t **v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  int *v49;
  int v50;
  unint64_t i;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t **v58;
  int v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  int *v68;
  uint64_t v69;
  _BOOL4 v70;
  int v71;
  int v72;
  int v73;
  uint64_t *v74;
  uint64_t **v75;
  int v76;
  BOOL v77;
  uint64_t **v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  _DWORD *v83;
  int *v84;
  int v85;
  unint64_t j;
  uint64_t v87;
  int *v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  uint64_t *v93;
  uint64_t *v94;
  int v95;
  BOOL v96;
  uint64_t **v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  _DWORD *v106;
  int *v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t *v113;
  uint64_t **v114;
  uint64_t **v115;
  int v116;
  _DWORD *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  int *v121;
  int v122;
  uint64_t *v123;
  uint64_t *v124;
  int v125;
  BOOL v126;
  uint64_t **v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  int *v135;
  unint64_t v136;
  int v137;
  uint64_t __pa;
  _DWORD *__p;
  int v140;
  int v141;

  *(_DWORD *)(a1 + 8) = -1;
  v4 = (int *)(*a2 + *((int *)a2 + 18));
  if ((unint64_t)v4 <= *a2 + a2[1] - 4)
  {
    v5 = *v4;
    *(_DWORD *)(a1 + 8) = *v4;
    *((_DWORD *)a2 + 18) += 4;
  }
  else
  {
    v5 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  sub_19C16681C((_QWORD *)a1, v5);
  v6 = (_DWORD *)operator new[]();
  if (*(int *)(a1 + 8) >= 1)
  {
    v7 = 0;
    v8 = *a2;
    v9 = *a2 + a2[1] - 4;
    v10 = *((_DWORD *)a2 + 18);
    do
    {
      v11 = (int *)(v8 + v10);
      if ((unint64_t)v11 > v9)
        goto LABEL_182;
      v12 = *v11;
      v10 += 4;
      *((_DWORD *)a2 + 18) = v10;
      v6[v7++] = v12;
      v13 = *(int *)(a1 + 8);
    }
    while (v7 < v13);
    if ((int)v13 >= 1)
    {
      v14 = 0;
      v15 = *(_QWORD *)(a1 + 16);
      do
      {
        *(_DWORD *)(v15 + 4 * v14) = v6[v14];
        ++v14;
      }
      while (v14 < *(int *)(a1 + 8));
    }
  }
  operator delete[](v6);
  v16 = *((int *)a2 + 18);
  v17 = (int *)(*a2 + v16);
  if ((unint64_t)v17 <= *a2 + a2[1] - 4)
  {
    v20 = *v17;
    *((_DWORD *)a2 + 18) = v16 + 4;
    v19 = 2 * v20;
    v18 = 2 * v20;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
  }
  v21 = operator new[]();
  v22 = (char *)v21;
  v23 = *a2;
  v24 = *((int *)a2 + 18);
  *(_DWORD *)(a1 + 72) = v20;
  v25 = (uint64_t **)(a1 + 48);
  v26 = (int *)(v23 + v24);
  *(_QWORD *)(a1 + 64) = v26;
  if (v26)
  {
    if (v20 < 1)
      goto LABEL_38;
    v27 = 0;
    LOBYTE(v28) = 1;
    do
    {
      while (v28)
      {
        v29 = *v26;
        v26 += 2;
        v28 = v27++ == v29;
        if (v20 == v27)
          goto LABEL_37;
      }
      v28 = 0;
      ++v27;
      v26 += 2;
    }
    while (v20 != v27);
  }
  else
  {
    v30 = *(_DWORD *)(a1 + 56);
    if (v30 < 1)
      goto LABEL_38;
    v31 = 0;
    LOBYTE(v28) = 1;
    do
    {
      while (!v28)
      {
        v28 = 0;
        if (++v31 == v30)
          goto LABEL_37;
      }
      v32 = *v25;
      if (!*v25)
        goto LABEL_35;
      v33 = (uint64_t **)(a1 + 48);
      do
      {
        v34 = *((_DWORD *)v32 + 7);
        v35 = v34 < v31;
        if (v34 >= v31)
          v36 = (uint64_t **)v32;
        else
          v36 = (uint64_t **)(v32 + 1);
        if (!v35)
          v33 = (uint64_t **)v32;
        v32 = *v36;
      }
      while (*v36);
      if (v33 == v25 || *((_DWORD *)v33 + 7) > v31)
LABEL_35:
        v33 = (uint64_t **)(a1 + 48);
      v28 = v33 != v25;
      ++v31;
    }
    while (v31 != v30);
  }
LABEL_37:
  if (!v28)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    if (v19 < 1)
      goto LABEL_54;
    v44 = *a2;
    v45 = *a2 + a2[1] - 4;
    v46 = *((_DWORD *)a2 + 18);
    v47 = v18 <= 1 ? 1 : v18;
    v48 = (_DWORD *)v21;
    do
    {
      v49 = (int *)(v44 + v46);
      if ((unint64_t)v49 > v45)
        goto LABEL_182;
      v50 = *v49;
      v46 += 4;
      *((_DWORD *)a2 + 18) = v46;
      *v48++ = v50;
      --v47;
    }
    while (v47);
    if (!*(_QWORD *)(a1 + 64))
    {
LABEL_54:
      sub_19C07C924(a1 + 40, *(_QWORD **)(a1 + 48));
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 40) = v25;
    }
    if (v19 >= 1)
    {
      for (i = 0; i < v19; i += 2)
      {
        if (*(_QWORD *)(a1 + 64))
          sub_19C2210D4(90);
        v55 = *(_QWORD *)&v22[4 * i];
        v56 = *v25;
        v57 = (uint64_t **)(a1 + 48);
        v58 = (uint64_t **)(a1 + 48);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              v58 = (uint64_t **)v56;
              v59 = *((_DWORD *)v56 + 7);
              if (v59 <= (int)v55)
                break;
              v56 = *v58;
              v57 = v58;
              if (!*v58)
                goto LABEL_57;
            }
            if (v59 >= (int)v55)
              break;
            v56 = v58[1];
            if (!v56)
            {
              v57 = v58 + 1;
              goto LABEL_57;
            }
          }
        }
        else
        {
LABEL_57:
          __pa = *(_QWORD *)&v22[4 * i];
          v52 = (uint64_t *)operator new(0x28uLL);
          *(uint64_t *)((char *)v52 + 28) = __pa;
          *v52 = 0;
          v52[1] = 0;
          v52[2] = (uint64_t)v58;
          *v57 = v52;
          v53 = **(_QWORD **)(a1 + 40);
          if (v53)
          {
            *(_QWORD *)(a1 + 40) = v53;
            v54 = *v57;
          }
          else
          {
            v54 = v52;
          }
          sub_19C07CC40(*(uint64_t **)(a1 + 48), v54);
          ++*(_QWORD *)(a1 + 56);
        }
      }
    }
    goto LABEL_70;
  }
LABEL_38:
  if (v19 >= 1)
  {
    v37 = *a2;
    v38 = *a2 + a2[1] - 4;
    v39 = *((_DWORD *)a2 + 18);
    if (v18 <= 1)
      v40 = 1;
    else
      v40 = v18;
    v41 = (_DWORD *)v21;
    while (1)
    {
      v42 = (int *)(v37 + v39);
      if ((unint64_t)v42 > v38)
        break;
      v43 = *v42;
      v39 += 4;
      *((_DWORD *)a2 + 18) = v39;
      *v41++ = v43;
      if (!--v40)
        goto LABEL_70;
    }
LABEL_182:
    sub_19C2210D4(25);
  }
LABEL_70:
  operator delete[](v22);
  v60 = *((int *)a2 + 18);
  v61 = (int *)(*a2 + v60);
  if ((unint64_t)v61 <= *a2 + a2[1] - 4)
  {
    v64 = *v61;
    *((_DWORD *)a2 + 18) = v60 + 4;
    v63 = 2 * v64;
    v62 = 2 * v64;
  }
  else
  {
    v62 = 0;
    v63 = 0;
    v64 = 0;
  }
  __p = (_DWORD *)operator new[]();
  v65 = *a2;
  v66 = *((int *)a2 + 18);
  *(_DWORD *)(a1 + 112) = v64;
  v67 = (uint64_t **)(a1 + 88);
  v68 = (int *)(v65 + v66);
  *(_QWORD *)(a1 + 104) = v68;
  if (v68)
  {
    if (v64 < 1)
      goto LABEL_97;
    v69 = 0;
    LOBYTE(v70) = 1;
    do
    {
      while (v70)
      {
        v71 = *v68;
        v68 += 2;
        v70 = v69++ == v71;
        if (v64 == v69)
          goto LABEL_96;
      }
      v70 = 0;
      ++v69;
      v68 += 2;
    }
    while (v64 != v69);
  }
  else
  {
    v72 = *(_DWORD *)(a1 + 96);
    if (v72 < 1)
      goto LABEL_97;
    v73 = 0;
    LOBYTE(v70) = 1;
    do
    {
      while (!v70)
      {
        v70 = 0;
        if (++v73 == v72)
          goto LABEL_96;
      }
      v74 = *v67;
      if (!*v67)
        goto LABEL_94;
      v75 = (uint64_t **)(a1 + 88);
      do
      {
        v76 = *((_DWORD *)v74 + 7);
        v77 = v76 < v73;
        if (v76 >= v73)
          v78 = (uint64_t **)v74;
        else
          v78 = (uint64_t **)(v74 + 1);
        if (!v77)
          v75 = (uint64_t **)v74;
        v74 = *v78;
      }
      while (*v78);
      if (v75 == v67 || *((_DWORD *)v75 + 7) > v73)
LABEL_94:
        v75 = (uint64_t **)(a1 + 88);
      v70 = v75 != v67;
      ++v73;
    }
    while (v73 != v72);
  }
LABEL_96:
  if (!v70)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    if (v63 < 1)
      goto LABEL_134;
    v102 = *a2;
    v103 = *a2 + a2[1] - 4;
    v104 = *((_DWORD *)a2 + 18);
    v105 = v62 <= 1 ? 1 : v62;
    v106 = __p;
    do
    {
      v107 = (int *)(v102 + v104);
      if ((unint64_t)v107 > v103)
        goto LABEL_182;
      v108 = *v107;
      v104 += 4;
      *((_DWORD *)a2 + 18) = v104;
      *v106++ = v108;
      --v105;
    }
    while (v105);
    if (!*(_QWORD *)(a1 + 104))
    {
LABEL_134:
      sub_19C07C924(a1 + 80, *(_QWORD **)(a1 + 88));
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 80) = v67;
    }
    if (v63 < 1)
      goto LABEL_170;
    v109 = 0;
    while (1)
    {
      if (*(_QWORD *)(a1 + 104))
        sub_19C2210D4(91);
      v111 = __p[v109];
      v112 = __p[v109 + 1];
      v113 = *v67;
      v114 = (uint64_t **)(a1 + 88);
      v115 = (uint64_t **)(a1 + 88);
      if (*v67)
      {
        while (1)
        {
          while (1)
          {
            v115 = (uint64_t **)v113;
            v116 = *((_DWORD *)v113 + 7);
            if (v116 <= v111)
              break;
            v113 = *v115;
            v114 = v115;
            if (!*v115)
              goto LABEL_147;
          }
          if (v116 >= v111)
            break;
          v113 = v115[1];
          if (!v113)
          {
            v114 = v115 + 1;
            goto LABEL_147;
          }
        }
      }
      else
      {
LABEL_147:
        v117 = operator new(0x28uLL);
        v117[7] = v111;
        v117[8] = v112;
        *(_QWORD *)v117 = 0;
        *((_QWORD *)v117 + 1) = 0;
        *((_QWORD *)v117 + 2) = v115;
        *v114 = (uint64_t *)v117;
        v118 = **(_QWORD **)(a1 + 80);
        if (v118)
        {
          *(_QWORD *)(a1 + 80) = v118;
          v119 = *v114;
        }
        else
        {
          v119 = (uint64_t *)v117;
        }
        sub_19C07CC40(*(uint64_t **)(a1 + 88), v119);
        ++*(_QWORD *)(a1 + 96);
      }
      v120 = *(_QWORD *)(a1 + 64);
      if (v120)
      {
        v121 = (int *)(v120 + 8 * v111 + 4);
      }
      else
      {
        v123 = *v25;
        if (!*v25)
          goto LABEL_164;
        v124 = (uint64_t *)(a1 + 48);
        do
        {
          v125 = *((_DWORD *)v123 + 7);
          v126 = v125 < v111;
          if (v125 >= v111)
            v127 = (uint64_t **)v123;
          else
            v127 = (uint64_t **)(v123 + 1);
          if (!v126)
            v124 = v123;
          v123 = *v127;
        }
        while (*v127);
        if (v124 == (uint64_t *)v25 || *((_DWORD *)v124 + 7) > v111)
        {
LABEL_164:
          v122 = -1;
          goto LABEL_165;
        }
        v121 = (int *)(v124 + 4);
      }
      v122 = *v121;
LABEL_165:
      v128 = v112;
      v129 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 24 * v122);
      v141 = -1;
      v110 = *v129;
      v130 = (v129[1] - *v129) >> 2;
      if (v130 <= v128)
      {
        if (v128 + 1 > v130)
        {
          sub_19C16691C((uint64_t)v129, v128 + 1 - v130, (const float *)&v141);
          v110 = *v129;
        }
        else if (v128 + 1 < v130)
        {
          v129[1] = v110 + 4 * v128 + 4;
        }
      }
      *(_DWORD *)(v110 + 4 * v128) = v111;
      v109 += 2;
      if (v109 >= v63)
        goto LABEL_170;
    }
  }
LABEL_97:
  if (v63 >= 1)
  {
    v79 = *a2;
    v80 = *a2 + a2[1] - 4;
    v81 = *((_DWORD *)a2 + 18);
    if (v62 <= 1)
      v82 = 1;
    else
      v82 = v62;
    v83 = __p;
    do
    {
      v84 = (int *)(v79 + v81);
      if ((unint64_t)v84 > v80)
        goto LABEL_182;
      v85 = *v84;
      v81 += 4;
      *((_DWORD *)a2 + 18) = v81;
      *v83++ = v85;
      --v82;
    }
    while (v82);
    for (j = 0; j < v63; j += 2)
    {
      v88 = (int *)(*(_QWORD *)(a1 + 104) + 4 * j);
      v89 = *v88;
      v90 = *(_QWORD *)(a1 + 64);
      if (v90)
      {
        v91 = (int *)(v90 + 8 * v89 + 4);
      }
      else
      {
        v93 = *v25;
        if (!*v25)
          goto LABEL_120;
        v94 = (uint64_t *)(a1 + 48);
        do
        {
          v95 = *((_DWORD *)v93 + 7);
          v96 = v95 < v89;
          if (v95 >= v89)
            v97 = (uint64_t **)v93;
          else
            v97 = (uint64_t **)(v93 + 1);
          if (!v96)
            v94 = v93;
          v93 = *v97;
        }
        while (*v97);
        if (v94 == (uint64_t *)v25 || *((_DWORD *)v94 + 7) > v89)
        {
LABEL_120:
          v92 = -1;
          goto LABEL_121;
        }
        v91 = (int *)(v94 + 4);
      }
      v92 = *v91;
LABEL_121:
      v98 = v88[1];
      v99 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 24 * v92);
      v140 = -1;
      v87 = *v99;
      v100 = (v99[1] - *v99) >> 2;
      if (v100 <= v98)
      {
        v101 = (int)v98 + 1;
        if (v101 > v100)
        {
          sub_19C16691C((uint64_t)v99, v101 - v100, (const float *)&v140);
          v87 = *v99;
        }
        else if (v101 < v100)
        {
          v99[1] = v87 + 4 * v98 + 4;
        }
      }
      *(_DWORD *)(v87 + 4 * v98) = v89;
    }
  }
LABEL_170:
  operator delete[](__p);
  v131 = *(unsigned int *)(a1 + 8);
  if ((int)v131 >= 1)
  {
    v132 = 0;
    v133 = *(_QWORD *)(a1 + 120);
    do
    {
      v134 = *(_DWORD **)(v133 + 8 + 24 * v132);
      v135 = *(int **)(v133 + 24 * v132);
      v136 = v134 - v135;
      if (v136 != *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v132))
        sub_19C2210D4(23);
      if (v134 != v135)
      {
        if (v136 <= 1)
          v136 = 1;
        do
        {
          v137 = *v135++;
          if (v137 < 0)
            sub_19C2210D4(45);
          --v136;
        }
        while (v136);
      }
      ++v132;
    }
    while (v132 != v131);
  }
}

void sub_19C16681C(_QWORD *a1, int a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  if (!a2)
    sub_19C2210D4(42);
  v4 = a1[2];
  v5 = (void **)(a1 + 2);
  v6 = a2;
  v7 = (a1[3] - v4) >> 2;
  v8 = a2 >= v7;
  v9 = a2 - v7;
  if (v9 != 0 && v8)
  {
    sub_19C101928((uint64_t)(a1 + 2), v9);
  }
  else if (!v8)
  {
    a1[3] = v4 + 4 * v6;
  }
  v11 = a1[15];
  v10 = a1[16];
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3);
  if (v6 <= v12)
  {
    if (v6 < v12)
    {
      v13 = v11 + 24 * (int)v6;
      if (v10 != v13)
      {
        v14 = a1[16];
        do
        {
          v16 = *(void **)(v14 - 24);
          v14 -= 24;
          v15 = v16;
          if (v16)
          {
            *(_QWORD *)(v10 - 16) = v15;
            operator delete(v15);
          }
          v10 = v14;
        }
        while (v14 != v13);
      }
      a1[16] = v13;
    }
  }
  else
  {
    sub_19C167E70((uint64_t)(a1 + 15), v6 - v12);
  }
  if (a2 >= 1)
    bzero(*v5, 4 * a2);
}

void sub_19C16691C(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_19C07DA0C();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_19C07C7FC();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

uint64_t sub_19C166B7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  void *v20;

  *(_QWORD *)a1 = &unk_1E3D1E460;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 120);
  if ((int)v2 >= 1)
  {
    if ((_DWORD)v2 == 1)
    {
      v4 = 0;
LABEL_7:
      v8 = (_QWORD *)(v3 + 24 * v4 + 8);
      v9 = v2 - v4;
      do
      {
        *v8 = *(v8 - 1);
        v8 += 3;
        --v9;
      }
      while (v9);
      goto LABEL_9;
    }
    v4 = v2 & 0xFFFFFFFE;
    v5 = (_QWORD *)(v3 + 32);
    v6 = v4;
    do
    {
      v7 = *(v5 - 1);
      *(v5 - 3) = *(v5 - 4);
      *v5 = v7;
      v5 += 6;
      v6 -= 2;
    }
    while (v6);
    if (v4 != v2)
      goto LABEL_7;
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 128);
  if (v10 != v3)
  {
    v11 = *(_QWORD *)(a1 + 128);
    do
    {
      v13 = *(void **)(v11 - 24);
      v11 -= 24;
      v12 = v13;
      if (v13)
      {
        *(_QWORD *)(v10 - 16) = v12;
        operator delete(v12);
      }
      v10 = v11;
    }
    while (v11 != v3);
  }
  *(_QWORD *)(a1 + 128) = v3;
  if (*(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    if (*(_QWORD *)(a1 + 104))
      goto LABEL_16;
  }
  else
  {
    sub_19C07C924(a1 + 40, *(_QWORD **)(a1 + 48));
    *(_QWORD *)(a1 + 40) = a1 + 48;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    if (*(_QWORD *)(a1 + 104))
    {
LABEL_16:
      *(_QWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 112) = 0;
      v14 = *(char **)(a1 + 120);
      if (!v14)
        goto LABEL_27;
      goto LABEL_20;
    }
  }
  sub_19C07C924(a1 + 80, *(_QWORD **)(a1 + 88));
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  v14 = *(char **)(a1 + 120);
  if (!v14)
    goto LABEL_27;
LABEL_20:
  v15 = *(char **)(a1 + 128);
  v16 = v14;
  if (v15 != v14)
  {
    v17 = *(char **)(a1 + 128);
    do
    {
      v19 = (void *)*((_QWORD *)v17 - 3);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *((_QWORD *)v15 - 2) = v18;
        operator delete(v18);
      }
      v15 = v17;
    }
    while (v17 != v14);
    v16 = *(char **)(a1 + 120);
  }
  *(_QWORD *)(a1 + 128) = v14;
  operator delete(v16);
LABEL_27:
  sub_19C07C924(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_19C07C924(a1 + 40, *(_QWORD **)(a1 + 48));
  v20 = *(void **)(a1 + 16);
  if (v20)
  {
    *(_QWORD *)(a1 + 24) = v20;
    operator delete(v20);
  }
  return a1;
}

void sub_19C166D48(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_19C166D48(a1, *(_QWORD *)a2);
    sub_19C166D48(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t sub_19C166DA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19C166DB0(uint64_t a1, int a2, float **a3)
{
  uint64_t v3;
  unsigned int v4;
  float *v5;
  float v6;

  v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    v4 = 1 << (v3 - 1);
    v5 = *a3;
    do
    {
      if ((v4 & a2) != 0)
        v6 = 1.0;
      else
        v6 = 0.0;
      *v5++ = v6;
      v4 >>= 1;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t sub_19C166DF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19C166DFC()
{
  return 0;
}

uint64_t sub_19C166E0C(uint64_t result, uint64_t a2)
{
  if (result != a2)
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_19C166E20(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_19C166E28(uint64_t a1, int a2, void **a3)
{
  int v6;
  _DWORD *v7;

  bzero(*a3, 4 * *(int *)(a1 + 28));
  v6 = *(_DWORD *)(a1 + 12);
  v7 = *a3;
  *((_DWORD *)*a3 + a2 % v6) = 1065353216;
  v7[a2 / v6 + v6] = 1065353216;
  return 0;
}

uint64_t sub_19C166E88()
{
  return 2;
}

uint64_t sub_19C166E90()
{
  return 2;
}

__n128 sub_19C166EA0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    result = *(__n128 *)(a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  }
  return result;
}

uint64_t sub_19C166EC4(uint64_t a1, unsigned int a2, float **a3)
{
  uint64_t v3;
  unsigned int v4;
  float *v5;
  float v6;

  v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    v4 = 1 << (v3 - 1);
    v5 = *a3;
    do
    {
      if ((v4 & (a2 ^ (a2 >> 1))) != 0)
        v6 = 1.0;
      else
        v6 = 0.0;
      *v5++ = v6;
      v4 >>= 1;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t sub_19C166F0C()
{
  return 3;
}

uint64_t sub_19C166F1C(uint64_t result, uint64_t a2)
{
  if (result != a2)
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_19C166F30(uint64_t a1, uint64_t a2, int a3)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v14[2];
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  int v18;

  *(_QWORD *)a1 = &unk_1E3D1F380;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (void **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 8) = a3;
  v18 = -1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v17 = *(_QWORD *)(a2 + 16);
  }
  sub_19C167158(a1, (uint64_t)__p, &v18, 1, 0);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v6 = v18;
  if (v18 <= 0)
    sub_19C2210D4(4);
  ++v18;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (*(_QWORD *)(a1 + 24) - v7) >> 3;
  if (v6 + 1 <= v8)
  {
    if (v6 + 1 < v8)
      *(_QWORD *)(a1 + 24) = v7 + 8 * v6 + 8;
  }
  else
  {
    sub_19C098930(v5, v6 + 1 - v8);
    if (v18 < 1)
      goto LABEL_9;
  }
  v9 = 0;
  do
  {
    v10 = *(unsigned int *)(a1 + 8);
    v11 = (void *)operator new[]();
    v12 = v11;
    if ((int)v10 >= 1)
      bzero(v11, 4 * v10);
    *((_QWORD *)*v5 + v9++) = v12;
  }
  while (v9 < v18);
LABEL_9:
  *(_DWORD *)(a1 + 12) = -1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(v14, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v15 = *(_QWORD *)(a2 + 16);
  }
  sub_19C167158(a1, (uint64_t)v14, (int *)(a1 + 12), 0, 0);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return a1;
}

void sub_19C16710C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;
  void *v24;

  if (a14 < 0)
    operator delete(__p);
  v24 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v21 + 24) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C167158(uint64_t a1, uint64_t a2, int *a3, int a4, int a5)
{
  char v9;
  std::locale::__imp *v10;
  uint64_t v11;
  const std::locale::facet *v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  float v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  std::locale::__imp *v27;
  void *__dst[2];
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  void *__src[2];
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  _QWORD v42[2];
  _QWORD v43[51];
  _QWORD v44[21];

  v44[19] = *MEMORY[0x1E0C80C00];
  *a3 = 0x80000000;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  sub_19C088500(v42);
  if (!v43[15])
    sub_19C2210D4(3);
  if (a5 < 1)
    v9 = 1;
  else
    v9 = a4;
  v25 = v9;
  v10 = (std::locale::__imp *)*MEMORY[0x1E0DE4F50];
  v26 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v27 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F50] + 64);
  v11 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(v42[0] - 24)));
    v12 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
    v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v34);
    v14 = sub_19C167950(v42, (uint64_t)v40, v13);
    if ((*((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 32) & 5) != 0)
      break;
    sub_19C1677DC((uint64_t)&v34, (uint64_t)v40, 24);
    v15 = 0;
    __src[0] = 0;
    __src[1] = 0;
    v16 = -1;
    v33 = 0;
    if (!a4)
      goto LABEL_18;
LABEL_12:
    while (!v15)
    {
      v18 = sub_19C167950(&v34, (uint64_t)__src, 0x20u);
      if ((*((_BYTE *)v18 + *(_QWORD *)(*v18 - 24) + 32) & 5) != 0)
        goto LABEL_43;
LABEL_11:
      while (1)
      {
        ++v15;
        if (a4)
          break;
LABEL_18:
        while (v15)
        {
          if (v15 != 1)
          {
            while (1)
            {
              while (1)
              {
                v20 = sub_19C167950(&v34, (uint64_t)__src, 0x20u);
                if ((*((_BYTE *)v20 + *(_QWORD *)(*v20 - 24) + 32) & 5) != 0)
                  goto LABEL_41;
                if (SHIBYTE(v33) < 0)
                  break;
                if (HIBYTE(v33))
                {
                  *(_OWORD *)__dst = *(_OWORD *)__src;
                  v29 = v33;
LABEL_38:
                  v23 = sub_19C2211E8((uint64_t)__dst);
                  if (SHIBYTE(v29) < 0)
                    operator delete(__dst[0]);
                  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v16) + 4 * v15 - 8) = v23;
                  goto LABEL_11;
                }
              }
              if (__src[1])
              {
                sub_19C07C6E8(__dst, __src[0], (unint64_t)__src[1]);
                goto LABEL_38;
              }
            }
          }
          v19 = sub_19C167950(&v34, (uint64_t)__src, 0x20u);
          if ((*((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5) != 0)
            goto LABEL_41;
LABEL_21:
          if (SHIBYTE(v33) < 0)
          {
            sub_19C07C6E8(__p, __src[0], (unint64_t)__src[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)__src;
            v31 = v33;
          }
          v22 = sub_19C221100((uint64_t)__p);
          v16 = v22;
          if (SHIBYTE(v31) < 0)
          {
            operator delete(__p[0]);
            if (v16 <= *a3)
              goto LABEL_11;
          }
          else if (v22 <= *a3)
          {
            goto LABEL_11;
          }
          *a3 = v16;
          v15 = 2;
          if (a4)
            goto LABEL_12;
        }
        v21 = sub_19C167950(&v34, (uint64_t)__src, 0x20u);
        if ((*((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 32) & 5) != 0)
          goto LABEL_41;
      }
    }
    if (v15 == 1)
    {
      v17 = sub_19C167950(&v34, (uint64_t)__src, 0x20u);
      if ((*((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 32) & 5) != 0)
        goto LABEL_43;
      goto LABEL_21;
    }
    do
      v24 = sub_19C167950(&v34, (uint64_t)__src, 0x20u);
    while ((*((_BYTE *)v24 + *(_QWORD *)(*v24 - 24) + 32) & 5) == 0);
LABEL_41:
    if ((v25 & 1) == 0)
      sub_19C118B54((float **)(*(_QWORD *)(a1 + 16) + 8 * v16), "corpus entry ", *(_DWORD *)(a1 + 8));
LABEL_43:
    if (SHIBYTE(v33) < 0)
      operator delete(__src[0]);
    v34.__locale_ = v10;
    *(std::locale::__imp **)((char *)&v34.__locale_ + *((_QWORD *)v10 - 3)) = v27;
    v35 = v26;
    v36 = v11;
    if (v38 < 0)
      operator delete(v37);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AD1C08](&v39);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v42 + *(_QWORD *)(v42[0] - 24)), *(_DWORD *)((char *)&v43[2] + *(_QWORD *)(v42[0] - 24)) | 4);
  v42[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v42 + *(_QWORD *)(v42[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1AD1A64](v43);
  std::istream::~istream();
  MEMORY[0x1A1AD1C08](v44);
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
}

void sub_19C1675DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a63 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C167690(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19C167698(uint64_t a1, int a2, void **a3)
{
  memmove(*a3, *(const void **)(*(_QWORD *)(a1 + 16) + 8 * a2), 4 * *(int *)(a1 + 8));
  return 0;
}

uint64_t sub_19C1676C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19C1676D0()
{
  return 4;
}

uint64_t sub_19C1676D8(uint64_t a1)
{
  int v2;
  uint64_t i;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &unk_1E3D1F380;
  v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(void **)(*(_QWORD *)(a1 + 16) + 8 * i);
      if (v4)
      {
        operator delete[](v4);
        v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  v5 = *(void **)(a1 + 16);
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_19C167750(_DWORD *__p)
{
  int v2;
  uint64_t i;
  void *v4;
  void *v5;

  *(_QWORD *)__p = &unk_1E3D1F380;
  v2 = __p[3];
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(void **)(*((_QWORD *)__p + 2) + 8 * i);
      if (v4)
      {
        operator delete[](v4);
        v2 = __p[3];
      }
    }
  }
  v5 = (void *)*((_QWORD *)__p + 2);
  if (v5)
  {
    *((_QWORD *)__p + 3) = v5;
    operator delete(v5);
  }
  operator delete(__p);
}

uint64_t sub_19C1677C8(uint64_t result, uint64_t a2)
{
  if (result != a2)
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_19C1677DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  v7 = a1 + 16;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = v10;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[4];
  v13 = v8[5];
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v7 + *(_QWORD *)(v12 - 24)) = v13;
  v14 = v8[1];
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + *(_QWORD *)(v14 - 24)) = v8[6];
  *(_QWORD *)a1 = v5 + 24;
  *(_QWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 16) = v5 + 64;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 24) = v15 + 16;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a3;
  std::stringbuf::str();
  return a1;
}

void sub_19C1678FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 111) < 0)
    operator delete(*v3);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD1C08](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C167950(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1A1AD1A94](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_19C167A7C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19C167A48);
  }
  __cxa_rethrow();
}

void sub_19C167AC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C167AD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void sub_19C167ADC()
{
  sub_19C2210D4(45);
}

uint64_t sub_19C167AEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19C167AF4()
{
  return 5;
}

_QWORD *sub_19C167AFC(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E3D1E1A0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C167B3C(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E3D1E1A0;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_19C167B7C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  int v10;
  uint64_t (***v11)(_QWORD);
  uint64_t v12;
  uint64_t (***v13)(_QWORD);
  int v14;
  void (***v15)(_QWORD);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  char *v21;
  int v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  void *v28;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = (void *)operator new[]();
  v8 = v7;
  v28 = v7;
  if ((int)v6 >= 1)
    bzero(v7, 4 * v6);
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
  {
LABEL_18:
    operator delete[](v8);
    return 0;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    bzero(v28, 4 * *(int *)(a1 + 8));
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9);
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v12 + 8))(v12, *(unsigned int *)(*a2 + 4 * v9), &v28);
    v13 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8 * v9);
    v14 = (**v13)(v13);
    v15 = *(void (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8 * v9);
    (**v15)(v15);
    if (v14 < 1)
      goto LABEL_5;
    v16 = (char *)v28;
    v17 = *a3;
    if (v14 < 8 || (unint64_t)(4 * v10 + v17 - (_QWORD)v28) < 0x20)
    {
      v18 = 0;
LABEL_10:
      v19 = v14 - v18;
      v20 = (_DWORD *)(v17 + 4 * (v18 + v10));
      v21 = &v16[4 * v18];
      do
      {
        v22 = *(_DWORD *)v21;
        v21 += 4;
        *v20++ = v22;
        --v19;
      }
      while (v19);
      goto LABEL_5;
    }
    v18 = v14 & 0x7FFFFFF8;
    v23 = (__int128 *)((char *)v28 + 16);
    v24 = (_OWORD *)(v17 + 4 * v10 + 16);
    v25 = v14 & 0xFFFFFFF8;
    do
    {
      v26 = *v23;
      *(v24 - 1) = *(v23 - 1);
      *v24 = v26;
      v23 += 2;
      v24 += 2;
      v25 -= 8;
    }
    while (v25);
    if (v18 != v14)
      goto LABEL_10;
LABEL_5:
    v11 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 16) + 8 * v9);
    v10 += (**v11)(v11);
    ++v9;
  }
  while (v9 < (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
  v8 = v28;
  if (v28)
    goto LABEL_18;
  return 0;
}

uint64_t sub_19C167D60(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    sub_19C11EAD0((_QWORD *)(a1 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  }
  return a1;
}

uint64_t sub_19C167DA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19C167DB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  int v15;

  v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    v5 = ***(_QWORD ***)(a1 + 16);
    v6 = *a3;
    if (v3 < 8)
      goto LABEL_7;
    if ((unint64_t)(v6 - v5) < 0x20)
      goto LABEL_7;
    v4 = v3 & 0x7FFFFFF8;
    v7 = (__int128 *)(v5 + 16);
    v8 = (_OWORD *)(v6 + 16);
    v9 = v3 & 0xFFFFFFF8;
    do
    {
      v10 = *v7;
      *(v8 - 1) = *(v7 - 1);
      *v8 = v10;
      v7 += 2;
      v8 += 2;
      v9 -= 8;
    }
    while (v9);
    if (v4 != v3)
    {
LABEL_7:
      v11 = v3 - v4;
      v12 = 4 * v4;
      v13 = (_DWORD *)(v6 + 4 * v4);
      v14 = (int *)(v5 + v12);
      do
      {
        v15 = *v14++;
        *v13++ = v15;
        --v11;
      }
      while (v11);
    }
  }
  return 0;
}

uint64_t sub_19C167E3C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19C167E44()
{
  return 6;
}

uint64_t sub_19C167E54(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  }
  return result;
}

void sub_19C167E70(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07DA0C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_19C07C7FC();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v5 - 2) = v21;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

size_t sub_19C168064(_DWORD *a1, FILE *__stream, _DWORD *a3)
{
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t result;
  int __ptr;

  __ptr = a1[3] | a1[6];
  v6 = fwrite(a1, 4uLL, 1uLL, __stream);
  v7 = fwrite(a1 + 1, 4uLL, 1uLL, __stream) + v6;
  v8 = fwrite(a1 + 2, 4uLL, 1uLL, __stream);
  v9 = v7 + v8 + fwrite(&__ptr, 4uLL, 1uLL, __stream);
  v10 = fwrite(a1 + 4, 4uLL, 1uLL, __stream);
  result = fwrite(a1 + 5, 4uLL, 1uLL, __stream);
  if (v9 + v10 + result != 6)
    sub_19C2210D4(67);
  *a3 += 24;
  return result;
}

uint64_t sub_19C168160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int i;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  int v37;
  int *v38;
  int v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t **v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t **v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  int *v65;
  unint64_t v66;
  int v67;
  int *v68;
  int v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t **v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t **v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v86;
  int v89;
  uint64_t v90;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 96);
  v9 = a1 + 64;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(v8 + 72);
  v12 = (unsigned int *)(*(_QWORD *)v8 + v11);
  if ((unint64_t)v12 > *(_QWORD *)v8 + *(_QWORD *)(v8 + 8) - 4)
  {
    v13 = 0;
    goto LABEL_4;
  }
  v13 = *v12;
  *(_DWORD *)(v8 + 72) = v11 + 4;
  if (v13 <= 1)
  {
LABEL_4:
    v14 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19C277550;
    *(_DWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 84) = 0x2000000001;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v13 - 2 > 3)
    sub_19C2210D4(38);
  sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v13 == 3 || v13 == 5)
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
LABEL_6:
  v15 = *(_DWORD *)(v7 + 88);
  if (v15 != sub_19C2210B4())
    sub_19C2210D4(33);
  v16 = *(_DWORD *)(v7 + 84);
  if ((v16 & 0xFFFFFFFE) != 2)
    sub_19C2210D4(34);
  if (v16 != 2)
    sub_19C2210D4(35);
  v17 = *(uint64_t **)(v7 + 96);
  v18 = *v17;
  v19 = v17[1];
  v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)v7 = 0;
    v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4)
      goto LABEL_11;
LABEL_14:
    *(_DWORD *)(v7 + 4) = 0;
    v86 = v9;
    v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v23 <= v18 + v19 - 4)
      goto LABEL_12;
LABEL_15:
    *(_DWORD *)(v7 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)v7 = *v20;
  v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  v18 = *v17;
  v19 = v17[1];
  v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4)
    goto LABEL_14;
LABEL_11:
  *(_DWORD *)(v7 + 4) = *v21;
  v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  v86 = v9;
  v23 = (_DWORD *)(*v17 + v22);
  if ((unint64_t)v23 > *v17 + v17[1] - 4)
    goto LABEL_15;
LABEL_12:
  *(_DWORD *)(v7 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
LABEL_16:
  v25 = (uint64_t **)(a2 + 8);
  sub_19C07C924(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v26 = (uint64_t **)(a3 + 8);
  sub_19C07C924(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v27 = *(_QWORD *)(v7 + 96);
  v28 = *(int *)(v27 + 72);
  v29 = (int *)(*(_QWORD *)v27 + v28);
  v90 = v7;
  if ((unint64_t)v29 <= *(_QWORD *)v27 + *(_QWORD *)(v27 + 8) - 4)
  {
    v30 = *v29;
    *(_DWORD *)(v27 + 72) = v28 + 4;
    v89 = v30;
    if (v30 >= 1)
    {
      for (i = 0; i != v89; ++i)
      {
        v32 = *(uint64_t **)(v7 + 96);
        v33 = *((_DWORD *)v32 + 18);
        v34 = *v32;
        v35 = (int *)(*v32 + v33);
        v36 = *v32 + v32[1] - 4;
        if ((unint64_t)v35 <= v36)
        {
          v37 = *v35;
          v33 += 4;
          *((_DWORD *)v32 + 18) = v33;
          v38 = (int *)(v34 + v33);
          if ((unint64_t)v38 <= v36)
          {
LABEL_23:
            v39 = *v38;
            *((_DWORD *)v32 + 18) = v33 + 4;
            v40 = *v25;
            v41 = (uint64_t **)(a2 + 8);
            v42 = (uint64_t **)(a2 + 8);
            if (*v25)
              goto LABEL_29;
            goto LABEL_33;
          }
        }
        else
        {
          v37 = 0;
          v38 = (int *)(v34 + v33);
          if ((unint64_t)v38 <= v36)
            goto LABEL_23;
        }
        v39 = 0;
        v40 = *v25;
        v41 = (uint64_t **)(a2 + 8);
        v42 = (uint64_t **)(a2 + 8);
        if (*v25)
        {
          while (1)
          {
LABEL_29:
            while (1)
            {
              v42 = (uint64_t **)v40;
              v43 = *((_DWORD *)v40 + 7);
              if (v37 >= v43)
                break;
              v40 = *v42;
              v41 = v42;
              if (!*v42)
                goto LABEL_33;
            }
            if (v43 >= v37)
              goto LABEL_36;
            v40 = v42[1];
            if (!v40)
            {
              v41 = v42 + 1;
              break;
            }
          }
        }
LABEL_33:
        v44 = (uint64_t *)v42;
        v42 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v42 + 7) = v37;
        *((_DWORD *)v42 + 8) = 0;
        *v42 = 0;
        v42[1] = 0;
        v42[2] = v44;
        *v41 = (uint64_t *)v42;
        v45 = **(_QWORD **)a2;
        v46 = (uint64_t *)v42;
        if (v45)
        {
          *(_QWORD *)a2 = v45;
          v46 = *v41;
        }
        sub_19C07CC40(*(uint64_t **)(a2 + 8), v46);
        ++*(_QWORD *)(a2 + 16);
LABEL_36:
        *((_DWORD *)v42 + 8) = v39;
        v47 = *v26;
        v48 = (uint64_t **)(a3 + 8);
        v49 = (uint64_t **)(a3 + 8);
        if (*v26)
        {
          while (1)
          {
            while (1)
            {
              v49 = (uint64_t **)v47;
              v50 = *((_DWORD *)v47 + 7);
              if (v39 >= v50)
                break;
              v47 = *v49;
              v48 = v49;
              if (!*v49)
                goto LABEL_43;
            }
            if (v50 >= v39)
              break;
            v47 = v49[1];
            if (!v47)
            {
              v48 = v49 + 1;
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          v51 = (uint64_t *)v49;
          v49 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v49 + 7) = v39;
          *((_DWORD *)v49 + 8) = 0;
          *v49 = 0;
          v49[1] = 0;
          v49[2] = v51;
          *v48 = (uint64_t *)v49;
          v52 = **(_QWORD **)a3;
          v53 = (uint64_t *)v49;
          if (v52)
          {
            *(_QWORD *)a3 = v52;
            v53 = *v48;
          }
          sub_19C07CC40(*(uint64_t **)(a3 + 8), v53);
          ++*(_QWORD *)(a3 + 16);
        }
        *((_DWORD *)v49 + 8) = v37;
        v7 = v90;
      }
    }
  }
  v54 = (uint64_t **)(a4 + 8);
  sub_19C07C924(a4, *(_QWORD **)(a4 + 8));
  *(_QWORD *)a4 = a4 + 8;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v55 = (uint64_t **)(a5 + 8);
  sub_19C07C924(a5, *(_QWORD **)(a5 + 8));
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v56 = *(_QWORD *)(v7 + 96);
  v57 = *(int *)(v56 + 72);
  v58 = (int *)(*(_QWORD *)v56 + v57);
  if ((unint64_t)v58 <= *(_QWORD *)v56 + *(_QWORD *)(v56 + 8) - 4)
  {
    v60 = *v58;
    *(_DWORD *)(v56 + 72) = v57 + 4;
    v59 = v86;
    if (v60 < 1)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v7 + 40) + 64))(*(_QWORD *)(v7 + 40), v56, v59, *(unsigned int *)(v7 + 72));
    v61 = 0;
    while (1)
    {
      v62 = *(uint64_t **)(v7 + 96);
      v63 = *((_DWORD *)v62 + 18);
      v64 = *v62;
      v65 = (int *)(*v62 + v63);
      v66 = *v62 + v62[1] - 4;
      if ((unint64_t)v65 <= v66)
      {
        v67 = *v65;
        v63 += 4;
        *((_DWORD *)v62 + 18) = v63;
        v68 = (int *)(v64 + v63);
        if ((unint64_t)v68 <= v66)
        {
LABEL_53:
          v69 = *v68;
          *((_DWORD *)v62 + 18) = v63 + 4;
          v70 = *v54;
          v71 = (uint64_t **)(a4 + 8);
          v72 = (uint64_t **)(a4 + 8);
          if (*v54)
            goto LABEL_59;
          goto LABEL_63;
        }
      }
      else
      {
        v67 = 0;
        v68 = (int *)(v64 + v63);
        if ((unint64_t)v68 <= v66)
          goto LABEL_53;
      }
      v69 = 0;
      v70 = *v54;
      v71 = (uint64_t **)(a4 + 8);
      v72 = (uint64_t **)(a4 + 8);
      if (*v54)
      {
        while (1)
        {
LABEL_59:
          while (1)
          {
            v72 = (uint64_t **)v70;
            v73 = *((_DWORD *)v70 + 7);
            if (v67 >= v73)
              break;
            v70 = *v72;
            v71 = v72;
            if (!*v72)
              goto LABEL_63;
          }
          if (v73 >= v67)
            goto LABEL_66;
          v70 = v72[1];
          if (!v70)
          {
            v71 = v72 + 1;
            break;
          }
        }
      }
LABEL_63:
      v74 = (uint64_t *)v72;
      v72 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v72 + 7) = v67;
      *((_DWORD *)v72 + 8) = 0;
      *v72 = 0;
      v72[1] = 0;
      v72[2] = v74;
      *v71 = (uint64_t *)v72;
      v75 = **(_QWORD **)a4;
      v76 = (uint64_t *)v72;
      if (v75)
      {
        *(_QWORD *)a4 = v75;
        v76 = *v71;
      }
      sub_19C07CC40(*(uint64_t **)(a4 + 8), v76);
      ++*(_QWORD *)(a4 + 16);
LABEL_66:
      *((_DWORD *)v72 + 8) = v69;
      v77 = *v55;
      v78 = (uint64_t **)(a5 + 8);
      v79 = (uint64_t **)(a5 + 8);
      if (*v55)
      {
        while (1)
        {
          while (1)
          {
            v79 = (uint64_t **)v77;
            v80 = *((_DWORD *)v77 + 7);
            if (v69 >= v80)
              break;
            v77 = *v79;
            v78 = v79;
            if (!*v79)
              goto LABEL_73;
          }
          if (v80 >= v69)
            break;
          v77 = v79[1];
          if (!v77)
          {
            v78 = v79 + 1;
            goto LABEL_73;
          }
        }
      }
      else
      {
LABEL_73:
        v81 = (uint64_t *)v79;
        v79 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v79 + 7) = v69;
        *((_DWORD *)v79 + 8) = 0;
        *v79 = 0;
        v79[1] = 0;
        v79[2] = v81;
        *v78 = (uint64_t *)v79;
        v82 = **(_QWORD **)a5;
        v83 = (uint64_t *)v79;
        if (v82)
        {
          *(_QWORD *)a5 = v82;
          v83 = *v78;
        }
        sub_19C07CC40(*(uint64_t **)(a5 + 8), v83);
        ++*(_QWORD *)(a5 + 16);
      }
      *((_DWORD *)v79 + 8) = v67;
      ++v61;
      v7 = v90;
      if (v61 == v60)
      {
        v56 = *(_QWORD *)(v90 + 96);
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v7 + 40) + 64))(*(_QWORD *)(v7 + 40), v56, v59, *(unsigned int *)(v7 + 72));
      }
    }
  }
  v59 = v86;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v7 + 40) + 64))(*(_QWORD *)(v7 + 40), v56, v59, *(unsigned int *)(v7 + 72));
}

uint64_t sub_19C168800(uint64_t a1, __int128 *a2, __int128 *a3, int a4)
{
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  const char *v13;
  int v14;
  const char *v15;
  int v16;
  int st_size;
  size_t v18;
  void *v19;
  void *v20;
  stat v22;
  uint64_t v23;
  int v24;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19C07C6E8((_BYTE *)(a1 + 16), *(void **)a2, *((_QWORD *)a2 + 1));
    v9 = a1 + 40;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v8;
    v9 = a1 + 40;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v10 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = v10;
      goto LABEL_6;
    }
  }
  sub_19C07C6E8((_BYTE *)v9, *(void **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    v12 = *((_QWORD *)a3 + 1);
    if (v12 != 1 || **(_BYTE **)a3 != 114)
    {
      if (v12 != 2 || **(_WORD **)a3 != 11122)
LABEL_33:
        sub_19C2210D4(11);
      goto LABEL_15;
    }
  }
  else
  {
    v11 = *((unsigned __int8 *)a3 + 23);
    if (v11 != 1)
    {
      if (v11 != 2 || *(_WORD *)a3 != 11122)
        goto LABEL_33;
LABEL_15:
      *(_DWORD *)(a1 + 64) = 514;
      if (*((char *)a2 + 23) >= 0)
        v13 = (const char *)a2;
      else
        v13 = *(const char **)a2;
      v14 = open(v13, 514, 384);
      goto LABEL_24;
    }
    if (*(_BYTE *)a3 != 114)
      goto LABEL_33;
  }
  *(_DWORD *)(a1 + 64) = 0;
  if (*((char *)a2 + 23) >= 0)
    v15 = (const char *)a2;
  else
    v15 = *(const char **)a2;
  v14 = open(v15, 0);
LABEL_24:
  v16 = v14;
  if (v14 < 0)
    goto LABEL_33;
  if (fstat(v14, &v22) < 0)
    goto LABEL_32;
  st_size = v22.st_size;
  *(_QWORD *)(a1 + 8) = v22.st_size;
  v23 = 0;
  v24 = st_size;
  fcntl(v16, 44, &v23);
  v18 = *(_QWORD *)(a1 + 8);
  if (!a4)
  {
    v20 = (void *)operator new[]();
    *(_QWORD *)a1 = v20;
    if ((read(v16, v20, *(_QWORD *)(a1 + 8)) & 0x8000000000000000) == 0)
      goto LABEL_31;
LABEL_32:
    close(v16);
    goto LABEL_33;
  }
  if (v18)
  {
    v19 = mmap(0, v18, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v16, 0);
    if (v19 == (void *)-1)
    {
      close(v16);
      sub_19C2210D4(11);
    }
    *(_QWORD *)a1 = v19;
  }
LABEL_31:
  close(v16);
  return a1;
}

void sub_19C168A48(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if ((*(char *)(v2 + 39) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_19C168A98(_DWORD *result, uint64_t *a2, char a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 18);
  if ((a3 & 1) != 0)
  {
    v5 = a2[1];
    if (v3 + v4 <= (unint64_t)(v3 + v5 - 4))
    {
      v4 += 4;
      *((_DWORD *)a2 + 18) = v4;
    }
    v6 = (_DWORD *)(v3 + v4);
    if ((unint64_t)v6 > v3 + v5 - 4)
    {
LABEL_5:
      *result = 0;
      v7 = (_DWORD *)(v3 + *((int *)a2 + 18));
      if ((unint64_t)v7 <= v3 + v5 - 4)
        goto LABEL_6;
      goto LABEL_13;
    }
  }
  else
  {
    v5 = a2[1];
    v6 = (_DWORD *)(v3 + v4);
    if ((unint64_t)v6 > v3 + v5 - 4)
      goto LABEL_5;
  }
  *result = *v6;
  v17 = *((_DWORD *)a2 + 18) + 4;
  *((_DWORD *)a2 + 18) = v17;
  v3 = *a2;
  v5 = a2[1];
  v7 = (_DWORD *)(*a2 + v17);
  if ((unint64_t)v7 <= *a2 + v5 - 4)
  {
LABEL_6:
    result[1] = *v7;
    v8 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v8;
    v3 = *a2;
    v5 = a2[1];
    v9 = (_DWORD *)(*a2 + v8);
    if ((unint64_t)v9 <= *a2 + v5 - 4)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result[1] = 0;
  v9 = (_DWORD *)(v3 + *((int *)a2 + 18));
  if ((unint64_t)v9 <= v3 + v5 - 4)
  {
LABEL_7:
    result[2] = *v9;
    v10 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v10;
    v3 = *a2;
    v5 = a2[1];
    v11 = (int *)(*a2 + v10);
    if ((unint64_t)v11 <= *a2 + v5 - 4)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result[2] = 0;
  v11 = (int *)(v3 + *((int *)a2 + 18));
  if ((unint64_t)v11 <= v3 + v5 - 4)
  {
LABEL_8:
    v12 = *v11;
    result[3] = v12;
    v13 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v13;
    v3 = *a2;
    v5 = a2[1];
    v14 = (_DWORD *)(*a2 + v13);
    if ((unint64_t)v14 <= *a2 + v5 - 4)
      goto LABEL_9;
LABEL_16:
    result[4] = 0;
    v16 = (_DWORD *)(v3 + *((int *)a2 + 18));
    if ((unint64_t)v16 <= v3 + v5 - 4)
      goto LABEL_10;
LABEL_17:
    result[5] = 0;
    goto LABEL_18;
  }
LABEL_15:
  v12 = 0;
  result[3] = 0;
  v14 = (_DWORD *)(v3 + *((int *)a2 + 18));
  if ((unint64_t)v14 > v3 + v5 - 4)
    goto LABEL_16;
LABEL_9:
  result[4] = *v14;
  v15 = *((_DWORD *)a2 + 18) + 4;
  *((_DWORD *)a2 + 18) = v15;
  v16 = (_DWORD *)(*a2 + v15);
  if ((unint64_t)v16 > *a2 + a2[1] - 4)
    goto LABEL_17;
LABEL_10:
  result[5] = *v16;
  *((_DWORD *)a2 + 18) += 4;
LABEL_18:
  if ((v12 & 3) == 0)
    goto LABEL_25;
  v18 = v12 & 0xFFFFFFFC;
  if ((v12 & 0xFFFFFFFC) == 0)
    v18 = 32;
  result[6] = v18;
  if (v18 > 0x20 || ((1 << v18) & 0x100010100) == 0)
LABEL_25:
    sub_19C2210D4(25);
  result[3] = v12 & 3;
  if (*((_DWORD *)a2 + 18) != 32)
    sub_19C2210D4(67);
  return result;
}

uint64_t sub_19C168CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int i;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  int v37;
  int *v38;
  int v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t **v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t **v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  int *v65;
  unint64_t v66;
  int v67;
  int *v68;
  int v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t **v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t **v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v86;
  int v89;
  uint64_t v90;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 96);
  v9 = a1 + 64;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(v8 + 72);
  v12 = (unsigned int *)(*(_QWORD *)v8 + v11);
  if ((unint64_t)v12 > *(_QWORD *)v8 + *(_QWORD *)(v8 + 8) - 4)
  {
    v13 = 0;
    goto LABEL_4;
  }
  v13 = *v12;
  *(_DWORD *)(v8 + 72) = v11 + 4;
  if (v13 <= 1)
  {
LABEL_4:
    v14 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19C277550;
    *(_DWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 84) = 0x2000000001;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v13 - 2 > 3)
    sub_19C2210D4(38);
  sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v13 == 3 || v13 == 5)
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
LABEL_6:
  v15 = *(_DWORD *)(v7 + 88);
  if (v15 != sub_19C2210AC())
    sub_19C2210D4(33);
  v16 = *(_DWORD *)(v7 + 84);
  if ((v16 & 0xFFFFFFFE) != 2)
    sub_19C2210D4(34);
  if (v16 != 2)
    sub_19C2210D4(35);
  v17 = *(uint64_t **)(v7 + 96);
  v18 = *v17;
  v19 = v17[1];
  v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)v7 = 0;
    v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4)
      goto LABEL_11;
LABEL_14:
    *(_DWORD *)(v7 + 4) = 0;
    v86 = v9;
    v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v23 <= v18 + v19 - 4)
      goto LABEL_12;
LABEL_15:
    *(_DWORD *)(v7 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)v7 = *v20;
  v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  v18 = *v17;
  v19 = v17[1];
  v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4)
    goto LABEL_14;
LABEL_11:
  *(_DWORD *)(v7 + 4) = *v21;
  v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  v86 = v9;
  v23 = (_DWORD *)(*v17 + v22);
  if ((unint64_t)v23 > *v17 + v17[1] - 4)
    goto LABEL_15;
LABEL_12:
  *(_DWORD *)(v7 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
LABEL_16:
  v25 = (uint64_t **)(a2 + 8);
  sub_19C07C924(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v26 = (uint64_t **)(a3 + 8);
  sub_19C07C924(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v27 = *(_QWORD *)(v7 + 96);
  v28 = *(int *)(v27 + 72);
  v29 = (int *)(*(_QWORD *)v27 + v28);
  v90 = v7;
  if ((unint64_t)v29 <= *(_QWORD *)v27 + *(_QWORD *)(v27 + 8) - 4)
  {
    v30 = *v29;
    *(_DWORD *)(v27 + 72) = v28 + 4;
    v89 = v30;
    if (v30 >= 1)
    {
      for (i = 0; i != v89; ++i)
      {
        v32 = *(uint64_t **)(v7 + 96);
        v33 = *((_DWORD *)v32 + 18);
        v34 = *v32;
        v35 = (int *)(*v32 + v33);
        v36 = *v32 + v32[1] - 4;
        if ((unint64_t)v35 <= v36)
        {
          v37 = *v35;
          v33 += 4;
          *((_DWORD *)v32 + 18) = v33;
          v38 = (int *)(v34 + v33);
          if ((unint64_t)v38 <= v36)
          {
LABEL_23:
            v39 = *v38;
            *((_DWORD *)v32 + 18) = v33 + 4;
            v40 = *v25;
            v41 = (uint64_t **)(a2 + 8);
            v42 = (uint64_t **)(a2 + 8);
            if (*v25)
              goto LABEL_29;
            goto LABEL_33;
          }
        }
        else
        {
          v37 = 0;
          v38 = (int *)(v34 + v33);
          if ((unint64_t)v38 <= v36)
            goto LABEL_23;
        }
        v39 = 0;
        v40 = *v25;
        v41 = (uint64_t **)(a2 + 8);
        v42 = (uint64_t **)(a2 + 8);
        if (*v25)
        {
          while (1)
          {
LABEL_29:
            while (1)
            {
              v42 = (uint64_t **)v40;
              v43 = *((_DWORD *)v40 + 7);
              if (v37 >= v43)
                break;
              v40 = *v42;
              v41 = v42;
              if (!*v42)
                goto LABEL_33;
            }
            if (v43 >= v37)
              goto LABEL_36;
            v40 = v42[1];
            if (!v40)
            {
              v41 = v42 + 1;
              break;
            }
          }
        }
LABEL_33:
        v44 = (uint64_t *)v42;
        v42 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v42 + 7) = v37;
        *((_DWORD *)v42 + 8) = 0;
        *v42 = 0;
        v42[1] = 0;
        v42[2] = v44;
        *v41 = (uint64_t *)v42;
        v45 = **(_QWORD **)a2;
        v46 = (uint64_t *)v42;
        if (v45)
        {
          *(_QWORD *)a2 = v45;
          v46 = *v41;
        }
        sub_19C07CC40(*(uint64_t **)(a2 + 8), v46);
        ++*(_QWORD *)(a2 + 16);
LABEL_36:
        *((_DWORD *)v42 + 8) = v39;
        v47 = *v26;
        v48 = (uint64_t **)(a3 + 8);
        v49 = (uint64_t **)(a3 + 8);
        if (*v26)
        {
          while (1)
          {
            while (1)
            {
              v49 = (uint64_t **)v47;
              v50 = *((_DWORD *)v47 + 7);
              if (v39 >= v50)
                break;
              v47 = *v49;
              v48 = v49;
              if (!*v49)
                goto LABEL_43;
            }
            if (v50 >= v39)
              break;
            v47 = v49[1];
            if (!v47)
            {
              v48 = v49 + 1;
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          v51 = (uint64_t *)v49;
          v49 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v49 + 7) = v39;
          *((_DWORD *)v49 + 8) = 0;
          *v49 = 0;
          v49[1] = 0;
          v49[2] = v51;
          *v48 = (uint64_t *)v49;
          v52 = **(_QWORD **)a3;
          v53 = (uint64_t *)v49;
          if (v52)
          {
            *(_QWORD *)a3 = v52;
            v53 = *v48;
          }
          sub_19C07CC40(*(uint64_t **)(a3 + 8), v53);
          ++*(_QWORD *)(a3 + 16);
        }
        *((_DWORD *)v49 + 8) = v37;
        v7 = v90;
      }
    }
  }
  v54 = (uint64_t **)(a4 + 8);
  sub_19C07C924(a4, *(_QWORD **)(a4 + 8));
  *(_QWORD *)a4 = a4 + 8;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v55 = (uint64_t **)(a5 + 8);
  sub_19C07C924(a5, *(_QWORD **)(a5 + 8));
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v56 = *(_QWORD *)(v7 + 96);
  v57 = *(int *)(v56 + 72);
  v58 = (int *)(*(_QWORD *)v56 + v57);
  if ((unint64_t)v58 <= *(_QWORD *)v56 + *(_QWORD *)(v56 + 8) - 4)
  {
    v60 = *v58;
    *(_DWORD *)(v56 + 72) = v57 + 4;
    v59 = v86;
    if (v60 < 1)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v7 + 40) + 64))(*(_QWORD *)(v7 + 40), v56, v59, *(unsigned int *)(v7 + 72));
    v61 = 0;
    while (1)
    {
      v62 = *(uint64_t **)(v7 + 96);
      v63 = *((_DWORD *)v62 + 18);
      v64 = *v62;
      v65 = (int *)(*v62 + v63);
      v66 = *v62 + v62[1] - 4;
      if ((unint64_t)v65 <= v66)
      {
        v67 = *v65;
        v63 += 4;
        *((_DWORD *)v62 + 18) = v63;
        v68 = (int *)(v64 + v63);
        if ((unint64_t)v68 <= v66)
        {
LABEL_53:
          v69 = *v68;
          *((_DWORD *)v62 + 18) = v63 + 4;
          v70 = *v54;
          v71 = (uint64_t **)(a4 + 8);
          v72 = (uint64_t **)(a4 + 8);
          if (*v54)
            goto LABEL_59;
          goto LABEL_63;
        }
      }
      else
      {
        v67 = 0;
        v68 = (int *)(v64 + v63);
        if ((unint64_t)v68 <= v66)
          goto LABEL_53;
      }
      v69 = 0;
      v70 = *v54;
      v71 = (uint64_t **)(a4 + 8);
      v72 = (uint64_t **)(a4 + 8);
      if (*v54)
      {
        while (1)
        {
LABEL_59:
          while (1)
          {
            v72 = (uint64_t **)v70;
            v73 = *((_DWORD *)v70 + 7);
            if (v67 >= v73)
              break;
            v70 = *v72;
            v71 = v72;
            if (!*v72)
              goto LABEL_63;
          }
          if (v73 >= v67)
            goto LABEL_66;
          v70 = v72[1];
          if (!v70)
          {
            v71 = v72 + 1;
            break;
          }
        }
      }
LABEL_63:
      v74 = (uint64_t *)v72;
      v72 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v72 + 7) = v67;
      *((_DWORD *)v72 + 8) = 0;
      *v72 = 0;
      v72[1] = 0;
      v72[2] = v74;
      *v71 = (uint64_t *)v72;
      v75 = **(_QWORD **)a4;
      v76 = (uint64_t *)v72;
      if (v75)
      {
        *(_QWORD *)a4 = v75;
        v76 = *v71;
      }
      sub_19C07CC40(*(uint64_t **)(a4 + 8), v76);
      ++*(_QWORD *)(a4 + 16);
LABEL_66:
      *((_DWORD *)v72 + 8) = v69;
      v77 = *v55;
      v78 = (uint64_t **)(a5 + 8);
      v79 = (uint64_t **)(a5 + 8);
      if (*v55)
      {
        while (1)
        {
          while (1)
          {
            v79 = (uint64_t **)v77;
            v80 = *((_DWORD *)v77 + 7);
            if (v69 >= v80)
              break;
            v77 = *v79;
            v78 = v79;
            if (!*v79)
              goto LABEL_73;
          }
          if (v80 >= v69)
            break;
          v77 = v79[1];
          if (!v77)
          {
            v78 = v79 + 1;
            goto LABEL_73;
          }
        }
      }
      else
      {
LABEL_73:
        v81 = (uint64_t *)v79;
        v79 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v79 + 7) = v69;
        *((_DWORD *)v79 + 8) = 0;
        *v79 = 0;
        v79[1] = 0;
        v79[2] = v81;
        *v78 = (uint64_t *)v79;
        v82 = **(_QWORD **)a5;
        v83 = (uint64_t *)v79;
        if (v82)
        {
          *(_QWORD *)a5 = v82;
          v83 = *v78;
        }
        sub_19C07CC40(*(uint64_t **)(a5 + 8), v83);
        ++*(_QWORD *)(a5 + 16);
      }
      *((_DWORD *)v79 + 8) = v67;
      ++v61;
      v7 = v90;
      if (v61 == v60)
      {
        v56 = *(_QWORD *)(v90 + 96);
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v7 + 40) + 64))(*(_QWORD *)(v7 + 40), v56, v59, *(unsigned int *)(v7 + 72));
      }
    }
  }
  v59 = v86;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v7 + 40) + 64))(*(_QWORD *)(v7 + 40), v56, v59, *(unsigned int *)(v7 + 72));
}

uint64_t sub_19C169388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int i;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  int v37;
  int *v38;
  int v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t **v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t **v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  int *v65;
  unint64_t v66;
  int v67;
  int *v68;
  int v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t **v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t **v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v86;
  int v89;
  uint64_t v90;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 96);
  v9 = a1 + 64;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(v8 + 72);
  v12 = (unsigned int *)(*(_QWORD *)v8 + v11);
  if ((unint64_t)v12 > *(_QWORD *)v8 + *(_QWORD *)(v8 + 8) - 4)
  {
    v13 = 0;
    goto LABEL_4;
  }
  v13 = *v12;
  *(_DWORD *)(v8 + 72) = v11 + 4;
  if (v13 <= 1)
  {
LABEL_4:
    v14 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19C277550;
    *(_DWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 84) = 0x2000000001;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v13 - 2 > 3)
    sub_19C2210D4(38);
  sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v13 == 3 || v13 == 5)
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
LABEL_6:
  v15 = *(_DWORD *)(v7 + 88);
  if (v15 != sub_19C2210A4())
    sub_19C2210D4(33);
  v16 = *(_DWORD *)(v7 + 84);
  if ((v16 & 0xFFFFFFFE) != 2)
    sub_19C2210D4(34);
  if (v16 != 2)
    sub_19C2210D4(35);
  v17 = *(uint64_t **)(v7 + 96);
  v18 = *v17;
  v19 = v17[1];
  v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)v7 = 0;
    v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4)
      goto LABEL_11;
LABEL_14:
    *(_DWORD *)(v7 + 4) = 0;
    v86 = v9;
    v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v23 <= v18 + v19 - 4)
      goto LABEL_12;
LABEL_15:
    *(_DWORD *)(v7 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)v7 = *v20;
  v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  v18 = *v17;
  v19 = v17[1];
  v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4)
    goto LABEL_14;
LABEL_11:
  *(_DWORD *)(v7 + 4) = *v21;
  v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  v86 = v9;
  v23 = (_DWORD *)(*v17 + v22);
  if ((unint64_t)v23 > *v17 + v17[1] - 4)
    goto LABEL_15;
LABEL_12:
  *(_DWORD *)(v7 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
LABEL_16:
  v25 = (uint64_t **)(a2 + 8);
  sub_19C07C924(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v26 = (uint64_t **)(a3 + 8);
  sub_19C07C924(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v27 = *(_QWORD *)(v7 + 96);
  v28 = *(int *)(v27 + 72);
  v29 = (int *)(*(_QWORD *)v27 + v28);
  v90 = v7;
  if ((unint64_t)v29 <= *(_QWORD *)v27 + *(_QWORD *)(v27 + 8) - 4)
  {
    v30 = *v29;
    *(_DWORD *)(v27 + 72) = v28 + 4;
    v89 = v30;
    if (v30 >= 1)
    {
      for (i = 0; i != v89; ++i)
      {
        v32 = *(uint64_t **)(v7 + 96);
        v33 = *((_DWORD *)v32 + 18);
        v34 = *v32;
        v35 = (int *)(*v32 + v33);
        v36 = *v32 + v32[1] - 4;
        if ((unint64_t)v35 <= v36)
        {
          v37 = *v35;
          v33 += 4;
          *((_DWORD *)v32 + 18) = v33;
          v38 = (int *)(v34 + v33);
          if ((unint64_t)v38 <= v36)
          {
LABEL_23:
            v39 = *v38;
            *((_DWORD *)v32 + 18) = v33 + 4;
            v40 = *v25;
            v41 = (uint64_t **)(a2 + 8);
            v42 = (uint64_t **)(a2 + 8);
            if (*v25)
              goto LABEL_29;
            goto LABEL_33;
          }
        }
        else
        {
          v37 = 0;
          v38 = (int *)(v34 + v33);
          if ((unint64_t)v38 <= v36)
            goto LABEL_23;
        }
        v39 = 0;
        v40 = *v25;
        v41 = (uint64_t **)(a2 + 8);
        v42 = (uint64_t **)(a2 + 8);
        if (*v25)
        {
          while (1)
          {
LABEL_29:
            while (1)
            {
              v42 = (uint64_t **)v40;
              v43 = *((_DWORD *)v40 + 7);
              if (v37 >= v43)
                break;
              v40 = *v42;
              v41 = v42;
              if (!*v42)
                goto LABEL_33;
            }
            if (v43 >= v37)
              goto LABEL_36;
            v40 = v42[1];
            if (!v40)
            {
              v41 = v42 + 1;
              break;
            }
          }
        }
LABEL_33:
        v44 = (uint64_t *)v42;
        v42 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v42 + 7) = v37;
        *((_DWORD *)v42 + 8) = 0;
        *v42 = 0;
        v42[1] = 0;
        v42[2] = v44;
        *v41 = (uint64_t *)v42;
        v45 = **(_QWORD **)a2;
        v46 = (uint64_t *)v42;
        if (v45)
        {
          *(_QWORD *)a2 = v45;
          v46 = *v41;
        }
        sub_19C07CC40(*(uint64_t **)(a2 + 8), v46);
        ++*(_QWORD *)(a2 + 16);
LABEL_36:
        *((_DWORD *)v42 + 8) = v39;
        v47 = *v26;
        v48 = (uint64_t **)(a3 + 8);
        v49 = (uint64_t **)(a3 + 8);
        if (*v26)
        {
          while (1)
          {
            while (1)
            {
              v49 = (uint64_t **)v47;
              v50 = *((_DWORD *)v47 + 7);
              if (v39 >= v50)
                break;
              v47 = *v49;
              v48 = v49;
              if (!*v49)
                goto LABEL_43;
            }
            if (v50 >= v39)
              break;
            v47 = v49[1];
            if (!v47)
            {
              v48 = v49 + 1;
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          v51 = (uint64_t *)v49;
          v49 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v49 + 7) = v39;
          *((_DWORD *)v49 + 8) = 0;
          *v49 = 0;
          v49[1] = 0;
          v49[2] = v51;
          *v48 = (uint64_t *)v49;
          v52 = **(_QWORD **)a3;
          v53 = (uint64_t *)v49;
          if (v52)
          {
            *(_QWORD *)a3 = v52;
            v53 = *v48;
          }
          sub_19C07CC40(*(uint64_t **)(a3 + 8), v53);
          ++*(_QWORD *)(a3 + 16);
        }
        *((_DWORD *)v49 + 8) = v37;
        v7 = v90;
      }
    }
  }
  v54 = (uint64_t **)(a4 + 8);
  sub_19C07C924(a4, *(_QWORD **)(a4 + 8));
  *(_QWORD *)a4 = a4 + 8;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v55 = (uint64_t **)(a5 + 8);
  sub_19C07C924(a5, *(_QWORD **)(a5 + 8));
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v56 = *(_QWORD *)(v7 + 96);
  v57 = *(int *)(v56 + 72);
  v58 = (int *)(*(_QWORD *)v56 + v57);
  if ((unint64_t)v58 <= *(_QWORD *)v56 + *(_QWORD *)(v56 + 8) - 4)
  {
    v60 = *v58;
    *(_DWORD *)(v56 + 72) = v57 + 4;
    v59 = v86;
    if (v60 < 1)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v7 + 40) + 64))(*(_QWORD *)(v7 + 40), v56, v59, *(unsigned int *)(v7 + 72));
    v61 = 0;
    while (1)
    {
      v62 = *(uint64_t **)(v7 + 96);
      v63 = *((_DWORD *)v62 + 18);
      v64 = *v62;
      v65 = (int *)(*v62 + v63);
      v66 = *v62 + v62[1] - 4;
      if ((unint64_t)v65 <= v66)
      {
        v67 = *v65;
        v63 += 4;
        *((_DWORD *)v62 + 18) = v63;
        v68 = (int *)(v64 + v63);
        if ((unint64_t)v68 <= v66)
        {
LABEL_53:
          v69 = *v68;
          *((_DWORD *)v62 + 18) = v63 + 4;
          v70 = *v54;
          v71 = (uint64_t **)(a4 + 8);
          v72 = (uint64_t **)(a4 + 8);
          if (*v54)
            goto LABEL_59;
          goto LABEL_63;
        }
      }
      else
      {
        v67 = 0;
        v68 = (int *)(v64 + v63);
        if ((unint64_t)v68 <= v66)
          goto LABEL_53;
      }
      v69 = 0;
      v70 = *v54;
      v71 = (uint64_t **)(a4 + 8);
      v72 = (uint64_t **)(a4 + 8);
      if (*v54)
      {
        while (1)
        {
LABEL_59:
          while (1)
          {
            v72 = (uint64_t **)v70;
            v73 = *((_DWORD *)v70 + 7);
            if (v67 >= v73)
              break;
            v70 = *v72;
            v71 = v72;
            if (!*v72)
              goto LABEL_63;
          }
          if (v73 >= v67)
            goto LABEL_66;
          v70 = v72[1];
          if (!v70)
          {
            v71 = v72 + 1;
            break;
          }
        }
      }
LABEL_63:
      v74 = (uint64_t *)v72;
      v72 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v72 + 7) = v67;
      *((_DWORD *)v72 + 8) = 0;
      *v72 = 0;
      v72[1] = 0;
      v72[2] = v74;
      *v71 = (uint64_t *)v72;
      v75 = **(_QWORD **)a4;
      v76 = (uint64_t *)v72;
      if (v75)
      {
        *(_QWORD *)a4 = v75;
        v76 = *v71;
      }
      sub_19C07CC40(*(uint64_t **)(a4 + 8), v76);
      ++*(_QWORD *)(a4 + 16);
LABEL_66:
      *((_DWORD *)v72 + 8) = v69;
      v77 = *v55;
      v78 = (uint64_t **)(a5 + 8);
      v79 = (uint64_t **)(a5 + 8);
      if (*v55)
      {
        while (1)
        {
          while (1)
          {
            v79 = (uint64_t **)v77;
            v80 = *((_DWORD *)v77 + 7);
            if (v69 >= v80)
              break;
            v77 = *v79;
            v78 = v79;
            if (!*v79)
              goto LABEL_73;
          }
          if (v80 >= v69)
            break;
          v77 = v79[1];
          if (!v77)
          {
            v78 = v79 + 1;
            goto LABEL_73;
          }
        }
      }
      else
      {
LABEL_73:
        v81 = (uint64_t *)v79;
        v79 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v79 + 7) = v69;
        *((_DWORD *)v79 + 8) = 0;
        *v79 = 0;
        v79[1] = 0;
        v79[2] = v81;
        *v78 = (uint64_t *)v79;
        v82 = **(_QWORD **)a5;
        v83 = (uint64_t *)v79;
        if (v82)
        {
          *(_QWORD *)a5 = v82;
          v83 = *v78;
        }
        sub_19C07CC40(*(uint64_t **)(a5 + 8), v83);
        ++*(_QWORD *)(a5 + 16);
      }
      *((_DWORD *)v79 + 8) = v67;
      ++v61;
      v7 = v90;
      if (v61 == v60)
      {
        v56 = *(_QWORD *)(v90 + 96);
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v7 + 40) + 64))(*(_QWORD *)(v7 + 40), v56, v59, *(unsigned int *)(v7 + 72));
      }
    }
  }
  v59 = v86;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v7 + 40) + 64))(*(_QWORD *)(v7 + 40), v56, v59, *(unsigned int *)(v7 + 72));
}

uint64_t sub_19C169A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  int i;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  int *v53;
  unint64_t v54;
  int v55;
  int *v56;
  int v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t **v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v74;
  int v77;
  std::string __str;
  std::string *p_str;

  v8 = *(_QWORD *)(a1 + 96);
  v9 = a1 + 64;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(v8 + 72);
  v12 = (unsigned int *)(*(_QWORD *)v8 + v11);
  if ((unint64_t)v12 > *(_QWORD *)v8 + *(_QWORD *)(v8 + 8) - 4)
  {
    v13 = 0;
    goto LABEL_4;
  }
  v13 = *v12;
  *(_DWORD *)(v8 + 72) = v11 + 4;
  if (v13 <= 1)
  {
LABEL_4:
    v14 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19C277550;
    *(_DWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 84) = 0x2000000001;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v13 - 2 > 3)
    sub_19C2210D4(38);
  sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v13 == 3 || v13 == 5)
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
LABEL_6:
  v15 = *(_DWORD *)(a1 + 88);
  if (v15 != sub_19C2210B4())
    sub_19C2210D4(33);
  v16 = *(_DWORD *)(a1 + 84);
  if ((v16 & 0xFFFFFFFE) != 2)
    sub_19C2210D4(34);
  if (v16 != 3)
    sub_19C2210D4(35);
  v17 = *(uint64_t **)(a1 + 96);
  v18 = *v17;
  v19 = v17[1];
  v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)a1 = 0;
    v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4)
      goto LABEL_11;
LABEL_14:
    *(_DWORD *)(a1 + 4) = 0;
    v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    v74 = v9;
    if ((unint64_t)v23 <= v18 + v19 - 4)
      goto LABEL_12;
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)a1 = *v20;
  v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  v18 = *v17;
  v19 = v17[1];
  v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4)
    goto LABEL_14;
LABEL_11:
  *(_DWORD *)(a1 + 4) = *v21;
  v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  v23 = (_DWORD *)(*v17 + v22);
  v74 = v9;
  if ((unint64_t)v23 > *v17 + v17[1] - 4)
    goto LABEL_15;
LABEL_12:
  *(_DWORD *)(a1 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
LABEL_16:
  sub_19C098FBC(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v25 = (uint64_t **)(a3 + 8);
  sub_19C166D48(a3, *(char **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v26 = *(_QWORD *)(a1 + 96);
  v27 = *(int *)(v26 + 72);
  v28 = (int *)(*(_QWORD *)v26 + v27);
  if ((unint64_t)v28 <= *(_QWORD *)v26 + *(_QWORD *)(v26 + 8) - 4)
  {
    v29 = *v28;
    *(_DWORD *)(v26 + 72) = v27 + 4;
    if (v29 >= 1)
    {
      v30 = v29;
      for (i = 0; i != v30; ++i)
      {
        memset(&__str, 0, sizeof(__str));
        sub_19C0A3D0C(*(_QWORD *)(a1 + 96), &__str);
        v32 = *(_QWORD *)(a1 + 96);
        v33 = *(int *)(v32 + 72);
        v34 = (int *)(*(_QWORD *)v32 + v33);
        if ((unint64_t)v34 <= *(_QWORD *)v32 + *(_QWORD *)(v32 + 8) - 4)
        {
          v35 = *v34;
          *(_DWORD *)(v32 + 72) = v33 + 4;
        }
        else
        {
          v35 = 0;
        }
        p_str = &__str;
        *((_DWORD *)sub_19C16A05C((uint64_t **)a2, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_19C27ADD0, (__int128 **)&p_str)+ 14) = v35;
        v36 = *v25;
        v37 = (uint64_t **)(a3 + 8);
        v38 = (uint64_t **)(a3 + 8);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              v38 = (uint64_t **)v36;
              v39 = *((_DWORD *)v36 + 8);
              if (v35 >= v39)
                break;
              v36 = *v38;
              v37 = v38;
              if (!*v38)
                goto LABEL_30;
            }
            if (v39 >= v35)
              break;
            v36 = v38[1];
            if (!v36)
            {
              v37 = v38 + 1;
              goto LABEL_30;
            }
          }
          v40 = (char *)v38;
        }
        else
        {
LABEL_30:
          v40 = (char *)operator new(0x40uLL);
          *((_DWORD *)v40 + 8) = v35;
          *((_QWORD *)v40 + 6) = 0;
          *((_QWORD *)v40 + 7) = 0;
          *((_QWORD *)v40 + 5) = 0;
          *(_QWORD *)v40 = 0;
          *((_QWORD *)v40 + 1) = 0;
          *((_QWORD *)v40 + 2) = v38;
          *v37 = (uint64_t *)v40;
          v41 = **(_QWORD **)a3;
          v42 = (uint64_t *)v40;
          if (v41)
          {
            *(_QWORD *)a3 = v41;
            v42 = *v37;
          }
          sub_19C07CC40(*(uint64_t **)(a3 + 8), v42);
          ++*(_QWORD *)(a3 + 16);
        }
        std::string::operator=((std::string *)(v40 + 40), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  v43 = (uint64_t **)(a4 + 8);
  sub_19C07C924(a4, *(_QWORD **)(a4 + 8));
  *(_QWORD *)a4 = a4 + 8;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v44 = (uint64_t **)(a5 + 8);
  sub_19C07C924(a5, *(_QWORD **)(a5 + 8));
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v45 = *(_QWORD *)(a1 + 96);
  v46 = *(int *)(v45 + 72);
  v47 = (int *)(*(_QWORD *)v45 + v46);
  if ((unint64_t)v47 <= *(_QWORD *)v45 + *(_QWORD *)(v45 + 8) - 4)
  {
    v48 = *v47;
    *(_DWORD *)(v45 + 72) = v46 + 4;
    v77 = v48;
    if (v48 >= 1)
    {
      v49 = 0;
      while (1)
      {
        v50 = *(uint64_t **)(a1 + 96);
        v51 = *((_DWORD *)v50 + 18);
        v52 = *v50;
        v53 = (int *)(*v50 + v51);
        v54 = *v50 + v50[1] - 4;
        if ((unint64_t)v53 <= v54)
        {
          v55 = *v53;
          v51 += 4;
          *((_DWORD *)v50 + 18) = v51;
          v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54)
          {
LABEL_43:
            v57 = *v56;
            *((_DWORD *)v50 + 18) = v51 + 4;
            v58 = *v43;
            v59 = (uint64_t **)(a4 + 8);
            v60 = (uint64_t **)(a4 + 8);
            if (*v43)
              goto LABEL_49;
            goto LABEL_53;
          }
        }
        else
        {
          v55 = 0;
          v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54)
            goto LABEL_43;
        }
        v57 = 0;
        v58 = *v43;
        v59 = (uint64_t **)(a4 + 8);
        v60 = (uint64_t **)(a4 + 8);
        if (*v43)
        {
          while (1)
          {
LABEL_49:
            while (1)
            {
              v60 = (uint64_t **)v58;
              v61 = *((_DWORD *)v58 + 7);
              if (v55 >= v61)
                break;
              v58 = *v60;
              v59 = v60;
              if (!*v60)
                goto LABEL_53;
            }
            if (v61 >= v55)
              goto LABEL_56;
            v58 = v60[1];
            if (!v58)
            {
              v59 = v60 + 1;
              break;
            }
          }
        }
LABEL_53:
        v62 = (uint64_t *)v60;
        v60 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v60 + 7) = v55;
        *((_DWORD *)v60 + 8) = 0;
        *v60 = 0;
        v60[1] = 0;
        v60[2] = v62;
        *v59 = (uint64_t *)v60;
        v63 = **(_QWORD **)a4;
        v64 = (uint64_t *)v60;
        if (v63)
        {
          *(_QWORD *)a4 = v63;
          v64 = *v59;
        }
        sub_19C07CC40(*(uint64_t **)(a4 + 8), v64);
        ++*(_QWORD *)(a4 + 16);
LABEL_56:
        *((_DWORD *)v60 + 8) = v57;
        v65 = *v44;
        v66 = (uint64_t **)(a5 + 8);
        v67 = (uint64_t **)(a5 + 8);
        if (*v44)
        {
          while (1)
          {
            while (1)
            {
              v67 = (uint64_t **)v65;
              v68 = *((_DWORD *)v65 + 7);
              if (v57 >= v68)
                break;
              v65 = *v67;
              v66 = v67;
              if (!*v67)
                goto LABEL_63;
            }
            if (v68 >= v57)
              break;
            v65 = v67[1];
            if (!v65)
            {
              v66 = v67 + 1;
              goto LABEL_63;
            }
          }
        }
        else
        {
LABEL_63:
          v69 = (uint64_t *)v67;
          v67 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v67 + 7) = v57;
          *((_DWORD *)v67 + 8) = 0;
          *v67 = 0;
          v67[1] = 0;
          v67[2] = v69;
          *v66 = (uint64_t *)v67;
          v70 = **(_QWORD **)a5;
          v71 = (uint64_t *)v67;
          if (v70)
          {
            *(_QWORD *)a5 = v70;
            v71 = *v66;
          }
          sub_19C07CC40(*(uint64_t **)(a5 + 8), v71);
          ++*(_QWORD *)(a5 + 16);
        }
        *((_DWORD *)v67 + 8) = v55;
        if (++v49 == v77)
        {
          v45 = *(_QWORD *)(a1 + 96);
          return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
        }
      }
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
}

void sub_19C16A040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_19C16A05C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x40uLL);
    v24 = v23 + 32;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19C07C6E8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    *((_DWORD *)v23 + 14) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_19C07CC40(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19C16A1E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C16A1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  int i;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  int *v53;
  unint64_t v54;
  int v55;
  int *v56;
  int v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t **v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v74;
  int v77;
  std::string __str;
  std::string *p_str;

  v8 = *(_QWORD *)(a1 + 96);
  v9 = a1 + 64;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(v8 + 72);
  v12 = (unsigned int *)(*(_QWORD *)v8 + v11);
  if ((unint64_t)v12 > *(_QWORD *)v8 + *(_QWORD *)(v8 + 8) - 4)
  {
    v13 = 0;
    goto LABEL_4;
  }
  v13 = *v12;
  *(_DWORD *)(v8 + 72) = v11 + 4;
  if (v13 <= 1)
  {
LABEL_4:
    v14 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19C277550;
    *(_DWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 84) = 0x2000000001;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v13 - 2 > 3)
    sub_19C2210D4(38);
  sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v13 == 3 || v13 == 5)
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
LABEL_6:
  v15 = *(_DWORD *)(a1 + 88);
  if (v15 != sub_19C2210AC())
    sub_19C2210D4(33);
  v16 = *(_DWORD *)(a1 + 84);
  if ((v16 & 0xFFFFFFFE) != 2)
    sub_19C2210D4(34);
  if (v16 != 3)
    sub_19C2210D4(35);
  v17 = *(uint64_t **)(a1 + 96);
  v18 = *v17;
  v19 = v17[1];
  v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)a1 = 0;
    v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4)
      goto LABEL_11;
LABEL_14:
    *(_DWORD *)(a1 + 4) = 0;
    v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    v74 = v9;
    if ((unint64_t)v23 <= v18 + v19 - 4)
      goto LABEL_12;
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)a1 = *v20;
  v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  v18 = *v17;
  v19 = v17[1];
  v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4)
    goto LABEL_14;
LABEL_11:
  *(_DWORD *)(a1 + 4) = *v21;
  v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  v23 = (_DWORD *)(*v17 + v22);
  v74 = v9;
  if ((unint64_t)v23 > *v17 + v17[1] - 4)
    goto LABEL_15;
LABEL_12:
  *(_DWORD *)(a1 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
LABEL_16:
  sub_19C098FBC(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v25 = (uint64_t **)(a3 + 8);
  sub_19C166D48(a3, *(char **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v26 = *(_QWORD *)(a1 + 96);
  v27 = *(int *)(v26 + 72);
  v28 = (int *)(*(_QWORD *)v26 + v27);
  if ((unint64_t)v28 <= *(_QWORD *)v26 + *(_QWORD *)(v26 + 8) - 4)
  {
    v29 = *v28;
    *(_DWORD *)(v26 + 72) = v27 + 4;
    if (v29 >= 1)
    {
      v30 = v29;
      for (i = 0; i != v30; ++i)
      {
        memset(&__str, 0, sizeof(__str));
        sub_19C0A3D0C(*(_QWORD *)(a1 + 96), &__str);
        v32 = *(_QWORD *)(a1 + 96);
        v33 = *(int *)(v32 + 72);
        v34 = (int *)(*(_QWORD *)v32 + v33);
        if ((unint64_t)v34 <= *(_QWORD *)v32 + *(_QWORD *)(v32 + 8) - 4)
        {
          v35 = *v34;
          *(_DWORD *)(v32 + 72) = v33 + 4;
        }
        else
        {
          v35 = 0;
        }
        p_str = &__str;
        *((_DWORD *)sub_19C16A05C((uint64_t **)a2, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_19C27ADD0, (__int128 **)&p_str)+ 14) = v35;
        v36 = *v25;
        v37 = (uint64_t **)(a3 + 8);
        v38 = (uint64_t **)(a3 + 8);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              v38 = (uint64_t **)v36;
              v39 = *((_DWORD *)v36 + 8);
              if (v35 >= v39)
                break;
              v36 = *v38;
              v37 = v38;
              if (!*v38)
                goto LABEL_30;
            }
            if (v39 >= v35)
              break;
            v36 = v38[1];
            if (!v36)
            {
              v37 = v38 + 1;
              goto LABEL_30;
            }
          }
          v40 = (char *)v38;
        }
        else
        {
LABEL_30:
          v40 = (char *)operator new(0x40uLL);
          *((_DWORD *)v40 + 8) = v35;
          *((_QWORD *)v40 + 6) = 0;
          *((_QWORD *)v40 + 7) = 0;
          *((_QWORD *)v40 + 5) = 0;
          *(_QWORD *)v40 = 0;
          *((_QWORD *)v40 + 1) = 0;
          *((_QWORD *)v40 + 2) = v38;
          *v37 = (uint64_t *)v40;
          v41 = **(_QWORD **)a3;
          v42 = (uint64_t *)v40;
          if (v41)
          {
            *(_QWORD *)a3 = v41;
            v42 = *v37;
          }
          sub_19C07CC40(*(uint64_t **)(a3 + 8), v42);
          ++*(_QWORD *)(a3 + 16);
        }
        std::string::operator=((std::string *)(v40 + 40), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  v43 = (uint64_t **)(a4 + 8);
  sub_19C07C924(a4, *(_QWORD **)(a4 + 8));
  *(_QWORD *)a4 = a4 + 8;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v44 = (uint64_t **)(a5 + 8);
  sub_19C07C924(a5, *(_QWORD **)(a5 + 8));
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v45 = *(_QWORD *)(a1 + 96);
  v46 = *(int *)(v45 + 72);
  v47 = (int *)(*(_QWORD *)v45 + v46);
  if ((unint64_t)v47 <= *(_QWORD *)v45 + *(_QWORD *)(v45 + 8) - 4)
  {
    v48 = *v47;
    *(_DWORD *)(v45 + 72) = v46 + 4;
    v77 = v48;
    if (v48 >= 1)
    {
      v49 = 0;
      while (1)
      {
        v50 = *(uint64_t **)(a1 + 96);
        v51 = *((_DWORD *)v50 + 18);
        v52 = *v50;
        v53 = (int *)(*v50 + v51);
        v54 = *v50 + v50[1] - 4;
        if ((unint64_t)v53 <= v54)
        {
          v55 = *v53;
          v51 += 4;
          *((_DWORD *)v50 + 18) = v51;
          v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54)
          {
LABEL_43:
            v57 = *v56;
            *((_DWORD *)v50 + 18) = v51 + 4;
            v58 = *v43;
            v59 = (uint64_t **)(a4 + 8);
            v60 = (uint64_t **)(a4 + 8);
            if (*v43)
              goto LABEL_49;
            goto LABEL_53;
          }
        }
        else
        {
          v55 = 0;
          v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54)
            goto LABEL_43;
        }
        v57 = 0;
        v58 = *v43;
        v59 = (uint64_t **)(a4 + 8);
        v60 = (uint64_t **)(a4 + 8);
        if (*v43)
        {
          while (1)
          {
LABEL_49:
            while (1)
            {
              v60 = (uint64_t **)v58;
              v61 = *((_DWORD *)v58 + 7);
              if (v55 >= v61)
                break;
              v58 = *v60;
              v59 = v60;
              if (!*v60)
                goto LABEL_53;
            }
            if (v61 >= v55)
              goto LABEL_56;
            v58 = v60[1];
            if (!v58)
            {
              v59 = v60 + 1;
              break;
            }
          }
        }
LABEL_53:
        v62 = (uint64_t *)v60;
        v60 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v60 + 7) = v55;
        *((_DWORD *)v60 + 8) = 0;
        *v60 = 0;
        v60[1] = 0;
        v60[2] = v62;
        *v59 = (uint64_t *)v60;
        v63 = **(_QWORD **)a4;
        v64 = (uint64_t *)v60;
        if (v63)
        {
          *(_QWORD *)a4 = v63;
          v64 = *v59;
        }
        sub_19C07CC40(*(uint64_t **)(a4 + 8), v64);
        ++*(_QWORD *)(a4 + 16);
LABEL_56:
        *((_DWORD *)v60 + 8) = v57;
        v65 = *v44;
        v66 = (uint64_t **)(a5 + 8);
        v67 = (uint64_t **)(a5 + 8);
        if (*v44)
        {
          while (1)
          {
            while (1)
            {
              v67 = (uint64_t **)v65;
              v68 = *((_DWORD *)v65 + 7);
              if (v57 >= v68)
                break;
              v65 = *v67;
              v66 = v67;
              if (!*v67)
                goto LABEL_63;
            }
            if (v68 >= v57)
              break;
            v65 = v67[1];
            if (!v65)
            {
              v66 = v67 + 1;
              goto LABEL_63;
            }
          }
        }
        else
        {
LABEL_63:
          v69 = (uint64_t *)v67;
          v67 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v67 + 7) = v57;
          *((_DWORD *)v67 + 8) = 0;
          *v67 = 0;
          v67[1] = 0;
          v67[2] = v69;
          *v66 = (uint64_t *)v67;
          v70 = **(_QWORD **)a5;
          v71 = (uint64_t *)v67;
          if (v70)
          {
            *(_QWORD *)a5 = v70;
            v71 = *v66;
          }
          sub_19C07CC40(*(uint64_t **)(a5 + 8), v71);
          ++*(_QWORD *)(a5 + 16);
        }
        *((_DWORD *)v67 + 8) = v55;
        if (++v49 == v77)
        {
          v45 = *(_QWORD *)(a1 + 96);
          return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
        }
      }
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
}

void sub_19C16A810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C16A82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  int i;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  int *v53;
  unint64_t v54;
  int v55;
  int *v56;
  int v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t **v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t **v66;
  uint64_t **v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v74;
  int v77;
  std::string __str;
  std::string *p_str;

  v8 = *(_QWORD *)(a1 + 96);
  v9 = a1 + 64;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(v8 + 72);
  v12 = (unsigned int *)(*(_QWORD *)v8 + v11);
  if ((unint64_t)v12 > *(_QWORD *)v8 + *(_QWORD *)(v8 + 8) - 4)
  {
    v13 = 0;
    goto LABEL_4;
  }
  v13 = *v12;
  *(_DWORD *)(v8 + 72) = v11 + 4;
  if (v13 <= 1)
  {
LABEL_4:
    v14 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19C277550;
    *(_DWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 84) = 0x2000000001;
    if (!v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v13 - 2 > 3)
    sub_19C2210D4(38);
  sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v8, 1);
  if (v13 == 3 || v13 == 5)
LABEL_5:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
LABEL_6:
  v15 = *(_DWORD *)(a1 + 88);
  if (v15 != sub_19C2210A4())
    sub_19C2210D4(33);
  v16 = *(_DWORD *)(a1 + 84);
  if ((v16 & 0xFFFFFFFE) != 2)
    sub_19C2210D4(34);
  if (v16 != 3)
    sub_19C2210D4(35);
  v17 = *(uint64_t **)(a1 + 96);
  v18 = *v17;
  v19 = v17[1];
  v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)a1 = 0;
    v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4)
      goto LABEL_11;
LABEL_14:
    *(_DWORD *)(a1 + 4) = 0;
    v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    v74 = v9;
    if ((unint64_t)v23 <= v18 + v19 - 4)
      goto LABEL_12;
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  *(_DWORD *)a1 = *v20;
  v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  v18 = *v17;
  v19 = v17[1];
  v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4)
    goto LABEL_14;
LABEL_11:
  *(_DWORD *)(a1 + 4) = *v21;
  v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  v23 = (_DWORD *)(*v17 + v22);
  v74 = v9;
  if ((unint64_t)v23 > *v17 + v17[1] - 4)
    goto LABEL_15;
LABEL_12:
  *(_DWORD *)(a1 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
LABEL_16:
  sub_19C098FBC(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v25 = (uint64_t **)(a3 + 8);
  sub_19C166D48(a3, *(char **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v26 = *(_QWORD *)(a1 + 96);
  v27 = *(int *)(v26 + 72);
  v28 = (int *)(*(_QWORD *)v26 + v27);
  if ((unint64_t)v28 <= *(_QWORD *)v26 + *(_QWORD *)(v26 + 8) - 4)
  {
    v29 = *v28;
    *(_DWORD *)(v26 + 72) = v27 + 4;
    if (v29 >= 1)
    {
      v30 = v29;
      for (i = 0; i != v30; ++i)
      {
        memset(&__str, 0, sizeof(__str));
        sub_19C0A3D0C(*(_QWORD *)(a1 + 96), &__str);
        v32 = *(_QWORD *)(a1 + 96);
        v33 = *(int *)(v32 + 72);
        v34 = (int *)(*(_QWORD *)v32 + v33);
        if ((unint64_t)v34 <= *(_QWORD *)v32 + *(_QWORD *)(v32 + 8) - 4)
        {
          v35 = *v34;
          *(_DWORD *)(v32 + 72) = v33 + 4;
        }
        else
        {
          v35 = 0;
        }
        p_str = &__str;
        *((_DWORD *)sub_19C16A05C((uint64_t **)a2, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_19C27ADD0, (__int128 **)&p_str)+ 14) = v35;
        v36 = *v25;
        v37 = (uint64_t **)(a3 + 8);
        v38 = (uint64_t **)(a3 + 8);
        if (*v25)
        {
          while (1)
          {
            while (1)
            {
              v38 = (uint64_t **)v36;
              v39 = *((_DWORD *)v36 + 8);
              if (v35 >= v39)
                break;
              v36 = *v38;
              v37 = v38;
              if (!*v38)
                goto LABEL_30;
            }
            if (v39 >= v35)
              break;
            v36 = v38[1];
            if (!v36)
            {
              v37 = v38 + 1;
              goto LABEL_30;
            }
          }
          v40 = (char *)v38;
        }
        else
        {
LABEL_30:
          v40 = (char *)operator new(0x40uLL);
          *((_DWORD *)v40 + 8) = v35;
          *((_QWORD *)v40 + 6) = 0;
          *((_QWORD *)v40 + 7) = 0;
          *((_QWORD *)v40 + 5) = 0;
          *(_QWORD *)v40 = 0;
          *((_QWORD *)v40 + 1) = 0;
          *((_QWORD *)v40 + 2) = v38;
          *v37 = (uint64_t *)v40;
          v41 = **(_QWORD **)a3;
          v42 = (uint64_t *)v40;
          if (v41)
          {
            *(_QWORD *)a3 = v41;
            v42 = *v37;
          }
          sub_19C07CC40(*(uint64_t **)(a3 + 8), v42);
          ++*(_QWORD *)(a3 + 16);
        }
        std::string::operator=((std::string *)(v40 + 40), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  v43 = (uint64_t **)(a4 + 8);
  sub_19C07C924(a4, *(_QWORD **)(a4 + 8));
  *(_QWORD *)a4 = a4 + 8;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v44 = (uint64_t **)(a5 + 8);
  sub_19C07C924(a5, *(_QWORD **)(a5 + 8));
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v45 = *(_QWORD *)(a1 + 96);
  v46 = *(int *)(v45 + 72);
  v47 = (int *)(*(_QWORD *)v45 + v46);
  if ((unint64_t)v47 <= *(_QWORD *)v45 + *(_QWORD *)(v45 + 8) - 4)
  {
    v48 = *v47;
    *(_DWORD *)(v45 + 72) = v46 + 4;
    v77 = v48;
    if (v48 >= 1)
    {
      v49 = 0;
      while (1)
      {
        v50 = *(uint64_t **)(a1 + 96);
        v51 = *((_DWORD *)v50 + 18);
        v52 = *v50;
        v53 = (int *)(*v50 + v51);
        v54 = *v50 + v50[1] - 4;
        if ((unint64_t)v53 <= v54)
        {
          v55 = *v53;
          v51 += 4;
          *((_DWORD *)v50 + 18) = v51;
          v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54)
          {
LABEL_43:
            v57 = *v56;
            *((_DWORD *)v50 + 18) = v51 + 4;
            v58 = *v43;
            v59 = (uint64_t **)(a4 + 8);
            v60 = (uint64_t **)(a4 + 8);
            if (*v43)
              goto LABEL_49;
            goto LABEL_53;
          }
        }
        else
        {
          v55 = 0;
          v56 = (int *)(v52 + v51);
          if ((unint64_t)v56 <= v54)
            goto LABEL_43;
        }
        v57 = 0;
        v58 = *v43;
        v59 = (uint64_t **)(a4 + 8);
        v60 = (uint64_t **)(a4 + 8);
        if (*v43)
        {
          while (1)
          {
LABEL_49:
            while (1)
            {
              v60 = (uint64_t **)v58;
              v61 = *((_DWORD *)v58 + 7);
              if (v55 >= v61)
                break;
              v58 = *v60;
              v59 = v60;
              if (!*v60)
                goto LABEL_53;
            }
            if (v61 >= v55)
              goto LABEL_56;
            v58 = v60[1];
            if (!v58)
            {
              v59 = v60 + 1;
              break;
            }
          }
        }
LABEL_53:
        v62 = (uint64_t *)v60;
        v60 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v60 + 7) = v55;
        *((_DWORD *)v60 + 8) = 0;
        *v60 = 0;
        v60[1] = 0;
        v60[2] = v62;
        *v59 = (uint64_t *)v60;
        v63 = **(_QWORD **)a4;
        v64 = (uint64_t *)v60;
        if (v63)
        {
          *(_QWORD *)a4 = v63;
          v64 = *v59;
        }
        sub_19C07CC40(*(uint64_t **)(a4 + 8), v64);
        ++*(_QWORD *)(a4 + 16);
LABEL_56:
        *((_DWORD *)v60 + 8) = v57;
        v65 = *v44;
        v66 = (uint64_t **)(a5 + 8);
        v67 = (uint64_t **)(a5 + 8);
        if (*v44)
        {
          while (1)
          {
            while (1)
            {
              v67 = (uint64_t **)v65;
              v68 = *((_DWORD *)v65 + 7);
              if (v57 >= v68)
                break;
              v65 = *v67;
              v66 = v67;
              if (!*v67)
                goto LABEL_63;
            }
            if (v68 >= v57)
              break;
            v65 = v67[1];
            if (!v65)
            {
              v66 = v67 + 1;
              goto LABEL_63;
            }
          }
        }
        else
        {
LABEL_63:
          v69 = (uint64_t *)v67;
          v67 = (uint64_t **)operator new(0x28uLL);
          *((_DWORD *)v67 + 7) = v57;
          *((_DWORD *)v67 + 8) = 0;
          *v67 = 0;
          v67[1] = 0;
          v67[2] = v69;
          *v66 = (uint64_t *)v67;
          v70 = **(_QWORD **)a5;
          v71 = (uint64_t *)v67;
          if (v70)
          {
            *(_QWORD *)a5 = v70;
            v71 = *v66;
          }
          sub_19C07CC40(*(uint64_t **)(a5 + 8), v71);
          ++*(_QWORD *)(a5 + 16);
        }
        *((_DWORD *)v67 + 8) = v55;
        if (++v49 == v77)
        {
          v45 = *(_QWORD *)(a1 + 96);
          return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
        }
      }
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), v45, v74, *(unsigned int *)(a1 + 72));
}

void sub_19C16AE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C16AE60(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_19C07D71C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19C16B16C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_19C16B180(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_19C098BC4(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (char *)*v6;
  v8 = v6;
  v9 = (char *)operator new(0x40uLL);
  v10 = v9 + 32;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_19C07C6E8(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a4;
    *((_QWORD *)v9 + 6) = *(_QWORD *)(a4 + 16);
  }
  *((_DWORD *)v9 + 14) = *(_DWORD *)(a4 + 24);
  v11 = v15;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v11;
  *v8 = (uint64_t)v9;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  sub_19C07CC40(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_19C16B268(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C16B27C(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  v1 = *(_BYTE **)(a1 + 8);
  v2 = *(_BYTE **)a1;
  v3 = (uint64_t)&v1[-*(_QWORD *)a1];
  v4 = v3 >> 2;
  if (v3 >> 2 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2))
  {
    v6 = v1 - v2;
    if (v1 == v2)
    {
      v8 = 4 * v4;
      v9 = 4 * v4;
    }
    else
    {
      if (v3 < 0)
        sub_19C07C7FC();
      v7 = (char *)operator new((size_t)&v1[-*(_QWORD *)a1]);
      v8 = (uint64_t)&v7[4 * v4];
      if ((unint64_t)(v6 - 4) >= 0x2C)
      {
        v9 = (uint64_t)&v7[4 * v4];
        if ((unint64_t)(&v1[-v3] - v7) >= 0x20)
        {
          v10 = ((unint64_t)(v6 - 4) >> 2) + 1;
          v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
          v12 = &v1[-v11];
          v9 = v8 - v11;
          v13 = &v7[4 * v4 - 16];
          v14 = (__int128 *)(v1 - 16);
          v15 = v10 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v16 = *v14;
            *((_OWORD *)v13 - 1) = *(v14 - 1);
            *(_OWORD *)v13 = v16;
            v13 -= 32;
            v14 -= 2;
            v15 -= 8;
          }
          while (v15);
          v1 = v12;
          if (v10 == (v10 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_12;
        }
      }
      else
      {
        v9 = (uint64_t)&v7[4 * v4];
      }
      do
      {
        v17 = *((_DWORD *)v1 - 1);
        v1 -= 4;
        *(_DWORD *)(v9 - 4) = v17;
        v9 -= 4;
      }
      while (v1 != v2);
    }
LABEL_12:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    if (v2)
      operator delete(v2);
  }
}

float *sub_19C16B3A4(float *result, float *a2, float *a3)
{
  unint64_t v3;
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  int v8;
  int v9;
  unint64_t v10;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  unint64_t v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float v25;
  unint64_t v26;
  float v27;
  int v28;
  float v29;
  float v30;
  int v31;
  unint64_t v32;
  float v33;
  float v34;
  float *v35;
  float v36;
  float v37;
  unint64_t v38;
  float v39;
  float v40;
  float v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  float v49;
  float v50;
  float v51;
  int v52;
  float *v53;
  float *v54;
  float *v55;
  int v56;
  int v57;
  int v58;
  float v59;
  float v60;
  int v61;
  float v62;

  while (a3 != a2)
  {
    v3 = ((char *)a3 - (char *)result) >> 3;
    if (v3 < 2)
      return result;
    if (v3 == 3)
    {
      v49 = result[3];
      v50 = result[1];
      v51 = *(a3 - 1);
      if (v49 <= v50)
      {
        if (v51 > v49)
        {
          v58 = *((_DWORD *)result + 2);
          result[2] = *(a3 - 2);
          *((_DWORD *)a3 - 2) = v58;
          result[3] = v51;
          *(a3 - 1) = v49;
          v59 = result[3];
          v60 = result[1];
          if (v59 > v60)
          {
            v61 = *(_DWORD *)result;
            *result = result[2];
            *((_DWORD *)result + 2) = v61;
            result[1] = v59;
            result[3] = v60;
          }
        }
      }
      else
      {
        v52 = *(_DWORD *)result;
        if (v51 <= v49)
        {
          *result = result[2];
          *((_DWORD *)result + 2) = v52;
          result[1] = v49;
          result[3] = v50;
          v62 = *(a3 - 1);
          if (v62 > v50)
          {
            result[2] = *(a3 - 2);
            *((_DWORD *)a3 - 2) = v52;
            result[3] = v62;
            *(a3 - 1) = v50;
          }
        }
        else
        {
          *result = *(a3 - 2);
          *((_DWORD *)a3 - 2) = v52;
          result[1] = v51;
          *(a3 - 1) = v50;
        }
      }
      return result;
    }
    if (v3 == 2)
    {
      v46 = *(a3 - 1);
      v47 = result[1];
      if (v46 > v47)
      {
        v48 = *(_DWORD *)result;
        *result = *(a3 - 2);
        *((_DWORD *)a3 - 2) = v48;
        result[1] = v46;
        *(a3 - 1) = v47;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 2)
      {
        v53 = result;
        result += 2;
        if (v53 != a3 && result != a3)
        {
          v54 = result;
          v55 = v53;
          do
          {
            if (v54[1] > v55[1])
              v55 = v54;
            v54 += 2;
          }
          while (v54 != a3);
          if (v55 != v53)
          {
            v56 = *(_DWORD *)v53;
            *v53 = *v55;
            *(_DWORD *)v55 = v56;
            v57 = *((_DWORD *)v53 + 1);
            v53[1] = v55[1];
            *((_DWORD *)v55 + 1) = v57;
          }
        }
      }
      return result;
    }
    v4 = (unint64_t)&result[2 * (v3 >> 1)];
    v5 = *(float *)(v4 + 4);
    v6 = result[1];
    v7 = *(a3 - 1);
    if (v5 <= v6)
    {
      if (v7 <= v5)
      {
        v9 = 0;
        v10 = (unint64_t)(a3 - 2);
        v11 = result[1];
        v12 = *(float *)(v4 + 4);
        if (v11 <= v12)
          goto LABEL_26;
        goto LABEL_9;
      }
      v21 = *(float *)v4;
      *(float *)v4 = *(a3 - 2);
      *(a3 - 2) = v21;
      *(float *)(v4 + 4) = v7;
      *(a3 - 1) = v5;
      v22 = *(float *)(v4 + 4);
      v23 = result[1];
      if (v22 > v23)
      {
        v24 = *(_DWORD *)result;
        *result = *(float *)v4;
        *(_DWORD *)v4 = v24;
        result[1] = v22;
        *(float *)(v4 + 4) = v23;
        goto LABEL_23;
      }
    }
    else
    {
      v8 = *(_DWORD *)result;
      if (v7 > v5)
      {
        *result = *(a3 - 2);
        *((_DWORD *)a3 - 2) = v8;
        result[1] = v7;
        *(a3 - 1) = v6;
        v9 = 1;
        v10 = (unint64_t)(a3 - 2);
        v11 = result[1];
        v12 = *(float *)(v4 + 4);
        if (v11 <= v12)
          goto LABEL_26;
        goto LABEL_9;
      }
      *result = *(float *)v4;
      *(_DWORD *)v4 = v8;
      result[1] = v5;
      *(float *)(v4 + 4) = v6;
      v25 = *(a3 - 1);
      if (v25 > v6)
      {
        *(float *)v4 = *(a3 - 2);
        *((_DWORD *)a3 - 2) = v8;
        *(float *)(v4 + 4) = v25;
        *(a3 - 1) = v6;
LABEL_23:
        v9 = 2;
        v10 = (unint64_t)(a3 - 2);
        v11 = result[1];
        v12 = *(float *)(v4 + 4);
        if (v11 <= v12)
          goto LABEL_26;
        goto LABEL_9;
      }
    }
    v9 = 1;
    v10 = (unint64_t)(a3 - 2);
    v11 = result[1];
    v12 = *(float *)(v4 + 4);
    if (v11 <= v12)
    {
LABEL_26:
      v26 = v10;
      while (1)
      {
        v13 = v26 - 8;
        if ((float *)(v26 - 8) == result)
          break;
        v27 = *(float *)(v26 - 4);
        v26 -= 8;
        if (v27 > v12)
        {
          v28 = *(_DWORD *)result;
          *result = *(float *)v13;
          *(_DWORD *)v13 = v28;
          result[1] = v27;
          *(float *)(v13 + 4) = v11;
          ++v9;
          v14 = (unint64_t)(result + 2);
          if ((unint64_t)(result + 2) < v13)
            goto LABEL_10;
          goto LABEL_30;
        }
      }
      v35 = result + 2;
      v36 = *(a3 - 1);
      if (v11 <= v36)
      {
        if (v35 == (float *)v10)
          return result;
        while (1)
        {
          v37 = v35[1];
          if (v11 > v37)
            break;
          v35 += 2;
          if (v35 == (float *)v10)
            return result;
        }
        v41 = *v35;
        *v35 = *(a3 - 2);
        *(a3 - 2) = v41;
        v35[1] = v36;
        *(a3 - 1) = v37;
        v35 += 2;
      }
      if (v35 == (float *)v10)
        return result;
      while (1)
      {
        v43 = result[1];
        do
        {
          v32 = (unint64_t)v35;
          v44 = v35[1];
          v35 += 2;
        }
        while (v43 <= v44);
        do
        {
          v45 = *(float *)(v10 - 4);
          v10 -= 8;
        }
        while (v43 > v45);
        if (v32 >= v10)
          break;
        v42 = *(_DWORD *)v32;
        *(_DWORD *)v32 = *(_DWORD *)v10;
        *(_DWORD *)v10 = v42;
        *(float *)(v32 + 4) = v45;
        *(float *)(v10 + 4) = v44;
      }
      if (v32 > (unint64_t)a2)
        return result;
      goto LABEL_63;
    }
LABEL_9:
    v13 = v10;
    v14 = (unint64_t)(result + 2);
    if ((unint64_t)(result + 2) >= v13)
    {
LABEL_30:
      v17 = v14;
    }
    else
    {
LABEL_10:
      v15 = v14;
      while (1)
      {
        v16 = *(float *)(v4 + 4);
        do
        {
          v17 = v15;
          v18 = *(float *)(v15 + 4);
          v15 += 8;
        }
        while (v18 > v16);
        do
        {
          v19 = *(float *)(v13 - 4);
          v13 -= 8;
        }
        while (v19 <= v16);
        if (v17 >= v13)
          break;
        v20 = *(_DWORD *)v17;
        *(_DWORD *)v17 = *(_DWORD *)v13;
        *(_DWORD *)v13 = v20;
        *(float *)(v17 + 4) = v19;
        *(float *)(v13 + 4) = v18;
        ++v9;
        if (v4 == v17)
          v4 = v13;
      }
    }
    if (v17 != v4)
    {
      v29 = *(float *)(v4 + 4);
      v30 = *(float *)(v17 + 4);
      if (v29 > v30)
      {
        v31 = *(_DWORD *)v17;
        *(_DWORD *)v17 = *(_DWORD *)v4;
        *(_DWORD *)v4 = v31;
        *(float *)(v17 + 4) = v29;
        *(float *)(v4 + 4) = v30;
        ++v9;
      }
    }
    if ((float *)v17 == a2)
      return result;
    if (!v9)
    {
      if (v17 <= (unint64_t)a2)
      {
        v38 = v17 + 8;
        while ((float *)v38 != a3)
        {
          v39 = *(float *)(v38 + 4);
          v40 = *(float *)(v38 - 4);
          v38 += 8;
          if (v39 > v40)
            goto LABEL_36;
        }
      }
      else
      {
        while (v14 != v17)
        {
          v33 = *(float *)(v14 + 4);
          v34 = *(float *)(v14 - 4);
          v14 += 8;
          if (v33 > v34)
            goto LABEL_36;
        }
      }
      return result;
    }
LABEL_36:
    if (v17 <= (unint64_t)a2)
    {
      v32 = v17 + 8;
    }
    else
    {
      a3 = (float *)v17;
      v32 = (unint64_t)result;
    }
LABEL_63:
    result = (float *)v32;
  }
  return result;
}

float *sub_19C16B874(float *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  int v33;
  int v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  float *v58;
  float *v59;
  char *v60;
  char *v61;
  float v62;
  char *v63;
  float v64;
  float *v65;
  float v66;
  int v67;
  float v68;
  float v69;
  BOOL v70;
  float *v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  char *v76;
  float v77;
  float v78;
  int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  int v91;
  float v92;
  float v93;
  int v94;
  int v95;
  float v96;
  int v97;
  float v98;
  float v99;
  char *v100;
  BOOL v102;
  uint64_t v103;
  float *v104;
  float *v105;
  float v106;
  unint64_t v107;
  int v108;
  float *v109;
  int v110;
  int v111;
  float *v112;
  float v113;
  float v114;
  int v115;
  float *v116;
  float v117;
  float v118;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v82 = *((float *)a2 - 1);
        v83 = v10[1];
        if (v82 > v83)
        {
          v84 = *v10;
          *v10 = *((float *)a2 - 2);
          *((float *)a2 - 2) = v84;
          v10[1] = v82;
          *((float *)a2 - 1) = v83;
        }
        return result;
      case 3uLL:
        v85 = v10[3];
        v86 = v10[1];
        v87 = *((float *)a2 - 1);
        if (v85 <= v86)
        {
          if (v87 > v85)
          {
            v110 = *((_DWORD *)v10 + 2);
            v10[2] = *((float *)a2 - 2);
            *((_DWORD *)a2 - 2) = v110;
            v10[3] = v87;
            *((float *)a2 - 1) = v85;
            v92 = v10[3];
            v98 = v10[1];
            if (v92 > v98)
            {
              v111 = *(_DWORD *)v10;
              *v10 = v10[2];
              *((_DWORD *)v10 + 2) = v111;
              goto LABEL_133;
            }
          }
        }
        else
        {
          v88 = *(_DWORD *)v10;
          if (v87 <= v85)
          {
            *v10 = v10[2];
            *((_DWORD *)v10 + 2) = v88;
            v10[1] = v85;
            v10[3] = v86;
            v118 = *((float *)a2 - 1);
            if (v118 <= v86)
              return result;
            v10[2] = *((float *)a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v10[3] = v118;
          }
          else
          {
            *v10 = *((float *)a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v10[1] = v87;
          }
          *((float *)a2 - 1) = v86;
        }
        return result;
      case 4uLL:
        return sub_19C08997C(v10, v10 + 2, v10 + 4, (float *)a2 - 2);
      case 5uLL:
        result = sub_19C08997C(v10, v10 + 2, v10 + 4, v10 + 6);
        v89 = *((float *)a2 - 1);
        v90 = v10[7];
        if (v89 > v90)
        {
          v91 = *((_DWORD *)v10 + 6);
          v10[6] = *((float *)a2 - 2);
          *((_DWORD *)a2 - 2) = v91;
          v10[7] = v89;
          *((float *)a2 - 1) = v90;
          v92 = v10[7];
          v93 = v10[5];
          if (v92 > v93)
          {
            v94 = *((_DWORD *)v10 + 4);
            v95 = *((_DWORD *)v10 + 6);
            *((_DWORD *)v10 + 4) = v95;
            *((_DWORD *)v10 + 6) = v94;
            v10[5] = v92;
            v10[7] = v93;
            v96 = v10[3];
            if (v92 > v96)
            {
              v97 = *((_DWORD *)v10 + 2);
              *((_DWORD *)v10 + 2) = v95;
              *((_DWORD *)v10 + 4) = v97;
              v10[3] = v92;
              v10[5] = v96;
              v98 = v10[1];
              if (v92 > v98)
              {
                v99 = *v10;
                *(_DWORD *)v10 = v95;
                v10[2] = v99;
LABEL_133:
                v10[1] = v92;
                v10[3] = v98;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (float *)a2)
              return (float *)sub_19C16C59C((char *)v10, a2, (int *)a2);
            return result;
          }
          v13 = &v10[2 * (v12 >> 1)];
          v14 = *((float *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = v10[1];
            v19 = v13[1];
            if (v18 <= v19)
            {
              if (v14 > v18)
              {
                v25 = *v10;
                *v10 = *((float *)a2 - 2);
                *((float *)a2 - 2) = v25;
                v10[1] = v14;
                *((float *)a2 - 1) = v18;
                v26 = v10[1];
                v27 = v13[1];
                if (v26 > v27)
                {
                  v28 = *v13;
                  *v13 = *v10;
                  *v10 = v28;
                  v13[1] = v26;
                  v10[1] = v27;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
            }
            else
            {
              v20 = *(_DWORD *)v13;
              if (v14 <= v18)
              {
                *v13 = *v10;
                *(_DWORD *)v10 = v20;
                v13[1] = v18;
                v10[1] = v19;
                v38 = *((float *)a2 - 1);
                if (v38 <= v19)
                  goto LABEL_32;
                *v10 = *((float *)a2 - 2);
                *((_DWORD *)a2 - 2) = v20;
                v10[1] = v38;
              }
              else
              {
                *v13 = *((float *)a2 - 2);
                *((_DWORD *)a2 - 2) = v20;
                v13[1] = v14;
              }
              *((float *)a2 - 1) = v19;
            }
LABEL_32:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v40 = v10[1];
            v39 = *v10;
            if (*(v10 - 1) > v40)
              goto LABEL_58;
            if (v40 <= *((float *)a2 - 1))
            {
              v73 = v10 + 2;
              do
              {
                v10 = v73;
                if (v73 >= (float *)a2)
                  break;
                v74 = v73[1];
                v73 += 2;
              }
              while (v40 <= v74);
            }
            else
            {
              v71 = v10;
              do
              {
                v10 = v71 + 2;
                v72 = v71[3];
                v71 += 2;
              }
              while (v40 <= v72);
            }
            v75 = (float *)a2;
            if (v10 < (float *)a2)
            {
              v76 = a2;
              do
              {
                v75 = (float *)(v76 - 8);
                v77 = *((float *)v76 - 1);
                v76 -= 8;
              }
              while (v40 > v77);
            }
            while (v10 < v75)
            {
              v78 = *v10;
              *v10 = *v75;
              *v75 = v78;
              v79 = *((_DWORD *)v10 + 1);
              v10[1] = v75[1];
              *((_DWORD *)v75 + 1) = v79;
              do
              {
                v80 = v10[3];
                v10 += 2;
              }
              while (v40 <= v80);
              do
              {
                v81 = *(v75 - 1);
                v75 -= 2;
              }
              while (v40 > v81);
            }
            if (v10 - 2 != v9)
            {
              *v9 = *(v10 - 2);
              v9[1] = *(v10 - 1);
            }
            a5 = 0;
            *(v10 - 2) = v39;
            *(v10 - 1) = v40;
            continue;
          }
          v15 = v13[1];
          v16 = v10[1];
          if (v15 <= v16)
          {
            if (v14 > v15)
            {
              v21 = *(_DWORD *)v13;
              *v13 = *((float *)a2 - 2);
              *((_DWORD *)a2 - 2) = v21;
              v13[1] = v14;
              *((float *)a2 - 1) = v15;
              v22 = v13[1];
              v23 = v10[1];
              if (v22 > v23)
              {
                v24 = *v10;
                *v10 = *v13;
                *v13 = v24;
                v10[1] = v22;
                v13[1] = v23;
              }
            }
          }
          else
          {
            v17 = *v10;
            if (v14 <= v15)
            {
              *v10 = *v13;
              *v13 = v17;
              v10[1] = v15;
              v13[1] = v16;
              v29 = *((float *)a2 - 1);
              if (v29 <= v16)
                goto LABEL_23;
              *v13 = *((float *)a2 - 2);
              *((float *)a2 - 2) = v17;
              v13[1] = v29;
            }
            else
            {
              *v10 = *((float *)a2 - 2);
              *((float *)a2 - 2) = v17;
              v10[1] = v14;
            }
            *((float *)a2 - 1) = v16;
          }
LABEL_23:
          v30 = *(v13 - 1);
          v31 = v10[3];
          v32 = *((float *)a2 - 3);
          if (v30 <= v31)
          {
            if (v32 > v30)
            {
              v34 = *((_DWORD *)v13 - 2);
              *(v13 - 2) = *((float *)a2 - 4);
              *((_DWORD *)a2 - 4) = v34;
              *(v13 - 1) = v32;
              *((float *)a2 - 3) = v30;
              v35 = *(v13 - 1);
              v36 = v10[3];
              if (v35 > v36)
              {
                v37 = *((_DWORD *)v10 + 2);
                v10[2] = *(v13 - 2);
                *((_DWORD *)v13 - 2) = v37;
                v10[3] = v35;
                *(v13 - 1) = v36;
              }
            }
          }
          else
          {
            v33 = *((_DWORD *)v10 + 2);
            if (v32 <= v30)
            {
              v10[2] = *(v13 - 2);
              *((_DWORD *)v13 - 2) = v33;
              v10[3] = v30;
              *(v13 - 1) = v31;
              v41 = *((float *)a2 - 3);
              if (v41 <= v31)
                goto LABEL_37;
              *(v13 - 2) = *((float *)a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              *(v13 - 1) = v41;
            }
            else
            {
              v10[2] = *((float *)a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              v10[3] = v32;
            }
            *((float *)a2 - 3) = v31;
          }
LABEL_37:
          v42 = v13[3];
          v43 = v10[5];
          v44 = *((float *)a2 - 5);
          if (v42 <= v43)
          {
            if (v44 > v42)
            {
              v46 = *((_DWORD *)v13 + 2);
              v13[2] = *((float *)a2 - 6);
              *((_DWORD *)a2 - 6) = v46;
              v13[3] = v44;
              *((float *)a2 - 5) = v42;
              v47 = v13[3];
              v48 = v10[5];
              if (v47 > v48)
              {
                v49 = *((_DWORD *)v10 + 4);
                v10[4] = v13[2];
                *((_DWORD *)v13 + 2) = v49;
                v10[5] = v47;
                v13[3] = v48;
              }
            }
          }
          else
          {
            v45 = *((_DWORD *)v10 + 4);
            if (v44 <= v42)
            {
              v10[4] = v13[2];
              *((_DWORD *)v13 + 2) = v45;
              v10[5] = v42;
              v13[3] = v43;
              v50 = *((float *)a2 - 5);
              if (v50 <= v43)
                goto LABEL_46;
              v13[2] = *((float *)a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v13[3] = v50;
            }
            else
            {
              v10[4] = *((float *)a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v10[5] = v44;
            }
            *((float *)a2 - 5) = v43;
          }
LABEL_46:
          v51 = v13[1];
          v52 = *(v13 - 1);
          v53 = v13[3];
          if (v51 <= v52)
          {
            v54 = *v13;
            if (v53 <= v51)
              goto LABEL_52;
            v55 = v13[2];
            *v13 = v55;
            v13[2] = v54;
            v13[1] = v53;
            v13[3] = v51;
            if (v53 > v52)
            {
              v54 = *(v13 - 2);
              *(v13 - 2) = v55;
              *v13 = v54;
              *(v13 - 1) = v53;
              v13[1] = v52;
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          v54 = *(v13 - 2);
          if (v53 > v51)
          {
            *(v13 - 2) = v13[2];
            v13[2] = v54;
            *(v13 - 1) = v53;
            v13[3] = v52;
            v54 = *v13;
LABEL_52:
            v52 = v51;
            goto LABEL_56;
          }
          *(v13 - 2) = *v13;
          *v13 = v54;
          *(v13 - 1) = v51;
          v13[1] = v52;
          if (v53 > v52)
          {
            v55 = v13[2];
            *v13 = v55;
            v13[2] = v54;
            v13[1] = v53;
            v13[3] = v52;
LABEL_55:
            v52 = v53;
            v54 = v55;
          }
LABEL_56:
          v56 = *v10;
          *v10 = v54;
          *v13 = v56;
          v57 = *((_DWORD *)v10 + 1);
          v10[1] = v52;
          *((_DWORD *)v13 + 1) = v57;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v39 = *v10;
          v40 = v10[1];
LABEL_58:
          v58 = v10;
          do
          {
            v59 = v58;
            v58 += 2;
          }
          while (v59[3] > v40);
          v60 = a2;
          if (v59 == v10)
          {
            v63 = a2;
            while (v58 < (float *)v63)
            {
              v61 = v63 - 8;
              v64 = *((float *)v63 - 1);
              v63 -= 8;
              if (v64 > v40)
                goto LABEL_66;
            }
            v61 = v63;
            v10 = v58;
          }
          else
          {
            do
            {
              v61 = v60 - 8;
              v62 = *((float *)v60 - 1);
              v60 -= 8;
            }
            while (v62 <= v40);
LABEL_66:
            v10 = v58;
            if (v58 < (float *)v61)
            {
              v65 = (float *)v61;
              do
              {
                v66 = *v10;
                *v10 = *v65;
                *v65 = v66;
                v67 = *((_DWORD *)v10 + 1);
                v10[1] = v65[1];
                *((_DWORD *)v65 + 1) = v67;
                do
                {
                  v68 = v10[3];
                  v10 += 2;
                }
                while (v68 > v40);
                do
                {
                  v69 = *(v65 - 1);
                  v65 -= 2;
                }
                while (v69 <= v40);
              }
              while (v10 < v65);
            }
          }
          if (v10 - 2 != v9)
          {
            *v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          *(v10 - 2) = v39;
          *(v10 - 1) = v40;
          if (v58 < (float *)v61)
            goto LABEL_77;
          v70 = sub_19C16C1F0(v9, v10 - 2);
          result = (float *)sub_19C16C1F0(v10, (float *)a2);
          if (!(_DWORD)result)
          {
            if (v70)
              continue;
LABEL_77:
            result = (float *)sub_19C16B874(v9, v10 - 2, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (char *)(v10 - 2);
          if (v70)
            return result;
          goto LABEL_2;
        }
        v100 = (char *)(v10 + 2);
        v102 = v10 == (float *)a2 || v100 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v102)
          {
            v103 = 0;
            v104 = v10;
            do
            {
              v106 = v104[3];
              if (v106 > v104[1])
              {
                v107 = 0;
                v108 = *(_DWORD *)v100;
                do
                {
                  v109 = &v104[v107 / 4];
                  v109[2] = v104[v107 / 4];
                  v109[3] = v104[v107 / 4 + 1];
                  if (v103 == v107)
                  {
                    v105 = v10;
                    goto LABEL_121;
                  }
                  v107 -= 8;
                }
                while (v106 > *(v109 - 1));
                v105 = (float *)&v100[v107];
LABEL_121:
                *(_DWORD *)v105 = v108;
                v105[1] = v106;
              }
              v100 += 8;
              v104 += 2;
              v103 -= 8;
            }
            while (v100 != a2);
          }
        }
        else if (!v102)
        {
          v112 = v10 + 1;
          do
          {
            v113 = v9[3];
            v114 = v9[1];
            v9 = (float *)v100;
            if (v113 > v114)
            {
              v115 = *(_DWORD *)v100;
              v116 = v112;
              do
              {
                v116[1] = *(v116 - 1);
                v116[2] = *v116;
                v117 = *(v116 - 2);
                v116 -= 2;
              }
              while (v113 > v117);
              *((_DWORD *)v116 + 1) = v115;
              v116[2] = v113;
            }
            v100 = (char *)(v9 + 2);
            v112 += 2;
          }
          while (v9 + 2 != (float *)a2);
        }
        return result;
    }
  }
}

BOOL sub_19C16C1F0(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float *v38;
  uint64_t v39;
  int v40;
  float *v41;
  float v42;
  int v43;
  uint64_t v44;
  float *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 <= v20)
        return 1;
      v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = *((_DWORD *)a1 + 4);
      v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      v26 = a1[3];
      if (v22 <= v26)
        return 1;
      v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      v28 = a1[1];
      if (v22 <= v28)
        return 1;
      v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 > v13)
      {
        v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13)
            goto LABEL_30;
          a1[2] = a1[4];
          a1[4] = v17;
          v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        v34 = *((_DWORD *)a1 + 2);
        v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          v18 = a1 + 1;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v42 = v38[1];
        if (v42 > v41[1])
          break;
LABEL_39:
        v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_DWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

int *sub_19C16C59C(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  float v6;
  float *v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  int *v14;
  uint64_t v15;
  float v16;
  float v17;
  float *v18;
  float *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int *v23;
  BOOL v24;
  uint64_t v25;
  float v26;
  int v27;
  int *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  float v35;
  int v36;
  unint64_t v37;
  float *v38;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  int *v43;
  float *v44;
  float v45;
  float v46;
  float *v47;
  float v48;
  float *v49;
  uint64_t v50;
  int *v51;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    v40 = (unint64_t)(v4 - 2) >> 1;
    v41 = v40;
    do
    {
      if (v40 >= v41)
      {
        v42 = (2 * v41) | 1;
        v43 = (int *)&a1[16 * v41];
        v44 = (float *)(v43 + 2);
        if (2 * v41 + 2 < v4 && *((float *)v43 + 3) > *((float *)v43 + 5))
        {
          v44 = (float *)(v43 + 4);
          v42 = 2 * v41 + 2;
        }
        v45 = v44[1];
        v46 = *(float *)&a1[8 * v41 + 4];
        if (v45 <= v46)
        {
          v47 = (float *)&a1[8 * v41];
          v48 = *v47;
          while (1)
          {
            v49 = v47;
            v47 = v44;
            *v49 = *v44;
            v49[1] = v45;
            if (v40 < v42)
              break;
            v50 = (2 * v42) | 1;
            v51 = (int *)&a1[16 * v42];
            v44 = (float *)(v51 + 2);
            v42 = 2 * v42 + 2;
            if (v42 < v4)
            {
              if (*((float *)v51 + 3) <= *((float *)v51 + 5))
                v42 = v50;
              else
                v44 = (float *)(v51 + 4);
              v45 = v44[1];
              if (v45 > v46)
                break;
            }
            else
            {
              v42 = v50;
              v45 = *((float *)v51 + 3);
              if (v45 > v46)
                break;
            }
          }
          *v47 = v48;
          v47[1] = v46;
        }
      }
      v24 = v41-- <= 0;
    }
    while (!v24);
  }
  v5 = (int *)a2;
  if (a2 != (char *)a3)
  {
    if (v3 < 16)
    {
      v6 = *((float *)a1 + 1);
      v7 = (float *)a2;
      do
      {
        v8 = v7[1];
        if (v8 > v6)
        {
          v9 = *v7;
          *v7 = *(float *)a1;
          *(float *)a1 = v9;
          v7[1] = v6;
          *((float *)a1 + 1) = v8;
          v6 = v8;
        }
        v7 += 2;
      }
      while (v7 != (float *)a3);
LABEL_28:
      v5 = a3;
      goto LABEL_29;
    }
    v10 = (float *)a2;
    while (1)
    {
      v11 = v10[1];
      v12 = *((float *)a1 + 1);
      if (v11 > v12)
      {
        v13 = *v10;
        *v10 = *(float *)a1;
        *(float *)a1 = v13;
        v10[1] = v12;
        *((float *)a1 + 1) = v11;
        if (v3 == 16 || *((float *)a1 + 3) <= *((float *)a1 + 5))
        {
          v14 = (int *)(a1 + 8);
          v15 = 1;
          v16 = *((float *)a1 + 3);
          if (v16 <= v11)
          {
LABEL_19:
            v17 = *(float *)a1;
            v18 = (float *)a1;
            while (1)
            {
              v19 = v18;
              v18 = (float *)v14;
              *(_DWORD *)v19 = *v14;
              v19[1] = v16;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15)
                break;
              v20 = (2 * v15) | 1;
              v21 = (int *)&a1[16 * v15];
              v14 = v21 + 2;
              v15 = 2 * v15 + 2;
              if (v15 < v4)
              {
                if (*((float *)v21 + 3) <= *((float *)v21 + 5))
                  v15 = v20;
                else
                  v14 = v21 + 4;
                v16 = *((float *)v14 + 1);
                if (v16 > v11)
                  break;
              }
              else
              {
                v15 = v20;
                v16 = *((float *)v21 + 3);
                if (v16 > v11)
                  break;
              }
            }
            *v18 = v17;
            v18[1] = v11;
          }
        }
        else
        {
          v14 = (int *)(a1 + 16);
          v15 = 2;
          v16 = *((float *)a1 + 5);
          if (v16 <= v11)
            goto LABEL_19;
        }
      }
      v10 += 2;
      if (v10 == (float *)a3)
        goto LABEL_28;
    }
  }
LABEL_29:
  if (v3 >= 9)
  {
    v22 = (unint64_t)v3 >> 3;
    v23 = (int *)(a1 + 4);
    do
    {
      v25 = 0;
      v26 = *(float *)a1;
      v27 = *((_DWORD *)a1 + 1);
      v28 = (int *)a1;
      do
      {
        v30 = &v28[2 * v25];
        v29 = v30 + 2;
        v31 = (2 * v25) | 1;
        v25 = 2 * v25 + 2;
        if (v25 < v22)
        {
          if (*((float *)v30 + 3) <= *((float *)v30 + 5))
            v25 = v31;
          else
            v29 = v30 + 4;
        }
        else
        {
          v25 = v31;
        }
        *v28 = *v29;
        v28[1] = v29[1];
        v28 = v29;
      }
      while (v25 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
      if (v29 == (int *)(a2 - 8))
      {
        *(float *)v29 = v26;
        v29[1] = v27;
      }
      else
      {
        *v29 = *((_DWORD *)a2 - 2);
        v29[1] = *((_DWORD *)a2 - 1);
        *((float *)a2 - 2) = v26;
        *((_DWORD *)a2 - 1) = v27;
        v32 = (char *)v29 - a1 + 8;
        if (v32 >= 9)
        {
          v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
          v34 = *(float *)&v23[2 * v33];
          v35 = *((float *)v29 + 1);
          if (v34 > v35)
          {
            v36 = *v29;
            do
            {
              v37 = v33;
              v38 = (float *)v29;
              v29 = (int *)&a1[8 * v37];
              *(_DWORD *)v38 = *v29;
              v38[1] = v34;
              if (!v37)
                break;
              v33 = (v37 - 1) >> 1;
              v34 = *(float *)&v23[2 * v33];
            }
            while (v34 > v35);
            *v29 = v36;
            *(float *)&v23[2 * v37] = v35;
          }
        }
      }
      a2 -= 8;
      v24 = v22-- <= 2;
    }
    while (!v24);
  }
  return v5;
}

void sub_19C16CA20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C16CABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C16CB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19C16CB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19C16CBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C16CBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C16CC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C16CCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_19C16CD74()
{
  if (qword_1EE41A980 != -1)
    dispatch_once(&qword_1EE41A980, &unk_1E3D25180);
  return byte_1EE41A978;
}

void sub_19C16CDC0()
{
  void *v0;
  void *v1;
  BOOL v2;
  char v11;

  if (qword_1EE41A990 == -1)
  {
    v0 = (void *)qword_1EE41A988;
    if (!qword_1EE41A988)
      return;
  }
  else
  {
    dispatch_once(&qword_1EE41A990, &unk_1E3D254F0);
    v0 = (void *)qword_1EE41A988;
    if (!qword_1EE41A988)
      return;
  }
  off_1EE41A9E0 = dlsym(v0, "NLModelContainerCreate");
  off_1EE41A9E8 = dlsym(v0, "NLModelContainerCreateWithContentsOfURL");
  off_1EE41A9F0 = dlsym(v0, "NLModelContainerCreateWithContainerData");
  qword_1EE41A9F8 = (uint64_t)dlsym(v0, "NLModelContainerGetType");
  qword_1EE41AA00 = (uint64_t)dlsym(v0, "NLModelContainerGetSubtype");
  qword_1EE41AA08 = (uint64_t)dlsym(v0, "NLModelContainerGetRevision");
  off_1EE41AA10 = dlsym(v0, "NLModelContainerCopyInfoDictionary");
  qword_1EE41AA18 = (uint64_t)dlsym(v0, "NLModelContainerGetModelDataCount");
  off_1EE41AA20 = dlsym(v0, "NLModelContainerCopyModelDataAtIndex");
  v1 = dlsym(v0, "NLModelContainerWriteToURL");
  off_1EE41AA28 = v1;
  if (off_1EE41A9E0)
    v2 = off_1EE41A9E8 == 0;
  else
    v2 = 1;
  v11 = !v2
     && off_1EE41A9F0 != 0
     && qword_1EE41A9F8 != 0
     && qword_1EE41AA00 != 0
     && qword_1EE41AA08 != 0
     && off_1EE41AA10 != 0
     && qword_1EE41AA18 != 0
     && off_1EE41AA20 != 0
     && v1 != 0;
  byte_1EE41A978 = v11;
}

void sub_19C16CF80()
{
  void **v0;
  void *__p[2];
  char v2;

  sub_19C24266C("/System/Library/PrivateFrameworks/CoreNLP.framework/CoreNLP", (uint64_t)__p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  qword_1EE41A988 = (uint64_t)dlopen((const char *)v0, 261);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_19C16CFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C16D010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](MEMORY[0x1E0CFDF48], sel_hasANE, a3, a4);
}

void sub_19C16D250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_19C16D548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19C16D55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19C16D570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19C16E41C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float sub_19C16E4D0(uint64_t a1, uint64_t a2, float *a3)
{
  float v5;
  unint64_t v6;
  int v7;
  int8x8_t v8;
  int8x8_t v9;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int32x2_t v20;
  int32x2_t v21;
  int8x8_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  float32x2_t v27;

  if (*(_BYTE *)(a1 + 12))
  {
    *(_BYTE *)(a1 + 12) = 0;
    v5 = *(float *)(a1 + 8);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 2496);
    v7 = *(_DWORD *)(a2 + 4 * v6);
    v8 = (int8x8_t)vdup_n_s32(0x9D2C5680);
    v9 = (int8x8_t)vdup_n_s32(0xEFC60000);
    __asm { FMOV            V3.2S, #-1.0 }
    do
    {
      v15 = (v6 + 1) % 0x270;
      v16 = 4 * v15;
      v17 = *(_DWORD *)(a2 + 4 * ((v6 + 397) % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v15) & 0x7FFFFFFE | v7 & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v15) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v6) = v17;
      if (v15 < 0x26F)
        v6 = v15 + 1;
      else
        v6 = v15 - 623;
      if (v15 >= 0xE3)
        v18 = -227;
      else
        v18 = 397;
      v7 = *(_DWORD *)(a2 + 4 * v6);
      v19 = *(_DWORD *)(a2 + 4 * (v18 + v15)) ^ ((v7 & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v15) & 0x80000000) >> 1) ^ (v7 << 31 >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v16) = v19;
      v20 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)__PAIR64__(v17, v19), 0xBuLL), (int8x8_t)__PAIR64__(v17, v19));
      v21 = (int32x2_t)veor_s8(vand_s8((int8x8_t)vshl_n_s32(v20, 7uLL), v8), (int8x8_t)v20);
      v22 = veor_s8(vand_s8((int8x8_t)vshl_n_s32(v21, 0xFuLL), v9), (int8x8_t)v21);
      v23 = vmla_f32(_D3, vcvt_f32_u32((uint32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v22, 0x12uLL), v22)), (float32x2_t)0x3000000030000000);
      v24 = vaddv_f32(vmul_f32(v23, v23));
    }
    while (v24 > 1.0 || v24 == 0.0);
    *(_QWORD *)(a2 + 2496) = v6;
    v27 = v23;
    v25 = sqrtf((float)(logf(v24) * -2.0) / v24);
    *(float *)(a1 + 8) = v25 * v27.f32[0];
    *(_BYTE *)(a1 + 12) = 1;
    v5 = vmuls_lane_f32(v25, v27, 1);
  }
  return *a3 + (float)(a3[1] * v5);
}

BOOL sub_19C16E688(double *a1, double a2, double a3)
{
  double v5;
  double v6;
  double v7;
  double v9;

  if (a1[1] >= a2)
    return 1;
  v5 = fabs(a3);
  if (v5 >= INFINITY)
    return 0;
  v6 = a1[2];
  v7 = a1[3];
  if (__isinfd())
    return 0;
  v9 = vabdd_f64(a2, a3);
  if (v9 < v7 || v9 < (v5 + fabs(a2)) * (0.5 * v6))
    return 1;
  if (a2 == a3)
    return v6 > 0.0;
  return 0;
}

BOOL sub_19C16E750(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 64);
  return v1 >= 1 && **(_DWORD **)(a1 + 56) >= v1;
}

BOOL sub_19C16E778(uint64_t a1)
{
  double v1;
  double v2;

  v1 = *(double *)(a1 + 72);
  if (v1 <= 0.0)
    return 0;
  v2 = *(double *)(a1 + 80);
  return sub_19C17F130() - v2 >= v1;
}

BOOL sub_19C16E7C0(uint64_t a1)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(a1 + 88);
  return v1 && *v1 != 0;
}

char *sub_19C16E7E0(void *a1, char *__s, va_list a3)
{
  size_t v6;
  char *v7;
  char *v8;
  int v9;

  v6 = strlen(__s) + 128;
  v7 = (char *)malloc_type_realloc(a1, v6, 0x4A3E2E50uLL);
  if (!v7)
LABEL_10:
    abort();
  v8 = v7;
  while (1)
  {
    v9 = vsnprintf(v8, v6, __s, a3);
    if ((v9 & 0x80000000) == 0 && v6 > v9)
      return v8;
    if (v9 >= 0)
      v6 = v9 + 1;
    else
      v6 = (3 * v6) >> 1;
    v8 = (char *)malloc_type_realloc(v8, v6, 0xAE084DA4uLL);
    if (!v8)
      goto LABEL_10;
  }
}

BOOL sub_19C16E898(double a1)
{
  return fabs(a1) >= INFINITY || __isinfd() != 0;
}

BOOL sub_19C16E8D0(double a1)
{
  return a1 == 0.0 || __fpclassifyd(a1) == 5;
}

void sub_19C16E994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C16EAF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C16EC3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C16EDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C16EDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C16EDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C16EE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C16EE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C16EE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C16EF30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C16EF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C16EF74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C16F03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C16F070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C16F170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C16F184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_19C16F198(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  *(_QWORD *)a1 = &unk_1E3D24BC0;
  sub_19C18E6A4(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
  {
    v4 = 0;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 1272);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v5;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  sub_19C2335C4(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 280) * ((v4 + v3 * v2) << v6), *(void **)(a1 + 1280));
  *(_QWORD *)(a1 + 1280) = 0;
  v7 = *(void **)(a1 + 1232);
  if (v7)
  {
    *(_QWORD *)(a1 + 1240) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 1208);
  if (v8)
  {
    *(_QWORD *)(a1 + 1216) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 1184);
  if (v9)
  {
    *(_QWORD *)(a1 + 1192) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 1160);
  if (v10)
  {
    *(_QWORD *)(a1 + 1168) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 1136);
  if (v11)
  {
    *(_QWORD *)(a1 + 1144) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 1112);
  if (v12)
  {
    *(_QWORD *)(a1 + 1120) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 1088);
  if (v13)
  {
    *(_QWORD *)(a1 + 1096) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 1064);
  if (v14)
  {
    *(_QWORD *)(a1 + 1072) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 1040);
  if (v15)
  {
    *(_QWORD *)(a1 + 1048) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 1016);
  if (v16)
  {
    *(_QWORD *)(a1 + 1024) = v16;
    operator delete(v16);
  }
  return sub_19C18E518(a1);
}

void sub_19C16F328(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C16F198(a1);
  operator delete(v1);
}

uint64_t sub_19C16F33C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *__src)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _OWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _OWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _OWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _OWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  _OWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  uint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  _OWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  uint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  _OWORD *v167;
  uint64_t *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  _BYTE *v181;
  uint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  _OWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  int64_t v198;
  _BYTE *v199;
  size_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  int64_t v206;
  _BYTE *v207;
  size_t v208;
  uint64_t v209;
  int v210;
  uint64_t **v212;
  uint64_t **v213;
  uint64_t **v214;
  uint64_t **v215;
  uint64_t **v216;
  uint64_t **v217;
  uint64_t **v218;
  uint64_t **v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  void *__p[2];
  uint64_t v225;
  _BYTE __srca[24];
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230[4];

  *(_QWORD *)v230 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v225 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18E344(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v225) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D24BC0;
  v217 = (uint64_t **)(a1 + 1040);
  v218 = (uint64_t **)(a1 + 1064);
  v215 = (uint64_t **)(a1 + 1112);
  v216 = (uint64_t **)(a1 + 1088);
  v213 = (uint64_t **)(a1 + 1136);
  v214 = (uint64_t **)(a1 + 1160);
  v212 = (uint64_t **)(a1 + 1184);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  v219 = (uint64_t **)(a1 + 1016);
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_QWORD *)(a1 + 1312) = 0;
  v7 = __src[7];
  if (v7 <= 1)
    v7 = 1;
  *(_QWORD *)(a1 + 1320) = v7;
  v8 = __src[9];
  if (!v8)
    v8 = 2;
  *(_QWORD *)(a1 + 1328) = v8;
  v9 = __src[8];
  if (v9 <= 1)
    v9 = 1;
  *(_QWORD *)(a1 + 1336) = v9;
  v10 = __src[10];
  if (v10 <= 1)
    v10 = 1;
  *(_QWORD *)(a1 + 1344) = v10;
  v11 = __src[11];
  if (!v11)
    v11 = 2;
  *(_QWORD *)(a1 + 1352) = v11;
  v12 = *((int *)__src + 32);
  *(_DWORD *)__srca = 1;
  *(int64x2_t *)&__srca[8] = vdupq_n_s64(1uLL);
  v228 = 0;
  v229 = 0;
  v227 = v12;
  sub_19C07C964(a1 + 16, (int *)__srca, v230);
  v13 = *((_DWORD *)__src + 64);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  *(_DWORD *)__srca = 9;
  *(int64x2_t *)&__srca[8] = vdupq_n_s64(1uLL);
  v228 = 0;
  v229 = 0;
  v227 = v13 << v14;
  sub_19C07C964(a1 + 40, (int *)__srca, v230);
  v15 = 0;
  v16 = *((_DWORD *)__src + 64);
  v221 = v16 * (uint64_t)*((int *)__src + 32);
  v222 = v16;
  v220 = v16 * v16;
  v223 = __src;
  do
  {
    v18 = __src[56] + 4 * v15 * v221;
    v19 = *(uint64_t **)(a1 + 1024);
    v20 = *(_QWORD *)(a1 + 1032);
    if ((unint64_t)v19 < v20)
    {
      *v19 = v18;
      v21 = (uint64_t)(v19 + 1);
      goto LABEL_41;
    }
    v22 = *v219;
    v23 = (char *)v19 - (char *)*v219;
    v24 = v23 >> 3;
    v25 = (v23 >> 3) + 1;
    if (v25 >> 61)
      sub_19C07DA0C();
    v26 = v20 - (_QWORD)v22;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        sub_19C07C7FC();
      v28 = operator new(8 * v27);
      v29 = (uint64_t *)&v28[8 * v24];
      *v29 = v18;
      v21 = (uint64_t)(v29 + 1);
      if (v19 == v22)
      {
LABEL_39:
        *(_QWORD *)(a1 + 1016) = v29;
        *(_QWORD *)(a1 + 1024) = v21;
        *(_QWORD *)(a1 + 1032) = &v28[8 * v27];
        if (!v19)
          goto LABEL_41;
LABEL_40:
        operator delete(v19);
        goto LABEL_41;
      }
    }
    else
    {
      v28 = 0;
      v29 = (uint64_t *)(8 * v24);
      *(_QWORD *)(8 * v24) = v18;
      v21 = 8 * v24 + 8;
      if (v19 == v22)
        goto LABEL_39;
    }
    v30 = (char *)(v19 - 1) - (char *)v22;
    if (v30 < 0x58)
      goto LABEL_252;
    if ((unint64_t)((char *)v19 - &v28[v23]) < 0x20)
      goto LABEL_252;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v19[v32 / 0xFFFFFFFFFFFFFFF8];
    v29 = (uint64_t *)((char *)v29 - v32);
    v34 = &v28[8 * v24 - 16];
    v35 = v19 - 2;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 4;
      v36 -= 4;
    }
    while (v36);
    v19 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_252:
      do
      {
        v38 = *--v19;
        *--v29 = v38;
      }
      while (v19 != v22);
    }
    v19 = *v219;
    *(_QWORD *)(a1 + 1016) = v29;
    *(_QWORD *)(a1 + 1024) = v21;
    *(_QWORD *)(a1 + 1032) = &v28[8 * v27];
    if (v19)
      goto LABEL_40;
LABEL_41:
    *(_QWORD *)(a1 + 1024) = v21;
    v39 = __src[57] + 4 * (v220 * v15);
    v40 = *(uint64_t **)(a1 + 1072);
    v41 = *(_QWORD *)(a1 + 1080);
    if ((unint64_t)v40 < v41)
    {
      *v40 = v39;
      v42 = (uint64_t)(v40 + 1);
      goto LABEL_63;
    }
    v43 = *v218;
    v44 = (char *)v40 - (char *)*v218;
    v45 = v44 >> 3;
    v46 = (v44 >> 3) + 1;
    if (v46 >> 61)
      sub_19C07DA0C();
    v47 = v41 - (_QWORD)v43;
    if (v47 >> 2 > v46)
      v46 = v47 >> 2;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      if (v48 >> 61)
        sub_19C07C7FC();
      v49 = operator new(8 * v48);
      v50 = (uint64_t *)&v49[8 * v45];
      *v50 = v39;
      v42 = (uint64_t)(v50 + 1);
      if (v40 == v43)
      {
LABEL_61:
        *(_QWORD *)(a1 + 1064) = v50;
        *(_QWORD *)(a1 + 1072) = v42;
        *(_QWORD *)(a1 + 1080) = &v49[8 * v48];
        if (!v40)
          goto LABEL_63;
LABEL_62:
        operator delete(v40);
        goto LABEL_63;
      }
    }
    else
    {
      v49 = 0;
      v50 = (uint64_t *)(8 * v45);
      *(_QWORD *)(8 * v45) = v39;
      v42 = 8 * v45 + 8;
      if (v40 == v43)
        goto LABEL_61;
    }
    v51 = (char *)(v40 - 1) - (char *)v43;
    if (v51 < 0x58)
      goto LABEL_253;
    if ((unint64_t)((char *)v40 - &v49[v44]) < 0x20)
      goto LABEL_253;
    v52 = (v51 >> 3) + 1;
    v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    v54 = &v40[v53 / 0xFFFFFFFFFFFFFFF8];
    v50 = (uint64_t *)((char *)v50 - v53);
    v55 = &v49[8 * v45 - 16];
    v56 = v40 - 2;
    v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v58 = *(_OWORD *)v56;
      *(v55 - 1) = *((_OWORD *)v56 - 1);
      *v55 = v58;
      v55 -= 2;
      v56 -= 4;
      v57 -= 4;
    }
    while (v57);
    v40 = v54;
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_253:
      do
      {
        v59 = *--v40;
        *--v50 = v59;
      }
      while (v40 != v43);
    }
    v40 = *v218;
    *(_QWORD *)(a1 + 1064) = v50;
    *(_QWORD *)(a1 + 1072) = v42;
    *(_QWORD *)(a1 + 1080) = &v49[8 * v48];
    if (v40)
      goto LABEL_62;
LABEL_63:
    *(_QWORD *)(a1 + 1072) = v42;
    v60 = v15 * v222;
    v61 = __src[72] + 4 * v15 * v222;
    v62 = *(uint64_t **)(a1 + 1048);
    v63 = *(_QWORD *)(a1 + 1056);
    if ((unint64_t)v62 < v63)
    {
      *v62 = v61;
      v64 = (uint64_t)(v62 + 1);
      goto LABEL_86;
    }
    v65 = *v217;
    v66 = (char *)v62 - (char *)*v217;
    v67 = v66 >> 3;
    v68 = (v66 >> 3) + 1;
    if (v68 >> 61)
      sub_19C07DA0C();
    v69 = v63 - (_QWORD)v65;
    if (v69 >> 2 > v68)
      v68 = v69 >> 2;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
      v70 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    if (v70)
    {
      if (v70 >> 61)
        sub_19C07C7FC();
      v71 = operator new(8 * v70);
      v72 = (uint64_t *)&v71[8 * v67];
      *v72 = v61;
      v64 = (uint64_t)(v72 + 1);
      if (v62 != v65)
      {
LABEL_74:
        v73 = (char *)(v62 - 1) - (char *)v65;
        if (v73 >= 0x58)
        {
          v74 = (char *)v62 - &v71[v66];
          __src = v223;
          if (v74 >= 0x20)
          {
            v75 = (v73 >> 3) + 1;
            v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
            v77 = &v62[v76 / 0xFFFFFFFFFFFFFFF8];
            v72 = (uint64_t *)((char *)v72 - v76);
            v78 = &v71[8 * v67 - 16];
            v79 = v62 - 2;
            v80 = v75 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *(_OWORD *)v79;
              *(v78 - 1) = *((_OWORD *)v79 - 1);
              *v78 = v81;
              v78 -= 2;
              v79 -= 4;
              v80 -= 4;
            }
            while (v80);
            v62 = v77;
            if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_84:
              v62 = *v217;
              *(_QWORD *)(a1 + 1040) = v72;
              *(_QWORD *)(a1 + 1048) = v64;
              *(_QWORD *)(a1 + 1056) = &v71[8 * v70];
              if (!v62)
                goto LABEL_86;
LABEL_85:
              operator delete(v62);
              goto LABEL_86;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          v82 = *--v62;
          *--v72 = v82;
        }
        while (v62 != v65);
        goto LABEL_84;
      }
    }
    else
    {
      v71 = 0;
      v72 = (uint64_t *)(8 * v67);
      *(_QWORD *)(8 * v67) = v61;
      v64 = 8 * v67 + 8;
      if (v62 != v65)
        goto LABEL_74;
    }
    __src = v223;
    *(_QWORD *)(a1 + 1040) = v72;
    *(_QWORD *)(a1 + 1048) = v64;
    *(_QWORD *)(a1 + 1056) = &v71[8 * v70];
    if (v62)
      goto LABEL_85;
LABEL_86:
    *(_QWORD *)(a1 + 1048) = v64;
    v83 = __src[73] + 4 * v60;
    v84 = *(uint64_t **)(a1 + 1096);
    v85 = *(_QWORD *)(a1 + 1104);
    if ((unint64_t)v84 < v85)
    {
      *v84 = v83;
      v86 = (uint64_t)(v84 + 1);
      v87 = v15 * v221;
      goto LABEL_109;
    }
    v88 = *v216;
    v89 = (char *)v84 - (char *)*v216;
    v90 = v89 >> 3;
    v91 = (v89 >> 3) + 1;
    if (v91 >> 61)
      sub_19C07DA0C();
    v92 = v85 - (_QWORD)v88;
    if (v92 >> 2 > v91)
      v91 = v92 >> 2;
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
      v93 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v93 = v91;
    if (v93)
    {
      if (v93 >> 61)
        sub_19C07C7FC();
      v94 = operator new(8 * v93);
      v95 = (uint64_t *)&v94[8 * v90];
      *v95 = v83;
      v86 = (uint64_t)(v95 + 1);
      if (v84 != v88)
      {
LABEL_97:
        v96 = (char *)(v84 - 1) - (char *)v88;
        v87 = v15 * v221;
        if (v96 >= 0x58)
        {
          v97 = (char *)v84 - &v94[v89];
          __src = v223;
          if (v97 >= 0x20)
          {
            v98 = (v96 >> 3) + 1;
            v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
            v100 = &v84[v99 / 0xFFFFFFFFFFFFFFF8];
            v95 = (uint64_t *)((char *)v95 - v99);
            v101 = &v94[8 * v90 - 16];
            v102 = v84 - 2;
            v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v104 = *(_OWORD *)v102;
              *(v101 - 1) = *((_OWORD *)v102 - 1);
              *v101 = v104;
              v101 -= 2;
              v102 -= 4;
              v103 -= 4;
            }
            while (v103);
            v84 = v100;
            if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_107:
              v84 = *v216;
              *(_QWORD *)(a1 + 1088) = v95;
              *(_QWORD *)(a1 + 1096) = v86;
              *(_QWORD *)(a1 + 1104) = &v94[8 * v93];
              if (!v84)
                goto LABEL_109;
LABEL_108:
              operator delete(v84);
              goto LABEL_109;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          v105 = *--v84;
          *--v95 = v105;
        }
        while (v84 != v88);
        goto LABEL_107;
      }
    }
    else
    {
      v94 = 0;
      v95 = (uint64_t *)(8 * v90);
      *(_QWORD *)(8 * v90) = v83;
      v86 = 8 * v90 + 8;
      if (v84 != v88)
        goto LABEL_97;
    }
    v87 = v15 * v221;
    __src = v223;
    *(_QWORD *)(a1 + 1088) = v95;
    *(_QWORD *)(a1 + 1096) = v86;
    *(_QWORD *)(a1 + 1104) = &v94[8 * v93];
    if (v84)
      goto LABEL_108;
LABEL_109:
    *(_QWORD *)(a1 + 1096) = v86;
    v106 = __src[58] + 4 * v87;
    v107 = *(uint64_t **)(a1 + 1120);
    v108 = *(_QWORD *)(a1 + 1128);
    if ((unint64_t)v107 < v108)
    {
      *v107 = v106;
      v109 = (uint64_t)(v107 + 1);
      goto LABEL_132;
    }
    v110 = *v215;
    v111 = (char *)v107 - (char *)*v215;
    v112 = v111 >> 3;
    v113 = (v111 >> 3) + 1;
    if (v113 >> 61)
      sub_19C07DA0C();
    v114 = v108 - (_QWORD)v110;
    if (v114 >> 2 > v113)
      v113 = v114 >> 2;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
      v115 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    if (v115)
    {
      if (v115 >> 61)
        sub_19C07C7FC();
      v116 = operator new(8 * v115);
      v117 = (uint64_t *)&v116[8 * v112];
      *v117 = v106;
      v109 = (uint64_t)(v117 + 1);
      if (v107 != v110)
      {
LABEL_120:
        v118 = (char *)(v107 - 1) - (char *)v110;
        if (v118 >= 0x58)
        {
          v119 = (char *)v107 - &v116[v111];
          __src = v223;
          if (v119 >= 0x20)
          {
            v120 = (v118 >> 3) + 1;
            v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
            v122 = &v107[v121 / 0xFFFFFFFFFFFFFFF8];
            v117 = (uint64_t *)((char *)v117 - v121);
            v123 = &v116[8 * v112 - 16];
            v124 = v107 - 2;
            v125 = v120 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v126 = *(_OWORD *)v124;
              *(v123 - 1) = *((_OWORD *)v124 - 1);
              *v123 = v126;
              v123 -= 2;
              v124 -= 4;
              v125 -= 4;
            }
            while (v125);
            v107 = v122;
            if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_130:
              v107 = *v215;
              *(_QWORD *)(a1 + 1112) = v117;
              *(_QWORD *)(a1 + 1120) = v109;
              *(_QWORD *)(a1 + 1128) = &v116[8 * v115];
              if (!v107)
                goto LABEL_132;
LABEL_131:
              operator delete(v107);
              goto LABEL_132;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          v127 = *--v107;
          *--v117 = v127;
        }
        while (v107 != v110);
        goto LABEL_130;
      }
    }
    else
    {
      v116 = 0;
      v117 = (uint64_t *)(8 * v112);
      *(_QWORD *)(8 * v112) = v106;
      v109 = 8 * v112 + 8;
      if (v107 != v110)
        goto LABEL_120;
    }
    __src = v223;
    *(_QWORD *)(a1 + 1112) = v117;
    *(_QWORD *)(a1 + 1120) = v109;
    *(_QWORD *)(a1 + 1128) = &v116[8 * v115];
    if (v107)
      goto LABEL_131;
LABEL_132:
    *(_QWORD *)(a1 + 1120) = v109;
    v128 = __src[59] + 4 * (v220 * v15);
    v129 = *(uint64_t **)(a1 + 1168);
    v130 = *(_QWORD *)(a1 + 1176);
    if ((unint64_t)v129 < v130)
    {
      *v129 = v128;
      v131 = (uint64_t)(v129 + 1);
      goto LABEL_155;
    }
    v132 = *v214;
    v133 = (char *)v129 - (char *)*v214;
    v134 = v133 >> 3;
    v135 = (v133 >> 3) + 1;
    if (v135 >> 61)
      sub_19C07DA0C();
    v136 = v130 - (_QWORD)v132;
    if (v136 >> 2 > v135)
      v135 = v136 >> 2;
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
      v137 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v137 = v135;
    if (v137)
    {
      if (v137 >> 61)
        sub_19C07C7FC();
      v138 = operator new(8 * v137);
      v139 = (uint64_t *)&v138[8 * v134];
      *v139 = v128;
      v131 = (uint64_t)(v139 + 1);
      if (v129 != v132)
      {
LABEL_143:
        v140 = (char *)(v129 - 1) - (char *)v132;
        if (v140 >= 0x58)
        {
          v141 = (char *)v129 - &v138[v133];
          __src = v223;
          if (v141 >= 0x20)
          {
            v142 = (v140 >> 3) + 1;
            v143 = 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
            v144 = &v129[v143 / 0xFFFFFFFFFFFFFFF8];
            v139 = (uint64_t *)((char *)v139 - v143);
            v145 = &v138[8 * v134 - 16];
            v146 = v129 - 2;
            v147 = v142 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v148 = *(_OWORD *)v146;
              *(v145 - 1) = *((_OWORD *)v146 - 1);
              *v145 = v148;
              v145 -= 2;
              v146 -= 4;
              v147 -= 4;
            }
            while (v147);
            v129 = v144;
            if (v142 == (v142 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_153:
              v129 = *v214;
              *(_QWORD *)(a1 + 1160) = v139;
              *(_QWORD *)(a1 + 1168) = v131;
              *(_QWORD *)(a1 + 1176) = &v138[8 * v137];
              if (!v129)
                goto LABEL_155;
LABEL_154:
              operator delete(v129);
              goto LABEL_155;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          v149 = *--v129;
          *--v139 = v149;
        }
        while (v129 != v132);
        goto LABEL_153;
      }
    }
    else
    {
      v138 = 0;
      v139 = (uint64_t *)(8 * v134);
      *(_QWORD *)(8 * v134) = v128;
      v131 = 8 * v134 + 8;
      if (v129 != v132)
        goto LABEL_143;
    }
    __src = v223;
    *(_QWORD *)(a1 + 1160) = v139;
    *(_QWORD *)(a1 + 1168) = v131;
    *(_QWORD *)(a1 + 1176) = &v138[8 * v137];
    if (v129)
      goto LABEL_154;
LABEL_155:
    *(_QWORD *)(a1 + 1168) = v131;
    v150 = __src[74] + 4 * v60;
    v151 = *(uint64_t **)(a1 + 1144);
    v152 = *(_QWORD *)(a1 + 1152);
    if ((unint64_t)v151 < v152)
    {
      *v151 = v150;
      v153 = (uint64_t)(v151 + 1);
      goto LABEL_178;
    }
    v154 = *v213;
    v155 = (char *)v151 - (char *)*v213;
    v156 = v155 >> 3;
    v157 = (v155 >> 3) + 1;
    if (v157 >> 61)
      sub_19C07DA0C();
    v158 = v152 - (_QWORD)v154;
    if (v158 >> 2 > v157)
      v157 = v158 >> 2;
    if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
      v159 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v159 = v157;
    if (v159)
    {
      if (v159 >> 61)
        sub_19C07C7FC();
      v160 = operator new(8 * v159);
      v161 = (uint64_t *)&v160[8 * v156];
      *v161 = v150;
      v153 = (uint64_t)(v161 + 1);
      if (v151 != v154)
      {
LABEL_166:
        v162 = (char *)(v151 - 1) - (char *)v154;
        if (v162 >= 0x58)
        {
          v163 = (char *)v151 - &v160[v155];
          __src = v223;
          if (v163 >= 0x20)
          {
            v164 = (v162 >> 3) + 1;
            v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
            v166 = &v151[v165 / 0xFFFFFFFFFFFFFFF8];
            v161 = (uint64_t *)((char *)v161 - v165);
            v167 = &v160[8 * v156 - 16];
            v168 = v151 - 2;
            v169 = v164 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v170 = *(_OWORD *)v168;
              *(v167 - 1) = *((_OWORD *)v168 - 1);
              *v167 = v170;
              v167 -= 2;
              v168 -= 4;
              v169 -= 4;
            }
            while (v169);
            v151 = v166;
            if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_176:
              v151 = *v213;
              *(_QWORD *)(a1 + 1136) = v161;
              *(_QWORD *)(a1 + 1144) = v153;
              *(_QWORD *)(a1 + 1152) = &v160[8 * v159];
              if (!v151)
                goto LABEL_178;
LABEL_177:
              operator delete(v151);
              goto LABEL_178;
            }
          }
        }
        else
        {
          __src = v223;
        }
        do
        {
          v171 = *--v151;
          *--v161 = v171;
        }
        while (v151 != v154);
        goto LABEL_176;
      }
    }
    else
    {
      v160 = 0;
      v161 = (uint64_t *)(8 * v156);
      *(_QWORD *)(8 * v156) = v150;
      v153 = 8 * v156 + 8;
      if (v151 != v154)
        goto LABEL_166;
    }
    __src = v223;
    *(_QWORD *)(a1 + 1136) = v161;
    *(_QWORD *)(a1 + 1144) = v153;
    *(_QWORD *)(a1 + 1152) = &v160[8 * v159];
    if (v151)
      goto LABEL_177;
LABEL_178:
    *(_QWORD *)(a1 + 1144) = v153;
    v172 = __src[75] + 4 * v60;
    v173 = *(uint64_t **)(a1 + 1192);
    v174 = *(_QWORD *)(a1 + 1200);
    if ((unint64_t)v173 < v174)
    {
      *v173 = v172;
      v17 = (uint64_t)(v173 + 1);
      goto LABEL_18;
    }
    v175 = *v212;
    v176 = (char *)v173 - (char *)*v212;
    v177 = v176 >> 3;
    v178 = (v176 >> 3) + 1;
    if (v178 >> 61)
      sub_19C07DA0C();
    v179 = v174 - (_QWORD)v175;
    if (v179 >> 2 > v178)
      v178 = v179 >> 2;
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8)
      v180 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v180 = v178;
    if (v180)
    {
      if (v180 >> 61)
        sub_19C07C7FC();
      v181 = operator new(8 * v180);
      v182 = (uint64_t *)&v181[8 * v177];
      *v182 = v172;
      v17 = (uint64_t)(v182 + 1);
      if (v173 == v175)
      {
LABEL_197:
        *(_QWORD *)(a1 + 1184) = v182;
        *(_QWORD *)(a1 + 1192) = v17;
        *(_QWORD *)(a1 + 1200) = &v181[8 * v180];
        if (!v173)
          goto LABEL_18;
LABEL_198:
        operator delete(v173);
        goto LABEL_18;
      }
    }
    else
    {
      v181 = 0;
      v182 = (uint64_t *)(8 * v177);
      *(_QWORD *)(8 * v177) = v172;
      v17 = 8 * v177 + 8;
      if (v173 == v175)
        goto LABEL_197;
    }
    v183 = (char *)(v173 - 1) - (char *)v175;
    if (v183 < 0x58)
      goto LABEL_254;
    if ((unint64_t)((char *)v173 - &v181[v176]) < 0x20)
      goto LABEL_254;
    v184 = (v183 >> 3) + 1;
    v185 = 8 * (v184 & 0x3FFFFFFFFFFFFFFCLL);
    v186 = &v173[v185 / 0xFFFFFFFFFFFFFFF8];
    v182 = (uint64_t *)((char *)v182 - v185);
    v187 = &v181[8 * v177 - 16];
    v188 = v173 - 2;
    v189 = v184 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v190 = *(_OWORD *)v188;
      *(v187 - 1) = *((_OWORD *)v188 - 1);
      *v187 = v190;
      v187 -= 2;
      v188 -= 4;
      v189 -= 4;
    }
    while (v189);
    v173 = v186;
    if (v184 != (v184 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_254:
      do
      {
        v191 = *--v173;
        *--v182 = v191;
      }
      while (v173 != v175);
    }
    v173 = *v212;
    *(_QWORD *)(a1 + 1184) = v182;
    *(_QWORD *)(a1 + 1192) = v17;
    *(_QWORD *)(a1 + 1200) = &v181[8 * v180];
    if (v173)
      goto LABEL_198;
LABEL_18:
    *(_QWORD *)(a1 + 1192) = v17;
    ++v15;
  }
  while (v15 != 4);
  v192 = __src[61];
  *(_QWORD *)__srca = __src[60];
  *(_QWORD *)&__srca[8] = *(_QWORD *)__srca + 4 * v222;
  *(_QWORD *)&__srca[16] = *(_QWORD *)__srca + 8 * (_DWORD)v222;
  v193 = *(_QWORD *)(a1 + 1224);
  v194 = *(char **)(a1 + 1208);
  if ((unint64_t)(v193 - (_QWORD)v194) >= 0x18)
  {
    v197 = *(char **)(a1 + 1216);
    v198 = v197 - v194;
    if ((unint64_t)(v197 - v194) > 0x17)
      goto LABEL_213;
    v199 = &__srca[v198];
    if (v197 != v194)
    {
      memcpy(*(void **)(a1 + 1208), __srca, v197 - v194);
      v194 = *(char **)(a1 + 1216);
    }
    v200 = 24 - v198;
    memcpy(v194, v199, v200);
  }
  else
  {
    if (v194)
    {
      *(_QWORD *)(a1 + 1216) = v194;
      operator delete(v194);
      v193 = 0;
      *(_QWORD *)(a1 + 1208) = 0;
      *(_QWORD *)(a1 + 1216) = 0;
      *(_QWORD *)(a1 + 1224) = 0;
    }
    v195 = v193 >> 2;
    if ((unint64_t)(v193 >> 2) <= 3)
      v195 = 3;
    if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8)
      v196 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v196 = v195;
    if (v196 >> 61)
      sub_19C07DA0C();
    v194 = (char *)operator new(8 * v196);
    *(_QWORD *)(a1 + 1208) = v194;
    *(_QWORD *)(a1 + 1216) = v194;
    *(_QWORD *)(a1 + 1224) = &v194[8 * v196];
LABEL_213:
    *(_OWORD *)v194 = *(_OWORD *)__srca;
    *((_QWORD *)v194 + 2) = *(_QWORD *)&__srca[16];
    v200 = 24;
  }
  *(_QWORD *)(a1 + 1216) = &v194[v200];
  *(_QWORD *)__srca = v192;
  *(_QWORD *)&__srca[8] = v192 + 4 * v222;
  *(_QWORD *)&__srca[16] = v192 + 8 * (_DWORD)v222;
  v201 = *(_QWORD *)(a1 + 1248);
  v202 = *(char **)(a1 + 1232);
  if ((unint64_t)(v201 - (_QWORD)v202) >= 0x18)
  {
    v205 = *(char **)(a1 + 1240);
    v206 = v205 - v202;
    if ((unint64_t)(v205 - v202) > 0x17)
      goto LABEL_228;
    v207 = &__srca[v206];
    if (v205 != v202)
    {
      memcpy(*(void **)(a1 + 1232), __srca, v205 - v202);
      v202 = *(char **)(a1 + 1240);
    }
    v208 = 24 - v206;
    memcpy(v202, v207, v208);
    v209 = v208 >> 3;
  }
  else
  {
    if (v202)
    {
      *(_QWORD *)(a1 + 1240) = v202;
      operator delete(v202);
      v201 = 0;
      *(_QWORD *)(a1 + 1232) = 0;
      *(_QWORD *)(a1 + 1240) = 0;
      *(_QWORD *)(a1 + 1248) = 0;
    }
    v203 = v201 >> 2;
    if ((unint64_t)(v201 >> 2) <= 3)
      v203 = 3;
    if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8)
      v204 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v204 = v203;
    if (v204 >> 61)
      sub_19C07DA0C();
    v202 = (char *)operator new(8 * v204);
    *(_QWORD *)(a1 + 1232) = v202;
    *(_QWORD *)(a1 + 1240) = v202;
    *(_QWORD *)(a1 + 1248) = &v202[8 * v204];
LABEL_228:
    *(_OWORD *)v202 = *(_OWORD *)__srca;
    *((_QWORD *)v202 + 2) = *(_QWORD *)&__srca[16];
    v209 = 3;
  }
  *(_QWORD *)(a1 + 1240) = &v202[8 * v209];
  *(_QWORD *)(a1 + 1256) = __src[62];
  *(_QWORD *)(a1 + 1264) = __src[63];
  v210 = *((_DWORD *)__src + 80);
  if (v210 <= 0)
    v210 = *((_DWORD *)__src + 64);
  *(_DWORD *)(a1 + 1272) = v210;
  return a1;
}

void sub_19C1703EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _QWORD *v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  v32 = *a9;
  if (*a9)
  {
    v30[155] = v32;
    operator delete(v32);
    v33 = *a10;
    if (!*a10)
    {
LABEL_3:
      v34 = *a11;
      if (!*a11)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v33 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  v30[152] = v33;
  operator delete(v33);
  v34 = *a11;
  if (!*a11)
  {
LABEL_4:
    v35 = *a13;
    if (!*a13)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v30[149] = v34;
  operator delete(v34);
  v35 = *a13;
  if (!*a13)
  {
LABEL_5:
    v36 = *a12;
    if (!*a12)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v30[146] = v35;
  operator delete(v35);
  v36 = *a12;
  if (!*a12)
  {
LABEL_6:
    v37 = *a14;
    if (!*a14)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  v30[143] = v36;
  operator delete(v36);
  v37 = *a14;
  if (!*a14)
  {
LABEL_7:
    v38 = *a15;
    if (!*a15)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  v30[140] = v37;
  operator delete(v37);
  v38 = *a15;
  if (!*a15)
  {
LABEL_8:
    v39 = *a17;
    if (!*a17)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  v30[137] = v38;
  operator delete(v38);
  v39 = *a17;
  if (!*a17)
  {
LABEL_9:
    v40 = *a16;
    if (!*a16)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v30[134] = v39;
  operator delete(v39);
  v40 = *a16;
  if (!*a16)
  {
LABEL_10:
    v41 = *a18;
    if (!*a18)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v30[131] = v40;
  operator delete(v40);
  v41 = *a18;
  if (!*a18)
  {
LABEL_11:
    sub_19C18E518((uint64_t)v30);
    _Unwind_Resume(a1);
  }
LABEL_21:
  v30[128] = v41;
  operator delete(v41);
  sub_19C18E518((uint64_t)v30);
  _Unwind_Resume(a1);
}

BOOL sub_19C1705B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 6
      || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10;
}

uint64_t sub_19C17060C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      goto LABEL_10;
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  if ((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) == 9)
  {
    v10 = 5;
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
    v10 = 4;
    if (v11 == 10)
      v10 = 5;
  }
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(*a2 + 8 * v10))(a2, a1);
}

void sub_19C17070C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const void *v9;
  int v10;
  int v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  int64_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  _BYTE *v42;
  int64_t v43;
  char *v44;
  char *v45;
  _BYTE *v46;
  _BYTE *v47;
  int64_t v48;
  char *v49;
  char *v50;
  int v51;
  _QWORD *v52;
  _QWORD *i;
  uint64_t *v54;
  int v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  const void *v61;
  int v62;
  int v63;
  uint64_t **v64;
  uint64_t **v65;
  uint64_t j;
  char **v67;
  char **v68;
  void **v69;
  void **v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  char **v74;
  uint64_t *v75;
  uint64_t *v76;
  int v77;
  int v78;
  const void **v79;
  int v80;
  uint64_t v81;
  void *__p;
  char *v84;
  char *v85;
  void *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;

  *(_DWORD *)(a1 + 280) = a3;
  v76 = *sub_19C18FCD8(a1, 1);
  v75 = *sub_19C18FEB8(a1, 9);
  v5 = a1 + 232;
  v6 = *(_QWORD *)(a1 + 240);
  if (v6 != a1 + 232)
  {
    do
    {
      *(_QWORD *)(v6 + 24) = sub_19C2335AC();
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
  }
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, 1) * a3;
  v80 = v7 / (*(int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 9);
  v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v77 = v78 * (int)a3 / v73;
  if (a2 >= 1)
  {
    v8 = 0;
    do
    {
      v14 = *(uint64_t **)(a1 + 160);
      v15 = *(uint64_t **)(a1 + 168);
      while (v14 != v15)
      {
        v16 = *v14++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a3);
      }
      v17 = *sub_19C18FEB8(a1, 9);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
      {
        if (*(int *)(a1 + 280) >= 1)
        {
          v18 = 0;
          v19 = *(char **)(a1 + 1288);
          do
          {
            v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
            memmove(v17, v19, v21 * v20);
            v17 = (uint64_t *)((char *)v17 + (*(int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 9));
            v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
            v19 += (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v22);
            ++v18;
          }
          while (v18 < *(_DWORD *)(a1 + 280));
        }
      }
      else
      {
        v9 = *(const void **)(a1 + 1288);
        v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
        memmove(v17, v9, *(int *)(a1 + 280) * (uint64_t)(v11 * v10));
      }
      v12 = sub_19C18FCD8(a1, 1);
      *v12 = (uint64_t *)((char *)*v12 + 4 * v80);
      v13 = sub_19C18FEB8(a1, 9);
      *v13 = (uint64_t *)((char *)*v13 + 4 * v77);
      ++v8;
    }
    while (v8 != a2);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) & 1) != 0)
  {
    v23 = sub_19C18FCD8(a1, 1);
    *v23 = (uint64_t *)((char *)*v23 - 4 * v80);
    v24 = sub_19C18FEB8(a1, 9);
    *v24 = (uint64_t *)((char *)*v24 - 4 * v77);
    v25 = sub_19C18FEB8(a1, 9);
    *v25 = (uint64_t *)((char *)*v25 + 4 * (v78 / v73 / 2));
    v72 = *(_OWORD *)(a1 + 1288);
    v79 = (const void **)(a1 + 1288);
    *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a1 + 1304);
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v26 = *(_BYTE **)(a1 + 1016);
    v27 = *(_BYTE **)(a1 + 1024);
    v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 < 0)
        sub_19C07DA0C();
      v29 = (char *)operator new(v27 - v26);
      v30 = &v29[8 * (v28 >> 3)];
      v95 = v29;
      v97 = v30;
      memcpy(v29, v26, v28);
      v96 = v30;
    }
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v31 = *(_BYTE **)(a1 + 1040);
    v32 = *(_BYTE **)(a1 + 1048);
    v33 = v32 - v31;
    if (v32 != v31)
    {
      if (v33 < 0)
        sub_19C07DA0C();
      v34 = (char *)operator new(v32 - v31);
      v35 = &v34[8 * (v33 >> 3)];
      v92 = v34;
      v94 = v35;
      memcpy(v34, v31, v33);
      v93 = v35;
    }
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v36 = *(_BYTE **)(a1 + 1064);
    v37 = *(_BYTE **)(a1 + 1072);
    v38 = v37 - v36;
    if (v37 != v36)
    {
      if (v38 < 0)
        sub_19C07DA0C();
      v39 = (char *)operator new(v37 - v36);
      v40 = &v39[8 * (v38 >> 3)];
      v89 = v39;
      v91 = v40;
      memcpy(v39, v36, v38);
      v90 = v40;
    }
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v41 = *(_BYTE **)(a1 + 1088);
    v42 = *(_BYTE **)(a1 + 1096);
    v43 = v42 - v41;
    if (v42 != v41)
    {
      if (v43 < 0)
        sub_19C07DA0C();
      v44 = (char *)operator new(v42 - v41);
      v45 = &v44[8 * (v43 >> 3)];
      v86 = v44;
      v88 = v45;
      memcpy(v44, v41, v43);
      v87 = v45;
    }
    __p = 0;
    v84 = 0;
    v85 = 0;
    v46 = *(_BYTE **)(a1 + 1208);
    v47 = *(_BYTE **)(a1 + 1216);
    v48 = v47 - v46;
    if (v47 != v46)
    {
      if (v48 < 0)
        sub_19C07DA0C();
      v49 = (char *)operator new(v47 - v46);
      v50 = &v49[8 * (v48 >> 3)];
      __p = v49;
      v85 = v50;
      memcpy(v49, v46, v48);
      v84 = v50;
    }
    v71 = *(_QWORD *)(a1 + 1256);
    v74 = (char **)(a1 + 1016);
    sub_19C11EAD0((_QWORD *)(a1 + 1016), *(char **)(a1 + 1112), *(char **)(a1 + 1120), (uint64_t)(*(_QWORD *)(a1 + 1120) - *(_QWORD *)(a1 + 1112)) >> 3);
    sub_19C11EAD0((_QWORD *)(a1 + 1040), *(char **)(a1 + 1136), *(char **)(a1 + 1144), (uint64_t)(*(_QWORD *)(a1 + 1144) - *(_QWORD *)(a1 + 1136)) >> 3);
    sub_19C11EAD0((_QWORD *)(a1 + 1064), *(char **)(a1 + 1160), *(char **)(a1 + 1168), (uint64_t)(*(_QWORD *)(a1 + 1168) - *(_QWORD *)(a1 + 1160)) >> 3);
    sub_19C11EAD0((_QWORD *)(a1 + 1088), *(char **)(a1 + 1184), *(char **)(a1 + 1192), (uint64_t)(*(_QWORD *)(a1 + 1192) - *(_QWORD *)(a1 + 1184)) >> 3);
    sub_19C11EAD0((_QWORD *)(a1 + 1208), *(char **)(a1 + 1232), *(char **)(a1 + 1240), (uint64_t)(*(_QWORD *)(a1 + 1240) - *(_QWORD *)(a1 + 1232)) >> 3);
    v67 = (char **)(a1 + 1040);
    v68 = (char **)(a1 + 1064);
    v70 = (void **)(a1 + 1208);
    *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a1 + 1264);
    if (a2 >= 1)
    {
      v51 = 0;
      v81 = -(uint64_t)v80;
      do
      {
        v52 = *(_QWORD **)(a1 + 160);
        for (i = *(_QWORD **)(a1 + 168); v52 != i; ++v52)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v52 + 16))(*v52, a3);
        v54 = *sub_19C18FEB8(a1, 9);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
        {
          if (*(int *)(a1 + 280) >= 1)
          {
            v55 = 0;
            v56 = (char *)*v79;
            do
            {
              v57 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
              v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
              memmove(v54, v56, v58 * v57);
              v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 9);
              v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
              v54 = (uint64_t *)((char *)v54 + v59);
              v56 += (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v60);
              ++v55;
            }
            while (v55 < *(_DWORD *)(a1 + 280));
          }
        }
        else
        {
          v61 = *(const void **)(a1 + 1288);
          v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
          memmove(v54, v61, *(int *)(a1 + 280) * (uint64_t)(v63 * v62));
        }
        v64 = sub_19C18FCD8(a1, 1);
        *v64 = (uint64_t *)((char *)*v64 + 4 * v81);
        v65 = sub_19C18FEB8(a1, 9);
        *v65 = (uint64_t *)((char *)*v65 - 4 * v77);
        ++v51;
      }
      while (v51 != a2);
    }
    *(_OWORD *)v79 = v72;
    v69 = (void **)(a1 + 1088);
    if (v74 != &v95)
      sub_19C11EAD0(v74, v95, v96, (v96 - v95) >> 3);
    if (v67 != &v92)
      sub_19C11EAD0(v67, v92, v93, (v93 - v92) >> 3);
    if (v68 != &v89)
      sub_19C11EAD0(v68, v89, v90, (v90 - v89) >> 3);
    if (v69 != &v86)
      sub_19C11EAD0(v69, (char *)v86, v87, (v87 - (_BYTE *)v86) >> 3);
    if (v70 != &__p)
      sub_19C11EAD0(v70, (char *)__p, v84, (v84 - (_BYTE *)__p) >> 3);
    *(_QWORD *)(a1 + 1256) = v71;
    if (__p)
    {
      v84 = (char *)__p;
      operator delete(__p);
    }
    if (v86)
    {
      v87 = (char *)v86;
      operator delete(v86);
    }
    if (v89)
    {
      v90 = v89;
      operator delete(v89);
    }
    if (v92)
    {
      v93 = v92;
      operator delete(v92);
    }
    if (v95)
    {
      v96 = v95;
      operator delete(v95);
    }
  }
  for (j = *(_QWORD *)(a1 + 240); j != v5; j = *(_QWORD *)(j + 8))
  {
    sub_19C2335C4(*(_QWORD *)(a1 + 8), *(_DWORD *)(j + 16) * a3, *(void **)(j + 24));
    *(_QWORD *)(j + 24) = 0;
  }
  *sub_19C18FCD8(a1, 1) = v76;
  *sub_19C18FEB8(a1, 9) = v75;
  sub_19C18E6A4(a1);
}

void sub_19C170FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (__p)
  {
    operator delete(__p);
    v31 = a28;
    if (!a28)
    {
LABEL_3:
      v32 = *(void **)(v29 - 160);
      if (!v32)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v31 = a28;
    if (!a28)
      goto LABEL_3;
  }
  operator delete(v31);
  v32 = *(void **)(v29 - 160);
  if (!v32)
  {
LABEL_4:
    v33 = *(void **)(v29 - 136);
    if (!v33)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v29 - 152) = v32;
  operator delete(v32);
  v33 = *(void **)(v29 - 136);
  if (!v33)
  {
LABEL_5:
    v34 = *(void **)(v29 - 112);
    if (!v34)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_11:
  *(_QWORD *)(v29 - 128) = v33;
  operator delete(v33);
  v34 = *(void **)(v29 - 112);
  if (!v34)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_6:
  *(_QWORD *)(v29 - 104) = v34;
  operator delete(v34);
  goto LABEL_7;
}

void sub_19C171070(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void *__p;
  char *v36;
  char *v37;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v6;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
  {
    v8 = 0;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 1272);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v9;
  }
  v10 = v8 + v7;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  __p = 0;
  v36 = 0;
  v37 = 0;
  if (v10)
  {
    if (v10 < 0)
      sub_19C07DA0C();
    v12 = v10 << v11;
    v13 = (char *)operator new(v12);
    __p = v13;
    v37 = &v13[v12];
    bzero(v13, v12);
    v36 = &v13[v12];
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 1288);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  memmove(v13, (const void *)(v14 + 4 * v15 * a3), v17 * v16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
  {
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v20 = *(_QWORD *)(a1 + 1304);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v13 += v19 * v18;
    memmove(v13, (const void *)(v20 + 4 * v21 * a3), v23 * v22);
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 9
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 10)
  {
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v26 = *(_QWORD *)(a1 + 1296);
    v27 = *(_DWORD *)(a1 + 1272);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v29 = &v13[v25 * v24];
    memmove(v29, (const void *)(v26 + 4 * v27 * a3), v28 * v27);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
    {
      v30 = *(_DWORD *)(a1 + 1272);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
      v32 = *(_QWORD *)(a1 + 1312);
      v33 = *(_DWORD *)(a1 + 1272);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
      memmove(&v29[v30 * (uint64_t)v31], (const void *)(v32 + 4 * v33 * a3), v34 * v33);
    }
  }
  sub_19C1875B0((uint64_t **)(a2 + 16), (__int128 *)(a1 + 256), (char **)&__p);
  if (__p)
  {
    v36 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19C1713A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1713C8(uint64_t a1, const __CFArray *a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  int v17;
  char *v18;
  const void *ValueAtIndex;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  int v38;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v6;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
  {
    v8 = 0;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 1272);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v9;
  }
  v10 = (v8 + v7) << (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  v11 = *(_DWORD *)(a1 + 280);
  v12 = v10 * a3;
  v13 = *(void **)(a1 + 1280);
  if (v11 == a3)
  {
    if (v13)
      goto LABEL_19;
  }
  else if (v13)
  {
    sub_19C2335C4(*(_QWORD *)(a1 + 8), v10 * v11, v13);
  }
  v14 = sub_19C2335AC();
  *(_QWORD *)(a1 + 1280) = v14;
  *(_QWORD *)(a1 + 1288) = v14;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
  {
    v14 += 4 * (int)((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9) * a3);
    *(_QWORD *)(a1 + 1304) = v14;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 9
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 10)
  {
    v14 += 4 * (int)((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9) * a3);
    *(_QWORD *)(a1 + 1296) = v14;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1)
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 9
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 10)
  {
    *(_QWORD *)(a1 + 1312) = v14 + 4 * *(_DWORD *)(a1 + 1272) * a3;
  }
LABEL_19:
  if (a2)
  {
    if (a3 >= 1)
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(a1 + 1288);
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
        v18 = (char *)(v16 + (int)(v17 * v15 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1)));
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v15);
        v20 = sub_19C18731C((uint64_t)ValueAtIndex + 16, (const void **)(a1 + 256));
        v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
        memmove(v18, v20, v22 * v21);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
        {
          v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v18 += (int)(v23 * a3 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1));
          v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v20 = (uint64_t *)((char *)v20 + (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v24));
          v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
          memmove(v18, v20, v26 * v25);
        }
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 9
          && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 10)
        {
          v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v28 = &v18[(int)(v27 * a3 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1))];
          v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v30 = (char *)v20 + (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v29);
          v31 = *(_DWORD *)(a1 + 1272);
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
          memmove(v28, v30, v31 * (uint64_t)v32);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
          {
            v33 = *(_DWORD *)(a1 + 1272);
            v34 = &v28[(int)(v33 * a3 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1))];
            v35 = *(_DWORD *)(a1 + 1272);
            v36 = &v30[v35 * (uint64_t)(*(int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1)];
            v37 = *(_DWORD *)(a1 + 1272);
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
            memmove(v34, v36, v37 * (uint64_t)v38);
          }
        }
        ++v15;
      }
      while (a3 != v15);
    }
  }
  else
  {
    bzero(*(void **)(a1 + 1280), v12);
  }
}

void sub_19C171874(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  char v7;

  sub_19C18E6A4(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
  {
    v4 = 0;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 1272);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v5;
  }
  v6 = v4 + v3 * v2;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  sub_19C2335C4(*(_QWORD *)(a1 + 8), (v6 << v7) * *(_DWORD *)(a1 + 280), *(void **)(a1 + 1280));
  *(_QWORD *)(a1 + 1280) = 0;
}

uint64_t sub_19C171948(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = sub_19C18E71C(a1);
  if (*(_QWORD *)(a1 + 1280))
  {
    v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v3;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
      || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
    {
      v5 = 0;
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 1272);
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v6;
    }
    return (v2
                        + ((v5 + v4) << (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
                        * *(_DWORD *)(a1 + 280));
  }
  return v2;
}

int64x2_t sub_19C171A1C(int *a1, int a2)
{
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  char *v8;
  uint64_t **v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  int64x2_t result;

  v4 = a1[142];
  v5 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 240))(a1);
  v6 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 224))(a1);
  v7 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a1 + 216))(a1, 1);
  v9 = (uint64_t **)(a1 + 12);
  v8 = (char *)*((_QWORD *)a1 + 6);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = v8;
        v11 = *((_DWORD *)v8 + 8);
        if (v11 <= a2)
          break;
        v8 = *(char **)v10;
        v9 = (uint64_t **)v10;
        if (!*(_QWORD *)v10)
          goto LABEL_8;
      }
      if (v11 >= a2)
        break;
      v8 = (char *)*((_QWORD *)v10 + 1);
      if (!v8)
      {
        v9 = (uint64_t **)(v10 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v10 = (char *)(a1 + 12);
LABEL_8:
    v12 = v10;
    v10 = (char *)operator new(0x50uLL);
    *((_DWORD *)v10 + 8) = a2;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((_QWORD *)v10 + 9) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v12;
    *v9 = (uint64_t *)v10;
    v13 = **((_QWORD **)a1 + 5);
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *((_QWORD *)a1 + 5) = v13;
      v14 = *v9;
    }
    sub_19C07CC40(*((uint64_t **)a1 + 6), v14);
    ++*((_QWORD *)a1 + 7);
  }
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v10 + 40) = result;
  *((_QWORD *)v10 + 7) = v4 << v5;
  *((_QWORD *)v10 + 8) = v6;
  *((_QWORD *)v10 + 9) = v7;
  return result;
}

uint64_t sub_19C171B58(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  *(_QWORD *)a1 = &unk_1E3D24A50;
  sub_19C1909BC(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
  {
    v4 = 0;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 1272);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v5;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  sub_19C2335C4(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 280) * ((v4 + v3 * v2) << v6), *(void **)(a1 + 1280));
  *(_QWORD *)(a1 + 1280) = 0;
  v7 = *(void **)(a1 + 1232);
  if (v7)
  {
    *(_QWORD *)(a1 + 1240) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 1208);
  if (v8)
  {
    *(_QWORD *)(a1 + 1216) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 1184);
  if (v9)
  {
    *(_QWORD *)(a1 + 1192) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 1160);
  if (v10)
  {
    *(_QWORD *)(a1 + 1168) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 1136);
  if (v11)
  {
    *(_QWORD *)(a1 + 1144) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 1112);
  if (v12)
  {
    *(_QWORD *)(a1 + 1120) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 1088);
  if (v13)
  {
    *(_QWORD *)(a1 + 1096) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 1064);
  if (v14)
  {
    *(_QWORD *)(a1 + 1072) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 1040);
  if (v15)
  {
    *(_QWORD *)(a1 + 1048) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 1016);
  if (v16)
  {
    *(_QWORD *)(a1 + 1024) = v16;
    operator delete(v16);
  }
  return sub_19C190830(a1);
}

void sub_19C171CE8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C171B58(a1);
  operator delete(v1);
}

uint64_t sub_19C171CFC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *__src)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _OWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _OWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  _OWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _OWORD *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  uint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  _OWORD *v167;
  uint64_t *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  _BYTE *v181;
  uint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  _OWORD *v187;
  uint64_t *v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  int64_t v199;
  _BYTE *v200;
  size_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  int64_t v207;
  _BYTE *v208;
  size_t v209;
  uint64_t v210;
  int v211;
  uint64_t **v213;
  uint64_t **v214;
  char **v215;
  char **v216;
  uint64_t **v217;
  uint64_t **v218;
  char **v219;
  uint64_t **v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  void *__p[2];
  uint64_t v226;
  _BYTE __srca[24];
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231[4];

  *(_QWORD *)v231 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v226 = *(_QWORD *)(a2 + 16);
  }
  sub_19C19065C(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v226) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D24A50;
  v218 = (uint64_t **)(a1 + 1040);
  v219 = (char **)(a1 + 1064);
  v216 = (char **)(a1 + 1112);
  v217 = (uint64_t **)(a1 + 1088);
  v214 = (uint64_t **)(a1 + 1136);
  v215 = (char **)(a1 + 1160);
  v213 = (uint64_t **)(a1 + 1184);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  v220 = (uint64_t **)(a1 + 1016);
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_QWORD *)(a1 + 1312) = 0;
  v7 = __src[7];
  if (v7 <= 1)
    v7 = 1;
  *(_QWORD *)(a1 + 1320) = v7;
  v8 = __src[9];
  if (!v8)
    v8 = 2;
  *(_QWORD *)(a1 + 1328) = v8;
  v9 = __src[8];
  if (v9 <= 1)
    v9 = 1;
  *(_QWORD *)(a1 + 1336) = v9;
  v10 = __src[10];
  if (v10 <= 1)
    v10 = 1;
  *(_QWORD *)(a1 + 1344) = v10;
  v11 = __src[11];
  if (!v11)
    v11 = 2;
  *(_QWORD *)(a1 + 1352) = v11;
  v12 = *((int *)__src + 32);
  *(_DWORD *)__srca = 1;
  *(int64x2_t *)&__srca[8] = vdupq_n_s64(1uLL);
  v229 = 0;
  v230 = 0;
  v228 = v12;
  sub_19C07C964(a1 + 16, (int *)__srca, v231);
  v13 = *((_DWORD *)__src + 64);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  *(_DWORD *)__srca = 9;
  *(int64x2_t *)&__srca[8] = vdupq_n_s64(1uLL);
  v229 = 0;
  v230 = 0;
  v228 = v13 << v14;
  sub_19C07C964(a1 + 40, (int *)__srca, v231);
  v15 = 0;
  v16 = *((_DWORD *)__src + 64);
  v222 = v16 * (uint64_t)*((int *)__src + 32);
  v223 = v16;
  v221 = v16 * v16;
  v224 = __src;
  do
  {
    v18 = __src[56] + v15 * v222;
    v19 = *(uint64_t **)(a1 + 1024);
    v20 = *(_QWORD *)(a1 + 1032);
    if ((unint64_t)v19 < v20)
    {
      *v19 = v18;
      v21 = (uint64_t)(v19 + 1);
      goto LABEL_41;
    }
    v22 = *v220;
    v23 = (char *)v19 - (char *)*v220;
    v24 = v23 >> 3;
    v25 = (v23 >> 3) + 1;
    if (v25 >> 61)
      sub_19C07DA0C();
    v26 = v20 - (_QWORD)v22;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        sub_19C07C7FC();
      v28 = operator new(8 * v27);
      v29 = (uint64_t *)&v28[8 * v24];
      *v29 = v18;
      v21 = (uint64_t)(v29 + 1);
      if (v19 == v22)
      {
LABEL_39:
        *(_QWORD *)(a1 + 1016) = v29;
        *(_QWORD *)(a1 + 1024) = v21;
        *(_QWORD *)(a1 + 1032) = &v28[8 * v27];
        if (!v19)
          goto LABEL_41;
LABEL_40:
        operator delete(v19);
        goto LABEL_41;
      }
    }
    else
    {
      v28 = 0;
      v29 = (uint64_t *)(8 * v24);
      *(_QWORD *)(8 * v24) = v18;
      v21 = 8 * v24 + 8;
      if (v19 == v22)
        goto LABEL_39;
    }
    v30 = (char *)(v19 - 1) - (char *)v22;
    if (v30 < 0x58)
      goto LABEL_252;
    if ((unint64_t)((char *)v19 - &v28[v23]) < 0x20)
      goto LABEL_252;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v19[v32 / 0xFFFFFFFFFFFFFFF8];
    v29 = (uint64_t *)((char *)v29 - v32);
    v34 = &v28[8 * v24 - 16];
    v35 = v19 - 2;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 4;
      v36 -= 4;
    }
    while (v36);
    v19 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_252:
      do
      {
        v38 = *--v19;
        *--v29 = v38;
      }
      while (v19 != v22);
    }
    v19 = *v220;
    *(_QWORD *)(a1 + 1016) = v29;
    *(_QWORD *)(a1 + 1024) = v21;
    *(_QWORD *)(a1 + 1032) = &v28[8 * v27];
    if (v19)
      goto LABEL_40;
LABEL_41:
    *(_QWORD *)(a1 + 1024) = v21;
    v39 = __src[57] + (v221 * v15);
    v40 = *(char **)(a1 + 1072);
    v41 = *(_QWORD *)(a1 + 1080);
    if ((unint64_t)v40 < v41)
    {
      *(_QWORD *)v40 = v39;
      v42 = (uint64_t)(v40 + 8);
      goto LABEL_63;
    }
    v43 = *v219;
    v44 = v40 - *v219;
    v45 = v44 >> 3;
    v46 = (v44 >> 3) + 1;
    if (v46 >> 61)
      sub_19C07DA0C();
    v47 = v41 - (_QWORD)v43;
    if (v47 >> 2 > v46)
      v46 = v47 >> 2;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      if (v48 >> 61)
        sub_19C07C7FC();
      v49 = operator new(8 * v48);
      v50 = &v49[8 * v45];
      *v50 = v39;
      v42 = (uint64_t)(v50 + 1);
      if (v40 == v43)
      {
LABEL_61:
        *(_QWORD *)(a1 + 1064) = v50;
        *(_QWORD *)(a1 + 1072) = v42;
        *(_QWORD *)(a1 + 1080) = &v49[8 * v48];
        if (!v40)
          goto LABEL_63;
LABEL_62:
        operator delete(v40);
        goto LABEL_63;
      }
    }
    else
    {
      v49 = 0;
      v50 = (_QWORD *)(8 * v45);
      *(_QWORD *)(8 * v45) = v39;
      v42 = 8 * v45 + 8;
      if (v40 == v43)
        goto LABEL_61;
    }
    v51 = v40 - 8 - v43;
    if (v51 < 0x58)
      goto LABEL_253;
    if ((unint64_t)(v40 - &v49[v44]) < 0x20)
      goto LABEL_253;
    v52 = (v51 >> 3) + 1;
    v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    v54 = &v40[-v53];
    v50 = (_QWORD *)((char *)v50 - v53);
    v55 = &v49[8 * v45 - 16];
    v56 = (__int128 *)(v40 - 16);
    v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v58 = *v56;
      *(v55 - 1) = *(v56 - 1);
      *v55 = v58;
      v55 -= 2;
      v56 -= 2;
      v57 -= 4;
    }
    while (v57);
    v40 = v54;
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_253:
      do
      {
        v59 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v50 = v59;
      }
      while (v40 != v43);
    }
    v40 = *v219;
    *(_QWORD *)(a1 + 1064) = v50;
    *(_QWORD *)(a1 + 1072) = v42;
    *(_QWORD *)(a1 + 1080) = &v49[8 * v48];
    if (v40)
      goto LABEL_62;
LABEL_63:
    *(_QWORD *)(a1 + 1072) = v42;
    v60 = v15 * v223;
    v61 = __src[72] + 4 * v15 * v223;
    v62 = *(uint64_t **)(a1 + 1048);
    v63 = *(_QWORD *)(a1 + 1056);
    if ((unint64_t)v62 < v63)
    {
      *v62 = v61;
      v64 = (uint64_t)(v62 + 1);
      goto LABEL_86;
    }
    v65 = *v218;
    v66 = (char *)v62 - (char *)*v218;
    v67 = v66 >> 3;
    v68 = (v66 >> 3) + 1;
    if (v68 >> 61)
      sub_19C07DA0C();
    v69 = v63 - (_QWORD)v65;
    if (v69 >> 2 > v68)
      v68 = v69 >> 2;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
      v70 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    if (v70)
    {
      if (v70 >> 61)
        sub_19C07C7FC();
      v71 = operator new(8 * v70);
      v72 = (uint64_t *)&v71[8 * v67];
      *v72 = v61;
      v64 = (uint64_t)(v72 + 1);
      if (v62 != v65)
      {
LABEL_74:
        v73 = (char *)(v62 - 1) - (char *)v65;
        if (v73 >= 0x58)
        {
          v74 = (char *)v62 - &v71[v66];
          __src = v224;
          if (v74 >= 0x20)
          {
            v75 = (v73 >> 3) + 1;
            v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
            v77 = &v62[v76 / 0xFFFFFFFFFFFFFFF8];
            v72 = (uint64_t *)((char *)v72 - v76);
            v78 = &v71[8 * v67 - 16];
            v79 = v62 - 2;
            v80 = v75 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v81 = *(_OWORD *)v79;
              *(v78 - 1) = *((_OWORD *)v79 - 1);
              *v78 = v81;
              v78 -= 2;
              v79 -= 4;
              v80 -= 4;
            }
            while (v80);
            v62 = v77;
            if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_84:
              v62 = *v218;
              *(_QWORD *)(a1 + 1040) = v72;
              *(_QWORD *)(a1 + 1048) = v64;
              *(_QWORD *)(a1 + 1056) = &v71[8 * v70];
              if (!v62)
                goto LABEL_86;
LABEL_85:
              operator delete(v62);
              goto LABEL_86;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          v82 = *--v62;
          *--v72 = v82;
        }
        while (v62 != v65);
        goto LABEL_84;
      }
    }
    else
    {
      v71 = 0;
      v72 = (uint64_t *)(8 * v67);
      *(_QWORD *)(8 * v67) = v61;
      v64 = 8 * v67 + 8;
      if (v62 != v65)
        goto LABEL_74;
    }
    __src = v224;
    *(_QWORD *)(a1 + 1040) = v72;
    *(_QWORD *)(a1 + 1048) = v64;
    *(_QWORD *)(a1 + 1056) = &v71[8 * v70];
    if (v62)
      goto LABEL_85;
LABEL_86:
    *(_QWORD *)(a1 + 1048) = v64;
    v83 = __src[73] + 4 * v60;
    v84 = *(uint64_t **)(a1 + 1096);
    v85 = *(_QWORD *)(a1 + 1104);
    if ((unint64_t)v84 < v85)
    {
      *v84 = v83;
      v86 = (uint64_t)(v84 + 1);
      v87 = v15 * v222;
      goto LABEL_109;
    }
    v88 = *v217;
    v89 = (char *)v84 - (char *)*v217;
    v90 = v89 >> 3;
    v91 = (v89 >> 3) + 1;
    if (v91 >> 61)
      sub_19C07DA0C();
    v92 = v85 - (_QWORD)v88;
    if (v92 >> 2 > v91)
      v91 = v92 >> 2;
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
      v93 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v93 = v91;
    if (v93)
    {
      if (v93 >> 61)
        sub_19C07C7FC();
      v94 = operator new(8 * v93);
      v95 = (uint64_t *)&v94[8 * v90];
      *v95 = v83;
      v86 = (uint64_t)(v95 + 1);
      if (v84 != v88)
      {
LABEL_97:
        v96 = (char *)(v84 - 1) - (char *)v88;
        v87 = v15 * v222;
        if (v96 >= 0x58)
        {
          v97 = (char *)v84 - &v94[v89];
          __src = v224;
          if (v97 >= 0x20)
          {
            v98 = (v96 >> 3) + 1;
            v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
            v100 = &v84[v99 / 0xFFFFFFFFFFFFFFF8];
            v95 = (uint64_t *)((char *)v95 - v99);
            v101 = &v94[8 * v90 - 16];
            v102 = v84 - 2;
            v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v104 = *(_OWORD *)v102;
              *(v101 - 1) = *((_OWORD *)v102 - 1);
              *v101 = v104;
              v101 -= 2;
              v102 -= 4;
              v103 -= 4;
            }
            while (v103);
            v84 = v100;
            if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_107:
              v84 = *v217;
              *(_QWORD *)(a1 + 1088) = v95;
              *(_QWORD *)(a1 + 1096) = v86;
              *(_QWORD *)(a1 + 1104) = &v94[8 * v93];
              if (!v84)
                goto LABEL_109;
LABEL_108:
              operator delete(v84);
              goto LABEL_109;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          v105 = *--v84;
          *--v95 = v105;
        }
        while (v84 != v88);
        goto LABEL_107;
      }
    }
    else
    {
      v94 = 0;
      v95 = (uint64_t *)(8 * v90);
      *(_QWORD *)(8 * v90) = v83;
      v86 = 8 * v90 + 8;
      if (v84 != v88)
        goto LABEL_97;
    }
    v87 = v15 * v222;
    __src = v224;
    *(_QWORD *)(a1 + 1088) = v95;
    *(_QWORD *)(a1 + 1096) = v86;
    *(_QWORD *)(a1 + 1104) = &v94[8 * v93];
    if (v84)
      goto LABEL_108;
LABEL_109:
    *(_QWORD *)(a1 + 1096) = v86;
    v106 = __src[58] + v87;
    v107 = *(char **)(a1 + 1120);
    v108 = *(_QWORD *)(a1 + 1128);
    if ((unint64_t)v107 < v108)
    {
      *(_QWORD *)v107 = v106;
      v109 = (uint64_t)(v107 + 8);
      goto LABEL_132;
    }
    v110 = *v216;
    v111 = v107 - *v216;
    v112 = v111 >> 3;
    v113 = (v111 >> 3) + 1;
    if (v113 >> 61)
      sub_19C07DA0C();
    v114 = v108 - (_QWORD)v110;
    if (v114 >> 2 > v113)
      v113 = v114 >> 2;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
      v115 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    if (v115)
    {
      if (v115 >> 61)
        sub_19C07C7FC();
      v116 = operator new(8 * v115);
      v117 = (uint64_t *)&v116[8 * v112];
      *v117 = v106;
      v109 = (uint64_t)(v117 + 1);
      if (v107 != v110)
      {
LABEL_120:
        v118 = v107 - 8 - v110;
        if (v118 >= 0x58)
        {
          v119 = v107 - &v116[v111];
          __src = v224;
          if (v119 >= 0x20)
          {
            v120 = (v118 >> 3) + 1;
            v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
            v122 = &v107[-v121];
            v117 = (uint64_t *)((char *)v117 - v121);
            v123 = &v116[8 * v112 - 16];
            v124 = v107 - 16;
            v125 = v120 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v126 = *(_OWORD *)v124;
              *(v123 - 1) = *((_OWORD *)v124 - 1);
              *v123 = v126;
              v123 -= 2;
              v124 -= 32;
              v125 -= 4;
            }
            while (v125);
            v107 = v122;
            if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_130:
              v107 = *v216;
              *(_QWORD *)(a1 + 1112) = v117;
              *(_QWORD *)(a1 + 1120) = v109;
              *(_QWORD *)(a1 + 1128) = &v116[8 * v115];
              if (!v107)
                goto LABEL_132;
LABEL_131:
              operator delete(v107);
              goto LABEL_132;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          v127 = *((_QWORD *)v107 - 1);
          v107 -= 8;
          *--v117 = v127;
        }
        while (v107 != v110);
        goto LABEL_130;
      }
    }
    else
    {
      v116 = 0;
      v117 = (uint64_t *)(8 * v112);
      *(_QWORD *)(8 * v112) = v106;
      v109 = 8 * v112 + 8;
      if (v107 != v110)
        goto LABEL_120;
    }
    __src = v224;
    *(_QWORD *)(a1 + 1112) = v117;
    *(_QWORD *)(a1 + 1120) = v109;
    *(_QWORD *)(a1 + 1128) = &v116[8 * v115];
    if (v107)
      goto LABEL_131;
LABEL_132:
    *(_QWORD *)(a1 + 1120) = v109;
    v128 = __src[59] + (v221 * v15);
    v129 = *(char **)(a1 + 1168);
    v130 = *(_QWORD *)(a1 + 1176);
    if ((unint64_t)v129 < v130)
    {
      *(_QWORD *)v129 = v128;
      v131 = (uint64_t)(v129 + 8);
      goto LABEL_155;
    }
    v132 = *v215;
    v133 = v129 - *v215;
    v134 = v133 >> 3;
    v135 = (v133 >> 3) + 1;
    if (v135 >> 61)
      sub_19C07DA0C();
    v136 = v130 - (_QWORD)v132;
    if (v136 >> 2 > v135)
      v135 = v136 >> 2;
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
      v137 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v137 = v135;
    if (v137)
    {
      if (v137 >> 61)
        sub_19C07C7FC();
      v138 = operator new(8 * v137);
      v139 = &v138[8 * v134];
      *v139 = v128;
      v131 = (uint64_t)(v139 + 1);
      if (v129 != v132)
      {
LABEL_143:
        v140 = v129 - 8 - v132;
        if (v140 >= 0x58)
        {
          v141 = v129 - &v138[v133];
          __src = v224;
          if (v141 >= 0x20)
          {
            v142 = (v140 >> 3) + 1;
            v143 = 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
            v144 = &v129[-v143];
            v139 = (_QWORD *)((char *)v139 - v143);
            v145 = &v138[8 * v134 - 16];
            v146 = v129 - 16;
            v147 = v142 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v148 = *(_OWORD *)v146;
              *(v145 - 1) = *((_OWORD *)v146 - 1);
              *v145 = v148;
              v145 -= 2;
              v146 -= 32;
              v147 -= 4;
            }
            while (v147);
            v129 = v144;
            if (v142 == (v142 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_153:
              v129 = *v215;
              *(_QWORD *)(a1 + 1160) = v139;
              *(_QWORD *)(a1 + 1168) = v131;
              *(_QWORD *)(a1 + 1176) = &v138[8 * v137];
              if (!v129)
                goto LABEL_155;
LABEL_154:
              operator delete(v129);
              goto LABEL_155;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          v149 = *((_QWORD *)v129 - 1);
          v129 -= 8;
          *--v139 = v149;
        }
        while (v129 != v132);
        goto LABEL_153;
      }
    }
    else
    {
      v138 = 0;
      v139 = (_QWORD *)(8 * v134);
      *(_QWORD *)(8 * v134) = v128;
      v131 = 8 * v134 + 8;
      if (v129 != v132)
        goto LABEL_143;
    }
    __src = v224;
    *(_QWORD *)(a1 + 1160) = v139;
    *(_QWORD *)(a1 + 1168) = v131;
    *(_QWORD *)(a1 + 1176) = &v138[8 * v137];
    if (v129)
      goto LABEL_154;
LABEL_155:
    *(_QWORD *)(a1 + 1168) = v131;
    v150 = __src[74] + 4 * v60;
    v151 = *(uint64_t **)(a1 + 1144);
    v152 = *(_QWORD *)(a1 + 1152);
    if ((unint64_t)v151 < v152)
    {
      *v151 = v150;
      v153 = (uint64_t)(v151 + 1);
      goto LABEL_178;
    }
    v154 = *v214;
    v155 = (char *)v151 - (char *)*v214;
    v156 = v155 >> 3;
    v157 = (v155 >> 3) + 1;
    if (v157 >> 61)
      sub_19C07DA0C();
    v158 = v152 - (_QWORD)v154;
    if (v158 >> 2 > v157)
      v157 = v158 >> 2;
    if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
      v159 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v159 = v157;
    if (v159)
    {
      if (v159 >> 61)
        sub_19C07C7FC();
      v160 = operator new(8 * v159);
      v161 = (uint64_t *)&v160[8 * v156];
      *v161 = v150;
      v153 = (uint64_t)(v161 + 1);
      if (v151 != v154)
      {
LABEL_166:
        v162 = (char *)(v151 - 1) - (char *)v154;
        if (v162 >= 0x58)
        {
          v163 = (char *)v151 - &v160[v155];
          __src = v224;
          if (v163 >= 0x20)
          {
            v164 = (v162 >> 3) + 1;
            v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
            v166 = &v151[v165 / 0xFFFFFFFFFFFFFFF8];
            v161 = (uint64_t *)((char *)v161 - v165);
            v167 = &v160[8 * v156 - 16];
            v168 = v151 - 2;
            v169 = v164 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v170 = *(_OWORD *)v168;
              *(v167 - 1) = *((_OWORD *)v168 - 1);
              *v167 = v170;
              v167 -= 2;
              v168 -= 4;
              v169 -= 4;
            }
            while (v169);
            v151 = v166;
            if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_176:
              v151 = *v214;
              *(_QWORD *)(a1 + 1136) = v161;
              *(_QWORD *)(a1 + 1144) = v153;
              *(_QWORD *)(a1 + 1152) = &v160[8 * v159];
              if (!v151)
                goto LABEL_178;
LABEL_177:
              operator delete(v151);
              goto LABEL_178;
            }
          }
        }
        else
        {
          __src = v224;
        }
        do
        {
          v171 = *--v151;
          *--v161 = v171;
        }
        while (v151 != v154);
        goto LABEL_176;
      }
    }
    else
    {
      v160 = 0;
      v161 = (uint64_t *)(8 * v156);
      *(_QWORD *)(8 * v156) = v150;
      v153 = 8 * v156 + 8;
      if (v151 != v154)
        goto LABEL_166;
    }
    __src = v224;
    *(_QWORD *)(a1 + 1136) = v161;
    *(_QWORD *)(a1 + 1144) = v153;
    *(_QWORD *)(a1 + 1152) = &v160[8 * v159];
    if (v151)
      goto LABEL_177;
LABEL_178:
    *(_QWORD *)(a1 + 1144) = v153;
    v172 = __src[75] + 4 * v60;
    v173 = *(uint64_t **)(a1 + 1192);
    v174 = *(_QWORD *)(a1 + 1200);
    if ((unint64_t)v173 < v174)
    {
      *v173 = v172;
      v17 = (uint64_t)(v173 + 1);
      goto LABEL_18;
    }
    v175 = *v213;
    v176 = (char *)v173 - (char *)*v213;
    v177 = v176 >> 3;
    v178 = (v176 >> 3) + 1;
    if (v178 >> 61)
      sub_19C07DA0C();
    v179 = v174 - (_QWORD)v175;
    if (v179 >> 2 > v178)
      v178 = v179 >> 2;
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8)
      v180 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v180 = v178;
    if (v180)
    {
      if (v180 >> 61)
        sub_19C07C7FC();
      v181 = operator new(8 * v180);
      v182 = (uint64_t *)&v181[8 * v177];
      *v182 = v172;
      v17 = (uint64_t)(v182 + 1);
      if (v173 == v175)
      {
LABEL_197:
        *(_QWORD *)(a1 + 1184) = v182;
        *(_QWORD *)(a1 + 1192) = v17;
        *(_QWORD *)(a1 + 1200) = &v181[8 * v180];
        if (!v173)
          goto LABEL_18;
LABEL_198:
        operator delete(v173);
        goto LABEL_18;
      }
    }
    else
    {
      v181 = 0;
      v182 = (uint64_t *)(8 * v177);
      *(_QWORD *)(8 * v177) = v172;
      v17 = 8 * v177 + 8;
      if (v173 == v175)
        goto LABEL_197;
    }
    v183 = (char *)(v173 - 1) - (char *)v175;
    if (v183 < 0x58)
      goto LABEL_254;
    if ((unint64_t)((char *)v173 - &v181[v176]) < 0x20)
      goto LABEL_254;
    v184 = (v183 >> 3) + 1;
    v185 = 8 * (v184 & 0x3FFFFFFFFFFFFFFCLL);
    v186 = &v173[v185 / 0xFFFFFFFFFFFFFFF8];
    v182 = (uint64_t *)((char *)v182 - v185);
    v187 = &v181[8 * v177 - 16];
    v188 = v173 - 2;
    v189 = v184 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v190 = *(_OWORD *)v188;
      *(v187 - 1) = *((_OWORD *)v188 - 1);
      *v187 = v190;
      v187 -= 2;
      v188 -= 4;
      v189 -= 4;
    }
    while (v189);
    v173 = v186;
    if (v184 != (v184 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_254:
      do
      {
        v191 = *--v173;
        *--v182 = v191;
      }
      while (v173 != v175);
    }
    v173 = *v213;
    *(_QWORD *)(a1 + 1184) = v182;
    *(_QWORD *)(a1 + 1192) = v17;
    *(_QWORD *)(a1 + 1200) = &v181[8 * v180];
    if (v173)
      goto LABEL_198;
LABEL_18:
    *(_QWORD *)(a1 + 1192) = v17;
    ++v15;
  }
  while (v15 != 4);
  v192 = __src[61];
  *(_QWORD *)__srca = __src[60];
  *(_QWORD *)&__srca[8] = *(_QWORD *)__srca + v223;
  v193 = 2 * (int)v223;
  *(_QWORD *)&__srca[16] = *(_QWORD *)__srca + v193;
  v194 = *(_QWORD *)(a1 + 1224);
  v195 = *(char **)(a1 + 1208);
  if ((unint64_t)(v194 - (_QWORD)v195) >= 0x18)
  {
    v198 = *(char **)(a1 + 1216);
    v199 = v198 - v195;
    if ((unint64_t)(v198 - v195) > 0x17)
      goto LABEL_213;
    v200 = &__srca[v199];
    if (v198 != v195)
    {
      memcpy(*(void **)(a1 + 1208), __srca, v198 - v195);
      v195 = *(char **)(a1 + 1216);
    }
    v201 = 24 - v199;
    memcpy(v195, v200, v201);
  }
  else
  {
    if (v195)
    {
      *(_QWORD *)(a1 + 1216) = v195;
      operator delete(v195);
      v194 = 0;
      *(_QWORD *)(a1 + 1208) = 0;
      *(_QWORD *)(a1 + 1216) = 0;
      *(_QWORD *)(a1 + 1224) = 0;
    }
    v196 = v194 >> 2;
    if ((unint64_t)(v194 >> 2) <= 3)
      v196 = 3;
    if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8)
      v197 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v197 = v196;
    if (v197 >> 61)
      sub_19C07DA0C();
    v195 = (char *)operator new(8 * v197);
    *(_QWORD *)(a1 + 1208) = v195;
    *(_QWORD *)(a1 + 1216) = v195;
    *(_QWORD *)(a1 + 1224) = &v195[8 * v197];
LABEL_213:
    *(_OWORD *)v195 = *(_OWORD *)__srca;
    *((_QWORD *)v195 + 2) = *(_QWORD *)&__srca[16];
    v201 = 24;
  }
  *(_QWORD *)(a1 + 1216) = &v195[v201];
  *(_QWORD *)__srca = v192;
  *(_QWORD *)&__srca[8] = v192 + v223;
  *(_QWORD *)&__srca[16] = v192 + v193;
  v202 = *(_QWORD *)(a1 + 1248);
  v203 = *(char **)(a1 + 1232);
  if ((unint64_t)(v202 - (_QWORD)v203) >= 0x18)
  {
    v206 = *(char **)(a1 + 1240);
    v207 = v206 - v203;
    if ((unint64_t)(v206 - v203) > 0x17)
      goto LABEL_228;
    v208 = &__srca[v207];
    if (v206 != v203)
    {
      memcpy(*(void **)(a1 + 1232), __srca, v206 - v203);
      v203 = *(char **)(a1 + 1240);
    }
    v209 = 24 - v207;
    memcpy(v203, v208, v209);
    v210 = v209 >> 3;
  }
  else
  {
    if (v203)
    {
      *(_QWORD *)(a1 + 1240) = v203;
      operator delete(v203);
      v202 = 0;
      *(_QWORD *)(a1 + 1232) = 0;
      *(_QWORD *)(a1 + 1240) = 0;
      *(_QWORD *)(a1 + 1248) = 0;
    }
    v204 = v202 >> 2;
    if ((unint64_t)(v202 >> 2) <= 3)
      v204 = 3;
    if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8)
      v205 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v205 = v204;
    if (v205 >> 61)
      sub_19C07DA0C();
    v203 = (char *)operator new(8 * v205);
    *(_QWORD *)(a1 + 1232) = v203;
    *(_QWORD *)(a1 + 1240) = v203;
    *(_QWORD *)(a1 + 1248) = &v203[8 * v205];
LABEL_228:
    *(_OWORD *)v203 = *(_OWORD *)__srca;
    *((_QWORD *)v203 + 2) = *(_QWORD *)&__srca[16];
    v210 = 3;
  }
  *(_QWORD *)(a1 + 1240) = &v203[8 * v210];
  *(_QWORD *)(a1 + 1256) = __src[62];
  *(_QWORD *)(a1 + 1264) = __src[63];
  v211 = *((_DWORD *)__src + 80);
  if (v211 <= 0)
    v211 = *((_DWORD *)__src + 64);
  *(_DWORD *)(a1 + 1272) = v211;
  return a1;
}

void sub_19C172DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _QWORD *v30;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  v32 = *a9;
  if (*a9)
  {
    v30[155] = v32;
    operator delete(v32);
    v33 = *a10;
    if (!*a10)
    {
LABEL_3:
      v34 = *a11;
      if (!*a11)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v33 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  v30[152] = v33;
  operator delete(v33);
  v34 = *a11;
  if (!*a11)
  {
LABEL_4:
    v35 = *a13;
    if (!*a13)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v30[149] = v34;
  operator delete(v34);
  v35 = *a13;
  if (!*a13)
  {
LABEL_5:
    v36 = *a12;
    if (!*a12)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v30[146] = v35;
  operator delete(v35);
  v36 = *a12;
  if (!*a12)
  {
LABEL_6:
    v37 = *a14;
    if (!*a14)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  v30[143] = v36;
  operator delete(v36);
  v37 = *a14;
  if (!*a14)
  {
LABEL_7:
    v38 = *a15;
    if (!*a15)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  v30[140] = v37;
  operator delete(v37);
  v38 = *a15;
  if (!*a15)
  {
LABEL_8:
    v39 = *a17;
    if (!*a17)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  v30[137] = v38;
  operator delete(v38);
  v39 = *a17;
  if (!*a17)
  {
LABEL_9:
    v40 = *a16;
    if (!*a16)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v30[134] = v39;
  operator delete(v39);
  v40 = *a16;
  if (!*a16)
  {
LABEL_10:
    v41 = *a18;
    if (!*a18)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v30[131] = v40;
  operator delete(v40);
  v41 = *a18;
  if (!*a18)
  {
LABEL_11:
    sub_19C190830((uint64_t)v30);
    _Unwind_Resume(a1);
  }
LABEL_21:
  v30[128] = v41;
  operator delete(v41);
  sub_19C190830((uint64_t)v30);
  _Unwind_Resume(a1);
}

BOOL sub_19C172F74(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 6
      || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10;
}

uint64_t sub_19C172FCC(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      goto LABEL_10;
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
LABEL_10:
  if ((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) == 9)
  {
    v10 = 18;
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
    v10 = 17;
    if (v11 == 10)
      v10 = 18;
  }
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(*a2 + 8 * v10))(a2, a1);
}

void sub_19C1730CC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const void *v9;
  int v10;
  int v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  int64_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  _BYTE *v42;
  int64_t v43;
  char *v44;
  char *v45;
  _BYTE *v46;
  _BYTE *v47;
  int64_t v48;
  char *v49;
  char *v50;
  int v51;
  _QWORD *v52;
  _QWORD *i;
  uint64_t *v54;
  int v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  const void *v61;
  int v62;
  int v63;
  uint64_t **v64;
  uint64_t **v65;
  uint64_t j;
  char **v67;
  char **v68;
  void **v69;
  void **v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  char **v74;
  uint64_t *v75;
  uint64_t *v76;
  int v77;
  int v78;
  const void **v79;
  int v80;
  uint64_t v81;
  void *__p;
  char *v84;
  char *v85;
  void *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;

  *(_DWORD *)(a1 + 280) = a3;
  v76 = *sub_19C18FCD8(a1, 1);
  v75 = *sub_19C18FEB8(a1, 9);
  v5 = a1 + 232;
  v6 = *(_QWORD *)(a1 + 240);
  if (v6 != a1 + 232)
  {
    do
    {
      *(_QWORD *)(v6 + 24) = sub_19C2335AC();
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
  }
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, 1) * a3;
  v80 = v7 / (*(int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 9);
  v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v77 = v78 * (int)a3 / v73;
  if (a2 >= 1)
  {
    v8 = 0;
    do
    {
      v14 = *(uint64_t **)(a1 + 160);
      v15 = *(uint64_t **)(a1 + 168);
      while (v14 != v15)
      {
        v16 = *v14++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a3);
      }
      v17 = *sub_19C18FEB8(a1, 9);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
      {
        if (*(int *)(a1 + 280) >= 1)
        {
          v18 = 0;
          v19 = *(char **)(a1 + 1288);
          do
          {
            v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
            memmove(v17, v19, v21 * v20);
            v17 = (uint64_t *)((char *)v17 + (*(int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 9));
            v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
            v19 += (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v22);
            ++v18;
          }
          while (v18 < *(_DWORD *)(a1 + 280));
        }
      }
      else
      {
        v9 = *(const void **)(a1 + 1288);
        v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
        memmove(v17, v9, *(int *)(a1 + 280) * (uint64_t)(v11 * v10));
      }
      v12 = sub_19C18FCD8(a1, 1);
      *v12 = (uint64_t *)((char *)*v12 + 4 * v80);
      v13 = sub_19C18FEB8(a1, 9);
      *v13 = (uint64_t *)((char *)*v13 + 4 * v77);
      ++v8;
    }
    while (v8 != a2);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1) & 1) != 0)
  {
    v23 = sub_19C18FCD8(a1, 1);
    *v23 = (uint64_t *)((char *)*v23 - 4 * v80);
    v24 = sub_19C18FEB8(a1, 9);
    *v24 = (uint64_t *)((char *)*v24 - 4 * v77);
    v25 = sub_19C18FEB8(a1, 9);
    *v25 = (uint64_t *)((char *)*v25 + 4 * (v78 / v73 / 2));
    v72 = *(_OWORD *)(a1 + 1288);
    v79 = (const void **)(a1 + 1288);
    *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a1 + 1304);
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v26 = *(_BYTE **)(a1 + 1016);
    v27 = *(_BYTE **)(a1 + 1024);
    v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 < 0)
        sub_19C07DA0C();
      v29 = (char *)operator new(v27 - v26);
      v30 = &v29[8 * (v28 >> 3)];
      v95 = v29;
      v97 = v30;
      memcpy(v29, v26, v28);
      v96 = v30;
    }
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v31 = *(_BYTE **)(a1 + 1040);
    v32 = *(_BYTE **)(a1 + 1048);
    v33 = v32 - v31;
    if (v32 != v31)
    {
      if (v33 < 0)
        sub_19C07DA0C();
      v34 = (char *)operator new(v32 - v31);
      v35 = &v34[8 * (v33 >> 3)];
      v92 = v34;
      v94 = v35;
      memcpy(v34, v31, v33);
      v93 = v35;
    }
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v36 = *(_BYTE **)(a1 + 1064);
    v37 = *(_BYTE **)(a1 + 1072);
    v38 = v37 - v36;
    if (v37 != v36)
    {
      if (v38 < 0)
        sub_19C07DA0C();
      v39 = (char *)operator new(v37 - v36);
      v40 = &v39[8 * (v38 >> 3)];
      v89 = v39;
      v91 = v40;
      memcpy(v39, v36, v38);
      v90 = v40;
    }
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v41 = *(_BYTE **)(a1 + 1088);
    v42 = *(_BYTE **)(a1 + 1096);
    v43 = v42 - v41;
    if (v42 != v41)
    {
      if (v43 < 0)
        sub_19C07DA0C();
      v44 = (char *)operator new(v42 - v41);
      v45 = &v44[8 * (v43 >> 3)];
      v86 = v44;
      v88 = v45;
      memcpy(v44, v41, v43);
      v87 = v45;
    }
    __p = 0;
    v84 = 0;
    v85 = 0;
    v46 = *(_BYTE **)(a1 + 1208);
    v47 = *(_BYTE **)(a1 + 1216);
    v48 = v47 - v46;
    if (v47 != v46)
    {
      if (v48 < 0)
        sub_19C07DA0C();
      v49 = (char *)operator new(v47 - v46);
      v50 = &v49[8 * (v48 >> 3)];
      __p = v49;
      v85 = v50;
      memcpy(v49, v46, v48);
      v84 = v50;
    }
    v71 = *(_QWORD *)(a1 + 1256);
    v74 = (char **)(a1 + 1016);
    sub_19C11EAD0((_QWORD *)(a1 + 1016), *(char **)(a1 + 1112), *(char **)(a1 + 1120), (uint64_t)(*(_QWORD *)(a1 + 1120) - *(_QWORD *)(a1 + 1112)) >> 3);
    sub_19C11EAD0((_QWORD *)(a1 + 1040), *(char **)(a1 + 1136), *(char **)(a1 + 1144), (uint64_t)(*(_QWORD *)(a1 + 1144) - *(_QWORD *)(a1 + 1136)) >> 3);
    sub_19C11EAD0((_QWORD *)(a1 + 1064), *(char **)(a1 + 1160), *(char **)(a1 + 1168), (uint64_t)(*(_QWORD *)(a1 + 1168) - *(_QWORD *)(a1 + 1160)) >> 3);
    sub_19C11EAD0((_QWORD *)(a1 + 1088), *(char **)(a1 + 1184), *(char **)(a1 + 1192), (uint64_t)(*(_QWORD *)(a1 + 1192) - *(_QWORD *)(a1 + 1184)) >> 3);
    sub_19C11EAD0((_QWORD *)(a1 + 1208), *(char **)(a1 + 1232), *(char **)(a1 + 1240), (uint64_t)(*(_QWORD *)(a1 + 1240) - *(_QWORD *)(a1 + 1232)) >> 3);
    v67 = (char **)(a1 + 1040);
    v68 = (char **)(a1 + 1064);
    v70 = (void **)(a1 + 1208);
    *(_QWORD *)(a1 + 1256) = *(_QWORD *)(a1 + 1264);
    if (a2 >= 1)
    {
      v51 = 0;
      v81 = -(uint64_t)v80;
      do
      {
        v52 = *(_QWORD **)(a1 + 160);
        for (i = *(_QWORD **)(a1 + 168); v52 != i; ++v52)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v52 + 16))(*v52, a3);
        v54 = *sub_19C18FEB8(a1, 9);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
        {
          if (*(int *)(a1 + 280) >= 1)
          {
            v55 = 0;
            v56 = (char *)*v79;
            do
            {
              v57 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
              v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
              memmove(v54, v56, v58 * v57);
              v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 9);
              v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
              v54 = (uint64_t *)((char *)v54 + v59);
              v56 += (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v60);
              ++v55;
            }
            while (v55 < *(_DWORD *)(a1 + 280));
          }
        }
        else
        {
          v61 = *(const void **)(a1 + 1288);
          v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
          memmove(v54, v61, *(int *)(a1 + 280) * (uint64_t)(v63 * v62));
        }
        v64 = sub_19C18FCD8(a1, 1);
        *v64 = (uint64_t *)((char *)*v64 + 4 * v81);
        v65 = sub_19C18FEB8(a1, 9);
        *v65 = (uint64_t *)((char *)*v65 - 4 * v77);
        ++v51;
      }
      while (v51 != a2);
    }
    *(_OWORD *)v79 = v72;
    v69 = (void **)(a1 + 1088);
    if (v74 != &v95)
      sub_19C11EAD0(v74, v95, v96, (v96 - v95) >> 3);
    if (v67 != &v92)
      sub_19C11EAD0(v67, v92, v93, (v93 - v92) >> 3);
    if (v68 != &v89)
      sub_19C11EAD0(v68, v89, v90, (v90 - v89) >> 3);
    if (v69 != &v86)
      sub_19C11EAD0(v69, (char *)v86, v87, (v87 - (_BYTE *)v86) >> 3);
    if (v70 != &__p)
      sub_19C11EAD0(v70, (char *)__p, v84, (v84 - (_BYTE *)__p) >> 3);
    *(_QWORD *)(a1 + 1256) = v71;
    if (__p)
    {
      v84 = (char *)__p;
      operator delete(__p);
    }
    if (v86)
    {
      v87 = (char *)v86;
      operator delete(v86);
    }
    if (v89)
    {
      v90 = v89;
      operator delete(v89);
    }
    if (v92)
    {
      v93 = v92;
      operator delete(v92);
    }
    if (v95)
    {
      v96 = v95;
      operator delete(v95);
    }
  }
  for (j = *(_QWORD *)(a1 + 240); j != v5; j = *(_QWORD *)(j + 8))
  {
    sub_19C2335C4(*(_QWORD *)(a1 + 8), *(_DWORD *)(j + 16) * a3, *(void **)(j + 24));
    *(_QWORD *)(j + 24) = 0;
  }
  *sub_19C18FCD8(a1, 1) = v76;
  *sub_19C18FEB8(a1, 9) = v75;
  sub_19C1909BC(a1);
}

void sub_19C173960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (__p)
  {
    operator delete(__p);
    v31 = a28;
    if (!a28)
    {
LABEL_3:
      v32 = *(void **)(v29 - 160);
      if (!v32)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v31 = a28;
    if (!a28)
      goto LABEL_3;
  }
  operator delete(v31);
  v32 = *(void **)(v29 - 160);
  if (!v32)
  {
LABEL_4:
    v33 = *(void **)(v29 - 136);
    if (!v33)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  *(_QWORD *)(v29 - 152) = v32;
  operator delete(v32);
  v33 = *(void **)(v29 - 136);
  if (!v33)
  {
LABEL_5:
    v34 = *(void **)(v29 - 112);
    if (!v34)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_11:
  *(_QWORD *)(v29 - 128) = v33;
  operator delete(v33);
  v34 = *(void **)(v29 - 112);
  if (!v34)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_6:
  *(_QWORD *)(v29 - 104) = v34;
  operator delete(v34);
  goto LABEL_7;
}

void sub_19C173A30(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void *__p;
  char *v36;
  char *v37;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v6;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
  {
    v8 = 0;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 1272);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v9;
  }
  v10 = v8 + v7;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  __p = 0;
  v36 = 0;
  v37 = 0;
  if (v10)
  {
    if (v10 < 0)
      sub_19C07DA0C();
    v12 = v10 << v11;
    v13 = (char *)operator new(v12);
    __p = v13;
    v37 = &v13[v12];
    bzero(v13, v12);
    v36 = &v13[v12];
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 1288);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  memmove(v13, (const void *)(v14 + 4 * v15 * a3), v17 * v16);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
  {
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v20 = *(_QWORD *)(a1 + 1304);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v13 += v19 * v18;
    memmove(v13, (const void *)(v20 + 4 * v21 * a3), v23 * v22);
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 9
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 10)
  {
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v26 = *(_QWORD *)(a1 + 1296);
    v27 = *(_DWORD *)(a1 + 1272);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v29 = &v13[v25 * v24];
    memmove(v29, (const void *)(v26 + 4 * v27 * a3), v28 * v27);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
    {
      v30 = *(_DWORD *)(a1 + 1272);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
      v32 = *(_QWORD *)(a1 + 1312);
      v33 = *(_DWORD *)(a1 + 1272);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
      memmove(&v29[v30 * (uint64_t)v31], (const void *)(v32 + 4 * v33 * a3), v34 * v33);
    }
  }
  sub_19C1875B0((uint64_t **)(a2 + 16), (__int128 *)(a1 + 256), (char **)&__p);
  if (__p)
  {
    v36 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19C173D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C173D88(uint64_t a1, const __CFArray *a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  int v17;
  char *v18;
  const void *ValueAtIndex;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  int v38;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v6;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
  {
    v8 = 0;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 1272);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v9;
  }
  v10 = (v8 + v7) << (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  v11 = *(_DWORD *)(a1 + 280);
  v12 = v10 * a3;
  v13 = *(void **)(a1 + 1280);
  if (v11 == a3)
  {
    if (v13)
      goto LABEL_19;
  }
  else if (v13)
  {
    sub_19C2335C4(*(_QWORD *)(a1 + 8), v10 * v11, v13);
  }
  v14 = sub_19C2335AC();
  *(_QWORD *)(a1 + 1280) = v14;
  *(_QWORD *)(a1 + 1288) = v14;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
  {
    v14 += 4 * (int)((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9) * a3);
    *(_QWORD *)(a1 + 1304) = v14;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 9
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 10)
  {
    v14 += 4 * (int)((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9) * a3);
    *(_QWORD *)(a1 + 1296) = v14;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1)
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 9
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 10)
  {
    *(_QWORD *)(a1 + 1312) = v14 + 4 * *(_DWORD *)(a1 + 1272) * a3;
  }
LABEL_19:
  if (a2)
  {
    if (a3 >= 1)
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(a1 + 1288);
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
        v18 = (char *)(v16 + (int)(v17 * v15 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1)));
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v15);
        v20 = sub_19C18731C((uint64_t)ValueAtIndex + 16, (const void **)(a1 + 256));
        v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
        memmove(v18, v20, v22 * v21);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
        {
          v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v18 += (int)(v23 * a3 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1));
          v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v20 = (uint64_t *)((char *)v20 + (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v24));
          v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
          memmove(v18, v20, v26 * v25);
        }
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 9
          && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 10)
        {
          v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v28 = &v18[(int)(v27 * a3 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1))];
          v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
          v30 = (char *)v20 + (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v29);
          v31 = *(_DWORD *)(a1 + 1272);
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
          memmove(v28, v30, v31 * (uint64_t)v32);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
          {
            v33 = *(_DWORD *)(a1 + 1272);
            v34 = &v28[(int)(v33 * a3 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1))];
            v35 = *(_DWORD *)(a1 + 1272);
            v36 = &v30[v35 * (uint64_t)(*(int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1)];
            v37 = *(_DWORD *)(a1 + 1272);
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
            memmove(v34, v36, v37 * (uint64_t)v38);
          }
        }
        ++v15;
      }
      while (a3 != v15);
    }
  }
  else
  {
    bzero(*(void **)(a1 + 1280), v12);
  }
}

void sub_19C174234(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  char v7;

  sub_19C1909BC(a1);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
    || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
  {
    v4 = 0;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 1272);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v5;
  }
  v6 = v4 + v3 * v2;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  sub_19C2335C4(*(_QWORD *)(a1 + 8), (v6 << v7) * *(_DWORD *)(a1 + 280), *(void **)(a1 + 1280));
  *(_QWORD *)(a1 + 1280) = 0;
}

uint64_t sub_19C174308(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = sub_19C190A34(a1);
  if (*(_QWORD *)(a1 + 1280))
  {
    v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, 9);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v3;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 9
      || (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) == 10)
    {
      v5 = 0;
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 1272);
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v6;
    }
    return (v2
                        + ((v5 + v4) << (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
                        * *(_DWORD *)(a1 + 280));
  }
  return v2;
}

int64x2_t sub_19C1743DC(int *a1, int a2)
{
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  char *v8;
  uint64_t **v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  int64x2_t result;

  v4 = a1[142];
  v5 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 240))(a1);
  v6 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 224))(a1);
  v7 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)a1 + 216))(a1, 1);
  v9 = (uint64_t **)(a1 + 12);
  v8 = (char *)*((_QWORD *)a1 + 6);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = v8;
        v11 = *((_DWORD *)v8 + 8);
        if (v11 <= a2)
          break;
        v8 = *(char **)v10;
        v9 = (uint64_t **)v10;
        if (!*(_QWORD *)v10)
          goto LABEL_8;
      }
      if (v11 >= a2)
        break;
      v8 = (char *)*((_QWORD *)v10 + 1);
      if (!v8)
      {
        v9 = (uint64_t **)(v10 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v10 = (char *)(a1 + 12);
LABEL_8:
    v12 = v10;
    v10 = (char *)operator new(0x50uLL);
    *((_DWORD *)v10 + 8) = a2;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((_QWORD *)v10 + 9) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v12;
    *v9 = (uint64_t *)v10;
    v13 = **((_QWORD **)a1 + 5);
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *((_QWORD *)a1 + 5) = v13;
      v14 = *v9;
    }
    sub_19C07CC40(*((uint64_t **)a1 + 6), v14);
    ++*((_QWORD *)a1 + 7);
  }
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v10 + 40) = result;
  *((_QWORD *)v10 + 7) = v4 << v5;
  *((_QWORD *)v10 + 8) = v6;
  *((_QWORD *)v10 + 9) = v7;
  return result;
}

uint64_t sub_19C174518(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, float a9)
{
  uint64_t v18;
  const void *v19;
  int64_t v20;
  char *v21;
  char *v22;
  int v23;

  v18 = operator new();
  *(_QWORD *)v18 = &unk_1E3D22E98;
  *(_QWORD *)(v18 + 8) = a1;
  *(_QWORD *)(v18 + 16) = a2;
  *(_DWORD *)(v18 + 24) = a3;
  *(_QWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 32) = a4;
  *(_QWORD *)(v18 + 40) = a5;
  *(_QWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  v19 = *(const void **)a6;
  v20 = *(_QWORD *)(a6 + 8) - *(_QWORD *)a6;
  if (v20)
  {
    if (v20 < 0)
      sub_19C07DA0C();
    v21 = (char *)operator new(v20);
    *(_QWORD *)(v18 + 48) = v21;
    v22 = &v21[4 * (v20 >> 2)];
    *(_QWORD *)(v18 + 64) = v22;
    memcpy(v21, v19, v20);
    *(_QWORD *)(v18 + 56) = v22;
  }
  if (a8)
    v23 = a8;
  else
    v23 = a3;
  *(_DWORD *)(v18 + 72) = a7;
  *(_DWORD *)(v18 + 76) = v23;
  *(float *)(v18 + 80) = a9;
  return v18;
}

void sub_19C174618(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C17463C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  char *v22;
  char *v23;

  v18 = operator new();
  *(_QWORD *)v18 = &unk_1E3D21F10;
  *(_QWORD *)(v18 + 8) = a1;
  *(_DWORD *)(v18 + 16) = a2;
  *(_DWORD *)(v18 + 20) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_QWORD *)(v18 + 48) = a7;
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 56) = a8;
  *(_QWORD *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 80) = 0;
  v20 = *(const void **)a9;
  v19 = *(_QWORD *)(a9 + 8);
  v21 = v19 - *(_QWORD *)a9;
  if (v19 != *(_QWORD *)a9)
  {
    if (v21 < 0)
      sub_19C07DA0C();
    v22 = (char *)operator new(v19 - *(_QWORD *)a9);
    *(_QWORD *)(v18 + 64) = v22;
    v23 = &v22[4 * (v21 >> 2)];
    *(_QWORD *)(v18 + 80) = v23;
    memcpy(v22, v20, v21);
    *(_QWORD *)(v18 + 72) = v23;
  }
  *(_BYTE *)(v18 + 88) = a10;
  return v18;
}

void sub_19C174730(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[9] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_19C174754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __n128 result;
  __int128 v12;

  v10 = operator new();
  *(_QWORD *)v10 = &unk_1E3D226B8;
  *(_QWORD *)(v10 + 8) = a1;
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  *(_QWORD *)(v10 + 32) = a5;
  *(_WORD *)(v10 + 44) = 0;
  result = *(__n128 *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 64) = v12;
  *(_DWORD *)(v10 + 80) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t sub_19C1747D4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  char *v22;
  char *v23;

  v18 = operator new();
  *(_QWORD *)v18 = &unk_1E3D21EE8;
  *(_QWORD *)(v18 + 8) = a1;
  *(_DWORD *)(v18 + 16) = a2;
  *(_DWORD *)(v18 + 20) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_QWORD *)(v18 + 48) = a7;
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 56) = a8;
  *(_QWORD *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 80) = 0;
  v20 = *(const void **)a9;
  v19 = *(_QWORD *)(a9 + 8);
  v21 = v19 - *(_QWORD *)a9;
  if (v19 != *(_QWORD *)a9)
  {
    if (v21 < 0)
      sub_19C07DA0C();
    v22 = (char *)operator new(v19 - *(_QWORD *)a9);
    *(_QWORD *)(v18 + 64) = v22;
    v23 = &v22[4 * (v21 >> 2)];
    *(_QWORD *)(v18 + 80) = v23;
    memcpy(v22, v20, v21);
    *(_QWORD *)(v18 + 72) = v23;
  }
  *(_BYTE *)(v18 + 88) = a10;
  return v18;
}

void sub_19C1748C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[9] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_19C1748EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __n128 result;
  __int128 v12;

  v10 = operator new();
  result = *(__n128 *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v10 + 44) = *(_OWORD *)a2;
  *(_QWORD *)v10 = &unk_1E3D22690;
  *(_QWORD *)(v10 + 8) = a1;
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  *(_QWORD *)(v10 + 32) = a5;
  *(_WORD *)(v10 + 41) = 0;
  *(_OWORD *)(v10 + 60) = v12;
  *(_DWORD *)(v10 + 76) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t sub_19C174978()
{
  return 0;
}

uint64_t sub_19C174980()
{
  return 0;
}

uint64_t sub_19C174988()
{
  return 0;
}

uint64_t sub_19C174990()
{
  return 0;
}

uint64_t sub_19C174998()
{
  return 0;
}

uint64_t sub_19C1749A0()
{
  return 0;
}

_QWORD *sub_19C1749A8(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E3D22E98;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C1749E8(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E3D22E98;
  v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_19C174A28(uint64_t a1, int a2, __n128 a3, __n128 a4, __n128 a5)
{
  float32x2_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int32 *v38;
  unsigned __int32 *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v44;
  BOOL v46;
  uint64_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t *v72;
  uint64_t v73;
  uint64_t v74;
  float32x4_t v75;
  float v76;
  float32x4_t v77;
  float v78;
  float32x4_t v79;
  uint64_t v80;
  float *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  float32x2_t v90;
  float v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t *v94;
  float32x4_t v95;
  float v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  float v108;
  float v109;
  uint64_t v110;
  float v111;
  float32x2_t v112;
  float v113;
  __n128 v114;
  float32x4_t v115;
  uint64_t v116;
  float v117;
  float32x4_t v118;
  float32x4_t v119;
  float v120;
  __n128 v121;
  __n128 v122;
  float32x4_t v123;
  float v124;

  v7 = **(_QWORD **)(a1 + 32);
  v8 = *(int *)(a1 + 72);
  v100 = **(_QWORD **)(a1 + 40);
  if (a2)
  {
    if (a2 < 0)
      sub_19C07DA0C();
    v9 = (char *)operator new(4 * a2);
    bzero(v9, 4 * a2);
  }
  else
  {
    v9 = 0;
  }
  v10 = v7 + 4 * v8;
  v97 = 4 * v8;
  v11 = v100 + 4 * v8;
  v12 = *(_QWORD *)(a1 + 16);
  v107 = v12;
  if (v12 != 7 && v12 != 4)
  {
LABEL_48:
    v14 = a2;
    if (a2 < 1)
      goto LABEL_104;
    goto LABEL_49;
  }
  v14 = a2;
  if (!a2)
    goto LABEL_104;
  v15 = *(unsigned int *)(a1 + 24);
  if ((int)v15 >= 1)
  {
    v16 = 4 * *(int *)(a1 + 76);
    v102 = v16;
    v104 = a2;
    if (v15 >= 8)
    {
      v34 = 0;
      v99 = v7;
      v35 = v100 + 4 * v8;
      v36 = v7 + 4 * v8;
      do
      {
        v37 = 0;
        v38 = (unsigned __int32 *)&v9[4 * v34];
        v39 = v38 + 1;
        a4.n128_u32[0] = *v38;
        v40 = 4 * (v8 + v15) + v16 * v34;
        v41 = v7 + v40;
        v42 = v100 + v40;
        v44 = v35 < v7 + v40 && v36 < v42;
        v46 = (unint64_t)v38 < v41 && v36 < (unint64_t)v39;
        if ((unint64_t)v38 < v42 && v35 < (unint64_t)v39)
          goto LABEL_110;
        if (v44)
          goto LABEL_110;
        if (v46)
          goto LABEL_110;
        v48 = 0;
        a3.n128_u64[0] = 0;
        a5.n128_u64[0] = *v38;
        do
        {
          v121 = a3;
          LODWORD(v108) = *(_QWORD *)(v36 + v48);
          v114 = a5;
          v116 = *(_QWORD *)(v36 + v48 + 8);
          v111 = expf(COERCE_FLOAT(HIDWORD(*(_QWORD *)(v36 + v48))));
          v49.f32[0] = expf(v108);
          v49.f32[1] = v111;
          v112 = v49;
          v109 = expf(*((float *)&v116 + 1));
          v50.f32[0] = expf(*(float *)&v116);
          v50.f32[1] = v109;
          v51 = (float32x2_t *)(v35 + v48);
          a5.n128_u64[1] = v114.n128_u64[1];
          *v51 = v112;
          v51[1] = v50;
          a5.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v114.n128_u64[0], v112);
          a4.n128_u64[1] = v121.n128_u64[1];
          a4.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v121.n128_u64[0], v50);
          a3 = a4;
          v48 += 16;
        }
        while (((4 * v15) & 0x3FFFFFFF0) != v48);
        a4.n128_f32[0] = vaddv_f32(vadd_f32((float32x2_t)a4.n128_u64[0], (float32x2_t)a5.n128_u64[0]));
        *(_DWORD *)&v9[4 * v34] = a4.n128_u32[0];
        v37 = v15 & 0xFFFFFFFC;
        if (v37 != v15)
        {
LABEL_110:
          do
          {
            v122 = a4;
            a3.n128_f32[0] = expf(*(float *)(v36 + 4 * v37));
            a4 = v122;
            *(_DWORD *)(v35 + 4 * v37) = a3.n128_u32[0];
            a4.n128_f32[0] = v122.n128_f32[0] + a3.n128_f32[0];
            *(float *)&v9[4 * v34] = v122.n128_f32[0] + a3.n128_f32[0];
            ++v37;
          }
          while (v15 != v37);
        }
        v16 = v102;
        v36 += v102;
        v35 += v102;
        ++v34;
        v7 = v99;
      }
      while (v34 != a2);
    }
    else
    {
      v17 = v100 + 12;
      v18 = v97;
      v19 = (float *)v9;
      do
      {
        v20 = *v19;
        v21 = expf(*(float *)(v7 + v18));
        *(float *)(v100 + v18) = v21;
        v22 = v20 + v21;
        *v19 = v22;
        if ((_DWORD)v15 != 1)
        {
          v23 = expf(*(float *)(v7 + v18 + 4));
          *(float *)(v17 + v18 - 8) = v23;
          v24 = v22 + v23;
          *v19 = v24;
          if ((_DWORD)v15 != 2)
          {
            v25 = expf(*(float *)(v7 + v18 + 8));
            *(float *)(v17 + v18 - 4) = v25;
            v26 = v24 + v25;
            *v19 = v26;
            if ((_DWORD)v15 != 3)
            {
              v27 = expf(*(float *)(v7 + v18 + 12));
              *(float *)(v17 + v18) = v27;
              v28 = v26 + v27;
              *v19 = v28;
              if ((_DWORD)v15 != 4)
              {
                v29 = expf(*(float *)(v7 + v18 + 16));
                *(float *)(v17 + v18 + 4) = v29;
                v30 = v28 + v29;
                *v19 = v30;
                if ((_DWORD)v15 != 5)
                {
                  v31 = expf(*(float *)(v7 + v18 + 20));
                  *(float *)(v17 + v18 + 8) = v31;
                  v32 = v30 + v31;
                  *v19 = v32;
                  if ((_DWORD)v15 != 6)
                  {
                    v33 = expf(*(float *)(v7 + v18 + 24));
                    *(float *)(v17 + v18 + 12) = v33;
                    *v19 = v32 + v33;
                  }
                }
              }
            }
          }
        }
        ++v19;
        v18 += v102;
        --v104;
      }
      while (v104);
    }
    goto LABEL_48;
  }
LABEL_49:
  v52 = *(unsigned int *)(a1 + 24);
  if ((int)v52 >= 1)
  {
    v53 = v7;
    v54 = 0;
    v110 = v14;
    v55 = 4 * *(int *)(a1 + 76);
    v103 = v97 + v53;
    v105 = v97 + v100;
    v101 = v52 & 0xFFFFFFF8;
    v56 = 4 * v52;
    v57 = (4 * v52) & 0x3FFFFFFE0;
    __asm { FMOV            V0.4S, #1.0 }
    v115 = _Q0;
    __asm { FMOV            V11.2S, #1.0 }
    while (1)
    {
      v62 = v105 + v55 * v54;
      v63 = v103 + v55 * v54;
      switch(v107)
      {
        case 0:
          v64 = 0;
          if (v52 < 8)
            goto LABEL_111;
          if ((unint64_t)(v62 - v63) < 0x20)
            goto LABEL_111;
          v65 = 0;
          do
          {
            _Q0 = *(float32x4_t *)(v10 + v65);
            v66 = *(float32x4_t *)(v10 + v65 + 16);
            v67 = (float32x4_t *)(v11 + v65);
            *v67 = _Q0;
            v67[1] = v66;
            v65 += 32;
          }
          while (v57 != v65);
          v64 = v52 & 0xFFFFFFF8;
          if (v101 != v52)
          {
LABEL_111:
            do
            {
              *(_DWORD *)(v11 + 4 * v64) = *(_DWORD *)(v10 + 4 * v64);
              ++v64;
            }
            while (v52 != v64);
          }
          goto LABEL_51;
        case 1:
          v73 = 0;
          if (v52 < 4)
            goto LABEL_112;
          if ((unint64_t)(v62 - v63) < 0x10)
            goto LABEL_112;
          v74 = 0;
          do
          {
            v123 = vnegq_f32(*(float32x4_t *)(v10 + v74));
            v117 = expf(v123.f32[1]);
            v75.f32[0] = expf(v123.f32[0]);
            v75.f32[1] = v117;
            v118 = v75;
            v76 = expf(v123.f32[2]);
            v77 = v118;
            v77.f32[2] = v76;
            v119 = v77;
            v78 = expf(v123.f32[3]);
            v79 = v119;
            v79.f32[3] = v78;
            _Q0 = vdivq_f32(v115, vaddq_f32(v79, v115));
            *(float32x4_t *)(v11 + v74) = _Q0;
            v74 += 16;
          }
          while (((4 * v52) & 0x3FFFFFFF0) != v74);
          v73 = v52 & 0xFFFFFFFC;
          if (v73 != v52)
          {
LABEL_112:
            do
            {
              *(float *)(v11 + 4 * v73) = 1.0 / (float)(expf(-*(float *)(v10 + 4 * v73)) + 1.0);
              ++v73;
            }
            while (v52 != v73);
          }
          goto LABEL_51;
        case 2:
          v68 = 0;
          do
          {
            *(float *)(v11 + v68) = tanhf(*(float *)(v10 + v68));
            v68 += 4;
          }
          while (v56 != v68);
          goto LABEL_51;
        case 3:
          v84 = 0;
          do
          {
            *(float *)(v11 + v84) = tanhf(*(float *)(v10 + v84) * 0.66667) * 1.7159;
            v84 += 4;
          }
          while (v56 != v84);
          goto LABEL_51;
        case 4:
          _Q0.i32[0] = *(_DWORD *)&v9[4 * v54];
          if (v52 >= 8)
          {
            v92 = 0;
            v93 = vdivq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0));
            do
            {
              v94 = (float32x4_t *)(v11 + v92);
              v95 = vmulq_f32(*(float32x4_t *)(v11 + v92 + 16), v93);
              *v94 = vmulq_f32(*(float32x4_t *)(v11 + v92), v93);
              v94[1] = v95;
              v92 += 32;
            }
            while (v57 != v92);
            v85 = v52 & 0xFFFFFFF8;
            if (v101 == v52)
              goto LABEL_51;
          }
          else
          {
            v85 = 0;
          }
          v96 = 1.0 / _Q0.f32[0];
          do
          {
            *(float *)(v11 + 4 * v85) = *(float *)(v11 + 4 * v85) * v96;
            ++v85;
          }
          while (v52 != v85);
LABEL_51:
          ++v54;
          v11 += v55;
          v10 += v55;
          if (v54 == v110)
            goto LABEL_104;
          break;
        case 5:
          v69 = 0;
          if (v52 < 8)
            goto LABEL_113;
          if ((unint64_t)(v62 - v63) < 0x20)
            goto LABEL_113;
          v70 = 0;
          do
          {
            _Q0 = vmaxnmq_f32(*(float32x4_t *)(v10 + v70), (float32x4_t)0);
            v71 = vmaxnmq_f32(*(float32x4_t *)(v10 + v70 + 16), (float32x4_t)0);
            v72 = (float32x4_t *)(v11 + v70);
            *v72 = _Q0;
            v72[1] = v71;
            v70 += 32;
          }
          while (v57 != v70);
          v69 = v52 & 0xFFFFFFF8;
          if (v101 != v52)
          {
LABEL_113:
            do
            {
              *(float *)(v11 + 4 * v69) = fmaxf(*(float *)(v10 + 4 * v69), 0.0);
              ++v69;
            }
            while (v52 != v69);
          }
          goto LABEL_51;
        case 6:
          v80 = 0;
          v81 = *(float **)(a1 + 48);
          do
          {
            v82 = 0;
            if (*v81 <= 0.0850324487)
              v82 = *(_DWORD *)(v10 + v80);
            *(_DWORD *)(v11 + v80) = v82;
            v80 += 4;
          }
          while (v56 != v80);
          goto LABEL_51;
        case 7:
          v5.i32[0] = *(_DWORD *)&v9[4 * v54];
          if ((_DWORD)v52 == 1)
          {
            v83 = 0;
          }
          else
          {
            v88 = 0;
            LODWORD(v113) = vdiv_f32(_D11, v5).u32[0];
            v89 = v52 & 0xFFFFFFFE;
            do
            {
              v90 = vmul_n_f32(*(float32x2_t *)(v11 + v88), v113);
              v120 = v90.f32[0];
              v124 = logf(v90.f32[1]);
              _Q0.f32[0] = logf(v120);
              _Q0.f32[1] = v124;
              *(_QWORD *)(v11 + v88) = _Q0.i64[0];
              v88 += 8;
              v89 -= 2;
            }
            while (v89);
            v83 = v52 & 0xFFFFFFFE;
            if (v83 == v52)
              goto LABEL_51;
          }
          v91 = 1.0 / v5.f32[0];
          do
          {
            *(float *)(v11 + 4 * v83) = logf(*(float *)(v11 + 4 * v83) * v91);
            ++v83;
          }
          while (v52 != v83);
          goto LABEL_51;
        case 11:
          v86 = 0;
          do
          {
            v87 = *(float *)(v10 + v86);
            if (v87 < 0.0)
              v87 = *(float *)(a1 + 80) * v87;
            *(float *)(v11 + v86) = v87;
            v86 += 4;
          }
          while (v56 != v86);
          goto LABEL_51;
        default:
          goto LABEL_51;
      }
    }
  }
LABEL_104:
  if (v9)
    operator delete(v9);
}

void sub_19C175258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C175274(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E3D21F10;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C1752B4(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E3D21F10;
  v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_19C1752FC(uint64_t result, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  v2 = **(_QWORD **)(result + 16);
  v3 = (_DWORD *)(**(_QWORD **)(result + 24) + 4 * *(int *)(result + 52));
  v4 = **(_QWORD **)(result + 32);
  if (*(_BYTE *)(result + 45))
  {
    *(_BYTE *)(result + 44) = 1;
    *(_DWORD *)(result + 40) = *v3;
  }
  if (a2 >= 1)
  {
    v5 = *(unsigned int *)(result + 76);
    if ((int)v5 >= 1)
    {
      v6 = 0;
      v7 = v2 + 4 * *(int *)(result + 48);
      v8 = v4 + 4 * *(int *)(result + 56);
      v9 = *(_DWORD *)(result + 72);
      v10 = 4 * *(int *)(result + 60);
      v11 = 4 * *(int *)(result + 64);
      v12 = 4 * *(int *)(result + 68);
      v13 = 4 * v5;
      do
      {
        v14 = 0;
        do
        {
          switch(v9)
          {
            case 0:
              if (*(_BYTE *)(result + 44))
              {
                v15 = *(float *)(result + 40);
              }
              else if (v3)
              {
                v15 = *(float *)&v3[v14 / 4];
              }
              else
              {
                v15 = 0.0;
              }
              v16 = *(float *)(v7 + v14);
              goto LABEL_11;
            case 1:
              if (*(_BYTE *)(result + 44))
              {
                v18 = *(float *)(result + 40);
              }
              else if (v3)
              {
                v18 = *(float *)&v3[v14 / 4];
              }
              else
              {
                v18 = 0.0;
              }
              v17 = *(float *)(v7 + v14) - v18;
              goto LABEL_12;
            case 2:
              if (*(_BYTE *)(result + 44))
              {
                v19 = *(float *)(result + 40);
              }
              else if (v3)
              {
                v19 = *(float *)&v3[v14 / 4];
              }
              else
              {
                v19 = 1.0;
              }
              v17 = v19 * *(float *)(v7 + v14);
              goto LABEL_12;
            case 3:
              if (*(_BYTE *)(result + 44))
              {
                v20 = *(float *)(result + 40);
              }
              else if (v3)
              {
                v20 = *(float *)&v3[v14 / 4];
              }
              else
              {
                v20 = 1.0;
              }
              v17 = *(float *)(v7 + v14) / v20;
              goto LABEL_12;
            case 4:
              v17 = sqrtf(*(float *)(v7 + v14));
              goto LABEL_12;
            case 5:
              if (*(_BYTE *)(result + 44))
              {
                v21 = *(float *)(result + 40);
              }
              else if (v3)
              {
                v21 = *(float *)&v3[v14 / 4];
              }
              else
              {
                v21 = 1.0;
              }
              v17 = *(float *)(v8 + v14) + (float)(v21 * *(float *)(v7 + v14));
              goto LABEL_12;
            case 6:
              if (*(_BYTE *)(result + 44))
              {
                v22 = *(float *)(result + 40);
              }
              else if (v3)
              {
                v22 = *(float *)&v3[v14 / 4];
              }
              else
              {
                v22 = 0.0;
              }
              v15 = v22 + *(float *)(v7 + v14);
              v16 = *(float *)(v8 + v14);
LABEL_11:
              v17 = v15 + v16;
LABEL_12:
              *(float *)(v8 + v14) = v17;
              break;
            default:
              break;
          }
          v14 += 4;
        }
        while (v13 != v14);
        v3 = (_DWORD *)((char *)v3 + v11);
        ++v6;
        v7 += v10;
        v8 += v12;
      }
      while (v6 != a2);
    }
  }
  return result;
}

_QWORD *sub_19C1754E0(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E3D21EE8;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C175520(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E3D21EE8;
  v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_19C175568(uint64_t result, int a2, double a3)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v3 = **(_QWORD **)(result + 16);
  v4 = (_BYTE *)(**(_QWORD **)(result + 24) + *(int *)(result + 48));
  v5 = **(_QWORD **)(result + 32);
  if (*(_BYTE *)(result + 42))
  {
    *(_BYTE *)(result + 41) = 1;
    *(_BYTE *)(result + 40) = *v4;
  }
  if (a2 >= 1)
  {
    v6 = *(unsigned int *)(result + 72);
    if ((int)v6 >= 1)
    {
      v7 = 0;
      v8 = v3 + *(int *)(result + 44);
      v9 = *(int *)(result + 56);
      v10 = v5 + 4 * *(int *)(result + 52);
      v11 = *(int *)(result + 60);
      v12 = *(_DWORD *)(result + 68);
      v13 = 4 * *(int *)(result + 64);
      do
      {
        for (i = 0; i != v6; ++i)
        {
          switch(v12)
          {
            case 0:
              if (*(_BYTE *)(result + 41))
              {
                v15 = *(char *)(result + 40);
              }
              else if (v4)
              {
                v15 = (char)v4[i];
              }
              else
              {
                v15 = 0;
              }
              LOBYTE(a3) = *(_BYTE *)(v8 + i);
              *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)v15 + (float)SLODWORD(a3);
              goto LABEL_9;
            case 1:
              if (*(_BYTE *)(result + 41))
              {
                v18 = *(char *)(result + 40);
              }
              else if (v4)
              {
                v18 = (char)v4[i];
              }
              else
              {
                v18 = 0;
              }
              LOBYTE(a3) = *(_BYTE *)(v8 + i);
              *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)SLODWORD(a3) - (float)v18;
              goto LABEL_9;
            case 2:
              if (*(_BYTE *)(result + 41))
              {
                v16 = *(char *)(result + 40);
              }
              else if (v4)
              {
                v16 = (char)v4[i];
              }
              else
              {
                v16 = 1;
              }
              LOBYTE(a3) = *(_BYTE *)(v8 + i);
              *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)v16 * (float)SLODWORD(a3);
              goto LABEL_9;
            case 3:
              if (*(_BYTE *)(result + 41))
              {
                v17 = *(char *)(result + 40);
              }
              else if (v4)
              {
                v17 = (char)v4[i];
              }
              else
              {
                v17 = 1;
              }
              LOBYTE(a3) = *(_BYTE *)(v8 + i);
              *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)SLODWORD(a3) / (float)v17;
              goto LABEL_9;
            case 4:
              LOBYTE(a3) = *(_BYTE *)(v8 + i);
              *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = sqrtf((float)SLODWORD(a3));
LABEL_9:
              *(_DWORD *)(v10 + 4 * i) = LODWORD(a3);
              break;
            case 5:
              if (*(_BYTE *)(result + 41))
              {
                v19 = *(char *)(result + 40);
              }
              else if (v4)
              {
                v19 = (char)v4[i];
              }
              else
              {
                v19 = 1;
              }
              LOBYTE(a3) = *(_BYTE *)(v8 + i);
              *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = *(float *)(v10 + 4 * i) + (float)((float)v19 * (float)SLODWORD(a3));
              *(_DWORD *)(v10 + 4 * i) = LODWORD(a3);
              break;
            case 6:
              if (*(_BYTE *)(result + 41))
              {
                v20 = *(char *)(result + 40);
              }
              else if (v4)
              {
                v20 = (char)v4[i];
              }
              else
              {
                v20 = 0;
              }
              LOBYTE(a3) = *(_BYTE *)(v8 + i);
              *(_QWORD *)&a3 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).u64[0];
              *(float *)&a3 = (float)v20 + (float)((float)SLODWORD(a3) + *(float *)(v10 + 4 * i));
              *(_DWORD *)(v10 + 4 * i) = LODWORD(a3);
              break;
            default:
              continue;
          }
        }
        v8 += v9;
        v4 += v11;
        ++v7;
        v10 += v13;
      }
      while (v7 != a2);
    }
  }
  return result;
}

void sub_19C1757C0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 >= 1)
  {
    v3 = 0;
    v4 = a2;
    v5 = 4 * *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20);
    do
    {
      vDSP_mtrans((const float *)(**(_QWORD **)(a1 + 24) + v3), 1, (float *)(**(_QWORD **)(a1 + 32) + v3), 1, *(int *)(a1 + 20), *(int *)(a1 + 16));
      v3 += v5;
      --v4;
    }
    while (v4);
  }
}

void sub_19C175838(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  double v30;
  uint64_t v31;
  double v32;
  double *v33;
  double v34;
  unint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  char *v39;
  vDSP_Length v40;
  float64x2_t v41;
  float64x2_t *v42;
  unint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  size_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 *v67;
  _OWORD *v68;
  unint64_t v69;
  __int128 v70;
  vDSP_Length v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  char *v83;
  uint64_t v84;
  int64_t v85;
  float64x2_t *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  unint64_t v95;
  float64x2_t v96;
  vDSP_Length v97;
  double *v98;
  size_t v99;
  __int128 *v100;
  signed int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  __int128 *v110;
  _OWORD *v111;
  unint64_t v112;
  __int128 v113;
  _QWORD *v114;
  double *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int64_t v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned __int8 v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  int v135;
  int *v136;
  int *v137;
  char *v138;
  double *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  _OWORD *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  double *v163;
  int *v164;
  __int128 *v165;
  _OWORD *v166;
  unint64_t v167;
  __int128 v168;
  uint64_t v169;
  double *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  double *v174;
  int64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  int64x2_t v179;
  int64x2_t v180;
  float64x2_t v181;
  unint64_t v182;
  unint64_t v183;
  size_t v184;
  uint64_t v185;
  int v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t __sz;
  uint64_t v192;
  vDSP_Length __N;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  double *__A;
  double *__Aa;
  _OWORD *__src;
  vDSP_Length v201;
  int64x2_t v202;
  uint64_t v203;
  unsigned int v204;
  int *v205;
  _OWORD *v206;
  void *v207;
  char *v208;
  char *v209;
  int v210;
  double *v211;
  double *v212;
  uint64_t v213;
  uint64_t v214;
  void *v215[3];
  signed int v216;
  int v217;
  void *__p[4];
  void *v219[3];
  signed int v220;
  signed int v221;
  void *v222[3];
  int v223;
  char *v224;
  char *v225;
  char *v226;
  __int128 v227;
  int64x2_t v228;
  __int128 v229;
  uint64_t v230;

  sub_19C17AABC((uint64_t)v222, a3);
  v7 = v223;
  sub_19C176BE8(a2, v223, (uint64_t)v219);
  v188 = v7;
  v196 = a2;
  if ((int)a2 >= 1)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      sub_19C176CE4(a1, v188, (uint64_t)__p);
      v10 = v221;
      v11 = (char *)__p[0];
      if (v221)
        break;
      if (__p[0])
        goto LABEL_4;
LABEL_5:
      ++v9;
      v8 += 8;
      if (v9 == a2)
        goto LABEL_17;
    }
    v12 = (char *)v219[0];
    if (v221 >= 6 && (unint64_t)((char *)v219[0] + 8 * v9 * v221 - (char *)__p[0]) >= 0x20)
    {
      v13 = v221 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = (__int128 *)((char *)__p[0] + 16);
      v19 = (char *)v219[0] + v8 * v221 + 16;
      v20 = v13;
      do
      {
        v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v13 == v10)
        goto LABEL_4;
    }
    else
    {
      v13 = 0;
    }
    v14 = v10 - v13;
    v15 = &v12[8 * v13 + 8 * v9 * v10];
    v16 = &v11[8 * v13];
    do
    {
      v17 = *(_QWORD *)v16;
      v16 += 8;
      *(_QWORD *)v15 = v17;
      v15 += 8;
      --v14;
    }
    while (v14);
LABEL_4:
    __p[1] = v11;
    operator delete(v11);
    goto LABEL_5;
  }
LABEL_17:
  v178 = a1;
  v187 = a4;
  sub_19C176BE8(a2, v188, (uint64_t)v215);
  v190 = v188 & ~((int)v188 >> 31);
  if ((int)v188 >= 1)
  {
    v22 = a2 + 1;
    if ((_DWORD)a2 == -1)
    {
      v211 = 0;
      v212 = 0;
      LODWORD(v214) = 0;
      v213 = 0;
      v207 = 0;
      v208 = 0;
      v209 = 0;
LABEL_237:
      sub_19C07DA0C();
    }
    if ((int)a2 < -1)
    {
      v211 = 0;
      v212 = 0;
      v213 = 0;
      sub_19C07DA0C();
    }
    v23 = 0;
    v24 = v22;
    v25 = 8 * v22;
    v183 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    __N = (int)a2;
    v182 = (int)a2 & 0xFFFFFFFFFFFFFFFCLL;
    __asm { FMOV            V2.2D, #1.0 }
    v181 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v22), 0));
    v30 = 1.0 / (double)v22;
    __sz = 8 * (int)a2;
    v192 = 16;
    v180 = vdupq_n_s64(2uLL);
    v179 = vdupq_n_s64(4uLL);
    v185 = v22;
    v186 = a2 + 1;
    v184 = v25;
    while (1)
    {
      v31 = 8 * (int)v23;
      v203 = *(uint64_t *)((char *)v222[0] + v31);
      v32 = *(double *)&v224[v31];
      v33 = (double *)operator new(v25);
      v211 = v33;
      v213 = (uint64_t)&v33[(unint64_t)__sz / 8 + 1];
      bzero(v33, v25);
      v212 = (double *)((char *)v33 + v25);
      LODWORD(v214) = v22;
      if (!(_DWORD)a2)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *v33 = v32;
        v207 = 0;
        v208 = 0;
        v210 = 0;
        v209 = 0;
        v40 = __N;
        goto LABEL_46;
      }
      v34 = v32 - *(double *)&v203;
      if (v22 < 4)
        break;
      v41 = (float64x2_t)vdupq_lane_s64(v203, 0);
      v42 = (float64x2_t *)(v33 + 2);
      v43 = v183;
      v44 = (int64x2_t)xmmword_19C276E20;
      do
      {
        v42[-1] = vmlaq_f64(v41, vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)v44), v34), v181);
        *v42 = vmlaq_f64(v41, vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v44, v180)), v34), v181);
        v44 = vaddq_s64(v44, v179);
        v42 += 2;
        v43 -= 4;
      }
      while (v43);
      v35 = v183;
      if (v183 != v24)
        goto LABEL_29;
LABEL_30:
      v207 = 0;
      v208 = 0;
      v209 = 0;
      if ((a2 & 0x80000000) != 0)
        goto LABEL_237;
      v40 = __N;
      v37 = operator new(__sz);
      v207 = v37;
      v209 = (char *)v37 + 8 * __N;
      bzero(v37, __sz);
      v208 = (char *)v37 + __sz;
      v210 = a2;
      if (a2 < 4)
      {
        v45 = 0;
LABEL_36:
        v50 = v196 - v45;
        v51 = v45 << 32;
        do
        {
          *(double *)((char *)v37 + (v51 >> 29)) = *(double *)((char *)v33 + (v51 >> 29));
          v51 += 0x100000000;
          --v50;
        }
        while (v50);
        goto LABEL_38;
      }
      v46 = v37 + 1;
      v47 = (__int128 *)(v33 + 2);
      v48 = v196 & 0xFFFFFFFC;
      do
      {
        v49 = *v47;
        *(v46 - 1) = *(v47 - 1);
        *v46 = v49;
        v46 += 2;
        v47 += 2;
        v48 -= 4;
      }
      while (v48);
      v45 = v196 & 0xFFFFFFFC;
      if (v45 != v196)
        goto LABEL_36;
LABEL_38:
      v36 = (char *)operator new(__sz);
      bzero(v36, __sz);
      if (v22 >= 3)
      {
        v53 = 0;
        v54 = v196 & 0xFFFFFFFE;
        do
        {
          v55 = v53 >> 29;
          v53 += 0x200000000;
          v56 = *(_QWORD *)((char *)v33 + (v53 >> 29));
          *(double *)&v36[v55] = *(double *)((char *)v33 + v55 + 8);
          *(_QWORD *)&v36[v55 + 8] = v56;
          v54 -= 2;
        }
        while (v54);
        v52 = v196 & 0xFFFFFFFE;
        if (v52 == v196)
          goto LABEL_45;
      }
      else
      {
        v52 = 0;
      }
      v57 = v52 << 32;
      v58 = v196 - v52;
      do
      {
        v59 = v57 >> 29;
        v57 += 0x100000000;
        *(double *)&v36[v59] = *(double *)((char *)v33 + (v57 >> 29));
        --v58;
      }
      while (v58);
LABEL_45:
      v39 = (char *)operator new(__sz);
      v38 = &v39[8 * __N];
      memcpy(v39, v36, __sz);
LABEL_46:
      vDSP_vsubD((const double *)v37, 1, (const double *)v39, 1, (double *)v39, 1, v40);
      v60 = v38 - v39;
      if (v60)
      {
        if ((v60 & 0x8000000000000000) != 0)
          sub_19C07DA0C();
        __A = (double *)operator new(v60);
        memcpy(__A, v39, v60);
        if (v39)
LABEL_49:
          operator delete(v39);
      }
      else
      {
        __A = 0;
        if (v39)
          goto LABEL_49;
      }
      v201 = v220;
      v226 = 0;
      v227 = 0uLL;
      v189 = 8 * v23;
      v204 = v220;
      if (!v220)
      {
        v65 = 0;
        v66 = 0;
        __src = 0;
        goto LABEL_65;
      }
      if (v220 < 0)
        sub_19C07DA0C();
      v61 = 8 * v220;
      __src = operator new(v61);
      bzero(__src, 8 * v201);
      v62 = 0;
      v63 = v221;
      v64 = (char *)v219[0];
      if (v204 >= 6 && v221 == 1)
      {
        if ((unint64_t)((char *)__src - ((char *)v219[0] + 8 * v23)) >= 0x20)
        {
          v62 = v201 & 0xFFFFFFFFFFFFFFFCLL;
          v67 = (__int128 *)((char *)v219[0] + v192);
          v68 = __src + 1;
          v69 = v201 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v70 = *v67;
            *(v68 - 1) = *(v67 - 1);
            *v68 = v70;
            v67 += 2 * v63;
            v68 += 2;
            v69 -= 4;
          }
          while (v69);
          if (v62 == v201)
            goto LABEL_64;
        }
        else
        {
          v62 = 0;
        }
      }
      v71 = v201 - v62;
      v72 = (_QWORD *)__src + v62;
      v73 = &v64[8 * v23 + 8 * (int)v62 * (uint64_t)(int)v63];
      v74 = 8 * v63;
      do
      {
        *v72++ = *(_QWORD *)v73;
        v73 += v74;
        --v71;
      }
      while (v71);
LABEL_64:
      v66 = (char *)operator new(v61);
      v65 = &v66[v61];
      memcpy(v66, __src, v61);
LABEL_65:
      vDSP_vmulD(__A, 1, (const double *)v66, 1, (double *)v66, 1, v201);
      v75 = v65 - v66;
      if (v65 == v66)
      {
        v77 = 0;
        v76 = 0;
        v226 = 0;
        v227 = 0uLL;
        if (!(_DWORD)a2)
          goto LABEL_72;
      }
      else
      {
        if (v75 < 0)
          sub_19C07DA0C();
        v76 = (char *)operator new(v65 - v66);
        v77 = &v76[8 * (v75 >> 3)];
        memcpy(v76, v66, v75);
        v226 = 0;
        v227 = 0uLL;
        if (!(_DWORD)a2)
        {
LABEL_72:
          v78 = 0;
          goto LABEL_77;
        }
      }
      if ((a2 & 0x80000000) != 0)
        sub_19C07DA0C();
      v78 = (char *)operator new(__sz);
      v226 = v78;
      *((_QWORD *)&v227 + 1) = &v78[8 * __N];
      bzero(v78, __sz);
      *(_QWORD *)&v227 = &v78[__sz];
      v228.i32[0] = a2;
      if (a2 < 4)
      {
        v79 = 0;
        do
        {
LABEL_76:
          *(_QWORD *)&v78[8 * v79] = *((_QWORD *)v37 + v79);
          ++v79;
        }
        while (__N != v79);
        goto LABEL_77;
      }
      v80 = 0;
      v81 = v182;
      do
      {
        v82 = v37[v80 + 1];
        v83 = &v78[v80 * 16];
        *(_OWORD *)v83 = v37[v80];
        *((_OWORD *)v83 + 1) = v82;
        v80 += 2;
        v81 -= 4;
      }
      while (v81);
      v79 = v182;
      if (v182 != __N)
        goto LABEL_76;
LABEL_77:
      v84 = a2;
      vDSP_vaddD((const double *)v76, 1, (const double *)v78, 1, (double *)v76, 1, v201);
      v85 = v77 - v76;
      v194 = v23;
      if (v77 == v76)
      {
        v87 = 0;
        v86 = 0;
        a2 = v84;
        if (v78)
          goto LABEL_80;
      }
      else
      {
        if (v85 < 0)
          sub_19C07DA0C();
        v86 = (float64x2_t *)operator new(v77 - v76);
        v87 = (char *)&v86->f64[v85 >> 3];
        memcpy(v86, v76, v85);
        a2 = v84;
        if (v78)
LABEL_80:
          operator delete(v78);
      }
      if (v76)
        operator delete(v76);
      if (v66)
        operator delete(v66);
      if (__src)
        operator delete(__src);
      if (v204)
      {
        v88 = 8 * (int)v194;
        v89 = *(_QWORD *)((char *)v222[0] + v88);
        v90 = *(_QWORD *)&v224[v88];
        if (v204 < 4)
        {
          v91 = 0;
LABEL_95:
          v97 = v201 - v91;
          v98 = &v86->f64[v91];
          do
          {
            *v98 = fmax(fmin(*v98, *(double *)&v90), *(double *)&v89);
            ++v98;
            --v97;
          }
          while (v97);
          goto LABEL_97;
        }
        v91 = v201 & 0xFFFFFFFFFFFFFFFCLL;
        v92 = (float64x2_t)vdupq_lane_s64(v90, 0);
        v93 = (float64x2_t)vdupq_lane_s64(v89, 0);
        v94 = v86 + 1;
        v95 = v201 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v96 = vmaxnmq_f64(vminnmq_f64(*v94, v92), v93);
          v94[-1] = vmaxnmq_f64(vminnmq_f64(v94[-1], v92), v93);
          *v94 = v96;
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        if (v91 != v201)
          goto LABEL_95;
      }
LABEL_97:
      v99 = v87 - (char *)v86;
      if (v99)
      {
        if ((v99 & 0x8000000000000000) != 0)
          sub_19C07DA0C();
        v100 = (__int128 *)operator new(v99);
        memcpy(v100, v86, v99);
        v101 = v216;
        v102 = v194;
        if (!v216)
          goto LABEL_112;
LABEL_103:
        v103 = v101;
        v104 = v217;
        v105 = (char *)v215[0];
        _ZF = v101 >= 6 && v217 == 1;
        if (!_ZF || (unint64_t)((char *)v215[0] + v189 - (char *)v100) < 0x20)
        {
          v107 = 0;
          goto LABEL_110;
        }
        v107 = v101 & 0xFFFFFFFFFFFFFFFCLL;
        v110 = v100 + 1;
        v111 = (char *)v215[0] + v192;
        v112 = v103 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v113 = *v110;
          *(v111 - 1) = *(v110 - 1);
          *v111 = v113;
          v110 += 2;
          v111 += 2 * v104;
          v112 -= 4;
        }
        while (v112);
        if (v107 != v103)
        {
LABEL_110:
          v108 = &v105[8 * v102 + 8 * (int)v107 * (uint64_t)(int)v104];
          v109 = 8 * v104;
          do
          {
            *(_QWORD *)v108 = *((_QWORD *)v100 + v107++);
            v108 += v109;
          }
          while (v103 != v107);
        }
LABEL_112:
        operator delete(v100);
        goto LABEL_113;
      }
      v101 = v216;
      v102 = v194;
      if (v216)
      {
        v100 = 0;
        goto LABEL_103;
      }
LABEL_113:
      if (v86)
        operator delete(v86);
      if (__A)
        operator delete(__A);
      v24 = v185;
      v22 = v186;
      if (v36)
        operator delete(v36);
      if (v37)
        operator delete(v37);
      operator delete(v33);
      v23 = v102 + 1;
      v192 += 8;
      v25 = v184;
      if (v23 == v190)
        goto LABEL_125;
    }
    v35 = 0;
    do
    {
LABEL_29:
      v33[v35] = *(double *)&v203 + v34 * (double)v35 * v30;
      ++v35;
    }
    while (v24 != v35);
    goto LABEL_30;
  }
LABEL_125:
  sub_19C176BE8(a2, v188, (uint64_t)&v211);
  v114 = v187;
  if ((int)v188 >= 1)
  {
    v115 = 0;
    v116 = a2 & ~((int)a2 >> 31) | 0x100000000;
    v117 = v178 + 7592;
    v118 = 16;
    v202 = vdupq_n_s64(2uLL);
    v195 = v116;
    do
    {
      sub_19C17D174(&v207, 0x100000000uLL, 0, v116, 0);
      v120 = (char *)v207;
      v119 = v208;
      v121 = v208 - (_BYTE *)v207;
      if (v208 - (_BYTE *)v207 >= 5)
      {
        v122 = v208 - 4;
        if (v208 - 4 > v207)
        {
          v123 = (unint64_t)v121 >> 2;
          while (v123 == 1)
          {
LABEL_131:
            v120 += 4;
            --v123;
            if (v120 >= v122)
            {
              v120 = (char *)v207;
              v119 = v208;
              v121 = v208 - (_BYTE *)v207;
              goto LABEL_159;
            }
          }
          if (v123)
          {
            v124 = __clz(v123);
            if (((v123 << v124) & 0x7FFFFFFFFFFFFFFFLL) != 0)
              v125 = 64;
            else
              v125 = 63;
            v126 = v125 - v124;
            v226 = (char *)v117;
            *(_QWORD *)&v227 = v125 - v124;
            v127 = (v125 - v124) >> 5;
            if ((v126 & 0x1F) != 0)
              v128 = v127 + 1;
            else
              v128 = v127;
            v129 = v126 / v128;
            *((_QWORD *)&v227 + 1) = v129;
            v228.i64[0] = v128;
            v130 = (-1 << (v126 / v128)) & 0x100000000;
            if (v129 >= 0x40)
              v130 = 0;
            *(_QWORD *)&v229 = v130;
            if ((v130 ^ 0x100000000) <= v130 / v128)
            {
LABEL_145:
              v228.i64[1] = v128 - v126 % v128;
              if (v129 >= 0x3F)
                goto LABEL_153;
              *((_QWORD *)&v229 + 1) = 0x80000000uLL >> v129 << (v129 + 1);
              v131 = 0xFFFFFFFF >> -(char)v129;
              if (!v129)
                v131 = 0;
              LODWORD(v230) = v131;
              if (v129 >= 0x1F)
                v132 = -1;
              else
                v132 = 0xFFFFFFFF >> ~(_BYTE)v129;
            }
            else
            {
              v129 = v126 / ++v128;
              *((_QWORD *)&v227 + 1) = v129;
              v228.i64[0] = v128;
              if (v129 <= 0x3F)
              {
                *(_QWORD *)&v229 = (-1 << (v126 / v128)) & 0x100000000;
                goto LABEL_145;
              }
              v228.i64[1] = v128 - (v126 % v128);
              *(_QWORD *)&v229 = 0;
              LODWORD(v129) = 64;
LABEL_153:
              *((_QWORD *)&v229 + 1) = 0;
              v134 = -(int)v129;
              v132 = -1;
              LODWORD(v230) = 0xFFFFFFFF >> v134;
            }
            HIDWORD(v230) = v132;
            do
              v133 = sub_19C17D244((uint64_t *)&v226);
            while (v133 >= v123);
          }
          else
          {
            v226 = (char *)v117;
            v227 = xmmword_19C277710;
            v228 = v202;
            v229 = xmmword_19C2775D0;
            v230 = -1;
            v133 = sub_19C17D244((uint64_t *)&v226);
          }
          if (v133)
          {
            v135 = *(_DWORD *)v120;
            *(_DWORD *)v120 = *(_DWORD *)&v120[4 * v133];
            *(_DWORD *)&v120[4 * v133] = v135;
          }
          goto LABEL_131;
        }
      }
LABEL_159:
      v205 = 0;
      if (v119 == v120)
      {
        v159 = 0;
        v160 = (int)v214;
        v114 = v187;
        if ((_DWORD)v214)
          goto LABEL_194;
        goto LABEL_199;
      }
      if (v121 < 0)
        sub_19C07DA0C();
      v136 = (int *)operator new(v121);
      v137 = &v136[v121 >> 2];
      v205 = v136;
      memcpy(v136, v120, v121);
      v206 = 0;
      if (!v121)
      {
        v159 = 0;
        v160 = (int)v214;
        v114 = v187;
        if ((_DWORD)v214)
          goto LABEL_194;
        goto LABEL_199;
      }
      v138 = 0;
      v139 = v115;
      v140 = 0;
      v141 = 0;
      v197 = v118;
      __Aa = v139;
      v142 = v139;
      do
      {
        while (1)
        {
          v143 = *((_QWORD *)v215[0] + v142 + v217 * (uint64_t)*v136);
          if (v141 >= v140)
            break;
          *(_QWORD *)v141 = v143;
          v141 += 8;
          if (++v136 == v137)
            goto LABEL_193;
        }
        v144 = (v141 - v138) >> 3;
        v145 = v144 + 1;
        if ((unint64_t)(v144 + 1) >> 61)
          sub_19C07DA0C();
        if ((v140 - v138) >> 2 > v145)
          v145 = (v140 - v138) >> 2;
        if ((unint64_t)(v140 - v138) >= 0x7FFFFFFFFFFFFFF8)
          v146 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v146 = v145;
        if (v146)
        {
          if (v146 >> 61)
            sub_19C07C7FC();
          v147 = operator new(8 * v146);
          v148 = &v147[8 * v144];
          *v148 = v143;
          v149 = (uint64_t)(v148 + 1);
          if (v141 == v138)
            goto LABEL_179;
        }
        else
        {
          v147 = 0;
          v148 = (_QWORD *)(8 * v144);
          *(_QWORD *)(8 * v144) = v143;
          v149 = 8 * v144 + 8;
          if (v141 == v138)
            goto LABEL_179;
        }
        v150 = v141 - 8 - v138;
        if (v150 < 0x168)
        {
          v151 = v141;
          goto LABEL_178;
        }
        if (&v147[v141 - v138 - 8 - (v150 & 0xFFFFFFFFFFFFFFF8)] > &v147[v141 - v138 - 8])
        {
          v151 = v141;
          do
          {
LABEL_178:
            v152 = *((_QWORD *)v151 - 1);
            v151 -= 8;
            *--v148 = v152;
          }
          while (v151 != v138);
          goto LABEL_179;
        }
        if (&v141[-(v150 & 0xFFFFFFFFFFFFFFF8) - 8] > v141 - 8)
        {
          v151 = v141;
          goto LABEL_178;
        }
        if ((unint64_t)(v138 - v147) < 0x20)
        {
          v151 = v141;
          goto LABEL_178;
        }
        v153 = (v150 >> 3) + 1;
        v154 = 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
        v151 = &v141[-v154];
        v148 = (_QWORD *)((char *)v148 - v154);
        v155 = &v147[8 * v144 - 16];
        v156 = v141 - 16;
        v157 = v153 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v158 = *(_OWORD *)v156;
          *(v155 - 1) = *((_OWORD *)v156 - 1);
          *v155 = v158;
          v155 -= 2;
          v156 -= 32;
          v157 -= 4;
        }
        while (v157);
        if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_178;
LABEL_179:
        v140 = &v147[8 * v146];
        v206 = v148;
        if (v138)
          operator delete(v138);
        v138 = (char *)v148;
        ++v136;
        v141 = (char *)v149;
      }
      while (v136 != v137);
LABEL_193:
      v159 = v206;
      v118 = v197;
      v115 = __Aa;
      v117 = v178 + 7592;
      v116 = v195;
      v160 = (int)v214;
      v114 = v187;
      if ((_DWORD)v214)
      {
LABEL_194:
        v161 = 0;
        v162 = SHIDWORD(v214);
        v163 = v211;
        if (v160 < 6 || HIDWORD(v214) != 1)
          goto LABEL_209;
        if ((unint64_t)((char *)&v211[(_QWORD)v115] - (char *)v159) < 0x20)
        {
          v161 = 0;
          goto LABEL_209;
        }
        v161 = v160 & 0xFFFFFFFFFFFFFFFCLL;
        v165 = v159 + 1;
        v166 = (_OWORD *)((char *)v211 + v118);
        v167 = v160 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v168 = *v165;
          *(v166 - 1) = *(v165 - 1);
          *v166 = v168;
          v165 += 2;
          v166 += 2 * v162;
          v167 -= 4;
        }
        while (v167);
        if (v161 != v160)
        {
LABEL_209:
          v169 = v160 - v161;
          v170 = &v163[(_QWORD)v115 + (int)v161 * (uint64_t)(int)v162];
          v171 = 8 * v162;
          v172 = (uint64_t *)v159 + v161;
          do
          {
            v173 = *v172++;
            *(_QWORD *)v170 = v173;
            v170 = (double *)((char *)v170 + v171);
            --v169;
          }
          while (v169);
        }
LABEL_211:
        operator delete(v159);
        v164 = v205;
        if (!v205)
          goto LABEL_202;
LABEL_201:
        operator delete(v164);
        goto LABEL_202;
      }
LABEL_199:
      if (v159)
        goto LABEL_211;
      v164 = v205;
      if (v205)
        goto LABEL_201;
LABEL_202:
      if (v207)
      {
        v208 = (char *)v207;
        operator delete(v207);
      }
      v115 = (double *)((char *)v115 + 1);
      v118 += 8;
    }
    while ((_DWORD)v190 != (_DWORD)v115);
  }
  *v114 = 0;
  v114[1] = 0;
  v114[2] = 0;
  v174 = v211;
  v175 = (char *)v212 - (char *)v211;
  if (v212 != v211)
  {
    if (v175 < 0)
      sub_19C07DA0C();
    v176 = (char *)operator new((char *)v212 - (char *)v211);
    *v114 = v176;
    v177 = &v176[8 * (v175 >> 3)];
    v114[2] = v177;
    memcpy(v176, v174, v175);
    v114[1] = v177;
  }
  v114[3] = v214;
  if (v174)
  {
    v212 = v174;
    operator delete(v174);
  }
  if (v215[0])
  {
    v215[1] = v215[0];
    operator delete(v215[0]);
  }
  if (v219[0])
  {
    v219[1] = v219[0];
    operator delete(v219[0]);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v222[0])
  {
    v222[1] = v222[0];
    operator delete(v222[0]);
  }
}

void sub_19C176930(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  sub_19C07AF7C(a1);
}

void sub_19C176A80()
{
  JUMPOUT(0x19C176B88);
}

void sub_19C176A98()
{
  JUMPOUT(0x19C176AC0);
}

void sub_19C176B18()
{
  if (STACK[0x248])
    JUMPOUT(0x19C176BD0);
  JUMPOUT(0x19C176BA0);
}

void sub_19C176B2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  void *v66;

  if (__p)
  {
    operator delete(__p);
    v66 = a44;
    if (!a44)
    {
LABEL_3:
      if (!a66)
        goto LABEL_9;
      goto LABEL_10;
    }
  }
  else
  {
    v66 = a44;
    if (!a44)
      goto LABEL_3;
  }
  operator delete(v66);
  if (!a66)
LABEL_9:
    JUMPOUT(0x19C176B88);
LABEL_10:
  JUMPOUT(0x19C176B80);
}

void sub_19C176B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *a70;
  uint64_t v70;
  void *v72;
  void *v73;

  if (__p)
    operator delete(__p);
  if (a70)
  {
    operator delete(a70);
    v72 = (void *)STACK[0x208];
    if (!STACK[0x208])
    {
LABEL_5:
      v73 = (void *)STACK[0x248];
      if (!STACK[0x248])
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else
  {
    v72 = (void *)STACK[0x208];
    if (!STACK[0x208])
      goto LABEL_5;
  }
  STACK[0x210] = (unint64_t)v72;
  operator delete(v72);
  v73 = (void *)STACK[0x248];
  if (!STACK[0x248])
  {
LABEL_6:
    sub_19C176E10(v70 - 232);
    _Unwind_Resume(a1);
  }
LABEL_9:
  STACK[0x250] = (unint64_t)v73;
  operator delete(v73);
  sub_19C176E10(v70 - 232);
  _Unwind_Resume(a1);
}

void sub_19C176BE8(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = a2 * a1;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a2 * a1)
  {
    v7 = v6;
    if (v6 < 0)
      sub_19C07DA0C();
    v8 = 8 * v6;
    v9 = (char *)operator new(v8);
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 16) = &v9[8 * v7];
    bzero(v9, 8 * v7);
    *(_QWORD *)(a3 + 8) = &v9[v8];
  }
  else
  {
    v9 = 0;
  }
  *(_DWORD *)(a3 + 24) = a1;
  *(_DWORD *)(a3 + 28) = a2;
  v10 = a2 * (uint64_t)a1;
  v11 = v10 / a2;
  v12 = v10 % a2;
  if (v10 >= a2 || v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 1;
    do
    {
      *(_QWORD *)&v9[8 * v13 + 8 * v14 * a2] = 0;
      ++v15;
      v14 = v16 / a2;
      v13 = v15 - v14 * a2;
      ++v16;
    }
    while (v14 != v11 || v13 != v12);
  }
}

void sub_19C176CC8(void *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19C07AF7C(a1);
}

void sub_19C176CE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((_DWORD)a2)
  {
    if ((a2 & 0x80000000) != 0)
      sub_19C07DA0C();
    v6 = 8 * (int)a2;
    v7 = (char *)operator new(v6);
    bzero(v7, 8 * (int)a2);
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = &v7[v6];
    *(_QWORD *)(a3 + 16) = &v7[8 * (int)a2];
    *(_DWORD *)(a3 + 24) = a2;
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    if (!a2)
      return;
    v7 = 0;
  }
  v8 = 0;
  v9 = a1 + 5048;
  v10 = (double *)(a1 + 7560);
  do
    *(double *)&v7[8 * v8++] = sub_19C17CECC((uint64_t)v10, v9, v10);
  while (a2 != v8);
}

void sub_19C176DD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  sub_19C07AF7C(a1);
}

void sub_19C176DF4(_Unwind_Exception *exception_object)
{
  void *v1;
  _QWORD *v2;

  if (v1)
  {
    *v2 = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C176E10(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_19C176E50(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  size_t v25;
  double v30;
  uint64_t v31;
  int v32;
  int v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  char *v41;
  _OWORD *v42;
  double *v43;
  double *v44;
  vDSP_Length v45;
  float64x2_t v46;
  float64x2_t *v47;
  unint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  size_t v66;
  size_t v67;
  vDSP_Length v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 *v74;
  _OWORD *v75;
  unint64_t v76;
  __int128 v77;
  vDSP_Length v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  int64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  vDSP_Length v88;
  uint64_t v89;
  unint64_t v90;
  __int128 v91;
  char *v92;
  uint64_t v93;
  int64_t v94;
  float64x2_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  unint64_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t *v104;
  unint64_t v105;
  float64x2_t v106;
  vDSP_Length v107;
  double *v108;
  size_t v109;
  __int128 *v110;
  signed int v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  __int128 *v119;
  _OWORD *v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  double *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int64_t v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unsigned __int8 v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unint64_t v142;
  int v143;
  int v144;
  int *v145;
  int *v146;
  char *v147;
  double *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD *v164;
  char *v165;
  uint64_t v166;
  __int128 v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  int *v173;
  __int128 *v174;
  _OWORD *v175;
  unint64_t v176;
  __int128 v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  int v186;
  char *v187;
  int v188;
  uint64_t v189;
  int v190;
  BOOL v191;
  int v192;
  int v193;
  uint64_t v194;
  size_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  float64x2_t *v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int64x2_t v210;
  int64x2_t v211;
  float64x2_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  size_t v216;
  int v217;
  uint64_t v218;
  float64x2_t *v219;
  float64x2_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t __sz;
  size_t __sza;
  double *__A;
  double *__Aa;
  vDSP_Length __N;
  _OWORD *__src;
  void *__srca[2];
  int v231;
  unsigned int v232;
  uint64_t v233;
  int *v234;
  char *v235;
  void *v236;
  char *v237;
  char *v238;
  int v239;
  void *v240;
  char *v241;
  uint64_t v242;
  int v243;
  int v244;
  void *v245[3];
  signed int v246;
  int v247;
  void *__p[4];
  void *v249[3];
  signed int v250;
  signed int v251;
  void *v252[3];
  int v253;
  char *v254;
  char *v255;
  char *v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;

  sub_19C17ABD0((uint64_t)v252, a3);
  v7 = v253;
  sub_19C176BE8(a2, v253, (uint64_t)v249);
  v8 = v7;
  v223 = a2;
  if (a2 >= 1)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      sub_19C176CE4(a1, v8, (uint64_t)__p);
      v11 = v251;
      v12 = (char *)__p[0];
      if (v251)
        break;
      if (__p[0])
        goto LABEL_4;
LABEL_5:
      ++v10;
      v9 += 8;
      if (v10 == a2)
        goto LABEL_17;
    }
    v13 = (char *)v249[0];
    if (v251 >= 6 && (unint64_t)((char *)v249[0] + 8 * v10 * v251 - (char *)__p[0]) >= 0x20)
    {
      v14 = v251 & 0xFFFFFFFFFFFFFFFCLL;
      v19 = (__int128 *)((char *)__p[0] + 16);
      v20 = (char *)v249[0] + v9 * v251 + 16;
      v21 = v14;
      do
      {
        v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v14 == v11)
        goto LABEL_4;
    }
    else
    {
      v14 = 0;
    }
    v15 = v11 - v14;
    v16 = &v13[8 * v14 + 8 * v10 * v11];
    v17 = &v12[8 * v14];
    do
    {
      v18 = *(_QWORD *)v17;
      v17 += 8;
      *(_QWORD *)v16 = v18;
      v16 += 8;
      --v15;
    }
    while (v15);
LABEL_4:
    __p[1] = v12;
    operator delete(v12);
    goto LABEL_5;
  }
LABEL_17:
  v208 = a1;
  v233 = a4;
  v231 = a2;
  sub_19C176BE8(a2, v8, (uint64_t)v245);
  v221 = v8 & ~((int)v8 >> 31);
  v209 = v8;
  if ((int)v8 >= 1)
  {
    v23 = a2 + 1;
    if (a2 == -1)
    {
      v240 = 0;
      v241 = 0;
      v243 = 0;
      v242 = 0;
      v236 = 0;
      v237 = 0;
      v238 = 0;
LABEL_252:
      sub_19C07DA0C();
    }
    if (a2 < -1)
    {
      v240 = 0;
      v241 = 0;
      v242 = 0;
      sub_19C07DA0C();
    }
    v24 = 0;
    v25 = 8 * v23;
    __sz = 8 * a2;
    v214 = v23 & 0xFFFFFFFFFFFFFFFCLL;
    v215 = v23;
    __N = a2;
    v213 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    __asm { FMOV            V2.2D, #1.0 }
    v212 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v23), 0));
    v30 = 1.0 / (double)v23;
    v222 = 16;
    v211 = vdupq_n_s64(2uLL);
    v210 = vdupq_n_s64(4uLL);
    v216 = v25;
    v217 = a2 + 1;
    while (1)
    {
      v31 = 4 * (int)v24;
      v32 = *(_DWORD *)((char *)v252[0] + v31);
      v33 = *(_DWORD *)&v254[v31];
      v34 = (double *)operator new(v25);
      v35 = (double)v33;
      v240 = v34;
      v242 = (uint64_t)&v34[(unint64_t)__sz / 8 + 1];
      bzero(v34, v25);
      v241 = (char *)v34 + v25;
      v243 = v23;
      if (!v231)
      {
        v41 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *v34 = v35;
        v236 = 0;
        v237 = 0;
        v239 = 0;
        v238 = 0;
        v45 = __N;
        goto LABEL_46;
      }
      v36 = (double)v32;
      v37 = v35 - v36;
      if (v23 < 4)
        break;
      v46 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36, 0);
      v47 = (float64x2_t *)(v34 + 2);
      v48 = v214;
      v49 = (int64x2_t)xmmword_19C276E20;
      v40 = __sz;
      do
      {
        v47[-1] = vmlaq_f64(v46, vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)v49), v37), v212);
        *v47 = vmlaq_f64(v46, vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v49, v211)), v37), v212);
        v49 = vaddq_s64(v49, v210);
        v47 += 2;
        v48 -= 4;
      }
      while (v48);
      v39 = v215;
      v38 = v214;
      if (v214 != v215)
        goto LABEL_29;
LABEL_30:
      v236 = 0;
      v237 = 0;
      v238 = 0;
      if (v231 < 0)
        goto LABEL_252;
      v42 = operator new(v40);
      v236 = v42;
      v238 = (char *)v42 + 8 * v231;
      bzero(v42, v40);
      v237 = (char *)v42 + v40;
      v239 = v231;
      if (v231 < 4)
      {
        v50 = 0;
LABEL_36:
        v55 = v223 - v50;
        v56 = v50 << 32;
        do
        {
          *(double *)((char *)v42 + (v56 >> 29)) = *(double *)((char *)v34 + (v56 >> 29));
          v56 += 0x100000000;
          --v55;
        }
        while (v55);
        goto LABEL_38;
      }
      v51 = v42 + 1;
      v52 = (__int128 *)(v34 + 2);
      v53 = v223 & 0xFFFFFFFC;
      do
      {
        v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        *v51 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      v50 = v223 & 0xFFFFFFFC;
      if (v50 != v223)
        goto LABEL_36;
LABEL_38:
      v41 = (char *)operator new(v40);
      bzero(v41, v40);
      if (v23 >= 3)
      {
        v58 = 0;
        v59 = v223 & 0xFFFFFFFE;
        v45 = v231;
        do
        {
          v60 = v58 >> 29;
          v58 += 0x200000000;
          v61 = *(_QWORD *)((char *)v34 + (v58 >> 29));
          *(double *)&v41[v60] = *(double *)((char *)v34 + v60 + 8);
          *(_QWORD *)&v41[v60 + 8] = v61;
          v59 -= 2;
        }
        while (v59);
        v57 = v223 & 0xFFFFFFFE;
        if (v57 == v223)
          goto LABEL_45;
      }
      else
      {
        v57 = 0;
        v45 = v231;
      }
      v62 = v57 << 32;
      v63 = v223 - v57;
      do
      {
        v64 = v62 >> 29;
        v62 += 0x100000000;
        *(double *)&v41[v64] = *(double *)((char *)v34 + (v62 >> 29));
        --v63;
      }
      while (v63);
LABEL_45:
      v65 = (double *)operator new(v40);
      v66 = v40;
      v44 = v65;
      v43 = &v65[v45];
      memcpy(v65, v41, v66);
LABEL_46:
      vDSP_vsubD((const double *)v42, 1, v44, 1, v44, 1, v45);
      v67 = (char *)v43 - (char *)v44;
      if (v67)
      {
        if ((v67 & 0x8000000000000000) != 0)
          sub_19C07DA0C();
        __A = (double *)operator new(v67);
        memcpy(__A, v44, v67);
        if (v44)
LABEL_49:
          operator delete(v44);
      }
      else
      {
        __A = 0;
        if (v44)
          goto LABEL_49;
      }
      v68 = v250;
      v256 = 0;
      v257 = 0uLL;
      v218 = 8 * v24;
      v232 = v250;
      if (!v250)
      {
        v72 = 0;
        v73 = 0;
        __src = 0;
        goto LABEL_65;
      }
      if (v250 < 0)
        sub_19C07DA0C();
      __src = operator new(8 * v250);
      bzero(__src, 8 * v68);
      v69 = 0;
      v70 = v251;
      v71 = (char *)v249[0];
      if (v232 >= 6 && v251 == 1)
      {
        if ((unint64_t)((char *)__src - ((char *)v249[0] + 8 * v24)) >= 0x20)
        {
          v69 = v68 & 0xFFFFFFFFFFFFFFFCLL;
          v74 = (__int128 *)((char *)v249[0] + v222);
          v75 = __src + 1;
          v76 = v68 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v77 = *v74;
            *(v75 - 1) = *(v74 - 1);
            *v75 = v77;
            v74 += 2 * v70;
            v75 += 2;
            v76 -= 4;
          }
          while (v76);
          if (v69 == v68)
            goto LABEL_64;
        }
        else
        {
          v69 = 0;
        }
      }
      v78 = v68 - v69;
      v79 = (_QWORD *)__src + v69;
      v80 = &v71[8 * v24 + 8 * (int)v69 * (uint64_t)(int)v70];
      v81 = 8 * v70;
      do
      {
        *v79++ = *(_QWORD *)v80;
        v80 += v81;
        --v78;
      }
      while (v78);
LABEL_64:
      v73 = (char *)operator new(8 * v68);
      v72 = &v73[8 * v68];
      memcpy(v73, __src, 8 * v68);
LABEL_65:
      vDSP_vmulD(__A, 1, (const double *)v73, 1, (double *)v73, 1, v68);
      v82 = v72 - v73;
      if (v72 == v73)
      {
        v84 = 0;
        v83 = 0;
      }
      else
      {
        if (v82 < 0)
          sub_19C07DA0C();
        v83 = (char *)operator new(v72 - v73);
        v84 = &v83[8 * (v82 >> 3)];
        memcpy(v83, v73, v82);
      }
      v256 = 0;
      v257 = 0uLL;
      if (!v231)
      {
        v87 = v84;
        v88 = v68;
        v85 = 0;
        goto LABEL_81;
      }
      if (v231 < 0)
        sub_19C07DA0C();
      v85 = (char *)operator new(__sz);
      v256 = v85;
      *((_QWORD *)&v257 + 1) = &v85[8 * v231];
      bzero(v85, __sz);
      *(_QWORD *)&v257 = &v85[__sz];
      LODWORD(v258) = v231;
      if (v231 < 4)
      {
        v86 = 0;
LABEL_78:
        v87 = v84;
        do
        {
          *(_QWORD *)&v85[8 * v86] = *((_QWORD *)v42 + v86);
          ++v86;
        }
        while (__N != v86);
        goto LABEL_80;
      }
      v89 = 0;
      v90 = v213;
      do
      {
        v91 = v42[v89 + 1];
        v92 = &v85[v89 * 16];
        *(_OWORD *)v92 = v42[v89];
        *((_OWORD *)v92 + 1) = v91;
        v89 += 2;
        v90 -= 4;
      }
      while (v90);
      v86 = v213;
      if (v213 != v231)
        goto LABEL_78;
      v87 = v84;
LABEL_80:
      v88 = v68;
LABEL_81:
      v93 = v24;
      vDSP_vaddD((const double *)v83, 1, (const double *)v85, 1, (double *)v83, 1, v88);
      v94 = v87 - v83;
      if (v87 == v83)
      {
        v219 = 0;
        v220 = 0;
        v97 = v93;
        if (v85)
          goto LABEL_84;
      }
      else
      {
        if (v94 < 0)
          sub_19C07DA0C();
        v95 = (float64x2_t *)operator new(v87 - v83);
        v96 = (char *)&v95->f64[v94 >> 3];
        v220 = v95;
        memcpy(v95, v83, v94);
        v219 = (float64x2_t *)v96;
        v97 = v93;
        if (v85)
LABEL_84:
          operator delete(v85);
      }
      if (v83)
        operator delete(v83);
      if (v73)
        operator delete(v73);
      if (__src)
        operator delete(__src);
      if (v232)
      {
        v98 = 4 * (int)v97;
        v99 = (double)*(int *)((char *)v252[0] + v98);
        v100 = (double)*(int *)&v254[v98];
        if (v232 < 4)
        {
          v101 = 0;
LABEL_99:
          v107 = v88 - v101;
          v108 = &v220->f64[v101];
          do
          {
            *v108 = fmax(fmin(*v108, v100), v99);
            ++v108;
            --v107;
          }
          while (v107);
          goto LABEL_101;
        }
        v101 = v88 & 0xFFFFFFFFFFFFFFFCLL;
        v102 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100, 0);
        v103 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v99, 0);
        v104 = v220 + 1;
        v105 = v88 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v106 = vmaxnmq_f64(vminnmq_f64(*v104, v102), v103);
          v104[-1] = vmaxnmq_f64(vminnmq_f64(v104[-1], v102), v103);
          *v104 = v106;
          v104 += 2;
          v105 -= 4;
        }
        while (v105);
        if (v101 != v88)
          goto LABEL_99;
      }
LABEL_101:
      v109 = (char *)v219 - (char *)v220;
      if (v219 != v220)
      {
        if ((v109 & 0x8000000000000000) != 0)
          sub_19C07DA0C();
        v110 = (__int128 *)operator new((char *)v219 - (char *)v220);
        memcpy(v110, v220, v109);
        v111 = v246;
        v23 = v217;
        if (!v246)
          goto LABEL_116;
LABEL_107:
        v112 = v111;
        v113 = v247;
        v114 = (char *)v245[0];
        _ZF = v111 >= 6 && v247 == 1;
        if (!_ZF || (unint64_t)((char *)v245[0] + v218 - (char *)v110) < 0x20)
        {
          v116 = 0;
          goto LABEL_114;
        }
        v116 = v111 & 0xFFFFFFFFFFFFFFFCLL;
        v119 = v110 + 1;
        v120 = (char *)v245[0] + v222;
        v121 = v112 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v122 = *v119;
          *(v120 - 1) = *(v119 - 1);
          *v120 = v122;
          v119 += 2;
          v120 += 2 * v113;
          v121 -= 4;
        }
        while (v121);
        if (v116 != v112)
        {
LABEL_114:
          v117 = &v114[8 * v97 + 8 * (int)v116 * (uint64_t)(int)v113];
          v118 = 8 * v113;
          do
          {
            *(_QWORD *)v117 = *((_QWORD *)v110 + v116++);
            v117 += v118;
          }
          while (v112 != v116);
        }
LABEL_116:
        operator delete(v110);
        goto LABEL_117;
      }
      v111 = v246;
      v23 = v217;
      if (v246)
      {
        v110 = 0;
        goto LABEL_107;
      }
LABEL_117:
      if (v220)
        operator delete(v220);
      if (__A)
        operator delete(__A);
      if (v41)
        operator delete(v41);
      if (v42)
        operator delete(v42);
      operator delete(v34);
      v24 = v97 + 1;
      v222 += 8;
      v25 = v216;
      if (v24 == v221)
        goto LABEL_129;
    }
    v38 = 0;
    v39 = v215;
    v40 = __sz;
    do
    {
LABEL_29:
      v34[v38] = v36 + v37 * (double)v38 * v30;
      ++v38;
    }
    while (v39 != v38);
    goto LABEL_30;
  }
LABEL_129:
  sub_19C176BE8(v231, v209, (uint64_t)&v240);
  v123 = v233;
  if (v209 >= 1)
  {
    v124 = 0;
    v125 = v231 & ~(v231 >> 31) | 0x100000000;
    v126 = v208 + 7592;
    v127 = 16;
    *(int64x2_t *)__srca = vdupq_n_s64(2uLL);
    do
    {
      sub_19C17D174(&v236, 0x100000000uLL, 0, v125, 0);
      v129 = (char *)v236;
      v128 = v237;
      v130 = v237 - (_BYTE *)v236;
      if (v237 - (_BYTE *)v236 >= 5)
      {
        v131 = v237 - 4;
        if (v237 - 4 > v236)
        {
          v132 = (unint64_t)v130 >> 2;
          while (v132 == 1)
          {
LABEL_135:
            v129 += 4;
            --v132;
            if (v129 >= v131)
            {
              v129 = (char *)v236;
              v128 = v237;
              v130 = v237 - (_BYTE *)v236;
              goto LABEL_162;
            }
          }
          if (v132)
          {
            v133 = __clz(v132);
            v134 = 63;
            if (((v132 << v133) & 0x7FFFFFFFFFFFFFFFLL) != 0)
              v134 = 64;
            v135 = v134 - v133;
            v256 = (char *)v126;
            *(_QWORD *)&v257 = v134 - v133;
            v136 = (v134 - v133) >> 5;
            if ((v135 & 0x1F) != 0)
              v137 = v136 + 1;
            else
              v137 = v136;
            v138 = v135 / v137;
            *((_QWORD *)&v257 + 1) = v138;
            *(_QWORD *)&v258 = v137;
            v139 = (-1 << (v135 / v137)) & 0x100000000;
            if (v138 >= 0x40)
              v139 = 0;
            *(_QWORD *)&v259 = v139;
            if ((v139 ^ 0x100000000) <= v139 / v137)
            {
LABEL_148:
              *((_QWORD *)&v258 + 1) = v137 - v135 % v137;
              if (v138 >= 0x3F)
                goto LABEL_156;
              *((_QWORD *)&v259 + 1) = 0x80000000uLL >> v138 << (v138 + 1);
              v140 = 0xFFFFFFFF >> -(char)v138;
              if (!v138)
                v140 = 0;
              LODWORD(v260) = v140;
              if (v138 >= 0x1F)
                v141 = -1;
              else
                v141 = 0xFFFFFFFF >> ~(_BYTE)v138;
            }
            else
            {
              v138 = v135 / ++v137;
              *((_QWORD *)&v257 + 1) = v138;
              *(_QWORD *)&v258 = v137;
              if (v138 <= 0x3F)
              {
                *(_QWORD *)&v259 = (-1 << (v135 / v137)) & 0x100000000;
                goto LABEL_148;
              }
              *((_QWORD *)&v258 + 1) = v137 - (v135 % v137);
              *(_QWORD *)&v259 = 0;
              LODWORD(v138) = 64;
LABEL_156:
              *((_QWORD *)&v259 + 1) = 0;
              v143 = -(int)v138;
              v141 = -1;
              LODWORD(v260) = 0xFFFFFFFF >> v143;
            }
            HIDWORD(v260) = v141;
            do
              v142 = sub_19C17D244((uint64_t *)&v256);
            while (v142 >= v132);
          }
          else
          {
            v256 = (char *)v126;
            v257 = xmmword_19C277710;
            v258 = *(_OWORD *)__srca;
            v259 = xmmword_19C2775D0;
            v260 = -1;
            v142 = sub_19C17D244((uint64_t *)&v256);
          }
          if (v142)
          {
            v144 = *(_DWORD *)v129;
            *(_DWORD *)v129 = *(_DWORD *)&v129[4 * v142];
            *(_DWORD *)&v129[4 * v142] = v144;
          }
          goto LABEL_135;
        }
      }
LABEL_162:
      v234 = 0;
      if (v128 == v129)
      {
        v168 = 0;
        v169 = v243;
        if (v243)
          goto LABEL_195;
        goto LABEL_200;
      }
      if (v130 < 0)
        sub_19C07DA0C();
      v145 = (int *)operator new(v130);
      v146 = &v145[v130 >> 2];
      v234 = v145;
      memcpy(v145, v129, v130);
      v235 = 0;
      if (!v130)
      {
        v168 = 0;
        v169 = v243;
        if (v243)
          goto LABEL_195;
        goto LABEL_200;
      }
      __sza = v127;
      v147 = 0;
      v148 = v124;
      v149 = 0;
      v150 = 0;
      __Aa = v148;
      v151 = v148;
      do
      {
        while (1)
        {
          v152 = *((_QWORD *)v245[0] + v151 + v247 * (uint64_t)*v145);
          if (v150 >= v149)
            break;
          *(_QWORD *)v150 = v152;
          v150 += 8;
          if (++v145 == v146)
            goto LABEL_194;
        }
        v153 = (v150 - v147) >> 3;
        v154 = v153 + 1;
        if ((unint64_t)(v153 + 1) >> 61)
          sub_19C07DA0C();
        if ((v149 - v147) >> 2 > v154)
          v154 = (v149 - v147) >> 2;
        if ((unint64_t)(v149 - v147) >= 0x7FFFFFFFFFFFFFF8)
          v155 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v155 = v154;
        if (v155)
        {
          if (v155 >> 61)
            sub_19C07C7FC();
          v156 = operator new(8 * v155);
          v157 = &v156[8 * v153];
          *(_QWORD *)v157 = v152;
          v158 = (uint64_t)(v157 + 8);
          if (v150 != v147)
          {
LABEL_177:
            v159 = v150 - 8 - v147;
            if (v159 < 0x168
              || &v156[v150 - v147 - 8 - (v159 & 0xFFFFFFFFFFFFFFF8)] > &v156[v150 - v147 - 8]
              || &v150[-(v159 & 0xFFFFFFFFFFFFFFF8) - 8] > v150 - 8
              || (unint64_t)(v147 - v156) < 0x20)
            {
              v160 = v150;
              v123 = v233;
            }
            else
            {
              v162 = (v159 >> 3) + 1;
              v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
              v160 = &v150[-v163];
              v157 -= v163;
              v164 = &v156[8 * v153 - 16];
              v165 = v150 - 16;
              v166 = v162 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v167 = *(_OWORD *)v165;
                *(v164 - 1) = *((_OWORD *)v165 - 1);
                *v164 = v167;
                v164 -= 2;
                v165 -= 32;
                v166 -= 4;
              }
              while (v166);
              v123 = v233;
              if (v162 == (v162 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_180:
                v149 = &v156[8 * v155];
                v235 = v157;
                if (!v147)
                  goto LABEL_182;
LABEL_181:
                operator delete(v147);
                goto LABEL_182;
              }
            }
            do
            {
              v161 = *((_QWORD *)v160 - 1);
              v160 -= 8;
              *((_QWORD *)v157 - 1) = v161;
              v157 -= 8;
            }
            while (v160 != v147);
            goto LABEL_180;
          }
        }
        else
        {
          v156 = 0;
          v157 = (char *)(8 * v153);
          *(_QWORD *)(8 * v153) = v152;
          v158 = 8 * v153 + 8;
          if (v150 != v147)
            goto LABEL_177;
        }
        v123 = v233;
        v149 = &v156[8 * v155];
        v235 = v157;
        if (v147)
          goto LABEL_181;
LABEL_182:
        v147 = v157;
        ++v145;
        v150 = (char *)v158;
      }
      while (v145 != v146);
LABEL_194:
      v168 = v235;
      v127 = __sza;
      v124 = __Aa;
      v126 = v208 + 7592;
      v125 = v231 & ~(v231 >> 31) | 0x100000000;
      v169 = v243;
      if (v243)
      {
LABEL_195:
        v170 = 0;
        v171 = v244;
        v172 = (char *)v240;
        if (v169 < 6 || v244 != 1)
          goto LABEL_210;
        if ((unint64_t)((_BYTE *)v240 + 8 * (_QWORD)v124 - v168) < 0x20)
        {
          v170 = 0;
          goto LABEL_210;
        }
        v170 = v169 & 0xFFFFFFFFFFFFFFFCLL;
        v174 = (__int128 *)(v168 + 16);
        v175 = (char *)v240 + v127;
        v176 = v169 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v177 = *v174;
          *(v175 - 1) = *(v174 - 1);
          *v175 = v177;
          v174 += 2;
          v175 += 2 * v171;
          v176 -= 4;
        }
        while (v176);
        if (v170 != v169)
        {
LABEL_210:
          v178 = v169 - v170;
          v179 = &v172[8 * ((_QWORD)v124 + (int)v170 * (uint64_t)(int)v171)];
          v180 = 8 * v171;
          v181 = &v168[8 * v170];
          do
          {
            v182 = *(_QWORD *)v181;
            v181 += 8;
            *(_QWORD *)v179 = v182;
            v179 += v180;
            --v178;
          }
          while (v178);
        }
LABEL_212:
        operator delete(v168);
        v173 = v234;
        if (!v234)
          goto LABEL_203;
LABEL_202:
        operator delete(v173);
        goto LABEL_203;
      }
LABEL_200:
      if (v168)
        goto LABEL_212;
      v173 = v234;
      if (v234)
        goto LABEL_202;
LABEL_203:
      if (v236)
      {
        v237 = (char *)v236;
        operator delete(v236);
      }
      v124 = (double *)((char *)v124 + 1);
      v127 += 8;
    }
    while ((_DWORD)v221 != (_DWORD)v124);
  }
  v183 = v244;
  if (v231)
  {
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v187 = (char *)v240;
    v188 = 1;
    do
    {
      v189 = 8 * (v184 + v183 * (uint64_t)v185);
      *(double *)&v187[v189] = round(*(double *)&v187[v189]);
      ++v186;
      v185 = v188 / v209;
      v190 = v188 / v209 * v209;
      v184 = v186 - v190;
      v191 = v188 / v209 == v231 && v190 == v188;
      ++v188;
    }
    while (!v191);
  }
  v192 = v243;
  *(_QWORD *)(v123 + 8) = 0;
  *(_QWORD *)(v123 + 16) = 0;
  v193 = v183 * v192;
  *(_QWORD *)v123 = 0;
  if (v183 * v192)
  {
    v194 = v193;
    if (v193 < 0)
      sub_19C07DA0C();
    v195 = 4 * v193;
    v196 = (char *)operator new(v195);
    *(_QWORD *)v123 = v196;
    *(_QWORD *)(v123 + 16) = &v196[4 * v194];
    bzero(v196, 4 * v194);
    *(_QWORD *)(v123 + 8) = &v196[v195];
    *(_DWORD *)(v123 + 24) = v192;
    *(_DWORD *)(v123 + 28) = v183;
    v197 = (char *)v240;
    if (v194 < 8)
    {
      v198 = 0;
LABEL_238:
      v206 = v194 - v198;
      v207 = v198 << 32;
      do
      {
        *(_DWORD *)&v196[v207 >> 30] = (int)*(double *)&v197[v207 >> 29];
        v207 += 0x100000000;
        --v206;
      }
      while (v206);
      goto LABEL_240;
    }
    v200 = 0;
    v198 = v194 & 0xFFFFFFF8;
    v201 = v198;
    do
    {
      v202 = (float64x2_t *)&v197[v200 >> 29];
      v203 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*v202), (int32x4_t)vcvtq_s64_f64(v202[1]));
      v204 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v202[2]), (int32x4_t)vcvtq_s64_f64(v202[3]));
      v205 = (int32x4_t *)&v196[v200 >> 30];
      *v205 = v203;
      v205[1] = v204;
      v200 += 0x800000000;
      v201 -= 8;
    }
    while (v201);
    if (v198 != v194)
      goto LABEL_238;
  }
  else
  {
    *(_DWORD *)(v123 + 24) = v192;
    *(_DWORD *)(v123 + 28) = v183;
    v197 = (char *)v240;
    if (!v240)
    {
      v199 = v245[0];
      if (!v245[0])
        goto LABEL_228;
      goto LABEL_227;
    }
  }
LABEL_240:
  v241 = v197;
  operator delete(v197);
  v199 = v245[0];
  if (v245[0])
  {
LABEL_227:
    v245[1] = v199;
    operator delete(v199);
  }
LABEL_228:
  if (v249[0])
  {
    v249[1] = v249[0];
    operator delete(v249[0]);
  }
  if (v254)
  {
    v255 = v254;
    operator delete(v254);
  }
  if (v252[0])
  {
    v252[1] = v252[0];
    operator delete(v252[0]);
  }
}

void sub_19C178088(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  sub_19C07AF7C(a1);
}

void sub_19C1781D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;

  if (a70)
    JUMPOUT(0x19C178308);
  JUMPOUT(0x19C1782A8);
}

void sub_19C1781F0()
{
  JUMPOUT(0x19C178218);
}

void sub_19C178280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t a70;
  uint64_t v70;
  void *v72;

  if (__p)
  {
    operator delete(__p);
    v72 = a44;
    if (!a44)
    {
LABEL_3:
      if (!a66)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v72 = a44;
    if (!a44)
      goto LABEL_3;
  }
  operator delete(v72);
  if (!a66)
  {
LABEL_4:
    if (!a70)
    {
      if (!STACK[0x208])
      {
        if (!STACK[0x248])
        {
          sub_19C176E10(v70 - 248);
          _Unwind_Resume(a1);
        }
        JUMPOUT(0x19C178328);
      }
      JUMPOUT(0x19C178318);
    }
    JUMPOUT(0x19C178308);
  }
LABEL_15:
  JUMPOUT(0x19C1782F8);
}

void sub_19C1782EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *a70;
  uint64_t v70;
  void *v72;
  void *v73;

  if (__p)
  {
    operator delete(__p);
    if (a70)
    {
      operator delete(a70);
      v72 = (void *)STACK[0x208];
      if (STACK[0x208])
      {
        STACK[0x210] = (unint64_t)v72;
        operator delete(v72);
        v73 = (void *)STACK[0x248];
        if (STACK[0x248])
        {
          STACK[0x250] = (unint64_t)v73;
          operator delete(v73);
          sub_19C176E10(v70 - 248);
          _Unwind_Resume(a1);
        }
        JUMPOUT(0x19C1782B8);
      }
      JUMPOUT(0x19C1782B0);
    }
    JUMPOUT(0x19C1782A8);
  }
  JUMPOUT(0x19C1782A0);
}

void sub_19C178340(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t i;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  void **v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void **v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v48;
  void **v49;
  void *v50;
  char *v51;
  char *v52;
  int v53;
  void *__dst[2];
  void *v55;
  __int128 v56;
  int v57;
  void *v58;
  void **v59;
  uint64_t v60;
  void *v61[4];
  void *__p;
  void *v63;
  void *v64[3];
  int v65;
  int v66;
  void *v67[4];
  void *v68;
  void *v69;
  char *v70;
  char *v71;
  char *v72;
  int v73;

  sub_19C17897C(a4, (int)a3);
  v42 = a1;
  if (sub_19C178A44(a1))
  {
    sub_19C178B08(a1, (uint64_t *)v67);
    sub_19C17AABC((uint64_t)v61, (uint64_t)v67);
    sub_19C175838(a2, a3, (uint64_t)v61, v64);
    if (__p)
    {
      v63 = __p;
      operator delete(__p);
    }
    if (v61[0])
    {
      v61[1] = v61[0];
      operator delete(v61[0]);
    }
    v41 = v65;
    if (v65 >= 1)
    {
      v7 = 0;
      for (i = 0; i != v41; ++i)
      {
        v9 = v64[0];
        v10 = v66;
        __dst[0] = 0;
        __dst[1] = 0;
        v55 = 0;
        if (v66)
        {
          if (v66 < 0)
            sub_19C07DA0C();
          v11 = (char *)operator new(8 * v66);
          bzero(v11, 8 * v10);
          v12 = &v9[v7 * v10];
          if (v10 >= 8)
          {
            if ((unint64_t)(v11 - &v9[8 * i * v10]) >= 0x20)
            {
              v14 = 0;
              v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
              v15 = v10 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v16 = *(_OWORD *)&v12[v14 + 16];
                v17 = &v11[v14];
                *(_OWORD *)v17 = *(_OWORD *)&v12[v14];
                *((_OWORD *)v17 + 1) = v16;
                v14 += 32;
                v15 -= 4;
              }
              while (v15);
              if (v13 == v10)
                goto LABEL_20;
            }
            else
            {
              v13 = 0;
            }
          }
          else
          {
            v13 = 0;
          }
          do
          {
            *(_QWORD *)&v11[8 * v13] = *(_QWORD *)&v12[8 * v13];
            ++v13;
          }
          while (v10 != v13);
        }
        else
        {
          v11 = 0;
        }
LABEL_20:
        v58 = 0;
        v59 = 0;
        v60 = 0;
        sub_19C17AF88(&v58, *v42, v42[1], 0xAAAAAAAAAAAAAAABLL * ((v42[1] - *v42) >> 4));
        v18 = (void **)v58;
        v49 = v59;
        if (v58 == v59)
          goto LABEL_50;
        v43 = i;
        v44 = v7;
        v19 = 0;
        v45 = i;
        v46 = v11;
        v48 = 24 * (int)i;
        do
        {
          if (*((char *)v18 + 23) < 0)
          {
            sub_19C07C6E8(__dst, *v18, (unint64_t)v18[1]);
          }
          else
          {
            v20 = *(_OWORD *)v18;
            v55 = v18[2];
            *(_OWORD *)__dst = v20;
          }
          v21 = *(_OWORD *)(v18 + 3);
          v57 = *((_DWORD *)v18 + 10);
          v56 = v21;
          v22 = *a4;
          v23 = v57;
          v24 = v57;
          v51 = 0;
          v52 = 0;
          v50 = 0;
          v53 = 0;
          v70 = 0;
          v71 = 0;
          v72 = 0;
          if (v57)
          {
            if (v57 < 0)
              sub_19C07DA0C();
            v25 = 8 * v57;
            v26 = (char *)operator new(v25);
            bzero(v26, 8 * v23);
            v27 = &v26[v25];
            v50 = v26;
            v51 = &v26[v25];
            v52 = &v26[8 * v24];
            v53 = v23;
            if (v19 < v23 + v19)
              memcpy(v26, &v46[8 * v19], 8 * v24);
          }
          else
          {
            v27 = 0;
            v26 = 0;
            v50 = 0;
            v51 = 0;
            v52 = 0;
            v53 = 0;
          }
          v28 = v22 + v48;
          v29 = *(_QWORD *)(v22 + v48 + 8);
          if (v29 >= *(_QWORD *)(v22 + v48 + 16))
          {
            *(_QWORD *)(v28 + 8) = sub_19C17C01C((void **)(v22 + 24 * v45), (__int128 *)__dst, (uint64_t)&v50);
            v34 = (char *)v50;
            if (!v50)
              goto LABEL_37;
LABEL_36:
            v51 = v34;
            operator delete(v34);
            goto LABEL_37;
          }
          v70 = 0;
          v71 = 0;
          v72 = 0;
          v30 = v27 - v26;
          if (v30)
          {
            if (v30 < 0)
              sub_19C07DA0C();
            v31 = (char *)operator new(v30);
            v32 = &v31[8 * (v30 >> 3)];
            v70 = v31;
            v72 = v32;
            memcpy(v31, v26, v30);
            v71 = v32;
            v73 = v23;
            if ((SHIBYTE(v55) & 0x80000000) == 0)
            {
LABEL_34:
              v33 = *(_OWORD *)__dst;
              *(_QWORD *)(v29 + 16) = v55;
              *(_OWORD *)v29 = v33;
              goto LABEL_42;
            }
          }
          else
          {
            v32 = 0;
            v31 = 0;
            v73 = v23;
            if ((SHIBYTE(v55) & 0x80000000) == 0)
              goto LABEL_34;
          }
          sub_19C07C6E8((_BYTE *)v29, __dst[0], (unint64_t)__dst[1]);
LABEL_42:
          *(_QWORD *)(v29 + 24) = 0;
          *(_QWORD *)(v29 + 32) = 0;
          *(_QWORD *)(v29 + 40) = 0;
          v36 = v32 - v31;
          if (v32 != v31)
          {
            if (v36 < 0)
              sub_19C07DA0C();
            v37 = (char *)operator new(v32 - v31);
            *(_QWORD *)(v29 + 24) = v37;
            *(_QWORD *)(v29 + 32) = v37;
            v38 = &v37[8 * (v36 >> 3)];
            *(_QWORD *)(v29 + 40) = v38;
            memcpy(v37, v31, v32 - v31);
            *(_QWORD *)(v29 + 32) = v38;
          }
          *(_DWORD *)(v29 + 48) = v23;
          if (v31)
            operator delete(v31);
          *(_QWORD *)(v28 + 8) = v29 + 56;
          *(_QWORD *)(v28 + 8) = v29 + 56;
          v34 = (char *)v50;
          if (v50)
            goto LABEL_36;
LABEL_37:
          v35 = v57;
          if (SHIBYTE(v55) < 0)
            operator delete(__dst[0]);
          v19 += v35;
          v18 += 6;
        }
        while (v18 != v49);
        v18 = (void **)v58;
        v11 = v46;
        i = v43;
        v7 = v44;
LABEL_50:
        if (v18)
        {
          v39 = v59;
          v40 = v18;
          if (v59 != v18)
          {
            do
            {
              if (*((char *)v39 - 25) < 0)
                operator delete(*(v39 - 6));
              v39 -= 6;
            }
            while (v39 != v18);
            v40 = v58;
          }
          v59 = v18;
          operator delete(v40);
        }
        if (v11)
          operator delete(v11);
        v7 += 8;
      }
    }
    if (v64[0])
    {
      v64[1] = v64[0];
      operator delete(v64[0]);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    if (v67[0])
    {
      v67[1] = v67[0];
      operator delete(v67[0]);
    }
  }
}

void sub_19C178830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  sub_19C176E10((uint64_t)&a32);
  sub_19C176E10(v32 - 184);
  sub_19C178D94(a16);
  _Unwind_Resume(a1);
}

void sub_19C178854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16)
{
  uint64_t v16;

  sub_19C176E10(v16 - 184);
  sub_19C178D94(a16);
  _Unwind_Resume(a1);
}

void sub_19C178870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16)
{
  sub_19C178D94(a16);
  _Unwind_Resume(a1);
}

void sub_19C17888C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p)
    operator delete(__p);
  sub_19C07AF7C(a1);
}

_QWORD *sub_19C17897C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C07DA0C();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19C178A24(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_19C2556A4((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C178A44(uint64_t *a1)
{
  uint64_t v1;
  __int128 *v2;
  __int128 *v3;
  void *v4;
  void *__p;
  __int128 *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_19C17AF88(&__p, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  v1 = sub_19C17B8F8((__int128 *)__p, v7, 0);
  v2 = (__int128 *)__p;
  if (__p)
  {
    v3 = v7;
    v4 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v3 - 25) < 0)
          operator delete(*((void **)v3 - 6));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = __p;
    }
    v7 = v2;
    operator delete(v4);
  }
  return v1;
}

void sub_19C178AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19C178D24(&a9);
  _Unwind_Resume(a1);
}

void sub_19C178B08(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  void **v5;
  void **v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t *v25;
  void **v26;
  void *v27;
  void *__p[2];
  void *v29;
  __int128 v30;
  int v31;
  void *v32;
  void **v33;
  uint64_t v34;

  v4 = sub_19C178A44(a1);
  sub_19C17D694((uint64_t)a2, v4);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  sub_19C17AF88(&v32, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  v5 = (void **)v32;
  v6 = v33;
  if (v32 != v33)
  {
    v7 = 0;
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_19C07C6E8(__p, *v5, (unint64_t)v5[1]);
      }
      else
      {
        v8 = *(_OWORD *)v5;
        v29 = v5[2];
        *(_OWORD *)__p = v8;
      }
      v9 = *(_OWORD *)(v5 + 3);
      v31 = *((_DWORD *)v5 + 10);
      v30 = v9;
      v10 = v31;
      if (v31 < 1)
        goto LABEL_14;
      v11 = v30;
      v12 = *a2;
      v13 = a2[4];
      if (v31 >= 0x10 && v31 + v7 - 1 >= v7 && (unint64_t)(v13 - v12) >= 0x20)
      {
        v14 = v31 & 0xFFFFFFFC;
        v15 = v7 + (v31 & 0xFFFFFFFC);
        v19 = vdupq_lane_s64(v30, 0);
        v20 = vdupq_lane_s64(*((uint64_t *)&v30 + 1), 0);
        v21 = v7;
        v22 = v14;
        do
        {
          v23 = 8 * v21;
          v24 = (int64x2_t *)(v12 + v23);
          *v24 = v19;
          v24[1] = v19;
          v25 = (int64x2_t *)(v13 + v23);
          *v25 = v20;
          v25[1] = v20;
          v21 += 4;
          v22 -= 4;
        }
        while (v22);
        if (v14 == v10)
          goto LABEL_14;
      }
      else
      {
        v14 = 0;
        v15 = v7;
      }
      v16 = v10 - v14;
      v17 = v7 + v14 + 1;
      do
      {
        v18 = 8 * v15;
        *(_QWORD *)(v12 + v18) = v11;
        *(_QWORD *)(v13 + v18) = *((_QWORD *)&v11 + 1);
        v15 = v17++;
        --v16;
      }
      while (v16);
LABEL_14:
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      v7 += v10;
      v5 += 6;
      if (v5 == v6)
      {
        v5 = (void **)v32;
        break;
      }
    }
  }
  if (v5)
  {
    v26 = v33;
    v27 = v5;
    if (v33 != v5)
    {
      do
      {
        if (*((char *)v26 - 25) < 0)
          operator delete(*(v26 - 6));
        v26 -= 6;
      }
      while (v26 != v5);
      v27 = v32;
    }
    v33 = v5;
    operator delete(v27);
  }
}

void sub_19C178CF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C176E10(v1);
  _Unwind_Resume(a1);
}

void sub_19C178D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_19C178D24((void **)va);
  sub_19C176E10(v8);
  _Unwind_Resume(a1);
}

void **sub_19C178D24(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 25) < 0)
          operator delete(*(v3 - 6));
        v3 -= 6;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_19C178D94(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v8 = (char *)*(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (char *)*(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            do
            {
              v10 = (void *)*((_QWORD *)v9 - 4);
              if (v10)
              {
                *((_QWORD *)v9 - 3) = v10;
                operator delete(v10);
              }
              if (*(v9 - 33) < 0)
                operator delete(*((void **)v9 - 7));
              v9 -= 56;
            }
            while (v9 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C178E54(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t i;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  void **v18;
  unsigned int v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void **v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v48;
  void **v49;
  void *v50;
  char *v51;
  char *v52;
  int v53;
  void *__dst[2];
  void *v55;
  void *v56;
  int v57;
  void *v58;
  void **v59;
  uint64_t v60;
  void *v61[4];
  void *__p;
  void *v63;
  void *v64[3];
  int v65;
  int v66;
  void *v67[4];
  void *v68;
  void *v69;
  char *v70;
  char *v71;
  char *v72;
  int v73;

  sub_19C179490(a4, a3);
  v42 = a1;
  if (sub_19C179558(a1))
  {
    sub_19C17961C(a1, (uint64_t *)v67);
    sub_19C17ABD0((uint64_t)v61, (uint64_t)v67);
    sub_19C176E50(a2, a3, (uint64_t)v61, (uint64_t)v64);
    if (__p)
    {
      v63 = __p;
      operator delete(__p);
    }
    if (v61[0])
    {
      v61[1] = v61[0];
      operator delete(v61[0]);
    }
    v41 = v65;
    if (v65 >= 1)
    {
      v7 = 0;
      for (i = 0; i != v41; ++i)
      {
        v9 = v64[0];
        v10 = v66;
        __dst[0] = 0;
        __dst[1] = 0;
        v55 = 0;
        if (v66)
        {
          if (v66 < 0)
            sub_19C07DA0C();
          v11 = (char *)operator new(4 * v66);
          bzero(v11, 4 * v10);
          v12 = &v9[v7 * v10];
          if (v10 >= 8)
          {
            if ((unint64_t)(v11 - &v9[4 * i * v10]) >= 0x20)
            {
              v14 = 0;
              v13 = v10 & 0xFFFFFFFFFFFFFFF8;
              v15 = v10 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v16 = *(_OWORD *)&v12[v14 + 16];
                v17 = &v11[v14];
                *(_OWORD *)v17 = *(_OWORD *)&v12[v14];
                *((_OWORD *)v17 + 1) = v16;
                v14 += 32;
                v15 -= 8;
              }
              while (v15);
              if (v13 == v10)
                goto LABEL_20;
            }
            else
            {
              v13 = 0;
            }
          }
          else
          {
            v13 = 0;
          }
          do
          {
            *(_DWORD *)&v11[4 * v13] = *(_DWORD *)&v12[4 * v13];
            ++v13;
          }
          while (v10 != v13);
        }
        else
        {
          v11 = 0;
        }
LABEL_20:
        v58 = 0;
        v59 = 0;
        v60 = 0;
        sub_19C17B16C(&v58, *(_QWORD *)(v42 + 24), *(_QWORD *)(v42 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v42 + 32) - *(_QWORD *)(v42 + 24)) >> 3));
        v18 = (void **)v58;
        v49 = v59;
        if (v58 == v59)
          goto LABEL_50;
        v43 = i;
        v44 = v7;
        v19 = 0;
        v45 = i;
        v46 = v11;
        v48 = 24 * (int)i;
        do
        {
          if (*((char *)v18 + 23) < 0)
          {
            sub_19C07C6E8(__dst, *v18, (unint64_t)v18[1]);
          }
          else
          {
            v20 = *(_OWORD *)v18;
            v55 = v18[2];
            *(_OWORD *)__dst = v20;
          }
          v21 = v18[3];
          v57 = *((_DWORD *)v18 + 8);
          v56 = v21;
          v22 = *a4;
          v23 = v57;
          v24 = v57;
          v51 = 0;
          v52 = 0;
          v50 = 0;
          v53 = 0;
          v70 = 0;
          v71 = 0;
          v72 = 0;
          if (v57)
          {
            if (v57 < 0)
              sub_19C07DA0C();
            v25 = 4 * v57;
            v26 = (char *)operator new(v25);
            bzero(v26, 4 * v23);
            v27 = &v26[v25];
            v50 = v26;
            v51 = &v26[v25];
            v52 = &v26[4 * v24];
            v53 = v23;
            if (v19 < v23 + v19)
              memcpy(v26, &v46[4 * v19], 4 * v24);
          }
          else
          {
            v27 = 0;
            v26 = 0;
            v50 = 0;
            v51 = 0;
            v52 = 0;
            v53 = 0;
          }
          v28 = v22 + v48;
          v29 = *(_QWORD *)(v22 + v48 + 8);
          if (v29 >= *(_QWORD *)(v22 + v48 + 16))
          {
            *(_QWORD *)(v28 + 8) = sub_19C17C534((void **)(v22 + 24 * v45), (__int128 *)__dst, (uint64_t)&v50);
            v34 = (char *)v50;
            if (!v50)
              goto LABEL_37;
LABEL_36:
            v51 = v34;
            operator delete(v34);
            goto LABEL_37;
          }
          v70 = 0;
          v71 = 0;
          v72 = 0;
          v30 = v27 - v26;
          if (v30)
          {
            if (v30 < 0)
              sub_19C07DA0C();
            v31 = (char *)operator new(v30);
            v32 = &v31[4 * (v30 >> 2)];
            v70 = v31;
            v72 = v32;
            memcpy(v31, v26, v30);
            v71 = v32;
            v73 = v23;
            if ((SHIBYTE(v55) & 0x80000000) == 0)
            {
LABEL_34:
              v33 = *(_OWORD *)__dst;
              *(_QWORD *)(v29 + 16) = v55;
              *(_OWORD *)v29 = v33;
              goto LABEL_42;
            }
          }
          else
          {
            v32 = 0;
            v31 = 0;
            v73 = v23;
            if ((SHIBYTE(v55) & 0x80000000) == 0)
              goto LABEL_34;
          }
          sub_19C07C6E8((_BYTE *)v29, __dst[0], (unint64_t)__dst[1]);
LABEL_42:
          *(_QWORD *)(v29 + 24) = 0;
          *(_QWORD *)(v29 + 32) = 0;
          *(_QWORD *)(v29 + 40) = 0;
          v36 = v32 - v31;
          if (v32 != v31)
          {
            if (v36 < 0)
              sub_19C07DA0C();
            v37 = (char *)operator new(v32 - v31);
            *(_QWORD *)(v29 + 24) = v37;
            *(_QWORD *)(v29 + 32) = v37;
            v38 = &v37[4 * (v36 >> 2)];
            *(_QWORD *)(v29 + 40) = v38;
            memcpy(v37, v31, v32 - v31);
            *(_QWORD *)(v29 + 32) = v38;
          }
          *(_DWORD *)(v29 + 48) = v23;
          if (v31)
            operator delete(v31);
          *(_QWORD *)(v28 + 8) = v29 + 56;
          *(_QWORD *)(v28 + 8) = v29 + 56;
          v34 = (char *)v50;
          if (v50)
            goto LABEL_36;
LABEL_37:
          v35 = v57;
          if (SHIBYTE(v55) < 0)
            operator delete(__dst[0]);
          v19 += v35;
          v18 += 5;
        }
        while (v18 != v49);
        v18 = (void **)v58;
        v11 = v46;
        i = v43;
        v7 = v44;
LABEL_50:
        if (v18)
        {
          v39 = v59;
          v40 = v18;
          if (v59 != v18)
          {
            do
            {
              if (*((char *)v39 - 17) < 0)
                operator delete(*(v39 - 5));
              v39 -= 5;
            }
            while (v39 != v18);
            v40 = v58;
          }
          v59 = v18;
          operator delete(v40);
        }
        if (v11)
          operator delete(v11);
        v7 += 4;
      }
    }
    if (v64[0])
    {
      v64[1] = v64[0];
      operator delete(v64[0]);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    if (v67[0])
    {
      v67[1] = v67[0];
      operator delete(v67[0]);
    }
  }
}

void sub_19C179344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  sub_19C176E10((uint64_t)&a32);
  sub_19C176E10(v32 - 184);
  sub_19C178D94(a16);
  _Unwind_Resume(a1);
}

void sub_19C179368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16)
{
  uint64_t v16;

  sub_19C176E10(v16 - 184);
  sub_19C178D94(a16);
  _Unwind_Resume(a1);
}

void sub_19C179384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16)
{
  sub_19C178D94(a16);
  _Unwind_Resume(a1);
}

void sub_19C1793A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p)
    operator delete(__p);
  sub_19C07AF7C(a1);
}

_QWORD *sub_19C179490(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C07DA0C();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19C179538(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_19C2556A4((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C179558(uint64_t a1)
{
  uint64_t v1;
  __int128 *v2;
  __int128 *v3;
  void *v4;
  void *__p;
  __int128 *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_19C17B16C(&__p, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  v1 = sub_19C17BA38((__int128 *)__p, v7, 0);
  v2 = (__int128 *)__p;
  if (__p)
  {
    v3 = v7;
    v4 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v3 - 17) < 0)
          operator delete(*((void **)v3 - 5));
        v3 = (__int128 *)((char *)v3 - 40);
      }
      while (v3 != v2);
      v4 = __p;
    }
    v7 = v2;
    operator delete(v4);
  }
  return v1;
}

void sub_19C179608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19C17983C(&a9);
  _Unwind_Resume(a1);
}

void sub_19C17961C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  void **v5;
  void **v6;
  int v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int32x4_t *v25;
  int32x4_t *v26;
  void **v27;
  void *v28;
  void *__p[2];
  void *v30;
  void *v31;
  int v32;
  void *v33;
  void **v34;
  uint64_t v35;

  v4 = sub_19C179558(a1);
  sub_19C17D79C((uint64_t)a2, v4);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_19C17B16C(&v33, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  v5 = (void **)v33;
  v6 = v34;
  if (v33 != v34)
  {
    v7 = 0;
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_19C07C6E8(__p, *v5, (unint64_t)v5[1]);
      }
      else
      {
        v8 = *(_OWORD *)v5;
        v30 = v5[2];
        *(_OWORD *)__p = v8;
      }
      v9 = v5[3];
      v32 = *((_DWORD *)v5 + 8);
      v31 = v9;
      v10 = v32;
      if (v32 < 1)
        goto LABEL_15;
      v11 = (int)v31;
      v12 = HIDWORD(v31);
      v13 = *a2;
      v14 = a2[4];
      if (v32 >= 0x10 && v32 + v7 - 1 >= v7 && (unint64_t)(v14 - v13) >= 0x20)
      {
        v15 = v32 & 0xFFFFFFF8;
        v16 = v7 + (v32 & 0xFFFFFFF8);
        v20 = vdupq_n_s32(v31);
        v21 = vdupq_n_s32(HIDWORD(v31));
        v22 = v7;
        v23 = v15;
        do
        {
          v24 = 4 * v22;
          v25 = (int32x4_t *)(v13 + v24);
          *v25 = v20;
          v25[1] = v20;
          v26 = (int32x4_t *)(v14 + v24);
          *v26 = v21;
          v26[1] = v21;
          v22 += 8;
          v23 -= 8;
        }
        while (v23);
        if (v15 == v10)
          goto LABEL_14;
      }
      else
      {
        v15 = 0;
        v16 = v7;
      }
      v17 = v10 - v15;
      v18 = v7 + v15 + 1;
      do
      {
        v19 = 4 * v16;
        *(_DWORD *)(v13 + v19) = v11;
        *(_DWORD *)(v14 + v19) = v12;
        v16 = v18++;
        --v17;
      }
      while (v17);
LABEL_14:
      LODWORD(v10) = v32;
LABEL_15:
      if (SHIBYTE(v30) < 0)
        operator delete(__p[0]);
      v7 += v10;
      v5 += 5;
      if (v5 == v6)
      {
        v5 = (void **)v33;
        break;
      }
    }
  }
  if (v5)
  {
    v27 = v34;
    v28 = v5;
    if (v34 != v5)
    {
      do
      {
        if (*((char *)v27 - 17) < 0)
          operator delete(*(v27 - 5));
        v27 -= 5;
      }
      while (v27 != v5);
      v28 = v33;
    }
    v34 = v5;
    operator delete(v28);
  }
}

void sub_19C17980C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C176E10(v1);
  _Unwind_Resume(a1);
}

void sub_19C179820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_19C17983C((void **)va);
  sub_19C176E10(v6);
  _Unwind_Resume(a1);
}

void **sub_19C17983C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0)
          operator delete(*(v3 - 5));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_19C1798AC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  double v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  int v24;
  int64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  signed int v31;
  _OWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  _OWORD *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  __int128 *v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  void *v52;
  void *v53;
  char *v54;
  int v55;
  void *__p[2];
  char *v57;
  signed int v58;
  _OWORD *v59;
  char *v60;
  char *v61;
  vDSP_Length __N;
  double __B;
  char *v64;
  _BYTE *v65;
  uint64_t v66;
  int v67;
  double __C;

  v4 = sub_19C17ACE4((uint64_t)a1);
  *(_QWORD *)(v4 + 2528) = 0;
  *(_OWORD *)(v4 + 2512) = 0u;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v6 = *a2;
  v5 = (uint64_t *)a2[1];
  v7 = (uint64_t)v5 - *a2;
  v67 = (unint64_t)v7 >> 3;
  if (v67)
  {
    sub_19C17C9D8((uint64_t)&v64, (int)(v7 >> 3));
    v6 = *a2;
    v5 = (uint64_t *)a2[1];
  }
  if ((uint64_t *)v6 != v5)
  {
    v8 = 0;
    v9 = v64;
    v10 = (unint64_t)v5 - v6 - 8;
    if (v10 < 0x18 || (unint64_t)&v64[-v6] < 0x20)
    {
      v12 = (uint64_t *)v6;
    }
    else
    {
      v11 = (v10 >> 3) + 1;
      v8 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      v12 = (uint64_t *)(v6 + 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL));
      v13 = v64 + 16;
      v14 = (__int128 *)(v6 + 16);
      v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v11 == v8)
        goto LABEL_13;
    }
    v17 = &v9[8 * v8];
    do
    {
      v18 = *v12++;
      *(_QWORD *)v17 = v18;
      v17 += 8;
    }
    while (v12 != v5);
  }
LABEL_13:
  v19 = sub_19C179E6C((uint64_t)&v64);
  __B = v19 + v19 + 0.0002;
  v20 = v64;
  v21 = v65 - v64;
  if (v65 == v64)
  {
    v23 = 0;
    v22 = 0;
  }
  else
  {
    if (v21 < 0)
      sub_19C07DA0C();
    v22 = (char *)operator new(v65 - v64);
    v23 = &v22[8 * (v21 >> 3)];
    memcpy(v22, v20, v21);
  }
  v24 = v67;
  __C = 0.0;
  vDSP_meanvD((const double *)v20, 1, &__C, v67);
  __C = -__C;
  vDSP_vsaddD((const double *)v22, 1, &__C, (double *)v22, 1, v24);
  v25 = v23 - v22;
  if (v25)
  {
    if (v25 < 0)
      sub_19C07DA0C();
    v26 = (char *)operator new(v25);
    v27 = &v26[8 * (v25 >> 3)];
    memcpy(v26, v22, v25);
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  vDSP_vsdivD((const double *)v26, 1, &__B, (double *)v26, 1, v24);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v28 = v27 - v26;
  if (v27 != v26)
  {
    if (v28 < 0)
      sub_19C07DA0C();
    v29 = (char *)operator new(v27 - v26);
    v30 = &v29[8 * (v28 >> 3)];
    v52 = v29;
    v54 = v30;
    memcpy(v29, v26, v27 - v26);
    v53 = v30;
  }
  v55 = v24;
  sub_19C17A028((uint64_t)&v52, (uint64_t)__p);
  v31 = v58;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  if (v58)
  {
    if (v58 < 0)
      sub_19C07DA0C();
    v32 = operator new(8 * v58);
    v59 = v32;
    v61 = (char *)v32 + 8 * v31;
    bzero(v32, 8 * v31);
    v33 = 0;
    v60 = (char *)v32 + 8 * v31;
    LODWORD(__N) = v31;
    v34 = __p[0];
    if (v31 < 4)
      goto LABEL_65;
    if ((unint64_t)((char *)v32 - (char *)__p[0]) < 0x20)
      goto LABEL_65;
    v35 = 0;
    v33 = v31 & 0xFFFFFFFFFFFFFFFCLL;
    v36 = v33;
    do
    {
      v37 = *(_OWORD *)&v34[v35 / 8 + 2];
      v38 = &v32[v35 / 0x10];
      *v38 = *(_OWORD *)&v34[v35 / 8];
      v38[1] = v37;
      v35 += 32;
      v36 -= 4;
    }
    while (v36);
    if (v33 != v31)
    {
LABEL_65:
      do
      {
        *((_QWORD *)v32 + v33) = v34[v33];
        ++v33;
      }
      while (v31 != v33);
    }
  }
  else
  {
    v32 = 0;
    LODWORD(__N) = 0;
    v34 = __p[0];
    if (!__p[0])
      goto LABEL_35;
  }
  __p[1] = v34;
  operator delete(v34);
LABEL_35:
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (v26)
    operator delete(v26);
  if (v22)
    operator delete(v22);
  __p[0] = 0;
  vDSP_sveD((const double *)v32, 1, (double *)__p, (int)__N);
  v52 = __p[0];
  vDSP_vsdivD((const double *)v32, 1, (const double *)&v52, (double *)v32, 1, (int)__N);
  v39 = (int)__N;
  __p[1] = 0;
  v57 = 0;
  __p[0] = 0;
  if ((_DWORD)__N)
  {
    if ((__N & 0x80000000) != 0)
      sub_19C07DA0C();
    v40 = (char *)operator new(8 * (int)__N);
    v41 = 0;
    __p[0] = v40;
    v57 = &v40[8 * v39];
    if (v39 < 4)
      goto LABEL_48;
    if ((unint64_t)(v40 - (char *)v32) < 0x20)
      goto LABEL_48;
    v41 = v39 & 0xFFFFFFFFFFFFFFFCLL;
    v42 = &v40[8 * (v39 & 0xFFFFFFFFFFFFFFFCLL)];
    v43 = v32 + 1;
    v44 = v40 + 16;
    v45 = v39 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *v43;
      *(v44 - 1) = *(v43 - 1);
      *v44 = v46;
      v43 += 2;
      v44 += 2;
      v45 -= 4;
    }
    while (v45);
    v40 += 8 * (v39 & 0xFFFFFFFFFFFFFFFCLL);
    if (v41 != v39)
    {
LABEL_48:
      v47 = v39 - v41;
      v48 = (uint64_t *)v32 + v41;
      v42 = v40;
      do
      {
        v49 = *v48++;
        *(_QWORD *)v42 = v49;
        v42 += 8;
        --v47;
      }
      while (v47);
    }
    __p[1] = v42;
  }
  sub_19C17CB74((double **)__p);
  v50 = (void *)a1[314];
  if (v50)
  {
    a1[315] = v50;
    operator delete(v50);
    a1[314] = 0;
    a1[315] = 0;
    a1[316] = 0;
  }
  *((_OWORD *)a1 + 157) = *(_OWORD *)__p;
  a1[316] = v57;
  if (v32)
  {
    v60 = (char *)v32;
    operator delete(v32);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  return a1;
}

void sub_19C179D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 104);
  if (v29)
  {
    *(_QWORD *)(v27 - 96) = v29;
    operator delete(v29);
  }
  sub_19C17A108(v26);
  _Unwind_Resume(a1);
}

double sub_19C179E6C(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  int64_t v4;
  char *v5;
  char *v6;
  int v7;
  size_t v8;
  void *v9;
  double v10;
  double __C;

  v3 = *(const void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = v2 - *(_QWORD *)a1;
  if (v2 == *(_QWORD *)a1)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    if (v4 < 0)
      sub_19C07DA0C();
    v5 = (char *)operator new(v2 - *(_QWORD *)a1);
    v6 = &v5[8 * (v4 >> 3)];
    memcpy(v5, v3, v4);
  }
  v7 = *(_DWORD *)(a1 + 24);
  __C = 0.0;
  vDSP_meanvD((const double *)v3, 1, &__C, v7);
  __C = -__C;
  vDSP_vsaddD((const double *)v5, 1, &__C, (double *)v5, 1, v7);
  v8 = v6 - v5;
  if (v6 == v5)
  {
    v9 = 0;
  }
  else
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_19C07DA0C();
    v9 = operator new(v6 - v5);
    memcpy(v9, v5, v8);
  }
  __C = 0.0;
  vDSP_rmsqvD((const double *)v9, 1, &__C, v7);
  v10 = __C;
  if (v9)
    operator delete(v9);
  if (v5)
    operator delete(v5);
  return v10;
}

void sub_19C179FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  void *v16;

  if (v16)
    operator delete(v16);
  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_19C17A028(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  char *v5;
  int v6;

  v4 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (v4)
  {
    if (v4 < 0)
      sub_19C07DA0C();
    v5 = (char *)operator new(8 * v4);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = &v5[8 * v4];
    bzero(v5, 8 * v4);
    *(_QWORD *)(a2 + 8) = &v5[8 * v4];
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a2 + 24) = v4;
  v6 = v4;
  vvexp((double *)v5, *(const double **)a1, &v6);
}

void sub_19C17A0D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C17A0EC(void *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_19C07AF7C(a1);
}

uint64_t sub_19C17A108(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 2512);
  if (v2)
  {
    *(_QWORD *)(a1 + 2520) = v2;
    operator delete(v2);
  }
  std::random_device::~random_device((std::random_device *)(a1 + 2504));
  return a1;
}

void sub_19C17A144(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void **v14;
  void **v15;
  void *v16;
  void **v17;
  void **v18;
  void *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  char *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  void **v33;
  void **v34;
  void **v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  void *v45;
  char *v46;
  char *v47;
  char *v48;
  void *v49;
  void *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56[12];
  void *v57;
  void **v58;
  uint64_t v59;
  void *__p;
  void **v61;
  uint64_t v62;
  void **v63;
  void **v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  void **v69;
  uint64_t v70;
  void **v71;
  void **v72;

  v66 = 0;
  v67 = 0;
  v65 = 0;
  sub_19C17AF88(&v65, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  v68 = 0;
  v69 = 0;
  v70 = 0;
  sub_19C17B16C(&v68, a1[3], a1[4], 0xCCCCCCCCCCCCCCCDLL * ((a1[4] - a1[3]) >> 3));
  sub_19C178340((uint64_t *)&v65, a2, a3, (uint64_t *)&v71);
  v8 = v68;
  if (v68)
  {
    v9 = v69;
    v10 = v68;
    if (v69 != v68)
    {
      do
      {
        if (*((char *)v9 - 17) < 0)
          operator delete(*(v9 - 5));
        v9 -= 5;
      }
      while (v9 != v8);
      v10 = v68;
    }
    v69 = v8;
    operator delete(v10);
  }
  v11 = (uint64_t)v65;
  if (v65)
  {
    v12 = v66;
    v13 = v65;
    if ((void *)v66 != v65)
    {
      do
      {
        if (*(char *)(v12 - 25) < 0)
          operator delete(*(void **)(v12 - 48));
        v12 -= 48;
      }
      while (v12 != v11);
      v13 = v65;
    }
    v66 = v11;
    operator delete(v13);
  }
  v58 = 0;
  v59 = 0;
  v57 = 0;
  sub_19C17AF88(&v57, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  __p = 0;
  v61 = 0;
  v62 = 0;
  sub_19C17B16C(&__p, a1[3], a1[4], 0xCCCCCCCCCCCCCCCDLL * ((a1[4] - a1[3]) >> 3));
  sub_19C178E54((uint64_t)&v57, a2, a3, (uint64_t *)&v63);
  v14 = (void **)__p;
  if (__p)
  {
    v15 = v61;
    v16 = __p;
    if (v61 != __p)
    {
      do
      {
        if (*((char *)v15 - 17) < 0)
          operator delete(*(v15 - 5));
        v15 -= 5;
      }
      while (v15 != v14);
      v16 = __p;
    }
    v61 = v14;
    operator delete(v16);
  }
  v17 = (void **)v57;
  if (v57)
  {
    v18 = v58;
    v19 = v57;
    if (v58 != v57)
    {
      do
      {
        if (*((char *)v18 - 25) < 0)
          operator delete(*(v18 - 6));
        v18 -= 6;
      }
      while (v18 != v17);
      v19 = v57;
    }
    v58 = v17;
    operator delete(v19);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if ((_DWORD)a3)
  {
    if ((a3 & 0x80000000) != 0)
      sub_19C07DA0C();
    v20 = (char *)operator new(96 * (int)a3);
    *a4 = v20;
    a4[1] = v20;
    v21 = &v20[96 * (int)a3];
    a4[2] = v21;
    do
    {
      *((_OWORD *)v20 + 2) = 0uLL;
      *((_OWORD *)v20 + 3) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v20 + 1) = 0uLL;
      *((_QWORD *)v20 + 6) = v20 + 56;
      *((_QWORD *)v20 + 11) = 0;
      *((_QWORD *)v20 + 10) = 0;
      *((_QWORD *)v20 + 8) = 0;
      *((_QWORD *)v20 + 9) = v20 + 80;
      v20 += 96;
    }
    while (v20 != v21);
    a4[1] = v21;
    if ((int)a3 >= 1)
    {
      v22 = 0;
      do
      {
        v24 = 3 * (int)v22;
        v54 = 0;
        v55 = 0;
        v53 = 0;
        sub_19C17BB78(&v53, (uint64_t)v71[v24], (uint64_t)v71[v24 + 1], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v71[v24 + 1] - (_BYTE *)v71[v24]) >> 3));
        v51 = 0;
        v52 = 0;
        v50 = 0;
        sub_19C17BE1C(&v50, (uint64_t)v63[v24], (uint64_t)v63[v24 + 1], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v63[v24 + 1] - (_BYTE *)v63[v24]) >> 3));
        sub_19C17B350(v56, (uint64_t *)&v53, (uint64_t *)&v50);
        sub_19C17A814((char **)&(*a4)[96 * (int)v22], (uint64_t)v56);
        sub_19C17B808((char **)v56);
        v25 = (char *)v50;
        if (v50)
        {
          v26 = v51;
          v27 = v50;
          if (v51 != v50)
          {
            do
            {
              v28 = (void *)*((_QWORD *)v26 - 4);
              if (v28)
              {
                *((_QWORD *)v26 - 3) = v28;
                operator delete(v28);
              }
              if (*(v26 - 33) < 0)
                operator delete(*((void **)v26 - 7));
              v26 -= 56;
            }
            while (v26 != v25);
            v27 = v50;
          }
          v51 = v25;
          operator delete(v27);
        }
        v29 = (char *)v53;
        if (v53)
        {
          v30 = v54;
          v23 = v53;
          if (v54 != v53)
          {
            do
            {
              v31 = (void *)*((_QWORD *)v30 - 4);
              if (v31)
              {
                *((_QWORD *)v30 - 3) = v31;
                operator delete(v31);
              }
              if (*(v30 - 33) < 0)
                operator delete(*((void **)v30 - 7));
              v30 -= 56;
            }
            while (v30 != v29);
            v23 = v53;
          }
          v54 = v29;
          operator delete(v23);
        }
        ++v22;
      }
      while (v22 != a3);
    }
  }
  v32 = (uint64_t)v63;
  if (v63)
  {
    v33 = v64;
    v34 = v63;
    if (v64 != v63)
    {
      v35 = v64;
      do
      {
        v38 = (char *)*(v35 - 3);
        v35 -= 3;
        v37 = v38;
        if (v38)
        {
          v39 = (char *)*(v33 - 2);
          v36 = v37;
          if (v39 != v37)
          {
            do
            {
              v40 = (void *)*((_QWORD *)v39 - 4);
              if (v40)
              {
                *((_QWORD *)v39 - 3) = v40;
                operator delete(v40);
              }
              if (*(v39 - 33) < 0)
                operator delete(*((void **)v39 - 7));
              v39 -= 56;
            }
            while (v39 != v37);
            v36 = *v35;
          }
          *(v33 - 2) = v37;
          operator delete(v36);
        }
        v33 = v35;
      }
      while (v35 != (void **)v32);
      v34 = v63;
    }
    v64 = (void **)v32;
    operator delete(v34);
  }
  v41 = (uint64_t)v71;
  if (v71)
  {
    v42 = v72;
    v43 = v71;
    if (v72 != v71)
    {
      v44 = v72;
      do
      {
        v47 = (char *)*(v44 - 3);
        v44 -= 3;
        v46 = v47;
        if (v47)
        {
          v48 = (char *)*(v42 - 2);
          v45 = v46;
          if (v48 != v46)
          {
            do
            {
              v49 = (void *)*((_QWORD *)v48 - 4);
              if (v49)
              {
                *((_QWORD *)v48 - 3) = v49;
                operator delete(v49);
              }
              if (*(v48 - 33) < 0)
                operator delete(*((void **)v48 - 7));
              v48 -= 56;
            }
            while (v48 != v46);
            v45 = *v44;
          }
          *(v42 - 2) = v46;
          operator delete(v45);
        }
        v42 = v44;
      }
      while (v44 != (void **)v41);
      v43 = v71;
    }
    v72 = (void **)v41;
    operator delete(v43);
  }
}

void sub_19C17A688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;

  sub_19C17A75C(&a27);
  sub_19C178D94((void ***)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_19C17A6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  if (a27)
  {
    sub_19C255788((uint64_t)&a27, a27);
    sub_19C178D94((void ***)(v27 - 104));
    _Unwind_Resume(a1);
  }
  sub_19C178D94((void ***)(v27 - 104));
  _Unwind_Resume(a1);
}

void **sub_19C17A75C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;

  v2 = (void **)a1[3];
  if (v2)
  {
    v3 = (void **)a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0)
          operator delete(*(v3 - 5));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v5 = (void **)*a1;
  if (*a1)
  {
    v6 = (void **)a1[1];
    v7 = *a1;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 25) < 0)
          operator delete(*(v6 - 6));
        v6 -= 6;
      }
      while (v6 != v5);
      v7 = *a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

char **sub_19C17A814(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void **v8;
  char *v9;
  char *v10;
  char *v11;
  void *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        if (v7)
        {
          *((_QWORD *)v5 - 3) = v7;
          operator delete(v7);
        }
        if (*(v5 - 33) < 0)
          operator delete(*((void **)v5 - 7));
        v5 -= 56;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v8 = (void **)(a1 + 3);
  v9 = a1[3];
  if (v9)
  {
    v10 = a1[4];
    v11 = a1[3];
    if (v10 != v9)
    {
      do
      {
        v12 = (void *)*((_QWORD *)v10 - 4);
        if (v12)
        {
          *((_QWORD *)v10 - 3) = v12;
          operator delete(v12);
        }
        if (*(v10 - 33) < 0)
          operator delete(*((void **)v10 - 7));
        v10 -= 56;
      }
      while (v10 != v9);
      v11 = (char *)*v8;
    }
    a1[4] = v9;
    operator delete(v11);
    *v8 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(char **)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v13 = (char *)(a1 + 7);
  sub_19C098FBC((uint64_t)(a1 + 6), a1[7]);
  a1[6] = *(char **)(a2 + 48);
  v14 = (_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 56);
  a1[7] = (char *)v15;
  v16 = *(char **)(a2 + 64);
  a1[8] = v16;
  if (v16)
  {
    *(_QWORD *)(v15 + 16) = v13;
    *(_QWORD *)(a2 + 48) = v14;
    *v14 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v13;
  }
  v17 = (char *)(a1 + 10);
  sub_19C098FBC((uint64_t)(a1 + 9), a1[10]);
  a1[9] = *(char **)(a2 + 72);
  v18 = (_QWORD *)(a2 + 80);
  v19 = *(_QWORD *)(a2 + 80);
  a1[10] = (char *)v19;
  v20 = *(char **)(a2 + 88);
  a1[11] = v20;
  if (v20)
  {
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(a2 + 72) = v18;
    *v18 = 0;
    *(_QWORD *)(a2 + 88) = 0;
  }
  else
  {
    a1[9] = v17;
  }
  return a1;
}

void **sub_19C17A9E4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        if (*(v3 - 33) < 0)
          operator delete(*((void **)v3 - 7));
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_19C17AA64(void **a1)
{
  char **v2;
  char **v3;
  void *v4;

  v2 = (char **)*a1;
  if (*a1)
  {
    v3 = (char **)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_19C17B808(v3 - 12);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19C17AABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_19C07DA0C();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(_BYTE **)(a2 + 32);
  v10 = *(_BYTE **)(a2 + 40);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_19C07DA0C();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_19C17AB9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C17ABD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_19C07DA0C();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = *(_BYTE **)(a2 + 32);
  v10 = *(_BYTE **)(a2 + 40);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_19C07DA0C();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_19C17ACB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C17ACE4(uint64_t a1)
{
  unsigned int v2;
  uint64_t i;
  unsigned int v4;
  uint64_t j;
  std::string __token;

  v2 = 5489;
  *(_DWORD *)a1 = 5489;
  for (i = 1; i != 624; ++i)
  {
    v2 = i + 1812433253 * (v2 ^ (v2 >> 30));
    *(_DWORD *)(a1 + 4 * i) = v2;
  }
  *(_QWORD *)(a1 + 2496) = 0;
  *((_BYTE *)&__token.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__token, "/dev/urandom");
  std::random_device::random_device((std::random_device *)(a1 + 2504), &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  v4 = MEMORY[0x1A1AD1B48](a1 + 2504);
  *(_DWORD *)a1 = v4;
  for (j = 1; j != 624; ++j)
  {
    v4 = j + 1812433253 * (v4 ^ (v4 >> 30));
    *(_DWORD *)(a1 + 4 * j) = v4;
  }
  *(_QWORD *)(a1 + 2496) = 0;
  return a1;
}

void sub_19C17ADB8(_Unwind_Exception *a1)
{
  std::random_device *v1;

  std::random_device::~random_device(v1);
  _Unwind_Resume(a1);
}

void sub_19C17ADCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C17ADE8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;

  result = a3[1];
  if ((_DWORD)result != *a3)
  {
    v4 = result - *a3 + 1;
    if ((_DWORD)result - *a3 == -1)
    {
      v16 = *(_QWORD *)(a2 + 2496);
      v17 = (v16 + 1) % 0x270uLL;
      v18 = *(_DWORD *)(a2 + 4 * ((v16 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v16) = v18;
      *(_QWORD *)(a2 + 2496) = v17;
      v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
      return (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
    }
    else
    {
      v5 = __clz(v4);
      v6 = 31;
      if (((v4 << v5) & 0x7FFFFFFF) != 0)
        v6 = 32;
      v7 = v6 - v5;
      v8 = v7 >> 5;
      if ((v7 & 0x1F) != 0)
        ++v8;
      if (v8 <= v7)
        v9 = 0xFFFFFFFF >> -(v7 / v8);
      else
        v9 = 0;
      v10 = *(_QWORD *)(a2 + 2496);
      do
      {
        v11 = 4 * v10;
        v12 = v10 + 397;
        v10 = (v10 + 1) % 0x270;
        v13 = *(_DWORD *)(a2 + 4 * (v12 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v10) & 0x7FFFFFFE | *(_DWORD *)(a2 + v11) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v10) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(a2 + v11) = v13;
        v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
        v15 = ((v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18)) & v9;
      }
      while (v15 >= v4);
      *(_QWORD *)(a2 + 2496) = v10;
      return *a3 + v15;
    }
  }
  return result;
}

_QWORD *sub_19C17AF88(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x555555555555556)
      sub_19C07DA0C();
    result = operator new(48 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[6 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v11 = &v8[v9 / 8];
        v12 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = sub_19C07C6E8(&v8[v9 / 8], *(void **)v12, *(_QWORD *)(v12 + 8));
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          v11[2] = *(_QWORD *)(v12 + 16);
        }
        v10 = &v8[v9 / 8];
        *(_OWORD *)(v10 + 3) = *(_OWORD *)(a2 + v9 + 24);
        *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 + v9 + 40);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19C17B084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C17B0D8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_19C17B0D8(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 25) < 0)
            operator delete(*(v4 - 6));
          v4 -= 6;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_19C17B16C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      sub_19C07DA0C();
    result = operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v11 = &v8[v9 / 8];
        v12 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = sub_19C07C6E8(&v8[v9 / 8], *(void **)v12, *(_QWORD *)(v12 + 8));
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          v11[2] = *(_QWORD *)(v12 + 16);
        }
        v10 = &v8[v9 / 8];
        v10[3] = *(_QWORD *)(a2 + v9 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(a2 + v9 + 32);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19C17B268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C17B2BC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_19C17B2BC(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 17) < 0)
            operator delete(*(v4 - 5));
          v4 -= 5;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t **sub_19C17B350(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  void *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  void *v20;
  void *v22[2];
  uint64_t v23;
  void *__dst[2];
  uint64_t v25;
  void *__p;
  void *v27;
  char *v28;
  int v29;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_19C17BB78(a1, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_19C17BE1C(a1 + 3, *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3));
  a1[7] = 0;
  a1[6] = (uint64_t *)(a1 + 7);
  a1[8] = 0;
  a1[10] = 0;
  a1[9] = (uint64_t *)(a1 + 10);
  a1[11] = 0;
  v5 = (__int128 *)*a1;
  v6 = (__int128 *)a1[1];
  if (*a1 != (uint64_t *)v6)
  {
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_19C07C6E8(__dst, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        v25 = *((_QWORD *)v5 + 2);
        *(_OWORD *)__dst = v7;
      }
      __p = 0;
      v27 = 0;
      v28 = 0;
      v9 = (_BYTE *)*((_QWORD *)v5 + 3);
      v8 = (_BYTE *)*((_QWORD *)v5 + 4);
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0)
          sub_19C07DA0C();
        __p = operator new(v8 - v9);
        v27 = __p;
        v11 = (char *)__p + 8 * (v10 >> 3);
        v28 = v11;
        memcpy(__p, v9, v10);
        v27 = v11;
      }
      v29 = *((_DWORD *)v5 + 12);
      if (SHIBYTE(v25) < 0)
      {
        sub_19C07C6E8(v22, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)v22 = *(_OWORD *)__dst;
        v23 = v25;
      }
      sub_19C17B698(a1 + 6, (const void **)v22, (uint64_t)v22);
      if (SHIBYTE(v23) < 0)
        break;
      v12 = __p;
      if (__p)
        goto LABEL_15;
LABEL_16:
      if (SHIBYTE(v25) < 0)
        operator delete(__dst[0]);
      v5 = (__int128 *)((char *)v5 + 56);
      if (v5 == v6)
        goto LABEL_20;
    }
    operator delete(v22[0]);
    v12 = __p;
    if (!__p)
      goto LABEL_16;
LABEL_15:
    v27 = v12;
    operator delete(v12);
    goto LABEL_16;
  }
LABEL_20:
  v13 = (__int128 *)a1[3];
  v14 = (__int128 *)a1[4];
  if (v13 != v14)
  {
    while (1)
    {
      if (*((char *)v13 + 23) < 0)
      {
        sub_19C07C6E8(__dst, *(void **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v15 = *v13;
        v25 = *((_QWORD *)v13 + 2);
        *(_OWORD *)__dst = v15;
      }
      __p = 0;
      v27 = 0;
      v28 = 0;
      v17 = (_BYTE *)*((_QWORD *)v13 + 3);
      v16 = (_BYTE *)*((_QWORD *)v13 + 4);
      v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0)
          sub_19C07DA0C();
        __p = operator new(v16 - v17);
        v27 = __p;
        v19 = (char *)__p + 4 * (v18 >> 2);
        v28 = v19;
        memcpy(__p, v17, v18);
        v27 = v19;
      }
      v29 = *((_DWORD *)v13 + 12);
      if (SHIBYTE(v25) < 0)
      {
        sub_19C07C6E8(v22, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)v22 = *(_OWORD *)__dst;
        v23 = v25;
      }
      sub_19C17B698(a1 + 9, (const void **)v22, (uint64_t)v22);
      if (SHIBYTE(v23) < 0)
        break;
      v20 = __p;
      if (__p)
        goto LABEL_34;
LABEL_35:
      if (SHIBYTE(v25) < 0)
        operator delete(__dst[0]);
      v13 = (__int128 *)((char *)v13 + 56);
      if (v13 == v14)
        return a1;
    }
    operator delete(v22[0]);
    v20 = __p;
    if (!__p)
      goto LABEL_35;
LABEL_34:
    v27 = v20;
    operator delete(v20);
    goto LABEL_35;
  }
  return a1;
}

void sub_19C17B644(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  sub_19C07AF7C(a1);
}

uint64_t **sub_19C17B698(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_27;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_27:
    v22 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    v10[6] = *(uint64_t **)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    *v6 = (uint64_t *)v10;
    v23 = (uint64_t *)**a1;
    v24 = (uint64_t *)v10;
    if (v23)
    {
      *a1 = v23;
      v24 = *v6;
    }
    sub_19C07CC40(a1[1], v24);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

char **sub_19C17B808(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;

  sub_19C098FBC((uint64_t)(a1 + 9), a1[10]);
  sub_19C098FBC((uint64_t)(a1 + 6), a1[7]);
  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        if (*(v3 - 33) < 0)
          operator delete(*((void **)v3 - 7));
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v6 = *a1;
  if (*a1)
  {
    v7 = a1[1];
    v8 = *a1;
    if (v7 != v6)
    {
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 4);
        if (v9)
        {
          *((_QWORD *)v7 - 3) = v9;
          operator delete(v9);
        }
        if (*(v7 - 33) < 0)
          operator delete(*((void **)v7 - 7));
        v7 -= 56;
      }
      while (v7 != v6);
      v8 = *a1;
    }
    a1[1] = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_19C17B8F8(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  void *v11[2];
  uint64_t v12;
  __int128 v13;
  int v14;
  void *__p[2];
  uint64_t v16;
  __int128 v17;
  int v18;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 3)
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19C07C6E8(v11, *(void **)i, *((_QWORD *)i + 1));
        v8 = *(__int128 *)((char *)i + 24);
        v14 = *((_DWORD *)i + 10);
        v13 = v8;
        if ((SHIBYTE(v12) & 0x80000000) == 0)
        {
LABEL_6:
          *(_OWORD *)__p = *(_OWORD *)v11;
          v16 = v12;
          goto LABEL_9;
        }
      }
      else
      {
        v6 = *i;
        v12 = *((_QWORD *)i + 2);
        *(_OWORD *)v11 = v6;
        v7 = *(__int128 *)((char *)i + 24);
        v14 = *((_DWORD *)i + 10);
        v13 = v7;
        if ((SHIBYTE(v12) & 0x80000000) == 0)
          goto LABEL_6;
      }
      sub_19C07C6E8(__p, v11[0], (unint64_t)v11[1]);
LABEL_9:
      v18 = v14;
      v17 = v13;
      v9 = v14;
      if (SHIBYTE(v16) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v12) < 0)
LABEL_13:
          operator delete(v11[0]);
      }
      else if (SHIBYTE(v12) < 0)
      {
        goto LABEL_13;
      }
      a3 = (v9 + a3);
    }
  }
  return a3;
}

void sub_19C17BA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C17BA38(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *i;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i = (__int128 *)((char *)i + 40))
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19C07C6E8(v11, *(void **)i, *((_QWORD *)i + 1));
        v8 = *((_QWORD *)i + 3);
        v14 = *((_DWORD *)i + 8);
        v13 = v8;
        if ((SHIBYTE(v12) & 0x80000000) == 0)
        {
LABEL_6:
          *(_OWORD *)__p = *(_OWORD *)v11;
          v16 = v12;
          goto LABEL_9;
        }
      }
      else
      {
        v6 = *i;
        v12 = *((_QWORD *)i + 2);
        *(_OWORD *)v11 = v6;
        v7 = *((_QWORD *)i + 3);
        v14 = *((_DWORD *)i + 8);
        v13 = v7;
        if ((SHIBYTE(v12) & 0x80000000) == 0)
          goto LABEL_6;
      }
      sub_19C07C6E8(__p, v11[0], (unint64_t)v11[1]);
LABEL_9:
      v18 = v14;
      v17 = v13;
      v9 = v14;
      if (SHIBYTE(v16) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v12) < 0)
LABEL_13:
          operator delete(v11[0]);
      }
      else if (SHIBYTE(v12) < 0)
      {
        goto LABEL_13;
      }
      a3 = (v9 + a3);
    }
  }
  return a3;
}

void sub_19C17BB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C17BB78(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      sub_19C07DA0C();
    v8 = (char *)operator new(56 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        sub_19C17BD30((_DWORD)a1 + 16, &v8[v9], (__int128 *)(a2 + v9));
        v9 += 56;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_19C17BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C17BC8C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_19C17BC8C(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 4);
          if (v6)
          {
            *((_QWORD *)v4 - 3) = v6;
            operator delete(v6);
          }
          if (*(v4 - 33) < 0)
            operator delete(*((void **)v4 - 7));
          v4 -= 56;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_19C17BD30(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a3 + 23) < 0)
  {
    sub_19C07C6E8(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v7 = (_BYTE *)*((_QWORD *)a3 + 3);
    v9 = (_BYTE *)*((_QWORD *)a3 + 4);
    v8 = v9 - v7;
    if (v9 == v7)
      goto LABEL_7;
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v7 = (_BYTE *)*((_QWORD *)a3 + 3);
    v6 = (_BYTE *)*((_QWORD *)a3 + 4);
    v8 = v6 - v7;
    if (v6 == v7)
      goto LABEL_7;
  }
  if (v8 < 0)
    sub_19C07DA0C();
  v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[8 * (v8 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
LABEL_7:
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
}

void sub_19C17BDF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19C255814((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19C17BE1C(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      sub_19C07DA0C();
    v8 = (char *)operator new(56 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        sub_19C17BF30((_DWORD)a1 + 16, &v8[v9], (__int128 *)(a2 + v9));
        v9 += 56;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_19C17BEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C17BC8C(&a9);
  _Unwind_Resume(a1);
}

void sub_19C17BF30(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a3 + 23) < 0)
  {
    sub_19C07C6E8(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v7 = (_BYTE *)*((_QWORD *)a3 + 3);
    v9 = (_BYTE *)*((_QWORD *)a3 + 4);
    v8 = v9 - v7;
    if (v9 == v7)
      goto LABEL_7;
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v7 = (_BYTE *)*((_QWORD *)a3 + 3);
    v6 = (_BYTE *)*((_QWORD *)a3 + 4);
    v8 = v6 - v7;
    if (v6 == v7)
      goto LABEL_7;
  }
  if (v8 < 0)
    sub_19C07DA0C();
  v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[4 * (v8 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
LABEL_7:
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
}

void sub_19C17BFF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19C255814((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C17C01C(void **a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  char *v17;
  char *v18;

  v4 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_19C07DA0C();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v8 = 0x492492492492492;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x492492492492492)
      sub_19C07C7FC();
    v9 = (char *)operator new(56 * v8);
  }
  else
  {
    v9 = 0;
  }
  v17 = &v9[56 * v4];
  v18 = &v9[56 * v8];
  sub_19C17C228((_DWORD)a1 + 16, v17, a2, a3);
  v10 = v17 + 56;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    v13 = 0;
    do
    {
      sub_19C17C448((_DWORD)a1 + 16, &v17[v13 - 56], (__int128 *)&v11[v13 - 56]);
      v13 -= 56;
    }
    while (&v11[v13] != v12);
    v14 = (char *)*a1;
    v11 = (char *)a1[1];
    v10 = v17 + 56;
    *a1 = &v17[v13];
    a1[1] = v17 + 56;
    a1[2] = v18;
    if (v11 != v14)
    {
      do
      {
        v15 = (void *)*((_QWORD *)v11 - 4);
        if (v15)
        {
          *((_QWORD *)v11 - 3) = v15;
          operator delete(v15);
        }
        if (*(v11 - 33) < 0)
          operator delete(*((void **)v11 - 7));
        v11 -= 56;
      }
      while (v11 != v14);
      v11 = v14;
    }
  }
  if (v11)
    operator delete(v11);
  return v10;
}

void sub_19C17C1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C17C3D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C17C228(int a1, _QWORD *__dst, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  void *__p;
  void *v13;
  char *v14;
  int v15;

  __p = 0;
  v13 = 0;
  v14 = 0;
  v8 = *(const void **)a4;
  v7 = *(_QWORD *)(a4 + 8);
  v9 = v7 - *(_QWORD *)a4;
  if (v7 != *(_QWORD *)a4)
  {
    if (v9 < 0)
      sub_19C07DA0C();
    v10 = (char *)operator new(v7 - *(_QWORD *)a4);
    v11 = &v10[8 * (v9 >> 3)];
    __p = v10;
    v14 = v11;
    memcpy(v10, v8, v9);
    v13 = v11;
  }
  v15 = *(_DWORD *)(a4 + 24);
  sub_19C17C2F4(__dst, a3, (uint64_t)&__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_19C17C2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C17C2F4(_QWORD *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C07C6E8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  v7 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v8 = v6 - *(_QWORD *)a3;
  if (v6 != *(_QWORD *)a3)
  {
    if (v8 < 0)
      sub_19C07DA0C();
    v9 = (char *)operator new(v6 - *(_QWORD *)a3);
    __dst[3] = v9;
    __dst[4] = v9;
    v10 = &v9[8 * (v8 >> 3)];
    __dst[5] = v10;
    memcpy(v9, v7, v8);
    __dst[4] = v10;
  }
  *((_DWORD *)__dst + 12) = *(_DWORD *)(a3 + 24);
  return __dst;
}

void sub_19C17C3B0(void *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (!*v2)
    sub_19C07AF7C(a1);
  *(_QWORD *)(v1 + 32) = v4;
  operator delete(v4);
  sub_19C07AF7C(a1);
}

uint64_t sub_19C17C3D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C17C448(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a3 + 23) < 0)
  {
    sub_19C07C6E8(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v7 = (_BYTE *)*((_QWORD *)a3 + 3);
    v9 = (_BYTE *)*((_QWORD *)a3 + 4);
    v8 = v9 - v7;
    if (v9 == v7)
      goto LABEL_7;
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v7 = (_BYTE *)*((_QWORD *)a3 + 3);
    v6 = (_BYTE *)*((_QWORD *)a3 + 4);
    v8 = v6 - v7;
    if (v6 == v7)
      goto LABEL_7;
  }
  if (v8 < 0)
    sub_19C07DA0C();
  v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[8 * (v8 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
LABEL_7:
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
}

void sub_19C17C510(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19C255814((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C17C534(void **a1, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  char *v17;
  char *v18;

  v4 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_19C07DA0C();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v8 = 0x492492492492492;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x492492492492492)
      sub_19C07C7FC();
    v9 = (char *)operator new(56 * v8);
  }
  else
  {
    v9 = 0;
  }
  v17 = &v9[56 * v4];
  v18 = &v9[56 * v8];
  sub_19C17C740((_DWORD)a1 + 16, v17, a2, a3);
  v10 = v17 + 56;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    v13 = 0;
    do
    {
      sub_19C17C8EC((_DWORD)a1 + 16, &v17[v13 - 56], (__int128 *)&v11[v13 - 56]);
      v13 -= 56;
    }
    while (&v11[v13] != v12);
    v14 = (char *)*a1;
    v11 = (char *)a1[1];
    v10 = v17 + 56;
    *a1 = &v17[v13];
    a1[1] = v17 + 56;
    a1[2] = v18;
    if (v11 != v14)
    {
      do
      {
        v15 = (void *)*((_QWORD *)v11 - 4);
        if (v15)
        {
          *((_QWORD *)v11 - 3) = v15;
          operator delete(v15);
        }
        if (*(v11 - 33) < 0)
          operator delete(*((void **)v11 - 7));
        v11 -= 56;
      }
      while (v11 != v14);
      v11 = v14;
    }
  }
  if (v11)
    operator delete(v11);
  return v10;
}

void sub_19C17C704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C17C3D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C17C740(int a1, _QWORD *__dst, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  void *__p;
  void *v13;
  char *v14;
  int v15;

  __p = 0;
  v13 = 0;
  v14 = 0;
  v8 = *(const void **)a4;
  v7 = *(_QWORD *)(a4 + 8);
  v9 = v7 - *(_QWORD *)a4;
  if (v7 != *(_QWORD *)a4)
  {
    if (v9 < 0)
      sub_19C07DA0C();
    v10 = (char *)operator new(v7 - *(_QWORD *)a4);
    v11 = &v10[4 * (v9 >> 2)];
    __p = v10;
    v14 = v11;
    memcpy(v10, v8, v9);
    v13 = v11;
  }
  v15 = *(_DWORD *)(a4 + 24);
  sub_19C17C80C(__dst, a3, (uint64_t)&__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_19C17C7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C17C80C(_QWORD *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C07C6E8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  v7 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v8 = v6 - *(_QWORD *)a3;
  if (v6 != *(_QWORD *)a3)
  {
    if (v8 < 0)
      sub_19C07DA0C();
    v9 = (char *)operator new(v6 - *(_QWORD *)a3);
    __dst[3] = v9;
    __dst[4] = v9;
    v10 = &v9[4 * (v8 >> 2)];
    __dst[5] = v10;
    memcpy(v9, v7, v8);
    __dst[4] = v10;
  }
  *((_DWORD *)__dst + 12) = *(_DWORD *)(a3 + 24);
  return __dst;
}

void sub_19C17C8C8(void *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (!*v2)
    sub_19C07AF7C(a1);
  *(_QWORD *)(v1 + 32) = v4;
  operator delete(v4);
  sub_19C07AF7C(a1);
}

void sub_19C17C8EC(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a3 + 23) < 0)
  {
    sub_19C07C6E8(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v7 = (_BYTE *)*((_QWORD *)a3 + 3);
    v9 = (_BYTE *)*((_QWORD *)a3 + 4);
    v8 = v9 - v7;
    if (v9 == v7)
      goto LABEL_7;
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v7 = (_BYTE *)*((_QWORD *)a3 + 3);
    v6 = (_BYTE *)*((_QWORD *)a3 + 4);
    v8 = v6 - v7;
    if (v6 == v7)
      goto LABEL_7;
  }
  if (v8 < 0)
    sub_19C07DA0C();
  v10 = (char *)operator new(v8);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[4 * (v8 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v7, v8);
  __dst[4] = v11;
LABEL_7:
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
}

void sub_19C17C9B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19C255814((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19C17C9D8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_19C07DA0C();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_19C07C7FC();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_19C17CB74(double **a1)
{
  float64x2_t *v1;
  unint64_t v2;
  uint64_t v4;
  double v5;
  double *v6;
  unint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  uint64_t v10;
  float64x2_t v11;
  double v12;
  double *v13;
  unint64_t v14;
  double *v15;
  uint64_t v16;
  float64x2_t v22;
  float64x2_t *v23;
  uint64_t v24;
  float64x2_t v25;
  double v26;
  unint64_t v27;
  size_t v28;
  double *v29;
  uint64_t v30;
  double *v31;
  double *v32;
  double v33;
  double *v34;
  double v35;

  v1 = (float64x2_t *)*a1;
  v2 = (unint64_t)a1[1];
  if (*a1 != (double *)v2)
  {
    v4 = v2 - (_QWORD)v1;
    if (v2 - (unint64_t)v1 < 9)
    {
      a1[1] = (double *)v1;
      sub_19C17CDA4((uint64_t)a1);
      return;
    }
    v5 = 0.0;
    v6 = *a1;
    if ((unint64_t)(v4 - 8) < 0x18)
      goto LABEL_32;
    v7 = ((unint64_t)(v4 - 8) >> 3) + 1;
    v6 = &v1->f64[v7 & 0x3FFFFFFFFFFFFFFCLL];
    v8 = v1 + 1;
    v9 = 0uLL;
    v10 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    v11 = 0uLL;
    do
    {
      v9 = vaddq_f64(v8[-1], v9);
      v11 = vaddq_f64(*v8, v11);
      v8 += 2;
      v10 -= 4;
    }
    while (v10);
    v5 = vaddvq_f64(vaddq_f64(v11, v9));
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      do
      {
        v12 = *v6++;
        v5 = v12 + v5;
      }
      while (v6 != (double *)v2);
    }
    if ((unint64_t)v1 < v2)
    {
      v13 = &v1->f64[1];
      if (v2 > (unint64_t)&v1->f64[1])
        v13 = a1[1];
      v14 = (unint64_t)v13 + ~(unint64_t)v1;
      v15 = *a1;
      if (v14 < 0x18)
        goto LABEL_15;
      v16 = (v14 >> 3) + 1;
      v15 = &v1->f64[v16 & 0x3FFFFFFFFFFFFFFCLL];
      __asm { FMOV            V2.2D, #1.0 }
      v22 = vdivq_f64(_Q2, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0));
      v23 = v1 + 1;
      v24 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = vmulq_f64(*v23, v22);
        v23[-1] = vmulq_f64(v23[-1], v22);
        *v23 = v25;
        v23 += 2;
        v24 -= 4;
      }
      while (v24);
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_15:
        v26 = 1.0 / v5;
        do
        {
          *v15 = *v15 * v26;
          ++v15;
        }
        while ((unint64_t)v15 < v2);
      }
    }
    v27 = (v4 >> 3) - 1;
    if (v4 >> 3 == 1)
    {
      v30 = 0;
      v29 = 0;
      v31 = (double *)(v2 - 8);
      if (v1 == (float64x2_t *)(v2 - 8))
      {
LABEL_26:
        *a1 = v29;
        a1[1] = (double *)v27;
        a1[2] = (double *)v30;
        if (v1)
          operator delete(v1);
        return;
      }
    }
    else
    {
      if (v27 >> 61)
        sub_19C07DA0C();
      v28 = v27;
      v29 = (double *)operator new(8 * v27);
      v30 = (uint64_t)v29 + v4 - 8;
      bzero(v29, v28 * 8);
      v27 = (unint64_t)&v29[v28];
      v31 = (double *)(v2 - 8);
      if (v1 == (float64x2_t *)(v2 - 8))
        goto LABEL_26;
    }
    v32 = &v1->f64[1];
    v33 = v1->f64[0];
    *v29 = v1->f64[0];
    if (&v1->f64[1] != v31)
    {
      v34 = v29 + 1;
      do
      {
        v35 = *v32++;
        v33 = v35 + v33;
        *v34++ = v33;
      }
      while (v32 != v31);
    }
    goto LABEL_26;
  }
}

void sub_19C17CD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C17CDA4(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(_BYTE **)(a1 + 8);
  v2 = *(_BYTE **)a1;
  v3 = (uint64_t)&v1[-*(_QWORD *)a1];
  v4 = v3 >> 3;
  if (v3 >> 3 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3))
  {
    v6 = v1 - v2;
    if (v1 == v2)
    {
      v8 = 8 * v4;
      v9 = 8 * v4;
    }
    else
    {
      if (v3 < 0)
        sub_19C07C7FC();
      v7 = (char *)operator new((size_t)&v1[-*(_QWORD *)a1]);
      v8 = (uint64_t)&v7[8 * v4];
      if ((unint64_t)(v6 - 8) >= 0x58)
      {
        v9 = (uint64_t)&v7[8 * v4];
        if ((unint64_t)(&v1[-v3] - v7) >= 0x20)
        {
          v10 = ((unint64_t)(v6 - 8) >> 3) + 1;
          v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
          v12 = &v1[-v11];
          v9 = v8 - v11;
          v13 = &v7[8 * v4 - 16];
          v14 = (__int128 *)(v1 - 16);
          v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v16 = *v14;
            *((_OWORD *)v13 - 1) = *(v14 - 1);
            *(_OWORD *)v13 = v16;
            v13 -= 32;
            v14 -= 2;
            v15 -= 4;
          }
          while (v15);
          v1 = v12;
          if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_12;
        }
      }
      else
      {
        v9 = (uint64_t)&v7[8 * v4];
      }
      do
      {
        v17 = *((_QWORD *)v1 - 1);
        v1 -= 8;
        *(_QWORD *)(v9 - 8) = v17;
        v9 -= 8;
      }
      while (v1 != v2);
    }
LABEL_12:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    if (v2)
      operator delete(v2);
  }
}

double sub_19C17CECC(uint64_t a1, uint64_t a2, double *a3)
{
  double v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  double v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  double v28;
  double v29;
  double v30;
  double v31;

  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    v5 = *(double *)(a1 + 16);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 2496);
    do
    {
      v7 = (v6 + 1) % 0x270;
      v8 = 4 * v6;
      v9 = *(_DWORD *)(a2 + 4 * ((v6 + 397) % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v7) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v6) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v7) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v8) = v9;
      v10 = ((v9 ^ (v9 >> 11)) << 7) & 0x9D2C5680 ^ v9 ^ (v9 >> 11);
      if (v7 == 623)
        v11 = 0;
      else
        v11 = v7 + 1;
      v12 = (v10 << 15) & 0xEFC60000 ^ v10;
      if (v7 >= 0xE3)
        v13 = -227;
      else
        v13 = 397;
      v14 = (double)(v12 ^ (v12 >> 18));
      v15 = *(_DWORD *)(a2 + 4 * (v13 + v7)) ^ ((*(_DWORD *)(a2 + 4 * v11) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v7) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v11) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v7) = v15;
      v16 = ((v15 ^ (v15 >> 11)) << 7) & 0x9D2C5680 ^ v15 ^ (v15 >> 11);
      v17 = (v11 + 1) % 0x270;
      v18 = 4 * v17;
      v19 = (double)((v16 << 15) & 0xEFC60000 ^ v16 ^ (((v16 << 15) & 0xEFC60000 ^ v16) >> 18));
      v20 = *(_DWORD *)(a2 + 4 * ((v11 + 397) % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v11) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v11) = v20;
      v21 = ((v20 ^ (v20 >> 11)) << 7) & 0x9D2C5680 ^ v20 ^ (v20 >> 11);
      if (v17 == 623)
        v6 = 0;
      else
        v6 = v17 + 1;
      v22 = (v21 << 15) & 0xEFC60000 ^ v21 ^ (((v21 << 15) & 0xEFC60000 ^ v21) >> 18);
      if (v17 >= 0xE3)
        v23 = -227;
      else
        v23 = 397;
      v24 = v14 + v19 * 4294967300.0;
      v25 = (double)v22;
      v26 = *(_DWORD *)(a2 + 4 * (v23 + v17)) ^ ((*(_DWORD *)(a2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v17) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
      v27 = ((v26 ^ (v26 >> 11)) << 7) & 0x9D2C5680 ^ v26 ^ (v26 >> 11);
      v28 = v24 * 1.08420217e-19 + -1.0;
      v29 = (v25 + (double)((v27 << 15) & 0xEFC60000 ^ v27 ^ (((v27 << 15) & 0xEFC60000 ^ v27) >> 18)) * 4294967300.0)
          * 1.08420217e-19
          + -1.0;
      v30 = v28 * v28 + v29 * v29;
      *(_DWORD *)(a2 + v18) = v26;
    }
    while (v30 > 1.0 || v30 == 0.0);
    *(_QWORD *)(a2 + 2496) = v6;
    v31 = sqrt(log(v28 * v28 + v29 * v29) * -2.0 / v30);
    *(double *)(a1 + 16) = v31 * v29;
    *(_BYTE *)(a1 + 24) = 1;
    v5 = v31 * v28;
  }
  return *a3 + a3[1] * v5;
}

_QWORD *sub_19C17D174(_QWORD *a1, unint64_t a2, int a3, uint64_t a4, int a5)
{
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;

  v6 = HIDWORD(a2);
  v7 = HIDWORD(a4) * a5 + a4;
  v8 = a2 + HIDWORD(a2) * a3;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v8 != v7)
  {
    v9 = v7 - v8;
    v10 = -1;
    do
    {
      v11 = v10++;
      v9 -= HIDWORD(a2);
    }
    while (v9);
    v12 = v11 + 2;
    if (v11 != -2)
    {
      if (v12 >> 62)
        sub_19C07DA0C();
      v13 = operator new(4 * v12);
      *a1 = v13;
      a1[1] = v13;
      a1[2] = &v13[v10 + 1];
      do
      {
        *v13++ = v8;
        v8 += v6;
      }
      while (v7 != v8);
      a1[1] = v13;
    }
  }
  return a1;
}

void sub_19C17D228(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C17D244(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;

  v1 = a1[4];
  if (v1)
  {
    v2 = *a1;
    v3 = a1[5];
    v4 = a1[2];
    v5 = *(_QWORD *)(*a1 + 2496);
    if (v4 >= 0x40)
    {
      for (i = 0; i != v1; ++i)
      {
        do
        {
          v16 = 4 * v5;
          v17 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v18 = *(_DWORD *)(v2 + 4 * (v17 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v16) = v18;
          v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
          v20 = (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
        }
        while (v3 <= v20);
      }
      v6 = (_DWORD)a1[7] & v20;
    }
    else
    {
      v6 = 0;
      for (j = 0; j != v1; ++j)
      {
        do
        {
          v8 = 4 * v5;
          v9 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v10 = *(_DWORD *)(v2 + 4 * (v9 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v8) = v10;
          v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
          v12 = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
        }
        while (v3 <= v12);
        v6 = (v6 << v4) + ((_DWORD)a1[7] & v12);
      }
    }
    *(_QWORD *)(v2 + 2496) = v5;
    v13 = a1[3];
    if (v1 < v13)
      goto LABEL_14;
    return v6;
  }
  v6 = 0;
  v13 = a1[3];
  if (!v13)
    return v6;
LABEL_14:
  v21 = *a1;
  v22 = a1[6];
  v23 = a1[2];
  v24 = *(_QWORD *)(*a1 + 2496);
  if (v23 >= 0x3F)
  {
    do
    {
      do
      {
        v31 = 4 * v24;
        v32 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v33 = *(_DWORD *)(v21 + 4 * (v32 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v31) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v31) = v33;
        v34 = ((v33 ^ (v33 >> 11)) << 7) & 0x9D2C5680 ^ v33 ^ (v33 >> 11);
        v35 = (v34 << 15) & 0xEFC60000 ^ v34 ^ (((v34 << 15) & 0xEFC60000 ^ v34) >> 18);
      }
      while (v22 <= v35);
      ++v1;
    }
    while (v1 != v13);
    v36 = *((_DWORD *)a1 + 15) & v35;
    *(_QWORD *)(v21 + 2496) = v24;
    return v36;
  }
  else
  {
    v25 = v23 + 1;
    do
    {
      do
      {
        v26 = 4 * v24;
        v27 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v28 = *(_DWORD *)(v21 + 4 * (v27 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v26) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v26) = v28;
        v29 = ((v28 ^ (v28 >> 11)) << 7) & 0x9D2C5680 ^ v28 ^ (v28 >> 11);
        v30 = (v29 << 15) & 0xEFC60000 ^ v29 ^ (((v29 << 15) & 0xEFC60000 ^ v29) >> 18);
      }
      while (v22 <= v30);
      v6 = (v6 << v25) + (*((_DWORD *)a1 + 15) & v30);
      ++v1;
    }
    while (v1 != v13);
    *(_QWORD *)(v21 + 2496) = v24;
    return v6;
  }
}

uint64_t sub_19C17D574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6 - *(_QWORD *)a2;
  if (v6 != *(_QWORD *)a2)
  {
    if (v8 < 0)
      sub_19C07DA0C();
    v9 = (char *)operator new(v6 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 16) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 8) = v10;
  }
  v11 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v13 = *(const void **)a3;
  v12 = *(_QWORD *)(a3 + 8);
  v14 = v12 - *(_QWORD *)a3;
  if (v12 != *(_QWORD *)a3)
  {
    if (v14 < 0)
      sub_19C07DA0C();
    v15 = (char *)operator new(v12 - *(_QWORD *)a3);
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 48) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 40) = v16;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a3 + 24);
  return a1;
}

void sub_19C17D668(void *a1)
{
  void **v1;
  _QWORD *v2;
  void *v4;

  v4 = *v1;
  if (*v1)
  {
    *v2 = v4;
    operator delete(v4);
  }
  sub_19C07AF7C(a1);
}

uint64_t sub_19C17D694(uint64_t a1, int a2)
{
  size_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2)
  {
    if (a2 < 0)
      sub_19C07DA0C();
    v4 = 8 * a2;
    v5 = (char *)operator new(v4);
    bzero(v5, 8 * a2);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = &v5[v4];
    *(_QWORD *)(a1 + 16) = &v5[8 * a2];
    *(_DWORD *)(a1 + 24) = a2;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[8 * a2];
    bzero(v6, 8 * a2);
    v8 = &v6[v4];
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v6 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = a2;
  return a1;
}

void sub_19C17D780(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  sub_19C07AF7C(a1);
}

uint64_t sub_19C17D79C(uint64_t a1, int a2)
{
  size_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2)
  {
    if (a2 < 0)
      sub_19C07DA0C();
    v4 = 4 * a2;
    v5 = (char *)operator new(v4);
    bzero(v5, 4 * a2);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = &v5[v4];
    *(_QWORD *)(a1 + 16) = &v5[4 * a2];
    *(_DWORD *)(a1 + 24) = a2;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v6 = (char *)operator new(4 * a2);
    v7 = &v6[4 * a2];
    bzero(v6, 4 * a2);
    v8 = &v6[v4];
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v6 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 56) = a2;
  return a1;
}

void sub_19C17D888(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  sub_19C07AF7C(a1);
}

void sub_19C17D8A4(void **a1)
{
  operator delete(*a1);
}

void sub_19C17D8AC(void *__p)
{
  operator delete(__p);
}

uint64_t sub_19C17D8D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_19C17D8F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_19C17E600(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v7 = (void *)objc_msgSend_mutableCopy(v3, v4, v5, v6);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v11 = (void *)objc_msgSend_copy(v3, v8, v9, v10, 0);
  v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v27, (uint64_t)v31, 16);
  if (v13)
  {
    v16 = v13;
    v17 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v28 == v17)
        {
          v19 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
          if ((objc_msgSend_containsObject_(*(void **)(a1 + 32), v14, v19, v15) & 1) != 0)
            continue;
        }
        else
        {
          objc_enumerationMutation(v11);
          v19 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
          if ((objc_msgSend_containsObject_(*(void **)(a1 + 32), v20, v19, v21) & 1) != 0)
            continue;
        }
        objc_msgSend_removeObject_(v7, v14, v19, v15);
      }
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v27, (uint64_t)v31, 16);
    }
    while (v16);
  }

  v25 = (void *)objc_msgSend_copy(v7, v22, v23, v24);
  return v25;
}

double sub_19C17F130()
{
  _DWORD *v0;
  timeval *v1;
  timeval *v2;
  timeval v4;

  if (qword_1EE41A998 != -1)
    dispatch_once(&qword_1EE41A998, &unk_1E3D251A0);
  v0 = pthread_getspecific(qword_1EE41A9A0);
  v1 = (timeval *)pthread_getspecific(qword_1EE41A9A8);
  v2 = v1;
  if (v0)
  {
    if (v1)
      goto LABEL_5;
LABEL_8:
    v2 = (timeval *)malloc_type_malloc(0x10uLL, 0x1000040D9A13B51uLL);
    pthread_setspecific(qword_1EE41A9A8, v2);
    v4.tv_sec = 0;
    *(_QWORD *)&v4.tv_usec = 0;
    if (*v0)
      goto LABEL_6;
LABEL_9:
    *v0 = 1;
    gettimeofday(v2, 0);
    goto LABEL_6;
  }
  v0 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  pthread_setspecific(qword_1EE41A9A0, v0);
  *v0 = 0;
  if (!v2)
    goto LABEL_8;
LABEL_5:
  v4.tv_sec = 0;
  *(_QWORD *)&v4.tv_usec = 0;
  if (!*v0)
    goto LABEL_9;
LABEL_6:
  gettimeofday(&v4, 0);
  return (double)(v4.tv_sec - v2->tv_sec) + (double)(v4.tv_usec - v2->tv_usec) * 0.000001;
}

uint64_t sub_19C17F268()
{
  void (__cdecl *v0)(void *);

  v0 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
  pthread_key_create((pthread_key_t *)&qword_1EE41A9A0, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  return pthread_key_create((pthread_key_t *)&qword_1EE41A9A8, v0);
}

__darwin_time_t sub_19C17F2A4()
{
  timeval v1;

  v1.tv_sec = 0;
  *(_QWORD *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return v1.tv_sec ^ v1.tv_usec;
}

double sub_19C17F2D8(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_19C22DF48(a1);
  *(_QWORD *)v1 = off_1E3D23000;
  result = 0.0;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_DWORD *)(v1 + 288) = 1065353216;
  *(_QWORD *)(v1 + 304) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 296) = v1 + 304;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_QWORD *)(v1 + 368) = 0;
  *(_DWORD *)(v1 + 376) = 1065353216;
  *(_DWORD *)(v1 + 56) = 1;
  return result;
}

uint64_t sub_19C17F32C(uint64_t a1)
{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void **v15;

  *(_QWORD *)a1 = off_1E3D23000;
  v2 = *(void ***)(a1 + 360);
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (void **)*v2;
        v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0)
          break;
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_11;
      }
      operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  v7 = *(void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(std::__shared_weak_count **)(a1 + 336);
  if (!v8)
    goto LABEL_17;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_17:
    v11 = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = 0;
    if (!v11)
      goto LABEL_19;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v11)
LABEL_18:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
LABEL_19:
  sub_19C098FBC(a1 + 296, *(char **)(a1 + 304));
  v12 = *(void ***)(a1 + 272);
  if (v12)
  {
    do
    {
      v15 = (void **)*v12;
      if (*((char *)v12 + 63) < 0)
      {
        operator delete(v12[5]);
        if (*((char *)v12 + 39) < 0)
LABEL_28:
          operator delete(v12[2]);
      }
      else if (*((char *)v12 + 39) < 0)
      {
        goto LABEL_28;
      }
      operator delete(v12);
      v12 = v15;
    }
    while (v15);
  }
  v13 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v13)
    operator delete(v13);
  return sub_19C22E138(a1);
}

uint64_t sub_19C17F4B4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_19C17F520(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C17F32C(a1);
  operator delete(v1);
}

uint64_t sub_19C17F534(uint64_t a1, char *a2)
{
  uint64_t **v4;
  _QWORD *v5;
  char *v6;
  void **v7;
  uint64_t v8;
  uint64_t i;
  void **v10;
  void **v11;
  void **v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t j;
  std::string::size_type v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  unint64_t v25;
  std::string::size_type v26;
  std::string *p_p;
  int v28;
  unint64_t v29;
  unint64_t v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type size;
  E5RT::E5CompilerOptions *v34;
  __int128 *v35;
  _QWORD *v36;
  __int128 *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 *v41;
  uint64_t *v42;
  E5RT::OperandDescriptor *PortDescriptorRef;
  std::string::size_type v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  uint64_t *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  BOOL v57;
  std::string::size_type v58;
  std::string *v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  void **v72;
  E5RT::ExecutionStream *OutputPorts;
  const void **k;
  E5RT::OperandDescriptor *v75;
  std::string::size_type v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::string::size_type v82;
  uint64_t v83;
  std::string::size_type v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  std::string __p;
  std::string v107;
  std::string __dst;
  __int128 *v109;

  v4 = (uint64_t **)(a1 + 8);
  v5 = (_QWORD *)(a1 + 16);
  sub_19C098FBC(a1 + 8, *(char **)(a1 + 16));
  *(_QWORD *)(a1 + 8) = v5;
  *v5 = 0;
  v6 = *(char **)(a1 + 40);
  *(_QWORD *)(a1 + 24) = 0;
  sub_19C098FBC(a1 + 32, v6);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (!*(_QWORD *)(a1 + 280))
    goto LABEL_7;
  v7 = *(void ***)(a1 + 272);
  if (v7)
  {
    do
    {
      v11 = (void **)*v7;
      if (*((char *)v7 + 63) < 0)
      {
        operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0)
LABEL_15:
          operator delete(v7[2]);
      }
      else if (*((char *)v7 + 39) < 0)
      {
        goto LABEL_15;
      }
      operator delete(v7);
      v7 = v11;
    }
    while (v11);
  }
  *(_QWORD *)(a1 + 272) = 0;
  v8 = *(_QWORD *)(a1 + 264);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * i) = 0;
  }
  *(_QWORD *)(a1 + 280) = 0;
LABEL_7:
  sub_19C098FBC(a1 + 296, *(char **)(a1 + 304));
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  if (*(_QWORD *)(a1 + 368))
  {
    v10 = *(void ***)(a1 + 360);
    if (v10)
    {
      do
      {
        while (1)
        {
          v12 = (void **)*v10;
          v13 = (std::__shared_weak_count *)v10[6];
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (*((char *)v10 + 39) < 0)
            break;
          operator delete(v10);
          v10 = v12;
          if (!v12)
            goto LABEL_24;
        }
        operator delete(v10[2]);
        operator delete(v10);
        v10 = v12;
      }
      while (v12);
    }
LABEL_24:
    *(_QWORD *)(a1 + 360) = 0;
    v16 = *(_QWORD *)(a1 + 352);
    if (v16)
    {
      for (j = 0; j != v16; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 368) = 0;
  }
  LODWORD(v18) = a2[23];
  if ((v18 & 0x80000000) != 0)
  {
    sub_19C07C6E8(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    LOBYTE(v18) = a2[23];
  }
  else
  {
    __dst = *(std::string *)a2;
  }
  *((_BYTE *)&v107.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v107, "main");
  v18 = v18;
  if ((v18 & 0x80u) == 0)
    v19 = (unsigned __int8 *)a2;
  else
    v19 = *(unsigned __int8 **)a2;
  if ((v18 & 0x80u) != 0)
    v18 = *((_QWORD *)a2 + 1);
  v102 = v4;
  if (v18)
  {
    v20 = &v19[v18];
    v21 = v19;
    v22 = (char *)&v19[v18];
    do
    {
      v23 = v21;
      while (1)
      {
        v24 = *v21++;
        if (v24 == 35)
          break;
        v23 = v21;
        if (v21 == v20)
        {
          v23 = (unsigned __int8 *)v22;
          goto LABEL_43;
        }
      }
      v22 = (char *)v23;
    }
    while (v21 != v20);
LABEL_43:
    if (v23 != v20)
    {
      v25 = v23 - v19;
      if (v23 - v19 != -1)
      {
        if (v18 >= v25)
          v26 = v23 - v19;
        else
          v26 = v18;
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        if (v26 >= 0x17)
        {
          v98 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v98 = v26 | 7;
          v99 = v98 + 1;
          p_p = (std::string *)operator new(v98 + 1);
          __p.__r_.__value_.__l.__size_ = v26;
          __p.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
          v4 = v102;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v26;
          p_p = &__p;
          if (!v26)
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_52;
            goto LABEL_189;
          }
        }
        memmove(p_p, v19, v26);
        p_p->__r_.__value_.__s.__data_[v26] = 0;
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_52:
          __dst = __p;
          v28 = a2[23];
          if ((v28 & 0x80000000) == 0)
            goto LABEL_53;
          goto LABEL_190;
        }
LABEL_189:
        operator delete(__dst.__r_.__value_.__l.__data_);
        __dst = __p;
        v28 = a2[23];
        if ((v28 & 0x80000000) == 0)
        {
LABEL_53:
          v29 = v28;
          if (v25 < v28)
          {
            v30 = v25 + 1;
            v31 = v29 - (v25 + 1);
            if (v31 <= 0x7FFFFFFFFFFFFFF7)
              goto LABEL_55;
            goto LABEL_192;
          }
          goto LABEL_201;
        }
LABEL_190:
        v29 = *((_QWORD *)a2 + 1);
        if (v29 > v25)
        {
          a2 = *(char **)a2;
          v30 = v25 + 1;
          v31 = v29 - (v25 + 1);
          if (v31 <= 0x7FFFFFFFFFFFFFF7)
          {
LABEL_55:
            if (v31 >= 0x17)
            {
              v100 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17)
                v100 = v31 | 7;
              v101 = v100 + 1;
              v32 = (std::string *)operator new(v100 + 1);
              __p.__r_.__value_.__l.__size_ = v31;
              __p.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
            }
            else
            {
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v31;
              v32 = &__p;
              if (v29 == v30)
              {
                __p.__r_.__value_.__s.__data_[v29 - v25 - 1] = 0;
                if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_58:
                  v107 = __p;
                  goto LABEL_59;
                }
LABEL_197:
                operator delete(v107.__r_.__value_.__l.__data_);
                goto LABEL_58;
              }
            }
            memmove(v32, &a2[v25 + 1], v31);
            v32->__r_.__value_.__s.__data_[v29 - v25 - 1] = 0;
            if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_58;
            goto LABEL_197;
          }
LABEL_192:
          sub_19C07C774();
        }
LABEL_201:
        sub_19C07DFE4();
      }
    }
  }
LABEL_59:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_ <= 3)
      goto LABEL_64;
  }
  else
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) < 4u)
    {
LABEL_64:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&__p, "E5Inference");
      E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
      v35 = v109;
      if (v109)
      {
        v36 = (_QWORD *)operator new();
        v37 = v109;
        *v36 = &unk_1E3D250D8;
        v36[1] = 0;
        v36[2] = 0;
        v36[3] = v37;
        v109 = 0;
        v38 = *(std::__shared_weak_count **)(a1 + 336);
        *(_QWORD *)(a1 + 328) = v35;
        *(_QWORD *)(a1 + 336) = v36;
        if (!v38)
          goto LABEL_72;
      }
      else
      {
        v109 = 0;
        v38 = *(std::__shared_weak_count **)(a1 + 336);
        *(_QWORD *)(a1 + 328) = 0;
        *(_QWORD *)(a1 + 336) = 0;
        if (!v38)
        {
LABEL_72:
          v41 = v109;
          v109 = 0;
          if (v41)
            (*(void (**)(__int128 *))(*(_QWORD *)v41 + 8))(v41);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_76;
        }
      }
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
      goto LABEL_72;
    }
  }
  v34 = (E5RT::E5CompilerOptions *)std::string::compare(&__dst, size - 4, 4uLL, ".mil");
  if ((_DWORD)v34)
    goto LABEL_64;
  sub_19C180260(v34, (uint64_t)&v107, &__p);
  v91 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v92 = *(std::__shared_weak_count **)(a1 + 336);
  *(_OWORD *)(a1 + 328) = v91;
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v96 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
LABEL_76:
  v42 = *(uint64_t **)(E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 328)) + 16);
  if (v42)
  {
    while (1)
    {
      PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)v42[5]);
      E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
      E5RT::TensorDescriptor::AllocateMemory();
      sub_19C182430(a1 + 344, (uint64_t)(v42 + 2), (uint64_t)(v42 + 2), (uint64_t *)&__p);
      v44 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v44)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v44 + 8))(v44);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v42 + 2);
      v45 = sub_19C182AB0(a1 + 344, (uint64_t)(v42 + 2), (uint64_t)&unk_19C27ADD0, (__int128 **)&__p)[6];
      v105 = (std::__shared_weak_count *)v45;
      if (v45)
      {
        v46 = (unint64_t *)(v45 + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      E5RT::IOPort::BindMemoryObject();
      v48 = v105;
      if (v105)
      {
        v49 = (unint64_t *)&v105->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = *((char *)v42 + 39);
      v52 = (uint64_t *)v42[2];
      if (v51 >= 0)
        v53 = (char *)(v42 + 2);
      else
        v53 = (char *)v42[2];
      v54 = *((unsigned __int8 *)v42 + 39);
      if (v51 < 0)
        v54 = v42[3];
      if (v54)
      {
        v55 = &v53[v54];
        if (v53[v54 - 1] == 110 && &v53[v54 - 1] != v53)
        {
          v57 = *(v55 - 2) != 105 || v55 - 2 == v53;
          if (!v57 && *(v55 - 3) == 95)
            break;
        }
      }
      v60 = 0;
      v61 = v54;
      while (v61 && v60 != -8)
      {
        v62 = v53[v61 - 1];
        v63 = aHistory[v60 + 7];
        --v61;
        --v60;
        if (v62 != v63)
          goto LABEL_118;
      }
      if (&aHistory[v60 + 8] == "_history")
      {
        if (v54 >= v54 - 8)
          v58 = v54 - 8;
        else
          v58 = v54;
        if (v58 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        if (v58 >= 0x17)
        {
          v67 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v58 | 7) != 0x17)
            v67 = v58 | 7;
          v68 = v67 + 1;
          v59 = (std::string *)operator new(v67 + 1);
          __p.__r_.__value_.__l.__size_ = v58;
          __p.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v58;
          v59 = &__p;
          if (!v58)
            goto LABEL_143;
        }
LABEL_142:
        memmove(v59, v53, v58);
        goto LABEL_143;
      }
LABEL_118:
      if (v51 < 0)
      {
        if (v42[3] != 16)
          goto LABEL_78;
      }
      else
      {
        v52 = v42 + 2;
        if (v51 != 16)
          goto LABEL_78;
      }
      v65 = *v52;
      v64 = v52[1];
      if (v65 != 0x5F79726F74736968 || v64 != 0x6B73616D5F646170)
LABEL_78:
        sub_19C08087C(v4, (const void **)v42 + 2, (uint64_t)(v42 + 2));
LABEL_79:
      v42 = (uint64_t *)*v42;
      if (!v42)
        goto LABEL_146;
    }
    if (v54 >= v54 - 3)
      v58 = v54 - 3;
    else
      v58 = v54;
    if (v58 > 0x7FFFFFFFFFFFFFF7)
      sub_19C07C774();
    if (v58 >= 0x17)
    {
      v69 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v58 | 7) != 0x17)
        v69 = v58 | 7;
      v70 = v69 + 1;
      v59 = (std::string *)operator new(v69 + 1);
      __p.__r_.__value_.__l.__size_ = v58;
      __p.__r_.__value_.__r.__words[2] = v70 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      goto LABEL_142;
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v58;
    v59 = &__p;
    if (v58)
      goto LABEL_142;
LABEL_143:
    v59->__r_.__value_.__s.__data_[v58] = 0;
    v109 = (__int128 *)(v42 + 2);
    v71 = sub_19C182F28(a1 + 256, (uint64_t)(v42 + 2), (uint64_t)&unk_19C27ADD0, &v109);
    v72 = (void **)(v71 + 5);
    v4 = v102;
    if (*((char *)v71 + 63) < 0)
      operator delete(*v72);
    *(std::string *)v72 = __p;
    goto LABEL_79;
  }
LABEL_146:
  OutputPorts = (E5RT::ExecutionStream *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 328));
  for (k = (const void **)*((_QWORD *)OutputPorts + 2); k; k = (const void **)*k)
  {
    sub_19C08087C((uint64_t **)(a1 + 32), k + 2, (uint64_t)(k + 2));
    v75 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPort *)k[5]);
    E5RT::OperandDescriptor::TensorDescriptor(v75);
    E5RT::TensorDescriptor::AllocateMemory();
    sub_19C182430(a1 + 344, (uint64_t)(k + 2), (uint64_t)(k + 2), (uint64_t *)&__p);
    v76 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v76)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v76 + 8))(v76);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(k + 2);
    v77 = sub_19C182AB0(a1 + 344, (uint64_t)(k + 2), (uint64_t)&unk_19C27ADD0, (__int128 **)&__p)[6];
    v104 = (std::__shared_weak_count *)v77;
    if (v77)
    {
      v78 = (unint64_t *)(v77 + 8);
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
    OutputPorts = (E5RT::ExecutionStream *)E5RT::IOPort::BindMemoryObject();
    if (v104)
    {
      v80 = (unint64_t *)&v104->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
  }
  E5RT::ExecutionStream::CreateExecutionStream(OutputPorts);
  v82 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  v83 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v82;
  if (v83)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
    v84 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v84)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v84 + 8))(v84);
  }
  v85 = *(std::__shared_weak_count **)(a1 + 336);
  v103 = v85;
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (!v103)
    goto LABEL_169;
  v88 = (unint64_t *)&v103->__shared_owners_;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (v89)
  {
LABEL_169:
    if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_170;
LABEL_173:
    operator delete(v107.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
LABEL_174:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return 1;
  }
  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
  std::__shared_weak_count::__release_weak(v103);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_173;
LABEL_170:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_174;
  return 1;
}

void sub_19C18009C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;

  if (a31 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v31 - 105) & 0x80000000) == 0)
    {
LABEL_3:
      v34 = __cxa_begin_catch(a1);
      if (a2 == 2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v31 - 105) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v31 - 128));
  v34 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
LABEL_4:
    v35 = (uint64_t)v34;
    v36 = sub_19C1A0644();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      sub_19C255868(v35, v36);
    goto LABEL_10;
  }
LABEL_8:
  v37 = sub_19C1A0644();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    sub_19C2558DC();
LABEL_10:
  __cxa_end_catch();
  JUMPOUT(0x19C17FE7CLL);
}

void sub_19C180240(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C180260@<X0>(E5RT::E5CompilerOptions *a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  E5RT::E5Compiler *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *ExportedFunctions;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t result;
  std::__shared_weak_count *v26;
  uint64_t v27;
  E5RT::ProgramLibrary *v28;
  __int128 __p;
  _QWORD *v30;
  uint64_t v31;
  void *__dst[2];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  E5RT::E5CompilerOptions::Create(a1);
  v5 = operator new(8uLL);
  *(_QWORD *)&__p = v5;
  *v5 = 1;
  *((_QWORD *)&__p + 1) = v5 + 1;
  v30 = v5 + 1;
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HIBYTE(v30) = 4;
  strcpy((char *)&__p, "bnns");
  E5RT::E5CompilerOptions::SetPreferredCpuBackend();
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v33 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18226C(&__p, (uint64_t)__dst, 1uLL);
  v6 = (E5RT::E5Compiler *)E5RT::E5CompilerOptions::SetMilEntryPoints();
  v7 = __p;
  if ((_QWORD)__p)
  {
    v8 = *((_QWORD *)&__p + 1);
    v9 = (void *)__p;
    if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0)
          operator delete(*(void **)(v8 - 24));
        v8 -= 24;
      }
      while (v8 != v7);
      v9 = (void *)__p;
    }
    *((_QWORD *)&__p + 1) = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v33) < 0)
    operator delete(__dst[0]);
  E5RT::E5Compiler::GetCompiler(v6);
  std::chrono::steady_clock::now();
  E5RT::E5Compiler::Compile();
  std::chrono::steady_clock::now();
  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(v28);
  v11 = sub_19C0A3AD8(ExportedFunctions, a2);
  if (!v11)
    sub_19C07DFF8("unordered_map::at: key not found");
  v12 = (std::__shared_weak_count *)v11[6];
  __dst[0] = (void *)v11[5];
  __dst[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v26 = v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  else
  {
    v26 = 0;
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v26)
  {
    v16 = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  HIBYTE(v30) = 11;
  strcpy((char *)&__p, "E5Inference");
  E5RT::PrecompiledComputeOpCreateOptions::SetOperationName();
  if (SHIBYTE(v30) < 0)
    operator delete((void *)__p);
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  v18 = __p;
  *a3 = __p;
  if (!v18)
  {
    a3[1] = 0;
    v21 = v27;
    if (!v27)
      goto LABEL_34;
    goto LABEL_33;
  }
  v19 = (_QWORD *)operator new();
  v20 = __p;
  *v19 = &unk_1E3D250D8;
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = v20;
  a3[1] = v19;
  v21 = v27;
  if (v27)
LABEL_33:
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_34:
  v22 = (std::__shared_weak_count *)__dst[1];
  if (__dst[1])
  {
    v23 = (unint64_t *)((char *)__dst[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v28)
    (*(void (**)())(*(_QWORD *)v28 + 8))();
  result = v31;
  v31 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C1805D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a19)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  _Unwind_Resume(exception_object);
}

E5RT::ExecutionStream *sub_19C180708(uint64_t a1)
{
  E5RT::ExecutionStream *result;

  result = *(E5RT::ExecutionStream **)(a1 + 320);
  if (result)
  {
    E5RT::ExecutionStream::ResetStream(result);
    result = *(E5RT::ExecutionStream **)(a1 + 320);
    *(_QWORD *)(a1 + 320) = 0;
    if (result)
      return (E5RT::ExecutionStream *)(*(uint64_t (**)(E5RT::ExecutionStream *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_19C18075C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C180770(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  size_t v8;
  void **v9;
  int v10;
  size_t v11;
  uint64_t *v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  uint64_t *v18;
  void *DataSpan;
  size_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  void *__p[2];
  char v26[8];
  void **v27;

  if (!*(_QWORD *)(a1 + 320))
  {
    v22 = sub_19C1A0644();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      sub_19C255964();
    return 0;
  }
  sub_19C22E3BC(a1, a3, (uint64_t)__p);
  v7 = *(uint64_t ***)(a1 + 304);
  if (!v7)
  {
LABEL_26:
    v27 = __p;
    v18 = sub_19C182AB0(a1 + 344, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v27);
    DataSpan = (void *)E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v18[5]);
    if (v20)
      memmove(DataSpan, a2, v20);
    sub_19C08087C((uint64_t **)(a1 + 296), (const void **)__p, (uint64_t)__p);
    *(_DWORD *)(a1 + 56) = *(_QWORD *)(a4 + 24);
    v21 = 1;
    if ((v26[0] & 0x80000000) == 0)
      return v21;
LABEL_35:
    operator delete(__p[0]);
    return v21;
  }
  if (v26[0] >= 0)
    v8 = v26[0];
  else
    v8 = (size_t)__p[1];
  if (v26[0] >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  while (1)
  {
    v10 = *((char *)v7 + 55);
    if (v10 >= 0)
      v11 = *((unsigned __int8 *)v7 + 55);
    else
      v11 = (size_t)v7[5];
    if (v10 >= 0)
      v12 = (uint64_t *)(v7 + 4);
    else
      v12 = v7[4];
    if (v11 >= v8)
      v13 = v8;
    else
      v13 = v11;
    v14 = memcmp(v9, v12, v13);
    v15 = v8 < v11;
    if (v14)
      v15 = v14 < 0;
    if (v15)
      goto LABEL_9;
    v16 = memcmp(v12, v9, v13);
    v17 = v11 < v8;
    if (v16)
      v17 = v16 < 0;
    if (!v17)
      break;
    ++v7;
LABEL_9:
    v7 = (uint64_t **)*v7;
    if (!v7)
      goto LABEL_26;
  }
  v23 = sub_19C1A0644();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    sub_19C255990(v26, (uint64_t *)__p, v23);
    v21 = 0;
    if ((v26[0] & 0x80000000) == 0)
      return v21;
    goto LABEL_35;
  }
  v21 = 0;
  if (v26[0] < 0)
    goto LABEL_35;
  return v21;
}

void sub_19C180960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C180980(uint64_t a1, CFArrayRef theArray)
{
  const __CFArray *v2;
  unint64_t Count;
  NSObject *v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t DataSpan;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  const void *ValueAtIndex;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void **v40;
  E5RT::IOPort *InputPortRef;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t NumElements;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  void *v66;
  const __CFArray *v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t *v79;
  void *v80;
  uint64_t v81;
  _QWORD *i;
  uint64_t *v83;
  void *v84;
  unint64_t v85;
  NSObject *v86;
  NSObject *v87;
  NSObject *v88;
  NSObject *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97[5];
  _QWORD v98[2];
  void *__p[3];
  uint64_t v100;
  uint64_t v101;

  v2 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count % *(int *)(a1 + 56))
      goto LABEL_3;
  }
  else
  {
    Count = 0;
    if (0uLL % *(int *)(a1 + 56))
    {
LABEL_3:
      v5 = sub_19C1A0644();
      result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_19C255BA4();
        return 0;
      }
      return result;
    }
  }
  HIBYTE(__p[2]) = 16;
  v7 = a1 + 344;
  strcpy((char *)__p, "history_pad_mask");
  v8 = sub_19C080120((_QWORD *)(a1 + 344), (uint64_t)__p);
  v9 = v8;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_8;
LABEL_19:
    v13 = 0;
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if (!v9)
    goto LABEL_19;
LABEL_8:
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "history_pad_mask");
  v97[0] = (__int128 *)__p;
  v10 = sub_19C1834BC(a1 + 344, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, v97);
  DataSpan = E5RT::BufferObject::GetDataSpan(*((E5RT::BufferObject **)v10 + 5));
  v13 = v12 >> 2;
  if (v12 >= 4)
    v14 = DataSpan;
  else
    v14 = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v15 = Count / *(int *)(a1 + 56);
  if (v15 >= v13)
    v15 = v13;
  v16 = 4 * v15;
  v17 = (_DWORD *)(v14 + 4 * v15);
  if ((uint64_t)v16 >= 1)
  {
    v18 = v16 >> 2;
    v19 = (v16 >> 2) - (v16 > 3) + 1;
    if (v19 < 8)
    {
      v20 = (_DWORD *)v14;
LABEL_23:
      v23 = v18 + 1;
      do
      {
        *v20++ = 0;
        --v23;
      }
      while (v23 > 1);
      goto LABEL_25;
    }
    v20 = (_DWORD *)(v14 + 4 * (v19 & 0xFFFFFFFFFFFFFFF8));
    v18 -= v19 & 0xFFFFFFFFFFFFFFF8;
    v21 = (_OWORD *)(v14 + 16);
    v22 = v19 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      *(v21 - 1) = 0uLL;
      *v21 = 0uLL;
      v21 += 2;
      v22 -= 8;
    }
    while (v22);
    if (v19 != (v19 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
LABEL_25:
  v24 = v14 + 4 * v13 - (_QWORD)v17;
  if ((uint64_t)v24 < 1)
    goto LABEL_33;
  v25 = v24 >> 2;
  v26 = (v24 >> 2) - (v24 > 3) + 1;
  if (v26 < 8)
  {
    v27 = v17;
LABEL_31:
    v35 = v25 + 1;
    do
    {
      *v27++ = 1065353216;
      --v35;
    }
    while (v35 > 1);
    goto LABEL_33;
  }
  v28 = 0;
  v27 = &v17[v26 & 0xFFFFFFFFFFFFFFF8];
  v25 -= v26 & 0xFFFFFFFFFFFFFFF8;
  __asm { FMOV            V0.4S, #1.0 }
  v33 = v26 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v34 = &v17[v28];
    *v34 = _Q0;
    v34[1] = _Q0;
    v28 += 8;
    v33 -= 8;
  }
  while (v33);
  if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_31;
LABEL_33:
  if (!Count)
  {
    for (i = *(_QWORD **)(a1 + 272); i; i = (_QWORD *)*i)
    {
      __p[0] = i + 2;
      v83 = sub_19C182AB0(v7, (uint64_t)(i + 2), (uint64_t)&unk_19C27ADD0, (__int128 **)__p);
      v84 = (void *)E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v83[5]);
      if (v85 < 4)
        v84 = 0;
      if ((uint64_t)(v85 & 0xFFFFFFFFFFFFFFFCLL) >= 1)
        bzero(v84, 4 * (((v85 & 0xFFFFFFFFFFFFFFFCLL) >> 2) - ((v85 & 0xFFFFFFFFFFFFFFFCLL) > 3)) + 4);
    }
    return 1;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(v2, Count - 1);
  v37 = *(_QWORD *)(a1 + 272);
  if (!v37)
    return 1;
  v94 = Count;
  v38 = (uint64_t)ValueAtIndex + 16;
  v39 = &unk_19C27ADD0;
  v96 = a1;
  while (1)
  {
    v40 = (const void **)(v37 + 40);
    sub_19C187458(v38, (const void **)(v37 + 40), (uint64_t)__p);
    v95 = LODWORD(__p[0]) * LODWORD(__p[1]) * LODWORD(__p[2]) * (int)v100 * (int)v101;
    InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
    v43 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    __p[0] = (void *)(v37 + 16);
    v44 = sub_19C182AB0(v7, v37 + 16, (uint64_t)v39, (__int128 **)__p);
    v45 = E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v44[5]);
    v47 = v46 >= 4 ? v45 : 0;
    v98[0] = v47;
    v98[1] = v46 >> 2;
    v48 = *(unsigned __int8 *)(v37 + 39);
    v49 = *(_QWORD *)(v37 + 16);
    if ((v48 & 0x80u) != 0)
      v48 = *(_QWORD *)(v37 + 24);
    else
      v49 = v37 + 16;
    v50 = v49 + v48;
    if (!v48)
      break;
    if (*(_BYTE *)(v50 - 1) != 110 || v50 - 1 == v49)
      break;
    v52 = *(_BYTE *)(v50 - 2) != 105 || v50 - 2 == v49;
    if (v52 || *(_BYTE *)(v50 - 3) != 95)
      break;
    sub_19C187458(v38, (const void **)(v37 + 40), (uint64_t)__p);
    sub_19C181230((uint64_t)v97, v43, 1);
    if (__p[0] == (void *)1)
    {
      v53 = v96;
      if (__p[1] == (void *)1)
      {
        if (__p[2] == (void *)1)
        {
          if (v100 == 1)
          {
            v54 = v101 == 1;
            v55 = 4;
            if (v101 == 1)
              v55 = 5;
          }
          else
          {
            v54 = 0;
            v55 = 3;
          }
        }
        else
        {
          v54 = 0;
          v55 = 2;
        }
      }
      else
      {
        v54 = 0;
        v55 = 1;
      }
    }
    else
    {
      v54 = 0;
      v55 = 0;
      v53 = v96;
    }
    if (v97[0] == (__int128 *)1)
    {
      if (v97[1] == (__int128 *)1)
      {
        if (v97[2] == (__int128 *)1)
        {
          if (v97[3] == (__int128 *)1)
          {
            v75 = 4;
            if (v97[4] == (__int128 *)1)
              v75 = 5;
          }
          else
          {
            v75 = 3;
          }
        }
        else
        {
          v75 = 2;
        }
      }
      else
      {
        v75 = 1;
      }
    }
    else
    {
      v75 = 0;
    }
    if (v54)
    {
LABEL_91:
      if (v75 != 5)
        goto LABEL_125;
    }
    else
    {
      while (v75 != 5)
      {
        if (__p[v55] != v97[v75])
          goto LABEL_125;
        do
          ++v55;
        while (v55 != 5 && __p[v55] == (void *)1);
        do
          ++v75;
        while (v75 != 5 && v97[v75] == (__int128 *)1);
        if (v55 == 5)
          goto LABEL_91;
      }
      if (v55 != 5)
      {
LABEL_125:
        v89 = sub_19C1A0644();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
          sub_19C255B3C();
        return 0;
      }
    }
    v91 = v38;
    v92 = v7;
    v93 = (uint64_t *)v37;
    v76 = *(int *)(v53 + 56);
    if ((_DWORD)v76)
    {
      v77 = 0;
      while (1)
      {
        v78 = (char *)CFArrayGetValueAtIndex(v2, v94 + v77 - v76) + 16;
        sub_19C187458((uint64_t)v78, (const void **)(v37 + 40), (uint64_t)__p);
        if (LODWORD(__p[0]) * LODWORD(__p[1]) * LODWORD(__p[2]) * (_DWORD)v100 * (_DWORD)v101 != v95)
          break;
        v79 = sub_19C18731C((uint64_t)v78, (const void **)(v37 + 40));
        v80 = (void *)sub_19C181314(v98, *(int *)(v96 + 56), v77);
        if (v81)
          memmove(v80, v79, 4 * v81);
        ++v77;
        v76 = *(int *)(v96 + 56);
        if (v77 >= v76)
          goto LABEL_108;
      }
      v88 = sub_19C1A0644();
      if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        return 0;
      goto LABEL_124;
    }
LABEL_108:
    v7 = v92;
    v37 = *v93;
    result = 1;
    v38 = v91;
    if (!*v93)
      return result;
  }
  v56 = 0;
  v57 = v50 - 1;
  v58 = -v48;
  while (v58 != v56 && v56 != -8)
  {
    v59 = *(unsigned __int8 *)(v57 + v56);
    v60 = aHistory[v56-- + 7];
    if (v59 != v60)
      goto LABEL_118;
  }
  if (&aHistory[v56 + 8] != "_history")
  {
LABEL_118:
    v86 = sub_19C1A0644();
    if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      return 0;
    sub_19C255A04();
    return 0;
  }
  NumElements = E5RT::TensorDescriptor::GetNumElements(v43);
  v62 = v13 * *(int *)(v96 + 56);
  if (NumElements == v62 * v95)
  {
    v91 = v38;
    v92 = v7;
    v93 = (uint64_t *)v37;
    if (v62 >= v94)
      v63 = v94;
    else
      v63 = v13 * *(int *)(v96 + 56);
    if (!v63)
      goto LABEL_108;
    v64 = 0;
    while (1)
    {
      v65 = (char *)CFArrayGetValueAtIndex(v2, v94 - v63 + v64) + 16;
      sub_19C187458((uint64_t)v65, v40, (uint64_t)__p);
      if (LODWORD(__p[0]) * LODWORD(__p[1]) * LODWORD(__p[2]) * (_DWORD)v100 * (_DWORD)v101 != v95)
        break;
      v66 = v39;
      v67 = v2;
      v68 = *(int *)(v96 + 56);
      v69 = v64 / v68;
      __p[0] = (void *)sub_19C181314(v98, v68, v64 % v68);
      __p[1] = v70;
      v71 = (void *)sub_19C181314(__p, v13, v69);
      v73 = v72;
      v74 = sub_19C18731C((uint64_t)v65, v40);
      if (v73)
        memmove(v71, v74, 4 * v73);
      ++v64;
      v2 = v67;
      v39 = v66;
      if (v63 == v64)
        goto LABEL_108;
    }
    v87 = sub_19C1A0644();
    if (!os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
      return 0;
LABEL_124:
    sub_19C255A6C();
    return 0;
  }
  v90 = sub_19C1A0644();
  if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
    return 0;
  sub_19C255AD4();
  return 0;
}

void sub_19C181210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_19C181230(uint64_t a1, E5RT::TensorDescriptor *this, uint64_t a3)
{
  uint64_t TensorShape;
  const void *v6;
  const void *v7;
  int64_t v8;
  NSObject *v9;
  double result;
  __int128 v11;
  _OWORD __b[2];
  uint64_t v13;

  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v6 = *(const void **)TensorShape;
  v7 = *(const void **)(TensorShape + 8);
  v8 = (int64_t)v7 - *(_QWORD *)TensorShape;
  if ((unint64_t)v8 < 0x29)
  {
    memset_pattern16(__b, &unk_19C2778E0, 0x28uLL);
    if (v7 != v6)
      memcpy(__b, v6, v8);
    if (a3)
      *(_QWORD *)&__b[0] = 1;
    result = *(double *)__b;
    v11 = __b[1];
    *(_OWORD *)a1 = __b[0];
    *(_OWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 32) = v13;
  }
  else
  {
    v9 = sub_19C1A0644();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_19C255C24(v8 >> 3, v9);
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_19C181314(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  std::runtime_error *exception;

  v4 = a1[1];
  v5 = v4 / a2;
  if (v4 != v5 * a2 || v4 < a2 || (v4 > v5 * a3 ? (v6 = v5 * a3 + v5 > v4) : (v6 = 1), v6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1838EC(exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E3D1C4B0, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + 4 * v5 * a3;
}

void sub_19C1813B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1813C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_19C1813D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void **v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  _BOOL8 result;
  uint64_t **v20;
  char v21;
  size_t v22;
  __int128 *p_dst;
  int v24;
  size_t v25;
  uint64_t *v26;
  size_t v27;
  int v28;
  BOOL v29;
  int v30;
  _BOOL4 v31;
  _QWORD *v32;
  _QWORD *v33;
  NSObject *v34;
  int v35;
  unint64_t v36;
  std::string::size_type v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t **v40;
  char v41;
  void *v42;
  void **v43;
  int v44;
  size_t v45;
  uint64_t *v46;
  size_t v47;
  int v48;
  BOOL v49;
  int v50;
  _BOOL4 v51;
  int v52;
  std::string::size_type size;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  std::string::size_type v60;
  _QWORD *v61;
  _QWORD *v62;
  void *__p;
  _QWORD *v64;
  std::string v65;
  void *v66[2];
  uint64_t v67;
  __int128 __dst;
  uint64_t v69;

  if (*(_QWORD *)(a1 + 320))
  {
    v3 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 312))
      goto LABEL_33;
    v5 = (_QWORD *)(a1 + 16);
    if (v3 == (_QWORD *)(a1 + 16))
    {
LABEL_31:
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2) & 1) == 0)
        return 0;
      E5RT::ExecutionStream::ExecuteStreamSync(*(E5RT::ExecutionStream **)(a1 + 320));
      sub_19C098FBC(a1 + 296, *(char **)(a1 + 304));
      *(_QWORD *)(a1 + 304) = 0;
      *(_QWORD *)(a1 + 312) = 0;
      result = 1;
      *(_QWORD *)(a1 + 296) = a1 + 304;
      return result;
    }
    v6 = *(_QWORD **)(a1 + 296);
    v7 = *(_QWORD **)(a1 + 8);
    while (1)
    {
      v8 = *((unsigned __int8 *)v7 + 55);
      if ((v8 & 0x80u) == 0)
        v9 = *((unsigned __int8 *)v7 + 55);
      else
        v9 = v7[5];
      v10 = *((unsigned __int8 *)v6 + 55);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = v6[5];
      if (v9 != v10)
        goto LABEL_33;
      v12 = (const void **)(v7 + 4);
      if (v11 >= 0)
        v13 = (unsigned __int8 *)(v6 + 4);
      else
        v13 = (unsigned __int8 *)v6[4];
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*v12, v13, v7[5]))
          goto LABEL_33;
      }
      else if (*((_BYTE *)v7 + 55))
      {
        while (*(unsigned __int8 *)v12 == *v13)
        {
          v12 = (const void **)((char *)v12 + 1);
          ++v13;
          if (!--v8)
            goto LABEL_20;
        }
LABEL_33:
        v64 = (_QWORD *)(a1 + 16);
        memset(&v65, 0, sizeof(v65));
        if (v3 == (_QWORD *)(a1 + 16))
          goto LABEL_148;
LABEL_34:
        if (*((char *)v3 + 55) < 0)
        {
          sub_19C07C6E8(&__dst, (void *)v3[4], v3[5]);
        }
        else
        {
          __dst = *((_OWORD *)v3 + 2);
          v69 = v3[6];
        }
        v20 = *(uint64_t ***)(a1 + 304);
        v21 = HIBYTE(v69);
        if (!v20)
        {
          if (v69 < 0)
            operator delete((void *)__dst);
          goto LABEL_75;
        }
        if (v69 >= 0)
          v22 = HIBYTE(v69);
        else
          v22 = *((_QWORD *)&__dst + 1);
        __p = (void *)__dst;
        if (v69 >= 0)
          p_dst = &__dst;
        else
          p_dst = (__int128 *)__dst;
        while (1)
        {
          v24 = *((char *)v20 + 55);
          if (v24 >= 0)
            v25 = *((unsigned __int8 *)v20 + 55);
          else
            v25 = (size_t)v20[5];
          if (v24 >= 0)
            v26 = (uint64_t *)(v20 + 4);
          else
            v26 = v20[4];
          if (v25 >= v22)
            v27 = v22;
          else
            v27 = v25;
          v28 = memcmp(p_dst, v26, v27);
          v29 = v22 < v25;
          if (v28)
            v29 = v28 < 0;
          if (!v29)
          {
            v30 = memcmp(v26, p_dst, v27);
            v31 = v25 < v22;
            if (v30)
              v31 = v30 < 0;
            if (!v31)
            {
              if (v21 < 0)
              {
                operator delete(__p);
                v32 = (_QWORD *)v3[1];
                if (v32)
                  goto LABEL_65;
                do
                {
LABEL_67:
                  v33 = (_QWORD *)v3[2];
                  v16 = *v33 == (_QWORD)v3;
                  v3 = v33;
                }
                while (!v16);
              }
              else
              {
                v32 = (_QWORD *)v3[1];
                if (!v32)
                  goto LABEL_67;
                do
                {
LABEL_65:
                  v33 = v32;
                  v32 = (_QWORD *)*v32;
                }
                while (v32);
              }
              v3 = v33;
              if (v33 == v64)
              {
LABEL_148:
                if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v65.__r_.__value_.__l.__data_);
                return 0;
              }
              goto LABEL_34;
            }
            ++v20;
          }
          v20 = (uint64_t **)*v20;
          if (!v20)
          {
            if (v21 < 0)
              operator delete(__p);
LABEL_75:
            v35 = *((char *)v3 + 55);
            if (v35 >= 0)
              v36 = (unint64_t)(v3 + 4);
            else
              v36 = v3[4];
            if (v35 >= 0)
              v37 = *((unsigned __int8 *)v3 + 55);
            else
              v37 = v3[5];
            sub_19C183910(&v65, (uint64_t)&v65, v36, (std::string::value_type *)(v36 + v37), v37);
            v38 = (_QWORD *)v3[1];
            if (v38)
            {
              do
              {
                v39 = v38;
                v38 = (_QWORD *)*v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                v39 = (_QWORD *)v3[2];
                v16 = *v39 == (_QWORD)v3;
                v3 = v39;
              }
              while (!v16);
            }
            if (v39 == v64)
              goto LABEL_148;
            while (2)
            {
              if (*((char *)v39 + 55) < 0)
              {
                sub_19C07C6E8(v66, (void *)v39[4], v39[5]);
              }
              else
              {
                *(_OWORD *)v66 = *((_OWORD *)v39 + 2);
                v67 = v39[6];
              }
              v40 = *(uint64_t ***)(a1 + 304);
              v41 = HIBYTE(v67);
              if (v40)
              {
                if (v67 >= 0)
                  v42 = (void *)HIBYTE(v67);
                else
                  v42 = v66[1];
                if (v67 >= 0)
                  v43 = v66;
                else
                  v43 = (void **)v66[0];
                do
                {
                  v44 = *((char *)v40 + 55);
                  if (v44 >= 0)
                    v45 = *((unsigned __int8 *)v40 + 55);
                  else
                    v45 = (size_t)v40[5];
                  if (v44 >= 0)
                    v46 = (uint64_t *)(v40 + 4);
                  else
                    v46 = v40[4];
                  if (v45 >= (unint64_t)v42)
                    v47 = (size_t)v42;
                  else
                    v47 = v45;
                  v48 = memcmp(v43, v46, v47);
                  v49 = (unint64_t)v42 < v45;
                  if (v48)
                    v49 = v48 < 0;
                  if (!v49)
                  {
                    v50 = memcmp(v46, v43, v47);
                    v51 = v45 < (unint64_t)v42;
                    if (v50)
                      v51 = v50 < 0;
                    if (!v51)
                    {
                      v52 = 0;
                      if ((v41 & 0x80) == 0)
                        goto LABEL_121;
                      goto LABEL_124;
                    }
                    ++v40;
                  }
                  v40 = (uint64_t **)*v40;
                }
                while (v40);
                v52 = 1;
                if (v41 < 0)
                  goto LABEL_124;
LABEL_121:
                if (!v52)
                  goto LABEL_142;
              }
              else
              {
                v52 = 1;
                if ((v67 & 0x8000000000000000) == 0)
                  goto LABEL_121;
LABEL_124:
                operator delete(v66[0]);
                if (!v52)
                {
LABEL_142:
                  v61 = (_QWORD *)v39[1];
                  if (v61)
                  {
                    do
                    {
                      v62 = v61;
                      v61 = (_QWORD *)*v61;
                    }
                    while (v61);
                  }
                  else
                  {
                    do
                    {
                      v62 = (_QWORD *)v39[2];
                      v16 = *v62 == (_QWORD)v39;
                      v39 = v62;
                    }
                    while (!v16);
                  }
                  v39 = v62;
                  if (v62 == v64)
                    goto LABEL_148;
                  continue;
                }
              }
              break;
            }
            size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v54 = &v65;
            else
              v54 = (std::string *)v65.__r_.__value_.__r.__words[0];
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v65.__r_.__value_.__l.__size_;
            sub_19C183DB0(&v65, (uint64_t)v54 + size, (unint64_t)", ", "", 2uLL);
            v55 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v56 = &v65;
            else
              v56 = (std::string *)v65.__r_.__value_.__r.__words[0];
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v55 = v65.__r_.__value_.__l.__size_;
            v57 = (uint64_t)v56 + v55;
            v58 = *((char *)v39 + 55);
            if (v58 >= 0)
              v59 = (unint64_t)(v39 + 4);
            else
              v59 = v39[4];
            if (v58 >= 0)
              v60 = *((unsigned __int8 *)v39 + 55);
            else
              v60 = v39[5];
            sub_19C183910(&v65, v57, v59, (std::string::value_type *)(v59 + v60), v60);
            goto LABEL_142;
          }
        }
      }
LABEL_20:
      v14 = (_QWORD *)v7[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v7[2];
          v16 = *v15 == (_QWORD)v7;
          v7 = v15;
        }
        while (!v16);
      }
      v17 = (_QWORD *)v6[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v6[2];
          v16 = *v18 == (_QWORD)v6;
          v6 = v18;
        }
        while (!v16);
      }
      v6 = v18;
      v7 = v15;
      if (v15 == v5)
        goto LABEL_31;
    }
  }
  v34 = sub_19C1A0644();
  result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_19C255CA4();
    return 0;
  }
  return result;
}

void sub_19C181958(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;

  if (a17 < 0)
    operator delete(__p);
  v19 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v20 = (uint64_t)v19;
    v21 = sub_19C1A0644();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      sub_19C255CD0(v20, v21);
  }
  else
  {
    v22 = sub_19C1A0644();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      sub_19C255D44();
  }
  __cxa_end_catch();
  JUMPOUT(0x19C181924);
}

void sub_19C1819E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C181A08(uint64_t a1, uint64_t a2)
{
  _QWORD *OutputPorts;
  uint64_t *v4;
  uint64_t DataSpan;
  void *__p[2];
  char v8;
  void **v9;

  sub_19C22E6B8(a1, a2, (uint64_t)__p);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)(a1 + 328));
  if (sub_19C080120(OutputPorts, (uint64_t)__p))
  {
    v9 = __p;
    v4 = sub_19C182AB0(a1 + 344, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v9);
    DataSpan = E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v4[5]);
    if ((v8 & 0x80000000) == 0)
      return DataSpan;
  }
  else
  {
    DataSpan = 0;
    if ((v8 & 0x80000000) == 0)
      return DataSpan;
  }
  operator delete(__p[0]);
  return DataSpan;
}

void sub_19C181AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *sub_19C181ACC(uint64_t a1)
{
  __CFArray *Mutable;
  int v3;
  _QWORD *Instance;
  const void **v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  int v10;
  size_t v11;
  uint64_t *v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  int v18;
  size_t v19;
  unint64_t v20;
  void **p_dst;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  E5RT::IOPort *OutputPortRef;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v27;
  uint64_t *v28;
  uint64_t DataSpan;
  unint64_t v30;
  CFIndex v31;
  uint64_t v32;
  unint64_t v33;
  CFIndex v34;
  unint64_t v35;
  BOOL v36;
  uint64_t **v37;
  char *v38;
  std::runtime_error *exception;
  _OWORD v41[2];
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  void **__dst;
  size_t v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD v49[2];
  void **v50;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (*(int *)(a1 + 56) >= 1)
  {
    v3 = 0;
    do
    {
      if (qword_1EE4188F0 != -1)
        dispatch_once(&qword_1EE4188F0, &unk_1E3D251C0);
      Instance = (_QWORD *)_CFRuntimeCreateInstance();
      Instance[3] = 0;
      Instance[6] = 0;
      Instance[2] = Instance + 3;
      Instance[4] = 0;
      Instance[5] = Instance + 6;
      Instance[8] = 0;
      Instance[9] = 0;
      Instance[7] = 0;
      CFArrayAppendValue(Mutable, Instance);
      CFRelease(Instance);
      ++v3;
    }
    while (v3 < *(_DWORD *)(a1 + 56));
  }
  v49[0] = 0;
  v49[1] = 0;
  v48 = v49;
  v5 = *(const void ***)(a1 + 272);
  if (v5)
  {
    while (1)
    {
      v6 = (uint64_t **)v49[0];
      if (v49[0])
      {
        v7 = *((char *)v5 + 63);
        if (v7 >= 0)
          v8 = *((unsigned __int8 *)v5 + 63);
        else
          v8 = (size_t)v5[6];
        if (v7 >= 0)
          v9 = v5 + 5;
        else
          v9 = v5[5];
        do
        {
          v10 = *((char *)v6 + 55);
          if (v10 >= 0)
            v11 = *((unsigned __int8 *)v6 + 55);
          else
            v11 = (size_t)v6[5];
          if (v10 >= 0)
            v12 = (uint64_t *)(v6 + 4);
          else
            v12 = v6[4];
          if (v11 >= v8)
            v13 = v8;
          else
            v13 = v11;
          v14 = memcmp(v9, v12, v13);
          v15 = v8 < v11;
          if (v14)
            v15 = v14 < 0;
          if (!v15)
          {
            v16 = memcmp(v12, v9, v13);
            v17 = v11 < v8;
            if (v16)
              v17 = v16 < 0;
            if (!v17)
              goto LABEL_8;
            ++v6;
          }
          v6 = (uint64_t **)*v6;
        }
        while (v6);
      }
      sub_19C08087C(&v48, v5 + 5, (uint64_t)(v5 + 5));
      v18 = *((char *)v5 + 63);
      if (v18 >= 0)
        v19 = *((unsigned __int8 *)v5 + 63);
      else
        v19 = (size_t)v5[6];
      v20 = v19 + 4;
      if (v19 + 4 >= 0x7FFFFFFFFFFFFFF8)
        sub_19C07C774();
      if (v20 >= 0x17)
      {
        v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v22 = v20 | 7;
        v23 = v22 + 1;
        p_dst = (void **)operator new(v22 + 1);
        v46 = v19 + 4;
        v47 = v23 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        v46 = 0;
        v47 = 0;
        __dst = 0;
        p_dst = (void **)&__dst;
        HIBYTE(v47) = v19 + 4;
        if (!v19)
          goto LABEL_47;
      }
      if (v18 >= 0)
        v24 = v5 + 5;
      else
        v24 = v5[5];
      memmove(p_dst, v24, v19);
LABEL_47:
      strcpy((char *)p_dst + v19, "_out");
      OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
      PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
      v27 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
      sub_19C181230((uint64_t)v43, v27, 1);
      v50 = (void **)&__dst;
      v28 = sub_19C182AB0(a1 + 344, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&v50);
      DataSpan = E5RT::BufferObject::GetDataSpan((E5RT::BufferObject *)v28[5]);
      LODWORD(v31) = *(_DWORD *)(a1 + 56);
      if ((int)v31 >= 1)
      {
        v32 = DataSpan;
        v33 = v30;
        v34 = 0;
        do
        {
          v35 = v33 / (int)v31;
          if (v33 % (int)v31 || v33 < (int)v31 || (v33 > v35 * v34 ? (v36 = v35 * v34 + v35 > v33) : (v36 = 1), v36))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "index out of bounds");
            exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
            __cxa_throw(exception, (struct type_info *)off_1E3D1C4B0, MEMORY[0x1E0DE42B0]);
          }
          v37 = (uint64_t **)((char *)CFArrayGetValueAtIndex(Mutable, v34) + 16);
          v41[0] = v43[0];
          v41[1] = v43[1];
          v42 = v44;
          sub_19C187658((uint64_t)v37, (__int128 *)(v5 + 5), (uint64_t)v41);
          sub_19C187604(v37, (__int128 *)(v5 + 5), (char *)(v32 + v35 * v34++), v35);
          v31 = *(int *)(a1 + 56);
        }
        while (v34 < v31);
      }
      if (SHIBYTE(v47) < 0)
        operator delete(__dst);
LABEL_8:
      v5 = (const void **)*v5;
      if (!v5)
      {
        v38 = (char *)v49[0];
        goto LABEL_60;
      }
    }
  }
  v38 = 0;
LABEL_60:
  sub_19C098FBC((uint64_t)&v48, v38);
  return Mutable;
}

void sub_19C181EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,char *a26)
{
  sub_19C098FBC((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

void sub_19C181F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,char *a29)
{
  if (a27 < 0)
    operator delete(__p);
  sub_19C098FBC((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

uint64_t sub_19C181F9C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  E5RT::IOPort *InputPortRef;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v5;
  uint64_t NumElements;
  void *__p[2];
  unsigned __int8 v9;

  sub_19C22E3BC(a1, a2, (uint64_t)__p);
  v2 = v9;
  if ((v9 & 0x80u) != 0)
    v2 = (unint64_t)__p[1];
  if (v2)
  {
    InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
    v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    NumElements = E5RT::TensorDescriptor::GetNumElements(v5);
    if ((v9 & 0x80) == 0)
      return NumElements;
  }
  else
  {
    NumElements = 0;
    if ((v9 & 0x80) == 0)
      return NumElements;
  }
  operator delete(__p[0]);
  return NumElements;
}

void sub_19C18202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C182048(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  E5RT::IOPort *OutputPortRef;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v5;
  uint64_t NumElements;
  void *__p[2];
  unsigned __int8 v9;

  sub_19C22E6B8(a1, a2, (uint64_t)__p);
  v2 = v9;
  if ((v9 & 0x80u) != 0)
    v2 = (unint64_t)__p[1];
  if (v2)
  {
    OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
    v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    NumElements = E5RT::TensorDescriptor::GetNumElements(v5);
    if ((v9 & 0x80) == 0)
      return NumElements;
  }
  else
  {
    NumElements = 0;
    if ((v9 & 0x80) == 0)
      return NumElements;
  }
  operator delete(__p[0]);
  return NumElements;
}

void sub_19C1820D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1820F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  E5RT::IOPort *InputPortRef;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v8;
  void *__p[2];
  unsigned __int8 v10;

  sub_19C22E3BC(a1, a2, (uint64_t)__p);
  v4 = v10;
  v5 = v10;
  if ((v10 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v4)
  {
    InputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetInputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(InputPortRef);
    v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    sub_19C181230(a3, v8, 0);
    if ((v10 & 0x80) == 0)
      return;
LABEL_7:
    operator delete(__p[0]);
    return;
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((v5 & 0x80) != 0)
    goto LABEL_7;
}

void sub_19C182190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1821AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  unsigned __int8 v5;
  E5RT::IOPort *OutputPortRef;
  E5RT::OperandDescriptor *PortDescriptorRef;
  E5RT::TensorDescriptor *v8;
  void *__p[2];
  unsigned __int8 v10;

  sub_19C22E6B8(a1, a2, (uint64_t)__p);
  v4 = v10;
  v5 = v10;
  if ((v10 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v4)
  {
    OutputPortRef = (E5RT::IOPort *)E5RT::ExecutionStreamOperation::GetOutputPortRef();
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
    v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    sub_19C181230(a3, v8, 0);
    if ((v10 & 0x80) == 0)
      return;
LABEL_7:
    operator delete(__p[0]);
    return;
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((v5 & 0x80) != 0)
    goto LABEL_7;
}

void sub_19C182248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C182264()
{
  return 0;
}

_QWORD *sub_19C18226C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C07DA0C();
    v5 = 24 * a3;
    v6 = operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_19C07C6E8(&v6[v7], *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_19C182348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C18239C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_19C18239C(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_19C182430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  float v29;
  float v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[3];

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = sub_19C07D2D0((uint64_t)v43, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  sub_19C18285C(a1, v12, a3, a4, (uint64_t)v43);
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v13 || (float)(v30 * (float)v13) < v29)
  {
    v32 = 1;
    if (v13 >= 3)
      v32 = (v13 & (v13 - 1)) != 0;
    v33 = v32 | (2 * v13);
    v34 = vcvtps_u32_f32(v29 / v30);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_65:
        sub_19C07D71C(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v40 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        if (v31)
          goto LABEL_54;
      }
      else
      {
        v4 = v12;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        if (v31)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v40 & v12;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v12));
      if (v31)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v43[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v43[0])
    {
      v41 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v41 >= v13)
          v41 %= v13;
      }
      else
      {
        v41 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_89;
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v31)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v43[0] = *v31;
  *v31 = v43[0];
LABEL_89:
  v16 = (uint64_t *)v43[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_19C182844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C182968((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C18285C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;

  v9 = a1 + 16;
  v10 = operator new(0x38uLL);
  v11 = v10;
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C07C6E8((_BYTE *)v10 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
    v10[4] = *(_QWORD *)(a3 + 16);
  }
  v12 = *a4;
  v11[5] = *a4;
  if (v12)
  {
    result = (_QWORD *)operator new();
    v14 = *a4;
    *result = &unk_1E3D250A0;
    result[1] = 0;
    result[2] = 0;
    result[3] = v14;
  }
  else
  {
    result = 0;
  }
  v11[6] = result;
  *a4 = 0;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_19C182930(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_19C182968(v1);
  _Unwind_Resume(a1);
}

void sub_19C182944(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  sub_19C182968(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C182968(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_19C182A04(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_19C182A18(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C182A30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000019C2777FDLL)
    return a1 + 24;
  if (((v3 & 0x800000019C2777FDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000019C2777FDLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000019C2777FDLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t *sub_19C182AB0(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  _BYTE *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_19C07D2D0((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x38uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = v28 + 2;
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19C07C6E8(v29, *(void **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)v29 = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        sub_19C07D71C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19C182EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C182968((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C182F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C182968((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C182F28(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  _BYTE *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_19C07D2D0((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = v28 + 2;
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19C07C6E8(v29, *(void **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)v29 = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v28[7] = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        sub_19C07D71C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19C183378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C1833A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C18338C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C1833A4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C1833A4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_19C183410(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_19C183424(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C18343C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000019C27789CLL)
    return a1 + 24;
  if (((v3 & 0x800000019C27789CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000019C27789CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000019C27789CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

unsigned __int8 *sub_19C1834BC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  __int128 *v29;
  __int128 v30;
  float v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  int8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v46[2];
  char v47;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_19C07D2D0((uint64_t)v46, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = *((_QWORD *)v15 + 1);
            if (v23 == v11)
            {
              v24 = v15[39];
              if ((v24 & 0x80u) == 0)
                v25 = v15[39];
              else
                v25 = *((_QWORD *)v15 + 3);
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 16);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 16);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x38uLL);
  v46[0] = v15;
  v46[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v29 = *a4;
  v30 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v30;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v15 + 5) = 0;
  *((_QWORD *)v15 + 6) = 0;
  v47 = 1;
  v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v32 = *(float *)(a1 + 32);
  if (v12 && (float)(v32 * (float)v12) >= v31)
  {
    v33 = *(_QWORD *)a1;
    v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v34)
    {
LABEL_54:
      *(_QWORD *)v15 = *v34;
LABEL_89:
      *v34 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v35 = 1;
    if (v12 >= 3)
      v35 = (v12 & (v12 - 1)) != 0;
    v36 = v35 | (2 * v12);
    v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37)
      prime = v37;
    else
      prime = v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v39)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v39)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v39 < 3uLL || (v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < *(_QWORD *)&v39)
LABEL_65:
        sub_19C07D71C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v43 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v33 = *(_QWORD *)a1;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v34)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v33 = *(_QWORD *)a1;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v34)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v43 & v11;
      v33 = *(_QWORD *)a1;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v11));
      if (v34)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v28;
  *v28 = v15;
  *(_QWORD *)(v33 + 8 * v4) = v28;
  if (*(_QWORD *)v15)
  {
    v44 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v44 >= v12)
        v44 %= v12;
    }
    else
    {
      v44 &= v12 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19C1838D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C182968((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_19C1838EC(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

char *sub_19C183910(std::string *this, uint64_t a2, unint64_t a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  std::string::value_type *v7;
  std::string *v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  unint64_t v16;
  unsigned int v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  unint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  size_t v25;
  std::string::size_type v26;
  _BYTE *v27;
  std::string::value_type *v28;
  unint64_t v29;
  std::string::value_type *v30;
  std::string *v31;
  unint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  std::string::value_type *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  std::string::size_type *v41;
  _OWORD *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  std::string::value_type v51;
  std::string v53;

  v7 = (std::string::value_type *)a3;
  v8 = this;
  v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v9 < 0)
  {
    v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      size = this->__r_.__value_.__l.__size_;
      if ((unint64_t)v13 > a3 || (unint64_t)v13->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v12 - size < __n_add)
        {
LABEL_6:
          std::string::__grow_by(this, v12, size + __n_add - v12, size, v10, 0, __n_add);
          v8->__r_.__value_.__l.__size_ = size + __n_add;
          v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
          v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_39:
            v8->__r_.__value_.__l.__size_ = v14;
            v13->__r_.__value_.__s.__data_[v14] = 0;
            v16 = a4 - v7;
            if (a4 == v7)
              goto LABEL_71;
            goto LABEL_40;
          }
LABEL_16:
          *((_BYTE *)&v8->__r_.__value_.__s + 23) = v14 & 0x7F;
          v13->__r_.__value_.__s.__data_[v14] = 0;
          v16 = a4 - v7;
          if (a4 == v7)
            goto LABEL_71;
LABEL_40:
          v27 = (char *)v13 + v10;
          if (v16 < 8)
          {
            v28 = v7;
            goto LABEL_70;
          }
          v28 = v7;
          if ((unint64_t)((char *)v13 + v10 - v7) >= 0x20)
          {
            if (v16 < 0x20)
            {
              v29 = 0;
              goto LABEL_57;
            }
            v29 = v16 & 0xFFFFFFFFFFFFFFE0;
            v33 = (__int128 *)(v7 + 16);
            v34 = (_OWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + v10);
            v35 = v16 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v36 = *v33;
              *(v34 - 1) = *(v33 - 1);
              *v34 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v16 == v29)
              goto LABEL_71;
            if ((v16 & 0x18) != 0)
            {
LABEL_57:
              v27 += v16 & 0xFFFFFFFFFFFFFFF8;
              v28 = &v7[v16 & 0xFFFFFFFFFFFFFFF8];
              v37 = &v7[v29];
              v38 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v10 + v29);
              v39 = v29 - (v16 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v40 = *(_QWORD *)v37;
                v37 += 8;
                *v38++ = v40;
                v39 += 8;
              }
              while (v39);
              if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_70;
LABEL_71:
              if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
              return (char *)v8 + v10;
            }
            v28 = &v7[v29];
            v27 += v29;
          }
          do
          {
LABEL_70:
            v49 = *v28++;
            *v27++ = v49;
          }
          while (v28 != a4);
          goto LABEL_71;
        }
LABEL_14:
        if (size == v10)
        {
          v14 = v10 + __n_add;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
        else
        {
          memmove((char *)v13 + v10 + __n_add, (char *)v13 + v10, size - v10);
          v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
        goto LABEL_16;
      }
LABEL_18:
      memset(&v53, 0, sizeof(v53));
      if ((std::string::value_type *)a3 == a4)
      {
        v19 = 0;
        v18 = 0;
        v17 = 0;
      }
      else
      {
        do
          std::string::push_back(&v53, *v7++);
        while (v7 != a4);
        v17 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        v19 = v53.__r_.__value_.__l.__size_;
        v18 = v53.__r_.__value_.__r.__words[0];
        LOBYTE(v9) = *((_BYTE *)&v8->__r_.__value_.__s + 23);
      }
      if ((v17 & 0x80u) == 0)
        v20 = &v53;
      else
        v20 = (std::string *)v18;
      if ((v17 & 0x80u) == 0)
        v21 = v17;
      else
        v21 = v19;
      if ((v9 & 0x80) != 0)
      {
        v22 = v8->__r_.__value_.__l.__size_;
        v23 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v23 - v22 >= __n_add)
        {
          v24 = (std::string *)v8->__r_.__value_.__r.__words[0];
          v25 = v22 - v10;
          if (v22 == v10)
          {
LABEL_32:
            v26 = v10 + __n_add;
            if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_47:
              v8->__r_.__value_.__l.__size_ = v26;
              v24->__r_.__value_.__s.__data_[v26] = 0;
              if (!v21)
                goto LABEL_76;
              goto LABEL_48;
            }
LABEL_36:
            *((_BYTE *)&v8->__r_.__value_.__s + 23) = v26 & 0x7F;
            v24->__r_.__value_.__s.__data_[v26] = 0;
            if (!v21)
              goto LABEL_76;
LABEL_48:
            v30 = (char *)v24 + v10;
            if (v21 < 8)
            {
              v31 = v20;
              goto LABEL_75;
            }
            v31 = v20;
            if ((unint64_t)((char *)v24 + v10 - (char *)v20) >= 0x20)
            {
              if (v21 < 0x20)
              {
                v32 = 0;
                goto LABEL_65;
              }
              v32 = v21 & 0xFFFFFFFFFFFFFFE0;
              v41 = &v20->__r_.__value_.__r.__words[2];
              v42 = (_OWORD *)((char *)&v24->__r_.__value_.__r.__words[2] + v10);
              v43 = v21 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v44 = *(_OWORD *)v41;
                *(v42 - 1) = *((_OWORD *)v41 - 1);
                *v42 = v44;
                v41 += 4;
                v42 += 2;
                v43 -= 32;
              }
              while (v43);
              if (v21 == v32)
                goto LABEL_76;
              if ((v21 & 0x18) != 0)
              {
LABEL_65:
                v30 += v21 & 0xFFFFFFFFFFFFFFF8;
                v31 = (std::string *)((char *)v20 + (v21 & 0xFFFFFFFFFFFFFFF8));
                v45 = (uint64_t *)((char *)v20 + v32);
                v46 = (std::string::size_type *)((char *)v24->__r_.__value_.__r.__words + v32 + v10);
                v47 = v32 - (v21 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v48 = *v45++;
                  *v46++ = v48;
                  v47 += 8;
                }
                while (v47);
                if (v21 != (v21 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_75;
LABEL_76:
                if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                {
                  v50 = (char *)(v8->__r_.__value_.__r.__words[0] + v10);
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v50;
                }
                else
                {
                  v50 = (char *)v8 + v10;
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v50;
                }
                operator delete(v53.__r_.__value_.__l.__data_);
                return v50;
              }
              v31 = (std::string *)((char *)v20 + v32);
              v30 += v32;
            }
            do
            {
LABEL_75:
              v51 = v31->__r_.__value_.__s.__data_[0];
              v31 = (std::string *)((char *)v31 + 1);
              *v30++ = v51;
            }
            while (v31 != (std::string *)((char *)v20 + v21));
            goto LABEL_76;
          }
LABEL_46:
          memmove((char *)v24 + v10 + __n_add, (char *)v24 + v10, v25);
          v26 = v22 + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_47;
          goto LABEL_36;
        }
      }
      else
      {
        v22 = v9;
        v23 = 22;
        v24 = v8;
        if (22 - (unint64_t)v9 >= __n_add)
        {
          v25 = v9 - v10;
          if (v9 == v10)
            goto LABEL_32;
          goto LABEL_46;
        }
      }
      std::string::__grow_by(v8, v23, v22 + __n_add - v23, v22, v10, 0, __n_add);
      v8->__r_.__value_.__l.__size_ = v22 + __n_add;
      v24 = (std::string *)v8->__r_.__value_.__r.__words[0];
      v26 = v22 + __n_add;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
      goto LABEL_36;
    }
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v10 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (a3 < (unint64_t)this || (unint64_t)this->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        v12 = 22;
        v13 = this;
        if (22 - size < __n_add)
          goto LABEL_6;
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  return (char *)v8 + v10;
}

void sub_19C183D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19C183DB0(std::string *this, uint64_t a2, unint64_t a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  std::string::value_type *v7;
  std::string *v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  unsigned int v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  unint64_t v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  size_t v24;
  std::string::size_type v25;
  _BYTE *v26;
  unint64_t v27;
  std::string::value_type *v28;
  std::string::value_type *v29;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  unint64_t v35;
  __int128 v36;
  _QWORD *v37;
  std::string::value_type *v38;
  unint64_t v39;
  uint64_t v40;
  std::string::size_type *v41;
  _OWORD *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  std::string::value_type v51;
  std::string v53;

  v7 = (std::string::value_type *)a3;
  v8 = this;
  v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v9 < 0)
  {
    v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      size = this->__r_.__value_.__l.__size_;
      if ((unint64_t)v13 > a3 || (unint64_t)v13->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v12 - size < __n_add)
        {
LABEL_6:
          std::string::__grow_by(this, v12, size + __n_add - v12, size, v10, 0, __n_add);
          v8->__r_.__value_.__l.__size_ = size + __n_add;
          v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
          v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_39:
            v8->__r_.__value_.__l.__size_ = v14;
            v13->__r_.__value_.__s.__data_[v14] = 0;
            if (v7 == a4)
              goto LABEL_72;
            goto LABEL_40;
          }
LABEL_16:
          *((_BYTE *)&v8->__r_.__value_.__s + 23) = v14 & 0x7F;
          v13->__r_.__value_.__s.__data_[v14] = 0;
          if (v7 == a4)
            goto LABEL_72;
LABEL_40:
          v26 = (char *)v13 + v10;
          v27 = a4 - v7;
          if ((unint64_t)(a4 - v7) < 8)
          {
            v28 = v7;
            goto LABEL_71;
          }
          if ((unint64_t)((char *)v13 + v10 - v7) < 0x20)
          {
            v28 = v7;
            goto LABEL_71;
          }
          if (v27 >= 0x20)
          {
            v32 = v27 & 0xFFFFFFFFFFFFFFE0;
            v33 = (_OWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + v10);
            v34 = (__int128 *)(v7 + 16);
            v35 = v27 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v36 = *v34;
              *(v33 - 1) = *(v34 - 1);
              *v33 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v27 == v32)
              goto LABEL_72;
            if ((v27 & 0x18) == 0)
            {
              v26 += v32;
              v28 = &v7[v32];
              do
              {
LABEL_71:
                v49 = *v28++;
                *v26++ = v49;
              }
              while (v28 != a4);
              goto LABEL_72;
            }
          }
          else
          {
            v32 = 0;
          }
          v28 = &v7[v27 & 0xFFFFFFFFFFFFFFF8];
          v26 += v27 & 0xFFFFFFFFFFFFFFF8;
          v37 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v10 + v32);
          v38 = &v7[v32];
          v39 = v32 - (v27 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v40 = *(_QWORD *)v38;
            v38 += 8;
            *v37++ = v40;
            v39 += 8;
          }
          while (v39);
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_71;
LABEL_72:
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
          return (char *)v8 + v10;
        }
LABEL_14:
        if (size == v10)
        {
          v14 = v10 + __n_add;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
        else
        {
          memmove((char *)v13 + v10 + __n_add, (char *)v13 + v10, size - v10);
          v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
        goto LABEL_16;
      }
LABEL_18:
      memset(&v53, 0, sizeof(v53));
      if ((std::string::value_type *)a3 == a4)
      {
        v18 = 0;
        v17 = 0;
        v16 = 0;
      }
      else
      {
        do
          std::string::push_back(&v53, *v7++);
        while (v7 != a4);
        v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        v18 = v53.__r_.__value_.__l.__size_;
        v17 = v53.__r_.__value_.__r.__words[0];
        LOBYTE(v9) = *((_BYTE *)&v8->__r_.__value_.__s + 23);
      }
      if ((v16 & 0x80u) == 0)
        v19 = &v53;
      else
        v19 = (std::string *)v17;
      if ((v16 & 0x80u) == 0)
        v20 = v16;
      else
        v20 = v18;
      if ((v9 & 0x80) != 0)
      {
        v21 = v8->__r_.__value_.__l.__size_;
        v22 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v22 - v21 >= __n_add)
        {
          v23 = (std::string *)v8->__r_.__value_.__r.__words[0];
          v24 = v21 - v10;
          if (v21 == v10)
          {
LABEL_32:
            v25 = v10 + __n_add;
            if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_46:
              v8->__r_.__value_.__l.__size_ = v25;
              v23->__r_.__value_.__s.__data_[v25] = 0;
              if (!v20)
                goto LABEL_77;
              goto LABEL_47;
            }
LABEL_36:
            *((_BYTE *)&v8->__r_.__value_.__s + 23) = v25 & 0x7F;
            v23->__r_.__value_.__s.__data_[v25] = 0;
            if (!v20)
              goto LABEL_77;
LABEL_47:
            v29 = (char *)v23 + v10;
            if (v20 < 8)
            {
              v30 = v19;
              goto LABEL_76;
            }
            v30 = v19;
            if ((unint64_t)((char *)v23 + v10 - (char *)v19) >= 0x20)
            {
              if (v20 < 0x20)
              {
                v31 = 0;
                goto LABEL_66;
              }
              v31 = v20 & 0xFFFFFFFFFFFFFFE0;
              v41 = &v19->__r_.__value_.__r.__words[2];
              v42 = (_OWORD *)((char *)&v23->__r_.__value_.__r.__words[2] + v10);
              v43 = v20 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v44 = *(_OWORD *)v41;
                *(v42 - 1) = *((_OWORD *)v41 - 1);
                *v42 = v44;
                v41 += 4;
                v42 += 2;
                v43 -= 32;
              }
              while (v43);
              if (v20 == v31)
                goto LABEL_77;
              if ((v20 & 0x18) != 0)
              {
LABEL_66:
                v29 += v20 & 0xFFFFFFFFFFFFFFF8;
                v30 = (std::string *)((char *)v19 + (v20 & 0xFFFFFFFFFFFFFFF8));
                v45 = (uint64_t *)((char *)v19 + v31);
                v46 = (std::string::size_type *)((char *)v23->__r_.__value_.__r.__words + v31 + v10);
                v47 = v31 - (v20 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v48 = *v45++;
                  *v46++ = v48;
                  v47 += 8;
                }
                while (v47);
                if (v20 != (v20 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_76;
LABEL_77:
                if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                {
                  v50 = (char *)(v8->__r_.__value_.__r.__words[0] + v10);
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v50;
                }
                else
                {
                  v50 = (char *)v8 + v10;
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v50;
                }
                operator delete(v53.__r_.__value_.__l.__data_);
                return v50;
              }
              v30 = (std::string *)((char *)v19 + v31);
              v29 += v31;
            }
            do
            {
LABEL_76:
              v51 = v30->__r_.__value_.__s.__data_[0];
              v30 = (std::string *)((char *)v30 + 1);
              *v29++ = v51;
            }
            while (v30 != (std::string *)((char *)v19 + v20));
            goto LABEL_77;
          }
LABEL_45:
          memmove((char *)v23 + v10 + __n_add, (char *)v23 + v10, v24);
          v25 = v21 + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_46;
          goto LABEL_36;
        }
      }
      else
      {
        v21 = v9;
        v22 = 22;
        v23 = v8;
        if (22 - (unint64_t)v9 >= __n_add)
        {
          v24 = v9 - v10;
          if (v9 == v10)
            goto LABEL_32;
          goto LABEL_45;
        }
      }
      std::string::__grow_by(v8, v22, v21 + __n_add - v22, v21, v10, 0, __n_add);
      v8->__r_.__value_.__l.__size_ = v21 + __n_add;
      v23 = (std::string *)v8->__r_.__value_.__r.__words[0];
      v25 = v21 + __n_add;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_46;
      goto LABEL_36;
    }
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v10 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((unint64_t)this > a3 || (unint64_t)this->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        v12 = 22;
        v13 = this;
        if (22 - size < __n_add)
          goto LABEL_6;
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  return (char *)v8 + v10;
}

void sub_19C18420C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C184258()
{
  uint64_t result;

  qword_1EE4188F8 = 0;
  unk_1EE418900 = "MontrealNeuralNetworkState";
  qword_1EE418908 = 0;
  unk_1EE418910 = 0;
  qword_1EE418918 = (uint64_t)sub_19C0803A4;
  unk_1EE418920 = 0u;
  unk_1EE418930 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE418958 = result;
  return result;
}

void sub_19C1842A8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xCu);
}

void sub_19C1842BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_19C1842C8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_19C1842EC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_19C184300(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t sub_19C184328(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  size_t v5;
  char *v6;
  size_t v7;
  char *v8;
  char *v9;
  char *v10;

  v3 = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 80) = a3;
  *(_DWORD *)(a1 + 88) = 0;
  v5 = a3 * a2;
  if (a3 * a2)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_19C07DA0C();
    v6 = (char *)operator new(a3 * a2);
    bzero(v6, v5);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = &v6[v5];
    *(_QWORD *)(a1 + 16) = &v6[v5];
    if (v3)
      goto LABEL_4;
LABEL_7:
    v10 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (!a3)
    goto LABEL_7;
LABEL_4:
  if (v3 >> 62)
    sub_19C07DA0C();
  v7 = 4 * v3;
  v8 = (char *)operator new(4 * v3);
  v9 = &v8[4 * v3];
  bzero(v8, 4 * v3);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = (char *)operator new(4 * v3);
  v3 = (unint64_t)&v10[4 * v3];
  memset_pattern16(v10, &unk_19C2778F0, v7);
LABEL_8:
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = v3;
  return a1;
}

void sub_19C184454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;
  void *v15;

  v13 = *(void **)(v11 + 48);
  if (v13)
  {
    *(_QWORD *)(v11 + 56) = v13;
    operator delete(v13);
    v14 = *(void **)(v11 + 24);
    if (!v14)
    {
LABEL_3:
      v15 = *(void **)v11;
      if (!*(_QWORD *)v11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v14 = *(void **)(v11 + 24);
    if (!v14)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 32) = v14;
  operator delete(v14);
  v15 = *(void **)v11;
  if (!*(_QWORD *)v11)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v11 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1844D8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19C184528(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t *v4;
  size_t v5;
  const char *v6;
  vDSP_Length v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  float *v12;
  float v13;
  float v14;
  float __B;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = sub_19C18731C(a2 + 16, a3);
  v5 = *(_QWORD *)(a1 + 72);
  if (!v5)
    return 0xFFFFFFFFLL;
  v6 = (const char *)v4;
  memmove((void *)(*(_QWORD *)a1 + v5 * *(int *)(a1 + 88)), v4, v5);
  v7 = *(_QWORD *)(a1 + 72);
  if (!v7)
    return 0xFFFFFFFFLL;
  v8 = 0;
  while (!v6[v8])
  {
    if (v7 == ++v8)
      return 0xFFFFFFFFLL;
  }
  v9 = *(unsigned int *)(a1 + 88);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  if (v7 >> 62)
    sub_19C07DA0C();
  v11 = operator new(4 * v7);
  bzero(v11, 4 * v7);
  vDSP_vflt8(v6, 1, (float *)v11, 1, v7);
  __B = 0.039062;
  vDSP_vsmul((const float *)v11, 1, &__B, (float *)v11, 1, *(_QWORD *)(a1 + 72));
  v12 = (float *)operator new(4uLL);
  *v12 = 0.0;
  vDSP_svesq((const float *)v11, 1, v12, *(_QWORD *)(a1 + 72));
  v13 = sqrtf(*v12);
  v14 = 1.0;
  if (*v12 > 0.0)
    v14 = v13;
  *(float *)(*(_QWORD *)(a1 + 48) + 4 * (int)v9) = v14;
  *(_BYTE *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 88) = (unint64_t)(*(int *)(a1 + 88) + 1) % *(_QWORD *)(a1 + 80);
  operator delete(v12);
  operator delete(v11);
  return v9;
}

void sub_19C184698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  operator delete(v12);
  operator delete(v11);
  _Unwind_Resume(a1);
}

float *sub_19C1846EC(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t *v4;
  vDSP_Length v5;
  unint64_t v6;
  size_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  float *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  vDSP_Length v17;
  float *v18;
  vDSP_Length v19;
  float *v20;
  float v22;
  void *__p;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  float __B;
  char *v30;
  char *v31;
  char *v32;

  v4 = sub_19C18731C(a2 + 16, a3);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v31 = 0;
  v32 = 0;
  v30 = 0;
  if (v6)
  {
    if (v6 >> 62)
      sub_19C07DA0C();
    v7 = 4 * v6;
    v8 = (char *)operator new(4 * v6);
    v6 = (unint64_t)&v8[4 * v6];
    bzero(v8, v7);
    v10 = a1 + 24;
    v9 = *(void **)(a1 + 24);
    if (v9)
      goto LABEL_4;
  }
  else
  {
    v8 = 0;
    v10 = a1 + 24;
    v9 = *(void **)(a1 + 24);
    if (v9)
    {
LABEL_4:
      *(_QWORD *)(a1 + 32) = v9;
      operator delete(v9);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      v5 = *(_QWORD *)(a1 + 72);
    }
  }
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v6;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  if (v5)
  {
    if (v5 >> 62)
      sub_19C07DA0C();
    v11 = (char *)operator new(4 * v5);
    v30 = v11;
    v32 = &v11[4 * v5];
    bzero(v11, 4 * v5);
    v31 = v32;
  }
  else
  {
    v11 = 0;
  }
  vDSP_vflt8((const char *)v4, 1, (float *)v11, 1, v5);
  __B = 0.039062;
  vDSP_vsmul((const float *)v11, 1, &__B, (float *)v11, 1, *(_QWORD *)(a1 + 72));
  v12 = (float *)operator new(4uLL);
  *v12 = 0.0;
  vDSP_svesq((const float *)v11, 1, v12, *(_QWORD *)(a1 + 72));
  if (*v12 <= 0.0)
  {
    v20 = *(float **)v10;
    operator delete(v12);
    if (!v11)
      return v20;
LABEL_21:
    v31 = v11;
    operator delete(v11);
    return v20;
  }
  *v12 = sqrtf(*v12);
  v13 = *(_QWORD *)(a1 + 80);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  if (v13)
  {
    if (v13 >> 62)
      sub_19C07DA0C();
    v14 = (char *)operator new(4 * v13);
    v26 = v14;
    v28 = &v14[4 * v13];
    bzero(v14, 4 * v13);
    v27 = v28;
    v15 = *(_QWORD *)(a1 + 72);
    v24 = 0;
    v25 = 0;
    __p = 0;
    if (v15)
    {
LABEL_15:
      if (v15 >> 62)
        sub_19C07DA0C();
      v16 = (char *)operator new(4 * v15);
      __p = v16;
      v25 = &v16[4 * v15];
      bzero(v16, 4 * v15);
      v24 = v25;
      if (v13)
        goto LABEL_17;
LABEL_25:
      v19 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 72);
    v24 = 0;
    v25 = 0;
    __p = 0;
    if (v15)
      goto LABEL_15;
  }
  v16 = 0;
  if (!v13)
    goto LABEL_25;
LABEL_17:
  v17 = 0;
  v18 = (float *)v14;
  do
  {
    vDSP_vflt8((const char *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 72) * v17), 1, (float *)v16, 1, *(_QWORD *)(a1 + 72));
    v22 = 0.039062;
    vDSP_vsmul((const float *)v16, 1, &v22, (float *)v16, 1, *(_QWORD *)(a1 + 72));
    vDSP_dotpr((const float *)v16, 1, (const float *)v11, 1, v18, *(_QWORD *)(a1 + 72));
    ++v17;
    v19 = *(_QWORD *)(a1 + 80);
    ++v18;
  }
  while (v17 < v19);
LABEL_26:
  vDSP_vsdiv((const float *)v14, 1, v12, *(float **)v10, 1, v19);
  vDSP_vdiv(*(const float **)(a1 + 48), 1, *(const float **)(a1 + 24), 1, *(float **)(a1 + 24), 1, *(_QWORD *)(a1 + 80));
  v20 = *(float **)v10;
  if (__p)
    operator delete(__p);
  if (v14)
    operator delete(v14);
  v11 = v30;
  operator delete(v12);
  if (v11)
    goto LABEL_21;
  return v20;
}

void sub_19C184A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  if (v20)
    operator delete(v20);
  operator delete(v19);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t sub_19C184AF4(uint64_t a1, uint64_t a2, uint64_t a3, int *__src)
{
  int v7;
  uint64_t v8;
  char **v9;
  int v10;
  uint64_t v11;
  char *v12;
  char **v13;
  char **v14;
  int v15;
  char *v16;
  uint64_t v17;
  int64x2_t v19;
  void *__p[2];
  uint64_t v21;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v21 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18E344(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D21CD8;
  v7 = __src[80];
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (char **)(a1 + 48);
    v19 = vdupq_n_s64(1uLL);
    do
    {
      v10 = v8 + 9;
      v11 = __src[4 * v8 + 64];
      v12 = *v9;
      v13 = (char **)(a1 + 48);
      v14 = (char **)(a1 + 48);
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            v14 = (char **)v12;
            v15 = *((_DWORD *)v12 + 8);
            if (v15 <= v10)
              break;
            v12 = *v14;
            v13 = v14;
            if (!*v14)
              goto LABEL_17;
          }
          if (v15 >= v10)
            break;
          v12 = v14[1];
          if (!v12)
          {
            v13 = v14 + 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
LABEL_17:
        v16 = (char *)operator new(0x50uLL);
        *((_DWORD *)v16 + 8) = v10;
        *(int64x2_t *)(v16 + 40) = v19;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 8) = 0;
        *((_QWORD *)v16 + 9) = 0;
        *((_QWORD *)v16 + 7) = v11;
        *((_QWORD *)v16 + 2) = v14;
        *v13 = v16;
        v17 = **(_QWORD **)(a1 + 40);
        if (v17)
        {
          *(_QWORD *)(a1 + 40) = v17;
          v16 = *v13;
        }
        sub_19C07CC40(*(uint64_t **)(a1 + 48), (uint64_t *)v16);
        ++*(_QWORD *)(a1 + 56);
        v7 = __src[80];
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return a1;
}

void sub_19C184C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C184CB4(_QWORD *a1, int a2, int a3)
{
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int64_t v11;
  uint64_t **v12;
  int64_t v13;
  uint64_t **v14;
  unint64_t v15;
  int64_t v16;
  uint64_t **v17;
  int64_t v18;
  uint64_t **v19;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v4 = a3 * a2;
  v5 = a1[7];
  if (a3 * a2 >= 1)
  {
    if (!v5)
      goto LABEL_12;
    v6 = 0;
    v7 = 1;
    do
    {
      if (v7)
      {
        v8 = 0;
        do
        {
          v9 = *sub_19C18FEB8((uint64_t)a1, (int)v8 + 9);
          v10 = *sub_19C18FCD8((uint64_t)a1, 1);
          (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 168))(&v21, a1, (v8 + 9));
          memcpy(v9, v10, 4 * (int)v21 * v22 * v23);
          (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 168))(&v21, a1, (v8 + 9));
          v11 = (unint64_t)(v21 * v22 * v23) << 32;
          v12 = sub_19C18FCD8((uint64_t)a1, 1);
          *v12 = (uint64_t *)((char *)*v12 + (v11 >> 30));
          (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 168))(&v21, a1, (v8 + 9));
          v13 = (unint64_t)(v21 * v22 * v23) << 32;
          v14 = sub_19C18FEB8((uint64_t)a1, (int)v8 + 9);
          *v14 = (uint64_t *)((char *)*v14 + (v13 >> 30));
          ++v8;
          v5 = a1[7];
        }
        while (v5 > v8);
        v7 = a1[7];
      }
      ++v6;
    }
    while (v6 != v4);
  }
  if (v5)
  {
    v15 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 168))(&v21, a1, (v15 + 9));
      v16 = (unint64_t)(v21 * v22 * v23 * v24 * v25) << 32;
      v17 = sub_19C18FEB8((uint64_t)a1, (int)v15 + 9);
      *v17 = (uint64_t *)((char *)*v17 - (v16 >> 30));
      ++v15;
    }
    while (a1[7] > v15);
  }
LABEL_12:
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 160))(&v21, a1, 1);
  v18 = (unint64_t)(v21 * v22 * v23 * v24 * v25) << 32;
  v19 = sub_19C18FCD8((uint64_t)a1, 1);
  *v19 = (uint64_t *)((char *)*v19 - (v18 >> 30));
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t *sub_19C184F08(uint64_t *result)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t *v3;
  int v4;
  char *v5;
  int v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  char *v14;
  uint64_t **v15;
  char *v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;

  if (result[7])
  {
    v1 = result;
    v2 = 0;
    v3 = result + 6;
    do
    {
      v4 = (*(uint64_t (**)(uint64_t *))(*v1 + 224))(v1);
      v5 = (char *)v1[6];
      v6 = v2 + 9;
      v7 = (uint64_t **)v3;
      v8 = (char *)v3;
      if (v5)
      {
        while (1)
        {
          while (1)
          {
            v8 = v5;
            v9 = *((_DWORD *)v5 + 8);
            if (v9 <= v6)
              break;
            v5 = *(char **)v8;
            v7 = (uint64_t **)v8;
            if (!*(_QWORD *)v8)
              goto LABEL_12;
          }
          if (v9 >= v6)
            break;
          v5 = (char *)*((_QWORD *)v8 + 1);
          if (!v5)
          {
            v7 = (uint64_t **)(v8 + 8);
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v10 = v8;
        v8 = (char *)operator new(0x50uLL);
        *((_DWORD *)v8 + 8) = v6;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
        *((_QWORD *)v8 + 9) = 0;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v10;
        *v7 = (uint64_t *)v8;
        v11 = *(_QWORD *)v1[5];
        v12 = (uint64_t *)v8;
        if (v11)
        {
          v1[5] = v11;
          v12 = *v7;
        }
        sub_19C07CC40((uint64_t *)v1[6], v12);
        ++v1[7];
      }
      *((_QWORD *)v8 + 8) = v4;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v1 + 216))(v1, 1);
      v13 = (int)result;
      v14 = (char *)v1[6];
      v15 = (uint64_t **)v3;
      v16 = (char *)v3;
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            v16 = v14;
            v17 = *((_DWORD *)v14 + 8);
            if (v17 <= v6)
              break;
            v14 = *(char **)v16;
            v15 = (uint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_22;
          }
          if (v17 >= v6)
            break;
          v14 = (char *)*((_QWORD *)v16 + 1);
          if (!v14)
          {
            v15 = (uint64_t **)(v16 + 8);
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_22:
        v18 = v16;
        v16 = (char *)operator new(0x50uLL);
        *((_DWORD *)v16 + 8) = v6;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        *((_QWORD *)v16 + 9) = 0;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v18;
        *v15 = (uint64_t *)v16;
        v19 = *(_QWORD *)v1[5];
        v20 = (uint64_t *)v16;
        if (v19)
        {
          v1[5] = v19;
          v20 = *v15;
        }
        result = sub_19C07CC40((uint64_t *)v1[6], v20);
        ++v1[7];
      }
      *((_QWORD *)v16 + 9) = v13;
      ++v2;
    }
    while (v1[7] > v2);
  }
  return result;
}

uint64_t sub_19C1850DC(uint64_t a1, uint64_t a2, uint64_t a3, int *__src)
{
  int v7;
  uint64_t v8;
  char **v9;
  int v10;
  uint64_t v11;
  char *v12;
  char **v13;
  char **v14;
  int v15;
  char *v16;
  uint64_t v17;
  int64x2_t v19;
  void *__p[2];
  uint64_t v21;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v21 = *(_QWORD *)(a2 + 16);
  }
  sub_19C19065C(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D21B68;
  v7 = __src[80];
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (char **)(a1 + 48);
    v19 = vdupq_n_s64(1uLL);
    do
    {
      v10 = v8 + 9;
      v11 = __src[4 * v8 + 64];
      v12 = *v9;
      v13 = (char **)(a1 + 48);
      v14 = (char **)(a1 + 48);
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            v14 = (char **)v12;
            v15 = *((_DWORD *)v12 + 8);
            if (v15 <= v10)
              break;
            v12 = *v14;
            v13 = v14;
            if (!*v14)
              goto LABEL_17;
          }
          if (v15 >= v10)
            break;
          v12 = v14[1];
          if (!v12)
          {
            v13 = v14 + 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
LABEL_17:
        v16 = (char *)operator new(0x50uLL);
        *((_DWORD *)v16 + 8) = v10;
        *(int64x2_t *)(v16 + 40) = v19;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 8) = 0;
        *((_QWORD *)v16 + 9) = 0;
        *((_QWORD *)v16 + 7) = v11;
        *((_QWORD *)v16 + 2) = v14;
        *v13 = v16;
        v17 = **(_QWORD **)(a1 + 40);
        if (v17)
        {
          *(_QWORD *)(a1 + 40) = v17;
          v16 = *v13;
        }
        sub_19C07CC40(*(uint64_t **)(a1 + 48), (uint64_t *)v16);
        ++*(_QWORD *)(a1 + 56);
        v7 = __src[80];
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return a1;
}

void sub_19C185268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C18529C(_QWORD *a1, int a2, int a3)
{
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int64_t v11;
  uint64_t **v12;
  int64_t v13;
  uint64_t **v14;
  unint64_t v15;
  int64_t v16;
  uint64_t **v17;
  int64_t v18;
  uint64_t **v19;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v4 = a3 * a2;
  v5 = a1[7];
  if (a3 * a2 >= 1)
  {
    if (!v5)
      goto LABEL_12;
    v6 = 0;
    v7 = 1;
    do
    {
      if (v7)
      {
        v8 = 0;
        do
        {
          v9 = *sub_19C18FEB8((uint64_t)a1, (int)v8 + 9);
          v10 = *sub_19C18FCD8((uint64_t)a1, 1);
          (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 168))(&v21, a1, (v8 + 9));
          memcpy(v9, v10, (int)v21 * v22 * v23);
          (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 168))(&v21, a1, (v8 + 9));
          v11 = (unint64_t)(v21 * v22 * v23) << 32;
          v12 = sub_19C18FCD8((uint64_t)a1, 1);
          *v12 = (uint64_t *)((char *)*v12 + (v11 >> 30));
          (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 168))(&v21, a1, (v8 + 9));
          v13 = (unint64_t)(v21 * v22 * v23) << 32;
          v14 = sub_19C18FEB8((uint64_t)a1, (int)v8 + 9);
          *v14 = (uint64_t *)((char *)*v14 + (v13 >> 30));
          ++v8;
          v5 = a1[7];
        }
        while (v5 > v8);
        v7 = a1[7];
      }
      ++v6;
    }
    while (v6 != v4);
  }
  if (v5)
  {
    v15 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD))(*a1 + 168))(&v21, a1, (v15 + 9));
      v16 = (unint64_t)(v21 * v22 * v23 * v24 * v25) << 32;
      v17 = sub_19C18FEB8((uint64_t)a1, (int)v15 + 9);
      *v17 = (uint64_t *)((char *)*v17 - (v16 >> 30));
      ++v15;
    }
    while (a1[7] > v15);
  }
LABEL_12:
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 160))(&v21, a1, 1);
  v18 = (unint64_t)(v21 * v22 * v23 * v24 * v25) << 32;
  v19 = sub_19C18FCD8((uint64_t)a1, 1);
  *v19 = (uint64_t *)((char *)*v19 - (v18 >> 30));
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t *sub_19C1854F0(uint64_t *result)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t *v3;
  int v4;
  char *v5;
  int v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  char *v14;
  uint64_t **v15;
  char *v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;

  if (result[7])
  {
    v1 = result;
    v2 = 0;
    v3 = result + 6;
    do
    {
      v4 = (*(uint64_t (**)(uint64_t *))(*v1 + 224))(v1);
      v5 = (char *)v1[6];
      v6 = v2 + 9;
      v7 = (uint64_t **)v3;
      v8 = (char *)v3;
      if (v5)
      {
        while (1)
        {
          while (1)
          {
            v8 = v5;
            v9 = *((_DWORD *)v5 + 8);
            if (v9 <= v6)
              break;
            v5 = *(char **)v8;
            v7 = (uint64_t **)v8;
            if (!*(_QWORD *)v8)
              goto LABEL_12;
          }
          if (v9 >= v6)
            break;
          v5 = (char *)*((_QWORD *)v8 + 1);
          if (!v5)
          {
            v7 = (uint64_t **)(v8 + 8);
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v10 = v8;
        v8 = (char *)operator new(0x50uLL);
        *((_DWORD *)v8 + 8) = v6;
        *(_OWORD *)(v8 + 40) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
        *((_QWORD *)v8 + 9) = 0;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v10;
        *v7 = (uint64_t *)v8;
        v11 = *(_QWORD *)v1[5];
        v12 = (uint64_t *)v8;
        if (v11)
        {
          v1[5] = v11;
          v12 = *v7;
        }
        sub_19C07CC40((uint64_t *)v1[6], v12);
        ++v1[7];
      }
      *((_QWORD *)v8 + 8) = v4;
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v1 + 216))(v1, 1);
      v13 = (int)result;
      v14 = (char *)v1[6];
      v15 = (uint64_t **)v3;
      v16 = (char *)v3;
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            v16 = v14;
            v17 = *((_DWORD *)v14 + 8);
            if (v17 <= v6)
              break;
            v14 = *(char **)v16;
            v15 = (uint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_22;
          }
          if (v17 >= v6)
            break;
          v14 = (char *)*((_QWORD *)v16 + 1);
          if (!v14)
          {
            v15 = (uint64_t **)(v16 + 8);
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_22:
        v18 = v16;
        v16 = (char *)operator new(0x50uLL);
        *((_DWORD *)v16 + 8) = v6;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        *((_QWORD *)v16 + 9) = 0;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v18;
        *v15 = (uint64_t *)v16;
        v19 = *(_QWORD *)v1[5];
        v20 = (uint64_t *)v16;
        if (v19)
        {
          v1[5] = v19;
          v20 = *v15;
        }
        result = sub_19C07CC40((uint64_t *)v1[6], v20);
        ++v1[7];
      }
      *((_QWORD *)v16 + 9) = v13;
      ++v2;
    }
    while (v1[7] > v2);
  }
  return result;
}

void sub_19C1856C8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C18E518(a1);
  operator delete(v1);
}

void sub_19C1856E0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C190830(a1);
  operator delete(v1);
}

uint64_t sub_19C1856F4(uint64_t result, int a2, int a3)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a2;
  *(_DWORD *)(result + 28) = a3;
  *(_DWORD *)(result + 32) = 1;
  return result;
}

_DWORD *sub_19C185710(_DWORD *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  *result = a4;
  result[1] = a5;
  result[2] = a6;
  result[3] = a7;
  result[4] = a8;
  result[5] = a9;
  result[6] = a2;
  result[7] = a3;
  result[8] = 1;
  return result;
}

_DWORD *sub_19C185730(_DWORD *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  *result = a5;
  result[1] = a6;
  result[2] = a7;
  result[3] = a8;
  result[4] = a9;
  result[5] = a10;
  result[6] = a2;
  result[7] = a3;
  result[8] = a4;
  return result;
}

void sub_19C185968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_19C185AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v14;

  _Unwind_Resume(a1);
}

void sub_19C185AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

_QWORD *sub_19C185B84(_QWORD *result)
{
  *result = &off_1E3D22DA8;
  result[1] = 0;
  return result;
}

_QWORD *sub_19C185B94(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E3D22DA8;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_19C185BD0(_QWORD *__p)
{
  const void *v2;

  *__p = &off_1E3D22DA8;
  v2 = (const void *)__p[1];
  if (v2)
    CFRelease(v2);
  operator delete(__p);
}

uint64_t sub_19C185C0C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  MontrealNNModelNetwork *v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t k;
  void *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  int v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t n;
  void *v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  int v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  int v129;
  const char *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t kk;
  void *v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  int v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  int v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  void **v183;
  void **v184;
  void *v185;
  void **v186;
  void **v187;
  void *v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  uint64_t ii;
  void *v195;
  void *v196;
  id v197;
  id obj;
  id obja;
  id objb;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t jj;
  id j;
  id m;
  id v209;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  void *__p[2];
  unint64_t v240;
  _QWORD __dst[88];
  _OWORD __src[44];
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  void *v247;
  void **v248;
  void *v249;
  void **v250;
  _BYTE v251[128];
  _BYTE v252[128];
  _BYTE v253[128];
  _BYTE v254[128];
  _BYTE v255[128];
  _BYTE v256[128];
  _BYTE v257[128];
  _BYTE v258[128];
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 8))
    sub_19C09C77C(CFSTR("No saved model container"), (uint64_t)a2, a3, a4, a5, a6, a7, a8, v190);
  objc_msgSend_set(MEMORY[0x1E0C99E20], a2, a3, a4);
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = [MontrealNNModelNetwork alloc];
  v196 = (void *)objc_msgSend_initWithModelContainer_tensors_(v9, v10, *(_QWORD *)(a1 + 8), (uint64_t)v195);
  objc_msgSend_inputs(v196, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19C186960((uint64_t)&v249, v14);

  objc_msgSend_outputs(v196, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19C186960((uint64_t)&v247, v18);

  sub_19C22E250(a2, (const void ***)&v249, (const void ***)&v247);
  v246 = 0u;
  v245 = 0u;
  v244 = 0u;
  v243 = 0u;
  objc_msgSend_nodes(v196, v19, v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v23, (uint64_t)&v243, (uint64_t)v258, 16);
  if (v26)
  {
    v27 = *(_QWORD *)v244;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v244 != v27)
          objc_enumerationMutation(v22);
        v29 = *(void **)(*((_QWORD *)&v243 + 1) + 8 * i);
        memset(__src, 0, 512);
        if (v29)
          objc_msgSend_parameters_(v29, v24, *(_QWORD *)(a1 + 8), v25);
        else
          bzero(__src, 0x2C0uLL);
        if (objc_msgSend_isValid(v29, v30, v31, v32))
        {
          memcpy(__dst, __src, sizeof(__dst));
          objc_msgSend_name(v29, v33, v34, v35);
          v36 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v40 = (const char *)objc_msgSend_UTF8String(v36, v37, v38, v39);
          v41 = strlen(v40);
          if (v41 >= 0x7FFFFFFFFFFFFFF8)
            sub_19C07C774();
          v42 = (void *)v41;
          if (v41 >= 0x17)
          {
            v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v41 | 7) != 0x17)
              v44 = v41 | 7;
            v45 = v44 + 1;
            v43 = operator new(v44 + 1);
            v240 = v45 | 0x8000000000000000;
            __p[0] = v43;
            __p[1] = v42;
          }
          else
          {
            HIBYTE(v240) = v41;
            v43 = __p;
            if (!v41)
              goto LABEL_22;
          }
          memmove(v43, v40, (size_t)v42);
LABEL_22:
          *((_BYTE *)v42 + (_QWORD)v43) = 0;
          sub_19C22ECC8((uint64_t)a2, __dst, (uint64_t)__p);
          if (SHIBYTE(v240) < 0)
            operator delete(__p[0]);

          continue;
        }
      }
      v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v22, v24, (uint64_t)&v243, (uint64_t)v258, 16);
    }
    while (v26);
  }

  v237 = 0u;
  v238 = 0u;
  v235 = 0u;
  v236 = 0u;
  objc_msgSend_inputs(v196, v46, v47, v48);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v204 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v49, (uint64_t)&v235, (uint64_t)v257, 16);
  if (v204)
  {
    v201 = *(_QWORD *)v236;
    do
    {
      for (j = 0; j != (id)v204; j = (char *)j + 1)
      {
        if (*(_QWORD *)v236 != v201)
          objc_enumerationMutation(obj);
        v53 = *(void **)(*((_QWORD *)&v235 + 1) + 8 * (_QWORD)j);
        v231 = 0u;
        v232 = 0u;
        v233 = 0u;
        v234 = 0u;
        objc_msgSend_asInput(v53, v50, v51, v52);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_allObjects(v54, v55, v56, v57);
        v58 = (void *)objc_claimAutoreleasedReturnValue();

        v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v59, (uint64_t)&v231, (uint64_t)v256, 16);
        if (v63)
        {
          v64 = *(_QWORD *)v232;
          do
          {
            for (k = 0; k != v63; ++k)
            {
              if (*(_QWORD *)v232 != v64)
                objc_enumerationMutation(v58);
              v66 = *(void **)(*((_QWORD *)&v231 + 1) + 8 * k);
              if ((objc_msgSend_isValid(v66, v60, v61, v62) & 1) != 0)
              {
                objc_msgSend_inputs(v66, v60, v61, v62);
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                v70 = objc_msgSend_indexOfObject_(v67, v68, (uint64_t)v53, v69);

                objc_msgSend_name(v53, v71, v72, v73);
                v74 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v78 = (char *)objc_msgSend_UTF8String(v74, v75, v76, v77);
                v79 = sub_19C186DA8("None");
                objc_msgSend_name(v66, v80, v81, v82);
                v83 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v87 = (const char *)objc_msgSend_UTF8String(v83, v84, v85, v86);
                sub_19C186BC8((uint64_t)a2, v78, v79, v87, v70 + 1);

              }
            }
            v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v60, (uint64_t)&v231, (uint64_t)v256, 16);
          }
          while (v63);
        }

      }
      v204 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v50, (uint64_t)&v235, (uint64_t)v257, 16);
    }
    while (v204);
  }

  v229 = 0u;
  v230 = 0u;
  v227 = 0u;
  v228 = 0u;
  objc_msgSend_outputs(v196, v88, v89, v90);
  obja = (id)objc_claimAutoreleasedReturnValue();
  v205 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v91, (uint64_t)&v227, (uint64_t)v255, 16);
  if (v205)
  {
    v202 = *(_QWORD *)v228;
    do
    {
      for (m = 0; m != (id)v205; m = (char *)m + 1)
      {
        if (*(_QWORD *)v228 != v202)
          objc_enumerationMutation(obja);
        v95 = *(void **)(*((_QWORD *)&v227 + 1) + 8 * (_QWORD)m);
        v223 = 0u;
        v224 = 0u;
        v225 = 0u;
        v226 = 0u;
        objc_msgSend_asOutput(v95, v92, v93, v94);
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_allObjects(v96, v97, v98, v99);
        v100 = (void *)objc_claimAutoreleasedReturnValue();

        v105 = objc_msgSend_countByEnumeratingWithState_objects_count_(v100, v101, (uint64_t)&v223, (uint64_t)v254, 16);
        if (v105)
        {
          v106 = *(_QWORD *)v224;
          do
          {
            for (n = 0; n != v105; ++n)
            {
              if (*(_QWORD *)v224 != v106)
                objc_enumerationMutation(v100);
              v108 = *(void **)(*((_QWORD *)&v223 + 1) + 8 * n);
              if ((objc_msgSend_isValid(v108, v102, v103, v104) & 1) != 0)
              {
                objc_msgSend_outputs(v108, v102, v103, v104);
                v109 = (void *)objc_claimAutoreleasedReturnValue();
                v112 = objc_msgSend_indexOfObject_(v109, v110, (uint64_t)v95, v111);

                objc_msgSend_name(v108, v113, v114, v115);
                v116 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v120 = (char *)objc_msgSend_UTF8String(v116, v117, v118, v119);
                objc_msgSend_name(v95, v121, v122, v123);
                v124 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v128 = (const char *)objc_msgSend_UTF8String(v124, v125, v126, v127);
                v129 = sub_19C186DA8("None");
                sub_19C186BC8((uint64_t)a2, v120, v112 + 9, v128, v129);

              }
            }
            v105 = objc_msgSend_countByEnumeratingWithState_objects_count_(v100, v102, (uint64_t)&v223, (uint64_t)v254, 16);
          }
          while (v105);
        }

      }
      v205 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v92, (uint64_t)&v227, (uint64_t)v255, 16);
    }
    while (v205);
  }

  v221 = 0u;
  v222 = 0u;
  v219 = 0u;
  v220 = 0u;
  v193 = v195;
  v191 = objc_msgSend_countByEnumeratingWithState_objects_count_(v193, v130, (uint64_t)&v219, (uint64_t)v253, 16);
  if (v191)
  {
    v192 = *(_QWORD *)v220;
    do
    {
      for (ii = 0; ii != v191; ++ii)
      {
        if (*(_QWORD *)v220 != v192)
          objc_enumerationMutation(v193);
        v134 = *(void **)(*((_QWORD *)&v219 + 1) + 8 * ii);
        v215 = 0u;
        v216 = 0u;
        v217 = 0u;
        v218 = 0u;
        objc_msgSend_asOutput(v134, v131, v132, v133, v191);
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_allObjects(v135, v136, v137, v138);
        v197 = (id)objc_claimAutoreleasedReturnValue();

        v203 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v139, (uint64_t)&v215, (uint64_t)v252, 16);
        if (v203)
        {
          objb = *(id *)v216;
          do
          {
            for (jj = 0; jj != v203; ++jj)
            {
              if (*(id *)v216 != objb)
                objc_enumerationMutation(v197);
              v143 = *(void **)(*((_QWORD *)&v215 + 1) + 8 * jj);
              if ((objc_msgSend_isValid(v143, v140, v141, v142) & 1) != 0)
              {
                v213 = 0u;
                v214 = 0u;
                v211 = 0u;
                v212 = 0u;
                objc_msgSend_asInput(v134, v140, v141, v142);
                v144 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_allObjects(v144, v145, v146, v147);
                v209 = (id)objc_claimAutoreleasedReturnValue();

                v152 = objc_msgSend_countByEnumeratingWithState_objects_count_(v209, v148, (uint64_t)&v211, (uint64_t)v251, 16);
                if (v152)
                {
                  v153 = *(_QWORD *)v212;
                  do
                  {
                    for (kk = 0; kk != v152; ++kk)
                    {
                      if (*(_QWORD *)v212 != v153)
                        objc_enumerationMutation(v209);
                      v155 = *(void **)(*((_QWORD *)&v211 + 1) + 8 * kk);
                      if ((objc_msgSend_isValid(v155, v149, v150, v151) & 1) != 0)
                      {
                        objc_msgSend_inputs(v155, v149, v150, v151);
                        v156 = (void *)objc_claimAutoreleasedReturnValue();
                        v159 = objc_msgSend_indexOfObject_(v156, v157, (uint64_t)v134, v158);

                        objc_msgSend_outputs(v143, v160, v161, v162);
                        v163 = (void *)objc_claimAutoreleasedReturnValue();
                        v166 = objc_msgSend_indexOfObject_(v163, v164, (uint64_t)v134, v165);

                        objc_msgSend_name(v143, v167, v168, v169);
                        v170 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                        v174 = (char *)objc_msgSend_UTF8String(v170, v171, v172, v173);
                        objc_msgSend_name(v155, v175, v176, v177);
                        v178 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                        v182 = (const char *)objc_msgSend_UTF8String(v178, v179, v180, v181);
                        sub_19C186BC8((uint64_t)a2, v174, v166 + 9, v182, v159 + 1);

                      }
                    }
                    v152 = objc_msgSend_countByEnumeratingWithState_objects_count_(v209, v149, (uint64_t)&v211, (uint64_t)v251, 16);
                  }
                  while (v152);
                }

              }
            }
            v203 = objc_msgSend_countByEnumeratingWithState_objects_count_(v197, v140, (uint64_t)&v215, (uint64_t)v252, 16);
          }
          while (v203);
        }

      }
      v191 = objc_msgSend_countByEnumeratingWithState_objects_count_(v193, v131, (uint64_t)&v219, (uint64_t)v253, 16);
    }
    while (v191);
  }

  v183 = (void **)v247;
  if (v247)
  {
    v184 = v248;
    v185 = v247;
    if (v248 != v247)
    {
      do
      {
        if (*((char *)v184 - 1) < 0)
          operator delete(*(v184 - 3));
        v184 -= 3;
      }
      while (v184 != v183);
      v185 = v247;
    }
    v248 = v183;
    operator delete(v185);
  }
  v186 = (void **)v249;
  if (v249)
  {
    v187 = v250;
    v188 = v249;
    if (v250 != v249)
    {
      do
      {
        if (*((char *)v187 - 1) < 0)
          operator delete(*(v187 - 3));
        v187 -= 3;
      }
      while (v187 != v186);
      v188 = v249;
    }
    v250 = v186;
    operator delete(v188);
  }

  return 1;
}

void sub_19C186650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;

  v15 = STACK[0x800];
  if (STACK[0x800])
  {
    v16 = STACK[0x808];
    v17 = (void *)STACK[0x800];
    if (STACK[0x808] != v15)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0)
          operator delete(*(void **)(v16 - 24));
        v16 -= 24;
      }
      while (v16 != v15);
      v17 = (void *)STACK[0x800];
    }
    STACK[0x808] = v15;
    operator delete(v17);
  }
  v18 = STACK[0x818];
  if (STACK[0x818])
  {
    v19 = STACK[0x820];
    v20 = (void *)STACK[0x818];
    if (STACK[0x820] != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)STACK[0x818];
    }
    STACK[0x820] = v18;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void sub_19C186960(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  size_t v17;
  __int128 *p_dst;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  id obj;
  __int128 __dst;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v3;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v28, (uint64_t)v32, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v29 != v9)
          objc_enumerationMutation(obj);
        objc_msgSend_name(*(void **)(*((_QWORD *)&v28 + 1) + 8 * i), v5, v6, v7);
        v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v15 = (const char *)objc_msgSend_UTF8String(v11, v12, v13, v14);
        v16 = strlen(v15);
        if (v16 >= 0x7FFFFFFFFFFFFFF8)
          sub_19C07C774();
        v17 = v16;
        if (v16 >= 0x17)
        {
          v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v21 = v16 | 7;
          v22 = v21 + 1;
          p_dst = (__int128 *)operator new(v21 + 1);
          *((_QWORD *)&__dst + 1) = v17;
          v27 = v22 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v27) = v16;
          p_dst = &__dst;
          if (!v16)
          {
            LOBYTE(__dst) = 0;
            v19 = *(_QWORD *)(a1 + 8);
            if (v19 < *(_QWORD *)(a1 + 16))
              goto LABEL_10;
            goto LABEL_15;
          }
        }
        memmove(p_dst, v15, v17);
        *((_BYTE *)p_dst + v17) = 0;
        v19 = *(_QWORD *)(a1 + 8);
        if (v19 < *(_QWORD *)(a1 + 16))
        {
LABEL_10:
          v20 = __dst;
          *(_QWORD *)(v19 + 16) = v27;
          *(_OWORD *)v19 = v20;
          v27 = 0;
          __dst = 0uLL;
          *(_QWORD *)(a1 + 8) = v19 + 24;
          goto LABEL_17;
        }
LABEL_15:
        v23 = sub_19C099854((void **)a1, (uint64_t)&__dst);
        v24 = SHIBYTE(v27);
        *(_QWORD *)(a1 + 8) = v23;
        if (v24 < 0)
          operator delete((void *)__dst);
LABEL_17:

      }
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v28, (uint64_t)v32, 16);
    }
    while (v8);
  }

}

void sub_19C186B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  sub_19C07AD50(v15);
  _Unwind_Resume(a1);
}

void sub_19C186BC8(uint64_t a1, char *__s, int a3, const char *a4, int a5)
{
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  void *__dst[2];
  unint64_t v23;

  v10 = strlen(__s);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v23 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_8;
  }
  HIBYTE(v23) = v10;
  v12 = __dst;
  if (v10)
LABEL_8:
    memcpy(v12, __s, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  v15 = strlen(a4);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    __p[1] = v16;
    v21 = v19 | 0x8000000000000000;
    __p[0] = v17;
    goto LABEL_16;
  }
  HIBYTE(v21) = v15;
  v17 = __p;
  if (v15)
LABEL_16:
    memcpy(v17, a4, (size_t)v16);
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  sub_19C2306E8(a1, (uint64_t)__dst, a3, (uint64_t)__p, a5);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v23) < 0)
    goto LABEL_21;
}

void sub_19C186D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C186DA8(const char *a1)
{
  size_t v2;
  size_t v3;
  _DWORD **p_dst;
  int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  std::logic_error *exception;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  _DWORD *__dst;
  size_t v17;
  unint64_t v18;

  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    p_dst = (_DWORD **)operator new(v6 + 1);
    v17 = v3;
    v18 = v7 | 0x8000000000000000;
    __dst = p_dst;
LABEL_12:
    memcpy(p_dst, a1, v3);
    *((_BYTE *)p_dst + v3) = 0;
    v5 = HIBYTE(v18);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
  HIBYTE(v18) = v2;
  p_dst = &__dst;
  if (v2)
    goto LABEL_12;
  LOBYTE(__dst) = 0;
  v5 = HIBYTE(v18);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    if (v5 == 2)
    {
      switch((unsigned __int16)__dst)
      {
        case 0x3058u:
          return 1;
        case 0x3059u:
          v9 = 9;
          break;
        case 0x3158u:
          return 2;
        case 0x3159u:
          v9 = 10;
          break;
        default:
          goto LABEL_37;
      }
      goto LABEL_22;
    }
    if (v5 != 4 || (_DWORD)__dst != 1701736270)
      goto LABEL_37;
    goto LABEL_21;
  }
LABEL_13:
  v8 = v17;
  if (v17 != 2)
  {
LABEL_19:
    if (v8 != 4 || *__dst != 1701736270)
    {
LABEL_37:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      *((_BYTE *)&v14.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&v14, "Unexpected Port: ");
      v12 = std::string::append(&v14, a1);
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v15);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E3D1C4D0, MEMORY[0x1E0DE4360]);
    }
LABEL_21:
    v9 = 0;
    goto LABEL_22;
  }
  switch(*(_WORD *)__dst)
  {
    case 0x3058:
      v9 = 1;
      goto LABEL_22;
    case 0x3059:
      v9 = 9;
      goto LABEL_36;
    case 0x3158:
      v9 = 2;
LABEL_22:
      if ((v5 & 0x80) == 0)
        return v9;
      goto LABEL_36;
  }
  if (*(_WORD *)__dst != 12633)
  {
    v8 = v17;
    goto LABEL_19;
  }
  v9 = 10;
LABEL_36:
  operator delete(__dst);
  return v9;
}

void sub_19C18706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  void *v22;
  char v23;
  int v24;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      if (v23 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19C1870D0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_19C16CD74();
  v6 = off_1EE41A9F0(a2, 0);
  if (!v6)
    sub_19C09C77C(CFSTR("Failed to create NLModelContainer from model data"), v7, v8, v9, v10, v11, v12, v13, v15);
  *(_QWORD *)(a1 + 8) = v6;
  sub_19C185C0C(a1, a3, v8, v9, v10, v11, v12, v13);
  return 1;
}

uint64_t sub_19C187140(uint64_t a1, uint64_t a2, char *a3)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_19C16CD74();
  v6 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, a2, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v6, v10, (uint64_t)v9, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = off_1EE41A9E8(v12, 8, 0);
  if (!v13)
    sub_19C09C77C(CFSTR("Failed to create NLModelContainer from file: %@"), v14, v15, v16, v17, v18, v19, v20, (uint64_t)v12);
  *(_QWORD *)(a1 + 8) = v13;

  sub_19C185C0C(a1, a3, v21, v22, v23, v24, v25, v26);
  return 1;
}

void sub_19C1871FC(_Unwind_Exception *a1, int a2)
{
  void *v2;
  id v5;
  std::runtime_error *exception;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;

  if (a2 == 1)
  {
    v5 = objc_begin_catch(a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    objc_msgSend_reason(v5, v7, v8, v9);
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v14 = (const char *)objc_msgSend_UTF8String(v10, v11, v12, v13);
    std::runtime_error::runtime_error(exception, v14);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C1872C4()
{
  return 0;
}

uint64_t sub_19C1872CC()
{
  return 0;
}

uint64_t sub_19C1872D4()
{
  return 0;
}

uint64_t sub_19C1872DC()
{
  return 0;
}

uint64_t sub_19C1872E4(uint64_t a1)
{
  sub_19C098FBC(a1 + 24, *(char **)(a1 + 32));
  sub_19C09B35C(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t *sub_19C18731C(uint64_t a1, const void **a2)
{
  uint64_t **v2;
  int v3;
  size_t v4;
  const void *v5;
  int v6;
  size_t v7;
  uint64_t *v8;
  size_t v9;
  int v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;

  v2 = *(uint64_t ***)(a1 + 8);
  if (!v2)
LABEL_25:
    sub_19C07DFF8("map::at:  key not found");
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  while (1)
  {
    while (1)
    {
      v6 = *((char *)v2 + 55);
      if (v6 >= 0)
        v7 = *((unsigned __int8 *)v2 + 55);
      else
        v7 = (size_t)v2[5];
      if (v6 >= 0)
        v8 = (uint64_t *)(v2 + 4);
      else
        v8 = v2[4];
      if (v7 >= v4)
        v9 = v4;
      else
        v9 = v7;
      v10 = memcmp(v5, v8, v9);
      v11 = v4 < v7;
      if (v10)
        v11 = v10 < 0;
      if (!v11)
        break;
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_25;
    }
    v12 = memcmp(v8, v5, v9);
    v13 = v7 < v4;
    if (v12)
      v13 = v12 < 0;
    if (!v13)
      return v2[7];
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_25;
  }
}

uint64_t sub_19C187418(void *a1)
{
  uint64_t *v1;
  NSObject *v2;

  __cxa_begin_catch(a1);
  v2 = sub_19C1A0644();
  sub_19C255D70(v2, v1);
  return 0;
}

void sub_19C187444(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

__n128 sub_19C187458@<Q0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  int v5;
  size_t v6;
  const void *v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  __n128 result;
  __int128 v17;

  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
LABEL_25:
    sub_19C07DFF8("map::at:  key not found");
  v5 = *((char *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  if (v5 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  while (1)
  {
    while (1)
    {
      v8 = *((char *)v4 + 55);
      if (v8 >= 0)
        v9 = *((unsigned __int8 *)v4 + 55);
      else
        v9 = v4[5];
      if (v8 >= 0)
        v10 = v4 + 4;
      else
        v10 = (const void *)v4[4];
      if (v9 >= v6)
        v11 = v6;
      else
        v11 = v9;
      v12 = memcmp(v7, v10, v11);
      v13 = v6 < v9;
      if (v12)
        v13 = v12 < 0;
      if (!v13)
        break;
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_25;
    }
    v14 = memcmp(v10, v7, v11);
    v15 = v9 < v6;
    if (v14)
      v15 = v14 < 0;
    if (!v15)
      break;
    v4 = (uint64_t *)v4[1];
    if (!v4)
      goto LABEL_25;
  }
  result = *(__n128 *)(v4 + 7);
  v17 = *(_OWORD *)(v4 + 9);
  *(_QWORD *)(a3 + 32) = v4[11];
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v17;
  return result;
}

void sub_19C187568(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  NSObject *v3;

  __cxa_begin_catch(a1);
  v3 = sub_19C1A0644();
  sub_19C255E10(v3, v2, v1);
}

void sub_19C187594(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C1875A8(uint64_t a1)
{
  return a1 + 24;
}

uint64_t **sub_19C1875B0(uint64_t **a1, __int128 *a2, char **a3)
{
  uint64_t **result;
  __int128 *v5;

  v5 = a2;
  result = sub_19C099140(a1, (const void **)a2, (uint64_t)&unk_19C27ADD0, &v5) + 7;
  if (result != (uint64_t **)a3)
    return (uint64_t **)sub_19C1876AC(result, *a3, a3[1], a3[1] - *a3);
  return result;
}

_QWORD *sub_19C187604(uint64_t **a1, __int128 *a2, char *a3, unint64_t a4)
{
  uint64_t **v6;
  __int128 *v8;

  v8 = a2;
  v6 = sub_19C099140(a1, (const void **)a2, (uint64_t)&unk_19C27ADD0, &v8);
  return sub_19C1876AC(v6 + 7, a3, &a3[a4], a4);
}

__n128 sub_19C187658(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t **v4;
  __n128 result;
  __int128 v6;
  __int128 *v7;

  v7 = a2;
  v4 = sub_19C1877F4((uint64_t **)(a1 + 24), (const void **)a2, (uint64_t)&unk_19C27ADD0, &v7);
  result = *(__n128 *)a3;
  v6 = *(_OWORD *)(a3 + 16);
  v4[11] = *(uint64_t **)(a3 + 32);
  *(_OWORD *)(v4 + 9) = v6;
  *(__n128 *)(v4 + 7) = result;
  return result;
}

_QWORD *sub_19C1876AC(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_22:
      sub_19C07DA0C();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

uint64_t **sub_19C1877F4(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x60uLL);
    v24 = v23 + 32;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19C07C6E8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    *((_QWORD *)v23 + 11) = 0;
    *(_OWORD *)(v23 + 72) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_19C07CC40(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19C187988(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_19C18799C(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

uint64_t sub_19C1879A8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *__src)
{
  const void *v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  char **v19;
  char *v20[2];
  void *__p[2];
  uint64_t v22;
  const void *v23[2];
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v22 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18E344(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D245D8;
  sub_19C19D39C(a1 + 1016, (uint64_t)__src);
  HIBYTE(v24) = 14;
  strcpy((char *)v23, "dilationStride");
  LODWORD(v19) = 1;
  sub_19C188368((uint64_t **)(a1 + 1016), v23, (uint64_t)v23, (int *)&v19);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23[0]);
  *(_QWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_QWORD *)(a1 + 1160) = __src[7];
  v7 = *(const void **)(a1 + 1040);
  v8 = *(_QWORD *)(a1 + 1080);
  v9 = *(_QWORD *)(a1 + 1120);
  LODWORD(v23[0]) = 1;
  v23[1] = v7;
  v24 = v8;
  v26 = 0;
  v27 = 0;
  v25 = v9;
  sub_19C07C964(a1 + 16, (int *)v23, (int *)&v28);
  v10 = (const void *)sub_19C19CF84(a1 + 1040);
  v11 = sub_19C19CF84(a1 + 1080);
  v12 = *(_QWORD *)(a1 + 1128);
  LODWORD(v23[0]) = 9;
  v23[1] = v10;
  v24 = v11;
  v26 = 0;
  v27 = 0;
  v25 = v12;
  sub_19C07C964(a1 + 40, (int *)v23, (int *)&v28);
  v13 = __src[72];
  HIBYTE(v24) = 4;
  strcpy((char *)v23, "bias");
  v25 = v13;
  v20[0] = 0;
  v20[1] = 0;
  v19 = v20;
  sub_19C188890((uint64_t **)&v19, (uint64_t *)v20, v23, (uint64_t)v23);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23[0]);
  HIBYTE(v24) = 4;
  strcpy((char *)v23, "bias");
  v14 = sub_19C18898C((uint64_t)&v19, (uint64_t)v23);
  if (v15)
    v16 = v14;
  else
    v16 = 0;
  v17 = *(_QWORD *)(a1 + 1128);
  *(_DWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1144) = v17;
  *(_QWORD *)(a1 + 1152) = v16;
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23[0]);
  sub_19C098FBC((uint64_t)&v19, v20[0]);
  return a1;
}

void sub_19C187BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  sub_19C098FBC((uint64_t)&a10, a11);
  sub_19C098FBC(v22, *(char **)(v21 + 1024));
  sub_19C18E518(v21);
  _Unwind_Resume(a1);
}

void sub_19C187C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C18E518(v1);
  _Unwind_Resume(a1);
}

void sub_19C187C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C187CB4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 200))(a2, a1);
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 200))(a2, a1);
}

uint64_t sub_19C187D78(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)(a1 + 280) = a3;
  v4 = *(uint64_t **)(a1 + 160);
  v5 = *(uint64_t **)(a1 + 168);
  if (v4 != v5)
  {
    v6 = (a3 * a2);
    do
    {
      v7 = *v4++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v6);
    }
    while (v4 != v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_19C187DD8(uint64_t **a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t result;
  char *v14;
  uint64_t **v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;

  v4 = a1[2];
  v6 = v4[5];
  v5 = v4[6];
  v7 = (uint64_t)(a1 + 127);
  v8 = sub_19C19CFEC((uint64_t)(a1 + 130));
  v9 = sub_19C188528(v7, 0);
  v10 = sub_19C18871C(v7, 0);
  v11 = sub_19C19CFEC((uint64_t)(a1 + 135));
  v33 = sub_19C188528(v7, 1);
  v32 = sub_19C18871C(v7, 1);
  v12 = a1[141];
  v31 = ((uint64_t (*)(uint64_t **))(*a1)[28])(a1);
  result = ((uint64_t (*)(uint64_t **, uint64_t))(*a1)[27])(a1, 1);
  v15 = a1 + 6;
  v14 = (char *)a1[6];
  v34 = v12;
  if (v14)
  {
    do
    {
      while (1)
      {
        v16 = v14;
        v17 = *((_DWORD *)v14 + 8);
        if (v17 <= a2)
          break;
        v14 = *(char **)v16;
        v15 = (uint64_t **)v16;
        if (!*(_QWORD *)v16)
          goto LABEL_9;
      }
      if (v17 >= a2)
      {
        v27 = v32;
        v26 = v33;
        v28 = v31;
        goto LABEL_12;
      }
      v14 = (char *)*((_QWORD *)v16 + 1);
    }
    while (v14);
    v15 = (uint64_t **)(v16 + 8);
  }
  else
  {
    v16 = (char *)(a1 + 6);
  }
LABEL_9:
  v29 = result;
  v30 = v11;
  v18 = v10;
  v19 = v9;
  v20 = v8;
  v21 = v5;
  v22 = v6;
  v23 = v16;
  v16 = (char *)operator new(0x50uLL);
  *((_DWORD *)v16 + 8) = a2;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *((_QWORD *)v16 + 9) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v23;
  *v15 = (uint64_t *)v16;
  v24 = (uint64_t *)*a1[5];
  v25 = (uint64_t *)v16;
  if (v24)
  {
    a1[5] = v24;
    v25 = *v15;
  }
  sub_19C07CC40(a1[6], v25);
  a1[7] = (uint64_t *)((char *)a1[7] + 1);
  v6 = v22;
  v5 = v21;
  v8 = v20;
  v9 = v19;
  v10 = v18;
  v11 = v30;
  v28 = v31;
  v27 = v32;
  v26 = v33;
  result = v29;
LABEL_12:
  *((_QWORD *)v16 + 5) = (v6 + 2 * v8 - v9) / v10 + 1;
  *((_QWORD *)v16 + 6) = (v5 + 2 * v11 - v26) / v27 + 1;
  *((_QWORD *)v16 + 7) = v34;
  *((_QWORD *)v16 + 8) = v28;
  *((_QWORD *)v16 + 9) = (int)result;
  return result;
}

BOOL sub_19C187FCC(uint64_t a1, _QWORD *a2, int a3)
{
  char *v7;
  uint64_t **v8;
  uint64_t **v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;

  if ((a3 - 8) < 0xFFFFFFF9)
    return 0;
  v8 = (uint64_t **)(a1 + 24);
  v7 = *(char **)(a1 + 24);
  v9 = (uint64_t **)(a1 + 24);
  v10 = (char *)(a1 + 24);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v10 = v7;
        v11 = *((_DWORD *)v7 + 8);
        if (v11 <= a3)
          break;
        v7 = *(char **)v10;
        v9 = (uint64_t **)v10;
        if (!*(_QWORD *)v10)
          goto LABEL_10;
      }
      if (v11 >= a3)
        break;
      v7 = (char *)*((_QWORD *)v10 + 1);
      if (!v7)
      {
        v9 = (uint64_t **)(v10 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v12 = v10;
    v10 = (char *)operator new(0x50uLL);
    *((_DWORD *)v10 + 8) = a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((_QWORD *)v10 + 9) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v12;
    *v9 = (uint64_t *)v10;
    v13 = **(_QWORD **)(a1 + 16);
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 16) = v13;
      v14 = *v9;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v14);
    ++*(_QWORD *)(a1 + 32);
  }
  if (*((_QWORD *)v10 + 5) != *a2)
    return 1;
  v15 = *v8;
  v16 = v8;
  v17 = (char *)v8;
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        v17 = (char *)v15;
        v18 = *((_DWORD *)v15 + 8);
        if (v18 <= a3)
          break;
        v15 = *(uint64_t **)v17;
        v16 = (uint64_t **)v17;
        if (!*(_QWORD *)v17)
          goto LABEL_21;
      }
      if (v18 >= a3)
        break;
      v15 = (uint64_t *)*((_QWORD *)v17 + 1);
      if (!v15)
      {
        v16 = (uint64_t **)(v17 + 8);
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    v19 = v17;
    v17 = (char *)operator new(0x50uLL);
    *((_DWORD *)v17 + 8) = a3;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((_QWORD *)v17 + 9) = 0;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v19;
    *v16 = (uint64_t *)v17;
    v20 = **(_QWORD **)(a1 + 16);
    v21 = (uint64_t *)v17;
    if (v20)
    {
      *(_QWORD *)(a1 + 16) = v20;
      v21 = *v16;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v21);
    ++*(_QWORD *)(a1 + 32);
  }
  if (*((_QWORD *)v17 + 6) != a2[1])
    return 1;
  v22 = *v8;
  v23 = (char *)v8;
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        v23 = (char *)v22;
        v24 = *((_DWORD *)v22 + 8);
        if (v24 <= a3)
          break;
        v22 = *(uint64_t **)v23;
        v8 = (uint64_t **)v23;
        if (!*(_QWORD *)v23)
          goto LABEL_32;
      }
      if (v24 >= a3)
        break;
      v22 = (uint64_t *)*((_QWORD *)v23 + 1);
      if (!v22)
      {
        v8 = (uint64_t **)(v23 + 8);
        goto LABEL_32;
      }
    }
  }
  else
  {
LABEL_32:
    v25 = v23;
    v23 = (char *)operator new(0x50uLL);
    *((_DWORD *)v23 + 8) = a3;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *((_QWORD *)v23 + 9) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v25;
    *v8 = (uint64_t *)v23;
    v26 = **(_QWORD **)(a1 + 16);
    v27 = (uint64_t *)v23;
    if (v26)
    {
      *(_QWORD *)(a1 + 16) = v26;
      v27 = *v8;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v27);
    ++*(_QWORD *)(a1 + 32);
  }
  return *((_QWORD *)v23 + 7) != a2[2];
}

__n128 sub_19C18823C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = *sub_19C18FCD8(a1, 1);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 + 56);
  *(_DWORD *)a3 = 1;
  result = *(__n128 *)(v7 + 40);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = a2;
  *(_QWORD *)(a3 + 40) = v6;
  return result;
}

__n128 sub_19C188294@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = *sub_19C18FEB8(a1, 9);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(v7 + 56);
  *(_DWORD *)a3 = 1;
  result = *(__n128 *)(v7 + 40);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = a2;
  *(_QWORD *)(a3 + 40) = v6;
  return result;
}

uint64_t sub_19C1882EC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E3D245D8;
  sub_19C098FBC(a1 + 1016, *(char **)(a1 + 1024));
  return sub_19C18E518(a1);
}

void sub_19C188328(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_1E3D245D8;
  sub_19C098FBC(a1 + 1016, *(char **)(a1 + 1024));
  v2 = (void *)sub_19C18E518(a1);
  operator delete(v2);
}

uint64_t **sub_19C188368(uint64_t **a1, const void **a2, uint64_t a3, int *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  size_t v10;
  const void *v11;
  uint64_t **v12;
  _QWORD *v13;
  const void *v14;
  const void *v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  _QWORD *v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    if (v9 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    do
    {
      while (1)
      {
        v12 = (uint64_t **)v7;
        v15 = (const void *)v7[4];
        v13 = v7 + 4;
        v14 = v15;
        v16 = *((char *)v13 + 23);
        if (v16 >= 0)
          v17 = *((unsigned __int8 *)v13 + 23);
        else
          v17 = v13[1];
        if (v16 >= 0)
          v18 = v13;
        else
          v18 = v14;
        if (v17 >= v10)
          v19 = v10;
        else
          v19 = v17;
        v20 = memcmp(v11, v18, v19);
        v21 = v10 < v17;
        if (v20)
          v21 = v20 < 0;
        if (!v21)
          break;
        v7 = *v12;
        v8 = v12;
        if (!*v12)
          goto LABEL_26;
      }
      v22 = memcmp(v18, v11, v19);
      v23 = v17 < v10;
      if (v22)
        v23 = v22 < 0;
      if (!v23)
        return v12;
      v7 = v12[1];
    }
    while (v7);
    v8 = v12 + 1;
LABEL_26:
    v24 = operator new(0x50uLL);
    v25 = (char *)(v24 + 4);
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_29;
  }
  else
  {
    v12 = a1 + 1;
    v24 = operator new(0x50uLL);
    v25 = (char *)(v24 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_19C07C6E8(v25, *(void **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)v25 = *(_OWORD *)a3;
  *((_QWORD *)v25 + 2) = *(_QWORD *)(a3 + 16);
LABEL_30:
  v24[7] = *a4;
  *((_DWORD *)v24 + 18) = 0;
  *v24 = 0;
  v24[1] = 0;
  v24[2] = v12;
  *v8 = v24;
  v26 = (uint64_t *)**a1;
  v27 = v24;
  if (v26)
  {
    *a1 = v26;
    v27 = *v8;
  }
  sub_19C07CC40(a1[1], v27);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v24;
}

void sub_19C188514(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C188528(uint64_t a1, int a2)
{
  uint64_t **v2;
  int v4;
  unint64_t v5;
  uint64_t *v6;
  size_t v7;
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  void *__s1[2];
  char v16;
  int v17;
  int *v18;

  v16 = 6;
  strcpy((char *)__s1, "filter");
  v2 = *(uint64_t ***)(a1 + 8);
  if (!v2)
LABEL_20:
    sub_19C07DFF8("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v4 = *((char *)v2 + 55);
      if (v4 >= 0)
        v5 = *((unsigned __int8 *)v2 + 55);
      else
        v5 = (unint64_t)v2[5];
      if (v4 >= 0)
        v6 = (uint64_t *)(v2 + 4);
      else
        v6 = v2[4];
      if (v5 >= 6)
        v7 = 6;
      else
        v7 = v5;
      v8 = memcmp(__s1, v6, v7);
      v9 = v8 < 0;
      if (!v8)
        v9 = v5 > 6;
      if (!v9)
        break;
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_20;
    }
    v10 = memcmp(v6, __s1, v7);
    v11 = v5 < 6;
    if (v10)
      v11 = v10 < 0;
    if (!v11)
      break;
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_20;
  }
  v17 = a2;
  v12 = *((unsigned int *)v2 + 18);
  if ((_DWORD)v12 == -1)
    sub_19C18869C();
  v18 = &v17;
  v13 = ((uint64_t (*)(int **, uint64_t **))off_1E3D25578[v12])(&v18, v2 + 7);
  if (v16 < 0)
    operator delete(__s1[0]);
  return v13;
}

void sub_19C188680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C18869C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_19C1886D4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t sub_19C1886DC(unsigned int **a1, uint64_t a2)
{
  unint64_t v2;

  v2 = **a1;
  if ((v2 & 0x80000000) != 0)
    v2 = (int)v2 + 2;
  if (v2 >= 2)
    sub_19C07DFF8("array::at");
  return *(_QWORD *)(a2 + 8 * v2);
}

uint64_t sub_19C18871C(uint64_t a1, int a2)
{
  uint64_t **v2;
  int v4;
  unint64_t v5;
  uint64_t *v6;
  size_t v7;
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  void *__s1[2];
  char v16;
  int v17;
  int *v18;

  v16 = 6;
  strcpy((char *)__s1, "stride");
  v2 = *(uint64_t ***)(a1 + 8);
  if (!v2)
LABEL_20:
    sub_19C07DFF8("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v4 = *((char *)v2 + 55);
      if (v4 >= 0)
        v5 = *((unsigned __int8 *)v2 + 55);
      else
        v5 = (unint64_t)v2[5];
      if (v4 >= 0)
        v6 = (uint64_t *)(v2 + 4);
      else
        v6 = v2[4];
      if (v5 >= 6)
        v7 = 6;
      else
        v7 = v5;
      v8 = memcmp(__s1, v6, v7);
      v9 = v8 < 0;
      if (!v8)
        v9 = v5 > 6;
      if (!v9)
        break;
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_20;
    }
    v10 = memcmp(v6, __s1, v7);
    v11 = v5 < 6;
    if (v10)
      v11 = v10 < 0;
    if (!v11)
      break;
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_20;
  }
  v17 = a2;
  v12 = *((unsigned int *)v2 + 18);
  if ((_DWORD)v12 == -1)
    sub_19C18869C();
  v18 = &v17;
  v13 = ((uint64_t (*)(int **, uint64_t **))off_1E3D25578[v12])(&v18, v2 + 7);
  if (v16 < 0)
    operator delete(__s1[0]);
  return v13;
}

void sub_19C188874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C188890(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_19C098BC4(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (_QWORD *)*v6;
  v8 = v6;
  v9 = operator new(0x40uLL);
  v10 = v9 + 4;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_19C07C6E8(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a4;
    v9[6] = *(_QWORD *)(a4 + 16);
  }
  v9[7] = *(_QWORD *)(a4 + 24);
  v11 = v15;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v11;
  *v8 = (uint64_t)v9;
  v12 = (uint64_t *)**a1;
  v13 = v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  sub_19C07CC40(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_19C188978(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C18898C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t **v4;
  int v5;
  size_t v6;
  int v7;
  size_t v8;
  uint64_t *v9;
  size_t v10;
  int v11;
  _BOOL4 v12;
  int v13;
  _BOOL4 v14;

  v2 = (_QWORD *)a2;
  if (!sub_19C188AA8(a1, a2))
    return 0;
  v4 = *(uint64_t ***)(a1 + 8);
  if (!v4)
LABEL_26:
    sub_19C07DFF8("map::at:  key not found");
  v5 = *((char *)v2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)v2 + 23);
  else
    v6 = v2[1];
  if (v5 < 0)
    v2 = (_QWORD *)*v2;
  while (1)
  {
    while (1)
    {
      v7 = *((char *)v4 + 55);
      if (v7 >= 0)
        v8 = *((unsigned __int8 *)v4 + 55);
      else
        v8 = (size_t)v4[5];
      if (v7 >= 0)
        v9 = (uint64_t *)(v4 + 4);
      else
        v9 = v4[4];
      if (v8 >= v6)
        v10 = v6;
      else
        v10 = v8;
      v11 = memcmp(v2, v9, v10);
      v12 = v6 < v8;
      if (v11)
        v12 = v11 < 0;
      if (!v12)
        break;
      v4 = (uint64_t **)*v4;
      if (!v4)
        goto LABEL_26;
    }
    v13 = memcmp(v9, v2, v10);
    v14 = v8 < v6;
    if (v13)
      v14 = v13 < 0;
    if (!v14)
      return v4[7];
    v4 = (uint64_t **)v4[1];
    if (!v4)
      goto LABEL_26;
  }
}

BOOL sub_19C188AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    goto LABEL_40;
  v4 = *(char *)(a2 + 23);
  v5 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v6 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
  v7 = a1 + 8;
  do
  {
    v8 = *(char *)(v3 + 55);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(v3 + 55);
    else
      v9 = *(_QWORD *)(v3 + 40);
    if (v8 >= 0)
      v10 = (const void *)(v3 + 32);
    else
      v10 = *(const void **)(v3 + 32);
    if (v5 >= v9)
      v11 = v9;
    else
      v11 = v5;
    v12 = memcmp(v10, v6, v11);
    v13 = v9 < v5;
    if (v12)
      v13 = v12 < 0;
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v3 + 8);
    else
      v15 = (uint64_t *)v3;
    if (v14)
      v7 = v3;
    v3 = *v15;
  }
  while (*v15);
  if (v7 == v2)
    goto LABEL_40;
  v16 = *(char *)(v7 + 55);
  v17 = v16 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(_QWORD *)(v7 + 40);
  v18 = v16 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
  v19 = v17 >= v5 ? v5 : v17;
  v20 = memcmp(v6, v18, v19);
  v21 = v5 < v17;
  if (v20)
    v21 = v20 < 0;
  if (v21)
LABEL_40:
    v7 = v2;
  return v7 != v2;
}

_QWORD *sub_19C188BB4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D22CC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_19C188BF4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D22CC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C188C34(_QWORD *__p)
{
  uint64_t v2;

  *__p = &off_1E3D22CC8;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

void sub_19C188C74(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t v20;
  char v21;
  void *__p;
  void *v23;
  uint64_t v24;

  v4 = 1040;
  if (!a2[1057])
    v4 = 1024;
  if (*(_QWORD *)&a2[v4])
  {
    v5 = a2 + 1040;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
    v8 = sub_19C22BA64((uint64_t)a2);
    v9 = sub_19C18FCD8((uint64_t)a2, 1);
    if (!a2[1057])
      v5 = a2 + 1024;
    v10 = sub_19C18FEB8((uint64_t)a2, 9);
    if (a2[1057])
      v11 = a2 + 1048;
    else
      v11 = a2 + 1032;
    __p = 0;
    v23 = 0;
    v24 = 0;
    v21 = 0;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, _BYTE *, uint64_t **, _BYTE *, _QWORD, void **, char))(*(_QWORD *)v6 + 56))(v6, v7, v8, v9, v5, v10, v11, 0, &__p, v21);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    sub_19C190488(a2, v12);
  }
  v13 = *((_QWORD *)a2 + 127);
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = sub_19C22BA64((uint64_t)a2);
    v16 = 1040;
    if (!a2[1057])
      v16 = 1024;
    if (*(_QWORD *)&a2[v16])
      v17 = sub_19C18FEB8((uint64_t)a2, 9);
    else
      v17 = sub_19C18FCD8((uint64_t)a2, 1);
    v18 = v17;
    v19 = sub_19C18FEB8((uint64_t)a2, 9);
    __p = 0;
    v23 = 0;
    v24 = 0;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t **, void **, _QWORD, _QWORD, float))(*(_QWORD *)v14 + 48))(v14, v13, v15, v18, v19, &__p, 0, 0, 0.0);
    if (__p)
    {
      v23 = __p;
      operator delete(__p);
    }
    sub_19C190488(a2, v20);
  }
}

void sub_19C188E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C188E78(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t v36;
  char v37;
  void *__p;
  void *v39;
  uint64_t v40;

  v4 = 1040;
  if (!a2[1057])
    v4 = 1024;
  if (*(_QWORD *)&a2[v4])
  {
    v5 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
    v6 = sub_19C190608(a2, v5);
    v7 = operator new();
    v8 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
    v9 = sub_19C18FCD8((uint64_t)a2, 1);
    v10 = a2 + 1040;
    *(_QWORD *)v7 = &unk_1E3D234C8;
    *(_QWORD *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 20) = v8;
    *(_QWORD *)(v7 + 24) = v9;
    *(_QWORD *)(v7 + 32) = v6;
    *(_QWORD *)(v7 + 40) = *(_QWORD *)(a2 + 284);
    sub_19C190488(a2, v7);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
    v13 = sub_19C22BA64((uint64_t)a2);
    if (!a2[1057])
      v10 = a2 + 1024;
    v14 = sub_19C18FEB8((uint64_t)a2, 9);
    __p = 0;
    v39 = 0;
    v40 = 0;
    v37 = 0;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _BYTE *, uint64_t **, _BYTE *, _QWORD, void **, char))(*(_QWORD *)v11 + 88))(v11, v12, v13, v6, v10, v14, a2 + 304, 0, &__p, v37);
    if (__p)
    {
      v39 = __p;
      operator delete(__p);
    }
    sub_19C190488(a2, v15);
    v16 = operator new();
    v17 = sub_19C22BA64((uint64_t)a2);
    v18 = sub_19C18FEB8((uint64_t)a2, 9);
    v19 = sub_19C18FEB8((uint64_t)a2, 9);
    *(_QWORD *)v16 = &unk_1E3D234F0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 16) = 3;
    *(_DWORD *)(v16 + 20) = v17;
    *(_QWORD *)(v16 + 24) = v18;
    *(_QWORD *)(v16 + 32) = v19;
    *(_QWORD *)(v16 + 40) = *(_QWORD *)(a2 + 284);
    sub_19C190488(a2, v16);
    v20 = 1048;
    if (!a2[1057])
      v20 = 1032;
    if (*(_QWORD *)&a2[v20])
    {
      v21 = a2 + 1048;
      v22 = sub_19C22BA64((uint64_t)a2);
      v23 = sub_19C22BA64((uint64_t)a2);
      v24 = sub_19C22BA64((uint64_t)a2);
      sub_19C185710(&__p, 0, v22, 0, 0, 0, v23, 0, v24);
      v25 = *(_QWORD *)(a1 + 8);
      v26 = sub_19C18FEB8((uint64_t)a2, 9);
      if (!a2[1057])
        v21 = a2 + 1032;
      v27 = sub_19C18FEB8((uint64_t)a2, 9);
      v28 = (*(uint64_t (**)(uint64_t, void **, uint64_t **, _BYTE *, uint64_t **))(*(_QWORD *)v25 + 16))(v25, &__p, v26, v21, v27);
      sub_19C190488(a2, v28);
    }
  }
  v29 = *((_QWORD *)a2 + 127);
  if (v29)
  {
    v30 = *(_QWORD *)(a1 + 8);
    v31 = sub_19C22BA64((uint64_t)a2);
    v32 = 1040;
    if (!a2[1057])
      v32 = 1024;
    if (*(_QWORD *)&a2[v32])
      v33 = sub_19C18FEB8((uint64_t)a2, 9);
    else
      v33 = sub_19C18FCD8((uint64_t)a2, 1);
    v34 = v33;
    v35 = sub_19C18FEB8((uint64_t)a2, 9);
    __p = 0;
    v39 = 0;
    v40 = 0;
    v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t **, void **, _QWORD, _QWORD, float))(*(_QWORD *)v30 + 48))(v30, v29, v31, v34, v35, &__p, 0, 0, 0.0);
    if (__p)
    {
      v39 = __p;
      operator delete(__p);
    }
    sub_19C190488(a2, v36);
  }
}

void sub_19C189220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C189258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t **v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  void *v39[5];
  void *__p[2];
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  switch((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2))
  {
    case 3:
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      v9 = (unint64_t)__p[0];
      v10 = __p[1];
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = (unint64_t)&v10[-v9] >> 2;
        LODWORD(v9) = 1;
        do
        {
          v14 = operator new();
          v15 = sub_19C18FCD8(a2, v9);
          v16 = sub_19C18FEB8(a2, 9);
          v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, 9);
          *(_QWORD *)v14 = &unk_1E3D21E48;
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 16) = v11;
          *(_DWORD *)(v14 + 20) = 0;
          *(_DWORD *)(v14 + 24) = v12;
          *(_DWORD *)(v14 + 28) = v11;
          if (v17 <= 0)
            v18 = v11;
          else
            v18 = v17;
          *(_DWORD *)(v14 + 32) = v18;
          *(_QWORD *)(v14 + 40) = v15;
          *(_QWORD *)(v14 + 48) = v16;
          sub_19C190488((_QWORD *)a2, v14);
          if (v9 > 7)
            break;
          if ((int)v13 < 2)
            break;
          v9 = (v9 + 1);
          LODWORD(v13) = v13 - 1;
          v12 += v11;
          v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 72))(a2, v9);
        }
        while (v11 > 0);
      }
      break;
    case 14:
    case 16:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
      v6 = sub_19C18FCD8(a2, 1);
      v7 = sub_19C18FEB8(a2, 9);
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v41 = 0;
      v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t **, uint64_t **, void **, _QWORD, _QWORD, float))(*(_QWORD *)v4 + 48))(v4, 0, v5, v6, v7, __p, 0, 0, 0.0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      sub_19C190488((_QWORD *)a2, v8);
      break;
    case 15:
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
      v25 = *(_QWORD *)(a1 + 8);
      sub_19C185710(__p, 0, v24, 0, 0, 0, v24, v24, v24);
      v26 = sub_19C18FCD8(a2, 1);
      v27 = sub_19C18FCD8(a2, 2);
      v28 = sub_19C18FEB8(a2, 9);
      v29 = (*(uint64_t (**)(uint64_t, void **, uint64_t **, uint64_t **, uint64_t **))(*(_QWORD *)v25 + 16))(v25, __p, v26, v27, v28);
      sub_19C190488((_QWORD *)a2, v29);
      break;
    case 25:
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(__p, a2, 1);
      v30 = *(unsigned int *)(a2 + 1016);
      v31 = operator new();
      v43 = *(_OWORD *)__p;
      v44 = v41;
      v45 = v42;
      v32 = sub_19C18FCD8(a2, 1);
      v33 = sub_19C18FEB8(a2, 9);
      *(_QWORD *)v31 = &unk_1E3D21B40;
      *(_QWORD *)(v31 + 8) = 0;
      v34 = v43;
      v35 = v44;
      *(_OWORD *)(v31 + 16) = v43;
      *(_OWORD *)(v31 + 32) = v35;
      v36 = v45;
      *(_QWORD *)(v31 + 48) = v45;
      *(_DWORD *)(v31 + 96) = v30;
      *(_QWORD *)(v31 + 104) = v32;
      *(_QWORD *)(v31 + 112) = v33;
      *(_OWORD *)(v31 + 56) = v34;
      *(_OWORD *)(v31 + 72) = v35;
      v37 = (int)v30 + 5;
      if ((int)v30 >= 0)
        v37 = v30;
      *(_QWORD *)(v31 + 88) = v36;
      *(_QWORD *)(v31 + 56 + 8 * v37) = 1;
      sub_19C190488((_QWORD *)a2, v31);
      break;
    case 28:
      v19 = *(_QWORD *)(a1 + 8);
      LODWORD(__p[0]) = 2;
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v39, a2, 1);
      v20 = sub_19C18FCD8(a2, 1);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v38, a2, 2);
      v21 = sub_19C18FCD8(a2, 2);
      v22 = sub_19C18FEB8(a2, 9);
      v23 = (*(uint64_t (**)(uint64_t, void **, void **, uint64_t **, _QWORD *, uint64_t **, uint64_t **, _QWORD))(*(_QWORD *)v19 + 24))(v19, __p, v39, v20, v38, v21, v22, 0);
      sub_19C190488((_QWORD *)a2, v23);
      break;
    default:
      return;
  }
}

void sub_19C1896C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C1896D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C189710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t **v5;
  int v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t **v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t **v56;
  uint64_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  uint64_t v63;
  int64x2_t v64;
  _QWORD v65[5];
  int64x2_t v66;
  uint64_t v67;
  int64x2_t v68;
  _QWORD v69[5];
  int64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[5];
  int64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64x2_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64x2_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64x2_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64x2_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64x2_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64x2_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[5];
  int64x2_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[5];
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int64x2_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[5];

  v4 = *(_QWORD *)(a1 + 8);
  LODWORD(v117) = 7;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v126, a2, 1);
  v5 = sub_19C18FCD8(a2, 1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
  v58 = vdupq_n_s64(1uLL);
  v122 = v58;
  v123 = 1;
  v124 = v6;
  v125 = v7;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t **, int64x2_t *, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, &v117, v126, v5, &v122, a2 + 1032, 0);
  sub_19C190488((_QWORD *)a2, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(&v117, a2, 1);
  v9 = sub_19C190608((_QWORD *)a2, 4 * v118 * (int)v117 * v119 * v120 * v121);
  v10 = *(_QWORD *)(a1 + 8);
  LODWORD(v117) = 1;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v116, a2, 1);
  v11 = sub_19C18FCD8(a2, 1);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
  v112 = v58;
  v113 = 1;
  v114 = v12;
  v115 = v13;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t **, int64x2_t *, uint64_t, char *, _QWORD))(*(_QWORD *)v10 + 24))(v10, &v117, v116, v11, &v112, a2 + 1032, v9, 0);
  sub_19C190488((_QWORD *)a2, v14);
  v15 = *(_QWORD *)(a1 + 8);
  LODWORD(v117) = 10;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v111, a2, 1);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
  v107 = v58;
  v108 = 1;
  v109 = v16;
  v110 = v17;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, char *, int64x2_t *, uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, &v117, v111, v9, &v107, a2 + 1040, 0);
  sub_19C190488((_QWORD *)a2, v18);
  v19 = *(_QWORD *)(a1 + 8);
  if (*(float *)(a2 + 1052) == 0.0)
  {
    LODWORD(v117) = 3;
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
    v60 = vdupq_n_s64(1uLL);
    v87 = v60;
    v88 = 1;
    v89 = v34;
    v90 = v35;
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)v19 + 32))(v19, &v117, &v87, a2 + 1040, a2 + 1040, 0, (float)v36);
    sub_19C190488((_QWORD *)a2, v37);
    v38 = *(_QWORD *)(a1 + 8);
    LODWORD(v117) = 0;
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
    v83 = v60;
    v84 = 1;
    v85 = v39;
    v86 = v40;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)v38 + 32))(v38, &v117, &v83, a2 + 1040, a2 + 1040, 0, *(float *)(a2 + 1048));
    sub_19C190488((_QWORD *)a2, v41);
    v42 = *(_QWORD *)(a1 + 8);
    LODWORD(v117) = 4;
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
    v79 = v60;
    v80 = 1;
    v81 = v43;
    v82 = v44;
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
    v75 = v60;
    v76 = 1;
    v77 = v45;
    v78 = v46;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, int64x2_t *, uint64_t, _QWORD))(*(_QWORD *)v42 + 40))(v42, &v117, &v79, a2 + 1040, &v75, a2 + 1040, 0);
  }
  else
  {
    LODWORD(v117) = 3;
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
    v59 = vdupq_n_s64(1uLL);
    v103 = v59;
    v104 = 1;
    v105 = v20;
    v106 = v21;
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)v19 + 32))(v19, &v117, &v103, a2 + 1040, a2 + 1040, 0, (float)(v22 - 1));
    sub_19C190488((_QWORD *)a2, v23);
    v24 = *(_QWORD *)(a1 + 8);
    LODWORD(v117) = 4;
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
    v99 = v59;
    v100 = 1;
    v101 = v25;
    v102 = v26;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
    v95 = v59;
    v96 = 1;
    v97 = v27;
    v98 = v28;
    v29 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, int64x2_t *, uint64_t, _QWORD))(*(_QWORD *)v24 + 40))(v24, &v117, &v99, a2 + 1040, &v95, a2 + 1040, 0);
    sub_19C190488((_QWORD *)a2, v29);
    v30 = *(_QWORD *)(a1 + 8);
    LODWORD(v117) = 0;
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
    v91 = v59;
    v92 = 1;
    v93 = v31;
    v94 = v32;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t *, int64x2_t *, uint64_t, uint64_t, _QWORD, float))(*(_QWORD *)v30 + 32))(v30, &v117, &v91, a2 + 1040, a2 + 1040, 0, *(float *)(a2 + 1048));
  }
  sub_19C190488((_QWORD *)a2, v33);
  v47 = *(_QWORD *)(a1 + 8);
  LODWORD(v117) = 3;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v74, a2, 1);
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
  v61 = vdupq_n_s64(1uLL);
  v70 = v61;
  v71 = 1;
  v72 = v48;
  v73 = v49;
  v50 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, char *, int64x2_t *, uint64_t, char *, _QWORD))(*(_QWORD *)v47 + 24))(v47, &v117, v74, v9, &v70, a2 + 1040, v9, 0);
  sub_19C190488((_QWORD *)a2, v50);
  v51 = *(_QWORD *)(a1 + 8);
  LODWORD(v117) = 2;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v69, a2, 1);
  v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
  v66 = v61;
  v67 = v52;
  v68 = v61;
  v53 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, char *, int64x2_t *, uint64_t, char *, _QWORD))(*(_QWORD *)v51 + 24))(v51, &v117, v69, v9, &v66, a2 + 1016, v9, 0);
  sub_19C190488((_QWORD *)a2, v53);
  v54 = *(_QWORD *)(a1 + 8);
  LODWORD(v117) = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v65, a2, 1);
  v55 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
  v62 = v61;
  v63 = v55;
  v64 = v61;
  v56 = sub_19C18FEB8(a2, 9);
  v57 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, char *, int64x2_t *, uint64_t, uint64_t **, _QWORD))(*(_QWORD *)v54 + 24))(v54, &v117, v65, v9, &v62, a2 + 1024, v56, 0);
  sub_19C190488((_QWORD *)a2, v57);
}

void sub_19C189F18(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t **v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t **v21;
  uint64_t **v22;
  __int128 v23;
  uint64_t v24;
  uint64_t **v25;
  _QWORD *v26;
  uint64_t **v27;
  __int128 v28;
  uint64_t v29;
  uint64_t **v30;
  _QWORD *v31;
  uint64_t **v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  _QWORD *v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  _QWORD *v43;
  uint64_t **v44;
  __int128 v45;
  __int128 v46;
  int v47;
  uint64_t *v48;
  _QWORD *v49;

  v48 = (uint64_t *)&v49;
  v49 = a2;
  if (((*(uint64_t (**)(_QWORD *))(*a2 + 120))(a2) & 0x40) != 0)
  {
    v36 = *(_QWORD *)(a1 + 8);
    sub_19C18A418(&v45, &v48, 2);
    v37 = sub_19C18FCD8((uint64_t)v49, 1);
    v38 = v49 + 127;
    v39 = sub_19C18FEB8((uint64_t)v49, 9);
    v40 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t **, _QWORD *, uint64_t **))(*(_QWORD *)v36 + 16))(v36, &v45, v37, v38, v39);
    sub_19C190488(v49, v40);
    v41 = *(_QWORD *)(a1 + 8);
    sub_19C18A418(&v45, &v48, 0);
    v42 = sub_19C18FEB8((uint64_t)v49, 9);
    v43 = v49 + 128;
    v44 = sub_19C18FEB8((uint64_t)v49, 9);
    v35 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t **, _QWORD *, uint64_t **))(*(_QWORD *)v41 + 16))(v41, &v45, v42, v43, v44);
    v34 = v49;
  }
  else
  {
    v3 = v49;
    v4 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v49 + 64))(v49, 9);
    v5 = sub_19C190608(v3, v4);
    v6 = operator new();
    sub_19C18A418(&v45, &v48, 1);
    v7 = sub_19C18FCD8((uint64_t)v49, 1);
    v8 = v49;
    v9 = sub_19C18FEB8((uint64_t)v49, 9);
    *(_QWORD *)v6 = &unk_1E3D226B8;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = v7;
    *(_QWORD *)(v6 + 24) = v8 + 129;
    *(_QWORD *)(v6 + 32) = v9;
    *(_WORD *)(v6 + 44) = 0;
    v10 = v46;
    *(_OWORD *)(v6 + 48) = v45;
    *(_OWORD *)(v6 + 64) = v10;
    *(_DWORD *)(v6 + 80) = v47;
    sub_19C190488(v49, v6);
    v11 = operator new();
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *, uint64_t))(*v49 + 72))(v49, 1);
    v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v49 + 72))(v49, 1);
    sub_19C185710(&v45, 0, (int)v7, 0, 0, 0, 0, 0, v12);
    v13 = v49;
    v14 = v49 + 130;
    *(_QWORD *)v11 = &unk_1E3D226B8;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = v14;
    *(_QWORD *)(v11 + 24) = v14;
    *(_QWORD *)(v11 + 32) = v5;
    *(_DWORD *)(v11 + 40) = 925353388;
    *(_WORD *)(v11 + 44) = 1;
    v15 = v46;
    *(_OWORD *)(v11 + 48) = v45;
    *(_OWORD *)(v11 + 64) = v15;
    *(_DWORD *)(v11 + 80) = v47;
    sub_19C190488(v13, v11);
    v16 = operator new();
    v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v49 + 72))(v49, 1);
    sub_19C1856F4((uint64_t)&v45, 4, v17);
    *(_QWORD *)v16 = &unk_1E3D226B8;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = v5;
    *(_QWORD *)(v16 + 24) = v5;
    *(_QWORD *)(v16 + 32) = v5;
    *(_WORD *)(v16 + 44) = 0;
    v18 = v46;
    *(_OWORD *)(v16 + 48) = v45;
    *(_OWORD *)(v16 + 64) = v18;
    *(_DWORD *)(v16 + 80) = v47;
    sub_19C190488(v49, v16);
    v19 = operator new();
    v20 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v49 + 72))(v49, 1);
    sub_19C1856F4((uint64_t)&v45, 3, v20);
    v21 = sub_19C18FEB8((uint64_t)v49, 9);
    v22 = sub_19C18FEB8((uint64_t)v49, 9);
    *(_QWORD *)v19 = &unk_1E3D226B8;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = v21;
    *(_QWORD *)(v19 + 24) = v5;
    *(_QWORD *)(v19 + 32) = v22;
    *(_WORD *)(v19 + 44) = 0;
    v23 = v46;
    *(_OWORD *)(v19 + 48) = v45;
    *(_OWORD *)(v19 + 64) = v23;
    *(_DWORD *)(v19 + 80) = v47;
    sub_19C190488(v49, v19);
    v24 = operator new();
    sub_19C18A418(&v45, &v48, 2);
    v25 = sub_19C18FEB8((uint64_t)v49, 9);
    v26 = v49;
    v27 = sub_19C18FEB8((uint64_t)v49, 9);
    *(_QWORD *)v24 = &unk_1E3D226B8;
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 16) = v25;
    *(_QWORD *)(v24 + 24) = v26 + 127;
    *(_QWORD *)(v24 + 32) = v27;
    *(_WORD *)(v24 + 44) = 0;
    v28 = v46;
    *(_OWORD *)(v24 + 48) = v45;
    *(_OWORD *)(v24 + 64) = v28;
    *(_DWORD *)(v24 + 80) = v47;
    sub_19C190488(v49, v24);
    v29 = operator new();
    sub_19C18A418(&v45, &v48, 0);
    v30 = sub_19C18FEB8((uint64_t)v49, 9);
    v31 = v49;
    v32 = sub_19C18FEB8((uint64_t)v49, 9);
    *(_QWORD *)v29 = &unk_1E3D226B8;
    *(_QWORD *)(v29 + 8) = 0;
    *(_QWORD *)(v29 + 16) = v30;
    *(_QWORD *)(v29 + 24) = v31 + 128;
    *(_QWORD *)(v29 + 32) = v32;
    *(_WORD *)(v29 + 44) = 0;
    v33 = v46;
    *(_OWORD *)(v29 + 48) = v45;
    *(_OWORD *)(v29 + 64) = v33;
    *(_DWORD *)(v29 + 80) = v47;
    v34 = v49;
    v35 = v29;
  }
  sub_19C190488(v34, v35);
}

void sub_19C18A3A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C18A3B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C18A3C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C18A3DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C18A3F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C18A404(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_19C18A418(_DWORD *a1, uint64_t **a2, int a3)
{
  uint64_t v6;
  int *v7;
  uint64_t **v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t **v17;
  int *v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  char *v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  int v36;
  int v37;

  v6 = **a2;
  v8 = (uint64_t **)(v6 + 24);
  v7 = *(int **)(v6 + 24);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (char *)v7;
        v10 = v7[8];
        if (v10 < 2)
          break;
        v7 = *(int **)v9;
        v8 = (uint64_t **)v9;
        if (!*(_QWORD *)v9)
          goto LABEL_8;
      }
      if (v10 == 1)
        break;
      v7 = (int *)*((_QWORD *)v9 + 1);
      if (!v7)
      {
        v8 = (uint64_t **)(v9 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v9 = (char *)(v6 + 24);
LABEL_8:
    v11 = v9;
    v9 = (char *)operator new(0x50uLL);
    *((_DWORD *)v9 + 8) = 1;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((_QWORD *)v9 + 9) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v8 = (uint64_t *)v9;
    v12 = **(_QWORD **)(v6 + 16);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(v6 + 16) = v12;
      v13 = *v8;
    }
    sub_19C07CC40(*(uint64_t **)(v6 + 24), v13);
    ++*(_QWORD *)(v6 + 32);
  }
  v14 = *((_DWORD *)v9 + 12) * *((_DWORD *)v9 + 10);
  v15 = **a2;
  if (v14 < 2)
  {
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 72))(**a2, 1);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)**a2 + 72))(**a2, 1);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)**a2 + 72))(**a2, 1);
    return sub_19C185710(a1, a3, v21, 0, 0, 0, v22, 0, v23);
  }
  else
  {
    v17 = (uint64_t **)(v15 + 24);
    v16 = *(int **)(v15 + 24);
    if (v16)
    {
      v18 = *(int **)(v15 + 24);
      while (1)
      {
        while (1)
        {
          v19 = (char *)v18;
          v20 = v18[8];
          if (v20 < 2)
            break;
          v18 = *(int **)v19;
          v17 = (uint64_t **)v19;
          if (!*(_QWORD *)v19)
            goto LABEL_21;
        }
        if (v20 == 1)
          break;
        v18 = (int *)*((_QWORD *)v19 + 1);
        if (!v18)
        {
          v17 = (uint64_t **)(v19 + 8);
          goto LABEL_21;
        }
      }
    }
    else
    {
      v19 = (char *)(v15 + 24);
LABEL_21:
      v25 = v19;
      v19 = (char *)operator new(0x50uLL);
      *((_DWORD *)v19 + 8) = 1;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *((_QWORD *)v19 + 9) = 0;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = v25;
      *v17 = (uint64_t *)v19;
      v26 = **(_QWORD **)(v15 + 16);
      v27 = (uint64_t *)v19;
      if (v26)
      {
        *(_QWORD *)(v15 + 16) = v26;
        v27 = *v17;
      }
      sub_19C07CC40(*(uint64_t **)(v15 + 24), v27);
      ++*(_QWORD *)(v15 + 32);
      v15 = **a2;
      v16 = *(int **)(v15 + 24);
    }
    v28 = *((_DWORD *)v19 + 12) * *((_DWORD *)v19 + 10);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          v30 = (char *)v16;
          v31 = v16[8];
          if (v31 < 2)
            break;
          v16 = *(int **)v30;
          v29 = (uint64_t **)v30;
          if (!*(_QWORD *)v30)
            goto LABEL_31;
        }
        if (v31 == 1)
          break;
        v16 = (int *)*((_QWORD *)v30 + 1);
        if (!v16)
        {
          v29 = (uint64_t **)(v30 + 8);
          goto LABEL_31;
        }
      }
    }
    else
    {
      v29 = (uint64_t **)(v15 + 24);
      v30 = (char *)(v15 + 24);
LABEL_31:
      v32 = v30;
      v30 = (char *)operator new(0x50uLL);
      *((_DWORD *)v30 + 8) = 1;
      *(_OWORD *)(v30 + 40) = 0u;
      *(_OWORD *)(v30 + 56) = 0u;
      *((_QWORD *)v30 + 9) = 0;
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v30 + 1) = 0;
      *((_QWORD *)v30 + 2) = v32;
      *v29 = (uint64_t *)v30;
      v33 = **(_QWORD **)(v15 + 16);
      v34 = (uint64_t *)v30;
      if (v33)
      {
        *(_QWORD *)(v15 + 16) = v33;
        v34 = *v29;
      }
      sub_19C07CC40(*(uint64_t **)(v15 + 24), v34);
      ++*(_QWORD *)(v15 + 32);
      v15 = **a2;
    }
    v35 = *((_DWORD *)v30 + 14);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 72))(v15, 1);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)**a2 + 72))(**a2, 1);
    return sub_19C185730(a1, a3, v28, v35, 0, 0, 0, v36, 0, v37);
  }
}

void sub_19C18A764(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  char v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  void *__p[2];
  __int128 v95;
  int v96;

  v4 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  v5 = (*(uint64_t (**)(_QWORD *))(*a2 + 88))(a2);
  v6 = sub_19C190608(a2, v5 * v4);
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 88))(a2);
  v90 = sub_19C190608(a2, v8 * v7);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  v10 = (*(uint64_t (**)(_QWORD *))(*a2 + 88))(a2);
  v93 = sub_19C190608(a2, v10 * v9);
  v11 = a2[127];
  v12 = a2[130];
  v13 = a2[133];
  v14 = a2[136];
  v15 = a1;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 72))(a2, 1);
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  v19 = sub_19C18FCD8((uint64_t)a2, 1);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v95 = 0;
  v83 = 0;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t, char *, uint64_t, _QWORD, void **, char))(*(_QWORD *)v16 + 56))(v16, v17, v18, v19, v11, v6, v12, 0, __p, v83);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_19C190488(a2, v20);
  v21 = *(_QWORD *)(v15 + 8);
  v22 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v95 = 0;
  LOBYTE(v84) = 0;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, char *, uint64_t, _QWORD, void **, int))(*(_QWORD *)v21 + 56))(v21, v22, v23, a2 + 161, v13, v93, v14, 0, __p, v84);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v92 = v14;
  sub_19C190488(a2, v24);
  v25 = operator new();
  v26 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  sub_19C1856F4((uint64_t)__p, 0, v26);
  *(_QWORD *)v25 = &unk_1E3D226B8;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = v6;
  *(_QWORD *)(v25 + 24) = v93;
  *(_QWORD *)(v25 + 32) = v6;
  *(_WORD *)(v25 + 44) = 0;
  v27 = v95;
  *(_OWORD *)(v25 + 48) = *(_OWORD *)__p;
  *(_OWORD *)(v25 + 64) = v27;
  *(_DWORD *)(v25 + 80) = v96;
  sub_19C190488(a2, v25);
  v28 = *(_QWORD *)(v15 + 8);
  v29 = a2[165];
  v30 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v95 = 0;
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char *, void **, _QWORD, _QWORD, float))(*(_QWORD *)v28 + 48))(v28, v29, v30, v6, v6, __p, 0, 0, 0.0);
  v89 = v13;
  v32 = v13 + 16;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_19C190488(a2, v31);
  v33 = *(_QWORD *)(v15 + 8);
  v34 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  v35 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v95 = 0;
  LOBYTE(v85) = 0;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, char *, uint64_t, _QWORD, void **, int))(*(_QWORD *)v33 + 56))(v33, v34, v35, a2 + 161, v32, v90, v92 + 16, 0, __p, v85);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v91 = a2 + 161;
  sub_19C190488(a2, v36);
  v37 = operator new();
  v38 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  sub_19C1856F4((uint64_t)__p, 2, v38);
  *(_QWORD *)v37 = &unk_1E3D226B8;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = v6;
  *(_QWORD *)(v37 + 24) = v90;
  *(_QWORD *)(v37 + 32) = v90;
  *(_WORD *)(v37 + 44) = 0;
  v39 = v95;
  *(_OWORD *)(v37 + 48) = *(_OWORD *)__p;
  *(_OWORD *)(v37 + 64) = v39;
  *(_DWORD *)(v37 + 80) = v96;
  sub_19C190488(a2, v37);
  v40 = *(_QWORD *)(v15 + 8);
  v41 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 72))(a2, 1);
  v42 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  v43 = sub_19C18FCD8((uint64_t)a2, 1);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v95 = 0;
  LOBYTE(v86) = 0;
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t, char *, uint64_t, _QWORD, void **, int))(*(_QWORD *)v40 + 56))(v40, v41, v42, v43, v11 + 16, v93, v12 + 16, 0, __p, v86);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_19C190488(a2, v44);
  v45 = operator new();
  v46 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  sub_19C1856F4((uint64_t)__p, 0, v46);
  *(_QWORD *)v45 = &unk_1E3D226B8;
  *(_QWORD *)(v45 + 8) = 0;
  *(_QWORD *)(v45 + 16) = v90;
  *(_QWORD *)(v45 + 24) = v93;
  *(_QWORD *)(v45 + 32) = v90;
  *(_WORD *)(v45 + 44) = 0;
  v47 = v95;
  *(_OWORD *)(v45 + 48) = *(_OWORD *)__p;
  *(_OWORD *)(v45 + 64) = v47;
  *(_DWORD *)(v45 + 80) = v96;
  sub_19C190488(a2, v45);
  v48 = *(_QWORD *)(v15 + 8);
  v49 = a2[166];
  v50 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v95 = 0;
  v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char *, void **, _QWORD, _QWORD, float))(*(_QWORD *)v48 + 48))(v48, v49, v50, v90, v90, __p, 0, 0, 0.0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_19C190488(a2, v51);
  v52 = *(_QWORD *)(v15 + 8);
  v53 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 72))(a2, 1);
  v54 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  v55 = sub_19C18FCD8((uint64_t)a2, 1);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v95 = 0;
  LOBYTE(v87) = 0;
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t, char *, uint64_t, _QWORD, void **, int))(*(_QWORD *)v52 + 56))(v52, v53, v54, v55, v11 + 8, v6, v12 + 8, 0, __p, v87);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_19C190488(a2, v56);
  v57 = *(_QWORD *)(v15 + 8);
  v58 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  v59 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v95 = 0;
  LOBYTE(v88) = 0;
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, char *, uint64_t, _QWORD, void **, int))(*(_QWORD *)v57 + 56))(v57, v58, v59, v91, v89 + 8, v93, v92 + 8, 0, __p, v88);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_19C190488(a2, v60);
  v61 = operator new();
  v62 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  sub_19C1856F4((uint64_t)__p, 0, v62);
  *(_QWORD *)v61 = &unk_1E3D226B8;
  *(_QWORD *)(v61 + 8) = 0;
  *(_QWORD *)(v61 + 16) = v6;
  *(_QWORD *)(v61 + 24) = v93;
  *(_QWORD *)(v61 + 32) = v6;
  *(_WORD *)(v61 + 44) = 0;
  v63 = v95;
  *(_OWORD *)(v61 + 48) = *(_OWORD *)__p;
  *(_OWORD *)(v61 + 64) = v63;
  *(_DWORD *)(v61 + 80) = v96;
  sub_19C190488(a2, v61);
  v64 = *(_QWORD *)(v15 + 8);
  v65 = a2[167];
  v66 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v95 = 0;
  v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char *, void **, _QWORD, _QWORD, float))(*(_QWORD *)v64 + 48))(v64, v65, v66, v6, v6, __p, 0, 0, 0.0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_19C190488(a2, v67);
  v68 = operator new();
  v69 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  sub_19C1856F4((uint64_t)__p, 2, v69);
  *(_QWORD *)v68 = &unk_1E3D226B8;
  *(_QWORD *)(v68 + 8) = 0;
  *(_QWORD *)(v68 + 16) = v91;
  *(_QWORD *)(v68 + 24) = v6;
  *(_QWORD *)(v68 + 32) = v91;
  *(_WORD *)(v68 + 44) = 0;
  v70 = v95;
  *(_OWORD *)(v68 + 48) = *(_OWORD *)__p;
  *(_OWORD *)(v68 + 64) = v70;
  *(_DWORD *)(v68 + 80) = v96;
  sub_19C190488(a2, v68);
  v71 = operator new();
  v72 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  sub_19C1856F4((uint64_t)__p, 2, v72);
  *(_QWORD *)v71 = &unk_1E3D226B8;
  *(_QWORD *)(v71 + 8) = 0;
  *(_QWORD *)(v71 + 16) = v6;
  *(_QWORD *)(v71 + 24) = v6;
  *(_QWORD *)(v71 + 32) = v6;
  *(_DWORD *)(v71 + 40) = -1082130432;
  *(_WORD *)(v71 + 44) = 1;
  v73 = v95;
  *(_OWORD *)(v71 + 48) = *(_OWORD *)__p;
  *(_OWORD *)(v71 + 64) = v73;
  *(_DWORD *)(v71 + 80) = v96;
  sub_19C190488(a2, v71);
  v74 = operator new();
  v75 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  sub_19C1856F4((uint64_t)__p, 0, v75);
  *(_QWORD *)v74 = &unk_1E3D226B8;
  *(_QWORD *)(v74 + 8) = 0;
  *(_QWORD *)(v74 + 16) = v6;
  *(_QWORD *)(v74 + 24) = v6;
  *(_QWORD *)(v74 + 32) = v6;
  *(_DWORD *)(v74 + 40) = 1065353216;
  *(_WORD *)(v74 + 44) = 1;
  v76 = v95;
  *(_OWORD *)(v74 + 48) = *(_OWORD *)__p;
  *(_OWORD *)(v74 + 64) = v76;
  *(_DWORD *)(v74 + 80) = v96;
  sub_19C190488(a2, v74);
  v77 = operator new();
  v78 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  sub_19C1856F4((uint64_t)__p, 2, v78);
  *(_QWORD *)v77 = &unk_1E3D226B8;
  *(_QWORD *)(v77 + 8) = 0;
  *(_QWORD *)(v77 + 16) = v6;
  *(_QWORD *)(v77 + 24) = v90;
  *(_QWORD *)(v77 + 32) = v6;
  *(_WORD *)(v77 + 44) = 0;
  v79 = v95;
  *(_OWORD *)(v77 + 48) = *(_OWORD *)__p;
  *(_OWORD *)(v77 + 64) = v79;
  *(_DWORD *)(v77 + 80) = v96;
  sub_19C190488(a2, v77);
  v80 = operator new();
  v81 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 80))(a2, 9);
  sub_19C1856F4((uint64_t)__p, 0, v81);
  *(_QWORD *)v80 = &unk_1E3D226B8;
  *(_QWORD *)(v80 + 8) = 0;
  *(_QWORD *)(v80 + 16) = v91;
  *(_QWORD *)(v80 + 24) = v6;
  *(_QWORD *)(v80 + 32) = v91;
  *(_WORD *)(v80 + 44) = 0;
  v82 = v95;
  *(_OWORD *)(v80 + 48) = *(_OWORD *)__p;
  *(_OWORD *)(v80 + 64) = v82;
  *(_DWORD *)(v80 + 80) = v96;
  sub_19C190488(a2, v80);
}

void sub_19C18B1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C18B27C(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  char v19;
  int v20;
  void *__p;
  void *v22;
  uint64_t v23;

  v4 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 216))(a2, 2);
  v5 = (*(uint64_t (**)(_QWORD *))(*a2 + 88))(a2);
  v6 = sub_19C190608(a2, v5 * v4);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 72))(a2, 2);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 216))(a2, 2);
  v10 = sub_19C18FCD8((uint64_t)a2, 1);
  v11 = sub_19C18FCD8((uint64_t)a2, 2);
  __p = 0;
  v22 = 0;
  v23 = 0;
  v19 = 0;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t **, char *, _QWORD *, uint64_t, void **, char))(*(_QWORD *)v7 + 56))(v7, v8, v9, v10, v11, v6, a2 + 38, 4, &__p, v19);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  sub_19C190488(a2, v12);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 216))(a2, 2);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 72))(a2, 2);
  v16 = sub_19C18FCD8((uint64_t)a2, 2);
  v17 = sub_19C18FEB8((uint64_t)a2, 9);
  __p = 0;
  v22 = 0;
  v23 = 0;
  LOBYTE(v20) = 1;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t **, uint64_t **, _QWORD *, _QWORD, void **, int))(*(_QWORD *)v13 + 56))(v13, v14, v15, v6, v16, v17, a2 + 38, 0, &__p, v20);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  sub_19C190488(a2, v18);
}

void sub_19C18B45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C18B47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  int v12;
  uint64_t **v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  int v29;
  int v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t **v35;
  __int128 v36;
  __int128 v37;
  int v38;
  int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t **v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  char *v78;
  _QWORD v79[5];
  _QWORD v80[5];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _OWORD v84[2];
  uint64_t v85;
  int64x2_t v86;
  uint64_t v87;
  int64x2_t v88;
  _OWORD v89[2];
  uint64_t v90;
  void *__p;
  void *v92;
  uint64_t v93;
  _QWORD v94[5];
  _QWORD v95[5];
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _QWORD v102[5];
  _QWORD v103[5];
  int64x2_t v104;
  uint64_t v105;
  int64x2_t v106;
  int64x2_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[5];
  _QWORD v112[5];
  _OWORD v113[2];
  uint64_t v114;
  _OWORD v115[2];
  uint64_t v116;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v6 = v5 * v4;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  v78 = sub_19C190608((_QWORD *)a2, v5 * (int)v4 * v7);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2) & 0x40) == 0)
  {
    v8 = *(_DWORD *)(a2 + 1056) * v4;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v10 = sub_19C190608((_QWORD *)a2, v8 * v9);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(&v99, a2, 2);
    v11 = *(_DWORD *)(a2 + 1056);
    *(_QWORD *)&v100 = v11;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v13 = (uint64_t **)sub_19C190608((_QWORD *)a2, v12 * v11);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(&v96, a2, 1);
    *(_QWORD *)&v97 = *(int *)(a2 + 1056);
    if (*(_QWORD *)(a2 + 1032))
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 2);
      v95[0] = 1;
      v95[1] = (int)v4;
      v95[2] = v15;
      v95[3] = v5;
      v95[4] = 1;
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 2);
      v17 = *(int *)(a2 + 1056);
      v94[0] = 1;
      v94[1] = v16;
      v94[2] = v17;
      v94[3] = v5;
      v94[4] = 1;
      v18 = sub_19C18FCD8(a2, 2);
      __p = 0;
      v92 = 0;
      v93 = 0;
      v19 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t **, uint64_t, char *, _QWORD, void **, _BYTE))(*(_QWORD *)v14 + 64))(v14, v95, v94, v18, a2 + 1032, v10, 0, &__p, 0);
      if (__p)
      {
        v92 = __p;
        operator delete(__p);
      }
      sub_19C190488((_QWORD *)a2, v19);
    }
    v20 = (_QWORD *)(a2 + 1040);
    v21 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(a2 + 1040))
    {
      v22 = v4;
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
      v24 = *(unsigned int *)(a2 + 1056);
      v25 = sub_19C18FCD8(a2, 1);
      __p = 0;
      v92 = 0;
      v93 = 0;
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t, uint64_t **, uint64_t, _QWORD, void **, _BYTE))(*(_QWORD *)v21 + 56))(v21, v23, v24, v25, a2 + 1040, v13, a2 + 304, 0, &__p, 0);
      if (__p)
      {
        v92 = __p;
        operator delete(__p);
      }
      sub_19C190488((_QWORD *)a2, v26);
      v27 = *(_QWORD *)(a2 + 1040);
      v21 = *(_QWORD *)(a1 + 8);
      LODWORD(__p) = 0;
      if (v27)
      {
        v89[0] = v96;
        v89[1] = v97;
        v90 = v98;
        v28 = v13;
        goto LABEL_20;
      }
      v4 = v22;
    }
    else
    {
      LODWORD(__p) = 0;
    }
    v22 = v4;
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v89, a2, 1);
    if (*(_QWORD *)(a2 + 1040))
    {
      v28 = v13;
    }
    else
    {
      v28 = sub_19C18FCD8(a2, 1);
      if (!*(_QWORD *)(a2 + 1040))
      {
        v74 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 2);
        v86 = vdupq_n_s64(1uLL);
        v87 = v74;
        v88 = v86;
        if (!*(_QWORD *)(a2 + 1040))
        {
          v56 = sub_19C18FCD8(a2, 1);
LABEL_22:
          v57 = (*(uint64_t (**)(uint64_t, void **, _OWORD *, uint64_t **, int64x2_t *, uint64_t, uint64_t **, _QWORD))(*(_QWORD *)v21 + 24))(v21, &__p, v89, v28, &v86, a2 + 1024, v56, 0);
          sub_19C190488((_QWORD *)a2, v57);
          v58 = *(_QWORD *)(a1 + 8);
          LODWORD(__p) = 0;
          v84[0] = v99;
          v84[1] = v100;
          v85 = v101;
          v59 = (uint64_t **)v10;
          if (*(_QWORD *)(a2 + 1032))
          {
            v81 = v96;
            v82 = v97;
            v83 = v98;
            if (*v20)
            {
LABEL_24:
              v60 = (*(uint64_t (**)(uint64_t, void **, _OWORD *, uint64_t **, __int128 *, uint64_t **, char *, uint64_t))(*(_QWORD *)v58 + 24))(v58, &__p, v84, v59, &v81, v13, v10, 2);
              sub_19C190488((_QWORD *)a2, v60);
              v61 = *(_QWORD *)(a1 + 8);
              v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 2);
              v63 = *(int *)(a2 + 1056);
              v80[0] = 1;
              v80[1] = v62;
              v80[2] = v63;
              v80[3] = v5;
              v80[4] = 1;
              v79[0] = 1;
              v79[1] = v63;
              v79[2] = 1;
              v79[3] = v5;
              v79[4] = 1;
              v64 = sub_19C18FEB8(a2, 10);
              __p = 0;
              v92 = 0;
              v93 = 0;
              LOBYTE(v75) = 0;
              v52 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, char *, uint64_t, uint64_t **, _QWORD, void **, int))(*(_QWORD *)v61 + 64))(v61, v80, v79, v10, a2 + 1048, v64, 0, &__p, v75);
              v53 = __p;
              v54 = v78;
              if (!__p)
                goto LABEL_27;
              v92 = __p;
              goto LABEL_26;
            }
          }
          else
          {
            v59 = sub_19C18FCD8(a2, 2);
            v81 = v96;
            v82 = v97;
            v83 = v98;
            if (*v20)
              goto LABEL_24;
          }
          v13 = sub_19C18FCD8(a2, 1);
          goto LABEL_24;
        }
LABEL_21:
        v56 = v13;
        goto LABEL_22;
      }
    }
LABEL_20:
    v55 = *(int *)(a2 + 1056);
    v86 = vdupq_n_s64(1uLL);
    v87 = v55;
    v88 = v86;
    goto LABEL_21;
  }
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 2) + v29;
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  v32 = sub_19C190608((_QWORD *)a2, v6 * v30 * v31);
  v33 = operator new();
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v115, a2, 1);
  v34 = sub_19C18FCD8(a2, 1);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(v113, a2, 2);
  v35 = sub_19C18FCD8(a2, 2);
  v36 = v115[1];
  *(_OWORD *)(v33 + 16) = v115[0];
  *(_OWORD *)(v33 + 32) = v36;
  v37 = v113[1];
  *(_OWORD *)(v33 + 56) = v113[0];
  *(_QWORD *)v33 = &unk_1E3D21E70;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 48) = v116;
  *(_OWORD *)(v33 + 72) = v37;
  *(_QWORD *)(v33 + 88) = v114;
  *(_QWORD *)(v33 + 96) = v34;
  *(_QWORD *)(v33 + 104) = v35;
  *(_QWORD *)(v33 + 112) = v32;
  sub_19C190488((_QWORD *)a2, v33);
  v38 = *(_DWORD *)(a2 + 1056);
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  v40 = sub_19C190608((_QWORD *)a2, v6 * v38 * v39);
  v41 = *(int *)(a2 + 1056);
  v42 = v5;
  v43 = *(_QWORD *)(a1 + 8);
  v112[0] = 1;
  v112[1] = (int)v4;
  v112[2] = v30;
  v112[3] = v5;
  v112[4] = 1;
  v111[0] = 1;
  v111[1] = v30;
  v111[2] = v41;
  v111[3] = v5;
  v111[4] = 1;
  v99 = 0uLL;
  *(_QWORD *)&v100 = 0;
  v44 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, char *, uint64_t, char *, _QWORD, __int128 *, _BYTE))(*(_QWORD *)v43 + 64))(v43, v112, v111, v32, a2 + 1016, v40, 0, &v99, 0);
  if ((_QWORD)v99)
  {
    *((_QWORD *)&v99 + 1) = v99;
    operator delete((void *)v99);
  }
  sub_19C190488((_QWORD *)a2, v44);
  v45 = *(_QWORD *)(a1 + 8);
  LODWORD(v99) = 0;
  v107 = vdupq_n_s64(1uLL);
  v108 = v41;
  v109 = v42;
  v110 = (int)v4;
  v46 = *(int *)(a2 + 1056);
  v104 = v107;
  v105 = v46;
  v106 = v107;
  v47 = (*(uint64_t (**)(uint64_t, __int128 *, int64x2_t *, char *, int64x2_t *, uint64_t, char *, uint64_t))(*(_QWORD *)v45 + 24))(v45, &v99, &v107, v40, &v104, a2 + 1024, v40, 2);
  sub_19C190488((_QWORD *)a2, v47);
  v48 = *(_QWORD *)(a1 + 8);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 2);
  v50 = *(int *)(a2 + 1056);
  v103[0] = 1;
  v103[1] = v49;
  v103[2] = v50;
  v103[3] = v42;
  v103[4] = 1;
  v102[0] = 1;
  v102[1] = v50;
  v102[2] = 1;
  v102[3] = v42;
  v102[4] = 1;
  v51 = sub_19C18FEB8(a2, 10);
  v99 = 0uLL;
  *(_QWORD *)&v100 = 0;
  LOBYTE(v76) = 0;
  v52 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, char *, uint64_t, uint64_t **, _QWORD, __int128 *, int))(*(_QWORD *)v48 + 64))(v48, v103, v102, v40, a2 + 1048, v51, 0, &v99, v76);
  v53 = (void *)v99;
  v22 = v4;
  v54 = v78;
  if ((_QWORD)v99)
  {
    *((_QWORD *)&v99 + 1) = v99;
LABEL_26:
    operator delete(v53);
  }
LABEL_27:
  sub_19C190488((_QWORD *)a2, v52);
  v65 = *(_QWORD *)(a1 + 8);
  v66 = sub_19C18FEB8(a2, 10);
  v99 = 0uLL;
  *(_QWORD *)&v100 = 0;
  v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t **, char *, __int128 *, _QWORD, _QWORD, float))(*(_QWORD *)v65 + 48))(v65, 4, v22, v66, v54, &v99, 0, 0, 0.0);
  if ((_QWORD)v99)
  {
    *((_QWORD *)&v99 + 1) = v99;
    operator delete((void *)v99);
  }
  sub_19C190488((_QWORD *)a2, v67);
  v68 = *(_QWORD *)(a1 + 8);
  v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, 3);
  v70 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, 3);
  v71 = sub_19C18FCD8(a2, 3);
  v72 = sub_19C18FEB8(a2, 9);
  v99 = 0uLL;
  *(_QWORD *)&v100 = 0;
  LOBYTE(v77) = 1;
  v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t **, uint64_t **, uint64_t, _QWORD, __int128 *, int))(*(_QWORD *)v68 + 56))(v68, v69, v70, v54, v71, v72, a2 + 304, 0, &v99, v77);
  if ((_QWORD)v99)
  {
    *((_QWORD *)&v99 + 1) = v99;
    operator delete((void *)v99);
  }
  sub_19C190488((_QWORD *)a2, v73);
}

void sub_19C18BD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C18BDC0(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  int v66;
  int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t **v76;
  char v77;
  int v78;
  int v79;
  int v80;
  int v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int64x2_t v88;
  int64x2_t v89;
  uint64_t v90;
  _QWORD v91[5];
  _QWORD v92[5];
  int64x2_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[5];
  _QWORD v98[5];
  _QWORD v99[5];
  _QWORD v100[5];
  _QWORD v101[5];
  _QWORD v102[5];
  int64x2_t v103;
  uint64_t v104;
  int64x2_t v105;
  _QWORD v106[5];
  _QWORD v107[3];
  int64x2_t v108;
  _QWORD v109[5];
  int64x2_t v110;
  uint64_t v111;
  int64x2_t v112;
  _QWORD v113[5];
  _QWORD v114[3];
  int64x2_t v115;
  _QWORD v116[5];
  int64x2_t v117;
  uint64_t v118;
  int64x2_t v119;
  _QWORD v120[5];
  void *v121;
  void *v122;
  uint64_t v123;
  _QWORD v124[3];
  int64x2_t v125;
  _QWORD v126[7];

  v4 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 216))(a2, 1);
  v87 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 216))(a2, 2);
  v5 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 72))(a2, 1);
  v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 224))(a2);
  v84 = v4;
  v85 = v6 * v4;
  v7 = v6 * v4 * a2[270] * a2[271];
  v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 88))(a2);
  v9 = sub_19C190608(a2, v7 * v8);
  v10 = *(_QWORD *)(a1 + 8);
  (*(void (**)(_QWORD *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)a2 + 160))(v126, a2, 1);
  v11 = v5;
  v124[0] = 1;
  v124[1] = v5;
  v124[2] = v5;
  v125 = vdupq_n_s64(1uLL);
  v12 = sub_19C18FCD8((uint64_t)a2, 1);
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v77 = 0;
  v13 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t **, _DWORD *, char *, _QWORD, void **, char))(*(_QWORD *)v10 + 64))(v10, v126, v124, v12, a2 + 258, v9, 0, &v121, v77);
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  sub_19C190488(a2, v13);
  v14 = *(_QWORD *)(a1 + 8);
  LODWORD(v121) = 0;
  (*(void (**)(_QWORD *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)a2 + 160))(v120, a2, 1);
  v89 = vdupq_n_s64(1uLL);
  v117 = v89;
  v118 = v11;
  v119 = v89;
  v15 = (*(uint64_t (**)(uint64_t, void **, _QWORD *, char *, int64x2_t *, _DWORD *, char *, _QWORD))(*(_QWORD *)v14 + 24))(v14, &v121, v120, v9, &v117, a2 + 264, v9, 0);
  sub_19C190488(a2, v15);
  v86 = v6 * v87;
  v16 = a2[270] * v6 * v87 * a2[271];
  v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 88))(a2);
  v18 = sub_19C190608(a2, v16 * v17);
  v19 = *(_QWORD *)(a1 + 8);
  (*(void (**)(_QWORD *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)a2 + 160))(v116, a2, 2);
  v114[0] = 1;
  v114[1] = v11;
  v114[2] = v11;
  v115 = v89;
  v20 = sub_19C18FCD8((uint64_t)a2, 2);
  v121 = 0;
  v122 = 0;
  v123 = 0;
  LOBYTE(v78) = 0;
  v21 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t **, _DWORD *, char *, _QWORD, void **, int))(*(_QWORD *)v19 + 64))(v19, v116, v114, v20, a2 + 256, v18, 0, &v121, v78);
  v83 = v6;
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  sub_19C190488(a2, v21);
  v22 = *(_QWORD *)(a1 + 8);
  LODWORD(v121) = 0;
  (*(void (**)(_QWORD *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)a2 + 160))(v113, a2, 2);
  v88 = vdupq_n_s64(1uLL);
  v110 = v88;
  v111 = v11;
  v112 = v88;
  v23 = (*(uint64_t (**)(uint64_t, void **, _QWORD *, char *, int64x2_t *, _DWORD *, char *, _QWORD))(*(_QWORD *)v22 + 24))(v22, &v121, v113, v18, &v110, a2 + 262, v18, 0);
  sub_19C190488(a2, v23);
  v24 = a2[270] * v86 * a2[271];
  v25 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 88))(a2);
  v26 = sub_19C190608(a2, v24 * v25);
  v90 = a1;
  v27 = *(_QWORD *)(a1 + 8);
  (*(void (**)(_QWORD *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)a2 + 160))(v109, a2, 3);
  v107[0] = 1;
  v107[1] = v11;
  v107[2] = v11;
  v108 = v88;
  v28 = sub_19C18FCD8((uint64_t)a2, 3);
  v121 = 0;
  v122 = 0;
  v123 = 0;
  LOBYTE(v79) = 0;
  v29 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, uint64_t **, _DWORD *, char *, _QWORD, void **, int))(*(_QWORD *)v27 + 64))(v27, v109, v107, v28, a2 + 254, v26, 0, &v121, v79);
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  sub_19C190488(a2, v29);
  v30 = *(_QWORD *)(a1 + 8);
  LODWORD(v121) = 0;
  (*(void (**)(_QWORD *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)a2 + 160))(v106, a2, 3);
  v103 = vdupq_n_s64(1uLL);
  v104 = v11;
  v105 = v103;
  v31 = (*(uint64_t (**)(uint64_t, void **, _QWORD *, char *, int64x2_t *, _DWORD *, char *, _QWORD))(*(_QWORD *)v30 + 24))(v30, &v121, v106, v26, &v103, a2 + 260, v26, 0);
  sub_19C190488(a2, v31);
  v32 = a2[270] * v85 * a2[271];
  v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 88))(a2);
  v82 = sub_19C190608(a2, v32 * v33);
  v34 = operator new();
  v35 = (int)a2[270];
  v36 = (int)a2[271];
  *(_QWORD *)v34 = &unk_1E3D22850;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 1;
  *(_QWORD *)(v34 + 24) = v35;
  *(_QWORD *)(v34 + 32) = v36;
  *(_QWORD *)(v34 + 40) = 1;
  *(_OWORD *)(v34 + 96) = xmmword_19C276E20;
  *(_OWORD *)(v34 + 112) = xmmword_19C277A60;
  *(_QWORD *)(v34 + 128) = 2;
  *(_QWORD *)(v34 + 136) = v9;
  *(_QWORD *)(v34 + 144) = v82;
  *(_QWORD *)(v34 + 48) = v84;
  *(_QWORD *)(v34 + 56) = 1;
  *(_QWORD *)(v34 + 64) = v35;
  *(_QWORD *)(v34 + 72) = v84;
  *(_QWORD *)(v34 + 80) = 1;
  *(_QWORD *)(v34 + 88) = v36;
  sub_19C190488(a2, v34);
  v37 = a2[270] * v86 * a2[271];
  v38 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 88))(a2);
  v39 = sub_19C190608(a2, v37 * v38);
  v40 = operator new();
  v41 = (int)a2[270];
  v42 = (int)a2[271];
  *(_QWORD *)v40 = &unk_1E3D22850;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 1;
  *(_QWORD *)(v40 + 24) = v41;
  *(_QWORD *)(v40 + 32) = v42;
  *(_QWORD *)(v40 + 40) = 1;
  *(_OWORD *)(v40 + 96) = xmmword_19C276E20;
  *(_OWORD *)(v40 + 112) = xmmword_19C277A60;
  *(_QWORD *)(v40 + 128) = 2;
  *(_QWORD *)(v40 + 136) = v18;
  *(_QWORD *)(v40 + 144) = v39;
  *(_QWORD *)(v40 + 48) = v87;
  *(_QWORD *)(v40 + 56) = 1;
  *(_QWORD *)(v40 + 64) = v41;
  *(_QWORD *)(v40 + 72) = v87;
  *(_QWORD *)(v40 + 80) = 1;
  *(_QWORD *)(v40 + 88) = v42;
  sub_19C190488(a2, v40);
  v43 = a2[270] * v86 * a2[271];
  v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 88))(a2);
  v45 = sub_19C190608(a2, v43 * v44);
  v46 = operator new();
  v47 = (int)a2[270];
  v48 = (int)a2[271];
  *(_QWORD *)v46 = &unk_1E3D22850;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = 1;
  *(_QWORD *)(v46 + 24) = v47;
  *(_QWORD *)(v46 + 32) = v48;
  *(_QWORD *)(v46 + 40) = 1;
  *(_OWORD *)(v46 + 96) = xmmword_19C276E20;
  *(_OWORD *)(v46 + 112) = xmmword_19C277A60;
  *(_QWORD *)(v46 + 128) = 2;
  *(_QWORD *)(v46 + 136) = v26;
  *(_QWORD *)(v46 + 144) = v45;
  *(_QWORD *)(v46 + 48) = v87;
  *(_QWORD *)(v46 + 56) = 1;
  *(_QWORD *)(v46 + 64) = v47;
  *(_QWORD *)(v46 + 72) = v87;
  *(_QWORD *)(v46 + 80) = 1;
  *(_QWORD *)(v46 + 88) = v48;
  sub_19C190488(a2, v46);
  v49 = v85 * v87 * a2[271];
  v50 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 88))(a2);
  v51 = sub_19C190608(a2, v49 * v50);
  v52 = *(_QWORD *)(v90 + 8);
  v53 = (int)a2[270];
  v54 = (int)a2[271];
  v102[0] = 1;
  v102[1] = v84;
  v102[2] = v53;
  v102[3] = v83;
  v102[4] = v54;
  v101[0] = 1;
  v101[1] = v53;
  v101[2] = v87;
  v101[3] = v83;
  v101[4] = v54;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  LOBYTE(v80) = 0;
  v55 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, char *, char *, char *, _QWORD, void **, int))(*(_QWORD *)v52 + 64))(v52, v102, v101, v82, v39, v51, 0, &v121, v80);
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  sub_19C190488(a2, v55);
  if (*((_BYTE *)a2 + 1088))
  {
    v56 = *(_QWORD *)(v90 + 8);
    LODWORD(v121) = 2;
    v57 = (int)a2[271];
    v100[0] = 1;
    v100[1] = v87;
    v100[2] = v84;
    v100[3] = 1;
    v100[4] = v57;
    v99[0] = 1;
    v99[1] = v87;
    v99[2] = v84;
    v99[3] = 1;
    v99[4] = v57;
    v58 = (*(uint64_t (**)(uint64_t, void **, _QWORD *, char *, _QWORD *, _DWORD *, char *, _QWORD))(*(_QWORD *)v56 + 24))(v56, &v121, v100, v51, v99, a2 + 266, v51, 0);
    sub_19C190488(a2, v58);
    v59 = *(_QWORD *)(v90 + 8);
    LODWORD(v121) = 0;
    v60 = (int)a2[271];
    v98[0] = 1;
    v98[1] = v87;
    v98[2] = v84;
    v98[3] = 1;
    v98[4] = v60;
    v97[0] = 1;
    v97[1] = v87;
    v97[2] = v84;
    v97[3] = 1;
    v97[4] = v60;
    v61 = (*(uint64_t (**)(uint64_t, void **, _QWORD *, char *, _QWORD *, _DWORD *, char *, _QWORD))(*(_QWORD *)v59 + 24))(v59, &v121, v98, v51, v97, a2 + 268, v51, 0);
    sub_19C190488(a2, v61);
  }
  LODWORD(v121) = 3;
  v62 = (int)a2[271] * (uint64_t)v84;
  v63 = *(_QWORD *)(v90 + 8);
  v93 = vdupq_n_s64(1uLL);
  v94 = v87;
  v95 = 1;
  v96 = v62;
  v64 = sqrt((double)(int)a2[270]);
  v65 = (*(uint64_t (**)(uint64_t, void **, int64x2_t *, char *, char *, uint64_t, float))(*(_QWORD *)v63 + 32))(v63, &v121, &v93, v51, v51, 4, v64);
  sub_19C190488(a2, v65);
  v66 = a2[271] * v85 * a2[270];
  v67 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 88))(a2);
  v68 = sub_19C190608(a2, v66 * v67);
  v69 = *(_QWORD *)(v90 + 8);
  v70 = (int)a2[271];
  v92[0] = 1;
  v92[1] = v84;
  v92[2] = v87;
  v92[3] = v83;
  v92[4] = v70;
  v71 = (int)a2[270];
  v91[0] = 1;
  v91[1] = v87;
  v91[2] = v71;
  v91[3] = v83;
  v91[4] = v70;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  LOBYTE(v81) = 1;
  v72 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, char *, char *, char *, _QWORD, void **, int))(*(_QWORD *)v69 + 64))(v69, v92, v91, v51, v45, v68, 0, &v121, v81);
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  sub_19C190488(a2, v72);
  v73 = operator new();
  v74 = (int)a2[270];
  v75 = (int)a2[271];
  v76 = sub_19C18FEB8((uint64_t)a2, 9);
  *(_QWORD *)v73 = &unk_1E3D22850;
  *(_QWORD *)(v73 + 8) = 0;
  *(_QWORD *)(v73 + 16) = 1;
  *(_QWORD *)(v73 + 24) = v74;
  *(_QWORD *)(v73 + 32) = v84;
  *(_QWORD *)(v73 + 40) = 1;
  *(_OWORD *)(v73 + 96) = xmmword_19C276E20;
  *(_OWORD *)(v73 + 112) = xmmword_19C277A60;
  *(_QWORD *)(v73 + 128) = 2;
  *(_QWORD *)(v73 + 136) = v68;
  *(_QWORD *)(v73 + 144) = v76;
  *(_QWORD *)(v73 + 48) = v75;
  *(_QWORD *)(v73 + 56) = 1;
  *(_QWORD *)(v73 + 64) = v74;
  *(_QWORD *)(v73 + 72) = v75;
  *(_QWORD *)(v73 + 80) = 1;
  *(_QWORD *)(v73 + 88) = v84;
  sub_19C190488(a2, v73);
}

void sub_19C18C710(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_19C18C79C(int *result, int a2)
{
  int v2;
  int *v3;
  char *v4;
  char *v5;

  if (a2 >= 1)
  {
    v2 = a2;
    v3 = result;
    v4 = (char *)(**((_QWORD **)result + 6) + 4 * result[6]);
    v5 = (char *)(**((_QWORD **)result + 5) + 4 * result[5]);
    do
    {
      result = (int *)memmove(v4, v5, 4 * v3[4]);
      v5 += 4 * v3[7];
      v4 += 4 * v3[8];
      --v2;
    }
    while (v2);
  }
  return result;
}

float sub_19C18C814(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  float result;
  _QWORD *v37;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t __B;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = (_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = **(_QWORD **)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 24);
  v41 = *(_QWORD *)(a1 + 40);
  v42 = *(_QWORD *)(a1 + 32);
  v5 = **(char ***)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  bzero(v5, 4 * (int)v7 * (int)v6 * (int)v8 * (int)v9 * *(_DWORD *)(a1 + 88));
  v10 = v1[4];
  v37 = v1;
  v11 = v10 * v1[3];
  v12 = v11 / (int)v10;
  v39 = v11 % (int)v10;
  if ((v11 / (int)v10) | (v11 % (int)v10))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = v13 * *(_QWORD *)(a1 + 24);
    v15 = v14 / (int)v13;
    v16 = v14 % (int)v13;
    if ((v14 / (int)v13) | (v14 % (int)v13))
    {
      v17 = *v1;
      if (*v1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = *(unsigned int *)(a1 + 96);
        if ((int)v21 < 0)
          v21 = (int)v21 + 5;
        v40 = v12;
        do
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          do
          {
            v25 = 0;
            v26 = v22;
            v27 = v3 + 4 * v2 * (v23 + v4 * ((v19 + v41 * v18) * v42 + v22));
            do
            {
              __B = v25;
              v44 = v23;
              v45 = v26;
              v46 = v19;
              v47 = v18;
              *(&__B + v21) = 0;
              v28 = 4 * (__B + v7 * v44 + v6 * v7 * (v45 + (v46 + v9 * v47) * v8));
              *(float *)&v5[v28] = *(float *)&v5[v28] + *(float *)(v27 + 4 * v25++);
            }
            while (v17 != v25);
            v23 = ++v24 / (int)v13;
            v22 = v24 % (int)v13;
          }
          while (v24 / (int)v13 != v15 || v22 != v16);
          v19 = ++v20 / (int)v10;
          v18 = v20 % (int)v10;
        }
        while (v20 / (int)v10 != v40 || v18 != v39);
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = 1;
          do
          {
            v34 = v33 / (int)v13 == v15 && v14 + (_DWORD)v13 * (v33 / (int)v13 - v15) == v33;
            ++v33;
          }
          while (!v34);
          ++v32;
        }
        while (v32 / (int)v10 != v12 || v32 % (int)v10 != v39);
      }
    }
    else
    {
      v30 = 1;
      do
      {
        v31 = v30 / (int)v10 == v12 && v11 + (_DWORD)v10 * (v30 / (int)v10 - v12) == v30;
        ++v30;
      }
      while (!v31);
    }
  }
  v35 = *(unsigned int *)(a1 + 96);
  if ((int)v35 < 0)
    v35 = (int)v35 + 5;
  *(float *)&__B = (float)(unint64_t)v37[v35];
  vDSP_vsdiv(**(const float ***)(a1 + 112), 1, (const float *)&__B, **(float ***)(a1 + 112), 1, *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 72) * *(_DWORD *)(a1 + 80) * *(_DWORD *)(a1 + 88));
  return result;
}

_DWORD *sub_19C18CAC8(_DWORD *result)
{
  int v1;
  _DWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v9;

  if (result[12] <= result[22])
    v1 = result[22];
  else
    v1 = result[12];
  if (v1 >= 1)
  {
    v2 = result;
    v3 = (char *)**((_QWORD **)result + 14);
    v4 = (char *)**((_QWORD **)result + 13);
    v5 = (char *)**((_QWORD **)result + 12);
    v6 = v1;
    do
    {
      memmove(v3, v5, 4 * v2[4] * v2[6] * v2[8] * v2[10]);
      v9 = &v3[4 * v2[4] * v2[6] * v2[8] * v2[10]];
      result = memmove(v9, v4, 4 * v2[14] * v2[16] * v2[18] * v2[20]);
      if (v1 == v2[12])
        v7 = *((_QWORD *)v2 + 3) * *((_QWORD *)v2 + 2) * *((_QWORD *)v2 + 4) * *((_QWORD *)v2 + 5);
      else
        LODWORD(v7) = 0;
      v3 = &v9[4 * v2[16] * v2[14] * v2[18] * v2[20]];
      v5 += 4 * (int)v7;
      if (v1 == v2[22])
        v8 = v2[16] * v2[14] * v2[18] * v2[20];
      else
        v8 = 0;
      v4 += 4 * v8;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_19C18CC14(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD v40[5];

  v1 = *(_QWORD *)(result + 48);
  v37 = *(_QWORD *)(result + 40);
  v2 = (int)v1 * (int)v37 / (int)v1;
  v35 = (int)v1 * (int)v37 % (int)v1;
  if (v2 | v35)
  {
    v3 = *(_QWORD *)(result + 32);
    v39 = *(_QWORD *)(result + 24);
    v4 = (int)v3 * (int)v39 / (int)v3;
    if (v4 | ((int)v3 * (int)v39 % (int)v3))
    {
      v5 = *(_QWORD *)(result + 16);
      if (v5)
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = *(_QWORD *)(result + 128);
        v10 = **(_QWORD **)(result + 136);
        v11 = **(_QWORD **)(result + 144);
        v12 = *(_QWORD *)(result + 72);
        v13 = *(_QWORD *)(result + 80);
        v14 = *(_QWORD *)(result + 56);
        v15 = *(_QWORD *)(result + 64) * v14;
        v16 = *(_QWORD *)(result + 104);
        v17 = *(_QWORD *)(result + 96);
        v18 = (int)*(_QWORD *)(result + 96);
        if ((int)v18 < 0)
          v17 = v18 + 5;
        if ((int)v16 < 0)
          v19 = (int)v16 + 5;
        else
          v19 = *(_QWORD *)(result + 104);
        v20 = *(_QWORD *)(result + 112);
        v21 = *(_QWORD *)(result + 120);
        result = v20;
        if ((int)v20 < 0)
          result = (int)v20 + 5;
        if ((int)v21 < 0)
          v21 = (int)v21 + 5;
        else
          v21 = v21;
        v22 = (int)v9 + 5;
        if ((int)v9 >= 0)
          v22 = v9;
        v36 = v1;
        do
        {
          v38 = v8;
          v23 = 0;
          v24 = 0;
          v25 = 0;
          do
          {
            v26 = 0;
            v27 = v24;
            v28 = v10 + 4 * v5 * (v24 + v39 * ((v7 + v37 * v6) * v3 + v23));
            do
            {
              v40[0] = v26;
              v40[1] = v27;
              v40[2] = v23;
              v40[3] = v7;
              v40[4] = v6;
              *(_DWORD *)(v11 + 4
                              * (v40[v17] + v14 * v40[v19] + v15 * (v40[result] + (v40[v21] + v13 * v40[v22]) * v12))) = *(_DWORD *)(v28 + 4 * v26++);
            }
            while (v5 != v26);
            v24 = ++v25 / (int)v3;
            v23 = v25 % (int)v3;
          }
          while (v25 / (int)v3 != v4 || v23 != (int)v3 * (int)v39 % (int)v3);
          ++v8;
          v7 = (v38 + 1) / v36;
          v6 = (v38 + 1) % v36;
        }
        while (v7 != v2 || v6 != v35);
      }
      else
      {
        v32 = 0;
        do
        {
          v33 = 1;
          do
          {
            v34 = v33 / (int)v3 == v4 && (_DWORD)v3 * (_DWORD)v39 + (_DWORD)v3 * (v33 / (int)v3 - v4) == v33;
            ++v33;
          }
          while (!v34);
          ++v32;
        }
        while (v32 / (int)v1 != v2 || v32 % (int)v1 != v35);
      }
    }
    else
    {
      v30 = 1;
      do
      {
        v31 = v30 / (int)v1 == v2 && (_DWORD)v1 * (_DWORD)v37 + (_DWORD)v1 * (v30 / (int)v1 - v2) == v30;
        ++v30;
      }
      while (!v31);
    }
  }
  return result;
}

uint64_t sub_19C18CE7C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *__src)
{
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int64x2_t v21;
  void *__p[2];
  uint64_t v23;
  int v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v23 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18E344(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  v7 = 0;
  *(_QWORD *)a1 = &unk_1E3D226E0;
  v8 = (uint64_t **)(a1 + 24);
  v21 = vdupq_n_s64(1uLL);
  do
  {
    v9 = __src[4 * v7 + 32];
    if ((int)v9 < 1)
      break;
    v10 = v7 + 1;
    v11 = *v8;
    v12 = (uint64_t **)(a1 + 24);
    v13 = (uint64_t **)(a1 + 24);
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v11;
          v14 = *((int *)v11 + 8);
          if (v10 >= v14)
            break;
          v11 = *v13;
          v12 = v13;
          if (!*v13)
            goto LABEL_17;
        }
        if (v7 < v14)
          break;
        v11 = v13[1];
        if (!v11)
        {
          v12 = v13 + 1;
          goto LABEL_17;
        }
      }
      v15 = (char *)v13;
    }
    else
    {
LABEL_17:
      v15 = (char *)operator new(0x50uLL);
      *((_DWORD *)v15 + 8) = v10;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 56) = 0u;
      *((_QWORD *)v15 + 9) = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = v13;
      *v12 = (uint64_t *)v15;
      v16 = **(_QWORD **)(a1 + 16);
      v17 = (uint64_t *)v15;
      if (v16)
      {
        *(_QWORD *)(a1 + 16) = v16;
        v17 = *v12;
      }
      sub_19C07CC40(*(uint64_t **)(a1 + 24), v17);
      ++*(_QWORD *)(a1 + 32);
    }
    *(int64x2_t *)(v15 + 40) = v21;
    *((_QWORD *)v15 + 8) = 0;
    *((_QWORD *)v15 + 9) = 0;
    v7 = v10;
    *((_QWORD *)v15 + 7) = v9;
  }
  while (v10 != 8);
  v18 = (int)__src[64];
  v24 = 9;
  v25 = vdupq_n_s64(1uLL);
  v27 = 0;
  v28 = 0;
  v26 = v18;
  sub_19C07C964(a1 + 40, &v24, (int *)&v29);
  if (*(_QWORD *)__src == 25)
  {
    v19 = __src[80];
    if (v19 == 3)
      v19 = 4;
    *(_DWORD *)(a1 + 1016) = v19;
  }
  return a1;
}

void sub_19C18D0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C18E518(v1);
  _Unwind_Resume(a1);
}

void sub_19C18D0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C18D0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C18E518(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C18D0E8(_QWORD ***a1, uint64_t a2, uint64_t a3)
{
  if (((uint64_t (*)(_QWORD ***))(*a1)[13])(a1) != 25
    && ((uint64_t (*)(_QWORD ***))(*a1)[13])(a1) != 28)
  {
    return sub_19C18F9E0((uint64_t)a1, a2, a3);
  }
  (*(void (**)(_QWORD, uint64_t))(**a1[20] + 16))(*a1[20], a3);
  return ((uint64_t (*)(_QWORD ***))(*a1)[4])(a1);
}

uint64_t sub_19C18D180(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 80))(a2, a1);
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 80))(a2, a1);
}

BOOL sub_19C18D244(uint64_t a1, _QWORD *a2)
{
  _QWORD v9[5];

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 25
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1) != 28)
  {
    return 0;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(v9, a1, 1);
  return *a2 != v9[0] || a2[1] != v9[1] || a2[2] != v9[2] || a2[3] != v9[3] || a2[4] != v9[4];
}

uint64_t **sub_19C18D2F4(_QWORD *a1, int a2, int a3)
{
  uint64_t **result;
  _QWORD *v7;
  int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  result = (uint64_t **)(*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  if (result == (uint64_t **)14)
  {
    v7 = (_QWORD *)a1[2];
    if (v7 != a1 + 3)
    {
      v8 = (a3 - 1) * a2;
      do
      {
        v9 = v8 * (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 72))(a1, *((unsigned int *)v7 + 8));
        result = sub_19C18FCD8((uint64_t)a1, *((_DWORD *)v7 + 8));
        *result = (uint64_t *)((char *)*result + 4 * v9);
        v10 = (_QWORD *)v7[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v7[2];
            v12 = *v11 == (_QWORD)v7;
            v7 = v11;
          }
          while (!v12);
        }
        v7 = v11;
      }
      while (v11 != a1 + 3);
    }
  }
  return result;
}

uint64_t **sub_19C18D3C4(_QWORD *a1, uint64_t a2)
{
  uint64_t **result;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;

  result = (uint64_t **)(*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  v5 = (_QWORD *)a1[2];
  v6 = a1 + 3;
  if (result == (uint64_t **)14)
  {
    if (v5 != v6)
    {
      do
      {
        v7 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 72))(a1, *((unsigned int *)v5 + 8)) * a2;
        result = sub_19C18FCD8((uint64_t)a1, *((_DWORD *)v5 + 8));
        *result = (uint64_t *)((char *)*result - 4 * v7);
        v8 = (_QWORD *)v5[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v5[2];
            v10 = *v9 == (_QWORD)v5;
            v5 = v9;
          }
          while (!v10);
        }
        v5 = v9;
      }
      while (v9 != v6);
    }
  }
  else if (v5 != v6)
  {
    do
    {
      result = (uint64_t **)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 336))(a1, a2, *((unsigned int *)v5 + 8));
      v11 = (_QWORD *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v5[2];
          v10 = *v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v10);
      }
      v5 = v12;
    }
    while (v12 != v6);
  }
  return result;
}

void sub_19C18D4E4(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t **v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t **v18;
  uint64_t v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  char *v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t **v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  char *v54;
  NSObject *v55;
  int v56;
  void *__p[2];
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v56 = a2;
  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1);
  v5 = *a1;
  if (v4 == 16)
  {
    v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 72))(a1, 1);
    v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
    v8 = v6;
    v9 = (*(int (**)(uint64_t *, uint64_t))(*a1 + 216))(a1, 1);
    v11 = (uint64_t **)(a1 + 6);
    v10 = (char *)a1[6];
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          v12 = v10;
          v13 = *((_DWORD *)v10 + 8);
          if (v13 <= a2)
            break;
          v10 = *(char **)v12;
          v11 = (uint64_t **)v12;
          if (!*(_QWORD *)v12)
            goto LABEL_9;
        }
        if (v13 >= a2)
          break;
        v10 = (char *)*((_QWORD *)v12 + 1);
        if (!v10)
        {
          v11 = (uint64_t **)(v12 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
      v12 = (char *)(a1 + 6);
LABEL_9:
      v14 = v12;
      v12 = (char *)operator new(0x50uLL);
      *((_DWORD *)v12 + 8) = a2;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *((_QWORD *)v12 + 9) = 0;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v14;
      *v11 = (uint64_t *)v12;
      v15 = *(_QWORD *)a1[5];
      v16 = (uint64_t *)v12;
      if (v15)
      {
        a1[5] = v15;
        v16 = *v11;
      }
      sub_19C07CC40((uint64_t *)a1[6], v16);
      ++a1[7];
    }
    *(int64x2_t *)(v12 + 40) = vdupq_n_s64(1uLL);
    *((_QWORD *)v12 + 7) = v8;
    *((_QWORD *)v12 + 8) = v7;
    *((_QWORD *)v12 + 9) = v9;
    return;
  }
  if ((*(uint64_t (**)(uint64_t *))(v5 + 104))(a1) == 14)
  {
    v18 = (uint64_t **)(a1 + 6);
    v17 = (char *)a1[6];
    v19 = a1[2] + 40;
    if (v17)
    {
      while (1)
      {
        while (1)
        {
          v20 = v17;
          v21 = *((_DWORD *)v17 + 8);
          if (v21 <= a2)
            break;
          v17 = *(char **)v20;
          v18 = (uint64_t **)v20;
          if (!*(_QWORD *)v20)
            goto LABEL_29;
        }
        if (v21 >= a2)
          break;
        v17 = (char *)*((_QWORD *)v20 + 1);
        if (!v17)
          goto LABEL_28;
      }
LABEL_32:
      v27 = *(_OWORD *)v19;
      v28 = *(_OWORD *)(v19 + 16);
      *((_QWORD *)v20 + 9) = *(_QWORD *)(v19 + 32);
      *(_OWORD *)(v20 + 56) = v28;
      *(_OWORD *)(v20 + 40) = v27;
      return;
    }
LABEL_23:
    v20 = (char *)v18;
LABEL_29:
    v24 = v20;
    v20 = (char *)operator new(0x50uLL);
    *((_DWORD *)v20 + 8) = a2;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *((_QWORD *)v20 + 9) = 0;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = v24;
    *v18 = (uint64_t *)v20;
    v25 = *(_QWORD *)a1[5];
    v26 = (uint64_t *)v20;
    if (v25)
    {
      a1[5] = v25;
      v26 = *v18;
    }
    sub_19C07CC40((uint64_t *)a1[6], v26);
    ++a1[7];
    goto LABEL_32;
  }
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) == 15)
  {
    v18 = (uint64_t **)(a1 + 6);
    v22 = (char *)a1[6];
    v19 = a1[2] + 40;
    if (v22)
    {
      while (1)
      {
        while (1)
        {
          v20 = v22;
          v23 = *((_DWORD *)v22 + 8);
          if (v23 <= a2)
            break;
          v22 = *(char **)v20;
          v18 = (uint64_t **)v20;
          if (!*(_QWORD *)v20)
            goto LABEL_29;
        }
        if (v23 >= a2)
          goto LABEL_32;
        v22 = (char *)*((_QWORD *)v20 + 1);
        if (!v22)
        {
LABEL_28:
          v18 = (uint64_t **)(v20 + 8);
          goto LABEL_29;
        }
      }
    }
    goto LABEL_23;
  }
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) == 3)
  {
    v29 = (*(uint64_t (**)(uint64_t *))(*a1 + 224))(a1);
    v30 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 216))(a1, 1);
    v32 = (uint64_t **)(a1 + 6);
    v31 = (char *)a1[6];
    v33 = *((int *)a1 + 142);
    v34 = v29;
    v35 = v30;
    if (v31)
    {
      while (1)
      {
        while (1)
        {
          v36 = v31;
          v37 = *((_DWORD *)v31 + 8);
          if (v37 <= a2)
            break;
          v31 = *(char **)v36;
          v32 = (uint64_t **)v36;
          if (!*(_QWORD *)v36)
            goto LABEL_42;
        }
        if (v37 >= a2)
          break;
        v31 = (char *)*((_QWORD *)v36 + 1);
        if (!v31)
        {
          v32 = (uint64_t **)(v36 + 8);
          goto LABEL_42;
        }
      }
    }
    else
    {
      v36 = (char *)(a1 + 6);
LABEL_42:
      v38 = v36;
      v36 = (char *)operator new(0x50uLL);
      *((_DWORD *)v36 + 8) = a2;
      *(_OWORD *)(v36 + 40) = 0u;
      *(_OWORD *)(v36 + 56) = 0u;
      *((_QWORD *)v36 + 9) = 0;
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v36 + 2) = v38;
      *v32 = (uint64_t *)v36;
      v39 = *(_QWORD *)a1[5];
      v40 = (uint64_t *)v36;
      if (v39)
      {
        a1[5] = v39;
        v40 = *v32;
      }
      sub_19C07CC40((uint64_t *)a1[6], v40);
      ++a1[7];
    }
    *(int64x2_t *)(v36 + 40) = vdupq_n_s64(1uLL);
    *((_QWORD *)v36 + 7) = v33;
    *((_QWORD *)v36 + 8) = v34;
    *((_QWORD *)v36 + 9) = v35;
  }
  else if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) == 25)
  {
    v42 = (uint64_t **)(a1 + 6);
    v41 = (char *)a1[6];
    v43 = a1[2];
    v44 = *(_OWORD *)(v43 + 56);
    *(_OWORD *)__p = *(_OWORD *)(v43 + 40);
    v58 = v44;
    v59 = *(_QWORD *)(v43 + 72);
    v45 = *((unsigned int *)a1 + 254);
    if ((int)v45 < 0)
      v45 = (int)v45 + 5;
    __p[v45] = (void *)1;
    if (v41)
    {
      while (1)
      {
        while (1)
        {
          v46 = v41;
          v47 = *((_DWORD *)v41 + 8);
          if (v47 <= a2)
            break;
          v41 = *(char **)v46;
          v42 = (uint64_t **)v46;
          if (!*(_QWORD *)v46)
            goto LABEL_56;
        }
        if (v47 >= a2)
          break;
        v41 = (char *)*((_QWORD *)v46 + 1);
        if (!v41)
        {
          v42 = (uint64_t **)(v46 + 8);
          goto LABEL_56;
        }
      }
    }
    else
    {
      v46 = (char *)(a1 + 6);
LABEL_56:
      v48 = v46;
      v46 = (char *)operator new(0x50uLL);
      *((_DWORD *)v46 + 8) = a2;
      *(_OWORD *)(v46 + 40) = 0u;
      *(_OWORD *)(v46 + 56) = 0u;
      *((_QWORD *)v46 + 9) = 0;
      *(_QWORD *)v46 = 0;
      *((_QWORD *)v46 + 1) = 0;
      *((_QWORD *)v46 + 2) = v48;
      *v42 = (uint64_t *)v46;
      v49 = *(_QWORD *)a1[5];
      v50 = (uint64_t *)v46;
      if (v49)
      {
        a1[5] = v49;
        v50 = *v42;
      }
      sub_19C07CC40((uint64_t *)a1[6], v50);
      ++a1[7];
    }
    v51 = v58;
    *(_OWORD *)(v46 + 40) = *(_OWORD *)__p;
    *(_OWORD *)(v46 + 56) = v51;
    *((_QWORD *)v46 + 9) = v59;
  }
  else if ((*(uint64_t (**)(uint64_t *))(*a1 + 104))(a1) == 28)
  {
    v52 = a1[2];
    v53 = *(_OWORD *)(v52 + 56);
    *(_OWORD *)__p = *(_OWORD *)(v52 + 40);
    v58 = v53;
    v59 = *(_QWORD *)(v52 + 72);
    v54 = sub_19C18DA70((uint64_t **)a1 + 5, &v56);
    *(_OWORD *)v54 = *(_OWORD *)__p;
    *((_OWORD *)v54 + 1) = v58;
    *((_QWORD *)v54 + 4) = v59;
  }
  else
  {
    (*(void (**)(uint64_t *))(*a1 + 104))(a1);
    sub_19C18DB44("unable to determine output shape of layer ");
    v55 = sub_19C1A0644();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      sub_19C255EC8((uint64_t *)__p, v55);
    if (SBYTE7(v58) < 0)
      operator delete(__p[0]);
  }
}

void sub_19C18DA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19C18DA70(uint64_t **a1, int *a2)
{
  char *v3;
  uint64_t **v4;
  int v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;

  v4 = a1 + 1;
  v3 = (char *)a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = v3;
        v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7)
          break;
        v3 = *(char **)v6;
        v4 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_8;
      }
      if (v7 >= v5)
        break;
      v3 = (char *)*((_QWORD *)v6 + 1);
      if (!v3)
      {
        v4 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 1);
LABEL_8:
    v8 = v6;
    v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = v5;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 9) = 0;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v4 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v4;
    }
    sub_19C07CC40(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 40;
}

uint64_t sub_19C18DB44(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v11;
  uint64_t v12[8];
  void *__p[2];
  __int128 v14;
  int v15;
  uint64_t v16[19];

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16[0] = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v5;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v7, v12);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v11 = v2 + 24;
  v16[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x1E0DE4FB8];
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  v15 = 16;
  v9 = strlen(a1);
  sub_19C07DCDC(&v11, (uint64_t)a1, v9);
  std::ostream::operator<<();
  std::stringbuf::str();
  v11 = *v4;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = v4[3];
  v12[0] = v8 + 16;
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD1C08](v16);
}

void sub_19C18DC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C07DC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C18DCAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](v1);
  _Unwind_Resume(a1);
}

void sub_19C18DCF8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C18E518(a1);
  operator delete(v1);
}

uint64_t sub_19C18DD0C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *__src)
{
  float v7;
  int v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v14;
  int v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v14 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18E344(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D23278;
  *(_QWORD *)(a1 + 1016) = __src[56];
  *(_QWORD *)(a1 + 1024) = __src[72];
  v7 = *((float *)__src + 96);
  *(float *)(a1 + 1048) = v7;
  v8 = *((_DWORD *)__src + 80);
  *(float *)(a1 + 1052) = (float)v8;
  if (v7 == 0.0)
  {
    v9 = 0.000001;
    if (!v8)
      v9 = 1.0e-12;
    *(float *)(a1 + 1048) = v9;
  }
  v10 = *((int *)__src + 32);
  v15 = 1;
  v16 = vdupq_n_s64(1uLL);
  v18 = 0;
  v19 = 0;
  v17 = v10;
  sub_19C07C964(a1 + 16, &v15, (int *)&v20);
  v11 = *((int *)__src + 64);
  v15 = 9;
  v16 = vdupq_n_s64(1uLL);
  v18 = 0;
  v19 = 0;
  v17 = v11;
  sub_19C07C964(a1 + 40, &v15, (int *)&v20);
  return a1;
}

void sub_19C18DE88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C18E518(v1);
  _Unwind_Resume(a1);
}

void sub_19C18DE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C18E518(v1);
  _Unwind_Resume(a1);
}

void sub_19C18DEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_19C18DED0(uint64_t a1, int a2)
{
  int *v4;
  uint64_t **v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t **v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  __n128 result;
  __n128 v19;
  __int128 v20;
  uint64_t v21;

  v5 = (uint64_t **)(a1 + 24);
  v4 = *(int **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)v4;
        v7 = v4[8];
        if (v7 < 2)
          break;
        v4 = *(int **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_8;
      }
      if (v7 == 1)
        break;
      v4 = (int *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 24);
LABEL_8:
    v8 = v6;
    v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = 1;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 9) = 0;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 16);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 16) = v9;
      v10 = *v5;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v10);
    ++*(_QWORD *)(a1 + 32);
  }
  v19 = *(__n128 *)(v6 + 40);
  v20 = *(_OWORD *)(v6 + 56);
  v21 = *((_QWORD *)v6 + 9);
  v12 = (uint64_t **)(a1 + 48);
  v11 = *(char **)(a1 + 48);
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        v13 = v11;
        v14 = *((_DWORD *)v11 + 8);
        if (v14 <= a2)
          break;
        v11 = *(char **)v13;
        v12 = (uint64_t **)v13;
        if (!*(_QWORD *)v13)
          goto LABEL_18;
      }
      if (v14 >= a2)
        break;
      v11 = (char *)*((_QWORD *)v13 + 1);
      if (!v11)
      {
        v12 = (uint64_t **)(v13 + 8);
        goto LABEL_18;
      }
    }
  }
  else
  {
    v13 = (char *)(a1 + 48);
LABEL_18:
    v15 = v13;
    v13 = (char *)operator new(0x50uLL);
    *((_DWORD *)v13 + 8) = a2;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *((_QWORD *)v13 + 9) = 0;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v15;
    *v12 = (uint64_t *)v13;
    v16 = **(_QWORD **)(a1 + 40);
    v17 = (uint64_t *)v13;
    if (v16)
    {
      *(_QWORD *)(a1 + 40) = v16;
      v17 = *v12;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 48), v17);
    ++*(_QWORD *)(a1 + 56);
  }
  result = v19;
  *(__n128 *)(v13 + 40) = v19;
  *(_OWORD *)(v13 + 56) = v20;
  *((_QWORD *)v13 + 9) = v21;
  return result;
}

uint64_t sub_19C18E09C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 112))(a2, a1);
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 112))(a2, a1);
}

void sub_19C18E160(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  void *v5;
  void *v6;

  v4 = (a3 * a2);
  *(_QWORD *)(a1 + 1032) = operator new[]();
  *(_QWORD *)(a1 + 1040) = operator new[]();
  bzero(*(void **)(a1 + 1032), 4 * (int)v4);
  bzero(*(void **)(a1 + 1040), 4 * (int)v4);
  sub_19C18F9E0(a1, 1, v4);
  v5 = *(void **)(a1 + 1032);
  if (v5)
    operator delete[](v5);
  v6 = *(void **)(a1 + 1040);
  if (v6)
    operator delete[](v6);
}

BOOL sub_19C18E218(uint64_t a1, _QWORD *a2, int a3)
{
  char *v7;
  uint64_t **v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;

  if ((a3 - 8) < 0xFFFFFFF9)
    return 0;
  v8 = (uint64_t **)(a1 + 24);
  v7 = *(char **)(a1 + 24);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = v7;
        v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3)
          break;
        v7 = *(char **)v9;
        v8 = (uint64_t **)v9;
        if (!*(_QWORD *)v9)
          goto LABEL_10;
      }
      if (v10 >= a3)
        break;
      v7 = (char *)*((_QWORD *)v9 + 1);
      if (!v7)
      {
        v8 = (uint64_t **)(v9 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = (char *)(a1 + 24);
LABEL_10:
    v11 = v9;
    v9 = (char *)operator new(0x50uLL);
    *((_DWORD *)v9 + 8) = a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((_QWORD *)v9 + 9) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v8 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 16);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 16) = v12;
      v13 = *v8;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v13);
    ++*(_QWORD *)(a1 + 32);
  }
  return *((_QWORD *)v9 + 5) != *a2
      || *((_QWORD *)v9 + 6) != a2[1]
      || *((_QWORD *)v9 + 7) != a2[2]
      || *((_QWORD *)v9 + 8) != a2[3]
      || *((_QWORD *)v9 + 9) != a2[4];
}

void sub_19C18E330(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C18E518(a1);
  operator delete(v1);
}

uint64_t sub_19C18E344(uint64_t a1, __int128 *a2, uint64_t a3, _QWORD *__src)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D224F8;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v6 = __src[6];
  v7 = __src[15];
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 192) = v6;
  *(_QWORD *)(a1 + 200) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 232;
  *(_QWORD *)(a1 + 240) = a1 + 232;
  *(_QWORD *)(a1 + 248) = 0;
  v8 = a1 + 256;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19C07C6E8((_BYTE *)v8, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v8 = v9;
  }
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  memcpy((void *)(a1 + 312), __src, 0x2C0uLL);
  return a1;
}

void sub_19C18E4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD **a14, uint64_t a15, _QWORD **a16)
{
  _QWORD **v16;
  uint64_t v17;
  void **v18;
  _QWORD **v19;
  _QWORD **v20;
  _QWORD **v21;
  uint64_t v22;
  void **v23;
  uint64_t *v24;
  void *v26;

  sub_19C07C824(v24);
  sub_19C07C884(v23);
  v26 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v17 + 168) = v26;
    operator delete(v26);
  }
  sub_19C07C924(v22, *v21);
  sub_19C07C924(a10, *v16);
  sub_19C07C924(a11, *v20);
  sub_19C07C924(a12, *v19);
  sub_19C07C924(a13, *a14);
  sub_19C07C924(a15, *a16);
  _Unwind_Resume(a1);
}

uint64_t sub_19C18E518(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  *(_QWORD *)a1 = &unk_1E3D224F8;
  v2 = *(_QWORD **)(a1 + 160);
  v3 = *(_QWORD **)(a1 + 168);
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  if (*(char *)(a1 + 279) < 0)
  {
    operator delete(*(void **)(a1 + 256));
    if (!*(_QWORD *)(a1 + 248))
      goto LABEL_12;
  }
  else if (!*(_QWORD *)(a1 + 248))
  {
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 232);
  v4 = *(uint64_t **)(a1 + 240);
  v6 = *v4;
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
  **(_QWORD **)(v5 + 8) = v6;
  *(_QWORD *)(a1 + 248) = 0;
  if (v4 != (uint64_t *)(a1 + 232))
  {
    do
    {
      v7 = (uint64_t *)v4[1];
      operator delete(v4);
      v4 = v7;
    }
    while (v7 != (uint64_t *)(a1 + 232));
  }
LABEL_12:
  v8 = *(_QWORD *)(a1 + 208);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 216);
    v10 = *(void **)(a1 + 208);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 208);
    }
    *(_QWORD *)(a1 + 216) = v8;
    operator delete(v10);
  }
  v14 = *(void **)(a1 + 160);
  if (v14)
  {
    *(_QWORD *)(a1 + 168) = v14;
    operator delete(v14);
  }
  sub_19C07C924(a1 + 136, *(_QWORD **)(a1 + 144));
  sub_19C07C924(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_19C07C924(a1 + 88, *(_QWORD **)(a1 + 96));
  sub_19C07C924(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_19C07C924(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_19C07C924(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_19C18E6A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 208);
  for (i = *(_QWORD *)(a1 + 216); i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  *(_QWORD *)(a1 + 216) = v2;
}

uint64_t sub_19C18E71C(uint64_t a1)
{
  int **v1;
  int **v2;
  uint64_t v3;
  int v4;
  int *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v1 = *(int ***)(a1 + 208);
  v2 = *(int ***)(a1 + 216);
  if (v1 == v2)
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v5 = *v1;
    v6 = (std::__shared_weak_count *)v1[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v4 = *v5;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      v4 = *v5;
    }
    v3 = (v4 + v3);
    v1 += 2;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_19C18E7C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = a1 + 232;
  v2 = *(_QWORD *)(a1 + 240);
  if (v2 == a1 + 232)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + *(_DWORD *)(v2 + 16));
    v2 = *(_QWORD *)(v2 + 8);
  }
  while (v2 != v1);
  return result;
}

void sub_19C18E7F8(uint64_t a1@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(a1 + 24);
  if (v2 != (_QWORD *)(a1 + 24))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (v7 < v6)
      {
        *(_DWORD *)v7 = *((_DWORD *)v2 + 8);
        v7 += 4;
        a2[1] = v7;
        v8 = (_QWORD *)v2[1];
        if (v8)
          goto LABEL_24;
        goto LABEL_26;
      }
      v9 = (v7 - v5) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        sub_19C07DA0C();
      if ((v6 - v5) >> 1 > v10)
        v10 = (v6 - v5) >> 1;
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        if (v11 >> 62)
          sub_19C07C7FC();
        v12 = operator new(4 * v11);
        v13 = &v12[4 * v9];
        *(_DWORD *)v13 = *((_DWORD *)v2 + 8);
        v14 = (uint64_t)(v13 + 4);
        if (v7 == v5)
          goto LABEL_21;
      }
      else
      {
        v12 = 0;
        v13 = (char *)(4 * v9);
        *(_DWORD *)(4 * v9) = *((_DWORD *)v2 + 8);
        v14 = 4 * v9 + 4;
        if (v7 == v5)
          goto LABEL_21;
      }
      v15 = v7 - 4 - v5;
      if (v15 < 0xBC)
      {
        v16 = v7;
        goto LABEL_20;
      }
      if (&v12[v7 - v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v7 - v5 - 4])
      {
        v16 = v7;
        do
        {
LABEL_20:
          v17 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v13 - 1) = v17;
          v13 -= 4;
        }
        while (v16 != v5);
        goto LABEL_21;
      }
      if (&v7[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v16 = v7;
        goto LABEL_20;
      }
      if ((unint64_t)(v5 - v12) < 0x20)
      {
        v16 = v7;
        goto LABEL_20;
      }
      v20 = (v15 >> 2) + 1;
      v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v16 = &v7[-v21];
      v13 -= v21;
      v22 = &v12[4 * v9 - 16];
      v23 = v7 - 16;
      v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_20;
LABEL_21:
      v6 = &v12[4 * v11];
      *a2 = v13;
      a2[1] = (char *)v14;
      a2[2] = v6;
      if (v5)
        operator delete(v5);
      v5 = v13;
      v7 = (char *)v14;
      a2[1] = (char *)v14;
      v8 = (_QWORD *)v2[1];
      if (v8)
      {
        do
        {
LABEL_24:
          v18 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
        goto LABEL_3;
      }
      do
      {
LABEL_26:
        v18 = (_QWORD *)v2[2];
        v19 = *v18 == (_QWORD)v2;
        v2 = v18;
      }
      while (!v19);
LABEL_3:
      v2 = v18;
    }
    while (v18 != v3);
  }
}

void sub_19C18EA30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C18EA50(uint64_t a1@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 40);
  v3 = (_QWORD *)(a1 + 48);
  if (v2 != (_QWORD *)(a1 + 48))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (v7 < v6)
      {
        *(_DWORD *)v7 = *((_DWORD *)v2 + 8);
        v7 += 4;
        a2[1] = v7;
        v8 = (_QWORD *)v2[1];
        if (v8)
          goto LABEL_24;
        goto LABEL_26;
      }
      v9 = (v7 - v5) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        sub_19C07DA0C();
      if ((v6 - v5) >> 1 > v10)
        v10 = (v6 - v5) >> 1;
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        if (v11 >> 62)
          sub_19C07C7FC();
        v12 = operator new(4 * v11);
        v13 = &v12[4 * v9];
        *(_DWORD *)v13 = *((_DWORD *)v2 + 8);
        v14 = (uint64_t)(v13 + 4);
        if (v7 == v5)
          goto LABEL_21;
      }
      else
      {
        v12 = 0;
        v13 = (char *)(4 * v9);
        *(_DWORD *)(4 * v9) = *((_DWORD *)v2 + 8);
        v14 = 4 * v9 + 4;
        if (v7 == v5)
          goto LABEL_21;
      }
      v15 = v7 - 4 - v5;
      if (v15 < 0xBC)
      {
        v16 = v7;
        goto LABEL_20;
      }
      if (&v12[v7 - v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v7 - v5 - 4])
      {
        v16 = v7;
        do
        {
LABEL_20:
          v17 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v13 - 1) = v17;
          v13 -= 4;
        }
        while (v16 != v5);
        goto LABEL_21;
      }
      if (&v7[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v16 = v7;
        goto LABEL_20;
      }
      if ((unint64_t)(v5 - v12) < 0x20)
      {
        v16 = v7;
        goto LABEL_20;
      }
      v20 = (v15 >> 2) + 1;
      v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v16 = &v7[-v21];
      v13 -= v21;
      v22 = &v12[4 * v9 - 16];
      v23 = v7 - 16;
      v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_20;
LABEL_21:
      v6 = &v12[4 * v11];
      *a2 = v13;
      a2[1] = (char *)v14;
      a2[2] = v6;
      if (v5)
        operator delete(v5);
      v5 = v13;
      v7 = (char *)v14;
      a2[1] = (char *)v14;
      v8 = (_QWORD *)v2[1];
      if (v8)
      {
        do
        {
LABEL_24:
          v18 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
        goto LABEL_3;
      }
      do
      {
LABEL_26:
        v18 = (_QWORD *)v2[2];
        v19 = *v18 == (_QWORD)v2;
        v2 = v18;
      }
      while (!v19);
LABEL_3:
      v2 = v18;
    }
    while (v18 != v3);
  }
}

void sub_19C18EC88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C18ECA8(uint64_t a1, int a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 24);
  v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *(char **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 24);
LABEL_8:
    v8 = v6;
    v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 9) = 0;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 16);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 16) = v9;
      v10 = *v5;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v10);
    ++*(_QWORD *)(a1 + 32);
  }
  return (*((_DWORD *)v6 + 10) * *((_DWORD *)v6 + 12) * *((_DWORD *)v6 + 14));
}

unint64_t sub_19C18ED88(uint64_t a1, int a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v5 = (uint64_t **)(a1 + 48);
  v4 = *(char **)(a1 + 48);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *(char **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 48);
LABEL_8:
    v8 = v6;
    v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 9) = 0;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 40);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 40) = v9;
      v10 = *v5;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 48), v10);
    ++*(_QWORD *)(a1 + 56);
  }
  v11 = *((_DWORD *)v6 + 10) * *((_DWORD *)v6 + 12) * *((_DWORD *)v6 + 14);
  return v11 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
}

__n128 sub_19C18EE80(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v7;
  char *v8;
  uint64_t **v9;
  uint64_t **v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  __n128 result;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t **v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  if ((a4 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 24);
    v9 = (uint64_t **)(a1 + 24);
    v8 = *(char **)(a1 + 24);
    v10 = (uint64_t **)(a1 + 24);
    v11 = (char *)(a1 + 24);
    if (v8)
    {
      v12 = *(char **)(a1 + 24);
      while (1)
      {
        while (1)
        {
          v11 = v12;
          v13 = *((_DWORD *)v12 + 8);
          if (v13 <= a3)
            break;
          v12 = *(char **)v11;
          v10 = (uint64_t **)v11;
          if (!*(_QWORD *)v11)
            goto LABEL_9;
        }
        if (v13 >= a3)
          break;
        v12 = (char *)*((_QWORD *)v11 + 1);
        if (!v12)
        {
          v10 = (uint64_t **)(v11 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      v14 = v11;
      v11 = (char *)operator new(0x50uLL);
      *((_DWORD *)v11 + 8) = a3;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *((_QWORD *)v11 + 9) = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = v14;
      *v10 = (uint64_t *)v11;
      v15 = **(_QWORD **)(a1 + 16);
      v16 = (uint64_t *)v11;
      if (v15)
      {
        *(_QWORD *)(a1 + 16) = v15;
        v16 = *v10;
      }
      sub_19C07CC40(*(uint64_t **)(a1 + 24), v16);
      v8 = *(char **)(a1 + 24);
      ++*(_QWORD *)(a1 + 32);
    }
    *((_QWORD *)v11 + 8) = v7;
    v18 = *(_QWORD *)(a2 + 32);
    v19 = (char *)(a1 + 24);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          v19 = v8;
          v20 = *((_DWORD *)v8 + 8);
          if (v20 <= a3)
            break;
          v8 = *(char **)v19;
          v9 = (uint64_t **)v19;
          if (!*(_QWORD *)v19)
            goto LABEL_19;
        }
        if (v20 >= a3)
          break;
        v8 = (char *)*((_QWORD *)v19 + 1);
        if (!v8)
        {
          v9 = (uint64_t **)(v19 + 8);
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      v21 = v19;
      v19 = (char *)operator new(0x50uLL);
      *((_DWORD *)v19 + 8) = a3;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *((_QWORD *)v19 + 9) = 0;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = v21;
      *v9 = (uint64_t *)v19;
      v22 = **(_QWORD **)(a1 + 16);
      v23 = (uint64_t *)v19;
      if (v22)
      {
        *(_QWORD *)(a1 + 16) = v22;
        v23 = *v9;
      }
      sub_19C07CC40(*(uint64_t **)(a1 + 24), v23);
      ++*(_QWORD *)(a1 + 32);
    }
    *((_QWORD *)v19 + 9) = v18;
  }
  else
  {
    v25 = (uint64_t **)(a1 + 24);
    v24 = *(char **)(a1 + 24);
    if (v24)
    {
      while (1)
      {
        while (1)
        {
          v26 = v24;
          v27 = *((_DWORD *)v24 + 8);
          if (v27 <= a3)
            break;
          v24 = *(char **)v26;
          v25 = (uint64_t **)v26;
          if (!*(_QWORD *)v26)
            goto LABEL_30;
        }
        if (v27 >= a3)
          break;
        v24 = (char *)*((_QWORD *)v26 + 1);
        if (!v24)
        {
          v25 = (uint64_t **)(v26 + 8);
          goto LABEL_30;
        }
      }
    }
    else
    {
      v26 = (char *)(a1 + 24);
LABEL_30:
      v28 = v26;
      v26 = (char *)operator new(0x50uLL);
      *((_DWORD *)v26 + 8) = a3;
      *(_OWORD *)(v26 + 40) = 0u;
      *(_OWORD *)(v26 + 56) = 0u;
      *((_QWORD *)v26 + 9) = 0;
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = v28;
      *v25 = (uint64_t *)v26;
      v29 = **(_QWORD **)(a1 + 16);
      v30 = (uint64_t *)v26;
      if (v29)
      {
        *(_QWORD *)(a1 + 16) = v29;
        v30 = *v25;
      }
      sub_19C07CC40(*(uint64_t **)(a1 + 24), v30);
      ++*(_QWORD *)(a1 + 32);
    }
    result = *(__n128 *)a2;
    v31 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v26 + 9) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(v26 + 56) = v31;
    *(__n128 *)(v26 + 40) = result;
  }
  return result;
}

__n128 sub_19C18F0D0(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 result;
  __int128 v14;

  v7 = (uint64_t **)(a1 + 48);
  v6 = *(char **)(a1 + 48);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 48);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x50uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *((_QWORD *)v8 + 9) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(a1 + 40);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(a1 + 40) = v11;
      v12 = *v7;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 48), v12);
    ++*(_QWORD *)(a1 + 56);
  }
  result = *(__n128 *)a2;
  v14 = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 56) = v14;
  *(__n128 *)(v8 + 40) = result;
  return result;
}

uint64_t sub_19C18F1B4(_QWORD *a1)
{
  int v2;

  if (a1[24] == 1)
    v2 = 1;
  else
    v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  return (*(unsigned int (**)(_QWORD *))(*a1 + 88))(a1) * v2;
}

uint64_t sub_19C18F20C(uint64_t a1)
{
  int v2;
  int v3;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v3 = v2 << (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v3;
}

uint64_t sub_19C18F260()
{
  return 4;
}

uint64_t sub_19C18F268(uint64_t a1)
{
  return *(unsigned int *)(a1 + 280);
}

uint64_t sub_19C18F270(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192);
}

uint64_t sub_19C18F278(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200);
}

uint64_t sub_19C18F280(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t sub_19C18F288(uint64_t a1)
{
  return *(_QWORD *)(a1 + 184);
}

uint64_t sub_19C18F290(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 184) = a2;
  return result;
}

double sub_19C18F298(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 284) = *(_QWORD *)(*a2 + 56);
  result = *(double *)(v2 + 48);
  *(double *)(a1 + 292) = result;
  return result;
}

void *sub_19C18F2B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 312), 0x2C0uLL);
}

__n128 sub_19C18F2C4@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  __n128 result;
  __int128 v26;
  void *__p;
  char v28;

  v6 = (uint64_t **)(a1 + 24);
  v5 = *(uint64_t **)(a1 + 24);
  if (!v5)
    goto LABEL_11;
  v7 = a2;
  v8 = a1 + 24;
  v9 = *(_QWORD *)(a1 + 24);
  do
  {
    v10 = *(_DWORD *)(v9 + 32);
    v11 = v10 < a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v9;
    else
      v12 = (uint64_t *)(v9 + 8);
    if (!v11)
      v8 = v9;
    v9 = *v12;
  }
  while (*v12);
  if ((uint64_t **)v8 != v6 && *(_DWORD *)(v8 + 32) <= a2)
  {
    while (1)
    {
LABEL_28:
      while (1)
      {
        v20 = (uint64_t **)v5;
        v21 = *((_DWORD *)v5 + 8);
        if (v7 >= v21)
          break;
        v5 = *v20;
        v6 = v20;
        if (!*v20)
          goto LABEL_32;
      }
      if (v21 >= v7)
        break;
      v5 = v20[1];
      if (!v5)
      {
        v6 = v20 + 1;
        goto LABEL_32;
      }
    }
    v22 = (char *)v20;
  }
  else
  {
LABEL_11:
    sub_19C18F568("input shape not found at port ");
    v13 = *v6;
    v14 = v6;
    v15 = v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v13;
          v16 = *((_DWORD *)v13 + 8);
          if (a2 >= v16)
            break;
          v13 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_18;
        }
        if (v16 >= a2)
          break;
        v13 = v15[1];
        if (!v13)
        {
          v14 = v15 + 1;
          goto LABEL_18;
        }
      }
      v17 = (char *)v15;
    }
    else
    {
LABEL_18:
      v17 = (char *)operator new(0x50uLL);
      *((_DWORD *)v17 + 8) = a2;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *((_QWORD *)v17 + 9) = 0;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = v15;
      *v14 = (uint64_t *)v17;
      v18 = **(_QWORD **)(a1 + 16);
      v19 = (uint64_t *)v17;
      if (v18)
      {
        *(_QWORD *)(a1 + 16) = v18;
        v19 = *v14;
      }
      sub_19C07CC40(*(uint64_t **)(a1 + 24), v19);
      ++*(_QWORD *)(a1 + 32);
    }
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((_QWORD *)v17 + 9) = 0;
    if (v28 < 0)
    {
      operator delete(__p);
      v5 = *v6;
      v7 = a2;
      v20 = v6;
      if (*v6)
        goto LABEL_28;
    }
    else
    {
      v5 = *v6;
      v7 = a2;
      v20 = v6;
      if (*v6)
        goto LABEL_28;
    }
LABEL_32:
    v22 = (char *)operator new(0x50uLL);
    *((_DWORD *)v22 + 8) = v7;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *((_QWORD *)v22 + 9) = 0;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v20;
    *v6 = (uint64_t *)v22;
    v23 = **(_QWORD **)(a1 + 16);
    v24 = (uint64_t *)v22;
    if (v23)
    {
      *(_QWORD *)(a1 + 16) = v23;
      v24 = *v6;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v24);
    ++*(_QWORD *)(a1 + 32);
  }
  result = *(__n128 *)(v22 + 40);
  v26 = *(_OWORD *)(v22 + 56);
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v22 + 9);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v26;
  return result;
}

void sub_19C18F540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C18F568(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v11;
  uint64_t v12[8];
  void *__p[2];
  __int128 v14;
  int v15;
  uint64_t v16[19];

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16[0] = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v5;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v7, v12);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v11 = v2 + 24;
  v16[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x1E0DE4FB8];
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  v15 = 16;
  v9 = strlen(a1);
  sub_19C07DCDC(&v11, (uint64_t)a1, v9);
  std::ostream::operator<<();
  std::stringbuf::str();
  v11 = *v4;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = v4[3];
  v12[0] = v8 + 16;
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD1C08](v16);
}

void sub_19C18F6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C07DC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C18F6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](v1);
  _Unwind_Resume(a1);
}

__n128 sub_19C18F718@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  NSObject *v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  __n128 result;
  __int128 v20;
  void *__p;
  char v22;

  v6 = (uint64_t **)(a1 + 48);
  v5 = *(uint64_t **)(a1 + 48);
  if (!v5)
    goto LABEL_11;
  v7 = a2;
  v8 = a1 + 48;
  v9 = *(_QWORD *)(a1 + 48);
  do
  {
    v10 = *(_DWORD *)(v9 + 32);
    v11 = v10 < a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v9;
    else
      v12 = (uint64_t *)(v9 + 8);
    if (!v11)
      v8 = v9;
    v9 = *v12;
  }
  while (*v12);
  if ((uint64_t **)v8 == v6 || *(_DWORD *)(v8 + 32) > a2)
  {
LABEL_11:
    sub_19C18F568("output shape not found at port ");
    v13 = sub_19C1A0644();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      sub_19C255F5C();
      if ((v22 & 0x80000000) == 0)
      {
LABEL_13:
        v5 = *v6;
        v7 = a2;
        v14 = (char *)v6;
        if (*v6)
          goto LABEL_19;
LABEL_23:
        v16 = v14;
        v14 = (char *)operator new(0x50uLL);
        *((_DWORD *)v14 + 8) = v7;
        *(_OWORD *)(v14 + 40) = 0u;
        *(_OWORD *)(v14 + 56) = 0u;
        *((_QWORD *)v14 + 9) = 0;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = v16;
        *v6 = (uint64_t *)v14;
        v17 = **(_QWORD **)(a1 + 40);
        v18 = (uint64_t *)v14;
        if (v17)
        {
          *(_QWORD *)(a1 + 40) = v17;
          v18 = *v6;
        }
        sub_19C07CC40(*(uint64_t **)(a1 + 48), v18);
        ++*(_QWORD *)(a1 + 56);
        goto LABEL_26;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(__p);
    v5 = *v6;
    v7 = a2;
    v14 = (char *)v6;
    if (*v6)
      goto LABEL_19;
    goto LABEL_23;
  }
  while (1)
  {
LABEL_19:
    while (1)
    {
      v14 = (char *)v5;
      v15 = *((_DWORD *)v5 + 8);
      if (v7 >= v15)
        break;
      v5 = *(uint64_t **)v14;
      v6 = (uint64_t **)v14;
      if (!*(_QWORD *)v14)
        goto LABEL_23;
    }
    if (v15 >= v7)
      break;
    v5 = (uint64_t *)*((_QWORD *)v14 + 1);
    if (!v5)
    {
      v6 = (uint64_t **)(v14 + 8);
      goto LABEL_23;
    }
  }
LABEL_26:
  result = *(__n128 *)(v14 + 40);
  v20 = *(_OWORD *)(v14 + 56);
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v14 + 9);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v20;
  return result;
}

void sub_19C18F8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C18F8D8(uint64_t a1, int a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 24);
  v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *(char **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 24);
LABEL_8:
    v8 = v6;
    v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 9) = 0;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 16);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 16) = v9;
      v10 = *v5;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v10);
    ++*(_QWORD *)(a1 + 32);
  }
  return *((unsigned int *)v6 + 18);
}

uint64_t sub_19C18F9A8(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 16) + 64);
}

char *sub_19C18F9B4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[279] < 0)
    return (char *)sub_19C07C6E8((_BYTE *)a2, *((void **)result + 32), *((_QWORD *)result + 33));
  *(_OWORD *)a2 = *((_OWORD *)result + 16);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 34);
  return result;
}

uint64_t sub_19C18F9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 280) = a3;
  v6 = a1 + 232;
  v7 = *(_QWORD *)(a1 + 240);
  if (v7 != a1 + 232)
  {
    do
    {
      *(_QWORD *)(v7 + 24) = sub_19C2335AC();
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, a3, a2);
  if ((int)a2 >= 1)
  {
    do
    {
      v11 = *(uint64_t **)(a1 + 160);
      v12 = *(uint64_t **)(a1 + 168);
      while (v11 != v12)
      {
        v13 = *v11++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a3);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 320))(a1, a3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 328))(a1, a3);
      v10 = (int)a2 <= 1;
      LODWORD(a2) = a2 - 1;
    }
    while (!v10);
  }
  for (i = *(_QWORD *)(a1 + 240); i != v6; i = *(_QWORD *)(i + 8))
  {
    sub_19C2335C4(*(_QWORD *)(a1 + 8), *(_DWORD *)(i + 16) * a3, *(void **)(i + 24));
    *(_QWORD *)(i + 24) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_19C18FB08(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result + 232;
  v2 = *(_QWORD *)(result + 240);
  if (v2 != result + 232)
  {
    do
    {
      result = sub_19C2335AC();
      *(_QWORD *)(v2 + 24) = result;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != v1);
  }
  return result;
}

void sub_19C18FB60(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 232;
  v3 = *(_QWORD *)(a1 + 240);
  if (v3 != a1 + 232)
  {
    do
    {
      sub_19C2335C4(*(_QWORD *)(a1 + 8), *(_DWORD *)(v3 + 16) * a2, *(void **)(v3 + 24));
      *(_QWORD *)(v3 + 24) = 0;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

_OWORD *sub_19C18FBBC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *result;

  v6 = *(uint64_t **)(*(_QWORD *)a2 + 8);
  v8 = (uint64_t **)(a1 + 72);
  v7 = *(uint64_t **)(a1 + 72);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= a3)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(a1 + 72);
LABEL_8:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = a3;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v8 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 64);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 64) = v12;
      v13 = *v8;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 72), v13);
    ++*(_QWORD *)(a1 + 80);
  }
  v9[5] = v6;
  v14 = *(_QWORD **)(a1 + 216);
  if ((unint64_t)v14 >= *(_QWORD *)(a1 + 224))
  {
    result = sub_19C1923BC(a1 + 208, (__int128 *)a2);
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    *v14 = *(_QWORD *)a2;
    v14[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    result = v14 + 2;
  }
  *(_QWORD *)(a1 + 216) = result;
  return result;
}

uint64_t **sub_19C18FCD8(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 72);
  v4 = *(uint64_t **)(a1 + 72);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(a1 + 72);
LABEL_8:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v6 + 8) = a2;
    v6[5] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 64);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 64) = v9;
      v10 = *v5;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 72), v10);
    ++*(_QWORD *)(a1 + 80);
  }
  return v6 + 5;
}

_OWORD *sub_19C18FD9C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *result;

  v6 = *(uint64_t **)(*(_QWORD *)a2 + 8);
  v8 = (uint64_t **)(a1 + 96);
  v7 = *(uint64_t **)(a1 + 96);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= a3)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(a1 + 96);
LABEL_8:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = a3;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v8 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 88);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 88) = v12;
      v13 = *v8;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 96), v13);
    ++*(_QWORD *)(a1 + 104);
  }
  v9[5] = v6;
  v14 = *(_QWORD **)(a1 + 216);
  if ((unint64_t)v14 >= *(_QWORD *)(a1 + 224))
  {
    result = sub_19C1923BC(a1 + 208, (__int128 *)a2);
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    *v14 = *(_QWORD *)a2;
    v14[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    result = v14 + 2;
  }
  *(_QWORD *)(a1 + 216) = result;
  return result;
}

uint64_t **sub_19C18FEB8(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 96);
  v4 = *(uint64_t **)(a1 + 96);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(a1 + 96);
LABEL_8:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v6 + 8) = a2;
    v6[5] = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 88);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 88) = v9;
      v10 = *v5;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 96), v10);
    ++*(_QWORD *)(a1 + 104);
  }
  return v6 + 5;
}

uint64_t sub_19C18FF80(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD **)(result + 16);
  v3 = (_QWORD *)(result + 24);
  if (v2 != (_QWORD *)(result + 24))
  {
    v5 = result;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 336))(v5, a2, *((unsigned int *)v2 + 8));
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t sub_19C190010(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD **)(result + 40);
  v3 = (_QWORD *)(result + 48);
  if (v2 != (_QWORD *)(result + 48))
  {
    v5 = result;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 344))(v5, a2, *((unsigned int *)v2 + 8));
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t *sub_19C1900A0(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t *result;
  int v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;

  v3 = a3;
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a3);
  v7 = (int)result;
  v9 = (uint64_t **)(a1 + 72);
  v8 = *(uint64_t **)(a1 + 72);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = *((_DWORD *)v8 + 8);
        if (v11 <= v3)
          break;
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_8;
      }
      if (v11 >= v3)
        break;
      v8 = v10[1];
      if (!v8)
      {
        v9 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(a1 + 72);
LABEL_8:
    v12 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v10 + 8) = v3;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v9 = (uint64_t *)v10;
    v13 = **(_QWORD **)(a1 + 64);
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 64) = v13;
      v14 = *v9;
    }
    result = sub_19C07CC40(*(uint64_t **)(a1 + 72), v14);
    ++*(_QWORD *)(a1 + 80);
  }
  v10[5] = (uint64_t *)((char *)v10[5] + 4 * v7 * a2);
  return result;
}

uint64_t *sub_19C190190(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  int v6;
  uint64_t *result;
  char v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  v8 = (char)result;
  v10 = (uint64_t **)(a1 + 96);
  v9 = *(uint64_t **)(a1 + 96);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = *((_DWORD *)v9 + 8);
        if (v12 <= v3)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_8;
      }
      if (v12 >= v3)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v11 = (uint64_t **)(a1 + 96);
LABEL_8:
    v13 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v11 + 8) = v3;
    v11[5] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    *v10 = (uint64_t *)v11;
    v14 = **(_QWORD **)(a1 + 88);
    v15 = (uint64_t *)v11;
    if (v14)
    {
      *(_QWORD *)(a1 + 88) = v14;
      v15 = *v10;
    }
    result = sub_19C07CC40(*(uint64_t **)(a1 + 96), v15);
    ++*(_QWORD *)(a1 + 104);
  }
  v11[5] = (uint64_t *)((char *)v11[5] + 4 * (v6 << v8) * a2);
  return result;
}

__n128 sub_19C190298(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 result;
  __int128 v14;

  v7 = (uint64_t **)(a1 + 120);
  v6 = *(char **)(a1 + 120);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 120);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x60uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((_QWORD *)v8 + 11) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(a1 + 112);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(a1 + 112) = v11;
      v12 = *v7;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 120), v12);
    ++*(_QWORD *)(a1 + 128);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  v14 = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 10) = *(_QWORD *)(a2 + 40);
  *((__n128 *)v8 + 3) = result;
  *((_OWORD *)v8 + 4) = v14;
  *((_QWORD *)v8 + 11) = *(_QWORD *)(a2 + 48);
  return result;
}

__n128 sub_19C190390(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 result;
  __int128 v14;

  v7 = (uint64_t **)(a1 + 144);
  v6 = *(char **)(a1 + 144);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 144);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x60uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((_QWORD *)v8 + 11) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(a1 + 136);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(a1 + 136) = v11;
      v12 = *v7;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 144), v12);
    ++*(_QWORD *)(a1 + 152);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  v14 = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 10) = *(_QWORD *)(a2 + 40);
  *((__n128 *)v8 + 3) = result;
  *((_OWORD *)v8 + 4) = v14;
  *((_QWORD *)v8 + 11) = *(_QWORD *)(a2 + 48);
  return result;
}

void sub_19C190488(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[21];
  v4 = a1[22];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (void **)(a1 + 20);
  v9 = (char *)a1[20];
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    sub_19C07DA0C();
  v12 = v4 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_19C07C7FC();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v5 - v9);
  if (v5 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v9);
    }
    v6 = (char *)*v8;
  }
LABEL_21:
  a1[20] = v15;
  a1[21] = v7;
  a1[22] = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  a1[21] = v7;
}

char *sub_19C190608(_QWORD *a1, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  char *result;

  v4 = operator new(0x20uLL);
  v5 = a1[29];
  a1 += 29;
  v4[4] = a2;
  *(_QWORD *)v4 = v5;
  *((_QWORD *)v4 + 1) = a1;
  *(_QWORD *)(v5 + 8) = v4;
  *a1 = v4;
  *((_QWORD *)v4 + 3) = 0;
  result = (char *)(v4 + 6);
  ++a1[2];
  return result;
}

uint64_t sub_19C190654()
{
  return 0;
}

uint64_t sub_19C19065C(uint64_t a1, __int128 *a2, uint64_t a3, _QWORD *__src)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D22388;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v6 = __src[6];
  v7 = __src[15];
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 192) = v6;
  *(_QWORD *)(a1 + 200) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 232;
  *(_QWORD *)(a1 + 240) = a1 + 232;
  *(_QWORD *)(a1 + 248) = 0;
  v8 = a1 + 256;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19C07C6E8((_BYTE *)v8, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v8 = v9;
  }
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  memcpy((void *)(a1 + 312), __src, 0x2C0uLL);
  return a1;
}

void sub_19C1907BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD **a14, uint64_t a15, _QWORD **a16)
{
  _QWORD **v16;
  uint64_t v17;
  void **v18;
  _QWORD **v19;
  _QWORD **v20;
  _QWORD **v21;
  uint64_t v22;
  void **v23;
  uint64_t *v24;
  void *v26;

  sub_19C07C824(v24);
  sub_19C07C884(v23);
  v26 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v17 + 168) = v26;
    operator delete(v26);
  }
  sub_19C07C924(v22, *v21);
  sub_19C07C924(a10, *v16);
  sub_19C07C924(a11, *v20);
  sub_19C07C924(a12, *v19);
  sub_19C07C924(a13, *a14);
  sub_19C07C924(a15, *a16);
  _Unwind_Resume(a1);
}

uint64_t sub_19C190830(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  *(_QWORD *)a1 = &unk_1E3D22388;
  v2 = *(_QWORD **)(a1 + 160);
  v3 = *(_QWORD **)(a1 + 168);
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    ++v2;
  }
  if (*(char *)(a1 + 279) < 0)
  {
    operator delete(*(void **)(a1 + 256));
    if (!*(_QWORD *)(a1 + 248))
      goto LABEL_12;
  }
  else if (!*(_QWORD *)(a1 + 248))
  {
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 232);
  v4 = *(uint64_t **)(a1 + 240);
  v6 = *v4;
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
  **(_QWORD **)(v5 + 8) = v6;
  *(_QWORD *)(a1 + 248) = 0;
  if (v4 != (uint64_t *)(a1 + 232))
  {
    do
    {
      v7 = (uint64_t *)v4[1];
      operator delete(v4);
      v4 = v7;
    }
    while (v7 != (uint64_t *)(a1 + 232));
  }
LABEL_12:
  v8 = *(_QWORD *)(a1 + 208);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 216);
    v10 = *(void **)(a1 + 208);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 208);
    }
    *(_QWORD *)(a1 + 216) = v8;
    operator delete(v10);
  }
  v14 = *(void **)(a1 + 160);
  if (v14)
  {
    *(_QWORD *)(a1 + 168) = v14;
    operator delete(v14);
  }
  sub_19C07C924(a1 + 136, *(_QWORD **)(a1 + 144));
  sub_19C07C924(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_19C07C924(a1 + 88, *(_QWORD **)(a1 + 96));
  sub_19C07C924(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_19C07C924(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_19C07C924(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_19C1909BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 208);
  for (i = *(_QWORD *)(a1 + 216); i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  *(_QWORD *)(a1 + 216) = v2;
}

uint64_t sub_19C190A34(uint64_t a1)
{
  int **v1;
  int **v2;
  uint64_t v3;
  int v4;
  int *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v1 = *(int ***)(a1 + 208);
  v2 = *(int ***)(a1 + 216);
  if (v1 == v2)
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v5 = *v1;
    v6 = (std::__shared_weak_count *)v1[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v4 = *v5;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      v4 = *v5;
    }
    v3 = (v4 + v3);
    v1 += 2;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_19C190ADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = a1 + 232;
  v2 = *(_QWORD *)(a1 + 240);
  if (v2 == a1 + 232)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + *(_DWORD *)(v2 + 16));
    v2 = *(_QWORD *)(v2 + 8);
  }
  while (v2 != v1);
  return result;
}

void sub_19C190B10(uint64_t a1@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(a1 + 24);
  if (v2 != (_QWORD *)(a1 + 24))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (v7 < v6)
      {
        *(_DWORD *)v7 = *((_DWORD *)v2 + 8);
        v7 += 4;
        a2[1] = v7;
        v8 = (_QWORD *)v2[1];
        if (v8)
          goto LABEL_24;
        goto LABEL_26;
      }
      v9 = (v7 - v5) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        sub_19C07DA0C();
      if ((v6 - v5) >> 1 > v10)
        v10 = (v6 - v5) >> 1;
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        if (v11 >> 62)
          sub_19C07C7FC();
        v12 = operator new(4 * v11);
        v13 = &v12[4 * v9];
        *(_DWORD *)v13 = *((_DWORD *)v2 + 8);
        v14 = (uint64_t)(v13 + 4);
        if (v7 == v5)
          goto LABEL_21;
      }
      else
      {
        v12 = 0;
        v13 = (char *)(4 * v9);
        *(_DWORD *)(4 * v9) = *((_DWORD *)v2 + 8);
        v14 = 4 * v9 + 4;
        if (v7 == v5)
          goto LABEL_21;
      }
      v15 = v7 - 4 - v5;
      if (v15 < 0xBC)
      {
        v16 = v7;
        goto LABEL_20;
      }
      if (&v12[v7 - v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v7 - v5 - 4])
      {
        v16 = v7;
        do
        {
LABEL_20:
          v17 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v13 - 1) = v17;
          v13 -= 4;
        }
        while (v16 != v5);
        goto LABEL_21;
      }
      if (&v7[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v16 = v7;
        goto LABEL_20;
      }
      if ((unint64_t)(v5 - v12) < 0x20)
      {
        v16 = v7;
        goto LABEL_20;
      }
      v20 = (v15 >> 2) + 1;
      v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v16 = &v7[-v21];
      v13 -= v21;
      v22 = &v12[4 * v9 - 16];
      v23 = v7 - 16;
      v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_20;
LABEL_21:
      v6 = &v12[4 * v11];
      *a2 = v13;
      a2[1] = (char *)v14;
      a2[2] = v6;
      if (v5)
        operator delete(v5);
      v5 = v13;
      v7 = (char *)v14;
      a2[1] = (char *)v14;
      v8 = (_QWORD *)v2[1];
      if (v8)
      {
        do
        {
LABEL_24:
          v18 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
        goto LABEL_3;
      }
      do
      {
LABEL_26:
        v18 = (_QWORD *)v2[2];
        v19 = *v18 == (_QWORD)v2;
        v2 = v18;
      }
      while (!v19);
LABEL_3:
      v2 = v18;
    }
    while (v18 != v3);
  }
}

void sub_19C190D48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C190D68(uint64_t a1@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 40);
  v3 = (_QWORD *)(a1 + 48);
  if (v2 != (_QWORD *)(a1 + 48))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (v7 < v6)
      {
        *(_DWORD *)v7 = *((_DWORD *)v2 + 8);
        v7 += 4;
        a2[1] = v7;
        v8 = (_QWORD *)v2[1];
        if (v8)
          goto LABEL_24;
        goto LABEL_26;
      }
      v9 = (v7 - v5) >> 2;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62)
        sub_19C07DA0C();
      if ((v6 - v5) >> 1 > v10)
        v10 = (v6 - v5) >> 1;
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        if (v11 >> 62)
          sub_19C07C7FC();
        v12 = operator new(4 * v11);
        v13 = &v12[4 * v9];
        *(_DWORD *)v13 = *((_DWORD *)v2 + 8);
        v14 = (uint64_t)(v13 + 4);
        if (v7 == v5)
          goto LABEL_21;
      }
      else
      {
        v12 = 0;
        v13 = (char *)(4 * v9);
        *(_DWORD *)(4 * v9) = *((_DWORD *)v2 + 8);
        v14 = 4 * v9 + 4;
        if (v7 == v5)
          goto LABEL_21;
      }
      v15 = v7 - 4 - v5;
      if (v15 < 0xBC)
      {
        v16 = v7;
        goto LABEL_20;
      }
      if (&v12[v7 - v5 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v7 - v5 - 4])
      {
        v16 = v7;
        do
        {
LABEL_20:
          v17 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v13 - 1) = v17;
          v13 -= 4;
        }
        while (v16 != v5);
        goto LABEL_21;
      }
      if (&v7[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v16 = v7;
        goto LABEL_20;
      }
      if ((unint64_t)(v5 - v12) < 0x20)
      {
        v16 = v7;
        goto LABEL_20;
      }
      v20 = (v15 >> 2) + 1;
      v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v16 = &v7[-v21];
      v13 -= v21;
      v22 = &v12[4 * v9 - 16];
      v23 = v7 - 16;
      v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_20;
LABEL_21:
      v6 = &v12[4 * v11];
      *a2 = v13;
      a2[1] = (char *)v14;
      a2[2] = v6;
      if (v5)
        operator delete(v5);
      v5 = v13;
      v7 = (char *)v14;
      a2[1] = (char *)v14;
      v8 = (_QWORD *)v2[1];
      if (v8)
      {
        do
        {
LABEL_24:
          v18 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
        goto LABEL_3;
      }
      do
      {
LABEL_26:
        v18 = (_QWORD *)v2[2];
        v19 = *v18 == (_QWORD)v2;
        v2 = v18;
      }
      while (!v19);
LABEL_3:
      v2 = v18;
    }
    while (v18 != v3);
  }
}

void sub_19C190FA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C190FC0(uint64_t a1, int a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 24);
  v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *(char **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 24);
LABEL_8:
    v8 = v6;
    v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 9) = 0;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 16);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 16) = v9;
      v10 = *v5;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v10);
    ++*(_QWORD *)(a1 + 32);
  }
  return (*((_DWORD *)v6 + 10) * *((_DWORD *)v6 + 12) * *((_DWORD *)v6 + 14));
}

unint64_t sub_19C1910A0(uint64_t a1, int a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v5 = (uint64_t **)(a1 + 48);
  v4 = *(char **)(a1 + 48);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *(char **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 48);
LABEL_8:
    v8 = v6;
    v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 9) = 0;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 40);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 40) = v9;
      v10 = *v5;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 48), v10);
    ++*(_QWORD *)(a1 + 56);
  }
  v11 = *((_DWORD *)v6 + 10) * *((_DWORD *)v6 + 12) * *((_DWORD *)v6 + 14);
  return v11 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
}

__n128 sub_19C191198(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v7;
  char *v8;
  uint64_t **v9;
  uint64_t **v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  __n128 result;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t **v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  if ((a4 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 24);
    v9 = (uint64_t **)(a1 + 24);
    v8 = *(char **)(a1 + 24);
    v10 = (uint64_t **)(a1 + 24);
    v11 = (char *)(a1 + 24);
    if (v8)
    {
      v12 = *(char **)(a1 + 24);
      while (1)
      {
        while (1)
        {
          v11 = v12;
          v13 = *((_DWORD *)v12 + 8);
          if (v13 <= a3)
            break;
          v12 = *(char **)v11;
          v10 = (uint64_t **)v11;
          if (!*(_QWORD *)v11)
            goto LABEL_9;
        }
        if (v13 >= a3)
          break;
        v12 = (char *)*((_QWORD *)v11 + 1);
        if (!v12)
        {
          v10 = (uint64_t **)(v11 + 8);
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      v14 = v11;
      v11 = (char *)operator new(0x50uLL);
      *((_DWORD *)v11 + 8) = a3;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *((_QWORD *)v11 + 9) = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = v14;
      *v10 = (uint64_t *)v11;
      v15 = **(_QWORD **)(a1 + 16);
      v16 = (uint64_t *)v11;
      if (v15)
      {
        *(_QWORD *)(a1 + 16) = v15;
        v16 = *v10;
      }
      sub_19C07CC40(*(uint64_t **)(a1 + 24), v16);
      v8 = *(char **)(a1 + 24);
      ++*(_QWORD *)(a1 + 32);
    }
    *((_QWORD *)v11 + 8) = v7;
    v18 = *(_QWORD *)(a2 + 32);
    v19 = (char *)(a1 + 24);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          v19 = v8;
          v20 = *((_DWORD *)v8 + 8);
          if (v20 <= a3)
            break;
          v8 = *(char **)v19;
          v9 = (uint64_t **)v19;
          if (!*(_QWORD *)v19)
            goto LABEL_19;
        }
        if (v20 >= a3)
          break;
        v8 = (char *)*((_QWORD *)v19 + 1);
        if (!v8)
        {
          v9 = (uint64_t **)(v19 + 8);
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      v21 = v19;
      v19 = (char *)operator new(0x50uLL);
      *((_DWORD *)v19 + 8) = a3;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 56) = 0u;
      *((_QWORD *)v19 + 9) = 0;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = v21;
      *v9 = (uint64_t *)v19;
      v22 = **(_QWORD **)(a1 + 16);
      v23 = (uint64_t *)v19;
      if (v22)
      {
        *(_QWORD *)(a1 + 16) = v22;
        v23 = *v9;
      }
      sub_19C07CC40(*(uint64_t **)(a1 + 24), v23);
      ++*(_QWORD *)(a1 + 32);
    }
    *((_QWORD *)v19 + 9) = v18;
  }
  else
  {
    v25 = (uint64_t **)(a1 + 24);
    v24 = *(char **)(a1 + 24);
    if (v24)
    {
      while (1)
      {
        while (1)
        {
          v26 = v24;
          v27 = *((_DWORD *)v24 + 8);
          if (v27 <= a3)
            break;
          v24 = *(char **)v26;
          v25 = (uint64_t **)v26;
          if (!*(_QWORD *)v26)
            goto LABEL_30;
        }
        if (v27 >= a3)
          break;
        v24 = (char *)*((_QWORD *)v26 + 1);
        if (!v24)
        {
          v25 = (uint64_t **)(v26 + 8);
          goto LABEL_30;
        }
      }
    }
    else
    {
      v26 = (char *)(a1 + 24);
LABEL_30:
      v28 = v26;
      v26 = (char *)operator new(0x50uLL);
      *((_DWORD *)v26 + 8) = a3;
      *(_OWORD *)(v26 + 40) = 0u;
      *(_OWORD *)(v26 + 56) = 0u;
      *((_QWORD *)v26 + 9) = 0;
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = v28;
      *v25 = (uint64_t *)v26;
      v29 = **(_QWORD **)(a1 + 16);
      v30 = (uint64_t *)v26;
      if (v29)
      {
        *(_QWORD *)(a1 + 16) = v29;
        v30 = *v25;
      }
      sub_19C07CC40(*(uint64_t **)(a1 + 24), v30);
      ++*(_QWORD *)(a1 + 32);
    }
    result = *(__n128 *)a2;
    v31 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v26 + 9) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(v26 + 56) = v31;
    *(__n128 *)(v26 + 40) = result;
  }
  return result;
}

__n128 sub_19C1913E8(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 result;
  __int128 v14;

  v7 = (uint64_t **)(a1 + 48);
  v6 = *(char **)(a1 + 48);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 48);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x50uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *((_QWORD *)v8 + 9) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(a1 + 40);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(a1 + 40) = v11;
      v12 = *v7;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 48), v12);
    ++*(_QWORD *)(a1 + 56);
  }
  result = *(__n128 *)a2;
  v14 = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v8 + 9) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 56) = v14;
  *(__n128 *)(v8 + 40) = result;
  return result;
}

uint64_t sub_19C1914CC(_QWORD *a1)
{
  int v2;

  if (a1[24] == 1)
    v2 = 1;
  else
    v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  return (*(unsigned int (**)(_QWORD *))(*a1 + 88))(a1) * v2;
}

uint64_t sub_19C191524(uint64_t a1)
{
  int v2;
  int v3;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v3 = v2 << (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) * v3;
}

uint64_t sub_19C191578()
{
  return 4;
}

uint64_t sub_19C191580(uint64_t a1)
{
  return *(unsigned int *)(a1 + 280);
}

uint64_t sub_19C191588(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192);
}

uint64_t sub_19C191590(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200);
}

uint64_t sub_19C191598(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312);
}

uint64_t sub_19C1915A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 184);
}

uint64_t sub_19C1915A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 184) = a2;
  return result;
}

double sub_19C1915B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 284) = *(_QWORD *)(*a2 + 56);
  result = *(double *)(v2 + 48);
  *(double *)(a1 + 292) = result;
  return result;
}

void *sub_19C1915CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 312), 0x2C0uLL);
}

__n128 sub_19C1915DC@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  __n128 result;
  __int128 v26;
  void *__p;
  char v28;

  v6 = (uint64_t **)(a1 + 24);
  v5 = *(uint64_t **)(a1 + 24);
  if (!v5)
    goto LABEL_11;
  v7 = a2;
  v8 = a1 + 24;
  v9 = *(_QWORD *)(a1 + 24);
  do
  {
    v10 = *(_DWORD *)(v9 + 32);
    v11 = v10 < a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v9;
    else
      v12 = (uint64_t *)(v9 + 8);
    if (!v11)
      v8 = v9;
    v9 = *v12;
  }
  while (*v12);
  if ((uint64_t **)v8 != v6 && *(_DWORD *)(v8 + 32) <= a2)
  {
    while (1)
    {
LABEL_28:
      while (1)
      {
        v20 = (uint64_t **)v5;
        v21 = *((_DWORD *)v5 + 8);
        if (v7 >= v21)
          break;
        v5 = *v20;
        v6 = v20;
        if (!*v20)
          goto LABEL_32;
      }
      if (v21 >= v7)
        break;
      v5 = v20[1];
      if (!v5)
      {
        v6 = v20 + 1;
        goto LABEL_32;
      }
    }
    v22 = (char *)v20;
  }
  else
  {
LABEL_11:
    sub_19C18F568("input shape not found at port ");
    v13 = *v6;
    v14 = v6;
    v15 = v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v15 = (uint64_t **)v13;
          v16 = *((_DWORD *)v13 + 8);
          if (a2 >= v16)
            break;
          v13 = *v15;
          v14 = v15;
          if (!*v15)
            goto LABEL_18;
        }
        if (v16 >= a2)
          break;
        v13 = v15[1];
        if (!v13)
        {
          v14 = v15 + 1;
          goto LABEL_18;
        }
      }
      v17 = (char *)v15;
    }
    else
    {
LABEL_18:
      v17 = (char *)operator new(0x50uLL);
      *((_DWORD *)v17 + 8) = a2;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *((_QWORD *)v17 + 9) = 0;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = v15;
      *v14 = (uint64_t *)v17;
      v18 = **(_QWORD **)(a1 + 16);
      v19 = (uint64_t *)v17;
      if (v18)
      {
        *(_QWORD *)(a1 + 16) = v18;
        v19 = *v14;
      }
      sub_19C07CC40(*(uint64_t **)(a1 + 24), v19);
      ++*(_QWORD *)(a1 + 32);
    }
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((_QWORD *)v17 + 9) = 0;
    if (v28 < 0)
    {
      operator delete(__p);
      v5 = *v6;
      v7 = a2;
      v20 = v6;
      if (*v6)
        goto LABEL_28;
    }
    else
    {
      v5 = *v6;
      v7 = a2;
      v20 = v6;
      if (*v6)
        goto LABEL_28;
    }
LABEL_32:
    v22 = (char *)operator new(0x50uLL);
    *((_DWORD *)v22 + 8) = v7;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *((_QWORD *)v22 + 9) = 0;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v20;
    *v6 = (uint64_t *)v22;
    v23 = **(_QWORD **)(a1 + 16);
    v24 = (uint64_t *)v22;
    if (v23)
    {
      *(_QWORD *)(a1 + 16) = v23;
      v24 = *v6;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v24);
    ++*(_QWORD *)(a1 + 32);
  }
  result = *(__n128 *)(v22 + 40);
  v26 = *(_OWORD *)(v22 + 56);
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v22 + 9);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v26;
  return result;
}

void sub_19C191858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19C191880@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  NSObject *v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  __n128 result;
  __int128 v20;
  void *__p;
  char v22;

  v6 = (uint64_t **)(a1 + 48);
  v5 = *(uint64_t **)(a1 + 48);
  if (!v5)
    goto LABEL_11;
  v7 = a2;
  v8 = a1 + 48;
  v9 = *(_QWORD *)(a1 + 48);
  do
  {
    v10 = *(_DWORD *)(v9 + 32);
    v11 = v10 < a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v9;
    else
      v12 = (uint64_t *)(v9 + 8);
    if (!v11)
      v8 = v9;
    v9 = *v12;
  }
  while (*v12);
  if ((uint64_t **)v8 == v6 || *(_DWORD *)(v8 + 32) > a2)
  {
LABEL_11:
    sub_19C18F568("output shape not found at port ");
    v13 = sub_19C1A0644();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      sub_19C255F5C();
      if ((v22 & 0x80000000) == 0)
      {
LABEL_13:
        v5 = *v6;
        v7 = a2;
        v14 = (char *)v6;
        if (*v6)
          goto LABEL_19;
LABEL_23:
        v16 = v14;
        v14 = (char *)operator new(0x50uLL);
        *((_DWORD *)v14 + 8) = v7;
        *(_OWORD *)(v14 + 40) = 0u;
        *(_OWORD *)(v14 + 56) = 0u;
        *((_QWORD *)v14 + 9) = 0;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = v16;
        *v6 = (uint64_t *)v14;
        v17 = **(_QWORD **)(a1 + 40);
        v18 = (uint64_t *)v14;
        if (v17)
        {
          *(_QWORD *)(a1 + 40) = v17;
          v18 = *v6;
        }
        sub_19C07CC40(*(uint64_t **)(a1 + 48), v18);
        ++*(_QWORD *)(a1 + 56);
        goto LABEL_26;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(__p);
    v5 = *v6;
    v7 = a2;
    v14 = (char *)v6;
    if (*v6)
      goto LABEL_19;
    goto LABEL_23;
  }
  while (1)
  {
LABEL_19:
    while (1)
    {
      v14 = (char *)v5;
      v15 = *((_DWORD *)v5 + 8);
      if (v7 >= v15)
        break;
      v5 = *(uint64_t **)v14;
      v6 = (uint64_t **)v14;
      if (!*(_QWORD *)v14)
        goto LABEL_23;
    }
    if (v15 >= v7)
      break;
    v5 = (uint64_t *)*((_QWORD *)v14 + 1);
    if (!v5)
    {
      v6 = (uint64_t **)(v14 + 8);
      goto LABEL_23;
    }
  }
LABEL_26:
  result = *(__n128 *)(v14 + 40);
  v20 = *(_OWORD *)(v14 + 56);
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v14 + 9);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v20;
  return result;
}

void sub_19C191A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C191A40(uint64_t a1, int a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 24);
  v4 = *(char **)(a1 + 24);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *(char **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 24);
LABEL_8:
    v8 = v6;
    v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 9) = 0;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 16);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 16) = v9;
      v10 = *v5;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v10);
    ++*(_QWORD *)(a1 + 32);
  }
  return *((unsigned int *)v6 + 18);
}

uint64_t sub_19C191B10(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 16) + 64);
}

char *sub_19C191B1C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[279] < 0)
    return (char *)sub_19C07C6E8((_BYTE *)a2, *((void **)result + 32), *((_QWORD *)result + 33));
  *(_OWORD *)a2 = *((_OWORD *)result + 16);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 34);
  return result;
}

uint64_t sub_19C191B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 280) = a3;
  v6 = a1 + 232;
  v7 = *(_QWORD *)(a1 + 240);
  if (v7 != a1 + 232)
  {
    do
    {
      *(_QWORD *)(v7 + 24) = sub_19C2335AC();
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, a3, a2);
  if ((int)a2 >= 1)
  {
    do
    {
      v11 = *(uint64_t **)(a1 + 160);
      v12 = *(uint64_t **)(a1 + 168);
      while (v11 != v12)
      {
        v13 = *v11++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a3);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 320))(a1, a3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 328))(a1, a3);
      v10 = (int)a2 <= 1;
      LODWORD(a2) = a2 - 1;
    }
    while (!v10);
  }
  for (i = *(_QWORD *)(a1 + 240); i != v6; i = *(_QWORD *)(i + 8))
  {
    sub_19C2335C4(*(_QWORD *)(a1 + 8), *(_DWORD *)(i + 16) * a3, *(void **)(i + 24));
    *(_QWORD *)(i + 24) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

_OWORD *sub_19C191C70(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *result;

  v6 = *(uint64_t **)(*(_QWORD *)a2 + 8);
  v8 = (uint64_t **)(a1 + 72);
  v7 = *(uint64_t **)(a1 + 72);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= a3)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(a1 + 72);
LABEL_8:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = a3;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v8 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 64);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 64) = v12;
      v13 = *v8;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 72), v13);
    ++*(_QWORD *)(a1 + 80);
  }
  v9[5] = v6;
  v14 = *(_QWORD **)(a1 + 216);
  if ((unint64_t)v14 >= *(_QWORD *)(a1 + 224))
  {
    result = sub_19C1923BC(a1 + 208, (__int128 *)a2);
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    *v14 = *(_QWORD *)a2;
    v14[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    result = v14 + 2;
  }
  *(_QWORD *)(a1 + 216) = result;
  return result;
}

_OWORD *sub_19C191D8C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *result;

  v6 = *(uint64_t **)(*(_QWORD *)a2 + 8);
  v8 = (uint64_t **)(a1 + 96);
  v7 = *(uint64_t **)(a1 + 96);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = *((_DWORD *)v7 + 8);
        if (v10 <= a3)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= a3)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(a1 + 96);
LABEL_8:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = a3;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v8 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 88);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 88) = v12;
      v13 = *v8;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 96), v13);
    ++*(_QWORD *)(a1 + 104);
  }
  v9[5] = v6;
  v14 = *(_QWORD **)(a1 + 216);
  if ((unint64_t)v14 >= *(_QWORD *)(a1 + 224))
  {
    result = sub_19C1923BC(a1 + 208, (__int128 *)a2);
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    *v14 = *(_QWORD *)a2;
    v14[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    result = v14 + 2;
  }
  *(_QWORD *)(a1 + 216) = result;
  return result;
}

uint64_t sub_19C191EAC(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD **)(result + 16);
  v3 = (_QWORD *)(result + 24);
  if (v2 != (_QWORD *)(result + 24))
  {
    v5 = result;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 336))(v5, a2, *((unsigned int *)v2 + 8));
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t sub_19C191F3C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD **)(result + 40);
  v3 = (_QWORD *)(result + 48);
  if (v2 != (_QWORD *)(result + 48))
  {
    v5 = result;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 344))(v5, a2, *((unsigned int *)v2 + 8));
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t *sub_19C191FCC(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t *result;
  int v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;

  v3 = a3;
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a3);
  v7 = (int)result;
  v9 = (uint64_t **)(a1 + 72);
  v8 = *(uint64_t **)(a1 + 72);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = *((_DWORD *)v8 + 8);
        if (v11 <= v3)
          break;
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_8;
      }
      if (v11 >= v3)
        break;
      v8 = v10[1];
      if (!v8)
      {
        v9 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(a1 + 72);
LABEL_8:
    v12 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v10 + 8) = v3;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v9 = (uint64_t *)v10;
    v13 = **(_QWORD **)(a1 + 64);
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 64) = v13;
      v14 = *v9;
    }
    result = sub_19C07CC40(*(uint64_t **)(a1 + 72), v14);
    ++*(_QWORD *)(a1 + 80);
  }
  v10[5] = (uint64_t *)((char *)v10[5] + 4 * v7 * a2);
  return result;
}

uint64_t *sub_19C1920BC(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  int v6;
  uint64_t *result;
  char v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  v8 = (char)result;
  v10 = (uint64_t **)(a1 + 96);
  v9 = *(uint64_t **)(a1 + 96);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = *((_DWORD *)v9 + 8);
        if (v12 <= v3)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_8;
      }
      if (v12 >= v3)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v11 = (uint64_t **)(a1 + 96);
LABEL_8:
    v13 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v11 + 8) = v3;
    v11[5] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    *v10 = (uint64_t *)v11;
    v14 = **(_QWORD **)(a1 + 88);
    v15 = (uint64_t *)v11;
    if (v14)
    {
      *(_QWORD *)(a1 + 88) = v14;
      v15 = *v10;
    }
    result = sub_19C07CC40(*(uint64_t **)(a1 + 96), v15);
    ++*(_QWORD *)(a1 + 104);
  }
  v11[5] = (uint64_t *)((char *)v11[5] + 4 * (v6 << v8) * a2);
  return result;
}

__n128 sub_19C1921C4(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 result;
  __int128 v14;

  v7 = (uint64_t **)(a1 + 120);
  v6 = *(char **)(a1 + 120);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 120);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x60uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((_QWORD *)v8 + 11) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(a1 + 112);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(a1 + 112) = v11;
      v12 = *v7;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 120), v12);
    ++*(_QWORD *)(a1 + 128);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  v14 = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 10) = *(_QWORD *)(a2 + 40);
  *((__n128 *)v8 + 3) = result;
  *((_OWORD *)v8 + 4) = v14;
  *((_QWORD *)v8 + 11) = *(_QWORD *)(a2 + 48);
  return result;
}

__n128 sub_19C1922BC(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 result;
  __int128 v14;

  v7 = (uint64_t **)(a1 + 144);
  v6 = *(char **)(a1 + 144);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 144);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x60uLL);
    *((_DWORD *)v8 + 8) = a3;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *((_QWORD *)v8 + 11) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(a1 + 136);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(a1 + 136) = v11;
      v12 = *v7;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 144), v12);
    ++*(_QWORD *)(a1 + 152);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  v14 = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 10) = *(_QWORD *)(a2 + 40);
  *((__n128 *)v8 + 3) = result;
  *((_OWORD *)v8 + 4) = v14;
  *((_QWORD *)v8 + 11) = *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t sub_19C1923B4()
{
  return 0;
}

_OWORD *sub_19C1923BC(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_19C07DA0C();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_19C07C7FC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

void sub_19C19251C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_19C19252C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_19C192740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C192750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C192768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19277C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C192790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C1927A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1927B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1927CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C1927DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1927F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C192808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C192818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C192828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C192840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C192AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C192FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,id location)
{
  void *v24;
  void *v25;
  void *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19C1930FC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend_labels(*(void **)(a1 + 32), v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_count(v5, v6, v7, v8);

  objc_msgSend_computeLoss_(WeakRetained, v10, *(_QWORD *)(a1 + 40), v11);
  v16 = *(_QWORD *)(a1 + 56);
  if (v16)
    (*(void (**)(uint64_t, _QWORD, float))(v16 + 16))(v16, *(_QWORD *)(a1 + 72), v15 / (float)(unint64_t)v9);
  objc_msgSend_seqLearningRateDecayHandler(WeakRetained, v12, v13, v14);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_updateGlobalStep(v17, v18, v19, v20);

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_19C19319C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C1931B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C1931CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C1931E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C193290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1932A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C1932B8(float **a1, void *a2, unint64_t a3)
{
  id v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  uint64_t i;
  void *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  float *v16;
  float v17;
  const char *v18;
  uint64_t j;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  float32x4_t *v24;
  const char *v25;
  float *v26;
  float v27;
  float *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  uint64_t v32;
  float32x4_t v33;
  float v34;
  unint64_t v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v4 = a2;
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v37, (uint64_t)v41, 16);
  if (!v7)
    goto LABEL_33;
  v8 = *(_QWORD *)v38;
  if (a3)
  {
    if (a3 >> 62)
      sub_19C07DA0C();
    v9 = 4 * a3;
    v10 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v10 < 7)
    {
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v38 != v8)
            objc_enumerationMutation(v4);
          v12 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
          v13 = (char *)operator new(v9);
          bzero(v13, v9);
          objc_msgSend_readBytes_strideBytes_(v12, v14, (uint64_t)v13, 0);
          v15 = 0;
          v16 = *a1;
          v17 = **a1;
          do
          {
            v17 = v17 + *(float *)&v13[v15];
            *v16 = v17;
            v15 += 4;
          }
          while (v9 != v15);
          operator delete(v13);
        }
        v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v18, (uint64_t)&v37, (uint64_t)v41, 16);
      }
      while (v7);
      goto LABEL_33;
    }
    v35 = v10 + 1;
    v20 = (v10 + 1) & 0x7FFFFFFFFFFFFFF8;
LABEL_20:
    v21 = 0;
    while (1)
    {
      if (*(_QWORD *)v38 != v8)
        objc_enumerationMutation(v4);
      v23 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v21);
      v24 = (float32x4_t *)operator new(v9);
      bzero(v24, v9);
      objc_msgSend_readBytes_strideBytes_(v23, v25, (uint64_t)v24, 0);
      v26 = *a1;
      v27 = **a1;
      if (*a1 >= &v24->f32[a3] || v24 >= (float32x4_t *)(*a1 + 1))
      {
        v28 = &v24->f32[v20];
        v29 = 0uLL;
        v30 = (float32x4_t)*(unsigned int *)*a1;
        v31 = v24 + 1;
        v32 = v20;
        do
        {
          v30 = vaddq_f32(v30, v31[-1]);
          v29 = vaddq_f32(v29, *v31);
          v31 += 2;
          v32 -= 8;
        }
        while (v32);
        v33 = vaddq_f32(v29, v30);
        v27 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33));
        *v26 = v27;
        if (v35 == v20)
          goto LABEL_21;
      }
      else
      {
        v28 = (float *)v24;
      }
      do
      {
        v34 = *v28++;
        v27 = v27 + v34;
        *v26 = v27;
      }
      while (v28 != &v24->f32[a3]);
LABEL_21:
      operator delete(v24);
      if (++v21 == v7)
      {
        v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v22, (uint64_t)&v37, (uint64_t)v41, 16);
        if (!v7)
          goto LABEL_33;
        goto LABEL_20;
      }
    }
  }
  do
  {
    for (j = 0; j != v7; ++j)
    {
      if (*(_QWORD *)v38 != v8)
        objc_enumerationMutation(v4);
      objc_msgSend_readBytes_strideBytes_(*(void **)(*((_QWORD *)&v37 + 1) + 8 * j), v6, 0, 0);
    }
    v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v37, (uint64_t)v41, 16);
  }
  while (v7);
LABEL_33:

}

void sub_19C1935D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C193AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,id location)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19C193BF0(uint64_t a1, void *a2)
{
  id WeakRetained;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  float *v40;
  float v41;
  uint64_t v42;
  float *v43;
  float v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  unsigned int v58;
  _QWORD **v59;
  uint64_t *v60;
  uint64_t *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  unsigned int v65;
  _DWORD *v66;
  _QWORD *v67;
  uint64_t *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  id v77;
  id v78;
  void *v79;
  void *v80;

  v77 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v4, 0, v5);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_combinedLossLabels(*(void **)(a1 + 40), v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_labels(v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = 0;
  v78 = WeakRetained;
  while (v17 < objc_msgSend_count(v13, v14, v15, v16, v77))
  {
    objc_msgSend_data(v79, v18, v19, v20);
    v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v25 = objc_msgSend_contents(v21, v22, v23, v24);
    v29 = objc_msgSend_rowBytes(v79, v26, v27, v28);

    v33 = objc_msgSend_outputChannels(*(void **)(a1 + 48), v30, v31, v32);
    v36 = v33;
    v80 = 0;
    if (v33)
    {
      if (v33 < 0)
        sub_19C07DA0C();
      v37 = 4 * v33;
      v80 = operator new(4 * v33);
      memcpy(v80, (const void *)(v25 + v29 * v17), 4 * v36);
      v38 = (float *)operator new(4 * v36);
      memcpy(v38, v80, 4 * v36);
      v39 = v38;
      if (v36 != 1)
      {
        v40 = v38 + 1;
        v41 = *v38;
        v42 = v37 - 4;
        v39 = v38;
        v43 = v38 + 1;
        do
        {
          v44 = *v43++;
          v45 = v41 < v44;
          v41 = fmaxf(v41, v44);
          if (v45)
            v39 = v40;
          v40 = v43;
          v42 -= 4;
        }
        while (v42);
      }
      v46 = (unint64_t)((char *)v39 - (char *)v38) >> 2;
      operator delete(v38);
    }
    else
    {
      LODWORD(v46) = 0;
    }
    v47 = *(_QWORD *)(a1 + 56);
    objc_msgSend_objectAtIndexedSubscript_(v13, v34, v17, v35);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend_unsignedIntegerValue(v48, v49, v50, v51);
    v53 = v52;
    v54 = (uint64_t **)(v47 + 8);
    v56 = (uint64_t **)(v47 + 16);
    v55 = *(uint64_t **)(v47 + 16);
    if (v55)
    {
      while (1)
      {
        while (1)
        {
          v57 = v55;
          v58 = *((_DWORD *)v55 + 8);
          if (v58 <= v52)
            break;
          v55 = (uint64_t *)*v57;
          v56 = (uint64_t **)v57;
          if (!*v57)
            goto LABEL_19;
        }
        if (v58 >= v52)
          break;
        v55 = (uint64_t *)v57[1];
        if (!v55)
        {
          v56 = (uint64_t **)(v57 + 1);
          goto LABEL_19;
        }
      }
      v59 = (_QWORD **)v57;
      v63 = v57 + 6;
      v62 = (_QWORD *)v57[6];
      if (v62)
        goto LABEL_26;
LABEL_24:
      v64 = v63;
LABEL_30:
      v66 = operator new(0x28uLL);
      v66[7] = v46;
      v66[8] = 0;
      *(_QWORD *)v66 = 0;
      *((_QWORD *)v66 + 1) = 0;
      *((_QWORD *)v66 + 2) = v64;
      *v63 = v66;
      v67 = (_QWORD *)*v59[5];
      v68 = (uint64_t *)v66;
      if (v67)
      {
        v59[5] = v67;
        v68 = (uint64_t *)*v63;
      }
      sub_19C07CC40(v59[6], v68);
      v59[7] = (_QWORD *)((char *)v59[7] + 1);
      goto LABEL_34;
    }
    v57 = (uint64_t *)(v47 + 16);
LABEL_19:
    v59 = (_QWORD **)operator new(0x40uLL);
    *((_DWORD *)v59 + 8) = v53;
    v59[7] = 0;
    v59[6] = 0;
    v59[5] = v59 + 6;
    *v59 = 0;
    v59[1] = 0;
    v59[2] = v57;
    *v56 = (uint64_t *)v59;
    v60 = (uint64_t *)**v54;
    v61 = (uint64_t *)v59;
    if (v60)
    {
      *v54 = v60;
      v61 = *v56;
    }
    sub_19C07CC40(v54[1], v61);
    v54[2] = (uint64_t *)((char *)v54[2] + 1);
    v63 = v59 + 6;
    v62 = v59[6];
    if (!v62)
      goto LABEL_24;
    while (1)
    {
LABEL_26:
      while (1)
      {
        v64 = v62;
        v65 = *((_DWORD *)v62 + 7);
        if (v65 <= v46)
          break;
        v62 = (_QWORD *)*v64;
        v63 = v64;
        if (!*v64)
          goto LABEL_30;
      }
      if (v65 >= v46)
        break;
      v62 = (_QWORD *)v64[1];
      if (!v62)
      {
        v63 = v64 + 1;
        goto LABEL_30;
      }
    }
    v66 = v64;
LABEL_34:

    ++v66[8];
    WeakRetained = v78;
    objc_msgSend_objectAtIndexedSubscript_(v13, v69, v17, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v75 = objc_msgSend_unsignedIntegerValue(v71, v72, v73, v74);
    *(float *)(*(_QWORD *)(a1 + 56) + 32) = *(float *)(*(_QWORD *)(a1 + 56) + 32) + log2f(*((float *)v80 + v75));

    operator delete(v80);
    ++v17;
  }
  objc_msgSend_computeLoss_(WeakRetained, v18, *(_QWORD *)(a1 + 40), v20);
  *(float *)(*(_QWORD *)(a1 + 56) + 36) = *(float *)(*(_QWORD *)(a1 + 56) + 36) + v76;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));

}

void sub_19C193F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_19C1943E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Block_object_dispose(&a20, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_19C194514(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_19C194538(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_19C194550(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;

  v36 = a2;
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v3, 0, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_combinedLossLabels(*(void **)(a1 + 40), v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_labels(v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  for (i = 0; i < objc_msgSend_count(v13, v14, v15, v16); ++i)
  {
    objc_msgSend_data(v5, v18, v19, v20);
    v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v25 = objc_msgSend_contents(v21, v22, v23, v24);
    v29 = objc_msgSend_rowBytes(v5, v26, v27, v28);

    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v31 = *(void **)(v30 + 56);
    v35 = objc_msgSend_outputChannels(*(void **)(a1 + 48), v32, v33, v34);
    sub_19C0994CC((unint64_t *)(v30 + 48), v31, (char *)(v25 + v29 * i), (char *)(v25 + v29 * i + 4 * v35), v35);
  }

}

void sub_19C194644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C194660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19C194678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19C19468C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C1946B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C194890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFArrayRef sub_19C194904(int **a1)
{
  unint64_t v2;
  int *v3;
  int *v4;
  CFNumberRef *v5;
  CFArrayRef v6;
  CFNumberRef *v7;
  CFNumberRef *v8;
  void *v9;
  const void *v10;
  const void *v11;
  int v13;
  void *__p;
  CFNumberRef *v15;
  unint64_t v16;

  v2 = a1[1] - *a1;
  __p = 0;
  v15 = 0;
  v16 = 0;
  sub_19C09ACF8((uint64_t)&__p, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = v15;
    do
    {
      v13 = *v3;
      if ((unint64_t)v5 >= v16)
        v5 = sub_19C194A3C((CFNumberRef **)&__p, &v13);
      else
        sub_19C194C2C((uint64_t)&v16, v5++, &v13);
      v15 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v6 = sub_19C09AE70((char **)&__p);
  v7 = (CFNumberRef *)__p;
  if (__p)
  {
    v8 = v15;
    v9 = __p;
    if (v15 != __p)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        if (v11)
          CFRelease(v10);
      }
      while (v8 != v7);
      v9 = __p;
    }
    v15 = v7;
    operator delete(v9);
  }
  return v6;
}

void sub_19C194A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B000((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C194A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B000((void **)va);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_19C194A3C(CFNumberRef **a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  CFNumberRef *v9;
  CFNumberRef *v10;
  CFNumberRef *v11;
  CFNumberRef *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFNumberRef *v17;
  CFNumberRef *v18;
  CFNumberRef *v19;
  CFNumberRef *v20;
  uint64_t v21;
  __int128 v22;
  const __CFNumber *v23;
  CFNumberRef *v24;
  const void *v25;
  const void *v26;
  CFNumberRef *v28;
  CFNumberRef *v29;

  v3 = a1[1] - *a1;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61)
    sub_19C07DA0C();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v4)
    v4 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 61)
      sub_19C07C7FC();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v28 = (CFNumberRef *)&v8[8 * v3];
  v29 = (CFNumberRef *)&v8[8 * v7];
  sub_19C194C2C((uint64_t)(a1 + 2), v28, a2);
  v9 = v28;
  v10 = v28 + 1;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v28;
    a1[1] = v10;
    a1[2] = v29;
  }
  else
  {
    v13 = (char *)v12 - (char *)*a1 - 8;
    if (v13 < 0x58)
      goto LABEL_18;
    v14 = ((char *)v11 - (char *)v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((CFNumberRef *)((char *)v28 + v14) < v12 && (CFNumberRef *)((char *)v12 + v14) < v28)
      goto LABEL_18;
    v15 = (v13 >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v28[v16 / 0xFFFFFFFFFFFFFFF8];
    v18 = &v12[v16 / 0xFFFFFFFFFFFFFFF8];
    v19 = v12 - 2;
    v20 = v28 - 2;
    v21 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)v19 = 0uLL;
      v19 -= 4;
      v20 -= 4;
      v21 -= 4;
    }
    while (v21);
    v9 = v17;
    v12 = v18;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      v17 = v9;
      do
      {
        v23 = *--v12;
        *--v17 = v23;
        *v12 = 0;
      }
      while (v12 != v11);
    }
    v24 = *a1;
    v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v29;
    if (v12 != v24)
    {
      do
      {
        v26 = *--v12;
        v25 = v26;
        if (v26)
          CFRelease(v25);
      }
      while (v12 != v24);
      v12 = v24;
    }
  }
  if (v12)
    operator delete(v12);
  return v28 + 1;
}

void sub_19C194C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B06C((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef sub_19C194C2C(uint64_t a1, CFNumberRef *a2, int *a3)
{
  CFNumberRef result;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a3;
  result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C194CAC(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

id sub_19C194CD8(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (**v7)(id, uint64_t, uint64_t, uint64_t, _BYTE *);
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  int v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v54;
  NSObject *v55;
  void *v56;
  MLPInferenceResult *v57;
  void **v58;
  unsigned __int8 v59;

  v7 = a2;
  v57 = objc_alloc_init(MLPInferenceResult);
  objc_msgSend_commandQueue(a1[23], v8, v9, v10);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = dispatch_semaphore_create(1);
  v12 = (void *)MEMORY[0x1A1AD2100]();
  v59 = 0;
  v55 = v11;
  v16 = (void *)v7[2](v7, a3, a4, 1, &v59);
  v17 = v59;
  v58 = a1;
  v54 = a3;
  if (v59)
  {
    objc_msgSend_waitUntilCompleted(0, v13, v14, v15);
    v18 = 0;
    v19 = 0;
  }
  else
  {
    objc_msgSend_dataBatch_batchSize_network_(MLPDataBatch, v13, (uint64_t)v16, a4, *a1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    objc_msgSend_commandBufferFromCommandQueue_(MEMORY[0x1E0CC6DE0], v21, (uint64_t)v56, v22);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend_runInference_databatch_inferredResult_semaphore_(*v58, v23, (uint64_t)v18, (uint64_t)v20, v57, v11);
    objc_msgSend_commit(v18, v24, v25, v26);

    a1 = v58;
  }

  objc_autoreleasePoolPop(v12);
  v34 = v18;
  if (v17)
  {
    v35 = v11;
  }
  else
  {
    v36 = v54;
    v35 = v11;
    do
    {
      v37 = (void *)MEMORY[0x1A1AD2100]();
      v59 = 0;
      v41 = (void *)v7[2](v7, v36, a4, 0, &v59);
      v42 = v59;
      if (v59)
      {
        objc_msgSend_waitUntilCompleted(v34, v38, v39, v40);
      }
      else
      {
        objc_msgSend_dataBatch_batchSize_network_(MLPDataBatch, v38, (uint64_t)v41, a4, *a1);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        dispatch_semaphore_wait(v35, 0xFFFFFFFFFFFFFFFFLL);
        objc_msgSend_commandBufferFromCommandQueue_(MEMORY[0x1E0CC6DE0], v44, (uint64_t)v56, v45);
        v46 = (void *)objc_claimAutoreleasedReturnValue();

        v48 = objc_msgSend_runInference_databatch_inferredResult_semaphore_(*v58, v47, (uint64_t)v46, (uint64_t)v43, v57, v35);
        objc_msgSend_commit(v46, v49, v50, v51);
        v19 += v48;

        v34 = v46;
        v36 = v54;
        v35 = v55;
        a1 = v58;
      }

      objc_autoreleasePoolPop(v37);
    }
    while (!v42);
  }
  if (!v19)
    sub_19C09C77C(CFSTR("No data was provided for validation"), v27, v28, v29, v30, v31, v32, v33, v54);
  sub_19C0902A8(v57, v19, (unint64_t)a1[18]);
  v52 = (void *)objc_claimAutoreleasedReturnValue();

  return v52;
}

void sub_19C194F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_19C195024(uint64_t a1, void *a2)
{
  sub_19C194CD8((void **)a1, a2, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 112));
  return objc_claimAutoreleasedReturnValue();
}

uint64_t sub_19C195044(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_computeInference_(*a1, a2, (uint64_t)a2, a4);
  return objc_claimAutoreleasedReturnValue();
}

void sub_19C195064(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  double (*v47)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v48;
  _QWORD *v49;
  unsigned __int8 v50;

  v5 = a1[12];
  objc_msgSend_commandQueue((void *)a1[23], a2, a3, a4);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = dispatch_semaphore_create(1);
  v7 = (void *)MEMORY[0x1A1AD2100]();
  v50 = 0;
  v8 = (void *)(*(uint64_t (**)(void))(a1[5] + 16))();
  objc_msgSend_dataBatch_batchSize_network_(MLPDataBatch, v9, (uint64_t)v8, v5, *a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  objc_msgSend_commandBufferFromCommandQueue_(MEMORY[0x1E0CC6DE0], v11, (uint64_t)v44, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = MEMORY[0x1E0C809B0];
  v46 = 3221225472;
  v47 = sub_19C1953D0;
  v48 = &unk_1E3D25600;
  v49 = a1;
  v14 = (void *)MEMORY[0x1A1AD22D4](&v45);
  objc_msgSend_runTraining_databatch_iteration_lossCallback_semaphore_((void *)*a1, v15, (uint64_t)v13, (uint64_t)v10, 0, v14, v6);
  objc_msgSend_commit(v13, v16, v17, v18);

  v19 = 1;
  objc_autoreleasePoolPop(v7);
  v20 = v13;
  do
  {
    v21 = (void *)MEMORY[0x1A1AD2100]();
    v50 = 0;
    v25 = (void *)(*(uint64_t (**)(void))(a1[5] + 16))();
    v26 = v50;
    if (v50)
    {
      objc_msgSend_waitUntilCompleted(v20, v22, v23, v24);
    }
    else
    {
      objc_msgSend_dataBatch_batchSize_network_(MLPDataBatch, v22, (uint64_t)v25, v5, *a1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
      objc_msgSend_commandBufferFromCommandQueue_(MEMORY[0x1E0CC6DE0], v28, (uint64_t)v44, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      v45 = MEMORY[0x1E0C809B0];
      v46 = 3221225472;
      v47 = sub_19C1953D0;
      v48 = &unk_1E3D25600;
      v49 = a1;
      v31 = (void *)MEMORY[0x1A1AD22D4](&v45);
      objc_msgSend_runTraining_databatch_iteration_lossCallback_semaphore_((void *)*a1, v32, (uint64_t)v30, (uint64_t)v27, v19, v31, v6);
      objc_msgSend_commit(v30, v33, v34, v35);
      ++v19;

      v20 = v30;
    }

    objc_autoreleasePoolPop(v21);
  }
  while (!v26);
  if (!v19)
    sub_19C09C77C(CFSTR("No data was provided for training"), v36, v37, v38, v39, v40, v41, v42, v43);

}

void sub_19C19530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

double sub_19C1953D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  sub_19C195404(*(_QWORD *)(a1 + 32), CFSTR("Iteration: %tu done - loss = %.10f"), a3, a4, a5, a6, a7, a8, a2);
  return result;
}

void sub_19C195404(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  id v11;
  const char *v12;
  void *v13;

  v10 = a2;
  if (*(_QWORD *)(a1 + 56))
  {
    v11 = objc_alloc(MEMORY[0x1E0CB3940]);
    v13 = (void *)objc_msgSend_initWithFormat_arguments_(v11, v12, (uint64_t)v10, (uint64_t)&a9);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
}

void sub_19C195498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1954AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_19C1954BC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;

  v11 = a5;
  v12 = a6;
  v13 = MEMORY[0x1A1AD22D4](a2);
  v14 = (void *)a1[5];
  a1[5] = v13;

  a1[8] = a3;
  a1[9] = a4;
  v15 = MEMORY[0x1A1AD22D4](v11);
  v16 = (void *)a1[6];
  a1[6] = v15;

  v17 = MEMORY[0x1A1AD22D4](v12);
  v18 = (void *)a1[7];
  a1[7] = v17;

  if (a1[11])
  {
    v25 = 0;
    do
    {
      sub_19C195404((uint64_t)a1, CFSTR("Starting epoch: %d"), v19, v20, v21, v22, v23, v24, (uint64_t)v25);
      v26 = (void *)MEMORY[0x1A1AD2100]();
      sub_19C195064(a1, v27, v28, v29);
      objc_autoreleasePoolPop(v26);
      v30 = (void *)MEMORY[0x1A1AD2100]();
      v33 = sub_19C195604((uint64_t)a1, v25, v31, v32);
      objc_autoreleasePoolPop(v30);
      if (v33)
        break;
      ++v25;
    }
    while ((unint64_t)v25 < a1[11]);
  }
  v34 = a1[2];
  a1[2] = 0;

  return v34;
}

void sub_19C1955DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1955F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_19C195604(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t ModelContainer;
  const void *v21;
  uint64_t v22;
  _BOOL8 v24;
  char v26;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    sub_19C194CD8((void **)a1, *(void **)(a1 + 40), v9, *(_QWORD *)(a1 + 112));
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_exMRL_numberForKey_(v10, v11, (uint64_t)MLPModelTrainerOverallAccuracyKey[0], v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v10;
    v15 = (id *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_6;
  }
  else
  {
    v13 = 0;
    v15 = (id *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_6;
  }
  if (objc_msgSend_compare_(v13, v6, v14, v7) != 1)
  {
    ++*(_QWORD *)(a1 + 32);
    v26 = 0;
    v22 = *(_QWORD *)(a1 + 48);
    if (!v22)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_6:
  *(_QWORD *)(a1 + 32) = 0;
  objc_storeStrong(v15, v13);
  v19 = *(const void **)(a1 + 16);
  if (v19)
    CFRelease(v19);
  *(_QWORD *)(a1 + 16) = 0;
  ModelContainer = objc_msgSend_generateModelContainer(*(void **)a1, v16, v17, v18);
  v21 = *(const void **)(a1 + 16);
  if (v21)
    CFRelease(v21);
  *(_QWORD *)(a1 + 16) = ModelContainer;
  v26 = 0;
  v22 = *(_QWORD *)(a1 + 48);
  if (v22)
LABEL_13:
    (*(void (**)(uint64_t, const char *, void *, char *))(v22 + 16))(v22, a2, v8, &v26);
LABEL_14:
  v24 = *(_QWORD *)(a1 + 32) >= *(_QWORD *)(a1 + 80) || v26 != 0;

  return v24;
}

void sub_19C19576C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C195788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const void **sub_19C195798(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_19C1957CC(uint64_t a1, const void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  CFTypeRef v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  MLPDeviceHandler *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  __CFString *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  __CFString *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  void *v98;

  v8 = a3;
  *(_QWORD *)a1 = 0;
  if (a2)
    v9 = CFRetain(a2);
  else
    v9 = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v10 = (void *)objc_msgSend_mutableCopy(v8, v5, v6, v7);
  objc_msgSend_exMRL_stringForKey_(v10, v11, (uint64_t)MLPModelTrainerDataLayoutKey[0], v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = [MLPDeviceHandler alloc];
  v17 = objc_msgSend_initWithDataLayout_(v14, v15, (uint64_t)v13, v16);
  v18 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v17;

  v19 = v10;
  v98 = v19;
  objc_storeStrong((id *)(a1 + 176), v10);
  sub_19C195C7C(&v98, (uint64_t)MLPModelTrainerNumberOfEpochsKey[0], &unk_1E3D2E558);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 88) = objc_msgSend_unsignedIntegerValue(v20, v21, v22, v23);

  sub_19C195C7C(&v98, (uint64_t)MLPModelTrainerBatchSizeKey[0], &unk_1E3D2E570);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 96) = objc_msgSend_unsignedIntegerValue(v24, v25, v26, v27);

  v28 = MLPModelTrainerEvaluationBatchSizeKey[0];
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v29, *(_QWORD *)(a1 + 96), v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19C195C7C(&v98, (uint64_t)v28, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 112) = objc_msgSend_unsignedIntegerValue(v32, v33, v34, v35);

  sub_19C195C7C(&v98, (uint64_t)MLPModelTrainerLossBatchSizeKey[0], &unk_1E3D2E588);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 104) = objc_msgSend_unsignedIntegerValue(v36, v37, v38, v39);

  v40 = v98;
  objc_msgSend_objectForKeyedSubscript_(v98, v41, (uint64_t)MLPModelTrainerInputLengthKey[0], v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 120) = objc_msgSend_unsignedIntegerValue(v43, v44, v45, v46);

  objc_msgSend_objectForKeyedSubscript_(v40, v47, (uint64_t)MLPModelTrainerInputHeightKey[0], v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 128) = objc_msgSend_unsignedIntegerValue(v49, v50, v51, v52);

  objc_msgSend_objectForKeyedSubscript_(v40, v53, (uint64_t)MLPModelTrainerInputChannelsKey[0], v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 136) = objc_msgSend_unsignedIntegerValue(v55, v56, v57, v58);

  objc_msgSend_objectForKeyedSubscript_(v40, v59, (uint64_t)MLPModelTrainerNumberOfLabelsKey[0], v60);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 144) = objc_msgSend_unsignedIntegerValue(v61, v62, v63, v64);

  objc_msgSend_objectForKeyedSubscript_(v40, v65, (uint64_t)MLPModelTrainerVocabSizeKey[0], v66);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 152) = objc_msgSend_unsignedIntegerValue(v67, v68, v69, v70);

  objc_msgSend_objectForKeyedSubscript_(v40, v71, (uint64_t)MLPModelTrainerEmbeddingDimensionKey[0], v72);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 160) = objc_msgSend_unsignedIntegerValue(v73, v74, v75, v76);

  v77 = MLPModelTrainerNoImprovementWindowKey[0];
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v78, *(_QWORD *)(a1 + 88), v79);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19C195C7C(&v98, (uint64_t)v77, v80);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 80) = objc_msgSend_unsignedIntegerValue(v81, v82, v83, v84);

  objc_msgSend_objectForKeyedSubscript_(v19, v85, (uint64_t)off_1EE4193E0[0], v86);
  v87 = objc_claimAutoreleasedReturnValue();
  v88 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v87;

  if (!*(_QWORD *)(a1 + 8)
    && (!*(_QWORD *)(a1 + 120) || !*(_QWORD *)(a1 + 128) || !*(_QWORD *)(a1 + 136) || !*(_QWORD *)(a1 + 144))
    && (!*(_QWORD *)(a1 + 152) || !*(_QWORD *)(a1 + 144) || !*(_QWORD *)(a1 + 160)))
  {
    sub_19C09C77C(CFSTR("Invalid dimensions - cannot create network"), v89, v90, v91, v92, v93, v94, v95, v97);
  }
  sub_19C23B8A0(a1, v89, v90, v91);

  return a1;
}

void sub_19C195B60(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void sub_19C195B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  id *v11;
  const void **v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  sub_19C195798(v12);
  _Unwind_Resume(a1);
}

id sub_19C195C7C(void **a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  id v16;

  v5 = a3;
  objc_msgSend_objectForKeyedSubscript_(*a1, v6, a2, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v8;
  v13 = v8;
  if (v5)
  {
    v14 = objc_msgSend_unsignedIntegerValue(v8, v9, v10, v11);
    v13 = v12;
    if (!v14)
    {
      objc_msgSend_setObject_forKeyedSubscript_(*a1, v15, (uint64_t)v5, a2);
      v13 = v5;
    }
  }
  v16 = v13;

  return v16;
}

void sub_19C195D00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C195D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_19C195D28(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);

  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 16) = 0;

  return a1;
}

void sub_19C197488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,void *__p,uint64_t a30)
{
  void *v30;
  void *v31;
  uint64_t v32;
  void *v34;

  v34 = *(void **)(v32 - 144);
  if (v34)
  {
    *(_QWORD *)(v32 - 136) = v34;
    operator delete(v34);
  }

  _Unwind_Resume(a1);
}

void sub_19C1976D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  void *v30;

  if (!a29)
    JUMPOUT(0x19C197654);
  JUMPOUT(0x19C19764CLL);
}

void sub_19C1976F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;

  if (!a29)
    JUMPOUT(0x19C197654);
  JUMPOUT(0x19C19764CLL);
}

void sub_19C197708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (!a29)
    JUMPOUT(0x19C197654);
  JUMPOUT(0x19C19764CLL);
}

const void **sub_19C19771C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

unint64_t sub_19C1977E4(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  BOOL v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  int64_t v120;
  uint64_t *v121;
  int64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t *v161;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  v9 = a2 - 1;
  v161 = a2 - 3;
  v10 = a2 - 5;
  v11 = v7;
  while (2)
  {
    v7 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = ((char *)a2 - (char *)v11) >> 4;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*v9 > (unint64_t)v11[1])
        {
          v91 = *v11;
          *v11 = *v8;
          *v8 = v91;
          v92 = v11[1];
          v11[1] = *v9;
          *v9 = v92;
        }
        return result;
      case 3:
        v93 = v11 + 1;
        v94 = v11[1];
        v95 = v11 + 3;
        v96 = v11[3];
        v97 = *v9;
        if (v96 > v94)
        {
          v98 = *v11;
          if (v97 <= v96)
          {
            *v11 = v11[2];
            v11[1] = v96;
            v11[2] = v98;
            v11[3] = v94;
            if (*v9 <= v94)
              return result;
            v11[2] = *v8;
            *v8 = v98;
            v93 = v11 + 3;
          }
          else
          {
            *v11 = *v8;
            *v8 = v98;
          }
          v95 = a2 - 1;
          goto LABEL_178;
        }
        if (v97 > v96)
        {
          v150 = v11[2];
          v11[2] = *v8;
          *v8 = v150;
          v151 = v11[3];
          v11[3] = *v9;
          *v9 = v151;
          if (v11[3] > (unint64_t)v11[1])
          {
            v152 = *v11;
            *v11 = v11[2];
            v11[2] = v152;
LABEL_178:
            v160 = *v93;
            *v93 = *v95;
            *v95 = v160;
            return result;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_19C1986C4(v11, v11 + 2, v11 + 4, a2 - 2);
      case 5:
        result = (unint64_t)sub_19C1986C4(v11, v11 + 2, v11 + 4, v11 + 6);
        if (*v9 > (unint64_t)v11[7])
        {
          v99 = v11[6];
          v11[6] = *v8;
          *v8 = v99;
          v100 = v11[7];
          v11[7] = *v9;
          *v9 = v100;
          v101 = v11[7];
          v102 = v11[5];
          if (v101 > v102)
          {
            v103 = v11[6];
            v104 = v11[3];
            v105 = v11[4];
            v11[4] = v103;
            v11[5] = v101;
            v11[6] = v105;
            v11[7] = v102;
            if (v101 > v104)
            {
              v106 = v11[1];
              v107 = v11[2];
              v11[2] = v103;
              v11[3] = v101;
              v11[4] = v107;
              v11[5] = v104;
              if (v101 > v106)
              {
                v108 = *v11;
                *v11 = v103;
                v11[1] = v101;
                v11[2] = v108;
                v11[3] = v106;
              }
            }
          }
        }
        return result;
      default:
        if (v12 > 383)
        {
          if (!a3)
          {
            if (v11 != a2)
            {
              v120 = (unint64_t)(v13 - 2) >> 1;
              v121 = v11 + 2;
              v122 = v120;
              do
              {
                if (v120 >= v122)
                {
                  v124 = (2 * v122) | 1;
                  v125 = &v121[4 * v122];
                  if (2 * v122 + 2 < v13)
                  {
                    v126 = v125[1];
                    v127 = v125[3];
                    v125 += 2 * (v126 > v127);
                    if (v126 > v127)
                      v124 = 2 * v122 + 2;
                  }
                  v128 = &v11[2 * v122];
                  v129 = v128[1];
                  if (v125[1] <= v129)
                  {
                    v130 = *v128;
                    do
                    {
                      result = (unint64_t)v128;
                      v128 = v125;
                      *(_QWORD *)result = *v125;
                      *(_QWORD *)(result + 8) = v125[1];
                      if (v120 < v124)
                        break;
                      result = (2 * v124) | 1;
                      v125 = &v121[4 * v124];
                      v131 = 2 * v124 + 2;
                      if (v131 < v13)
                      {
                        v132 = v125[1];
                        v133 = v125[3];
                        v125 += 2 * (v132 > v133);
                        if (v132 > v133)
                          result = v131;
                      }
                      v124 = result;
                    }
                    while (v125[1] <= v129);
                    *v128 = v130;
                    v128[1] = v129;
                  }
                }
                v123 = v122-- <= 0;
              }
              while (!v123);
              v134 = (unint64_t)v12 >> 4;
              do
              {
                v135 = 0;
                v136 = *v11;
                v137 = v11[1];
                v138 = v11;
                do
                {
                  v139 = &v138[2 * v135 + 2];
                  v140 = (2 * v135) | 1;
                  v141 = 2 * v135 + 2;
                  if (v141 < v134)
                  {
                    v142 = v139[1];
                    v143 = v139[3];
                    v139 += 2 * (v142 > v143);
                    if (v142 > v143)
                      v140 = v141;
                  }
                  *v138 = *v139;
                  v138[1] = v139[1];
                  v138 = v139;
                  v135 = v140;
                }
                while (v140 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
                if (v139 == a2 - 2)
                {
                  *v139 = v136;
                  v139[1] = v137;
                }
                else
                {
                  *v139 = *(a2 - 2);
                  v139[1] = *(a2 - 1);
                  *(a2 - 2) = v136;
                  *(a2 - 1) = v137;
                  v144 = (char *)v139 - (char *)v11 + 16;
                  if (v144 >= 17)
                  {
                    v145 = (((unint64_t)v144 >> 4) - 2) >> 1;
                    v146 = &v11[2 * v145];
                    v147 = v139[1];
                    if (v146[1] > v147)
                    {
                      v148 = *v139;
                      do
                      {
                        v149 = v139;
                        v139 = v146;
                        *v149 = *v146;
                        v149[1] = v146[1];
                        if (!v145)
                          break;
                        v145 = (v145 - 1) >> 1;
                        v146 = &v11[2 * v145];
                      }
                      while (v146[1] > v147);
                      *v139 = v148;
                      v139[1] = v147;
                    }
                  }
                }
                a2 -= 2;
                v123 = v134-- <= 2;
              }
              while (!v123);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[2 * ((unint64_t)v13 >> 1)];
          v16 = *v9;
          if ((unint64_t)v12 < 0x801)
          {
            v22 = v11 + 1;
            v23 = v11[1];
            v24 = v15 + 1;
            v25 = v15[1];
            if (v23 > v25)
            {
              v26 = *v15;
              if (v16 <= v23)
              {
                *v15 = *v11;
                v15[1] = v23;
                *v11 = v26;
                v11[1] = v25;
                if (*v9 <= v25)
                  goto LABEL_33;
                *v11 = *v8;
                *v8 = v26;
                v24 = v11 + 1;
              }
              else
              {
                *v15 = *v8;
                *v8 = v26;
              }
              v22 = a2 - 1;
              goto LABEL_32;
            }
            if (v16 > v23)
            {
              v31 = *v11;
              *v11 = *v8;
              *v8 = v31;
              v32 = v11[1];
              v11[1] = *v9;
              *v9 = v32;
              if (v11[1] > (unint64_t)*v24)
              {
                v33 = *v15;
                *v15 = *v11;
                *v11 = v33;
LABEL_32:
                v47 = *v24;
                *v24 = *v22;
                *v22 = v47;
              }
            }
LABEL_33:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_34;
LABEL_60:
            v49 = *v11;
            v48 = v11[1];
            if (*(v11 - 1) > v48)
              goto LABEL_61;
            if (v48 <= *v9)
            {
              v82 = v11 + 2;
              do
              {
                v11 = v82;
                if (v82 >= a2)
                  break;
                v83 = v82[1];
                v82 += 2;
              }
              while (v48 <= v83);
            }
            else
            {
              v80 = v11;
              do
              {
                v11 = v80 + 2;
                v81 = v80[3];
                v80 += 2;
              }
              while (v48 <= v81);
            }
            v84 = a2;
            if (v11 < a2)
            {
              v85 = a2;
              do
              {
                v84 = v85 - 2;
                v86 = *(v85 - 1);
                v85 -= 2;
              }
              while (v48 > v86);
            }
            while (v11 < v84)
            {
              v87 = *v11;
              *v11 = *v84;
              *v84 = v87;
              v88 = v11[1];
              v11[1] = v84[1];
              v84[1] = v88;
              do
              {
                v89 = v11[3];
                v11 += 2;
              }
              while (v48 <= v89);
              do
              {
                v90 = *(v84 - 1);
                v84 -= 2;
              }
              while (v48 > v90);
            }
            if (v11 - 2 != v7)
            {
              *v7 = *(v11 - 2);
              v7[1] = *(v11 - 1);
            }
            a4 = 0;
            *(v11 - 2) = v49;
            *(v11 - 1) = v48;
            continue;
          }
          v17 = (unint64_t *)(v15 + 1);
          v18 = v15[1];
          v19 = v11 + 1;
          v20 = v11[1];
          if (v18 > v20)
          {
            v21 = *v11;
            if (v16 <= v18)
            {
              *v11 = *v15;
              v11[1] = v18;
              *v15 = v21;
              v15[1] = v20;
              if (*v9 <= v20)
                goto LABEL_23;
              *v15 = *v8;
              *v8 = v21;
              v19 = v15 + 1;
            }
            else
            {
              *v11 = *v8;
              *v8 = v21;
            }
            v30 = a2 - 1;
            goto LABEL_22;
          }
          if (v16 > v18)
          {
            v27 = *v15;
            *v15 = *v8;
            *v8 = v27;
            v28 = v15[1];
            v15[1] = *v9;
            *v9 = v28;
            if (v15[1] > (unint64_t)*v19)
            {
              v29 = *v11;
              *v11 = *v15;
              *v15 = v29;
              v30 = v15 + 1;
LABEL_22:
              v34 = *v19;
              *v19 = *v30;
              *v30 = v34;
            }
          }
LABEL_23:
          v35 = (unint64_t *)&v11[2 * v14];
          v36 = v35 - 1;
          v37 = *(v35 - 1);
          v38 = (uint64_t *)(v35 - 2);
          v39 = v11 + 3;
          v40 = v11[3];
          v41 = *v161;
          if (v37 > v40)
          {
            v42 = v11[2];
            if (v41 <= v37)
            {
              v11[2] = *v38;
              v11[3] = v37;
              *v38 = v42;
              *(v35 - 1) = v40;
              if (*v161 <= v40)
                goto LABEL_39;
              *v38 = *(a2 - 4);
              *(a2 - 4) = v42;
              v39 = (uint64_t *)(v35 - 1);
            }
            else
            {
              v11[2] = *(a2 - 4);
              *(a2 - 4) = v42;
            }
            v46 = a2 - 3;
            goto LABEL_38;
          }
          if (v41 > v37)
          {
            v43 = *v38;
            *v38 = *(a2 - 4);
            *(a2 - 4) = v43;
            v44 = *(v35 - 1);
            *(v35 - 1) = *(a2 - 3);
            *(a2 - 3) = v44;
            if (*(v35 - 1) > *v39)
            {
              v45 = v11[2];
              v11[2] = *v38;
              *v38 = v45;
              v46 = (uint64_t *)(v35 - 1);
LABEL_38:
              v50 = *v39;
              *v39 = *v46;
              *v46 = v50;
            }
          }
LABEL_39:
          v51 = v35[3];
          v52 = (uint64_t *)(v35 + 2);
          v54 = v11 + 5;
          v53 = v11[5];
          v55 = *v10;
          if (v51 > v53)
          {
            v56 = v11[4];
            if (v55 <= v51)
            {
              v11[4] = *v52;
              v11[5] = v51;
              *v52 = v56;
              v35[3] = v53;
              v51 = v53;
              if (*v10 <= v53)
                goto LABEL_49;
              *v52 = *(a2 - 6);
              *(a2 - 6) = v56;
              v54 = (uint64_t *)(v35 + 3);
            }
            else
            {
              v11[4] = *(a2 - 6);
              *(a2 - 6) = v56;
            }
            v60 = a2 - 5;
            goto LABEL_48;
          }
          if (v55 > v51)
          {
            v57 = *v52;
            *v52 = *(a2 - 6);
            *(a2 - 6) = v57;
            v58 = v35[3];
            v35[3] = *(a2 - 5);
            *(a2 - 5) = v58;
            v51 = v35[3];
            if (v51 > *v54)
            {
              v59 = v11[4];
              v11[4] = *v52;
              *v52 = v59;
              v60 = (uint64_t *)(v35 + 3);
LABEL_48:
              v61 = *v54;
              *v54 = *v60;
              *v60 = v61;
              v51 = v35[3];
            }
          }
LABEL_49:
          result = *v17;
          v62 = *v36;
          if (*v17 <= *v36)
          {
            v63 = *v15;
            if (v51 <= result)
              goto LABEL_59;
            v64 = *v52;
            *v15 = *v52;
            v15[1] = v51;
            *v52 = v63;
            v35[3] = result;
            if (v51 > v62)
            {
              v65 = *v38;
              *v38 = v64;
              *v15 = v65;
LABEL_58:
              *v36 = v51;
              *v17 = v62;
              v63 = *v15;
              result = v35[1];
              goto LABEL_59;
            }
            result = v51;
            v63 = v64;
          }
          else
          {
            v63 = *v38;
            if (v51 > result)
            {
              *v38 = *v52;
              *v52 = v63;
LABEL_57:
              v17 = v35 + 3;
              goto LABEL_58;
            }
            *v38 = *v15;
            *(v35 - 1) = result;
            *v15 = v63;
            v15[1] = v62;
            if (v51 > v62)
            {
              *v15 = *v52;
              *v52 = v63;
              v36 = (unint64_t *)(v15 + 1);
              goto LABEL_57;
            }
            result = v62;
          }
LABEL_59:
          v66 = *(_OWORD *)v11;
          *v11 = v63;
          v11[1] = result;
          *(_OWORD *)v15 = v66;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_60;
LABEL_34:
          v49 = *v11;
          v48 = v11[1];
LABEL_61:
          v67 = v11;
          do
          {
            v68 = v67;
            v67 += 2;
          }
          while (v68[3] > v48);
          v69 = a2;
          if (v68 == v11)
          {
            v72 = a2;
            while (v67 < v72)
            {
              v70 = v72 - 2;
              v73 = *(v72 - 1);
              v72 -= 2;
              if (v73 > v48)
                goto LABEL_69;
            }
            v70 = v72;
            v11 = v67;
          }
          else
          {
            do
            {
              v70 = v69 - 2;
              v71 = *(v69 - 1);
              v69 -= 2;
            }
            while (v71 <= v48);
LABEL_69:
            v11 = v67;
            if (v67 < v70)
            {
              v74 = v70;
              do
              {
                v75 = *v11;
                *v11 = *v74;
                *v74 = v75;
                v76 = v11[1];
                v11[1] = v74[1];
                v74[1] = v76;
                do
                {
                  v77 = v11[3];
                  v11 += 2;
                }
                while (v77 > v48);
                do
                {
                  v78 = *(v74 - 1);
                  v74 -= 2;
                }
                while (v78 <= v48);
              }
              while (v11 < v74);
            }
          }
          if (v11 - 2 != v7)
          {
            *v7 = *(v11 - 2);
            v7[1] = *(v11 - 1);
          }
          *(v11 - 2) = v49;
          *(v11 - 1) = v48;
          if (v67 < v70)
            goto LABEL_80;
          v79 = sub_19C198350(v7, v11 - 2);
          result = sub_19C198350(v11, a2);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_80:
            result = sub_19C1977E4(v7, v11 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v11 - 2;
          if (v79)
            return result;
          goto LABEL_2;
        }
        v109 = v11 + 2;
        v111 = v11 == a2 || v109 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v111)
          {
            v112 = 0;
            v113 = v11;
            do
            {
              v115 = v113[3];
              if (v115 > v113[1])
              {
                v116 = 0;
                v117 = *v109;
                do
                {
                  v118 = &v113[v116 / 8];
                  v119 = v113[v116 / 8 + 1];
                  v118[2] = v113[v116 / 8];
                  v118[3] = v119;
                  if (v112 == v116)
                  {
                    v114 = v11;
                    goto LABEL_126;
                  }
                  v116 -= 16;
                }
                while (v115 > *(v118 - 1));
                v114 = &v109[v116 / 8];
LABEL_126:
                *v114 = v117;
                v114[1] = v115;
              }
              v109 += 2;
              v112 -= 16;
              v113 += 2;
            }
            while (v109 != a2);
          }
        }
        else if (!v111)
        {
          v153 = v11 + 1;
          do
          {
            v154 = v7[3];
            v155 = v7[1];
            v7 = v109;
            if (v154 > v155)
            {
              v156 = *v109;
              v157 = v153;
              do
              {
                v158 = *v157;
                v157[1] = *(v157 - 1);
                v157[2] = v158;
                v159 = *(v157 - 2);
                v157 -= 2;
              }
              while (v154 > v159);
              v157[1] = v156;
              v157[2] = v154;
            }
            v109 = v7 + 2;
            v153 += 2;
          }
          while (v7 + 2 != a2);
        }
        return result;
    }
  }
}

BOOL sub_19C198350(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) > (unint64_t)a1[1])
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v8 = a1 + 1;
      v9 = a1[1];
      v10 = a1 + 3;
      v11 = a1[3];
      v12 = *(a2 - 1);
      if (v11 > v9)
      {
        v13 = *a1;
        if (v12 <= v11)
        {
          *a1 = a1[2];
          a1[1] = v11;
          a1[2] = v13;
          a1[3] = v9;
          if (*(a2 - 1) <= v9)
            return result;
          a1[2] = *(a2 - 2);
          *(a2 - 2) = v13;
          v8 = a1 + 3;
        }
        else
        {
          *a1 = *(a2 - 2);
          *(a2 - 2) = v13;
        }
        v10 = a2 - 1;
        goto LABEL_27;
      }
      if (v12 > v11)
      {
        v30 = a1[2];
        a1[2] = *(a2 - 2);
        *(a2 - 2) = v30;
        v31 = a1[3];
        a1[3] = *(a2 - 1);
        *(a2 - 1) = v31;
        if (a1[3] > (unint64_t)a1[1])
        {
          v32 = *a1;
          *a1 = a1[2];
          a1[2] = v32;
LABEL_27:
          v36 = *v8;
          *v8 = *v10;
          *v10 = v36;
          return result;
        }
      }
      return result;
    case 4:
      sub_19C1986C4(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19C1986C4(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) <= (unint64_t)a1[7])
        return 1;
      v20 = a1[6];
      a1[6] = *(a2 - 2);
      *(a2 - 2) = v20;
      v21 = a1[7];
      a1[7] = *(a2 - 1);
      *(a2 - 1) = v21;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = a1[6];
      v25 = a1[3];
      v26 = a1[4];
      a1[4] = v24;
      a1[5] = v22;
      a1[6] = v26;
      a1[7] = v23;
      if (v22 <= v25)
        return 1;
      v27 = a1[1];
      v28 = a1[2];
      a1[2] = v24;
      a1[3] = v22;
      a1[4] = v28;
      a1[5] = v25;
      if (v22 <= v27)
        return 1;
      v29 = *a1;
      *a1 = v24;
      a1[1] = v22;
      a1[2] = v29;
      a1[3] = v27;
      return 1;
    default:
      v14 = a1[1];
      v15 = (unint64_t *)(a1 + 3);
      v16 = a1[3];
      v17 = a1[5];
      if (v16 > v14)
      {
        v18 = *a1;
        if (v17 <= v16)
        {
          *a1 = a1[2];
          a1[1] = v16;
          a1[2] = v18;
          a1[3] = v14;
          if (v17 <= v14)
            goto LABEL_32;
          a1[2] = a1[4];
          a1[4] = v18;
          v19 = (unint64_t *)(a1 + 3);
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v18;
          v19 = (unint64_t *)(a1 + 1);
        }
        v15 = (unint64_t *)(a1 + 5);
        goto LABEL_31;
      }
      if (v17 > v16)
      {
        v33 = a1[2];
        v34 = a1[4];
        a1[2] = v34;
        a1[3] = v17;
        a1[4] = v33;
        a1[5] = v16;
        if (v17 > v14)
        {
          v35 = *a1;
          *a1 = v34;
          a1[2] = v35;
          v19 = (unint64_t *)(a1 + 1);
LABEL_31:
          *v19 = v17;
          *v15 = v14;
        }
      }
LABEL_32:
      v37 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v38 = 0;
      v39 = 0;
      v40 = a1 + 4;
      while (1)
      {
        v41 = v37[1];
        if (v41 > v40[1])
          break;
LABEL_41:
        v40 = v37;
        v38 += 16;
        v37 += 2;
        if (v37 == a2)
          return 1;
      }
      v42 = *v37;
      v43 = v38;
      do
      {
        v44 = (uint64_t *)((char *)a1 + v43);
        v45 = *(uint64_t *)((char *)a1 + v43 + 40);
        v44[6] = *(uint64_t *)((char *)a1 + v43 + 32);
        v44[7] = v45;
        if (v43 == -32)
        {
          *a1 = v42;
          a1[1] = v41;
          if (++v39 != 8)
            goto LABEL_41;
          return v37 + 2 == a2;
        }
        v43 -= 16;
      }
      while (v41 > v44[3]);
      v46 = (char *)a1 + v43;
      *((_QWORD *)v46 + 6) = v42;
      *((_QWORD *)v46 + 7) = v41;
      if (++v39 != 8)
        goto LABEL_41;
      return v37 + 2 == a2;
  }
}

uint64_t *sub_19C1986C4(uint64_t *result, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a2[1];
  v5 = result + 1;
  v6 = a3 + 1;
  v7 = a3[1];
  if (v4 <= result[1])
  {
    if (v7 > v4)
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      v7 = a2[1];
      a2[1] = a3[1];
      a3[1] = v7;
      if ((unint64_t)a2[1] > *v5)
      {
        v11 = *result;
        *result = *a2;
        *a2 = v11;
        v9 = result + 1;
        v12 = a2 + 1;
LABEL_10:
        v15 = *v9;
        *v9 = *v12;
        *v12 = v15;
        v7 = *v6;
      }
    }
  }
  else
  {
    v8 = *result;
    if (v7 > v4)
    {
      *result = *a3;
      *a3 = v8;
      v9 = result + 1;
LABEL_9:
      v12 = a3 + 1;
      goto LABEL_10;
    }
    *result = *a2;
    *a2 = v8;
    v13 = result[1];
    result[1] = a2[1];
    a2[1] = v13;
    v7 = *v6;
    if (*v6 > v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v9 = a2 + 1;
      goto LABEL_9;
    }
  }
  if (a4[1] > v7)
  {
    v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    v17 = a3[1];
    a3[1] = a4[1];
    a4[1] = v17;
    if (a3[1] > (unint64_t)a2[1])
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      if ((unint64_t)a2[1] > *v5)
      {
        v20 = *result;
        *result = *a2;
        *a2 = v20;
        v21 = result[1];
        result[1] = a2[1];
        a2[1] = v21;
      }
    }
  }
  return result;
}

void sub_19C198C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_19C199018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C19903C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1990BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C199170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C19918C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1991A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19945C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C199470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C199484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C199498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1994AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1994C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1994D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1994E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C1994F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1995C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C1995E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C199600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1996C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C1996DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1996F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1997BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C1997DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C1997F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1998C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C1998E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C199900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1999C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C1999DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1999F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C199B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_19C199B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C199C30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C199C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C199CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C199E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C199E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_19C199E60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C199E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C199E94(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t i;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t j;
  uint64_t v28;
  id v29;

  v29 = a2;
  objc_msgSend_data(*(void **)(a1 + 32), v3, v4, v5);
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v10 = objc_msgSend_contents(v6, v7, v8, v9);

  v11 = *(_QWORD *)(a1 + 40);
  v15 = objc_msgSend_rows(*(void **)(a1 + 32), v12, v13, v14);
  v19 = objc_msgSend_columns(*(void **)(a1 + 32), v16, v17, v18);
  NSLog(CFSTR("---------- %@ (%tu x %tu) ----------"), v11, v15, v19);
  for (i = 0; i < objc_msgSend_rows(*(void **)(a1 + 32), v20, v21, v22); ++i)
  {
    for (j = 0; j < objc_msgSend_columns(*(void **)(a1 + 32), v24, v25, v26); ++j)
    {
      v28 = objc_msgSend_columns(*(void **)(a1 + 32), v20, v21, v22);
      NSLog(CFSTR("%lf"), *(float *)(v10 + 4 * (j + i * v28)));
    }
  }

}

void sub_19C199F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C199F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_19C199FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_19C199FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_19C19A338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19A434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19A4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C19A7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C19A868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19A87C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19A890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19A8A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C19A8B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19A8CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19A8E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19A8FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C19A90C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19A924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_19C19A938(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;

  objc_msgSend_network(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deviceHandler(v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_vocabSize(*(void **)(a1 + 32), v10, v11, v12);
  v17 = objc_msgSend_embeddingDimension(*(void **)(a1 + 32), v14, v15, v16);
  LODWORD(v18) = 0;
  objc_msgSend_weightMatrixWithRows_columns_stdDev_initialValues_columnMajor_(v9, v19, v13, v17, 0, 0, v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_network(*(void **)(a1 + 32), v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_deviceHandler(v24, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_matrixToVector_(v28, v29, (uint64_t)v20, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  return v31;
}

void sub_19C19A9F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19AA20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C19AA30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19AF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_19C19B850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_19C19BA38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C19BA54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19BA6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19C094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_19C19C65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_19C19C7C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  int *v28;
  _DWORD *v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  int *v33;
  _DWORD *v34;
  unint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  _OWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  __int128 v47;
  _DWORD *v48;
  int *v49;
  unint64_t v50;
  int v51;

  objc_msgSend_weights(*(void **)(a1 + 32), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend_weights(*(void **)(a1 + 32), v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_data(v9, v10, v11, v12);
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v17 = objc_msgSend_contents(v13, v14, v15, v16);

    v18 = *(_QWORD *)(a1 + 40);
    if (v18)
    {
      v19 = *(_QWORD *)(a1 + 48);
      if (v19)
      {
        v21 = *(_QWORD *)(a1 + 56);
        v20 = *(_QWORD *)(a1 + 64);
        v22 = 4 * v19;
        if (v19 > 7)
        {
          if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
          {
            v25 = 0;
            v26 = (_OWORD *)(v21 + 16);
            v27 = (__int128 *)(v17 + 16);
            v28 = (int *)v17;
            v29 = *(_DWORD **)(a1 + 56);
            do
            {
              v30 = v27;
              v31 = v26;
              v32 = v19 & 0xFFFFFFFFFFFFFFF8;
              if ((unint64_t)(v21 + v22 * v25 - (v20 * v25 + v17)) >= 0x20)
              {
                do
                {
                  v37 = *v30;
                  *(v31 - 1) = *(v30 - 1);
                  *v31 = v37;
                  v31 += 2;
                  v30 += 2;
                  v32 -= 8;
                }
                while (v32);
              }
              else
              {
                v33 = v28;
                v34 = v29;
                v35 = v19;
                do
                {
                  v36 = *v33++;
                  *v34++ = v36;
                  --v35;
                }
                while (v35);
              }
              ++v25;
              v26 = (_OWORD *)((char *)v26 + v22);
              v27 = (__int128 *)((char *)v27 + v20);
              v29 = (_DWORD *)((char *)v29 + v22);
              v28 = (int *)((char *)v28 + v20);
            }
            while (v25 != v18);
          }
          else
          {
            v38 = 0;
            v39 = 0;
            v40 = (__int128 *)(v17 + 16);
            v41 = (_OWORD *)(v21 + 16);
            v42 = v17;
            do
            {
              if ((unint64_t)(v21 + v22 * v39 - (v20 * v39 + v17)) >= 0x20)
              {
                v44 = v19 & 0xFFFFFFFFFFFFFFF8;
                v45 = v41;
                v46 = v40;
                do
                {
                  v47 = *v46;
                  *(v45 - 1) = *(v46 - 1);
                  *v45 = v47;
                  v46 += 2;
                  v45 += 2;
                  v44 -= 8;
                }
                while (v44);
                v43 = v19 & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                v43 = 0;
              }
              v48 = (_DWORD *)(v21 + 4 * (v43 + v38));
              v49 = (int *)(v42 + 4 * v43);
              v50 = v19 - v43;
              do
              {
                v51 = *v49++;
                *v48++ = v51;
                --v50;
              }
              while (v50);
              ++v39;
              v40 = (__int128 *)((char *)v40 + v20);
              v41 = (_OWORD *)((char *)v41 + v22);
              v38 += v19;
              v42 += v20;
            }
            while (v39 != v18);
          }
        }
        else
        {
          v23 = (_DWORD *)(v17 + 12);
          v24 = (_DWORD *)(v21 + 12);
          do
          {
            *(v24 - 3) = *(v23 - 3);
            if (v19 != 1)
            {
              *(v24 - 2) = *(v23 - 2);
              if (v19 != 2)
              {
                *(v24 - 1) = *(v23 - 1);
                if (v19 != 3)
                {
                  *v24 = *v23;
                  if (v19 != 4)
                  {
                    v24[1] = v23[1];
                    if (v19 != 5)
                    {
                      v24[2] = v23[2];
                      if (v19 != 6)
                        v24[3] = v23[3];
                    }
                  }
                }
              }
            }
            v23 = (_DWORD *)((char *)v23 + v20);
            v24 = (_DWORD *)((char *)v24 + v22);
            --v18;
          }
          while (v18);
        }
      }
    }
  }
}

void sub_19C19CA0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19CA20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C19CD34(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_19C19CD34(a1, *a2);
    sub_19C19CD34(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void sub_19C19CD84(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[3 * a2];
      v12 = 24 * a2;
      v13 = v4 + 1;
      do
      {
        *v13 = 0;
        v13[1] = 0;
        *(v13 - 1) = v13;
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[24 * v6];
  v15 = &v10[24 * v9];
  v16 = 24 * a2;
  v17 = &v14[24 * a2];
  v18 = v14 + 8;
  do
  {
    *v18 = 0;
    v18[1] = 0;
    *(v18 - 1) = v18;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v19)
      return;
LABEL_31:
    operator delete(v19);
    return;
  }
  v21 = 0;
  do
  {
    while (1)
    {
      v22 = &v14[v21];
      *((_QWORD *)v22 - 3) = *(_QWORD *)&v19[v21 - 24];
      v23 = &v19[v21 - 16];
      v24 = *(_QWORD *)v23;
      *(_QWORD *)&v14[v21 - 16] = *(_QWORD *)v23;
      v25 = (uint64_t)&v14[v21 - 16];
      v26 = *(_QWORD *)&v19[v21 - 8];
      *((_QWORD *)v22 - 1) = v26;
      if (!v26)
        break;
      *(_QWORD *)(v24 + 16) = v25;
      *(_QWORD *)&v19[v21 - 24] = v23;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)&v19[v21 - 8] = 0;
      v21 -= 24;
      if (&v19[v21] == v20)
        goto LABEL_25;
    }
    *((_QWORD *)v22 - 3) = v25;
    v21 -= 24;
  }
  while (&v19[v21] != v20);
LABEL_25:
  v27 = (char *)*a1;
  v19 = (char *)a1[1];
  *a1 = &v14[v21];
  a1[1] = v17;
  a1[2] = v15;
  if (v19 != v27)
  {
    do
    {
      v28 = v19 - 24;
      sub_19C19CD34((uint64_t)(v19 - 24), *((_QWORD **)v19 - 2));
      v19 = v28;
    }
    while (v28 != v27);
    v19 = v27;
  }
  if (v19)
    goto LABEL_31;
}

unint64_t sub_19C19CF84(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32);
  if (v1 == 2)
    return (unint64_t)(*(_QWORD *)a1 + 2 * *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 8)) / *(_QWORD *)(a1 + 16)
         + 1;
  if (v1)
    return (unint64_t)(double)(unint64_t)(*(_QWORD *)a1 / *(_QWORD *)(a1 + 16));
  return vcvtps_u32_f32((float)(unint64_t)(*(_QWORD *)a1 - *(_QWORD *)(a1 + 8) + 1) / (float)*(unint64_t *)(a1 + 16));
}

unint64_t sub_19C19CFEC(uint64_t a1)
{
  unint64_t result;

  result = *(unsigned int *)(a1 + 32);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 2)
      return *(_QWORD *)(a1 + 24);
    else
      return (*(_QWORD *)(a1 + 8)
            - *(_QWORD *)a1
            + ((unint64_t)(double)(unint64_t)(*(_QWORD *)a1 / *(_QWORD *)(a1 + 16)) - 1)
            * *(_QWORD *)(a1 + 16)
            + 1) >> 1;
  }
  return result;
}

uint64_t sub_19C19D034(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  char **v35;
  BOOL v36;
  char **v37;
  char *v38[2];
  void *v39[2];
  char v40;
  void *__p[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  sub_19C19D504((uint64_t)v39, "filter", a4);
  sub_19C19D504((uint64_t)__p, "stride", a5);
  v38[0] = 0;
  v38[1] = 0;
  v37 = v38;
  sub_19C19D614((uint64_t **)&v37, (uint64_t *)v38, (const void **)v39, (uint64_t)v39);
  sub_19C19D614((uint64_t **)&v37, (uint64_t *)v38, (const void **)__p, (uint64_t)__p);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v14 = (uint64_t *)v37;
  if (v37 != v38)
  {
    do
    {
      sub_19C19D614((uint64_t **)a1, (uint64_t *)(a1 + 8), (const void **)v14 + 4, (uint64_t)(v14 + 4));
      v34 = (char *)v14[1];
      if (v34)
      {
        do
        {
          v35 = (char **)v34;
          v34 = *(char **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (char **)v14[2];
          v36 = *v35 == (char *)v14;
          v14 = (uint64_t *)v35;
        }
        while (!v36);
      }
      v14 = (uint64_t *)v35;
    }
    while (v35 != v38);
  }
  sub_19C098FBC((uint64_t)&v37, v38[0]);
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if ((v40 & 0x80000000) == 0)
      goto LABEL_4;
LABEL_19:
    operator delete(v39[0]);
    goto LABEL_4;
  }
  if (v40 < 0)
    goto LABEL_19;
LABEL_4:
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a3[2];
  *(_QWORD *)(a1 + 112) = a2;
  v15 = *a3;
  LODWORD(v37) = 0;
  v16 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v16 == -1)
    goto LABEL_20;
  v39[0] = &v37;
  v17 = ((uint64_t (*)(void **, uint64_t))off_1E3D256A8[v16])(v39, a4);
  LODWORD(v37) = 0;
  v18 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v18 == -1)
    goto LABEL_20;
  v19 = v17;
  v39[0] = &v37;
  v20 = ((uint64_t (*)(void **, uint64_t))off_1E3D256A8[v18])(v39, a5);
  LODWORD(v37) = 0;
  v21 = *(unsigned int *)(a7 + 16);
  if ((_DWORD)v21 == -1)
    goto LABEL_20;
  v22 = v20;
  v39[0] = &v37;
  v23 = ((uint64_t (*)(void **, uint64_t))off_1E3D256A8[v21])(v39, a7);
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v19;
  *(_QWORD *)(a1 + 40) = v22;
  *(_QWORD *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = a6;
  v24 = a3[1];
  LODWORD(v37) = 1;
  v25 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v25 == -1)
    goto LABEL_20;
  v39[0] = &v37;
  v26 = ((uint64_t (*)(void **, uint64_t))off_1E3D256A8[v25])(v39, a4);
  LODWORD(v37) = 1;
  v27 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v27 == -1
    || (v28 = v26,
        v39[0] = &v37,
        v29 = ((uint64_t (*)(void **, uint64_t))off_1E3D256A8[v27])(v39, a5),
        LODWORD(v37) = 1,
        v30 = *(unsigned int *)(a7 + 16),
        (_DWORD)v30 == -1))
  {
LABEL_20:
    sub_19C18869C();
  }
  v31 = v29;
  v39[0] = &v37;
  v32 = ((uint64_t (*)(void **, uint64_t))off_1E3D256A8[v30])(v39, a7);
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v28;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  *(_DWORD *)(a1 + 96) = a6;
  return a1;
}

void sub_19C19D328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C19D39C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a2 + 320);
  v3 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)&v4 = (int)v2;
  *((_QWORD *)&v4 + 1) = SHIDWORD(v2);
  v15 = v4;
  v5 = *(int *)(a2 + 136);
  v6 = *(int *)(a2 + 256);
  v16 = 1;
  *(_QWORD *)&v4 = (int)v3;
  *((_QWORD *)&v4 + 1) = SHIDWORD(v3);
  v13 = v4;
  v14 = 1;
  v7 = *(_DWORD *)(a2 + 336);
  v8 = *(int *)(a2 + 344);
  v11[0] = *(int *)(a2 + 340);
  v11[1] = v8;
  v12 = 1;
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)&v4 = (int)v9;
  *((_QWORD *)&v4 + 1) = SHIDWORD(v9);
  v17 = v4;
  v18 = v5;
  return sub_19C19D034(a1, v6, (uint64_t *)&v17, (uint64_t)&v15, (uint64_t)&v13, v7, (uint64_t)v11);
}

uint64_t sub_19C19D418(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  const void ***v5;
  const void **v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const void **v11;
  const void ***v12;
  BOOL v13;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v5 = (const void ***)(a2 + 8);
  v6 = *(const void ***)a2;
  if (*(_QWORD *)a2 != a2 + 8)
  {
    do
    {
      sub_19C19D614((uint64_t **)a1, v4, v6 + 4, (uint64_t)(v6 + 4));
      v11 = (const void **)v6[1];
      if (v11)
      {
        do
        {
          v12 = (const void ***)v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void ***)v6[2];
          v13 = *v12 == v6;
          v6 = (const void **)v12;
        }
        while (!v13);
      }
      v6 = (const void **)v12;
    }
    while (v12 != v5);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 40);
  v8 = *(_OWORD *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

void sub_19C19D4EC(void *a1)
{
  uint64_t v1;

  sub_19C098FBC(v1, *(char **)(v1 + 8));
  sub_19C07AF7C(a1);
}

uint64_t sub_19C19D504(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, __s, v7);
  *((_BYTE *)v8 + v7) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  v11 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char *))off_1E3D25698[v11])(&v13);
    *(_DWORD *)(a1 + 40) = v11;
  }
  return a1;
}

void sub_19C19D5FC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_19C19D608(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

char *sub_19C19D614(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t *v16;
  char v17;

  v6 = sub_19C098BC4(a1, a2, &v16, &v15, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (char *)operator new(0x50uLL);
    v9 = v7 + 32;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_19C07C6E8(v9, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)a4;
      *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    }
    v7[56] = 0;
    *((_DWORD *)v7 + 18) = -1;
    v10 = *(unsigned int *)(a4 + 40);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *))off_1E3D25698[v10])(&v17);
      *((_DWORD *)v7 + 18) = v10;
    }
    v11 = v16;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v11;
    *v8 = (uint64_t)v7;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v7;
    if (v12)
    {
      *a1 = v12;
      v13 = (uint64_t *)*v8;
    }
    sub_19C07CC40(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19C19D720(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C19D738(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;

  *(_QWORD *)a1 = &unk_1E3D242D0;
  *(_QWORD *)(a1 + 8) = a2;
  v11 = *a4;
  v12 = a4[1];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v12;
  v13 = *a6;
  v14 = a6[1];
  v15 = *((_QWORD *)a6 + 4);
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = a5;
  *(_QWORD *)(a1 + 104) = a7;
  *(_QWORD *)(a1 + 112) = a8;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v17 = *(const void **)a9;
  v16 = *(_QWORD *)(a9 + 8);
  v18 = v16 - *(_QWORD *)a9;
  if (v16 != *(_QWORD *)a9)
  {
    if (v18 < 0)
      sub_19C07DA0C();
    v19 = (char *)operator new(v16 - *(_QWORD *)a9);
    *(_QWORD *)(a1 + 120) = v19;
    *(_QWORD *)(a1 + 128) = v19;
    v20 = &v19[4 * (v18 >> 2)];
    *(_QWORD *)(a1 + 136) = v20;
    memcpy(v19, v17, v18);
    *(_QWORD *)(a1 + 128) = v20;
  }
  *(_DWORD *)(a1 + 144) = *a3;
  return a1;
}

void sub_19C19D7FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 128) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C19D818(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const float *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  float *v13;
  float *v14;
  unint64_t v15;
  float v16;
  float32x4_t *v17;
  float32x4_t *v18;
  unint64_t v19;
  float32x4_t v20;
  void *v21;
  void *v22;
  int v23;
  _OWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];

  if (*(_QWORD *)(a1 + 48) * *(_QWORD *)(a1 + 40))
  {
    v2 = 0;
    v3 = 0;
    while (1)
    {
      v4 = **(_QWORD **)(a1 + 96);
      v5 = (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32));
      v6 = (int)v5;
      v7 = (const float *)(v4 + 4 * (int)v5 * v3);
      v8 = **(_QWORD **)(a1 + 104);
      v9 = *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 72);
      v10 = (float *)(v8 + 4 * v9 * v3);
      switch(*(_DWORD *)(a1 + 144))
      {
        case 4:
          if (!(v5 << 32))
            goto LABEL_4;
          if ((unint64_t)(int)v5 <= 1)
            v11 = 1;
          else
            v11 = (int)v5;
          if (v11 >= 0xC && v8 + v9 * 4 * v3 - (v4 + (int)v5 * 4 * v3) >= 0x20)
          {
            v12 = v11 & 0xFFFFFFFFFFFFFFF8;
            v17 = (float32x4_t *)(v4 + v6 * v2 + 16);
            v18 = (float32x4_t *)(v8 + v9 * v2 + 16);
            v19 = v11 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v20 = vsqrtq_f32(*v17);
              v18[-1] = vsqrtq_f32(v17[-1]);
              *v18 = v20;
              v17 += 2;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v11 == v12)
              goto LABEL_4;
          }
          else
          {
            v12 = 0;
          }
          v13 = (float *)(v8 + 4 * v12 + v9 * v2);
          v14 = (float *)(v4 + v6 * v2 + 4 * v12);
          v15 = v11 - v12;
          do
          {
            v16 = *v14++;
            *v13++ = sqrtf(v16);
            --v15;
          }
          while (v15);
LABEL_4:
          ++v3;
          v2 += 4;
          if (*(_QWORD *)(a1 + 48) * *(_QWORD *)(a1 + 40) <= v3)
            goto LABEL_24;
          break;
        case 6:
          vDSP_sve(v7, 1, v10, (int)v5);
          goto LABEL_4;
        case 7:
          vDSP_meanv(v7, 1, v10, (int)v5);
          goto LABEL_4;
        case 8:
          vDSP_measqv(v7, 1, v10, (int)v5);
          goto LABEL_4;
        case 9:
          vDSP_rmsqv(v7, 1, v10, (int)v5);
          goto LABEL_4;
        case 0xA:
          vDSP_svesq(v7, 1, v10, (int)v5);
          goto LABEL_4;
        default:
          goto LABEL_4;
      }
    }
  }
LABEL_24:
  v26[0] = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32);
  v26[1] = 0x3F80000000010020;
  v26[2] = 0;
  v25[1] = 0x3F80000000010020;
  v25[2] = 0;
  v25[0] = v26[0];
  memset(v24, 0, sizeof(v24));
  switch(*(_QWORD *)(a1 + 112))
  {
    case 1:
      LODWORD(v24[0]) = 3;
      goto LABEL_30;
    case 2:
      LODWORD(v24[0]) = 4;
      goto LABEL_30;
    case 4:
      LODWORD(v24[0]) = 11;
      goto LABEL_30;
    case 5:
      LODWORD(v24[0]) = 1;
      goto LABEL_30;
    case 8:
    case 0xALL:
    case 0xCLL:
      return;
    case 9:
      LODWORD(v24[0]) = 8;
      *(_QWORD *)((char *)v24 + 4) = **(_QWORD **)(a1 + 120);
      goto LABEL_30;
    default:
LABEL_30:
      v21 = (void *)MEMORY[0x1A1AD1464](v26, v25, v24, 0);
      v22 = v21;
      if (v21)
      {
        v23 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32);
        BNNSFilterApplyBatch(v21, v23 * *(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 48) / (unint64_t)v23, **(const void ***)(a1 + 104), v23, **(void ***)(a1 + 104), v23);
      }
      BNNSFilterDestroy(v22);
      return;
  }
}

_QWORD *sub_19C19DB00(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E3D242D0;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C19DB40(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E3D242D0;
  v2 = (void *)__p[15];
  if (v2)
  {
    __p[16] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

void sub_19C19DCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_19C19DD6C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *__src)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int v17;
  const void *v18;
  size_t v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  int v28;
  const void *v29;
  size_t v30;
  _BOOL4 v31;
  int v32;
  _BOOL4 v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char **v39;
  char *v40[2];
  void *__p[2];
  uint64_t v42;
  void **p_s2;
  void *__s2;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v42 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18E344(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D24748;
  sub_19C19D39C(a1 + 1016, (uint64_t)__src);
  *(_DWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1200) = 0;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1208) = __src[7];
  v7 = *(_QWORD *)(a1 + 1040);
  v8 = *(_QWORD *)(a1 + 1080);
  v9 = *(_QWORD *)(a1 + 1120);
  LODWORD(__s2) = 1;
  v45 = v7;
  v46 = v8;
  v48 = 0;
  v49 = 0;
  v47 = v9;
  sub_19C07C964(a1 + 16, (int *)&__s2, &v50);
  v10 = sub_19C19CF84(a1 + 1040);
  v11 = sub_19C19CF84(a1 + 1080);
  v12 = *(_QWORD *)(a1 + 1128);
  LODWORD(__s2) = 9;
  v45 = v10;
  v46 = v11;
  v48 = 0;
  v49 = 0;
  v47 = v12;
  sub_19C07C964(a1 + 40, (int *)&__s2, &v50);
  v13 = __src[56];
  HIBYTE(v46) = 6;
  strcpy((char *)&__s2, "weight");
  v47 = v13;
  v14 = __src[72];
  v51 = 4;
  strcpy((char *)&v48, "bias");
  v52 = v14;
  v40[0] = 0;
  v40[1] = 0;
  v39 = v40;
  sub_19C188890((uint64_t **)&v39, (uint64_t *)v40, (const void **)&__s2, (uint64_t)&__s2);
  sub_19C188890((uint64_t **)&v39, (uint64_t *)v40, (const void **)&v48, (uint64_t)&v48);
  if (v51 < 0)
  {
    operator delete(v48);
    if ((SHIBYTE(v46) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_44:
    operator delete(__s2);
    goto LABEL_8;
  }
  if (SHIBYTE(v46) < 0)
    goto LABEL_44;
LABEL_8:
  HIBYTE(v46) = 4;
  strcpy((char *)&__s2, "bias");
  v15 = v40[0];
  do
  {
    v16 = v15[55];
    v17 = (char)v16;
    if ((v16 & 0x80u) != 0)
      v16 = *((_QWORD *)v15 + 5);
    if (v17 >= 0)
      v18 = v15 + 32;
    else
      v18 = (const void *)*((_QWORD *)v15 + 4);
    if (v16 >= 4)
      v19 = 4;
    else
      v19 = v16;
    v20 = v16 < 4;
    v21 = memcmp(v18, &__s2, v19);
    v22 = v21 < 0;
    if (!v21)
      v22 = v20;
    if (v22)
      v23 = v15 + 8;
    else
      v23 = v15;
    v15 = *(char **)v23;
  }
  while (*(_QWORD *)v23);
  p_s2 = &__s2;
  v24 = sub_19C19E844((uint64_t **)&v39, (const void **)&__s2, (uint64_t)&unk_19C27ADD0, (__int128 **)&p_s2)[7];
  v25 = *(_QWORD *)(a1 + 1128);
  *(_DWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1192) = v25;
  *(_QWORD *)(a1 + 1200) = v24;
  if (SHIBYTE(v46) < 0)
    operator delete(__s2);
  HIBYTE(v46) = 6;
  strcpy((char *)&__s2, "weight");
  v26 = v40[0];
  do
  {
    v27 = v26[55];
    v28 = (char)v27;
    if ((v27 & 0x80u) != 0)
      v27 = *((_QWORD *)v26 + 5);
    if (v28 >= 0)
      v29 = v26 + 32;
    else
      v29 = (const void *)*((_QWORD *)v26 + 4);
    if (v27 >= 6)
      v30 = 6;
    else
      v30 = v27;
    v31 = v27 < 6;
    v32 = memcmp(v29, &__s2, v30);
    v33 = v32 < 0;
    if (!v32)
      v33 = v31;
    if (v33)
      v34 = v26 + 8;
    else
      v34 = v26;
    v26 = *(char **)v34;
  }
  while (*(_QWORD *)v34);
  p_s2 = &__s2;
  v35 = sub_19C19E844((uint64_t **)&v39, (const void **)&__s2, (uint64_t)&unk_19C27ADD0, (__int128 **)&p_s2)[7];
  v36 = sub_19C188528(a1 + 1016, 0);
  v37 = sub_19C188528(a1 + 1016, 1);
  *(_DWORD *)(a1 + 1136) = 1;
  *(_QWORD *)(a1 + 1144) = v36;
  *(_QWORD *)(a1 + 1152) = v37;
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a1 + 1120);
  *(_QWORD *)(a1 + 1176) = v35;
  if (SHIBYTE(v46) < 0)
    operator delete(__s2);
  sub_19C098FBC((uint64_t)&v39, v40[0]);
  return a1;
}

void sub_19C19E13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  if (a23 < 0)
    operator delete(__p);
  sub_19C098FBC((uint64_t)&a10, a11);
  sub_19C098FBC(v24, *(char **)(v23 + 1024));
  sub_19C18E518(v23);
  _Unwind_Resume(a1);
}

void sub_19C19E184()
{
  JUMPOUT(0x19C19E168);
}

void sub_19C19E18C()
{
  JUMPOUT(0x19C19E168);
}

void sub_19C19E194()
{
  JUMPOUT(0x19C19E168);
}

void sub_19C19E19C()
{
  JUMPOUT(0x19C19E168);
}

void sub_19C19E1A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C18E518(v1);
  _Unwind_Resume(a1);
}

void sub_19C19E1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C19E210(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 192))(a2, a1);
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 192))(a2, a1);
}

uint64_t sub_19C19E2D4(uint64_t a1, int a2, int a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)(a1 + 280) = a3;
  v4 = *(uint64_t **)(a1 + 160);
  v5 = *(uint64_t **)(a1 + 168);
  if (v4 != v5)
  {
    v6 = (a3 * a2);
    do
    {
      v7 = *v4++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v6);
    }
    while (v4 != v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_19C19E334(uint64_t **a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t result;
  char *v14;
  uint64_t **v15;
  char *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;

  v4 = a1[2];
  v5 = v4[5];
  v6 = v4[6];
  v7 = (uint64_t)(a1 + 127);
  v8 = sub_19C19CFEC((uint64_t)(a1 + 130));
  v9 = sub_19C188528(v7, 0);
  sub_19C188528(v7, 1);
  v10 = sub_19C18871C(v7, 0);
  sub_19C18871C(v7, 1);
  v11 = sub_19C19CFEC((uint64_t)(a1 + 135));
  sub_19C188528(v7, 0);
  v33 = sub_19C188528(v7, 1);
  sub_19C18871C(v7, 0);
  v32 = sub_19C18871C(v7, 1);
  v12 = a1[141];
  v31 = ((uint64_t (*)(uint64_t **))(*a1)[28])(a1);
  result = ((uint64_t (*)(uint64_t **, uint64_t))(*a1)[27])(a1, 1);
  v15 = a1 + 6;
  v14 = (char *)a1[6];
  v34 = v12;
  if (v14)
  {
    do
    {
      while (1)
      {
        v16 = v14;
        v17 = *((_DWORD *)v14 + 8);
        if (v17 <= a2)
          break;
        v14 = *(char **)v16;
        v15 = (uint64_t **)v16;
        if (!*(_QWORD *)v16)
          goto LABEL_9;
      }
      if (v17 >= a2)
      {
        v27 = v32;
        v26 = v33;
        v28 = v31;
        goto LABEL_12;
      }
      v14 = (char *)*((_QWORD *)v16 + 1);
    }
    while (v14);
    v15 = (uint64_t **)(v16 + 8);
  }
  else
  {
    v16 = (char *)(a1 + 6);
  }
LABEL_9:
  v29 = result;
  v30 = v11;
  v18 = v10;
  v19 = v9;
  v20 = v8;
  v21 = v6;
  v22 = v5;
  v23 = v16;
  v16 = (char *)operator new(0x50uLL);
  *((_DWORD *)v16 + 8) = a2;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *((_QWORD *)v16 + 9) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v23;
  *v15 = (uint64_t *)v16;
  v24 = (uint64_t *)*a1[5];
  v25 = (uint64_t *)v16;
  if (v24)
  {
    a1[5] = v24;
    v25 = *v15;
  }
  sub_19C07CC40(a1[6], v25);
  a1[7] = (uint64_t *)((char *)a1[7] + 1);
  v5 = v22;
  v6 = v21;
  v8 = v20;
  v9 = v19;
  v10 = v18;
  v11 = v30;
  v28 = v31;
  v27 = v32;
  v26 = v33;
  result = v29;
LABEL_12:
  *((_QWORD *)v16 + 5) = (v5 + 2 * v8 - v9) / v10 + 1;
  *((_QWORD *)v16 + 6) = (v6 + 2 * v11 - v26) / v27 + 1;
  *((_QWORD *)v16 + 7) = v34;
  *((_QWORD *)v16 + 8) = v28;
  *((_QWORD *)v16 + 9) = (int)result;
  return result;
}

BOOL sub_19C19E558(uint64_t a1, _QWORD *a2, int a3)
{
  char *v7;
  uint64_t **v8;
  uint64_t **v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;

  if ((a3 - 8) < 0xFFFFFFF9)
    return 0;
  v8 = (uint64_t **)(a1 + 24);
  v7 = *(char **)(a1 + 24);
  v9 = (uint64_t **)(a1 + 24);
  v10 = (char *)(a1 + 24);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v10 = v7;
        v11 = *((_DWORD *)v7 + 8);
        if (v11 <= a3)
          break;
        v7 = *(char **)v10;
        v9 = (uint64_t **)v10;
        if (!*(_QWORD *)v10)
          goto LABEL_10;
      }
      if (v11 >= a3)
        break;
      v7 = (char *)*((_QWORD *)v10 + 1);
      if (!v7)
      {
        v9 = (uint64_t **)(v10 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v12 = v10;
    v10 = (char *)operator new(0x50uLL);
    *((_DWORD *)v10 + 8) = a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((_QWORD *)v10 + 9) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v12;
    *v9 = (uint64_t *)v10;
    v13 = **(_QWORD **)(a1 + 16);
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *(_QWORD *)(a1 + 16) = v13;
      v14 = *v9;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v14);
    ++*(_QWORD *)(a1 + 32);
  }
  if (*((_QWORD *)v10 + 5) != *a2)
    return 1;
  v15 = *v8;
  v16 = v8;
  v17 = (char *)v8;
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        v17 = (char *)v15;
        v18 = *((_DWORD *)v15 + 8);
        if (v18 <= a3)
          break;
        v15 = *(uint64_t **)v17;
        v16 = (uint64_t **)v17;
        if (!*(_QWORD *)v17)
          goto LABEL_21;
      }
      if (v18 >= a3)
        break;
      v15 = (uint64_t *)*((_QWORD *)v17 + 1);
      if (!v15)
      {
        v16 = (uint64_t **)(v17 + 8);
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    v19 = v17;
    v17 = (char *)operator new(0x50uLL);
    *((_DWORD *)v17 + 8) = a3;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((_QWORD *)v17 + 9) = 0;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v19;
    *v16 = (uint64_t *)v17;
    v20 = **(_QWORD **)(a1 + 16);
    v21 = (uint64_t *)v17;
    if (v20)
    {
      *(_QWORD *)(a1 + 16) = v20;
      v21 = *v16;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v21);
    ++*(_QWORD *)(a1 + 32);
  }
  if (*((_QWORD *)v17 + 6) != a2[1])
    return 1;
  v22 = *v8;
  v23 = (char *)v8;
  if (*v8)
  {
    while (1)
    {
      while (1)
      {
        v23 = (char *)v22;
        v24 = *((_DWORD *)v22 + 8);
        if (v24 <= a3)
          break;
        v22 = *(uint64_t **)v23;
        v8 = (uint64_t **)v23;
        if (!*(_QWORD *)v23)
          goto LABEL_32;
      }
      if (v24 >= a3)
        break;
      v22 = (uint64_t *)*((_QWORD *)v23 + 1);
      if (!v22)
      {
        v8 = (uint64_t **)(v23 + 8);
        goto LABEL_32;
      }
    }
  }
  else
  {
LABEL_32:
    v25 = v23;
    v23 = (char *)operator new(0x50uLL);
    *((_DWORD *)v23 + 8) = a3;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *((_QWORD *)v23 + 9) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v25;
    *v8 = (uint64_t *)v23;
    v26 = **(_QWORD **)(a1 + 16);
    v27 = (uint64_t *)v23;
    if (v26)
    {
      *(_QWORD *)(a1 + 16) = v26;
      v27 = *v8;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 24), v27);
    ++*(_QWORD *)(a1 + 32);
  }
  return *((_QWORD *)v23 + 7) != a2[2];
}

uint64_t sub_19C19E7C8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E3D24748;
  sub_19C098FBC(a1 + 1016, *(char **)(a1 + 1024));
  return sub_19C18E518(a1);
}

void sub_19C19E804(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_1E3D24748;
  sub_19C098FBC(a1 + 1016, *(char **)(a1 + 1024));
  v2 = (void *)sub_19C18E518(a1);
  operator delete(v2);
}

uint64_t **sub_19C19E844(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x40uLL);
    v24 = v23 + 4;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19C07C6E8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    v23[7] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_19C07CC40(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19C19E9CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C19E9E0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 && *(_QWORD *)(a1 + 16) && *(int *)a1 >= 1)
    operator delete[](v2);
  return a1;
}

uint64_t sub_19C19EA20(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 8) = operator new[]();
  return a1;
}

uint64_t sub_19C19EA64(uint64_t result, uint64_t a2)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

_QWORD *sub_19C19EA70(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  _QWORD *result;

  result = sub_19C2384F8(a1, a2, a3, a4);
  *result = &unk_1E3D24138;
  return result;
}

uint64_t sub_19C19EA94(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 88))(a2, a1);
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 88))(a2, a1);
}

void sub_19C19EB5C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C18E518(a1);
  operator delete(v1);
}

void sub_19C19EBF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19ECE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19EEB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C19EED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19F04C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19F0B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19F0C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C19F1DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C19F214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19F4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C19F6A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_19C19F6F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C19F934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19C19FAB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C19FAC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_19C19FAEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, float a9, int a10)
{
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  int v19;

  *(_QWORD *)a1 = &unk_1E3D22E98;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v15 = *(const void **)a7;
  v14 = *(_QWORD *)(a7 + 8);
  v16 = v14 - *(_QWORD *)a7;
  if (v14 != *(_QWORD *)a7)
  {
    if (v16 < 0)
      sub_19C07DA0C();
    v17 = (char *)operator new(v14 - *(_QWORD *)a7);
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = v17;
    v18 = &v17[4 * (v16 >> 2)];
    *(_QWORD *)(a1 + 64) = v18;
    memcpy(v17, v15, v16);
    *(_QWORD *)(a1 + 56) = v18;
  }
  v19 = a10;
  if (!a10)
    v19 = a4;
  *(_DWORD *)(a1 + 72) = a8;
  *(_DWORD *)(a1 + 76) = v19;
  *(float *)(a1 + 80) = a9;
  *(_QWORD *)a1 = &unk_1E3D237F8;
  return a1;
}

void sub_19C19FBC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C19FBDC(uint64_t a1, int a2)
{
  void *v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  float *v7;
  const float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float32x4_t *v29;
  float32x4_t *v30;
  uint64_t v36;
  float32x4_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float64x2_t v42;
  float64x2_t __x;
  long double v44;
  float64x2_t v45;
  float64x2_t v46;
  float v47;
  float v48;
  float __C;
  float __B;
  _OWORD v51[3];
  _QWORD v52[3];
  _QWORD v53[3];

  v2 = 0;
  v3 = *(int *)(a1 + 24);
  v53[0] = v3;
  v53[1] = 0x3F80000000010020;
  v53[2] = 0;
  v52[1] = 0x3F80000000010020;
  v52[2] = 0;
  v52[0] = v3;
  memset(v51, 0, sizeof(v51));
  v4 = a2;
  switch(*(_QWORD *)(a1 + 16))
  {
    case 0:
    case 6:
      goto LABEL_16;
    case 1:
      LODWORD(v51[0]) = 3;
      goto LABEL_16;
    case 2:
      LODWORD(v51[0]) = 4;
      goto LABEL_16;
    case 4:
      LODWORD(v51[0]) = 11;
      goto LABEL_16;
    case 5:
      LODWORD(v51[0]) = 1;
      goto LABEL_16;
    case 8:
      __B = 0.2;
      v48 = 0.0;
      __C = 0.5;
      v47 = 1.0;
      if (a2 >= 1)
      {
        v6 = 4 * *(int *)(a1 + 72);
        v7 = (float *)(**(_QWORD **)(a1 + 40) + v6);
        v8 = (const float *)(**(_QWORD **)(a1 + 32) + v6);
        do
        {
          vDSP_vsmsa(v8, 1, &__B, &__C, v7, 1, *(int *)(a1 + 24));
          vDSP_vclip(v7, 1, &v48, &v47, v7, 1, *(int *)(a1 + 24));
          v9 = 4 * *(int *)(a1 + 76);
          v8 = (const float *)((char *)v8 + v9);
          v7 = (float *)((char *)v7 + v9);
          --v4;
        }
        while (v4);
      }
      return;
    case 9:
      LODWORD(v51[0]) = 8;
      *(_QWORD *)((char *)v51 + 4) = **(_QWORD **)(a1 + 48);
      goto LABEL_16;
    case 0xALL:
      v10 = (v3 * a2);
      if ((int)v10 >= 1)
      {
        v11 = 4 * *(int *)(a1 + 72);
        v12 = (float *)(**(_QWORD **)(a1 + 32) + v11);
        v13 = (float *)(**(_QWORD **)(a1 + 40) + v11);
        do
        {
          v14 = *v12++;
          v15 = v14 * 0.5 + erf(v14 * 0.707106781) * (v14 * 0.5);
          *v13++ = v15;
          --v10;
        }
        while (v10);
      }
      return;
    case 0xBLL:
      LODWORD(v51[0]) = 2;
      DWORD1(v51[0]) = *(_DWORD *)(a1 + 80);
LABEL_16:
      v16 = (void *)MEMORY[0x1A1AD1464](v53, v52, v51, 0);
      v2 = v16;
      if (v16)
        BNNSFilterApplyBatch(v16, v4, (const void *)(**(_QWORD **)(a1 + 32) + 4 * *(int *)(a1 + 72)), *(int *)(a1 + 76), (void *)(**(_QWORD **)(a1 + 40) + 4 * *(int *)(a1 + 72)), *(int *)(a1 + 76));
      goto LABEL_18;
    case 0xCLL:
      v17 = (v3 * a2);
      if ((int)v17 < 1)
        return;
      v18 = **(_QWORD **)(a1 + 32);
      v19 = *(int *)(a1 + 72);
      v20 = **(_QWORD **)(a1 + 40);
      if (v17 < 4 || (v21 = 4 * v19, (unint64_t)(4 * v19 + v20 - (4 * v19 + v18)) < 0x10))
      {
        v22 = 0;
LABEL_24:
        v23 = 4 * v22 + 4 * v19;
        v24 = (float *)(v20 + v23);
        v25 = (float *)(v18 + v23);
        v26 = v17 - v22;
        do
        {
          v27 = *v25++;
          v28 = exp(v27 * 1.702);
          *v24++ = (float)(v27 * v28) / (float)(v28 + 1.0);
          --v26;
        }
        while (v26);
        return;
      }
      v29 = (float32x4_t *)(v18 + v21);
      v30 = (float32x4_t *)(v20 + v21);
      v22 = v17 & 0xFFFFFFFC;
      __asm { FMOV            V0.4S, #1.0 }
      v41 = _Q0;
      v42 = (float64x2_t)vdupq_n_s64(0x3FFB3B645A1CAC08uLL);
      v36 = v22;
      do
      {
        v37 = *v29++;
        v46 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v37.f32), v42);
        __x = vmulq_f64(vcvt_hight_f64_f32(v37), v42);
        v44 = exp(__x.f64[1]);
        v38.f64[0] = exp(__x.f64[0]);
        v38.f64[1] = v44;
        v45 = v38;
        __x.f64[0] = exp(v46.f64[1]);
        v39.f64[0] = exp(v46.f64[0]);
        v39.f64[1] = __x.f64[0];
        v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v39), v45);
        *v30++ = vdivq_f32(vmulq_f32(v37, v40), vaddq_f32(v40, v41));
        v36 -= 4;
      }
      while (v36);
      if (v22 != v17)
        goto LABEL_24;
      return;
    default:
LABEL_18:
      BNNSFilterDestroy(v2);
      return;
  }
}

_QWORD *sub_19C19FF88(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E3D22E98;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C19FFC8(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E3D22E98;
  v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_19C1A0008(uint64_t result, int a2, double a3, int32x2_t a4)
{
  uint64_t v4;
  const float *v5;
  const float *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  float v17;
  float32x4_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v26;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  int8x16_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float *v48;
  float *v49;
  uint64_t v50;
  float v51;
  int v52;
  unint64_t v53;
  BOOL v55;
  float v57;
  float32x4_t *v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t v61;
  float *v62;
  float *v63;
  uint64_t v64;
  float v65;
  unint64_t v66;
  BOOL v68;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t *v75;
  float32x4_t *v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float *v80;
  float *v81;
  uint64_t v82;
  float v83;
  float v84;

  v4 = (*(_DWORD *)(result + 20) * a2);
  if ((int)v4 >= 1)
  {
    v5 = (const float *)(result + 40);
    v6 = (const float *)(result + 44);
    switch(*(_DWORD *)(result + 16))
    {
      case 0:
        v7 = **(_QWORD **)(result + 24);
        v8 = **(_QWORD **)(result + 32);
        if (v4 >= 8)
        {
          v9 = 0;
          v24 = v8 + 4 * v4;
          v26 = v8 < v7 + 4 * v4 && v7 < v24;
          if (((unint64_t)v5 >= v24 || v8 >= result + 48) && !v26)
          {
            v28 = vld1q_dup_f32(v5);
            v29 = vld1q_dup_f32(v6);
            v9 = v4 & 0xFFFFFFFC;
            __asm { FMOV            V4.4S, #1.0 }
            v34 = (float32x4_t)vdupq_n_s32(0xC3800000);
            v35 = vdivq_f32(_Q4, vsubq_f32(v28, v29));
            v36.i64[0] = 0x7F0000007FLL;
            v36.i64[1] = 0x7F0000007FLL;
            v37.i64[0] = 0x7E0000007ELL;
            v37.i64[1] = 0x7E0000007ELL;
            v38 = (int8x16_t)vdupq_n_s32(0xC2FE0000);
            v39 = (int8x16_t)vdupq_n_s32(0x42FE0000u);
            v40 = v9;
            v41 = **(int8x16_t ***)(result + 32);
            v42 = **(float32x4_t ***)(result + 24);
            do
            {
              v43 = *v42++;
              v44 = (int8x16_t)vcgtq_f32(v43, v28);
              v45 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vmulq_f32(v43, v35), v34)));
              v46 = vandq_s8(v44, (int8x16_t)vcgeq_f32(v43, v29));
              v47 = vandq_s8(v44, (int8x16_t)vcgtq_f32(v29, v43));
              *v41++ = vbslq_s8(vandq_s8(v47, (int8x16_t)vcgeq_s32(v36, v45)), (int8x16_t)vcvtq_f32_s32(vmaxq_s32(v45, v37)), vbslq_s8(vorrq_s8(vandq_s8(v47, (int8x16_t)vcgtq_s32(v45, v36)), v46), v39, v38));
              v40 -= 4;
            }
            while (v40);
            if (v9 == v4)
              return result;
          }
        }
        else
        {
          v9 = 0;
        }
        v48 = (float *)(v7 + 4 * v9);
        v49 = (float *)(v8 + 4 * v9);
        v50 = v4 - v9;
        do
        {
          while (1)
          {
            while (1)
            {
              v51 = *v48;
              if (*v48 > *v5)
                break;
              *v49++ = -127.0;
              ++v48;
              if (!--v50)
                return result;
            }
            if (v51 < *v6)
            {
              v52 = llroundf((float)(v51 * -256.0) / (float)(*v5 - *v6));
              if (v52 <= 127)
                break;
            }
            *v49++ = 127.0;
            ++v48;
            if (!--v50)
              return result;
          }
          if (v52 <= -127)
            v52 = -127;
          *v49++ = (float)v52;
          ++v48;
          --v50;
        }
        while (v50);
        return result;
      case 1:
        v10 = **(float ***)(result + 24);
        v11 = **(float ***)(result + 32);
        do
        {
          v12 = (float)(*v5 * -0.0078125) * *v10;
          *v11 = v12;
          v13 = *v6;
          if (v12 > *v6 || (v13 = *v5, v12 < *v5))
            *v11 = v13;
          ++v10;
          ++v11;
          --v4;
        }
        while (v4);
        return result;
      case 2:
        v14 = **(float ***)(result + 24);
        v15 = **(float ***)(result + 32);
        do
        {
          v16 = (float)((float)((float)(*v5 * -0.0078125) * (float)(*v5 * -0.0078125)) * *v14) * roundf(-128.0 / *v5);
          *v15 = v16;
          v17 = *v6;
          if (v16 > *v6 || (v17 = *v5, v16 < *v5))
            *v15 = v17;
          ++v14;
          ++v15;
          --v4;
        }
        while (v4);
        return result;
      case 3:
        v18 = **(float32x4_t ***)(result + 24);
        v19 = **(_QWORD **)(result + 32);
        if (v4 < 8)
        {
          v20 = 0;
LABEL_62:
          v62 = &v18->f32[v20];
          v63 = (float *)(v19 + 4 * v20);
          v64 = v4 - v20;
          do
          {
            v65 = *v62++;
            *v63++ = (float)(*v5 * *v5) * (float)(0.000061035 * v65);
            --v64;
          }
          while (v64);
          return result;
        }
        v20 = 0;
        v53 = v19 + 4 * v4;
        v55 = v19 < (unint64_t)v18->u64 + 4 * v4 && (unint64_t)v18 < v53;
        if ((unint64_t)v5 < v53 && v19 < (unint64_t)v6)
          goto LABEL_62;
        if (v55)
          goto LABEL_62;
        v20 = v4 & 0x7FFFFFF8;
        v57 = (float)(*v5 * *v5) * 0.000061035;
        v58 = v18 + 1;
        v59 = (float32x4_t *)(v19 + 16);
        v60 = v4 & 0xFFFFFFF8;
        do
        {
          v61 = vmulq_n_f32(*v58, v57);
          v59[-1] = vmulq_n_f32(v58[-1], v57);
          *v59 = v61;
          v58 += 2;
          v59 += 2;
          v60 -= 8;
        }
        while (v60);
        if (v20 != v4)
          goto LABEL_62;
        break;
      case 4:
        v21 = **(_QWORD **)(result + 24);
        v22 = **(_QWORD **)(result + 32);
        if (v4 >= 8)
        {
          v23 = 0;
          v66 = v22 + 4 * v4;
          v68 = v22 < v21 + 4 * v4 && v21 < v66;
          if (((unint64_t)v5 >= v66 || v22 >= result + 48) && !v68)
          {
            v23 = v4 & 0x7FFFFFFC;
            *(float *)a4.i32 = *v5;
            v70 = (float32x4_t)vdupq_lane_s32(a4, 0);
            v71.i64[0] = 0xBC000000BC000000;
            v71.i64[1] = 0xBC000000BC000000;
            v72 = vmulq_n_f32(v71, *v5);
            v73 = vld1q_dup_f32(v6);
            v74 = v4 & 0xFFFFFFFC;
            v75 = **(float32x4_t ***)(result + 32);
            v76 = **(float32x4_t ***)(result + 24);
            do
            {
              v77 = *v76++;
              v78 = vmulq_f32(v72, v77);
              v79 = (int8x16_t)vcgeq_f32(v73, v78);
              *v75 = vaddq_f32(*v75, (float32x4_t)vbslq_s8(v79, vbslq_s8(vandq_s8(v79, (int8x16_t)vcgeq_f32(v78, v70)), (int8x16_t)v78, (int8x16_t)v70), (int8x16_t)v73));
              ++v75;
              v74 -= 4;
            }
            while (v74);
            if (v23 == v4)
              return result;
          }
        }
        else
        {
          v23 = 0;
        }
        v80 = (float *)(v21 + 4 * v23);
        v81 = (float *)(v22 + 4 * v23);
        v82 = v4 - v23;
        do
        {
          v83 = (float)(*v5 * -0.0078125) * *v80;
          v84 = *v6;
          if (v83 <= *v6)
          {
            v84 = (float)(*v5 * -0.0078125) * *v80;
            if (v83 < *v5)
              v84 = *v5;
          }
          *v81 = *v81 + v84;
          ++v81;
          ++v80;
          --v82;
        }
        while (v82);
        return result;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_19C1A0478(uint64_t result, int a2, double a3, double a4, double a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  int v12;
  float v13;
  float v14;
  _QWORD *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;

  if (*(_DWORD *)(result + 20) * a2 >= 1)
  {
    v5 = 0;
    do
    {
      switch(*(_DWORD *)(result + 16))
      {
        case 0:
          v8 = *(float *)(result + 40);
          v9 = *(float *)(**(_QWORD **)(result + 24) + 4 * v5);
          v10 = **(_QWORD **)(result + 32);
          if (v9 <= v8)
            goto LABEL_23;
          v11 = *(float *)(result + 44);
          if (v9 < v11 && (v12 = llroundf((float)(v9 * -256.0) / (float)(v8 - v11)), v12 < 128))
          {
            if (v12 > -128)
              goto LABEL_18;
LABEL_23:
            *(_BYTE *)(v10 + v5) = -127;
          }
          else
          {
            *(_BYTE *)(v10 + v5) = 127;
          }
          break;
        case 1:
          v15 = *(_QWORD **)(result + 32);
          LODWORD(a5) = *(_DWORD *)(**(_QWORD **)(result + 24) + 4 * v5);
          v16 = *(float *)(result + 40) * -0.0078125;
          goto LABEL_15;
        case 2:
          v13 = *(float *)(result + 40);
          v14 = v13 * -0.0078125;
          *(float *)&a5 = roundf(-128.0 / v13);
          v15 = *(_QWORD **)(result + 32);
          v16 = (float)(v14 * v14) * *(float *)(**(_QWORD **)(result + 24) + 4 * v5);
LABEL_15:
          *(float *)&a5 = v16 * *(float *)&a5;
          *(_BYTE *)(*v15 + v5) = (int)*(float *)&a5;
          v10 = **(_QWORD **)(result + 32);
          LOBYTE(a5) = *(_BYTE *)(v10 + v5);
          *(_QWORD *)&a5 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a5)).u64[0];
          *(float *)&a5 = (float)SLODWORD(a5);
          v21 = *(float *)(result + 44);
          if (v21 < *(float *)&a5 || (v21 = *(float *)(result + 40), v21 > *(float *)&a5))
          {
            v12 = (int)v21;
LABEL_18:
            *(_BYTE *)(v10 + v5) = v12;
          }
          break;
        case 3:
          v6 = (int)(float)((float)((float)(*(float *)(result + 40) * *(float *)(result + 40)) * 0.000061035)
                          * *(float *)(**(_QWORD **)(result + 24) + 4 * v5));
          v7 = **(_QWORD **)(result + 32);
          goto LABEL_4;
        case 4:
          v17 = *(float *)(result + 40);
          v18 = *(float *)(result + 44);
          v19 = (float)(v17 * -0.0078125) * *(float *)(**(_QWORD **)(result + 24) + 4 * v5);
          v20 = truncf(v19);
          if (v18 >= v20)
          {
            v6 = (int)v19;
            if (v17 > v20)
              v6 = (int)v17;
          }
          else
          {
            v6 = (int)v18;
          }
          v7 = **(_QWORD **)(result + 32);
          LOBYTE(v6) = *(_BYTE *)(v7 + v5) + v6;
LABEL_4:
          *(_BYTE *)(v7 + v5) = v6;
          break;
        default:
          break;
      }
      ++v5;
    }
    while (v5 < *(int *)(result + 20) * (uint64_t)a2);
  }
  return result;
}

uint64_t sub_19C1A0644()
{
  if (qword_1EE41A9B8[0] != -1)
    dispatch_once(qword_1EE41A9B8, &unk_1E3D251E0);
  return qword_1EE41A9B0;
}

os_log_t sub_19C1A0690()
{
  os_log_t result;

  result = os_log_create("com.apple.Montreal", "Default");
  qword_1EE41A9B0 = (uint64_t)result;
  return result;
}

id sub_19C1A09F8(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  char v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v9, (uint64_t)CFSTR("\r %@ ["), v10, v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v8, v12, (uint64_t)v11, v13);

  v14 = (uint64_t)v4;
  objc_msgSend_indentByFactor_(v4, v15, 1, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v18 = v3;
  v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v50, (uint64_t)v54, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v51;
    do
    {
      v23 = 0;
      do
      {
        while (1)
        {
          if (*(_QWORD *)v51 != v22)
            objc_enumerationMutation(v18);
          v28 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v23);
          v29 = objc_opt_respondsToSelector();
          v32 = (void *)MEMORY[0x1E0CB3940];
          if ((v29 & 1) != 0)
            break;
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v30, (uint64_t)CFSTR(" \r %@ %@"), v31, v17, v28, (_QWORD)v50);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_appendString_(v8, v25, (uint64_t)v24, v26);

          if (v21 == ++v23)
            goto LABEL_3;
        }
        objc_msgSend_descriptionWithIndent_(v28, v30, v14, v31);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v32, v34, (uint64_t)CFSTR(" %@"), v35, v33);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_appendString_(v8, v37, (uint64_t)v36, v38);

        ++v23;
      }
      while (v21 != v23);
LABEL_3:
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v27, (uint64_t)&v50, (uint64_t)v54, 16);
    }
    while (v21);
  }

  v39 = (void *)v14;
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v40, (uint64_t)CFSTR("\r %@ ]"), v41, v14);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v8, v43, (uint64_t)v42, v44);

  v48 = (void *)objc_msgSend_copy(v8, v45, v46, v47);
  return v48;
}

id sub_19C1A0C54(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  char isKindOfClass;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v9, (uint64_t)CFSTR("\r %@ {"), v10, v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = v8;
  objc_msgSend_appendString_(v8, v12, (uint64_t)v11, v13);

  v54 = v4;
  objc_msgSend_indentByFactor_(v4, v14, 1, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v17 = v3;
  v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v56, (uint64_t)v60, 16);
  if (v19)
  {
    v22 = v19;
    v23 = *(_QWORD *)v57;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        while (1)
        {
          if (*(_QWORD *)v57 != v23)
            objc_enumerationMutation(v17);
          v34 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * i);
          objc_msgSend_objectForKeyedSubscript_(v17, v20, v34, v21);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            break;
          v25 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend_indentByFactor_(v16, v36, 1, v37);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          sub_19C1A0C54(v35, v26);
          v27 = objc_claimAutoreleasedReturnValue();
LABEL_6:
          v30 = (void *)v27;
          objc_msgSend_stringWithFormat_(v25, v28, (uint64_t)CFSTR(" \r %@ %@ : %@"), v29, v16, v34, v27);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_appendString_(v55, v32, (uint64_t)v31, v33);

          if (v22 == ++i)
            goto LABEL_3;
        }
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        v25 = (void *)MEMORY[0x1E0CB3940];
        if ((isKindOfClass & 1) != 0)
        {
          objc_msgSend_indentByFactor_(v16, v39, 1, v40);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          sub_19C1A09F8(v35, v26);
          v27 = objc_claimAutoreleasedReturnValue();
          goto LABEL_6;
        }
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v39, (uint64_t)CFSTR(" \r %@ %@ : %@"), v40, v16, v34, v35);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_appendString_(v55, v42, (uint64_t)v41, v43);

      }
LABEL_3:
      v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v20, (uint64_t)&v56, (uint64_t)v60, 16);
    }
    while (v22);
  }

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v44, (uint64_t)CFSTR("\r %@ }"), v45, v54);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v55, v47, (uint64_t)v46, v48);

  v52 = (void *)objc_msgSend_copy(v55, v49, v50, v51);
  return v52;
}

id sub_19C1A0F44(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  MontrealNNModelTensor *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_exMRL_arrayForKey_(v3, v9, (uint64_t)v4, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v37, (uint64_t)v41, 16);
  if (v13)
  {
    v17 = v13;
    v18 = *(_QWORD *)v38;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v38 != v18)
          objc_enumerationMutation(v11);
        v21 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v19);
        v22 = [MontrealNNModelTensor alloc];
        v27 = (void *)objc_msgSend_initWithDictionary_(v22, v23, v21, v24);
        if (v27)
        {
          if (objc_msgSend_containsObject_(v8, v25, (uint64_t)v27, v26))
            sub_19C09C77C(CFSTR("Tensor %@ is already present"), (uint64_t)v28, v29, v30, v31, v32, v33, v34, (uint64_t)v27);
          objc_msgSend_addObject_(v8, v28, (uint64_t)v27, v30);
        }

        ++v19;
      }
      while (v17 != v19);
      v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v20, (uint64_t)&v37, (uint64_t)v41, 16);
    }
    while (v17);
  }
  v35 = (void *)objc_msgSend_copy(v8, v14, v15, v16);

  return v35;
}

id sub_19C1A10E0(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  const char *v26;
  uint64_t v27;
  MontrealNNModelWeight *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = v8;
  objc_msgSend_exMRL_arrayForKey_(v7, v15, (uint64_t)v8, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v43, (uint64_t)v47, 16);
  if (v19)
  {
    v23 = v19;
    v24 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v23; ++i)
      {
        if (*(_QWORD *)v44 != v24)
          objc_enumerationMutation(v17);
        v27 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i);
        v28 = [MontrealNNModelWeight alloc];
        v32 = (void *)objc_msgSend_initWithDictionary_quantization_jsonDir_(v28, v29, v27, (uint64_t)v9, v10);
        if (v32)
        {
          if (objc_msgSend_containsObject_(v14, v30, (uint64_t)v32, v31))
            sub_19C09C77C(CFSTR("Weight %@ is already present"), (uint64_t)v33, v34, v35, v36, v37, v38, v39, (uint64_t)v32);
          objc_msgSend_addObject_(v14, v33, (uint64_t)v32, v35);
        }

      }
      v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v26, (uint64_t)&v43, (uint64_t)v47, 16);
    }
    while (v23);
  }
  v40 = (void *)objc_msgSend_copy(v14, v20, v21, v22);

  return v40;
}

id sub_19C1A12B0(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v6 = v1;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v23, (uint64_t)v27, 16);
  if (v8)
  {
    v12 = v8;
    v13 = *(_QWORD *)v24;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v24 != v13)
          objc_enumerationMutation(v6);
        objc_msgSend_jsonDescription(*(void **)(*((_QWORD *)&v23 + 1) + 8 * v14), v9, v10, v11, (_QWORD)v23);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v5, v16, (uint64_t)v15, v17);

        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v23, (uint64_t)v27, 16);
    }
    while (v12);
  }

  v21 = (void *)objc_msgSend_copy(v5, v18, v19, v20);
  return v21;
}

id sub_19C1A13F4(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  const char *v29;
  uint64_t v30;
  MontrealNNModelNode *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v14, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = v9;
  objc_msgSend_exMRL_arrayForKey_(v9, v18, (uint64_t)v10, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v46, (uint64_t)v50, 16);
  if (v22)
  {
    v26 = v22;
    v27 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v47 != v27)
          objc_enumerationMutation(v20);
        v30 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i);
        v31 = [MontrealNNModelNode alloc];
        v33 = (void *)objc_msgSend_initWithDictionary_tensors_quantization_jsonDir_(v31, v32, v30, (uint64_t)v11, v12, v13);
        if (objc_msgSend_containsObject_(v17, v34, (uint64_t)v33, v35))
          sub_19C09C77C(CFSTR("Node %@ is already present"), (uint64_t)v36, v37, v38, v39, v40, v41, v42, (uint64_t)v33);
        objc_msgSend_addObject_(v17, v36, (uint64_t)v33, v38);

      }
      v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v29, (uint64_t)&v46, (uint64_t)v50, 16);
    }
    while (v26);
  }
  v43 = (void *)objc_msgSend_copy(v17, v23, v24, v25);

  return v43;
}

uint64_t sub_19C1A15D0(uint64_t result)
{
  *(_QWORD *)result = &off_1E3D22F90;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

_QWORD *sub_19C1A15E4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E3D22F90;
  v2 = a1[1];
  if (v2)
  {
    v3 = (void *)sub_19C1B7A28(v2);
    operator delete(v3);
  }
  return a1;
}

void sub_19C1A1620(_QWORD *__p)
{
  uint64_t v2;
  void *v3;

  *__p = &off_1E3D22F90;
  v2 = __p[1];
  if (v2)
  {
    v3 = (void *)sub_19C1B7A28(v2);
    operator delete(v3);
  }
  operator delete(__p);
}

__CFData *sub_19C1A165C(uint64_t a1)
{
  uint64_t v1;
  CFIndex v2;
  __CFData *Mutable;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  Mutable = CFDataCreateMutable(0, v2);
  CFDataAppendBytes(Mutable, **(const UInt8 ***)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  return Mutable;
}

uint64_t sub_19C1A16B8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  size_t v4;

  if (*(_BYTE *)(a1 + 16))
    return 1;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || mlock(*(const void **)v3, v4) == -1)
    return 0;
  result = 1;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_19C1A1724(uint64_t a1)
{
  uint64_t v2;
  size_t v3;

  if (!*(_BYTE *)(a1 + 16))
    return 1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (munlock(*(const void **)v2, v3) != -1)
      {
        *(_BYTE *)(a1 + 16) = 0;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_19C1A1780(uint64_t a1, const char *a2, _QWORD *a3)
{
  uint64_t v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::runtime_error *exception;
  __int128 __p;
  char v18;
  __int128 __dst;
  unint64_t v20;

  v6 = operator new();
  v7 = strlen(a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v20 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memcpy(p_dst, a2, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v18 = 1;
  LOWORD(__p) = 114;
  v12 = sub_19C1B7BAC(v6, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 8) = v6;
  if ((v18 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_14:
    operator delete((void *)__dst);
    v13 = *(_QWORD *)(a1 + 8);
    if (!v13)
      goto LABEL_17;
    goto LABEL_15;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v20) < 0)
    goto LABEL_14;
LABEL_11:
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13)
  {
LABEL_17:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1A1980(exception, "Model format incompatibale. Unable to build Flat model");
    __cxa_throw(exception, (struct type_info *)&unk_1E3D1D1B0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
LABEL_15:
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
    goto LABEL_17;
  sub_19C1A19A4(v12, a3, *(__int128 **)v13, v14);
  return 1;
}

void sub_19C1A190C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1A1920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C1A196C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_19C1A1980(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E58;
  return result;
}

uint64_t sub_19C1A19A4(uint64_t a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  __int128 v5;
  __int128 v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  int v49;
  const char *v50;
  int v51;
  int v52;
  int *v53;
  int v54;
  BOOL v55;
  int *v56;
  int v57;
  int *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  int *v64;
  int *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  int v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  _BYTE *v76;
  int *v77;
  uint64_t v78;
  unint64_t v79;
  int *v80;
  int v81;
  int *v82;
  char *v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  int *v90;
  unint64_t v91;
  char *v92;
  int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  int *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  int *v111;
  int *v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  int v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  _BYTE *v123;
  int *v124;
  uint64_t v125;
  unint64_t v126;
  int *v127;
  int v128;
  int *v129;
  char *v130;
  int64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  int *v137;
  unint64_t v138;
  char *v139;
  int v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  int *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  int v155;
  char *v156;
  int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  size_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  _BOOL4 v170;
  size_t v171;
  int v172;
  int v173;
  size_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  _BOOL4 v182;
  size_t v183;
  char v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD *v191;
  _DWORD *v192;
  char *v193;
  uint64_t v194;
  int *v195;
  uint64_t v196;
  char *v197;
  _DWORD *v198;
  unint64_t v199;
  int v200;
  int v201;
  int v202;
  int v203;
  size_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  _BOOL4 v212;
  size_t v213;
  int v214;
  size_t v215;
  size_t v216;
  void *p_p;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  int v221;
  char v222;
  int v223;
  char *v224;
  int v225;
  int v226;
  int v227;
  size_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  _BOOL4 v236;
  size_t v237;
  uint64_t j;
  int v239;
  int v240;
  char *v241;
  char *v242;
  int v243;
  int v244;
  int v245;
  int v246;
  size_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  _BOOL4 v255;
  size_t v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  size_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  _BOOL4 v270;
  size_t v271;
  void *v272;
  char v273;
  int v274;
  char *v275;
  int v276;
  int v277;
  int v278;
  size_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  _BOOL4 v287;
  size_t v288;
  int v289;
  int v290;
  int v291;
  int v292;
  size_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  _BOOL4 v301;
  size_t v302;
  uint64_t i;
  int v304;
  int v305;
  char *v306;
  char *v307;
  int v308;
  int v309;
  int v310;
  int v311;
  size_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  _BOOL4 v320;
  size_t v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  size_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  _BOOL4 v335;
  size_t v336;
  unint64_t v337;
  char *v338;
  char *v339;
  int v340;
  char *v341;
  size_t v342;
  size_t v343;
  void *v344;
  int v345;
  char *v346;
  size_t v347;
  size_t v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  size_t v355;
  size_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  char *v363;
  char *v364;
  int v365;
  int v366;
  int v367;
  int v368;
  char *v369;
  int v370;
  size_t v371;
  void *v372;
  void *v373;
  char *v374;
  uint64_t v375;
  uint64_t v376;
  size_t v377;
  void *v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  char *v383;
  void *v384;
  char *v385;
  char *v386;
  void *v387;
  char *v388;
  char *v389;
  void *v390;
  std::runtime_error *v392;
  std::runtime_error *exception;
  std::runtime_error *v394;
  std::runtime_error *v395;
  char *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  int v401;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *__s;
  void *v410[2];
  unint64_t v411;
  void *v412[2];
  unint64_t v413;
  void *v414;
  char *v415;
  unint64_t v416;
  _QWORD v417[88];
  void *v418;
  char *v419;
  unint64_t v420;
  void *__p;
  char *v422;
  unint64_t v423;
  _OWORD __src[44];
  void *__dst[2];
  unint64_t v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  _OWORD v430[2];
  uint64_t v431;
  uint64_t v432;

  v432 = *MEMORY[0x1E0C80C00];
  if (a4 <= 0x57)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Flat model file corrupted");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E58;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D1D1B0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = a3[3];
  v429 = a3[2];
  v430[0] = v5;
  v430[1] = a3[4];
  v431 = *((_QWORD *)a3 + 10);
  v6 = a3[1];
  v427 = *a3;
  v428 = v6;
  v7 = strlen((const char *)v430 + 8);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    v426 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_9;
  }
  HIBYTE(v426) = v7;
  v9 = __dst;
  if (v7)
LABEL_9:
    memcpy(v9, (char *)v430 + 8, (size_t)v8);
  *((_BYTE *)v8 + (_QWORD)v9) = 0;
  if ((_DWORD)v427 != 1001)
  {
    v394 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v394, "Flat model version incorrect");
    goto LABEL_587;
  }
  v12 = DWORD2(v427);
  if (HIDWORD(v427) + 400 * (unint64_t)DWORD2(v427) > a4)
  {
    v394 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v394, "Flat model file corrupted");
LABEL_587:
    v394->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E58;
    __cxa_throw(v394, (struct type_info *)&unk_1E3D1D1B0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  __s = (char *)a3 + HIDWORD(v427);
  if (DWORD2(v427))
  {
    if (DWORD2(v427) == 1)
    {
      v13 = 0;
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v13 = DWORD2(v427) & 0xFFFFFFFE;
      v16 = v13;
      v17 = (uint64_t)a3 + HIDWORD(v427);
      do
      {
        if (v14 <= *(unsigned int *)(v17 + 388))
          v14 = *(unsigned int *)(v17 + 388);
        if (v15 <= *(unsigned int *)(v17 + 788))
          v15 = *(unsigned int *)(v17 + 788);
        v17 += 800;
        v16 -= 2;
      }
      while (v16);
      if (v14 <= v15)
        v14 = v15;
      if (v13 == DWORD2(v427))
        goto LABEL_28;
    }
    v18 = (unsigned int *)((char *)&a3[25 * v13 + 24] + HIDWORD(v427) + 4);
    v19 = DWORD2(v427) - v13;
    do
    {
      if (v14 <= *v18)
        v14 = *v18;
      v18 += 100;
      --v19;
    }
    while (v19);
LABEL_28:
    if (v14 > a4)
    {
      v395 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v395, "Flat model file corrupted");
      v395->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E58;
      __cxa_throw(v395, (struct type_info *)&unk_1E3D1D1B0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v20 = 0;
    while (1)
    {
      bzero(__src, 0x2C0uLL);
      v403 = v20;
      v21 = &__s[400 * v20];
      v22 = v21[32];
      v23 = v21[33];
      *(_QWORD *)&__src[0] = v21[32];
      *((_QWORD *)&__src[0] + 1) = v23;
      v24 = v21[38];
      v25 = v21[35];
      *(_QWORD *)&__src[1] = v21[34];
      *((_QWORD *)&__src[1] + 1) = v25;
      v26 = v21[36];
      v27 = v21[37];
      *(_QWORD *)&__src[2] = v21[36];
      *((_QWORD *)&__src[2] + 1) = v27;
      v28 = *(_OWORD *)(v21 + 132);
      __src[12] = *(_OWORD *)(v21 + 116);
      __src[13] = v28;
      v29 = *(_OWORD *)(v21 + 164);
      __src[14] = *(_OWORD *)(v21 + 148);
      __src[15] = v29;
      v30 = *(_OWORD *)(v21 + 68);
      __src[8] = *(_OWORD *)(v21 + 52);
      __src[9] = v30;
      v31 = *(_OWORD *)(v21 + 100);
      __src[10] = *(_OWORD *)(v21 + 84);
      __src[11] = v31;
      v32 = *(_OWORD *)(v21 + 196);
      __src[16] = *(_OWORD *)(v21 + 180);
      __src[17] = v32;
      v33 = *(_OWORD *)(v21 + 228);
      __src[18] = *(_OWORD *)(v21 + 212);
      __src[19] = v33;
      v34 = *(_OWORD *)(v21 + 260);
      v35 = *(_OWORD *)(v21 + 276);
      __src[20] = *(_OWORD *)(v21 + 244);
      __src[21] = v34;
      v36 = *(_OWORD *)(v21 + 292);
      __src[22] = v35;
      __src[23] = v36;
      v37 = *(_OWORD *)(v21 + 308);
      v38 = *(_OWORD *)(v21 + 324);
      v39 = *(_OWORD *)(v21 + 356);
      __src[26] = *(_OWORD *)(v21 + 340);
      __src[27] = v39;
      __src[24] = v37;
      __src[25] = v38;
      v40 = v21[40];
      *(_QWORD *)&__src[3] = v24;
      *((_QWORD *)&__src[3] + 1) = v40;
      v41 = v21[42];
      *(_QWORD *)&__src[4] = v21[41];
      *((_QWORD *)&__src[4] + 1) = v41;
      v42 = v21[44];
      *(_QWORD *)&__src[5] = v21[43];
      *((_QWORD *)&__src[5] + 1) = v42;
      v43 = v21[46];
      *(_QWORD *)&__src[6] = v21[45];
      *((_QWORD *)&__src[6] + 1) = v43;
      LODWORD(v24) = *((_DWORD *)v21 + 12);
      v44 = *((_QWORD *)&__src[7] + 1) | v24 & 0x20;
      v406 = v21;
      v45 = v44 | v24 & 0x7D4;
      *(_QWORD *)&__src[7] = v21[47];
      *((_QWORD *)&__src[7] + 1) = v45;
      v46 = *((unsigned int *)v21 + 97);
      v47 = (char *)a3 + v46;
      switch(v22)
      {
        case 0:
        case 11:
        case 13:
          v48 = 2 * (v26 != 2);
          if (v22 == 11)
          {
            v49 = (LODWORD(__src[20]) * LODWORD(__src[16]) * DWORD1(__src[20]) * DWORD2(__src[8])) << v48;
          }
          else
          {
            v49 = (LODWORD(__src[16]) * LODWORD(__src[8])) << v48;
            if (v22 == 13)
              v49 *= 2;
          }
          *(_QWORD *)&__src[28] = (char *)a3 + v46;
          v156 = &v47[v49];
          v158 = -v49 < 0;
          v172 = -v49 & 3;
          v173 = v49 & 3;
          if (!v158)
            v173 = -v172;
          if (v173)
            v174 = (8 - v173);
          else
            v174 = 0;
          if (v174 >= 5)
          {
            v175 = operator new(v174);
            memcpy(v175, v156, v174);
            v176 = 0;
            v177 = (v174 - 4);
            LOBYTE(v178) = 1;
            do
              v178 = v178 & (*((_BYTE *)v175 + v176++) == 0);
            while (v177 != v176);
            v182 = *((_BYTE *)v175 + v177) == 1
                && *((_BYTE *)v175 + (v174 - 3)) == 2
                && *((_BYTE *)v175 + (v174 - 2)) == 2
                && *((_BYTE *)v175 + (v174 - 1)) == 8;
            if ((v178 & v182) != 0)
              v183 = v174;
            else
              v183 = 0;
            v156 += v183;
            operator delete(v175);
            LOWORD(v45) = WORD4(__src[7]);
          }
          if ((v45 & 0x100) != 0)
            goto LABEL_269;
          goto LABEL_215;
        case 1:
          if ((v45 & 0x40) == 0)
          {
            v392 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v392, "Only kMRLNeuralNetworkWeight                                                    AttributeBatchNormalizationIntegrated weight attribute supported");
            v392->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E58;
            __cxa_throw(v392, (struct type_info *)&unk_1E3D1D1B0, (void (*)(void *))std::runtime_error::~runtime_error);
          }
          *(_QWORD *)&__src[28] = (char *)a3 + v46;
          v154 = __src[8];
          if (SDWORD2(__src[8]) > 1)
            v154 = DWORD2(__src[8]);
          v155 = v154 << (2 * (v26 != 2));
          v156 = &v47[v155];
          v157 = v155 & 3;
          v159 = -v155;
          v158 = v159 < 0;
          v160 = v159 & 3;
          if (v158)
            v161 = v157;
          else
            v161 = -v160;
          if (v161)
            v162 = (8 - v161);
          else
            v162 = 0;
          if (v162 >= 5)
          {
            v163 = operator new(v162);
            memcpy(v163, v156, v162);
            v164 = 0;
            v165 = (v162 - 4);
            LOBYTE(v166) = 1;
            do
              v166 = v166 & (*((_BYTE *)v163 + v164++) == 0);
            while (v165 != v164);
            v170 = *((_BYTE *)v163 + v165) == 1
                && *((_BYTE *)v163 + (v162 - 3)) == 2
                && *((_BYTE *)v163 + (v162 - 2)) == 2
                && *((_BYTE *)v163 + (v162 - 1)) == 8;
            if ((v166 & v170) != 0)
              v171 = v162;
            else
              v171 = 0;
            v156 += v171;
            operator delete(v163);
          }
LABEL_215:
          *(_QWORD *)&__src[36] = v156;
          v50 = v406;
          if ((v406[32] + 7) >= 2u)
            goto LABEL_270;
          goto LABEL_30;
        case 4:
        case 23:
          *(_QWORD *)&__src[28] = (char *)a3 + v46;
          v50 = v21;
          if ((v21[32] + 7) < 2u)
            goto LABEL_30;
          goto LABEL_270;
        case 5:
        case 6:
          v51 = __src[16];
          if (SLODWORD(__src[20]) <= 0)
            v52 = __src[16];
          else
            v52 = __src[20];
          if ((v44 & 0x20) != 0 && (v45 & 0x80) != 0)
          {
            v53 = (int *)operator new(4uLL);
            v54 = v26;
            v55 = v26 != 2;
            *v53 = 0;
            v56 = v53 + 1;
            v57 = __src[8];
            if (v22 == 6)
            {
              v58 = (int *)operator new(8uLL);
              *(_QWORD *)v58 = 0x200000000;
              v56 = v58 + 2;
              operator delete(v53);
              v51 *= 2;
              v53 = v58;
            }
            v194 = (4 * v52 * (v51 + v57)) << (2 * v55);
            v195 = v53;
            do
            {
              v196 = *v195++;
              v197 = (char *)__src + 8 * v196;
              *((_QWORD *)v197 + 56) = v47;
              *((_QWORD *)v197 + 72) = &v47[v194];
              v47 += 16 * v52 + v194;
            }
            while (v195 != v56);
            operator delete(v53);
            v193 = v406;
            v26 = v54;
          }
          else
          {
            v184 = 2 * (v26 != 2);
            v185 = (4 * LODWORD(__src[16]) * v52) << v184;
            v186 = (4 * v52 * LODWORD(__src[8])) << v184;
            *(_QWORD *)&__src[36] = &v47[v186];
            v187 = 16 * v52;
            *(_QWORD *)&__src[28] = (char *)a3 + v46;
            *((_QWORD *)&__src[28] + 1) = &v47[v186 + v187];
            v47 = (char *)(*((_QWORD *)&__src[28] + 1) + v185);
            if ((v45 & 0x80) != 0)
            {
              if (v22 == 6)
              {
                *(_QWORD *)&__src[37] = &v47[v186];
                *(_QWORD *)&__src[29] = *((_QWORD *)&__src[28] + 1) + v185;
                *((_QWORD *)&__src[29] + 1) = &v47[v186 + v187];
                v47 = (char *)(*((_QWORD *)&__src[29] + 1) + v185);
              }
            }
            else
            {
              *((_QWORD *)&__src[36] + 1) = *((_QWORD *)&__src[28] + 1) + v185;
              v47 += v187;
              if (v22 == 6)
              {
                *(_QWORD *)&__src[37] = &v47[v186];
                *(_QWORD *)&__src[29] = v47;
                *((_QWORD *)&__src[29] + 1) = &v47[v186 + v187];
                *((_QWORD *)&__src[37] + 1) = *((_QWORD *)&__src[29] + 1) + v185;
                v47 = (char *)(*((_QWORD *)&__src[37] + 1) + v187);
              }
            }
            v193 = v406;
          }
          v198 = operator new(8uLL);
          *(_QWORD *)v198 = 0x700000006;
          v199 = *((unsigned int *)v193 + 98);
          if ((v199 & 0x40) == 0)
            goto LABEL_266;
          *(_QWORD *)&__src[31] = v47;
          v200 = (LODWORD(__src[16]) * LODWORD(__src[20])) << (2 * (v26 != 2));
          v47 += v200;
          v201 = -v200;
          v158 = v201 < 0;
          v202 = v201 & 3;
          v203 = v158 ? ((LODWORD(__src[16]) * LODWORD(__src[20])) << (2 * (v26 != 2))) & 3 : -v202;
          v204 = v203 ? (8 - v203) : 0;
          if (v204 < 5)
          {
LABEL_266:
            v214 = 7;
            if (((v199 >> 7) & 1) == 0)
              goto LABEL_268;
LABEL_267:
            *((_QWORD *)&__src[28] + v214) = v47;
            goto LABEL_268;
          }
          v205 = operator new(v204);
          memcpy(v205, v47, v204);
          v206 = 0;
          v207 = (v204 - 4);
          LOBYTE(v208) = 1;
          do
            v208 = v208 & (*((_BYTE *)v205 + v206++) == 0);
          while (v207 != v206);
          v212 = *((_BYTE *)v205 + v207) == 1
              && *((_BYTE *)v205 + (v204 - 3)) == 2
              && *((_BYTE *)v205 + (v204 - 2)) == 2
              && *((_BYTE *)v205 + (v204 - 1)) == 8;
          if ((v208 & v212) != 0)
            v213 = v204;
          else
            v213 = 0;
          v47 += v213;
          operator delete(v205);
          v214 = v198[1];
          if ((((unint64_t)*((unsigned int *)v193 + 98) >> v214) & 1) != 0)
            goto LABEL_267;
LABEL_268:
          operator delete(v198);
LABEL_269:
          v50 = v406;
          if ((v406[32] + 7) >= 2u)
            goto LABEL_270;
          goto LABEL_30;
        case 19:
          if ((v45 & 0x40) != 0)
          {
            *(_QWORD *)&__src[28] = (char *)a3 + v46;
            *((_QWORD *)&__src[28] + 1) = &v47[4 * LODWORD(__src[20]) * (LODWORD(__src[9]) + LODWORD(__src[8]))];
            v59 = (char *)(*((_QWORD *)&__src[28] + 1) + 4 * LODWORD(__src[20]));
          }
          else
          {
            if ((v45 & 0x200) == 0)
            {
              *(_QWORD *)&__src[28] = (char *)a3 + v46;
              v47 += 4 * LODWORD(__src[9]) * LODWORD(__src[20]);
            }
            if ((v45 & 0x400) == 0)
            {
              *((_QWORD *)&__src[28] + 1) = v47;
              v47 += 4 * LODWORD(__src[8]) * LODWORD(__src[20]);
            }
            v59 = &v47[4 * LODWORD(__src[20])];
            *(_QWORD *)&__src[29] = v47;
          }
          goto LABEL_234;
        case 20:
          v188 = 4 * DWORD1(__src[20]) * LODWORD(__src[20]);
          v189 = v188 * LODWORD(__src[8]);
          *(_QWORD *)&__src[28] = (char *)a3 + v46;
          *((_QWORD *)&__src[28] + 1) = &v47[v189];
          *(_QWORD *)&__src[29] = &v47[v189 + v189];
          *(_QWORD *)&__src[36] = *(_QWORD *)&__src[29] + v189;
          *((_QWORD *)&__src[36] + 1) = *(_QWORD *)&__src[29] + v189 + v188;
          *(_QWORD *)&__src[37] = *((_QWORD *)&__src[36] + 1) + v188;
          v50 = v21;
          if ((v21[32] + 7) >= 2u)
            goto LABEL_270;
          goto LABEL_30;
        case 21:
          v59 = &v47[4 * LODWORD(__src[8])];
          *(_QWORD *)&__src[28] = (char *)a3 + v46;
LABEL_234:
          *(_QWORD *)&__src[36] = v59;
          v50 = v21;
          if ((v21[32] + 7) >= 2u)
            goto LABEL_270;
          goto LABEL_30;
        case 26:
          *(_QWORD *)&__src[35] = (char *)a3 + v46;
          v107 = 4 * LODWORD(__src[20]);
          v108 = &v47[v107];
          *((_QWORD *)&__src[35] + 1) = &v47[v107];
          v422 = 0;
          __p = 0;
          v423 = 0;
          v419 = 0;
          v418 = 0;
          v420 = 0;
          v405 = LODWORD(__src[20]);
          if (SLODWORD(__src[20]) >= 1)
          {
            v397 = &v47[v107];
            v399 = 4 * LODWORD(__src[20]);
            v401 = v26;
            v109 = 0;
            v110 = 0;
            v111 = 0;
            v112 = 0;
            v113 = 0;
            v114 = 0;
            while (1)
            {
              v116 = *(float *)(*((_QWORD *)&__src[35] + 1) + 4 * v114);
              v117 = (int)(*(float *)(*(_QWORD *)&__src[35] + 4 * v114) + 0.5);
              if (v113 < v112)
              {
                *v113++ = v117;
                v422 = (char *)v113;
                v118 = (int)(v116 + 0.5);
                if (v110 < v109)
                  goto LABEL_105;
                goto LABEL_127;
              }
              v119 = v113 - v111;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 62)
                sub_19C07DA0C();
              if (((char *)v112 - (char *)v111) >> 1 > v120)
                v120 = ((char *)v112 - (char *)v111) >> 1;
              if ((unint64_t)((char *)v112 - (char *)v111) >= 0x7FFFFFFFFFFFFFFCLL)
                v121 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                if (v121 >> 62)
                  sub_19C07C7FC();
                v122 = v109;
                v123 = operator new(4 * v121);
                v109 = v122;
                v124 = (int *)&v123[4 * v119];
                *v124 = v117;
                v125 = (uint64_t)(v124 + 1);
                if (v113 == v111)
                  goto LABEL_124;
              }
              else
              {
                v123 = 0;
                v124 = (int *)(4 * v119);
                *(_DWORD *)(4 * v119) = v117;
                v125 = 4 * v119 + 4;
                if (v113 == v111)
                  goto LABEL_124;
              }
              v126 = (char *)(v113 - 1) - (char *)v111;
              if (v126 < 0xBC)
              {
                v127 = v113;
                goto LABEL_123;
              }
              if (&v123[(char *)v113 - (char *)v111 - 4 - (v126 & 0xFFFFFFFFFFFFFFFCLL)] > &v123[(char *)v113
                                                                                                - (char *)v111
                                                                                                - 4])
              {
                v127 = v113;
                do
                {
LABEL_123:
                  v128 = *--v127;
                  *--v124 = v128;
                }
                while (v127 != v111);
                goto LABEL_124;
              }
              if ((int *)((char *)v113 - (v126 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v113 - 1)
              {
                v127 = v113;
                goto LABEL_123;
              }
              if ((unint64_t)((char *)v111 - v123) < 0x20)
              {
                v127 = v113;
                goto LABEL_123;
              }
              v148 = (v126 >> 2) + 1;
              v149 = 4 * (v148 & 0x7FFFFFFFFFFFFFF8);
              v127 = &v113[v149 / 0xFFFFFFFFFFFFFFFCLL];
              v124 = (int *)((char *)v124 - v149);
              v150 = &v123[4 * v119 - 16];
              v151 = v113 - 4;
              v152 = v148 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v153 = *(_OWORD *)v151;
                *(v150 - 1) = *((_OWORD *)v151 - 1);
                *v150 = v153;
                v150 -= 2;
                v151 -= 8;
                v152 -= 8;
              }
              while (v152);
              if (v148 != (v148 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_123;
LABEL_124:
              v112 = (int *)&v123[4 * v121];
              __p = v124;
              v422 = (char *)v125;
              v423 = (unint64_t)v112;
              if (v111)
              {
                operator delete(v111);
                v110 = v419;
                v109 = (char *)v420;
              }
              v111 = v124;
              v113 = (int *)v125;
              v422 = (char *)v125;
              v118 = (int)(v116 + 0.5);
              if (v110 < v109)
              {
LABEL_105:
                *(_DWORD *)v110 = v118;
                v115 = (uint64_t)(v110 + 4);
                goto LABEL_106;
              }
LABEL_127:
              v129 = v112;
              v130 = (char *)v418;
              v131 = v110 - (_BYTE *)v418;
              v132 = (v110 - (_BYTE *)v418) >> 2;
              v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 62)
                sub_19C07DA0C();
              if ((v109 - (_BYTE *)v418) >> 1 > v133)
                v133 = (v109 - (_BYTE *)v418) >> 1;
              if ((unint64_t)(v109 - (_BYTE *)v418) >= 0x7FFFFFFFFFFFFFFCLL)
                v134 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v134 = v133;
              if (v134)
              {
                if (v134 >> 62)
                  sub_19C07C7FC();
                v135 = v134;
                v136 = operator new(4 * v134);
                v134 = v135;
                v137 = (int *)&v136[4 * v132];
                *v137 = v118;
                v115 = (uint64_t)(v137 + 1);
                if (v110 != v130)
                {
LABEL_136:
                  v138 = v110 - 4 - v130;
                  if (v138 < 0xBC
                    || &v136[v131 - 4 - (v138 & 0xFFFFFFFFFFFFFFFCLL)] > &v136[v131 - 4]
                    || &v110[-(v138 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v110 - 4
                    || (unint64_t)(v110 - v136 - v131) < 0x20)
                  {
                    v139 = v110;
                    v112 = v129;
                  }
                  else
                  {
                    v142 = (v138 >> 2) + 1;
                    v143 = 4 * (v142 & 0x7FFFFFFFFFFFFFF8);
                    v139 = &v110[-v143];
                    v137 = (int *)((char *)v137 - v143);
                    v144 = &v136[4 * v132 - 16];
                    v145 = v110 - 16;
                    v146 = v142 & 0x7FFFFFFFFFFFFFF8;
                    v112 = v129;
                    do
                    {
                      v147 = *(_OWORD *)v145;
                      *(v144 - 1) = *((_OWORD *)v145 - 1);
                      *v144 = v147;
                      v144 -= 2;
                      v145 -= 32;
                      v146 -= 8;
                    }
                    while (v146);
                    if (v142 == (v142 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_139:
                      v109 = &v136[4 * v134];
                      v418 = v137;
                      v420 = (unint64_t)v109;
                      if (!v130)
                        goto LABEL_106;
LABEL_143:
                      v141 = v109;
                      operator delete(v130);
                      v109 = v141;
                      goto LABEL_106;
                    }
                  }
                  do
                  {
                    v140 = *((_DWORD *)v139 - 1);
                    v139 -= 4;
                    *--v137 = v140;
                  }
                  while (v139 != v130);
                  goto LABEL_139;
                }
              }
              else
              {
                v136 = 0;
                v137 = (int *)(4 * v132);
                *(_DWORD *)(4 * v132) = v118;
                v115 = 4 * v132 + 4;
                if (v110 != v130)
                  goto LABEL_136;
              }
              v112 = v129;
              v109 = &v136[4 * v134];
              v418 = v137;
              v420 = (unint64_t)v109;
              if (v130)
                goto LABEL_143;
LABEL_106:
              v419 = (char *)v115;
              ++v114;
              v110 = (char *)v115;
              if (v114 == v405)
              {
                v191 = __p;
                v192 = v418;
                v26 = v401;
                v108 = v397;
                v107 = v399;
                goto LABEL_360;
              }
            }
          }
          v192 = 0;
          v191 = 0;
LABEL_360:
          v273 = 2 * (v26 != 2);
          v274 = (*v192 * *v191) << v273;
          *(_QWORD *)&__src[28] = &v108[v107];
          v275 = &v108[v107 + v274];
          v276 = v274 & 3;
          v277 = -v274;
          v158 = v277 < 0;
          v278 = v277 & 3;
          if (!v158)
            v276 = -v278;
          if (v276)
            v279 = (8 - v276);
          else
            v279 = 0;
          if (v279 >= 5)
          {
            v280 = operator new(v279);
            memcpy(v280, v275, v279);
            v281 = 0;
            v282 = (v279 - 4);
            LOBYTE(v283) = 1;
            do
              v283 = v283 & (*((_BYTE *)v280 + v281++) == 0);
            while (v282 != v281);
            v287 = *((_BYTE *)v280 + v282) == 1
                && *((_BYTE *)v280 + (v279 - 3)) == 2
                && *((_BYTE *)v280 + (v279 - 2)) == 2
                && *((_BYTE *)v280 + (v279 - 1)) == 8;
            if ((v283 & v287) != 0)
              v288 = v279;
            else
              v288 = 0;
            v275 += v288;
            operator delete(v280);
          }
          if (LODWORD(__src[22]) == 1)
          {
            v289 = (*v191 * ((_DWORD)v405 - 1)) << v273;
            v275 += v289;
            v290 = -v289;
            v158 = v290 < 0;
            v291 = v290 & 3;
            v292 = v158 ? ((*v191 * ((_DWORD)v405 - 1)) << v273) & 3 : -v291;
            v293 = v292 ? (8 - v292) : 0;
            if (v293 >= 5)
            {
              v294 = operator new(v293);
              memcpy(v294, v275, v293);
              v295 = 0;
              v296 = (v293 - 4);
              LOBYTE(v297) = 1;
              do
                v297 = v297 & (*((_BYTE *)v294 + v295++) == 0);
              while (v296 != v295);
              v301 = *((_BYTE *)v294 + v296) == 1
                  && *((_BYTE *)v294 + (v293 - 3)) == 2
                  && *((_BYTE *)v294 + (v293 - 2)) == 2
                  && *((_BYTE *)v294 + (v293 - 1)) == 8;
              if ((v297 & v301) != 0)
                v302 = v293;
              else
                v302 = 0;
              v275 += v302;
              operator delete(v294);
            }
          }
          if ((int)v405 >= 2)
          {
            for (i = 1; i != v405; ++i)
            {
              v304 = v191[i];
              v305 = (v192[i] * v304) << v273;
              v306 = (char *)__src + 8 * i;
              *((_QWORD *)v306 + 56) = v275;
              v307 = &v275[v305];
              v308 = v305 & 3;
              v309 = -v305;
              v158 = v309 < 0;
              v310 = v309 & 3;
              if (v158)
                v311 = v308;
              else
                v311 = -v310;
              if (v311)
                v312 = (8 - v311);
              else
                v312 = 0;
              if (v312 >= 5)
              {
                v313 = operator new(v312);
                memcpy(v313, v307, v312);
                v314 = 0;
                v315 = (v312 - 4);
                LOBYTE(v316) = 1;
                do
                  v316 = v316 & (*((_BYTE *)v313 + v314++) == 0);
                while (v315 != v314);
                v320 = *((_BYTE *)v313 + v315) == 1
                    && *((_BYTE *)v313 + (v312 - 3)) == 2
                    && *((_BYTE *)v313 + (v312 - 2)) == 2
                    && *((_BYTE *)v313 + (v312 - 1)) == 8;
                if ((v316 & v320) != 0)
                  v321 = v312;
                else
                  v321 = 0;
                v307 += v321;
                operator delete(v313);
                v304 = v191[i];
              }
              v322 = (*v191 * v304) << v273;
              *((_QWORD *)v306 + 71) = v307;
              v275 = &v307[v322];
              v323 = v322 & 3;
              v324 = -v322;
              v158 = v324 < 0;
              v325 = v324 & 3;
              if (v158)
                v326 = v323;
              else
                v326 = -v325;
              if (v326)
                v327 = (8 - v326);
              else
                v327 = 0;
              if (v327 >= 5)
              {
                v328 = operator new(v327);
                memcpy(v328, v275, v327);
                v329 = 0;
                v330 = (v327 - 4);
                LOBYTE(v331) = 1;
                do
                  v331 = v331 & (*((_BYTE *)v328 + v329++) == 0);
                while (v330 != v329);
                v335 = *((_BYTE *)v328 + v330) == 1
                    && *((_BYTE *)v328 + (v327 - 3)) == 2
                    && *((_BYTE *)v328 + (v327 - 2)) == 2
                    && *((_BYTE *)v328 + (v327 - 1)) == 8;
                if ((v331 & v335) != 0)
                  v336 = v327;
                else
                  v336 = 0;
                v275 += v336;
                operator delete(v328);
              }
            }
          }
          v272 = v192;
          goto LABEL_464;
        case 27:
          *(_QWORD *)&__src[35] = (char *)a3 + v46;
          v60 = 4 * LODWORD(__src[20]);
          v61 = &v47[v60];
          *((_QWORD *)&__src[35] + 1) = &v47[v60];
          v422 = 0;
          __p = 0;
          v423 = 0;
          v419 = 0;
          v418 = 0;
          v420 = 0;
          v404 = LODWORD(__src[20]);
          if (SLODWORD(__src[20]) >= 1)
          {
            v396 = &v47[v60];
            v398 = 4 * LODWORD(__src[20]);
            v400 = v26;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v67 = 0;
            while (1)
            {
              v69 = *(float *)(*((_QWORD *)&__src[35] + 1) + 4 * v67);
              v70 = (int)(*(float *)(*(_QWORD *)&__src[35] + 4 * v67) + 0.5);
              if (v66 < v65)
              {
                *v66++ = v70;
                v422 = (char *)v66;
                v71 = (int)(v69 + 0.5);
                if (v63 < v62)
                  goto LABEL_47;
                goto LABEL_69;
              }
              v72 = v66 - v64;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62)
                sub_19C07DA0C();
              if (((char *)v65 - (char *)v64) >> 1 > v73)
                v73 = ((char *)v65 - (char *)v64) >> 1;
              if ((unint64_t)((char *)v65 - (char *)v64) >= 0x7FFFFFFFFFFFFFFCLL)
                v74 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v74 = v73;
              if (v74)
              {
                if (v74 >> 62)
                  sub_19C07C7FC();
                v75 = v62;
                v76 = operator new(4 * v74);
                v62 = v75;
                v77 = (int *)&v76[4 * v72];
                *v77 = v70;
                v78 = (uint64_t)(v77 + 1);
                if (v66 == v64)
                  goto LABEL_66;
              }
              else
              {
                v76 = 0;
                v77 = (int *)(4 * v72);
                *(_DWORD *)(4 * v72) = v70;
                v78 = 4 * v72 + 4;
                if (v66 == v64)
                  goto LABEL_66;
              }
              v79 = (char *)(v66 - 1) - (char *)v64;
              if (v79 < 0xBC)
              {
                v80 = v66;
                goto LABEL_65;
              }
              if (&v76[(char *)v66 - (char *)v64 - 4 - (v79 & 0xFFFFFFFFFFFFFFFCLL)] > &v76[(char *)v66
                                                                                           - (char *)v64
                                                                                           - 4])
              {
                v80 = v66;
                do
                {
LABEL_65:
                  v81 = *--v80;
                  *--v77 = v81;
                }
                while (v80 != v64);
                goto LABEL_66;
              }
              if ((int *)((char *)v66 - (v79 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v66 - 1)
              {
                v80 = v66;
                goto LABEL_65;
              }
              if ((unint64_t)((char *)v64 - v76) < 0x20)
              {
                v80 = v66;
                goto LABEL_65;
              }
              v101 = (v79 >> 2) + 1;
              v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
              v80 = &v66[v102 / 0xFFFFFFFFFFFFFFFCLL];
              v77 = (int *)((char *)v77 - v102);
              v103 = &v76[4 * v72 - 16];
              v104 = v66 - 4;
              v105 = v101 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v106 = *(_OWORD *)v104;
                *(v103 - 1) = *((_OWORD *)v104 - 1);
                *v103 = v106;
                v103 -= 2;
                v104 -= 8;
                v105 -= 8;
              }
              while (v105);
              if (v101 != (v101 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_65;
LABEL_66:
              v65 = (int *)&v76[4 * v74];
              __p = v77;
              v422 = (char *)v78;
              v423 = (unint64_t)v65;
              if (v64)
              {
                operator delete(v64);
                v63 = v419;
                v62 = (char *)v420;
              }
              v64 = v77;
              v66 = (int *)v78;
              v422 = (char *)v78;
              v71 = (int)(v69 + 0.5);
              if (v63 < v62)
              {
LABEL_47:
                *(_DWORD *)v63 = v71;
                v68 = (uint64_t)(v63 + 4);
                goto LABEL_48;
              }
LABEL_69:
              v82 = v65;
              v83 = (char *)v418;
              v84 = v63 - (_BYTE *)v418;
              v85 = (v63 - (_BYTE *)v418) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
                sub_19C07DA0C();
              if ((v62 - (_BYTE *)v418) >> 1 > v86)
                v86 = (v62 - (_BYTE *)v418) >> 1;
              if ((unint64_t)(v62 - (_BYTE *)v418) >= 0x7FFFFFFFFFFFFFFCLL)
                v87 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v87 = v86;
              if (v87)
              {
                if (v87 >> 62)
                  sub_19C07C7FC();
                v88 = v87;
                v89 = operator new(4 * v87);
                v87 = v88;
                v90 = (int *)&v89[4 * v85];
                *v90 = v71;
                v68 = (uint64_t)(v90 + 1);
                if (v63 != v83)
                {
LABEL_78:
                  v91 = v63 - 4 - v83;
                  if (v91 < 0xBC
                    || &v89[v84 - 4 - (v91 & 0xFFFFFFFFFFFFFFFCLL)] > &v89[v84 - 4]
                    || &v63[-(v91 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v63 - 4
                    || (unint64_t)(v63 - v89 - v84) < 0x20)
                  {
                    v92 = v63;
                    v65 = v82;
                  }
                  else
                  {
                    v95 = (v91 >> 2) + 1;
                    v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
                    v92 = &v63[-v96];
                    v90 = (int *)((char *)v90 - v96);
                    v97 = &v89[4 * v85 - 16];
                    v98 = v63 - 16;
                    v99 = v95 & 0x7FFFFFFFFFFFFFF8;
                    v65 = v82;
                    do
                    {
                      v100 = *(_OWORD *)v98;
                      *(v97 - 1) = *((_OWORD *)v98 - 1);
                      *v97 = v100;
                      v97 -= 2;
                      v98 -= 32;
                      v99 -= 8;
                    }
                    while (v99);
                    if (v95 == (v95 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_81:
                      v62 = &v89[4 * v87];
                      v418 = v90;
                      v420 = (unint64_t)v62;
                      if (!v83)
                        goto LABEL_48;
LABEL_85:
                      v94 = v62;
                      operator delete(v83);
                      v62 = v94;
                      goto LABEL_48;
                    }
                  }
                  do
                  {
                    v93 = *((_DWORD *)v92 - 1);
                    v92 -= 4;
                    *--v90 = v93;
                  }
                  while (v92 != v83);
                  goto LABEL_81;
                }
              }
              else
              {
                v89 = 0;
                v90 = (int *)(4 * v85);
                *(_DWORD *)(4 * v85) = v71;
                v68 = 4 * v85 + 4;
                if (v63 != v83)
                  goto LABEL_78;
              }
              v65 = v82;
              v62 = &v89[4 * v87];
              v418 = v90;
              v420 = (unint64_t)v62;
              if (v83)
                goto LABEL_85;
LABEL_48:
              v419 = (char *)v68;
              ++v67;
              v63 = (char *)v68;
              if (v67 == v404)
              {
                v190 = v418;
                v191 = __p;
                v26 = v400;
                v61 = v396;
                v60 = v398;
                goto LABEL_281;
              }
            }
          }
          v191 = 0;
          v190 = 0;
LABEL_281:
          v220 = &v61[v60];
          v221 = v404 + *v190 - 1;
          *v190 = v221;
          v222 = 2 * (v26 != 2);
          v223 = (*v191 * v221) << v222;
          *(_QWORD *)&__src[28] = v220;
          v224 = &v220[v223];
          v225 = v223 & 3;
          v226 = -v223;
          v158 = v226 < 0;
          v227 = v226 & 3;
          if (!v158)
            v225 = -v227;
          if (v225)
            v228 = (8 - v225);
          else
            v228 = 0;
          if (v228 >= 5)
          {
            v229 = operator new(v228);
            memcpy(v229, v224, v228);
            v230 = 0;
            v231 = (v228 - 4);
            LOBYTE(v232) = 1;
            do
              v232 = v232 & (*((_BYTE *)v229 + v230++) == 0);
            while (v231 != v230);
            v236 = *((_BYTE *)v229 + v231) == 1
                && *((_BYTE *)v229 + (v228 - 3)) == 2
                && *((_BYTE *)v229 + (v228 - 2)) == 2
                && *((_BYTE *)v229 + (v228 - 1)) == 8;
            if ((v232 & v236) != 0)
              v237 = v228;
            else
              v237 = 0;
            v224 += v237;
            operator delete(v229);
          }
          if ((int)v404 >= 2)
          {
            for (j = 1; j != v404; ++j)
            {
              v239 = v191[j];
              v240 = (v190[j] * v239) << v222;
              v241 = (char *)__src + 8 * j;
              *((_QWORD *)v241 + 56) = v224;
              v242 = &v224[v240];
              v243 = v240 & 3;
              v244 = -v240;
              v158 = v244 < 0;
              v245 = v244 & 3;
              if (v158)
                v246 = v243;
              else
                v246 = -v245;
              if (v246)
                v247 = (8 - v246);
              else
                v247 = 0;
              if (v247 >= 5)
              {
                v248 = operator new(v247);
                memcpy(v248, v242, v247);
                v249 = 0;
                v250 = (v247 - 4);
                LOBYTE(v251) = 1;
                do
                  v251 = v251 & (*((_BYTE *)v248 + v249++) == 0);
                while (v250 != v249);
                v255 = *((_BYTE *)v248 + v250) == 1
                    && *((_BYTE *)v248 + (v247 - 3)) == 2
                    && *((_BYTE *)v248 + (v247 - 2)) == 2
                    && *((_BYTE *)v248 + (v247 - 1)) == 8;
                if ((v251 & v255) != 0)
                  v256 = v247;
                else
                  v256 = 0;
                v242 += v256;
                operator delete(v248);
                v239 = v191[j];
              }
              v257 = (*v191 * v239) << v222;
              *((_QWORD *)v241 + 71) = v242;
              v224 = &v242[v257];
              v258 = v257 & 3;
              v259 = -v257;
              v158 = v259 < 0;
              v260 = v259 & 3;
              if (v158)
                v261 = v258;
              else
                v261 = -v260;
              if (v261)
                v262 = (8 - v261);
              else
                v262 = 0;
              if (v262 >= 5)
              {
                v263 = operator new(v262);
                memcpy(v263, v224, v262);
                v264 = 0;
                v265 = (v262 - 4);
                LOBYTE(v266) = 1;
                do
                  v266 = v266 & (*((_BYTE *)v263 + v264++) == 0);
                while (v265 != v264);
                v270 = *((_BYTE *)v263 + v265) == 1
                    && *((_BYTE *)v263 + (v262 - 3)) == 2
                    && *((_BYTE *)v263 + (v262 - 2)) == 2
                    && *((_BYTE *)v263 + (v262 - 1)) == 8;
                if ((v266 & v270) != 0)
                  v271 = v262;
                else
                  v271 = 0;
                v224 += v271;
                operator delete(v263);
              }
            }
          }
          v272 = v190;
LABEL_464:
          operator delete(v272);
          operator delete(v191);
          v50 = v406;
          if ((v406[32] + 7) < 2u)
            goto LABEL_30;
LABEL_270:
          memcpy(v417, __src, sizeof(v417));
          v215 = strlen(v50);
          if (v215 > 0x7FFFFFFFFFFFFFF7)
            sub_19C07C774();
          v216 = v215;
          if (v215 >= 0x17)
          {
            v218 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v215 | 7) != 0x17)
              v218 = v215 | 7;
            v219 = v218 + 1;
            p_p = operator new(v218 + 1);
            v423 = v219 | 0x8000000000000000;
            __p = p_p;
            v422 = (char *)v216;
LABEL_277:
            memcpy(p_p, v50, v216);
            goto LABEL_278;
          }
          HIBYTE(v423) = v215;
          p_p = &__p;
          if (v215)
            goto LABEL_277;
LABEL_278:
          *((_BYTE *)p_p + v216) = 0;
          sub_19C22ECC8((uint64_t)a2, v417, (uint64_t)&__p);
          if (SHIBYTE(v423) < 0)
            operator delete(__p);
LABEL_30:
          v20 = v403 + 1;
          v12 = DWORD2(v427);
          if (v403 + 1 >= (unint64_t)DWORD2(v427))
            goto LABEL_466;
          break;
        default:
          goto LABEL_269;
      }
    }
  }
LABEL_466:
  v422 = 0;
  __p = 0;
  v423 = 0;
  v419 = 0;
  v418 = 0;
  v420 = 0;
  v414 = 0;
  v415 = 0;
  v416 = 0;
  if (v12)
  {
    v337 = 0;
    v338 = __s;
    while (1)
    {
      v341 = v422;
      if ((unint64_t)v422 >= v423)
      {
        v422 = sub_19C1B8338(&__p, v338);
        v345 = v338[32];
        if (v345 != 250)
          goto LABEL_476;
      }
      else
      {
        v342 = strlen(v338);
        if (v342 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        v343 = v342;
        if (v342 >= 0x17)
        {
          v350 = (v342 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v342 | 7) != 0x17)
            v350 = v342 | 7;
          v351 = v350 + 1;
          v344 = operator new(v350 + 1);
          *((_QWORD *)v341 + 1) = v343;
          *((_QWORD *)v341 + 2) = v351 | 0x8000000000000000;
          *(_QWORD *)v341 = v344;
        }
        else
        {
          v422[23] = v342;
          v344 = v341;
          if (!v342)
          {
            *v341 = 0;
            v422 = v341 + 24;
            v345 = v338[32];
            if (v345 != 250)
              goto LABEL_476;
            goto LABEL_479;
          }
        }
        memmove(v344, v338, v343);
        *((_BYTE *)v344 + v343) = 0;
        v422 = v341 + 24;
        v345 = v338[32];
        if (v345 != 250)
        {
LABEL_476:
          if (v345 != 249)
            goto LABEL_470;
          goto LABEL_496;
        }
      }
LABEL_479:
      v346 = v419;
      if ((unint64_t)v419 >= v420)
      {
        v419 = sub_19C1B8338(&v418, v338);
        if (v338[32] != 249)
          goto LABEL_470;
      }
      else
      {
        v347 = strlen(v338);
        if (v347 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        v348 = v347;
        if (v347 >= 0x17)
        {
          v352 = (v347 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v347 | 7) != 0x17)
            v352 = v347 | 7;
          v353 = v352 + 1;
          v349 = operator new(v352 + 1);
          *((_QWORD *)v346 + 1) = v348;
          *((_QWORD *)v346 + 2) = v353 | 0x8000000000000000;
          *(_QWORD *)v346 = v349;
LABEL_495:
          memmove(v349, v338, v348);
          *((_BYTE *)v349 + v348) = 0;
          v419 = v346 + 24;
          if (v338[32] != 249)
            goto LABEL_470;
          goto LABEL_496;
        }
        v419[23] = v347;
        v349 = v346;
        if (v347)
          goto LABEL_495;
        *v346 = 0;
        v419 = v346 + 24;
        if (v338[32] != 249)
          goto LABEL_470;
      }
LABEL_496:
      v354 = v415;
      if ((unint64_t)v415 < v416)
      {
        v355 = strlen(v338);
        if (v355 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        v356 = v355;
        if (v355 >= 0x17)
        {
          v358 = (v355 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v355 | 7) != 0x17)
            v358 = v355 | 7;
          v359 = v358 + 1;
          v357 = operator new(v358 + 1);
          *((_QWORD *)v354 + 1) = v356;
          *((_QWORD *)v354 + 2) = v359 | 0x8000000000000000;
          *(_QWORD *)v354 = v357;
        }
        else
        {
          v415[23] = v355;
          v357 = v354;
          if (!v355)
            goto LABEL_505;
        }
        memmove(v357, v338, v356);
LABEL_505:
        *((_BYTE *)v357 + v356) = 0;
        v339 = v354 + 24;
        goto LABEL_469;
      }
      v339 = sub_19C1B8338(&v414, v338);
LABEL_469:
      v415 = v339;
LABEL_470:
      ++v337;
      v340 = DWORD2(v427);
      v338 += 400;
      if (v337 >= DWORD2(v427))
        goto LABEL_507;
    }
  }
  v340 = 0;
LABEL_507:
  sub_19C22E250(a2, (const void ***)&v418, (const void ***)&v414);
  if (v340)
  {
    v360 = 0;
    v361 = __s + 32;
    do
    {
      v362 = 0;
      v407 = v360;
      v363 = &__s[400 * v360];
      v364 = v363 + 372;
      do
      {
        v365 = *(unsigned __int16 *)&v364[2 * v362];
        if (!*(_WORD *)&v364[2 * v362])
        {
          ++v362;
          continue;
        }
        v366 = v365 - 1;
        v367 = v361[400 * (v365 - 1)];
        if (v367 == 250)
          v368 = 0;
        else
          v368 = v363[39];
        v369 = &__s[400 * v366];
        ++v362;
        if (v367 == 249)
          v370 = 0;
        else
          v370 = v362;
        v371 = strlen(&__s[400 * v366]);
        if (v371 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        v372 = (void *)v371;
        if (v371 >= 0x17)
        {
          v374 = v361;
          v375 = (v371 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v371 | 7) != 0x17)
            v375 = v371 | 7;
          v376 = v375 + 1;
          v373 = operator new(v375 + 1);
          v412[1] = v372;
          v413 = v376 | 0x8000000000000000;
          v412[0] = v373;
          v361 = v374;
LABEL_527:
          memcpy(v373, v369, (size_t)v372);
          goto LABEL_528;
        }
        HIBYTE(v413) = v371;
        v373 = v412;
        if (v371)
          goto LABEL_527;
LABEL_528:
        *((_BYTE *)v372 + (_QWORD)v373) = 0;
        v377 = strlen(v363);
        if (v377 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        v378 = (void *)v377;
        if (v377 >= 0x17)
        {
          v380 = (v377 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v377 | 7) != 0x17)
            v380 = v377 | 7;
          v381 = v380 + 1;
          v379 = operator new(v380 + 1);
          v410[1] = v378;
          v411 = v381 | 0x8000000000000000;
          v410[0] = v379;
LABEL_535:
          memcpy(v379, v363, (size_t)v378);
          goto LABEL_536;
        }
        HIBYTE(v411) = v377;
        v379 = v410;
        if (v377)
          goto LABEL_535;
LABEL_536:
        *((_BYTE *)v378 + (_QWORD)v379) = 0;
        sub_19C2306E8((uint64_t)a2, (uint64_t)v412, v368, (uint64_t)v410, v370);
        if (SHIBYTE(v411) < 0)
        {
          operator delete(v410[0]);
          if ((SHIBYTE(v413) & 0x80000000) == 0)
            continue;
        }
        else if ((SHIBYTE(v413) & 0x80000000) == 0)
        {
          continue;
        }
        operator delete(v412[0]);
      }
      while (v362 != 8);
      v360 = v407 + 1;
    }
    while (v407 + 1 < (unint64_t)DWORD2(v427));
  }
  v382 = (char *)v414;
  if (v414)
  {
    v383 = v415;
    v384 = v414;
    if (v415 != v414)
    {
      do
      {
        if (*(v383 - 1) < 0)
          operator delete(*((void **)v383 - 3));
        v383 -= 24;
      }
      while (v383 != v382);
      v384 = v414;
    }
    v415 = v382;
    operator delete(v384);
  }
  v385 = (char *)v418;
  if (v418)
  {
    v386 = v419;
    v387 = v418;
    if (v419 != v418)
    {
      do
      {
        if (*(v386 - 1) < 0)
          operator delete(*((void **)v386 - 3));
        v386 -= 24;
      }
      while (v386 != v385);
      v387 = v418;
    }
    v419 = v385;
    operator delete(v387);
  }
  v388 = (char *)__p;
  if (__p)
  {
    v389 = v422;
    v390 = __p;
    if (v422 != __p)
    {
      do
      {
        if (*(v389 - 1) < 0)
          operator delete(*((void **)v389 - 3));
        v389 -= 24;
      }
      while (v389 != v388);
      v390 = __p;
    }
    v422 = v388;
    operator delete(v390);
  }
  if (SHIBYTE(v426) < 0)
    operator delete(__dst[0]);
  return 1;
}

void sub_19C1A38F0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  const std::runtime_error *exception_ptr;
  std::runtime_error *exception;
  const char *v7;
  std::runtime_error *v8;

  if (a2)
  {
    if (*(char *)(v2 - 225) < 0)
      operator delete(*(void **)(v2 - 248));
    if (a2 == 2)
    {
      exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(a1);
      std::runtime_error::runtime_error((std::runtime_error *)&STACK[0x3A8], exception_ptr);
      STACK[0x3A8] = (unint64_t)&unk_1E3D20E58;
      __cxa_begin_catch(a1);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v7 = std::runtime_error::what((const std::runtime_error *)&STACK[0x3A8]);
      std::runtime_error::runtime_error(exception, v7);
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E58;
      __cxa_throw(exception, (struct type_info *)&unk_1E3D1D1B0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    __cxa_begin_catch(a1);
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "unknown exception");
    v8->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20DB8;
    __cxa_throw(v8, (struct type_info *)&unk_1E3D1D150, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  _Unwind_Resume(a1);
}

void sub_19C1A3C18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19C1A3C3C()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x19C1A3C48);
}

void sub_19C1A3C58(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x19C1A3C60);
  sub_19C07AF7C(a1);
}

uint64_t sub_19C1A3C74(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, const char *a5, int *a6)
{
  const void **v9;
  const void ***v10;
  const void **v11;
  uint64_t *v12;
  const void **v13;
  const void ***v14;
  const void **v15;
  const void ***v16;
  __int16 v17;
  char *v18;
  char **v19;
  char *v20;
  char *v21;
  int64x2_t v22;
  char *v23;
  __int16 v24;
  char *v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  char v30;
  void **v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char **v41;
  char *v42;
  __int128 v43;
  void **v44;
  int16x8_t v45;
  int32x2_t v46;
  void **v47;
  void **v48;
  void **v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  char *v53;
  char **v54;
  char **v55;
  void *v56;
  void **v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  size_t v62;
  char *v63;
  size_t v64;
  int v65;
  _BOOL4 v66;
  int v67;
  _BOOL4 v68;
  char *v69;
  _BYTE *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _BYTE *v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  char *v84;
  void *v85;
  void **v86;
  _QWORD *v87;
  int v88;
  size_t v89;
  const void *v90;
  size_t v91;
  int v92;
  _BOOL4 v93;
  BOOL v94;
  uint64_t *v95;
  int v96;
  size_t v97;
  const void *v98;
  size_t v99;
  int v100;
  _BOOL4 v101;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t *v110;
  __int32 v111;
  __int32 v112;
  __int32 v113;
  int v114;
  int *v115;
  int *v116;
  int *v117;
  int *v118;
  int *v119;
  __int32 v120;
  __int32 v121;
  uint64_t v122;
  char *v123;
  float32x4_t *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  int v130;
  char *v131;
  uint64_t v132;
  char *v133;
  int64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  int *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  int v150;
  int v151;
  char *v152;
  int64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _BYTE *v158;
  int *v159;
  unint64_t v160;
  char *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  int *v169;
  int v170;
  int *v171;
  __int32 v172;
  char *v173;
  unint64_t v174;
  __int32 v175;
  __int32 v176;
  uint64_t v177;
  float32x4_t **v178;
  __int32 v179;
  __int32 v180;
  float32x4_t *v181;
  float32x4_t **v182;
  float32x4_t **v183;
  int64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  float32x4_t **v189;
  char *v190;
  char *v191;
  __int128 v192;
  int v193;
  int v194;
  int v195;
  float32x4_t *v196;
  int64_t v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  float32x4_t **v205;
  char *v206;
  __int128 v207;
  int v208;
  int v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  float32x4_t *v214;
  float32x4_t *v215;
  int8x16_t v216;
  uint64_t v217;
  int8x16_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  uint8x16_t v229;
  uint64_t v230;
  int8x8_t v231;
  float32x4_t *v232;
  float32x4_t *v233;
  uint64_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float *v241;
  float *v242;
  uint64_t v243;
  float v244;
  float v245;
  float v246;
  uint64_t *v247;
  float32x4_t *v248;
  float32x4_t *v249;
  __int32 v250;
  unint64_t v251;
  float32x4_t *v252;
  float32x4_t *v253;
  uint64_t v254;
  int v255;
  char *v256;
  char *v257;
  __int128 v258;
  uint64_t v259;
  float32x4_t *v260;
  __int32 v261;
  __int32 v262;
  int v263;
  char *v264;
  __int128 v265;
  float32x4_t *v266;
  float32x4_t *v267;
  __int32 v268;
  __int32 v269;
  __int32 v270;
  float32x4_t **v271;
  int v272;
  float32x4_t *v273;
  char *v274;
  uint64_t v275;
  char *v276;
  int v277;
  unint64_t v278;
  unint64_t v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  __int128 v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  __int128 v291;
  char *v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  void *v296;
  float v297;
  int v298;
  char *v299;
  void *v300;
  char *v301;
  int64_t v302;
  int64_t v303;
  unint64_t v304;
  int64_t v305;
  unint64_t v306;
  _BYTE *v307;
  int *v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  _OWORD *v314;
  char *v315;
  uint64_t v316;
  __int128 v317;
  int v318;
  int v319;
  char *v320;
  int64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  _BYTE *v326;
  int *v327;
  unint64_t v328;
  char *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  _OWORD *v333;
  char *v334;
  uint64_t v335;
  __int128 v336;
  unint64_t v337;
  unint64_t v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  __int128 v343;
  char *v344;
  int v345;
  int v346;
  char *v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  char *v352;
  char *v353;
  char *v354;
  float32x4_t **v355;
  __int128 v356;
  char *v357;
  float32x4_t **v358;
  char *v359;
  __int128 v360;
  float32x4_t *v361;
  __int32 v362;
  __int32 v363;
  __int32 v364;
  char *v365;
  char *v366;
  int v367;
  int v368;
  float32x4_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t *v372;
  unint64_t v373;
  char *v374;
  unint64_t v375;
  char *v376;
  float32x4_t **v377;
  char *v378;
  char *v379;
  __int128 v380;
  uint64_t v381;
  uint64_t *v382;
  char *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t *v386;
  unint64_t v387;
  unint64_t v388;
  char *v389;
  char *v390;
  char *v391;
  __int128 v392;
  float v393;
  float v394;
  uint64_t v395;
  int64_t v396;
  char *v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t *v400;
  unint64_t v401;
  unint64_t v402;
  char *v403;
  char *v404;
  float32x4_t **v405;
  char *v406;
  __int128 v407;
  uint64_t v408;
  unint64_t v409;
  char *v410;
  unint64_t v411;
  char *v412;
  float32x4_t **v413;
  char *v414;
  char *v415;
  __int128 v416;
  int *v417;
  int *v418;
  int *v419;
  __int32 v420;
  int v421;
  int v422;
  int *v423;
  float32x4_t **v424;
  uint64_t v425;
  float32x4_t *v426;
  char *v427;
  uint64_t v428;
  unint64_t v429;
  float32x4_t **v430;
  unint64_t v431;
  unint64_t v432;
  char *v433;
  char *v434;
  char *v435;
  float32x4_t **v436;
  __int128 v437;
  int v438;
  int *v439;
  int v440;
  float32x4_t **v441;
  uint64_t v442;
  char *v443;
  uint64_t *v444;
  int *v445;
  uint64_t v446;
  uint64_t v447;
  __int32 v448;
  char *v449;
  void *v450;
  char *v451;
  int64_t v452;
  uint64_t v453;
  unint64_t v454;
  int64_t v455;
  unint64_t v456;
  _BYTE *v457;
  _DWORD *v458;
  unint64_t v459;
  char *v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  _OWORD *v464;
  char *v465;
  uint64_t v466;
  __int128 v467;
  __int32 v468;
  char *v469;
  void *v470;
  char *v471;
  int64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476;
  _BYTE *v477;
  _DWORD *v478;
  unint64_t v479;
  char *v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  _OWORD *v484;
  char *v485;
  uint64_t v486;
  __int128 v487;
  char *v488;
  const void *v489;
  int64_t v490;
  char *v491;
  char *v492;
  char *v493;
  unint64_t v494;
  unint64_t v495;
  char *v496;
  char *v497;
  char *v498;
  char *v499;
  __int128 v500;
  char *v501;
  unint64_t v502;
  unint64_t v503;
  char *v504;
  char *v505;
  char *v506;
  __int128 v507;
  char *v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  char *v512;
  char *v513;
  char *v514;
  char *v515;
  __int128 v516;
  char *v517;
  float32x4_t *v518;
  uint64_t v519;
  uint64_t *v520;
  unint64_t v521;
  unint64_t v522;
  char *v523;
  char *v524;
  char *v525;
  char *v526;
  __int128 v527;
  char *v528;
  signed int v529;
  int v530;
  unsigned int v531;
  uint64_t v532;
  char *v533;
  const void *v534;
  int64_t v535;
  char *v536;
  char *v537;
  char *v538;
  unint64_t v539;
  unint64_t v540;
  char *v541;
  char *v542;
  char *v543;
  __int128 v544;
  char *v545;
  uint64_t v546;
  uint64_t v547;
  float v548;
  float v549;
  unint64_t v550;
  unint64_t v551;
  char *v552;
  char *v553;
  char *v554;
  __int128 v555;
  char *v556;
  signed int v557;
  int v558;
  uint64_t v559;
  int v560;
  float32x4_t **v561;
  unint64_t v562;
  unint64_t v563;
  char *v564;
  char *v565;
  char *v566;
  char *v567;
  __int128 v568;
  char *v569;
  int64_t v570;
  char *v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  char *v576;
  char *v577;
  char *v578;
  char *v579;
  __int128 v580;
  char *v581;
  unint64_t v582;
  unint64_t v583;
  char *v584;
  char *v585;
  char *v586;
  char *v587;
  __int128 v588;
  char *v589;
  int v590;
  char *v591;
  char *v592;
  int64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  char *v598;
  char *v599;
  char *v600;
  char *v601;
  __int128 v602;
  char *v603;
  unint64_t v604;
  unint64_t v605;
  char *v606;
  char *v607;
  char *v608;
  char *v609;
  __int128 v610;
  char *v611;
  unint64_t v612;
  unint64_t v613;
  char *v614;
  char *v615;
  float32x4_t **v616;
  char *v617;
  __int128 v618;
  int v619;
  float32x4_t *v620;
  char *v621;
  uint64_t v622;
  char *v623;
  unint64_t v624;
  unint64_t v625;
  char *v626;
  char *v627;
  char *v628;
  char *v629;
  __int128 v630;
  char *v631;
  unint64_t v632;
  unint64_t v633;
  char *v634;
  char *v635;
  char *v636;
  __int128 v637;
  char *v638;
  char v639;
  int v640;
  uint64_t v641;
  unint64_t v642;
  unint64_t v643;
  char *v644;
  char *v645;
  char *v646;
  __int128 v647;
  char *v648;
  int v649;
  int v650;
  uint64_t v651;
  int v652;
  int v653;
  int v654;
  __int8 *v655;
  float32x4_t *v656;
  char *v657;
  unint64_t v658;
  unint64_t v659;
  char *v660;
  float32x4_t **v661;
  char *v662;
  char *v663;
  char *v664;
  __int128 v665;
  int v666;
  int v667;
  int v668;
  uint64_t v669;
  int64_t v670;
  char *v671;
  unint64_t v672;
  unint64_t v673;
  char *v674;
  unint64_t v675;
  unint64_t v676;
  char *v677;
  char *v678;
  float32x4_t **v679;
  char *v680;
  char *v681;
  __int128 v682;
  char *v683;
  _DWORD *v684;
  uint64_t v685;
  unsigned int v686;
  uint64_t v687;
  __int8 *v688;
  void **v689;
  int v690;
  uint64_t v691;
  int8x16_t *v692;
  int8x16_t *v693;
  uint64_t v694;
  unsigned int v695;
  int8x16_t *v696;
  int8x16_t v697;
  int8x16_t *v698;
  uint64_t v699;
  int8x16_t v700;
  int8x16_t v701;
  uint8x16_t v702;
  uint64_t v703;
  int8x8_t v704;
  int8x8_t *v705;
  int8x8_t *v706;
  uint64_t v707;
  int8x8_t v708;
  int8x8_t v709;
  int8x8_t v710;
  uint8x8_t v711;
  unsigned __int8 *v712;
  unsigned __int8 *v713;
  uint64_t v714;
  int v715;
  int v716;
  int v717;
  uint64_t v718;
  int8x16_t *v719;
  int8x16_t *v720;
  uint64_t v721;
  unsigned int v722;
  int8x16_t *v723;
  int8x16_t v724;
  int8x16_t *v725;
  uint64_t v726;
  int8x16_t v727;
  int8x16_t v728;
  uint8x16_t v729;
  uint64_t v730;
  int8x8_t v731;
  int8x8_t *v732;
  int8x8_t *v733;
  uint64_t v734;
  int8x8_t v735;
  int8x8_t v736;
  int8x8_t v737;
  uint8x8_t v738;
  unsigned __int8 *v739;
  unsigned __int8 *v740;
  uint64_t v741;
  int v742;
  int v743;
  int v744;
  __int8 *v745;
  void **v746;
  int v747;
  uint64_t v748;
  float32x4_t *v749;
  float32x4_t *v750;
  uint64_t v751;
  unsigned int v752;
  float32x4_t *v753;
  int8x16_t v754;
  float32x4_t *v755;
  uint64_t v756;
  int8x16_t v757;
  int8x16_t v758;
  float32x4_t v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v765;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  uint64_t v770;
  int8x8_t v771;
  float32x4_t *v772;
  float32x4_t *v773;
  uint64_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float *v781;
  float *v782;
  uint64_t v783;
  float v784;
  float v785;
  float v786;
  uint64_t v787;
  float32x4_t *v788;
  float32x4_t *v789;
  uint64_t v790;
  unsigned int v791;
  float32x4_t *v792;
  int8x16_t v793;
  float32x4_t *v794;
  uint64_t v795;
  int8x16_t v796;
  int8x16_t v797;
  float32x4_t v798;
  float32x4_t v799;
  float32x4_t v800;
  float32x4_t v801;
  float32x4_t v802;
  float32x4_t v803;
  float32x4_t v804;
  float32x4_t v805;
  float32x4_t v806;
  float32x4_t v807;
  float32x4_t v808;
  uint64_t v809;
  int8x8_t v810;
  float32x4_t *v811;
  float32x4_t *v812;
  uint64_t v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float32x4_t v817;
  float32x4_t v818;
  float32x4_t v819;
  float *v820;
  float *v821;
  uint64_t v822;
  float v823;
  float v824;
  float v825;
  uint64_t *v826;
  NSObject *v827;
  unint64_t v828;
  unint64_t v829;
  char *v830;
  char *v831;
  char *v832;
  char *v833;
  __int128 v834;
  char *v835;
  unint64_t v836;
  unint64_t v837;
  char *v838;
  char *v839;
  char *v840;
  __int128 v841;
  char *v842;
  unint64_t v843;
  unint64_t v844;
  char *v845;
  char *v846;
  char *v847;
  __int128 v848;
  char *v849;
  char *v850;
  char *v851;
  char *v852;
  float32x4_t **v853;
  void *v854;
  float32x4_t **v855;
  void *v856;
  int v857;
  float32x4_t **v858;
  unint64_t v859;
  unint64_t v860;
  char *v861;
  float32x4_t **v862;
  char *v863;
  char *v864;
  __int128 v865;
  float32x4_t **v866;
  int v867;
  int v868;
  __int32 v869;
  int v870;
  unint64_t v871;
  unint64_t v872;
  char *v873;
  float32x4_t **v874;
  char *v875;
  __int128 v876;
  float32x4_t **v877;
  char *v878;
  unint64_t v879;
  unint64_t v880;
  char *v881;
  unint64_t v882;
  unint64_t v883;
  char *v884;
  char *v885;
  char *v886;
  unint64_t v887;
  unint64_t v888;
  char *v889;
  char *v890;
  char *v891;
  char *v892;
  __int128 v893;
  char *v894;
  unint64_t v895;
  unint64_t v896;
  char *v897;
  char *v898;
  char *v899;
  __int128 v900;
  char *v901;
  char v902;
  int v903;
  uint64_t v904;
  unint64_t v905;
  unint64_t v906;
  char *v907;
  char *v908;
  char *v909;
  __int128 v910;
  char *v911;
  int v912;
  int v913;
  uint64_t v914;
  int v915;
  int v916;
  int v917;
  __int8 *v918;
  float32x4_t *v919;
  char *v920;
  unint64_t v921;
  unint64_t v922;
  char *v923;
  float32x4_t **v924;
  char *v925;
  char *v926;
  __int128 v927;
  int v928;
  int v929;
  int v930;
  uint64_t v931;
  int64_t v932;
  char *v933;
  unint64_t v934;
  unint64_t v935;
  unint64_t v936;
  unint64_t v937;
  char *v938;
  char *v939;
  float32x4_t **v940;
  char *v941;
  __int128 v942;
  __int32 v943;
  float32x4_t **v944;
  int64_t v945;
  unint64_t v946;
  unint64_t v947;
  char *v948;
  unint64_t v949;
  char *v950;
  char *v951;
  char *v952;
  char *v953;
  char *v954;
  __int128 v955;
  char *v956;
  uint64_t v957;
  unint64_t v958;
  unint64_t v959;
  unint64_t v960;
  char *v961;
  char *v962;
  char *v963;
  float32x4_t **v964;
  __int128 v965;
  int v966;
  unint64_t v967;
  unint64_t v968;
  char *v969;
  char *v970;
  char *v971;
  float32x4_t **v972;
  __int128 v973;
  unint64_t v974;
  unint64_t v975;
  char *v976;
  char *v977;
  float32x4_t **v978;
  char *v979;
  __int128 v980;
  uint64_t *v981;
  const char *v982;
  void **v983;
  void **v984;
  char *v985;
  unint64_t v986;
  char *v987;
  unint64_t v988;
  unint64_t v989;
  unint64_t v990;
  unint64_t v991;
  char *v992;
  __int128 v993;
  uint64_t v994;
  char *v995;
  char **v996;
  char **v997;
  void *v998;
  void **v999;
  char *v1000;
  char *v1001;
  char *v1002;
  int v1003;
  size_t v1004;
  char *v1005;
  size_t v1006;
  int v1007;
  _BOOL4 v1008;
  int v1009;
  _BOOL4 v1010;
  char *v1011;
  _BYTE *v1012;
  char *v1013;
  uint64_t v1014;
  char *v1015;
  uint64_t v1016;
  _BYTE *v1017;
  int v1018;
  uint64_t v1019;
  int v1020;
  uint64_t *v1021;
  uint64_t v1022;
  uint64_t v1023;
  __int16 v1024;
  char *v1025;
  uint64_t v1026;
  void *v1027;
  char *v1028;
  char *v1029;
  char *v1030;
  char **v1031;
  char *v1032;
  void *v1033;
  int v1034;
  int v1035;
  uint64_t v1036;
  void *v1037;
  double v1038;
  double v1039;
  double v1040;
  int v1041;
  int v1042;
  void **v1043;
  void *v1044;
  char *v1045;
  char *v1046;
  void *v1047;
  char *v1048;
  void **v1049;
  void *v1050;
  void *v1051;
  void **v1052;
  void **v1053;
  void *v1054;
  std::runtime_error *exception;
  __int32 v1057;
  char v1058;
  char *v1059;
  __int32 v1060;
  int v1061;
  int v1062;
  char *v1063;
  _QWORD *v1064;
  int *v1065;
  int *v1066;
  int *v1067;
  char v1068;
  uint64_t v1069;
  char v1070;
  float64x2_t v1071;
  uint64_t *v1072;
  int *v1073;
  int v1074;
  uint64_t v1075;
  char v1076;
  int v1077;
  uint64_t v1078;
  int v1079;
  int v1080;
  uint64_t v1081;
  float32x4_t **v1082;
  int v1083;
  unint64_t v1084;
  void **v1085;
  char *v1087;
  float32x4_t **v1088;
  char *v1089;
  int v1090;
  int *v1091;
  int v1092;
  char *v1093;
  char *v1094;
  char v1095;
  char *v1096;
  char *v1097;
  char *v1098;
  char *v1099;
  char *v1100;
  char *v1101;
  uint8_t buf;
  char v1103[15];
  void *v1104;
  char *v1105;
  char *v1106;
  void *v1107;
  char *v1108;
  char *v1109;
  void *v1110[2];
  _OWORD v1111[2];
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  __int128 v1116;
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  void *v1141[2];
  char *v1142;
  int v1143;
  void *v1144[2];
  uint64_t v1145;
  void *v1146[2];
  void *v1147[2];
  int v1148;
  void *v1149;
  char *v1150;
  unint64_t v1151;
  void *v1152;
  void *__dst;
  unint64_t v1154;
  uint64_t **v1155;
  char *v1156;
  uint64_t v1157;
  void *v1158;
  char *v1159;
  uint64_t v1160;
  char **v1161;
  char *v1162;
  uint64_t v1163;
  char **v1164;
  char *v1165;
  uint64_t v1166;
  void **v1167;
  int64x2_t __p[25];
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  __int128 v1174;
  __int128 v1175;
  float32x4_t *v1176;
  uint64_t v1177;
  float32x4_t *v1178;
  uint64_t v1179;
  uint64_t v1180;
  _WORD __src[200];
  int v1182;
  int v1183;
  int v1184;
  int v1185;
  char v1186[32];
  uint64_t v1187;

  v1187 = *MEMORY[0x1E0C80C00];
  v1166 = 0;
  v1165 = 0;
  v1164 = &v1165;
  v9 = (const void **)a3[1];
  v10 = (const void ***)(a3 + 2);
  if (v9 != a3 + 2)
  {
    do
    {
      sub_19C098AD0((uint64_t **)&v1164, (uint64_t *)&v1165, v9 + 4, (uint64_t)(v9 + 4));
      v13 = (const void **)v9[1];
      if (v13)
      {
        do
        {
          v14 = (const void ***)v13;
          v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (const void ***)v9[2];
          v94 = *v14 == v9;
          v9 = (const void **)v14;
        }
        while (!v94);
      }
      v9 = (const void **)v14;
    }
    while (v14 != v10);
  }
  v1163 = 0;
  v1162 = 0;
  v1161 = &v1162;
  v11 = (const void **)a3[4];
  if (v11 != a3 + 5)
  {
    do
    {
      sub_19C098AD0((uint64_t **)&v1161, (uint64_t *)&v1162, v11 + 4, (uint64_t)(v11 + 4));
      v15 = (const void **)v11[1];
      if (v15)
      {
        do
        {
          v16 = (const void ***)v15;
          v15 = (const void **)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (const void ***)v11[2];
          v94 = *v16 == v11;
          v11 = (const void **)v16;
        }
        while (!v94);
      }
      v11 = (const void **)v16;
    }
    while (v16 != a3 + 5);
  }
  v1159 = 0;
  v1158 = 0;
  v1160 = 0;
  sub_19C1B8190(&v1158, a3[15], a3[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[16] - a3[15]) >> 3));
  v1157 = 0;
  v1156 = 0;
  v1155 = (uint64_t **)&v1156;
  v12 = (uint64_t *)v1164;
  if (v1164 != &v1165)
  {
    do
    {
      if (*((char *)v12 + 55) < 0)
      {
        sub_19C07C6E8(__p, (void *)v12[4], v12[5]);
      }
      else
      {
        __p[0] = *((int64x2_t *)v12 + 2);
        __p[1].i64[0] = v12[6];
      }
      v17 = v1157;
      v1110[0] = __p;
      *((_WORD *)sub_19C1B8564((uint64_t **)&v1155, (const void **)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)v1110) + 28) = v17 + 1;
      if (__p[1].i8[7] < 0)
      {
        operator delete((void *)__p[0].i64[0]);
        v18 = (char *)v12[1];
        if (v18)
        {
          do
          {
LABEL_27:
            v19 = (char **)v18;
            v18 = *(char **)v18;
          }
          while (v18);
          goto LABEL_19;
        }
      }
      else
      {
        v18 = (char *)v12[1];
        if (v18)
          goto LABEL_27;
      }
      do
      {
        v19 = (char **)v12[2];
        v94 = *v19 == (char *)v12;
        v12 = (uint64_t *)v19;
      }
      while (!v94);
LABEL_19:
      v12 = (uint64_t *)v19;
    }
    while (v19 != &v1165);
  }
  v20 = (char *)v1158;
  v21 = v1159;
  if (v1158 == v1159)
  {
    v25 = (char *)v1158;
  }
  else
  {
    do
    {
      if (v20[23] < 0)
      {
        v23 = v20;
        sub_19C07C6E8(__p, *(void **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v22 = *(int64x2_t *)v20;
        v23 = v20;
        __p[1].i64[0] = *((_QWORD *)v20 + 2);
        __p[0] = v22;
      }
      v24 = v1157;
      v1110[0] = __p;
      *((_WORD *)sub_19C1B8564((uint64_t **)&v1155, (const void **)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)v1110) + 28) = v24 + 1;
      if (__p[1].i8[7] < 0)
        operator delete((void *)__p[0].i64[0]);
      v20 = v23 + 24;
    }
    while (v23 + 24 != v21);
    v25 = v1159;
    v20 = (char *)v1158;
  }
  v26 = *a6;
  v1182 = 1001;
  v1183 = v26;
  v27 = v1163 + v1166 - 1431655765 * ((unint64_t)(v25 - v20) >> 3);
  v1184 = v27;
  v28 = *((unsigned __int8 *)a5 + 23);
  if ((v28 & 0x80) == 0)
  {
    if (v28 <= 0x1F)
      goto LABEL_47;
LABEL_1620:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Model name cannot be greater than 31 characters.");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20DE0;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D1D168, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (*((_QWORD *)a5 + 1) > 0x1FuLL)
    goto LABEL_1620;
  a5 = *(const char **)a5;
LABEL_47:
  strcpy(v1186, a5);
  v1185 = 88;
  __dst = 0;
  v1152 = 0;
  v1154 = 0;
  v1150 = 0;
  v1149 = 0;
  v1151 = 0;
  v29 = (uint64_t *)v1164;
  v1081 = (uint64_t)a3;
  if (v1164 == &v1165)
    goto LABEL_83;
  v1083 = v27;
  do
  {
    if (*((char *)v29 + 55) < 0)
    {
      sub_19C07C6E8(v1110, (void *)v29[4], v29[5]);
    }
    else
    {
      *(_OWORD *)v1110 = *((_OWORD *)v29 + 2);
      *(_QWORD *)&v1111[0] = v29[6];
    }
    bzero(__p, 0x190uLL);
    v30 = BYTE7(v1111[0]);
    if ((SBYTE7(v1111[0]) & 0x80u) == 0)
      v31 = v1110;
    else
      v31 = (void **)v1110[0];
    strcpy(__p[0].i8, (const char *)v31);
    __p[2].i8[0] = -6;
    v32 = (char *)__dst;
    if ((unint64_t)__dst >= v1154)
    {
      v34 = (char *)v1152;
      v35 = 0x8F5C28F5C28F5C29 * (((_BYTE *)__dst - (_BYTE *)v1152) >> 4);
      v36 = v35 + 1;
      if (v35 + 1 > 0xA3D70A3D70A3D7)
        sub_19C07DA0C();
      if (0x1EB851EB851EB852 * ((uint64_t)(v1154 - (_QWORD)v1152) >> 4) > v36)
        v36 = 0x1EB851EB851EB852 * ((uint64_t)(v1154 - (_QWORD)v1152) >> 4);
      if (0x8F5C28F5C28F5C29 * ((uint64_t)(v1154 - (_QWORD)v1152) >> 4) >= 0x51EB851EB851EBLL)
        v37 = 0xA3D70A3D70A3D7;
      else
        v37 = v36;
      if (v37)
      {
        if (v37 > 0xA3D70A3D70A3D7)
          sub_19C07C7FC();
        v38 = (char *)operator new(400 * v37);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[400 * v35];
      memcpy(v39, __p, 0x190uLL);
      v40 = v39;
      if (v32 != v34)
      {
        do
        {
          v32 -= 400;
          v40 -= 400;
          memcpy(v40, v32, 0x190uLL);
        }
        while (v32 != v34);
        v32 = v34;
      }
      v1152 = v40;
      __dst = v39 + 400;
      v1154 = (unint64_t)&v38[400 * v37];
      if (v32)
      {
        operator delete(v32);
        v30 = BYTE7(v1111[0]);
      }
      __dst = v39 + 400;
      if ((v30 & 0x80) == 0)
      {
LABEL_58:
        v33 = (char *)v29[1];
        if (!v33)
          goto LABEL_79;
        goto LABEL_77;
      }
    }
    else
    {
      memcpy(__dst, __p, 0x190uLL);
      __dst = v32 + 400;
      if ((v30 & 0x80) == 0)
        goto LABEL_58;
    }
    operator delete(v1110[0]);
    v33 = (char *)v29[1];
    if (!v33)
    {
      do
      {
LABEL_79:
        v41 = (char **)v29[2];
        v94 = *v41 == (char *)v29;
        v29 = (uint64_t *)v41;
      }
      while (!v94);
      goto LABEL_49;
    }
    do
    {
LABEL_77:
      v41 = (char **)v33;
      v33 = *(char **)v33;
    }
    while (v33);
LABEL_49:
    v29 = (uint64_t *)v41;
  }
  while (v41 != &v1165);
  v20 = (char *)v1158;
  v25 = v1159;
  v27 = v1083;
LABEL_83:
  *(_OWORD *)v1147 = 0u;
  *(_OWORD *)v1146 = 0u;
  v1148 = 1065353216;
  if (v20 != v25)
  {
    v1059 = v25;
    v42 = 0;
    v1082 = 0;
    v1084 = 0;
    v1080 = 400 * v27 + 88;
    v1064 = (_QWORD *)(a4 + 8);
    v1071 = (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
    while (2)
    {
      if (v20[23] < 0)
      {
        sub_19C07C6E8(v1144, *(void **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v43 = *(_OWORD *)v20;
        v1145 = *((_QWORD *)v20 + 2);
        *(_OWORD *)v1144 = v43;
      }
      bzero(__src, 0x190uLL);
      if (v1145 >= 0)
        v44 = v1144;
      else
        v44 = (void **)v1144[0];
      strcpy((char *)__src, (const char *)v44);
      v1175 = 0u;
      v1174 = 0u;
      v1173 = 0u;
      v1172 = 0u;
      v1171 = 0u;
      v1170 = 0u;
      v1169 = 0u;
      memset(__p, 0, sizeof(__p));
      sub_19C233EB0(v1081, (uint64_t)v1144);
      v1063 = v20;
      HIBYTE(__src[19]) = 9;
      v45.i64[1] = __p[0].i64[1];
      v46 = vmovn_s64(__p[1]);
      *(int32x2_t *)v45.i8 = vmovn_s64(__p[0]);
      v45.i16[1] = v45.i16[2];
      v45.i16[2] = v46.i16[0];
      v45.i16[3] = v46.i16[2];
      *(_DWORD *)&__src[16] = vmovn_s16(v45).u32[0];
      LOBYTE(__src[18]) = __p[2].i8[0];
      HIBYTE(__src[18]) = __p[2].i8[8];
      LOBYTE(__src[19]) = __p[3].i8[0];
      *(int8x8_t *)&__src[20] = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32(*(int32x4_t *)((char *)&__p[3] + 8), *(int32x4_t *)((char *)&__p[4] + 8)), (int16x8_t)vuzp1q_s32(*(int32x4_t *)((char *)&__p[5] + 8), *(int32x4_t *)((char *)&__p[6] + 8))));
      *(_DWORD *)&__src[24] = __p[7].i32[2];
      *(int64x2_t *)&__src[58] = __p[12];
      *(int64x2_t *)&__src[66] = __p[13];
      *(int64x2_t *)&__src[74] = __p[14];
      *(int64x2_t *)&__src[82] = __p[15];
      *(int64x2_t *)&__src[26] = __p[8];
      *(int64x2_t *)&__src[34] = __p[9];
      *(int64x2_t *)&__src[42] = __p[10];
      *(int64x2_t *)&__src[50] = __p[11];
      *(int64x2_t *)&__src[90] = __p[16];
      *(int64x2_t *)&__src[98] = __p[17];
      *(int64x2_t *)&__src[106] = __p[18];
      *(int64x2_t *)&__src[114] = __p[19];
      *(int64x2_t *)&__src[122] = __p[20];
      *(int64x2_t *)&__src[130] = __p[21];
      *(int64x2_t *)&__src[138] = __p[22];
      *(int64x2_t *)&__src[146] = __p[23];
      *(_OWORD *)&__src[170] = v1170;
      *(_OWORD *)&__src[178] = v1171;
      *(int64x2_t *)&__src[154] = __p[24];
      *(_OWORD *)&__src[162] = v1169;
      sub_19C233720(v1081, (uint64_t)v1144, (char **)v1141);
      v47 = (void **)v1141[0];
      v48 = (void **)v1141[1];
      if (v1141[0] == v1141[1])
      {
        if (v1141[0])
          goto LABEL_94;
LABEL_169:
        v50 = *v1064;
        if (!*v1064)
        {
LABEL_213:
          v1076 = 0;
          v103 = LOBYTE(__src[18]);
          v1068 = 1;
          v104 = 0;
          v105 = 0;
          goto LABEL_214;
        }
      }
      else
      {
        do
        {
          if (*((char *)v47 + 23) < 0)
          {
            sub_19C07C6E8(v1110, *v47, (unint64_t)v47[1]);
          }
          else
          {
            v51 = *(_OWORD *)v47;
            *(_QWORD *)&v1111[0] = v47[2];
            *(_OWORD *)v1110 = v51;
          }
          v52 = *((_DWORD *)v47 + 6);
          DWORD2(v1111[0]) = v52;
          if (v52)
          {
            v53 = v1156;
            v54 = &v1156;
            v55 = &v1156;
            if (v1156)
            {
              if ((SBYTE7(v1111[0]) & 0x80u) == 0)
                v56 = (void *)BYTE7(v1111[0]);
              else
                v56 = v1110[1];
              if ((SBYTE7(v1111[0]) & 0x80u) == 0)
                v57 = v1110;
              else
                v57 = (void **)v1110[0];
              while (1)
              {
                while (1)
                {
                  v54 = (char **)v53;
                  v60 = (char *)*((_QWORD *)v53 + 4);
                  v58 = v53 + 32;
                  v59 = v60;
                  v61 = v58[23];
                  if (v61 >= 0)
                    v62 = v58[23];
                  else
                    v62 = *((_QWORD *)v58 + 1);
                  if (v61 >= 0)
                    v63 = v58;
                  else
                    v63 = v59;
                  if (v62 >= (unint64_t)v56)
                    v64 = (size_t)v56;
                  else
                    v64 = v62;
                  v65 = memcmp(v57, v63, v64);
                  v66 = (unint64_t)v56 < v62;
                  if (v65)
                    v66 = v65 < 0;
                  if (!v66)
                    break;
                  v53 = *v54;
                  v55 = v54;
                  if (!*v54)
                    goto LABEL_127;
                }
                v67 = memcmp(v63, v57, v64);
                v68 = v62 < (unint64_t)v56;
                if (v67)
                  v68 = v67 < 0;
                if (!v68)
                  break;
                v53 = v54[1];
                if (!v53)
                {
                  v55 = v54 + 1;
                  goto LABEL_127;
                }
              }
              v82 = *((_WORD *)v54 + 28);
            }
            else
            {
LABEL_127:
              v69 = (char *)operator new(0x40uLL);
              v70 = v69 + 32;
              if (SBYTE7(v1111[0]) < 0)
              {
                sub_19C07C6E8(v70, v1110[0], (unint64_t)v1110[1]);
              }
              else
              {
                *(_OWORD *)v70 = *(_OWORD *)v1110;
                *((_QWORD *)v69 + 6) = *(_QWORD *)&v1111[0];
              }
              *((_WORD *)v69 + 28) = 0;
              *(_QWORD *)v69 = 0;
              *((_QWORD *)v69 + 1) = 0;
              *((_QWORD *)v69 + 2) = v54;
              *v55 = v69;
              if (*v1155)
              {
                v1155 = (uint64_t **)*v1155;
                v69 = *v55;
              }
              v71 = v1156;
              v94 = v69 == v1156;
              v69[24] = v69 == v1156;
              if (!v94)
              {
                do
                {
                  v72 = *((_QWORD *)v69 + 2);
                  if (*(_BYTE *)(v72 + 24))
                    break;
                  v73 = *(char **)(v72 + 16);
                  v74 = *(_QWORD *)v73;
                  if (*(_QWORD *)v73 == v72)
                  {
                    v77 = *((_QWORD *)v73 + 1);
                    if (!v77 || (v78 = *(unsigned __int8 *)(v77 + 24), v75 = (_BYTE *)(v77 + 24), v78))
                    {
                      if (*(char **)v72 == v69)
                      {
                        *(_BYTE *)(v72 + 24) = 1;
                        v73[24] = 0;
                        v81 = *(_QWORD *)(v72 + 8);
                        *(_QWORD *)v73 = v81;
                        if (v81)
                          goto LABEL_147;
                      }
                      else
                      {
                        v79 = *(uint64_t **)(v72 + 8);
                        v80 = *v79;
                        *(_QWORD *)(v72 + 8) = *v79;
                        if (v80)
                        {
                          *(_QWORD *)(v80 + 16) = v72;
                          v73 = *(char **)(v72 + 16);
                        }
                        v79[2] = (uint64_t)v73;
                        *(_QWORD *)(*(_QWORD *)(v72 + 16) + 8 * (**(_QWORD **)(v72 + 16) != v72)) = v79;
                        *v79 = v72;
                        *(_QWORD *)(v72 + 16) = v79;
                        v73 = (char *)v79[2];
                        v72 = *(_QWORD *)v73;
                        *((_BYTE *)v79 + 24) = 1;
                        v73[24] = 0;
                        v81 = *(_QWORD *)(v72 + 8);
                        *(_QWORD *)v73 = v81;
                        if (v81)
LABEL_147:
                          *(_QWORD *)(v81 + 16) = v73;
                      }
                      *(_QWORD *)(v72 + 16) = *((_QWORD *)v73 + 2);
                      *(_QWORD *)(*((_QWORD *)v73 + 2) + 8 * (**((_QWORD **)v73 + 2) != (_QWORD)v73)) = v72;
                      *(_QWORD *)(v72 + 8) = v73;
LABEL_158:
                      *((_QWORD *)v73 + 2) = v72;
                      break;
                    }
                  }
                  else if (!v74 || (v76 = *(unsigned __int8 *)(v74 + 24), v75 = (_BYTE *)(v74 + 24), v76))
                  {
                    if (*(char **)v72 == v69)
                    {
                      v83 = *((_QWORD *)v69 + 1);
                      *(_QWORD *)v72 = v83;
                      if (v83)
                      {
                        *(_QWORD *)(v83 + 16) = v72;
                        v73 = *(char **)(v72 + 16);
                      }
                      *((_QWORD *)v69 + 2) = v73;
                      *(_QWORD *)(*(_QWORD *)(v72 + 16) + 8 * (**(_QWORD **)(v72 + 16) != v72)) = v69;
                      *((_QWORD *)v69 + 1) = v72;
                      *(_QWORD *)(v72 + 16) = v69;
                      v73 = (char *)*((_QWORD *)v69 + 2);
                    }
                    else
                    {
                      v69 = (char *)*((_QWORD *)v69 + 2);
                    }
                    v69[24] = 1;
                    v73[24] = 0;
                    v72 = *((_QWORD *)v73 + 1);
                    v84 = *(char **)v72;
                    *((_QWORD *)v73 + 1) = *(_QWORD *)v72;
                    if (v84)
                      *((_QWORD *)v84 + 2) = v73;
                    *(_QWORD *)(v72 + 16) = *((_QWORD *)v73 + 2);
                    *(_QWORD *)(*((_QWORD *)v73 + 2) + 8 * (**((_QWORD **)v73 + 2) != (_QWORD)v73)) = v72;
                    *(_QWORD *)v72 = v73;
                    goto LABEL_158;
                  }
                  *(_BYTE *)(v72 + 24) = 1;
                  v69 = v73;
                  v73[24] = v73 == v71;
                  *v75 = 1;
                }
                while (v73 != v71);
              }
              v82 = 0;
              ++v1157;
              v52 = DWORD2(v1111[0]);
            }
            __src[v52 + 185] = v82;
          }
          if (SBYTE7(v1111[0]) < 0)
            operator delete(v1110[0]);
          v47 += 4;
        }
        while (v47 != v48);
        v47 = (void **)v1141[0];
        if (!v1141[0])
          goto LABEL_169;
LABEL_94:
        v49 = (void **)v1141[1];
        if (v1141[1] == v47)
        {
          v1141[1] = v47;
          operator delete(v47);
          v50 = *v1064;
          if (!*v1064)
            goto LABEL_213;
        }
        else
        {
          do
          {
            if (*((char *)v49 - 9) < 0)
              operator delete(*(v49 - 4));
            v49 -= 4;
          }
          while (v49 != v47);
          v1141[1] = v47;
          operator delete(v1141[0]);
          v50 = *v1064;
          if (!*v1064)
            goto LABEL_213;
        }
      }
      if (v1145 >= 0)
        v85 = (void *)HIBYTE(v1145);
      else
        v85 = v1144[1];
      if (v1145 >= 0)
        v86 = v1144;
      else
        v86 = (void **)v1144[0];
      v87 = v1064;
      do
      {
        v88 = *(char *)(v50 + 55);
        if (v88 >= 0)
          v89 = *(unsigned __int8 *)(v50 + 55);
        else
          v89 = *(_QWORD *)(v50 + 40);
        if (v88 >= 0)
          v90 = (const void *)(v50 + 32);
        else
          v90 = *(const void **)(v50 + 32);
        if ((unint64_t)v85 >= v89)
          v91 = v89;
        else
          v91 = (size_t)v85;
        v92 = memcmp(v90, v86, v91);
        v93 = v89 < (unint64_t)v85;
        if (v92)
          v93 = v92 < 0;
        v94 = !v93;
        if (v93)
          v95 = (uint64_t *)(v50 + 8);
        else
          v95 = (uint64_t *)v50;
        if (v94)
          v87 = (_QWORD *)v50;
        v50 = *v95;
      }
      while (*v95);
      if (v87 == v1064)
        goto LABEL_213;
      v96 = *((char *)v87 + 55);
      if (v96 >= 0)
        v97 = *((unsigned __int8 *)v87 + 55);
      else
        v97 = v87[5];
      if (v96 >= 0)
        v98 = v87 + 4;
      else
        v98 = (const void *)v87[4];
      if (v97 >= (unint64_t)v85)
        v99 = (size_t)v85;
      else
        v99 = v97;
      v100 = memcmp(v86, v98, v99);
      v101 = (unint64_t)v85 >= v97;
      if (v100)
        v101 = v100 >= 0;
      if (!v101 || __p[2].i64[0] != 0)
        goto LABEL_213;
      v1068 = 0;
      v105 = *((_DWORD *)v87 + 14);
      v104 = *((_DWORD *)v87 + 15);
      v103 = 2;
      LOBYTE(__src[18]) = 2;
      *(_DWORD *)&__src[182] = v105;
      *(_DWORD *)&__src[184] = v104;
      v1076 = 1;
LABEL_214:
      v1077 = v103;
      if (v103 == 2)
        v106 = 1;
      else
        v106 = 4;
      *(_DWORD *)&__src[194] = v1080;
      v107 = __p[0].i64[0];
      v1087 = v42;
      switch(__p[0].i64[0])
      {
        case 0:
          if ((__p[7].i16[4] & 0x100) != 0)
            *(_DWORD *)&__src[24] |= 0x100u;
          v179 = (__p[16].i32[0] * __p[8].i32[0]) << (2 * (v103 != 2));
          if ((__p[7].i16[4] & 0x100) != 0)
            v180 = 0;
          else
            v180 = 4 * __p[16].i32[0];
          v181 = (float32x4_t *)v1172;
          v182 = v1082;
          if ((unint64_t)v1082 >= v1084)
            goto LABEL_302;
          goto LABEL_300;
        case 1:
          v248 = (float32x4_t *)v1172;
          v249 = v1178;
          v250 = __p[8].i32[2];
          if (__p[8].i32[2] <= 1u)
            v250 = __p[8].i32[0];
          v251 = v250;
          if ((__p[7].i8[8] & 0x40) != 0)
          {
            v255 = v103;
          }
          else
          {
            *(_DWORD *)&__src[24] |= 0x40u;
            v252 = (float32x4_t *)*((_QWORD *)&v1172 + 1);
            v253 = (float32x4_t *)v1173;
            v1110[0] = 0;
            v1110[1] = 0;
            *(_QWORD *)&v1111[0] = 0;
            v254 = 4 * v250;
            v255 = v103;
            if (v250)
            {
              if (v250 < 0)
                sub_19C07DA0C();
              v256 = (char *)operator new(4 * v250);
              v1110[0] = v256;
              *(_QWORD *)&v1111[0] = &v256[4 * v251];
              bzero(v256, 4 * v251);
              v1110[1] = &v256[v254];
            }
            v257 = v1150;
            if ((unint64_t)v1150 >= v1151)
            {
              v1150 = sub_19C1B8B78((char **)&v1149, (uint64_t)v1110);
              if (v1110[0])
              {
                v1110[1] = v1110[0];
                operator delete(v1110[0]);
              }
            }
            else
            {
              *(_QWORD *)v1150 = 0;
              *((_QWORD *)v257 + 1) = 0;
              *((_QWORD *)v257 + 2) = 0;
              *(_OWORD *)v257 = *(_OWORD *)v1110;
              *((_QWORD *)v257 + 2) = *(_QWORD *)&v1111[0];
              v1150 = v257 + 24;
            }
            v1110[0] = 0;
            v1110[1] = 0;
            *(_QWORD *)&v1111[0] = 0;
            if ((_DWORD)v251)
            {
              v850 = (char *)operator new(4 * v251);
              v1110[0] = v850;
              *(_QWORD *)&v1111[0] = &v850[4 * v251];
              bzero(v850, 4 * v251);
              v1110[1] = &v850[v254];
            }
            v851 = v1150;
            if ((unint64_t)v1150 >= v1151)
            {
              v852 = sub_19C1B8B78((char **)&v1149, (uint64_t)v1110);
              v1150 = v852;
              if (v1110[0])
              {
                v1110[1] = v1110[0];
                operator delete(v1110[0]);
                v852 = v1150;
              }
            }
            else
            {
              *(_QWORD *)v1150 = 0;
              *((_QWORD *)v851 + 1) = 0;
              *((_QWORD *)v851 + 2) = 0;
              *(_OWORD *)v851 = *(_OWORD *)v1110;
              *((_QWORD *)v851 + 2) = *(_QWORD *)&v1111[0];
              v852 = v851 + 24;
              v1150 = v851 + 24;
            }
            sub_19C2428C8(v251, v248, v249, v252, v253, v1110);
            v853 = (float32x4_t **)(v852 - 24);
            v854 = (void *)*((_QWORD *)v852 - 3);
            if (v854)
            {
              *((_QWORD *)v852 - 2) = v854;
              operator delete(v854);
              *v853 = 0;
              *((_QWORD *)v852 - 2) = 0;
              *((_QWORD *)v852 - 1) = 0;
            }
            v855 = (float32x4_t **)(v852 - 48);
            *(_OWORD *)(v852 - 24) = *(_OWORD *)v1110;
            *((_QWORD *)v852 - 1) = *(_QWORD *)&v1111[0];
            v1110[0] = 0;
            v1110[1] = 0;
            *(_QWORD *)&v1111[0] = 0;
            v856 = (void *)*((_QWORD *)v852 - 6);
            if (v856)
            {
              *((_QWORD *)v852 - 5) = v856;
              operator delete(v856);
              *v855 = 0;
              *((_QWORD *)v852 - 5) = 0;
              *((_QWORD *)v852 - 4) = 0;
            }
            *((_OWORD *)v852 - 3) = *(_OWORD *)((char *)v1111 + 8);
            *((_QWORD *)v852 - 4) = *((_QWORD *)&v1111[1] + 1);
            memset((char *)v1111 + 8, 0, 24);
            if (v1110[0])
            {
              v1110[1] = v1110[0];
              operator delete(v1110[0]);
            }
            v248 = *v853;
            v249 = *v855;
          }
          v857 = (_DWORD)v251 << (2 * (v255 != 2));
          if ((unint64_t)v1082 < v1084)
          {
            *v1082 = v248;
            *((_DWORD *)v1082 + 2) = v857;
            *((_BYTE *)v1082 + 12) = v1076;
            v858 = v1082 + 3;
            *((_DWORD *)v1082 + 4) = v105;
            *((_DWORD *)v1082 + 5) = v104;
            goto LABEL_1168;
          }
          v859 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
          if (v859 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v859)
            v859 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
            v860 = 0xAAAAAAAAAAAAAAALL;
          else
            v860 = v859;
          if (v860 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v861 = (char *)operator new(24 * v860);
          v862 = (float32x4_t **)&v861[8 * (((char *)v1082 - v42) >> 3)];
          *v862 = v248;
          v858 = v862 + 3;
          v863 = &v861[(char *)v1082 - v42];
          *((_DWORD *)v863 + 2) = v857;
          v863[12] = v1076;
          *((_DWORD *)v863 + 4) = v105;
          *((_DWORD *)v863 + 5) = v104;
          if (v1082 == (float32x4_t **)v42)
          {
            v866 = (float32x4_t **)&v861[8 * (((char *)v1082 - v42) >> 3)];
            v1084 = (unint64_t)&v861[24 * v860];
            if (v42)
LABEL_1166:
              operator delete(v42);
          }
          else
          {
            v864 = (char *)v1082;
            do
            {
              v865 = *(_OWORD *)(v864 - 24);
              v866 = v862 - 3;
              *(v862 - 1) = (float32x4_t *)*((_QWORD *)v864 - 1);
              *(_OWORD *)(v862 - 3) = v865;
              v864 -= 24;
              v862 -= 3;
            }
            while (v864 != v42);
            v1084 = (unint64_t)&v861[24 * v860];
            if (v42)
              goto LABEL_1166;
          }
          v42 = (char *)v866;
LABEL_1168:
          if (v857 <= 0)
            v867 = -(-v857 & 3);
          else
            v867 = v857 & 3;
          if (v867)
            v857 = v857 - v867 + 8;
          v868 = *(_DWORD *)&__src[196] | 1;
          *(_DWORD *)&__src[196] |= 1u;
          v869 = __p[8].i32[2];
          if (__p[8].i32[2] <= 1)
            v869 = __p[8].i32[0];
          v870 = 4 * v869;
          if ((unint64_t)v858 < v1084)
          {
            *v858 = v249;
            *((_DWORD *)v858 + 2) = v870;
            *((_BYTE *)v858 + 12) = 0;
            v1082 = v858 + 3;
            v858[2] = 0;
            goto LABEL_1189;
          }
          v871 = 0xAAAAAAAAAAAAAAABLL * (((char *)v858 - v42) >> 3) + 1;
          if (v871 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v871)
            v871 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
            v872 = 0xAAAAAAAAAAAAAAALL;
          else
            v872 = v871;
          if (v872 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v873 = (char *)operator new(24 * v872);
          v874 = (float32x4_t **)&v873[8 * (((char *)v858 - v42) >> 3)];
          *v874 = v249;
          v1082 = v874 + 3;
          v875 = &v873[(char *)v858 - v42];
          *((_DWORD *)v875 + 2) = v870;
          v875[12] = 0;
          *((_QWORD *)v875 + 2) = 0;
          if (v858 == (float32x4_t **)v42)
          {
            v877 = (float32x4_t **)&v873[8 * (((char *)v858 - v42) >> 3)];
            v1084 = (unint64_t)&v873[24 * v872];
            if (!v42)
              goto LABEL_1188;
          }
          else
          {
            do
            {
              v876 = *(_OWORD *)(v858 - 3);
              v877 = v874 - 3;
              *(v874 - 1) = *(v858 - 1);
              *(_OWORD *)(v874 - 3) = v876;
              v858 -= 3;
              v874 -= 3;
            }
            while (v858 != (float32x4_t **)v42);
            v1084 = (unint64_t)&v873[24 * v872];
            if (!v42)
              goto LABEL_1188;
          }
          operator delete(v42);
          v868 = *(_DWORD *)&__src[196];
LABEL_1188:
          v42 = (char *)v877;
LABEL_1189:
          v1080 += v857 + v870;
          *(_DWORD *)&__src[196] = v868 | 0x10000;
          v173 = (char *)__dst;
          v174 = v1154;
          if ((unint64_t)__dst >= v1154)
            goto LABEL_1190;
          goto LABEL_1302;
        case 4:
        case 0x17:
          if (__p[22].i32[0] == 1)
          {
            *(_DWORD *)&__src[138] = 1;
            *(_DWORD *)&__src[196] |= 1u;
            v108 = __dst;
            v109 = v1152;
            v1110[0] = v1144;
            v110 = sub_19C1B8700((uint64_t)v1146, (uint64_t)v1144, (uint64_t)&unk_19C27ADD0, (__int128 **)v1110);
            goto LABEL_288;
          }
          v175 = __p[8].i32[0];
          if (__p[8].i32[0] <= 1u)
            v175 = 1;
          v176 = (__p[16].i32[0] / v175 * __p[20].i32[0]) << (2 * (v1077 != 2));
          v177 = v1172;
          if ((unint64_t)v1082 < v1084)
          {
            *v1082 = (float32x4_t *)v1172;
            *((_DWORD *)v1082 + 2) = v176;
            *((_BYTE *)v1082 + 12) = v1076;
            v178 = v1082 + 3;
            *((_DWORD *)v1082 + 4) = v105;
            *((_DWORD *)v1082 + 5) = v104;
            goto LABEL_481;
          }
          v337 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
          if (v337 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v337)
            v337 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
            v338 = 0xAAAAAAAAAAAAAAALL;
          else
            v338 = v337;
          if (v338 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v339 = (char *)operator new(24 * v338);
          v340 = &v339[8 * (((char *)v1082 - v42) >> 3)];
          *(_QWORD *)v340 = v177;
          v178 = (float32x4_t **)(v340 + 24);
          v341 = &v339[(char *)v1082 - v42];
          *((_DWORD *)v341 + 2) = v176;
          v341[12] = v1076;
          *((_DWORD *)v341 + 4) = v105;
          *((_DWORD *)v341 + 5) = v104;
          if (v1082 == (float32x4_t **)v42)
          {
            v344 = &v339[8 * (((char *)v1082 - v42) >> 3)];
            v1084 = (unint64_t)&v339[24 * v338];
            if (v42)
LABEL_479:
              operator delete(v42);
          }
          else
          {
            v342 = (char *)v1082;
            do
            {
              v343 = *(_OWORD *)(v342 - 24);
              v344 = v340 - 24;
              *((_QWORD *)v340 - 1) = *((_QWORD *)v342 - 1);
              *(_OWORD *)(v340 - 24) = v343;
              v342 -= 24;
              v340 -= 24;
            }
            while (v342 != v42);
            v1084 = (unint64_t)&v339[24 * v338];
            if (v42)
              goto LABEL_479;
          }
          v42 = v344;
LABEL_481:
          *(_DWORD *)&__src[196] |= 1u;
          if (v176 <= 0)
            v345 = -(-v176 & 3);
          else
            v345 = v176 & 3;
          if (v345)
            v346 = v176 - v345 + 8;
          else
            v346 = v176;
          v1080 += v346;
          v1082 = v178;
          v173 = (char *)__dst;
          v174 = v1154;
          if ((unint64_t)__dst < v1154)
            goto LABEL_1302;
          goto LABEL_1190;
        case 5:
        case 6:
          v111 = __p[16].i32[0];
          v112 = __p[8].i32[0];
          if (__p[20].i32[0] <= 0)
            v113 = __p[16].i32[0];
          else
            v113 = __p[20].i32[0];
          v1057 = v113 * __p[16].i32[0];
          v1058 = 2 * (v103 != 2);
          v114 = 4 * v113;
          v1062 = v113;
          v1074 = 16 * v113;
          v1069 = v1175;
          if ((__p[7].i8[8] & 0x20) == 0)
          {
            v115 = (int *)operator new(4uLL);
            v116 = v115;
            *v115 = 0;
            v117 = v115 + 1;
            if (v107 == 6)
            {
              v118 = (int *)operator new(8uLL);
              *(_QWORD *)v118 = 0x200000000;
              v117 = v118 + 2;
              operator delete(v116);
              v119 = v118;
            }
            else
            {
              v119 = v115;
            }
            v367 = (4 * v1057) << v1058;
            v1090 = (v114 * v112) << v1058;
            v1066 = v119;
            while (1)
            {
              v370 = &__p[0].i64[*v119];
              v371 = v370[56];
              if ((unint64_t)v1082 < v1084)
              {
                *v1082 = (float32x4_t *)v371;
                *((_DWORD *)v1082 + 2) = v1090;
                *((_BYTE *)v1082 + 12) = v1076;
                v372 = (uint64_t *)(v1082 + 3);
                *((_DWORD *)v1082 + 4) = v105;
                *((_DWORD *)v1082 + 5) = v104;
                goto LABEL_526;
              }
              v373 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
              if (v373 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              v374 = v42;
              if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v373)
                v373 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                v375 = 0xAAAAAAAAAAAAAAALL;
              else
                v375 = v373;
              if (v375 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v376 = (char *)operator new(24 * v375);
              v377 = v1082;
              v378 = &v376[8 * (((char *)v1082 - v42) >> 3)];
              *(_QWORD *)v378 = v371;
              v372 = (uint64_t *)(v378 + 24);
              v379 = &v376[(char *)v1082 - v42];
              *((_DWORD *)v379 + 2) = v1090;
              v379[12] = v1076;
              *((_DWORD *)v379 + 4) = v105;
              *((_DWORD *)v379 + 5) = v104;
              if (v1082 == (float32x4_t **)v42)
              {
                v42 = &v376[8 * (((char *)v1082 - v42) >> 3)];
                v1084 = (unint64_t)&v376[24 * v375];
                if (v374)
                  goto LABEL_525;
              }
              else
              {
                do
                {
                  v380 = *(_OWORD *)(v377 - 3);
                  v42 = v378 - 24;
                  *((_QWORD *)v378 - 1) = *(v377 - 1);
                  *(_OWORD *)(v378 - 24) = v380;
                  v377 -= 3;
                  v378 -= 24;
                }
                while (v377 != (float32x4_t **)v374);
                v1084 = (unint64_t)&v376[24 * v375];
                if (v374)
LABEL_525:
                  operator delete(v374);
              }
LABEL_526:
              v381 = v370[72];
              if ((unint64_t)v372 < v1084)
              {
                *v372 = v381;
                *((_DWORD *)v372 + 2) = v1074;
                *((_BYTE *)v372 + 12) = 0;
                v382 = v372 + 3;
                v372[2] = 0;
                goto LABEL_539;
              }
              v383 = v42;
              v384 = (char *)v372 - v42;
              v385 = 0xAAAAAAAAAAAAAAABLL * (v384 >> 3) + 1;
              if (v385 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              v386 = (uint64_t *)v383;
              v387 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v383) >> 3);
              if (2 * v387 > v385)
                v385 = 2 * v387;
              if (v387 >= 0x555555555555555)
                v388 = 0xAAAAAAAAAAAAAAALL;
              else
                v388 = v385;
              if (v388 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v389 = (char *)operator new(24 * v388);
              v390 = &v389[8 * (v384 >> 3)];
              *(_QWORD *)v390 = v381;
              v382 = (uint64_t *)(v390 + 24);
              v391 = &v389[v384];
              *((_DWORD *)v391 + 2) = v1074;
              v391[12] = 0;
              *((_QWORD *)v391 + 2) = 0;
              if (v372 == v386)
              {
                v42 = &v389[8 * (v384 >> 3)];
                v1084 = (unint64_t)&v389[24 * v388];
                if (v386)
                  goto LABEL_538;
              }
              else
              {
                do
                {
                  v392 = *(_OWORD *)(v372 - 3);
                  v42 = v390 - 24;
                  *((_QWORD *)v390 - 1) = *(v372 - 1);
                  *(_OWORD *)(v390 - 24) = v392;
                  v372 -= 3;
                  v390 -= 24;
                }
                while (v372 != v386);
                v1084 = (unint64_t)&v389[24 * v388];
                if (v386)
LABEL_538:
                  operator delete(v386);
              }
LABEL_539:
              if (v1069)
                v393 = *(float *)&v1171;
              else
                v393 = -1.0;
              if (v1069)
                v394 = *((float *)&v1171 + 1);
              else
                v394 = 1.0;
              v395 = v370[57];
              if ((unint64_t)v382 < v1084)
              {
                *v382 = v395;
                *((_DWORD *)v382 + 2) = v367;
                *((_BYTE *)v382 + 12) = v1076;
                v1082 = (float32x4_t **)(v382 + 3);
                *((float *)v382 + 4) = v393;
                *((float *)v382 + 5) = v394;
                goto LABEL_558;
              }
              v396 = (char *)v382 - v42;
              v397 = v42;
              v398 = 0xAAAAAAAAAAAAAAABLL * (((char *)v382 - v42) >> 3);
              v399 = v398 + 1;
              if (v398 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              v400 = (uint64_t *)v397;
              v401 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v397) >> 3);
              if (2 * v401 > v399)
                v399 = 2 * v401;
              if (v401 >= 0x555555555555555)
                v402 = 0xAAAAAAAAAAAAAAALL;
              else
                v402 = v399;
              if (v402 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v403 = (char *)operator new(24 * v402);
              v404 = &v403[24 * v398];
              *(_QWORD *)v404 = v395;
              v405 = (float32x4_t **)(v404 + 24);
              v406 = &v403[v396];
              *((_DWORD *)v406 + 2) = v367;
              v406[12] = v1076;
              *((float *)v406 + 4) = v393;
              *((float *)v406 + 5) = v394;
              if (v382 == v400)
              {
                v42 = &v403[24 * v398];
                v1082 = (float32x4_t **)(v404 + 24);
                v1084 = (unint64_t)&v403[24 * v402];
                if (v400)
                  goto LABEL_557;
              }
              else
              {
                do
                {
                  v407 = *(_OWORD *)(v382 - 3);
                  v42 = v404 - 24;
                  *((_QWORD *)v404 - 1) = *(v382 - 1);
                  *(_OWORD *)(v404 - 24) = v407;
                  v382 -= 3;
                  v404 -= 24;
                }
                while (v382 != v400);
                v1082 = v405;
                v1084 = (unint64_t)&v403[24 * v402];
                if (v400)
LABEL_557:
                  operator delete(v400);
              }
LABEL_558:
              v1080 += v367 + v1074 + v1090;
              v408 = v370[73];
              if (!v408)
                goto LABEL_512;
              if ((unint64_t)v1082 >= v1084)
              {
                v409 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
                if (v409 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07DA0C();
                v410 = v42;
                if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v409)
                  v409 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                  v411 = 0xAAAAAAAAAAAAAAALL;
                else
                  v411 = v409;
                if (v411 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07C7FC();
                v412 = (char *)operator new(24 * v411);
                v413 = v1082;
                v414 = &v412[8 * (((char *)v1082 - v42) >> 3)];
                *(_QWORD *)v414 = v408;
                v369 = (float32x4_t **)(v414 + 24);
                v415 = &v412[(char *)v1082 - v42];
                *((_DWORD *)v415 + 2) = v1074;
                v415[12] = 0;
                *((_QWORD *)v415 + 2) = 0;
                if (v1082 == (float32x4_t **)v42)
                {
                  v42 = &v412[8 * (((char *)v1082 - v42) >> 3)];
                  v1084 = (unint64_t)&v412[24 * v411];
                  if (v410)
                    goto LABEL_570;
                }
                else
                {
                  do
                  {
                    v416 = *(_OWORD *)(v413 - 3);
                    v42 = v414 - 24;
                    *((_QWORD *)v414 - 1) = *(v413 - 1);
                    *(_OWORD *)(v414 - 24) = v416;
                    v413 -= 3;
                    v414 -= 24;
                  }
                  while (v413 != (float32x4_t **)v410);
                  v1084 = (unint64_t)&v412[24 * v411];
                  if (v410)
LABEL_570:
                    operator delete(v410);
                }
                v368 = v1074;
                goto LABEL_511;
              }
              *v1082 = (float32x4_t *)v408;
              v368 = v1074;
              *((_DWORD *)v1082 + 2) = v1074;
              *((_BYTE *)v1082 + 12) = 0;
              v369 = v1082 + 3;
              v1082[2] = 0;
LABEL_511:
              v1080 += v368;
              v1082 = v369;
LABEL_512:
              if (++v119 == v117)
              {
                v169 = v1066;
                goto LABEL_581;
              }
            }
          }
          v169 = (int *)operator new(4uLL);
          *v169 = 0;
          v1065 = v169 + 1;
          if (v107 == 6)
          {
            v170 = v1077;
            v171 = (int *)operator new(8uLL);
            *(_QWORD *)v171 = 0x200000000;
            v1065 = v171 + 2;
            operator delete(v169);
            v172 = __p[8].i32[0] + 2 * __p[16].i32[0];
            v169 = v171;
          }
          else
          {
            v172 = v112 + v111;
            v170 = v1077;
          }
          v1070 = 2 * (v170 != 2);
          v1060 = ((v114 * v172) << v1058) + v1074;
          v1061 = (v114 * v172) << v1058;
          if (v114 <= 1)
            v438 = 1;
          else
            v438 = v114;
          v1079 = v438;
          v439 = v169;
          v1067 = v169;
          do
          {
            v1072 = &__p[0].i64[*v439];
            v1073 = v439;
            v442 = v1072[56];
            v443 = v42;
            if ((v1068 & 1) == 0)
            {
              v1110[0] = 0;
              v1110[1] = 0;
              *(_QWORD *)&v1111[0] = 0;
              v1141[1] = 0;
              v1141[0] = 0;
              v1142 = 0;
              if (v1062 >= 1)
              {
                v1092 = 0;
                LODWORD(v447) = 0;
                while (1)
                {
                  if (__p[8].i32[0] >= 1)
                  {
                    v448 = 0;
                    v447 = (int)v447;
                    v449 = (char *)v1110[1];
                    do
                    {
                      if ((unint64_t)v449 < *(_QWORD *)&v1111[0])
                      {
                        *(_DWORD *)v449 = *(_DWORD *)(v442 + 4 * v447);
                        v450 = v449 + 4;
                      }
                      else
                      {
                        v451 = (char *)v1110[0];
                        v452 = v449 - (char *)v1110[0];
                        v453 = (v449 - (char *)v1110[0]) >> 2;
                        v454 = v453 + 1;
                        if ((unint64_t)(v453 + 1) >> 62)
                          sub_19C07DA0C();
                        v455 = *(_QWORD *)&v1111[0] - (unint64_t)v1110[0];
                        if ((uint64_t)(*(_QWORD *)&v1111[0] - (unint64_t)v1110[0]) >> 1 > v454)
                          v454 = v455 >> 1;
                        if ((unint64_t)v455 >= 0x7FFFFFFFFFFFFFFCLL)
                          v456 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v456 = v454;
                        if (v456)
                        {
                          if (v456 >> 62)
                            sub_19C07C7FC();
                          v457 = operator new(4 * v456);
                          v458 = &v457[4 * v453];
                          *v458 = *(_DWORD *)(v442 + 4 * v447);
                          v450 = v458 + 1;
                          if (v449 != v451)
                          {
LABEL_641:
                            v459 = v449 - 4 - v451;
                            if (v459 < 0xBC
                              || &v457[v452 - 4 - (v459 & 0xFFFFFFFFFFFFFFFCLL)] > &v457[v452 - 4]
                              || &v449[-(v459 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v449 - 4
                              || (unint64_t)(v449 - &v457[v452]) < 0x20)
                            {
                              v460 = v449;
                              v42 = v443;
                            }
                            else
                            {
                              v462 = (v459 >> 2) + 1;
                              v463 = 4 * (v462 & 0x7FFFFFFFFFFFFFF8);
                              v460 = &v449[-v463];
                              v458 = (_DWORD *)((char *)v458 - v463);
                              v464 = &v457[4 * v453 - 16];
                              v465 = v449 - 16;
                              v466 = v462 & 0x7FFFFFFFFFFFFFF8;
                              v42 = v443;
                              do
                              {
                                v467 = *(_OWORD *)v465;
                                *(v464 - 1) = *((_OWORD *)v465 - 1);
                                *v464 = v467;
                                v464 -= 2;
                                v465 -= 32;
                                v466 -= 8;
                              }
                              while (v466);
                              if (v462 == (v462 & 0x7FFFFFFFFFFFFFF8))
                              {
LABEL_644:
                                v1110[0] = v458;
                                v1110[1] = v450;
                                *(_QWORD *)&v1111[0] = &v457[4 * v456];
                                if (!v451)
                                  goto LABEL_630;
LABEL_648:
                                operator delete(v451);
                                goto LABEL_630;
                              }
                            }
                            do
                            {
                              v461 = *((_DWORD *)v460 - 1);
                              v460 -= 4;
                              *--v458 = v461;
                            }
                            while (v460 != v451);
                            goto LABEL_644;
                          }
                        }
                        else
                        {
                          v457 = 0;
                          v458 = (_DWORD *)(4 * v453);
                          *(_DWORD *)(4 * v453) = *(_DWORD *)(v442 + 4 * v447);
                          v450 = (void *)(4 * v453 + 4);
                          if (v449 != v451)
                            goto LABEL_641;
                        }
                        v42 = v443;
                        v1110[0] = v458;
                        v1110[1] = v450;
                        *(_QWORD *)&v1111[0] = &v457[4 * v456];
                        if (v451)
                          goto LABEL_648;
                      }
LABEL_630:
                      v1110[1] = v450;
                      ++v447;
                      ++v448;
                      v449 = (char *)v450;
                    }
                    while (v448 < __p[8].i32[0]);
                  }
                  if (__p[16].i32[0] >= 1)
                    break;
LABEL_626:
                  if (++v1092 == v1079)
                    goto LABEL_685;
                }
                v468 = 0;
                v447 = (int)v447;
                v469 = (char *)v1141[1];
                while (2)
                {
                  if (v469 < v1142)
                  {
                    *(_DWORD *)v469 = *(_DWORD *)(v442 + 4 * v447);
                    v470 = v469 + 4;
                    goto LABEL_659;
                  }
                  v471 = (char *)v1141[0];
                  v472 = v469 - (char *)v1141[0];
                  v473 = (v469 - (char *)v1141[0]) >> 2;
                  v474 = v473 + 1;
                  if ((unint64_t)(v473 + 1) >> 62)
                    sub_19C07DA0C();
                  v475 = v1142 - (char *)v1141[0];
                  if ((v1142 - (char *)v1141[0]) >> 1 > v474)
                    v474 = v475 >> 1;
                  if ((unint64_t)v475 >= 0x7FFFFFFFFFFFFFFCLL)
                    v476 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v476 = v474;
                  if (v476)
                  {
                    if (v476 >> 62)
                      sub_19C07C7FC();
                    v477 = operator new(4 * v476);
                    v478 = &v477[4 * v473];
                    *v478 = *(_DWORD *)(v442 + 4 * v447);
                    v470 = v478 + 1;
                    if (v469 != v471)
                    {
LABEL_670:
                      v479 = v469 - 4 - v471;
                      if (v479 < 0xBC
                        || &v477[v472 - 4 - (v479 & 0xFFFFFFFFFFFFFFFCLL)] > &v477[v472 - 4]
                        || &v469[-(v479 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v469 - 4
                        || (unint64_t)(v469 - &v477[v472]) < 0x20)
                      {
                        v480 = v469;
                        v42 = v443;
                      }
                      else
                      {
                        v482 = (v479 >> 2) + 1;
                        v483 = 4 * (v482 & 0x7FFFFFFFFFFFFFF8);
                        v480 = &v469[-v483];
                        v478 = (_DWORD *)((char *)v478 - v483);
                        v484 = &v477[4 * v473 - 16];
                        v485 = v469 - 16;
                        v486 = v482 & 0x7FFFFFFFFFFFFFF8;
                        v42 = v443;
                        do
                        {
                          v487 = *(_OWORD *)v485;
                          *(v484 - 1) = *((_OWORD *)v485 - 1);
                          *v484 = v487;
                          v484 -= 2;
                          v485 -= 32;
                          v486 -= 8;
                        }
                        while (v486);
                        if (v482 == (v482 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_673:
                          v1141[0] = v478;
                          v1141[1] = v470;
                          v1142 = &v477[4 * v476];
                          if (!v471)
                          {
LABEL_659:
                            v1141[1] = v470;
                            ++v447;
                            ++v468;
                            v469 = (char *)v470;
                            if (v468 >= __p[16].i32[0])
                              goto LABEL_626;
                            continue;
                          }
LABEL_677:
                          operator delete(v471);
                          goto LABEL_659;
                        }
                      }
                      do
                      {
                        v481 = *((_DWORD *)v480 - 1);
                        v480 -= 4;
                        *--v478 = v481;
                      }
                      while (v480 != v471);
                      goto LABEL_673;
                    }
                  }
                  else
                  {
                    v477 = 0;
                    v478 = (_DWORD *)(4 * v473);
                    *(_DWORD *)(4 * v473) = *(_DWORD *)(v442 + 4 * v447);
                    v470 = (void *)(4 * v473 + 4);
                    if (v469 != v471)
                      goto LABEL_670;
                  }
                  break;
                }
                v42 = v443;
                v1141[0] = v478;
                v1141[1] = v470;
                v1142 = &v477[4 * v476];
                if (!v471)
                  goto LABEL_659;
                goto LABEL_677;
              }
LABEL_685:
              v488 = v1150;
              if ((unint64_t)v1150 >= v1151)
              {
                v493 = sub_19C1B8CE0((char **)&v1149, (uint64_t)v1110);
              }
              else
              {
                *(_QWORD *)v1150 = 0;
                *((_QWORD *)v488 + 1) = 0;
                *((_QWORD *)v488 + 2) = 0;
                v489 = v1110[0];
                v490 = (char *)v1110[1] - (char *)v1110[0];
                if (v1110[1] != v1110[0])
                {
                  if (v490 < 0)
                    sub_19C07DA0C();
                  v491 = (char *)operator new((char *)v1110[1] - (char *)v1110[0]);
                  *(_QWORD *)v488 = v491;
                  *((_QWORD *)v488 + 1) = v491;
                  v492 = &v491[4 * (v490 >> 2)];
                  *((_QWORD *)v488 + 2) = v492;
                  memcpy(v491, v489, v490);
                  *((_QWORD *)v488 + 1) = v492;
                }
                v493 = v488 + 24;
              }
              v1150 = v493;
              v518 = (float32x4_t *)*((_QWORD *)v493 - 3);
              v519 = (uint64_t)(*((_QWORD *)v493 - 2) - (_QWORD)v518) >> 2 << v1070;
              if ((unint64_t)v1082 < v1084)
              {
                *v1082 = v518;
                *((_DWORD *)v1082 + 2) = v519;
                *((_BYTE *)v1082 + 12) = v1076;
                v520 = (uint64_t *)(v1082 + 3);
                *((_DWORD *)v1082 + 4) = v105;
                *((_DWORD *)v1082 + 5) = v104;
                goto LABEL_746;
              }
              v521 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
              if (v521 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v521)
                v521 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                v522 = 0xAAAAAAAAAAAAAAALL;
              else
                v522 = v521;
              if (v522 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v523 = (char *)operator new(24 * v522);
              v524 = &v523[8 * (((char *)v1082 - v42) >> 3)];
              *(_QWORD *)v524 = v518;
              v520 = (uint64_t *)(v524 + 24);
              v525 = &v523[(char *)v1082 - v42];
              *((_DWORD *)v525 + 2) = v519;
              v525[12] = v1076;
              *((_DWORD *)v525 + 4) = v105;
              *((_DWORD *)v525 + 5) = v104;
              if (v1082 == (float32x4_t **)v42)
              {
                v528 = &v523[8 * (((char *)v1082 - v42) >> 3)];
                v1084 = (unint64_t)&v523[24 * v522];
                if (v42)
                  goto LABEL_744;
              }
              else
              {
                v526 = (char *)v1082;
                do
                {
                  v527 = *(_OWORD *)(v526 - 24);
                  v528 = v524 - 24;
                  *((_QWORD *)v524 - 1) = *((_QWORD *)v526 - 1);
                  *(_OWORD *)(v524 - 24) = v527;
                  v526 -= 24;
                  v524 -= 24;
                }
                while (v526 != v42);
                v1084 = (unint64_t)&v523[24 * v522];
                if (v42)
                {
LABEL_744:
                  operator delete(v42);
                  v493 = v1150;
                }
              }
              v42 = v528;
LABEL_746:
              v529 = ((*((_QWORD *)v493 - 2) - *((_QWORD *)v493 - 3)) >> 2) << v1070;
              v530 = v529 & 3;
              if (v529 <= 0)
                v530 = -(-v529 & 3);
              if (v530)
                v531 = v529 - v530 + 8;
              else
                v531 = ((*((_QWORD *)v493 - 2) - *((_QWORD *)v493 - 3)) >> 2) << v1070;
              v532 = v1072[72];
              if ((unint64_t)v520 < v1084)
              {
                *v520 = v532;
                *((_DWORD *)v520 + 2) = v1074;
                *((_BYTE *)v520 + 12) = 0;
                v533 = (char *)(v520 + 3);
                v520[2] = 0;
                if ((unint64_t)v493 < v1151)
                  goto LABEL_753;
LABEL_769:
                v538 = sub_19C1B8CE0((char **)&v1149, (uint64_t)v1141);
                goto LABEL_770;
              }
              v539 = 0xAAAAAAAAAAAAAAABLL * (((char *)v520 - v42) >> 3) + 1;
              if (v539 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v539)
                v539 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                v540 = 0xAAAAAAAAAAAAAAALL;
              else
                v540 = v539;
              if (v540 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v541 = (char *)operator new(24 * v540);
              v542 = &v541[8 * (((char *)v520 - v42) >> 3)];
              *(_QWORD *)v542 = v532;
              v533 = v542 + 24;
              v543 = &v541[(char *)v520 - v42];
              *((_DWORD *)v543 + 2) = v1074;
              v543[12] = 0;
              *((_QWORD *)v543 + 2) = 0;
              if (v520 == (uint64_t *)v42)
              {
                v545 = &v541[8 * (((char *)v520 - v42) >> 3)];
                v1084 = (unint64_t)&v541[24 * v540];
                if (v42)
                  goto LABEL_767;
              }
              else
              {
                do
                {
                  v544 = *(_OWORD *)(v520 - 3);
                  v545 = v542 - 24;
                  *((_QWORD *)v542 - 1) = *(v520 - 1);
                  *(_OWORD *)(v542 - 24) = v544;
                  v520 -= 3;
                  v542 -= 24;
                }
                while (v520 != (uint64_t *)v42);
                v1084 = (unint64_t)&v541[24 * v540];
                if (v42)
                {
LABEL_767:
                  operator delete(v42);
                  v493 = v1150;
                }
              }
              v42 = v545;
              if ((unint64_t)v493 >= v1151)
                goto LABEL_769;
LABEL_753:
              *(_QWORD *)v493 = 0;
              *((_QWORD *)v493 + 1) = 0;
              *((_QWORD *)v493 + 2) = 0;
              v534 = v1141[0];
              v535 = (char *)v1141[1] - (char *)v1141[0];
              if (v1141[1] != v1141[0])
              {
                if (v535 < 0)
                  sub_19C07DA0C();
                v536 = (char *)operator new((char *)v1141[1] - (char *)v1141[0]);
                *(_QWORD *)v493 = v536;
                *((_QWORD *)v493 + 1) = v536;
                v537 = &v536[4 * (v535 >> 2)];
                *((_QWORD *)v493 + 2) = v537;
                memcpy(v536, v534, v535);
                *((_QWORD *)v493 + 1) = v537;
              }
              v538 = v493 + 24;
LABEL_770:
              v1150 = v538;
              v546 = *((_QWORD *)v538 - 3);
              v547 = (*((_QWORD *)v538 - 2) - v546) >> 2 << v1070;
              if (v1069)
                v548 = *(float *)&v1171;
              else
                v548 = -1.0;
              if (v1069)
                v549 = *((float *)&v1171 + 1);
              else
                v549 = 1.0;
              if ((unint64_t)v533 < v1084)
              {
                *(_QWORD *)v533 = v546;
                *((_DWORD *)v533 + 2) = v547;
                v533[12] = v1076;
                v1082 = (float32x4_t **)(v533 + 24);
                *((float *)v533 + 4) = v548;
                *((float *)v533 + 5) = v549;
                goto LABEL_790;
              }
              v550 = 0xAAAAAAAAAAAAAAABLL * ((v533 - v42) >> 3) + 1;
              if (v550 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v550)
                v550 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                v551 = 0xAAAAAAAAAAAAAAALL;
              else
                v551 = v550;
              if (v551 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v552 = (char *)operator new(24 * v551);
              v553 = &v552[8 * ((v533 - v42) >> 3)];
              *(_QWORD *)v553 = v546;
              v1082 = (float32x4_t **)(v553 + 24);
              v554 = &v552[v533 - v42];
              *((_DWORD *)v554 + 2) = v547;
              v554[12] = v1076;
              *((float *)v554 + 4) = v548;
              *((float *)v554 + 5) = v549;
              if (v533 == v42)
              {
                v556 = &v552[8 * ((v533 - v42) >> 3)];
                v1084 = (unint64_t)&v552[24 * v551];
                if (v42)
                  goto LABEL_788;
              }
              else
              {
                do
                {
                  v555 = *(_OWORD *)(v533 - 24);
                  v556 = v553 - 24;
                  *((_QWORD *)v553 - 1) = *((_QWORD *)v533 - 1);
                  *(_OWORD *)(v553 - 24) = v555;
                  v533 -= 24;
                  v553 -= 24;
                }
                while (v533 != v42);
                v1084 = (unint64_t)&v552[24 * v551];
                if (v42)
                {
LABEL_788:
                  operator delete(v42);
                  v538 = v1150;
                }
              }
              v42 = v556;
LABEL_790:
              v169 = v1067;
              v557 = ((*((_QWORD *)v538 - 2) - *((_QWORD *)v538 - 3)) >> 2) << v1070;
              v558 = v557 & 3;
              if (v557 <= 0)
                v558 = -(-v557 & 3);
              if (v558)
                v557 = v557 - v558 + 8;
              v1080 += v1074 + v531 + v557;
              v445 = v1073;
              if ((__p[7].i8[8] & 0x80) == 0)
              {
                v559 = v1072[73];
                if ((unint64_t)v1082 < v1084)
                {
                  *v1082 = (float32x4_t *)v559;
                  v560 = v1074;
                  *((_DWORD *)v1082 + 2) = v1074;
                  *((_BYTE *)v1082 + 12) = 0;
                  v561 = v1082 + 3;
                  v1082[2] = 0;
                  goto LABEL_810;
                }
                v562 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
                if (v562 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07DA0C();
                if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v562)
                  v562 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                  v563 = 0xAAAAAAAAAAAAAAALL;
                else
                  v563 = v562;
                if (v563 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07C7FC();
                v564 = (char *)operator new(24 * v563);
                v565 = &v564[8 * (((char *)v1082 - v42) >> 3)];
                *(_QWORD *)v565 = v559;
                v561 = (float32x4_t **)(v565 + 24);
                v566 = &v564[(char *)v1082 - v42];
                *((_DWORD *)v566 + 2) = v1074;
                v566[12] = 0;
                *((_QWORD *)v566 + 2) = 0;
                if (v1082 == (float32x4_t **)v42)
                {
                  v569 = &v564[8 * (((char *)v1082 - v42) >> 3)];
                  v169 = v1067;
                  v1084 = (unint64_t)&v564[24 * v563];
                  if (v42)
                    goto LABEL_808;
                }
                else
                {
                  v567 = (char *)v1082;
                  v169 = v1067;
                  do
                  {
                    v568 = *(_OWORD *)(v567 - 24);
                    v569 = v565 - 24;
                    *((_QWORD *)v565 - 1) = *((_QWORD *)v567 - 1);
                    *(_OWORD *)(v565 - 24) = v568;
                    v567 -= 24;
                    v565 -= 24;
                  }
                  while (v567 != v42);
                  v1084 = (unint64_t)&v564[24 * v563];
                  if (v42)
LABEL_808:
                    operator delete(v42);
                }
                v42 = v569;
                v560 = v1074;
                v445 = v1073;
LABEL_810:
                v1080 += v560;
                v1082 = v561;
              }
              *(_DWORD *)&__src[24] &= ~0x20u;
              if (v1141[0])
              {
                v1141[1] = v1141[0];
                operator delete(v1141[0]);
              }
              if (v1110[0])
              {
                v1110[1] = v1110[0];
                operator delete(v1110[0]);
              }
              goto LABEL_618;
            }
            if ((unint64_t)v1082 < v1084)
            {
              *v1082 = (float32x4_t *)v442;
              *((_DWORD *)v1082 + 2) = v1061;
              *((_BYTE *)v1082 + 12) = 0;
              v444 = (uint64_t *)(v1082 + 3);
              *((_DWORD *)v1082 + 4) = v105;
              *((_DWORD *)v1082 + 5) = v104;
              v445 = v1073;
              v446 = v1072[72];
              if ((unint64_t)(v1082 + 3) < v1084)
                goto LABEL_622;
              goto LABEL_703;
            }
            v494 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
            if (v494 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v494)
              v494 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
              v495 = 0xAAAAAAAAAAAAAAALL;
            else
              v495 = v494;
            if (v495 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v496 = (char *)operator new(24 * v495);
            v497 = &v496[8 * (((char *)v1082 - v42) >> 3)];
            *(_QWORD *)v497 = v442;
            v444 = (uint64_t *)(v497 + 24);
            v498 = &v496[(char *)v1082 - v42];
            *((_DWORD *)v498 + 2) = v1061;
            v498[12] = 0;
            *((_DWORD *)v498 + 4) = v105;
            *((_DWORD *)v498 + 5) = v104;
            if (v1082 == (float32x4_t **)v42)
            {
              v501 = &v496[8 * (((char *)v1082 - v42) >> 3)];
              v169 = v1067;
              v1084 = (unint64_t)&v496[24 * v495];
              if (v42)
                goto LABEL_701;
            }
            else
            {
              v499 = (char *)v1082;
              v169 = v1067;
              do
              {
                v500 = *(_OWORD *)(v499 - 24);
                v501 = v497 - 24;
                *((_QWORD *)v497 - 1) = *((_QWORD *)v499 - 1);
                *(_OWORD *)(v497 - 24) = v500;
                v499 -= 24;
                v497 -= 24;
              }
              while (v499 != v42);
              v1084 = (unint64_t)&v496[24 * v495];
              if (v42)
LABEL_701:
                operator delete(v42);
            }
            v42 = v501;
            v445 = v1073;
            v446 = v1072[72];
            if ((unint64_t)v444 < v1084)
            {
LABEL_622:
              *v444 = v446;
              *((_DWORD *)v444 + 2) = v1074;
              *((_BYTE *)v444 + 12) = 0;
              v1082 = (float32x4_t **)(v444 + 3);
              v444[2] = 0;
              v1080 += v1060;
              if ((__p[7].i8[8] & 0x80) == 0)
                goto LABEL_716;
              goto LABEL_618;
            }
LABEL_703:
            v502 = 0xAAAAAAAAAAAAAAABLL * (((char *)v444 - v42) >> 3) + 1;
            if (v502 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v502)
              v502 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
              v503 = 0xAAAAAAAAAAAAAAALL;
            else
              v503 = v502;
            if (v503 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v504 = (char *)operator new(24 * v503);
            v505 = &v504[8 * (((char *)v444 - v42) >> 3)];
            *(_QWORD *)v505 = v446;
            v1082 = (float32x4_t **)(v505 + 24);
            v506 = &v504[(char *)v444 - v42];
            *((_DWORD *)v506 + 2) = v1074;
            v506[12] = 0;
            *((_QWORD *)v506 + 2) = 0;
            if (v444 == (uint64_t *)v42)
            {
              v508 = &v504[8 * (((char *)v444 - v42) >> 3)];
              v169 = v1067;
              v1084 = (unint64_t)&v504[24 * v503];
              if (v42)
                goto LABEL_714;
            }
            else
            {
              v169 = v1067;
              do
              {
                v507 = *(_OWORD *)(v444 - 3);
                v508 = v505 - 24;
                *((_QWORD *)v505 - 1) = *(v444 - 1);
                *(_OWORD *)(v505 - 24) = v507;
                v444 -= 3;
                v505 -= 24;
              }
              while (v444 != (uint64_t *)v42);
              v1084 = (unint64_t)&v504[24 * v503];
              if (v42)
LABEL_714:
                operator delete(v42);
            }
            v42 = v508;
            v445 = v1073;
            v1080 += v1060;
            if ((__p[7].i8[8] & 0x80) == 0)
            {
LABEL_716:
              v509 = v1072[73];
              if ((unint64_t)v1082 < v1084)
              {
                *v1082 = (float32x4_t *)v509;
                v440 = v1074;
                *((_DWORD *)v1082 + 2) = v1074;
                *((_BYTE *)v1082 + 12) = 0;
                v441 = v1082 + 3;
                v1082[2] = 0;
              }
              else
              {
                v510 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
                if (v510 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07DA0C();
                if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v510)
                  v510 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                  v511 = 0xAAAAAAAAAAAAAAALL;
                else
                  v511 = v510;
                if (v511 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07C7FC();
                v512 = (char *)operator new(24 * v511);
                v513 = &v512[8 * (((char *)v1082 - v42) >> 3)];
                *(_QWORD *)v513 = v509;
                v441 = (float32x4_t **)(v513 + 24);
                v514 = &v512[(char *)v1082 - v42];
                *((_DWORD *)v514 + 2) = v1074;
                v514[12] = 0;
                *((_QWORD *)v514 + 2) = 0;
                if (v1082 == (float32x4_t **)v42)
                {
                  v517 = &v512[8 * (((char *)v1082 - v42) >> 3)];
                  v169 = v1067;
                  v1084 = (unint64_t)&v512[24 * v511];
                  if (v42)
                    goto LABEL_728;
                }
                else
                {
                  v515 = (char *)v1082;
                  v169 = v1067;
                  do
                  {
                    v516 = *(_OWORD *)(v515 - 24);
                    v517 = v513 - 24;
                    *((_QWORD *)v513 - 1) = *((_QWORD *)v515 - 1);
                    *(_OWORD *)(v513 - 24) = v516;
                    v515 -= 24;
                    v513 -= 24;
                  }
                  while (v515 != v42);
                  v1084 = (unint64_t)&v512[24 * v511];
                  if (v42)
LABEL_728:
                    operator delete(v42);
                }
                v42 = v517;
                v440 = v1074;
                v445 = v1073;
              }
              v1080 += v440;
              v1082 = v441;
            }
LABEL_618:
            v439 = v445 + 1;
          }
          while (v439 != v1065);
LABEL_581:
          operator delete(v169);
          if (!v1069)
            goto LABEL_1301;
          v417 = (int *)operator new(4uLL);
          *v417 = 6;
          v418 = v417 + 1;
          if (__p[0].i64[0] == 6)
          {
            v419 = (int *)operator new(8uLL);
            *(_QWORD *)v419 = 0x700000006;
            v418 = v419 + 2;
            operator delete(v417);
            v417 = v419;
          }
          v420 = v1057 << v1058;
          if (v1057 << v1058 <= 0)
            v421 = -(-(v1057 << v1058) & 3);
          else
            v421 = (v1057 << v1058) & 3;
          if (v421)
            v422 = v420 - v421 + 8;
          else
            v422 = v1057 << v1058;
          v1091 = v417;
          v423 = v417;
          do
          {
            v425 = *v423;
            v426 = (float32x4_t *)*((_QWORD *)&v1172 + v425);
            if (v426)
            {
              if ((unint64_t)v1082 < v1084)
              {
                *v1082 = v426;
                *((_DWORD *)v1082 + 2) = v420;
                *((_BYTE *)v1082 + 12) = v1076;
                v424 = v1082 + 3;
                v1082[2] = (float32x4_t *)0x3F800000BF800000;
              }
              else
              {
                v427 = v42;
                v428 = (char *)v1082 - v42;
                v429 = 0xAAAAAAAAAAAAAAABLL * (v428 >> 3) + 1;
                if (v429 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07DA0C();
                v430 = (float32x4_t **)v427;
                v431 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v427) >> 3);
                if (2 * v431 > v429)
                  v429 = 2 * v431;
                if (v431 >= 0x555555555555555)
                  v432 = 0xAAAAAAAAAAAAAAALL;
                else
                  v432 = v429;
                if (v432 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07C7FC();
                v433 = (char *)operator new(24 * v432);
                v434 = &v433[8 * (v428 >> 3)];
                *(_QWORD *)v434 = v426;
                v424 = (float32x4_t **)(v434 + 24);
                v435 = &v433[v428];
                *((_DWORD *)v435 + 2) = v420;
                v435[12] = v1076;
                *((_QWORD *)v435 + 2) = 0x3F800000BF800000;
                v436 = v1082;
                if (v1082 != v430)
                {
                  do
                  {
                    v437 = *(_OWORD *)(v436 - 3);
                    v42 = v434 - 24;
                    *((_QWORD *)v434 - 1) = *(v436 - 1);
                    *(_OWORD *)(v434 - 24) = v437;
                    v436 -= 3;
                    v434 -= 24;
                  }
                  while (v436 != v430);
                  v1084 = (unint64_t)&v433[24 * v432];
                  if (!v430)
                    goto LABEL_592;
                  goto LABEL_608;
                }
                v42 = &v433[8 * (v428 >> 3)];
                v1084 = (unint64_t)&v433[24 * v432];
                if (v430)
LABEL_608:
                  operator delete(v430);
              }
LABEL_592:
              v1080 += v422;
              *(_DWORD *)&__src[196] |= 1 << v425;
              v1082 = v424;
            }
            ++v423;
          }
          while (v423 != v418);
          operator delete(v1091);
          v173 = (char *)__dst;
          v174 = v1154;
          if ((unint64_t)__dst >= v1154)
            goto LABEL_1190;
LABEL_1302:
          memcpy(v173, __src, 0x190uLL);
          v881 = v1063;
          __dst = v173 + 400;
          if (SHIBYTE(v1145) < 0)
LABEL_1303:
            operator delete(v1144[0]);
LABEL_85:
          v20 = v881 + 24;
          if (v20 == v1059)
            goto LABEL_1409;
          continue;
        case 0xBLL:
          v179 = (__p[20].i32[1] * __p[20].i32[0] * __p[8].i32[2] * __p[16].i32[0]) << (2 * (v103 != 2));
          v180 = 4 * __p[16].i32[0];
          v181 = (float32x4_t *)v1172;
          v182 = v1082;
          if ((unint64_t)v1082 >= v1084)
            goto LABEL_302;
          goto LABEL_300;
        case 0xDLL:
          v179 = (2 * __p[8].i32[0] * __p[16].i32[0]) << (2 * (v103 != 2));
          v180 = 8 * __p[16].i32[0];
          v181 = (float32x4_t *)v1172;
          v182 = v1082;
          if ((unint64_t)v1082 < v1084)
          {
LABEL_300:
            *v182 = v181;
            *((_DWORD *)v182 + 2) = v179;
            *((_BYTE *)v182 + 12) = v1076;
            v183 = v182 + 3;
            *((_DWORD *)v182 + 4) = v105;
            *((_DWORD *)v182 + 5) = v104;
            goto LABEL_313;
          }
LABEL_302:
          v184 = (char *)v182 - v42;
          v185 = 0xAAAAAAAAAAAAAAABLL * (((char *)v182 - v42) >> 3);
          v186 = v185 + 1;
          if (v185 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v186)
            v186 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
            v187 = 0xAAAAAAAAAAAAAAALL;
          else
            v187 = v186;
          if (v187 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v188 = (char *)operator new(24 * v187);
          v189 = v1082;
          v190 = &v188[24 * v185];
          *(_QWORD *)v190 = v181;
          v183 = (float32x4_t **)(v190 + 24);
          v191 = &v188[v184];
          *((_DWORD *)v191 + 2) = v179;
          v191[12] = v1076;
          *((_DWORD *)v191 + 4) = v105;
          *((_DWORD *)v191 + 5) = v104;
          if (v1082 == (float32x4_t **)v42)
          {
            v42 = v190;
            v1084 = (unint64_t)&v188[24 * v187];
            if (v1087)
LABEL_312:
              operator delete(v1087);
          }
          else
          {
            do
            {
              v192 = *(_OWORD *)(v189 - 3);
              v42 = v190 - 24;
              *((_QWORD *)v190 - 1) = *(v189 - 1);
              *(_OWORD *)(v190 - 24) = v192;
              v189 -= 3;
              v190 -= 24;
            }
            while (v189 != (float32x4_t **)v1087);
            v1084 = (unint64_t)&v188[24 * v187];
            if (v1087)
              goto LABEL_312;
          }
LABEL_313:
          if (v179 <= 0)
            v193 = -(-v179 & 3);
          else
            v193 = v179 & 3;
          if (v193)
            v194 = v179 - v193 + 8;
          else
            v194 = v179;
          v195 = *(_DWORD *)&__src[196] | 1;
          *(_DWORD *)&__src[196] |= 1u;
          v196 = v1178;
          if ((unint64_t)v183 < v1084)
          {
            *v183 = v1178;
            *((_DWORD *)v183 + 2) = v180;
            *((_BYTE *)v183 + 12) = 0;
            v1082 = v183 + 3;
            v183[2] = 0;
            goto LABEL_332;
          }
          v197 = (char *)v183 - v42;
          v198 = v42;
          v199 = 0xAAAAAAAAAAAAAAABLL * (((char *)v183 - v42) >> 3);
          v200 = v199 + 1;
          v1088 = (float32x4_t **)v198;
          if (v199 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v198) >> 3);
          if (2 * v201 > v200)
            v200 = 2 * v201;
          if (v201 >= 0x555555555555555)
            v202 = 0xAAAAAAAAAAAAAAALL;
          else
            v202 = v200;
          if (v202 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v203 = (char *)operator new(24 * v202);
          v204 = &v203[24 * v199];
          *(_QWORD *)v204 = v196;
          v205 = (float32x4_t **)(v204 + 24);
          v206 = &v203[v197];
          *((_DWORD *)v206 + 2) = v180;
          v206[12] = 0;
          *((_QWORD *)v206 + 2) = 0;
          if (v183 == v1088)
          {
            v42 = &v203[24 * v199];
            v1082 = (float32x4_t **)(v204 + 24);
            v1084 = (unint64_t)&v203[24 * v202];
            if (v1088)
            {
LABEL_331:
              operator delete(v1088);
              v195 = *(_DWORD *)&__src[196];
            }
          }
          else
          {
            do
            {
              v207 = *(_OWORD *)(v183 - 3);
              v42 = v204 - 24;
              *((_QWORD *)v204 - 1) = *(v183 - 1);
              *(_OWORD *)(v204 - 24) = v207;
              v183 -= 3;
              v204 -= 24;
            }
            while (v183 != v1088);
            v1082 = v205;
            v1084 = (unint64_t)&v203[24 * v202];
            if (v1088)
              goto LABEL_331;
          }
LABEL_332:
          if (v180 <= 0)
            v208 = -(-v180 & 3);
          else
            v208 = v180 & 3;
          if (v208)
            v209 = v180 - v208 + 8;
          else
            v209 = v180;
          v1080 += v209 + v194;
          *(_DWORD *)&__src[196] = v195 | 0x10000;
          if (__p[22].i32[0] != 1)
            goto LABEL_1301;
          *(_DWORD *)&__src[138] = 1;
          *(_DWORD *)&__src[196] = v195 | 0x10001;
          v210 = (char *)v1147[0];
          if (!v1147[0])
            goto LABEL_1301;
          while (1)
          {
            if (v210[39] < 0)
            {
              sub_19C07C6E8(v1141, *((void **)v210 + 2), *((_QWORD *)v210 + 3));
            }
            else
            {
              *(_OWORD *)v1141 = *((_OWORD *)v210 + 1);
              v1142 = (char *)*((_QWORD *)v210 + 4);
            }
            v1143 = *((_DWORD *)v210 + 10);
            v1139 = 0u;
            v1140 = 0u;
            v1137 = 0u;
            v1138 = 0u;
            v1135 = 0u;
            v1136 = 0u;
            v1133 = 0u;
            v1134 = 0u;
            v1131 = 0u;
            v1132 = 0u;
            v1129 = 0u;
            v1130 = 0u;
            v1127 = 0u;
            v1128 = 0u;
            v1125 = 0u;
            v1126 = 0u;
            v1123 = 0u;
            v1124 = 0u;
            v1121 = 0u;
            v1122 = 0u;
            v1119 = 0u;
            v1120 = 0u;
            v1117 = 0u;
            v1118 = 0u;
            v1115 = 0u;
            v1116 = 0u;
            v1113 = 0u;
            v1114 = 0u;
            v1112 = 0u;
            *(_OWORD *)v1110 = 0u;
            memset(v1111, 0, sizeof(v1111));
            sub_19C233EB0(v1081, (uint64_t)v1141);
            if (__p[16].i32[0] * __p[8].i32[0] != (_DWORD)v1125 * (_DWORD)v1129)
              goto LABEL_341;
            v211 = (v179 / v106);
            if ((int)v211 < 1)
            {
LABEL_364:
              v1107 = v1141;
              v247 = sub_19C1B8700((uint64_t)v1146, (uint64_t)v1141, (uint64_t)&unk_19C27ADD0, (__int128 **)&v1107);
              *((_DWORD *)v1152 + 100 * *((int *)v247 + 10) + 97) = *(_DWORD *)&__src[194];
              goto LABEL_341;
            }
            if (v211 < 8)
            {
              v212 = 0;
              LOBYTE(v213) = 1;
LABEL_361:
              v241 = (float *)(v1137 + 4 * v212);
              v242 = (float *)(v1172 + 4 * v212);
              v243 = v211 - v212;
              do
              {
                v244 = *v242++;
                v245 = v244;
                v246 = *v241++;
                LOBYTE(v213) = (vabds_f32(v245, v246) <= 0.001) & v213;
                --v243;
              }
              while (v243);
              goto LABEL_363;
            }
            if (v211 >= 0x20)
            {
              v212 = v211 & 0x7FFFFFE0;
              v214 = (float32x4_t *)(v1172 + 64);
              v215 = (float32x4_t *)(v1137 + 64);
              v216.i64[0] = 0x101010101010101;
              v216.i64[1] = 0x101010101010101;
              v217 = v211 & 0xFFFFFFE0;
              v218.i64[0] = 0x101010101010101;
              v218.i64[1] = 0x101010101010101;
              do
              {
                v219 = vabdq_f32(v214[-1], v215[-1]);
                v220 = vabdq_f32(v214[-2], v215[-2]);
                v221 = vabdq_f32(v214[-3], v215[-3]);
                v222 = vabdq_f32(v214[-4], v215[-4]);
                v223 = vabdq_f32(v214[3], v215[3]);
                v224 = vabdq_f32(v214[2], v215[2]);
                v225 = *v215;
                v226 = v215[1];
                v215 += 8;
                v227 = vabdq_f32(v214[1], v226);
                v228 = vabdq_f32(*v214, v225);
                v216 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v222.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v222))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v221.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v221)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v220.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v220))), (int16x8_t)vuzp1q_s32(
                                                     (int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v219.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v219))))), v216);
                v218 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v228.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v228))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v227.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v227)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v224.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v224))), (int16x8_t)vuzp1q_s32(
                                                     (int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v223.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v223))))), v218);
                v214 += 8;
                v217 -= 32;
              }
              while (v217);
              v229 = (uint8x16_t)vcltzq_s8(vshlq_n_s8(vmvnq_s8(vandq_s8(v216, v218)), 7uLL));
              v229.i8[0] = vmaxvq_u8(v229);
              v213 = v229.i32[0] ^ 1;
              if (v212 == v211)
                goto LABEL_363;
              if ((v211 & 0x18) == 0)
                goto LABEL_361;
            }
            else
            {
              v212 = 0;
              v213 = 1;
            }
            v230 = v212;
            v212 = v211 & 0xFFFFFFF8;
            v231 = vdup_n_s8(v213);
            v232 = (float32x4_t *)(v1172 + 4 * v230);
            v233 = (float32x4_t *)(v1137 + 4 * v230);
            v234 = v230 - v212;
            do
            {
              v235 = *v232;
              v236 = v232[1];
              v232 += 2;
              v237 = *v233;
              v238 = v233[1];
              v233 += 2;
              v239 = vabdq_f32(v236, v238);
              v240 = vabdq_f32(v235, v237);
              v231 = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v240.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v240))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v1071, vcvtq_f64_f32(*(float32x2_t *)v239.f32)), (int32x4_t)vcgeq_f64(v1071, vcvt_hight_f64_f32(v239))))), v231);
              v234 += 8;
            }
            while (v234);
            LOBYTE(v213) = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmvn_s8(v231), 7uLL))) ^ 1;
            if (v212 != v211)
              goto LABEL_361;
LABEL_363:
            if ((v213 & 1) != 0)
              goto LABEL_364;
LABEL_341:
            if (SHIBYTE(v1142) < 0)
            {
              operator delete(v1141[0]);
              v210 = *(char **)v210;
              if (!v210)
                goto LABEL_1301;
            }
            else
            {
              v210 = *(char **)v210;
              if (!v210)
                goto LABEL_1301;
            }
          }
        case 0x13:
          if ((__p[7].i8[8] & 0x40) == 0)
          {
            v265 = v1172;
            v266 = (float32x4_t *)v1173;
            v267 = v1178;
            v268 = __p[20].i32[0];
            v269 = __p[8].i32[0];
            if (!(_QWORD)v1172)
            {
              *(_DWORD *)&__src[24] |= 0x200u;
              v943 = 4 * __p[20].i32[0];
              if (*((_QWORD *)&v1172 + 1))
                goto LABEL_1358;
              goto LABEL_1305;
            }
            v270 = 4 * __p[9].i32[0] * __p[20].i32[0];
            if ((unint64_t)v1082 < v1084)
            {
              *v1082 = (float32x4_t *)v1172;
              *((_DWORD *)v1082 + 2) = v270;
              *((_BYTE *)v1082 + 12) = v1076;
              v271 = v1082 + 3;
              *((_DWORD *)v1082 + 4) = v105;
              *((_DWORD *)v1082 + 5) = v104;
              goto LABEL_1357;
            }
            v956 = v42;
            v957 = (char *)v1082 - v42;
            v958 = 0xAAAAAAAAAAAAAAABLL * (v957 >> 3) + 1;
            if (v958 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            v959 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v956) >> 3);
            if (2 * v959 > v958)
              v958 = 2 * v959;
            if (v959 >= 0x555555555555555)
              v960 = 0xAAAAAAAAAAAAAAALL;
            else
              v960 = v958;
            if (v960 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v961 = (char *)operator new(24 * v960);
            v962 = &v961[8 * (v957 >> 3)];
            *(_QWORD *)v962 = v265;
            v271 = (float32x4_t **)(v962 + 24);
            v963 = &v961[v957];
            *((_DWORD *)v963 + 2) = v270;
            v963[12] = v1076;
            *((_DWORD *)v963 + 4) = v105;
            *((_DWORD *)v963 + 5) = v104;
            v964 = v1082;
            if (v1082 == (float32x4_t **)v1087)
            {
              v42 = &v961[8 * (v957 >> 3)];
              v1084 = (unint64_t)&v961[24 * v960];
              if (v1087)
LABEL_1356:
                operator delete(v1087);
            }
            else
            {
              do
              {
                v965 = *(_OWORD *)(v964 - 3);
                v42 = v962 - 24;
                *((_QWORD *)v962 - 1) = *(v964 - 1);
                *(_OWORD *)(v962 - 24) = v965;
                v964 -= 3;
                v962 -= 24;
              }
              while (v964 != (float32x4_t **)v1087);
              v1084 = (unint64_t)&v961[24 * v960];
              if (v1087)
                goto LABEL_1356;
            }
LABEL_1357:
            v1080 += v270;
            v1082 = v271;
            v943 = 4 * v268;
            if (*((_QWORD *)&v265 + 1))
            {
LABEL_1358:
              v966 = v943 * v269;
              if ((unint64_t)v1082 < v1084)
              {
                *v1082 = (float32x4_t *)*((_QWORD *)&v265 + 1);
                *((_DWORD *)v1082 + 2) = v966;
                *((_BYTE *)v1082 + 12) = v1076;
                v944 = v1082 + 3;
                *((_DWORD *)v1082 + 4) = v105;
                *((_DWORD *)v1082 + 5) = v104;
                goto LABEL_1371;
              }
              v967 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
              v1099 = v42;
              if (v967 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v967)
                v967 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                v968 = 0xAAAAAAAAAAAAAAALL;
              else
                v968 = v967;
              if (v968 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v969 = (char *)operator new(24 * v265);
              v970 = &v969[8 * (((char *)v1082 - v42) >> 3)];
              *(_QWORD *)v970 = *((_QWORD *)&v265 + 1);
              v944 = (float32x4_t **)(v970 + 24);
              v971 = &v969[(char *)v1082 - v42];
              *((_DWORD *)v971 + 2) = v966;
              v971[12] = v1076;
              *((_DWORD *)v971 + 4) = v105;
              *((_DWORD *)v971 + 5) = v104;
              v972 = v1082;
              if (v1082 == (float32x4_t **)v42)
              {
                v42 = &v969[8 * (((char *)v1082 - v42) >> 3)];
                v1084 = (unint64_t)&v969[24 * v968];
                if (v1099)
LABEL_1370:
                  operator delete(v1099);
              }
              else
              {
                do
                {
                  v973 = *(_OWORD *)(v972 - 3);
                  v42 = v970 - 24;
                  *((_QWORD *)v970 - 1) = *(v972 - 1);
                  *(_OWORD *)(v970 - 24) = v973;
                  v972 -= 3;
                  v970 -= 24;
                }
                while (v972 != (float32x4_t **)v1099);
                v1084 = (unint64_t)&v969[24 * v968];
                if (v1099)
                  goto LABEL_1370;
              }
LABEL_1371:
              v1080 += v966;
              if ((unint64_t)v944 < v1084)
                goto LABEL_1372;
              goto LABEL_1306;
            }
LABEL_1305:
            *(_DWORD *)&__src[24] |= 0x400u;
            v944 = v1082;
            if ((unint64_t)v1082 < v1084)
            {
LABEL_1372:
              *v944 = v266;
              *((_DWORD *)v944 + 2) = v943;
              *((_BYTE *)v944 + 12) = v1076;
              v952 = (char *)(v944 + 3);
              *((_DWORD *)v944 + 4) = v105;
              *((_DWORD *)v944 + 5) = v104;
              goto LABEL_1379;
            }
LABEL_1306:
            v945 = (char *)v944 - v42;
            v946 = 0xAAAAAAAAAAAAAAABLL * (((char *)v944 - v42) >> 3);
            v947 = v946 + 1;
            v1098 = v42;
            if (v946 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            v948 = (char *)v944;
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v947)
              v947 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
              v949 = 0xAAAAAAAAAAAAAAALL;
            else
              v949 = v947;
            if (v949 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v950 = (char *)operator new(24 * v949);
            v951 = &v950[24 * v946];
            *(_QWORD *)v951 = v266;
            v952 = v951 + 24;
            v953 = &v950[v945];
            *((_DWORD *)v953 + 2) = v943;
            v953[12] = v1076;
            *((_DWORD *)v953 + 4) = v105;
            *((_DWORD *)v953 + 5) = v104;
            if (v948 == v42)
            {
              v42 = v951;
              v1084 = (unint64_t)&v950[24 * v949];
              if (!v1098)
                goto LABEL_1379;
            }
            else
            {
              v954 = v948;
              do
              {
                v955 = *(_OWORD *)(v954 - 24);
                v42 = v951 - 24;
                *((_QWORD *)v951 - 1) = *((_QWORD *)v954 - 1);
                *(_OWORD *)(v951 - 24) = v955;
                v954 -= 24;
                v951 -= 24;
              }
              while (v954 != v1098);
              v1084 = (unint64_t)&v950[24 * v949];
              if (!v1098)
              {
LABEL_1379:
                if ((unint64_t)v952 < v1084)
                {
                  *(_QWORD *)v952 = v267;
                  *((_DWORD *)v952 + 2) = v943;
                  v952[12] = 0;
                  v1082 = (float32x4_t **)(v952 + 24);
                  *((_QWORD *)v952 + 2) = 0;
                  goto LABEL_1392;
                }
                v974 = 0xAAAAAAAAAAAAAAABLL * ((v952 - v42) >> 3) + 1;
                v1100 = v42;
                if (v974 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07DA0C();
                if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v974)
                  v974 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                  v975 = 0xAAAAAAAAAAAAAAALL;
                else
                  v975 = v974;
                if (v975 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07C7FC();
                v976 = (char *)operator new(24 * v975);
                v977 = &v976[8 * ((v952 - v42) >> 3)];
                *(_QWORD *)v977 = v267;
                v978 = (float32x4_t **)(v977 + 24);
                v979 = &v976[v952 - v42];
                *((_DWORD *)v979 + 2) = v943;
                v979[12] = 0;
                *((_QWORD *)v979 + 2) = 0;
                if (v952 == v42)
                {
                  v42 = &v976[8 * ((v952 - v42) >> 3)];
                  v1082 = (float32x4_t **)(v977 + 24);
                  v1084 = (unint64_t)&v976[24 * v975];
                  if (v1100)
LABEL_1391:
                    operator delete(v1100);
                }
                else
                {
                  do
                  {
                    v980 = *(_OWORD *)(v952 - 24);
                    v42 = v977 - 24;
                    *((_QWORD *)v977 - 1) = *((_QWORD *)v952 - 1);
                    *(_OWORD *)(v977 - 24) = v980;
                    v952 -= 24;
                    v977 -= 24;
                  }
                  while (v952 != v1100);
                  v1082 = v978;
                  v1084 = (unint64_t)&v976[24 * v975];
                  if (v1100)
                    goto LABEL_1391;
                }
LABEL_1392:
                v1080 += 8 * v268;
                v173 = (char *)__dst;
                v174 = v1154;
                if ((unint64_t)__dst < v1154)
                  goto LABEL_1302;
                goto LABEL_1190;
              }
            }
            operator delete(v1098);
            goto LABEL_1379;
          }
          *(_DWORD *)&__src[24] |= 0x40u;
          v360 = v1172;
          v361 = v1178;
          v362 = __p[20].i32[0];
          v363 = 4 * __p[20].i32[0];
          v364 = 4 * __p[20].i32[0] * (__p[9].i32[0] + __p[8].i32[0]);
          if ((unint64_t)v1082 < v1084)
          {
            *v1082 = (float32x4_t *)v1172;
            *((_DWORD *)v1082 + 2) = v364;
            *((_BYTE *)v1082 + 12) = v1076;
            v365 = (char *)(v1082 + 3);
            *((_DWORD *)v1082 + 4) = v105;
            *((_DWORD *)v1082 + 5) = v104;
            if ((unint64_t)(v1082 + 3) < v1084)
              goto LABEL_506;
            goto LABEL_1112;
          }
          v828 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
          if (v828 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v828)
            v828 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
            v829 = 0xAAAAAAAAAAAAAAALL;
          else
            v829 = v828;
          if (v829 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v830 = (char *)operator new(24 * v829);
          v831 = &v830[8 * (((char *)v1082 - v42) >> 3)];
          *(_QWORD *)v831 = v360;
          v365 = v831 + 24;
          v832 = &v830[(char *)v1082 - v42];
          *((_DWORD *)v832 + 2) = v364;
          v832[12] = v1076;
          *((_DWORD *)v832 + 4) = v105;
          *((_DWORD *)v832 + 5) = v104;
          if (v1082 == (float32x4_t **)v42)
          {
            v835 = &v830[8 * (((char *)v1082 - v42) >> 3)];
            v1084 = (unint64_t)&v830[24 * v829];
            if (v42)
LABEL_1110:
              operator delete(v42);
          }
          else
          {
            v833 = (char *)v1082;
            do
            {
              v834 = *(_OWORD *)(v833 - 24);
              v835 = v831 - 24;
              *((_QWORD *)v831 - 1) = *((_QWORD *)v833 - 1);
              *(_OWORD *)(v831 - 24) = v834;
              v833 -= 24;
              v831 -= 24;
            }
            while (v833 != v42);
            v1084 = (unint64_t)&v830[24 * v829];
            if (v42)
              goto LABEL_1110;
          }
          v42 = v835;
          if ((unint64_t)v365 < v1084)
          {
LABEL_506:
            *(_QWORD *)v365 = *((_QWORD *)&v360 + 1);
            *((_DWORD *)v365 + 2) = v363;
            v365[12] = v1076;
            v366 = v365 + 24;
            *((_DWORD *)v365 + 4) = v105;
            *((_DWORD *)v365 + 5) = v104;
            if ((unint64_t)(v365 + 24) < v1084)
            {
LABEL_507:
              *(_QWORD *)v366 = v361;
              *((_DWORD *)v366 + 2) = v363;
              v366[12] = 0;
              v1082 = (float32x4_t **)(v366 + 24);
              *((_QWORD *)v366 + 2) = 0;
              goto LABEL_1136;
            }
LABEL_1124:
            v843 = 0xAAAAAAAAAAAAAAABLL * ((v366 - v42) >> 3) + 1;
            if (v843 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v843)
              v843 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
              v844 = 0xAAAAAAAAAAAAAAALL;
            else
              v844 = v843;
            if (v844 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v845 = (char *)operator new(24 * v844);
            v846 = &v845[8 * ((v366 - v42) >> 3)];
            *(_QWORD *)v846 = v361;
            v1082 = (float32x4_t **)(v846 + 24);
            v847 = &v845[v366 - v42];
            *((_DWORD *)v847 + 2) = v363;
            v847[12] = 0;
            *((_QWORD *)v847 + 2) = 0;
            if (v366 == v42)
            {
              v849 = &v845[8 * ((v366 - v42) >> 3)];
              v1084 = (unint64_t)&v845[24 * v844];
              if (!v42)
                goto LABEL_1135;
            }
            else
            {
              do
              {
                v848 = *(_OWORD *)(v366 - 24);
                v849 = v846 - 24;
                *((_QWORD *)v846 - 1) = *((_QWORD *)v366 - 1);
                *(_OWORD *)(v846 - 24) = v848;
                v366 -= 24;
                v846 -= 24;
              }
              while (v366 != v42);
              v1084 = (unint64_t)&v845[24 * v844];
              if (!v42)
                goto LABEL_1135;
            }
            operator delete(v42);
LABEL_1135:
            v42 = v849;
LABEL_1136:
            v1080 += 8 * v362 + v364;
            v173 = (char *)__dst;
            v174 = v1154;
            if ((unint64_t)__dst < v1154)
              goto LABEL_1302;
            goto LABEL_1190;
          }
LABEL_1112:
          v836 = 0xAAAAAAAAAAAAAAABLL * ((v365 - v42) >> 3) + 1;
          if (v836 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v836)
            v836 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
            v837 = 0xAAAAAAAAAAAAAAALL;
          else
            v837 = v836;
          if (v837 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v838 = (char *)operator new(24 * v837);
          v839 = &v838[8 * ((v365 - v42) >> 3)];
          *(_QWORD *)v839 = *((_QWORD *)&v360 + 1);
          v366 = v839 + 24;
          v840 = &v838[v365 - v42];
          *((_DWORD *)v840 + 2) = v363;
          v840[12] = v1076;
          *((_DWORD *)v840 + 4) = v105;
          *((_DWORD *)v840 + 5) = v104;
          if (v365 == v42)
          {
            v842 = &v838[8 * ((v365 - v42) >> 3)];
            v1084 = (unint64_t)&v838[24 * v837];
            if (v42)
LABEL_1122:
              operator delete(v42);
          }
          else
          {
            do
            {
              v841 = *(_OWORD *)(v365 - 24);
              v842 = v839 - 24;
              *((_QWORD *)v839 - 1) = *((_QWORD *)v365 - 1);
              *(_OWORD *)(v839 - 24) = v841;
              v365 -= 24;
              v839 -= 24;
            }
            while (v365 != v42);
            v1084 = (unint64_t)&v838[24 * v837];
            if (v42)
              goto LABEL_1122;
          }
          v42 = v842;
          if ((unint64_t)v366 < v1084)
            goto LABEL_507;
          goto LABEL_1124;
        case 0x14:
          v258 = v1172;
          v259 = v1173;
          v260 = v1178;
          v1078 = v1179;
          v1075 = v1180;
          v261 = __p[20].i32[1] * __p[20].i32[0];
          v262 = __p[20].i32[1] * __p[20].i32[0] * __p[8].i32[0];
          v263 = 4 * v262;
          if ((unint64_t)v1082 < v1084)
          {
            *v1082 = (float32x4_t *)v1172;
            *((_DWORD *)v1082 + 2) = v263;
            *((_BYTE *)v1082 + 12) = v1076;
            v264 = (char *)(v1082 + 3);
            *((_DWORD *)v1082 + 4) = v105;
            *((_DWORD *)v1082 + 5) = v104;
            goto LABEL_501;
          }
          v347 = v42;
          v348 = (char *)v1082 - v42;
          v349 = 0xAAAAAAAAAAAAAAABLL * (v348 >> 3) + 1;
          if (v349 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          v350 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v347) >> 3);
          if (2 * v350 > v349)
            v349 = 2 * v350;
          if (v350 >= 0x555555555555555)
            v351 = 0xAAAAAAAAAAAAAAALL;
          else
            v351 = v349;
          if (v351 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v352 = (char *)operator new(24 * v351);
          v353 = &v352[8 * (v348 >> 3)];
          *(_QWORD *)v353 = v258;
          v264 = v353 + 24;
          v354 = &v352[v348];
          *((_DWORD *)v354 + 2) = v263;
          v354[12] = v1076;
          *((_DWORD *)v354 + 4) = v105;
          *((_DWORD *)v354 + 5) = v104;
          v355 = v1082;
          if (v1082 == (float32x4_t **)v1087)
          {
            v42 = &v352[8 * (v348 >> 3)];
            v1084 = (unint64_t)&v352[24 * v351];
            if (v1087)
LABEL_500:
              operator delete(v1087);
          }
          else
          {
            do
            {
              v356 = *(_OWORD *)(v355 - 3);
              v42 = v353 - 24;
              *((_QWORD *)v353 - 1) = *(v355 - 1);
              *(_OWORD *)(v353 - 24) = v356;
              v355 -= 3;
              v353 -= 24;
            }
            while (v355 != (float32x4_t **)v1087);
            v1084 = (unint64_t)&v352[24 * v351];
            if (v1087)
              goto LABEL_500;
          }
LABEL_501:
          v1089 = v42;
          if ((unint64_t)v264 < v1084)
          {
            *(_QWORD *)v264 = *((_QWORD *)&v258 + 1);
            *((_DWORD *)v264 + 2) = v263;
            v264[12] = v1076;
            v357 = v264 + 24;
            *((_DWORD *)v264 + 4) = v105;
            *((_DWORD *)v264 + 5) = v104;
            if ((unint64_t)(v264 + 24) < v1084)
            {
LABEL_503:
              *(_QWORD *)v357 = v259;
              *((_DWORD *)v357 + 2) = v263;
              v357[12] = v1076;
              v358 = (float32x4_t **)(v357 + 24);
              *((_DWORD *)v357 + 4) = v105;
              *((_DWORD *)v357 + 5) = v104;
              v359 = v1089;
              goto LABEL_855;
            }
LABEL_842:
            v582 = 0xAAAAAAAAAAAAAAABLL * ((v357 - v1089) >> 3) + 1;
            if (v582 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v1089) >> 3) > v582)
              v582 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v1089) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v1089) >> 3) >= 0x555555555555555)
              v583 = 0xAAAAAAAAAAAAAAALL;
            else
              v583 = v582;
            if (v583 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v584 = (char *)operator new(24 * v583);
            v585 = &v584[8 * ((v357 - v1089) >> 3)];
            *(_QWORD *)v585 = v259;
            v358 = (float32x4_t **)(v585 + 24);
            v586 = &v584[v357 - v1089];
            *((_DWORD *)v586 + 2) = v263;
            v586[12] = v1076;
            *((_DWORD *)v586 + 4) = v105;
            *((_DWORD *)v586 + 5) = v104;
            if (v357 == v1089)
            {
              v589 = &v584[8 * ((v357 - v1089) >> 3)];
              v587 = v1089;
              v1084 = (unint64_t)&v584[24 * v583];
              if (!v1089)
                goto LABEL_854;
            }
            else
            {
              v587 = v1089;
              do
              {
                v588 = *(_OWORD *)(v357 - 24);
                v589 = v585 - 24;
                *((_QWORD *)v585 - 1) = *((_QWORD *)v357 - 1);
                *(_OWORD *)(v585 - 24) = v588;
                v357 -= 24;
                v585 -= 24;
              }
              while (v357 != v1089);
              v1084 = (unint64_t)&v584[24 * v583];
              if (!v1089)
                goto LABEL_854;
            }
            operator delete(v587);
LABEL_854:
            v359 = v589;
LABEL_855:
            v590 = 4 * v261;
            v1093 = v359;
            if ((unint64_t)v358 < v1084)
            {
              *v358 = v260;
              *((_DWORD *)v358 + 2) = v590;
              *((_BYTE *)v358 + 12) = 0;
              v591 = (char *)(v358 + 3);
              v358[2] = 0;
              if ((unint64_t)(v358 + 3) < v1084)
                goto LABEL_857;
              goto LABEL_872;
            }
            v593 = (char *)v358 - v359;
            v594 = 0xAAAAAAAAAAAAAAABLL * (((char *)v358 - v359) >> 3);
            v595 = v594 + 1;
            if (v594 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            v596 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v359) >> 3);
            if (2 * v596 > v595)
              v595 = 2 * v596;
            if (v596 >= 0x555555555555555)
              v597 = 0xAAAAAAAAAAAAAAALL;
            else
              v597 = v595;
            if (v597 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v598 = (char *)operator new(24 * v597);
            v599 = &v598[24 * v594];
            *(_QWORD *)v599 = v260;
            v591 = v599 + 24;
            v600 = &v598[v593];
            *((_DWORD *)v600 + 2) = v590;
            v600[12] = 0;
            *((_QWORD *)v600 + 2) = 0;
            if (v358 == (float32x4_t **)v1093)
            {
              v603 = &v598[24 * v594];
              v601 = v1093;
              v1084 = (unint64_t)&v598[24 * v597];
              if (v1093)
LABEL_870:
                operator delete(v601);
            }
            else
            {
              v601 = v1093;
              do
              {
                v602 = *(_OWORD *)(v358 - 3);
                v603 = v599 - 24;
                *((_QWORD *)v599 - 1) = *(v358 - 1);
                *(_OWORD *)(v599 - 24) = v602;
                v358 -= 3;
                v599 -= 24;
              }
              while (v358 != (float32x4_t **)v1093);
              v1084 = (unint64_t)&v598[24 * v597];
              if (v1093)
                goto LABEL_870;
            }
            v1093 = v603;
            if ((unint64_t)v591 < v1084)
            {
LABEL_857:
              *(_QWORD *)v591 = v1078;
              *((_DWORD *)v591 + 2) = v590;
              v591[12] = 0;
              v592 = v591 + 24;
              *((_QWORD *)v591 + 2) = 0;
              v42 = v1093;
              if ((unint64_t)v592 < v1084)
              {
LABEL_858:
                *(_QWORD *)v592 = v1075;
                *((_DWORD *)v592 + 2) = v590;
                v592[12] = 0;
                v1082 = (float32x4_t **)(v592 + 24);
                *((_QWORD *)v592 + 2) = 0;
                goto LABEL_896;
              }
LABEL_885:
              v612 = 0xAAAAAAAAAAAAAAABLL * ((v592 - v42) >> 3) + 1;
              v1094 = v42;
              if (v612 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v612)
                v612 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                v613 = 0xAAAAAAAAAAAAAAALL;
              else
                v613 = v612;
              if (v613 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v614 = (char *)operator new(24 * v613);
              v615 = &v614[8 * ((v592 - v42) >> 3)];
              *(_QWORD *)v615 = v1075;
              v616 = (float32x4_t **)(v615 + 24);
              v617 = &v614[v592 - v42];
              *((_DWORD *)v617 + 2) = v590;
              v617[12] = 0;
              *((_QWORD *)v617 + 2) = 0;
              if (v592 == v42)
              {
                v42 = &v614[8 * ((v592 - v42) >> 3)];
                v1082 = (float32x4_t **)(v615 + 24);
                v1084 = (unint64_t)&v614[24 * v613];
                if (v1094)
LABEL_895:
                  operator delete(v1094);
              }
              else
              {
                do
                {
                  v618 = *(_OWORD *)(v592 - 24);
                  v42 = v615 - 24;
                  *((_QWORD *)v615 - 1) = *((_QWORD *)v592 - 1);
                  *(_OWORD *)(v615 - 24) = v618;
                  v592 -= 24;
                  v615 -= 24;
                }
                while (v592 != v1094);
                v1082 = v616;
                v1084 = (unint64_t)&v614[24 * v613];
                if (v1094)
                  goto LABEL_895;
              }
LABEL_896:
              v1080 += v263 + v590 + 8 * (v261 + v262);
              v173 = (char *)__dst;
              v174 = v1154;
              if ((unint64_t)__dst < v1154)
                goto LABEL_1302;
              goto LABEL_1190;
            }
LABEL_872:
            v604 = 0xAAAAAAAAAAAAAAABLL * ((v591 - v1093) >> 3) + 1;
            if (v604 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v1093) >> 3) > v604)
              v604 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v1093) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v1093) >> 3) >= 0x555555555555555)
              v605 = 0xAAAAAAAAAAAAAAALL;
            else
              v605 = v604;
            if (v605 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v606 = (char *)operator new(24 * v605);
            v607 = &v606[8 * ((v591 - v1093) >> 3)];
            *(_QWORD *)v607 = v1078;
            v592 = v607 + 24;
            v608 = &v606[v591 - v1093];
            *((_DWORD *)v608 + 2) = v590;
            v608[12] = 0;
            *((_QWORD *)v608 + 2) = 0;
            if (v591 == v1093)
            {
              v611 = &v606[8 * ((v591 - v1093) >> 3)];
              v609 = v1093;
              v1084 = (unint64_t)&v606[24 * v605];
              if (v1093)
LABEL_883:
                operator delete(v609);
            }
            else
            {
              v609 = v1093;
              do
              {
                v610 = *(_OWORD *)(v591 - 24);
                v611 = v607 - 24;
                *((_QWORD *)v607 - 1) = *((_QWORD *)v591 - 1);
                *(_OWORD *)(v607 - 24) = v610;
                v591 -= 24;
                v607 -= 24;
              }
              while (v591 != v1093);
              v1084 = (unint64_t)&v606[24 * v605];
              if (v1093)
                goto LABEL_883;
            }
            v42 = v611;
            if ((unint64_t)v592 < v1084)
              goto LABEL_858;
            goto LABEL_885;
          }
          v570 = v264 - v42;
          v571 = v42;
          v572 = 0xAAAAAAAAAAAAAAABLL * ((v264 - v42) >> 3);
          v573 = v572 + 1;
          if (v572 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          v574 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v571) >> 3);
          if (2 * v574 > v573)
            v573 = 2 * v574;
          if (v574 >= 0x555555555555555)
            v575 = 0xAAAAAAAAAAAAAAALL;
          else
            v575 = v573;
          if (v575 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v576 = (char *)operator new(24 * v258);
          v577 = &v576[24 * v572];
          *(_QWORD *)v577 = *((_QWORD *)&v258 + 1);
          v357 = v577 + 24;
          v578 = &v576[v570];
          *((_DWORD *)v578 + 2) = v263;
          v578[12] = v1076;
          *((_DWORD *)v578 + 4) = v105;
          *((_DWORD *)v578 + 5) = v104;
          if (v264 == v1089)
          {
            v581 = v577;
            v579 = v1089;
            v1084 = (unint64_t)&v576[24 * v575];
            if (v1089)
LABEL_840:
              operator delete(v579);
          }
          else
          {
            v579 = v1089;
            do
            {
              v580 = *(_OWORD *)(v264 - 24);
              v581 = v577 - 24;
              *((_QWORD *)v577 - 1) = *((_QWORD *)v264 - 1);
              *(_OWORD *)(v577 - 24) = v580;
              v264 -= 24;
              v577 -= 24;
            }
            while (v264 != v1089);
            v1084 = (unint64_t)&v576[24 * v575];
            if (v1089)
              goto LABEL_840;
          }
          v1089 = v581;
          if ((unint64_t)v357 < v1084)
            goto LABEL_503;
          goto LABEL_842;
        case 0x15:
          v120 = __p[8].i32[0];
          v121 = 4 * __p[8].i32[0];
          v122 = v1172;
          if ((unint64_t)v1082 < v1084)
          {
            *v1082 = (float32x4_t *)v1172;
            *((_DWORD *)v1082 + 2) = v121;
            *((_BYTE *)v1082 + 12) = v1076;
            v123 = (char *)(v1082 + 3);
            *((_DWORD *)v1082 + 4) = v105;
            *((_DWORD *)v1082 + 5) = v104;
            v124 = v1178;
            if ((unint64_t)(v1082 + 3) < v1084)
            {
LABEL_229:
              *(_QWORD *)v123 = v124;
              *((_DWORD *)v123 + 2) = v121;
              v123[12] = v1076;
              v1082 = (float32x4_t **)(v123 + 24);
              *((_DWORD *)v123 + 4) = v105;
              *((_DWORD *)v123 + 5) = v104;
              goto LABEL_413;
            }
LABEL_401:
            v286 = 0xAAAAAAAAAAAAAAABLL * ((v123 - v42) >> 3) + 1;
            if (v286 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v286)
              v286 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
              v287 = 0xAAAAAAAAAAAAAAALL;
            else
              v287 = v286;
            if (v287 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v288 = (char *)operator new(24 * v287);
            v289 = &v288[8 * ((v123 - v42) >> 3)];
            *(_QWORD *)v289 = v124;
            v1082 = (float32x4_t **)(v289 + 24);
            v290 = &v288[v123 - v42];
            *((_DWORD *)v290 + 2) = v121;
            v290[12] = v1076;
            *((_DWORD *)v290 + 4) = v105;
            *((_DWORD *)v290 + 5) = v104;
            if (v123 == v42)
            {
              v292 = &v288[8 * ((v123 - v42) >> 3)];
              v1084 = (unint64_t)&v288[24 * v287];
              if (!v42)
                goto LABEL_412;
            }
            else
            {
              do
              {
                v291 = *(_OWORD *)(v123 - 24);
                v292 = v289 - 24;
                *((_QWORD *)v289 - 1) = *((_QWORD *)v123 - 1);
                *(_OWORD *)(v289 - 24) = v291;
                v123 -= 24;
                v289 -= 24;
              }
              while (v123 != v42);
              v1084 = (unint64_t)&v288[24 * v287];
              if (!v42)
                goto LABEL_412;
            }
            operator delete(v42);
LABEL_412:
            v42 = v292;
LABEL_413:
            v1080 += 8 * v120;
            *(_DWORD *)&__src[196] |= 0x10001u;
            v173 = (char *)__dst;
            v174 = v1154;
            if ((unint64_t)__dst < v1154)
              goto LABEL_1302;
            goto LABEL_1190;
          }
          v278 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
          if (v278 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v278)
            v278 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
            v279 = 0xAAAAAAAAAAAAAAALL;
          else
            v279 = v278;
          if (v279 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v280 = (char *)operator new(24 * v279);
          v281 = &v280[8 * (((char *)v1082 - v42) >> 3)];
          *(_QWORD *)v281 = v122;
          v123 = v281 + 24;
          v282 = &v280[(char *)v1082 - v42];
          *((_DWORD *)v282 + 2) = v121;
          v282[12] = v1076;
          *((_DWORD *)v282 + 4) = v105;
          *((_DWORD *)v282 + 5) = v104;
          if (v1082 == (float32x4_t **)v42)
          {
            v285 = &v280[8 * (((char *)v1082 - v42) >> 3)];
            v1084 = (unint64_t)&v280[24 * v279];
            if (v42)
LABEL_399:
              operator delete(v42);
          }
          else
          {
            v283 = (char *)v1082;
            do
            {
              v284 = *(_OWORD *)(v283 - 24);
              v285 = v281 - 24;
              *((_QWORD *)v281 - 1) = *((_QWORD *)v283 - 1);
              *(_OWORD *)(v281 - 24) = v284;
              v283 -= 24;
              v281 -= 24;
            }
            while (v283 != v42);
            v1084 = (unint64_t)&v280[24 * v279];
            if (v42)
              goto LABEL_399;
          }
          v42 = v285;
          v124 = v1178;
          if ((unint64_t)v123 < v1084)
            goto LABEL_229;
          goto LABEL_401;
        case 0x1ALL:
          if (__p[22].i32[0] == 1)
          {
            *(_DWORD *)&__src[138] = 1;
            *(_DWORD *)&__src[196] |= 7u;
            v108 = __dst;
            v109 = v1152;
            v1110[0] = v1144;
            v110 = sub_19C1B8700((uint64_t)v1146, (uint64_t)v1144, (uint64_t)&unk_19C27ADD0, (__int128 **)v1110);
LABEL_288:
            *((_DWORD *)v110 + 10) = -1030792151 * ((unint64_t)(v108 - v109) >> 4);
            v173 = (char *)__dst;
            v174 = v1154;
            if ((unint64_t)__dst < v1154)
              goto LABEL_1302;
            goto LABEL_1190;
          }
          v293 = __p[20].u32[0];
          v1110[0] = 0;
          v1110[1] = 0;
          *(_QWORD *)&v1111[0] = 0;
          v1141[1] = 0;
          v1141[0] = 0;
          v1142 = 0;
          if (__p[20].i32[0] >= 1)
          {
            v294 = 0;
            v295 = 0;
            while (1)
            {
              v297 = *(float *)(v1177 + 4 * v295);
              v298 = (int)(v1176->f32[v295] + 0.5);
              v299 = (char *)v1110[1];
              if (v1110[1] < (void *)*(_QWORD *)&v1111[0])
              {
                *(_DWORD *)v1110[1] = v298;
                v300 = v299 + 4;
                goto LABEL_441;
              }
              v301 = (char *)v1110[0];
              v302 = (char *)v1110[1] - (char *)v1110[0];
              v303 = ((char *)v1110[1] - (char *)v1110[0]) >> 2;
              v304 = v303 + 1;
              if ((unint64_t)(v303 + 1) >> 62)
                sub_19C07DA0C();
              v305 = *(_QWORD *)&v1111[0] - (unint64_t)v1110[0];
              if ((uint64_t)(*(_QWORD *)&v1111[0] - (unint64_t)v1110[0]) >> 1 > v304)
                v304 = v305 >> 1;
              v306 = (unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v304;
              if (v306)
              {
                if (v306 >> 62)
                  sub_19C07C7FC();
                v307 = operator new(4 * v306);
                v308 = (int *)&v307[4 * v303];
                *v308 = v298;
                v300 = v308 + 1;
                if (v299 == v301)
                {
LABEL_433:
                  v42 = v1087;
                  goto LABEL_439;
                }
              }
              else
              {
                v307 = 0;
                v308 = (int *)(4 * v303);
                *(_DWORD *)(4 * v303) = v298;
                v300 = (void *)(4 * v303 + 4);
                if (v299 == v301)
                  goto LABEL_433;
              }
              v309 = v299 - 4 - v301;
              if (v309 < 0x2C)
                break;
              v310 = v299 - &v307[v302];
              v42 = v1087;
              if (v310 < 0x20)
                goto LABEL_438;
              v311 = (v309 >> 2) + 1;
              v312 = 4 * (v311 & 0x7FFFFFFFFFFFFFF8);
              v313 = &v299[-v312];
              v308 = (int *)((char *)v308 - v312);
              v314 = &v307[4 * v303 - 16];
              v315 = v299 - 16;
              v316 = v311 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v317 = *(_OWORD *)v315;
                *(v314 - 1) = *((_OWORD *)v315 - 1);
                *v314 = v317;
                v314 -= 2;
                v315 -= 32;
                v316 -= 8;
              }
              while (v316);
              v299 = v313;
              if (v311 != (v311 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_438;
LABEL_439:
              v1110[0] = v308;
              v1110[1] = v300;
              *(_QWORD *)&v1111[0] = &v307[4 * v306];
              if (v301)
              {
                operator delete(v301);
                v294 = (char *)v1141[1];
              }
LABEL_441:
              v1110[1] = v300;
              v319 = (int)(v297 + 0.5);
              if (v294 >= v1142)
              {
                v320 = (char *)v1141[0];
                v321 = v294 - (char *)v1141[0];
                v322 = (v294 - (char *)v1141[0]) >> 2;
                v323 = v322 + 1;
                if ((unint64_t)(v322 + 1) >> 62)
                  sub_19C07DA0C();
                v324 = v1142 - (char *)v1141[0];
                if ((v1142 - (char *)v1141[0]) >> 1 > v323)
                  v323 = v324 >> 1;
                if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFFCLL)
                  v325 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v325 = v323;
                if (v325)
                {
                  if (v325 >> 62)
                    sub_19C07C7FC();
                  v326 = operator new(4 * v325);
                  v327 = (int *)&v326[4 * v322];
                  *v327 = v319;
                  v296 = v327 + 1;
                  if (v294 == v320)
                    goto LABEL_456;
LABEL_453:
                  v328 = v294 - 4 - v320;
                  if (v328 < 0xBC)
                  {
                    v329 = v294;
                    goto LABEL_455;
                  }
                  if (&v326[v321 - 4 - (v328 & 0xFFFFFFFFFFFFFFFCLL)] > &v326[v321 - 4])
                  {
                    v329 = v294;
                    goto LABEL_455;
                  }
                  if (&v294[-(v328 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v294 - 4)
                  {
                    v329 = v294;
                    goto LABEL_455;
                  }
                  if ((unint64_t)(v294 - v326 - v321) < 0x20)
                  {
                    v329 = v294;
                    goto LABEL_455;
                  }
                  v331 = (v328 >> 2) + 1;
                  v332 = 4 * (v331 & 0x7FFFFFFFFFFFFFF8);
                  v329 = &v294[-v332];
                  v327 = (int *)((char *)v327 - v332);
                  v333 = &v326[4 * v322 - 16];
                  v334 = v294 - 16;
                  v335 = v331 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v336 = *(_OWORD *)v334;
                    *(v333 - 1) = *((_OWORD *)v334 - 1);
                    *v333 = v336;
                    v333 -= 2;
                    v334 -= 32;
                    v335 -= 8;
                  }
                  while (v335);
                  if (v331 != (v331 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_455:
                      v330 = *((_DWORD *)v329 - 1);
                      v329 -= 4;
                      *--v327 = v330;
                    }
                    while (v329 != v320);
                  }
                }
                else
                {
                  v326 = 0;
                  v327 = (int *)(4 * v322);
                  *(_DWORD *)(4 * v322) = v319;
                  v296 = (void *)(4 * v322 + 4);
                  if (v294 != v320)
                    goto LABEL_453;
                }
LABEL_456:
                v1141[0] = v327;
                v1141[1] = v296;
                v1142 = &v326[4 * v325];
                if (v320)
                  operator delete(v320);
                goto LABEL_418;
              }
              *(_DWORD *)v294 = v319;
              v296 = v294 + 4;
LABEL_418:
              v1141[1] = v296;
              ++v295;
              v294 = (char *)v296;
              if (v295 == v293)
                goto LABEL_898;
            }
            v42 = v1087;
            do
            {
LABEL_438:
              v318 = *((_DWORD *)v299 - 1);
              v299 -= 4;
              *--v308 = v318;
            }
            while (v299 != v301);
            goto LABEL_439;
          }
LABEL_898:
          v619 = 4 * v293;
          v620 = v1176;
          if ((unint64_t)v1082 < v1084)
          {
            *v1082 = v1176;
            *((_DWORD *)v1082 + 2) = v619;
            *((_BYTE *)v1082 + 12) = 0;
            v621 = (char *)(v1082 + 3);
            v1082[2] = 0;
            v622 = v1177;
            if ((unint64_t)(v1082 + 3) < v1084)
            {
LABEL_900:
              *(_QWORD *)v621 = v622;
              *((_DWORD *)v621 + 2) = v619;
              v621[12] = 0;
              v623 = v621 + 24;
              *((_QWORD *)v621 + 2) = 0;
              goto LABEL_1232;
            }
LABEL_1220:
            v895 = 0xAAAAAAAAAAAAAAABLL * ((v621 - v42) >> 3) + 1;
            if (v895 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v895)
              v895 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
              v896 = 0xAAAAAAAAAAAAAAALL;
            else
              v896 = v895;
            if (v896 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v897 = (char *)operator new(24 * v896);
            v898 = &v897[8 * ((v621 - v42) >> 3)];
            *(_QWORD *)v898 = v622;
            v623 = v898 + 24;
            v899 = &v897[v621 - v42];
            *((_DWORD *)v899 + 2) = v619;
            v899[12] = 0;
            *((_QWORD *)v899 + 2) = 0;
            if (v621 == v42)
            {
              v901 = &v897[8 * ((v621 - v42) >> 3)];
              v1084 = (unint64_t)&v897[24 * v896];
              if (!v42)
                goto LABEL_1231;
            }
            else
            {
              do
              {
                v900 = *(_OWORD *)(v621 - 24);
                v901 = v898 - 24;
                *((_QWORD *)v898 - 1) = *((_QWORD *)v621 - 1);
                *(_OWORD *)(v898 - 24) = v900;
                v621 -= 24;
                v898 -= 24;
              }
              while (v621 != v42);
              v1084 = (unint64_t)&v897[24 * v896];
              if (!v42)
                goto LABEL_1231;
            }
            operator delete(v42);
LABEL_1231:
            v42 = v901;
LABEL_1232:
            v902 = 2 * (v1077 != 2);
            v903 = (*(_DWORD *)v1141[0] * *(_DWORD *)v1110[0]) << v902;
            v904 = v1172;
            if ((unint64_t)v623 < v1084)
            {
              *(_QWORD *)v623 = v1172;
              *((_DWORD *)v623 + 2) = v903;
              v623[12] = v1076;
              v1082 = (float32x4_t **)(v623 + 24);
              *((_DWORD *)v623 + 4) = v105;
              *((_DWORD *)v623 + 5) = v104;
LABEL_1246:
              *(_DWORD *)&__src[196] |= 1u;
              if (v903 <= 0)
                v912 = -(-v903 & 3);
              else
                v912 = v903 & 3;
              if (v912)
                v913 = v903 - v912 + 8;
              else
                v913 = v903;
              v1080 += 8 * v293 + v913;
              if ((int)v293 < 2)
              {
LABEL_1297:
                if (v1141[0])
                {
                  v1141[1] = v1141[0];
                  operator delete(v1141[0]);
                }
                if (v1110[0])
                {
                  v1110[1] = v1110[0];
                  operator delete(v1110[0]);
                }
                goto LABEL_1301;
              }
              v914 = 1;
              while (1)
              {
                v917 = (*((_DWORD *)v1141[0] + v914) * *((_DWORD *)v1110[0] + v914)) << v902;
                v918 = &__p[0].i8[8 * v914];
                v919 = (float32x4_t *)*((_QWORD *)v918 + 56);
                if ((unint64_t)v1082 < v1084)
                {
                  *v1082 = v919;
                  *((_DWORD *)v1082 + 2) = v917;
                  *((_BYTE *)v1082 + 12) = v1076;
                  v920 = (char *)(v1082 + 3);
                  *((_DWORD *)v1082 + 4) = v105;
                  *((_DWORD *)v1082 + 5) = v104;
                  goto LABEL_1275;
                }
                v921 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
                v1096 = v42;
                if (v921 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07DA0C();
                if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v921)
                  v921 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                  v922 = 0xAAAAAAAAAAAAAAALL;
                else
                  v922 = v921;
                if (v922 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07C7FC();
                v923 = (char *)operator new(24 * v922);
                v924 = v1082;
                v925 = &v923[8 * (((char *)v1082 - v42) >> 3)];
                *(_QWORD *)v925 = v919;
                v920 = v925 + 24;
                v926 = &v923[(char *)v1082 - v42];
                *((_DWORD *)v926 + 2) = v917;
                v926[12] = v1076;
                *((_DWORD *)v926 + 4) = v105;
                *((_DWORD *)v926 + 5) = v104;
                if (v1082 == (float32x4_t **)v42)
                {
                  v42 = &v923[8 * (((char *)v1082 - v42) >> 3)];
                  v1084 = (unint64_t)&v923[24 * v922];
                  if (v1096)
                    goto LABEL_1274;
                }
                else
                {
                  do
                  {
                    v927 = *(_OWORD *)(v924 - 3);
                    v42 = v925 - 24;
                    *((_QWORD *)v925 - 1) = *(v924 - 1);
                    *(_OWORD *)(v925 - 24) = v927;
                    v924 -= 3;
                    v925 -= 24;
                  }
                  while (v924 != (float32x4_t **)v1096);
                  v1084 = (unint64_t)&v923[24 * v922];
                  if (v1096)
LABEL_1274:
                    operator delete(v1096);
                }
LABEL_1275:
                if (v917 <= 0)
                  v928 = -(-v917 & 3);
                else
                  v928 = v917 & 3;
                if (v928)
                  v929 = v917 - v928 + 8;
                else
                  v929 = v917;
                v930 = (*(_DWORD *)v1110[0] * *((_DWORD *)v1110[0] + v914)) << v902;
                v931 = *((_QWORD *)v918 + 71);
                if ((unint64_t)v920 < v1084)
                {
                  *(_QWORD *)v920 = v931;
                  *((_DWORD *)v920 + 2) = v930;
                  v920[12] = v1076;
                  v1082 = (float32x4_t **)(v920 + 24);
                  *((_DWORD *)v920 + 4) = v105;
                  *((_DWORD *)v920 + 5) = v104;
                }
                else
                {
                  v932 = v920 - v42;
                  v933 = v42;
                  v934 = 0xAAAAAAAAAAAAAAABLL * ((v920 - v42) >> 3);
                  v935 = v934 + 1;
                  v1097 = v933;
                  if (v934 + 1 > 0xAAAAAAAAAAAAAAALL)
                    sub_19C07DA0C();
                  v936 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v933) >> 3);
                  if (2 * v936 > v935)
                    v935 = 2 * v936;
                  if (v936 >= 0x555555555555555)
                    v937 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v937 = v935;
                  if (v937 > 0xAAAAAAAAAAAAAAALL)
                    sub_19C07C7FC();
                  v938 = (char *)operator new(24 * v937);
                  v939 = &v938[24 * v934];
                  *(_QWORD *)v939 = v931;
                  v940 = (float32x4_t **)(v939 + 24);
                  v941 = &v938[v932];
                  *((_DWORD *)v941 + 2) = v930;
                  v941[12] = v1076;
                  *((_DWORD *)v941 + 4) = v105;
                  *((_DWORD *)v941 + 5) = v104;
                  if (v920 != v1097)
                  {
                    do
                    {
                      v942 = *(_OWORD *)(v920 - 24);
                      v42 = v939 - 24;
                      *((_QWORD *)v939 - 1) = *((_QWORD *)v920 - 1);
                      *(_OWORD *)(v939 - 24) = v942;
                      v920 -= 24;
                      v939 -= 24;
                    }
                    while (v920 != v1097);
                    v1082 = v940;
                    v1084 = (unint64_t)&v938[24 * v937];
                    if (!v1097)
                      goto LABEL_1255;
LABEL_1296:
                    operator delete(v1097);
                    goto LABEL_1255;
                  }
                  v42 = &v938[24 * v934];
                  v1082 = (float32x4_t **)(v939 + 24);
                  v1084 = (unint64_t)&v938[24 * v937];
                  if (v1097)
                    goto LABEL_1296;
                }
LABEL_1255:
                if (v930 <= 0)
                  v915 = -(-v930 & 3);
                else
                  v915 = v930 & 3;
                if (v915)
                  v916 = v930 - v915 + 8;
                else
                  v916 = v930;
                v1080 += v929 + v916;
                if (++v914 == v293)
                  goto LABEL_1297;
              }
            }
            v905 = 0xAAAAAAAAAAAAAAABLL * ((v623 - v42) >> 3) + 1;
            if (v905 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v905)
              v905 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
              v906 = 0xAAAAAAAAAAAAAAALL;
            else
              v906 = v905;
            if (v906 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v907 = (char *)operator new(24 * v906);
            v908 = &v907[8 * ((v623 - v42) >> 3)];
            *(_QWORD *)v908 = v904;
            v1082 = (float32x4_t **)(v908 + 24);
            v909 = &v907[v623 - v42];
            *((_DWORD *)v909 + 2) = v903;
            v909[12] = v1076;
            *((_DWORD *)v909 + 4) = v105;
            *((_DWORD *)v909 + 5) = v104;
            if (v623 == v42)
            {
              v911 = &v907[8 * ((v623 - v42) >> 3)];
              v1084 = (unint64_t)&v907[24 * v906];
              if (!v42)
                goto LABEL_1245;
            }
            else
            {
              do
              {
                v910 = *(_OWORD *)(v623 - 24);
                v911 = v908 - 24;
                *((_QWORD *)v908 - 1) = *((_QWORD *)v623 - 1);
                *(_OWORD *)(v908 - 24) = v910;
                v623 -= 24;
                v908 -= 24;
              }
              while (v623 != v42);
              v1084 = (unint64_t)&v907[24 * v906];
              if (!v42)
                goto LABEL_1245;
            }
            operator delete(v42);
LABEL_1245:
            v42 = v911;
            goto LABEL_1246;
          }
          v887 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
          if (v887 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v887)
            v887 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
            v888 = 0xAAAAAAAAAAAAAAALL;
          else
            v888 = v887;
          if (v888 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v889 = (char *)operator new(24 * v888);
          v890 = &v889[8 * (((char *)v1082 - v42) >> 3)];
          *(_QWORD *)v890 = v620;
          v621 = v890 + 24;
          v891 = &v889[(char *)v1082 - v42];
          *((_DWORD *)v891 + 2) = v619;
          v891[12] = 0;
          *((_QWORD *)v891 + 2) = 0;
          if (v1082 == (float32x4_t **)v42)
          {
            v894 = &v889[8 * (((char *)v1082 - v42) >> 3)];
            v1084 = (unint64_t)&v889[24 * v888];
            if (v42)
LABEL_1218:
              operator delete(v42);
          }
          else
          {
            v892 = (char *)v1082;
            do
            {
              v893 = *(_OWORD *)(v892 - 24);
              v894 = v890 - 24;
              *((_QWORD *)v890 - 1) = *((_QWORD *)v892 - 1);
              *(_OWORD *)(v890 - 24) = v893;
              v892 -= 24;
              v890 -= 24;
            }
            while (v892 != v42);
            v1084 = (unint64_t)&v889[24 * v888];
            if (v42)
              goto LABEL_1218;
          }
          v42 = v894;
          v622 = v1177;
          if ((unint64_t)v621 < v1084)
            goto LABEL_900;
          goto LABEL_1220;
        case 0x1BLL:
          if ((__p[7].i8[9] & 1) != 0)
            *(_DWORD *)&__src[24] |= 0x100u;
          v125 = 0;
          v126 = 0;
          v127 = __p[20].u32[0];
          v1107 = 0;
          v1108 = 0;
          v1109 = 0;
          v1104 = 0;
          v1105 = 0;
          v1106 = 0;
          break;
        default:
          goto LABEL_1301;
      }
      break;
    }
    while (2)
    {
      v129 = *(float *)(v1177 + 4 * v126);
      v130 = (int)(v1176->f32[v126] + 0.5);
      v131 = v1108;
      if (v1108 < v1109)
      {
        *(_DWORD *)v1108 = v130;
        v132 = (uint64_t)(v131 + 4);
        goto LABEL_257;
      }
      v133 = (char *)v1107;
      v134 = v1108 - (_BYTE *)v1107;
      v135 = (v1108 - (_BYTE *)v1107) >> 2;
      v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 62)
        sub_19C07DA0C();
      v137 = v1109 - (_BYTE *)v1107;
      if ((v1109 - (_BYTE *)v1107) >> 1 > v136)
        v136 = v137 >> 1;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL)
        v138 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (v138)
      {
        if (v138 >> 62)
          sub_19C07C7FC();
        v139 = (char *)operator new(4 * v138);
        v140 = (int *)&v139[4 * v135];
        *v140 = v130;
        v132 = (uint64_t)(v140 + 1);
        if (v131 != v133)
        {
LABEL_246:
          v141 = v131 - 4 - v133;
          if (v141 < 0x2C)
          {
            v42 = v1087;
            goto LABEL_254;
          }
          v142 = v131 - &v139[v134];
          v42 = v1087;
          if (v142 < 0x20)
            goto LABEL_1672;
          v143 = (v141 >> 2) + 1;
          v144 = 4 * (v143 & 0x7FFFFFFFFFFFFFF8);
          v145 = &v131[-v144];
          v140 = (int *)((char *)v140 - v144);
          v146 = &v139[4 * v135 - 16];
          v147 = v131 - 16;
          v148 = v143 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v149 = *(_OWORD *)v147;
            *((_OWORD *)v146 - 1) = *((_OWORD *)v147 - 1);
            *(_OWORD *)v146 = v149;
            v146 -= 32;
            v147 -= 32;
            v148 -= 8;
          }
          while (v148);
          v131 = v145;
          if (v143 != (v143 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1672:
            do
            {
LABEL_254:
              v150 = *((_DWORD *)v131 - 1);
              v131 -= 4;
              *--v140 = v150;
            }
            while (v131 != v133);
          }
LABEL_255:
          v1107 = v140;
          v1108 = (char *)v132;
          v1109 = &v139[4 * v138];
          if (v133)
          {
            operator delete(v133);
            v125 = v1105;
          }
LABEL_257:
          v1108 = (char *)v132;
          v151 = (int)(v129 + 0.5);
          if (v125 < v1106)
          {
            *(_DWORD *)v125 = v151;
            v128 = (uint64_t)(v125 + 4);
          }
          else
          {
            v152 = (char *)v1104;
            v153 = v125 - (_BYTE *)v1104;
            v154 = (v125 - (_BYTE *)v1104) >> 2;
            v155 = v154 + 1;
            if ((unint64_t)(v154 + 1) >> 62)
              sub_19C07DA0C();
            v156 = v1106 - (_BYTE *)v1104;
            if ((v1106 - (_BYTE *)v1104) >> 1 > v155)
              v155 = v156 >> 1;
            if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
              v157 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v157 = v155;
            if (v157)
            {
              if (v157 >> 62)
                sub_19C07C7FC();
              v158 = operator new(4 * v157);
              v159 = (int *)&v158[4 * v154];
              *v159 = v151;
              v128 = (uint64_t)(v159 + 1);
              if (v125 == v152)
                goto LABEL_272;
            }
            else
            {
              v158 = 0;
              v159 = (int *)(4 * v154);
              *(_DWORD *)(4 * v154) = v151;
              v128 = 4 * v154 + 4;
              if (v125 == v152)
                goto LABEL_272;
            }
            v160 = v125 - 4 - v152;
            if (v160 >= 0xBC)
            {
              if (&v158[v153 - 4 - (v160 & 0xFFFFFFFFFFFFFFFCLL)] > &v158[v153 - 4])
              {
                v161 = v125;
              }
              else if (&v125[-(v160 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v125 - 4)
              {
                v161 = v125;
              }
              else if ((unint64_t)(v125 - v158 - v153) >= 0x20)
              {
                v163 = (v160 >> 2) + 1;
                v164 = 4 * (v163 & 0x7FFFFFFFFFFFFFF8);
                v161 = &v125[-v164];
                v159 = (int *)((char *)v159 - v164);
                v165 = &v158[4 * v154 - 16];
                v166 = v125 - 16;
                v167 = v163 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v168 = *(_OWORD *)v166;
                  *(v165 - 1) = *((_OWORD *)v166 - 1);
                  *v165 = v168;
                  v165 -= 2;
                  v166 -= 32;
                  v167 -= 8;
                }
                while (v167);
                if (v163 == (v163 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_272;
              }
              else
              {
                v161 = v125;
              }
            }
            else
            {
              v161 = v125;
            }
            do
            {
              v162 = *((_DWORD *)v161 - 1);
              v161 -= 4;
              *--v159 = v162;
            }
            while (v161 != v152);
LABEL_272:
            v1104 = v159;
            v1105 = (char *)v128;
            v1106 = &v158[4 * v157];
            if (v152)
              operator delete(v152);
          }
          v1105 = (char *)v128;
          ++v126;
          v125 = (char *)v128;
          if (v126 != v127)
            continue;
          *(_DWORD *)v1104 += v127 - 1;
          v272 = 4 * v127;
          v273 = v1176;
          if ((unint64_t)v1082 < v1084)
          {
            *v1082 = v1176;
            *((_DWORD *)v1082 + 2) = v272;
            *((_BYTE *)v1082 + 12) = 0;
            v274 = (char *)(v1082 + 3);
            v1082[2] = 0;
            v275 = v1177;
            if ((unint64_t)(v1082 + 3) < v1084)
              goto LABEL_383;
LABEL_914:
            v632 = 0xAAAAAAAAAAAAAAABLL * ((v274 - v42) >> 3) + 1;
            if (v632 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v632)
              v632 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
              v633 = 0xAAAAAAAAAAAAAAALL;
            else
              v633 = v632;
            if (v633 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v634 = (char *)operator new(24 * v633);
            v635 = &v634[8 * ((v274 - v42) >> 3)];
            *(_QWORD *)v635 = v275;
            v276 = v635 + 24;
            v636 = &v634[v274 - v42];
            *((_DWORD *)v636 + 2) = v272;
            v636[12] = 0;
            *((_QWORD *)v636 + 2) = 0;
            if (v274 == v42)
            {
              v638 = &v634[8 * ((v274 - v42) >> 3)];
              v277 = v1077;
              v1084 = (unint64_t)&v634[24 * v633];
              if (v42)
                goto LABEL_925;
            }
            else
            {
              v277 = v1077;
              do
              {
                v637 = *(_OWORD *)(v274 - 24);
                v638 = v635 - 24;
                *((_QWORD *)v635 - 1) = *((_QWORD *)v274 - 1);
                *(_OWORD *)(v635 - 24) = v637;
                v274 -= 24;
                v635 -= 24;
              }
              while (v274 != v42);
              v1084 = (unint64_t)&v634[24 * v633];
              if (v42)
LABEL_925:
                operator delete(v42);
            }
            v42 = v638;
LABEL_927:
            v639 = 2 * (v277 != 2);
            v640 = (*(_DWORD *)v1104 * *(_DWORD *)v1107) << v639;
            v641 = v1172;
            if ((unint64_t)v276 < v1084)
            {
              *(_QWORD *)v276 = v1172;
              *((_DWORD *)v276 + 2) = v640;
              v276[12] = v1076;
              v1082 = (float32x4_t **)(v276 + 24);
              *((_DWORD *)v276 + 4) = v105;
              *((_DWORD *)v276 + 5) = v104;
              goto LABEL_941;
            }
            v642 = 0xAAAAAAAAAAAAAAABLL * ((v276 - v42) >> 3) + 1;
            if (v642 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07DA0C();
            if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v642)
              v642 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
              v643 = 0xAAAAAAAAAAAAAAALL;
            else
              v643 = v642;
            if (v643 > 0xAAAAAAAAAAAAAAALL)
              sub_19C07C7FC();
            v644 = (char *)operator new(24 * v643);
            v645 = &v644[8 * ((v276 - v42) >> 3)];
            *(_QWORD *)v645 = v641;
            v1082 = (float32x4_t **)(v645 + 24);
            v646 = &v644[v276 - v42];
            *((_DWORD *)v646 + 2) = v640;
            v646[12] = v1076;
            *((_DWORD *)v646 + 4) = v105;
            *((_DWORD *)v646 + 5) = v104;
            if (v276 == v42)
            {
              v648 = &v644[8 * ((v276 - v42) >> 3)];
              v1084 = (unint64_t)&v644[24 * v643];
              if (v42)
                goto LABEL_939;
            }
            else
            {
              do
              {
                v647 = *(_OWORD *)(v276 - 24);
                v648 = v645 - 24;
                *((_QWORD *)v645 - 1) = *((_QWORD *)v276 - 1);
                *(_OWORD *)(v645 - 24) = v647;
                v276 -= 24;
                v645 -= 24;
              }
              while (v276 != v42);
              v1084 = (unint64_t)&v644[24 * v643];
              if (v42)
LABEL_939:
                operator delete(v42);
            }
            v42 = v648;
LABEL_941:
            *(_DWORD *)&__src[196] |= 1u;
            if (v640 <= 0)
              v649 = -(-v640 & 3);
            else
              v649 = v640 & 3;
            if (v649)
              v650 = v640 - v649 + 8;
            else
              v650 = v640;
            v1080 += 8 * v127 + v650;
            if (v127 >= 2)
            {
              v651 = 1;
              v1095 = v639;
              while (1)
              {
                v654 = (*((_DWORD *)v1104 + v651) * *((_DWORD *)v1107 + v651)) << v639;
                v655 = &__p[0].i8[8 * v651];
                v656 = (float32x4_t *)*((_QWORD *)v655 + 56);
                if ((unint64_t)v1082 < v1084)
                {
                  *v1082 = v656;
                  *((_DWORD *)v1082 + 2) = v654;
                  *((_BYTE *)v1082 + 12) = v1076;
                  v657 = (char *)(v1082 + 3);
                  *((_DWORD *)v1082 + 4) = v105;
                  *((_DWORD *)v1082 + 5) = v104;
                  goto LABEL_971;
                }
                v658 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
                if (v658 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07DA0C();
                if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v658)
                  v658 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
                  v659 = 0xAAAAAAAAAAAAAAALL;
                else
                  v659 = v658;
                if (v659 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C07C7FC();
                v660 = (char *)operator new(24 * v659);
                v661 = v1082;
                v662 = &v660[8 * (((char *)v1082 - v42) >> 3)];
                *(_QWORD *)v662 = v656;
                v657 = v662 + 24;
                v663 = &v660[(char *)v1082 - v42];
                *((_DWORD *)v663 + 2) = v654;
                v663[12] = v1076;
                *((_DWORD *)v663 + 4) = v105;
                *((_DWORD *)v663 + 5) = v104;
                v664 = v42;
                if (v1082 != (float32x4_t **)v42)
                  break;
                v42 = &v660[8 * (((char *)v1082 - v42) >> 3)];
                v639 = v1095;
                v1084 = (unint64_t)&v660[24 * v659];
                if (v664)
                  goto LABEL_970;
LABEL_971:
                if (v654 <= 0)
                  v666 = -(-v654 & 3);
                else
                  v666 = v654 & 3;
                if (v666)
                  v667 = v654 - v666 + 8;
                else
                  v667 = v654;
                v668 = (*(_DWORD *)v1107 * *((_DWORD *)v1107 + v651)) << v639;
                v669 = *((_QWORD *)v655 + 71);
                if ((unint64_t)v657 < v1084)
                {
                  *(_QWORD *)v657 = v669;
                  *((_DWORD *)v657 + 2) = v668;
                  v657[12] = v1076;
                  v1082 = (float32x4_t **)(v657 + 24);
                  *((_DWORD *)v657 + 4) = v105;
                  *((_DWORD *)v657 + 5) = v104;
                }
                else
                {
                  v670 = v657 - v42;
                  v671 = v42;
                  v672 = 0xAAAAAAAAAAAAAAABLL * ((v657 - v42) >> 3);
                  v673 = v672 + 1;
                  if (v672 + 1 > 0xAAAAAAAAAAAAAAALL)
                    sub_19C07DA0C();
                  v674 = v671;
                  v675 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v671) >> 3);
                  if (2 * v675 > v673)
                    v673 = 2 * v675;
                  if (v675 >= 0x555555555555555)
                    v676 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v676 = v673;
                  if (v676 > 0xAAAAAAAAAAAAAAALL)
                    sub_19C07C7FC();
                  v677 = (char *)operator new(24 * v676);
                  v678 = &v677[24 * v672];
                  *(_QWORD *)v678 = v669;
                  v679 = (float32x4_t **)(v678 + 24);
                  v680 = &v677[v670];
                  *((_DWORD *)v680 + 2) = v668;
                  v680[12] = v1076;
                  *((_DWORD *)v680 + 4) = v105;
                  *((_DWORD *)v680 + 5) = v104;
                  v681 = v674;
                  if (v657 == v674)
                  {
                    v42 = &v677[24 * v672];
                    v639 = v1095;
                    v1082 = (float32x4_t **)(v678 + 24);
                    v1084 = (unint64_t)&v677[24 * v676];
                    if (v681)
                      goto LABEL_993;
                  }
                  else
                  {
                    v639 = v1095;
                    do
                    {
                      v682 = *(_OWORD *)(v657 - 24);
                      v42 = v678 - 24;
                      *((_QWORD *)v678 - 1) = *((_QWORD *)v657 - 1);
                      *(_OWORD *)(v678 - 24) = v682;
                      v657 -= 24;
                      v678 -= 24;
                    }
                    while (v657 != v681);
                    v1082 = v679;
                    v1084 = (unint64_t)&v677[24 * v676];
                    if (v681)
LABEL_993:
                      operator delete(v681);
                  }
                }
                if (v668 <= 0)
                  v652 = -(-v668 & 3);
                else
                  v652 = v668 & 3;
                if (v652)
                  v653 = v668 - v652 + 8;
                else
                  v653 = v668;
                v1080 += v667 + v653;
                if (++v651 == v127)
                  goto LABEL_994;
              }
              v639 = v1095;
              do
              {
                v665 = *(_OWORD *)(v661 - 3);
                v42 = v662 - 24;
                *((_QWORD *)v662 - 1) = *(v661 - 1);
                *(_OWORD *)(v662 - 24) = v665;
                v661 -= 3;
                v662 -= 24;
              }
              while (v661 != (float32x4_t **)v664);
              v1084 = (unint64_t)&v660[24 * v659];
              if (!v664)
                goto LABEL_971;
LABEL_970:
              operator delete(v664);
              goto LABEL_971;
            }
LABEL_994:
            if (__p[22].i32[0] != 1
              || (*(_DWORD *)&__src[138] = 1, *(_DWORD *)&__src[196] |= 7u, (v683 = (char *)v1147[0]) == 0))
            {
LABEL_996:
              if (v1104)
              {
                v1105 = (char *)v1104;
                operator delete(v1104);
              }
              if (!v1107)
              {
LABEL_1301:
                v173 = (char *)__dst;
                v174 = v1154;
                if ((unint64_t)__dst >= v1154)
                  goto LABEL_1190;
                goto LABEL_1302;
              }
              v1108 = (char *)v1107;
              operator delete(v1107);
              v173 = (char *)__dst;
              v174 = v1154;
              if ((unint64_t)__dst < v1154)
                goto LABEL_1302;
LABEL_1190:
              v878 = (char *)v1152;
              v879 = 0x8F5C28F5C28F5C29 * ((v173 - (_BYTE *)v1152) >> 4);
              v880 = v879 + 1;
              v881 = v1063;
              if (v879 + 1 > 0xA3D70A3D70A3D7)
                sub_19C07DA0C();
              v882 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v174 - (_QWORD)v1152) >> 4);
              if (2 * v882 > v880)
                v880 = 2 * v882;
              if (v882 >= 0x51EB851EB851EBLL)
                v883 = 0xA3D70A3D70A3D7;
              else
                v883 = v880;
              if (v883)
              {
                if (v883 > 0xA3D70A3D70A3D7)
                  sub_19C07C7FC();
                v884 = (char *)operator new(400 * v883);
              }
              else
              {
                v884 = 0;
              }
              v885 = &v884[400 * v879];
              memcpy(v885, __src, 0x190uLL);
              v886 = v885;
              if (v173 != v878)
              {
                do
                {
                  v173 -= 400;
                  v886 -= 400;
                  memcpy(v886, v173, 0x190uLL);
                }
                while (v173 != v878);
                v173 = v878;
              }
              v1152 = v886;
              __dst = v885 + 400;
              v1154 = (unint64_t)&v884[400 * v883];
              if (v173)
                operator delete(v173);
              __dst = v885 + 400;
              if (SHIBYTE(v1145) < 0)
                goto LABEL_1303;
              goto LABEL_85;
            }
            while (2)
            {
              if (v683[39] < 0)
              {
                sub_19C07C6E8(v1141, *((void **)v683 + 2), *((_QWORD *)v683 + 3));
              }
              else
              {
                *(_OWORD *)v1141 = *((_OWORD *)v683 + 1);
                v1142 = (char *)*((_QWORD *)v683 + 4);
              }
              v1143 = *((_DWORD *)v683 + 10);
              v1139 = 0u;
              v1140 = 0u;
              v1137 = 0u;
              v1138 = 0u;
              v1135 = 0u;
              v1136 = 0u;
              v1133 = 0u;
              v1134 = 0u;
              v1131 = 0u;
              v1132 = 0u;
              v1129 = 0u;
              v1130 = 0u;
              v1127 = 0u;
              v1128 = 0u;
              v1125 = 0u;
              v1126 = 0u;
              v1123 = 0u;
              v1124 = 0u;
              v1121 = 0u;
              v1122 = 0u;
              v1119 = 0u;
              v1120 = 0u;
              v1117 = 0u;
              v1118 = 0u;
              v1115 = 0u;
              v1116 = 0u;
              v1113 = 0u;
              v1114 = 0u;
              v1112 = 0u;
              *(_OWORD *)v1110 = 0u;
              memset(v1111, 0, sizeof(v1111));
              sub_19C233EB0(v1081, (uint64_t)v1141);
              v684 = v1104;
              *(_DWORD *)v1104 -= v127 - 1;
              if (v1077 == 2)
              {
                if ((int)v127 < 1)
                  goto LABEL_1094;
                v685 = 0;
                v686 = 1;
                while (2)
                {
                  v688 = &__p[0].i8[8 * v685];
                  v689 = &v1110[v685];
                  v690 = *((_DWORD *)v1107 + v685);
                  v691 = (v684[v685] * v690);
                  if ((int)v691 >= 1)
                  {
                    v692 = (int8x16_t *)*((_QWORD *)v688 + 56);
                    v693 = (int8x16_t *)v689[56];
                    if (v691 < 8)
                    {
                      v694 = 0;
                      LOBYTE(v695) = v686;
                      goto LABEL_1026;
                    }
                    if (v691 >= 0x20)
                    {
                      v694 = v691 & 0x7FFFFFE0;
                      v696 = v692 + 1;
                      v697 = vdupq_n_s8(v686);
                      v698 = v693 + 1;
                      v699 = v691 & 0xFFFFFFE0;
                      v700 = v697;
                      v701 = v697;
                      do
                      {
                        v700 = vandq_s8(vceqq_s8(v696[-1], v698[-1]), v700);
                        v701 = vandq_s8(vceqq_s8(*v696, *v698), v701);
                        v696 += 2;
                        v698 += 2;
                        v699 -= 32;
                      }
                      while (v699);
                      v702 = (uint8x16_t)vcltzq_s8(vshlq_n_s8(veorq_s8(vbslq_s8(vcltzq_s8(vshlq_n_s8(veorq_s8(v700, v697), 7uLL)), v700, v701), v697), 7uLL));
                      v702.i8[0] = vmaxvq_u8(v702);
                      v695 = (v702.i32[0] ^ 1) & v686;
                      if (v694 != v691)
                      {
                        if (((LOBYTE(v684[v685]) * (_BYTE)v690) & 0x18) == 0)
                          goto LABEL_1026;
                        goto LABEL_1023;
                      }
                      v686 &= v702.i32[0] ^ 1;
                    }
                    else
                    {
                      v694 = 0;
                      v695 = v686;
LABEL_1023:
                      v703 = v694;
                      v694 = v691 & 0xFFFFFFF8;
                      v704 = vdup_n_s8(v695);
                      v705 = (int8x8_t *)&v692->i8[v703];
                      v706 = (int8x8_t *)&v693->i8[v703];
                      v707 = v703 - v694;
                      do
                      {
                        v708 = *v705++;
                        v709 = v708;
                        v710 = *v706++;
                        v704 = vand_s8(vceq_s8(v709, v710), v704);
                        v707 += 8;
                      }
                      while (v707);
                      v711 = (uint8x8_t)vcltz_s8(vshl_n_s8(veor_s8(v704, vdup_n_s8(v686)), 7uLL));
                      v711.i8[0] = vmaxv_u8(v711);
                      LOBYTE(v695) = (v711.i8[0] ^ 1) & v686;
                      v686 &= v711.i32[0] ^ 1;
                      if (v694 != v691)
                      {
LABEL_1026:
                        v712 = &v693->u8[v694];
                        v713 = &v692->u8[v694];
                        v714 = v691 - v694;
                        LOBYTE(v686) = v695;
                        do
                        {
                          v716 = *v713++;
                          v715 = v716;
                          v717 = *v712++;
                          v686 = (v715 == v717) & v686;
                          --v714;
                        }
                        while (v714);
                      }
                    }
                  }
                  if (v685)
                  {
                    v718 = (*(_DWORD *)v1107 * v690);
                    if ((int)v718 >= 1)
                    {
                      v719 = (int8x16_t *)*((_QWORD *)v688 + 71);
                      v720 = (int8x16_t *)v689[71];
                      if (v718 < 8)
                      {
                        v721 = 0;
                        LOBYTE(v722) = v686;
                        goto LABEL_1041;
                      }
                      if (v718 >= 0x20)
                      {
                        v721 = v718 & 0x7FFFFFE0;
                        v723 = v719 + 1;
                        v724 = vdupq_n_s8(v686);
                        v725 = v720 + 1;
                        v726 = v718 & 0xFFFFFFE0;
                        v727 = v724;
                        v728 = v724;
                        do
                        {
                          v727 = vandq_s8(vceqq_s8(v723[-1], v725[-1]), v727);
                          v728 = vandq_s8(vceqq_s8(*v723, *v725), v728);
                          v723 += 2;
                          v725 += 2;
                          v726 -= 32;
                        }
                        while (v726);
                        v729 = (uint8x16_t)vcltzq_s8(vshlq_n_s8(veorq_s8(vbslq_s8(vcltzq_s8(vshlq_n_s8(veorq_s8(v727, v724), 7uLL)), v727, v728), v724), 7uLL));
                        v729.i8[0] = vmaxvq_u8(v729);
                        v722 = (v729.i32[0] ^ 1) & v686;
                        if (v721 != v718)
                        {
                          if ((v718 & 0x18) == 0)
                            goto LABEL_1041;
                          goto LABEL_1038;
                        }
                        v686 &= v729.i32[0] ^ 1;
                      }
                      else
                      {
                        v721 = 0;
                        v722 = v686;
LABEL_1038:
                        v730 = v721;
                        v721 = v718 & 0xFFFFFFF8;
                        v731 = vdup_n_s8(v722);
                        v732 = (int8x8_t *)&v719->i8[v730];
                        v733 = (int8x8_t *)&v720->i8[v730];
                        v734 = v730 - v721;
                        do
                        {
                          v735 = *v732++;
                          v736 = v735;
                          v737 = *v733++;
                          v731 = vand_s8(vceq_s8(v736, v737), v731);
                          v734 += 8;
                        }
                        while (v734);
                        v738 = (uint8x8_t)vcltz_s8(vshl_n_s8(veor_s8(v731, vdup_n_s8(v686)), 7uLL));
                        v738.i8[0] = vmaxv_u8(v738);
                        LOBYTE(v722) = (v738.i8[0] ^ 1) & v686;
                        v686 &= v738.i32[0] ^ 1;
                        if (v721 != v718)
                        {
LABEL_1041:
                          v739 = &v720->u8[v721];
                          v740 = &v719->u8[v721];
                          v741 = v718 - v721;
                          LOBYTE(v686) = v722;
                          do
                          {
                            v743 = *v740++;
                            v742 = v743;
                            v744 = *v739++;
                            v686 = (v742 == v744) & v686;
                            --v741;
                          }
                          while (v741);
                        }
                      }
                    }
                  }
                  if (++v685 == v127)
                    goto LABEL_1093;
                  continue;
                }
              }
              if ((int)v127 < 1)
                goto LABEL_1094;
              v687 = 0;
              v686 = 1;
LABEL_1046:
              v745 = &__p[0].i8[8 * v687];
              v746 = &v1110[v687];
              v747 = *((_DWORD *)v1107 + v687);
              v748 = (v684[v687] * v747);
              if ((int)v748 >= 1)
              {
                v749 = (float32x4_t *)*((_QWORD *)v745 + 56);
                v750 = (float32x4_t *)v746[56];
                if (v748 >= 8)
                {
                  if (v748 >= 0x20)
                  {
                    v751 = v748 & 0x7FFFFFE0;
                    v753 = v749 + 4;
                    v754 = vdupq_n_s8(v686);
                    v755 = v750 + 4;
                    v756 = v748 & 0xFFFFFFE0;
                    v757 = v754;
                    v758 = v754;
                    do
                    {
                      v759 = v755[2];
                      v760 = vabdq_f32(v753[-1], v755[-1]);
                      v761 = vabdq_f32(v753[-2], v755[-2]);
                      v762 = vabdq_f32(v753[-3], v755[-3]);
                      v763 = vabdq_f32(v753[-4], v755[-4]);
                      v764 = vabdq_f32(v753[3], v755[3]);
                      v765 = *v755;
                      v766 = v755[1];
                      v755 += 8;
                      v767 = vabdq_f32(v753[2], v759);
                      v768 = vabdq_f32(v753[1], v766);
                      v769 = vabdq_f32(*v753, v765);
                      v757 = vbicq_s8(v757, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v763.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v763), v1071)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v762.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v762), v1071))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v761.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v761), v1071)),
                                              (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v760.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v760), v1071)))));
                      v758 = vbicq_s8(v758, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v769.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v769), v1071)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v768.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v768), v1071))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v767.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v767), v1071)),
                                              (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v764.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v764), v1071)))));
                      v753 += 8;
                      v756 -= 32;
                    }
                    while (v756);
                    if ((vmaxvq_u8((uint8x16_t)vornq_s8(vmvnq_s8(vceqq_s8(v757, v754)), vceqq_s8(v758, v754))) & 1) != 0)
                      v752 = 0;
                    else
                      v752 = v686;
                    if (v751 == v748)
                    {
                      v686 = v752;
                      goto LABEL_1069;
                    }
                    if (((LOBYTE(v684[v687]) * (_BYTE)v747) & 0x18) == 0)
                      goto LABEL_1065;
                  }
                  else
                  {
                    v751 = 0;
                    v752 = v686;
                  }
                  v770 = v751;
                  v751 = v748 & 0xFFFFFFF8;
                  v771 = vdup_n_s8(v752);
                  v772 = (float32x4_t *)((char *)v749 + 4 * v770);
                  v773 = (float32x4_t *)((char *)v750 + 4 * v770);
                  v774 = v770 - v751;
                  do
                  {
                    v775 = *v772;
                    v776 = v772[1];
                    v772 += 2;
                    v777 = *v773;
                    v778 = v773[1];
                    v773 += 2;
                    v779 = vabdq_f32(v776, v778);
                    v780 = vabdq_f32(v775, v777);
                    v771 = vbic_s8(v771, vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v780.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v780), v1071)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v779.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v779), v1071)))));
                    v774 += 8;
                  }
                  while (v774);
                  if (*(_QWORD *)&v771 == vdup_n_s8(v686))
                    v752 = v686;
                  else
                    v752 = 0;
                  v686 = v752;
                  if (v751 != v748)
                    goto LABEL_1065;
                }
                else
                {
                  v751 = 0;
                  v752 = v686;
LABEL_1065:
                  v781 = &v750->f32[v751];
                  v782 = &v749->f32[v751];
                  v783 = v748 - v751;
                  v686 = v752;
                  do
                  {
                    v784 = *v782++;
                    v785 = v784;
                    v786 = *v781++;
                    if (vabds_f32(v785, v786) > 0.001)
                      v686 = 0;
                    --v783;
                  }
                  while (v783);
                }
              }
LABEL_1069:
              if (v687)
              {
                v787 = (*(_DWORD *)v1107 * v747);
                if ((int)v787 >= 1)
                {
                  v788 = (float32x4_t *)*((_QWORD *)v745 + 71);
                  v789 = (float32x4_t *)v746[71];
                  if (v787 >= 8)
                  {
                    if (v787 >= 0x20)
                    {
                      v790 = v787 & 0x7FFFFFE0;
                      v792 = v788 + 4;
                      v793 = vdupq_n_s8(v686);
                      v794 = v789 + 4;
                      v795 = v787 & 0xFFFFFFE0;
                      v796 = v793;
                      v797 = v793;
                      do
                      {
                        v798 = v794[2];
                        v799 = vabdq_f32(v792[-1], v794[-1]);
                        v800 = vabdq_f32(v792[-2], v794[-2]);
                        v801 = vabdq_f32(v792[-3], v794[-3]);
                        v802 = vabdq_f32(v792[-4], v794[-4]);
                        v803 = vabdq_f32(v792[3], v794[3]);
                        v804 = *v794;
                        v805 = v794[1];
                        v794 += 8;
                        v806 = vabdq_f32(v792[2], v798);
                        v807 = vabdq_f32(v792[1], v805);
                        v808 = vabdq_f32(*v792, v804);
                        v796 = vbicq_s8(v796, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v802.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v802), v1071)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v801.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v801), v1071))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v800.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v800), v1071)),
                                                (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v799.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v799), v1071)))));
                        v797 = vbicq_s8(v797, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v808.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v808), v1071)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v807.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v807), v1071))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v806.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v806), v1071)),
                                                (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v803.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v803), v1071)))));
                        v792 += 8;
                        v795 -= 32;
                      }
                      while (v795);
                      if ((vmaxvq_u8((uint8x16_t)vornq_s8(vmvnq_s8(vceqq_s8(v796, v793)), vceqq_s8(v797, v793))) & 1) != 0)
                        v791 = 0;
                      else
                        v791 = v686;
                      if (v790 == v787)
                      {
                        v686 = v791;
                        goto LABEL_1045;
                      }
                      if ((v787 & 0x18) == 0)
                        goto LABEL_1088;
                    }
                    else
                    {
                      v790 = 0;
                      v791 = v686;
                    }
                    v809 = v790;
                    v790 = v787 & 0xFFFFFFF8;
                    v810 = vdup_n_s8(v791);
                    v811 = (float32x4_t *)((char *)v788 + 4 * v809);
                    v812 = (float32x4_t *)((char *)v789 + 4 * v809);
                    v813 = v809 - v790;
                    do
                    {
                      v814 = *v811;
                      v815 = v811[1];
                      v811 += 2;
                      v816 = *v812;
                      v817 = v812[1];
                      v812 += 2;
                      v818 = vabdq_f32(v815, v817);
                      v819 = vabdq_f32(v814, v816);
                      v810 = vbic_s8(v810, vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v819.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v819), v1071)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)v818.f32), v1071), (int32x4_t)vcgtq_f64(vcvt_hight_f64_f32(v818), v1071)))));
                      v813 += 8;
                    }
                    while (v813);
                    if (*(_QWORD *)&v810 == vdup_n_s8(v686))
                      v791 = v686;
                    else
                      v791 = 0;
                    v686 = v791;
                    if (v790 != v787)
                      goto LABEL_1088;
                  }
                  else
                  {
                    v790 = 0;
                    v791 = v686;
LABEL_1088:
                    v820 = &v789->f32[v790];
                    v821 = &v788->f32[v790];
                    v822 = v787 - v790;
                    v686 = v791;
                    do
                    {
                      v823 = *v821++;
                      v824 = v823;
                      v825 = *v820++;
                      if (vabds_f32(v824, v825) > 0.001)
                        v686 = 0;
                      --v822;
                    }
                    while (v822);
                  }
                }
              }
LABEL_1045:
              if (++v687 == v127)
              {
LABEL_1093:
                if ((v686 & 1) != 0)
                {
LABEL_1094:
                  v1167 = v1141;
                  v826 = sub_19C1B8700((uint64_t)v1146, (uint64_t)v1141, (uint64_t)&unk_19C27ADD0, (__int128 **)&v1167);
                  *((_DWORD *)v1152 + 100 * *((int *)v826 + 10) + 97) = *(_DWORD *)&__src[194];
                  if (SHIBYTE(v1142) < 0)
                    goto LABEL_1095;
LABEL_1002:
                  v683 = *(char **)v683;
                  if (!v683)
                    goto LABEL_996;
                }
                else
                {
                  v827 = sub_19C1A0644();
                  if (os_log_type_enabled(v827, OS_LOG_TYPE_ERROR))
                    sub_19C255FE4(&buf, v1103, v827);
                  if ((SHIBYTE(v1142) & 0x80000000) == 0)
                    goto LABEL_1002;
LABEL_1095:
                  operator delete(v1141[0]);
                  v683 = *(char **)v683;
                  if (!v683)
                    goto LABEL_996;
                }
                continue;
              }
              goto LABEL_1046;
            }
          }
          v624 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1082 - v42) >> 3) + 1;
          if (v624 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07DA0C();
          if (0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) > v624)
            v624 = 0x5555555555555556 * ((uint64_t)(v1084 - (_QWORD)v42) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1084 - (_QWORD)v42) >> 3) >= 0x555555555555555)
            v625 = 0xAAAAAAAAAAAAAAALL;
          else
            v625 = v624;
          if (v625 > 0xAAAAAAAAAAAAAAALL)
            sub_19C07C7FC();
          v626 = (char *)operator new(24 * v625);
          v627 = &v626[8 * (((char *)v1082 - v42) >> 3)];
          *(_QWORD *)v627 = v273;
          v274 = v627 + 24;
          v628 = &v626[(char *)v1082 - v42];
          *((_DWORD *)v628 + 2) = v272;
          v628[12] = 0;
          *((_QWORD *)v628 + 2) = 0;
          if (v1082 == (float32x4_t **)v42)
          {
            v631 = &v626[8 * (((char *)v1082 - v42) >> 3)];
            v1084 = (unint64_t)&v626[24 * v625];
            if (v42)
              goto LABEL_912;
          }
          else
          {
            v629 = (char *)v1082;
            do
            {
              v630 = *(_OWORD *)(v629 - 24);
              v631 = v627 - 24;
              *((_QWORD *)v627 - 1) = *((_QWORD *)v629 - 1);
              *(_OWORD *)(v627 - 24) = v630;
              v629 -= 24;
              v627 -= 24;
            }
            while (v629 != v42);
            v1084 = (unint64_t)&v626[24 * v625];
            if (v42)
LABEL_912:
              operator delete(v42);
          }
          v42 = v631;
          v275 = v1177;
          if ((unint64_t)v274 >= v1084)
            goto LABEL_914;
LABEL_383:
          *(_QWORD *)v274 = v275;
          *((_DWORD *)v274 + 2) = v272;
          v274[12] = 0;
          v276 = v274 + 24;
          *((_QWORD *)v274 + 2) = 0;
          v277 = v1077;
          goto LABEL_927;
        }
      }
      else
      {
        v139 = 0;
        v140 = (int *)(4 * v135);
        *(_DWORD *)(4 * v135) = v130;
        v132 = 4 * v135 + 4;
        if (v131 != v133)
          goto LABEL_246;
      }
      break;
    }
    v42 = v1087;
    goto LABEL_255;
  }
  v1082 = 0;
  v42 = 0;
LABEL_1409:
  v981 = (uint64_t *)v1161;
  if (v1161 != &v1162)
  {
    v1101 = v42;
    do
    {
      if (*((char *)v981 + 55) < 0)
      {
        sub_19C07C6E8(__src, (void *)v981[4], v981[5]);
      }
      else
      {
        *(_OWORD *)__src = *((_OWORD *)v981 + 2);
        *(_QWORD *)&__src[8] = v981[6];
      }
      bzero(__p, 0x190uLL);
      if (__src[11] >= 0)
        v982 = (const char *)__src;
      else
        v982 = *(const char **)__src;
      strcpy(__p[0].i8, v982);
      __p[2].i8[0] = -7;
      sub_19C233720(v1081, (uint64_t)__src, (char **)v1141);
      v983 = (void **)v1141[0];
      v1085 = (void **)v1141[1];
      if (v1141[0] == v1141[1])
      {
        if (!v1141[0])
          goto LABEL_1501;
      }
      else
      {
        do
        {
          if (*((char *)v983 + 23) < 0)
          {
            sub_19C07C6E8(v1110, *v983, (unint64_t)v983[1]);
          }
          else
          {
            v993 = *(_OWORD *)v983;
            *(_QWORD *)&v1111[0] = v983[2];
            *(_OWORD *)v1110 = v993;
          }
          v994 = *((unsigned int *)v983 + 6);
          DWORD2(v1111[0]) = *((_DWORD *)v983 + 6);
          v995 = v1156;
          v996 = &v1156;
          v997 = &v1156;
          if (v1156)
          {
            if ((SBYTE7(v1111[0]) & 0x80u) == 0)
              v998 = (void *)BYTE7(v1111[0]);
            else
              v998 = v1110[1];
            if ((SBYTE7(v1111[0]) & 0x80u) == 0)
              v999 = v1110;
            else
              v999 = (void **)v1110[0];
            while (1)
            {
              while (1)
              {
                v996 = (char **)v995;
                v1002 = (char *)*((_QWORD *)v995 + 4);
                v1000 = v995 + 32;
                v1001 = v1002;
                v1003 = v1000[23];
                if (v1003 >= 0)
                  v1004 = v1000[23];
                else
                  v1004 = *((_QWORD *)v1000 + 1);
                if (v1003 >= 0)
                  v1005 = v1000;
                else
                  v1005 = v1001;
                if (v1004 >= (unint64_t)v998)
                  v1006 = (size_t)v998;
                else
                  v1006 = v1004;
                v1007 = memcmp(v999, v1005, v1006);
                v1008 = (unint64_t)v998 < v1004;
                if (v1007)
                  v1008 = v1007 < 0;
                if (!v1008)
                  break;
                v995 = *v996;
                v997 = v996;
                if (!*v996)
                  goto LABEL_1460;
              }
              v1009 = memcmp(v1005, v999, v1006);
              v1010 = v1004 < (unint64_t)v998;
              if (v1009)
                v1010 = v1009 < 0;
              if (!v1010)
                break;
              v995 = v996[1];
              if (!v995)
              {
                v997 = v996 + 1;
                goto LABEL_1460;
              }
            }
            v1024 = *((_WORD *)v996 + 28);
            v42 = v1101;
          }
          else
          {
LABEL_1460:
            v42 = v1101;
            v1011 = (char *)operator new(0x40uLL);
            v1012 = v1011 + 32;
            if (SBYTE7(v1111[0]) < 0)
            {
              sub_19C07C6E8(v1012, v1110[0], (unint64_t)v1110[1]);
            }
            else
            {
              *(_OWORD *)v1012 = *(_OWORD *)v1110;
              *((_QWORD *)v1011 + 6) = *(_QWORD *)&v1111[0];
            }
            *((_WORD *)v1011 + 28) = 0;
            *(_QWORD *)v1011 = 0;
            *((_QWORD *)v1011 + 1) = 0;
            *((_QWORD *)v1011 + 2) = v996;
            *v997 = v1011;
            if (*v1155)
            {
              v1155 = (uint64_t **)*v1155;
              v1011 = *v997;
            }
            v1013 = v1156;
            v94 = v1011 == v1156;
            v1011[24] = v1011 == v1156;
            if (!v94)
            {
              do
              {
                v1014 = *((_QWORD *)v1011 + 2);
                if (*(_BYTE *)(v1014 + 24))
                  break;
                v1015 = *(char **)(v1014 + 16);
                v1016 = *(_QWORD *)v1015;
                if (*(_QWORD *)v1015 == v1014)
                {
                  v1019 = *((_QWORD *)v1015 + 1);
                  if (!v1019 || (v1020 = *(unsigned __int8 *)(v1019 + 24), v1017 = (_BYTE *)(v1019 + 24), v1020))
                  {
                    if (*(char **)v1014 == v1011)
                    {
                      *(_BYTE *)(v1014 + 24) = 1;
                      v1015[24] = 0;
                      v1023 = *(_QWORD *)(v1014 + 8);
                      *(_QWORD *)v1015 = v1023;
                      if (v1023)
                        goto LABEL_1480;
                    }
                    else
                    {
                      v1021 = *(uint64_t **)(v1014 + 8);
                      v1022 = *v1021;
                      *(_QWORD *)(v1014 + 8) = *v1021;
                      if (v1022)
                      {
                        *(_QWORD *)(v1022 + 16) = v1014;
                        v1015 = *(char **)(v1014 + 16);
                      }
                      v1021[2] = (uint64_t)v1015;
                      *(_QWORD *)(*(_QWORD *)(v1014 + 16) + 8 * (**(_QWORD **)(v1014 + 16) != v1014)) = v1021;
                      *v1021 = v1014;
                      *(_QWORD *)(v1014 + 16) = v1021;
                      v1015 = (char *)v1021[2];
                      v1014 = *(_QWORD *)v1015;
                      *((_BYTE *)v1021 + 24) = 1;
                      v1015[24] = 0;
                      v1023 = *(_QWORD *)(v1014 + 8);
                      *(_QWORD *)v1015 = v1023;
                      if (v1023)
LABEL_1480:
                        *(_QWORD *)(v1023 + 16) = v1015;
                    }
                    *(_QWORD *)(v1014 + 16) = *((_QWORD *)v1015 + 2);
                    *(_QWORD *)(*((_QWORD *)v1015 + 2) + 8 * (**((_QWORD **)v1015 + 2) != (_QWORD)v1015)) = v1014;
                    *(_QWORD *)(v1014 + 8) = v1015;
LABEL_1487:
                    *((_QWORD *)v1015 + 2) = v1014;
                    break;
                  }
                }
                else if (!v1016 || (v1018 = *(unsigned __int8 *)(v1016 + 24), v1017 = (_BYTE *)(v1016 + 24), v1018))
                {
                  if (*(char **)v1014 == v1011)
                  {
                    v1026 = *((_QWORD *)v1011 + 1);
                    *(_QWORD *)v1014 = v1026;
                    if (v1026)
                    {
                      *(_QWORD *)(v1026 + 16) = v1014;
                      v1015 = *(char **)(v1014 + 16);
                    }
                    *((_QWORD *)v1011 + 2) = v1015;
                    *(_QWORD *)(*(_QWORD *)(v1014 + 16) + 8 * (**(_QWORD **)(v1014 + 16) != v1014)) = v1011;
                    *((_QWORD *)v1011 + 1) = v1014;
                    *(_QWORD *)(v1014 + 16) = v1011;
                    v1015 = (char *)*((_QWORD *)v1011 + 2);
                    v1011[24] = 1;
                    v1015[24] = 0;
                    v1014 = *((_QWORD *)v1015 + 1);
                    v1025 = *(char **)v1014;
                    *((_QWORD *)v1015 + 1) = *(_QWORD *)v1014;
                    if (v1025)
LABEL_1485:
                      *((_QWORD *)v1025 + 2) = v1015;
                  }
                  else
                  {
                    *(_BYTE *)(v1014 + 24) = 1;
                    v1015[24] = 0;
                    v1014 = *((_QWORD *)v1015 + 1);
                    v1025 = *(char **)v1014;
                    *((_QWORD *)v1015 + 1) = *(_QWORD *)v1014;
                    if (v1025)
                      goto LABEL_1485;
                  }
                  *(_QWORD *)(v1014 + 16) = *((_QWORD *)v1015 + 2);
                  *(_QWORD *)(*((_QWORD *)v1015 + 2) + 8 * (**((_QWORD **)v1015 + 2) != (_QWORD)v1015)) = v1014;
                  *(_QWORD *)v1014 = v1015;
                  goto LABEL_1487;
                }
                *(_BYTE *)(v1014 + 24) = 1;
                v1011 = v1015;
                v1015[24] = v1015 == v1013;
                *v1017 = 1;
              }
              while (v1015 != v1013);
            }
            v1024 = 0;
            ++v1157;
            v994 = DWORD2(v1111[0]);
          }
          __p[23].i16[v994 + 2] = v1024;
          __p[2].i8[7] = sub_19C233D20(v1081, (unsigned __int8 **)v1110, (unsigned __int8 **)__src);
          if (SBYTE7(v1111[0]) < 0)
            operator delete(v1110[0]);
          v983 += 4;
        }
        while (v983 != v1085);
        v983 = (void **)v1141[0];
        if (!v1141[0])
        {
LABEL_1501:
          v985 = (char *)__dst;
          v986 = v1154;
          if ((unint64_t)__dst < v1154)
            goto LABEL_1502;
          goto LABEL_1422;
        }
      }
      v984 = (void **)v1141[1];
      if (v1141[1] == v983)
      {
        v1141[1] = v983;
        operator delete(v983);
        v985 = (char *)__dst;
        v986 = v1154;
        if ((unint64_t)__dst < v1154)
          goto LABEL_1502;
      }
      else
      {
        do
        {
          if (*((char *)v984 - 9) < 0)
            operator delete(*(v984 - 4));
          v984 -= 4;
        }
        while (v984 != v983);
        v1141[1] = v983;
        operator delete(v1141[0]);
        v985 = (char *)__dst;
        v986 = v1154;
        if ((unint64_t)__dst < v1154)
        {
LABEL_1502:
          memcpy(v985, __p, 0x190uLL);
          v1027 = v985 + 400;
          goto LABEL_1511;
        }
      }
LABEL_1422:
      v987 = (char *)v1152;
      v988 = 0x8F5C28F5C28F5C29 * ((v985 - (_BYTE *)v1152) >> 4);
      v989 = v988 + 1;
      if (v988 + 1 > 0xA3D70A3D70A3D7)
        sub_19C07DA0C();
      v990 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v986 - (_QWORD)v1152) >> 4);
      if (2 * v990 > v989)
        v989 = 2 * v990;
      if (v990 >= 0x51EB851EB851EBLL)
        v991 = 0xA3D70A3D70A3D7;
      else
        v991 = v989;
      if (v991)
      {
        if (v991 > 0xA3D70A3D70A3D7)
          sub_19C07C7FC();
        v992 = (char *)operator new(400 * v991);
      }
      else
      {
        v992 = 0;
      }
      v1028 = &v992[400 * v988];
      memcpy(v1028, __p, 0x190uLL);
      v1029 = v1028;
      if (v985 != v987)
      {
        do
        {
          v985 -= 400;
          v1029 -= 400;
          memcpy(v1029, v985, 0x190uLL);
        }
        while (v985 != v987);
        v985 = v987;
      }
      v1027 = v1028 + 400;
      v1152 = v1029;
      __dst = v1028 + 400;
      v1154 = (unint64_t)&v992[400 * v991];
      if (v985)
        operator delete(v985);
LABEL_1511:
      __dst = v1027;
      if (SHIBYTE(__src[11]) < 0)
      {
        operator delete(*(void **)__src);
        v1030 = (char *)v981[1];
        if (v1030)
        {
          do
          {
LABEL_1515:
            v1031 = (char **)v1030;
            v1030 = *(char **)v1030;
          }
          while (v1030);
          goto LABEL_1411;
        }
      }
      else
      {
        v1030 = (char *)v981[1];
        if (v1030)
          goto LABEL_1515;
      }
      do
      {
        v1031 = (char **)v981[2];
        v94 = *v1031 == (char *)v981;
        v981 = (uint64_t *)v1031;
      }
      while (!v94);
LABEL_1411:
      v981 = (uint64_t *)v1031;
    }
    while (v1031 != &v1162);
  }
  sub_19C088618(__p);
  std::ostream::write();
  std::ostream::write();
  if (v42 != (char *)v1082)
  {
    v1032 = v42;
    do
    {
      v1033 = *(void **)v1032;
      v1034 = *((_DWORD *)v1032 + 2);
      v1035 = v1032[12];
      v1036 = *((_QWORD *)v1032 + 2);
      *(_QWORD *)__src = 0;
      if (v1035)
      {
        v1141[0] = v1033;
        *(_QWORD *)__src = operator new[]();
        v1037 = (void *)operator new[]();
        v1110[0] = &unk_1E3D234C8;
        v1110[1] = 0;
        LODWORD(v1111[0]) = 0;
        DWORD1(v1111[0]) = v1034;
        *((_QWORD *)&v1111[0] + 1) = v1141;
        *(_QWORD *)&v1111[1] = __src;
        *((_QWORD *)&v1111[1] + 1) = v1036;
        sub_19C1A0478((uint64_t)v1110, 1, v1038, v1039, v1040);
        operator delete[](v1037);
      }
      std::ostream::write();
      if (*(_QWORD *)__src)
        operator delete[](*(void **)__src);
      if (v1034 <= 0)
        v1041 = -(-v1034 & 3);
      else
        v1041 = v1034 & 3;
      if (v1041)
      {
        LOBYTE(v1110[0]) = 0;
        v1042 = 9 - v1041;
        while (--v1042 >= 5)
          std::ostream::write();
        LOBYTE(v1141[0]) = 1;
        LOBYTE(v1144[0]) = 2;
        LOBYTE(v1107) = 2;
        LOBYTE(v1104) = 8;
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
      }
      v1032 += 24;
    }
    while (v1032 != (char *)v1082);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].i64[0] - 24)), *(__int32 *)((char *)__p[2].i32 + *(_QWORD *)(__p[0].i64[0] - 24)) | 4);
  __p[0].i64[0] = *MEMORY[0x1E0DE4F48];
  *(uint64_t *)((char *)__p[0].i64 + *(_QWORD *)(__p[0].i64[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1A1AD1A64](&__p[0].u64[1]);
  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](&v1170);
  v1043 = (void **)v1147[0];
  if (v1147[0])
  {
    do
    {
      v1049 = (void **)*v1043;
      if (*((char *)v1043 + 39) < 0)
        operator delete(v1043[2]);
      operator delete(v1043);
      v1043 = v1049;
    }
    while (v1049);
  }
  v1044 = v1146[0];
  v1146[0] = 0;
  if (v1044)
    operator delete(v1044);
  v1045 = (char *)v1149;
  if (v1149)
  {
    v1046 = v1150;
    v1047 = v1149;
    if (v1150 != v1149)
    {
      v1048 = v1150;
      do
      {
        v1051 = (void *)*((_QWORD *)v1048 - 3);
        v1048 -= 24;
        v1050 = v1051;
        if (v1051)
        {
          *((_QWORD *)v1046 - 2) = v1050;
          operator delete(v1050);
        }
        v1046 = v1048;
      }
      while (v1048 != v1045);
      v1047 = v1149;
    }
    v1150 = v1045;
    operator delete(v1047);
  }
  if (v42)
    operator delete(v42);
  if (v1152)
  {
    __dst = v1152;
    operator delete(v1152);
  }
  sub_19C098FBC((uint64_t)&v1155, v1156);
  v1052 = (void **)v1158;
  if (v1158)
  {
    v1053 = (void **)v1159;
    v1054 = v1158;
    if (v1159 != v1158)
    {
      do
      {
        if (*((char *)v1053 - 1) < 0)
          operator delete(*(v1053 - 3));
        v1053 -= 3;
      }
      while (v1053 != v1052);
      v1054 = v1158;
    }
    v1159 = (char *)v1052;
    operator delete(v1054);
  }
  sub_19C098FBC((uint64_t)&v1161, v1162);
  sub_19C098FBC((uint64_t)&v1164, v1165);
  return 1;
}

void sub_19C1AAF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p)
{
  void **v58;
  void *v59;
  unint64_t v60;
  void *v61;
  void **v62;
  unint64_t v63;
  void *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;

  if (__p)
    operator delete(__p);
  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  v58 = (void **)STACK[0x490];
  if (STACK[0x490])
  {
    do
    {
      v62 = (void **)*v58;
      if (*((char *)v58 + 39) < 0)
        operator delete(v58[2]);
      operator delete(v58);
      v58 = v62;
    }
    while (v62);
  }
  v59 = (void *)STACK[0x480];
  STACK[0x480] = 0;
  if (v59)
  {
    operator delete(v59);
    v60 = STACK[0x4B0];
    if (!STACK[0x4B0])
    {
LABEL_8:
      if (!a48)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else
  {
    v60 = STACK[0x4B0];
    if (!STACK[0x4B0])
      goto LABEL_8;
  }
  v63 = STACK[0x4B8];
  v64 = (void *)v60;
  if (STACK[0x4B8] != v60)
  {
    v65 = STACK[0x4B8];
    do
    {
      v67 = *(void **)(v65 - 24);
      v65 -= 24;
      v66 = v67;
      if (v67)
      {
        *(_QWORD *)(v63 - 16) = v66;
        operator delete(v66);
      }
      v63 = v65;
    }
    while (v65 != v60);
    v64 = (void *)STACK[0x4B0];
  }
  STACK[0x4B8] = v60;
  operator delete(v64);
  if (!a48)
  {
LABEL_9:
    v61 = (void *)STACK[0x4C8];
    if (!STACK[0x4C8])
    {
LABEL_24:
      sub_19C098FBC((uint64_t)&STACK[0x4E0], (char *)STACK[0x4E8]);
      v68 = STACK[0x4F8];
      if (STACK[0x4F8])
      {
        v69 = STACK[0x500];
        v70 = (void *)STACK[0x4F8];
        if (STACK[0x500] != v68)
        {
          do
          {
            if (*(char *)(v69 - 1) < 0)
              operator delete(*(void **)(v69 - 24));
            v69 -= 24;
          }
          while (v69 != v68);
          v70 = (void *)STACK[0x4F8];
        }
        STACK[0x500] = v68;
        operator delete(v70);
      }
      sub_19C098FBC((uint64_t)&STACK[0x510], (char *)STACK[0x518]);
      sub_19C098FBC((uint64_t)&STACK[0x528], (char *)STACK[0x530]);
      _Unwind_Resume(a1);
    }
LABEL_23:
    STACK[0x4D0] = (unint64_t)v61;
    operator delete(v61);
    goto LABEL_24;
  }
LABEL_22:
  operator delete(a48);
  v61 = (void *)STACK[0x4C8];
  if (!STACK[0x4C8])
    goto LABEL_24;
  goto LABEL_23;
}

void **sub_19C1AB4C0(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C1AB530(uint64_t **a1, uint64_t *a2, __int128 **a3, uint64_t a4, const void **a5)
{
  __int128 *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  void **v13;
  _QWORD *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  BOOL v21;
  uint64_t *v22;
  const void *v23;
  _QWORD *v24;
  const void *v25;
  int v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  int32x4_t v31;
  _BOOL4 v32;
  uint64_t **v33;
  __int128 v34;
  _DWORD *v35;
  int32x4_t v36;
  int v37;
  int v38;
  int v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  int v47;
  size_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  char *v54;
  void *v55;
  _QWORD *v56;
  int v57;
  int v58;
  size_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  char *v65;
  void *v66;
  _QWORD *v67;
  int v68;
  size_t v69;
  unint64_t v70;
  int v71;
  void *v72;
  const void *v73;
  char *v74;
  void *v75;
  _QWORD *v76;
  int v77;
  size_t v78;
  unint64_t v79;
  int v80;
  void *v81;
  const void *v82;
  char *v83;
  void *v84;
  _QWORD *v85;
  int v86;
  size_t v87;
  unint64_t v88;
  int v89;
  void *v90;
  const void *v91;
  char *v92;
  void *v93;
  _QWORD *v94;
  int v95;
  size_t v96;
  unint64_t v97;
  int v98;
  void *v99;
  const void *v100;
  char *v101;
  void *v102;
  _QWORD *v103;
  int v104;
  int v105;
  int v106;
  size_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const void *v116;
  char *v117;
  void *v118;
  _QWORD *v119;
  int v120;
  size_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const void *v128;
  int v129;
  int v130;
  int v131;
  size_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const void *v139;
  char *v140;
  void *v141;
  _QWORD *v142;
  int v143;
  size_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  const void *v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  __int128 v156;
  void *__p[2];
  unint64_t v158;
  int v159;
  void **v160;

  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    v7 = (_QWORD *)(a4 + 8);
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_19C07C6E8(__p, *(void **)v5, *((_QWORD *)v5 + 1));
        v159 = *((_DWORD *)v5 + 6);
        v9 = *v7;
        v10 = (void *)HIBYTE(v158);
        v11 = SHIBYTE(v158);
        if (*v7)
        {
LABEL_9:
          if (v11 >= 0)
            v12 = v10;
          else
            v12 = __p[1];
          if (v11 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          v14 = v7;
          do
          {
            v15 = *(char *)(v9 + 55);
            if (v15 >= 0)
              v16 = *(unsigned __int8 *)(v9 + 55);
            else
              v16 = *(_QWORD *)(v9 + 40);
            if (v15 >= 0)
              v17 = (const void *)(v9 + 32);
            else
              v17 = *(const void **)(v9 + 32);
            if ((unint64_t)v12 >= v16)
              v18 = v16;
            else
              v18 = (size_t)v12;
            v19 = memcmp(v17, v13, v18);
            v20 = v16 < (unint64_t)v12;
            if (v19)
              v20 = v19 < 0;
            v21 = !v20;
            if (v20)
              v22 = (uint64_t *)(v9 + 8);
            else
              v22 = (uint64_t *)v9;
            if (v21)
              v14 = (_QWORD *)v9;
            v9 = *v22;
          }
          while (*v22);
          if (v14 != v7)
          {
            v25 = (const void *)v14[4];
            v24 = v14 + 4;
            v23 = v25;
            v26 = *((char *)v24 + 23);
            if (v26 >= 0)
              v27 = *((unsigned __int8 *)v24 + 23);
            else
              v27 = v24[1];
            if (v26 >= 0)
              v28 = v24;
            else
              v28 = v23;
            if (v27 >= (unint64_t)v12)
              v29 = (size_t)v12;
            else
              v29 = v27;
            v30 = memcmp(v13, v28, v29);
            v32 = (unint64_t)v12 >= v27;
            if (v30)
              v32 = v30 >= 0;
            if (v32)
            {
              switch(*a2)
              {
                case 4:
                case 23:
                  *(_QWORD *)&v156 = __p;
                  v33 = sub_19C1B8EE0(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v156);
                  *(_QWORD *)&v34 = 0x100000001;
                  *((_QWORD *)&v34 + 1) = 0x100000001;
                  *(_OWORD *)(v33 + 7) = v34;
                  v33[9] = (uint64_t *)0xFFFFFFFF00000001;
                  goto LABEL_60;
                case 11:
                case 12:
                  v31.i64[0] = a2[16];
                  v31.i32[2] = *((_DWORD *)a2 + 34);
                  v150 = v31;
                  *(_QWORD *)&v156 = __p;
                  v33 = sub_19C1B8EE0(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v156);
                  v35 = v33 + 8;
                  v36 = v150;
                  goto LABEL_58;
                case 17:
                  v31.i64[0] = a2[16];
                  v31.i32[2] = *((_DWORD *)a2 + 34);
                  v152 = v31;
                  *(_QWORD *)&v156 = __p;
                  v33 = sub_19C1B8EE0(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v156);
                  v42.i64[0] = 0x100000001;
                  v42.i64[1] = 0x100000001;
                  v36 = vmaxq_s32(v152, v42);
                  v35 = v33 + 8;
LABEL_58:
                  *v35 = v36.i32[2];
                  v33[7] = (uint64_t *)v36.i64[0];
                  goto LABEL_59;
                case 22:
                  v31.i64[0] = a2[16];
                  v31.i32[2] = *((_DWORD *)a2 + 34);
                  v151 = v31;
                  v38 = *((_DWORD *)a2 + 35);
                  *(_QWORD *)&v156 = __p;
                  v33 = sub_19C1B8EE0(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v156);
                  if (v38 <= 1)
                    v39 = 1;
                  else
                    v39 = v38;
                  v40.i64[0] = 0x100000001;
                  v40.i64[1] = 0x100000001;
                  v41 = vmaxq_s32(v151, v40);
                  *((_DWORD *)v33 + 16) = v41.i32[2];
                  v33[7] = (uint64_t *)v41.i64[0];
                  *((_DWORD *)v33 + 17) = 1;
                  *((_DWORD *)v33 + 18) = v39;
                  *((_DWORD *)v33 + 19) = -1;
                  goto LABEL_60;
                default:
                  v37 = *((_DWORD *)a2 + 32);
                  *(_QWORD *)&v156 = __p;
                  v33 = sub_19C1B8EE0(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v156);
                  v33[7] = (uint64_t *)0x100000001;
                  *((_DWORD *)v33 + 16) = v37;
LABEL_59:
                  *((_DWORD *)v33 + 19) = -1;
                  *(uint64_t **)((char *)v33 + 68) = (uint64_t *)0x100000001;
LABEL_60:
                  v33[10] = 0;
                  v33[11] = 0;
                  v44 = v33 + 12;
                  v43 = v33[12];
                  if (v43)
                  {
                    v33[13] = v43;
                    operator delete(v43);
                    *v44 = 0;
                    v44[1] = 0;
                    v44[2] = 0;
                  }
                  *v44 = 0;
                  v44[1] = 0;
                  v44[2] = 0;
                  *(_QWORD *)&v156 = __p;
                  *((_DWORD *)sub_19C1B8EE0(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v156) + 19) = 5;
                  LOBYTE(v11) = HIBYTE(v158);
                  break;
              }
            }
          }
        }
      }
      else
      {
        v8 = *v5;
        v158 = *((_QWORD *)v5 + 2);
        *(_OWORD *)__p = v8;
        v159 = *((_DWORD *)v5 + 6);
        v9 = *v7;
        v10 = (void *)HIBYTE(v158);
        v11 = SHIBYTE(v158);
        if (*v7)
          goto LABEL_9;
      }
      if ((v11 & 0x80) != 0)
      {
        operator delete(__p[0]);
        v5 += 2;
        if (v5 == v6)
          break;
      }
      else
      {
        v5 += 2;
        if (v5 == v6)
          break;
      }
    }
  }
  v45 = *a2;
  if (*a2 == 5)
  {
    v46 = *((_DWORD *)a2 + 64);
    v156 = 0uLL;
    v47 = *((char *)a5 + 23);
    if (v47 >= 0)
      v48 = *((unsigned __int8 *)a5 + 23);
    else
      v48 = (size_t)a5[1];
    v49 = v48 + 5;
    if (v48 + 5 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_246;
    if (v49 >= 0x17)
    {
      v51 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v51 = v49 | 7;
      v52 = v51 + 1;
      v50 = operator new(v51 + 1);
      __p[1] = (void *)(v48 + 5);
      v158 = v52 | 0x8000000000000000;
      __p[0] = v50;
    }
    else
    {
      __p[1] = 0;
      v158 = 0;
      __p[0] = 0;
      v50 = __p;
      HIBYTE(v158) = v48 + 5;
      if (!v48)
        goto LABEL_78;
    }
    if (v47 >= 0)
      v53 = a5;
    else
      v53 = *a5;
    memmove(v50, v53, v48);
LABEL_78:
    strcpy((char *)v50 + v48, "_h_in");
    v160 = __p;
    v54 = sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v160);
    *((_QWORD *)v54 + 7) = 0x100000001;
    *((_DWORD *)v54 + 16) = v46;
    *((_DWORD *)v54 + 19) = -1;
    *(_QWORD *)(v54 + 68) = 0x100000001;
    *((_OWORD *)v54 + 5) = v156;
    v56 = v54 + 96;
    v55 = (void *)*((_QWORD *)v54 + 12);
    if (v55)
    {
      *((_QWORD *)v54 + 13) = v55;
      operator delete(v55);
      *v56 = 0;
      v56[1] = 0;
      v56[2] = 0;
    }
    *v56 = 0;
    v56[1] = 0;
    v56[2] = 0;
    if (SHIBYTE(v158) < 0)
      operator delete(__p[0]);
    v57 = *((_DWORD *)a2 + 64);
    v156 = 0uLL;
    v58 = *((char *)a5 + 23);
    if (v58 >= 0)
      v59 = *((unsigned __int8 *)a5 + 23);
    else
      v59 = (size_t)a5[1];
    v60 = v59 + 5;
    if (v59 + 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v60 >= 0x17)
      {
        v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17)
          v62 = v60 | 7;
        v63 = v62 + 1;
        v61 = operator new(v62 + 1);
        __p[1] = (void *)(v59 + 5);
        v158 = v63 | 0x8000000000000000;
        __p[0] = v61;
      }
      else
      {
        __p[1] = 0;
        v158 = 0;
        __p[0] = 0;
        v61 = __p;
        HIBYTE(v158) = v59 + 5;
        if (!v59)
        {
LABEL_96:
          strcpy((char *)v61 + v59, "_c_in");
          v160 = __p;
          v65 = sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v160);
          *((_QWORD *)v65 + 7) = 0x100000001;
          *((_DWORD *)v65 + 16) = v57;
          *((_DWORD *)v65 + 19) = -1;
          *(_QWORD *)(v65 + 68) = 0x100000001;
          *((_OWORD *)v65 + 5) = v156;
          v67 = v65 + 96;
          v66 = (void *)*((_QWORD *)v65 + 12);
          if (v66)
          {
            *((_QWORD *)v65 + 13) = v66;
            operator delete(v66);
            *v67 = 0;
            v67[1] = 0;
            v67[2] = 0;
          }
          *v67 = 0;
          v67[1] = 0;
          v67[2] = 0;
          if (SHIBYTE(v158) < 0)
            operator delete(__p[0]);
          v45 = *a2;
          goto LABEL_101;
        }
      }
      if (v58 >= 0)
        v64 = a5;
      else
        v64 = *a5;
      memmove(v61, v64, v59);
      goto LABEL_96;
    }
LABEL_246:
    sub_19C07C774();
  }
LABEL_101:
  if (v45 != 6)
    goto LABEL_159;
  v68 = *((char *)a5 + 23);
  if (v68 >= 0)
    v69 = *((unsigned __int8 *)a5 + 23);
  else
    v69 = (size_t)a5[1];
  v70 = v69 + 5;
  if (v69 + 5 > 0x7FFFFFFFFFFFFFF7)
LABEL_245:
    sub_19C07C774();
  v71 = *((_DWORD *)a2 + 64);
  if (v70 <= 0x16)
  {
    __p[1] = 0;
    v158 = 0;
    __p[0] = 0;
    v72 = __p;
    HIBYTE(v158) = v69 + 5;
    if (!v69)
      goto LABEL_112;
    goto LABEL_108;
  }
  v110 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17)
    v110 = v70 | 7;
  v111 = v110 + 1;
  v72 = operator new(v110 + 1);
  __p[1] = (void *)(v69 + 5);
  v158 = v111 | 0x8000000000000000;
  __p[0] = v72;
  if (v69)
  {
LABEL_108:
    if (v68 >= 0)
      v73 = a5;
    else
      v73 = *a5;
    memmove(v72, v73, v69);
  }
LABEL_112:
  strcpy((char *)v72 + v69, "_h_in");
  *(_QWORD *)&v156 = __p;
  v74 = sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v156);
  *((_QWORD *)v74 + 7) = 0x100000001;
  *((_DWORD *)v74 + 16) = v71;
  *((_DWORD *)v74 + 19) = -1;
  *(_QWORD *)(v74 + 68) = 0x100000001;
  *((_QWORD *)v74 + 10) = 0;
  *((_QWORD *)v74 + 11) = 0;
  v76 = v74 + 96;
  v75 = (void *)*((_QWORD *)v74 + 12);
  if (v75)
  {
    *((_QWORD *)v74 + 13) = v75;
    operator delete(v75);
    *v76 = 0;
    v76[1] = 0;
    v76[2] = 0;
  }
  *v76 = 0;
  v76[1] = 0;
  v76[2] = 0;
  if (SHIBYTE(v158) < 0)
    operator delete(__p[0]);
  v77 = *((char *)a5 + 23);
  if (v77 >= 0)
    v78 = *((unsigned __int8 *)a5 + 23);
  else
    v78 = (size_t)a5[1];
  v79 = v78 + 5;
  if (v78 + 5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_245;
  v80 = *((_DWORD *)a2 + 64);
  if (v79 < 0x17)
  {
    __p[1] = 0;
    v158 = 0;
    __p[0] = 0;
    v81 = __p;
    HIBYTE(v158) = v78 + 5;
    if (!v78)
      goto LABEL_126;
    goto LABEL_122;
  }
  v112 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v79 | 7) != 0x17)
    v112 = v79 | 7;
  v113 = v112 + 1;
  v81 = operator new(v112 + 1);
  __p[1] = (void *)(v78 + 5);
  v158 = v113 | 0x8000000000000000;
  __p[0] = v81;
  if (v78)
  {
LABEL_122:
    if (v77 >= 0)
      v82 = a5;
    else
      v82 = *a5;
    memmove(v81, v82, v78);
  }
LABEL_126:
  strcpy((char *)v81 + v78, "_c_in");
  *(_QWORD *)&v156 = __p;
  v83 = sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v156);
  *((_QWORD *)v83 + 7) = 0x100000001;
  *((_DWORD *)v83 + 16) = v80;
  *((_DWORD *)v83 + 19) = -1;
  *(_QWORD *)(v83 + 68) = 0x100000001;
  *((_QWORD *)v83 + 10) = 0;
  *((_QWORD *)v83 + 11) = 0;
  v85 = v83 + 96;
  v84 = (void *)*((_QWORD *)v83 + 12);
  if (v84)
  {
    *((_QWORD *)v83 + 13) = v84;
    operator delete(v84);
    *v85 = 0;
    v85[1] = 0;
    v85[2] = 0;
  }
  *v85 = 0;
  v85[1] = 0;
  v85[2] = 0;
  if (SHIBYTE(v158) < 0)
    operator delete(__p[0]);
  v86 = *((char *)a5 + 23);
  if (v86 >= 0)
    v87 = *((unsigned __int8 *)a5 + 23);
  else
    v87 = (size_t)a5[1];
  v88 = v87 + 7;
  if (v87 + 7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_245;
  v89 = *((_DWORD *)a2 + 64);
  if (v88 < 0x17)
  {
    __p[1] = 0;
    v158 = 0;
    __p[0] = 0;
    v90 = __p;
    HIBYTE(v158) = v87 + 7;
    if (!v87)
      goto LABEL_140;
    goto LABEL_136;
  }
  v124 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v88 | 7) != 0x17)
    v124 = v88 | 7;
  v125 = v124 + 1;
  v90 = operator new(v124 + 1);
  __p[1] = (void *)(v87 + 7);
  v158 = v125 | 0x8000000000000000;
  __p[0] = v90;
  if (v87)
  {
LABEL_136:
    if (v86 >= 0)
      v91 = a5;
    else
      v91 = *a5;
    memmove(v90, v91, v87);
  }
LABEL_140:
  strcpy((char *)v90 + v87, "_r_h_in");
  *(_QWORD *)&v156 = __p;
  v92 = sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v156);
  *((_QWORD *)v92 + 7) = 0x100000001;
  *((_DWORD *)v92 + 16) = v89;
  *((_DWORD *)v92 + 19) = -1;
  *(_QWORD *)(v92 + 68) = 0x100000001;
  *((_QWORD *)v92 + 10) = 0;
  *((_QWORD *)v92 + 11) = 0;
  v94 = v92 + 96;
  v93 = (void *)*((_QWORD *)v92 + 12);
  if (v93)
  {
    *((_QWORD *)v92 + 13) = v93;
    operator delete(v93);
    *v94 = 0;
    v94[1] = 0;
    v94[2] = 0;
  }
  *v94 = 0;
  v94[1] = 0;
  v94[2] = 0;
  if (SHIBYTE(v158) < 0)
    operator delete(__p[0]);
  v95 = *((char *)a5 + 23);
  if (v95 >= 0)
    v96 = *((unsigned __int8 *)a5 + 23);
  else
    v96 = (size_t)a5[1];
  v97 = v96 + 7;
  if (v96 + 7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_245;
  v98 = *((_DWORD *)a2 + 64);
  if (v97 >= 0x17)
  {
    v135 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v135 = v97 | 7;
    v136 = v135 + 1;
    v99 = operator new(v135 + 1);
    __p[1] = (void *)(v96 + 7);
    v158 = v136 | 0x8000000000000000;
    __p[0] = v99;
    if (!v96)
      goto LABEL_154;
    goto LABEL_150;
  }
  __p[1] = 0;
  v158 = 0;
  __p[0] = 0;
  v99 = __p;
  HIBYTE(v158) = v96 + 7;
  if (v96)
  {
LABEL_150:
    if (v95 >= 0)
      v100 = a5;
    else
      v100 = *a5;
    memmove(v99, v100, v96);
  }
LABEL_154:
  strcpy((char *)v99 + v96, "_r_c_in");
  *(_QWORD *)&v156 = __p;
  v101 = sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v156);
  *((_QWORD *)v101 + 7) = 0x100000001;
  *((_DWORD *)v101 + 16) = v98;
  *((_DWORD *)v101 + 19) = -1;
  *(_QWORD *)(v101 + 68) = 0x100000001;
  *((_QWORD *)v101 + 10) = 0;
  *((_QWORD *)v101 + 11) = 0;
  v103 = v101 + 96;
  v102 = (void *)*((_QWORD *)v101 + 12);
  if (v102)
  {
    *((_QWORD *)v101 + 13) = v102;
    operator delete(v102);
    *v103 = 0;
    v103[1] = 0;
    v103[2] = 0;
  }
  *v103 = 0;
  v103[1] = 0;
  v103[2] = 0;
  if (SHIBYTE(v158) < 0)
    operator delete(__p[0]);
  v45 = *a2;
LABEL_159:
  if (v45 != 20)
    return;
  v104 = *((_DWORD *)a2 + 80);
  v105 = *((_DWORD *)a2 + 81);
  v156 = 0uLL;
  v106 = *((char *)a5 + 23);
  if (v106 >= 0)
    v107 = *((unsigned __int8 *)a5 + 23);
  else
    v107 = (size_t)a5[1];
  v108 = v107 + 7;
  if (v107 + 7 > 0x7FFFFFFFFFFFFFF7)
LABEL_247:
    sub_19C07C774();
  if (v108 >= 0x17)
  {
    v114 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17)
      v114 = v108 | 7;
    v115 = v114 + 1;
    v109 = operator new(v114 + 1);
    __p[1] = (void *)(v107 + 7);
    v158 = v115 | 0x8000000000000000;
    __p[0] = v109;
  }
  else
  {
    __p[1] = 0;
    v158 = 0;
    __p[0] = 0;
    v109 = __p;
    HIBYTE(v158) = v107 + 7;
    if (!v107)
      goto LABEL_182;
  }
  if (v106 >= 0)
    v116 = a5;
  else
    v116 = *a5;
  memmove(v109, v116, v107);
LABEL_182:
  strcpy((char *)v109 + v107, "_k_s_in");
  v160 = __p;
  v117 = sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v160);
  *((_DWORD *)v117 + 14) = v104;
  *((_DWORD *)v117 + 15) = 0;
  *((_DWORD *)v117 + 16) = v105;
  *((_DWORD *)v117 + 19) = -1;
  *(_QWORD *)(v117 + 68) = 0x100000001;
  *((_OWORD *)v117 + 5) = v156;
  v119 = v117 + 96;
  v118 = (void *)*((_QWORD *)v117 + 12);
  if (v118)
  {
    *((_QWORD *)v117 + 13) = v118;
    operator delete(v118);
    *v119 = 0;
    v119[1] = 0;
    v119[2] = 0;
  }
  *v119 = 0;
  v119[1] = 0;
  v119[2] = 0;
  if (SHIBYTE(v158) < 0)
    operator delete(__p[0]);
  v120 = *((char *)a5 + 23);
  if (v120 >= 0)
    v121 = *((unsigned __int8 *)a5 + 23);
  else
    v121 = (size_t)a5[1];
  v122 = v121 + 7;
  if (v121 + 7 > 0x7FFFFFFFFFFFFFF7)
LABEL_248:
    sub_19C07C774();
  if (v122 >= 0x17)
  {
    v126 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v122 | 7) != 0x17)
      v126 = v122 | 7;
    v127 = v126 + 1;
    v123 = operator new(v126 + 1);
    __p[1] = (void *)(v121 + 7);
    v158 = v127 | 0x8000000000000000;
    __p[0] = v123;
  }
  else
  {
    __p[1] = 0;
    v158 = 0;
    __p[0] = 0;
    v123 = __p;
    HIBYTE(v158) = v121 + 7;
    if (!v121)
      goto LABEL_204;
  }
  if (v120 >= 0)
    v128 = a5;
  else
    v128 = *a5;
  memmove(v123, v128, v121);
LABEL_204:
  strcpy((char *)v123 + v121, "_k_s_in");
  *(_QWORD *)&v156 = __p;
  *((_DWORD *)sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v156) + 19) = 5;
  if (SHIBYTE(v158) < 0)
    operator delete(__p[0]);
  v129 = *((_DWORD *)a2 + 80);
  v130 = *((_DWORD *)a2 + 81);
  v156 = 0uLL;
  v131 = *((char *)a5 + 23);
  if (v131 >= 0)
    v132 = *((unsigned __int8 *)a5 + 23);
  else
    v132 = (size_t)a5[1];
  v133 = v132 + 7;
  if (v132 + 7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_247;
  if (v133 >= 0x17)
  {
    v137 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v133 | 7) != 0x17)
      v137 = v133 | 7;
    v138 = v137 + 1;
    v134 = operator new(v137 + 1);
    __p[1] = (void *)(v132 + 7);
    v158 = v138 | 0x8000000000000000;
    __p[0] = v134;
  }
  else
  {
    __p[1] = 0;
    v158 = 0;
    __p[0] = 0;
    v134 = __p;
    HIBYTE(v158) = v132 + 7;
    if (!v132)
      goto LABEL_224;
  }
  if (v131 >= 0)
    v139 = a5;
  else
    v139 = *a5;
  memmove(v134, v139, v132);
LABEL_224:
  strcpy((char *)v134 + v132, "_v_s_in");
  v160 = __p;
  v140 = sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v160);
  *((_DWORD *)v140 + 14) = v129;
  *((_DWORD *)v140 + 15) = 0;
  *((_DWORD *)v140 + 16) = v130;
  *((_DWORD *)v140 + 19) = -1;
  *(_QWORD *)(v140 + 68) = 0x100000001;
  *((_OWORD *)v140 + 5) = v156;
  v142 = v140 + 96;
  v141 = (void *)*((_QWORD *)v140 + 12);
  if (v141)
  {
    *((_QWORD *)v140 + 13) = v141;
    operator delete(v141);
    *v142 = 0;
    v142[1] = 0;
    v142[2] = 0;
  }
  *v142 = 0;
  v142[1] = 0;
  v142[2] = 0;
  if (SHIBYTE(v158) < 0)
    operator delete(__p[0]);
  v143 = *((char *)a5 + 23);
  if (v143 >= 0)
    v144 = *((unsigned __int8 *)a5 + 23);
  else
    v144 = (size_t)a5[1];
  v145 = v144 + 7;
  if (v144 + 7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_248;
  if (v145 >= 0x17)
  {
    v147 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v145 | 7) != 0x17)
      v147 = v145 | 7;
    v148 = v147 + 1;
    v146 = operator new(v147 + 1);
    __p[1] = (void *)(v144 + 7);
    v158 = v148 | 0x8000000000000000;
    __p[0] = v146;
    goto LABEL_238;
  }
  __p[1] = 0;
  v158 = 0;
  __p[0] = 0;
  v146 = __p;
  HIBYTE(v158) = v144 + 7;
  if (v144)
  {
LABEL_238:
    if (v143 >= 0)
      v149 = a5;
    else
      v149 = *a5;
    memmove(v146, v149, v144);
  }
  strcpy((char *)v146 + v144, "_v_s_in");
  *(_QWORD *)&v156 = __p;
  *((_DWORD *)sub_19C1B909C(a1, (const void **)__p, (uint64_t)&unk_19C27ADD0, (_OWORD **)&v156) + 19) = 5;
  if (SHIBYTE(v158) < 0)
    operator delete(__p[0]);
}

void sub_19C1AC47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1AC4CC(__int128 **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  __int128 *v7;
  __int128 v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;
  void **v21;
  _QWORD *v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  BOOL v29;
  uint64_t *v30;
  const void *v31;
  _QWORD *v32;
  const void *v33;
  int v34;
  size_t v35;
  const void *v36;
  size_t v37;
  int v38;
  _BOOL4 v39;
  unint64_t v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  void **v45;
  _QWORD *v46;
  int v47;
  size_t v48;
  const void *v49;
  size_t v50;
  int v51;
  _BOOL4 v52;
  BOOL v53;
  uint64_t *v54;
  const void *v55;
  _QWORD *v56;
  const void *v57;
  int v58;
  size_t v59;
  const void *v60;
  size_t v61;
  int v62;
  _BOOL4 v63;
  __int128 v64;
  unint64_t v65;
  _BYTE *v66;
  int v67;
  size_t v68;
  unint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  __int128 v78;
  char *v79;
  int v80;
  void **v81;
  void *v82;
  void **v83;
  void **v84;
  __int128 v85;
  int v86;
  size_t v87;
  int v88;
  size_t v89;
  unint64_t v90;
  char *v91;
  const void *v92;
  char *v93;
  void **v94;
  unint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int v100;
  _QWORD *v101;
  _QWORD *v102;
  void *v103;
  __int128 *v105;
  _QWORD *v108;
  void **v109;
  void **v110;
  void *v111[2];
  unint64_t v112;
  void *v113[3];
  void *v114;
  __int128 v115;
  void *v116[2];
  void *v117[2];
  int v118;
  void *__p[2];
  uint64_t v120;
  void *v121[2];
  char v122;
  void *v123[2];
  char v124;
  void *v125[2];
  char v126;
  _BYTE __dst[24];
  void *v128[2];
  char v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_OWORD *)v116 = 0u;
  *(_OWORD *)v117 = 0u;
  v118 = 1065353216;
  v7 = *a1;
  v105 = a1[1];
  if (*a1 != v105)
  {
    v108 = (_QWORD *)(a4 + 8);
    do
    {
      while (1)
      {
        if (*((char *)v7 + 23) < 0)
        {
          sub_19C07C6E8(__p, *(void **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v8 = *v7;
          v120 = *((_QWORD *)v7 + 2);
          *(_OWORD *)__p = v8;
        }
        v9 = *((unsigned int *)v7 + 6);
        LODWORD(v121[0]) = *((_DWORD *)v7 + 6);
        if (v116[1])
        {
          v10 = (uint8x8_t)vcnt_s8((int8x8_t)v116[1]);
          v10.i16[0] = vaddlv_u8(v10);
          if (v10.u32[0] > 1uLL)
          {
            v11 = v9;
            if (v116[1] <= (void *)v9)
              v11 = v9 % (unint64_t)v116[1];
          }
          else
          {
            v11 = (LODWORD(v116[1]) - 1) & v9;
          }
          v12 = (uint64_t **)*((_QWORD *)v116[0] + v11);
          if (v12)
          {
            v13 = *v12;
            if (v13)
            {
              if (v10.u32[0] < 2uLL)
              {
                while (1)
                {
                  v15 = v13[1];
                  if (v15 == v9)
                  {
                    if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
                      goto LABEL_3;
                  }
                  else if ((v15 & ((unint64_t)v116[1] - 1)) != v11)
                  {
                    goto LABEL_28;
                  }
                  v13 = (uint64_t *)*v13;
                  if (!v13)
                    goto LABEL_28;
                }
              }
              do
              {
                v14 = v13[1];
                if (v14 == v9)
                {
                  if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
                    goto LABEL_3;
                }
                else
                {
                  if ((void *)v14 >= v116[1])
                    v14 %= (unint64_t)v116[1];
                  if (v14 != v11)
                    break;
                }
                v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
          }
        }
LABEL_28:
        sub_19C1B9234((uint64_t)v116, (unsigned int *)v121, v121);
        v16 = *v108;
        if (a5)
          break;
        if (!v16)
          goto LABEL_119;
        v41 = SHIBYTE(v120);
        v42 = __p[0];
        v43 = __p[1];
        v44 = v120 >= 0 ? (void *)HIBYTE(v120) : __p[1];
        v45 = v120 >= 0 ? __p : (void **)__p[0];
        v46 = v108;
        do
        {
          v47 = *(char *)(v16 + 55);
          if (v47 >= 0)
            v48 = *(unsigned __int8 *)(v16 + 55);
          else
            v48 = *(_QWORD *)(v16 + 40);
          if (v47 >= 0)
            v49 = (const void *)(v16 + 32);
          else
            v49 = *(const void **)(v16 + 32);
          if ((unint64_t)v44 >= v48)
            v50 = v48;
          else
            v50 = (size_t)v44;
          v51 = memcmp(v49, v45, v50);
          v52 = v48 < (unint64_t)v44;
          if (v51)
            v52 = v51 < 0;
          v53 = !v52;
          if (v52)
            v54 = (uint64_t *)(v16 + 8);
          else
            v54 = (uint64_t *)v16;
          if (v53)
            v46 = (_QWORD *)v16;
          v16 = *v54;
        }
        while (*v54);
        if (v46 == v108)
          goto LABEL_119;
        v57 = (const void *)v46[4];
        v56 = v46 + 4;
        v55 = v57;
        v58 = *((char *)v56 + 23);
        if (v58 >= 0)
          v59 = *((unsigned __int8 *)v56 + 23);
        else
          v59 = v56[1];
        if (v58 >= 0)
          v60 = v56;
        else
          v60 = v55;
        if (v59 >= (unint64_t)v44)
          v61 = (size_t)v44;
        else
          v61 = v59;
        v62 = memcmp(v45, v60, v61);
        v63 = (unint64_t)v44 >= v59;
        if (v62)
          v63 = v62 >= 0;
        if (!v63)
        {
LABEL_119:
          v67 = *((char *)a2 + 23);
          if (v67 >= 0)
            v68 = *((unsigned __int8 *)a2 + 23);
          else
            v68 = (size_t)a2[1];
          v69 = v68 + 4;
          if (v68 + 4 > 0x7FFFFFFFFFFFFFF7)
            sub_19C07C774();
          if (v69 >= 0x17)
          {
            v75 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v69 | 7) != 0x17)
              v75 = v69 | 7;
            v76 = v75 + 1;
            v70 = operator new(v75 + 1);
            *(_QWORD *)&__dst[8] = v68 + 4;
            *(_QWORD *)&__dst[16] = v76 | 0x8000000000000000;
            *(_QWORD *)__dst = v70;
          }
          else
          {
            memset(__dst, 0, sizeof(__dst));
            v70 = __dst;
            __dst[23] = v68 + 4;
            if (!v68)
              goto LABEL_142;
          }
          if (v67 >= 0)
            v77 = a2;
          else
            v77 = *a2;
          memmove(v70, v77, v68);
LABEL_142:
          strcpy(&v70[v68], "_out");
          v74 = *(_QWORD *)(a6 + 8);
          if (v74 >= *(_QWORD *)(a6 + 16))
          {
LABEL_145:
            v79 = sub_19C099854((void **)a6, (uint64_t)__dst);
            v80 = __dst[23];
            *(_QWORD *)(a6 + 8) = v79;
            if (v80 < 0)
              operator delete(*(void **)__dst);
LABEL_3:
            if (SHIBYTE(v120) < 0)
              goto LABEL_151;
            goto LABEL_4;
          }
          goto LABEL_143;
        }
        v40 = *(_QWORD *)(a6 + 8);
        if (v40 >= *(_QWORD *)(a6 + 16))
          goto LABEL_147;
        if ((v41 & 0x80000000) == 0)
          goto LABEL_112;
        sub_19C07C6E8(*(_BYTE **)(a6 + 8), v42, (unint64_t)v43);
LABEL_150:
        *(_QWORD *)(a6 + 8) = v40 + 24;
        *(_QWORD *)(a6 + 8) = v40 + 24;
        if ((SHIBYTE(v120) & 0x80000000) == 0)
          goto LABEL_4;
LABEL_151:
        operator delete(__p[0]);
        v7 += 2;
        if (v7 == v105)
          goto LABEL_152;
      }
      v17 = (char *)HIBYTE(v120);
      v18 = (char *)__p[1];
      if (v16)
      {
        v19 = __p[0];
        v20 = v120 >= 0 ? (void *)HIBYTE(v120) : __p[1];
        v21 = v120 >= 0 ? __p : (void **)__p[0];
        v22 = v108;
        do
        {
          v23 = *(char *)(v16 + 55);
          if (v23 >= 0)
            v24 = *(unsigned __int8 *)(v16 + 55);
          else
            v24 = *(_QWORD *)(v16 + 40);
          if (v23 >= 0)
            v25 = (const void *)(v16 + 32);
          else
            v25 = *(const void **)(v16 + 32);
          if ((unint64_t)v20 >= v24)
            v26 = v24;
          else
            v26 = (size_t)v20;
          v27 = memcmp(v25, v21, v26);
          v28 = v24 < (unint64_t)v20;
          if (v27)
            v28 = v27 < 0;
          v29 = !v28;
          if (v28)
            v30 = (uint64_t *)(v16 + 8);
          else
            v30 = (uint64_t *)v16;
          if (v29)
            v22 = (_QWORD *)v16;
          v16 = *v30;
        }
        while (*v30);
        if (v22 != v108)
        {
          v33 = (const void *)v22[4];
          v32 = v22 + 4;
          v31 = v33;
          v34 = *((char *)v32 + 23);
          if (v34 >= 0)
            v35 = *((unsigned __int8 *)v32 + 23);
          else
            v35 = v32[1];
          if (v34 >= 0)
            v36 = v32;
          else
            v36 = v31;
          if (v35 >= (unint64_t)v20)
            v37 = (size_t)v20;
          else
            v37 = v35;
          v38 = memcmp(v21, v36, v37);
          v39 = (unint64_t)v20 >= v35;
          if (v38)
            v39 = v38 >= 0;
          if (v39)
          {
            v40 = *(_QWORD *)(a6 + 8);
            if (v40 < *(_QWORD *)(a6 + 16))
            {
              if ((v17 & 0x80) != 0)
              {
                sub_19C07C6E8(*(_BYTE **)(a6 + 8), v19, (unint64_t)v18);
                goto LABEL_150;
              }
LABEL_112:
              v64 = *(_OWORD *)__p;
              *(_QWORD *)(v40 + 16) = v120;
              *(_OWORD *)v40 = v64;
              goto LABEL_150;
            }
LABEL_147:
            *(_QWORD *)(a6 + 8) = sub_19C07DA20((char **)a6, (uint64_t)__p);
            if (SHIBYTE(v120) < 0)
              goto LABEL_151;
            goto LABEL_4;
          }
        }
      }
      if ((char)v17 >= 0)
        v18 = v17;
      v65 = (unint64_t)(v18 + 4);
      if ((unint64_t)(v18 + 4) > 0x7FFFFFFFFFFFFFF7)
        sub_19C07C774();
      if (v65 >= 0x17)
      {
        v71 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v65 | 7) != 0x17)
          v71 = v65 | 7;
        v72 = v71 + 1;
        v66 = operator new(v71 + 1);
        *(_QWORD *)&__dst[8] = v18 + 4;
        *(_QWORD *)&__dst[16] = v72 | 0x8000000000000000;
        *(_QWORD *)__dst = v66;
      }
      else
      {
        memset(__dst, 0, sizeof(__dst));
        v66 = __dst;
        __dst[23] = (_BYTE)v18 + 4;
        if (!v18)
          goto LABEL_133;
      }
      if ((char)v17 >= 0)
        v73 = __p;
      else
        v73 = (void **)__p[0];
      memmove(v66, v73, (size_t)v18);
LABEL_133:
      strcpy(&v18[(_QWORD)v66], "_out");
      v74 = *(_QWORD *)(a6 + 8);
      if (v74 >= *(_QWORD *)(a6 + 16))
        goto LABEL_145;
LABEL_143:
      v78 = *(_OWORD *)__dst;
      *(_QWORD *)(v74 + 16) = *(_QWORD *)&__dst[16];
      *(_OWORD *)v74 = v78;
      *(_QWORD *)(a6 + 8) = v74 + 24;
      if (SHIBYTE(v120) < 0)
        goto LABEL_151;
LABEL_4:
      v7 += 2;
    }
    while (v7 != v105);
  }
LABEL_152:
  v114 = 0;
  v115 = 0uLL;
  if (a3 == 5)
  {
    if (a5)
    {
      HIBYTE(v120) = 5;
      strcpy((char *)__p, "_h_in");
      v122 = 5;
      strcpy((char *)v121, "_c_in");
      sub_19C18226C(v113, (uint64_t)__p, 2uLL);
    }
    else
    {
      __dst[23] = 6;
      strcpy(__dst, "_h_out");
      v129 = 6;
      strcpy((char *)v128, "_c_out");
      sub_19C18226C(v113, (uint64_t)__dst, 2uLL);
    }
    goto LABEL_167;
  }
  if (a3 == 6)
  {
    if (a5)
    {
      HIBYTE(v120) = 5;
      strcpy((char *)__p, "_h_in");
      v122 = 5;
      strcpy((char *)v121, "_c_in");
      v124 = 7;
      strcpy((char *)v123, "_r_h_in");
      v126 = 7;
      strcpy((char *)v125, "_r_c_in");
    }
    else
    {
      HIBYTE(v120) = 6;
      strcpy((char *)__p, "_h_out");
      v122 = 6;
      strcpy((char *)v121, "_c_out");
      v124 = 8;
      strcpy((char *)v123, "_r_h_out");
      v126 = 8;
      strcpy((char *)v125, "_r_c_out");
    }
    sub_19C18226C(__dst, (uint64_t)__p, 4uLL);
    v109 = *(void ***)&__dst[8];
    v81 = *(void ***)__dst;
    v114 = *(void **)__dst;
    v115 = *(_OWORD *)&__dst[8];
    memset(__dst, 0, sizeof(__dst));
    if (v126 < 0)
    {
      operator delete(v125[0]);
      if ((v124 & 0x80000000) == 0)
        goto LABEL_173;
    }
    else if ((v124 & 0x80000000) == 0)
    {
      goto LABEL_173;
    }
    operator delete(v123[0]);
LABEL_173:
    if (v122 < 0)
    {
      operator delete(v121[0]);
      if ((SHIBYTE(v120) & 0x80000000) == 0)
        goto LABEL_181;
    }
    else if ((SHIBYTE(v120) & 0x80000000) == 0)
    {
      goto LABEL_181;
    }
    v82 = __p[0];
LABEL_180:
    operator delete(v82);
    goto LABEL_181;
  }
  if (a3 != 20)
    goto LABEL_219;
  if (a5)
  {
    HIBYTE(v120) = 7;
    strcpy((char *)__p, "_k_s_in");
    v122 = 7;
    strcpy((char *)v121, "_v_s_in");
    sub_19C18226C(v113, (uint64_t)__p, 2uLL);
  }
  else
  {
    __dst[23] = 8;
    strcpy(__dst, "_k_s_out");
    v129 = 8;
    strcpy((char *)v128, "_v_s_out");
    sub_19C18226C(v113, (uint64_t)__dst, 2uLL);
  }
LABEL_167:
  v81 = (void **)v113[0];
  v109 = (void **)v113[1];
  v115 = *(_OWORD *)&v113[1];
  v114 = v113[0];
  memset(v113, 0, sizeof(v113));
  if ((a5 & 1) != 0)
    goto LABEL_173;
  if (v129 < 0)
  {
    operator delete(v128[0]);
    if ((__dst[23] & 0x80000000) != 0)
    {
LABEL_179:
      v82 = *(void **)__dst;
      goto LABEL_180;
    }
  }
  else if ((__dst[23] & 0x80000000) != 0)
  {
    goto LABEL_179;
  }
LABEL_181:
  v83 = v109;
  v110 = v81;
  if (v81 != v83)
  {
    v84 = v81;
    while (1)
    {
      if (*((char *)v84 + 23) < 0)
      {
        sub_19C07C6E8(v113, *v84, (unint64_t)v84[1]);
      }
      else
      {
        v85 = *(_OWORD *)v84;
        v113[2] = v84[2];
        *(_OWORD *)v113 = v85;
      }
      v86 = *((char *)a2 + 23);
      if (v86 >= 0)
        v87 = *((unsigned __int8 *)a2 + 23);
      else
        v87 = (size_t)a2[1];
      v88 = SHIBYTE(v113[2]);
      if (SHIBYTE(v113[2]) >= 0)
        v89 = HIBYTE(v113[2]);
      else
        v89 = (size_t)v113[1];
      v90 = v89 + v87;
      if (v89 + v87 > 0x7FFFFFFFFFFFFFF7)
        sub_19C07C774();
      if (v90 > 0x16)
        break;
      v111[1] = 0;
      v112 = 0;
      v111[0] = 0;
      v91 = (char *)v111;
      HIBYTE(v112) = v89 + v87;
      if (v87)
        goto LABEL_197;
LABEL_201:
      v93 = &v91[v87];
      if (v89)
      {
        if (v88 >= 0)
          v94 = v113;
        else
          v94 = (void **)v113[0];
        memmove(v93, v94, v89);
      }
      v93[v89] = 0;
      v95 = *(_QWORD *)(a6 + 8);
      if (v95 >= *(_QWORD *)(a6 + 16))
      {
        v99 = sub_19C099854((void **)a6, (uint64_t)v111);
        v100 = SHIBYTE(v112);
        *(_QWORD *)(a6 + 8) = v99;
        if (v100 < 0)
        {
          operator delete(v111[0]);
          if ((SHIBYTE(v113[2]) & 0x80000000) == 0)
            goto LABEL_184;
        }
        else if ((SHIBYTE(v113[2]) & 0x80000000) == 0)
        {
          goto LABEL_184;
        }
LABEL_215:
        operator delete(v113[0]);
        v84 += 3;
        if (v84 == v83)
          goto LABEL_216;
      }
      else
      {
        v96 = *(_OWORD *)v111;
        *(_QWORD *)(v95 + 16) = v112;
        *(_OWORD *)v95 = v96;
        *(_QWORD *)(a6 + 8) = v95 + 24;
        if (SHIBYTE(v113[2]) < 0)
          goto LABEL_215;
LABEL_184:
        v84 += 3;
        if (v84 == v83)
          goto LABEL_216;
      }
    }
    v97 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v90 | 7) != 0x17)
      v97 = v90 | 7;
    v98 = v97 + 1;
    v91 = (char *)operator new(v97 + 1);
    v111[1] = (void *)(v89 + v87);
    v112 = v98 | 0x8000000000000000;
    v111[0] = v91;
    if (!v87)
      goto LABEL_201;
LABEL_197:
    if (v86 >= 0)
      v92 = a2;
    else
      v92 = *a2;
    memmove(v91, v92, v87);
    goto LABEL_201;
  }
LABEL_216:
  if (v110)
  {
    for (; v83 != v110; v83 -= 3)
    {
      if (*((char *)v83 - 1) < 0)
        operator delete(*(v83 - 3));
    }
    operator delete(v110);
  }
LABEL_219:
  v101 = v117[0];
  if (v117[0])
  {
    do
    {
      v102 = (_QWORD *)*v101;
      operator delete(v101);
      v101 = v102;
    }
    while (v102);
  }
  v103 = v116[0];
  v116[0] = 0;
  if (v103)
    operator delete(v103);
}

void sub_19C1AD01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  void **v62;
  uint64_t v63;

  if (*(char *)(v63 - 105) < 0)
    operator delete(*(void **)(v63 - 128));
  sub_19C256020(v63 - 152);
  sub_19C07AD50(&a30);
  sub_19C1AD210((uint64_t)&a33);
  sub_19C07AD50(v62);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1AD210(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_19C1AD258(_QWORD *a1@<X0>, _QWORD *a2@<X1>, const char *a3@<X2>, uint64_t **a4@<X8>)
{
  _QWORD *v4;
  __n128 v7;
  __n128 v8;
  const void **v9;
  const void **v10;
  char *v11;
  const void **v16;
  const void ***v17;
  const void **v18;
  const void ***v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  void **v35;
  void *v36;
  int *v37;
  int *v38;
  __int128 v39;
  void **v40;
  void **v41;
  void *v42;
  void **v43;
  int v44;
  size_t v45;
  unint64_t v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  int v50;
  size_t v51;
  unint64_t v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  _OWORD *v57;
  __int128 v58;
  int v59;
  size_t v60;
  size_t v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  std::string *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  void **v70;
  void **v71;
  void *v72;
  void **v73;
  void **v74;
  void *v75;
  void **v76;
  void **v77;
  void *v78;
  int v79;
  void **v80;
  void **v81;
  void *v82;
  int v83;
  void **v84;
  void **v85;
  void *v86;
  void **v87;
  void **v88;
  void *v89;
  void **v90;
  void **v91;
  void *v92;
  uint64_t v93;
  void **v94;
  void **v95;
  void *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  size_t v100;
  std::string *v101;
  std::string *v102;
  void **v103;
  void **v104;
  void *v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v111;
  __int128 *v112;
  std::string::size_type *v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  std::string::size_type *v117;
  __int128 *v118;
  __int128 v119;
  _DWORD *v120;
  int *v121;
  uint64_t v122;
  int v123;
  char *v124;
  std::string *v125;
  int64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  unint64_t *v132;
  uint64_t v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  int *v143;
  std::string *v144;
  _QWORD *v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  int v150;
  int v151;
  std::string *v152;
  std::string *v153;
  std::string *v154;
  int64_t v155;
  uint64_t v156;
  unint64_t v157;
  int64_t v158;
  unint64_t v159;
  _BYTE *v160;
  std::string *v161;
  unint64_t v162;
  std::string *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  std::string::size_type *v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  std::string *v172;
  uint64_t v173;
  std::string *v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  _DWORD *v181;
  unint64_t v182;
  std::string *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  std::string::size_type *v188;
  uint64_t v189;
  __int128 v190;
  char *v191;
  std::string *v192;
  int64_t v193;
  char *v194;
  char *v195;
  char *v196;
  void *v197;
  float32x4_t *v198;
  uint64_t v199;
  std::string *v200;
  uint64_t v201;
  uint64_t v202;
  float *v203;
  float *v204;
  float *v205;
  uint64_t v206;
  float v207;
  float v208;
  float v209;
  char *v210;
  std::string *v211;
  int64_t v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  size_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  std::string *v223;
  std::string *v224;
  int64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  std::string *v230;
  std::string *v231;
  __int128 v232;
  std::string *v233;
  std::string *v234;
  std::string::pointer v235;
  std::string::pointer data;
  unint64_t v237;
  void *v238;
  const void *v239;
  uint64_t v240;
  int64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  _QWORD *v250;
  __int128 v251;
  char *v252;
  char *v253;
  void *v254;
  void *v255;
  unint64_t v256;
  void *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  char *v264;
  char *v265;
  _QWORD *v266;
  __int128 v267;
  char *v268;
  char *v269;
  void *v270;
  void *v271;
  std::string *v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  std::string::size_type v276;
  __int128 v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  std::string::size_type v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  std::string *v288;
  std::string::size_type size;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  char *v302;
  _BYTE *v303;
  _BYTE *v304;
  uint64_t v305;
  char *v306;
  unint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  std::string::size_type v312;
  size_t v313;
  uint64_t v314;
  char *v315;
  char *v316;
  size_t v317;
  uint64_t v318;
  char *v319;
  char *v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  __int128 *v327;
  _OWORD *v328;
  uint64_t v329;
  __int128 v330;
  int v331;
  char *v332;
  unint64_t v333;
  uint64_t v334;
  _OWORD *v335;
  __int128 *v336;
  uint64_t v337;
  __int128 v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _OWORD *v343;
  __int128 *v344;
  uint64_t v345;
  __int128 v346;
  int v347;
  char *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  unint64_t v354;
  int64_t v355;
  int64_t v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  int64_t v361;
  char *v362;
  _BYTE *v363;
  char *v364;
  char *v365;
  unint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  int64_t v372;
  int64_t v373;
  char *v374;
  char *v375;
  size_t v376;
  uint64_t v377;
  char *v378;
  char *v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  __int128 *v386;
  _OWORD *v387;
  uint64_t v388;
  __int128 v389;
  int v390;
  char *v391;
  unint64_t v392;
  uint64_t v393;
  _OWORD *v394;
  __int128 *v395;
  uint64_t v396;
  __int128 v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _OWORD *v402;
  __int128 *v403;
  uint64_t v404;
  __int128 v405;
  int v406;
  char *v407;
  char *v408;
  char *v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  _BYTE *v420;
  uint64_t v421;
  char *v422;
  unint64_t v423;
  char *v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  int64_t v428;
  char *v429;
  char *v430;
  size_t v431;
  uint64_t v432;
  char *v433;
  char *v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char *v440;
  __int128 *v441;
  _OWORD *v442;
  uint64_t v443;
  __int128 v444;
  int v445;
  char *v446;
  unint64_t v447;
  uint64_t v448;
  _OWORD *v449;
  __int128 *v450;
  uint64_t v451;
  __int128 v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  _OWORD *v456;
  __int128 *v457;
  uint64_t v458;
  __int128 v459;
  int v460;
  char *v461;
  const void *v462;
  int64_t v463;
  uint64_t v464;
  char *v465;
  char *v466;
  char *v467;
  uint64_t v468;
  int v469;
  char *v470;
  int v471;
  void *v472;
  int64_t v473;
  char *v474;
  char *v475;
  char *v476;
  uint64_t v477;
  int v478;
  char *v479;
  const void *v480;
  int64_t v481;
  char *v482;
  char *v483;
  char *v484;
  uint64_t v485;
  int v486;
  char *v487;
  std::__shared_weak_count *v488;
  std::__shared_weak_count *v489;
  const void *v490;
  int64_t v491;
  char *v492;
  char *v493;
  unint64_t *v494;
  unint64_t v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t *v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  void *v517;
  uint64_t v518;
  uint64_t v519;
  void *v520;
  uint64_t v521;
  void *v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  void *v526;
  uint64_t v527;
  void *v528;
  void *v529;
  std::string *v530;
  std::string *v531;
  std::string *v532;
  std::string::pointer v533;
  std::string::pointer v534;
  float32x4_t *v535;
  float32x4_t *v536;
  float32x4_t *v537;
  uint64_t v538;
  float32x4_t v539;
  void **v540;
  void **v541;
  void *v542;
  uint64_t v543;
  uint64_t v544;
  __int128 *v545;
  void **v546;
  void **v547;
  void *v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  void **v552;
  void **v553;
  void *v554;
  unint64_t *v555;
  void **v556;
  void **v557;
  void *v558;
  uint64_t v559;
  char *v560;
  int v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  uint64_t v565;
  char *v566;
  int v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  uint64_t v571;
  char *v572;
  int v573;
  std::__shared_weak_count *v574;
  unint64_t *v575;
  unint64_t v576;
  _OWORD *v577;
  char *v578;
  uint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  uint64_t v583;
  char *v584;
  uint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  uint64_t v589;
  char *v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  unint64_t *v613;
  void **v614;
  void **v615;
  void *v616;
  unint64_t *v617;
  void **v618;
  void **v619;
  void *v620;
  unint64_t *v621;
  void **v622;
  void **v623;
  void *v624;
  unint64_t *v625;
  void **v626;
  void **v627;
  void *v628;
  unint64_t *v629;
  void **v630;
  void **v631;
  void *v632;
  void **v633;
  void **v634;
  void *v635;
  void **v636;
  void **v637;
  void *v638;
  uint64_t v639;
  char *v640;
  int v641;
  _OWORD *v642;
  char *v643;
  std::__shared_weak_count *v644;
  unint64_t *v645;
  unint64_t v646;
  std::__shared_weak_count *v647;
  unint64_t *v648;
  unint64_t v649;
  int v650;
  size_t v651;
  unint64_t v652;
  __int128 *v653;
  uint64_t v654;
  uint64_t v655;
  __int128 *v656;
  void **v657;
  void **v658;
  void *v659;
  void **v660;
  void **v661;
  void *v662;
  std::__shared_weak_count *v663;
  void **v664;
  void **v665;
  void *v666;
  void **v667;
  void **v668;
  void *v669;
  uint64_t v670;
  std::string *v671;
  uint64_t v672;
  _OWORD *v673;
  unint64_t v674;
  uint64_t v675;
  int *v676;
  int *v677;
  _QWORD *v678;
  uint64_t v679;
  int v680;
  int v681;
  uint64_t v682;
  unint64_t *v683;
  unint64_t v684;
  std::__shared_weak_count *v685;
  unint64_t *v686;
  unint64_t v687;
  std::__shared_weak_count *v688;
  unint64_t *v689;
  unint64_t v690;
  unint64_t *v691;
  unint64_t *v692;
  unint64_t v693;
  std::__shared_weak_count *v694;
  unint64_t *v695;
  unint64_t v696;
  std::__shared_weak_count *v697;
  unint64_t *v698;
  unint64_t v699;
  std::__shared_weak_count *v700;
  unint64_t *v701;
  unint64_t v702;
  std::__shared_weak_count *v703;
  unint64_t *v704;
  unint64_t v705;
  std::string *v706;
  std::string *v707;
  std::string *v708;
  uint64_t v709;
  uint64_t v710;
  int16x4_t v711;
  void **v712;
  void **v713;
  void *v714;
  void **v715;
  void **v716;
  void *v717;
  unint64_t *v718;
  unint64_t v719;
  char v721;
  uint64_t v723;
  __n128 *v724;
  float *v725;
  __n128 *v726;
  __int128 v727;
  __int128 v728;
  __n128 v729;
  __n128 v730;
  __n128 v731;
  __n128 v732;
  void **v733;
  void **v734;
  void *v735;
  void **v736;
  void **v737;
  void *v738;
  _OWORD *v739;
  char *v740;
  unint64_t *v741;
  int v742;
  uint64_t v743;
  _QWORD *v744;
  int v745;
  uint64_t v746;
  unint64_t v747;
  std::__shared_weak_count *v748;
  unint64_t *v749;
  unint64_t v750;
  uint64_t v751;
  unint64_t *v752;
  unint64_t v753;
  std::__shared_weak_count *v754;
  unint64_t *v755;
  unint64_t v756;
  std::__shared_weak_count *v757;
  unint64_t *v758;
  unint64_t v759;
  std::__shared_weak_count *v760;
  unint64_t *v761;
  unint64_t v762;
  unint64_t *v763;
  int16x4_t v764;
  void **v765;
  void **v766;
  void *v767;
  unint64_t *v768;
  uint64_t v769;
  uint64_t v770;
  void *v771;
  uint64_t v772;
  uint64_t v773;
  void *v774;
  uint64_t v775;
  int v776;
  void **v777;
  void **v778;
  void *v779;
  void **v780;
  void **v781;
  void *v782;
  int v783;
  size_t v784;
  unint64_t v785;
  std::string *v786;
  void **v787;
  uint64_t v788;
  uint64_t v789;
  const void *v790;
  __int128 v791;
  unint64_t v792;
  void **v793;
  void **v794;
  void *v795;
  void **v796;
  void **v797;
  void *v798;
  uint64_t v799;
  char *v800;
  unint64_t *v801;
  int v802;
  int v803;
  void *v804;
  unint64_t v805;
  std::__shared_weak_count *v806;
  unint64_t *p_shared_owners;
  unint64_t v808;
  _OWORD *v809;
  char *v810;
  unint64_t *v811;
  int v812;
  void *v813;
  unint64_t v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  std::__shared_weak_count *v818;
  unint64_t *p_size;
  unint64_t v820;
  uint64_t v821;
  int v822;
  size_t v823;
  unint64_t v824;
  __int128 *p_dst;
  uint64_t v826;
  uint64_t v827;
  __int128 *v828;
  void **v829;
  void **v830;
  void *v831;
  void **v832;
  void **v833;
  void *v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  unint64_t v837;
  int v838;
  size_t v839;
  unint64_t v840;
  __int128 *v841;
  uint64_t v842;
  uint64_t v843;
  __int128 *v844;
  void **v845;
  void **v846;
  void *v847;
  void **v848;
  void **v849;
  void *v850;
  std::__shared_weak_count *v851;
  unint64_t *v852;
  unint64_t v853;
  std::__shared_weak_count *v854;
  unint64_t *v855;
  unint64_t v856;
  std::__shared_weak_count *v857;
  unint64_t *v858;
  unint64_t v859;
  uint64_t v860;
  uint64_t v861;
  void **v862;
  uint64_t i;
  void **v864;
  void **v865;
  void **v866;
  void **v867;
  int v868;
  size_t v869;
  unint64_t v870;
  std::string *v871;
  uint64_t v872;
  uint64_t v873;
  const void *v874;
  void **v875;
  void **v876;
  void *v877;
  unint64_t *v878;
  void **v879;
  void **v880;
  void *v881;
  unint64_t *v882;
  void **v883;
  void **v884;
  void *v885;
  unint64_t *v886;
  uint64_t **v887;
  unint64_t *v888;
  unint64_t v889;
  size_t v890;
  void *v891;
  void *v892;
  uint64_t v893;
  uint64_t v894;
  std::__shared_weak_count *v895;
  unint64_t *v896;
  unint64_t v897;
  std::__shared_weak_count *v898;
  unint64_t *v899;
  unint64_t v900;
  char *v901;
  char *v902;
  char *v903;
  char *v904;
  void *v905;
  void *v906;
  void **v907;
  void **v908;
  char *v909;
  _QWORD *v911;
  _QWORD *v912;
  char *v913;
  uint64_t **v914;
  char *v915;
  int *v916;
  void *v917;
  uint64_t v918;
  int *v919;
  uint64_t v920;
  __n128 v921;
  __n128 v922;
  __int128 v923;
  uint64_t __sz;
  uint64_t v925;
  float32x4_t *v926;
  uint64_t v927;
  uint64_t v928;
  char *v929;
  uint64_t v930;
  unint64_t v931;
  char *v932;
  unint64_t v933;
  char *v934;
  int v935;
  uint64_t v936;
  unint64_t v937;
  int v938;
  uint64_t v939;
  uint64_t v940;
  void **v941;
  int *v942;
  void *v943[2];
  unint64_t v944;
  uint64_t v945;
  std::__shared_weak_count *v946;
  void *v947;
  void **v948;
  uint64_t v949;
  void *v950;
  void **v951;
  uint64_t v952;
  void *v953;
  void **v954;
  uint64_t v955;
  void *v956;
  void **v957;
  uint64_t v958;
  void *v959;
  void **v960;
  uint64_t v961;
  void *v962;
  void **v963;
  uint64_t v964;
  void *v965;
  void **v966;
  uint64_t v967;
  void *v968;
  void **v969;
  uint64_t v970;
  void *v971;
  void **v972;
  uint64_t v973;
  void *v974;
  void **v975;
  uint64_t v976;
  void *v977;
  void **v978;
  uint64_t v979;
  void *v980;
  void **v981;
  uint64_t v982;
  void *v983[2];
  char v984;
  __int128 v985;
  char *v986;
  void *v987;
  void *v988;
  char *v989;
  void *v990;
  void **v991;
  uint64_t v992;
  void *v993;
  void **v994;
  uint64_t v995;
  char *v996;
  std::__shared_weak_count *v997;
  void *v998;
  void **v999;
  uint64_t v1000;
  void *v1001;
  void **v1002;
  uint64_t v1003;
  void *v1004;
  void **v1005;
  uint64_t v1006;
  void *v1007;
  void **v1008;
  uint64_t v1009;
  std::string *__str[6];
  void *v1011;
  void **v1012;
  uint64_t v1013;
  void *v1014;
  void **v1015;
  uint64_t v1016;
  __int128 v1017;
  unint64_t v1018;
  char *v1019;
  std::__shared_weak_count *v1020;
  char *v1021;
  std::__shared_weak_count *v1022;
  void *v1023;
  void **v1024;
  uint64_t v1025;
  void *v1026;
  void **v1027;
  uint64_t v1028;
  std::string *v1029;
  std::string *v1030;
  void *v1031;
  void **v1032;
  uint64_t v1033;
  void *v1034;
  void **v1035;
  uint64_t v1036;
  void *v1037;
  void **v1038;
  uint64_t v1039;
  void *v1040;
  void **v1041;
  uint64_t v1042;
  __int128 v1043;
  char *v1044;
  std::__shared_weak_count *v1045;
  void *v1046;
  void **v1047;
  uint64_t v1048;
  void *v1049;
  void **v1050;
  uint64_t v1051;
  _BYTE __p[124];
  _BYTE v1053[12];
  uint64_t v1054;
  uint64_t v1055;
  int v1056;
  __int16 v1057;
  int v1058;
  char v1059;
  void *v1060;
  void **v1061;
  uint64_t v1062;
  void *v1063;
  void **v1064;
  uint64_t v1065;
  void *v1066;
  void **v1067;
  uint64_t v1068;
  void *v1069;
  void **v1070;
  uint64_t v1071;
  void *v1072;
  void **v1073;
  uint64_t v1074;
  void *v1075;
  void **v1076;
  uint64_t v1077;
  void *v1078;
  void **v1079;
  uint64_t v1080;
  void *v1081;
  void **v1082;
  uint64_t v1083;
  uint64_t v1084;
  std::__shared_weak_count *v1085;
  char *v1086;
  std::__shared_weak_count *v1087;
  char *v1088;
  std::__shared_weak_count *v1089;
  void *v1090;
  void **v1091;
  uint64_t v1092;
  void *v1093;
  void **v1094;
  uint64_t v1095;
  void *v1096;
  void **v1097;
  uint64_t v1098;
  void *v1099;
  void **v1100;
  uint64_t v1101;
  __int128 __dst;
  unint64_t v1103;
  __int128 v1104;
  std::string *v1105;
  char *v1106;
  std::__shared_weak_count *v1107;
  void *v1108;
  void **v1109;
  uint64_t v1110;
  void *v1111;
  void **v1112;
  uint64_t v1113;
  void *v1114;
  void **v1115;
  void *v1116;
  void **v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  __int128 v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  _OWORD *v1150;
  uint64_t v1151;
  uint64_t v1152;
  __int128 v1153;
  uint64_t v1154;
  char **v1155;
  char *v1156[2];
  char **v1157;
  char *v1158[2];
  char *v1159;
  char *v1160;
  unint64_t v1161;
  char *v1162;
  char *v1163;
  uint64_t v1164;

  v4 = a2;
  v1162 = 0;
  v1163 = 0;
  v1164 = 0;
  sub_19C1B8190(&v1162, a2[15], v4[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[16] - a2[15]) >> 3));
  v1159 = 0;
  v1160 = 0;
  v1161 = 0;
  a4[2] = 0;
  a4[1] = 0;
  v914 = a4;
  *a4 = (uint64_t *)(a4 + 1);
  v1158[0] = 0;
  v1158[1] = 0;
  v1157 = v1158;
  v9 = (const void **)v4[1];
  if (v9 != v4 + 2)
  {
    do
    {
      sub_19C098AD0((uint64_t **)&v1157, (uint64_t *)v1158, v9 + 4, (uint64_t)(v9 + 4));
      v16 = (const void **)v9[1];
      if (v16)
      {
        do
        {
          v17 = (const void ***)v16;
          v16 = (const void **)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (const void ***)v9[2];
          _ZF = *v17 == v9;
          v9 = (const void **)v17;
        }
        while (!_ZF);
      }
      v9 = (const void **)v17;
    }
    while (v17 != v4 + 2);
  }
  v1156[0] = 0;
  v1156[1] = 0;
  v1155 = v1156;
  v10 = (const void **)v4[4];
  if (v10 != v4 + 5)
  {
    do
    {
      sub_19C098AD0((uint64_t **)&v1155, (uint64_t *)v1156, v10 + 4, (uint64_t)(v10 + 4));
      v18 = (const void **)v10[1];
      if (v18)
      {
        do
        {
          v19 = (const void ***)v18;
          v18 = (const void **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (const void ***)v10[2];
          _ZF = *v19 == v10;
          v10 = (const void **)v19;
        }
        while (!_ZF);
      }
      v10 = (const void **)v19;
    }
    while (v19 != v4 + 5);
  }
  v11 = v1162;
  v913 = v1163;
  if (v1162 == v1163)
    goto LABEL_1456;
  __asm
  {
    FMOV            V8.2S, #1.0
    FMOV            V3.4S, #1.0
  }
  v921 = v7;
  v922 = v8;
  v923 = _Q3;
  v912 = v4;
  v911 = a1;
  while (2)
  {
    while (2)
    {
      v915 = v11;
      if (v11[23] < 0)
      {
        sub_19C07C6E8(&v1153, *(void **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v20 = *(_OWORD *)v11;
        v1154 = *((_QWORD *)v11 + 2);
        v1153 = v20;
      }
      v1148 = 0u;
      v1149 = 0u;
      v1146 = 0u;
      v1147 = 0u;
      v1144 = 0u;
      v1145 = 0u;
      v1142 = 0u;
      v1143 = 0u;
      v1140 = 0u;
      v1141 = 0u;
      v1138 = 0u;
      v1139 = 0u;
      v1136 = 0u;
      v1137 = 0u;
      v1134 = 0u;
      v1135 = 0u;
      v1132 = 0u;
      v1133 = 0u;
      v1130 = 0u;
      v1131 = 0u;
      v1128 = 0u;
      v1129 = 0u;
      v1126 = 0u;
      v1127 = 0u;
      v1124 = 0u;
      v1125 = 0u;
      v1122 = 0u;
      v1123 = 0u;
      v1120 = 0u;
      v1121 = 0u;
      v1118 = 0u;
      v1119 = 0u;
      sub_19C233EB0((uint64_t)v4, (uint64_t)&v1153);
      sub_19C233720((uint64_t)v4, (uint64_t)&v1153, (char **)&v1116);
      sub_19C233A24((uint64_t)v4, (uint64_t)&v1153, (char **)&v1114);
      v21 = v1118;
      if ((_QWORD)v1118 != 20)
        goto LABEL_40;
      __p[23] = 0;
      __p[0] = 0;
      *(_DWORD *)&__p[24] = 0;
      sub_19C1B9534((char **)__str, ((char *)v1117 - (_BYTE *)v1116) >> 5, (uint64_t)__p);
      if ((__p[23] & 0x80000000) == 0)
      {
        v22 = (char *)v1116;
        if (v1117 == v1116)
          goto LABEL_31;
LABEL_29:
        v23 = 0;
        v24 = 24;
        do
        {
          v25 = (char *)__str[0] + 32 * *(int *)&v22[v24];
          std::string::operator=((std::string *)(v25 - 32), (const std::string *)&v22[v24 - 24]);
          *((_DWORD *)v25 - 2) = *(_DWORD *)&v22[v24];
          ++v23;
          v22 = (char *)v1116;
          v24 += 32;
        }
        while (v23 < ((char *)v1117 - (_BYTE *)v1116) >> 5);
        goto LABEL_31;
      }
      operator delete(*(void **)__p);
      v22 = (char *)v1116;
      if (v1117 != v1116)
        goto LABEL_29;
LABEL_31:
      sub_19C1B96E8((uint64_t)&v1116, __str[0], __str[1], ((char *)__str[1] - (char *)__str[0]) >> 5);
      v26 = __str[0];
      if (__str[0])
      {
        v27 = __str[1];
        v28 = __str[0];
        if (__str[1] != __str[0])
        {
          do
          {
            if (v27[-1].__r_.__value_.__s.__data_[15] < 0)
              operator delete((void *)v27[-2].__r_.__value_.__r.__words[2]);
            v27 = (std::string *)((char *)v27 - 32);
          }
          while (v27 != v26);
          v28 = __str[0];
        }
        __str[1] = v26;
        operator delete(v28);
      }
      v21 = v1118;
LABEL_40:
      sub_19C1AC4CC((__int128 **)&v1116, (const void **)&v1153, v21, (uint64_t)&v1157, 1, (uint64_t)__p);
      v29 = *(void **)__p;
      v30 = *(_QWORD *)&__p[8];
      sub_19C1AC4CC((__int128 **)&v1114, (const void **)&v1153, v1118, (uint64_t)&v1155, 0, (uint64_t)__p);
      v941 = *(void ***)__p;
      v917 = v29;
      v918 = *(_QWORD *)&__p[8];
      sub_19C1AB530(v914, (uint64_t *)&v1118, (__int128 **)&v1116, (uint64_t)&v1157, (const void **)&v1153);
      v31 = v1118;
      v927 = v30;
      switch((uint64_t)v1118)
      {
        case 0:
          *(_DWORD *)&__p[4] = v1126;
          *(_DWORD *)__p = v1134;
          *(_DWORD *)&__p[28] = 0;
          *(_DWORD *)&__p[8] = (WORD4(v1125) & 0x100) == 0;
          __p[40] = 0;
          *(_QWORD *)&__p[56] = _D8;
          *(_QWORD *)v1053 = 0;
          *(_QWORD *)&__p[12] = 0;
          *(_QWORD *)&__p[20] = _D8;
          *(_QWORD *)&__p[84] = 0;
          *(_DWORD *)&__p[52] = -1;
          *(_QWORD *)&__p[44] = 0;
          *(_QWORD *)&__p[32] = 0;
          memset(&__p[100], 0, 24);
          v1104 = 0uLL;
          v1105 = 0;
          switch(*((_QWORD *)&v1121 + 1))
          {
            case 0:
              v79 = -1;
              goto LABEL_1167;
            case 1:
              *(_DWORD *)&__p[52] = 3;
              goto LABEL_1212;
            case 2:
              v79 = 1;
LABEL_1167:
              *(_DWORD *)&__p[52] = v79;
              goto LABEL_1212;
            case 3:
              *(_DWORD *)&__p[52] = 5;
              *(_QWORD *)&__p[56] = 0x3F3745393F2AAAB0;
              goto LABEL_1212;
            case 4:
              memset(__str, 0, 24);
              sub_19C1BA478(__str, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
              v769 = v1104;
              if ((_QWORD)v1104)
              {
                v770 = *((_QWORD *)&v1104 + 1);
                v771 = (void *)v1104;
                if (*((_QWORD *)&v1104 + 1) != (_QWORD)v1104)
                {
                  do
                  {
                    if (*(char *)(v770 - 1) < 0)
                      operator delete(*(void **)(v770 - 24));
                    v770 -= 24;
                  }
                  while (v770 != v769);
                  v771 = (void *)v1104;
                }
                *((_QWORD *)&v1104 + 1) = v769;
                operator delete(v771);
              }
              v1104 = *(_OWORD *)__str;
              v1105 = __str[2];
              v783 = *((char *)v941 + 23);
              if (v783 >= 0)
                v784 = *((unsigned __int8 *)v941 + 23);
              else
                v784 = (size_t)v941[1];
              v785 = v784 + 15;
              if (v784 + 15 > 0x7FFFFFFFFFFFFFF7)
                sub_19C07C774();
              if (v785 >= 0x17)
              {
                v788 = (v785 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v785 | 7) != 0x17)
                  v788 = v785 | 7;
                v789 = v788 + 1;
                v786 = (std::string *)operator new(v788 + 1);
                __str[2] = (std::string *)(v789 | 0x8000000000000000);
                __str[0] = v786;
                __str[1] = (std::string *)(v784 + 15);
              }
              else
              {
                memset(__str, 0, 24);
                v786 = (std::string *)__str;
                HIBYTE(__str[2]) = v784 + 15;
                if (!v784)
                {
                  v30 = v927;
                  v787 = v941;
                  goto LABEL_1209;
                }
              }
              v787 = v941;
              if (v783 >= 0)
                v790 = v941;
              else
                v790 = *v941;
              memmove(v786, v790, v784);
              v30 = v927;
LABEL_1209:
              strcpy((char *)v786 + v784, "_before_softmax");
              if (*((char *)v787 + 23) < 0)
                goto LABEL_1210;
              goto LABEL_1211;
            case 5:
              memset(__str, 0, 24);
              sub_19C1BA478(__str, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
              v772 = v1104;
              if ((_QWORD)v1104)
              {
                v773 = *((_QWORD *)&v1104 + 1);
                v774 = (void *)v1104;
                if (*((_QWORD *)&v1104 + 1) != (_QWORD)v1104)
                {
                  do
                  {
                    if (*(char *)(v773 - 1) < 0)
                      operator delete(*(void **)(v773 - 24));
                    v773 -= 24;
                  }
                  while (v773 != v772);
                  v774 = (void *)v1104;
                }
                *((_QWORD *)&v1104 + 1) = v772;
                operator delete(v774);
              }
              v1104 = *(_OWORD *)__str;
              v1105 = __str[2];
              v868 = *((char *)v941 + 23);
              if (v868 >= 0)
                v869 = *((unsigned __int8 *)v941 + 23);
              else
                v869 = (size_t)v941[1];
              v870 = v869 + 12;
              if (v869 + 12 > 0x7FFFFFFFFFFFFFF7)
                sub_19C07C774();
              if (v870 >= 0x17)
              {
                v872 = (v870 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v870 | 7) != 0x17)
                  v872 = v870 | 7;
                v873 = v872 + 1;
                v871 = (std::string *)operator new(v872 + 1);
                __str[2] = (std::string *)(v873 | 0x8000000000000000);
                __str[0] = v871;
                __str[1] = (std::string *)(v869 + 12);
              }
              else
              {
                memset(__str, 0, 24);
                v871 = (std::string *)__str;
                HIBYTE(__str[2]) = v869 + 12;
                if (!v869)
                {
                  v30 = v927;
                  v787 = v941;
                  goto LABEL_1403;
                }
              }
              v787 = v941;
              if (v868 >= 0)
                v874 = v941;
              else
                v874 = *v941;
              memmove(v871, v874, v869);
              v30 = v927;
LABEL_1403:
              strcpy((char *)v871 + v869, "_before_relu");
              if (*((char *)v787 + 23) < 0)
LABEL_1210:
                operator delete(*v787);
LABEL_1211:
              v791 = *(_OWORD *)__str;
              v787[2] = __str[2];
              *(_OWORD *)v787 = v791;
LABEL_1212:
              v775 = (uint64_t)v917;
              goto LABEL_1213;
            default:
              v775 = (uint64_t)v917;
              if ((*((_QWORD *)&v1121 + 1) & 0xFFFFFFFFFFFFFFFELL) == 6)
                goto LABEL_1213;
              switch(*((_QWORD *)&v1121 + 1))
              {
                case 0xCLL:
                  v776 = 22;
                  break;
                case 0xALL:
                  v776 = 19;
                  break;
                case 8:
                  v776 = 7;
                  break;
                default:
                  goto LABEL_1213;
              }
              *(_DWORD *)&__p[52] = v776;
LABEL_1213:
              HIBYTE(__str[2]) = 13;
              strcpy((char *)__str, "inner_product");
              v1028 = 0;
              v1026 = 0;
              v1027 = 0;
              sub_19C1B8190(&v1026, v775, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - v775) >> 3));
              v1024 = 0;
              v1023 = 0;
              v1025 = 0;
              v792 = 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3);
              sub_19C1B8190(&v1023, (uint64_t)v941, v918, v792);
              sub_19C1B66D4(a1, (uint64_t *)&v1026, (uint64_t *)&v1023, &v987);
              v793 = (void **)v1023;
              if (v1023)
              {
                v794 = v1024;
                v795 = v1023;
                if (v1024 != v1023)
                {
                  do
                  {
                    if (*((char *)v794 - 1) < 0)
                      operator delete(*(v794 - 3));
                    v794 -= 3;
                  }
                  while (v794 != v793);
                  v795 = v1023;
                }
                v1024 = v793;
                operator delete(v795);
              }
              v796 = (void **)v1026;
              if (v1026)
              {
                v797 = v1027;
                v798 = v1026;
                if (v1027 != v1026)
                {
                  do
                  {
                    if (*((char *)v797 - 1) < 0)
                      operator delete(*(v797 - 3));
                    v797 -= 3;
                  }
                  while (v797 != v796);
                  v798 = v1026;
                }
                v1027 = v796;
                operator delete(v798);
              }
              if (SHIBYTE(__str[2]) < 0)
                operator delete(__str[0]);
              v799 = v1146;
              v800 = (char *)operator new(0x58uLL);
              *((_QWORD *)v800 + 1) = 0;
              v801 = (unint64_t *)(v800 + 8);
              *((_QWORD *)v800 + 2) = 0;
              *(_QWORD *)v800 = &unk_1E3D24FF8;
              *((_QWORD *)v800 + 3) = &unk_1E3D21A10;
              v802 = v1126;
              v803 = v1134;
              *(_OWORD *)(v800 + 56) = 0u;
              *(_OWORD *)(v800 + 72) = 0u;
              *((_DWORD *)v800 + 8) = v802;
              *((_DWORD *)v800 + 9) = v803;
              *((_QWORD *)v800 + 5) = v799;
              v800[48] = 0;
              *(_QWORD *)&v985 = v800 + 24;
              *((_QWORD *)&v985 + 1) = v800;
              v804 = v987;
              v1021 = v800 + 24;
              v1022 = (std::__shared_weak_count *)v800;
              do
                v805 = __ldxr(v801);
              while (__stxr(v805 + 1, v801));
              (*(void (**)(void *, char **, __n128, __n128))(*(_QWORD *)v804 + 400))(v804, &v1021, v921, v922);
              v806 = v1022;
              if (!v1022)
                goto LABEL_1237;
              p_shared_owners = (unint64_t *)&v1022->__shared_owners_;
              do
                v808 = __ldaxr(p_shared_owners);
              while (__stlxr(v808 - 1, p_shared_owners));
              if (!v808)
              {
                ((void (*)(std::__shared_weak_count *))v806->__on_zero_shared)(v806);
                std::__shared_weak_count::__release_weak(v806);
                if (!*(_DWORD *)&__p[8])
                  goto LABEL_1251;
              }
              else
              {
LABEL_1237:
                if (!*(_DWORD *)&__p[8])
                  goto LABEL_1251;
              }
              v809 = v1150;
              v810 = (char *)operator new(0x58uLL);
              *((_QWORD *)v810 + 1) = 0;
              v811 = (unint64_t *)(v810 + 8);
              *((_QWORD *)v810 + 2) = 0;
              *(_QWORD *)v810 = &unk_1E3D24FC0;
              v812 = v1134;
              *((_QWORD *)v810 + 3) = &unk_1E3D219F0;
              *(_OWORD *)(v810 + 56) = 0u;
              *(_OWORD *)(v810 + 72) = 0u;
              *((_DWORD *)v810 + 8) = v812;
              *((_QWORD *)v810 + 5) = v809;
              v810[48] = 0;
              __str[0] = (std::string *)(v810 + 24);
              __str[1] = (std::string *)v810;
              v813 = v987;
              v1019 = v810 + 24;
              v1020 = (std::__shared_weak_count *)v810;
              do
                v814 = __ldxr(v811);
              while (__stxr(v814 + 1, v811));
              (*(void (**)(void *, char **, __n128, __n128))(*(_QWORD *)v813 + 392))(v813, &v1019, v921, v922);
              v815 = v1020;
              if (v1020)
              {
                v816 = (unint64_t *)&v1020->__shared_owners_;
                do
                  v817 = __ldaxr(v816);
                while (__stlxr(v817 - 1, v816));
                if (!v817)
                {
                  ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
                  std::__shared_weak_count::__release_weak(v815);
                }
              }
              v818 = (std::__shared_weak_count *)__str[1];
              if (__str[1])
              {
                p_size = &__str[1]->__r_.__value_.__l.__size_;
                do
                  v820 = __ldaxr(p_size);
                while (__stlxr(v820 - 1, p_size));
                if (!v820)
                {
                  ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
                  std::__shared_weak_count::__release_weak(v818);
                }
              }
LABEL_1251:
              v821 = *((_QWORD *)&v1121 + 1);
              if (*((_QWORD *)&v1121 + 1) != 4)
                goto LABEL_1292;
              LODWORD(__str[3]) = 256;
              *(_OWORD *)__str = xmmword_19C278000;
              __str[2] = (std::string *)1;
              v822 = SHIBYTE(v1154);
              if (v1154 >= 0)
                v823 = HIBYTE(v1154);
              else
                v823 = *((_QWORD *)&v1153 + 1);
              v824 = v823 + 8;
              if (v823 + 8 > 0x7FFFFFFFFFFFFFF7)
                sub_19C07C774();
              if (v824 >= 0x17)
              {
                v826 = (v824 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v824 | 7) != 0x17)
                  v826 = v824 | 7;
                v827 = v826 + 1;
                p_dst = (__int128 *)operator new(v826 + 1);
                v1103 = v827 | 0x8000000000000000;
                *(_QWORD *)&__dst = p_dst;
                *((_QWORD *)&__dst + 1) = v823 + 8;
              }
              else
              {
                v1103 = 0;
                __dst = 0uLL;
                p_dst = &__dst;
                HIBYTE(v1103) = v823 + 8;
                if (!v823)
                  goto LABEL_1266;
              }
              if (v822 >= 0)
                v828 = &v1153;
              else
                v828 = (__int128 *)v1153;
              memmove(p_dst, v828, v823);
LABEL_1266:
              v30 = v927;
              strcpy((char *)p_dst + v823, "_softmax");
              HIBYTE(v1018) = 7;
              strcpy((char *)&v1017, "softmax");
              v1016 = 0;
              v1014 = 0;
              v1015 = 0;
              sub_19C1B8190(&v1014, (uint64_t)v941, v918, v792);
              v1012 = 0;
              v1011 = 0;
              v1013 = 0;
              sub_19C1B8190(&v1011, v1104, *((uint64_t *)&v1104 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v1104 + 1) - v1104) >> 3));
              sub_19C1B6A60(a1, (uint64_t *)&v1014, (uint64_t *)&v1011, v983);
              v829 = (void **)v1011;
              if (v1011)
              {
                v830 = v1012;
                v831 = v1011;
                if (v1012 != v1011)
                {
                  do
                  {
                    if (*((char *)v830 - 1) < 0)
                      operator delete(*(v830 - 3));
                    v830 -= 3;
                  }
                  while (v830 != v829);
                  v831 = v1011;
                }
                v1012 = v829;
                operator delete(v831);
              }
              v832 = (void **)v1014;
              if (v1014)
              {
                v833 = v1015;
                v834 = v1014;
                if (v1015 != v1014)
                {
                  do
                  {
                    if (*((char *)v833 - 1) < 0)
                      operator delete(*(v833 - 3));
                    v833 -= 3;
                  }
                  while (v833 != v832);
                  v834 = v1014;
                }
                v1015 = v832;
                operator delete(v834);
              }
              if (SHIBYTE(v1018) < 0)
              {
                operator delete((void *)v1017);
                v835 = (std::__shared_weak_count *)v983[1];
                if (!v983[1])
                  goto LABEL_1289;
              }
              else
              {
                v835 = (std::__shared_weak_count *)v983[1];
                if (!v983[1])
                  goto LABEL_1289;
              }
              v836 = (unint64_t *)&v835->__shared_owners_;
              do
                v837 = __ldaxr(v836);
              while (__stlxr(v837 - 1, v836));
              if (v837)
              {
LABEL_1289:
                if ((SHIBYTE(v1103) & 0x80000000) == 0)
                  goto LABEL_1291;
                goto LABEL_1290;
              }
              ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
              std::__shared_weak_count::__release_weak(v835);
              if (SHIBYTE(v1103) < 0)
LABEL_1290:
                operator delete((void *)__dst);
LABEL_1291:
              v821 = *((_QWORD *)&v1121 + 1);
LABEL_1292:
              if (v821 != 5)
                goto LABEL_1332;
              LODWORD(__str[0]) = 0;
              *(std::string **)((char *)__str + 4) = _D8;
              *(std::string **)((char *)&__str[3] + 4) = 0;
              *(_OWORD *)((char *)&__str[1] + 4) = 0uLL;
              v838 = SHIBYTE(v1154);
              if (v1154 >= 0)
                v839 = HIBYTE(v1154);
              else
                v839 = *((_QWORD *)&v1153 + 1);
              v840 = v839 + 5;
              if (v839 + 5 > 0x7FFFFFFFFFFFFFF7)
                sub_19C07C774();
              if (v840 >= 0x17)
              {
                v842 = (v840 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v840 | 7) != 0x17)
                  v842 = v840 | 7;
                v843 = v842 + 1;
                v841 = (__int128 *)operator new(v842 + 1);
                v1103 = v843 | 0x8000000000000000;
                *(_QWORD *)&__dst = v841;
                *((_QWORD *)&__dst + 1) = v839 + 5;
              }
              else
              {
                v1103 = 0;
                __dst = 0uLL;
                v841 = &__dst;
                HIBYTE(v1103) = v839 + 5;
                if (!v839)
                  goto LABEL_1307;
              }
              if (v838 >= 0)
                v844 = &v1153;
              else
                v844 = (__int128 *)v1153;
              memmove(v841, v844, v839);
LABEL_1307:
              v30 = v927;
              strcpy((char *)v841 + v839, "_relu");
              HIBYTE(v1018) = 10;
              strcpy((char *)&v1017, "activation");
              v1009 = 0;
              v1007 = 0;
              v1008 = 0;
              sub_19C1B8190(&v1007, (uint64_t)v941, v918, v792);
              v1005 = 0;
              v1004 = 0;
              v1006 = 0;
              sub_19C1B8190(&v1004, v1104, *((uint64_t *)&v1104 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v1104 + 1) - v1104) >> 3));
              sub_19C1B6DEC(a1, (uint64_t *)&v1007, (uint64_t *)&v1004, v983);
              v845 = (void **)v1004;
              if (v1004)
              {
                v846 = v1005;
                v847 = v1004;
                if (v1005 != v1004)
                {
                  do
                  {
                    if (*((char *)v846 - 1) < 0)
                      operator delete(*(v846 - 3));
                    v846 -= 3;
                  }
                  while (v846 != v845);
                  v847 = v1004;
                }
                v1005 = v845;
                operator delete(v847);
              }
              v848 = (void **)v1007;
              if (v1007)
              {
                v849 = v1008;
                v850 = v1007;
                if (v1008 != v1007)
                {
                  do
                  {
                    if (*((char *)v849 - 1) < 0)
                      operator delete(*(v849 - 3));
                    v849 -= 3;
                  }
                  while (v849 != v848);
                  v850 = v1007;
                }
                v1008 = v848;
                operator delete(v850);
              }
              if (SHIBYTE(v1018) < 0)
              {
                operator delete((void *)v1017);
                v851 = (std::__shared_weak_count *)v983[1];
                if (!v983[1])
                  goto LABEL_1330;
              }
              else
              {
                v851 = (std::__shared_weak_count *)v983[1];
                if (!v983[1])
                  goto LABEL_1330;
              }
              v852 = (unint64_t *)&v851->__shared_owners_;
              do
                v853 = __ldaxr(v852);
              while (__stlxr(v853 - 1, v852));
              if (!v853)
              {
                ((void (*)(std::__shared_weak_count *))v851->__on_zero_shared)(v851);
                std::__shared_weak_count::__release_weak(v851);
                if ((SHIBYTE(v1103) & 0x80000000) == 0)
                  goto LABEL_1332;
                goto LABEL_1331;
              }
LABEL_1330:
              if ((SHIBYTE(v1103) & 0x80000000) == 0)
              {
LABEL_1332:
                v854 = (std::__shared_weak_count *)*((_QWORD *)&v985 + 1);
                if (*((_QWORD *)&v985 + 1))
                {
                  v855 = (unint64_t *)(*((_QWORD *)&v985 + 1) + 8);
                  do
                    v856 = __ldaxr(v855);
                  while (__stlxr(v856 - 1, v855));
                  if (!v856)
                  {
                    ((void (*)(std::__shared_weak_count *))v854->__on_zero_shared)(v854);
                    std::__shared_weak_count::__release_weak(v854);
                  }
                }
                v857 = (std::__shared_weak_count *)v988;
                if (v988)
                {
                  v858 = (unint64_t *)((char *)v988 + 8);
                  do
                    v859 = __ldaxr(v858);
                  while (__stlxr(v859 - 1, v858));
                  if (!v859)
                  {
                    ((void (*)(std::__shared_weak_count *))v857->__on_zero_shared)(v857);
                    std::__shared_weak_count::__release_weak(v857);
                  }
                }
                v860 = v1104;
                if ((_QWORD)v1104)
                {
                  v861 = *((_QWORD *)&v1104 + 1);
                  v143 = (int *)v1104;
                  if (*((_QWORD *)&v1104 + 1) != (_QWORD)v1104)
                  {
                    do
                    {
                      if (*(char *)(v861 - 1) < 0)
                        operator delete(*(void **)(v861 - 24));
                      v861 -= 24;
                    }
                    while (v861 != v860);
                    v143 = (int *)v1104;
                  }
                  *((_QWORD *)&v1104 + 1) = v860;
                  goto LABEL_1350;
                }
                goto LABEL_1351;
              }
LABEL_1331:
              operator delete((void *)__dst);
              goto LABEL_1332;
          }
        case 1:
          *(_QWORD *)&__p[4] = 0;
          *(_QWORD *)&__p[12] = 0x3F6666663727C5ACLL;
          *(_WORD *)&__p[20] = 0;
          memset(&__p[24], 0, 32);
          *(_DWORD *)&__p[56] = 1065353216;
          *(_QWORD *)&__p[60] = 0;
          *(_QWORD *)&__p[68] = 0x200000000;
          v83 = DWORD2(v1126);
          if (SDWORD2(v1126) < 1)
          {
            *(_QWORD *)&__p[40] = 0x100000001;
            v83 = v1126;
          }
          else
          {
            *(_QWORD *)&__p[40] = v1126;
          }
          *(_DWORD *)__p = v83;
          HIBYTE(__str[2]) = 9;
          strcpy((char *)__str, "batchnorm");
          v1036 = 0;
          v1034 = 0;
          v1035 = 0;
          sub_19C1B8190(&v1034, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
          v1032 = 0;
          v1031 = 0;
          v1033 = 0;
          sub_19C1B8190(&v1031, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B6260(a1, (uint64_t *)&v1034, (uint64_t *)&v1031, &v1104);
          v664 = (void **)v1031;
          if (v1031)
          {
            v665 = v1032;
            v666 = v1031;
            if (v1032 != v1031)
            {
              do
              {
                if (*((char *)v665 - 1) < 0)
                  operator delete(*(v665 - 3));
                v665 -= 3;
              }
              while (v665 != v664);
              v666 = v1031;
            }
            v1032 = v664;
            operator delete(v666);
          }
          v667 = (void **)v1034;
          if (v1034)
          {
            v668 = v1035;
            v669 = v1034;
            if (v1035 != v1034)
            {
              do
              {
                if (*((char *)v668 - 1) < 0)
                  operator delete(*(v668 - 3));
                v668 -= 3;
              }
              while (v668 != v667);
              v669 = v1034;
            }
            v1035 = v667;
            operator delete(v669);
          }
          if (SHIBYTE(__str[2]) < 0)
            operator delete(__str[0]);
          sub_19C1B65EC(4 * *(_DWORD *)__p, 1, 1, 1, __str);
          v670 = *(unsigned int *)__p;
          v671 = __str[0];
          if (*(int *)__p < 1)
            goto LABEL_989;
          v672 = v1146;
          v673 = v1150;
          v674 = __str[0]->__r_.__value_.__r.__words[2];
          if (*(_DWORD *)__p < 8u)
          {
            v675 = 0;
LABEL_987:
            v676 = (int *)v673 + v675;
            v677 = (int *)(v672 + 4 * v675);
            v678 = (_QWORD *)(v674 + 16 * v675 + 8);
            v679 = v670 - v675;
            do
            {
              v680 = *v677++;
              *((_DWORD *)v678 - 2) = v680;
              v681 = *v676++;
              *((_DWORD *)v678 - 1) = v681;
              *v678 = 0x3F80000000000000;
              v678 += 2;
              --v679;
            }
            while (v679);
            goto LABEL_989;
          }
          v675 = 0;
          v719 = v674 + 16 * *(unsigned int *)__p;
          _CF = v674 >= (unint64_t)v1150 + 4 * *(unsigned int *)__p || (unint64_t)v1150 >= v719;
          v721 = !_CF;
          if ((unint64_t)v1146 < v719 && v674 < (unint64_t)v1146 + 4 * *(unsigned int *)__p)
            goto LABEL_987;
          if ((v721 & 1) != 0)
            goto LABEL_987;
          v675 = *(_DWORD *)__p & 0xFFFFFFFC;
          v723 = v675;
          v724 = (__n128 *)v1150;
          v725 = (float *)__str[0]->__r_.__value_.__r.__words[2];
          v726 = (__n128 *)v1146;
          v727 = 0u;
          v728 = v923;
          do
          {
            v729 = *v726++;
            v730 = v729;
            v731 = *v724++;
            v732 = v731;
            vst4q_f32(v725, *(float32x4x4_t *)(&v727 - 2));
            v725 += 16;
            v723 -= 4;
          }
          while (v723);
          v921 = v730;
          v922 = v732;
          if (v675 != v670)
            goto LABEL_987;
LABEL_989:
          v682 = v1104;
          v1029 = v671;
          v1030 = __str[1];
          if (__str[1])
          {
            v683 = &__str[1]->__r_.__value_.__l.__size_;
            do
              v684 = __ldxr(v683);
            while (__stxr(v684 + 1, v683));
          }
          (*(void (**)(uint64_t, std::string **))(*(_QWORD *)v682 + 392))(v682, &v1029);
          v685 = (std::__shared_weak_count *)v1030;
          if (v1030)
          {
            v686 = &v1030->__r_.__value_.__l.__size_;
            do
              v687 = __ldaxr(v686);
            while (__stlxr(v687 - 1, v686));
            if (!v687)
            {
              ((void (*)(std::__shared_weak_count *))v685->__on_zero_shared)(v685);
              std::__shared_weak_count::__release_weak(v685);
            }
          }
          v688 = (std::__shared_weak_count *)__str[1];
          if (__str[1])
          {
            v689 = &__str[1]->__r_.__value_.__l.__size_;
            do
              v690 = __ldaxr(v689);
            while (__stlxr(v690 - 1, v689));
            if (!v690)
            {
              ((void (*)(std::__shared_weak_count *))v688->__on_zero_shared)(v688);
              std::__shared_weak_count::__release_weak(v688);
            }
          }
          v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
          if (!*((_QWORD *)&v1104 + 1))
            goto LABEL_1351;
          v691 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
          do
            v551 = __ldaxr(v691);
          while (__stlxr(v551 - 1, v691));
          goto LABEL_1158;
        case 2:
          if (*((_QWORD *)&v1121 + 1) == 4)
          {
            *(_DWORD *)&__p[24] = 256;
            *(_OWORD *)__p = xmmword_19C278000;
            *(_QWORD *)&__p[16] = 1;
            HIBYTE(__str[2]) = 7;
            strcpy((char *)__str, "softmax");
            v982 = 0;
            v980 = 0;
            v981 = 0;
            sub_19C1B8190(&v980, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
            v978 = 0;
            v977 = 0;
            v979 = 0;
            sub_19C1B8190(&v977, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
            sub_19C1B6A60(a1, (uint64_t *)&v980, (uint64_t *)&v977, &v1104);
            v73 = (void **)v977;
            if (v977)
            {
              v74 = v978;
              v75 = v977;
              if (v978 != v977)
              {
                do
                {
                  if (*((char *)v74 - 1) < 0)
                    operator delete(*(v74 - 3));
                  v74 -= 3;
                }
                while (v74 != v73);
                v75 = v977;
              }
              v978 = v73;
              operator delete(v75);
            }
            v765 = (void **)v980;
            if (v980)
            {
              v766 = v981;
              v767 = v980;
              if (v981 != v980)
              {
                do
                {
                  if (*((char *)v766 - 1) < 0)
                    operator delete(*(v766 - 3));
                  v766 -= 3;
                }
                while (v766 != v765);
                v767 = v980;
              }
              v981 = v765;
              operator delete(v767);
            }
            if (SHIBYTE(__str[2]) < 0)
              operator delete(__str[0]);
            v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
            if (*((_QWORD *)&v1104 + 1))
            {
              v768 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
              do
                v551 = __ldaxr(v768);
              while (__stlxr(v551 - 1, v768));
              goto LABEL_1158;
            }
          }
          else
          {
            *(_DWORD *)__p = 0;
            *(_QWORD *)&__p[4] = _D8;
            memset(&__p[12], 0, 24);
            switch(*((_QWORD *)&v1121 + 1))
            {
              case 0xCLL:
                *(_DWORD *)__p = 22;
                HIBYTE(__str[2]) = 10;
                strcpy((char *)__str, "activation");
                v964 = 0;
                v962 = 0;
                v963 = 0;
                sub_19C1B8190(&v962, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
                v960 = 0;
                v959 = 0;
                v961 = 0;
                sub_19C1B8190(&v959, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
                sub_19C1B6DEC(a1, (uint64_t *)&v962, (uint64_t *)&v959, &v1104);
                v780 = (void **)v959;
                if (v959)
                {
                  v781 = v960;
                  v782 = v959;
                  if (v960 != v959)
                  {
                    do
                    {
                      if (*((char *)v781 - 1) < 0)
                        operator delete(*(v781 - 3));
                      v781 -= 3;
                    }
                    while (v781 != v780);
                    v782 = v959;
                  }
                  v960 = v780;
                  operator delete(v782);
                }
                v879 = (void **)v962;
                if (v962)
                {
                  v880 = v963;
                  v881 = v962;
                  if (v963 != v962)
                  {
                    do
                    {
                      if (*((char *)v880 - 1) < 0)
                        operator delete(*(v880 - 3));
                      v880 -= 3;
                    }
                    while (v880 != v879);
                    v881 = v962;
                  }
                  v963 = v879;
                  operator delete(v881);
                }
                if (SHIBYTE(__str[2]) < 0)
                  operator delete(__str[0]);
                v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
                if (*((_QWORD *)&v1104 + 1))
                {
                  v882 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
                  do
                    v551 = __ldaxr(v882);
                  while (__stlxr(v551 - 1, v882));
                  goto LABEL_1158;
                }
                break;
              case 0xALL:
                *(_DWORD *)__p = 19;
                HIBYTE(__str[2]) = 10;
                strcpy((char *)__str, "activation");
                v970 = 0;
                v968 = 0;
                v969 = 0;
                sub_19C1B8190(&v968, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
                v966 = 0;
                v965 = 0;
                v967 = 0;
                sub_19C1B8190(&v965, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
                sub_19C1B6DEC(a1, (uint64_t *)&v968, (uint64_t *)&v965, &v1104);
                v777 = (void **)v965;
                if (v965)
                {
                  v778 = v966;
                  v779 = v965;
                  if (v966 != v965)
                  {
                    do
                    {
                      if (*((char *)v778 - 1) < 0)
                        operator delete(*(v778 - 3));
                      v778 -= 3;
                    }
                    while (v778 != v777);
                    v779 = v965;
                  }
                  v966 = v777;
                  operator delete(v779);
                }
                v875 = (void **)v968;
                if (v968)
                {
                  v876 = v969;
                  v877 = v968;
                  if (v969 != v968)
                  {
                    do
                    {
                      if (*((char *)v876 - 1) < 0)
                        operator delete(*(v876 - 3));
                      v876 -= 3;
                    }
                    while (v876 != v875);
                    v877 = v968;
                  }
                  v969 = v875;
                  operator delete(v877);
                }
                if (SHIBYTE(__str[2]) < 0)
                  operator delete(__str[0]);
                v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
                if (*((_QWORD *)&v1104 + 1))
                {
                  v878 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
                  do
                    v551 = __ldaxr(v878);
                  while (__stlxr(v551 - 1, v878));
                  goto LABEL_1158;
                }
                break;
              case 5:
                HIBYTE(__str[2]) = 10;
                strcpy((char *)__str, "activation");
                v976 = 0;
                v974 = 0;
                v975 = 0;
                sub_19C1B8190(&v974, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
                v972 = 0;
                v971 = 0;
                v973 = 0;
                sub_19C1B8190(&v971, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
                sub_19C1B6DEC(a1, (uint64_t *)&v974, (uint64_t *)&v971, &v1104);
                v540 = (void **)v971;
                if (v971)
                {
                  v541 = v972;
                  v542 = v971;
                  if (v972 != v971)
                  {
                    do
                    {
                      if (*((char *)v541 - 1) < 0)
                        operator delete(*(v541 - 3));
                      v541 -= 3;
                    }
                    while (v541 != v540);
                    v542 = v971;
                  }
                  v972 = v540;
                  operator delete(v542);
                }
                v883 = (void **)v974;
                if (v974)
                {
                  v884 = v975;
                  v885 = v974;
                  if (v975 != v974)
                  {
                    do
                    {
                      if (*((char *)v884 - 1) < 0)
                        operator delete(*(v884 - 3));
                      v884 -= 3;
                    }
                    while (v884 != v883);
                    v885 = v974;
                  }
                  v975 = v883;
                  operator delete(v885);
                }
                if (SHIBYTE(__str[2]) < 0)
                  operator delete(__str[0]);
                v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
                if (*((_QWORD *)&v1104 + 1))
                {
                  v886 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
                  do
                    v551 = __ldaxr(v886);
                  while (__stlxr(v551 - 1, v886));
                  goto LABEL_1158;
                }
                break;
            }
          }
          goto LABEL_1351;
        case 3:
          LODWORD(v1104) = 2;
          WORD2(v1104) = 0;
          __p[23] = 14;
          strcpy(__p, "general_concat");
          v1065 = 0;
          v1063 = 0;
          v1064 = 0;
          sub_19C1B8190(&v1063, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
          v1061 = 0;
          v1060 = 0;
          v1062 = 0;
          sub_19C1B8190(&v1060, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B59CC(a1, (uint64_t *)&v1063, (uint64_t *)&v1060, (uint64_t *)__str);
          v84 = (void **)v1060;
          if (v1060)
          {
            v85 = v1061;
            v86 = v1060;
            if (v1061 != v1060)
            {
              do
              {
                if (*((char *)v85 - 1) < 0)
                  operator delete(*(v85 - 3));
                v85 -= 3;
              }
              while (v85 != v84);
              v86 = v1060;
            }
            v1061 = v84;
            operator delete(v86);
          }
          v618 = (void **)v1063;
          if (v1063)
          {
            v619 = v1064;
            v620 = v1063;
            if (v1064 != v1063)
            {
              do
              {
                if (*((char *)v619 - 1) < 0)
                  operator delete(*(v619 - 3));
                v619 -= 3;
              }
              while (v619 != v618);
              v620 = v1063;
            }
            v1064 = v618;
            operator delete(v620);
          }
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v549 = (std::__shared_weak_count *)__str[1];
          if (!__str[1])
            goto LABEL_1351;
          v621 = &__str[1]->__r_.__value_.__l.__size_;
          do
            v551 = __ldaxr(v621);
          while (__stlxr(v551 - 1, v621));
          goto LABEL_1158;
        case 4:
        case 23:
          v32 = v1138;
          v33 = v1134;
          __p[40] = 0;
          *(_QWORD *)&__p[56] = _D8;
          *(_QWORD *)v1053 = 0;
          *(_QWORD *)&__p[20] = _D8;
          *(_DWORD *)&__p[88] = 0;
          *(_DWORD *)&__p[84] = 0;
          *(_DWORD *)&__p[52] = -1;
          *(_QWORD *)&__p[44] = 0;
          memset(&__p[100], 0, 24);
          *(_DWORD *)&__p[4] = v1138;
          *(_DWORD *)__p = v1134;
          *(_QWORD *)&__p[8] = 0;
          *(_DWORD *)&__p[16] = 0;
          *(_DWORD *)&__p[36] = 0;
          *(_QWORD *)&__p[28] = 0x100000000;
          HIBYTE(__str[2]) = 13;
          strcpy((char *)__str, "inner_product");
          v1003 = 0;
          v1001 = 0;
          v1002 = 0;
          sub_19C1B8190(&v1001, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
          v999 = 0;
          v998 = 0;
          v1000 = 0;
          sub_19C1B8190(&v998, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B66D4(a1, (uint64_t *)&v1001, (uint64_t *)&v998, &v1104);
          v34 = (void **)v998;
          if (v998)
          {
            v35 = v999;
            v36 = v998;
            if (v999 != v998)
            {
              do
              {
                if (*((char *)v35 - 1) < 0)
                  operator delete(*(v35 - 3));
                v35 -= 3;
              }
              while (v35 != v34);
              v36 = v998;
            }
            v999 = v34;
            operator delete(v36);
          }
          v94 = (void **)v1001;
          if (v1001)
          {
            v95 = v1002;
            v96 = v1001;
            if (v1002 != v1001)
            {
              do
              {
                if (*((char *)v95 - 1) < 0)
                  operator delete(*(v95 - 3));
                v95 -= 3;
              }
              while (v95 != v94);
              v96 = v1001;
            }
            v1002 = v94;
            operator delete(v96);
          }
          if (SHIBYTE(__str[2]) < 0)
          {
            operator delete(__str[0]);
            v97 = v1146;
            v98 = v33 * v32;
            memset(__str, 0, 24);
            if ((_DWORD)v33 * (_DWORD)v32)
            {
LABEL_173:
              v99 = v98;
              if (v98 < 0)
                sub_19C07DA0C();
              v100 = 4 * v98;
              v101 = (std::string *)operator new(v100);
              v102 = (std::string *)((char *)v101 + 4 * v99);
              __str[0] = v101;
              __str[2] = v102;
              bzero(v101, v100);
              __str[1] = v102;
              if ((int)v32 < 1)
              {
LABEL_211:
                v124 = v1160;
                if ((unint64_t)v1160 >= v1161)
                {
                  v30 = v927;
                  v129 = sub_19C1BA5B0(&v1159, (uint64_t)__str);
                }
                else
                {
                  *(_QWORD *)v1160 = 0;
                  *((_QWORD *)v124 + 1) = 0;
                  *((_QWORD *)v124 + 2) = 0;
                  v125 = __str[0];
                  v126 = (char *)__str[1] - (char *)__str[0];
                  v30 = v927;
                  if (__str[1] != __str[0])
                  {
                    if (v126 < 0)
                      sub_19C07DA0C();
                    v127 = (char *)operator new((char *)__str[1] - (char *)__str[0]);
                    *(_QWORD *)v124 = v127;
                    *((_QWORD *)v124 + 1) = v127;
                    v128 = &v127[4 * (v126 >> 2)];
                    *((_QWORD *)v124 + 2) = v128;
                    memcpy(v127, v125, v126);
                    *((_QWORD *)v124 + 1) = v128;
                    v30 = v927;
                  }
                  v129 = v124 + 24;
                }
                v1160 = v129;
                v130 = *((_QWORD *)v129 - 3);
                v131 = (char *)operator new(0x58uLL);
                *((_QWORD *)v131 + 1) = 0;
                v132 = (unint64_t *)(v131 + 8);
                *((_QWORD *)v131 + 2) = 0;
                *((_QWORD *)v131 + 3) = &unk_1E3D21A10;
                *(_QWORD *)v131 = &unk_1E3D24FF8;
                *(_OWORD *)(v131 + 56) = 0u;
                *(_OWORD *)(v131 + 72) = 0u;
                *((_DWORD *)v131 + 8) = v33;
                *((_DWORD *)v131 + 9) = v32;
                *((_QWORD *)v131 + 5) = v130;
                v131[48] = 0;
                *(_QWORD *)&__dst = v131 + 24;
                *((_QWORD *)&__dst + 1) = v131;
                v133 = v1104;
                v996 = v131 + 24;
                v997 = (std::__shared_weak_count *)v131;
                do
                  v134 = __ldxr(v132);
                while (__stxr(v134 + 1, v132));
                (*(void (**)(uint64_t, char **, __n128, __n128))(*(_QWORD *)v133 + 400))(v133, &v996, v921, v922);
                v135 = v997;
                if (!v997)
                  goto LABEL_223;
                v136 = (unint64_t *)&v997->__shared_owners_;
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v135);
                  v138 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                  if (*((_QWORD *)&__dst + 1))
                    goto LABEL_224;
                }
                else
                {
LABEL_223:
                  v138 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                  if (*((_QWORD *)&__dst + 1))
                  {
LABEL_224:
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                }
                if (__str[0])
                {
                  __str[1] = __str[0];
                  operator delete(__str[0]);
                }
                v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
                if (!*((_QWORD *)&v1104 + 1))
                  goto LABEL_1351;
                v550 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
                do
                  v551 = __ldaxr(v550);
                while (__stlxr(v551 - 1, v550));
LABEL_1158:
                if (!v551)
                {
                  ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
                  std::__shared_weak_count::__release_weak(v549);
                }
                goto LABEL_1351;
              }
              goto LABEL_191;
            }
          }
          else
          {
            v97 = v1146;
            v98 = v33 * v32;
            memset(__str, 0, 24);
            if ((_DWORD)v33 * (_DWORD)v32)
              goto LABEL_173;
          }
          v101 = 0;
          if ((int)v32 < 1)
            goto LABEL_211;
LABEL_191:
          v107 = 0;
          v108 = 0;
          v109 = 4 * (int)v33;
          _ZF = v33 >= 8 && (_DWORD)v32 == 1;
          v111 = !_ZF;
          v112 = (__int128 *)(v97 + 16);
          v113 = &v101->__r_.__value_.__r.__words[2];
          while (1)
          {
            if ((int)v33 >= 1)
            {
              if ((unint64_t)v101 + 4 * v108 - v97 - v109 * v108 < 0x20)
                v114 = 1;
              else
                v114 = v111;
              if ((v114 & 1) != 0)
              {
                v115 = 0;
              }
              else
              {
                v116 = v33 & 0x7FFFFFF8;
                v117 = v113;
                v118 = v112;
                do
                {
                  v119 = *v118;
                  *((_OWORD *)v117 - 1) = *(v118 - 1);
                  *(_OWORD *)v117 = v119;
                  v118 += 2;
                  v117 += 4 * v32;
                  v116 -= 8;
                }
                while (v116);
                v115 = v33 & 0x7FFFFFF8;
                if ((v33 & 0xFFFFFFF8) == v33)
                  goto LABEL_198;
              }
              v120 = (_DWORD *)((char *)v101 + 4 * v108 + 4 * v32 * (unint64_t)v115);
              v121 = (int *)(v97 + 4 * (v115 + v107));
              v122 = v33 - v115;
              do
              {
                v123 = *v121++;
                *v120 = v123;
                v120 += v32;
                --v122;
              }
              while (v122);
            }
LABEL_198:
            ++v108;
            v112 = (__int128 *)((char *)v112 + v109);
            v113 = (std::string::size_type *)((char *)v113 + 4);
            v107 += (int)v33;
            if (v108 == v32)
              goto LABEL_211;
          }
        case 5:
        case 6:
          *(_DWORD *)&__p[64] = 0;
          *(_DWORD *)&__p[76] = v1134;
          *(_QWORD *)&__p[8] = _D8;
          *(_QWORD *)__p = 0;
          *(_QWORD *)&__p[20] = _D8;
          *(_QWORD *)&__p[32] = _D8;
          *(_DWORD *)&__p[16] = 2;
          *(_DWORD *)&__p[28] = 0;
          *(_QWORD *)&__p[44] = _D8;
          *(_QWORD *)&__p[56] = _D8;
          *(_DWORD *)&__p[40] = 0;
          *(_DWORD *)&__p[52] = 2;
          *(_QWORD *)&__p[68] = _D8;
          *(_QWORD *)&__p[108] = 0x100000000;
          *(_DWORD *)&__p[104] = 1112014848;
          *(_DWORD *)v1053 = 1065353216;
          *(_QWORD *)&__p[116] = 1065353216;
          *(_QWORD *)&v1053[4] = 0;
          LOWORD(v1056) = 0;
          *(_QWORD *)&__p[80] = v1126;
          *(_OWORD *)&__p[88] = xmmword_19C276E20;
          v1055 = 1;
          v1054 = 1;
          v37 = (int *)operator new(4uLL);
          *v37 = 0;
          v916 = v37 + 1;
          if (v31 == 6)
          {
            HIDWORD(v1055) = 1;
            v38 = (int *)operator new(8uLL);
            *(_QWORD *)v38 = 0x200000000;
            v916 = v38 + 2;
            operator delete(v37);
            v37 = v38;
          }
          HIBYTE(__str[2]) = 8;
          strcpy((char *)__str, "rnn_arch");
          v995 = 0;
          v993 = 0;
          v994 = 0;
          v942 = v37;
          sub_19C1B8190(&v993, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
          v991 = 0;
          v990 = 0;
          v992 = 0;
          sub_19C1B8190(&v990, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B7178(a1, (uint64_t *)&v993, (uint64_t *)&v990, (uint64_t *)&v1104);
          v39 = v1104;
          v1104 = 0uLL;
          v40 = (void **)v990;
          if (v990)
          {
            v41 = v991;
            v42 = v990;
            if (v991 != v990)
            {
              do
              {
                if (*((char *)v41 - 1) < 0)
                  operator delete(*(v41 - 3));
                v41 -= 3;
              }
              while (v41 != v40);
              v42 = v990;
            }
            v991 = v40;
            operator delete(v42);
          }
          v103 = (void **)v993;
          if (v993)
          {
            v104 = v994;
            v105 = v993;
            if (v994 != v993)
            {
              do
              {
                if (*((char *)v104 - 1) < 0)
                  operator delete(*(v104 - 3));
                v104 -= 3;
              }
              while (v104 != v103);
              v105 = v993;
            }
            v994 = v103;
            operator delete(v105);
          }
          if (SHIBYTE(__str[2]) < 0)
          {
            operator delete(__str[0]);
            v106 = v37;
            if (v37 == v916)
              goto LABEL_229;
          }
          else
          {
            v106 = v37;
            if (v37 == v916)
              goto LABEL_229;
          }
          while (1)
          {
            v919 = v106;
            v920 = *v106;
            v145 = (_QWORD *)&v1118 + v920;
            v146 = v145[56];
            if ((BYTE8(v1125) & 0x20) != 0)
              break;
            v925 = v145[57];
            v926 = (float32x4_t *)v145[72];
            if ((BYTE8(v1125) & 0x80) == 0)
              goto LABEL_317;
LABEL_334:
            v216 = 0;
            memset(__str, 0, 24);
            v1104 = 0uLL;
            v1105 = 0;
            __dst = 0uLL;
            v1103 = 0;
            v217 = (int)v1134;
            v218 = (int)v1134 * (uint64_t)(int)v1126;
            v935 = v217 * v217;
            v219 = 4 * v218;
            __sz = 4 * (int)v1134;
            v939 = (int)v1134;
            v928 = 4 * v218;
            v930 = v218;
            do
            {
              v220 = 0;
              v221 = 0;
              v222 = v216 + 1;
              v1017 = 0uLL;
              v1018 = 0;
              if ((_DWORD)v218 * ((_DWORD)v216 + 1) != (_DWORD)v216 * (_DWORD)v218)
              {
                if ((v218 & 0x80000000) != 0)
                  sub_19C07DA0C();
                v221 = operator new(v219);
                *(_QWORD *)&v1017 = v221;
                *((_QWORD *)&v1017 + 1) = v221;
                v220 = (unint64_t)v221 + 4 * v218;
                v1018 = v220;
                memcpy(v221, (const void *)(v146 + 4 * v216 * v218), v219);
                *((_QWORD *)&v1017 + 1) = v220;
              }
              v223 = __str[1];
              if (__str[1] < __str[2])
              {
                __str[1]->__r_.__value_.__l.__data_ = 0;
                v223->__r_.__value_.__l.__size_ = 0;
                v223->__r_.__value_.__r.__words[2] = 0;
                *(_OWORD *)&v223->__r_.__value_.__l.__data_ = v1017;
                v223->__r_.__value_.__r.__words[2] = v1018;
                __str[1] = v223 + 1;
                goto LABEL_362;
              }
              v224 = __str[0];
              v225 = (char *)__str[1] - (char *)__str[0];
              v226 = 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3);
              v227 = v226 + 1;
              if (v226 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              if (0x5555555555555556 * (((char *)__str[2] - (char *)__str[0]) >> 3) > v227)
                v227 = 0x5555555555555556 * (((char *)__str[2] - (char *)__str[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)__str[2] - (char *)__str[0]) >> 3) >= 0x555555555555555)
                v228 = 0xAAAAAAAAAAAAAAALL;
              else
                v228 = v227;
              if (v228 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v229 = (char *)operator new(24 * v228);
              v230 = (std::string *)&v229[24 * v226];
              v230->__r_.__value_.__l.__size_ = 0;
              v230->__r_.__value_.__r.__words[2] = 0;
              v230->__r_.__value_.__r.__words[0] = (std::string::size_type)v221;
              *(int64x2_t *)&v229[v225 + 8] = vdupq_n_s64(v220);
              v1018 = 0;
              v1017 = 0uLL;
              v231 = v230 + 1;
              if (v223 == v224)
              {
                __str[0] = (std::string *)&v229[24 * v226];
                __str[1] = v230 + 1;
                __str[2] = (std::string *)&v229[24 * v228];
                v217 = v939;
                goto LABEL_358;
              }
              v217 = v939;
              do
              {
                v232 = *(_OWORD *)&v223[-1].__r_.__value_.__l.__data_;
                --v223;
                *(_OWORD *)&v230[-1].__r_.__value_.__l.__data_ = v232;
                --v230;
                v230->__r_.__value_.__r.__words[2] = v223->__r_.__value_.__r.__words[2];
                v223->__r_.__value_.__r.__words[0] = 0;
                v223->__r_.__value_.__l.__size_ = 0;
                v223->__r_.__value_.__r.__words[2] = 0;
              }
              while (v223 != v224);
              v223 = __str[0];
              v233 = __str[1];
              __str[0] = v230;
              __str[1] = v231;
              __str[2] = (std::string *)&v229[24 * v228];
              if (v233 != v223)
              {
                v234 = v233;
                do
                {
                  data = v234[-1].__r_.__value_.__l.__data_;
                  --v234;
                  v235 = data;
                  if (data)
                  {
                    v233[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v235;
                    operator delete(v235);
                  }
                  v233 = v234;
                }
                while (v234 != v223);
LABEL_358:
                if (!v223)
                  goto LABEL_360;
LABEL_359:
                operator delete(v223);
                goto LABEL_360;
              }
              if (v223)
                goto LABEL_359;
LABEL_360:
              __str[1] = v231;
              if ((_QWORD)v1017)
              {
                *((_QWORD *)&v1017 + 1) = v1017;
                operator delete((void *)v1017);
              }
LABEL_362:
              v237 = 0;
              v238 = 0;
              v1017 = 0uLL;
              v1018 = 0;
              if (v935 * (_DWORD)v222 != v935 * (_DWORD)v216)
              {
                v239 = (const void *)(v925 + 4 * (v935 * v216));
                v240 = v925 + 4 * (v935 * v222);
                v241 = v240 - (_QWORD)v239;
                if (v240 - (_QWORD)v239 < 0)
                  sub_19C07DA0C();
                v238 = operator new(v240 - (_QWORD)v239);
                *(_QWORD *)&v1017 = v238;
                *((_QWORD *)&v1017 + 1) = v238;
                v237 = (unint64_t)v238 + 4 * (v241 >> 2);
                v1018 = v237;
                memcpy(v238, v239, v241);
                *((_QWORD *)&v1017 + 1) = v237;
                v217 = v939;
              }
              v242 = (char *)*((_QWORD *)&v1104 + 1);
              if (*((_QWORD *)&v1104 + 1) < (unint64_t)v1105)
              {
                **((_QWORD **)&v1104 + 1) = 0;
                *((_QWORD *)v242 + 1) = 0;
                *((_QWORD *)v242 + 2) = 0;
                *(_OWORD *)v242 = v1017;
                *((_QWORD *)v242 + 2) = v1018;
                *((_QWORD *)&v1104 + 1) = v242 + 24;
                goto LABEL_386;
              }
              v243 = (char *)v1104;
              v244 = *((_QWORD *)&v1104 + 1) - v1104;
              v245 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v1104 + 1) - v1104) >> 3);
              v246 = v245 + 1;
              if (v245 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              if (0x5555555555555556 * ((uint64_t)((uint64_t)v1105 - v1104) >> 3) > v246)
                v246 = 0x5555555555555556 * ((uint64_t)((uint64_t)v1105 - v1104) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v1105 - v1104) >> 3) >= 0x555555555555555)
                v247 = 0xAAAAAAAAAAAAAAALL;
              else
                v247 = v246;
              if (v247 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v248 = (char *)operator new(24 * v247);
              v249 = &v248[24 * v245];
              *((_QWORD *)v249 + 1) = 0;
              *((_QWORD *)v249 + 2) = 0;
              *(_QWORD *)v249 = v238;
              *(int64x2_t *)&v248[v244 + 8] = vdupq_n_s64(v237);
              v1018 = 0;
              v1017 = 0uLL;
              v250 = v249 + 24;
              if (v242 == v243)
              {
                *(_QWORD *)&v1104 = &v248[24 * v245];
                *((_QWORD *)&v1104 + 1) = v249 + 24;
                v1105 = (std::string *)&v248[24 * v247];
                v217 = v939;
                goto LABEL_382;
              }
              do
              {
                v251 = *(_OWORD *)(v242 - 24);
                v242 -= 24;
                *(_OWORD *)(v249 - 24) = v251;
                v249 -= 24;
                *((_QWORD *)v249 + 2) = *((_QWORD *)v242 + 2);
                *(_QWORD *)v242 = 0;
                *((_QWORD *)v242 + 1) = 0;
                *((_QWORD *)v242 + 2) = 0;
              }
              while (v242 != v243);
              v252 = (char *)*((_QWORD *)&v1104 + 1);
              v242 = (char *)v1104;
              *(_QWORD *)&v1104 = v249;
              *((_QWORD *)&v1104 + 1) = v250;
              v1105 = (std::string *)&v248[24 * v247];
              v217 = v939;
              if (v252 != v242)
              {
                v253 = v252;
                do
                {
                  v255 = (void *)*((_QWORD *)v253 - 3);
                  v253 -= 24;
                  v254 = v255;
                  if (v255)
                  {
                    *((_QWORD *)v252 - 2) = v254;
                    operator delete(v254);
                  }
                  v252 = v253;
                }
                while (v253 != v242);
LABEL_382:
                if (!v242)
                  goto LABEL_384;
LABEL_383:
                operator delete(v242);
                goto LABEL_384;
              }
              if (v242)
                goto LABEL_383;
LABEL_384:
              *((_QWORD *)&v1104 + 1) = v250;
              if ((_QWORD)v1017)
              {
                *((_QWORD *)&v1017 + 1) = v1017;
                operator delete((void *)v1017);
              }
LABEL_386:
              v256 = 0;
              v257 = 0;
              v1017 = 0uLL;
              v1018 = 0;
              if ((_DWORD)v217 * (_DWORD)v222 != (_DWORD)v217 * (_DWORD)v216)
              {
                if ((v217 & 0x80000000) != 0)
                  sub_19C07DA0C();
                v257 = operator new(__sz);
                *(_QWORD *)&v1017 = v257;
                *((_QWORD *)&v1017 + 1) = v257;
                v256 = (unint64_t)v257 + 4 * v217;
                v1018 = v256;
                memcpy(v257, &v926->f32[v216 * v217], __sz);
                *((_QWORD *)&v1017 + 1) = v256;
              }
              v258 = (char *)*((_QWORD *)&__dst + 1);
              if (*((_QWORD *)&__dst + 1) < v1103)
              {
                **((_QWORD **)&__dst + 1) = 0;
                *((_QWORD *)v258 + 1) = 0;
                *((_QWORD *)v258 + 2) = 0;
                *(_OWORD *)v258 = v1017;
                *((_QWORD *)v258 + 2) = v1018;
                *((_QWORD *)&__dst + 1) = v258 + 24;
                goto LABEL_336;
              }
              v259 = (char *)__dst;
              v260 = *((_QWORD *)&__dst + 1) - __dst;
              v261 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 3);
              v262 = v261 + 1;
              if (v261 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07DA0C();
              if (0x5555555555555556 * ((uint64_t)(v1103 - __dst) >> 3) > v262)
                v262 = 0x5555555555555556 * ((uint64_t)(v1103 - __dst) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1103 - __dst) >> 3) >= 0x555555555555555)
                v263 = 0xAAAAAAAAAAAAAAALL;
              else
                v263 = v262;
              if (v263 > 0xAAAAAAAAAAAAAAALL)
                sub_19C07C7FC();
              v264 = (char *)operator new(24 * v263);
              v265 = &v264[24 * v261];
              *((_QWORD *)v265 + 1) = 0;
              *((_QWORD *)v265 + 2) = 0;
              *(_QWORD *)v265 = v257;
              *(int64x2_t *)&v264[v260 + 8] = vdupq_n_s64(v256);
              v1018 = 0;
              v1017 = 0uLL;
              v266 = v265 + 24;
              if (v258 == v259)
              {
                *(_QWORD *)&__dst = &v264[24 * v261];
                *((_QWORD *)&__dst + 1) = v265 + 24;
                v1103 = (unint64_t)&v264[24 * v263];
                goto LABEL_405;
              }
              do
              {
                v267 = *(_OWORD *)(v258 - 24);
                v258 -= 24;
                *(_OWORD *)(v265 - 24) = v267;
                v265 -= 24;
                *((_QWORD *)v265 + 2) = *((_QWORD *)v258 + 2);
                *(_QWORD *)v258 = 0;
                *((_QWORD *)v258 + 1) = 0;
                *((_QWORD *)v258 + 2) = 0;
              }
              while (v258 != v259);
              v268 = (char *)*((_QWORD *)&__dst + 1);
              v258 = (char *)__dst;
              *(_QWORD *)&__dst = v265;
              *((_QWORD *)&__dst + 1) = v266;
              v1103 = (unint64_t)&v264[24 * v263];
              if (v268 != v258)
              {
                v269 = v268;
                do
                {
                  v271 = (void *)*((_QWORD *)v269 - 3);
                  v269 -= 24;
                  v270 = v271;
                  if (v271)
                  {
                    *((_QWORD *)v268 - 2) = v270;
                    operator delete(v270);
                  }
                  v268 = v269;
                }
                while (v269 != v258);
LABEL_405:
                if (!v258)
                  goto LABEL_407;
LABEL_406:
                operator delete(v258);
                goto LABEL_407;
              }
              if (v258)
                goto LABEL_406;
LABEL_407:
              *((_QWORD *)&__dst + 1) = v266;
              if ((_QWORD)v1017)
              {
                *((_QWORD *)&v1017 + 1) = v1017;
                operator delete((void *)v1017);
              }
LABEL_336:
              v216 = v222;
              v219 = v928;
              v218 = v930;
            }
            while (v222 != 4);
            v272 = __str[0];
            v273 = v1104;
            v274 = __dst;
            if ((BYTE8(v1125) & 0x10) != 0)
            {
              v275 = *(_OWORD *)&__str[0][1].__r_.__value_.__l.__data_;
              *(_OWORD *)&__str[0][1].__r_.__value_.__l.__data_ = *(_OWORD *)&__str[0][2].__r_.__value_.__l.__data_;
              *(_OWORD *)&v272[2].__r_.__value_.__l.__data_ = v275;
              v276 = v272[1].__r_.__value_.__r.__words[2];
              v272[1].__r_.__value_.__r.__words[2] = v272[2].__r_.__value_.__r.__words[2];
              v272[2].__r_.__value_.__r.__words[2] = v276;
              v277 = *(_OWORD *)(v273 + 24);
              *(_OWORD *)(v273 + 24) = *(_OWORD *)(v273 + 48);
              *(_OWORD *)(v273 + 48) = v277;
              v278 = *(_QWORD *)(v273 + 40);
              *(_QWORD *)(v273 + 40) = *(_QWORD *)(v273 + 64);
              *(_QWORD *)(v273 + 64) = v278;
              v279 = *(_OWORD *)(v274 + 24);
              *(_OWORD *)(v274 + 24) = *(_OWORD *)(v274 + 48);
              *(_OWORD *)(v274 + 48) = v279;
              v280 = *(_QWORD *)(v274 + 40);
              *(_QWORD *)(v274 + 40) = *(_QWORD *)(v274 + 64);
              *(_QWORD *)(v274 + 64) = v280;
            }
            v940 = 0;
            v281 = v272[2].__r_.__value_.__r.__words[2];
            v272[2].__r_.__value_.__r.__words[2] = v272[3].__r_.__value_.__r.__words[2];
            v282 = *(_OWORD *)&v272[2].__r_.__value_.__l.__data_;
            *(_OWORD *)&v272[2].__r_.__value_.__l.__data_ = *(_OWORD *)&v272[3].__r_.__value_.__l.__data_;
            *(_OWORD *)&v272[3].__r_.__value_.__l.__data_ = v282;
            v272[3].__r_.__value_.__r.__words[2] = v281;
            v283 = *(_OWORD *)(v273 + 48);
            *(_OWORD *)(v273 + 48) = *(_OWORD *)(v273 + 72);
            *(_OWORD *)(v273 + 72) = v283;
            v284 = *(_QWORD *)(v273 + 64);
            *(_QWORD *)(v273 + 64) = *(_QWORD *)(v273 + 88);
            *(_QWORD *)(v273 + 88) = v284;
            v285 = *(_OWORD *)(v274 + 48);
            *(_OWORD *)(v274 + 48) = *(_OWORD *)(v274 + 72);
            *(_OWORD *)(v274 + 72) = v285;
            v286 = *(_QWORD *)(v274 + 64);
            *(_QWORD *)(v274 + 64) = *(_QWORD *)(v274 + 88);
            *(_QWORD *)(v274 + 88) = v286;
            v1017 = 0uLL;
            v1018 = 0;
            v988 = 0;
            v987 = 0;
            v989 = 0;
            v985 = 0uLL;
            v986 = 0;
            while (2)
            {
              v287 = 24 * v940;
              v288 = &__str[0][v940];
              v290 = (char *)v288->__r_.__value_.__r.__words[0];
              size = v288->__r_.__value_.__l.__size_;
              v291 = size - (_QWORD)v290;
              if ((uint64_t)(size - (_QWORD)v290) < 1)
                goto LABEL_469;
              v292 = v291 >> 2;
              v293 = (char *)*((_QWORD *)&v1017 + 1);
              v294 = v1017;
              v295 = *((_QWORD *)&v1017 + 1) - v1017;
              v296 = (uint64_t)(*((_QWORD *)&v1017 + 1) - v1017) >> 2;
              v297 = (char *)(v1017 + ((*((_QWORD *)&v1017 + 1) - v1017) & 0xFFFFFFFFFFFFFFFCLL));
              if (v291 >> 2 <= (uint64_t)(v1018 - *((_QWORD *)&v1017 + 1)) >> 2)
              {
                v309 = *((_QWORD *)&v1017 + 1) - (_QWORD)v297;
                v310 = (uint64_t)(*((_QWORD *)&v1017 + 1) - (_QWORD)v297) >> 2;
                if (v310 >= v292)
                {
                  v311 = &v290[4 * v292];
                  v315 = (char *)*((_QWORD *)&v1017 + 1);
                }
                else
                {
                  v311 = &v290[4 * v310];
                  v312 = size - (_QWORD)v311;
                  if ((char *)size != v311)
                  {
                    v929 = &v290[4 * v310];
                    v932 = (char *)(v1017 + ((*((_QWORD *)&v1017 + 1) - v1017) & 0xFFFFFFFFFFFFFFFCLL));
                    v313 = size - (_QWORD)v311;
                    v314 = (uint64_t)(*((_QWORD *)&v1017 + 1) - v1017) >> 2;
                    memmove(*((void **)&v1017 + 1), v929, v313);
                    v296 = v314;
                    v311 = v929;
                    v297 = v932;
                  }
                  v315 = &v293[v312];
                  *((_QWORD *)&v1017 + 1) = &v293[v312];
                  v287 = 24 * v940;
                  if (v309 < 1)
                    goto LABEL_469;
                }
                v316 = &v297[4 * v292];
                v317 = v315 - v316;
                v318 = (v315 - v316) >> 2;
                v319 = &v315[-4 * v292];
                v320 = v315;
                if (v319 < v293)
                {
                  v321 = (v295 & 0xFFFFFFFFFFFFFFFCLL) + v317;
                  v322 = v294 + v321 + 4;
                  if ((unint64_t)v293 > v322)
                    v322 = (unint64_t)v293;
                  v323 = v322 + ~v294 - v321;
                  if (v323 < 0x2C)
                  {
                    v320 = v315;
                    goto LABEL_464;
                  }
                  v320 = v315;
                  if ((unint64_t)&v316[-(v295 & 0xFFFFFFFFFFFFFFFCLL) - v294] < 0x20)
                    goto LABEL_1538;
                  v341 = (v323 >> 2) + 1;
                  v342 = 4 * (v341 & 0x7FFFFFFFFFFFFFF8);
                  v319 += v342;
                  v320 = &v315[v342];
                  v343 = v315 + 16;
                  v344 = (__int128 *)(v294 + 4 * v318 + 4 * v296 + 16);
                  v345 = v341 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v346 = *v344;
                    *(v343 - 1) = *(v344 - 1);
                    *v343 = v346;
                    v343 += 2;
                    v344 += 2;
                    v345 -= 8;
                  }
                  while (v345);
                  if (v341 != (v341 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1538:
                    do
                    {
LABEL_464:
                      v347 = *(_DWORD *)v319;
                      v319 += 4;
                      *(_DWORD *)v320 = v347;
                      v320 += 4;
                    }
                    while (v319 < v293);
                  }
                }
                *((_QWORD *)&v1017 + 1) = v320;
                if (v315 != v316)
                {
                  v348 = v297;
                  memmove(&v315[-4 * v318], v297, v317);
                  v297 = v348;
                }
                if (v311 != v290)
                  memmove(v297, v290, v311 - v290);
                goto LABEL_469;
              }
              v298 = v296 + v292;
              if ((unint64_t)(v296 + v292) >> 62)
                sub_19C07DA0C();
              v299 = v1018 - v1017;
              if ((uint64_t)(v1018 - v1017) >> 1 > v298)
                v298 = v299 >> 1;
              if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFFCLL)
                v300 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v300 = v298;
              v931 = v300;
              if (v300)
              {
                if (v300 >> 62)
                  sub_19C07C7FC();
                v301 = (uint64_t)(*((_QWORD *)&v1017 + 1) - v1017) >> 2;
                v302 = (char *)(v1017 + ((*((_QWORD *)&v1017 + 1) - v1017) & 0xFFFFFFFFFFFFFFFCLL));
                v303 = operator new(4 * v300);
                v297 = v302;
                v296 = v301;
                v304 = v303;
                v305 = (uint64_t)&v303[4 * v296];
                v306 = (char *)(v305 + 4 * v292);
                v307 = v291 - 4;
                if ((unint64_t)(v291 - 4) < 0x1C)
                {
LABEL_430:
                  v308 = (char *)v305;
                  goto LABEL_447;
                }
              }
              else
              {
                v304 = 0;
                v305 = 4 * v296;
                v306 = (char *)(4 * v296 + 4 * v292);
                v307 = v291 - 4;
                if ((unint64_t)(v291 - 4) < 0x1C)
                  goto LABEL_430;
              }
              v308 = (char *)v305;
              if ((unint64_t)(&v304[v295 & 0xFFFFFFFFFFFFFFFCLL] - v290) < 0x20)
                goto LABEL_1539;
              v324 = (v307 >> 2) + 1;
              v325 = 4 * (v324 & 0x7FFFFFFFFFFFFFF8);
              v308 = (char *)(v305 + v325);
              v326 = &v290[v325];
              v327 = (__int128 *)(v290 + 16);
              v328 = &v304[4 * v296 + 16];
              v329 = v324 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v330 = *v327;
                *(v328 - 1) = *(v327 - 1);
                *v328 = v330;
                v327 += 2;
                v328 += 2;
                v329 -= 8;
              }
              while (v329);
              v290 = v326;
              if (v324 != (v324 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1539:
                do
                {
LABEL_447:
                  v331 = *(_DWORD *)v290;
                  v290 += 4;
                  *(_DWORD *)v308 = v331;
                  v308 += 4;
                }
                while (v308 != v306);
              }
              if ((char *)v294 != v293)
              {
                if ((unint64_t)(v295 - 4) < 0x3C)
                {
                  v332 = v297;
                  goto LABEL_455;
                }
                v332 = v297;
                if (v294 + (v295 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v304[v295 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
                  goto LABEL_1540;
                v333 = ((unint64_t)(v295 - 4) >> 2) + 1;
                v334 = 4 * (v333 & 0x7FFFFFFFFFFFFFF8);
                v332 = &v297[-v334];
                v305 -= v334;
                v335 = &v304[4 * v296 - 16];
                v336 = (__int128 *)(v294 + 4 * v296 - 16);
                v337 = v333 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v338 = *v336;
                  *(v335 - 1) = *(v336 - 1);
                  *v335 = v338;
                  v335 -= 2;
                  v336 -= 2;
                  v337 -= 8;
                }
                while (v337);
                if (v333 != (v333 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1540:
                  do
                  {
LABEL_455:
                    v339 = *((_DWORD *)v332 - 1);
                    v332 -= 4;
                    *(_DWORD *)(v305 - 4) = v339;
                    v305 -= 4;
                  }
                  while (v332 != (char *)v294);
                }
              }
              v340 = v293 - v297;
              if (v293 != v297)
                memmove(v306, v297, v293 - v297);
              v287 = 24 * v940;
              *(_QWORD *)&v1017 = v305;
              *((_QWORD *)&v1017 + 1) = &v306[v340];
              v1018 = (unint64_t)&v304[4 * v931];
              if (v294)
                operator delete((void *)v294);
LABEL_469:
              v349 = *(char **)(v1104 + 24 * v940);
              v350 = *(char **)(v1104 + v287 + 8);
              v351 = v350 - v349;
              if (v350 - v349 < 1)
                goto LABEL_518;
              v352 = v351 >> 2;
              v353 = (char *)v988;
              v354 = (unint64_t)v987;
              v355 = (_BYTE *)v988 - (_BYTE *)v987;
              v356 = ((_BYTE *)v988 - (_BYTE *)v987) >> 2;
              v357 = (char *)v987 + (((_BYTE *)v988 - (_BYTE *)v987) & 0xFFFFFFFFFFFFFFFCLL);
              if (v351 >> 2 <= (v989 - (_BYTE *)v988) >> 2)
              {
                v368 = (_BYTE *)v988 - v357;
                v369 = ((_BYTE *)v988 - v357) >> 2;
                if (v369 >= v352)
                {
                  v371 = &v349[4 * v352];
                  v374 = (char *)v988;
                }
                else
                {
                  v370 = v287;
                  v371 = &v349[4 * v369];
                  v372 = v350 - v371;
                  if (v350 != v371)
                  {
                    v934 = (char *)v987 + (((_BYTE *)v988 - (_BYTE *)v987) & 0xFFFFFFFFFFFFFFFCLL);
                    v373 = ((_BYTE *)v988 - (_BYTE *)v987) >> 2;
                    memmove(v988, &v349[4 * v369], v350 - v371);
                    v356 = v373;
                    v357 = v934;
                  }
                  v374 = &v353[v372];
                  v988 = &v353[v372];
                  v287 = v370;
                  if (v368 < 1)
                    goto LABEL_518;
                }
                v375 = &v357[4 * v352];
                v376 = v374 - v375;
                v377 = (v374 - v375) >> 2;
                v378 = &v374[-4 * v352];
                v379 = v374;
                if (v378 < v353)
                {
                  v380 = (v355 & 0xFFFFFFFFFFFFFFFCLL) + v376;
                  v381 = v354 + v380 + 4;
                  if ((unint64_t)v353 > v381)
                    v381 = (unint64_t)v353;
                  v382 = v381 + ~v354 - v380;
                  if (v382 < 0x2C)
                  {
                    v379 = v374;
                    goto LABEL_513;
                  }
                  v379 = v374;
                  if ((unint64_t)&v375[-(v355 & 0xFFFFFFFFFFFFFFFCLL) - v354] < 0x20)
                    goto LABEL_1541;
                  v400 = (v382 >> 2) + 1;
                  v401 = 4 * (v400 & 0x7FFFFFFFFFFFFFF8);
                  v378 += v401;
                  v379 = &v374[v401];
                  v402 = v374 + 16;
                  v403 = (__int128 *)(v354 + 4 * v377 + 4 * v356 + 16);
                  v404 = v400 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v405 = *v403;
                    *(v402 - 1) = *(v403 - 1);
                    *v402 = v405;
                    v402 += 2;
                    v403 += 2;
                    v404 -= 8;
                  }
                  while (v404);
                  if (v400 != (v400 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1541:
                    do
                    {
LABEL_513:
                      v406 = *(_DWORD *)v378;
                      v378 += 4;
                      *(_DWORD *)v379 = v406;
                      v379 += 4;
                    }
                    while (v378 < v353);
                  }
                }
                v988 = v379;
                if (v374 != v375)
                {
                  v407 = v357;
                  memmove(&v374[-4 * v377], v357, v376);
                  v357 = v407;
                }
                if (v371 != v349)
                  memmove(v357, v349, v371 - v349);
                goto LABEL_518;
              }
              v358 = v356 + v352;
              if ((unint64_t)(v356 + v352) >> 62)
                sub_19C07DA0C();
              v359 = v989 - (_BYTE *)v987;
              if ((v989 - (_BYTE *)v987) >> 1 > v358)
                v358 = v359 >> 1;
              _CF = (unint64_t)v359 >= 0x7FFFFFFFFFFFFFFCLL;
              v360 = 0x3FFFFFFFFFFFFFFFLL;
              if (!_CF)
                v360 = v358;
              v933 = v360;
              v936 = v287;
              if (v360)
              {
                if (v360 >> 62)
                  sub_19C07C7FC();
                v361 = ((_BYTE *)v988 - (_BYTE *)v987) >> 2;
                v362 = (char *)v987 + (((_BYTE *)v988 - (_BYTE *)v987) & 0xFFFFFFFFFFFFFFFCLL);
                v363 = operator new(4 * v360);
                v357 = v362;
                v356 = v361;
                v364 = &v363[4 * v361];
                v365 = &v364[4 * v352];
                v366 = v351 - 4;
                if ((unint64_t)(v351 - 4) < 0x1C)
                {
LABEL_479:
                  v367 = v364;
                  goto LABEL_496;
                }
              }
              else
              {
                v363 = 0;
                v364 = (char *)(4 * v356);
                v365 = (char *)(4 * v356 + 4 * v352);
                v366 = v351 - 4;
                if ((unint64_t)(v351 - 4) < 0x1C)
                  goto LABEL_479;
              }
              v367 = v364;
              if ((unint64_t)(&v363[v355 & 0xFFFFFFFFFFFFFFFCLL] - v349) < 0x20)
                goto LABEL_1542;
              v383 = (v366 >> 2) + 1;
              v384 = 4 * (v383 & 0x7FFFFFFFFFFFFFF8);
              v367 = &v364[v384];
              v385 = &v349[v384];
              v386 = (__int128 *)(v349 + 16);
              v387 = &v363[4 * v356 + 16];
              v388 = v383 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v389 = *v386;
                *(v387 - 1) = *(v386 - 1);
                *v387 = v389;
                v386 += 2;
                v387 += 2;
                v388 -= 8;
              }
              while (v388);
              v349 = v385;
              if (v383 != (v383 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1542:
                do
                {
LABEL_496:
                  v390 = *(_DWORD *)v349;
                  v349 += 4;
                  *(_DWORD *)v367 = v390;
                  v367 += 4;
                }
                while (v367 != v365);
              }
              if ((char *)v354 != v353)
              {
                if ((unint64_t)(v355 - 4) < 0x3C)
                {
                  v391 = v357;
                  goto LABEL_504;
                }
                v391 = v357;
                if (v354 + (v355 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v363[v355 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
                  goto LABEL_1543;
                v392 = ((unint64_t)(v355 - 4) >> 2) + 1;
                v393 = 4 * (v392 & 0x7FFFFFFFFFFFFFF8);
                v391 = &v357[-v393];
                v364 -= v393;
                v394 = &v363[4 * v356 - 16];
                v395 = (__int128 *)(v354 + 4 * v356 - 16);
                v396 = v392 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v397 = *v395;
                  *(v394 - 1) = *(v395 - 1);
                  *v394 = v397;
                  v394 -= 2;
                  v395 -= 2;
                  v396 -= 8;
                }
                while (v396);
                if (v392 != (v392 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1543:
                  do
                  {
LABEL_504:
                    v398 = *((_DWORD *)v391 - 1);
                    v391 -= 4;
                    *((_DWORD *)v364 - 1) = v398;
                    v364 -= 4;
                  }
                  while (v391 != (char *)v354);
                }
              }
              v399 = v353 - v357;
              if (v353 != v357)
                memmove(v365, v357, v353 - v357);
              v987 = v364;
              v988 = &v365[v399];
              v989 = &v363[4 * v933];
              v287 = v936;
              if (v354)
                operator delete((void *)v354);
LABEL_518:
              v408 = *(char **)(__dst + 24 * v940);
              v409 = *(char **)(__dst + v287 + 8);
              v410 = v409 - v408;
              if (v409 - v408 < 1)
                goto LABEL_418;
              v411 = v410 >> 2;
              v412 = (char *)*((_QWORD *)&v985 + 1);
              v413 = v985;
              v414 = *((_QWORD *)&v985 + 1) - v985;
              v415 = (uint64_t)(*((_QWORD *)&v985 + 1) - v985) >> 2;
              v416 = (char *)(v985 + ((*((_QWORD *)&v985 + 1) - v985) & 0xFFFFFFFFFFFFFFFCLL));
              if (v410 >> 2 <= (uint64_t)&v986[-*((_QWORD *)&v985 + 1)] >> 2)
              {
                v425 = *((_QWORD *)&v985 + 1) - (_QWORD)v416;
                v426 = (uint64_t)(*((_QWORD *)&v985 + 1) - (_QWORD)v416) >> 2;
                if (v426 >= v411)
                {
                  v427 = &v408[4 * v411];
                  v429 = (char *)*((_QWORD *)&v985 + 1);
                }
                else
                {
                  v427 = &v408[4 * v426];
                  v428 = v409 - v427;
                  if (v409 != v427)
                    memmove(*((void **)&v985 + 1), &v408[4 * v426], v409 - v427);
                  v429 = &v412[v428];
                  *((_QWORD *)&v985 + 1) = &v412[v428];
                  if (v425 < 1)
                    goto LABEL_418;
                }
                v430 = &v416[4 * v411];
                v431 = v429 - v430;
                v432 = (v429 - v430) >> 2;
                v433 = &v429[-4 * v411];
                v434 = v429;
                if (v433 < v412)
                {
                  v435 = (v414 & 0xFFFFFFFFFFFFFFFCLL) + v431;
                  v436 = v413 + v435 + 4;
                  if ((unint64_t)v412 > v436)
                    v436 = (unint64_t)v412;
                  v437 = v436 + ~v413 - v435;
                  if (v437 < 0x2C)
                  {
                    v434 = v429;
                    goto LABEL_562;
                  }
                  v434 = v429;
                  if ((unint64_t)&v430[-(v414 & 0xFFFFFFFFFFFFFFFCLL) - v413] < 0x20)
                    goto LABEL_1544;
                  v454 = (v437 >> 2) + 1;
                  v455 = 4 * (v454 & 0x7FFFFFFFFFFFFFF8);
                  v433 += v455;
                  v434 = &v429[v455];
                  v456 = v429 + 16;
                  v457 = (__int128 *)(v413 + 4 * v432 + 4 * v415 + 16);
                  v458 = v454 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v459 = *v457;
                    *(v456 - 1) = *(v457 - 1);
                    *v456 = v459;
                    v456 += 2;
                    v457 += 2;
                    v458 -= 8;
                  }
                  while (v458);
                  if (v454 != (v454 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1544:
                    do
                    {
LABEL_562:
                      v460 = *(_DWORD *)v433;
                      v433 += 4;
                      *(_DWORD *)v434 = v460;
                      v434 += 4;
                    }
                    while (v433 < v412);
                  }
                }
                *((_QWORD *)&v985 + 1) = v434;
                if (v429 != v430)
                  memmove(&v429[-4 * v432], v416, v431);
                if (v427 != v408)
                  memmove(v416, v408, v427 - v408);
                goto LABEL_418;
              }
              v417 = v415 + v411;
              if ((unint64_t)(v415 + v411) >> 62)
                sub_19C07DA0C();
              v418 = (uint64_t)&v986[-v985];
              if ((uint64_t)&v986[-v985] >> 1 > v417)
                v417 = v418 >> 1;
              _CF = (unint64_t)v418 >= 0x7FFFFFFFFFFFFFFCLL;
              v419 = 0x3FFFFFFFFFFFFFFFLL;
              if (!_CF)
                v419 = v417;
              v937 = v419;
              if (v419)
              {
                if (v419 >> 62)
                  sub_19C07C7FC();
                v420 = operator new(4 * v419);
                v421 = (uint64_t)&v420[4 * v415];
                v422 = (char *)(v421 + 4 * v411);
                v423 = v410 - 4;
                if ((unint64_t)(v410 - 4) < 0x1C)
                {
LABEL_528:
                  v424 = (char *)v421;
                  goto LABEL_545;
                }
              }
              else
              {
                v420 = 0;
                v421 = 4 * v415;
                v422 = (char *)(4 * v415 + 4 * v411);
                v423 = v410 - 4;
                if ((unint64_t)(v410 - 4) < 0x1C)
                  goto LABEL_528;
              }
              v424 = (char *)v421;
              if ((unint64_t)(&v420[v414 & 0xFFFFFFFFFFFFFFFCLL] - v408) < 0x20)
                goto LABEL_1545;
              v438 = (v423 >> 2) + 1;
              v439 = 4 * (v438 & 0x7FFFFFFFFFFFFFF8);
              v424 = (char *)(v421 + v439);
              v440 = &v408[v439];
              v441 = (__int128 *)(v408 + 16);
              v442 = &v420[4 * v415 + 16];
              v443 = v438 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v444 = *v441;
                *(v442 - 1) = *(v441 - 1);
                *v442 = v444;
                v441 += 2;
                v442 += 2;
                v443 -= 8;
              }
              while (v443);
              v408 = v440;
              if (v438 != (v438 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1545:
                do
                {
LABEL_545:
                  v445 = *(_DWORD *)v408;
                  v408 += 4;
                  *(_DWORD *)v424 = v445;
                  v424 += 4;
                }
                while (v424 != v422);
              }
              if ((char *)v413 != v412)
              {
                if ((unint64_t)(v414 - 4) < 0x3C)
                {
                  v446 = v416;
                  goto LABEL_553;
                }
                v446 = v416;
                if (v413 + (v414 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v420[v414 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
                  goto LABEL_1546;
                v447 = ((unint64_t)(v414 - 4) >> 2) + 1;
                v448 = 4 * (v447 & 0x7FFFFFFFFFFFFFF8);
                v446 = &v416[-v448];
                v421 -= v448;
                v449 = &v420[4 * v415 - 16];
                v450 = (__int128 *)(v413 + 4 * v415 - 16);
                v451 = v447 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v452 = *v450;
                  *(v449 - 1) = *(v450 - 1);
                  *v449 = v452;
                  v449 -= 2;
                  v450 -= 2;
                  v451 -= 8;
                }
                while (v451);
                if (v447 != (v447 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1546:
                  do
                  {
LABEL_553:
                    v453 = *((_DWORD *)v446 - 1);
                    v446 -= 4;
                    *(_DWORD *)(v421 - 4) = v453;
                    v421 -= 4;
                  }
                  while (v446 != (char *)v413);
                }
              }
              if (v412 != v416)
                memmove(v422, v416, v412 - v416);
              *(_QWORD *)&v985 = v421;
              *((_QWORD *)&v985 + 1) = &v422[v412 - v416];
              v986 = &v420[4 * v937];
              if (v413)
                operator delete((void *)v413);
LABEL_418:
              ++v940;
              v37 = v942;
              if (v940 != 4)
                continue;
              break;
            }
            v461 = v1160;
            if ((unint64_t)v1160 >= v1161)
            {
              v464 = v39;
              v467 = sub_19C1BA5B0(&v1159, (uint64_t)&v1017);
            }
            else
            {
              *(_QWORD *)v1160 = 0;
              *((_QWORD *)v461 + 1) = 0;
              *((_QWORD *)v461 + 2) = 0;
              v462 = (const void *)v1017;
              v463 = *((_QWORD *)&v1017 + 1) - v1017;
              v464 = v39;
              if (*((_QWORD *)&v1017 + 1) != (_QWORD)v1017)
              {
                if (v463 < 0)
                  sub_19C07DA0C();
                v465 = (char *)operator new(*((_QWORD *)&v1017 + 1) - v1017);
                *(_QWORD *)v461 = v465;
                *((_QWORD *)v461 + 1) = v465;
                v466 = &v465[4 * (v463 >> 2)];
                *((_QWORD *)v461 + 2) = v466;
                memcpy(v465, v462, v463);
                *((_QWORD *)v461 + 1) = v466;
              }
              v467 = v461 + 24;
            }
            v1160 = v467;
            v468 = *((_QWORD *)v467 - 3);
            v469 = v1134;
            v470 = (char *)operator new(0x58uLL);
            *((_QWORD *)v470 + 2) = 0;
            *(_QWORD *)v470 = &unk_1E3D24FF8;
            *((_QWORD *)v470 + 1) = 0;
            v471 = v1126;
            *((_QWORD *)v470 + 3) = &unk_1E3D21A10;
            *(_OWORD *)(v470 + 56) = 0u;
            *(_OWORD *)(v470 + 72) = 0u;
            *((_DWORD *)v470 + 8) = 4 * v469;
            *((_DWORD *)v470 + 9) = v471;
            *((_QWORD *)v470 + 5) = v468;
            v470[48] = 0;
            v1106 = v470 + 24;
            v1107 = (std::__shared_weak_count *)v470;
            if ((unint64_t)v467 >= v1161)
            {
              v476 = sub_19C1BA5B0(&v1159, (uint64_t)&v987);
            }
            else
            {
              *(_QWORD *)v467 = 0;
              *((_QWORD *)v467 + 1) = 0;
              *((_QWORD *)v467 + 2) = 0;
              v472 = v987;
              v473 = (_BYTE *)v988 - (_BYTE *)v987;
              if (v988 != v987)
              {
                if (v473 < 0)
                  sub_19C07DA0C();
                v474 = (char *)operator new((_BYTE *)v988 - (_BYTE *)v987);
                *(_QWORD *)v467 = v474;
                *((_QWORD *)v467 + 1) = v474;
                v475 = &v474[4 * (v473 >> 2)];
                *((_QWORD *)v467 + 2) = v475;
                memcpy(v474, v472, v473);
                *((_QWORD *)v467 + 1) = v475;
              }
              v476 = v467 + 24;
            }
            v1160 = v476;
            v477 = *((_QWORD *)v476 - 3);
            v478 = v1134;
            v479 = (char *)operator new(0x58uLL);
            *((_QWORD *)v479 + 2) = 0;
            *(_QWORD *)v479 = &unk_1E3D24FF8;
            *((_QWORD *)v479 + 1) = 0;
            *((_QWORD *)v479 + 3) = &unk_1E3D21A10;
            *(_OWORD *)(v479 + 56) = 0u;
            *(_OWORD *)(v479 + 72) = 0u;
            *((_DWORD *)v479 + 8) = 4 * v478;
            *((_DWORD *)v479 + 9) = v478;
            *((_QWORD *)v479 + 5) = v477;
            v479[48] = 0;
            v1088 = v479 + 24;
            v1089 = (std::__shared_weak_count *)v479;
            if ((unint64_t)v476 >= v1161)
            {
              v30 = v927;
              v484 = sub_19C1BA5B0(&v1159, (uint64_t)&v985);
            }
            else
            {
              *(_QWORD *)v476 = 0;
              *((_QWORD *)v476 + 1) = 0;
              *((_QWORD *)v476 + 2) = 0;
              v480 = (const void *)v985;
              v481 = *((_QWORD *)&v985 + 1) - v985;
              v30 = v927;
              if (*((_QWORD *)&v985 + 1) != (_QWORD)v985)
              {
                if (v481 < 0)
                  sub_19C07DA0C();
                v482 = (char *)operator new(*((_QWORD *)&v985 + 1) - v985);
                *(_QWORD *)v476 = v482;
                *((_QWORD *)v476 + 1) = v482;
                v483 = &v482[4 * (v481 >> 2)];
                *((_QWORD *)v476 + 2) = v483;
                memcpy(v482, v480, v481);
                *((_QWORD *)v476 + 1) = v483;
              }
              v484 = v476 + 24;
            }
            v1160 = v484;
            v485 = *((_QWORD *)v484 - 3);
            v486 = v1134;
            v487 = (char *)operator new(0x58uLL);
            *((_QWORD *)v487 + 2) = 0;
            *(_QWORD *)v487 = &unk_1E3D24FC0;
            *((_QWORD *)v487 + 1) = 0;
            *((_QWORD *)v487 + 3) = &unk_1E3D219F0;
            *(_OWORD *)(v487 + 56) = 0u;
            *(_OWORD *)(v487 + 72) = 0u;
            *((_DWORD *)v487 + 8) = 4 * v486;
            *((_QWORD *)v487 + 5) = v485;
            v487[48] = 0;
            v1086 = v487 + 24;
            v1087 = (std::__shared_weak_count *)v487;
            if ((_DWORD)v920 != 2)
            {
              v1085 = 0;
              v1084 = 0;
              v984 = 3;
              strcpy((char *)v983, "W_x");
              (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD, __n128, __n128))(*(_QWORD *)v464 + 168))(v464, &v1084, v983, *((_QWORD *)v1106 + 2), 4 * *((int *)v1106 + 2) * (uint64_t)*((int *)v1106 + 3), 0, v921, v922);
              if (v984 < 0)
              {
                operator delete(v983[0]);
                v489 = v1085;
                if (!v1085)
                  goto LABEL_611;
              }
              else
              {
                v489 = v1085;
                if (!v1085)
                  goto LABEL_611;
              }
              v497 = (unint64_t *)&v489->__shared_owners_;
              do
                v498 = __ldaxr(v497);
              while (__stlxr(v498 - 1, v497));
              if (!v498)
              {
                ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
                std::__shared_weak_count::__release_weak(v489);
              }
LABEL_611:
              v1085 = 0;
              v1084 = 0;
              v984 = 3;
              strcpy((char *)v983, "W_h");
              (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v464 + 168))(v464, &v1084, v983, *((_QWORD *)v1088 + 2), 4 * *((int *)v1088 + 2) * (uint64_t)*((int *)v1088 + 3), 0);
              if (v984 < 0)
              {
                operator delete(v983[0]);
                v499 = v1085;
                if (!v1085)
                  goto LABEL_627;
              }
              else
              {
                v499 = v1085;
                if (!v1085)
                  goto LABEL_627;
              }
              v503 = (unint64_t *)&v499->__shared_owners_;
              do
                v504 = __ldaxr(v503);
              while (__stlxr(v504 - 1, v503));
              if (!v504)
              {
                ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                std::__shared_weak_count::__release_weak(v499);
              }
LABEL_627:
              v1085 = 0;
              v1084 = 0;
              v984 = 1;
              strcpy((char *)v983, "b");
              (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v464 + 168))(v464, &v1084, v983, *((_QWORD *)v1086 + 2), 4 * *((int *)v1086 + 2), 0);
              if (v984 < 0)
              {
                operator delete(v983[0]);
                v502 = v1085;
                if (!v1085)
                  goto LABEL_638;
              }
              else
              {
                v502 = v1085;
                if (!v1085)
                {
LABEL_638:
                  v508 = v1087;
                  if (!v1087)
                    goto LABEL_642;
                  goto LABEL_639;
                }
              }
              v507 = (unint64_t *)&v502->__shared_owners_;
              do
                v506 = __ldaxr(v507);
              while (__stlxr(v506 - 1, v507));
              goto LABEL_637;
            }
            v1085 = 0;
            v1084 = 0;
            v984 = 11;
            strcpy((char *)v983, "W_x_reverse");
            (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD, __n128, __n128))(*(_QWORD *)v464 + 168))(v464, &v1084, v983, *((_QWORD *)v1106 + 2), 4 * *((int *)v1106 + 2) * (uint64_t)*((int *)v1106 + 3), 0, v921, v922);
            if (v984 < 0)
            {
              operator delete(v983[0]);
              v488 = v1085;
              if (!v1085)
                goto LABEL_603;
            }
            else
            {
              v488 = v1085;
              if (!v1085)
                goto LABEL_603;
            }
            v494 = (unint64_t *)&v488->__shared_owners_;
            do
              v495 = __ldaxr(v494);
            while (__stlxr(v495 - 1, v494));
            if (!v495)
            {
              ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
              std::__shared_weak_count::__release_weak(v488);
            }
LABEL_603:
            v1085 = 0;
            v1084 = 0;
            v984 = 11;
            strcpy((char *)v983, "W_h_reverse");
            (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v464 + 168))(v464, &v1084, v983, *((_QWORD *)v1088 + 2), 4 * *((int *)v1088 + 2) * (uint64_t)*((int *)v1088 + 3), 0);
            if (v984 < 0)
            {
              operator delete(v983[0]);
              v496 = v1085;
              if (!v1085)
                goto LABEL_619;
            }
            else
            {
              v496 = v1085;
              if (!v1085)
                goto LABEL_619;
            }
            v500 = (unint64_t *)&v496->__shared_owners_;
            do
              v501 = __ldaxr(v500);
            while (__stlxr(v501 - 1, v500));
            if (!v501)
            {
              ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
              std::__shared_weak_count::__release_weak(v496);
            }
LABEL_619:
            v1085 = 0;
            v1084 = 0;
            v984 = 9;
            strcpy((char *)v983, "b_reverse");
            (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v464 + 168))(v464, &v1084, v983, *((_QWORD *)v1086 + 2), 4 * *((int *)v1086 + 2), 0);
            if (v984 < 0)
            {
              operator delete(v983[0]);
              v502 = v1085;
              if (!v1085)
                goto LABEL_638;
            }
            else
            {
              v502 = v1085;
              if (!v1085)
                goto LABEL_638;
            }
            v505 = (unint64_t *)&v502->__shared_owners_;
            do
              v506 = __ldaxr(v505);
            while (__stlxr(v506 - 1, v505));
LABEL_637:
            if (v506)
              goto LABEL_638;
            ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
            std::__shared_weak_count::__release_weak(v502);
            v508 = v1087;
            if (!v1087)
            {
LABEL_642:
              v511 = v1089;
              if (v1089)
                goto LABEL_643;
              goto LABEL_650;
            }
LABEL_639:
            v509 = (unint64_t *)&v508->__shared_owners_;
            do
              v510 = __ldaxr(v509);
            while (__stlxr(v510 - 1, v509));
            if (v510)
              goto LABEL_642;
            ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
            std::__shared_weak_count::__release_weak(v508);
            v511 = v1089;
            if (v1089)
            {
LABEL_643:
              v512 = (unint64_t *)&v511->__shared_owners_;
              do
                v513 = __ldaxr(v512);
              while (__stlxr(v513 - 1, v512));
              if (!v513)
              {
                ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
                std::__shared_weak_count::__release_weak(v511);
              }
            }
LABEL_650:
            v514 = v1107;
            if (!v1107)
              goto LABEL_654;
            v515 = (unint64_t *)&v1107->__shared_owners_;
            do
              v516 = __ldaxr(v515);
            while (__stlxr(v516 - 1, v515));
            if (!v516)
            {
              ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
              std::__shared_weak_count::__release_weak(v514);
              v517 = (void *)v985;
              if ((_QWORD)v985)
              {
LABEL_655:
                *((_QWORD *)&v985 + 1) = v517;
                operator delete(v517);
              }
            }
            else
            {
LABEL_654:
              v517 = (void *)v985;
              if ((_QWORD)v985)
                goto LABEL_655;
            }
            if (v987)
            {
              v988 = v987;
              operator delete(v987);
            }
            if ((_QWORD)v1017)
            {
              *((_QWORD *)&v1017 + 1) = v1017;
              operator delete((void *)v1017);
            }
            v518 = __dst;
            if ((_QWORD)__dst)
            {
              v519 = *((_QWORD *)&__dst + 1);
              v520 = (void *)__dst;
              if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
              {
                v521 = *((_QWORD *)&__dst + 1);
                do
                {
                  v523 = *(void **)(v521 - 24);
                  v521 -= 24;
                  v522 = v523;
                  if (v523)
                  {
                    *(_QWORD *)(v519 - 16) = v522;
                    operator delete(v522);
                  }
                  v519 = v521;
                }
                while (v521 != v518);
                v520 = (void *)__dst;
              }
              *((_QWORD *)&__dst + 1) = v518;
              operator delete(v520);
            }
            v524 = v1104;
            if ((_QWORD)v1104)
            {
              v525 = *((_QWORD *)&v1104 + 1);
              v526 = (void *)v1104;
              if (*((_QWORD *)&v1104 + 1) != (_QWORD)v1104)
              {
                v527 = *((_QWORD *)&v1104 + 1);
                do
                {
                  v529 = *(void **)(v527 - 24);
                  v527 -= 24;
                  v528 = v529;
                  if (v529)
                  {
                    *(_QWORD *)(v525 - 16) = v528;
                    operator delete(v528);
                  }
                  v525 = v527;
                }
                while (v527 != v524);
                v526 = (void *)v1104;
              }
              *((_QWORD *)&v1104 + 1) = v524;
              operator delete(v526);
            }
            v530 = __str[0];
            if (__str[0])
            {
              v531 = __str[1];
              v144 = __str[0];
              if (__str[1] != __str[0])
              {
                v532 = __str[1];
                do
                {
                  v534 = v532[-1].__r_.__value_.__l.__data_;
                  --v532;
                  v533 = v534;
                  if (v534)
                  {
                    v531[-1].__r_.__value_.__l.__size_ = (std::string::size_type)v533;
                    operator delete(v533);
                  }
                  v531 = v532;
                }
                while (v532 != v530);
                v144 = __str[0];
              }
              __str[1] = v530;
              operator delete(v144);
            }
            v106 = v919 + 1;
            if (v919 + 1 == v916)
            {
LABEL_229:
              a1 = v911;
              if (*((_QWORD *)&v39 + 1))
              {
                v141 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
                }
              }
              v143 = v37;
              goto LABEL_1350;
            }
          }
          memset(__str, 0, 24);
          v1104 = 0uLL;
          v1105 = 0;
          v147 = v1134;
          if ((int)v1134 >= 1)
          {
            v148 = 0;
            LODWORD(v149) = 0;
            do
            {
              v938 = v148;
              v150 = v1126;
              if ((int)v1126 < 1)
                goto LABEL_276;
              v151 = 0;
              v149 = (int)v149;
              v152 = __str[1];
              do
              {
                if (v152 < __str[2])
                {
                  LODWORD(v152->__r_.__value_.__l.__data_) = *(_DWORD *)(v146 + 4 * v149);
                  v153 = (std::string *)((char *)v152->__r_.__value_.__r.__words + 4);
                  goto LABEL_247;
                }
                v154 = __str[0];
                v155 = (char *)v152 - (char *)__str[0];
                v156 = ((char *)v152 - (char *)__str[0]) >> 2;
                v157 = v156 + 1;
                if ((unint64_t)(v156 + 1) >> 62)
                  sub_19C07DA0C();
                v158 = (char *)__str[2] - (char *)__str[0];
                if (((char *)__str[2] - (char *)__str[0]) >> 1 > v157)
                  v157 = v158 >> 1;
                if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL)
                  v159 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v159 = v157;
                if (v159)
                {
                  if (v159 >> 62)
                    sub_19C07C7FC();
                  v160 = operator new(4 * v159);
                  v161 = (std::string *)&v160[4 * v156];
                  LODWORD(v161->__r_.__value_.__l.__data_) = *(_DWORD *)(v146 + 4 * v149);
                  v153 = (std::string *)((char *)v161->__r_.__value_.__r.__words + 4);
                  if (v152 == v154)
                    goto LABEL_263;
                }
                else
                {
                  v160 = 0;
                  v161 = (std::string *)(4 * v156);
                  *(_DWORD *)(4 * v156) = *(_DWORD *)(v146 + 4 * v149);
                  v153 = (std::string *)(4 * v156 + 4);
                  if (v152 == v154)
                    goto LABEL_263;
                }
                v162 = (char *)&v152[-1].__r_.__value_.__r.__words[2] + 4 - (char *)v154;
                if (v162 < 0xBC)
                {
                  v163 = v152;
                  goto LABEL_262;
                }
                if (&v160[v155 - 4 - (v162 & 0xFFFFFFFFFFFFFFFCLL)] > &v160[v155 - 4])
                {
                  v163 = v152;
                  do
                  {
LABEL_262:
                    v164 = HIDWORD(v163[-1].__r_.__value_.__r.__words[2]);
                    v163 = (std::string *)((char *)v163 - 4);
                    HIDWORD(v161[-1].__r_.__value_.__r.__words[2]) = v164;
                    v161 = (std::string *)((char *)v161 - 4);
                  }
                  while (v163 != v154);
                  goto LABEL_263;
                }
                if ((char *)&v152[-1].__r_.__value_.__r.__words[2] - (v162 & 0xFFFFFFFFFFFFFFFCLL) + 4 > (char *)&v152[-1].__r_.__value_.__r.__words[2] + 4)
                {
                  v163 = v152;
                  goto LABEL_262;
                }
                if ((unint64_t)((char *)v152 - &v160[v155]) < 0x20)
                {
                  v163 = v152;
                  goto LABEL_262;
                }
                v165 = (v162 >> 2) + 1;
                v166 = 4 * (v165 & 0x7FFFFFFFFFFFFFF8);
                v163 = (std::string *)((char *)v152 - v166);
                v161 = (std::string *)((char *)v161 - v166);
                v167 = &v160[4 * v156 - 16];
                v168 = &v152[-1].__r_.__value_.__l.__size_;
                v169 = v165 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v170 = *(_OWORD *)v168;
                  *(v167 - 1) = *((_OWORD *)v168 - 1);
                  *v167 = v170;
                  v167 -= 2;
                  v168 -= 4;
                  v169 -= 8;
                }
                while (v169);
                if (v165 != (v165 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_262;
LABEL_263:
                __str[0] = v161;
                __str[1] = v153;
                __str[2] = (std::string *)&v160[4 * v159];
                if (v154)
                {
                  operator delete(v154);
                  v150 = v1126;
                }
LABEL_247:
                __str[1] = v153;
                ++v149;
                ++v151;
                v152 = v153;
              }
              while (v151 < v150);
              v147 = v1134;
LABEL_276:
              if (v147 >= 1)
              {
                v171 = 0;
                v149 = (int)v149;
                v172 = (std::string *)*((_QWORD *)&v1104 + 1);
                while (v172 < v1105)
                {
                  LODWORD(v172->__r_.__value_.__l.__data_) = *(_DWORD *)(v146 + 4 * v149);
                  v173 = (uint64_t)v172->__r_.__value_.__r.__words + 4;
LABEL_279:
                  *((_QWORD *)&v1104 + 1) = v173;
                  ++v149;
                  ++v171;
                  v172 = (std::string *)v173;
                  if (v171 >= v147)
                    goto LABEL_243;
                }
                v174 = (std::string *)v1104;
                v175 = (char *)v172 - v1104;
                v176 = (uint64_t)((uint64_t)v172 - v1104) >> 2;
                v177 = v176 + 1;
                if ((unint64_t)(v176 + 1) >> 62)
                  sub_19C07DA0C();
                v178 = (uint64_t)v1105 - v1104;
                if ((uint64_t)((uint64_t)v1105 - v1104) >> 1 > v177)
                  v177 = v178 >> 1;
                if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
                  v179 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v179 = v177;
                if (v179)
                {
                  if (v179 >> 62)
                    sub_19C07C7FC();
                  v180 = operator new(4 * v179);
                  v181 = (char *)v180 + 4 * v176;
                  *v181 = *(_DWORD *)(v146 + 4 * v149);
                  v173 = (uint64_t)(v181 + 1);
                  if (v172 == v174)
                    goto LABEL_295;
LABEL_292:
                  v182 = (char *)&v172[-1].__r_.__value_.__r.__words[2] + 4 - (char *)v174;
                  if (v182 < 0xBC)
                  {
                    v183 = v172;
                    goto LABEL_294;
                  }
                  if (&v175[(_QWORD)v180 - 4 - (v182 & 0xFFFFFFFFFFFFFFFCLL)] > &v175[(_QWORD)v180 - 4])
                  {
                    v183 = v172;
                    goto LABEL_294;
                  }
                  if ((char *)&v172[-1].__r_.__value_.__r.__words[2] - (v182 & 0xFFFFFFFFFFFFFFFCLL) + 4 > (char *)&v172[-1].__r_.__value_.__r.__words[2] + 4)
                  {
                    v183 = v172;
                    goto LABEL_294;
                  }
                  if ((unint64_t)((char *)v172 - &v175[(_QWORD)v180]) < 0x20)
                  {
                    v183 = v172;
                    goto LABEL_294;
                  }
                  v185 = (v182 >> 2) + 1;
                  v186 = 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
                  v183 = (std::string *)((char *)v172 - v186);
                  v181 = (_DWORD *)((char *)v181 - v186);
                  v187 = (char *)v180 + 4 * v176 - 16;
                  v188 = &v172[-1].__r_.__value_.__l.__size_;
                  v189 = v185 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v190 = *(_OWORD *)v188;
                    *(v187 - 1) = *((_OWORD *)v188 - 1);
                    *v187 = v190;
                    v187 -= 2;
                    v188 -= 4;
                    v189 -= 8;
                  }
                  while (v189);
                  if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_294:
                      v184 = HIDWORD(v183[-1].__r_.__value_.__r.__words[2]);
                      v183 = (std::string *)((char *)v183 - 4);
                      *--v181 = v184;
                    }
                    while (v183 != v174);
                  }
                }
                else
                {
                  v180 = 0;
                  v181 = (_DWORD *)(4 * v176);
                  *(_DWORD *)(4 * v176) = *(_DWORD *)(v146 + 4 * v149);
                  v173 = 4 * v176 + 4;
                  if (v172 != v174)
                    goto LABEL_292;
                }
LABEL_295:
                *(_QWORD *)&v1104 = v181;
                *((_QWORD *)&v1104 + 1) = v173;
                v1105 = (std::string *)((char *)v180 + 4 * v179);
                if (v174)
                {
                  operator delete(v174);
                  v147 = v1134;
                }
                goto LABEL_279;
              }
LABEL_243:
              v148 = v938 + 1;
            }
            while (v938 + 1 < 4 * v147);
          }
          v191 = v1160;
          if ((unint64_t)v1160 >= v1161)
          {
            v145 = (_QWORD *)&v1118 + v920;
            v196 = sub_19C1BA5B0(&v1159, (uint64_t)__str);
            v1160 = v196;
            v146 = *((_QWORD *)v196 - 3);
            if ((unint64_t)v196 >= v1161)
              goto LABEL_312;
          }
          else
          {
            *(_QWORD *)v1160 = 0;
            *((_QWORD *)v191 + 1) = 0;
            *((_QWORD *)v191 + 2) = 0;
            v192 = __str[0];
            v193 = (char *)__str[1] - (char *)__str[0];
            if (__str[1] != __str[0])
            {
              if (v193 < 0)
                sub_19C07DA0C();
              v194 = (char *)operator new((char *)__str[1] - (char *)__str[0]);
              *(_QWORD *)v191 = v194;
              *((_QWORD *)v191 + 1) = v194;
              v195 = &v194[4 * (v193 >> 2)];
              *((_QWORD *)v191 + 2) = v195;
              memcpy(v194, v192, v193);
              *((_QWORD *)v191 + 1) = v195;
            }
            v196 = v191 + 24;
            v145 = (_QWORD *)&v1118 + v920;
            v1160 = v196;
            v146 = *((_QWORD *)v196 - 3);
            if ((unint64_t)v196 >= v1161)
            {
LABEL_312:
              v1160 = sub_19C1BA5B0(&v1159, (uint64_t)&v1104);
              v925 = *((_QWORD *)v1160 - 3);
              v197 = (void *)v1104;
              if (!(_QWORD)v1104)
                goto LABEL_314;
              goto LABEL_313;
            }
          }
          *(_QWORD *)v196 = 0;
          *((_QWORD *)v196 + 1) = 0;
          *((_QWORD *)v196 + 2) = 0;
          v490 = (const void *)v1104;
          v491 = *((_QWORD *)&v1104 + 1) - v1104;
          if (*((_QWORD *)&v1104 + 1) != (_QWORD)v1104)
          {
            if (v491 < 0)
              sub_19C07DA0C();
            v492 = (char *)operator new(*((_QWORD *)&v1104 + 1) - v1104);
            *(_QWORD *)v196 = v492;
            *((_QWORD *)v196 + 1) = v492;
            v493 = &v492[4 * (v491 >> 2)];
            *((_QWORD *)v196 + 2) = v493;
            memcpy(v492, v490, v491);
            *((_QWORD *)v196 + 1) = v493;
          }
          v145 = (_QWORD *)&v1118 + v920;
          v1160 = v196 + 24;
          v925 = *(_QWORD *)v196;
          v197 = (void *)v1104;
          if (!(_QWORD)v1104)
          {
LABEL_314:
            if (__str[0])
            {
              __str[1] = __str[0];
              operator delete(__str[0]);
            }
            v926 = (float32x4_t *)v145[72];
            if ((BYTE8(v1125) & 0x80) != 0)
              goto LABEL_334;
LABEL_317:
            v198 = (float32x4_t *)v145[73];
            memset(__str, 0, 24);
            if ((_DWORD)v1134)
            {
              if ((v1134 & 0x80000000) != 0)
                sub_19C07DA0C();
              v199 = 4 * (int)v1134;
              v200 = (std::string *)operator new(4 * v199);
              __str[0] = v200;
              __str[2] = (std::string *)((char *)v200 + 4 * v199);
              bzero(v200, 4 * v199);
              __str[1] = (std::string *)((char *)v200 + 4 * v199);
              if ((int)v199 <= 1)
                v201 = 1;
              else
                v201 = v199;
              if (v201 >= 8)
              {
                v202 = 0;
                if ((unint64_t)((char *)v200 - (char *)v926) >= 0x20
                  && (unint64_t)((char *)v200 - (char *)v198) >= 0x20)
                {
                  v202 = v201 & 0x7FFFFFF8;
                  v535 = v926 + 1;
                  v536 = v198 + 1;
                  v537 = (float32x4_t *)&v200->__r_.__value_.__r.__words[2];
                  v538 = v202;
                  do
                  {
                    v539 = vaddq_f32(*v536, *v535);
                    v537[-1] = vaddq_f32(v536[-1], v535[-1]);
                    *v537 = v539;
                    v535 += 2;
                    v536 += 2;
                    v537 += 2;
                    v538 -= 8;
                  }
                  while (v538);
                  if (v202 == v201)
                    goto LABEL_326;
                }
              }
              else
              {
                v202 = 0;
              }
              v203 = &v198->f32[v202];
              v204 = &v926->f32[v202];
              v205 = (float *)((char *)v200 + 4 * v202);
              v206 = v201 - v202;
              do
              {
                v207 = *v204++;
                v208 = v207;
                v209 = *v203++;
                *v205++ = v209 + v208;
                --v206;
              }
              while (v206);
            }
LABEL_326:
            v210 = v1160;
            if ((unint64_t)v1160 >= v1161)
            {
              v215 = sub_19C1BA5B0(&v1159, (uint64_t)__str);
            }
            else
            {
              *(_QWORD *)v1160 = 0;
              *((_QWORD *)v210 + 1) = 0;
              *((_QWORD *)v210 + 2) = 0;
              v211 = __str[0];
              v212 = (char *)__str[1] - (char *)__str[0];
              if (__str[1] != __str[0])
              {
                if (v212 < 0)
                  sub_19C07DA0C();
                v213 = (char *)operator new((char *)__str[1] - (char *)__str[0]);
                *(_QWORD *)v210 = v213;
                *((_QWORD *)v210 + 1) = v213;
                v214 = &v213[4 * (v212 >> 2)];
                *((_QWORD *)v210 + 2) = v214;
                memcpy(v213, v211, v212);
                *((_QWORD *)v210 + 1) = v214;
              }
              v215 = v210 + 24;
            }
            v1160 = v215;
            v926 = (float32x4_t *)*((_QWORD *)v215 - 3);
            if (__str[0])
            {
              __str[1] = __str[0];
              operator delete(__str[0]);
            }
            goto LABEL_334;
          }
LABEL_313:
          *((_QWORD *)&v1104 + 1) = v197;
          operator delete(v197);
          goto LABEL_314;
        case 11:
          *(_QWORD *)&__p[64] = _D8;
          *(_WORD *)&__p[72] = 1;
          memset(&__p[74], 0, 18);
          *(_QWORD *)&__p[96] = 65537;
          v1058 = 0;
          v1059 = 0;
          v1054 = 0;
          v1055 = 0;
          memset(__p, 0, 32);
          *(_QWORD *)&__p[32] = 1;
          *(_OWORD *)&__p[104] = xmmword_19C278020;
          *(_QWORD *)v1053 = 0;
          *(_DWORD *)&__p[120] = 1;
          *(_DWORD *)&v1053[8] = 0x10000;
          v1056 = 0;
          v1057 = 1;
          *(_DWORD *)&__p[40] = v1134;
          *(_DWORD *)&__p[44] = DWORD2(v1126);
          *(_QWORD *)&__p[56] = 0xFFFFFFFF00000000;
          *(_QWORD *)&__p[48] = v1138;
          *(_WORD *)&__p[92] = WORD4(v1138);
          *(_WORD *)&__p[94] = WORD6(v1138);
          switch((_DWORD)v1139)
          {
            case 2:
              *(_QWORD *)&__p[72] = 0;
              v764 = vuzp1_s16(*(int16x4_t *)((char *)&v1139 + 4), *(int16x4_t *)((char *)&v1139 + 4));
              *(int16x4_t *)&__p[80] = vzip1_s16(v764, v764);
              v67 = *((_QWORD *)&v1121 + 1);
              v68 = &__p[24];
              v69 = (uint64_t)v917;
              if (*((_QWORD *)&v1121 + 1) == 5)
                goto LABEL_1093;
              break;
            case 1:
              *(_WORD *)&__p[72] = 1;
              break;
            case 0:
              *(_WORD *)&__p[72] = 2;
              v67 = *((_QWORD *)&v1121 + 1);
              v68 = &__p[24];
              v69 = (uint64_t)v917;
              if (*((_QWORD *)&v1121 + 1) == 5)
                goto LABEL_1093;
              break;
            default:
              v67 = *((_QWORD *)&v1121 + 1);
              v68 = &__p[24];
              v69 = (uint64_t)v917;
              if (*((_QWORD *)&v1121 + 1) == 5)
                goto LABEL_1093;
              break;
          }
          if (v67 != 2)
            goto LABEL_1094;
          v68 = &__p[28];
LABEL_1093:
          *(_DWORD *)v68 = 1;
LABEL_1094:
          HIBYTE(__str[2]) = 11;
          strcpy((char *)__str, "convolution");
          v1051 = 0;
          v1049 = 0;
          v1050 = 0;
          sub_19C1B8190(&v1049, v69, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - v69) >> 3));
          v1047 = 0;
          v1046 = 0;
          v1048 = 0;
          sub_19C1B8190(&v1046, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B5B48(a1, (uint64_t *)&v1049, (uint64_t *)&v1046, &v1104);
          v733 = (void **)v1046;
          if (v1046)
          {
            v734 = v1047;
            v735 = v1046;
            if (v1047 != v1046)
            {
              do
              {
                if (*((char *)v734 - 1) < 0)
                  operator delete(*(v734 - 3));
                v734 -= 3;
              }
              while (v734 != v733);
              v735 = v1046;
            }
            v1047 = v733;
            operator delete(v735);
          }
          v736 = (void **)v1049;
          if (v1049)
          {
            v737 = v1050;
            v738 = v1049;
            if (v1050 != v1049)
            {
              do
              {
                if (*((char *)v737 - 1) < 0)
                  operator delete(*(v737 - 3));
                v737 -= 3;
              }
              while (v737 != v736);
              v738 = v1049;
            }
            v1050 = v736;
            operator delete(v738);
          }
          if (SHIBYTE(__str[2]) < 0)
            operator delete(__str[0]);
          v739 = v1150;
          v740 = (char *)operator new(0x58uLL);
          *((_QWORD *)v740 + 1) = 0;
          v741 = (unint64_t *)(v740 + 8);
          *((_QWORD *)v740 + 2) = 0;
          *(_QWORD *)v740 = &unk_1E3D24FC0;
          *((_QWORD *)v740 + 3) = &unk_1E3D219F0;
          v742 = v1134;
          *(_OWORD *)(v740 + 56) = 0u;
          *(_OWORD *)(v740 + 72) = 0u;
          *((_DWORD *)v740 + 8) = v742;
          *((_QWORD *)v740 + 5) = v739;
          v740[48] = 0;
          __str[0] = (std::string *)(v740 + 24);
          __str[1] = (std::string *)v740;
          v743 = v1146;
          v744 = operator new(0x60uLL);
          v744[1] = 0;
          v744[2] = 0;
          *v744 = &unk_1E3D25030;
          v745 = DWORD2(v1126);
          v744[3] = &unk_1E3D21A30;
          *((_OWORD *)v744 + 4) = 0u;
          *((_OWORD *)v744 + 5) = 0u;
          v744[4] = v1138;
          *((_DWORD *)v744 + 10) = v745;
          *((_DWORD *)v744 + 11) = v742;
          v744[6] = v743;
          *((_BYTE *)v744 + 56) = 0;
          *(_QWORD *)&__dst = v744 + 3;
          *((_QWORD *)&__dst + 1) = v744;
          v746 = v1104;
          v1044 = v740 + 24;
          v1045 = (std::__shared_weak_count *)v740;
          do
            v747 = __ldxr(v741);
          while (__stxr(v747 + 1, v741));
          (*(void (**)(uint64_t, char **))(*(_QWORD *)v746 + 392))(v746, &v1044);
          v748 = v1045;
          if (v1045)
          {
            v749 = (unint64_t *)&v1045->__shared_owners_;
            do
              v750 = __ldaxr(v749);
            while (__stlxr(v750 - 1, v749));
            if (!v750)
            {
              ((void (*)(std::__shared_weak_count *))v748->__on_zero_shared)(v748);
              std::__shared_weak_count::__release_weak(v748);
            }
          }
          v751 = v1104;
          v1043 = __dst;
          if (*((_QWORD *)&__dst + 1))
          {
            v752 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
            do
              v753 = __ldxr(v752);
            while (__stxr(v753 + 1, v752));
          }
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v751 + 400))(v751, &v1043);
          v754 = (std::__shared_weak_count *)*((_QWORD *)&v1043 + 1);
          if (*((_QWORD *)&v1043 + 1))
          {
            v755 = (unint64_t *)(*((_QWORD *)&v1043 + 1) + 8);
            do
              v756 = __ldaxr(v755);
            while (__stlxr(v756 - 1, v755));
            if (!v756)
            {
              ((void (*)(std::__shared_weak_count *))v754->__on_zero_shared)(v754);
              std::__shared_weak_count::__release_weak(v754);
            }
          }
          v757 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
          if (*((_QWORD *)&__dst + 1))
          {
            v758 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
            do
              v759 = __ldaxr(v758);
            while (__stlxr(v759 - 1, v758));
            if (!v759)
            {
              ((void (*)(std::__shared_weak_count *))v757->__on_zero_shared)(v757);
              std::__shared_weak_count::__release_weak(v757);
            }
          }
          v760 = (std::__shared_weak_count *)__str[1];
          if (__str[1])
          {
            v761 = &__str[1]->__r_.__value_.__l.__size_;
            do
              v762 = __ldaxr(v761);
            while (__stlxr(v762 - 1, v761));
            if (!v762)
            {
              ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
              std::__shared_weak_count::__release_weak(v760);
            }
          }
          v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
          if (!*((_QWORD *)&v1104 + 1))
            goto LABEL_1351;
          v763 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
          do
            v551 = __ldaxr(v763);
          while (__stlxr(v551 - 1, v763));
          goto LABEL_1158;
        case 12:
          *(_QWORD *)&__p[4] = v1138;
          *(_DWORD *)&__p[32] = 2;
          *(_QWORD *)&__p[24] = 1;
          *(_WORD *)&__p[36] = 1;
          memset(&__p[38], 0, 32);
          *(_QWORD *)&__p[72] = 0;
          *(_QWORD *)&__p[80] = 0;
          *(_QWORD *)&__p[88] = 0x100000001;
          *(_QWORD *)&__p[96] = 0;
          *(_QWORD *)&__p[104] = 0;
          *(_DWORD *)&__p[12] = 0;
          *(_DWORD *)__p = 1;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v1138 + 1);
          if ((_DWORD)v1139 == 2)
          {
            *(_QWORD *)&__p[36] = 0;
            v711 = vuzp1_s16(*(int16x4_t *)((char *)&v1139 + 4), *(int16x4_t *)((char *)&v1139 + 4));
            *(int16x4_t *)&__p[44] = vzip1_s16(v711, v711);
            v93 = (uint64_t)v917;
          }
          else
          {
            v93 = (uint64_t)v917;
            if (!(_DWORD)v1139)
              *(_WORD *)&__p[36] = 2;
          }
          HIBYTE(__str[2]) = 4;
          strcpy((char *)__str, "pool");
          v1042 = 0;
          v1040 = 0;
          v1041 = 0;
          sub_19C1B8190(&v1040, v93, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - v93) >> 3));
          v1038 = 0;
          v1037 = 0;
          v1039 = 0;
          sub_19C1B8190(&v1037, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B5ED4(a1, (uint64_t *)&v1040, (uint64_t *)&v1037, &v1104);
          v712 = (void **)v1037;
          if (v1037)
          {
            v713 = v1038;
            v714 = v1037;
            if (v1038 != v1037)
            {
              do
              {
                if (*((char *)v713 - 1) < 0)
                  operator delete(*(v713 - 3));
                v713 -= 3;
              }
              while (v713 != v712);
              v714 = v1037;
            }
            v1038 = v712;
            operator delete(v714);
          }
          v715 = (void **)v1040;
          if (v1040)
          {
            v716 = v1041;
            v717 = v1040;
            if (v1041 != v1040)
            {
              do
              {
                if (*((char *)v716 - 1) < 0)
                  operator delete(*(v716 - 3));
                v716 -= 3;
              }
              while (v716 != v715);
              v717 = v1040;
            }
            v1041 = v715;
            operator delete(v717);
          }
          if (SHIBYTE(__str[2]) < 0)
            operator delete(__str[0]);
          v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
          if (!*((_QWORD *)&v1104 + 1))
            goto LABEL_1351;
          v718 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
          do
            v551 = __ldaxr(v718);
          while (__stlxr(v551 - 1, v718));
          goto LABEL_1158;
        case 15:
          *(_QWORD *)__p = 0;
          *(_QWORD *)&__p[8] = 1065353216;
          *(_QWORD *)&__p[16] = 897988541;
          __p[24] = 0;
          *(_QWORD *)&__p[44] = 0;
          HIBYTE(__str[2]) = 11;
          strcpy((char *)__str, "elementwise");
          v1077 = 0;
          v1075 = 0;
          v1076 = 0;
          sub_19C1B8190(&v1075, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
          v1073 = 0;
          v1072 = 0;
          v1074 = 0;
          sub_19C1B8190(&v1072, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B5850(a1, (uint64_t *)&v1075, (uint64_t *)&v1072, (uint64_t *)&v1104);
          v70 = (void **)v1072;
          if (v1072)
          {
            v71 = v1073;
            v72 = v1072;
            if (v1073 != v1072)
            {
              do
              {
                if (*((char *)v71 - 1) < 0)
                  operator delete(*(v71 - 3));
                v71 -= 3;
              }
              while (v71 != v70);
              v72 = v1072;
            }
            v1073 = v70;
            operator delete(v72);
          }
          v552 = (void **)v1075;
          if (v1075)
          {
            v553 = v1076;
            v554 = v1075;
            if (v1076 != v1075)
            {
              do
              {
                if (*((char *)v553 - 1) < 0)
                  operator delete(*(v553 - 3));
                v553 -= 3;
              }
              while (v553 != v552);
              v554 = v1075;
            }
            v1076 = v552;
            operator delete(v554);
          }
          if (SHIBYTE(__str[2]) < 0)
            operator delete(__str[0]);
          v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
          if (!*((_QWORD *)&v1104 + 1))
            goto LABEL_1351;
          v555 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
          do
            v551 = __ldaxr(v555);
          while (__stlxr(v551 - 1, v555));
          goto LABEL_1158;
        case 17:
          *(_OWORD *)__str = v1138;
          LODWORD(__str[2]) = v1139;
          __p[23] = 9;
          strcpy(__p, "transpose");
          v958 = 0;
          v956 = 0;
          v957 = 0;
          sub_19C1B8190(&v956, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
          v954 = 0;
          v953 = 0;
          v955 = 0;
          sub_19C1B8190(&v953, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B5138(a1, (uint64_t *)&v956, (uint64_t *)&v953, &v1104);
          v80 = (void **)v953;
          if (v953)
          {
            v81 = v954;
            v82 = v953;
            if (v954 != v953)
            {
              do
              {
                if (*((char *)v81 - 1) < 0)
                  operator delete(*(v81 - 3));
                v81 -= 3;
              }
              while (v81 != v80);
              v82 = v953;
            }
            v954 = v80;
            operator delete(v82);
          }
          v614 = (void **)v956;
          if (v956)
          {
            v615 = v957;
            v616 = v956;
            if (v957 != v956)
            {
              do
              {
                if (*((char *)v615 - 1) < 0)
                  operator delete(*(v615 - 3));
                v615 -= 3;
              }
              while (v615 != v614);
              v616 = v956;
            }
            v957 = v614;
            operator delete(v616);
          }
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
          if (!*((_QWORD *)&v1104 + 1))
            goto LABEL_1351;
          v617 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
          do
            v551 = __ldaxr(v617);
          while (__stlxr(v551 - 1, v617));
          goto LABEL_1158;
        case 20:
          LODWORD(v1088) = DWORD1(v1138) * v1138;
          HIDWORD(v1088) = DWORD1(v1138);
          LOBYTE(v1089) = DWORD2(v1138) == 1;
          __p[23] = 14;
          strcpy(__p, "self_attention");
          v1113 = 0;
          v1111 = 0;
          v1112 = 0;
          sub_19C1B8190(&v1111, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
          v1109 = 0;
          v1108 = 0;
          v1110 = 0;
          sub_19C1B8190(&v1108, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B4DAC(a1, (uint64_t *)&v1111, (uint64_t *)&v1108, __str);
          v76 = (void **)v1108;
          if (v1108)
          {
            v77 = v1109;
            v78 = v1108;
            if (v1109 != v1108)
            {
              do
              {
                if (*((char *)v77 - 1) < 0)
                  operator delete(*(v77 - 3));
                v77 -= 3;
              }
              while (v77 != v76);
              v78 = v1108;
            }
            v1109 = v76;
            operator delete(v78);
          }
          v556 = (void **)v1111;
          if (v1111)
          {
            v557 = v1112;
            v558 = v1111;
            if (v1112 != v1111)
            {
              do
              {
                if (*((char *)v557 - 1) < 0)
                  operator delete(*(v557 - 3));
                v557 -= 3;
              }
              while (v557 != v556);
              v558 = v1111;
            }
            v1112 = v556;
            operator delete(v558);
          }
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v559 = v1146;
          v560 = (char *)operator new(0x58uLL);
          *((_QWORD *)v560 + 2) = 0;
          *(_QWORD *)v560 = &unk_1E3D24FF8;
          *((_QWORD *)v560 + 1) = 0;
          v561 = (int)v1088;
          *((_QWORD *)v560 + 3) = &unk_1E3D21A10;
          *(_OWORD *)(v560 + 56) = 0u;
          *(_OWORD *)(v560 + 72) = 0u;
          *((_DWORD *)v560 + 8) = v561;
          *((_DWORD *)v560 + 9) = v561;
          *((_QWORD *)v560 + 5) = v559;
          v560[48] = 0;
          *(_QWORD *)&v1104 = v560 + 24;
          *((_QWORD *)&v1104 + 1) = v560;
          __dst = 0uLL;
          __p[23] = 7;
          strcpy(__p, "W_query");
          (*((void (**)(std::string *, __int128 *, _BYTE *, uint64_t, uint64_t, _QWORD, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &__dst, __p, v559, 4 * v561 * (uint64_t)v561, 0, v921, v922);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v562 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
          if (*((_QWORD *)&__dst + 1))
          {
            v563 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
            do
              v564 = __ldaxr(v563);
            while (__stlxr(v564 - 1, v563));
            if (!v564)
            {
              ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
              std::__shared_weak_count::__release_weak(v562);
            }
          }
          v565 = *((_QWORD *)&v1146 + 1);
          v566 = (char *)operator new(0x58uLL);
          *((_QWORD *)v566 + 2) = 0;
          *(_QWORD *)v566 = &unk_1E3D24FF8;
          *((_QWORD *)v566 + 1) = 0;
          v567 = (int)v1088;
          *((_QWORD *)v566 + 3) = &unk_1E3D21A10;
          *(_OWORD *)(v566 + 56) = 0u;
          *(_OWORD *)(v566 + 72) = 0u;
          *((_DWORD *)v566 + 8) = v567;
          *((_DWORD *)v566 + 9) = v567;
          *((_QWORD *)v566 + 5) = v565;
          v566[48] = 0;
          *(_QWORD *)&__dst = v566 + 24;
          *((_QWORD *)&__dst + 1) = v566;
          v1017 = 0uLL;
          __p[23] = 5;
          strcpy(__p, "W_key");
          (*((void (**)(std::string *, __int128 *, _BYTE *, uint64_t, uint64_t, _QWORD, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &v1017, __p, v565, 4 * v567 * (uint64_t)v567, 0, v921, v922);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v568 = (std::__shared_weak_count *)*((_QWORD *)&v1017 + 1);
          if (*((_QWORD *)&v1017 + 1))
          {
            v569 = (unint64_t *)(*((_QWORD *)&v1017 + 1) + 8);
            do
              v570 = __ldaxr(v569);
            while (__stlxr(v570 - 1, v569));
            if (!v570)
            {
              ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
              std::__shared_weak_count::__release_weak(v568);
            }
          }
          v571 = v1147;
          v572 = (char *)operator new(0x58uLL);
          *((_QWORD *)v572 + 2) = 0;
          *(_QWORD *)v572 = &unk_1E3D24FF8;
          *((_QWORD *)v572 + 1) = 0;
          v573 = (int)v1088;
          *((_QWORD *)v572 + 3) = &unk_1E3D21A10;
          *(_OWORD *)(v572 + 56) = 0u;
          *(_OWORD *)(v572 + 72) = 0u;
          *((_DWORD *)v572 + 8) = v573;
          *((_DWORD *)v572 + 9) = v573;
          *((_QWORD *)v572 + 5) = v571;
          v572[48] = 0;
          *(_QWORD *)&v1017 = v572 + 24;
          *((_QWORD *)&v1017 + 1) = v572;
          v988 = 0;
          v987 = 0;
          __p[23] = 7;
          strcpy(__p, "W_value");
          (*((void (**)(std::string *, void **, _BYTE *, uint64_t, uint64_t, _QWORD, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &v987, __p, v571, 4 * v573 * (uint64_t)v573, 0, v921, v922);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v574 = (std::__shared_weak_count *)v988;
          if (v988)
          {
            v575 = (unint64_t *)((char *)v988 + 8);
            do
              v576 = __ldaxr(v575);
            while (__stlxr(v576 - 1, v575));
            if (!v576)
            {
              ((void (*)(std::__shared_weak_count *))v574->__on_zero_shared)(v574);
              std::__shared_weak_count::__release_weak(v574);
            }
          }
          v577 = v1150;
          v578 = (char *)operator new(0x58uLL);
          *((_QWORD *)v578 + 2) = 0;
          *(_QWORD *)v578 = &unk_1E3D24FC0;
          *((_QWORD *)v578 + 1) = 0;
          *((_QWORD *)v578 + 3) = &unk_1E3D219F0;
          v579 = (int)v1088;
          *(_OWORD *)(v578 + 56) = 0u;
          *(_OWORD *)(v578 + 72) = 0u;
          *((_DWORD *)v578 + 8) = v579;
          *((_QWORD *)v578 + 5) = v577;
          v578[48] = 0;
          v987 = v578 + 24;
          v988 = v578;
          v985 = 0uLL;
          __p[23] = 7;
          strcpy(__p, "b_query");
          (*((void (**)(std::string *, __int128 *, _BYTE *, _OWORD *, uint64_t, _QWORD, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &v985, __p, v577, 4 * v579, 0, v921, v922);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v580 = (std::__shared_weak_count *)*((_QWORD *)&v985 + 1);
          if (*((_QWORD *)&v985 + 1))
          {
            v581 = (unint64_t *)(*((_QWORD *)&v985 + 1) + 8);
            do
              v582 = __ldaxr(v581);
            while (__stlxr(v582 - 1, v581));
            if (!v582)
            {
              ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
              std::__shared_weak_count::__release_weak(v580);
            }
          }
          v583 = v1151;
          v584 = (char *)operator new(0x58uLL);
          *((_QWORD *)v584 + 2) = 0;
          *(_QWORD *)v584 = &unk_1E3D24FC0;
          *((_QWORD *)v584 + 1) = 0;
          v585 = (int)v1088;
          *((_QWORD *)v584 + 3) = &unk_1E3D219F0;
          *(_OWORD *)(v584 + 56) = 0u;
          *(_OWORD *)(v584 + 72) = 0u;
          *((_DWORD *)v584 + 8) = v585;
          *((_QWORD *)v584 + 5) = v583;
          v584[48] = 0;
          *(_QWORD *)&v985 = v584 + 24;
          *((_QWORD *)&v985 + 1) = v584;
          v983[1] = 0;
          v983[0] = 0;
          __p[23] = 5;
          strcpy(__p, "b_key");
          (*((void (**)(std::string *, void **, _BYTE *, uint64_t, uint64_t, _QWORD, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], v983, __p, v583, 4 * v585, 0, v921, v922);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v586 = (std::__shared_weak_count *)v983[1];
          if (v983[1])
          {
            v587 = (unint64_t *)((char *)v983[1] + 8);
            do
              v588 = __ldaxr(v587);
            while (__stlxr(v588 - 1, v587));
            if (!v588)
            {
              ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
              std::__shared_weak_count::__release_weak(v586);
            }
          }
          v589 = v1152;
          v590 = (char *)operator new(0x58uLL);
          *((_QWORD *)v590 + 2) = 0;
          *(_QWORD *)v590 = &unk_1E3D24FC0;
          *((_QWORD *)v590 + 1) = 0;
          *((_QWORD *)v590 + 3) = &unk_1E3D219F0;
          v591 = (int)v1088;
          *(_OWORD *)(v590 + 56) = 0u;
          *(_OWORD *)(v590 + 72) = 0u;
          *((_DWORD *)v590 + 8) = v591;
          *((_QWORD *)v590 + 5) = v589;
          v590[48] = 0;
          v983[0] = v590 + 24;
          v983[1] = v590;
          v1107 = 0;
          v1106 = 0;
          __p[23] = 7;
          strcpy(__p, "b_value");
          (*((void (**)(std::string *, char **, _BYTE *, uint64_t, uint64_t, _QWORD, __n128, __n128))__str[0]->__r_.__value_.__l.__data_
           + 21))(__str[0], &v1106, __p, v589, 4 * v591, 0, v921, v922);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v592 = v1107;
          if (v1107)
          {
            v593 = (unint64_t *)&v1107->__shared_owners_;
            do
              v594 = __ldaxr(v593);
            while (__stlxr(v594 - 1, v593));
            if (!v594)
            {
              ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
              std::__shared_weak_count::__release_weak(v592);
            }
          }
          v595 = (std::__shared_weak_count *)v983[1];
          if (v983[1])
          {
            v596 = (unint64_t *)((char *)v983[1] + 8);
            do
              v597 = __ldaxr(v596);
            while (__stlxr(v597 - 1, v596));
            if (!v597)
            {
              ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
              std::__shared_weak_count::__release_weak(v595);
            }
          }
          v598 = (std::__shared_weak_count *)*((_QWORD *)&v985 + 1);
          if (*((_QWORD *)&v985 + 1))
          {
            v599 = (unint64_t *)(*((_QWORD *)&v985 + 1) + 8);
            do
              v600 = __ldaxr(v599);
            while (__stlxr(v600 - 1, v599));
            if (!v600)
            {
              ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
              std::__shared_weak_count::__release_weak(v598);
            }
          }
          v601 = (std::__shared_weak_count *)v988;
          if (v988)
          {
            v602 = (unint64_t *)((char *)v988 + 8);
            do
              v603 = __ldaxr(v602);
            while (__stlxr(v603 - 1, v602));
            if (!v603)
            {
              ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
              std::__shared_weak_count::__release_weak(v601);
            }
          }
          v604 = (std::__shared_weak_count *)*((_QWORD *)&v1017 + 1);
          if (*((_QWORD *)&v1017 + 1))
          {
            v605 = (unint64_t *)(*((_QWORD *)&v1017 + 1) + 8);
            do
              v606 = __ldaxr(v605);
            while (__stlxr(v606 - 1, v605));
            if (!v606)
            {
              ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
              std::__shared_weak_count::__release_weak(v604);
            }
          }
          v607 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
          if (*((_QWORD *)&__dst + 1))
          {
            v608 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
            do
              v609 = __ldaxr(v608);
            while (__stlxr(v609 - 1, v608));
            if (!v609)
            {
              ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
              std::__shared_weak_count::__release_weak(v607);
            }
          }
          v610 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
          if (*((_QWORD *)&v1104 + 1))
          {
            v611 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
            do
              v612 = __ldaxr(v611);
            while (__stlxr(v612 - 1, v611));
            if (!v612)
            {
              ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
              std::__shared_weak_count::__release_weak(v610);
            }
          }
          v549 = (std::__shared_weak_count *)__str[1];
          if (!__str[1])
            goto LABEL_1351;
          v613 = &__str[1]->__r_.__value_.__l.__size_;
          do
            v551 = __ldaxr(v613);
          while (__stlxr(v551 - 1, v613));
          goto LABEL_1158;
        case 21:
          v1017 = xmmword_19C278030;
          LODWORD(v1018) = 1;
          memset(__p, 0, 24);
          memset(__str, 0, 24);
          v43 = v941;
          if (v941 == (void **)v918)
            goto LABEL_56;
          break;
        case 22:
          *(_QWORD *)&__p[20] = 0xFFFFFFFFLL;
          *(_WORD *)&__p[32] = 1;
          *(_DWORD *)&__p[36] = 1;
          *(_QWORD *)__p = v1134;
          *(_QWORD *)&__p[8] = DWORD2(v1134);
          *(_DWORD *)&__p[28] = 0;
          *(_DWORD *)&__p[16] = HIDWORD(v1134);
          HIBYTE(__str[2]) = 7;
          strcpy((char *)__str, "reshape");
          v952 = 0;
          v950 = 0;
          v951 = 0;
          sub_19C1B8190(&v950, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
          v948 = 0;
          v947 = 0;
          v949 = 0;
          sub_19C1B8190(&v947, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B72F4(a1, (uint64_t *)&v950, (uint64_t *)&v947, &v1104);
          v87 = (void **)v947;
          if (v947)
          {
            v88 = v948;
            v89 = v947;
            if (v948 != v947)
            {
              do
              {
                if (*((char *)v88 - 1) < 0)
                  operator delete(*(v88 - 3));
                v88 -= 3;
              }
              while (v88 != v87);
              v89 = v947;
            }
            v948 = v87;
            operator delete(v89);
          }
          v622 = (void **)v950;
          if (v950)
          {
            v623 = v951;
            v624 = v950;
            if (v951 != v950)
            {
              do
              {
                if (*((char *)v623 - 1) < 0)
                  operator delete(*(v623 - 3));
                v623 -= 3;
              }
              while (v623 != v622);
              v624 = v950;
            }
            v951 = v622;
            operator delete(v624);
          }
          if (SHIBYTE(__str[2]) < 0)
            operator delete(__str[0]);
          v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
          if (!*((_QWORD *)&v1104 + 1))
            goto LABEL_1351;
          v625 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
          do
            v551 = __ldaxr(v625);
          while (__stlxr(v551 - 1, v625));
          goto LABEL_1158;
        case 28:
          *(_QWORD *)&__p[8] = 1065353216;
          *(_QWORD *)&__p[16] = 897988541;
          *(_DWORD *)&__p[48] = 0;
          *(_DWORD *)&__p[44] = 0;
          *(_QWORD *)__p = 1;
          __p[24] = 1;
          HIBYTE(__str[2]) = 11;
          strcpy((char *)__str, "elementwise");
          v1071 = 0;
          v1069 = 0;
          v1070 = 0;
          sub_19C1B8190(&v1069, (uint64_t)v917, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v917) >> 3));
          v1067 = 0;
          v1066 = 0;
          v1068 = 0;
          sub_19C1B8190(&v1066, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
          sub_19C1B5850(a1, (uint64_t *)&v1069, (uint64_t *)&v1066, (uint64_t *)&v1104);
          v90 = (void **)v1066;
          if (v1066)
          {
            v91 = v1067;
            v92 = v1066;
            if (v1067 != v1066)
            {
              do
              {
                if (*((char *)v91 - 1) < 0)
                  operator delete(*(v91 - 3));
                v91 -= 3;
              }
              while (v91 != v90);
              v92 = v1066;
            }
            v1067 = v90;
            operator delete(v92);
          }
          v626 = (void **)v1069;
          if (v1069)
          {
            v627 = v1070;
            v628 = v1069;
            if (v1070 != v1069)
            {
              do
              {
                if (*((char *)v627 - 1) < 0)
                  operator delete(*(v627 - 3));
                v627 -= 3;
              }
              while (v627 != v626);
              v628 = v1069;
            }
            v1070 = v626;
            operator delete(v628);
          }
          if (SHIBYTE(__str[2]) < 0)
            operator delete(__str[0]);
          v549 = (std::__shared_weak_count *)*((_QWORD *)&v1104 + 1);
          if (!*((_QWORD *)&v1104 + 1))
            goto LABEL_1351;
          v629 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 8);
          do
            v551 = __ldaxr(v629);
          while (__stlxr(v551 - 1, v629));
          goto LABEL_1158;
        default:
          goto LABEL_1351;
      }
      do
      {
LABEL_65:
        if (*((char *)v43 + 23) < 0)
        {
          sub_19C07C6E8(&v1104, *v43, (unint64_t)v43[1]);
        }
        else
        {
          v49 = *(_OWORD *)v43;
          v1105 = (std::string *)v43[2];
          v1104 = v49;
        }
        v50 = SHIBYTE(v1105);
        if (SHIBYTE(v1105) >= 0)
          v51 = HIBYTE(v1105);
        else
          v51 = *((_QWORD *)&v1104 + 1);
        v52 = v51 + 22;
        if (v51 + 22 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        if (v52 >= 0x17)
        {
          v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17)
            v54 = v52 | 7;
          v55 = v54 + 1;
          v53 = (__int128 *)operator new(v54 + 1);
          v1103 = v55 | 0x8000000000000000;
          *(_QWORD *)&__dst = v53;
          *((_QWORD *)&__dst + 1) = v51 + 22;
        }
        else
        {
          v1103 = 0;
          __dst = 0uLL;
          v53 = &__dst;
          HIBYTE(v1103) = v51 + 22;
          if (!v51)
            goto LABEL_82;
        }
        if (v50 >= 0)
          v56 = &v1104;
        else
          v56 = (__int128 *)v1104;
        memmove(v53, v56, v51);
LABEL_82:
        strcpy((char *)v53 + v51, "_after_input_transpose");
        v57 = *(_OWORD **)&__p[8];
        if (*(_QWORD *)&__p[8] >= *(_QWORD *)&__p[16])
        {
          *(_QWORD *)&__p[8] = sub_19C099854((void **)__p, (uint64_t)&__dst);
          if (SHIBYTE(v1103) < 0)
            operator delete((void *)__dst);
        }
        else
        {
          v58 = __dst;
          *(_QWORD *)(*(_QWORD *)&__p[8] + 16) = v1103;
          *v57 = v58;
          *(_QWORD *)&__p[8] = (char *)v57 + 24;
        }
        v59 = SHIBYTE(v1105);
        if (SHIBYTE(v1105) >= 0)
          v60 = HIBYTE(v1105);
        else
          v60 = *((_QWORD *)&v1104 + 1);
        v61 = v60 + 23;
        if (v60 + 23 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        if (v60 >= 0xFFFFFFFFFFFFFFE9)
        {
          v1103 = 0;
          __dst = 0uLL;
          v62 = &__dst;
          HIBYTE(v1103) = v60 + 23;
LABEL_95:
          if (v59 >= 0)
            v65 = &v1104;
          else
            v65 = (__int128 *)v1104;
          memmove(v62, v65, v60);
          goto LABEL_99;
        }
        v63 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v61 | 7) != 0x17)
          v63 = v61 | 7;
        v64 = v63 + 1;
        v62 = (__int128 *)operator new(v63 + 1);
        v1103 = v64 | 0x8000000000000000;
        *(_QWORD *)&__dst = v62;
        *((_QWORD *)&__dst + 1) = v60 + 23;
        if (v60)
          goto LABEL_95;
LABEL_99:
        strcpy((char *)v62 + v60, "_after_output_transpose");
        v66 = __str[1];
        if (__str[1] < __str[2])
        {
          v48 = __dst;
          __str[1]->__r_.__value_.__r.__words[2] = v1103;
          *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v48;
          __str[1] = v66 + 1;
          if ((SHIBYTE(v1105) & 0x80000000) == 0)
            goto LABEL_64;
        }
        else
        {
          __str[1] = (std::string *)sub_19C099854((void **)__str, (uint64_t)&__dst);
          if (SHIBYTE(v1103) < 0)
          {
            operator delete((void *)__dst);
            if ((SHIBYTE(v1105) & 0x80000000) == 0)
            {
LABEL_64:
              v43 += 3;
              if (v43 == (void **)v918)
                break;
              goto LABEL_65;
            }
          }
          else if ((SHIBYTE(v1105) & 0x80000000) == 0)
          {
            goto LABEL_64;
          }
        }
        operator delete((void *)v1104);
        v43 += 3;
      }
      while (v43 != (void **)v918);
LABEL_56:
      HIBYTE(v1105) = 9;
      strcpy((char *)&v1104, "transpose");
      v44 = SHIBYTE(v1154);
      if (v1154 >= 0)
        v45 = HIBYTE(v1154);
      else
        v45 = *((_QWORD *)&v1153 + 1);
      v46 = v45 + 8;
      if (v45 + 8 > 0x7FFFFFFFFFFFFFF7)
        sub_19C07C774();
      if (v46 >= 0x17)
      {
        v543 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v46 | 7) != 0x17)
          v543 = v46 | 7;
        v544 = v543 + 1;
        v47 = (__int128 *)operator new(v543 + 1);
        v1103 = v544 | 0x8000000000000000;
        *(_QWORD *)&__dst = v47;
        *((_QWORD *)&__dst + 1) = v45 + 8;
      }
      else
      {
        v1103 = 0;
        __dst = 0uLL;
        v47 = &__dst;
        HIBYTE(v1103) = v45 + 8;
        if (!v45)
          goto LABEL_706;
      }
      if (v44 >= 0)
        v545 = &v1153;
      else
        v545 = (__int128 *)v1153;
      memmove(v47, v545, v45);
LABEL_706:
      strcpy((char *)v47 + v45, "_input_t");
      v1100 = 0;
      v1099 = 0;
      v1101 = 0;
      sub_19C1B8190(&v1099, (uint64_t)v917, v927, 0xAAAAAAAAAAAAAAABLL * ((v927 - (uint64_t)v917) >> 3));
      v1097 = 0;
      v1096 = 0;
      v1098 = 0;
      sub_19C1B8190(&v1096, *(uint64_t *)__p, *(uint64_t *)&__p[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3));
      sub_19C1B5138(a1, (uint64_t *)&v1099, (uint64_t *)&v1096, v983);
      v546 = (void **)v1096;
      if (v1096)
      {
        v547 = v1097;
        v548 = v1096;
        if (v1097 != v1096)
        {
          do
          {
            if (*((char *)v547 - 1) < 0)
              operator delete(*(v547 - 3));
            v547 -= 3;
          }
          while (v547 != v546);
          v548 = v1096;
        }
        v1097 = v546;
        operator delete(v548);
      }
      v630 = (void **)v1099;
      if (v1099)
      {
        v631 = v1100;
        v632 = v1099;
        if (v1100 != v1099)
        {
          do
          {
            if (*((char *)v631 - 1) < 0)
              operator delete(*(v631 - 3));
            v631 -= 3;
          }
          while (v631 != v630);
          v632 = v1099;
        }
        v1100 = v630;
        operator delete(v632);
      }
      if (SHIBYTE(v1103) < 0)
      {
        operator delete((void *)__dst);
        if (SHIBYTE(v1105) < 0)
          goto LABEL_1007;
      }
      else
      {
        if ((SHIBYTE(v1105) & 0x80000000) == 0)
          goto LABEL_899;
LABEL_1007:
        operator delete((void *)v1104);
      }
LABEL_899:
      LODWORD(v989) = 0;
      LODWORD(v987) = 1;
      HIDWORD(v987) = v1142;
      HIDWORD(v988) = v1138 == 0;
      LODWORD(v988) = v1138 != 0;
      HIBYTE(v1105) = 15;
      strcpy((char *)&v1104, "instancenorm_1d");
      v1094 = 0;
      v1093 = 0;
      v1095 = 0;
      sub_19C1B8190(&v1093, *(uint64_t *)__p, *(uint64_t *)&__p[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3));
      v1091 = 0;
      v1090 = 0;
      v1092 = 0;
      sub_19C1B8190(&v1090, (uint64_t)__str[0], (uint64_t)__str[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3));
      sub_19C1B54C4(a1, (uint64_t *)&v1093, (uint64_t *)&v1090, &v1106);
      v633 = (void **)v1090;
      if (v1090)
      {
        v634 = v1091;
        v635 = v1090;
        if (v1091 != v1090)
        {
          do
          {
            if (*((char *)v634 - 1) < 0)
              operator delete(*(v634 - 3));
            v634 -= 3;
          }
          while (v634 != v633);
          v635 = v1090;
        }
        v1091 = v633;
        operator delete(v635);
      }
      v636 = (void **)v1093;
      if (v1093)
      {
        v637 = v1094;
        v638 = v1093;
        if (v1094 != v1093)
        {
          do
          {
            if (*((char *)v637 - 1) < 0)
              operator delete(*(v637 - 3));
            v637 -= 3;
          }
          while (v637 != v636);
          v638 = v1093;
        }
        v1094 = v636;
        operator delete(v638);
      }
      if (SHIBYTE(v1105) < 0)
        operator delete((void *)v1104);
      v639 = v1146;
      v640 = (char *)operator new(0x58uLL);
      *((_QWORD *)v640 + 2) = 0;
      *(_QWORD *)v640 = &unk_1E3D24FC0;
      *((_QWORD *)v640 + 1) = 0;
      v641 = v1126;
      *((_QWORD *)v640 + 3) = &unk_1E3D219F0;
      *(_OWORD *)(v640 + 56) = 0u;
      *(_OWORD *)(v640 + 72) = 0u;
      *((_DWORD *)v640 + 8) = v641;
      *((_QWORD *)v640 + 5) = v639;
      v640[48] = 0;
      v1088 = v640 + 24;
      v1089 = (std::__shared_weak_count *)v640;
      v642 = v1150;
      v643 = (char *)operator new(0x58uLL);
      *((_QWORD *)v643 + 3) = &unk_1E3D219F0;
      *((_QWORD *)v643 + 1) = 0;
      *((_QWORD *)v643 + 2) = 0;
      *(_QWORD *)v643 = &unk_1E3D24FC0;
      *(_OWORD *)(v643 + 56) = 0u;
      *(_OWORD *)(v643 + 72) = 0u;
      *((_DWORD *)v643 + 8) = v641;
      *((_QWORD *)v643 + 5) = v642;
      v643[48] = 0;
      v1086 = v643 + 24;
      v1087 = (std::__shared_weak_count *)v643;
      __dst = 0uLL;
      HIBYTE(v1105) = 6;
      strcpy((char *)&v1104, "wGamma");
      (*(void (**)(char *, __int128 *, __int128 *, uint64_t, uint64_t, _QWORD, __n128, __n128))(*(_QWORD *)v1106 + 168))(v1106, &__dst, &v1104, v639, 4 * v641, 0, v921, v922);
      if (SHIBYTE(v1105) < 0)
        operator delete((void *)v1104);
      v644 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1))
      {
        v645 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v646 = __ldaxr(v645);
        while (__stlxr(v646 - 1, v645));
        if (!v646)
        {
          ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
          std::__shared_weak_count::__release_weak(v644);
        }
      }
      __dst = 0uLL;
      HIBYTE(v1105) = 5;
      strcpy((char *)&v1104, "wBeta");
      (*(void (**)(char *, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v1106 + 168))(v1106, &__dst, &v1104, *((_QWORD *)v1086 + 2), 4 * *((int *)v1086 + 2), 0);
      if (SHIBYTE(v1105) < 0)
        operator delete((void *)v1104);
      v647 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1))
      {
        v648 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v649 = __ldaxr(v648);
        while (__stlxr(v649 - 1, v648));
        if (!v649)
        {
          ((void (*)(std::__shared_weak_count *))v647->__on_zero_shared)(v647);
          std::__shared_weak_count::__release_weak(v647);
        }
      }
      v985 = xmmword_19C278030;
      LODWORD(v986) = 1;
      HIBYTE(v1105) = 9;
      strcpy((char *)&v1104, "transpose");
      v650 = SHIBYTE(v1154);
      if (v1154 >= 0)
        v651 = HIBYTE(v1154);
      else
        v651 = *((_QWORD *)&v1153 + 1);
      v652 = v651 + 9;
      if (v651 + 9 > 0x7FFFFFFFFFFFFFF7)
        sub_19C07C774();
      if (v652 >= 0x17)
      {
        v654 = (v652 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v652 | 7) != 0x17)
          v654 = v652 | 7;
        v655 = v654 + 1;
        v653 = (__int128 *)operator new(v654 + 1);
        v1103 = v655 | 0x8000000000000000;
        *(_QWORD *)&__dst = v653;
        *((_QWORD *)&__dst + 1) = v651 + 9;
      }
      else
      {
        v1103 = 0;
        __dst = 0uLL;
        v653 = &__dst;
        HIBYTE(v1103) = v651 + 9;
        if (!v651)
          goto LABEL_945;
      }
      if (v650 >= 0)
        v656 = &v1153;
      else
        v656 = (__int128 *)v1153;
      memmove(v653, v656, v651);
LABEL_945:
      v30 = v927;
      strcpy((char *)v653 + v651, "_output_t");
      v1082 = 0;
      v1081 = 0;
      v1083 = 0;
      sub_19C1B8190(&v1081, (uint64_t)__str[0], (uint64_t)__str[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3));
      v1079 = 0;
      v1078 = 0;
      v1080 = 0;
      sub_19C1B8190(&v1078, (uint64_t)v941, v918, 0xAAAAAAAAAAAAAAABLL * ((v918 - (uint64_t)v941) >> 3));
      sub_19C1B5138(a1, (uint64_t *)&v1081, (uint64_t *)&v1078, &v1084);
      v657 = (void **)v1078;
      if (v1078)
      {
        v658 = v1079;
        v659 = v1078;
        if (v1079 != v1078)
        {
          do
          {
            if (*((char *)v658 - 1) < 0)
              operator delete(*(v658 - 3));
            v658 -= 3;
          }
          while (v658 != v657);
          v659 = v1078;
        }
        v1079 = v657;
        operator delete(v659);
      }
      v660 = (void **)v1081;
      if (v1081)
      {
        v661 = v1082;
        v662 = v1081;
        if (v1082 != v1081)
        {
          do
          {
            if (*((char *)v661 - 1) < 0)
              operator delete(*(v661 - 3));
            v661 -= 3;
          }
          while (v661 != v660);
          v662 = v1081;
        }
        v1082 = v660;
        operator delete(v662);
      }
      if (SHIBYTE(v1103) < 0)
      {
        operator delete((void *)__dst);
        if (SHIBYTE(v1105) < 0)
          goto LABEL_1009;
LABEL_963:
        v663 = v1085;
        if (v1085)
        {
LABEL_1010:
          v692 = (unint64_t *)&v663->__shared_owners_;
          do
            v693 = __ldaxr(v692);
          while (__stlxr(v693 - 1, v692));
          if (!v693)
          {
            ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
            std::__shared_weak_count::__release_weak(v663);
          }
        }
      }
      else
      {
        if ((SHIBYTE(v1105) & 0x80000000) == 0)
          goto LABEL_963;
LABEL_1009:
        operator delete((void *)v1104);
        v663 = v1085;
        if (v1085)
          goto LABEL_1010;
      }
      v694 = v1087;
      if (v1087)
      {
        v695 = (unint64_t *)&v1087->__shared_owners_;
        do
          v696 = __ldaxr(v695);
        while (__stlxr(v696 - 1, v695));
        if (!v696)
        {
          ((void (*)(std::__shared_weak_count *))v694->__on_zero_shared)(v694);
          std::__shared_weak_count::__release_weak(v694);
        }
      }
      v697 = v1089;
      if (v1089)
      {
        v698 = (unint64_t *)&v1089->__shared_owners_;
        do
          v699 = __ldaxr(v698);
        while (__stlxr(v699 - 1, v698));
        if (!v699)
        {
          ((void (*)(std::__shared_weak_count *))v697->__on_zero_shared)(v697);
          std::__shared_weak_count::__release_weak(v697);
        }
      }
      v700 = v1107;
      if (v1107)
      {
        v701 = (unint64_t *)&v1107->__shared_owners_;
        do
          v702 = __ldaxr(v701);
        while (__stlxr(v702 - 1, v701));
        if (!v702)
        {
          ((void (*)(std::__shared_weak_count *))v700->__on_zero_shared)(v700);
          std::__shared_weak_count::__release_weak(v700);
        }
      }
      v703 = (std::__shared_weak_count *)v983[1];
      if (v983[1])
      {
        v704 = (unint64_t *)((char *)v983[1] + 8);
        do
          v705 = __ldaxr(v704);
        while (__stlxr(v705 - 1, v704));
        if (!v705)
        {
          ((void (*)(std::__shared_weak_count *))v703->__on_zero_shared)(v703);
          std::__shared_weak_count::__release_weak(v703);
        }
      }
      v706 = __str[0];
      if (__str[0])
      {
        v707 = __str[1];
        v708 = __str[0];
        if (__str[1] != __str[0])
        {
          do
          {
            if (SHIBYTE(v707[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v707[-1].__r_.__value_.__l.__data_);
            --v707;
          }
          while (v707 != v706);
          v708 = __str[0];
        }
        __str[1] = v706;
        operator delete(v708);
      }
      v709 = *(_QWORD *)__p;
      if (*(_QWORD *)__p)
      {
        v710 = *(_QWORD *)&__p[8];
        v143 = *(int **)__p;
        if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
        {
          do
          {
            if (*(char *)(v710 - 1) < 0)
              operator delete(*(void **)(v710 - 24));
            v710 -= 24;
          }
          while (v710 != v709);
          v143 = *(int **)__p;
        }
        *(_QWORD *)&__p[8] = v709;
LABEL_1350:
        operator delete(v143);
      }
LABEL_1351:
      v862 = v941;
      if (v941)
      {
        for (i = v918; (void **)i != v862; i -= 24)
        {
          if (*(char *)(i - 1) < 0)
            operator delete(*(void **)(i - 24));
          v862 = v941;
        }
        operator delete(v941);
      }
      v4 = v912;
      if (!v917)
      {
        v864 = (void **)v1114;
        if (v1114)
          goto LABEL_1360;
LABEL_1371:
        v866 = (void **)v1116;
        if (v1116)
          goto LABEL_1374;
LABEL_19:
        if ((SHIBYTE(v1154) & 0x80000000) == 0)
          goto LABEL_20;
LABEL_1381:
        operator delete((void *)v1153);
        v11 = v915 + 24;
        if (v915 + 24 == v913)
          goto LABEL_1456;
        continue;
      }
      break;
    }
    while ((void *)v30 != v917)
    {
      if (*(char *)(v30 - 1) < 0)
        operator delete(*(void **)(v30 - 24));
      v30 -= 24;
    }
    operator delete(v917);
    v864 = (void **)v1114;
    if (!v1114)
      goto LABEL_1371;
LABEL_1360:
    v865 = v1115;
    if (v1115 == v864)
    {
      v1115 = v864;
      operator delete(v864);
      v866 = (void **)v1116;
      if (!v1116)
        goto LABEL_19;
    }
    else
    {
      do
      {
        if (*((char *)v865 - 9) < 0)
          operator delete(*(v865 - 4));
        v865 -= 4;
      }
      while (v865 != v864);
      v1115 = v864;
      operator delete(v1114);
      v866 = (void **)v1116;
      if (!v1116)
        goto LABEL_19;
    }
LABEL_1374:
    v867 = v1117;
    if (v1117 == v866)
    {
      v1117 = v866;
      operator delete(v866);
      if (SHIBYTE(v1154) < 0)
        goto LABEL_1381;
    }
    else
    {
      do
      {
        if (*((char *)v867 - 9) < 0)
          operator delete(*(v867 - 4));
        v867 -= 4;
      }
      while (v867 != v866);
      v1117 = v866;
      operator delete(v1116);
      if (SHIBYTE(v1154) < 0)
        goto LABEL_1381;
    }
LABEL_20:
    v11 = v915 + 24;
    if (v915 + 24 != v913)
      continue;
    break;
  }
LABEL_1456:
  Espresso::sequential_builder::build_from_shapes();
  BYTE7(v1119) = 12;
  strcpy((char *)&v1118, "fast_reshape");
  __str[0] = (std::string *)&v1118;
  v887 = sub_19C1BAA2C((uint64_t **)(*(_QWORD *)__p + 472), (const void **)&v1118, (uint64_t)&unk_19C27ADD0, (_OWORD **)__str);
  MEMORY[0x1A1AD19F8](v887 + 7, "1");
  if (SBYTE7(v1119) < 0)
    operator delete((void *)v1118);
  v945 = *(_QWORD *)__p;
  v946 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v888 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v889 = __ldxr(v888);
    while (__stxr(v889 + 1, v888));
  }
  v890 = strlen(a3);
  if (v890 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v891 = (void *)v890;
  if (v890 >= 0x17)
  {
    v893 = (v890 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v890 | 7) != 0x17)
      v893 = v890 | 7;
    v894 = v893 + 1;
    v892 = operator new(v893 + 1);
    v944 = v894 | 0x8000000000000000;
    v943[0] = v892;
    v943[1] = v891;
    goto LABEL_1468;
  }
  HIBYTE(v944) = v890;
  v892 = v943;
  if (v890)
LABEL_1468:
    memcpy(v892, a3, (size_t)v891);
  *((_BYTE *)v891 + (_QWORD)v892) = 0;
  Espresso::dump_network_binserializer();
  if (SHIBYTE(v944) < 0)
  {
    operator delete(v943[0]);
    v895 = v946;
    if (v946)
      goto LABEL_1473;
  }
  else
  {
    v895 = v946;
    if (!v946)
      goto LABEL_1477;
LABEL_1473:
    v896 = (unint64_t *)&v895->__shared_owners_;
    do
      v897 = __ldaxr(v896);
    while (__stlxr(v897 - 1, v896));
    if (!v897)
    {
      ((void (*)(std::__shared_weak_count *))v895->__on_zero_shared)(v895);
      std::__shared_weak_count::__release_weak(v895);
    }
  }
LABEL_1477:
  v898 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v899 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v900 = __ldaxr(v899);
    while (__stlxr(v900 - 1, v899));
    if (!v900)
    {
      ((void (*)(std::__shared_weak_count *))v898->__on_zero_shared)(v898);
      std::__shared_weak_count::__release_weak(v898);
    }
  }
  sub_19C098FBC((uint64_t)&v1155, v1156[0]);
  sub_19C098FBC((uint64_t)&v1157, v1158[0]);
  v901 = v1159;
  if (v1159)
  {
    v902 = v1160;
    v903 = v1159;
    if (v1160 != v1159)
    {
      v904 = v1160;
      do
      {
        v906 = (void *)*((_QWORD *)v904 - 3);
        v904 -= 24;
        v905 = v906;
        if (v906)
        {
          *((_QWORD *)v902 - 2) = v905;
          operator delete(v905);
        }
        v902 = v904;
      }
      while (v904 != v901);
      v903 = v1159;
    }
    v1160 = v901;
    operator delete(v903);
  }
  v907 = (void **)v1162;
  if (v1162)
  {
    v908 = (void **)v1163;
    v909 = v1162;
    if (v1163 != v1162)
    {
      do
      {
        if (*((char *)v908 - 1) < 0)
          operator delete(*(v908 - 3));
        v908 -= 3;
      }
      while (v908 != v907);
      v909 = v1162;
    }
    v1163 = (char *)v907;
    operator delete(v909);
  }
}

void sub_19C1B3D70()
{
  JUMPOUT(0x19C1B48D8);
}

void sub_19C1B4428()
{
  JUMPOUT(0x19C1B4418);
}

void sub_19C1B4430()
{
  sub_19C07AD50((void **)&STACK[0x4D0]);
  sub_19C07AD50((void **)&STACK[0x4E8]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x19C1B4420);
}

void sub_19C1B4468()
{
  sub_19C07AD50((void **)&STACK[0x228]);
  sub_19C07AD50((void **)&STACK[0x240]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x19C1B4BD0);
}

void sub_19C1B4488()
{
  sub_19C17F4B4((uint64_t)&STACK[0x500]);
  sub_19C17F4B4((uint64_t)&STACK[0x430]);
  sub_19C17F4B4((uint64_t)&STACK[0x7D0]);
  JUMPOUT(0x19C1B48DCLL);
}

void sub_19C1B44B0()
{
  sub_19C07AD50((void **)&STACK[0x240]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x19C1B48DCLL);
}

void sub_19C1B44C8()
{
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x19C1B48DCLL);
}

void sub_19C1B44D8()
{
  sub_19C07AD50((void **)&STACK[0x510]);
  sub_19C07AD50((void **)&STACK[0x528]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x19C1B48DCLL);
}

void sub_19C1B44F8()
{
  sub_19C07AD50((void **)&STACK[0x698]);
  sub_19C07AD50((void **)&STACK[0x6B0]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x19C1B48DCLL);
}

void sub_19C1B4518()
{
  sub_19C07AD50((void **)&STACK[0x528]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x19C1B48DCLL);
}

void sub_19C1B4530()
{
  sub_19C07AD50((void **)&STACK[0x6B0]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x19C1B48DCLL);
}

void sub_19C1B4548()
{
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  JUMPOUT(0x19C1B48DCLL);
}

void sub_19C1B4558()
{
  JUMPOUT(0x19C1B4610);
}

void sub_19C1B4564()
{
  JUMPOUT(0x19C1B456CLL);
}

void sub_19C1B4578(void *a1, int a2)
{
  uint64_t v4;
  _QWORD *exception;

  if (SLOBYTE(STACK[0x877]) < 0)
    operator delete((void *)STACK[0x860]);
  sub_19C17F4B4((uint64_t)&STACK[0x5C0]);
  if (a2 == 1)
  {
    __cxa_get_exception_ptr(a1);
    v4 = MEMORY[0x1E0DE5060] + 16;
    STACK[0x860] = MEMORY[0x1E0DE5060] + 16;
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(8uLL);
    *exception = v4;
    __cxa_throw(exception, MEMORY[0x1E0DE4EB0], (void (*)(void *))MEMORY[0x1E0DE4DD0]);
  }
  JUMPOUT(0x19C1B4CDCLL);
}

void sub_19C1B45E4()
{
  sub_19C17F4B4((uint64_t)&STACK[0x3C0]);
  sub_19C17F4B4((uint64_t)&STACK[0x7B8]);
  JUMPOUT(0x19C1B4600);
}

void sub_19C1B45FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  void **a68;
  uint64_t v68;
  void *v70;
  void **v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void **v87;
  void **v88;

  v70 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v70;
    operator delete(v70);
  }
  sub_19C17F4B4((uint64_t)&STACK[0x7D0]);
  v73 = a68;
  if (a68)
  {
    while (a48 != v73)
    {
      if (*((char *)a48 - 1) < 0)
        operator delete(*(a48 - 3));
      a48 -= 3;
      v73 = a68;
    }
    operator delete(a68);
  }
  if (a47)
  {
    while (a63 != a47)
    {
      if (*((char *)a63 - 1) < 0)
        operator delete(*(a63 - 3));
      a63 -= 3;
    }
    operator delete(a47);
  }
  v74 = STACK[0x830];
  if (STACK[0x830])
  {
    v75 = STACK[0x838];
    v76 = (void *)STACK[0x830];
    if (STACK[0x838] != v74)
    {
      do
      {
        if (*(char *)(v75 - 9) < 0)
          operator delete(*(void **)(v75 - 32));
        v75 -= 32;
      }
      while (v75 != v74);
      v76 = (void *)STACK[0x830];
    }
    STACK[0x838] = v74;
    operator delete(v76);
  }
  v77 = STACK[0x848];
  if (STACK[0x848])
  {
    v78 = STACK[0x850];
    v79 = (void *)STACK[0x848];
    if (STACK[0x850] != v77)
    {
      do
      {
        if (*(char *)(v78 - 9) < 0)
          operator delete(*(void **)(v78 - 32));
        v78 -= 32;
      }
      while (v78 != v77);
      v79 = (void *)STACK[0x848];
    }
    STACK[0x850] = v77;
    operator delete(v79);
  }
  if (SLOBYTE(STACK[0xB37]) < 0)
    operator delete((void *)STACK[0xB20]);
  sub_19C098FBC(v68 - 256, *(char **)(v68 - 248));
  sub_19C098FBC(v68 - 232, *(char **)(v68 - 224));
  sub_19C1B82C8(a43, *(char **)(a43 + 8));
  v80 = *(_QWORD *)(v68 - 208);
  if (v80)
  {
    v82 = *(_QWORD *)(v68 - 200);
    v83 = *(void **)(v68 - 208);
    if (v82 != v80)
    {
      v84 = *(_QWORD *)(v68 - 200);
      do
      {
        v86 = *(void **)(v84 - 24);
        v84 -= 24;
        v85 = v86;
        if (v86)
        {
          *(_QWORD *)(v82 - 16) = v85;
          operator delete(v85);
        }
        v82 = v84;
      }
      while (v84 != v80);
      v83 = *(void **)(v68 - 208);
    }
    *(_QWORD *)(v68 - 200) = v80;
    operator delete(v83);
    v81 = *(void ***)(v68 - 184);
    if (!v81)
LABEL_37:
      _Unwind_Resume(a1);
  }
  else
  {
    v81 = *(void ***)(v68 - 184);
    if (!v81)
      goto LABEL_37;
  }
  v87 = *(void ***)(v68 - 176);
  v88 = v81;
  if (v87 != v81)
  {
    do
    {
      if (*((char *)v87 - 1) < 0)
        operator delete(*(v87 - 3));
      v87 -= 3;
    }
    while (v87 != v81);
    v88 = *(void ***)(v68 - 184);
  }
  *(_QWORD *)(v68 - 176) = v81;
  operator delete(v88);
  _Unwind_Resume(a1);
}

void sub_19C1B461C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;

  sub_19C07AD50((void **)&STACK[0x390]);
  sub_19C07AD50((void **)&STACK[0x3A8]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  operator delete(a69);
  JUMPOUT(0x19C1B4BD0);
}

void sub_19C1B4698()
{
  if (SLOBYTE(STACK[0x447]) < 0)
    JUMPOUT(0x19C1B46A4);
  JUMPOUT(0x19C1B4BD0);
}

void sub_19C1B46B4()
{
  std::exception::~exception((std::exception *)&STACK[0x860]);
  __cxa_end_catch();
  JUMPOUT(0x19C1B4CDCLL);
}

void sub_19C1B46CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;

  v71 = *(void **)v69;
  if (*(_QWORD *)v69)
  {
    *(_QWORD *)(v69 + 8) = v71;
    operator delete(v71);
  }
  *(_QWORD *)(v70 - 200) = v69;
  v72 = (void *)STACK[0x7D0];
  if (STACK[0x7D0])
  {
    STACK[0x7D8] = (unint64_t)v72;
    operator delete(v72);
    v73 = (void *)STACK[0x430];
    if (!STACK[0x430])
    {
LABEL_5:
      v74 = a40;
      if (!a40)
        goto LABEL_13;
LABEL_9:
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldaxr(p_shared_owners);
      while (__stlxr(v76 - 1, p_shared_owners));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
        std::__shared_weak_count::__release_weak(a40);
      }
LABEL_13:
      operator delete(a69);
      JUMPOUT(0x19C1B4BD0);
    }
  }
  else
  {
    v73 = (void *)STACK[0x430];
    if (!STACK[0x430])
      goto LABEL_5;
  }
  STACK[0x438] = (unint64_t)v73;
  operator delete(v73);
  v74 = a40;
  if (!a40)
    goto LABEL_13;
  goto LABEL_9;
}

void sub_19C1B4700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;

  v71 = *(void **)v69;
  if (*(_QWORD *)v69)
  {
    *(_QWORD *)(v69 + 8) = v71;
    operator delete(v71);
  }
  *(_QWORD *)(v70 - 200) = v69;
  v72 = (void *)STACK[0x430];
  if (STACK[0x430])
  {
    STACK[0x438] = (unint64_t)v72;
    operator delete(v72);
  }
  if (!a40)
  {
    operator delete(a69);
    JUMPOUT(0x19C1B4BD0);
  }
  JUMPOUT(0x19C1B4B94);
}

void sub_19C1B4720()
{
  JUMPOUT(0x19C1B4CDCLL);
}

void sub_19C1B4728()
{
  JUMPOUT(0x19C1B48CCLL);
}

void sub_19C1B4734()
{
  if (SLOBYTE(STACK[0x5D7]) < 0)
    JUMPOUT(0x19C1B4C38);
  JUMPOUT(0x19C1B4C3CLL);
}

void sub_19C1B4754()
{
  if (SLOBYTE(STACK[0x7CF]) < 0)
    operator delete((void *)STACK[0x7B8]);
  JUMPOUT(0x19C1B48BCLL);
}

void sub_19C1B4770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  unint64_t v80;
  void *v81;
  void *v82;
  unint64_t v83;
  void *v84;
  unint64_t v85;
  void *v86;
  void *v87;
  unint64_t v88;
  void *v89;
  unint64_t v90;
  void *v91;
  void *v92;

  v71 = *(void **)v69;
  if (*(_QWORD *)v69)
  {
    *(_QWORD *)(v69 + 8) = v71;
    operator delete(v71);
  }
  *(_QWORD *)(v70 - 200) = v69;
  sub_19C17F4B4((uint64_t)&STACK[0x7F0]);
  v72 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v72;
    operator delete(v72);
    v73 = (void *)STACK[0x378];
    if (!STACK[0x378])
    {
LABEL_5:
      v74 = (void *)STACK[0x490];
      if (!STACK[0x490])
      {
LABEL_10:
        v75 = STACK[0x7B8];
        if (STACK[0x7B8])
        {
          v78 = STACK[0x7C0];
          v79 = (void *)STACK[0x7B8];
          if (STACK[0x7C0] != v75)
          {
            v80 = STACK[0x7C0];
            do
            {
              v82 = *(void **)(v80 - 24);
              v80 -= 24;
              v81 = v82;
              if (v82)
              {
                *(_QWORD *)(v78 - 16) = v81;
                operator delete(v81);
              }
              v78 = v80;
            }
            while (v80 != v75);
            v79 = (void *)STACK[0x7B8];
          }
          STACK[0x7C0] = v75;
          operator delete(v79);
          v76 = STACK[0x7D0];
          if (!STACK[0x7D0])
          {
LABEL_12:
            v77 = STACK[0x430];
            if (!STACK[0x430])
              goto LABEL_35;
            goto LABEL_28;
          }
        }
        else
        {
          v76 = STACK[0x7D0];
          if (!STACK[0x7D0])
            goto LABEL_12;
        }
        v83 = STACK[0x7D8];
        v84 = (void *)v76;
        if (STACK[0x7D8] != v76)
        {
          v85 = STACK[0x7D8];
          do
          {
            v87 = *(void **)(v85 - 24);
            v85 -= 24;
            v86 = v87;
            if (v87)
            {
              *(_QWORD *)(v83 - 16) = v86;
              operator delete(v86);
            }
            v83 = v85;
          }
          while (v85 != v76);
          v84 = (void *)STACK[0x7D0];
        }
        STACK[0x7D8] = v76;
        operator delete(v84);
        v77 = STACK[0x430];
        if (!STACK[0x430])
        {
LABEL_35:
          if (!a40)
          {
            operator delete(a69);
            JUMPOUT(0x19C1B4BD0);
          }
          JUMPOUT(0x19C1B4B94);
        }
LABEL_28:
        v88 = STACK[0x438];
        v89 = (void *)v77;
        if (STACK[0x438] != v77)
        {
          v90 = STACK[0x438];
          do
          {
            v92 = *(void **)(v90 - 24);
            v90 -= 24;
            v91 = v92;
            if (v92)
            {
              *(_QWORD *)(v88 - 16) = v91;
              operator delete(v91);
            }
            v88 = v90;
          }
          while (v90 != v77);
          v89 = (void *)STACK[0x430];
        }
        STACK[0x438] = v77;
        operator delete(v89);
        goto LABEL_35;
      }
LABEL_9:
      STACK[0x498] = (unint64_t)v74;
      operator delete(v74);
      goto LABEL_10;
    }
  }
  else
  {
    v73 = (void *)STACK[0x378];
    if (!STACK[0x378])
      goto LABEL_5;
  }
  STACK[0x380] = (unint64_t)v73;
  operator delete(v73);
  v74 = (void *)STACK[0x490];
  if (!STACK[0x490])
    goto LABEL_10;
  goto LABEL_9;
}

void sub_19C1B47E4()
{
  JUMPOUT(0x19C1B4800);
}

void sub_19C1B4818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,void **a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a68;
  void **v68;
  uint64_t v69;
  void **v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  void **v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void **v86;
  void **v87;

  v72 = a68;
  if (a68)
  {
    while (a48 != v72)
    {
      if (*((char *)a48 - 1) < 0)
        operator delete(*(a48 - 3));
      a48 -= 3;
      v72 = a68;
    }
    operator delete(a68);
  }
  if (a47)
  {
    while (v68 != a47)
    {
      if (*((char *)v68 - 1) < 0)
        operator delete(*(v68 - 3));
      v68 -= 3;
    }
    operator delete(a47);
  }
  v73 = STACK[0x830];
  if (STACK[0x830])
  {
    v74 = STACK[0x838];
    v75 = (void *)STACK[0x830];
    if (STACK[0x838] != v73)
    {
      do
      {
        if (*(char *)(v74 - 9) < 0)
          operator delete(*(void **)(v74 - 32));
        v74 -= 32;
      }
      while (v74 != v73);
      v75 = (void *)STACK[0x830];
    }
    STACK[0x838] = v73;
    operator delete(v75);
  }
  v76 = STACK[0x848];
  if (STACK[0x848])
  {
    v77 = STACK[0x850];
    v78 = (void *)STACK[0x848];
    if (STACK[0x850] != v76)
    {
      do
      {
        if (*(char *)(v77 - 9) < 0)
          operator delete(*(void **)(v77 - 32));
        v77 -= 32;
      }
      while (v77 != v76);
      v78 = (void *)STACK[0x848];
    }
    STACK[0x850] = v76;
    operator delete(v78);
  }
  if (SLOBYTE(STACK[0xB37]) < 0)
    operator delete((void *)STACK[0xB20]);
  sub_19C098FBC(v69 - 256, *(_QWORD *)(v69 - 248));
  sub_19C098FBC(v69 - 232, *(_QWORD *)(v69 - 224));
  sub_19C1B82C8(a43, *(_QWORD *)(a43 + 8));
  v79 = *(_QWORD *)(v69 - 208);
  if (v79)
  {
    v81 = *(_QWORD *)(v69 - 200);
    v82 = *(void **)(v69 - 208);
    if (v81 != v79)
    {
      v83 = *(_QWORD *)(v69 - 200);
      do
      {
        v85 = *(void **)(v83 - 24);
        v83 -= 24;
        v84 = v85;
        if (v85)
        {
          *(_QWORD *)(v81 - 16) = v84;
          operator delete(v84);
        }
        v81 = v83;
      }
      while (v83 != v79);
      v82 = *(void **)(v69 - 208);
    }
    *(_QWORD *)(v69 - 200) = v79;
    operator delete(v82);
    v80 = *(void ***)(v69 - 184);
    if (!v80)
LABEL_35:
      _Unwind_Resume(a1);
  }
  else
  {
    v80 = *(void ***)(v69 - 184);
    if (!v80)
      goto LABEL_35;
  }
  v86 = *(void ***)(v69 - 176);
  v87 = v80;
  if (v86 != v80)
  {
    do
    {
      if (*((char *)v86 - 1) < 0)
        operator delete(*(v86 - 3));
      v86 -= 3;
    }
    while (v86 != v80);
    v87 = *(void ***)(v69 - 184);
  }
  *(_QWORD *)(v69 - 176) = v80;
  operator delete(v87);
  _Unwind_Resume(a1);
}

void sub_19C1B4824()
{
  JUMPOUT(0x19C1B4C0CLL);
}

void sub_19C1B482C()
{
  JUMPOUT(0x19C1B4CCCLL);
}

void sub_19C1B4838()
{
  JUMPOUT(0x19C1B4C84);
}

void sub_19C1B4840()
{
  JUMPOUT(0x19C1B4C3CLL);
}

void sub_19C1B4848()
{
  JUMPOUT(0x19C1B4CDCLL);
}

void sub_19C1B4850()
{
  JUMPOUT(0x19C1B4CE8);
}

void sub_19C1B4858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  void *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  v40 = (void *)STACK[0x7D0];
  if (STACK[0x7D0])
  {
    STACK[0x7D8] = (unint64_t)v40;
    operator delete(v40);
    v41 = (void *)STACK[0x430];
    if (!STACK[0x430])
    {
LABEL_3:
      v42 = a40;
      if (!a40)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    v41 = (void *)STACK[0x430];
    if (!STACK[0x430])
      goto LABEL_3;
  }
  STACK[0x438] = (unint64_t)v41;
  operator delete(v41);
  v42 = a40;
  if (!a40)
    goto LABEL_11;
LABEL_7:
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
    std::__shared_weak_count::__release_weak(a40);
  }
LABEL_11:
  JUMPOUT(0x19C1B4BC8);
}

void sub_19C1B4868()
{
  if (SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  sub_19C17F4B4((uint64_t)&STACK[0x728]);
  sub_19C17F4B4((uint64_t)&STACK[0x738]);
  sub_19C17F4B4((uint64_t)&STACK[0x748]);
  sub_19C17F4B4((uint64_t)&STACK[0x7F0]);
  JUMPOUT(0x19C1B49CCLL);
}

void sub_19C1B48B8()
{
  if (SLOBYTE(STACK[0x7E7]) < 0)
    operator delete((void *)STACK[0x7D0]);
  sub_19C07AD50((void **)&STACK[0x430]);
  sub_19C07AD50((void **)&STACK[0x5C0]);
  JUMPOUT(0x19C1B48DCLL);
}

void sub_19C1B4918()
{
  sub_19C1AB4C0((void **)&STACK[0x430]);
  JUMPOUT(0x19C1B4C3CLL);
}

void sub_19C1B4928()
{
  JUMPOUT(0x19C1B49CCLL);
}

void sub_19C1B4938()
{
  JUMPOUT(0x19C1B49CCLL);
}

void sub_19C1B4948()
{
  JUMPOUT(0x19C1B49C8);
}

void sub_19C1B4A10()
{
  JUMPOUT(0x19C1B4A20);
}

void sub_19C1B4B40()
{
  JUMPOUT(0x19C1B4B58);
}

void sub_19C1B4DAC(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F870], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B5090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B50AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B50F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19C1B5138(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F850], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B541C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B5438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B547C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19C1B54C4(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F878], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B57A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B57C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B5808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19C1B5850(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, uint64_t *a4@<X8>)
{
  void **v7;
  void **v8;
  void *v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  uint64_t v15;
  void *v16;
  void **v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_19C1B8190(&v16, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v14 = 0;
  v15 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  sub_19C1B9D98(a1, (uint64_t *)&v16, (uint64_t *)&__p, a4);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v14;
    v9 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v14 = v7;
    operator delete(v9);
  }
  v10 = (void **)v16;
  if (v16)
  {
    v11 = v17;
    v12 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = v16;
    }
    v17 = v10;
    operator delete(v12);
  }
}

void sub_19C1B599C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  sub_19C07AD50(&a9);
  sub_19C07AD50(&a12);
  _Unwind_Resume(a1);
}

void sub_19C1B59B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C07AD50((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1B59CC(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, uint64_t *a4@<X8>)
{
  void **v7;
  void **v8;
  void *v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  uint64_t v15;
  void *v16;
  void **v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_19C1B8190(&v16, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v14 = 0;
  v15 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  sub_19C1BA014(a1, (uint64_t *)&v16, (uint64_t *)&__p, a4);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v14;
    v9 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v14 = v7;
    operator delete(v9);
  }
  v10 = (void **)v16;
  if (v16)
  {
    v11 = v17;
    v12 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = v16;
    }
    v17 = v10;
    operator delete(v12);
  }
}

void sub_19C1B5B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  sub_19C07AD50(&a9);
  sub_19C07AD50(&a12);
  _Unwind_Resume(a1);
}

void sub_19C1B5B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C07AD50((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1B5B48(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F860], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B5E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B5E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B5E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19C1B5ED4(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F830], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B61B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B61D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B6218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19C1B6260(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F848], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B6544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B6560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B65A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t sub_19C1B65EC@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  char *v10;
  uint64_t result;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &unk_1E3D24FC0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 3) = &unk_1E3D219F0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a1;
  result = Espresso::kern_alloc((Espresso *)(4 * a1 * (uint64_t)a2 * a3 * a4));
  *((_QWORD *)v10 + 5) = result;
  v10[48] = 1;
  *a5 = v10 + 24;
  a5[1] = v10;
  return result;
}

void sub_19C1B66A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::blob_rtti_root *v2;
  std::__shared_weak_count *shared_owners;
  void *v5;

  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners)
    sub_19C256078(shared_owners);
  sub_19C25603C((uint64_t)v1);
  Espresso::blob_rtti_root::~blob_rtti_root(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_19C1B66D4(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F868], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B69B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B69D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B6A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19C1B6A60(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F840], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B6D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B6D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B6DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19C1B6DEC(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F858], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B70D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B70EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B7130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_19C1B7178(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, uint64_t *a4@<X8>)
{
  void **v7;
  void **v8;
  void *v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  uint64_t v15;
  void *v16;
  void **v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_19C1B8190(&v16, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v14 = 0;
  v15 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  sub_19C1BA7B0(a1, (uint64_t *)&v16, (uint64_t *)&__p, a4);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v14;
    v9 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v14 = v7;
    operator delete(v9);
  }
  v10 = (void **)v16;
  if (v16)
  {
    v11 = v17;
    v12 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = v16;
    }
    v17 = v10;
    operator delete(v12);
  }
}

void sub_19C1B72C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  sub_19C07AD50(&a9);
  sub_19C07AD50(&a12);
  _Unwind_Resume(a1);
}

void sub_19C1B72E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C07AD50((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1B72F4(_QWORD *a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  void *__p;
  void **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  std::string v36;
  void *lpsrc;
  std::__shared_weak_count *v38;

  LODWORD(v36.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = lpsrc;
  if (!lpsrc || (v9 = __dynamic_cast(lpsrc, MEMORY[0x1E0D1F828], MEMORY[0x1E0D1F838], 0)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v38;
  *a4 = v9;
  a4[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v34 = v8;
  v35 = v38;
  if (v38)
  {
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C1B8190(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v29 = 0;
  v30 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel();
  v15 = (void **)__p;
  if (__p)
  {
    v16 = v29;
    v17 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = __p;
    }
    v29 = v15;
    operator delete(v17);
  }
  v18 = (void **)v31;
  if (v31)
  {
    v19 = v32;
    v20 = v31;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = v31;
    }
    v32 = v18;
    operator delete(v20);
  }
  v21 = v35;
  if (!v35)
    goto LABEL_29;
  v22 = (unint64_t *)&v35->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_29:
    if (!*a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (*a1)
LABEL_30:
    Espresso::sequential_builder::add_shape_from_kernel();
LABEL_31:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19C1B75D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_19C17F4B4(v13);
  sub_19C17F4B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1B75F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  sub_19C17F4B4((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_19C1B7638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;
  void *v25;
  int v26;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      sub_19C17F4B4(v24);
      sub_19C17F4B4((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t sub_19C1B7680(uint64_t a1, const char *a2, _QWORD *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v17[3];
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD v22[25];
  uint64_t v23;
  std::__shared_weak_count *v24;

  LODWORD(v22[0]) = 0;
  sub_19C1B7824((Espresso::abstract_engine_factory *)v22, &v23);
  v20 = v23;
  v21 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v18 = 0;
  v19 = 0;
  MEMORY[0x1A1AD186C](v22, &v20, 0, &v18);
  v7 = v19;
  if (v19)
  {
    v8 = (unint64_t *)&v19->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v21;
  if (v21)
  {
    v11 = (unint64_t *)&v21->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_19C1AD258(v22, a3, a2, v17);
  sub_19C1B82C8((uint64_t)v17, (char *)v17[1]);
  sub_19C1B7E6C((uint64_t)v22);
  v13 = v24;
  if (!v24)
    return 1;
  v14 = (unint64_t *)&v24->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return 1;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return 1;
}

void sub_19C1B77E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_19C1B7E6C((uint64_t)va);
  sub_19C17F4B4(v8 - 48);
  _Unwind_Resume(a1);
}

void sub_19C1B7800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_19C17F4B4((uint64_t)va);
  sub_19C17F4B4((uint64_t)va1);
  sub_19C17F4B4(v4 - 48);
  _Unwind_Resume(a1);
}

void sub_19C1B7824(Espresso::abstract_engine_factory *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  uint64_t *p_shared_owners;
  unint64_t v6;
  Espresso *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  Espresso *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  Espresso::abstract_engine_factory::shared(a1);
  Espresso::abstract_engine_factory::engine_for_platform();
  if (!v14)
    goto LABEL_5;
  p_shared_owners = &v14->__shared_owners_;
  do
    v6 = __ldaxr((unint64_t *)p_shared_owners);
  while (__stlxr(v6 - 1, (unint64_t *)p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v7 = v12;
    if (v12)
    {
LABEL_6:
      (*(void (**)(Espresso *, Espresso **, uint64_t))(*(_QWORD *)v7 + 32))(v7, &v12, 0xFFFFFFFFLL);
      v8 = v13;
      if (!v13)
        return;
      goto LABEL_11;
    }
  }
  else
  {
LABEL_5:
    v7 = v12;
    if (v12)
      goto LABEL_6;
  }
  v9 = Espresso::espresso_os_log_subsystem(v7, v4);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    sub_19C2560B0((int *)a1, v9);
    *a2 = 0;
    a2[1] = 0;
    v8 = v13;
    if (!v13)
      return;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    v8 = v13;
    if (!v13)
      return;
  }
LABEL_11:
  v10 = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_19C1B7954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;

  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)())v26->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v23 = __cxa_begin_catch(exception_object);
  v25 = Espresso::espresso_os_log_subsystem(0, v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    sub_19C256128((uint64_t)v23, v25);
  *v18 = 0;
  v18[1] = 0;
  __cxa_end_catch();
}

uint64_t sub_19C1B7A28(uint64_t a1)
{
  void *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  char *v8;
  const char *v9;
  int v10;
  int v11;
  int v13;

  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 68))
    {
      v3 = (char *)operator new(0x28uLL);
      v4 = v3;
      strcpy(v3, "do-not-us-this-path,from-raw-buffer");
      v5 = *(unsigned __int8 *)(a1 + 39);
      if ((v5 & 0x80u) == 0)
        v6 = *(unsigned __int8 *)(a1 + 39);
      else
        v6 = *(_QWORD *)(a1 + 24);
      if (v6 != 35)
      {
LABEL_20:
        operator delete(v3);
LABEL_21:
        munmap(*(void **)a1, *(_QWORD *)(a1 + 8));
        goto LABEL_22;
      }
      v7 = (const void **)(a1 + 16);
      if ((v5 & 0x80) == 0)
      {
        if (!*(_BYTE *)(a1 + 39))
        {
LABEL_12:
          operator delete(v3);
          goto LABEL_22;
        }
        v8 = v3;
        while (*(unsigned __int8 *)v7 == *v8)
        {
          v7 = (const void **)((char *)v7 + 1);
          ++v8;
          if (!--v5)
            goto LABEL_12;
        }
        goto LABEL_20;
      }
      v13 = memcmp(*v7, v3, *(_QWORD *)(a1 + 24));
      operator delete(v4);
      if (v13)
        goto LABEL_21;
    }
    else
    {
      if (*(_DWORD *)(a1 + 64) != 2)
        goto LABEL_19;
      v9 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v9 = *(const char **)v9;
      v10 = open(v9, 2);
      v11 = v10;
      v2 = *(void **)a1;
      if ((v10 & 0x80000000) == 0)
      {
        write(v10, v2, *(_QWORD *)(a1 + 8));
        close(v11);
        v2 = *(void **)a1;
      }
      if (v2)
LABEL_19:
        operator delete[](v2);
    }
  }
LABEL_22:
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_19C1B7BAC(uint64_t a1, __int128 *a2, __int128 *a3, int a4)
{
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  const char *v13;
  int v14;
  const char *v15;
  int v16;
  int st_size;
  size_t v18;
  void *v19;
  void *v20;
  stat v22;
  uint64_t v23;
  int v24;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19C07C6E8((_BYTE *)(a1 + 16), *(void **)a2, *((_QWORD *)a2 + 1));
    v9 = a1 + 40;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v8;
    v9 = a1 + 40;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v10 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = v10;
      goto LABEL_6;
    }
  }
  sub_19C07C6E8((_BYTE *)v9, *(void **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a4;
  *(_DWORD *)(a1 + 72) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    v12 = *((_QWORD *)a3 + 1);
    if (v12 != 1 || **(_BYTE **)a3 != 114)
    {
      if (v12 != 2 || **(_WORD **)a3 != 11122)
LABEL_33:
        sub_19C2210D4(11);
      goto LABEL_15;
    }
  }
  else
  {
    v11 = *((unsigned __int8 *)a3 + 23);
    if (v11 != 1)
    {
      if (v11 != 2 || *(_WORD *)a3 != 11122)
        goto LABEL_33;
LABEL_15:
      *(_DWORD *)(a1 + 64) = 514;
      if (*((char *)a2 + 23) >= 0)
        v13 = (const char *)a2;
      else
        v13 = *(const char **)a2;
      v14 = open(v13, 514, 384);
      goto LABEL_24;
    }
    if (*(_BYTE *)a3 != 114)
      goto LABEL_33;
  }
  *(_DWORD *)(a1 + 64) = 0;
  if (*((char *)a2 + 23) >= 0)
    v15 = (const char *)a2;
  else
    v15 = *(const char **)a2;
  v14 = open(v15, 0);
LABEL_24:
  v16 = v14;
  if (v14 < 0)
    goto LABEL_33;
  if (fstat(v14, &v22) < 0)
    goto LABEL_32;
  st_size = v22.st_size;
  *(_QWORD *)(a1 + 8) = v22.st_size;
  v23 = 0;
  v24 = st_size;
  fcntl(v16, 44, &v23);
  v18 = *(_QWORD *)(a1 + 8);
  if (!a4)
  {
    v20 = (void *)operator new[]();
    *(_QWORD *)a1 = v20;
    if ((read(v16, v20, *(_QWORD *)(a1 + 8)) & 0x8000000000000000) == 0)
      goto LABEL_31;
LABEL_32:
    close(v16);
    goto LABEL_33;
  }
  if (v18)
  {
    v19 = mmap(0, v18, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v16, 0);
    if (v19 == (void *)-1)
    {
      close(v16);
      sub_19C2210D4(11);
    }
    *(_QWORD *)a1 = v19;
  }
LABEL_31:
  close(v16);
  return a1;
}

void sub_19C1B7DF4(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if ((*(char *)(v2 + 39) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_19C1B7E44(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

void sub_19C1B7E58(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

uint64_t sub_19C1B7E6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v13;
  unint64_t v14;

  sub_19C1B7FC8(a1 + 136);
  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_15:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_19:
    operator delete(*(void **)(a1 + 56));
    sub_19C07C924(a1 + 16, *(_QWORD **)(a1 + 24));
    v11 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v11)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_19;
LABEL_16:
  sub_19C07C924(a1 + 16, *(_QWORD **)(a1 + 24));
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v11)
    return a1;
LABEL_20:
  v13 = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

uint64_t sub_19C1B7FC8(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 / 0xAA];
  v6 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
  v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
  if (v6 == v7)
    goto LABEL_14;
  do
  {
    v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_9:
      v6 += 24;
      if (v6 - (_QWORD)*v5 != 4080)
        continue;
LABEL_10:
      v11 = (unint64_t)v5[1];
      ++v5;
      v6 = v11;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v6 += 24;
    if (v6 - (_QWORD)*v5 == 4080)
      goto LABEL_10;
  }
  while (v6 != v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_14:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_16:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 85;
LABEL_21:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 170;
    goto LABEL_21;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_19C1B8190(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C07DA0C();
    result = operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 / 8];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = sub_19C07C6E8(&v8[v9 / 8], *(void **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)v10 = *(_OWORD *)v11;
          v10[2] = *(_QWORD *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19C1B8274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C18239C(&a9);
  _Unwind_Resume(a1);
}

void sub_19C1B82C8(uint64_t a1, char *a2)
{
  void *v4;

  if (a2)
  {
    sub_19C1B82C8(a1, *(_QWORD *)a2);
    sub_19C1B82C8(a1, *((_QWORD *)a2 + 1));
    v4 = (void *)*((_QWORD *)a2 + 12);
    if (v4)
    {
      *((_QWORD *)a2 + 13) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

char *sub_19C1B8338(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_19C1B8550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C07DBF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C1B8564(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x40uLL);
    v24 = v23 + 32;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19C07C6E8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    *((_WORD *)v23 + 28) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_19C07CC40(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19C1B86EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C1B8700(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  char *v28;
  _BYTE *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_19C07D2D0((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (char *)operator new(0x30uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v11;
  v29 = v28 + 16;
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19C07C6E8(v29, *(void **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v30 + 2);
    *(_OWORD *)v29 = v31;
  }
  *((_DWORD *)v28 + 10) = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        sub_19C07D71C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19C1B8B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080830((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C1B8B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080830((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_19C1B8B78(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = a1[1] - *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3) + 1;
  if (v4 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07C7FC();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[8 * (v3 >> 3)];
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = 0;
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_QWORD *)&v8[v3 + 16] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12)
      return v11;
    goto LABEL_17;
  }
  do
  {
    v14 = *(_OWORD *)(v12 - 24);
    v12 -= 24;
    *(_OWORD *)(v9 - 24) = v14;
    v9 -= 24;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v12 + 2);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
  }
  while (v12 != v13);
  v15 = *a1;
  v12 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v15)
  {
    v16 = v12;
    do
    {
      v18 = (void *)*((_QWORD *)v16 - 3);
      v16 -= 24;
      v17 = v18;
      if (v18)
      {
        *((_QWORD *)v12 - 2) = v17;
        operator delete(v17);
      }
      v12 = v16;
    }
    while (v16 != v15);
    v12 = v15;
  }
  if (v12)
LABEL_17:
    operator delete(v12);
  return v11;
}

char *sub_19C1B8CE0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3) + 1;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * (v5 >> 3)];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v12 = *(const void **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v13)
  {
    v14 = &v9[v5];
    if (v13 < 0)
      sub_19C07DA0C();
    v15 = (char *)operator new(v13);
    *(_QWORD *)v10 = v15;
    v16 = &v15[4 * (v13 >> 2)];
    *((_QWORD *)v14 + 1) = v15;
    *((_QWORD *)v14 + 2) = v16;
    memcpy(v15, v12, v13);
    *((_QWORD *)v14 + 1) = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_19C1B8EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  sub_19C0889DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C1B8EE0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x78uLL);
    v24 = v23 + 32;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19C07C6E8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    *((_QWORD *)v23 + 14) = 0;
    *((_OWORD *)v23 + 5) = 0u;
    *((_OWORD *)v23 + 6) = 0u;
    *(_OWORD *)(v23 + 56) = xmmword_19C278040;
    *((_QWORD *)v23 + 9) = 0xFFFFFFFF00000001;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_19C07CC40(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19C1B9088(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_19C1B909C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  char *v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (char *)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *(uint64_t **)v11;
        v7 = (uint64_t **)v11;
        if (!*(_QWORD *)v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v6 = (uint64_t *)*((_QWORD *)v11 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v11 + 8);
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = (char *)(a1 + 1);
LABEL_27:
    v23 = v11;
    v11 = (char *)operator new(0x78uLL);
    v24 = *a4;
    v25 = *((_QWORD *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    *((_QWORD *)v11 + 6) = v25;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_QWORD *)v11 + 14) = 0;
    *(_OWORD *)(v11 + 56) = xmmword_19C278040;
    *((_QWORD *)v11 + 9) = 0xFFFFFFFF00000001;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v23;
    *v7 = (uint64_t *)v11;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      v27 = *v7;
    }
    sub_19C07CC40(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t *sub_19C1B9234(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_19C07D71C(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19C1B9520(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char **sub_19C1B9534(char **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  int v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 59)
      sub_19C07DA0C();
    v6 = 32 * a2;
    v7 = (char *)operator new(32 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[32 * a2];
    a1[2] = v8;
    v9 = *(char *)(a3 + 23);
    if (v9 < 0)
    {
      while (1)
      {
        v6 -= 32;
        if ((v9 & 0x80) != 0)
        {
          sub_19C07C6E8(v7, *(void **)a3, *(_QWORD *)(a3 + 8));
        }
        else
        {
          *(_OWORD *)v7 = *(_OWORD *)a3;
          *((_QWORD *)v7 + 2) = *(_QWORD *)(a3 + 16);
        }
        *((_DWORD *)v7 + 6) = *(_DWORD *)(a3 + 24);
        if (!v6)
          break;
        v7 += 32;
        LOBYTE(v9) = *(_BYTE *)(a3 + 23);
      }
    }
    else
    {
      v10 = *(_DWORD *)(a3 + 24);
      do
      {
        *(_OWORD *)v7 = *(_OWORD *)a3;
        *((_QWORD *)v7 + 2) = *(_QWORD *)(a3 + 16);
        *((_DWORD *)v7 + 6) = v10;
        v7 += 32;
      }
      while (v7 != v8);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_19C1B9628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C1B9654(&a9);
  _Unwind_Resume(a1);
}

void sub_19C1B963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_19C1B9654(&a9);
  _Unwind_Resume(a1);
}

void ***sub_19C1B9654(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_19C1B96E8(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  unint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 5)
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (v10[-1].__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)v10[-2].__r_.__value_.__r.__words[2]);
          v10 = (std::string *)((char *)v10 - 32);
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 59)
      goto LABEL_43;
    v20 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v20 = __sz;
    v21 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v22 = 0x7FFFFFFFFFFFFFFLL;
    if (!v21)
      v22 = v20;
    if (v22 >> 59)
LABEL_43:
      sub_19C07DA0C();
    v23 = 32 * v22;
    v9 = (std::string *)operator new(32 * v22);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = (char *)v9 + v23;
    if (v6 != a3)
    {
      v24 = 0;
      do
      {
        v25 = (char *)v9 + v24;
        v26 = (char *)v6 + v24;
        if (SHIBYTE(v6->__r_.__value_.__r.__words[v24 / 8 + 2]) < 0)
        {
          sub_19C07C6E8((_BYTE *)v9 + v24, *(void **)v26, *((_QWORD *)v26 + 1));
        }
        else
        {
          *(_OWORD *)v25 = *(_OWORD *)v26;
          *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
        }
        *(_DWORD *)((char *)&v9[1].__r_.__value_.__l.__data_ + v24) = *(_DWORD *)((char *)&v6[1].__r_.__value_.__l.__data_
                                                                                + v24);
        v24 += 32;
      }
      while ((std::string *)((char *)v6 + v24) != a3);
      v9 = (std::string *)((char *)v9 + v24);
    }
LABEL_40:
    *(_QWORD *)(a1 + 8) = v9;
    return;
  }
  v12 = *(std::string **)(a1 + 8);
  v13 = ((char *)v12 - (char *)v9) >> 5;
  if (v13 >= __sz)
  {
    if (__str != a3)
    {
      do
      {
        std::string::operator=(v9, v6);
        LODWORD(v9[1].__r_.__value_.__l.__data_) = v6[1].__r_.__value_.__l.__data_;
        v9 = (std::string *)((char *)v9 + 32);
        v6 = (std::string *)((char *)v6 + 32);
      }
      while (v6 != a3);
      v12 = *(std::string **)(a1 + 8);
    }
    while (v12 != v9)
    {
      if (v12[-1].__r_.__value_.__s.__data_[15] < 0)
        operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
      v12 = (std::string *)((char *)v12 - 32);
    }
    goto LABEL_40;
  }
  v14 = (std::string *)((char *)__str + 32 * v13);
  if (v12 != v9)
  {
    do
    {
      std::string::operator=(v9, v6);
      LODWORD(v9[1].__r_.__value_.__l.__data_) = v6[1].__r_.__value_.__l.__data_;
      v6 = (std::string *)((char *)v6 + 32);
      v9 = (std::string *)((char *)v9 + 32);
    }
    while (v6 != v14);
    v9 = *(std::string **)(a1 + 8);
  }
  v15 = v9;
  if (v14 != a3)
  {
    v16 = 0;
    do
    {
      v18 = (char *)v9 + v16;
      v19 = (char *)v14 + v16;
      if (SHIBYTE(v14->__r_.__value_.__r.__words[v16 / 8 + 2]) < 0)
      {
        sub_19C07C6E8((_BYTE *)v9 + v16, *(void **)v19, *((_QWORD *)v19 + 1));
      }
      else
      {
        v17 = *(_OWORD *)v19;
        *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v18 = v17;
      }
      *(_DWORD *)((char *)&v9[1].__r_.__value_.__l.__data_ + v16) = *(_DWORD *)((char *)&v14[1].__r_.__value_.__l.__data_
                                                                              + v16);
      v16 += 32;
    }
    while ((std::string *)((char *)v14 + v16) != a3);
    v15 = (std::string *)((char *)v9 + v16);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_19C1B99C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E3D24FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C1B99DC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E3D24FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_19C1B9A00(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C1B9A10(Espresso::blob_rtti_root *this, void *a2)
{
  Espresso *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &unk_1E3D21A10;
  if (*((_BYTE *)this + 24))
  {
    v3 = (Espresso *)*((_QWORD *)this + 2);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *((_QWORD *)this + 2) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v7)
    goto LABEL_13;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
  else
  {
LABEL_13:
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
}

void sub_19C1B9ADC(Espresso::blob_rtti_root *this, void *a2)
{
  Espresso *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;

  *(_QWORD *)this = &unk_1E3D21A10;
  if (*((_BYTE *)this + 24))
  {
    v3 = (Espresso *)*((_QWORD *)this + 2);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *((_QWORD *)this + 2) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v7)
    goto LABEL_13;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
  else
  {
LABEL_13:
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
  operator delete(v10);
}

void sub_19C1B9BB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E3D24FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C1B9BC4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E3D24FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_19C1B9BE8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C1B9BF8(Espresso::blob_rtti_root *this, void *a2)
{
  Espresso *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &unk_1E3D219F0;
  if (*((_BYTE *)this + 24))
  {
    v3 = (Espresso *)*((_QWORD *)this + 2);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *((_QWORD *)this + 2) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v7)
    goto LABEL_13;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
  else
  {
LABEL_13:
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
}

void sub_19C1B9CC4(Espresso::blob_rtti_root *this, void *a2)
{
  Espresso *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;

  *(_QWORD *)this = &unk_1E3D219F0;
  if (*((_BYTE *)this + 24))
  {
    v3 = (Espresso *)*((_QWORD *)this + 2);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *((_QWORD *)this + 2) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v7)
    goto LABEL_13;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
  else
  {
LABEL_13:
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
  operator delete(v10);
}

void sub_19C1B9D98(_QWORD *a1@<X0>, uint64_t *a2@<X5>, uint64_t *a3@<X6>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  void **v14;
  void **v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p;
  void **v21;
  uint64_t v22;
  void *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;

  v28 = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = (std::__shared_weak_count *)a4[1];
  v26 = *a4;
  v27 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_19C1B8190(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v21 = 0;
  v22 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v11 = (void **)__p;
  if (__p)
  {
    v12 = v21;
    v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v21 = v11;
    operator delete(v13);
  }
  v14 = (void **)v23;
  if (v23)
  {
    v15 = v24;
    v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v14);
      v16 = v23;
    }
    v24 = v14;
    operator delete(v16);
  }
  v17 = v27;
  if (!v27)
    goto LABEL_24;
  v18 = (unint64_t *)&v27->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!*a1)
      return;
  }
  else
  {
LABEL_24:
    if (!*a1)
      return;
  }
  Espresso::sequential_builder::add_shape_from_kernel();
}

void sub_19C1B9FB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C17F4B4(v1);
  _Unwind_Resume(a1);
}

void sub_19C1B9FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  _Unwind_Resume(a1);
}

void sub_19C1B9FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_19C17F4B4((uint64_t)va);
  sub_19C17F4B4(v8);
  _Unwind_Resume(a1);
}

void sub_19C1BA014(_QWORD *a1@<X0>, uint64_t *a2@<X5>, uint64_t *a3@<X6>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  void **v14;
  void **v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p;
  void **v21;
  uint64_t v22;
  void *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;

  v28 = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = (std::__shared_weak_count *)a4[1];
  v26 = *a4;
  v27 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_19C1B8190(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v21 = 0;
  v22 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v11 = (void **)__p;
  if (__p)
  {
    v12 = v21;
    v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v21 = v11;
    operator delete(v13);
  }
  v14 = (void **)v23;
  if (v23)
  {
    v15 = v24;
    v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v14);
      v16 = v23;
    }
    v24 = v14;
    operator delete(v16);
  }
  v17 = v27;
  if (!v27)
    goto LABEL_24;
  v18 = (unint64_t *)&v27->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!*a1)
      return;
  }
  else
  {
LABEL_24:
    if (!*a1)
      return;
  }
  Espresso::sequential_builder::add_shape_from_kernel();
}

void sub_19C1BA22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C17F4B4(v1);
  _Unwind_Resume(a1);
}

void sub_19C1BA240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  _Unwind_Resume(a1);
}

void sub_19C1BA274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_19C17F4B4((uint64_t)va);
  sub_19C17F4B4(v8);
  _Unwind_Resume(a1);
}

void sub_19C1BA290(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E3D25030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C1BA2A4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E3D25030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_19C1BA2C8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C1BA2D8(Espresso::blob_rtti_root *this, void *a2)
{
  Espresso *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &unk_1E3D21A30;
  if (*((_BYTE *)this + 32))
  {
    v3 = (Espresso *)*((_QWORD *)this + 3);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *((_QWORD *)this + 3) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v7)
    goto LABEL_13;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
  else
  {
LABEL_13:
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
}

void sub_19C1BA3A4(Espresso::blob_rtti_root *this, void *a2)
{
  Espresso *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;

  *(_QWORD *)this = &unk_1E3D21A30;
  if (*((_BYTE *)this + 32))
  {
    v3 = (Espresso *)*((_QWORD *)this + 3);
    if (v3)
      Espresso::kern_dealloc(v3, a2);
  }
  *((_QWORD *)this + 3) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v7)
    goto LABEL_13;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
  else
  {
LABEL_13:
    Espresso::blob_rtti_root::~blob_rtti_root(this);
  }
  operator delete(v10);
}

_QWORD *sub_19C1BA478(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  __int128 v10;
  _QWORD *v11;
  __int128 *v12;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C07DA0C();
    result = operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v11 = &v8[v9 / 8];
        v12 = (__int128 *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = sub_19C07C6E8(&v8[v9 / 8], *(void **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v10 = *v12;
          v11[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)v11 = v10;
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19C1BA55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C18239C(&a9);
  _Unwind_Resume(a1);
}

char *sub_19C1BA5B0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3) + 1;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * (v5 >> 3)];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v12 = *(const void **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v13)
  {
    v14 = &v9[v5];
    if (v13 < 0)
      sub_19C07DA0C();
    v15 = (char *)operator new(v13);
    *(_QWORD *)v10 = v15;
    v16 = &v15[4 * (v13 >> 2)];
    *((_QWORD *)v14 + 1) = v15;
    *((_QWORD *)v14 + 2) = v16;
    memcpy(v15, v12, v13);
    *((_QWORD *)v14 + 1) = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_19C1BA78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  sub_19C0889DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1BA7B0(_QWORD *a1@<X0>, uint64_t *a2@<X5>, uint64_t *a3@<X6>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  void **v14;
  void **v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p;
  void **v21;
  uint64_t v22;
  void *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;

  v28 = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv();
  v8 = (std::__shared_weak_count *)a4[1];
  v26 = *a4;
  v27 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_19C1B8190(&v23, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  __p = 0;
  v21 = 0;
  v22 = 0;
  sub_19C1B8190(&__p, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  Espresso::sequential_builder::add_kernel_dbg();
  v11 = (void **)__p;
  if (__p)
  {
    v12 = v21;
    v13 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v21 = v11;
    operator delete(v13);
  }
  v14 = (void **)v23;
  if (v23)
  {
    v15 = v24;
    v16 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v14);
      v16 = v23;
    }
    v24 = v14;
    operator delete(v16);
  }
  v17 = v27;
  if (!v27)
    goto LABEL_24;
  v18 = (unint64_t *)&v27->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!*a1)
      return;
  }
  else
  {
LABEL_24:
    if (!*a1)
      return;
  }
  Espresso::sequential_builder::add_shape_from_kernel();
}

void sub_19C1BA9C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C17F4B4(v1);
  _Unwind_Resume(a1);
}

void sub_19C1BA9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  sub_19C07AD50((void **)va);
  sub_19C07AD50((void **)va1);
  sub_19C17F4B4((uint64_t)va2);
  sub_19C17F4B4(v2);
  _Unwind_Resume(a1);
}

void sub_19C1BAA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_19C17F4B4((uint64_t)va);
  sub_19C17F4B4(v8);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C1BAA2C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x50uLL);
    v24 = *a4;
    v25 = (uint64_t *)*((_QWORD *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v11[8] = 0;
    v11[9] = 0;
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *v7 = (uint64_t *)v11;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      v27 = *v7;
    }
    sub_19C07CC40(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t sub_19C1BABA8()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_19C1BABB8(std::__shared_weak_count *this)
{
  std::__shared_weak_count::__release_weak(this);
}

void sub_19C1BABC0(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void sub_19C1BAC88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19C1BACA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1BAD48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C1BAE10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C1BAE30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C1BAE4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C1BAF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_19C1BAFB4()
{
  JUMPOUT(0x19C1BAF98);
}

void sub_19C1BAFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C1BB02C(_BOOL8 *a1)
{
  char *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  unint64_t i;
  void *v7;
  std::runtime_error *exception;
  char *v9[3];
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef cf[2];

  cf[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  sub_19C1C1A00("Name", &v10);
  sub_19C1C1A00("MinimumValue", &v11);
  sub_19C1C1A00("MaximumValue", &v12);
  sub_19C1C1A00("Dimension", &v13);
  sub_19C1C1A00("Type", cf);
  v9[0] = (char *)&v10;
  v9[1] = (char *)5;
  v2 = (char *)sub_19C1C370C(v9);
  v9[2] = v2;
  if (cf[0])
    CFRelease(cf[0]);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  if (v2)
  {
    Count = CFArrayGetCount((CFArrayRef)v2);
    v4 = CFArrayGetCount((CFArrayRef)v2);
    if (Count)
    {
      v5 = v4;
      for (i = 0; i != Count; ++i)
      {
        if (v5 == i)
          break;
        sub_19C1C38B0((const __CFArray *)v2, i, &v10);
        if (!*a1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (!sub_19C1C39A4(*a1, (const UInt8 *)&v10))
        {
          v7 = __cxa_allocate_exception(0x28uLL);
          sub_19C1BB2FC((uint64_t)v7, "Missing required key: ", (uint64_t)&v10);
          __cxa_throw(v7, (struct type_info *)&unk_1E3D1D7B8, (void (*)(void *))sub_19C1BB384);
        }
        if (SHIBYTE(v12) < 0)
          operator delete((void *)v10);
      }
    }
    CFRelease(v2);
  }
}

void sub_19C1BB240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_19C07AF7C(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1BB2FC(uint64_t a1, const char *a2, uint64_t a3)
{
  const char **v4;
  const char *v5;

  v4 = (const char **)(a1 + 16);
  sub_19C1C3AC4("[InvalidArgument] ", a2, a3);
  *(_QWORD *)a1 = &unk_1E3D21978;
  v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0)
    v5 = *v4;
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(_QWORD *)a1 = &unk_1E3D21978;
  return a1;
}

void sub_19C1BB368(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1BB384(uint64_t a1)
{
  if (*(char *)(MEMORY[0x1A1AD19BC]() + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C1BB3C8(_BOOL8 *a1, uint64_t *a2)
{
  void **v3;
  void **v4;
  __int128 v5;
  void **v6;
  void *v7;
  std::runtime_error *exception;
  void *v9;
  void *__p[2];
  void *v11;
  void *v12;
  void **v13;

  sub_19C1BB588(a2, (uint64_t)&v12);
  v3 = (void **)v12;
  v4 = v13;
  if (v12 == v13)
  {
    if (!v12)
      return;
    goto LABEL_13;
  }
  do
  {
    if (*((char *)v3 + 23) < 0)
    {
      sub_19C07C6E8(__p, *v3, (unint64_t)v3[1]);
    }
    else
    {
      v5 = *(_OWORD *)v3;
      v11 = v3[2];
      *(_OWORD *)__p = v5;
    }
    if (!*a1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!sub_19C1C39A4(*a1, (const UInt8 *)__p))
    {
      v9 = __cxa_allocate_exception(0x28uLL);
      sub_19C1BB75C((uint64_t)v9, "Missing parameter value for parameter with name=", (uint64_t)__p);
      __cxa_throw(v9, (struct type_info *)&unk_1E3D1D7B8, (void (*)(void *))sub_19C1BB384);
    }
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
    v3 += 3;
  }
  while (v3 != v4);
  v3 = (void **)v12;
  if (v12)
  {
LABEL_13:
    v6 = v13;
    v7 = v3;
    if (v13 != v3)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v3);
      v7 = v12;
    }
    v13 = v3;
    operator delete(v7);
  }
}

void sub_19C1BB534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C07AD50((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1BB548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_19C07AD50(&a15);
  _Unwind_Resume(a1);
}

void sub_19C1BB588(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  __int128 v7;
  std::string *v8;
  std::string *v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  void *__p;
  std::string *v15;
  void *v16;
  void **v17;

  sub_19C1C2380(a1, &v16);
  sub_19C1C2444((uint64_t)a1, &__p);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (char *)v16;
  v5 = (char *)v17;
  if (v16 == v17)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      while ((unint64_t)v6 >= *(_QWORD *)(a2 + 16))
      {
        v6 = sub_19C07DA20((char **)a2, (uint64_t)v4);
        *(_QWORD *)(a2 + 8) = v6;
        v4 += 24;
        if (v4 == v5)
          goto LABEL_12;
      }
      if (v4[23] < 0)
      {
        sub_19C07C6E8(v6, *(void **)v4, *((_QWORD *)v4 + 1));
      }
      else
      {
        v7 = *(_OWORD *)v4;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
        *(_OWORD *)v6 = v7;
      }
      v6 += 24;
      *(_QWORD *)(a2 + 8) = v6;
      *(_QWORD *)(a2 + 8) = v6;
      v4 += 24;
    }
    while (v4 != v5);
  }
LABEL_12:
  sub_19C1C2508((void **)a2, (uint64_t)v6, (std::string *)__p, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (_BYTE *)__p) >> 3));
  v8 = (std::string *)__p;
  if (__p)
  {
    v9 = v15;
    v10 = __p;
    if (v15 != __p)
    {
      do
      {
        if (SHIBYTE(v9[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v9[-1].__r_.__value_.__l.__data_);
        --v9;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v15 = v8;
    operator delete(v10);
  }
  v11 = (void **)v16;
  if (v16)
  {
    v12 = v17;
    v13 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = v16;
    }
    v17 = v11;
    operator delete(v13);
  }
}

void sub_19C1BB714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void **v12;

  sub_19C07AD50(v12);
  sub_19C07AD50(&a9);
  sub_19C07AD50(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1BB75C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char **v4;
  const char *v5;

  v4 = (const char **)(a1 + 16);
  sub_19C1C3AC4("[InvalidArgument] ", a2, a3);
  *(_QWORD *)a1 = &unk_1E3D21978;
  v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0)
    v5 = *v4;
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(_QWORD *)a1 = &unk_1E3D21978;
  return a1;
}

void sub_19C1BB7C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_19C1BB7E4(CFTypeRef *a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  void **v13;
  void *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  void **v28;
  uint64_t v29;
  void *__p;
  void **v31;
  uint64_t v32;
  CFTypeRef v33;

  v6 = *a1;
  if (*a1)
    CFRetain(*a1);
  v33 = v6;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  sub_19C17AF88(&v27, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  v7 = a2[3];
  v8 = a2[4];
  __p = 0;
  v31 = 0;
  v32 = 0;
  sub_19C17B16C(&__p, v7, v8, 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 3));
  sub_19C1BB3C8((_BOOL8 *)&v33, (uint64_t *)&v27);
  v9 = (void **)__p;
  if (__p)
  {
    v10 = v31;
    v11 = __p;
    if (v31 != __p)
    {
      do
      {
        if (*((char *)v10 - 17) < 0)
          operator delete(*(v10 - 5));
        v10 -= 5;
      }
      while (v10 != v9);
      v11 = __p;
    }
    v31 = v9;
    operator delete(v11);
  }
  v12 = (void **)v27;
  if (v27)
  {
    v13 = v28;
    v14 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*((char *)v13 - 25) < 0)
          operator delete(*(v13 - 6));
        v13 -= 6;
      }
      while (v13 != v12);
      v14 = v27;
    }
    v28 = v12;
    operator delete(v14);
  }
  if (v6)
    CFRelease(v6);
  sub_19C1BBA8C((const __CFDictionary **)a1, (__int128 **)a2, (uint64_t)&v25);
  sub_19C1BBE38((const __CFDictionary **)a1, (__int128 **)a2 + 3, (uint64_t)&v23);
  sub_19C17B350(a3, (uint64_t *)&v25, (uint64_t *)&v23);
  v15 = (char *)v23;
  if (v23)
  {
    v16 = v24;
    v17 = v23;
    if (v24 != v23)
    {
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 4);
        if (v18)
        {
          *((_QWORD *)v16 - 3) = v18;
          operator delete(v18);
        }
        if (*(v16 - 33) < 0)
          operator delete(*((void **)v16 - 7));
        v16 -= 56;
      }
      while (v16 != v15);
      v17 = v23;
    }
    v24 = v15;
    operator delete(v17);
  }
  v19 = (char *)v25;
  if (v25)
  {
    v20 = v26;
    v21 = v25;
    if (v26 != v25)
    {
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 4);
        if (v22)
        {
          *((_QWORD *)v20 - 3) = v22;
          operator delete(v22);
        }
        if (*(v20 - 33) < 0)
          operator delete(*((void **)v20 - 7));
        v20 -= 56;
      }
      while (v20 != v19);
      v21 = v25;
    }
    v26 = v19;
    operator delete(v21);
  }
}

void sub_19C1BBA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C17A9E4((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1BBA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_19C17A75C((void **)va);
  sub_19C094494((const void **)(v8 - 72));
  _Unwind_Resume(a1);
}

void sub_19C1BBA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (a16)
  {
    sub_19C25623C((uint64_t)&a16, a16);
    sub_19C094494((const void **)(v16 - 72));
    _Unwind_Resume(a1);
  }
  sub_19C094494((const void **)(v16 - 72));
  _Unwind_Resume(a1);
}

void sub_19C1BBA8C(const __CFDictionary **a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  double v20;
  unint64_t v21;
  _QWORD *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  std::runtime_error *v28;
  std::runtime_error *exception;
  void *__p;
  void *v31;
  uint64_t v32;
  int v33;
  void *v34;
  char *v35;
  void *__dst[2];
  uint64_t v37;
  __int128 v38;
  int v39;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        sub_19C07C6E8(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v7 = *v3;
        v37 = *((_QWORD *)v3 + 2);
        *(_OWORD *)__dst = v7;
      }
      v8 = *(__int128 *)((char *)v3 + 24);
      v39 = *((_DWORD *)v3 + 10);
      v38 = v8;
      if (v39 < 2)
      {
        if (!*a1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v20 = sub_19C1C43C8(*a1, (const UInt8 *)__dst);
        __p = 0;
        v31 = 0;
        v32 = 0;
        v33 = 1;
        sub_19C17C9D8((uint64_t)&__p, 1uLL);
        *(double *)__p = v20;
        v21 = *(_QWORD *)(a3 + 8);
        if (v21 >= *(_QWORD *)(a3 + 16))
        {
          v22 = sub_19C17C01C((void **)a3, (__int128 *)__dst, (uint64_t)&__p);
        }
        else
        {
          sub_19C17C228(a3 + 16, *(_QWORD **)(a3 + 8), (__int128 *)__dst, (uint64_t)&__p);
          v22 = (_QWORD *)(v21 + 56);
          *(_QWORD *)(a3 + 8) = v21 + 56;
        }
        *(_QWORD *)(a3 + 8) = v22;
        v23 = __p;
        if (!__p)
          goto LABEL_35;
        v31 = __p;
        goto LABEL_34;
      }
      if (!*a1)
      {
        v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v28, "Could not construct");
        __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      sub_19C1C3CA8(*a1, (const UInt8 *)__dst, &v34);
      __p = 0;
      v31 = 0;
      v32 = 0;
      v10 = (char *)v34;
      v9 = v35;
      v33 = (unint64_t)(v35 - (_BYTE *)v34) >> 3;
      if (v33)
      {
        sub_19C17C9D8((uint64_t)&__p, (int)((v35 - (_BYTE *)v34) >> 3));
        v10 = (char *)v34;
        v9 = v35;
      }
      if (v10 != v9)
      {
        v11 = 0;
        v12 = (char *)__p;
        v13 = v9 - v10 - 8;
        if (v13 < 0x18 || (unint64_t)((_BYTE *)__p - v10) < 0x20)
        {
          v15 = v10;
LABEL_25:
          v24 = &v12[8 * v11];
          do
          {
            v25 = *(_QWORD *)v15;
            v15 += 8;
            *(_QWORD *)v24 = v25;
            v24 += 8;
          }
          while (v15 != v9);
          goto LABEL_27;
        }
        v14 = (v13 >> 3) + 1;
        v11 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        v15 = &v10[8 * (v14 & 0x3FFFFFFFFFFFFFFCLL)];
        v16 = (char *)__p + 16;
        v17 = (__int128 *)(v10 + 16);
        v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = *v17;
          *(v16 - 1) = *(v17 - 1);
          *v16 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v14 != v11)
          goto LABEL_25;
      }
LABEL_27:
      v26 = *(_QWORD *)(a3 + 8);
      if (v26 >= *(_QWORD *)(a3 + 16))
      {
        v27 = sub_19C17C01C((void **)a3, (__int128 *)__dst, (uint64_t)&__p);
      }
      else
      {
        sub_19C17C228(a3 + 16, *(_QWORD **)(a3 + 8), (__int128 *)__dst, (uint64_t)&__p);
        v27 = (_QWORD *)(v26 + 56);
        *(_QWORD *)(a3 + 8) = v26 + 56;
      }
      *(_QWORD *)(a3 + 8) = v27;
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      v23 = v34;
      if (!v34)
        goto LABEL_35;
      v35 = (char *)v34;
LABEL_34:
      operator delete(v23);
LABEL_35:
      if (SHIBYTE(v37) < 0)
        operator delete(__dst[0]);
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void sub_19C1BBD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void **v22;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a22 < 0)
    operator delete(a17);
  sub_19C17A9E4(v22);
  _Unwind_Resume(a1);
}

void sub_19C1BBE38(const __CFDictionary **a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  unint64_t v21;
  _QWORD *v22;
  void *v23;
  char *v24;
  int v25;
  unint64_t v26;
  _QWORD *v27;
  std::runtime_error *v28;
  std::runtime_error *exception;
  void *__p;
  void *v31;
  uint64_t v32;
  int v33;
  void *v34;
  char *v35;
  void *__dst[2];
  uint64_t v37;
  uint64_t v38;
  int v39;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        sub_19C07C6E8(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v7 = *v3;
        v37 = *((_QWORD *)v3 + 2);
        *(_OWORD *)__dst = v7;
      }
      v8 = *((_QWORD *)v3 + 3);
      v39 = *((_DWORD *)v3 + 8);
      v38 = v8;
      if (v39 < 2)
      {
        if (!*a1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v20 = sub_19C1C4790(*a1, (const UInt8 *)__dst);
        __p = 0;
        v31 = 0;
        v32 = 0;
        v33 = 1;
        sub_19C101928((uint64_t)&__p, 1uLL);
        *(_DWORD *)__p = v20;
        v21 = *(_QWORD *)(a3 + 8);
        if (v21 >= *(_QWORD *)(a3 + 16))
        {
          v22 = sub_19C17C534((void **)a3, (__int128 *)__dst, (uint64_t)&__p);
        }
        else
        {
          sub_19C17C740(a3 + 16, *(_QWORD **)(a3 + 8), (__int128 *)__dst, (uint64_t)&__p);
          v22 = (_QWORD *)(v21 + 56);
          *(_QWORD *)(a3 + 8) = v21 + 56;
        }
        *(_QWORD *)(a3 + 8) = v22;
        v23 = __p;
        if (!__p)
          goto LABEL_35;
        v31 = __p;
        goto LABEL_34;
      }
      if (!*a1)
      {
        v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v28, "Could not construct");
        __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      sub_19C1C4464(*a1, (const UInt8 *)__dst, &v34);
      __p = 0;
      v31 = 0;
      v32 = 0;
      v10 = (char *)v34;
      v9 = v35;
      v33 = (unint64_t)(v35 - (_BYTE *)v34) >> 2;
      if (v33)
      {
        sub_19C101928((uint64_t)&__p, (int)((v35 - (_BYTE *)v34) >> 2));
        v10 = (char *)v34;
        v9 = v35;
      }
      if (v10 != v9)
      {
        v11 = 0;
        v12 = (char *)__p;
        v13 = v9 - v10 - 4;
        if (v13 < 0x1C || (unint64_t)((_BYTE *)__p - v10) < 0x20)
        {
          v15 = v10;
LABEL_25:
          v24 = &v12[4 * v11];
          do
          {
            v25 = *(_DWORD *)v15;
            v15 += 4;
            *(_DWORD *)v24 = v25;
            v24 += 4;
          }
          while (v15 != v9);
          goto LABEL_27;
        }
        v14 = (v13 >> 2) + 1;
        v11 = v14 & 0x7FFFFFFFFFFFFFF8;
        v15 = &v10[4 * (v14 & 0x7FFFFFFFFFFFFFF8)];
        v16 = (char *)__p + 16;
        v17 = (__int128 *)(v10 + 16);
        v18 = v14 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v19 = *v17;
          *(v16 - 1) = *(v17 - 1);
          *v16 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 8;
        }
        while (v18);
        if (v14 != v11)
          goto LABEL_25;
      }
LABEL_27:
      v26 = *(_QWORD *)(a3 + 8);
      if (v26 >= *(_QWORD *)(a3 + 16))
      {
        v27 = sub_19C17C534((void **)a3, (__int128 *)__dst, (uint64_t)&__p);
      }
      else
      {
        sub_19C17C740(a3 + 16, *(_QWORD **)(a3 + 8), (__int128 *)__dst, (uint64_t)&__p);
        v27 = (_QWORD *)(v26 + 56);
        *(_QWORD *)(a3 + 8) = v26 + 56;
      }
      *(_QWORD *)(a3 + 8) = v27;
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      v23 = v34;
      if (!v34)
        goto LABEL_35;
      v35 = (char *)v34;
LABEL_34:
      operator delete(v23);
LABEL_35:
      if (SHIBYTE(v37) < 0)
        operator delete(__dst[0]);
      v3 = (__int128 *)((char *)v3 + 40);
    }
    while (v3 != v4);
  }
}

void sub_19C1BC11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void **v22;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a22 < 0)
    operator delete(a17);
  sub_19C17A9E4(v22);
  _Unwind_Resume(a1);
}

void sub_19C1BC1DC(uint64_t a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  const void **v4;
  const void ***v5;
  const void **v6;
  const void ***v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t **v10;
  const __CFArray *v11;
  char *v12;
  char **v13;
  const void **v14;
  const void **v15;
  const void ***v16;
  uint64_t *v17;
  uint64_t **v18;
  const __CFArray *v19;
  char *v20;
  char **v21;
  void *__p;
  void *v23;
  uint64_t *v24;
  char **v25;
  char *v26;
  uint64_t v27;
  char **v28;
  char *v29[2];
  __int128 *v30;

  v29[0] = 0;
  v29[1] = 0;
  v27 = 0;
  v28 = v29;
  v25 = &v26;
  v26 = 0;
  v4 = *(const void ***)(a1 + 48);
  v5 = (const void ***)(a1 + 56);
  if (v4 != (const void **)(a1 + 56))
  {
    do
    {
      sub_19C098AD0((uint64_t **)&v25, (uint64_t *)&v26, v4 + 4, (uint64_t)(v4 + 4));
      v6 = (const void **)v4[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v4[2];
          v8 = *v7 == v4;
          v4 = (const void **)v7;
        }
        while (!v8);
      }
      v4 = (const void **)v7;
    }
    while (v7 != v5);
    v9 = (uint64_t *)v25;
    if (v25 != &v26)
    {
      do
      {
        sub_19C1BC65C((__int128 **)a1, (const std::string *)(v9 + 4), (uint64_t)&__p);
        sub_19C1BC530((uint64_t *)&__p, (CFArrayRef *)&v24);
        v30 = (__int128 *)(v9 + 4);
        v10 = sub_19C19E844((uint64_t **)&v28, (const void **)v9 + 4, (uint64_t)&unk_19C27ADD0, &v30);
        v11 = (const __CFArray *)v10[7];
        v10[7] = v24;
        v24 = (uint64_t *)v11;
        if (v11)
          CFRelease(v11);
        if (__p)
        {
          v23 = __p;
          operator delete(__p);
        }
        v12 = (char *)v9[1];
        if (v12)
        {
          do
          {
            v13 = (char **)v12;
            v12 = *(char **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (char **)v9[2];
            v8 = *v13 == (char *)v9;
            v9 = (uint64_t *)v13;
          }
          while (!v8);
        }
        v9 = (uint64_t *)v13;
      }
      while (v13 != &v26);
    }
  }
  sub_19C098FBC((uint64_t)&v25, v26);
  v26 = 0;
  v27 = 0;
  v25 = &v26;
  v14 = *(const void ***)(a1 + 72);
  if (v14 != (const void **)(a1 + 80))
  {
    do
    {
      sub_19C098AD0((uint64_t **)&v25, (uint64_t *)&v26, v14 + 4, (uint64_t)(v14 + 4));
      v15 = (const void **)v14[1];
      if (v15)
      {
        do
        {
          v16 = (const void ***)v15;
          v15 = (const void **)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (const void ***)v14[2];
          v8 = *v16 == v14;
          v14 = (const void **)v16;
        }
        while (!v8);
      }
      v14 = (const void **)v16;
    }
    while (v16 != (const void ***)(a1 + 80));
    v17 = (uint64_t *)v25;
    if (v25 != &v26)
    {
      do
      {
        sub_19C1BC868(a1, (const std::string *)(v17 + 4), (uint64_t)&__p);
        sub_19C1BC73C((uint64_t *)&__p, (CFArrayRef *)&v24);
        v30 = (__int128 *)(v17 + 4);
        v18 = sub_19C19E844((uint64_t **)&v28, (const void **)v17 + 4, (uint64_t)&unk_19C27ADD0, &v30);
        v19 = (const __CFArray *)v18[7];
        v18[7] = v24;
        v24 = (uint64_t *)v19;
        if (v19)
          CFRelease(v19);
        if (__p)
        {
          v23 = __p;
          operator delete(__p);
        }
        v20 = (char *)v17[1];
        if (v20)
        {
          do
          {
            v21 = (char **)v20;
            v20 = *(char **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (char **)v17[2];
            v8 = *v21 == (char *)v17;
            v17 = (uint64_t *)v21;
          }
          while (!v8);
        }
        v17 = (uint64_t *)v21;
      }
      while (v21 != &v26);
    }
  }
  sub_19C098FBC((uint64_t)&v25, v26);
  *a2 = sub_19C1C5048(&v28);
  sub_19C1C4828((uint64_t)&v28, v29[0]);
}

void sub_19C1BC4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
  sub_19C1C4828((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_19C1BC4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, __int16 a15, char a16, char a17, char *a18, uint64_t a19, char a20,char *a21)
{
  sub_19C19771C(&a14);
  if (__p)
    operator delete(__p);
  sub_19C098FBC((uint64_t)&a15, a18);
  sub_19C1C4828((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void sub_19C1BC530(uint64_t *a1@<X0>, CFArrayRef *a2@<X8>)
{
  uint64_t v3;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  void *__p;
  void *v18;
  char *v19;

  v3 = *((int *)a1 + 6);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if ((_DWORD)v3)
  {
    if ((v3 & 0x80000000) != 0)
      sub_19C07DA0C();
    v5 = operator new(8 * v3);
    __p = v5;
    v19 = (char *)v5 + 8 * v3;
    bzero(v5, 8 * v3);
    v6 = 0;
    v18 = v19;
    v7 = *a1;
    if (v3 < 4)
      goto LABEL_8;
    if ((unint64_t)v5 - v7 < 0x20)
      goto LABEL_8;
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    v8 = (__int128 *)(v7 + 16);
    v9 = v5 + 1;
    v10 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != v3)
    {
LABEL_8:
      v12 = v3 - v6;
      v13 = 8 * v6;
      v14 = (_QWORD *)v5 + v6;
      v15 = (uint64_t *)(v7 + v13);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
  }
  *a2 = sub_19C1C48A0((uint64_t **)&__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_19C1BC63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1BC65C(__int128 **a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  void *__p;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;

  sub_19C1C302C(a1, a2, (uint64_t)&__p);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = v10;
  v5 = v11 - v10;
  if (v11 != v10)
  {
    if (v5 < 0)
      sub_19C07DA0C();
    v6 = (char *)operator new(v11 - v10);
    *(_QWORD *)a3 = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *(_QWORD *)(a3 + 16) = v7;
    memcpy(v6, v4, v5);
    *(_QWORD *)(a3 + 8) = v7;
  }
  *(_DWORD *)(a3 + 24) = v12;
  if (v4)
  {
    v11 = v4;
    operator delete(v4);
  }
  if (v9 < 0)
    operator delete(__p);
}

void sub_19C1BC718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_19C1C2C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1BC73C(uint64_t *a1@<X0>, CFArrayRef *a2@<X8>)
{
  uint64_t v3;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  void *__p;
  void *v18;
  char *v19;

  v3 = *((int *)a1 + 6);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if ((_DWORD)v3)
  {
    if ((v3 & 0x80000000) != 0)
      sub_19C07DA0C();
    v5 = operator new(4 * v3);
    __p = v5;
    v19 = (char *)v5 + 4 * v3;
    bzero(v5, 4 * v3);
    v6 = 0;
    v18 = v19;
    v7 = *a1;
    if (v3 < 8)
      goto LABEL_8;
    if ((unint64_t)v5 - v7 < 0x20)
      goto LABEL_8;
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    v8 = (__int128 *)(v7 + 16);
    v9 = v5 + 1;
    v10 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 8;
    }
    while (v10);
    if (v6 != v3)
    {
LABEL_8:
      v12 = v3 - v6;
      v13 = 4 * v6;
      v14 = (_DWORD *)v5 + v6;
      v15 = (int *)(v7 + v13);
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
  }
  *a2 = sub_19C1C4C74((int **)&__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_19C1BC848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1BC868(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  void *__p;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;

  sub_19C1C339C(a1, a2, (uint64_t)&__p);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = v10;
  v5 = v11 - v10;
  if (v11 != v10)
  {
    if (v5 < 0)
      sub_19C07DA0C();
    v6 = (char *)operator new(v11 - v10);
    *(_QWORD *)a3 = v6;
    v7 = &v6[4 * (v5 >> 2)];
    *(_QWORD *)(a3 + 16) = v7;
    memcpy(v6, v4, v5);
    *(_QWORD *)(a3 + 8) = v7;
  }
  *(_DWORD *)(a3 + 24) = v12;
  if (v4)
  {
    v11 = v4;
    operator delete(v4);
  }
  if (v9 < 0)
    operator delete(__p);
}

void sub_19C1BC924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_19C1C2C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1BC948(const __CFDictionary **a1)
{
  const void *v2;
  uint64_t v3;
  unsigned int v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  const __CFNumber *v8;
  std::runtime_error *v10;
  std::runtime_error *exception;
  std::runtime_error *v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C2370(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1BCBC4("MaxIterations", v17);
  v2 = sub_19C1C3D64(*a1, (const UInt8 *)v17);
  if (!v2)
  {
    v4 = 100;
    if (*a1)
      goto LABEL_7;
LABEL_18:
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = sub_19C09B5E4((uint64_t)v2);
  if ((v3 & 0xFF00000000) != 0)
    v4 = v3;
  else
    v4 = 100;
  if (!*a1)
    goto LABEL_18;
LABEL_7:
  sub_19C1BCBC4("Patience", v15);
  v5 = sub_19C1C3D64(*a1, (const UInt8 *)v15);
  v6 = 0xA00000000;
  if (v5)
  {
    v7 = sub_19C09B5E4((uint64_t)v5);
    if ((v7 & 0xFF00000000) != 0)
      v6 = v7 << 32;
  }
  if (!*a1)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1BCBC4("MinDelta", __p);
  v8 = (const __CFNumber *)sub_19C1C3D64(*a1, (const UInt8 *)__p);
  if (v8)
    sub_19C1C40EC(v8);
  if ((v14 & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_20:
    operator delete(v15[0]);
    if ((v18 & 0x80000000) == 0)
      return v6 | v4;
LABEL_21:
    operator delete(v17[0]);
    return v6 | v4;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_20;
LABEL_15:
  if (v18 < 0)
    goto LABEL_21;
  return v6 | v4;
}

void sub_19C1BCB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_19C1BCBC4(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  std::runtime_error *exception;
  CFTypeRef cf;
  CFTypeRef *p_cf;

  sub_19C1C1A00(a1, &cf);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  p_cf = &cf;
  sub_19C093440((const __CFString ***)&p_cf, a2);
  if (cf)
    CFRelease(cf);
}

void sub_19C1BCC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_19C0934D0(&a9);
  _Unwind_Resume(a1);
}

void sub_19C1BCC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_19C0934D0(&a9);
  _Unwind_Resume(a1);
}

void sub_19C1BCC80(const __CFArray **a1@<X0>, const __CFDictionary **a2@<X1>, uint64_t a3@<X8>)
{
  const __CFArray *v4;
  CFIndex Count;
  unint64_t i;
  CFTypeRef v7;
  void **v8;
  void **v9;
  int v10;
  void **v11;
  uint64_t v12;
  void **v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  char v19;
  _BOOL4 v20;
  char *v21;
  __int128 v22;
  int v23;
  void **v24;
  void **v25;
  int v26;
  void **v27;
  uint64_t v28;
  void **v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  _BOOL4 v35;
  char *v36;
  __int128 v37;
  int v38;
  CFTypeRef v39;
  CFTypeRef *v40;
  const void *v41;
  uint64_t v42;
  int v43;
  _BOOL4 v44;
  const void *v45;
  const __CFDictionary *v46;
  int v47;
  unsigned int v48;
  char v49;
  std::runtime_error *v50;
  _BOOL4 v51;
  const void *v52;
  uint64_t **v53;
  char **v54;
  void *v55;
  CFIndex v56;
  unint64_t j;
  uint64_t **v58;
  void **v59;
  void **v60;
  void *v61;
  void **v62;
  void **v63;
  void *v64;
  CFTypeRef v65;
  CFTypeRef v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69;
  char **v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void **v75;
  void **v76;
  void **v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  std::runtime_error *v84;
  std::runtime_error *v85;
  std::runtime_error *v86;
  void *v87;
  std::runtime_error *v88;
  std::runtime_error *exception;
  std::runtime_error *v90;
  std::runtime_error *v91;
  std::runtime_error *v92;
  std::runtime_error *v93;
  int v94;
  CFTypeRef v97;
  CFTypeRef v98;
  void *v99;
  void **v100;
  uint64_t v101;
  void *v102;
  void **v103;
  uint64_t v104;
  void *__p[2];
  uint64_t v106;
  __int128 v107;
  int v108;
  CFTypeRef v109;
  CFArrayRef theArray;
  CFTypeRef cf;
  uint64_t **v112;
  unint64_t v113;
  char v114;
  void **v115;
  void **v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  CFTypeRef v121;
  char *v122;
  char *v123;
  unint64_t v124;
  char *v125;
  char *v126;
  unint64_t v127;

  v125 = 0;
  v126 = 0;
  v127 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v4 = *a1;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(v4);
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      if (!*a1)
      {
        v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v85, "Could not construct");
        __cxa_throw(v85, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      sub_19C1C549C(*a1, i, &cf);
      v7 = cf;
      if (cf)
        CFRetain(cf);
      v121 = v7;
      sub_19C1BB02C((_BOOL8 *)&v121);
      if (v7)
        CFRelease(v7);
      if (!cf)
      {
        v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v86, "Could not construct");
        __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      sub_19C1BCBC4("Type", __p);
      sub_19C1C5548((const __CFDictionary *)cf, (const UInt8 *)__p, &v115);
      if (SHIBYTE(v106) < 0)
        operator delete(__p[0]);
      sub_19C1BCBC4("Integral", __p);
      if (v117 >= 0)
        v8 = (void **)HIBYTE(v117);
      else
        v8 = v116;
      v9 = (void **)HIBYTE(v106);
      v10 = SHIBYTE(v106);
      if (v106 < 0)
        v9 = (void **)__p[1];
      if (v8 == v9)
      {
        if (v106 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        if (v117 < 0)
        {
          v20 = memcmp(v115, v11, (size_t)v116) == 0;
          if ((v10 & 0x80000000) == 0)
            goto LABEL_31;
        }
        else if (HIBYTE(v117))
        {
          v12 = HIBYTE(v117) - 1;
          v13 = (void **)&v115;
          do
          {
            v15 = *(unsigned __int8 *)v13;
            v13 = (void **)((char *)v13 + 1);
            v14 = v15;
            v17 = *(unsigned __int8 *)v11;
            v11 = (void **)((char *)v11 + 1);
            v16 = v17;
            v18 = v12-- != 0;
            v19 = v18;
            v20 = v14 == v16;
          }
          while (v14 == v16 && (v19 & 1) != 0);
          if ((SHIBYTE(v106) & 0x80000000) == 0)
          {
LABEL_31:
            if (v20)
              goto LABEL_32;
            goto LABEL_37;
          }
        }
        else
        {
          v20 = 1;
          if ((SHIBYTE(v106) & 0x80000000) == 0)
            goto LABEL_31;
        }
      }
      else
      {
        v20 = 0;
        if ((SHIBYTE(v106) & 0x80000000) == 0)
          goto LABEL_31;
      }
      operator delete(__p[0]);
      if (v20)
      {
LABEL_32:
        sub_19C1BDBC0((const __CFDictionary **)&cf, (uint64_t)__p);
        v21 = v126;
        if ((unint64_t)v126 < v127)
        {
          v22 = *(_OWORD *)__p;
          *((_QWORD *)v126 + 2) = v106;
          *(_OWORD *)v21 = v22;
          __p[1] = 0;
          v106 = 0;
          __p[0] = 0;
          v23 = DWORD2(v107);
          *((_QWORD *)v21 + 3) = v107;
          *((_DWORD *)v21 + 8) = v23;
          v126 = v21 + 40;
          if ((SHIBYTE(v117) & 0x80000000) == 0)
            goto LABEL_66;
          goto LABEL_71;
        }
        v126 = sub_19C1C56D0((void **)&v125, (uint64_t)__p);
        if ((SHIBYTE(v106) & 0x80000000) == 0)
          goto LABEL_65;
        goto LABEL_70;
      }
LABEL_37:
      sub_19C1BCBC4("Continuous", __p);
      if (v117 >= 0)
        v24 = (void **)HIBYTE(v117);
      else
        v24 = v116;
      v25 = (void **)HIBYTE(v106);
      v26 = SHIBYTE(v106);
      if (v106 < 0)
        v25 = (void **)__p[1];
      if (v24 == v25)
      {
        if (v106 >= 0)
          v27 = __p;
        else
          v27 = (void **)__p[0];
        if (v117 < 0)
        {
          v35 = memcmp(v115, v27, (size_t)v116) == 0;
          if ((v26 & 0x80000000) == 0)
            goto LABEL_55;
        }
        else if (HIBYTE(v117))
        {
          v28 = HIBYTE(v117) - 1;
          v29 = (void **)&v115;
          do
          {
            v31 = *(unsigned __int8 *)v29;
            v29 = (void **)((char *)v29 + 1);
            v30 = v31;
            v33 = *(unsigned __int8 *)v27;
            v27 = (void **)((char *)v27 + 1);
            v32 = v33;
            v18 = v28-- != 0;
            v34 = v18;
            v35 = v30 == v32;
          }
          while (v30 == v32 && (v34 & 1) != 0);
          if ((SHIBYTE(v106) & 0x80000000) == 0)
          {
LABEL_55:
            if (!v35)
              goto LABEL_202;
            goto LABEL_61;
          }
        }
        else
        {
          v35 = 1;
          if ((SHIBYTE(v106) & 0x80000000) == 0)
            goto LABEL_55;
        }
      }
      else
      {
        v35 = 0;
        if ((SHIBYTE(v106) & 0x80000000) == 0)
          goto LABEL_55;
      }
      operator delete(__p[0]);
      if (!v35)
      {
LABEL_202:
        v87 = __cxa_allocate_exception(0x28uLL);
        sub_19C1BE160((uint64_t)v87, "Unrecognized paramType: ", (uint64_t)&v115);
        __cxa_throw(v87, (struct type_info *)&unk_1E3D1D7B8, (void (*)(void *))sub_19C1BB384);
      }
LABEL_61:
      sub_19C1BDE90((const __CFDictionary **)&cf, (uint64_t)__p);
      v36 = v123;
      if ((unint64_t)v123 < v124)
      {
        v37 = *(_OWORD *)__p;
        *((_QWORD *)v123 + 2) = v106;
        *(_OWORD *)v36 = v37;
        __p[1] = 0;
        v106 = 0;
        __p[0] = 0;
        v38 = v108;
        *(_OWORD *)(v36 + 24) = v107;
        *((_DWORD *)v36 + 10) = v38;
        v123 = v36 + 48;
        if ((SHIBYTE(v117) & 0x80000000) == 0)
          goto LABEL_66;
        goto LABEL_71;
      }
      v123 = sub_19C1C590C((void **)&v122, (uint64_t)__p);
      if ((SHIBYTE(v106) & 0x80000000) == 0)
      {
LABEL_65:
        if ((SHIBYTE(v117) & 0x80000000) == 0)
          goto LABEL_66;
        goto LABEL_71;
      }
LABEL_70:
      operator delete(__p[0]);
      if ((SHIBYTE(v117) & 0x80000000) == 0)
      {
LABEL_66:
        v39 = cf;
        if (!cf)
          continue;
LABEL_72:
        CFRelease(v39);
        continue;
      }
LABEL_71:
      operator delete(v115);
      v39 = cf;
      if (cf)
        goto LABEL_72;
    }
  }
  v115 = 0;
  v116 = 0;
  v117 = 0;
  sub_19C17AF88(&v115, (uint64_t)v122, (uint64_t)v123, 0xAAAAAAAAAAAAAAABLL * ((v123 - v122) >> 4));
  v118 = 0;
  v119 = 0;
  v120 = 0;
  sub_19C17B16C(&v118, (uint64_t)v125, (uint64_t)v126, 0xCCCCCCCCCCCCCCCDLL * ((v126 - v125) >> 3));
  v40 = (CFTypeRef *)a2;
  if (!*a2)
  {
    v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v90, "Could not construct");
    __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1BCBC4("CallbackInterval", __p);
  v41 = sub_19C1C3D64(*a2, (const UInt8 *)__p);
  if (v41)
  {
    v42 = sub_19C09B5E4((uint64_t)v41);
    if ((v42 & 0xFF00000000) != 0)
      v43 = v42;
    else
      v43 = 1;
    if (SHIBYTE(v106) < 0)
      goto LABEL_85;
  }
  else
  {
    v43 = 1;
    if (SHIBYTE(v106) < 0)
LABEL_85:
      operator delete(__p[0]);
  }
  if (!*a2)
  {
    v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v91, "Could not construct");
    __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C1A00("RandomSeed", __p);
  if (!*a2)
  {
    v44 = 0;
    v45 = __p[0];
    if (!__p[0])
      goto LABEL_95;
LABEL_94:
    CFRelease(v45);
    goto LABEL_95;
  }
  if (!__p[0])
  {
    v48 = 0;
    LOBYTE(v47) = 0;
    v49 = 0;
    LOBYTE(cf) = 0;
    v114 = 0;
    goto LABEL_104;
  }
  v44 = CFDictionaryContainsKey(*a2, __p[0]) != 0;
  v45 = __p[0];
  if (__p[0])
    goto LABEL_94;
LABEL_95:
  v46 = *a2;
  if (v44)
  {
    if (!v46)
    {
      v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v92, "Could not construct");
      __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    sub_19C1C1A00("RandomSeed", __p);
    v47 = sub_19C1C5AA0(*a2, (const void **)__p);
    if (__p[0])
      CFRelease(__p[0]);
    v48 = v47 & 0xFFFFFF00;
    v46 = *a2;
    v49 = 1;
  }
  else
  {
    v49 = 0;
    LOBYTE(v47) = 0;
    v48 = 0;
  }
  LOBYTE(cf) = 0;
  v114 = 0;
  if (!v46)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_104:
  sub_19C1C1A00("InitialParameterValues", __p);
  if (!*a2)
  {
    v51 = 0;
    v52 = __p[0];
    if (!__p[0])
      goto LABEL_110;
    goto LABEL_109;
  }
  if (!__p[0])
    goto LABEL_149;
  v51 = CFDictionaryContainsKey(*a2, __p[0]) != 0;
  v52 = __p[0];
  if (__p[0])
LABEL_109:
    CFRelease(v52);
LABEL_110:
  if (!v51)
    goto LABEL_149;
  if (v114)
  {
    v53 = (uint64_t **)cf;
    if (cf)
    {
      v54 = (char **)v112;
      v55 = (void *)cf;
      if (v112 != cf)
      {
        do
          v54 = sub_19C17B808(v54 - 12);
        while (v54 != (char **)v53);
        v55 = (void *)cf;
      }
      v112 = v53;
      operator delete(v55);
    }
    cf = 0;
    v112 = 0;
    v113 = 0;
    if (*a2)
      goto LABEL_118;
LABEL_199:
    v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
    __cxa_throw(v84, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  cf = 0;
  v112 = 0;
  v113 = 0;
  v114 = 1;
  if (!*a2)
    goto LABEL_199;
LABEL_118:
  sub_19C1C1A00("InitialParameterValues", __p);
  sub_19C1C5B48(*a2, (const void **)__p, &theArray);
  if (__p[0])
    CFRelease(__p[0]);
  v94 = v43;
  if (!theArray)
  {
    v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "Could not construct");
    __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v56 = CFArrayGetCount(theArray);
  if (v56)
  {
    for (j = 0; j != v56; ++j)
    {
      if (!theArray)
      {
        v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v88, "Could not construct");
        __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      sub_19C1C549C(theArray, j, &v109);
      v100 = 0;
      v101 = 0;
      v99 = 0;
      sub_19C17AF88(&v99, (uint64_t)v115, (uint64_t)v116, 0xAAAAAAAAAAAAAAABLL * (((char *)v116 - (char *)v115) >> 4));
      v102 = 0;
      v103 = 0;
      v104 = 0;
      sub_19C17B16C(&v102, (uint64_t)v118, (uint64_t)v119, 0xCCCCCCCCCCCCCCCDLL * ((v119 - v118) >> 3));
      sub_19C1BB7E4(&v109, (uint64_t *)&v99, (uint64_t **)__p);
      if ((unint64_t)v112 >= v113)
        v58 = sub_19C1C5BD4((uint64_t ***)&cf, (uint64_t)__p);
      else
        v58 = sub_19C1C5D14(v112, (uint64_t)__p) + 12;
      v112 = v58;
      sub_19C17B808((char **)__p);
      v59 = (void **)v102;
      if (v102)
      {
        v60 = v103;
        v61 = v102;
        if (v103 != v102)
        {
          do
          {
            if (*((char *)v60 - 17) < 0)
              operator delete(*(v60 - 5));
            v60 -= 5;
          }
          while (v60 != v59);
          v61 = v102;
        }
        v103 = v59;
        operator delete(v61);
      }
      v62 = (void **)v99;
      if (v99)
      {
        v63 = v100;
        v64 = v99;
        if (v100 != v99)
        {
          do
          {
            if (*((char *)v63 - 25) < 0)
              operator delete(*(v63 - 6));
            v63 -= 6;
          }
          while (v63 != v62);
          v64 = v99;
        }
        v100 = v62;
        operator delete(v64);
      }
      if (v109)
        CFRelease(v109);
    }
  }
  if (theArray)
    CFRelease(theArray);
  v40 = (CFTypeRef *)a2;
  v43 = v94;
LABEL_149:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_19C17AF88((_QWORD *)a3, (uint64_t)v115, (uint64_t)v116, 0xAAAAAAAAAAAAAAABLL * (((char *)v116 - (char *)v115) >> 4));
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  sub_19C17B16C((_QWORD *)(a3 + 24), (uint64_t)v118, (uint64_t)v119, 0xCCCCCCCCCCCCCCCDLL * ((v119 - v118) >> 3));
  v65 = *v40;
  if (*v40)
    CFRetain(*v40);
  v98 = v65;
  *(_DWORD *)(a3 + 48) = sub_19C1BE1E8(&v98);
  v66 = *v40;
  if (*v40)
    CFRetain(*v40);
  v97 = v66;
  *(_DWORD *)(a3 + 52) = sub_19C1BE29C(&v97);
  v67 = sub_19C1BC948((const __CFDictionary **)v40);
  *(_BYTE *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 56) = v67;
  *(_QWORD *)(a3 + 64) = v68;
  *(_DWORD *)(a3 + 72) = v43;
  *(_DWORD *)(a3 + 76) = v48 | v47;
  *(_BYTE *)(a3 + 80) = v49;
  *(_BYTE *)(a3 + 112) = 0;
  if (v114)
  {
    sub_19C1C2CDC((uint64_t ***)(a3 + 88), (uint64_t **)&cf);
    *(_BYTE *)(a3 + 112) = 1;
  }
  if (v97)
    CFRelease(v97);
  if (v98)
    CFRelease(v98);
  if (v114)
  {
    v69 = (uint64_t **)cf;
    if (cf)
    {
      v70 = (char **)v112;
      v71 = (void *)cf;
      if (v112 != cf)
      {
        do
          v70 = sub_19C17B808(v70 - 12);
        while (v70 != (char **)v69);
        v71 = (void *)cf;
      }
      v112 = v69;
      operator delete(v71);
    }
  }
  v72 = (uint64_t)v118;
  if (v118)
  {
    v73 = (uint64_t)v119;
    v74 = v118;
    if (v119 != v118)
    {
      do
      {
        if (*(char *)(v73 - 17) < 0)
          operator delete(*(void **)(v73 - 40));
        v73 -= 40;
      }
      while (v73 != v72);
      v74 = v118;
    }
    v119 = (_BYTE *)v72;
    operator delete(v74);
  }
  v75 = v115;
  if (v115)
  {
    v76 = v116;
    v77 = v115;
    if (v116 != v115)
    {
      do
      {
        if (*((char *)v76 - 25) < 0)
          operator delete(*(v76 - 6));
        v76 -= 6;
      }
      while (v76 != v75);
      v77 = v115;
    }
    v116 = v75;
    operator delete(v77);
  }
  v78 = v122;
  if (v122)
  {
    v79 = v123;
    v80 = v122;
    if (v123 != v122)
    {
      do
      {
        if (*(v79 - 25) < 0)
          operator delete(*((void **)v79 - 6));
        v79 -= 48;
      }
      while (v79 != v78);
      v80 = v122;
    }
    v123 = v78;
    operator delete(v80);
  }
  v81 = v125;
  if (v125)
  {
    v82 = v126;
    v83 = v125;
    if (v126 != v125)
    {
      do
      {
        if (*(v82 - 17) < 0)
          operator delete(*((void **)v82 - 5));
        v82 -= 40;
      }
      while (v82 != v81);
      v83 = v125;
    }
    v126 = v81;
    operator delete(v83);
  }
}

void sub_19C1BD89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,int a40,const void *a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  sub_19C19771C(&a41);
  sub_19C1BE350((uint64_t)&a42);
  sub_19C17A75C((void **)(v44 - 192));
  sub_19C178D24((void **)(v44 - 136));
  sub_19C17983C((void **)(v44 - 112));
  _Unwind_Resume(a1);
}

void sub_19C1BDAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_19C094494(&a35);
  sub_19C178D24(v35 - 136);
  sub_19C17983C(v35 - 112);
  _Unwind_Resume(a1);
}

void sub_19C1BDB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  void *v35;
  uint64_t v36;

  __cxa_free_exception(v35);
  sub_19C094494(&a35);
  sub_19C178D24((void **)(v36 - 136));
  sub_19C17983C((void **)(v36 - 112));
  _Unwind_Resume(a1);
}

void sub_19C1BDB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_19C094494(&a35);
  sub_19C178D24(v35 - 136);
  sub_19C17983C(v35 - 112);
  _Unwind_Resume(a1);
}

void sub_19C1BDB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  if ((a26 & 0x80000000) == 0)
  {
    sub_19C094494(&a38);
    sub_19C178D24(v38 - 136);
    sub_19C17983C(v38 - 112);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19C1BDB70);
}

void sub_19C1BDB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 169) < 0)
    operator delete(*(void **)(v35 - 192));
  sub_19C094494(&a35);
  sub_19C178D24((void **)(v35 - 136));
  sub_19C17983C((void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void sub_19C1BDB78()
{
  uint64_t v0;

  sub_19C094494((const void **)(v0 - 144));
  JUMPOUT(0x19C1BDB84);
}

void sub_19C1BDBA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C178D24((void **)(v1 - 136));
  sub_19C17983C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_19C1BDBC0(const __CFDictionary **a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error *v10;
  std::runtime_error *v11;
  CFTypeRef cf;
  void *__p[2];
  uint64_t v14;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C2370(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C1A00("Name", &cf);
  sub_19C1C5604(*a1, &cf, __p);
  if (cf)
    CFRelease(cf);
  if (!*a1)
  {
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C1A00("MinimumValue", &cf);
  v4 = sub_19C1C5AA0(*a1, &cf);
  if (cf)
    CFRelease(cf);
  if (!*a1)
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C1A00("MaximumValue", &cf);
  v5 = sub_19C1C5AA0(*a1, &cf);
  if (cf)
    CFRelease(cf);
  if (!*a1)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C1A00("Dimension", &cf);
  v6 = sub_19C1C5AA0(*a1, &cf);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v14) < 0)
  {
    sub_19C07C6E8((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
    v7 = SHIBYTE(v14);
    *(_DWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 28) = v5;
    *(_DWORD *)(a2 + 32) = v6;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v14;
    *(_DWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 28) = v5;
    *(_DWORD *)(a2 + 32) = v6;
  }
}

void sub_19C1BDDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1BDE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_19C0934D0(&a9);
  _Unwind_Resume(a1);
}

void sub_19C1BDE90(const __CFDictionary **a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  int v6;
  int v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error *v10;
  std::runtime_error *v11;
  CFTypeRef cf;
  void *__p[2];
  uint64_t v14;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C2370(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C1A00("Name", &cf);
  sub_19C1C5604(*a1, &cf, __p);
  if (cf)
    CFRelease(cf);
  if (!*a1)
  {
    v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C1A00("MinimumValue", &cf);
  v4 = sub_19C1C5860(*a1, &cf);
  if (cf)
    CFRelease(cf);
  if (!*a1)
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C1A00("MaximumValue", &cf);
  v5 = sub_19C1C5860(*a1, &cf);
  if (cf)
    CFRelease(cf);
  if (!*a1)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C1A00("Dimension", &cf);
  v6 = sub_19C1C5AA0(*a1, &cf);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v14) < 0)
  {
    sub_19C07C6E8((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
    v7 = SHIBYTE(v14);
    *(double *)(a2 + 24) = v4;
    *(double *)(a2 + 32) = v5;
    *(_DWORD *)(a2 + 40) = v6;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v14;
    *(double *)(a2 + 24) = v4;
    *(double *)(a2 + 32) = v5;
    *(_DWORD *)(a2 + 40) = v6;
  }
}

void sub_19C1BE0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1BE14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_19C0934D0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1BE160(uint64_t a1, const char *a2, uint64_t a3)
{
  const char **v4;
  const char *v5;

  v4 = (const char **)(a1 + 16);
  sub_19C1C3AC4("[InvalidArgument] ", a2, a3);
  *(_QWORD *)a1 = &unk_1E3D21978;
  v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0)
    v5 = *v4;
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(_QWORD *)a1 = &unk_1E3D21978;
  return a1;
}

void sub_19C1BE1CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1BE1E8(CFTypeRef *a1)
{
  CFTypeRef v1;
  uint64_t v2;
  CFTypeRef cf;
  CFTypeRef v5;

  v1 = *a1;
  if (*a1)
    CFRetain(*a1);
  v5 = v1;
  sub_19C1C1A00("Algorithm", &cf);
  v2 = sub_19C1C5E2C((const __CFDictionary **)&v5, &cf, sub_19C1C5F84);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return v2;
}

void sub_19C1BE26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_19C0934D0(&a9);
  sub_19C094494(&a10);
  _Unwind_Resume(a1);
}

void sub_19C1BE288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C094494((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1BE29C(CFTypeRef *a1)
{
  CFTypeRef v1;
  uint64_t v2;
  CFTypeRef cf;
  CFTypeRef v5;

  v1 = *a1;
  if (*a1)
    CFRetain(*a1);
  v5 = v1;
  sub_19C1C1A00("Direction", &cf);
  v2 = sub_19C1C6298((const __CFDictionary **)&v5, &cf, sub_19C1C63F0);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return v2;
}

void sub_19C1BE320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_19C0934D0(&a9);
  sub_19C094494(&a10);
  _Unwind_Resume(a1);
}

void sub_19C1BE33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C094494((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1BE350(uint64_t a1)
{
  char **v2;
  char **v3;
  char **v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(char ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(char ***)(a1 + 8);
      v4 = *(char ***)a1;
      if (v3 != v2)
      {
        do
          v3 = sub_19C17B808(v3 - 12);
        while (v3 != v2);
        v4 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_19C1BE3B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *p_p;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  char v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  _BOOL4 v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char **v43;
  char **v44;
  void *v45;
  void **v46;
  void **v47;
  void *v48;
  void **v49;
  void **v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  char v64;
  _BOOL4 v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char **v71;
  char **v72;
  void *v73;
  void **v74;
  void **v75;
  void *v76;
  void **v77;
  void **v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char **v85;
  char **v86;
  void *v87;
  void **v88;
  void **v89;
  void *v90;
  void **v91;
  void **v92;
  void *exception;
  void *v94;
  void **v95;
  void *v96;
  void **v97;
  void *v98;
  char **v99;
  char v100;
  void **v101;
  void **v102;
  void *v103;
  void **v104;
  void *v105;
  char **v106;
  char v107;
  void **v108;
  void **v109;
  void *v110;
  void **v111;
  void *v112;
  char **v113;
  char v114;
  void *__p;
  uint64_t v116;
  unsigned __int8 v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _QWORD v122[3];
  _QWORD *v123;
  _BYTE v124[24];
  _BYTE *v125;
  _QWORD v126[3];
  _QWORD *v127;
  _BYTE v128[24];
  _BYTE *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  sub_19C1BCBC4("SquaredExponential", &__p);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  v12 = v117;
  v13 = (char)v117;
  if ((v117 & 0x80u) != 0)
    v12 = v116;
  if (v11 != v12)
  {
    v23 = 0;
    if (((char)v117 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_29;
  }
  if ((v117 & 0x80u) == 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if ((v10 & 0x80) != 0)
  {
    v23 = memcmp(*(const void **)a1, p_p, *(_QWORD *)(a1 + 8)) == 0;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 23))
  {
    v15 = v10 - 1;
    v16 = (unsigned __int8 *)a1;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v20 = *p_p++;
      v19 = v20;
      v21 = v15-- != 0;
      v22 = v21;
      v23 = v17 == v19;
    }
    while (v17 == v19 && (v22 & 1) != 0);
LABEL_22:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_29;
  }
  v23 = 1;
  if (((char)v117 & 0x80000000) == 0)
  {
LABEL_23:
    if (v23)
      goto LABEL_24;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(__p);
  if (v23)
  {
LABEL_24:
    sub_19C1C2D98((uint64_t)&v108, a3);
    v24 = a4[3];
    if (v24)
    {
      if ((_QWORD *)v24 == a4)
      {
        v127 = v126;
        (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v126);
LABEL_51:
        v38 = v128;
        v39 = a4[7];
        if (v39)
        {
          if ((_QWORD *)v39 == a4 + 4)
          {
            v129 = v128;
            (*(void (**)(_QWORD *, _BYTE *))(a4[4] + 24))(a4 + 4, v128);
LABEL_56:
            sub_19C1BED98(a2, (uint64_t)&v108, v126, a5);
            if (v129 == v128)
            {
              v40 = 4;
            }
            else
            {
              if (!v129)
                goto LABEL_61;
              v40 = 5;
              v38 = v129;
            }
            (*(void (**)(_QWORD *))(*v38 + 8 * v40))(v38);
LABEL_61:
            v41 = v127;
            if (v127 == v126)
            {
              v42 = 4;
              v41 = v126;
            }
            else
            {
              if (!v127)
              {
LABEL_66:
                if (v114)
                {
                  v43 = (char **)v112;
                  if (v112)
                  {
                    v44 = v113;
                    v45 = v112;
                    if (v113 != v112)
                    {
                      do
                        v44 = sub_19C17B808(v44 - 12);
                      while (v44 != v43);
                      v45 = v112;
                    }
                    v113 = v43;
                    operator delete(v45);
                  }
                }
                v46 = (void **)v110;
                if (v110)
                {
                  v47 = v111;
                  v48 = v110;
                  if (v111 != v110)
                  {
                    do
                    {
                      if (*((char *)v47 - 17) < 0)
                        operator delete(*(v47 - 5));
                      v47 -= 5;
                    }
                    while (v47 != v46);
                    v48 = v110;
                  }
                  v111 = v46;
                  operator delete(v48);
                }
                v49 = v108;
                if (v108)
                {
                  v50 = v109;
                  v51 = v108;
                  if (v109 != v108)
                  {
                    do
                    {
                      if (*((char *)v50 - 25) < 0)
                        operator delete(*(v50 - 6));
                      v50 -= 6;
                    }
                    while (v50 != v49);
                    v51 = v108;
                  }
                  v109 = v49;
LABEL_201:
                  operator delete(v51);
                  return;
                }
                return;
              }
              v42 = 5;
            }
            (*(void (**)(void))(*v41 + 8 * v42))();
            goto LABEL_66;
          }
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        }
        v129 = (_BYTE *)v39;
        goto LABEL_56;
      }
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    }
    v127 = (_QWORD *)v24;
    goto LABEL_51;
  }
LABEL_30:
  sub_19C1BCBC4("ARDSquaredExponential", &__p);
  v25 = *(unsigned __int8 *)(a1 + 23);
  if ((v25 & 0x80u) == 0)
    v26 = *(unsigned __int8 *)(a1 + 23);
  else
    v26 = *(_QWORD *)(a1 + 8);
  v27 = v117;
  v28 = (char)v117;
  if ((v117 & 0x80u) != 0)
    v27 = v116;
  if (v26 != v27)
  {
    v37 = 0;
    if (((char)v117 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_96;
  }
  if ((v117 & 0x80u) == 0)
    v29 = (unsigned __int8 *)&__p;
  else
    v29 = (unsigned __int8 *)__p;
  if ((v25 & 0x80) != 0)
  {
    v37 = memcmp(*(const void **)a1, v29, *(_QWORD *)(a1 + 8)) == 0;
    goto LABEL_89;
  }
  if (*(_BYTE *)(a1 + 23))
  {
    v30 = v25 - 1;
    v31 = (unsigned __int8 *)a1;
    do
    {
      v33 = *v31++;
      v32 = v33;
      v35 = *v29++;
      v34 = v35;
      v21 = v30-- != 0;
      v36 = v21;
      v37 = v32 == v34;
    }
    while (v32 == v34 && (v36 & 1) != 0);
LABEL_89:
    if ((v28 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_96;
  }
  v37 = 1;
  if (((char)v117 & 0x80000000) == 0)
  {
LABEL_90:
    if (v37)
      goto LABEL_91;
LABEL_97:
    sub_19C1BCBC4("MaternFiveHalves", &__p);
    v53 = *(unsigned __int8 *)(a1 + 23);
    if ((v53 & 0x80u) == 0)
      v54 = *(unsigned __int8 *)(a1 + 23);
    else
      v54 = *(_QWORD *)(a1 + 8);
    v55 = v117;
    v56 = (char)v117;
    if ((v117 & 0x80u) != 0)
      v55 = v116;
    if (v54 == v55)
    {
      if ((v117 & 0x80u) == 0)
        v57 = (unsigned __int8 *)&__p;
      else
        v57 = (unsigned __int8 *)__p;
      if ((v53 & 0x80) != 0)
      {
        v65 = memcmp(*(const void **)a1, v57, *(_QWORD *)(a1 + 8)) == 0;
        goto LABEL_156;
      }
      if (*(_BYTE *)(a1 + 23))
      {
        v58 = v53 - 1;
        v59 = (unsigned __int8 *)a1;
        do
        {
          v61 = *v59++;
          v60 = v61;
          v63 = *v57++;
          v62 = v63;
          v21 = v58-- != 0;
          v64 = v21;
          v65 = v60 == v62;
        }
        while (v60 == v62 && (v64 & 1) != 0);
LABEL_156:
        if ((v56 & 0x80000000) == 0)
          goto LABEL_158;
        goto LABEL_157;
      }
      v65 = 1;
      if (((char)v117 & 0x80000000) == 0)
      {
LABEL_158:
        if (!v65)
        {
          exception = __cxa_allocate_exception(0x28uLL);
          sub_19C1C0B9C((uint64_t)exception, "Invalid kernel: ", a1);
          __cxa_throw(exception, (struct type_info *)&unk_1E3D1D7B8, (void (*)(void *))sub_19C1BB384);
        }
        sub_19C1C2D98((uint64_t)&v94, a3);
        v79 = a4[3];
        if (v79)
        {
          if ((_QWORD *)v79 == a4)
          {
            v119 = v118;
            (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v118);
LABEL_164:
            v80 = v120;
            v81 = a4[7];
            if (v81)
            {
              if ((_QWORD *)v81 == a4 + 4)
              {
                v121 = v120;
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v81 + 24))(v81, v120);
LABEL_169:
                sub_19C1C01C4(a2, (uint64_t)&v94, v118, a5);
                if (v121 == v120)
                {
                  v82 = 4;
                }
                else
                {
                  if (!v121)
                    goto LABEL_174;
                  v82 = 5;
                  v80 = v121;
                }
                (*(void (**)(_QWORD *))(*v80 + 8 * v82))(v80);
LABEL_174:
                v83 = v119;
                if (v119 == v118)
                {
                  v84 = 4;
                  v83 = v118;
                }
                else
                {
                  if (!v119)
                  {
LABEL_179:
                    if (v100)
                    {
                      v85 = (char **)v98;
                      if (v98)
                      {
                        v86 = v99;
                        v87 = v98;
                        if (v99 != v98)
                        {
                          do
                            v86 = sub_19C17B808(v86 - 12);
                          while (v86 != v85);
                          v87 = v98;
                        }
                        v99 = v85;
                        operator delete(v87);
                      }
                    }
                    v88 = (void **)v96;
                    if (v96)
                    {
                      v89 = v97;
                      v90 = v96;
                      if (v97 != v96)
                      {
                        do
                        {
                          if (*((char *)v89 - 17) < 0)
                            operator delete(*(v89 - 5));
                          v89 -= 5;
                        }
                        while (v89 != v88);
                        v90 = v96;
                      }
                      v97 = v88;
                      operator delete(v90);
                    }
                    v91 = (void **)v94;
                    if (v94)
                    {
                      v92 = v95;
                      v51 = v94;
                      if (v95 != v94)
                      {
                        do
                        {
                          if (*((char *)v92 - 25) < 0)
                            operator delete(*(v92 - 6));
                          v92 -= 6;
                        }
                        while (v92 != v91);
                        v51 = v94;
                      }
                      v95 = v91;
                      goto LABEL_201;
                    }
                    return;
                  }
                  v84 = 5;
                }
                (*(void (**)(void))(*v83 + 8 * v84))();
                goto LABEL_179;
              }
              v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 16))(v81);
            }
            v121 = (_BYTE *)v81;
            goto LABEL_169;
          }
          v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79);
        }
        v119 = (_QWORD *)v79;
        goto LABEL_164;
      }
    }
    else
    {
      v65 = 0;
      if (((char)v117 & 0x80000000) == 0)
        goto LABEL_158;
    }
LABEL_157:
    operator delete(__p);
    goto LABEL_158;
  }
LABEL_96:
  operator delete(__p);
  if (!v37)
    goto LABEL_97;
LABEL_91:
  sub_19C1C2D98((uint64_t)&v101, a3);
  v52 = a4[3];
  if (!v52)
  {
LABEL_94:
    v123 = (_QWORD *)v52;
    goto LABEL_118;
  }
  if ((_QWORD *)v52 != a4)
  {
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
    goto LABEL_94;
  }
  v123 = v122;
  (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v122);
LABEL_118:
  v66 = v124;
  v67 = a4[7];
  if (!v67)
  {
LABEL_121:
    v125 = (_BYTE *)v67;
    goto LABEL_123;
  }
  if ((_QWORD *)v67 != a4 + 4)
  {
    v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
    goto LABEL_121;
  }
  v125 = v124;
  (*(void (**)(_QWORD *, _BYTE *))(a4[4] + 24))(a4 + 4, v124);
LABEL_123:
  sub_19C1BF7EC(a2, (uint64_t)&v101, v122, a5);
  if (v125 == v124)
  {
    v68 = 4;
  }
  else
  {
    if (!v125)
      goto LABEL_128;
    v68 = 5;
    v66 = v125;
  }
  (*(void (**)(_QWORD *))(*v66 + 8 * v68))(v66);
LABEL_128:
  v69 = v123;
  if (v123 == v122)
  {
    v70 = 4;
    v69 = v122;
    goto LABEL_132;
  }
  if (v123)
  {
    v70 = 5;
LABEL_132:
    (*(void (**)(void))(*v69 + 8 * v70))();
  }
  if (v107)
  {
    v71 = (char **)v105;
    if (v105)
    {
      v72 = v106;
      v73 = v105;
      if (v106 != v105)
      {
        do
          v72 = sub_19C17B808(v72 - 12);
        while (v72 != v71);
        v73 = v105;
      }
      v106 = v71;
      operator delete(v73);
    }
  }
  v74 = (void **)v103;
  if (v103)
  {
    v75 = v104;
    v76 = v103;
    if (v104 != v103)
    {
      do
      {
        if (*((char *)v75 - 17) < 0)
          operator delete(*(v75 - 5));
        v75 -= 5;
      }
      while (v75 != v74);
      v76 = v103;
    }
    v104 = v74;
    operator delete(v76);
  }
  v77 = v101;
  if (v101)
  {
    v78 = v102;
    v51 = v101;
    if (v102 != v101)
    {
      do
      {
        if (*((char *)v78 - 25) < 0)
          operator delete(*(v78 - 6));
        v78 -= 6;
      }
      while (v78 != v77);
      v51 = v101;
    }
    v102 = v77;
    goto LABEL_201;
  }
}

void sub_19C1BEC24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1BEC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char *a61)
{
  char *v62;
  uint64_t v63;

  v62 = a61;
  if (a61 == &a58)
  {
    v63 = 4;
    v62 = &a58;
  }
  else
  {
    if (!a61)
    {
      sub_19C1C2E88((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
    v63 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v62 + 8 * v63))();
  sub_19C1C2E88((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19C1BED04()
{
  uint64_t v0;

  sub_19C1BF770((_QWORD *)(v0 - 200));
  JUMPOUT(0x19C1BED10);
}

void sub_19C1BED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;

  v42 = *(_QWORD **)(v40 - 112);
  if (v42 == (_QWORD *)(v40 - 136))
  {
    v43 = 4;
    v42 = (_QWORD *)(v40 - 136);
  }
  else
  {
    if (!v42)
    {
      sub_19C1C2E88((uint64_t)&a40);
      _Unwind_Resume(a1);
    }
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
  sub_19C1C2E88((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_19C1BED98(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *p_p;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  _BOOL4 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char **v41;
  char **v42;
  void *v43;
  void **v44;
  void **v45;
  void *v46;
  void **v47;
  void **v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char v62;
  _BOOL4 v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char **v69;
  char **v70;
  void *v71;
  void **v72;
  void **v73;
  void *v74;
  void **v75;
  void **v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char **v83;
  char **v84;
  void *v85;
  void **v86;
  void **v87;
  void *v88;
  void **v89;
  void **v90;
  void *exception;
  void *v92;
  void **v93;
  void *v94;
  void **v95;
  void *v96;
  char **v97;
  char v98;
  void **v99;
  void **v100;
  void *v101;
  void **v102;
  void *v103;
  char **v104;
  char v105;
  void **v106;
  void **v107;
  void *v108;
  void **v109;
  void *v110;
  char **v111;
  char v112;
  void *__p;
  uint64_t v114;
  unsigned __int8 v115;
  _QWORD v116[3];
  _QWORD *v117;
  _BYTE v118[24];
  _BYTE *v119;
  _QWORD v120[3];
  _QWORD *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  sub_19C1BCBC4("ProbabilityOfImprovement", &__p);
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a1 + 23);
  else
    v9 = *(_QWORD *)(a1 + 8);
  v10 = v115;
  v11 = (char)v115;
  if ((v115 & 0x80u) != 0)
    v10 = v114;
  if (v9 != v10)
  {
    v21 = 0;
    if (((char)v115 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_29;
  }
  if ((v115 & 0x80u) == 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if ((v8 & 0x80) != 0)
  {
    v21 = memcmp(*(const void **)a1, p_p, *(_QWORD *)(a1 + 8)) == 0;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 23))
  {
    v13 = v8 - 1;
    v14 = (unsigned __int8 *)a1;
    do
    {
      v16 = *v14++;
      v15 = v16;
      v18 = *p_p++;
      v17 = v18;
      v19 = v13-- != 0;
      v20 = v19;
      v21 = v15 == v17;
    }
    while (v15 == v17 && (v20 & 1) != 0);
LABEL_22:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_29;
  }
  v21 = 1;
  if (((char)v115 & 0x80000000) == 0)
  {
LABEL_23:
    if (v21)
      goto LABEL_24;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(__p);
  if (v21)
  {
LABEL_24:
    sub_19C1C2D98((uint64_t)&v106, a2);
    v22 = a3[3];
    if (v22)
    {
      if ((_QWORD *)v22 == a3)
      {
        v125 = v124;
        (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v124);
LABEL_51:
        v36 = v126;
        v37 = a3[7];
        if (v37)
        {
          if ((_QWORD *)v37 == a3 + 4)
          {
            v127 = v126;
            (*(void (**)(_QWORD *, _BYTE *))(a3[4] + 24))(a3 + 4, v126);
LABEL_56:
            sub_19C1C65C0((uint64_t)&v106, v124, a4);
            if (v127 == v126)
            {
              v38 = 4;
            }
            else
            {
              if (!v127)
                goto LABEL_61;
              v38 = 5;
              v36 = v127;
            }
            (*(void (**)(_QWORD *))(*v36 + 8 * v38))(v36);
LABEL_61:
            v39 = v125;
            if (v125 == v124)
            {
              v40 = 4;
              v39 = v124;
            }
            else
            {
              if (!v125)
              {
LABEL_66:
                if (v112)
                {
                  v41 = (char **)v110;
                  if (v110)
                  {
                    v42 = v111;
                    v43 = v110;
                    if (v111 != v110)
                    {
                      do
                        v42 = sub_19C17B808(v42 - 12);
                      while (v42 != v41);
                      v43 = v110;
                    }
                    v111 = v41;
                    operator delete(v43);
                  }
                }
                v44 = (void **)v108;
                if (v108)
                {
                  v45 = v109;
                  v46 = v108;
                  if (v109 != v108)
                  {
                    do
                    {
                      if (*((char *)v45 - 17) < 0)
                        operator delete(*(v45 - 5));
                      v45 -= 5;
                    }
                    while (v45 != v44);
                    v46 = v108;
                  }
                  v109 = v44;
                  operator delete(v46);
                }
                v47 = v106;
                if (v106)
                {
                  v48 = v107;
                  v49 = v106;
                  if (v107 != v106)
                  {
                    do
                    {
                      if (*((char *)v48 - 25) < 0)
                        operator delete(*(v48 - 6));
                      v48 -= 6;
                    }
                    while (v48 != v47);
                    v49 = v106;
                  }
                  v107 = v47;
LABEL_201:
                  operator delete(v49);
                  return;
                }
                return;
              }
              v40 = 5;
            }
            (*(void (**)(void))(*v39 + 8 * v40))();
            goto LABEL_66;
          }
          v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        }
        v127 = (_BYTE *)v37;
        goto LABEL_56;
      }
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
    v125 = (_QWORD *)v22;
    goto LABEL_51;
  }
LABEL_30:
  sub_19C1BCBC4("ExpectedImprovement", &__p);
  v23 = *(unsigned __int8 *)(a1 + 23);
  if ((v23 & 0x80u) == 0)
    v24 = *(unsigned __int8 *)(a1 + 23);
  else
    v24 = *(_QWORD *)(a1 + 8);
  v25 = v115;
  v26 = (char)v115;
  if ((v115 & 0x80u) != 0)
    v25 = v114;
  if (v24 != v25)
  {
    v35 = 0;
    if (((char)v115 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_96;
  }
  if ((v115 & 0x80u) == 0)
    v27 = (unsigned __int8 *)&__p;
  else
    v27 = (unsigned __int8 *)__p;
  if ((v23 & 0x80) != 0)
  {
    v35 = memcmp(*(const void **)a1, v27, *(_QWORD *)(a1 + 8)) == 0;
    goto LABEL_89;
  }
  if (*(_BYTE *)(a1 + 23))
  {
    v28 = v23 - 1;
    v29 = (unsigned __int8 *)a1;
    do
    {
      v31 = *v29++;
      v30 = v31;
      v33 = *v27++;
      v32 = v33;
      v19 = v28-- != 0;
      v34 = v19;
      v35 = v30 == v32;
    }
    while (v30 == v32 && (v34 & 1) != 0);
LABEL_89:
    if ((v26 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_96;
  }
  v35 = 1;
  if (((char)v115 & 0x80000000) == 0)
  {
LABEL_90:
    if (v35)
      goto LABEL_91;
LABEL_97:
    sub_19C1BCBC4("UpperConfidenceBound", &__p);
    v51 = *(unsigned __int8 *)(a1 + 23);
    if ((v51 & 0x80u) == 0)
      v52 = *(unsigned __int8 *)(a1 + 23);
    else
      v52 = *(_QWORD *)(a1 + 8);
    v53 = v115;
    v54 = (char)v115;
    if ((v115 & 0x80u) != 0)
      v53 = v114;
    if (v52 == v53)
    {
      if ((v115 & 0x80u) == 0)
        v55 = (unsigned __int8 *)&__p;
      else
        v55 = (unsigned __int8 *)__p;
      if ((v51 & 0x80) != 0)
      {
        v63 = memcmp(*(const void **)a1, v55, *(_QWORD *)(a1 + 8)) == 0;
        goto LABEL_156;
      }
      if (*(_BYTE *)(a1 + 23))
      {
        v56 = v51 - 1;
        v57 = (unsigned __int8 *)a1;
        do
        {
          v59 = *v57++;
          v58 = v59;
          v61 = *v55++;
          v60 = v61;
          v19 = v56-- != 0;
          v62 = v19;
          v63 = v58 == v60;
        }
        while (v58 == v60 && (v62 & 1) != 0);
LABEL_156:
        if ((v54 & 0x80000000) == 0)
          goto LABEL_158;
        goto LABEL_157;
      }
      v63 = 1;
      if (((char)v115 & 0x80000000) == 0)
      {
LABEL_158:
        if (!v63)
        {
          exception = __cxa_allocate_exception(0x28uLL);
          sub_19C1C71FC((uint64_t)exception, "Invalid acquisition: ", a1);
          __cxa_throw(exception, (struct type_info *)&unk_1E3D1D7B8, (void (*)(void *))sub_19C1BB384);
        }
        sub_19C1C2D98((uint64_t)&v92, a2);
        v77 = a3[3];
        if (v77)
        {
          if ((_QWORD *)v77 == a3)
          {
            v117 = v116;
            (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v116);
LABEL_164:
            v78 = v118;
            v79 = a3[7];
            if (v79)
            {
              if ((_QWORD *)v79 == a3 + 4)
              {
                v119 = v118;
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v79 + 24))(v79, v118);
LABEL_169:
                sub_19C1C6DE8((uint64_t)&v92, v116, a4);
                if (v119 == v118)
                {
                  v80 = 4;
                }
                else
                {
                  if (!v119)
                    goto LABEL_174;
                  v80 = 5;
                  v78 = v119;
                }
                (*(void (**)(_QWORD *))(*v78 + 8 * v80))(v78);
LABEL_174:
                v81 = v117;
                if (v117 == v116)
                {
                  v82 = 4;
                  v81 = v116;
                }
                else
                {
                  if (!v117)
                  {
LABEL_179:
                    if (v98)
                    {
                      v83 = (char **)v96;
                      if (v96)
                      {
                        v84 = v97;
                        v85 = v96;
                        if (v97 != v96)
                        {
                          do
                            v84 = sub_19C17B808(v84 - 12);
                          while (v84 != v83);
                          v85 = v96;
                        }
                        v97 = v83;
                        operator delete(v85);
                      }
                    }
                    v86 = (void **)v94;
                    if (v94)
                    {
                      v87 = v95;
                      v88 = v94;
                      if (v95 != v94)
                      {
                        do
                        {
                          if (*((char *)v87 - 17) < 0)
                            operator delete(*(v87 - 5));
                          v87 -= 5;
                        }
                        while (v87 != v86);
                        v88 = v94;
                      }
                      v95 = v86;
                      operator delete(v88);
                    }
                    v89 = (void **)v92;
                    if (v92)
                    {
                      v90 = v93;
                      v49 = v92;
                      if (v93 != v92)
                      {
                        do
                        {
                          if (*((char *)v90 - 25) < 0)
                            operator delete(*(v90 - 6));
                          v90 -= 6;
                        }
                        while (v90 != v89);
                        v49 = v92;
                      }
                      v93 = v89;
                      goto LABEL_201;
                    }
                    return;
                  }
                  v82 = 5;
                }
                (*(void (**)(void))(*v81 + 8 * v82))();
                goto LABEL_179;
              }
              v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79);
            }
            v119 = (_BYTE *)v79;
            goto LABEL_169;
          }
          v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
        }
        v117 = (_QWORD *)v77;
        goto LABEL_164;
      }
    }
    else
    {
      v63 = 0;
      if (((char)v115 & 0x80000000) == 0)
        goto LABEL_158;
    }
LABEL_157:
    operator delete(__p);
    goto LABEL_158;
  }
LABEL_96:
  operator delete(__p);
  if (!v35)
    goto LABEL_97;
LABEL_91:
  sub_19C1C2D98((uint64_t)&v99, a2);
  v50 = a3[3];
  if (!v50)
  {
LABEL_94:
    v121 = (_QWORD *)v50;
    goto LABEL_118;
  }
  if ((_QWORD *)v50 != a3)
  {
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    goto LABEL_94;
  }
  v121 = v120;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v120);
LABEL_118:
  v64 = v122;
  v65 = a3[7];
  if (!v65)
  {
LABEL_121:
    v123 = (_BYTE *)v65;
    goto LABEL_123;
  }
  if ((_QWORD *)v65 != a3 + 4)
  {
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
    goto LABEL_121;
  }
  v123 = v122;
  (*(void (**)(_QWORD *, _BYTE *))(a3[4] + 24))(a3 + 4, v122);
LABEL_123:
  sub_19C1C69D4((uint64_t)&v99, v120, a4);
  if (v123 == v122)
  {
    v66 = 4;
  }
  else
  {
    if (!v123)
      goto LABEL_128;
    v66 = 5;
    v64 = v123;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v66))(v64);
LABEL_128:
  v67 = v121;
  if (v121 == v120)
  {
    v68 = 4;
    v67 = v120;
    goto LABEL_132;
  }
  if (v121)
  {
    v68 = 5;
LABEL_132:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  if (v105)
  {
    v69 = (char **)v103;
    if (v103)
    {
      v70 = v104;
      v71 = v103;
      if (v104 != v103)
      {
        do
          v70 = sub_19C17B808(v70 - 12);
        while (v70 != v69);
        v71 = v103;
      }
      v104 = v69;
      operator delete(v71);
    }
  }
  v72 = (void **)v101;
  if (v101)
  {
    v73 = v102;
    v74 = v101;
    if (v102 != v101)
    {
      do
      {
        if (*((char *)v73 - 17) < 0)
          operator delete(*(v73 - 5));
        v73 -= 5;
      }
      while (v73 != v72);
      v74 = v101;
    }
    v102 = v72;
    operator delete(v74);
  }
  v75 = v99;
  if (v99)
  {
    v76 = v100;
    v49 = v99;
    if (v100 != v99)
    {
      do
      {
        if (*((char *)v76 - 25) < 0)
          operator delete(*(v76 - 6));
        v76 -= 6;
      }
      while (v76 != v75);
      v49 = v99;
    }
    v100 = v75;
    goto LABEL_201;
  }
}

void sub_19C1BF5FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1BF610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char *a61)
{
  char *v62;
  uint64_t v63;

  v62 = a61;
  if (a61 == &a58)
  {
    v63 = 4;
    v62 = &a58;
  }
  else
  {
    if (!a61)
    {
      sub_19C1C2E88((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
    v63 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v62 + 8 * v63))();
  sub_19C1C2E88((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19C1BF6DC()
{
  uint64_t v0;

  sub_19C1BF770((_QWORD *)(v0 - 200));
  JUMPOUT(0x19C1BF6E8);
}

void sub_19C1BF6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;

  v42 = *(_QWORD **)(v40 - 112);
  if (v42 == (_QWORD *)(v40 - 136))
  {
    v43 = 4;
    v42 = (_QWORD *)(v40 - 136);
  }
  else
  {
    if (!v42)
    {
      sub_19C1C2E88((uint64_t)&a40);
      _Unwind_Resume(a1);
    }
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
  sub_19C1C2E88((uint64_t)&a40);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C1BF770(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_19C1BF7EC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *p_p;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  _BOOL4 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char **v41;
  char **v42;
  void *v43;
  void **v44;
  void **v45;
  void *v46;
  void **v47;
  void **v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char v62;
  _BOOL4 v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char **v69;
  char **v70;
  void *v71;
  void **v72;
  void **v73;
  void *v74;
  void **v75;
  void **v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char **v83;
  char **v84;
  void *v85;
  void **v86;
  void **v87;
  void *v88;
  void **v89;
  void **v90;
  void *exception;
  void *v92;
  void **v93;
  void *v94;
  void **v95;
  void *v96;
  char **v97;
  char v98;
  void **v99;
  void **v100;
  void *v101;
  void **v102;
  void *v103;
  char **v104;
  char v105;
  void **v106;
  void **v107;
  void *v108;
  void **v109;
  void *v110;
  char **v111;
  char v112;
  void *__p;
  uint64_t v114;
  unsigned __int8 v115;
  _QWORD v116[3];
  _QWORD *v117;
  _BYTE v118[24];
  _BYTE *v119;
  _QWORD v120[3];
  _QWORD *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  sub_19C1BCBC4("ProbabilityOfImprovement", &__p);
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a1 + 23);
  else
    v9 = *(_QWORD *)(a1 + 8);
  v10 = v115;
  v11 = (char)v115;
  if ((v115 & 0x80u) != 0)
    v10 = v114;
  if (v9 != v10)
  {
    v21 = 0;
    if (((char)v115 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_29;
  }
  if ((v115 & 0x80u) == 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if ((v8 & 0x80) != 0)
  {
    v21 = memcmp(*(const void **)a1, p_p, *(_QWORD *)(a1 + 8)) == 0;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 23))
  {
    v13 = v8 - 1;
    v14 = (unsigned __int8 *)a1;
    do
    {
      v16 = *v14++;
      v15 = v16;
      v18 = *p_p++;
      v17 = v18;
      v19 = v13-- != 0;
      v20 = v19;
      v21 = v15 == v17;
    }
    while (v15 == v17 && (v20 & 1) != 0);
LABEL_22:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_29;
  }
  v21 = 1;
  if (((char)v115 & 0x80000000) == 0)
  {
LABEL_23:
    if (v21)
      goto LABEL_24;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(__p);
  if (v21)
  {
LABEL_24:
    sub_19C1C2D98((uint64_t)&v106, a2);
    v22 = a3[3];
    if (v22)
    {
      if ((_QWORD *)v22 == a3)
      {
        v125 = v124;
        (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v124);
LABEL_51:
        v36 = v126;
        v37 = a3[7];
        if (v37)
        {
          if ((_QWORD *)v37 == a3 + 4)
          {
            v127 = v126;
            (*(void (**)(_QWORD *, _BYTE *))(a3[4] + 24))(a3 + 4, v126);
LABEL_56:
            sub_19C1E6644((uint64_t)&v106, v124, a4);
            if (v127 == v126)
            {
              v38 = 4;
            }
            else
            {
              if (!v127)
                goto LABEL_61;
              v38 = 5;
              v36 = v127;
            }
            (*(void (**)(_QWORD *))(*v36 + 8 * v38))(v36);
LABEL_61:
            v39 = v125;
            if (v125 == v124)
            {
              v40 = 4;
              v39 = v124;
            }
            else
            {
              if (!v125)
              {
LABEL_66:
                if (v112)
                {
                  v41 = (char **)v110;
                  if (v110)
                  {
                    v42 = v111;
                    v43 = v110;
                    if (v111 != v110)
                    {
                      do
                        v42 = sub_19C17B808(v42 - 12);
                      while (v42 != v41);
                      v43 = v110;
                    }
                    v111 = v41;
                    operator delete(v43);
                  }
                }
                v44 = (void **)v108;
                if (v108)
                {
                  v45 = v109;
                  v46 = v108;
                  if (v109 != v108)
                  {
                    do
                    {
                      if (*((char *)v45 - 17) < 0)
                        operator delete(*(v45 - 5));
                      v45 -= 5;
                    }
                    while (v45 != v44);
                    v46 = v108;
                  }
                  v109 = v44;
                  operator delete(v46);
                }
                v47 = v106;
                if (v106)
                {
                  v48 = v107;
                  v49 = v106;
                  if (v107 != v106)
                  {
                    do
                    {
                      if (*((char *)v48 - 25) < 0)
                        operator delete(*(v48 - 6));
                      v48 -= 6;
                    }
                    while (v48 != v47);
                    v49 = v106;
                  }
                  v107 = v47;
LABEL_201:
                  operator delete(v49);
                  return;
                }
                return;
              }
              v40 = 5;
            }
            (*(void (**)(void))(*v39 + 8 * v40))();
            goto LABEL_66;
          }
          v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        }
        v127 = (_BYTE *)v37;
        goto LABEL_56;
      }
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
    v125 = (_QWORD *)v22;
    goto LABEL_51;
  }
LABEL_30:
  sub_19C1BCBC4("ExpectedImprovement", &__p);
  v23 = *(unsigned __int8 *)(a1 + 23);
  if ((v23 & 0x80u) == 0)
    v24 = *(unsigned __int8 *)(a1 + 23);
  else
    v24 = *(_QWORD *)(a1 + 8);
  v25 = v115;
  v26 = (char)v115;
  if ((v115 & 0x80u) != 0)
    v25 = v114;
  if (v24 != v25)
  {
    v35 = 0;
    if (((char)v115 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_96;
  }
  if ((v115 & 0x80u) == 0)
    v27 = (unsigned __int8 *)&__p;
  else
    v27 = (unsigned __int8 *)__p;
  if ((v23 & 0x80) != 0)
  {
    v35 = memcmp(*(const void **)a1, v27, *(_QWORD *)(a1 + 8)) == 0;
    goto LABEL_89;
  }
  if (*(_BYTE *)(a1 + 23))
  {
    v28 = v23 - 1;
    v29 = (unsigned __int8 *)a1;
    do
    {
      v31 = *v29++;
      v30 = v31;
      v33 = *v27++;
      v32 = v33;
      v19 = v28-- != 0;
      v34 = v19;
      v35 = v30 == v32;
    }
    while (v30 == v32 && (v34 & 1) != 0);
LABEL_89:
    if ((v26 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_96;
  }
  v35 = 1;
  if (((char)v115 & 0x80000000) == 0)
  {
LABEL_90:
    if (v35)
      goto LABEL_91;
LABEL_97:
    sub_19C1BCBC4("UpperConfidenceBound", &__p);
    v51 = *(unsigned __int8 *)(a1 + 23);
    if ((v51 & 0x80u) == 0)
      v52 = *(unsigned __int8 *)(a1 + 23);
    else
      v52 = *(_QWORD *)(a1 + 8);
    v53 = v115;
    v54 = (char)v115;
    if ((v115 & 0x80u) != 0)
      v53 = v114;
    if (v52 == v53)
    {
      if ((v115 & 0x80u) == 0)
        v55 = (unsigned __int8 *)&__p;
      else
        v55 = (unsigned __int8 *)__p;
      if ((v51 & 0x80) != 0)
      {
        v63 = memcmp(*(const void **)a1, v55, *(_QWORD *)(a1 + 8)) == 0;
        goto LABEL_156;
      }
      if (*(_BYTE *)(a1 + 23))
      {
        v56 = v51 - 1;
        v57 = (unsigned __int8 *)a1;
        do
        {
          v59 = *v57++;
          v58 = v59;
          v61 = *v55++;
          v60 = v61;
          v19 = v56-- != 0;
          v62 = v19;
          v63 = v58 == v60;
        }
        while (v58 == v60 && (v62 & 1) != 0);
LABEL_156:
        if ((v54 & 0x80000000) == 0)
          goto LABEL_158;
        goto LABEL_157;
      }
      v63 = 1;
      if (((char)v115 & 0x80000000) == 0)
      {
LABEL_158:
        if (!v63)
        {
          exception = __cxa_allocate_exception(0x28uLL);
          sub_19C1C71FC((uint64_t)exception, "Invalid acquisition: ", a1);
          __cxa_throw(exception, (struct type_info *)&unk_1E3D1D7B8, (void (*)(void *))sub_19C1BB384);
        }
        sub_19C1C2D98((uint64_t)&v92, a2);
        v77 = a3[3];
        if (v77)
        {
          if ((_QWORD *)v77 == a3)
          {
            v117 = v116;
            (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v116);
LABEL_164:
            v78 = v118;
            v79 = a3[7];
            if (v79)
            {
              if ((_QWORD *)v79 == a3 + 4)
              {
                v119 = v118;
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v79 + 24))(v79, v118);
LABEL_169:
                sub_19C1E6E6C((uint64_t)&v92, v116, a4);
                if (v119 == v118)
                {
                  v80 = 4;
                }
                else
                {
                  if (!v119)
                    goto LABEL_174;
                  v80 = 5;
                  v78 = v119;
                }
                (*(void (**)(_QWORD *))(*v78 + 8 * v80))(v78);
LABEL_174:
                v81 = v117;
                if (v117 == v116)
                {
                  v82 = 4;
                  v81 = v116;
                }
                else
                {
                  if (!v117)
                  {
LABEL_179:
                    if (v98)
                    {
                      v83 = (char **)v96;
                      if (v96)
                      {
                        v84 = v97;
                        v85 = v96;
                        if (v97 != v96)
                        {
                          do
                            v84 = sub_19C17B808(v84 - 12);
                          while (v84 != v83);
                          v85 = v96;
                        }
                        v97 = v83;
                        operator delete(v85);
                      }
                    }
                    v86 = (void **)v94;
                    if (v94)
                    {
                      v87 = v95;
                      v88 = v94;
                      if (v95 != v94)
                      {
                        do
                        {
                          if (*((char *)v87 - 17) < 0)
                            operator delete(*(v87 - 5));
                          v87 -= 5;
                        }
                        while (v87 != v86);
                        v88 = v94;
                      }
                      v95 = v86;
                      operator delete(v88);
                    }
                    v89 = (void **)v92;
                    if (v92)
                    {
                      v90 = v93;
                      v49 = v92;
                      if (v93 != v92)
                      {
                        do
                        {
                          if (*((char *)v90 - 25) < 0)
                            operator delete(*(v90 - 6));
                          v90 -= 6;
                        }
                        while (v90 != v89);
                        v49 = v92;
                      }
                      v93 = v89;
                      goto LABEL_201;
                    }
                    return;
                  }
                  v82 = 5;
                }
                (*(void (**)(void))(*v81 + 8 * v82))();
                goto LABEL_179;
              }
              v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79);
            }
            v119 = (_BYTE *)v79;
            goto LABEL_169;
          }
          v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
        }
        v117 = (_QWORD *)v77;
        goto LABEL_164;
      }
    }
    else
    {
      v63 = 0;
      if (((char)v115 & 0x80000000) == 0)
        goto LABEL_158;
    }
LABEL_157:
    operator delete(__p);
    goto LABEL_158;
  }
LABEL_96:
  operator delete(__p);
  if (!v35)
    goto LABEL_97;
LABEL_91:
  sub_19C1C2D98((uint64_t)&v99, a2);
  v50 = a3[3];
  if (!v50)
  {
LABEL_94:
    v121 = (_QWORD *)v50;
    goto LABEL_118;
  }
  if ((_QWORD *)v50 != a3)
  {
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    goto LABEL_94;
  }
  v121 = v120;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v120);
LABEL_118:
  v64 = v122;
  v65 = a3[7];
  if (!v65)
  {
LABEL_121:
    v123 = (_BYTE *)v65;
    goto LABEL_123;
  }
  if ((_QWORD *)v65 != a3 + 4)
  {
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
    goto LABEL_121;
  }
  v123 = v122;
  (*(void (**)(_QWORD *, _BYTE *))(a3[4] + 24))(a3 + 4, v122);
LABEL_123:
  sub_19C1E6A58((uint64_t)&v99, v120, a4);
  if (v123 == v122)
  {
    v66 = 4;
  }
  else
  {
    if (!v123)
      goto LABEL_128;
    v66 = 5;
    v64 = v123;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v66))(v64);
LABEL_128:
  v67 = v121;
  if (v121 == v120)
  {
    v68 = 4;
    v67 = v120;
    goto LABEL_132;
  }
  if (v121)
  {
    v68 = 5;
LABEL_132:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  if (v105)
  {
    v69 = (char **)v103;
    if (v103)
    {
      v70 = v104;
      v71 = v103;
      if (v104 != v103)
      {
        do
          v70 = sub_19C17B808(v70 - 12);
        while (v70 != v69);
        v71 = v103;
      }
      v104 = v69;
      operator delete(v71);
    }
  }
  v72 = (void **)v101;
  if (v101)
  {
    v73 = v102;
    v74 = v101;
    if (v102 != v101)
    {
      do
      {
        if (*((char *)v73 - 17) < 0)
          operator delete(*(v73 - 5));
        v73 -= 5;
      }
      while (v73 != v72);
      v74 = v101;
    }
    v102 = v72;
    operator delete(v74);
  }
  v75 = v99;
  if (v99)
  {
    v76 = v100;
    v49 = v99;
    if (v100 != v99)
    {
      do
      {
        if (*((char *)v76 - 25) < 0)
          operator delete(*(v76 - 6));
        v76 -= 6;
      }
      while (v76 != v75);
      v49 = v99;
    }
    v100 = v75;
    goto LABEL_201;
  }
}

void sub_19C1C0050(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C0064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char *a61)
{
  char *v62;
  uint64_t v63;

  v62 = a61;
  if (a61 == &a58)
  {
    v63 = 4;
    v62 = &a58;
  }
  else
  {
    if (!a61)
    {
      sub_19C1C2E88((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
    v63 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v62 + 8 * v63))();
  sub_19C1C2E88((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19C1C0130()
{
  uint64_t v0;

  sub_19C1BF770((_QWORD *)(v0 - 200));
  JUMPOUT(0x19C1C013CLL);
}

void sub_19C1C014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;

  v42 = *(_QWORD **)(v40 - 112);
  if (v42 == (_QWORD *)(v40 - 136))
  {
    v43 = 4;
    v42 = (_QWORD *)(v40 - 136);
  }
  else
  {
    if (!v42)
    {
      sub_19C1C2E88((uint64_t)&a40);
      _Unwind_Resume(a1);
    }
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
  sub_19C1C2E88((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_19C1C01C4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *p_p;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char v34;
  _BOOL4 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char **v41;
  char **v42;
  void *v43;
  void **v44;
  void **v45;
  void *v46;
  void **v47;
  void **v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char v62;
  _BOOL4 v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char **v69;
  char **v70;
  void *v71;
  void **v72;
  void **v73;
  void *v74;
  void **v75;
  void **v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char **v83;
  char **v84;
  void *v85;
  void **v86;
  void **v87;
  void *v88;
  void **v89;
  void **v90;
  void *exception;
  void *v92;
  void **v93;
  void *v94;
  void **v95;
  void *v96;
  char **v97;
  char v98;
  void **v99;
  void **v100;
  void *v101;
  void **v102;
  void *v103;
  char **v104;
  char v105;
  void **v106;
  void **v107;
  void *v108;
  void **v109;
  void *v110;
  char **v111;
  char v112;
  void *__p;
  uint64_t v114;
  unsigned __int8 v115;
  _QWORD v116[3];
  _QWORD *v117;
  _BYTE v118[24];
  _BYTE *v119;
  _QWORD v120[3];
  _QWORD *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  sub_19C1BCBC4("ProbabilityOfImprovement", &__p);
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(a1 + 23);
  else
    v9 = *(_QWORD *)(a1 + 8);
  v10 = v115;
  v11 = (char)v115;
  if ((v115 & 0x80u) != 0)
    v10 = v114;
  if (v9 != v10)
  {
    v21 = 0;
    if (((char)v115 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_29;
  }
  if ((v115 & 0x80u) == 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if ((v8 & 0x80) != 0)
  {
    v21 = memcmp(*(const void **)a1, p_p, *(_QWORD *)(a1 + 8)) == 0;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 23))
  {
    v13 = v8 - 1;
    v14 = (unsigned __int8 *)a1;
    do
    {
      v16 = *v14++;
      v15 = v16;
      v18 = *p_p++;
      v17 = v18;
      v19 = v13-- != 0;
      v20 = v19;
      v21 = v15 == v17;
    }
    while (v15 == v17 && (v20 & 1) != 0);
LABEL_22:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_29;
  }
  v21 = 1;
  if (((char)v115 & 0x80000000) == 0)
  {
LABEL_23:
    if (v21)
      goto LABEL_24;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(__p);
  if (v21)
  {
LABEL_24:
    sub_19C1C2D98((uint64_t)&v106, a2);
    v22 = a3[3];
    if (v22)
    {
      if ((_QWORD *)v22 == a3)
      {
        v125 = v124;
        (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v124);
LABEL_51:
        v36 = v126;
        v37 = a3[7];
        if (v37)
        {
          if ((_QWORD *)v37 == a3 + 4)
          {
            v127 = v126;
            (*(void (**)(_QWORD *, _BYTE *))(a3[4] + 24))(a3 + 4, v126);
LABEL_56:
            sub_19C20170C((uint64_t)&v106, v124, a4);
            if (v127 == v126)
            {
              v38 = 4;
            }
            else
            {
              if (!v127)
                goto LABEL_61;
              v38 = 5;
              v36 = v127;
            }
            (*(void (**)(_QWORD *))(*v36 + 8 * v38))(v36);
LABEL_61:
            v39 = v125;
            if (v125 == v124)
            {
              v40 = 4;
              v39 = v124;
            }
            else
            {
              if (!v125)
              {
LABEL_66:
                if (v112)
                {
                  v41 = (char **)v110;
                  if (v110)
                  {
                    v42 = v111;
                    v43 = v110;
                    if (v111 != v110)
                    {
                      do
                        v42 = sub_19C17B808(v42 - 12);
                      while (v42 != v41);
                      v43 = v110;
                    }
                    v111 = v41;
                    operator delete(v43);
                  }
                }
                v44 = (void **)v108;
                if (v108)
                {
                  v45 = v109;
                  v46 = v108;
                  if (v109 != v108)
                  {
                    do
                    {
                      if (*((char *)v45 - 17) < 0)
                        operator delete(*(v45 - 5));
                      v45 -= 5;
                    }
                    while (v45 != v44);
                    v46 = v108;
                  }
                  v109 = v44;
                  operator delete(v46);
                }
                v47 = v106;
                if (v106)
                {
                  v48 = v107;
                  v49 = v106;
                  if (v107 != v106)
                  {
                    do
                    {
                      if (*((char *)v48 - 25) < 0)
                        operator delete(*(v48 - 6));
                      v48 -= 6;
                    }
                    while (v48 != v47);
                    v49 = v106;
                  }
                  v107 = v47;
LABEL_201:
                  operator delete(v49);
                  return;
                }
                return;
              }
              v40 = 5;
            }
            (*(void (**)(void))(*v39 + 8 * v40))();
            goto LABEL_66;
          }
          v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        }
        v127 = (_BYTE *)v37;
        goto LABEL_56;
      }
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
    v125 = (_QWORD *)v22;
    goto LABEL_51;
  }
LABEL_30:
  sub_19C1BCBC4("ExpectedImprovement", &__p);
  v23 = *(unsigned __int8 *)(a1 + 23);
  if ((v23 & 0x80u) == 0)
    v24 = *(unsigned __int8 *)(a1 + 23);
  else
    v24 = *(_QWORD *)(a1 + 8);
  v25 = v115;
  v26 = (char)v115;
  if ((v115 & 0x80u) != 0)
    v25 = v114;
  if (v24 != v25)
  {
    v35 = 0;
    if (((char)v115 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_96;
  }
  if ((v115 & 0x80u) == 0)
    v27 = (unsigned __int8 *)&__p;
  else
    v27 = (unsigned __int8 *)__p;
  if ((v23 & 0x80) != 0)
  {
    v35 = memcmp(*(const void **)a1, v27, *(_QWORD *)(a1 + 8)) == 0;
    goto LABEL_89;
  }
  if (*(_BYTE *)(a1 + 23))
  {
    v28 = v23 - 1;
    v29 = (unsigned __int8 *)a1;
    do
    {
      v31 = *v29++;
      v30 = v31;
      v33 = *v27++;
      v32 = v33;
      v19 = v28-- != 0;
      v34 = v19;
      v35 = v30 == v32;
    }
    while (v30 == v32 && (v34 & 1) != 0);
LABEL_89:
    if ((v26 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_96;
  }
  v35 = 1;
  if (((char)v115 & 0x80000000) == 0)
  {
LABEL_90:
    if (v35)
      goto LABEL_91;
LABEL_97:
    sub_19C1BCBC4("UpperConfidenceBound", &__p);
    v51 = *(unsigned __int8 *)(a1 + 23);
    if ((v51 & 0x80u) == 0)
      v52 = *(unsigned __int8 *)(a1 + 23);
    else
      v52 = *(_QWORD *)(a1 + 8);
    v53 = v115;
    v54 = (char)v115;
    if ((v115 & 0x80u) != 0)
      v53 = v114;
    if (v52 == v53)
    {
      if ((v115 & 0x80u) == 0)
        v55 = (unsigned __int8 *)&__p;
      else
        v55 = (unsigned __int8 *)__p;
      if ((v51 & 0x80) != 0)
      {
        v63 = memcmp(*(const void **)a1, v55, *(_QWORD *)(a1 + 8)) == 0;
        goto LABEL_156;
      }
      if (*(_BYTE *)(a1 + 23))
      {
        v56 = v51 - 1;
        v57 = (unsigned __int8 *)a1;
        do
        {
          v59 = *v57++;
          v58 = v59;
          v61 = *v55++;
          v60 = v61;
          v19 = v56-- != 0;
          v62 = v19;
          v63 = v58 == v60;
        }
        while (v58 == v60 && (v62 & 1) != 0);
LABEL_156:
        if ((v54 & 0x80000000) == 0)
          goto LABEL_158;
        goto LABEL_157;
      }
      v63 = 1;
      if (((char)v115 & 0x80000000) == 0)
      {
LABEL_158:
        if (!v63)
        {
          exception = __cxa_allocate_exception(0x28uLL);
          sub_19C1C71FC((uint64_t)exception, "Invalid acquisition: ", a1);
          __cxa_throw(exception, (struct type_info *)&unk_1E3D1D7B8, (void (*)(void *))sub_19C1BB384);
        }
        sub_19C1C2D98((uint64_t)&v92, a2);
        v77 = a3[3];
        if (v77)
        {
          if ((_QWORD *)v77 == a3)
          {
            v117 = v116;
            (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v116);
LABEL_164:
            v78 = v118;
            v79 = a3[7];
            if (v79)
            {
              if ((_QWORD *)v79 == a3 + 4)
              {
                v119 = v118;
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v79 + 24))(v79, v118);
LABEL_169:
                sub_19C201F34((uint64_t)&v92, v116, a4);
                if (v119 == v118)
                {
                  v80 = 4;
                }
                else
                {
                  if (!v119)
                    goto LABEL_174;
                  v80 = 5;
                  v78 = v119;
                }
                (*(void (**)(_QWORD *))(*v78 + 8 * v80))(v78);
LABEL_174:
                v81 = v117;
                if (v117 == v116)
                {
                  v82 = 4;
                  v81 = v116;
                }
                else
                {
                  if (!v117)
                  {
LABEL_179:
                    if (v98)
                    {
                      v83 = (char **)v96;
                      if (v96)
                      {
                        v84 = v97;
                        v85 = v96;
                        if (v97 != v96)
                        {
                          do
                            v84 = sub_19C17B808(v84 - 12);
                          while (v84 != v83);
                          v85 = v96;
                        }
                        v97 = v83;
                        operator delete(v85);
                      }
                    }
                    v86 = (void **)v94;
                    if (v94)
                    {
                      v87 = v95;
                      v88 = v94;
                      if (v95 != v94)
                      {
                        do
                        {
                          if (*((char *)v87 - 17) < 0)
                            operator delete(*(v87 - 5));
                          v87 -= 5;
                        }
                        while (v87 != v86);
                        v88 = v94;
                      }
                      v95 = v86;
                      operator delete(v88);
                    }
                    v89 = (void **)v92;
                    if (v92)
                    {
                      v90 = v93;
                      v49 = v92;
                      if (v93 != v92)
                      {
                        do
                        {
                          if (*((char *)v90 - 25) < 0)
                            operator delete(*(v90 - 6));
                          v90 -= 6;
                        }
                        while (v90 != v89);
                        v49 = v92;
                      }
                      v93 = v89;
                      goto LABEL_201;
                    }
                    return;
                  }
                  v82 = 5;
                }
                (*(void (**)(void))(*v81 + 8 * v82))();
                goto LABEL_179;
              }
              v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79);
            }
            v119 = (_BYTE *)v79;
            goto LABEL_169;
          }
          v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
        }
        v117 = (_QWORD *)v77;
        goto LABEL_164;
      }
    }
    else
    {
      v63 = 0;
      if (((char)v115 & 0x80000000) == 0)
        goto LABEL_158;
    }
LABEL_157:
    operator delete(__p);
    goto LABEL_158;
  }
LABEL_96:
  operator delete(__p);
  if (!v35)
    goto LABEL_97;
LABEL_91:
  sub_19C1C2D98((uint64_t)&v99, a2);
  v50 = a3[3];
  if (!v50)
  {
LABEL_94:
    v121 = (_QWORD *)v50;
    goto LABEL_118;
  }
  if ((_QWORD *)v50 != a3)
  {
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    goto LABEL_94;
  }
  v121 = v120;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v120);
LABEL_118:
  v64 = v122;
  v65 = a3[7];
  if (!v65)
  {
LABEL_121:
    v123 = (_BYTE *)v65;
    goto LABEL_123;
  }
  if ((_QWORD *)v65 != a3 + 4)
  {
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
    goto LABEL_121;
  }
  v123 = v122;
  (*(void (**)(_QWORD *, _BYTE *))(a3[4] + 24))(a3 + 4, v122);
LABEL_123:
  sub_19C201B20((uint64_t)&v99, v120, a4);
  if (v123 == v122)
  {
    v66 = 4;
  }
  else
  {
    if (!v123)
      goto LABEL_128;
    v66 = 5;
    v64 = v123;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v66))(v64);
LABEL_128:
  v67 = v121;
  if (v121 == v120)
  {
    v68 = 4;
    v67 = v120;
    goto LABEL_132;
  }
  if (v121)
  {
    v68 = 5;
LABEL_132:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  if (v105)
  {
    v69 = (char **)v103;
    if (v103)
    {
      v70 = v104;
      v71 = v103;
      if (v104 != v103)
      {
        do
          v70 = sub_19C17B808(v70 - 12);
        while (v70 != v69);
        v71 = v103;
      }
      v104 = v69;
      operator delete(v71);
    }
  }
  v72 = (void **)v101;
  if (v101)
  {
    v73 = v102;
    v74 = v101;
    if (v102 != v101)
    {
      do
      {
        if (*((char *)v73 - 17) < 0)
          operator delete(*(v73 - 5));
        v73 -= 5;
      }
      while (v73 != v72);
      v74 = v101;
    }
    v102 = v72;
    operator delete(v74);
  }
  v75 = v99;
  if (v99)
  {
    v76 = v100;
    v49 = v99;
    if (v100 != v99)
    {
      do
      {
        if (*((char *)v76 - 25) < 0)
          operator delete(*(v76 - 6));
        v76 -= 6;
      }
      while (v76 != v75);
      v49 = v99;
    }
    v100 = v75;
    goto LABEL_201;
  }
}

void sub_19C1C0A28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C0A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char *a61)
{
  char *v62;
  uint64_t v63;

  v62 = a61;
  if (a61 == &a58)
  {
    v63 = 4;
    v62 = &a58;
  }
  else
  {
    if (!a61)
    {
      sub_19C1C2E88((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
    v63 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v62 + 8 * v63))();
  sub_19C1C2E88((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19C1C0B08()
{
  uint64_t v0;

  sub_19C1BF770((_QWORD *)(v0 - 200));
  JUMPOUT(0x19C1C0B14);
}

void sub_19C1C0B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;

  v42 = *(_QWORD **)(v40 - 112);
  if (v42 == (_QWORD *)(v40 - 136))
  {
    v43 = 4;
    v42 = (_QWORD *)(v40 - 136);
  }
  else
  {
    if (!v42)
    {
      sub_19C1C2E88((uint64_t)&a40);
      _Unwind_Resume(a1);
    }
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
  sub_19C1C2E88((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1C0B9C(uint64_t a1, const char *a2, uint64_t a3)
{
  const char **v4;
  const char *v5;

  v4 = (const char **)(a1 + 16);
  sub_19C1C3AC4("[InvalidArgument] ", a2, a3);
  *(_QWORD *)a1 = &unk_1E3D21978;
  v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0)
    v5 = *v4;
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(_QWORD *)a1 = &unk_1E3D21978;
  return a1;
}

void sub_19C1C0C08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

CFDictionaryRef HTTuneParameters(const void *a1, const void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  const __CFArray *v9;
  const __CFDictionary *v10;
  int v11;
  void *v12;
  int v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::runtime_error *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char **v33;
  char **v34;
  void *v35;
  void **v36;
  void **v37;
  void *v38;
  void **v39;
  void **v40;
  void *v41;
  CFDictionaryRef Copy;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char **v48;
  char **v49;
  void *v50;
  void **v51;
  void **v52;
  void *v53;
  void **v54;
  void **v55;
  void *v56;
  std::runtime_error *exception;
  uint64_t *v59[12];
  CFDictionaryRef theDict;
  void *v61;
  void **v62;
  void *v63;
  void **v64;
  void *v65;
  char **v66;
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  const __CFDictionary *v72;
  const __CFArray *v73;
  void *v74;
  void **v75;
  void *v76;
  void **v77;
  uint64_t v78[4];
  void *v79;
  char **v80;
  char v81;
  CFTypeRef v82;
  CFTypeRef cf;
  _QWORD v84[3];
  _QWORD *v85;
  _BYTE v86[24];
  _BYTE *v87;
  void *__p;
  _QWORD *v89;
  int v90;
  char v91;
  void **p_p;
  _QWORD v93[3];
  _QWORD *v94;
  _QWORD v95[2];
  int v96;
  _QWORD *v97;
  void *v98[2];
  char v99;
  void **v100;
  _QWORD v101[3];
  _QWORD *v102;
  _QWORD v103[3];
  _QWORD *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (a1)
    CFRetain(a1);
  sub_19C1C2F80(&cf, a1);
  if (a2)
    CFRetain(a2);
  sub_19C0987C4(&v82, a2);
  v9 = (const __CFArray *)cf;
  if (cf)
    CFRetain(cf);
  v73 = v9;
  v10 = (const __CFDictionary *)v82;
  if (v82)
    CFRetain(v82);
  v72 = v10;
  sub_19C1BCC80(&v73, &v72, (uint64_t)&v74);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  v11 = v78[0];
  v12 = (void *)MEMORY[0x1A1AD22D4](v7);
  v104 = 0;
  v13 = v78[0];
  if (v8)
  {
    v14 = MEMORY[0x1A1AD22D4](v78, v8);
    __p = &unk_1E3D24D88;
    v89 = v14;
    v90 = v13;
  }
  else
  {
    __p = &unk_1E3D24DE0;
    LODWORD(v89) = v78[0];
  }
  p_p = &__p;
  sub_19C21C7C0(&__p, v103);
  v15 = p_p;
  if (p_p == &__p)
  {
    v16 = 4;
    v15 = &__p;
  }
  else
  {
    if (!p_p)
      goto LABEL_21;
    v16 = 5;
  }
  (*((void (**)(void))*v15 + v16))();
LABEL_21:
  if (!v82)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1BCBC4("Kernel", &__p);
  sub_19C1BCBC4("MaternFiveHalves", v98);
  sub_19C21CAEC((const __CFDictionary *)v82, (const UInt8 *)&__p, v98, (uint64_t)v70);
  if (v99 < 0)
  {
    operator delete(v98[0]);
    if ((v91 & 0x80000000) == 0)
    {
LABEL_24:
      if (v82)
        goto LABEL_25;
LABEL_33:
      v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v19, "Could not construct");
      __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else if ((v91 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
  if (!v82)
    goto LABEL_33;
LABEL_25:
  sub_19C1BCBC4("Acquisition", &__p);
  sub_19C1BCBC4("UpperConfidenceBound", v98);
  sub_19C21CAEC((const __CFDictionary *)v82, (const UInt8 *)&__p, v98, (uint64_t)v68);
  if (v99 < 0)
  {
    operator delete(v98[0]);
    if ((v91 & 0x80000000) == 0)
      goto LABEL_27;
  }
  else if ((v91 & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p);
LABEL_27:
  v17 = MEMORY[0x1A1AD22D4](v12);
  v95[0] = &unk_1E3D24D30;
  v95[1] = v17;
  v96 = v11;
  v97 = v95;
  v18 = (uint64_t)v104;
  if (!v104)
  {
LABEL_30:
    v94 = (_QWORD *)v18;
    goto LABEL_37;
  }
  if (v104 != v103)
  {
    v18 = (*(uint64_t (**)(_QWORD *))(*v104 + 16))(v104);
    goto LABEL_30;
  }
  v94 = v93;
  (*(void (**)(_QWORD *, _QWORD *))(v103[0] + 24))(v103, v93);
LABEL_37:
  v20 = (uint64_t)v97;
  if (!v97)
  {
LABEL_40:
    v100 = (void **)v20;
    goto LABEL_42;
  }
  if (v97 != v95)
  {
    v20 = (*(uint64_t (**)(_QWORD *))(*v97 + 16))(v97);
    goto LABEL_40;
  }
  v100 = v98;
  (*(void (**)(_QWORD *, void **))(v95[0] + 24))(v95, v98);
LABEL_42:
  v21 = v101;
  v22 = (uint64_t)v94;
  if (!v94)
  {
LABEL_45:
    v102 = (_QWORD *)v22;
    goto LABEL_47;
  }
  if (v94 != v93)
  {
    v22 = (*(uint64_t (**)(_QWORD *))(*v94 + 16))(v94);
    goto LABEL_45;
  }
  v102 = v101;
  (*(void (**)(_QWORD *, _QWORD *))(v93[0] + 24))(v93, v101);
LABEL_47:
  v23 = v94;
  if (v94 == v93)
  {
    v24 = 4;
    v23 = v93;
  }
  else
  {
    if (!v94)
      goto LABEL_52;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_52:
  v25 = v97;
  if (v97 == v95)
  {
    v26 = 4;
    v25 = v95;
  }
  else
  {
    if (!v97)
      goto LABEL_57;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_57:
  sub_19C1C2D98((uint64_t)&v61, (uint64_t)&v74);
  v27 = (uint64_t)v100;
  if (!v100)
  {
LABEL_60:
    v85 = (_QWORD *)v27;
    goto LABEL_62;
  }
  if (v100 != v98)
  {
    v27 = (*((uint64_t (**)(void **))*v100 + 2))(v100);
    goto LABEL_60;
  }
  v85 = v84;
  (*((void (**)(void **, _QWORD *))v98[0] + 3))(v98, v84);
LABEL_62:
  v28 = v86;
  v29 = (uint64_t)v102;
  if (!v102)
  {
LABEL_65:
    v87 = (_BYTE *)v29;
    goto LABEL_67;
  }
  if (v102 != v101)
  {
    v29 = (*(uint64_t (**)(_QWORD *))(*v102 + 16))(v102);
    goto LABEL_65;
  }
  v87 = v86;
  (*(void (**)(_QWORD *, _BYTE *))(v101[0] + 24))(v101, v86);
LABEL_67:
  sub_19C1BE3B0((uint64_t)v70, (uint64_t)v68, (uint64_t)&v61, v84, (uint64_t)&__p);
  if (v87 == v86)
  {
    v30 = 4;
  }
  else
  {
    if (!v87)
      goto LABEL_72;
    v30 = 5;
    v28 = v87;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v30))(v28);
LABEL_72:
  v31 = v85;
  if (v85 == v84)
  {
    v32 = 4;
    v31 = v84;
    goto LABEL_76;
  }
  if (v85)
  {
    v32 = 5;
LABEL_76:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  if (v67)
  {
    v33 = (char **)v65;
    if (v65)
    {
      v34 = v66;
      v35 = v65;
      if (v66 != v65)
      {
        do
          v34 = sub_19C17B808(v34 - 12);
        while (v34 != v33);
        v35 = v65;
      }
      v66 = v33;
      operator delete(v35);
    }
  }
  v36 = (void **)v63;
  if (v63)
  {
    v37 = v64;
    v38 = v63;
    if (v64 != v63)
    {
      do
      {
        if (*((char *)v37 - 17) < 0)
          operator delete(*(v37 - 5));
        v37 -= 5;
      }
      while (v37 != v36);
      v38 = v63;
    }
    v64 = v36;
    operator delete(v38);
  }
  v39 = (void **)v61;
  if (v61)
  {
    v40 = v62;
    v41 = v61;
    if (v62 != v61)
    {
      do
      {
        if (*((char *)v40 - 25) < 0)
          operator delete(*(v40 - 6));
        v40 -= 6;
      }
      while (v40 != v39);
      v41 = v61;
    }
    v62 = v39;
    operator delete(v41);
  }
  sub_19C1C1840(v59, (uint64_t *)&__p);
  sub_19C1BC1DC((uint64_t)v59, &theDict);
  sub_19C17B808((char **)v59);
  Copy = CFDictionaryCreateCopy(0, theDict);
  if (theDict)
    CFRelease(theDict);
  sub_19C17B808((char **)&__p);
  if (v102 == v101)
  {
    v43 = 4;
  }
  else
  {
    if (!v102)
      goto LABEL_106;
    v43 = 5;
    v21 = v102;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v43))(v21);
LABEL_106:
  v44 = v100;
  if (v100 == v98)
  {
    v45 = 4;
    v44 = v98;
  }
  else
  {
    if (!v100)
      goto LABEL_111;
    v45 = 5;
  }
  (*((void (**)(void))*v44 + v45))();
LABEL_111:
  if (v69 < 0)
  {
    operator delete(v68[0]);
    if ((v71 & 0x80000000) == 0)
    {
LABEL_113:
      v46 = v104;
      if (v104 != v103)
        goto LABEL_114;
LABEL_118:
      v47 = 4;
      v46 = v103;
      goto LABEL_119;
    }
  }
  else if ((v71 & 0x80000000) == 0)
  {
    goto LABEL_113;
  }
  operator delete(v70[0]);
  v46 = v104;
  if (v104 == v103)
    goto LABEL_118;
LABEL_114:
  if (v46)
  {
    v47 = 5;
LABEL_119:
    (*(void (**)(void))(*v46 + 8 * v47))();
  }

  if (v81)
  {
    v48 = (char **)v79;
    if (v79)
    {
      v49 = v80;
      v50 = v79;
      if (v80 != v79)
      {
        do
          v49 = sub_19C17B808(v49 - 12);
        while (v49 != v48);
        v50 = v79;
      }
      v80 = v48;
      operator delete(v50);
    }
  }
  v51 = (void **)v76;
  if (v76)
  {
    v52 = v77;
    v53 = v76;
    if (v77 != v76)
    {
      do
      {
        if (*((char *)v52 - 17) < 0)
          operator delete(*(v52 - 5));
        v52 -= 5;
      }
      while (v52 != v51);
      v53 = v76;
    }
    v77 = v51;
    operator delete(v53);
  }
  v54 = (void **)v74;
  if (v74)
  {
    v55 = v75;
    v56 = v74;
    if (v75 != v74)
    {
      do
      {
        if (*((char *)v55 - 25) < 0)
          operator delete(*(v55 - 6));
        v55 -= 6;
      }
      while (v55 != v54);
      v56 = v74;
    }
    v75 = v54;
    operator delete(v56);
  }
  if (v82)
    CFRelease(v82);
  if (cf)
    CFRelease(cf);

  return Copy;
}

void sub_19C1C143C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,__int16 a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  const void *a64;
  const void *a65;
  CFErrorRef *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;

  if (!a2)
    _Unwind_Resume(a1);
  if (a46 < 0)
    operator delete(__p);
  v70 = *(_QWORD **)(v67 - 80);
  if (v70 == (_QWORD *)(v67 - 104))
  {
    v71 = 4;
    v70 = (_QWORD *)(v67 - 104);
  }
  else
  {
    if (!v70)
      goto LABEL_9;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_9:

  sub_19C1C2E88((uint64_t)&a49);
  sub_19C094494(&a64);
  sub_19C19771C(&a65);
  if (a2 == 4)
  {
    v72 = __cxa_begin_catch(a1);
    if (v65)
      *v65 = sub_19C1C198C((uint64_t)v72);
  }
  else if (a2 == 3)
  {
    v73 = __cxa_begin_catch(a1);
    if (v65)
      *v65 = sub_19C1C198C((uint64_t)v73);
  }
  else
  {
    v74 = __cxa_begin_catch(a1);
    if (a2 == 2 && v65)
      *v65 = sub_19C1C198C((uint64_t)v74);
  }
  __cxa_end_catch();
  JUMPOUT(0x19C1C13C4);
}

uint64_t **sub_19C1C1840(uint64_t **a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  void *__p;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_19C17BB78(&v16, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  __p = 0;
  v14 = 0;
  v15 = 0;
  sub_19C17BE1C(&__p, a2[3], a2[4], 0x6DB6DB6DB6DB6DB7 * ((a2[4] - a2[3]) >> 3));
  sub_19C17B350(a1, (uint64_t *)&v16, (uint64_t *)&__p);
  v4 = (char *)__p;
  if (__p)
  {
    v5 = v14;
    v6 = __p;
    if (v14 != __p)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        if (v7)
        {
          *((_QWORD *)v5 - 3) = v7;
          operator delete(v7);
        }
        if (*(v5 - 33) < 0)
          operator delete(*((void **)v5 - 7));
        v5 -= 56;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v14 = v4;
    operator delete(v6);
  }
  v8 = (char *)v16;
  if (v16)
  {
    v9 = v17;
    v10 = v16;
    if (v17 != v16)
    {
      do
      {
        v11 = (void *)*((_QWORD *)v9 - 4);
        if (v11)
        {
          *((_QWORD *)v9 - 3) = v11;
          operator delete(v11);
        }
        if (*(v9 - 33) < 0)
          operator delete(*((void **)v9 - 7));
        v9 -= 56;
      }
      while (v9 != v8);
      v10 = v16;
    }
    v17 = v8;
    operator delete(v10);
  }
  return a1;
}

CFErrorRef sub_19C1C198C(uint64_t a1)
{
  CFErrorRef v1;
  CFDictionaryRef userInfo;

  sub_19C21CE0C(a1, &userInfo);
  v1 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("com.apple.HyperTune"), 0, userInfo);
  if (userInfo)
    CFRelease(userInfo);
  return v1;
}

void sub_19C1C19EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C094494((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1C1A00(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  size_t v4;
  size_t v5;
  _DWORD **p_dst;
  char v7;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t *v16;
  uint64_t v18;
  int v19;
  const __CFString *v21;
  const __CFString *v22;
  std::logic_error *exception;
  std::string v24;
  _DWORD *__dst;
  size_t v26;
  unint64_t v27;
  const char *v28;

  v28 = a1;
  v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v10 = v4 | 7;
    v11 = v10 + 1;
    p_dst = (_DWORD **)operator new(v10 + 1);
    v26 = v5;
    v27 = v11 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v27) = v4;
    p_dst = &__dst;
    if (!v4)
    {
      LOBYTE(__dst) = 0;
      v7 = HIBYTE(v27);
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_22;
    }
  }
  memcpy(p_dst, a1, v5);
  *((_BYTE *)p_dst + v5) = 0;
  v7 = HIBYTE(v27);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_5:
    if (v7 != 4)
    {
      if (v7 != 9)
      {
        if (v7 != 12)
          goto LABEL_52;
        if (__dst != (_DWORD *)0x566D756D696E694DLL || (_DWORD)v26 != 1702194273)
        {
          if (__dst != (_DWORD *)0x566D756D6978614DLL || v26 != 1702194273)
            goto LABEL_52;
          goto LABEL_68;
        }
        goto LABEL_61;
      }
      if (__dst != (_DWORD *)0x6F69736E656D6944 || v26 != 110)
      {
        v16 = (uint64_t *)&__dst;
        goto LABEL_44;
      }
LABEL_62:
      v22 = CFSTR("HTParameterDimensionKey");
      CFRetain(CFSTR("HTParameterDimensionKey"));
      goto LABEL_69;
    }
    if ((_DWORD)__dst != 1701869908)
    {
      if ((_DWORD)__dst != 1701667150)
        goto LABEL_52;
      goto LABEL_63;
    }
    goto LABEL_60;
  }
LABEL_22:
  v12 = v26;
  if (v26 == 4)
  {
    if (*__dst == 1701667150)
    {
LABEL_63:
      v22 = CFSTR("HTParameterNameKey");
      CFRetain(CFSTR("HTParameterNameKey"));
      goto LABEL_69;
    }
    if (*__dst == 1701869908)
    {
LABEL_60:
      v22 = CFSTR("HTParameterTypeKey");
      CFRetain(CFSTR("HTParameterTypeKey"));
LABEL_69:
      sub_19C09827C(a2, v22);
      goto LABEL_104;
    }
  }
  if (v26 == 12)
  {
    if (*(_QWORD *)__dst == 0x566D756D696E694DLL && __dst[2] == 1702194273)
    {
LABEL_61:
      v22 = CFSTR("HTParameterMinimumValueKey");
      CFRetain(CFSTR("HTParameterMinimumValueKey"));
      goto LABEL_69;
    }
    v12 = v26;
    if (*(_QWORD *)__dst == 0x566D756D6978614DLL && __dst[2] == 1702194273)
    {
LABEL_68:
      v22 = CFSTR("HTParameterMaximumValueKey");
      CFRetain(CFSTR("HTParameterMaximumValueKey"));
      goto LABEL_69;
    }
  }
  if (v12 != 9)
    goto LABEL_52;
  if (*(_QWORD *)__dst == 0x6F69736E656D6944 && *((_BYTE *)__dst + 8) == 110)
    goto LABEL_62;
  if (v26 != 9)
    goto LABEL_52;
  v16 = (uint64_t *)__dst;
LABEL_44:
  v18 = *v16;
  v19 = *((unsigned __int8 *)v16 + 8);
  if (v18 != 0x687469726F676C41 || v19 != 109)
  {
LABEL_52:
    if (sub_19C1C20BC(&__dst, "Kernel"))
    {
      v21 = CFSTR("HTKernelKey");
    }
    else if (sub_19C1C20BC(&__dst, "Acquisition"))
    {
      v21 = CFSTR("HTAcquisitionKey");
    }
    else if (sub_19C1C20BC(&__dst, "CallbackInterval"))
    {
      v21 = CFSTR("HTCallbackIntervalKey");
    }
    else if (sub_19C1C20BC(&__dst, "MaxIterations"))
    {
      v21 = CFSTR("HTStopConditionMaxIterationsKey");
    }
    else if (sub_19C1C20BC(&__dst, "Patience"))
    {
      v21 = CFSTR("HTStopConditionPatienceKey");
    }
    else if (sub_19C1C20BC(&__dst, "MinDelta"))
    {
      v21 = CFSTR("HTStopConditionMinDeltaKey");
    }
    else if (sub_19C1C20BC(&__dst, "Direction"))
    {
      v21 = CFSTR("HTOptimizationDirectionKey");
    }
    else if (sub_19C1C20BC(&__dst, "RandomSeed"))
    {
      v21 = CFSTR("HTRandomSeedKey");
    }
    else if (sub_19C1C20BC(&__dst, "InitialParameterValues"))
    {
      v21 = CFSTR("HTInitialParameterValuesKey");
    }
    else if (sub_19C1C20BC(&__dst, "Integral"))
    {
      v21 = CFSTR("HTParameterTypeIntegral");
    }
    else if (sub_19C1C20BC(&__dst, "Continuous"))
    {
      v21 = CFSTR("HTParameterTypeContinuous");
    }
    else if (sub_19C1C20BC(&__dst, "Random"))
    {
      v21 = CFSTR("HTAlgorithmRandom");
    }
    else if (sub_19C1C20BC(&__dst, "GaussianProcess"))
    {
      v21 = CFSTR("HTAlgorithmGaussianProcess");
    }
    else if (sub_19C1C20BC(&__dst, "SquaredExponential"))
    {
      v21 = CFSTR("HTKernelSquaredExponential");
    }
    else if (sub_19C1C20BC(&__dst, "ARDSquaredExponential"))
    {
      v21 = CFSTR("HTKernelARDSquaredExponential");
    }
    else if (sub_19C1C20BC(&__dst, "MaternFiveHalves"))
    {
      v21 = CFSTR("HTKernelMaternFiveHalves");
    }
    else if (sub_19C1C20BC(&__dst, "ProbabilityOfImprovement"))
    {
      v21 = CFSTR("HTAcquisitionProbabilityOfImprovement");
    }
    else if (sub_19C1C20BC(&__dst, "ExpectedImprovement"))
    {
      v21 = CFSTR("HTAcquisitionExpectedImprovement");
    }
    else if (sub_19C1C20BC(&__dst, "UpperConfidenceBound"))
    {
      v21 = CFSTR("HTAcquisitionUpperConfidenceBound");
    }
    else if (sub_19C1C20BC(&__dst, "Maximize"))
    {
      v21 = CFSTR("HTOptimizationDirectionMaximize");
    }
    else
    {
      if (!sub_19C1C20BC(&__dst, "Minimize"))
      {
        sub_19C1C218C("Unexpected HyperTune key: ", &v28);
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, &v24);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E3D1C4D0, MEMORY[0x1E0DE4360]);
      }
      v21 = CFSTR("HTOptimizationDirectionMinimize");
    }
    goto LABEL_103;
  }
  v21 = CFSTR("HTAlgorithmKey");
LABEL_103:
  sub_19C1C2154(v21, a2);
LABEL_104:
  if (SHIBYTE(v27) < 0)
    operator delete(__dst);
}

void sub_19C1C2048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C1C20BC(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_19C07DFE4();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

_QWORD *sub_19C1C2154@<X0>(CFTypeRef cf@<X0>, _QWORD *a2@<X8>)
{
  if (cf)
    CFRetain(cf);
  return sub_19C09827C(a2, cf);
}

uint64_t sub_19C1C218C(const char *a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  size_t v13;
  uint64_t v15;
  uint64_t v16[8];
  void *__p[2];
  __int128 v18;
  int v19;
  uint64_t v20[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v20[0] = MEMORY[0x1E0DE4FE0] + 64;
  v15 = v7;
  *(uint64_t *)((char *)&v16[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24));
  std::ios_base::init(v9, v16);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v15 = v4 + 24;
  v20[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  v19 = 16;
  v11 = strlen(a1);
  sub_19C07DCDC(&v15, (uint64_t)a1, v11);
  v12 = *a2;
  v13 = strlen(v12);
  sub_19C07DCDC(&v15, (uint64_t)v12, v13);
  std::stringbuf::str();
  v15 = *v6;
  *(uint64_t *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24)) = v6[3];
  v16[0] = v10 + 16;
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD1C08](v20);
}

void sub_19C1C22F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C07DC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1C2304(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19C1C234C(std::logic_error *a1, const std::string *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  return result;
}

std::runtime_error *sub_19C1C2370@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not construct");
}

void sub_19C1C2380(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  void *v5;
  void *__p;
  __int128 *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_19C17AF88(&__p, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_19C1C2914((__int128 *)__p, v7, (uint64_t)a2);
  v3 = (__int128 *)__p;
  if (__p)
  {
    v4 = v7;
    v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*((void **)v4 - 6));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = __p;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_19C1C2428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  sub_19C07AD50(v2);
  sub_19C178D24((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1C2444(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  void *v5;
  void *__p;
  __int128 *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_19C17B16C(&__p, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_19C1C2AA0((__int128 *)__p, v7, (uint64_t)a2);
  v3 = (__int128 *)__p;
  if (__p)
  {
    v4 = v7;
    v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 17) < 0)
          operator delete(*((void **)v4 - 5));
        v4 = (__int128 *)((char *)v4 - 40);
      }
      while (v4 != v3);
      v5 = __p;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_19C1C24EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  sub_19C07AD50(v2);
  sub_19C17983C((void **)va);
  _Unwind_Resume(a1);
}

char *sub_19C1C2508(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v9;
  _BYTE *v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  std::string *v20;
  uint64_t v21;
  __int128 v22;
  _BYTE *v23;
  std::string *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  __int128 *v40;
  char *v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  std::string *v47;
  char *v49;
  char *v50;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 24;
  v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1)
    return (char *)v7;
  v9 = __str;
  v11 = a1[2];
  v12 = (__int128 *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)v12) >> 3)) >= a5)
  {
    v18 = (uint64_t)v12 - v7;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      v20 = &__str[a5];
      v25 = (char *)a1[1];
      goto LABEL_42;
    }
    v20 = (std::string *)((char *)__str + 8 * (((uint64_t)v12 - v7) >> 3));
    if (v20 != a4)
    {
      v21 = 0;
      do
      {
        v23 = (char *)v12 + v21 * 24;
        v24 = &v20[v21];
        if (SHIBYTE(v20[v21].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_19C07C6E8((_BYTE *)v12 + v21 * 24, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
        }
        else
        {
          v22 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          *((_QWORD *)v23 + 2) = *((_QWORD *)&v24->__r_.__value_.__l + 2);
          *(_OWORD *)v23 = v22;
        }
        ++v21;
      }
      while (&v20[v21] != a4);
      v25 = (char *)v12 + v21 * 24;
      a1[1] = (char *)v12 + v21 * 24;
      if (v18 < 1)
        return (char *)v7;
LABEL_42:
      v39 = v7 + 24 * a5;
      v40 = (__int128 *)&v25[-24 * a5];
      v41 = v25;
      if (v40 < v12)
      {
        v41 = v25;
        do
        {
          v42 = *v40;
          *((_QWORD *)v41 + 2) = *((_QWORD *)v40 + 2);
          *(_OWORD *)v41 = v42;
          v41 += 24;
          *((_QWORD *)v40 + 1) = 0;
          *((_QWORD *)v40 + 2) = 0;
          *(_QWORD *)v40 = 0;
          v40 = (__int128 *)((char *)v40 + 24);
        }
        while (v40 < v12);
      }
      a1[1] = v41;
      if (v25 != (char *)v39)
      {
        v43 = v25 - 24;
        v44 = 8 * ((uint64_t)&v25[-v39] >> 3);
        do
        {
          if (v43[23] < 0)
            operator delete(*(void **)v43);
          v45 = (__int128 *)(v7 + v44 - 24);
          v46 = *v45;
          *((_QWORD *)v43 + 2) = *(_QWORD *)(v7 + v44 - 8);
          *(_OWORD *)v43 = v46;
          v43 -= 24;
          *(_BYTE *)(v7 + v44 - 1) = 0;
          *(_BYTE *)v45 = 0;
          v44 -= 24;
        }
        while (v44);
      }
      if (v20 != v9)
      {
        v47 = (std::string *)v7;
        do
          std::string::operator=(v47++, v9++);
        while (v9 != v20);
      }
      return (char *)v7;
    }
    v25 = (char *)a1[1];
    a1[1] = v12;
    if (v18 >= 1)
      goto LABEL_42;
    return (char *)v7;
  }
  v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  v15 = 2 * v14;
  if (2 * v14 <= v13)
    v15 = v13;
  if (v14 >= 0x555555555555555)
    v16 = 0xAAAAAAAAAAAAAAALL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v17 = (char *)operator new(24 * v16);
  }
  else
  {
    v17 = 0;
  }
  v26 = &v17[24 * v6];
  v49 = v26;
  v50 = &v17[24 * v16];
  v27 = 24 * a5;
  v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19C07C6E8(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *((_QWORD *)v26 + 2) = *((_QWORD *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)v26 = v29;
    }
    v26 += 24;
    ++v9;
    v27 -= 24;
  }
  while (v27);
  v30 = v49;
  v31 = *a1;
  v32 = v49;
  if (*a1 != (void *)v7)
  {
    v33 = v49;
    v34 = v7;
    do
    {
      v32 = v33 - 24;
      v35 = *(_OWORD *)(v34 - 24);
      *((_QWORD *)v33 - 1) = *(_QWORD *)(v34 - 8);
      *(_OWORD *)(v33 - 24) = v35;
      *(_QWORD *)(v34 - 16) = 0;
      *(_QWORD *)(v34 - 8) = 0;
      *(_QWORD *)(v34 - 24) = 0;
      v33 -= 24;
      v34 -= 24;
    }
    while ((void *)v34 != v31);
  }
  v36 = a1[1];
  if (v36 != (void *)v7)
  {
    do
    {
      v37 = *(_OWORD *)v7;
      *((_QWORD *)v28 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v28 = v37;
      v28 += 24;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v36);
    v7 = (uint64_t)a1[1];
  }
  v38 = *a1;
  *a1 = v32;
  a1[1] = v28;
  a1[2] = v50;
  while ((void *)v7 != v38)
  {
    if (*(char *)(v7 - 1) < 0)
      operator delete(*(void **)(v7 - 24));
    v7 -= 24;
  }
  if (v38)
    operator delete(v38);
  return v30;
}

void sub_19C1C28FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C07DBF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1C2914(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  int v12;
  void *__p[2];
  uint64_t v15;
  __int128 v16;
  int v17;
  void *__dst[2];
  uint64_t v19;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 3)
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19C07C6E8(__p, *(void **)i, *((_QWORD *)i + 1));
        v8 = *(__int128 *)((char *)i + 24);
        v17 = *((_DWORD *)i + 10);
        v16 = v8;
        if ((SHIBYTE(v15) & 0x80000000) == 0)
        {
LABEL_6:
          *(_OWORD *)__dst = *(_OWORD *)__p;
          v19 = v15;
          goto LABEL_9;
        }
      }
      else
      {
        v6 = *i;
        v15 = *((_QWORD *)i + 2);
        *(_OWORD *)__p = v6;
        v7 = *(__int128 *)((char *)i + 24);
        v17 = *((_DWORD *)i + 10);
        v16 = v7;
        if ((SHIBYTE(v15) & 0x80000000) == 0)
          goto LABEL_6;
      }
      sub_19C07C6E8(__dst, __p[0], (unint64_t)__p[1]);
LABEL_9:
      v9 = *(_QWORD *)(a3 + 8);
      if (v9 >= *(_QWORD *)(a3 + 16))
      {
        v11 = sub_19C099854((void **)a3, (uint64_t)__dst);
        v12 = SHIBYTE(v19);
        *(_QWORD *)(a3 + 8) = v11;
        if (v12 < 0)
        {
          operator delete(__dst[0]);
          if ((SHIBYTE(v15) & 0x80000000) == 0)
            continue;
LABEL_14:
          operator delete(__p[0]);
          continue;
        }
        if (SHIBYTE(v15) < 0)
          goto LABEL_14;
      }
      else
      {
        v10 = *(_OWORD *)__dst;
        *(_QWORD *)(v9 + 16) = v19;
        *(_OWORD *)v9 = v10;
        __dst[1] = 0;
        v19 = 0;
        __dst[0] = 0;
        *(_QWORD *)(a3 + 8) = v9 + 24;
        if (SHIBYTE(v15) < 0)
          goto LABEL_14;
      }
    }
  }
  return a3;
}

void sub_19C1C2A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1C2AA0(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *i;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  int v12;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *__dst[2];
  uint64_t v19;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i = (__int128 *)((char *)i + 40))
    {
      if (*((char *)i + 23) < 0)
      {
        sub_19C07C6E8(__p, *(void **)i, *((_QWORD *)i + 1));
        v8 = *((_QWORD *)i + 3);
        v17 = *((_DWORD *)i + 8);
        v16 = v8;
        if ((SHIBYTE(v15) & 0x80000000) == 0)
        {
LABEL_6:
          *(_OWORD *)__dst = *(_OWORD *)__p;
          v19 = v15;
          goto LABEL_9;
        }
      }
      else
      {
        v6 = *i;
        v15 = *((_QWORD *)i + 2);
        *(_OWORD *)__p = v6;
        v7 = *((_QWORD *)i + 3);
        v17 = *((_DWORD *)i + 8);
        v16 = v7;
        if ((SHIBYTE(v15) & 0x80000000) == 0)
          goto LABEL_6;
      }
      sub_19C07C6E8(__dst, __p[0], (unint64_t)__p[1]);
LABEL_9:
      v9 = *(_QWORD *)(a3 + 8);
      if (v9 >= *(_QWORD *)(a3 + 16))
      {
        v11 = sub_19C099854((void **)a3, (uint64_t)__dst);
        v12 = SHIBYTE(v19);
        *(_QWORD *)(a3 + 8) = v11;
        if (v12 < 0)
        {
          operator delete(__dst[0]);
          if ((SHIBYTE(v15) & 0x80000000) == 0)
            continue;
LABEL_14:
          operator delete(__p[0]);
          continue;
        }
        if (SHIBYTE(v15) < 0)
          goto LABEL_14;
      }
      else
      {
        v10 = *(_OWORD *)__dst;
        *(_QWORD *)(v9 + 16) = v19;
        *(_OWORD *)v9 = v10;
        __dst[1] = 0;
        v19 = 0;
        __dst[0] = 0;
        *(_QWORD *)(a3 + 8) = v9 + 24;
        if (SHIBYTE(v15) < 0)
          goto LABEL_14;
      }
    }
  }
  return a3;
}

void sub_19C1C2BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1C2C2C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_19C1C2C7C(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C2370(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C1C2CC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ***sub_19C1C2CDC(uint64_t ***a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t **v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 5);
    if (v6 >= 0x2AAAAAAAAAAAAABLL)
      sub_19C07DA0C();
    v7 = (uint64_t **)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[12 * v6];
    do
    {
      v8 = sub_19C1C1840(v7, v3);
      v3 += 12;
      v7 = v8 + 12;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_19C1C2D78(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    sub_19C2562C8((uint64_t)(v1 + 1));
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1C2D98(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_19C17AF88((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_19C17B16C((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    sub_19C1C2CDC((uint64_t ***)(a1 + 88), (uint64_t **)(a2 + 88));
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_19C1C2E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 112))
    sub_19C256308((void **)(v1 + 88));
  sub_19C17A75C((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19C1C2E6C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_19C256360((uint64_t)v1, *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1C2E88(uint64_t a1)
{
  char **v2;
  char **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void **v8;
  void **v9;
  void **v10;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(char ***)(a1 + 88);
    if (v2)
    {
      v3 = *(char ***)(a1 + 96);
      v4 = *(void **)(a1 + 88);
      if (v3 != v2)
      {
        do
          v3 = sub_19C17B808(v3 - 12);
        while (v3 != v2);
        v4 = *(void **)(a1 + 88);
      }
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v4);
    }
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(a1 + 24);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 17) < 0)
          operator delete(*(void **)(v6 - 40));
        v6 -= 40;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v7);
  }
  v8 = *(void ***)a1;
  if (*(_QWORD *)a1)
  {
    v9 = *(void ***)(a1 + 8);
    v10 = *(void ***)a1;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 25) < 0)
          operator delete(*(v9 - 6));
        v9 -= 6;
      }
      while (v9 != v8);
      v10 = *(void ***)a1;
    }
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v10);
  }
  return a1;
}

_QWORD *sub_19C1C2F80(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_19C1C2FFC(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void sub_19C1C302C(__int128 **a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  _BYTE *v11;
  char *v12;
  void *v13;
  void *size;
  int v15;
  const std::string *v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v21;
  int v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  char *v26;
  std::logic_error *exception;
  void *__p[2];
  uint64_t v29;
  void *__dst[2];
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  char *v34;
  int v35;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_45:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C234C(exception, a2);
    __cxa_throw(exception, (struct type_info *)off_1E3D1C4D0, MEMORY[0x1E0DE4360]);
  }
  while (1)
  {
    if (*((char *)v4 + 23) < 0)
    {
      sub_19C07C6E8(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v9 = (_BYTE *)*((_QWORD *)v4 + 3);
      v11 = (_BYTE *)*((_QWORD *)v4 + 4);
      v10 = v11 - v9;
      if (v11 == v9)
      {
LABEL_6:
        v35 = *((_DWORD *)v4 + 12);
        if ((SHIBYTE(v31) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else
    {
      v7 = *v4;
      v31 = *((_QWORD *)v4 + 2);
      *(_OWORD *)__dst = v7;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v9 = (_BYTE *)*((_QWORD *)v4 + 3);
      v8 = (_BYTE *)*((_QWORD *)v4 + 4);
      v10 = v8 - v9;
      if (v8 == v9)
        goto LABEL_6;
    }
    if (v10 < 0)
      sub_19C07DA0C();
    v32 = operator new(v10);
    v33 = v32;
    v12 = (char *)v32 + 8 * (v10 >> 3);
    v34 = v12;
    memcpy(v32, v9, v10);
    v33 = v12;
    v35 = *((_DWORD *)v4 + 12);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_7:
      *(_OWORD *)__p = *(_OWORD *)__dst;
      v29 = v31;
      goto LABEL_12;
    }
LABEL_11:
    sub_19C07C6E8(__p, __dst[0], (unint64_t)__dst[1]);
LABEL_12:
    if (v29 >= 0)
      v13 = (void *)HIBYTE(v29);
    else
      v13 = __p[1];
    size = (void *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v15 = (char)size;
    if ((char)size < 0)
      size = (void *)a2->__r_.__value_.__l.__size_;
    if (v13 != size)
    {
      if (v29 < 0)
        operator delete(__p[0]);
      goto LABEL_34;
    }
    if (v15 >= 0)
      v16 = a2;
    else
      v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    if (v29 < 0)
    {
      v21 = __p[0];
      v22 = memcmp(__p[0], v16, (size_t)__p[1]);
      operator delete(v21);
      if (!v22)
        break;
      goto LABEL_34;
    }
    if (!HIBYTE(v29))
      break;
    v17 = 0;
    do
    {
      v18 = *((unsigned __int8 *)__p + v17);
      v19 = v16->__r_.__value_.__s.__data_[v17];
    }
    while (v18 == v19 && HIBYTE(v29) - 1 != v17++);
    if (v18 == v19)
      break;
LABEL_34:
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    if (SHIBYTE(v31) < 0)
      operator delete(__dst[0]);
    v4 = (__int128 *)((char *)v4 + 56);
    if (v4 == v5)
      goto LABEL_45;
  }
  *(_OWORD *)a3 = *(_OWORD *)__dst;
  v23 = v32;
  *(_QWORD *)(a3 + 16) = v31;
  __dst[1] = 0;
  v31 = 0;
  __dst[0] = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v24 = v33 - v23;
  if (v33 != v23)
  {
    if (v24 < 0)
      sub_19C07DA0C();
    v25 = (char *)operator new(v33 - v23);
    *(_QWORD *)(a3 + 24) = v25;
    v26 = &v25[8 * (v24 >> 3)];
    *(_QWORD *)(a3 + 40) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a3 + 32) = v26;
  }
  *(_DWORD *)(a3 + 48) = v35;
  if (v23)
  {
    v33 = v23;
    operator delete(v23);
    if (SHIBYTE(v31) < 0)
      operator delete(__dst[0]);
  }
}

void sub_19C1C32DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void **v6;
  void *v8;
  va_list va;

  va_start(va, a5);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v5 + 32) = v8;
    operator delete(v8);
    if ((*(char *)(v5 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      sub_19C1C2C2C((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v5);
  sub_19C1C2C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1C3328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C1C2C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1C333C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C3350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_19C1C339C(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  _BYTE *v11;
  char *v12;
  void *v13;
  void *size;
  int v15;
  const std::string *v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v21;
  int v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  char *v26;
  std::logic_error *exception;
  void *__p[2];
  uint64_t v29;
  void *__dst[2];
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  char *v34;
  int v35;

  v4 = *(__int128 **)(a1 + 24);
  v5 = *(__int128 **)(a1 + 32);
  if (v4 == v5)
  {
LABEL_45:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C234C(exception, a2);
    __cxa_throw(exception, (struct type_info *)off_1E3D1C4D0, MEMORY[0x1E0DE4360]);
  }
  while (1)
  {
    if (*((char *)v4 + 23) < 0)
    {
      sub_19C07C6E8(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v9 = (_BYTE *)*((_QWORD *)v4 + 3);
      v11 = (_BYTE *)*((_QWORD *)v4 + 4);
      v10 = v11 - v9;
      if (v11 == v9)
      {
LABEL_6:
        v35 = *((_DWORD *)v4 + 12);
        if ((SHIBYTE(v31) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else
    {
      v7 = *v4;
      v31 = *((_QWORD *)v4 + 2);
      *(_OWORD *)__dst = v7;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v9 = (_BYTE *)*((_QWORD *)v4 + 3);
      v8 = (_BYTE *)*((_QWORD *)v4 + 4);
      v10 = v8 - v9;
      if (v8 == v9)
        goto LABEL_6;
    }
    if (v10 < 0)
      sub_19C07DA0C();
    v32 = operator new(v10);
    v33 = v32;
    v12 = (char *)v32 + 4 * (v10 >> 2);
    v34 = v12;
    memcpy(v32, v9, v10);
    v33 = v12;
    v35 = *((_DWORD *)v4 + 12);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_7:
      *(_OWORD *)__p = *(_OWORD *)__dst;
      v29 = v31;
      goto LABEL_12;
    }
LABEL_11:
    sub_19C07C6E8(__p, __dst[0], (unint64_t)__dst[1]);
LABEL_12:
    if (v29 >= 0)
      v13 = (void *)HIBYTE(v29);
    else
      v13 = __p[1];
    size = (void *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v15 = (char)size;
    if ((char)size < 0)
      size = (void *)a2->__r_.__value_.__l.__size_;
    if (v13 != size)
    {
      if (v29 < 0)
        operator delete(__p[0]);
      goto LABEL_34;
    }
    if (v15 >= 0)
      v16 = a2;
    else
      v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    if (v29 < 0)
    {
      v21 = __p[0];
      v22 = memcmp(__p[0], v16, (size_t)__p[1]);
      operator delete(v21);
      if (!v22)
        break;
      goto LABEL_34;
    }
    if (!HIBYTE(v29))
      break;
    v17 = 0;
    do
    {
      v18 = *((unsigned __int8 *)__p + v17);
      v19 = v16->__r_.__value_.__s.__data_[v17];
    }
    while (v18 == v19 && HIBYTE(v29) - 1 != v17++);
    if (v18 == v19)
      break;
LABEL_34:
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    if (SHIBYTE(v31) < 0)
      operator delete(__dst[0]);
    v4 = (__int128 *)((char *)v4 + 56);
    if (v4 == v5)
      goto LABEL_45;
  }
  *(_OWORD *)a3 = *(_OWORD *)__dst;
  v23 = v32;
  *(_QWORD *)(a3 + 16) = v31;
  __dst[1] = 0;
  v31 = 0;
  __dst[0] = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v24 = v33 - v23;
  if (v33 != v23)
  {
    if (v24 < 0)
      sub_19C07DA0C();
    v25 = (char *)operator new(v33 - v23);
    *(_QWORD *)(a3 + 24) = v25;
    v26 = &v25[4 * (v24 >> 2)];
    *(_QWORD *)(a3 + 40) = v26;
    memcpy(v25, v23, v24);
    *(_QWORD *)(a3 + 32) = v26;
  }
  *(_DWORD *)(a3 + 48) = v35;
  if (v23)
  {
    v33 = v23;
    operator delete(v23);
    if (SHIBYTE(v31) < 0)
      operator delete(__dst[0]);
  }
}

void sub_19C1C364C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void **v6;
  void *v8;
  va_list va;

  va_start(va, a5);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v5 + 32) = v8;
    operator delete(v8);
    if ((*(char *)(v5 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      sub_19C1C2C2C((uint64_t)va);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v5);
  sub_19C1C2C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1C3698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C1C2C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C1C36AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C36C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_19C1C370C(char **a1)
{
  unint64_t v1;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  CFArrayRef v17;
  std::runtime_error *exception;

  v1 = (unint64_t)a1[1];
  if (!v1)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_13;
  }
  if (v1 >> 61)
    sub_19C07DA0C();
  v3 = (char *)operator new(8 * v1);
  bzero(v3, 8 * v1);
  v4 = &v3[8 * v1];
  v5 = *a1;
  v6 = (v1 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v6 < 3)
  {
    v7 = *a1;
    v8 = v3;
LABEL_11:
    v15 = &v5[8 * v1];
    do
    {
      v16 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v8 = v16;
      v8 += 8;
    }
    while (v7 != v15);
    goto LABEL_13;
  }
  v7 = *a1;
  v8 = v3;
  if ((unint64_t)(v3 - v5) < 0x20)
    goto LABEL_11;
  v9 = 0;
  v10 = v6 + 1;
  v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  v7 = &v5[v11];
  v8 = &v3[v11];
  v12 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v13 = &v3[v9];
    v14 = *(_OWORD *)&v5[v9 + 16];
    *(_OWORD *)v13 = *(_OWORD *)&v5[v9];
    *((_OWORD *)v13 + 1) = v14;
    v9 += 32;
    v12 -= 4;
  }
  while (v12);
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_11;
LABEL_13:
  v17 = CFArrayCreate(0, (const void **)v3, (v4 - v3) >> 3, MEMORY[0x1E0C9B378]);
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_19C1C3874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v12;

  __cxa_free_exception(v12);
  if (v11)
    operator delete(v11);
  _Unwind_Resume(a1);
}

unint64_t sub_19C1C38B0@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFString *ValueAtIndex;
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    goto LABEL_8;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(ValueAtIndex))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_19C0992F0(ValueAtIndex, a3);
}

void sub_19C1C3964(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C3980(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_19C1C3994@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not find item");
}

BOOL sub_19C1C39A4(_BOOL8 a1, const UInt8 *a2)
{
  CFIndex v3;
  CFIndex v4;
  CFStringRef v5;
  CFStringRef v6;
  std::runtime_error *exception;

  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  if (a1)
    a1 = CFDictionaryContainsKey((CFDictionaryRef)a1, v5) != 0;
  CFRelease(v6);
  return a1;
}

void sub_19C1C3A54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C3A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C0934D0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1C3A80(void **a1)
{
  if (*(char *)(MEMORY[0x1A1AD19BC]() + 39) < 0)
    operator delete(a1[2]);
  operator delete(a1);
}

uint64_t sub_19C1C3AC4(const char *a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[20];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v9;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v11, v20);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v19 = v6 + 24;
  v24[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  v13 = strlen(a1);
  sub_19C07DCDC(&v19, (uint64_t)a1, v13);
  v14 = strlen(a2);
  sub_19C07DCDC(&v19, (uint64_t)a2, v14);
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = a3;
  else
    v16 = *(_QWORD *)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  sub_19C07DCDC(&v19, v16, v17);
  std::stringbuf::str();
  v19 = *v8;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v8[3];
  v20[0] = v12 + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD1C08](v24);
}

void sub_19C1C3C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C07DC58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C1C3C60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](v1);
  _Unwind_Resume(a1);
}

void sub_19C1C3CA8(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v4;
  const void *v5;
  CFTypeID TypeID;
  std::runtime_error *exception;

  v4 = sub_19C1C3D64(a1, a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    goto LABEL_6;
  }
  v5 = v4;
  TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C3E7C((const __CFArray *)v5, a3);
}

void sub_19C1C3D3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C3D50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *sub_19C1C3D64(const __CFDictionary *a1, const UInt8 *a2)
{
  const void *Value;
  CFIndex v4;
  CFIndex v5;
  CFStringRef v6;
  std::runtime_error *exception;

  v4 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v5 = v4;
  }
  v6 = CFStringCreateWithBytes(0, a2, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a1)
    Value = CFDictionaryGetValue(a1, v6);
  CFRelease(v6);
  if (a1)
    return Value;
  else
    return 0;
}

void sub_19C1C3E7C(const __CFArray *a1@<X0>, _QWORD *a2@<X8>)
{
  CFIndex Count;
  int v4;
  char *v5;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v10;
  char v11;
  const __CFNumber *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  const __CFNumber **v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  const __CFNumber *v31;
  std::runtime_error *exception;

  Count = CFArrayGetCount(a1);
  v4 = Count;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0)
      sub_19C07DA0C();
    v5 = (char *)operator new((8 * Count) & 0x7FFFFFFFFLL);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[8 * v4];
  }
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = v4;
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v6);
      v10 = sub_19C1C40EC(ValueAtIndex);
      if (!v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not convert");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v12 = v10;
      v14 = (char *)a2[1];
      v13 = a2[2];
      if ((unint64_t)v14 >= v13)
        break;
      *(_QWORD *)v14 = v10;
      v8 = (uint64_t)(v14 + 8);
LABEL_7:
      a2[1] = v8;
      if (++v6 == v7)
        return;
    }
    v15 = (char *)*a2;
    v16 = (uint64_t)&v14[-*a2];
    v17 = v16 >> 3;
    v18 = (v16 >> 3) + 1;
    if (v18 >> 61)
      sub_19C07DA0C();
    v19 = v13 - (_QWORD)v15;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_19C07C7FC();
      v21 = operator new(8 * v20);
      v22 = (const __CFNumber **)&v21[8 * v17];
      *v22 = v12;
      v8 = (uint64_t)(v22 + 1);
      if (v14 == v15)
        goto LABEL_27;
    }
    else
    {
      v21 = 0;
      v22 = (const __CFNumber **)(8 * v17);
      *(_QWORD *)(8 * v17) = v12;
      v8 = 8 * v17 + 8;
      if (v14 == v15)
      {
LABEL_27:
        *a2 = v22;
        a2[1] = v8;
        a2[2] = &v21[8 * v20];
        if (v15)
          operator delete(v15);
        goto LABEL_7;
      }
    }
    v23 = v14 - 8 - v15;
    if (v23 < 0x58)
      goto LABEL_36;
    if ((unint64_t)(v14 - &v21[v16]) < 0x20)
      goto LABEL_36;
    v24 = (v23 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v26 = &v14[-v25];
    v22 = (const __CFNumber **)((char *)v22 - v25);
    v27 = &v21[8 * v17 - 16];
    v28 = v14 - 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    v14 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_36:
      do
      {
        v31 = (const __CFNumber *)*((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v22 = v31;
      }
      while (v14 != v15);
    }
    goto LABEL_27;
  }
}

void sub_19C1C40B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

const __CFNumber *sub_19C1C40EC(const __CFNumber *result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  CFTypeID v3;

  if (*(double *)&result != 0.0)
  {
    v1 = result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      *(double *)&result = COERCE_DOUBLE(sub_19C1C4190(v1));
    }
    else
    {
      v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1))
        *(double *)&result = (double)CFBooleanGetValue(v1);
      else
        *(double *)&result = 0.0;
    }
  }
  return result;
}

unint64_t sub_19C1C4190(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  unint64_t v4;
  double v5;
  const __CFNumber *v6;
  CFNumberType v7;
  const __CFNumber *v8;
  CFNumberType v9;
  const __CFNumber *v10;
  CFNumberType v11;
  const __CFNumber *v12;
  CFNumberType v13;
  const __CFNumber *v14;
  CFNumberType v15;
  BOOL v16;
  int16x4_t v17;
  uint64_t v18;
  uint64_t valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberSInt64Type;
      goto LABEL_23;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloat32Type;
      goto LABEL_19;
    case kCFNumberFloat64Type:
      valuePtr = 0;
      v14 = a1;
      v15 = kCFNumberFloat64Type;
      goto LABEL_25;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      v16 = CFNumberGetValue(v2, v3, &valuePtr) == 0;
      v5 = (double)(char)valuePtr;
      goto LABEL_26;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberShortType;
LABEL_12:
      v16 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      v17.i16[0] = valuePtr;
      v18 = vmovl_s16(v17).i32[0];
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberIntType;
LABEL_14:
      v16 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      v18 = (int)valuePtr;
LABEL_15:
      v5 = (double)v18;
      goto LABEL_26;
    case kCFNumberLongType:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberLongType;
      goto LABEL_23;
    case kCFNumberLongLongType:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberLongLongType;
      goto LABEL_23;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloatType;
LABEL_19:
      v16 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      v5 = *(float *)&valuePtr;
      goto LABEL_26;
    case kCFNumberDoubleType:
      valuePtr = 0;
      v14 = a1;
      v15 = kCFNumberDoubleType;
      goto LABEL_25;
    case kCFNumberCFIndexType:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberCFIndexType;
      goto LABEL_23;
    case kCFNumberNSIntegerType:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberNSIntegerType;
LABEL_23:
      v16 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      v5 = (double)valuePtr;
      goto LABEL_26;
    case kCFNumberCGFloatType:
      valuePtr = 0;
      v14 = a1;
      v15 = kCFNumberCGFloatType;
LABEL_25:
      v16 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      v5 = *(double *)&valuePtr;
LABEL_26:
      if (v16)
        v5 = 0.0;
      v4 = *(_QWORD *)&v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return LOBYTE(v5) | v4;
}

double sub_19C1C43C8(const __CFDictionary *a1, const UInt8 *a2)
{
  const __CFNumber *v2;
  const __CFNumber *v3;
  char v4;
  std::runtime_error *exception;

  v2 = (const __CFNumber *)sub_19C1C3D64(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    goto LABEL_6;
  }
  v3 = sub_19C1C40EC(v2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return *(double *)&v3;
}

void sub_19C1C443C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C4450(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C4464(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v4;
  const void *v5;
  CFTypeID TypeID;
  std::runtime_error *exception;

  v4 = sub_19C1C3D64(a1, a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    goto LABEL_6;
  }
  v5 = v4;
  TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C1C4520((const __CFArray *)v5, a3);
}

void sub_19C1C44F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C450C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C4520(const __CFArray *a1@<X0>, _QWORD *a2@<X8>)
{
  CFIndex Count;
  int v4;
  char *v5;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  const void *ValueAtIndex;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  std::runtime_error *exception;

  Count = CFArrayGetCount(a1);
  v4 = Count;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0)
      sub_19C07DA0C();
    v5 = (char *)operator new((4 * Count) & 0x3FFFFFFFFLL);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[4 * v4];
  }
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = v4;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      v10 = sub_19C09B5E4((uint64_t)ValueAtIndex);
      if ((v10 & 0xFF00000000) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not convert");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v11 = v10;
      v13 = (char *)a2[1];
      v12 = a2[2];
      if ((unint64_t)v13 >= v12)
        break;
      *(_DWORD *)v13 = v10;
      v8 = (uint64_t)(v13 + 4);
LABEL_7:
      a2[1] = v8;
      if (++v6 == v7)
        return;
    }
    v14 = (char *)*a2;
    v15 = (uint64_t)&v13[-*a2];
    v16 = v15 >> 2;
    v17 = (v15 >> 2) + 1;
    if (v17 >> 62)
      sub_19C07DA0C();
    v18 = v12 - (_QWORD)v14;
    if (v18 >> 1 > v17)
      v17 = v18 >> 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 62)
        sub_19C07C7FC();
      v20 = operator new(4 * v19);
      v21 = &v20[4 * v16];
      *v21 = v11;
      v8 = (uint64_t)(v21 + 1);
      if (v13 == v14)
        goto LABEL_27;
    }
    else
    {
      v20 = 0;
      v21 = (_DWORD *)(4 * v16);
      *(_DWORD *)(4 * v16) = v11;
      v8 = 4 * v16 + 4;
      if (v13 == v14)
      {
LABEL_27:
        *a2 = v21;
        a2[1] = v8;
        a2[2] = &v20[4 * v19];
        if (v14)
          operator delete(v14);
        goto LABEL_7;
      }
    }
    v22 = v13 - 4 - v14;
    if (v22 < 0x2C)
      goto LABEL_36;
    if ((unint64_t)(v13 - &v20[v15]) < 0x20)
      goto LABEL_36;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v13[-v24];
    v21 = (_DWORD *)((char *)v21 - v24);
    v26 = &v20[4 * v16 - 16];
    v27 = v13 - 16;
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    v13 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        v30 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--v21 = v30;
      }
      while (v13 != v14);
    }
    goto LABEL_27;
  }
}

void sub_19C1C475C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C1C4790(const __CFDictionary *a1, const UInt8 *a2)
{
  const void *v2;
  uint64_t result;
  std::runtime_error *exception;

  v2 = sub_19C1C3D64(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    goto LABEL_6;
  }
  result = sub_19C09B5E4((uint64_t)v2);
  if ((result & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C1C4800(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C4814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C4828(uint64_t a1, char *a2)
{
  const void *v4;

  if (a2)
  {
    sub_19C1C4828(a1, *(_QWORD *)a2);
    sub_19C1C4828(a1, *((_QWORD *)a2 + 1));
    v4 = (const void *)*((_QWORD *)a2 + 7);
    if (v4)
      CFRelease(v4);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

CFArrayRef sub_19C1C48A0(uint64_t **a1)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  CFNumberRef *v5;
  CFArrayRef v6;
  CFNumberRef *v7;
  CFNumberRef *v8;
  void *v9;
  const void *v10;
  const void *v11;
  uint64_t v13;
  void *__p;
  CFNumberRef *v15;
  unint64_t v16;

  v2 = a1[1] - *a1;
  __p = 0;
  v15 = 0;
  v16 = 0;
  sub_19C09ACF8((uint64_t)&__p, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = v15;
    do
    {
      v13 = *v3;
      if ((unint64_t)v5 >= v16)
        v5 = sub_19C1C49D8((CFNumberRef **)&__p, &v13);
      else
        sub_19C1C4BC8((uint64_t)&v16, v5++, &v13);
      v15 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v6 = sub_19C09AE70((char **)&__p);
  v7 = (CFNumberRef *)__p;
  if (__p)
  {
    v8 = v15;
    v9 = __p;
    if (v15 != __p)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        if (v11)
          CFRelease(v10);
      }
      while (v8 != v7);
      v9 = __p;
    }
    v15 = v7;
    operator delete(v9);
  }
  return v6;
}

void sub_19C1C49A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B000((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1C49C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B000((void **)va);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_19C1C49D8(CFNumberRef **a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  CFNumberRef *v9;
  CFNumberRef *v10;
  CFNumberRef *v11;
  CFNumberRef *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFNumberRef *v17;
  CFNumberRef *v18;
  CFNumberRef *v19;
  CFNumberRef *v20;
  uint64_t v21;
  __int128 v22;
  const __CFNumber *v23;
  CFNumberRef *v24;
  const void *v25;
  const void *v26;
  CFNumberRef *v28;
  CFNumberRef *v29;

  v3 = a1[1] - *a1;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61)
    sub_19C07DA0C();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v4)
    v4 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 61)
      sub_19C07C7FC();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v28 = (CFNumberRef *)&v8[8 * v3];
  v29 = (CFNumberRef *)&v8[8 * v7];
  sub_19C1C4BC8((uint64_t)(a1 + 2), v28, a2);
  v9 = v28;
  v10 = v28 + 1;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v28;
    a1[1] = v10;
    a1[2] = v29;
  }
  else
  {
    v13 = (char *)v12 - (char *)*a1 - 8;
    if (v13 < 0x58)
      goto LABEL_18;
    v14 = ((char *)v11 - (char *)v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((CFNumberRef *)((char *)v28 + v14) < v12 && (CFNumberRef *)((char *)v12 + v14) < v28)
      goto LABEL_18;
    v15 = (v13 >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v28[v16 / 0xFFFFFFFFFFFFFFF8];
    v18 = &v12[v16 / 0xFFFFFFFFFFFFFFF8];
    v19 = v12 - 2;
    v20 = v28 - 2;
    v21 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)v19 = 0uLL;
      v19 -= 4;
      v20 -= 4;
      v21 -= 4;
    }
    while (v21);
    v9 = v17;
    v12 = v18;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      v17 = v9;
      do
      {
        v23 = *--v12;
        *--v17 = v23;
        *v12 = 0;
      }
      while (v12 != v11);
    }
    v24 = *a1;
    v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v29;
    if (v12 != v24)
    {
      do
      {
        v26 = *--v12;
        v25 = v26;
        if (v26)
          CFRelease(v25);
      }
      while (v12 != v24);
      v12 = v24;
    }
  }
  if (v12)
    operator delete(v12);
  return v28 + 1;
}

void sub_19C1C4BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B06C((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef sub_19C1C4BC8(uint64_t a1, CFNumberRef *a2, uint64_t *a3)
{
  CFNumberRef result;
  std::runtime_error *exception;
  uint64_t valuePtr;

  valuePtr = *a3;
  result = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C1C4C48(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_19C1C4C74(int **a1)
{
  unint64_t v2;
  int *v3;
  int *v4;
  CFNumberRef *v5;
  CFArrayRef v6;
  CFNumberRef *v7;
  CFNumberRef *v8;
  void *v9;
  const void *v10;
  const void *v11;
  int v13;
  void *__p;
  CFNumberRef *v15;
  unint64_t v16;

  v2 = a1[1] - *a1;
  __p = 0;
  v15 = 0;
  v16 = 0;
  sub_19C09ACF8((uint64_t)&__p, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = v15;
    do
    {
      v13 = *v3;
      if ((unint64_t)v5 >= v16)
        v5 = sub_19C1C4DAC((CFNumberRef **)&__p, &v13);
      else
        sub_19C1C4F9C((uint64_t)&v16, v5++, &v13);
      v15 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v6 = sub_19C09AE70((char **)&__p);
  v7 = (CFNumberRef *)__p;
  if (__p)
  {
    v8 = v15;
    v9 = __p;
    if (v15 != __p)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        if (v11)
          CFRelease(v10);
      }
      while (v8 != v7);
      v9 = __p;
    }
    v15 = v7;
    operator delete(v9);
  }
  return v6;
}

void sub_19C1C4D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B000((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1C4D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B000((void **)va);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_19C1C4DAC(CFNumberRef **a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  CFNumberRef *v9;
  CFNumberRef *v10;
  CFNumberRef *v11;
  CFNumberRef *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFNumberRef *v17;
  CFNumberRef *v18;
  CFNumberRef *v19;
  CFNumberRef *v20;
  uint64_t v21;
  __int128 v22;
  const __CFNumber *v23;
  CFNumberRef *v24;
  const void *v25;
  const void *v26;
  CFNumberRef *v28;
  CFNumberRef *v29;

  v3 = a1[1] - *a1;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61)
    sub_19C07DA0C();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v4)
    v4 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 61)
      sub_19C07C7FC();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v28 = (CFNumberRef *)&v8[8 * v3];
  v29 = (CFNumberRef *)&v8[8 * v7];
  sub_19C1C4F9C((uint64_t)(a1 + 2), v28, a2);
  v9 = v28;
  v10 = v28 + 1;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v28;
    a1[1] = v10;
    a1[2] = v29;
  }
  else
  {
    v13 = (char *)v12 - (char *)*a1 - 8;
    if (v13 < 0x58)
      goto LABEL_18;
    v14 = ((char *)v11 - (char *)v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((CFNumberRef *)((char *)v28 + v14) < v12 && (CFNumberRef *)((char *)v12 + v14) < v28)
      goto LABEL_18;
    v15 = (v13 >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v28[v16 / 0xFFFFFFFFFFFFFFF8];
    v18 = &v12[v16 / 0xFFFFFFFFFFFFFFF8];
    v19 = v12 - 2;
    v20 = v28 - 2;
    v21 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)v19 = 0uLL;
      v19 -= 4;
      v20 -= 4;
      v21 -= 4;
    }
    while (v21);
    v9 = v17;
    v12 = v18;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      v17 = v9;
      do
      {
        v23 = *--v12;
        *--v17 = v23;
        *v12 = 0;
      }
      while (v12 != v11);
    }
    v24 = *a1;
    v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v29;
    if (v12 != v24)
    {
      do
      {
        v26 = *--v12;
        v25 = v26;
        if (v26)
          CFRelease(v25);
      }
      while (v12 != v24);
      v12 = v24;
    }
  }
  if (v12)
    operator delete(v12);
  return v28 + 1;
}

void sub_19C1C4F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B06C((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef sub_19C1C4F9C(uint64_t a1, CFNumberRef *a2, int *a3)
{
  CFNumberRef result;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a3;
  result = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C1C501C(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

CFDictionaryRef sub_19C1C5048(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  CFStringRef *v5;
  const UInt8 *v6;
  const void **v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  CFDictionaryRef v11;
  CFStringRef *v12;
  CFStringRef *v13;
  void *v14;
  const void *v15;
  const void *v16;
  void *__p;
  CFStringRef *v19;
  unint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_19C09A184((uint64_t)&__p, a1[2]);
  v4 = (_QWORD *)*a1;
  v2 = a1 + 1;
  v3 = v4;
  if (v4 != v2)
  {
    v5 = v19;
    do
    {
      v6 = (const UInt8 *)(v3 + 4);
      v7 = (const void **)(v3 + 7);
      if ((unint64_t)v5 >= v20)
      {
        v5 = sub_19C1C51B0((CFStringRef **)&__p, v6, v7);
        v19 = v5;
        v8 = (_QWORD *)v3[1];
        if (v8)
        {
          do
          {
LABEL_8:
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      else
      {
        sub_19C1C53C4(v5, v6, v7);
        v5 += 2;
        v19 = v5;
        v8 = (_QWORD *)v3[1];
        if (v8)
          goto LABEL_8;
      }
      do
      {
        v9 = (_QWORD *)v3[2];
        v10 = *v9 == (_QWORD)v3;
        v3 = v9;
      }
      while (!v10);
LABEL_3:
      v3 = v9;
    }
    while (v9 != v2);
  }
  v11 = sub_19C09A310((char **)&__p);
  v12 = (CFStringRef *)__p;
  if (__p)
  {
    v13 = v19;
    v14 = __p;
    if (v19 != __p)
    {
      do
      {
        v15 = *(v13 - 1);
        if (v15)
          CFRelease(v15);
        v16 = *(v13 - 2);
        if (v16)
          CFRelease(v16);
        v13 -= 2;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v19 = v12;
    operator delete(v14);
  }
  return v11;
}

void sub_19C1C5178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09A7D8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C1C5198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09A7D8((void **)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_19C1C51B0(CFStringRef **a1, const UInt8 *a2, const void **a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  CFStringRef *v11;
  CFStringRef *v12;
  CFStringRef *v13;
  CFStringRef *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFStringRef *v19;
  CFStringRef *v20;
  const double *v21;
  double *v22;
  uint64_t v23;
  const __CFString *v24;
  CFStringRef *v25;
  const void *v26;
  const void *v27;
  CFStringRef *v29;
  CFStringRef *v30;
  float64x2x2_t v31;

  v4 = ((char *)a1[1] - (char *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_19C07DA0C();
  v8 = (char *)a1[2] - (char *)*a1;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_19C07C7FC();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v29 = (CFStringRef *)&v10[16 * v4];
  v30 = (CFStringRef *)&v10[16 * v9];
  sub_19C1C53C4(v29, a2, a3);
  v11 = v29;
  v12 = v29 + 2;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v29;
    a1[1] = v12;
    a1[2] = v30;
  }
  else
  {
    v15 = (char *)v14 - (char *)*a1 - 16;
    if (v15 < 0x70)
      goto LABEL_18;
    v16 = ((char *)v13 - (char *)v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    if ((CFStringRef *)((char *)v29 + v16) < v14 && (CFStringRef *)((char *)v14 + v16) < v29)
      goto LABEL_18;
    v17 = (v15 >> 4) + 1;
    v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFELL);
    v19 = &v29[v18 / 0xFFFFFFFFFFFFFFF8];
    v20 = &v14[v18 / 0xFFFFFFFFFFFFFFF8];
    v21 = (const double *)(v14 - 4);
    v22 = (double *)(v29 - 4);
    v23 = v17 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v31 = vld2q_f64(v21);
      vst2q_f64(v22, v31);
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v21 + 1) = 0uLL;
      v21 -= 4;
      v22 -= 4;
      v23 -= 2;
    }
    while (v23);
    v11 = v19;
    v14 = v20;
    if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v19 = v11;
      do
      {
        v24 = *(v14 - 2);
        v14 -= 2;
        *(v19 - 2) = v24;
        v19 -= 2;
        *v14 = 0;
        v19[1] = v14[1];
        v14[1] = 0;
      }
      while (v14 != v13);
    }
    v25 = *a1;
    v14 = a1[1];
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v30;
    if (v14 != v25)
    {
      do
      {
        v26 = *(v14 - 1);
        if (v26)
          CFRelease(v26);
        v27 = *(v14 - 2);
        if (v27)
          CFRelease(v27);
        v14 -= 2;
      }
      while (v14 != v25);
      v14 = v25;
    }
  }
  if (v14)
    operator delete(v14);
  return v29 + 2;
}

void sub_19C1C53A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09A858((uint64_t)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_19C1C53C4(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  const __CFString *v8;
  std::runtime_error *exception;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = (const __CFString *)*a3;
  if (v8)
    CFRetain(v8);
  a1[1] = v8;
  return a1;
}

void sub_19C1C546C(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C1C549C@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const void *ValueAtIndex;
  const void *v7;
  std::runtime_error *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = CFArrayGetValueAtIndex(a1, a2), (v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(ValueAtIndex);
  return sub_19C0987C4(a3, v7);
}

void sub_19C1C5534(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19C1C5548@<X0>(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFString *v4;
  const __CFString *v5;
  CFTypeID TypeID;
  std::runtime_error *exception;

  v4 = (const __CFString *)sub_19C1C3D64(a1, a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    goto LABEL_6;
  }
  v5 = v4;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_19C0992F0(v5, a3);
}

void sub_19C1C55DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C55F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19C1C5604@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v3;
  const __CFString *Value;
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (v3 = *a2) == 0 || (Value = (const __CFString *)CFDictionaryGetValue(a1, v3)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    goto LABEL_8;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(Value))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_19C0992F0(Value, a3);
}

void sub_19C1C56A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C56BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_19C1C56D0(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;

  v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 3) + 1;
  if (v4 > 0x666666666666666)
    sub_19C07DA0C();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      sub_19C07C7FC();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[8 * (v3 >> 3)];
  v9 = &v7[40 * v6];
  v10 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v11 = &v7[v3];
  *((_QWORD *)v11 + 3) = v10;
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  v12 = v8 + 40;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v14)
      return v12;
    goto LABEL_20;
  }
  do
  {
    v15 = *(_OWORD *)(v14 - 40);
    *((_QWORD *)v8 - 3) = *((_QWORD *)v14 - 3);
    *(_OWORD *)(v8 - 40) = v15;
    *((_QWORD *)v14 - 4) = 0;
    *((_QWORD *)v14 - 3) = 0;
    *((_QWORD *)v14 - 5) = 0;
    v16 = *((_QWORD *)v14 - 2);
    *((_DWORD *)v8 - 2) = *((_DWORD *)v14 - 2);
    *((_QWORD *)v8 - 2) = v16;
    v8 -= 40;
    v14 -= 40;
  }
  while (v14 != v13);
  v17 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v12;
  a1[2] = v9;
  if (v14 != v17)
  {
    do
    {
      if (*(v14 - 17) < 0)
        operator delete(*((void **)v14 - 5));
      v14 -= 40;
    }
    while (v14 != v17);
    v14 = v17;
  }
  if (v14)
LABEL_20:
    operator delete(v14);
  return v12;
}

double sub_19C1C5860(const __CFDictionary *a1, const void **a2)
{
  const void *v2;
  const __CFNumber *Value;
  const __CFNumber *v4;
  char v5;
  std::runtime_error *exception;

  if (!a1 || (v2 = *a2) == 0 || (Value = (const __CFNumber *)CFDictionaryGetValue(a1, v2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    goto LABEL_8;
  }
  v4 = sub_19C1C40EC(Value);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return *(double *)&v4;
}

void sub_19C1C58E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C58F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_19C1C590C(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  char *v16;

  v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 4) + 1;
  if (v4 > 0x555555555555555)
    sub_19C07DA0C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_19C07C7FC();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[16 * (v3 >> 4)];
  v9 = &v7[48 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = &v7[v3];
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 + 40);
  v11 = v8 + 48;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13)
      return v11;
    goto LABEL_20;
  }
  do
  {
    v14 = *((_OWORD *)v13 - 3);
    *((_QWORD *)v8 - 4) = *((_QWORD *)v13 - 4);
    *((_OWORD *)v8 - 3) = v14;
    *((_QWORD *)v13 - 5) = 0;
    *((_QWORD *)v13 - 4) = 0;
    *((_QWORD *)v13 - 6) = 0;
    v15 = *(_OWORD *)(v13 - 24);
    *((_DWORD *)v8 - 2) = *((_DWORD *)v13 - 2);
    *(_OWORD *)(v8 - 24) = v15;
    v8 -= 48;
    v13 -= 48;
  }
  while (v13 != v12);
  v16 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v16)
  {
    do
    {
      if (*(v13 - 25) < 0)
        operator delete(*((void **)v13 - 6));
      v13 -= 48;
    }
    while (v13 != v16);
    v13 = v16;
  }
  if (v13)
LABEL_20:
    operator delete(v13);
  return v11;
}

uint64_t sub_19C1C5AA0(const __CFDictionary *a1, const void **a2)
{
  const void *v2;
  const void *Value;
  uint64_t result;
  std::runtime_error *exception;

  if (!a1 || (v2 = *a2) == 0 || (Value = CFDictionaryGetValue(a1, v2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    goto LABEL_8;
  }
  result = sub_19C09B5E4((uint64_t)Value);
  if ((result & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C1C5B1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C5B34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C1C5B48@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v3;
  const void *Value;
  const void *v6;
  std::runtime_error *exception;

  if (!a1 || (v3 = *a2) == 0 || (Value = CFDictionaryGetValue(a1, v3), (v6 = Value) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(Value);
  return sub_19C1C2F80(a3, v6);
}

void sub_19C1C5BC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C1C5BD4(uint64_t ***a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  char **v11;
  char **v12;
  char **v13;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v7 = (uint64_t **)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[12 * v6];
  v9 = sub_19C1C5D14(&v7[12 * v3], a2);
  v10 = v9 + 12;
  v12 = (char **)*a1;
  v11 = (char **)a1[1];
  if (v11 == (char **)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11)
      return v10;
    goto LABEL_17;
  }
  do
  {
    v11 -= 12;
    v9 = sub_19C1C5D14(v9 - 12, (uint64_t)v11);
  }
  while (v11 != v12);
  v13 = (char **)*a1;
  v11 = (char **)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 12;
      sub_19C17B808(v11);
    }
    while (v11 != v13);
    v11 = v13;
  }
  if (v11)
LABEL_17:
    operator delete(v11);
  return v10;
}

uint64_t **sub_19C1C5D14(uint64_t **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;

  *(_OWORD *)v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  sub_19C17B350(a1, (uint64_t *)v14, (uint64_t *)__p);
  v3 = (char *)__p[0];
  if (__p[0])
  {
    v4 = (char *)__p[1];
    v5 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 4);
        if (v6)
        {
          *((_QWORD *)v4 - 3) = v6;
          operator delete(v6);
        }
        if (*(v4 - 33) < 0)
          operator delete(*((void **)v4 - 7));
        v4 -= 56;
      }
      while (v4 != v3);
      v5 = __p[0];
    }
    __p[1] = v3;
    operator delete(v5);
  }
  v7 = (char *)v14[0];
  if (v14[0])
  {
    v8 = (char *)v14[1];
    v9 = v14[0];
    if (v14[1] != v14[0])
    {
      do
      {
        v10 = (void *)*((_QWORD *)v8 - 4);
        if (v10)
        {
          *((_QWORD *)v8 - 3) = v10;
          operator delete(v10);
        }
        if (*(v8 - 33) < 0)
          operator delete(*((void **)v8 - 7));
        v8 -= 56;
      }
      while (v8 != v7);
      v9 = v14[0];
    }
    v14[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_19C1C5E2C(const __CFDictionary **a1, const void **a2, uint64_t (*a3)(CFTypeRef *))
{
  const __CFDictionary *v4;
  const void *v6;
  const __CFDictionary *v8;
  CFTypeRef v9;
  uint64_t v10;
  std::runtime_error *exception;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef cf;

  v4 = *a1;
  if (!v4)
    goto LABEL_13;
  v6 = *a2;
  if (!v6 || !CFDictionaryContainsKey(v4, v6))
    return 1;
  v8 = *a1;
  if (!*a1)
  {
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C2370(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v14 = *a2;
  sub_19C1C60CC(v8, &v14, &cf);
  v9 = cf;
  if (cf)
    CFRetain(cf);
  v13 = v9;
  v10 = a3(&v13);
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  return v10;
}

void sub_19C1C5F30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C5F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  sub_19C0934D0((const void **)va);
  sub_19C0934D0((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19C1C5F6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1C5F84(CFTypeRef *a1)
{
  CFComparisonResult v2;
  CFComparisonResult v3;
  void *exception;
  CFTypeRef *v6;
  void *v7;
  const __CFString **v8;
  CFTypeRef cf[3];

  sub_19C1C1A00("Random", cf);
  v2 = sub_19C1C61E0(a1, (const __CFString **)cf);
  if (cf[0])
    CFRelease(cf[0]);
  if (v2 == kCFCompareEqualTo)
    return 0;
  sub_19C1C1A00("GaussianProcess", cf);
  v3 = sub_19C1C61E0(a1, (const __CFString **)cf);
  if (cf[0])
    CFRelease(cf[0]);
  if (v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v6 = a1;
    v7 = exception;
    v8 = (const __CFString **)sub_19C1C2C7C(v6);
    sub_19C093440(&v8, cf);
    sub_19C1C6158((uint64_t)v7, "Unexpected optimizer name: ", (uint64_t)cf);
    __cxa_throw(v7, (struct type_info *)&unk_1E3D1D7B8, (void (*)(void *))sub_19C1BB384);
  }
  return 1;
}

void sub_19C1C608C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *sub_19C1C60CC@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v3;
  const void *Value;
  const void *v6;
  std::runtime_error *exception;

  if (!a1 || (v3 = *a2) == 0 || (Value = CFDictionaryGetValue(a1, v3), (v6 = Value) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C3994(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(Value);
  return sub_19C09827C(a3, v6);
}

void sub_19C1C6144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1C6158(uint64_t a1, const char *a2, uint64_t a3)
{
  const char **v4;
  const char *v5;

  v4 = (const char **)(a1 + 16);
  sub_19C1C3AC4("[InvalidArgument] ", a2, a3);
  *(_QWORD *)a1 = &unk_1E3D21978;
  v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0)
    v5 = *v4;
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(_QWORD *)a1 = &unk_1E3D21978;
  return a1;
}

void sub_19C1C61C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

CFComparisonResult sub_19C1C61E0(CFTypeRef *a1, const __CFString **a2)
{
  const __CFString *v3;
  const __CFString *v4;
  CFComparisonResult v5;

  v3 = (const __CFString *)*a1;
  if (*a1)
  {
    CFRetain(*a1);
    v4 = *a2;
    if (!v4)
    {
      v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(v3);
      return v5;
    }
LABEL_5:
    CFRetain(v4);
    if (v3)
      v5 = CFStringCompare(v3, v4, 0);
    else
      v5 = kCFCompareLessThan;
    CFRelease(v4);
    if (!v3)
      return v5;
    goto LABEL_9;
  }
  v4 = *a2;
  if (*a2)
    goto LABEL_5;
  return 0;
}

uint64_t sub_19C1C6298(const __CFDictionary **a1, const void **a2, uint64_t (*a3)(CFTypeRef *))
{
  const __CFDictionary *v4;
  const void *v6;
  const __CFDictionary *v8;
  CFTypeRef v9;
  uint64_t v10;
  std::runtime_error *exception;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef cf;

  v4 = *a1;
  if (!v4)
    goto LABEL_13;
  v6 = *a2;
  if (!v6 || !CFDictionaryContainsKey(v4, v6))
    return 0;
  v8 = *a1;
  if (!*a1)
  {
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C1C2370(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v14 = *a2;
  sub_19C1C60CC(v8, &v14, &cf);
  v9 = cf;
  if (cf)
    CFRetain(cf);
  v13 = v9;
  v10 = a3(&v13);
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  return v10;
}

void sub_19C1C639C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C1C63BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  sub_19C0934D0((const void **)va);
  sub_19C0934D0((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19C1C63D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C1C63F0(CFTypeRef *a1)
{
  CFComparisonResult v2;
  CFComparisonResult v3;
  void *exception;
  CFTypeRef *v6;
  void *v7;
  const __CFString **v8;
  CFTypeRef cf[3];

  sub_19C1C1A00("Maximize", cf);
  v2 = sub_19C1C61E0(a1, (const __CFString **)cf);
  if (cf[0])
    CFRelease(cf[0]);
  if (v2 == kCFCompareEqualTo)
    return 0;
  sub_19C1C1A00("Minimize", cf);
  v3 = sub_19C1C61E0(a1, (const __CFString **)cf);
  if (cf[0])
    CFRelease(cf[0]);
  if (v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v6 = a1;
    v7 = exception;
    v8 = (const __CFString **)sub_19C1C2C7C(v6);
    sub_19C093440(&v8, cf);
    sub_19C1C6538((uint64_t)v7, "Unexpected optimization direction: ", (uint64_t)cf);
    __cxa_throw(v7, (struct type_info *)&unk_1E3D1D7B8, (void (*)(void *))sub_19C1BB384);
  }
  return 1;
}

void sub_19C1C64F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_19C1C6538(uint64_t a1, const char *a2, uint64_t a3)
{
  const char **v4;
  const char *v5;

  v4 = (const char **)(a1 + 16);
  sub_19C1C3AC4("[InvalidArgument] ", a2, a3);
  *(_QWORD *)a1 = &unk_1E3D21978;
  v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0)
    v5 = *v4;
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(_QWORD *)a1 = &unk_1E3D21978;
  return a1;
}

void sub_19C1C65A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_19C1C65C0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char **v5;
  char **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char **v22;
  void *v23;
  void **v24;
  void **v25;
  void *v26;
  void **v27;
  void **v28;
  void *v29;
  void *v30;
  void **v31;
  void *v32;
  void **v33;
  void *__p;
  char **v35;
  char v36;
  void *v37;
  void **v38;
  void *v39;
  void **v40;
  void *v41;
  char **v42;
  char v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  sub_19C1C2D98((uint64_t)&v30, a1);
  sub_19C1C2D98((uint64_t)&v37, (uint64_t)&v30);
  sub_19C1C762C((uint64_t)&v37, &v44);
  if (v36)
  {
    v5 = (char **)__p;
    if (__p)
    {
      v6 = v35;
      v7 = __p;
      if (v35 != __p)
      {
        do
          v6 = sub_19C17B808(v6 - 12);
        while (v6 != v5);
        v7 = __p;
      }
      v35 = v5;
      operator delete(v7);
    }
  }
  v8 = (void **)v32;
  if (v32)
  {
    v9 = v33;
    v10 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v9 - 17) < 0)
          operator delete(*(v9 - 5));
        v9 -= 5;
      }
      while (v9 != v8);
      v10 = v32;
    }
    v33 = v8;
    operator delete(v10);
  }
  v11 = (void **)v30;
  if (v30)
  {
    v12 = v31;
    v13 = v30;
    if (v31 != v30)
    {
      do
      {
        if (*((char *)v12 - 25) < 0)
          operator delete(*(v12 - 6));
        v12 -= 6;
      }
      while (v12 != v11);
      v13 = v30;
    }
    v31 = v11;
    operator delete(v13);
  }
  v14 = a2[3];
  if (!v14)
    goto LABEL_26;
  if ((_QWORD *)v14 != a2)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_26:
    v46 = (_BYTE *)v14;
    goto LABEL_28;
  }
  v46 = v45;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v45);
LABEL_28:
  v15 = v47;
  v16 = a2[7];
  if (!v16)
  {
LABEL_31:
    v48 = (_BYTE *)v16;
    goto LABEL_33;
  }
  if ((_QWORD *)v16 != a2 + 4)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    goto LABEL_31;
  }
  v48 = v47;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 24))(v16, v47);
LABEL_33:
  sub_19C1C7284((uint64_t)&v37, (uint64_t)v45, a3);
  if (v48 == v47)
  {
    v17 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_38;
    v17 = 5;
    v15 = v48;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v17))(v15);
LABEL_38:
  v18 = v46;
  if (v46 == v45)
  {
    v19 = 4;
    v18 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_43;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_43:
  v20 = v44;
  v44 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v43)
  {
    v21 = (char **)v41;
    if (v41)
    {
      v22 = v42;
      v23 = v41;
      if (v42 != v41)
      {
        do
          v22 = sub_19C17B808(v22 - 12);
        while (v22 != v21);
        v23 = v41;
      }
      v42 = v21;
      operator delete(v23);
    }
  }
  v24 = (void **)v39;
  if (v39)
  {
    v25 = v40;
    v26 = v39;
    if (v40 != v39)
    {
      do
      {
        if (*((char *)v25 - 17) < 0)
          operator delete(*(v25 - 5));
        v25 -= 5;
      }
      while (v25 != v24);
      v26 = v39;
    }
    v40 = v24;
    operator delete(v26);
  }
  v27 = (void **)v37;
  if (v37)
  {
    v28 = v38;
    v29 = v37;
    if (v38 != v37)
    {
      do
      {
        if (*((char *)v28 - 25) < 0)
          operator delete(*(v28 - 6));
        v28 -= 6;
      }
      while (v28 != v27);
      v29 = v37;
    }
    v38 = v27;
    operator delete(v29);
  }
}

void sub_19C1C68F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = *(_QWORD **)(v39 - 96);
  if (v41 == (_QWORD *)(v39 - 120))
  {
    v42 = 4;
    v41 = (_QWORD *)(v39 - 120);
  }
  else
  {
    if (!v41)
    {
      v43 = a39;
      a39 = 0;
      if (v43)
        goto LABEL_8;
      goto LABEL_5;
    }
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
  v43 = a39;
  a39 = 0;
  if (v43)
  {
LABEL_8:
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    sub_19C1C2E88((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
LABEL_5:
  sub_19C1C2E88((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_19C1C69A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_19C1C2E88((uint64_t)&a24);
  sub_19C1C2E88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C1C69BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C1C2E88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C1C69D4(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char **v5;
  char **v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char **v22;
  void *v23;
  void **v24;
  void **v25;
  void *v26;
  void **v27;
  void **v28;
  void *v29;
  void *v30;
  void **v31;
  void *v32;
  void **v33;
  void *__p;
  char **v35;
  char v36;
  void *v37;
  void **v38;
  void *v39;
  void **v40;
  void *v41;
  char **v42;
  char v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  sub_19C1C2D98((uint64_t)&v30, a1);
  sub_19C1C2D98((uint64_t)&v37, (uint64_t)&v30);
  sub_19C1D6E88((uint64_t)&v37, &v44);
  if (v36)
  {
    v5 = (char **)__p;
    if (__p)
    {
      v6 = v35;
      v7 = __p;
      if (v35 != __p)
      {
        do
          v6 = sub_19C17B808(v6 - 12);
        while (v6 != v5);
        v7 = __p;
      }
      v35 = v5;
      operator delete(v7);
    }
  }
  v8 = (void **)v32;
  if (v32)
  {
    v9 = v33;
    v10 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v9 - 17) < 0)
          operator delete(*(v9 - 5));
        v9 -= 5;
      }
      while (v9 != v8);
      v10 = v32;
    }
    v33 = v8;
    operator delete(v10);
  }
  v11 = (void **)v30;
  if (v30)
  {
    v12 = v31;
    v13 = v30;
    if (v31 != v30)
    {
      do
      {
        if (*((char *)v12 - 25) < 0)
          operator delete(*(v12 - 6));
        v12 -= 6;
      }
      while (v12 != v11);
      v13 = v30;
    }
    v31 = v11;
    operator delete(v13);
  }
  v14 = a2[3];
  if (!v14)
    goto LABEL_26;
  if ((_QWORD *)v14 != a2)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_26:
    v46 = (_BYTE *)v14;
    goto LABEL_28;
  }
  v46 = v45;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v45);
LABEL_28:
  v15 = v47;
  v16 = a2[7];
  if (!v16)
  {
LABEL_31:
    v48 = (_BYTE *)v16;
    goto LABEL_33;
  }
  if ((_QWORD *)v16 != a2 + 4)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    goto LABEL_31;
  }
  v48 = v47;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 24))(v16, v47);
LABEL_33:
  sub_19C1D6AE0((uint64_t)&v37, (uint64_t)v45, a3);
  if (v48 == v47)
  {
    v17 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_38;
    v17 = 5;
    v15 = v48;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v17))(v15);
LABEL_38:
  v18 = v46;
  if (v46 == v45)
  {
    v19 = 4;
    v18 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_43;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_43:
  v20 = v44;
  v44 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v43)
  {
    v21 = (char **)v41;
    if (v41)
    {
      v22 = v42;
      v23 = v41;
      if (v42 != v41)
      {
        do
          v22 = sub_19C17B808(v22 - 12);
        while (v22 != v21);
        v23 = v41;
      }
      v42 = v21;
      operator delete(v23);
    }
  }
  v24 = (void **)v39;
  if (v39)
  {
    v25 = v40;
    v26 = v39;
    if (v40 != v39)
    {
      do
      {
        if (*((char *)v25 - 17) < 0)
          operator delete(*(v25 - 5));
        v25 -= 5;
      }
      while (v25 != v24);
      v26 = v39;
    }
    v40 = v24;
    operator delete(v26);
  }
  v27 = (void **)v37;
  if (v37)
  {
    v28 = v38;
    v29 = v37;
    if (v38 != v37)
    {
      do
      {
        if (*((char *)v28 - 25) < 0)
          operator delete(*(v28 - 6));
        v28 -= 6;
      }
      while (v28 != v27);
      v29 = v37;
    }
    v38 = v27;
    operator delete(v29);
  }
}

