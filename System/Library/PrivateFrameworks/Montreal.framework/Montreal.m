uint64_t sub_19C07A4E8()
{
  uint64_t result;

  if ((byte_1ECD3EFF0 & 1) == 0)
  {
    byte_1ECD3EFF0 = 1;
    qword_1ECD3EE40 = 0;
    unk_1ECD3EE48 = 0;
    qword_1ECD3EE38 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EE38, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A528()
{
  uint64_t result;

  if ((byte_1ECD3F020 & 1) == 0)
  {
    byte_1ECD3F020 = 1;
    qword_1ECD3EED0 = 0;
    qword_1ECD3EED8 = 0;
    qword_1ECD3EEC8 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE234, &qword_1ECD3EEC8, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A568()
{
  uint64_t result;

  if ((byte_1ECD3F008 & 1) == 0)
  {
    byte_1ECD3F008 = 1;
    qword_1ECD3EEE8 = 0;
    unk_1ECD3EEF0 = 0;
    qword_1ECD3EEE0 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EEE0, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A5A8()
{
  uint64_t result;

  if ((byte_1ECD3EFE8 & 1) == 0)
  {
    byte_1ECD3EFE8 = 1;
    qword_1ECD3EE88 = 0;
    qword_1ECD3EE90 = 0;
    qword_1ECD3EE80 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE234, &qword_1ECD3EE80, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A5E8()
{
  uint64_t result;

  if ((byte_1ECD3EFA8 & 1) == 0)
  {
    byte_1ECD3EFA8 = 1;
    qword_1ECD3EE70 = 0;
    unk_1ECD3EE78 = 0;
    qword_1ECD3EE68 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EE68, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A628()
{
  uint64_t result;

  if ((byte_1ECD3EFD0 & 1) == 0)
  {
    byte_1ECD3EFD0 = 1;
    qword_1ECD3EF30 = 0;
    qword_1ECD3EF38 = 0;
    qword_1ECD3EF28 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE234, &qword_1ECD3EF28, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A668()
{
  uint64_t result;

  if ((byte_1ECD3EFB0 & 1) == 0)
  {
    byte_1ECD3EFB0 = 1;
    qword_1ECD3EF78 = 0;
    unk_1ECD3EF80 = 0;
    qword_1ECD3EF70 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EF70, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A6A8()
{
  uint64_t result;

  if ((byte_1ECD3EFB8 & 1) == 0)
  {
    byte_1ECD3EFB8 = 1;
    qword_1ECD3EE10 = 0;
    qword_1ECD3EE18 = 0;
    qword_1ECD3EE08 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE234, &qword_1ECD3EE08, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A6E8()
{
  uint64_t result;

  if ((byte_1ECD3EFE0 & 1) == 0)
  {
    byte_1ECD3EFE0 = 1;
    qword_1ECD3EF18 = 0;
    unk_1ECD3EF20 = 0;
    qword_1ECD3EF10 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EF10, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A728()
{
  uint64_t result;

  if ((byte_1ECD3EFD8 & 1) == 0)
  {
    byte_1ECD3EFD8 = 1;
    qword_1ECD3EF48 = 0;
    unk_1ECD3EF50 = 0;
    qword_1ECD3EF40 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EF40, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A768()
{
  uint64_t result;

  if ((byte_1ECD3F010 & 1) == 0)
  {
    byte_1ECD3F010 = 1;
    qword_1ECD3EF60 = 0;
    unk_1ECD3EF68 = 0;
    qword_1ECD3EF58 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EF58, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A7A8()
{
  uint64_t result;

  if ((byte_1ECD3EFC0 & 1) == 0)
  {
    byte_1ECD3EFC0 = 1;
    qword_1ECD3EDF8 = 0;
    unk_1ECD3EE00 = 0;
    qword_1ECD3EDF0 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EDF0, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A7E8()
{
  uint64_t result;

  if ((byte_1ECD3F000 & 1) == 0)
  {
    byte_1ECD3F000 = 1;
    qword_1ECD3EEB8 = 0;
    unk_1ECD3EEC0 = 0;
    qword_1ECD3EEB0 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EEB0, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A828()
{
  uint64_t result;

  if ((byte_1ECD3EFA0 & 1) == 0)
  {
    byte_1ECD3EFA0 = 1;
    qword_1ECD3EE58 = 0;
    unk_1ECD3EE60 = 0;
    qword_1ECD3EE50 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EE50, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A868()
{
  uint64_t result;

  if ((byte_1ECD3F018 & 1) == 0)
  {
    byte_1ECD3F018 = 1;
    qword_1ECD3EF00 = 0;
    unk_1ECD3EF08 = 0;
    qword_1ECD3EEF8 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EEF8, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A8A8()
{
  uint64_t result;

  if ((byte_1ECD3EFC8 & 1) == 0)
  {
    byte_1ECD3EFC8 = 1;
    qword_1ECD3EE28 = 0;
    unk_1ECD3EE30 = 0;
    qword_1ECD3EE20 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE264, &qword_1ECD3EE20, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A8E8()
{
  uint64_t result;

  if ((byte_1ECD3F028 & 1) == 0)
  {
    byte_1ECD3F028 = 1;
    qword_1ECD3EF90 = 0;
    qword_1ECD3EF98 = 0;
    qword_1ECD3EF88 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE234, &qword_1ECD3EF88, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A928()
{
  uint64_t result;

  if ((byte_1ECD3EFF8 & 1) == 0)
  {
    byte_1ECD3EFF8 = 1;
    qword_1ECD3EEA0 = 0;
    qword_1ECD3EEA8 = 0;
    qword_1ECD3EE98 = 0;
    return __cxa_atexit((void (*)(void *))sub_19C0AE234, &qword_1ECD3EE98, &dword_19C079000);
  }
  return result;
}

uint64_t sub_19C07A968(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 216);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t MRLNeuralNetworkModelLock(uint64_t result)
{
  if (result)
    return sub_19C07A968(result + 16);
  return result;
}

uint64_t MRLNeuralNetworkClear(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 80))(a1 + 16, (a2 / 1000));
}

uint64_t sub_19C07A9B4(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *__src, uint64_t a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  __int128 v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v23 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18E344(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D248E0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_DWORD *)(a1 + 1048) = 1065353216;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1064) = 0;
  v9 = operator new();
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  v28[0] = *MEMORY[0x1E0CFE090];
  v24 = *MEMORY[0x1E0CFE000];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v10, (uint64_t)&v24, (uint64_t)v28, 1);
  v11 = objc_claimAutoreleasedReturnValue();
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_QWORD *)(a1 + 1080) = v9;
  v12 = __src[17];
  v13 = vmax_s32(__src[16], (int32x2_t)0x100000001);
  *(_QWORD *)&v14 = v13.u32[0];
  *((_QWORD *)&v14 + 1) = v13.u32[1];
  v25 = v14;
  *(_QWORD *)(v9 + 16) = v11;
  *(_DWORD *)(v9 + 24) = 0;
  LODWORD(v24) = 1;
  v15 = vmax_s32(v12, (int32x2_t)0x100000001);
  *(_QWORD *)&v14 = v15.u32[0];
  *((_QWORD *)&v14 + 1) = v15.u32[1];
  v26 = v14;
  v27 = 1;
  sub_19C07C964(a1 + 16, (int *)&v24, (int *)v28);
  v16 = __src[33];
  v17 = vmax_s32(__src[32], (int32x2_t)0x100000001);
  *(_QWORD *)&v14 = v17.u32[0];
  *((_QWORD *)&v14 + 1) = v17.u32[1];
  v25 = v14;
  LODWORD(v24) = 9;
  v18 = vmax_s32(v16, (int32x2_t)0x100000001);
  *(_QWORD *)&v14 = v18.u32[0];
  *((_QWORD *)&v14 + 1) = v18.u32[1];
  v26 = v14;
  v27 = 1;
  sub_19C07C964(a1 + 40, (int *)&v24, (int *)v28);
  sub_19C07AC34(*(_QWORD *)(a1 + 1080), a5, v19, v20);
  return a1;
}

void sub_19C07ABC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  sub_19C07AD50((void **)(v14 + 1056));
  sub_19C07ADC0(v15);
  sub_19C18E518(v14);
  _Unwind_Resume(a1);
}

void sub_19C07AC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;

  objc_msgSend_sharedConnection(MEMORY[0x1E0CFDF38], (const char *)a2, a3, a4);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(void **)a1;
  *(_QWORD *)a1 = v6;

  v10 = (void *)MEMORY[0x1E0C99E98];
  if (*(char *)(a2 + 23) >= 0)
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v8, a2, v9);
  else
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v8, *(_QWORD *)a2, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v10, v12, (uint64_t)v11, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_modelAtURL_key_(MEMORY[0x1E0CFDF68], v15, (uint64_t)v14, (uint64_t)&stru_1E3D25B70);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v16;

  v18 = *(void **)a1;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v24 = objc_msgSend_aneUserInteractiveTaskQoS(MEMORY[0x1E0CFDF88], v21, v22, v23);
  v26 = 0;
  objc_msgSend_loadModel_options_qos_error_(v18, v25, v19, v20, v24, &v26);

}

void sub_19C07AD20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C07AD30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C07AD40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void **sub_19C07AD50(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19C07ADC0(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  uint64_t v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = *((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_19C07AE44(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  void *v16;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = &unk_1E3D248E0;
  v5 = (void **)a1[135];
  if (v5)
  {
    v6 = (uint64_t)v5[1];
    if (!v6
      || (v7 = *v5,
          v8 = (uint64_t)v5[2],
          v9 = objc_msgSend_aneUserInteractiveTaskQoS(MEMORY[0x1E0CFDF88], a2, a3, a4),
          v20 = 0,
          objc_msgSend_unloadModel_options_qos_error_(v7, v10, v6, v8, v9, &v20),
          (v5 = (void **)a1[135]) != 0))
    {
      v11 = (void *)sub_19C07C5A8((uint64_t)v5);
      operator delete(v11);
    }
  }
  v12 = a1[132];
  if (v12)
  {
    v13 = a1[133];
    v14 = (void *)a1[132];
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0)
          operator delete(*(void **)(v13 - 24));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = (void *)a1[132];
    }
    a1[133] = v12;
    operator delete(v14);
  }
  v15 = (char *)a1[129];
  if (v15)
  {
    do
    {
      v18 = *(char **)v15;
      v19 = *((_QWORD *)v15 + 5);
      *((_QWORD *)v15 + 5) = 0;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (v15[39] < 0)
        operator delete(*((void **)v15 + 2));
      operator delete(v15);
      v15 = v18;
    }
    while (v18);
  }
  v16 = (void *)a1[127];
  a1[127] = 0;
  if (v16)
    operator delete(v16);
  return sub_19C18E518((uint64_t)a1);
}

void sub_19C07AF7C(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_19C07AF90(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;

  v4 = (void *)sub_19C07AE44(a1, a2, a3, a4);
  operator delete(v4);
}

uint64_t sub_19C07AFA4(uint64_t *a1, int a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t **v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  vImagePixelCount v26;
  __IOSurface *v27;
  char *BaseAddress;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t **v34;
  uint64_t v35;
  uint64_t **v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  vImagePixelCount v41;
  __IOSurface *v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;

  v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 56))(a1, 1);
  v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 64))(a1, 9);
  v9 = (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
  if (a2 >= 1)
  {
    v10 = 0;
    v11 = v8 * a3;
    v12 = v6 * a3 / v7;
    v13 = v12;
    v58 = v11 / v9;
    v56 = a2;
    v57 = a3;
    v55 = v12;
    do
    {
      v20 = sub_19C18FCD8((uint64_t)a1, 1);
      v24 = a1[135];
      if (*(_DWORD *)(v24 + 36) && *(_DWORD *)(v24 + 44))
      {
        v25 = *v20;
        v26 = *(int *)(v24 + 32) * (uint64_t)*(int *)(v24 + 40);
        v27 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v24 + 56), v21, v22, v23);
        BaseAddress = (char *)IOSurfaceGetBaseAddress(v27);
        v29 = *(_DWORD *)(v24 + 44) * a3;
        v30 = (v29 - 1);
        if (v29 < 2)
        {
          v33 = 0;
        }
        else
        {
          v31 = 0;
          v32 = v25;
          do
          {
            sub_19C22CA4C(v32, &BaseAddress[2 * v31 * *(int *)(v24 + 36)], v26);
            ++v31;
            v32 = (uint64_t *)((char *)v32 + 4 * v26);
          }
          while (v30 != v31);
          v33 = v30;
          a2 = v56;
          a3 = v57;
          v13 = v55;
        }
        sub_19C22CA4C((char *)v25 + 4 * v33 * (int)v26, &BaseAddress[2 * *(_DWORD *)(v24 + 36) * v33], *(_DWORD *)(v24 + 52) * a3 - (int)v30 * (int)v26);
      }
      v34 = sub_19C18FCD8((uint64_t)a1, 1);
      *v34 = (uint64_t *)((char *)*v34 + 4 * v13);
      sub_19C07B2E8(a1[135]);
      v35 = a1[135];
      v36 = sub_19C18FEB8((uint64_t)a1, 9);
      if (*(_DWORD *)(v35 + 68) && *(_DWORD *)(v35 + 76))
      {
        v40 = *v36;
        v41 = *(int *)(v35 + 64) * (uint64_t)*(int *)(v35 + 72);
        v42 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v35 + 88), v37, v38, v39);
        v43 = (char *)IOSurfaceGetBaseAddress(v42);
        v44 = *(_DWORD *)(v35 + 76) * a3;
        v45 = (v44 - 1);
        if (v44 < 2)
        {
          v48 = 0;
        }
        else
        {
          v46 = 0;
          v47 = v40;
          do
          {
            sub_19C22CA90(&v43[2 * v46 * *(int *)(v35 + 68)], v47, v41);
            ++v46;
            v47 = (uint64_t *)((char *)v47 + 4 * v41);
          }
          while (v45 != v46);
          v48 = v45;
          a2 = v56;
          a3 = v57;
          v13 = v55;
        }
        sub_19C22CA90(&v43[2 * *(_DWORD *)(v35 + 68) * v48], (char *)v40 + 4 * v48 * (int)v41, *(_DWORD *)(v35 + 84) * a3 - (int)v45 * (int)v41);
      }
      v49 = sub_19C18FEB8((uint64_t)a1, 9);
      *v49 = (uint64_t *)((char *)*v49 + 4 * v58);
      v50 = a1[135];
      v51 = *(_QWORD *)(v50 + 144);
      v14 = *(_QWORD *)(v50 + 152);
      if (v51 == v14)
      {
        v14 = *(_QWORD *)(v50 + 144);
      }
      else if (*(_QWORD *)(v50 + 88) == *(_QWORD *)(v14 - 8))
      {
        v52 = *(_QWORD *)(v50 + 104);
        v53 = *(_QWORD *)(v52 - 16);
        *(_OWORD *)(v50 + 64) = *(_OWORD *)(v52 - 32);
        *(_QWORD *)(v50 + 80) = v53;
        objc_storeStrong((id *)(v50 + 88), *(id *)(v52 - 8));
        v50 = a1[135];
        v51 = *(_QWORD *)(v50 + 144);
        v14 = *(_QWORD *)(v50 + 152);
      }
      v15 = *(_OWORD *)(v50 + 96);
      *(_QWORD *)(v50 + 96) = v51;
      *(_QWORD *)(v50 + 104) = v14;
      *(_OWORD *)(v50 + 144) = v15;
      v16 = *(_QWORD *)(v50 + 112);
      *(_QWORD *)(v50 + 112) = *(_QWORD *)(v50 + 160);
      *(_QWORD *)(v50 + 160) = v16;
      v17 = a1[135];
      v18 = *(_OWORD *)(v17 + 120);
      *(_OWORD *)(v17 + 120) = *(_OWORD *)(v17 + 168);
      *(_OWORD *)(v17 + 168) = v18;
      v19 = *(_QWORD *)(v17 + 136);
      *(_QWORD *)(v17 + 136) = *(_QWORD *)(v17 + 184);
      *(_QWORD *)(v17 + 184) = v19;
      ++v10;
    }
    while (v10 != a2);
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
}

void sub_19C07B2E8(uint64_t a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;

  v2 = (void *)objc_opt_new();
  v3 = (void *)objc_opt_new();
  objc_msgSend_addObject_(v2, v4, *(_QWORD *)(a1 + 56), v5);
  objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v6, 0, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v3, v9, (uint64_t)v8, v10);

  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 104);
  for (i = 1; v13 != v14; ++i)
  {
    objc_msgSend_addObject_(v2, v11, *(_QWORD *)(v13 + 24), v12);
    objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v16, i, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v3, v19, (uint64_t)v18, v20);

    v13 += 32;
  }
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_QWORD *)(a1 + 128);
  if (v21 != v22)
  {
    i = i;
    do
    {
      objc_msgSend_addObject_(v2, v11, *(_QWORD *)(v21 + 24), v12);
      objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v23, i, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v3, v26, (uint64_t)v25, v27);

      v21 += 32;
      ++i;
    }
    while (v21 != v22);
  }
  v28 = (void *)objc_opt_new();
  v32 = (void *)objc_opt_new();
  v33 = *(_QWORD *)(a1 + 168);
  v34 = *(_QWORD *)(a1 + 176);
  if (v33 == v34)
  {
    LODWORD(v35) = 0;
    v41 = *(_QWORD *)(a1 + 144);
    v42 = *(_QWORD *)(a1 + 152);
    if (v41 != v42)
      goto LABEL_10;
  }
  else
  {
    v35 = 0;
    do
    {
      objc_msgSend_addObject_(v28, v29, *(_QWORD *)(v33 + 24), v31);
      objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v36, v35, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v32, v39, (uint64_t)v38, v40);

      v33 += 32;
      ++v35;
    }
    while (v33 != v34);
    v41 = *(_QWORD *)(a1 + 144);
    v42 = *(_QWORD *)(a1 + 152);
    if (v41 != v42)
    {
LABEL_10:
      v35 = v35;
      do
      {
        objc_msgSend_addObject_(v28, v29, *(_QWORD *)(v41 + 24), v31);
        objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v43, v35, v44);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v32, v46, (uint64_t)v45, v47);

        v41 += 32;
        ++v35;
      }
      while (v41 != v42);
      if (!(_DWORD)v35)
        goto LABEL_13;
      goto LABEL_16;
    }
  }
  if (!(_DWORD)v35)
  {
LABEL_13:
    objc_msgSend_addObject_(v28, v29, *(_QWORD *)(a1 + 88), v31);
LABEL_19:
    objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v48, v35, v49);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v32, v52, (uint64_t)v51, v53);

    goto LABEL_20;
  }
LABEL_16:
  v50 = *(_QWORD *)(a1 + 152);
  if (*(_QWORD *)(a1 + 144) != v50)
  {
    v30 = *(_QWORD *)(a1 + 88);
    if (v30 != *(_QWORD *)(v50 - 8))
    {
      objc_msgSend_addObject_(v28, v29, v30, v31);
      goto LABEL_19;
    }
  }
LABEL_20:
  v54 = (void *)MEMORY[0x1E0CFDF90];
  v55 = (void *)objc_msgSend_copy(v2, v29, v30, v31);
  v59 = (void *)objc_msgSend_copy(v3, v56, v57, v58);
  v63 = (void *)objc_msgSend_copy(v28, v60, v61, v62);
  v67 = (void *)objc_msgSend_copy(v32, v64, v65, v66);
  objc_msgSend_requestWithInputs_inputIndices_outputs_outputIndices_procedureIndex_(v54, v68, (uint64_t)v55, (uint64_t)v59, v63, v67, &unk_1E3D2E540);
  v69 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_validate(v69, v70, v71, v72);
  v73 = *(void **)a1;
  v74 = *(_QWORD *)(a1 + 8);
  v75 = *(_QWORD *)(a1 + 16);
  v79 = objc_msgSend_aneUserInteractiveTaskQoS(MEMORY[0x1E0CFDF88], v76, v77, v78);
  v81 = 0;
  objc_msgSend_evaluateWithModel_options_request_qos_error_(v73, v80, v74, v75, v69, v79, &v81);

}

void sub_19C07B5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C07B61C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C07B6F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C07B70C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_19C07B730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C07B748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C07B760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C07B780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C07B794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C07B7A8(uint64_t **a1, int a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int64x2_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  __int128 v21;
  id v22;
  char *v23;
  uint64_t *v24;
  const void *v25;
  int *v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  id v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  id v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  id v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t *v55;
  void *v56;
  int64x2_t v57;
  __int128 v58;
  uint64_t v59;
  id v60;
  int64x2_t v61;
  uint64_t v62;
  uint64_t v63;

  v5 = a1 + 6;
  v4 = (char *)a1[6];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2)
          break;
        v4 = *(char **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 6);
LABEL_8:
    v8 = v6;
    v6 = (char *)operator new(0x50uLL);
    *((_DWORD *)v6 + 8) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 9) = 0;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)*a1[5];
    v10 = (uint64_t *)v6;
    if (v9)
    {
      a1[5] = v9;
      v10 = *v5;
    }
    sub_19C07CC40(a1[6], v10);
    a1[7] = (uint64_t *)((char *)a1[7] + 1);
  }
  v12 = *((_QWORD *)v6 + 5);
  v11 = v6 + 40;
  v13 = ((uint64_t (*)(uint64_t **))(*a1)[28])(a1);
  v14 = ((uint64_t (*)(uint64_t **, uint64_t))(*a1)[27])(a1, 1);
  *(_QWORD *)v11 = v12;
  *((_QWORD *)v11 + 3) = v13;
  *((_QWORD *)v11 + 4) = v14;
  if (!a1[135][7])
  {
    sub_19C07BC88((const char *)a1[2] + 40, v15, (uint64_t)&v61);
    v16 = (int64x2_t *)a1[135];
    v16[2] = v61;
    v17 = v63;
    v63 = 0;
    v18 = (void *)v16[3].i64[1];
    v16[3].i64[0] = v62;
    v16[3].i64[1] = v17;

    v19 = (uint64_t)a1[132];
    v20 = a1[133];
    if ((uint64_t *)v19 != v20)
    {
      v57 = vdupq_n_s64(1uLL);
      do
      {
        v61.i64[0] = v19;
        v24 = sub_19C07CDF4((uint64_t)(a1 + 127), v19, (uint64_t)&unk_19C27ADD0, (__int128 **)&v61);
        (*(void (**)(int64x2_t *__return_ptr))(*(_QWORD *)v24[5] + 152))(&v61);
        if (v61.i64[0] == 5)
        {
          v25 = (const void *)v24[5];
          if (v25)
            v26 = (int *)__dynamic_cast(v25, (const struct __class_type_info *)&unk_1E3D1DA60, (const struct __class_type_info *)&unk_1E3D1DEA0, 0);
          else
            v26 = 0;
          v27 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)v26 + 80))(v26, 9);
          v28 = ((uint64_t (*)(uint64_t **))(*a1)[28])(a1);
          v61 = v57;
          v62 = v27;
          v63 = v28;
          v29 = a1[135];
          sub_19C07BC88(v61.i8, v30, (uint64_t)&v58);
          v31 = v29[13];
          if (v31 >= v29[14])
          {
            v34 = sub_19C07D8C8((void **)v29 + 12, (uint64_t)&v58);
          }
          else
          {
            v32 = v58;
            *(_QWORD *)(v31 + 16) = v59;
            *(_OWORD *)v31 = v32;
            v33 = v60;
            v60 = 0;
            *(_QWORD *)(v31 + 24) = v33;
            v34 = (char *)(v31 + 32);
          }
          v29[13] = (uint64_t)v34;

          v35 = a1[135];
          sub_19C07BC88(v61.i8, v36, (uint64_t)&v58);
          v37 = v35[19];
          if (v37 >= v35[20])
          {
            v40 = sub_19C07D8C8((void **)v35 + 18, (uint64_t)&v58);
          }
          else
          {
            v38 = v58;
            *(_QWORD *)(v37 + 16) = v59;
            *(_OWORD *)v37 = v38;
            v39 = v60;
            v60 = 0;
            *(_QWORD *)(v37 + 24) = v39;
            v40 = (char *)(v37 + 32);
          }
          v35[19] = (uint64_t)v40;

          v62 = v26[318];
          v41 = a1[135];
          sub_19C07BC88(v61.i8, v42, (uint64_t)&v58);
          v43 = v41[16];
          if (v43 >= v41[17])
          {
            v46 = sub_19C07D8C8((void **)v41 + 15, (uint64_t)&v58);
          }
          else
          {
            v44 = v58;
            *(_QWORD *)(v43 + 16) = v59;
            *(_OWORD *)v43 = v44;
            v45 = v60;
            v60 = 0;
            *(_QWORD *)(v43 + 24) = v45;
            v46 = (char *)(v43 + 32);
          }
          v41[16] = (uint64_t)v46;

          v47 = a1[135];
          sub_19C07BC88(v61.i8, v48, (uint64_t)&v58);
          v49 = v47[22];
          if (v49 < v47[23])
          {
            v21 = v58;
            *(_QWORD *)(v49 + 16) = v59;
            *(_OWORD *)v49 = v21;
            v22 = v60;
            v60 = 0;
            *(_QWORD *)(v49 + 24) = v22;
            v23 = (char *)(v49 + 32);
          }
          else
          {
            v23 = sub_19C07D8C8((void **)v47 + 21, (uint64_t)&v58);
          }
          v47[22] = (uint64_t)v23;

          *((_DWORD *)a1[135] + 6) += *(_DWORD *)(a1[135][16] - 12) + *(_DWORD *)(a1[135][13] - 12);
        }
        v19 += 24;
      }
      while ((uint64_t *)v19 != v20);
      v19 = (uint64_t)a1[133];
    }
    v61.i64[0] = v19 - 24;
    v50 = sub_19C07CDF4((uint64_t)(a1 + 127), v19 - 24, (uint64_t)&unk_19C27ADD0, (__int128 **)&v61);
    (*(void (**)(int64x2_t *__return_ptr))(*(_QWORD *)v50[5] + 152))(&v61);
    if (v61.i64[0] == 5)
    {
      v52 = a1[135][19];
      v53 = *(_QWORD *)(v52 - 16);
      v58 = *(_OWORD *)(v52 - 32);
      v59 = v53;
      v54 = *(id *)(v52 - 8);
    }
    else
    {
      sub_19C07BC88(v11, v51, (uint64_t)&v58);
      v54 = v60;
    }
    v55 = a1[135];
    *((_OWORD *)v55 + 4) = v58;
    v60 = 0;
    v56 = (void *)v55[11];
    v55[10] = v59;
    v55[11] = (uint64_t)v54;

  }
}

void sub_19C07BC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19C07BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19C07BC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19C07BC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19C07BC88(const char *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  const __CFDictionary *v16;
  void *v17;
  IOSurfaceRef v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  __IOSurface *v25;
  void *BaseAddress;
  _QWORD v27[3];
  _QWORD v28[4];

  v28[3] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v4 = *(_DWORD *)a1;
  v5 = *((_DWORD *)a1 + 4) * *((_DWORD *)a1 + 2);
  v6 = *((_DWORD *)a1 + 6);
  v7 = v5 * *(_DWORD *)a1;
  if (v6 <= 1)
  {
    v8 = 32 / v4;
    if (32 / v4 <= 1)
      v8 = 1;
    if (v7 >= 8)
      v9 = 8;
    else
      v9 = v5 * *(_DWORD *)a1;
    if (v8 >= v9)
      v8 = v9;
  }
  else
  {
    v8 = 1;
  }
  v10 = (v8 * v4 + 31) & 0xFFFFFFE0;
  *(_DWORD *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v10;
  v11 = (v5 + v8 - 1) / v8;
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v11;
  *(_DWORD *)(a3 + 16) = v11 * v10;
  *(_DWORD *)(a3 + 20) = v7;
  v12 = 2 * v6 * v11 * v10;
  v13 = *MEMORY[0x1E0CBC008];
  v27[0] = *MEMORY[0x1E0CBC1E0];
  v27[1] = v13;
  v28[0] = &unk_1E3D2E528;
  v28[1] = &unk_1E3D2E528;
  v27[2] = *MEMORY[0x1E0CBBF08];
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a1, v12, a2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v28[2] = v14;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v15, (uint64_t)v28, (uint64_t)v27, 3);
  v16 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v17 = (void *)MEMORY[0x1E0CFDF50];
  v18 = IOSurfaceCreate(v16);
  objc_msgSend_objectWithIOSurface_(v17, v19, (uint64_t)v18, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a3 + 24) = v21;
  v25 = (__IOSurface *)objc_msgSend_ioSurface(v21, v22, v23, v24);
  BaseAddress = IOSurfaceGetBaseAddress(v25);
  bzero(BaseAddress, v12);

}

void sub_19C07BE30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C07BE68(uint64_t a1, const char *theArray, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFArray *v7;
  unint64_t v8;
  unint64_t v9;
  const void **v10;
  uint64_t v11;
  CFIndex v12;
  __IOSurface *v13;
  void *BaseAddress;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  __IOSurface *v18;
  size_t AllocSize;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  __IOSurface *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  __IOSurface *v28;
  size_t v29;
  const void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  vImagePixelCount v42;
  __IOSurface *v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  vImagePixelCount v54;
  __IOSurface *v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v63;
  CFIndex v66;
  uint64_t v67;

  v4 = *(_QWORD *)(a1 + 1080);
  v5 = *(_QWORD *)(v4 + 96);
  v6 = *(_QWORD *)(v4 + 104);
  if (v5 != v6)
  {
    v7 = (const __CFArray *)theArray;
    if (theArray)
    {
      if ((int)a3 >= 1)
      {
        v8 = v6 - v5;
        v9 = (unint64_t)(v6 - v5) >> 5;
        v10 = (const void **)(a1 + 256);
        v11 = a3;
        if ((int)v9 <= 0)
        {
          for (i = 0; i != v11; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
            sub_19C18731C((uint64_t)ValueAtIndex + 16, v10);
          }
        }
        else
        {
          v12 = 0;
          v67 = (v8 >> 5);
          v63 = a3;
          do
          {
            v30 = CFArrayGetValueAtIndex(v7, v12);
            v34 = sub_19C18731C((uint64_t)v30 + 16, v10);
            v35 = 0;
            v36 = a1;
            v66 = v12;
            do
            {
              v38 = *(_QWORD *)(v36 + 1080);
              v39 = 32 * v35;
              v40 = (int *)(*(_QWORD *)(v38 + 96) + 32 * v35);
              if (v40[1] && v40[3])
              {
                v41 = v40[4] * (int)v12;
                v42 = *v40 * (uint64_t)v40[2];
                v43 = (__IOSurface *)objc_msgSend_ioSurface(*((void **)v40 + 3), v31, v32, v33);
                v44 = (char *)IOSurfaceGetBaseAddress(v43) + 2 * v41;
                v45 = v40[3];
                v46 = (v45 - 1);
                if (v45 < 2)
                {
                  v49 = 0;
                }
                else
                {
                  v47 = 0;
                  v48 = v34;
                  do
                  {
                    sub_19C22CA4C(v48, &v44[2 * v47 * v40[1]], v42);
                    ++v47;
                    v48 = (uint64_t *)((char *)v48 + 4 * v42);
                  }
                  while (v46 != v47);
                  v49 = v46;
                  v36 = a1;
                }
                sub_19C22CA4C((char *)v34 + 4 * v49 * (int)v42, &v44[2 * v40[1] * v49], v40[5] - (uint64_t)((int)v46 * (int)v42));
                v38 = *(_QWORD *)(v36 + 1080);
                v12 = v66;
              }
              v50 = (char *)v34 + 4 * v40[5];
              v51 = *(_QWORD *)(v38 + 120);
              v52 = v51 + v39;
              if (*(_DWORD *)(v51 + v39 + 4) && *(_DWORD *)(v52 + 12))
              {
                v53 = *(_DWORD *)(v52 + 16) * (int)v12;
                v54 = *(int *)(v51 + 32 * v35) * (uint64_t)*(int *)(v52 + 8);
                v55 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v52 + 24), v31, v32, v33);
                v56 = (char *)IOSurfaceGetBaseAddress(v55) + 2 * v53;
                v57 = *(_DWORD *)(v52 + 12);
                v58 = (v57 - 1);
                if (v57 < 2)
                {
                  v37 = 0;
                }
                else
                {
                  v59 = 0;
                  v60 = v50;
                  do
                  {
                    sub_19C22CA4C(v60, &v56[2 * v59 * *(int *)(v52 + 4)], v54);
                    ++v59;
                    v60 += 4 * v54;
                  }
                  while (v58 != v59);
                  v37 = v58;
                  v12 = v66;
                }
                sub_19C22CA4C(&v50[4 * v37 * (int)v54], &v56[2 * *(_DWORD *)(v52 + 4) * v37], *(int *)(v52 + 20) - (uint64_t)((int)v58 * (int)v54));
              }
              v34 = (uint64_t *)&v50[4 * *(int *)(v52 + 20)];
              ++v35;
            }
            while (v35 != v67);
            ++v12;
            v10 = (const void **)(a1 + 256);
            v7 = (const __CFArray *)theArray;
          }
          while (v12 != v63);
        }
      }
    }
    else
    {
      do
      {
        v13 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v5 + 24), theArray, a3, a4);
        BaseAddress = IOSurfaceGetBaseAddress(v13);
        v18 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v5 + 24), v15, v16, v17);
        AllocSize = IOSurfaceGetAllocSize(v18);
        bzero(BaseAddress, AllocSize);
        v5 += 32;
      }
      while (v5 != v6);
      v20 = *(_QWORD *)(a1 + 1080);
      v21 = *(_QWORD *)(v20 + 120);
      for (j = *(_QWORD *)(v20 + 128); v21 != j; v21 += 32)
      {
        v23 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v21 + 24), theArray, a3, a4);
        v24 = IOSurfaceGetBaseAddress(v23);
        v28 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v21 + 24), v25, v26, v27);
        v29 = IOSurfaceGetAllocSize(v28);
        bzero(v24, v29);
      }
    }
  }
}

void sub_19C07C18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  __IOSurface *v19;
  vImagePixelCount v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  __IOSurface *v33;
  vImagePixelCount v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  v42 = a3;
  v4 = *(_QWORD *)(a1 + 1080);
  v5 = *(_QWORD *)(v4 + 96);
  v6 = *(_QWORD *)(v4 + 104);
  if (v5 != v6)
  {
    v7 = a1;
    v8 = *(int *)(v4 + 24);
    v45 = 0;
    v46 = 0;
    __p = 0;
    if ((_DWORD)v8)
    {
      if ((v8 & 0x80000000) != 0)
        sub_19C07DA0C();
      v9 = 4 * v8;
      v10 = (char *)operator new(4 * v8);
      __p = v10;
      v46 = &v10[v9];
      bzero(v10, v9);
      v45 = &v10[v9];
      v11 = v6 - v5;
      if ((int)((unint64_t)(v6 - v5) >> 5) < 1)
        goto LABEL_25;
    }
    else
    {
      v10 = 0;
      v11 = v6 - v5;
      if ((int)((unint64_t)(v6 - v5) >> 5) < 1)
      {
LABEL_25:
        sub_19C1875B0((uint64_t **)(a2 + 16), (__int128 *)(v7 + 256), (char **)&__p);
        if (__p)
        {
          v45 = (char *)__p;
          operator delete(__p);
        }
        return;
      }
    }
    v12 = 0;
    v43 = (v11 >> 5);
    v41 = v7;
    do
    {
      v14 = *(_QWORD *)(v7 + 1080);
      v15 = *(_QWORD *)(v14 + 96) + 32 * v12;
      if (*(_DWORD *)(v15 + 4) && *(_DWORD *)(v15 + 12))
      {
        v16 = *(_DWORD *)(v15 + 16);
        v17 = *(_DWORD *)(v15 + 8);
        v18 = *(_DWORD *)v15;
        v19 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v15 + 24), (const char *)a2, a3, a4);
        v20 = v18 * (uint64_t)v17;
        v21 = (char *)IOSurfaceGetBaseAddress(v19) + 2 * v16 * v42;
        v22 = *(_DWORD *)(v15 + 12);
        v23 = (v22 - 1);
        if (v22 < 2)
        {
          v26 = 0;
        }
        else
        {
          v24 = 0;
          v25 = v10;
          do
          {
            sub_19C22CA90(&v21[2 * v24 * *(int *)(v15 + 4)], v25, v20);
            ++v24;
            v25 += 4 * v20;
          }
          while (v23 != v24);
          v26 = v23;
          v7 = v41;
        }
        sub_19C22CA90(&v21[2 * *(_DWORD *)(v15 + 4) * v26], &v10[4 * v26 * (int)v20], *(int *)(v15 + 20) - (uint64_t)((int)v23 * (int)v20));
        v14 = *(_QWORD *)(v7 + 1080);
      }
      v27 = &v10[4 * *(int *)(v15 + 20)];
      v28 = *(_QWORD *)(v14 + 120);
      v29 = v28 + 32 * v12;
      if (*(_DWORD *)(v29 + 4) && *(_DWORD *)(v29 + 12))
      {
        v30 = *(_DWORD *)(v29 + 16);
        v31 = *(_DWORD *)(v29 + 8);
        v32 = *(_DWORD *)(v28 + 32 * v12);
        v33 = (__IOSurface *)objc_msgSend_ioSurface(*(void **)(v29 + 24), (const char *)a2, a3, a4);
        v34 = v32 * (uint64_t)v31;
        v35 = (char *)IOSurfaceGetBaseAddress(v33) + 2 * v30 * v42;
        v36 = *(_DWORD *)(v29 + 12);
        v37 = (v36 - 1);
        if (v36 < 2)
        {
          v13 = 0;
        }
        else
        {
          v38 = 0;
          v39 = v27;
          do
          {
            sub_19C22CA90(&v35[2 * v38 * *(int *)(v29 + 4)], v39, v34);
            ++v38;
            v39 += 4 * v34;
          }
          while (v37 != v38);
          v13 = v37;
        }
        sub_19C22CA90(&v35[2 * *(_DWORD *)(v29 + 4) * v13], &v27[4 * v13 * (int)v34], *(int *)(v29 + 20) - (uint64_t)((int)v37 * (int)v34));
      }
      v10 = &v27[4 * *(int *)(v29 + 20)];
      ++v12;
    }
    while (v12 != v43);
    goto LABEL_25;
  }
}

void sub_19C07C438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C07C468(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  __int128 v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  void **v12;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 232))(__p);
  v4 = *(_QWORD *)(a1 + 1064);
  if (v4 >= *(_QWORD *)(a1 + 1072))
  {
    v6 = sub_19C07DA20((char **)(a1 + 1056), (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v11) < 0)
    {
      sub_19C07C6E8(*(_BYTE **)(a1 + 1064), __p[0], (unint64_t)__p[1]);
    }
    else
    {
      v5 = *(_OWORD *)__p;
      *(_QWORD *)(v4 + 16) = v11;
      *(_OWORD *)v4 = v5;
    }
    v6 = (char *)(v4 + 24);
    *(_QWORD *)(a1 + 1064) = v4 + 24;
  }
  *(_QWORD *)(a1 + 1064) = v6;
  v12 = __p;
  v7 = sub_19C07CDF4(a1 + 1016, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v12);
  v8 = *a2;
  *a2 = 0;
  v9 = v7[5];
  v7[5] = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_19C07C56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 1064) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C07C594()
{
  return 0;
}

uint64_t sub_19C07C5A0()
{
  return 0;
}

uint64_t sub_19C07C5A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    v4 = *(void **)(a1 + 168);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 32;

        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v4);
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 152);
    v8 = *(void **)(a1 + 144);
    if (v7 != v6)
    {
      do
      {
        v9 = v7 - 32;

        v7 = v9;
      }
      while (v9 != v6);
      v8 = *(void **)(a1 + 144);
    }
    *(_QWORD *)(a1 + 152) = v6;
    operator delete(v8);
  }
  v10 = *(_QWORD *)(a1 + 120);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 128);
    v12 = *(void **)(a1 + 120);
    if (v11 != v10)
    {
      do
      {
        v13 = v11 - 32;

        v11 = v13;
      }
      while (v13 != v10);
      v12 = *(void **)(a1 + 120);
    }
    *(_QWORD *)(a1 + 128) = v10;
    operator delete(v12);
  }
  v14 = *(_QWORD *)(a1 + 96);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 104);
    v16 = *(void **)(a1 + 96);
    if (v15 != v14)
    {
      do
      {
        v17 = v15 - 32;

        v15 = v17;
      }
      while (v17 != v14);
      v16 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v14;
    operator delete(v16);
  }

  return a1;
}

void *sub_19C07C6E8(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C07C774();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_19C07C774()
{
  sub_19C07C788("basic_string");
}

void sub_19C07C788(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19C07C7D8(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3D1C4B8, MEMORY[0x1E0DE42D0]);
}

void sub_19C07C7C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19C07C7D8(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void sub_19C07C7FC()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t *sub_19C07C824(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void **sub_19C07C884(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C07C924(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_19C07C924(a1, *a2);
    sub_19C07C924(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_19C07C964(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t **v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *i;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  uint64_t **v30;
  uint64_t **v31;
  int v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
LABEL_36:
      v23 = a1;
      v24 = 0;
LABEL_42:
      sub_19C07C924(v23, v24);
      goto LABEL_43;
    }
    v10 = (uint64_t *)v9[2];
    if (v10)
    {
      v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v37 = (uint64_t *)v10[1];
          if (!v37)
            break;
          do
          {
            v10 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      while (1)
      {
        v12 = *v8;
        v13 = *a2;
        v14 = (uint64_t **)(a1 + 8);
        v15 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          while (1)
          {
            while (1)
            {
              v15 = (uint64_t **)v12;
              v16 = *((_DWORD *)v12 + 8);
              if (v13 >= v16)
                break;
              v12 = (uint64_t *)*v12;
              v14 = v15;
              if (!*v15)
                goto LABEL_19;
            }
            if (v16 >= v13)
              break;
            v12 = (uint64_t *)v12[1];
            if (!v12)
            {
              v14 = v15 + 1;
              goto LABEL_19;
            }
          }
          v20 = v10;
          a2 += 12;
        }
        else
        {
LABEL_19:
          *((_DWORD *)v9 + 8) = v13;
          v17 = *(_OWORD *)(a2 + 2);
          v18 = *(_OWORD *)(a2 + 6);
          v9[9] = *((_QWORD *)a2 + 5);
          *(_OWORD *)(v9 + 7) = v18;
          *(_OWORD *)(v9 + 5) = v17;
          *v9 = 0;
          v9[1] = 0;
          v9[2] = (uint64_t)v15;
          *v14 = v9;
          v19 = **(_QWORD **)a1;
          if (v19)
          {
            *(_QWORD *)a1 = v19;
            v9 = *v14;
          }
          sub_19C07CC40(*(uint64_t **)(a1 + 8), v9);
          ++*(_QWORD *)(a1 + 16);
          if (!v10)
          {
            a2 += 12;
            goto LABEL_36;
          }
          v20 = (uint64_t *)v10[2];
          if (v20)
          {
            v21 = (uint64_t *)*v20;
            if ((uint64_t *)*v20 == v10)
            {
              *v20 = 0;
              while (1)
              {
                v22 = (_QWORD *)v20[1];
                if (!v22)
                  break;
                do
                {
                  v20 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22);
              }
            }
            else
            {
              for (v20[1] = 0; v21; v21 = (uint64_t *)v20[1])
              {
                do
                {
                  v20 = v21;
                  v21 = (uint64_t *)*v21;
                }
                while (v21);
              }
            }
          }
          v9 = v10;
          a2 += 12;
        }
        v10 = v20;
        if (a2 == a3)
          goto LABEL_38;
      }
    }
    v20 = v10;
LABEL_38:
    sub_19C07C924(a1, v9);
    if (v20)
    {
      for (i = (_QWORD *)v20[2]; i; i = (_QWORD *)i[2])
        v20 = i;
      v23 = a1;
      v24 = v20;
      goto LABEL_42;
    }
  }
LABEL_43:
  if (a2 != a3)
  {
    v26 = (uint64_t **)(a1 + 8);
    do
    {
      v28 = *v26;
      v29 = *a2;
      v30 = (uint64_t **)(a1 + 8);
      v31 = (uint64_t **)(a1 + 8);
      if (*v26)
      {
        while (1)
        {
          while (1)
          {
            v31 = (uint64_t **)v28;
            v32 = *((_DWORD *)v28 + 8);
            if (v29 >= v32)
              break;
            v28 = *v31;
            v30 = v31;
            if (!*v31)
              goto LABEL_55;
          }
          if (v32 >= v29)
            break;
          v28 = v31[1];
          if (!v28)
          {
            v30 = v31 + 1;
            goto LABEL_55;
          }
        }
      }
      else
      {
LABEL_55:
        v33 = (char *)operator new(0x50uLL);
        *((_DWORD *)v33 + 8) = v29;
        v34 = *((_QWORD *)a2 + 5);
        v35 = *(_OWORD *)(a2 + 6);
        *(_OWORD *)(v33 + 40) = *(_OWORD *)(a2 + 2);
        *(_OWORD *)(v33 + 56) = v35;
        *((_QWORD *)v33 + 9) = v34;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = v31;
        *v30 = (uint64_t *)v33;
        v36 = **(_QWORD **)a1;
        if (v36)
        {
          *(_QWORD *)a1 = v36;
          v27 = *v30;
        }
        else
        {
          v27 = (uint64_t *)v33;
        }
        sub_19C07CC40(*(uint64_t **)(a1 + 8), v27);
        ++*(_QWORD *)(a1 + 16);
      }
      a2 += 12;
    }
    while (a2 != a3);
  }
}

uint64_t *sub_19C07CC40(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *sub_19C07CDF4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  _BYTE *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_19C07D2D0((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x30uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = v28 + 2;
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19C07C6E8(v29, *(void **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)v29 = v31;
  }
  v28[5] = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        sub_19C07D71C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19C07D240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C07D26C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C07D254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C07D26C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C07D26C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_19C07D2D0(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_19C07D71C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_19C07C7FC();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

char *sub_19C07D8C8(void **a1, uint64_t a2)
{
  id *v3;
  id *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  id v18;

  v4 = (id *)*a1;
  v3 = (id *)a1[1];
  v5 = (char *)v3 - (_BYTE *)*a1;
  v6 = (v5 >> 5) + 1;
  if (v6 >> 59)
    sub_19C07DA0C();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 4 > v6)
    v6 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v6 = 0x7FFFFFFFFFFFFFFLL;
  if (v6 >> 59)
    sub_19C07C7FC();
  v9 = 32 * v6;
  v10 = (char *)operator new(32 * v6);
  v11 = &v10[32 * (v5 >> 5)];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)&v10[v5 + 24] = v13;
  v14 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  v15 = 0;
  do
  {
    v16 = &v11[v15 * 8];
    v17 = *(_OWORD *)&v3[v15 - 4];
    *((_QWORD *)v16 - 2) = v3[v15 - 2];
    *((_OWORD *)v16 - 2) = v17;
    v18 = v3[v15 - 1];
    v3[v15 - 1] = 0;
    *((_QWORD *)v16 - 1) = v18;
    v15 -= 4;
  }
  while (&v3[v15] != v4);
  *a1 = &v11[v15 * 8];
  a1[1] = v14;
  a1[2] = v12;
  do
  {

    v3 -= 4;
  }
  while (v3 != v4);
  v3 = v4;
  if (v4)
LABEL_13:
    operator delete(v3);
  return v14;
}

void sub_19C07DA0C()
{
  sub_19C07C788("vector");
}

char *sub_19C07DA20(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_19C07DBE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C07DBF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C07DBF4(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C07DC58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](a1 + 112);
  return a1;
}

_QWORD *sub_19C07DCDC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1A1AD1AE8](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_19C07DE40(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A1AD1AF4](v13);
  return a1;
}

void sub_19C07DDE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1A1AD1AF4](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19C07DDC4);
}

void sub_19C07DE2C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C07DE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_19C07C774();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_19C07DFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C07DFE4()
{
  sub_19C07DFF8("basic_string");
}

void sub_19C07DFF8(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19C07E048(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3D1C4C0, MEMORY[0x1E0DE42E0]);
}

void sub_19C07E034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19C07E048(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t MLPModelTrainerCreate(void *a1)
{
  id v1;
  uint64_t Instance;

  v1 = a1;
  if (qword_1EE418AA0 != -1)
    dispatch_once(&qword_1EE418AA0, &unk_1E3D25100);
  Instance = _CFRuntimeCreateInstance();
  sub_19C195D24(Instance + 16, 0, v1);

  return Instance;
}

void sub_19C07E0FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLPModelTrainerCreateWithModel(uint64_t a1, void *a2)
{
  id v3;
  uint64_t Instance;

  v3 = a2;
  if (qword_1EE418AA0 != -1)
    dispatch_once(&qword_1EE418AA0, &unk_1E3D25100);
  Instance = _CFRuntimeCreateInstance();
  sub_19C195D24(Instance + 16, a1, v3);

  return Instance;
}

void sub_19C07E1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MLPModelTrainerTrain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_19C1954BC((_QWORD *)(a1 + 16), a4, a2, a3, 0, a5);
}

uint64_t MLPModelTrainerTrainModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  return sub_19C1954BC((_QWORD *)(a1 + 16), a4, a2, a3, a5, a6);
}

uint64_t MLPModelTrainerEvaluateModel(uint64_t a1, void *a2)
{
  return sub_19C195024(a1 + 16, a2);
}

uint64_t MLPModelTrainerComputeInference(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return sub_19C195044((void **)(a1 + 16), a2, a3, a4);
}

uint64_t sub_19C07E200()
{
  uint64_t result;

  qword_1EE418AA8 = 0;
  unk_1EE418AB0 = "MLPModelTrainer";
  qword_1EE418AB8 = 0;
  unk_1EE418AC0 = 0;
  qword_1EE418AC8 = (uint64_t)sub_19C07E250;
  unk_1EE418AD0 = 0u;
  unk_1EE418AE0 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE418B08 = result;
  return result;
}

uint64_t sub_19C07E250(uint64_t a1)
{
  return sub_19C195DAC(a1 + 16);
}

double sub_19C07E258(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_19C22DF48(a1);
  *(_QWORD *)v1 = off_1E3D231F8;
  *(_BYTE *)(v1 + 296) = 0;
  *(_QWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 280) = 0;
  *(_DWORD *)(v1 + 288) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 319) = 0u;
  *(_OWORD *)(v1 + 335) = 0u;
  *(_BYTE *)(v1 + 351) = 0;
  *(_DWORD *)(v1 + 352) = 1065353216;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_DWORD *)(v1 + 392) = 1065353216;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_DWORD *)(v1 + 432) = 1065353216;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_DWORD *)(v1 + 472) = 1065353216;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_DWORD *)(v1 + 512) = 1065353216;
  return result;
}

uint64_t sub_19C07E2C4(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  char *v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  void **v12;
  void **v13;
  char *v14;
  void *v15;
  void **v16;
  void **v17;

  *(_QWORD *)a1 = off_1E3D231F8;
  espresso_plan_destroy();
  espresso_context_destroy();
  v2 = *(void ***)(a1 + 496);
  if (v2)
  {
    do
    {
      v12 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v12;
    }
    while (v12);
  }
  v3 = *(void **)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void ***)(a1 + 456);
  if (v4)
  {
    do
    {
      v13 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v13;
    }
    while (v13);
  }
  v5 = *(void **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(char **)(a1 + 416);
  if (v6)
  {
    do
    {
      v14 = *(char **)v6;
      v15 = (void *)*((_QWORD *)v6 + 5);
      if (v15)
      {
        *((_QWORD *)v6 + 6) = v15;
        operator delete(v15);
      }
      if (v6[39] < 0)
        operator delete(*((void **)v6 + 2));
      operator delete(v6);
      v6 = v14;
    }
    while (v14);
  }
  v7 = *(void **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(void ***)(a1 + 376);
  if (v8)
  {
    do
    {
      v16 = (void **)*v8;
      if (*((char *)v8 + 39) < 0)
        operator delete(v8[2]);
      operator delete(v8);
      v8 = v16;
    }
    while (v16);
  }
  v9 = *(void **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v9)
    operator delete(v9);
  v10 = *(void ***)(a1 + 336);
  if (v10)
  {
    do
    {
      v17 = (void **)*v10;
      if (*((char *)v10 + 39) < 0)
        operator delete(v10[2]);
      operator delete(v10);
      v10 = v17;
    }
    while (v17);
  }
  v11 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v11)
    operator delete(v11);
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  return sub_19C22E138(a1);
}

void sub_19C07E484(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C07E2C4(a1);
  operator delete(v1);
}

__CFArray *sub_19C07E498(uint64_t a1)
{
  uint64_t **Instance;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  char *p_p;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v31;
  __CFArray *Mutable;
  uint64_t v33;
  _QWORD v34[5];
  __int128 __p;
  unint64_t v36;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (*(int *)(a1 + 56) >= 1)
  {
    v33 = 0;
    while (1)
    {
      if (qword_1EE4188F0 != -1)
        dispatch_once(&qword_1EE4188F0, &unk_1E3D25120);
      Instance = (uint64_t **)_CFRuntimeCreateInstance();
      Instance[3] = 0;
      Instance[2] = (uint64_t *)(Instance + 3);
      v3 = Instance + 2;
      Instance[6] = 0;
      Instance[4] = 0;
      Instance[5] = (uint64_t *)(Instance + 6);
      Instance[8] = 0;
      Instance[9] = 0;
      Instance[7] = 0;
      v31 = Instance;
      v4 = *(uint64_t **)(a1 + 376);
      if (v4)
        break;
LABEL_6:
      CFArrayAppendValue(Mutable, v31);
      CFRelease(v31);
      if (++v33 >= *(int *)(a1 + 56))
        return Mutable;
    }
    while (1)
    {
      if (v4[18] != *(_DWORD *)(a1 + 56))
        return Mutable;
      v5 = v4 + 2;
      v6 = *((unsigned __int8 *)v4 + 39);
      if (*((char *)v4 + 39) < 0)
      {
        v7 = (char *)v4[2];
        v8 = v4[3];
        v9 = &v7[v8];
        if (v8 < 6)
          goto LABEL_21;
      }
      else
      {
        v7 = (char *)(v4 + 2);
        v8 = *((unsigned __int8 *)v4 + 39);
        v9 = (char *)v5 + v6;
        if ((unint64_t)v8 < 6)
          goto LABEL_21;
      }
      v10 = v7;
      do
      {
        v11 = (char *)memchr(v10, 95, v8 - 5);
        if (!v11)
          break;
        if (*(_DWORD *)v11 == 1868526431 && *((_WORD *)v11 + 2) == 29813)
          goto LABEL_22;
        v10 = v11 + 1;
        v8 = v9 - (_BYTE *)v10;
      }
      while (v9 - (_BYTE *)v10 > 5);
LABEL_21:
      v11 = v9;
LABEL_22:
      if (v11 == v9 || v11 - v7 == -1 || !v4[5])
        goto LABEL_8;
      if ((v6 & 0x80) != 0)
      {
        v5 = (uint64_t *)v4[2];
        v6 = v4[3];
      }
      v13 = (uint64_t)v5 + v6 - 4;
      v14 = v6 - 4;
      if ((unint64_t)(v6 - 4) >= 0x7FFFFFFFFFFFFFF8)
        sub_19C07C774();
      if (v14 > 0x16)
      {
        v23 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v23 = v14 | 7;
        v24 = v23 + 1;
        p_p = (char *)operator new(v23 + 1);
        *((_QWORD *)&__p + 1) = v6 - 4;
        v36 = v24 | 0x8000000000000000;
        *(_QWORD *)&__p = p_p;
        if (v5 == (uint64_t *)v13)
        {
LABEL_39:
          v17 = p_p;
          goto LABEL_42;
        }
      }
      else
      {
        HIBYTE(v36) = v6 - 4;
        p_p = (char *)&__p;
        if (v5 == (uint64_t *)v13)
          goto LABEL_39;
      }
      v16 = v6 - 4;
      if ((unint64_t)(v6 - 4) < 0x20 || (unint64_t)(p_p - (char *)v5) < 0x20)
      {
        v17 = p_p;
        v18 = (char *)v5;
        do
        {
LABEL_41:
          v25 = *v18++;
          *v17++ = v25;
        }
        while (v18 != (char *)v13);
        goto LABEL_42;
      }
      v17 = &p_p[v16 & 0xFFFFFFFFFFFFFFE0];
      v18 = (char *)v5 + (v16 & 0xFFFFFFFFFFFFFFE0);
      v19 = (__int128 *)(v5 + 2);
      v20 = p_p + 16;
      v21 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_41;
LABEL_42:
      *v17 = 0;
      v27 = v4[16];
      v28 = v4[17];
      v29 = v4[19];
      v34[0] = v4[15];
      v26 = v34[0];
      v34[1] = v27;
      v34[2] = v28;
      v34[3] = 1;
      v34[4] = v29;
      sub_19C187658((uint64_t)v3, &__p, (uint64_t)v34);
      sub_19C187604(v3, &__p, (char *)(v4[5] + 4 * v26 * (int)v27 * (int)v28 * (int)v29 * v33), 4 * v26 * (int)v27 * (int)v28 * (int)v29);
      if (SHIBYTE(v36) < 0)
        operator delete((void *)__p);
LABEL_8:
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_6;
    }
  }
  return Mutable;
}

void sub_19C07E7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C07E7F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t *v6;
  __int128 v7;
  void *__p[2];
  char v9;
  void **v10;

  sub_19C22E3BC(a1, a2, (uint64_t)__p);
  v5 = v9;
  if (v9 < 0)
  {
    if (__p[1])
    {
LABEL_3:
      v10 = __p;
      v6 = sub_19C0803AC(a1 + 440, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v10);
      v7 = *(_OWORD *)(v6 + 7);
      *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
      *(_OWORD *)(a3 + 16) = v7;
      *(_QWORD *)(a3 + 32) = v6[9];
      if ((v9 & 0x80) == 0)
        return;
LABEL_7:
      operator delete(__p[0]);
      return;
    }
  }
  else if (v9)
  {
    goto LABEL_3;
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v5 < 0)
    goto LABEL_7;
}

void sub_19C07E89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C07E8B8(uint64_t a1)
{
  uint64_t context;
  uint64_t *v3;
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  void **v17;
  void **v18;
  void *v19;
  std::runtime_error *v21;
  std::runtime_error *v22;
  std::runtime_error *exception;
  const char *v24;
  void *v25;
  void *__p;
  void **v27;
  uint64_t v28;
  void *v29;
  void **v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  context = espresso_create_context();
  *(_QWORD *)(a1 + 280) = context;
  if (context)
  {
    *(_QWORD *)(a1 + 272) = espresso_create_plan();
    if (espresso_plan_add_network())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      espresso_plan_get_error_info();
      std::runtime_error::runtime_error(exception, v24);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (espresso_plan_set_priority())
    {
      v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "unable to set priority on espresso plan with ANE_RUNTIME");
LABEL_52:
      __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  if (*(_DWORD *)(a1 + 264) == -1 || !*(_QWORD *)(a1 + 256))
  {
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "unable to load model");
    goto LABEL_52;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  __p = 0;
  v27 = 0;
  v28 = 0;
  c_network_get_input_names();
  c_network_get_output_names();
  v25 = (void *)(*(_QWORD *)(a1 + 8) + 32);
  v3 = sub_19C0803AC(a1 + 440, (uint64_t)v25, (uint64_t)&unk_19C27ADD0, (__int128 **)&v25);
  v4 = v3[7];
  LODWORD(v25) = v3[8];
  LODWORD(v34) = v4;
  sub_19C07FF3C("batchsize=", (uint64_t)&v25, ",seqlen=");
  v5 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v32;
  *(_QWORD *)(a1 + 312) = v33;
  espresso_network_select_configuration();
  if (espresso_plan_build())
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Failed to build espresso plan");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6 != (_QWORD *)(a1 + 16))
  {
    while (!espresso_network_bind_buffer())
    {
      sub_19C080EFC(a1 + 320, (uint64_t)(v6 + 4), (uint64_t)(v6 + 4), (uint64_t)&v32);
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
      if (v8 == (_QWORD *)(a1 + 16))
        goto LABEL_19;
    }
LABEL_29:
    v13 = 0;
    v14 = (void **)__p;
    if (!__p)
      goto LABEL_39;
    goto LABEL_32;
  }
LABEL_19:
  v10 = *(_QWORD **)(a1 + 32);
  if (v10 != (_QWORD *)(a1 + 40))
  {
    while (!espresso_network_bind_buffer())
    {
      sub_19C080EFC(a1 + 360, (uint64_t)(v10 + 4), (uint64_t)(v10 + 4), (uint64_t)&v32);
      v11 = (_QWORD *)v10[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v10[2];
          v9 = *v12 == (_QWORD)v10;
          v10 = v12;
        }
        while (!v9);
      }
      v10 = v12;
      if (v12 == (_QWORD *)(a1 + 40))
        goto LABEL_31;
    }
    goto LABEL_29;
  }
LABEL_31:
  v13 = 1;
  v14 = (void **)__p;
  if (!__p)
    goto LABEL_39;
LABEL_32:
  v15 = v27;
  v16 = v14;
  if (v27 != v14)
  {
    do
    {
      if (*((char *)v15 - 1) < 0)
        operator delete(*(v15 - 3));
      v15 -= 3;
    }
    while (v15 != v14);
    v16 = __p;
  }
  v27 = v14;
  operator delete(v16);
LABEL_39:
  v17 = (void **)v29;
  if (v29)
  {
    v18 = v30;
    v19 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v18 - 1) < 0)
          operator delete(*(v18 - 3));
        v18 -= 3;
      }
      while (v18 != v17);
      v19 = v29;
    }
    v30 = v17;
    operator delete(v19);
  }
  return v13;
}

uint64_t sub_19C07F0A4(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4)
{
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  void *v19;
  uint64_t *v20;
  __int128 *v22[3];
  void *__p[2];
  char v24;
  void **v25;

  sub_19C22E3BC(a1, a3, (uint64_t)__p);
  *(_DWORD *)(a1 + 56) = *((_QWORD *)a4 + 3);
  v22[0] = (__int128 *)__p;
  v7 = sub_19C0803AC(a1 + 440, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, v22);
  v8 = *a4;
  v9 = a4[1];
  v7[9] = *((_QWORD *)a4 + 4);
  *(_OWORD *)(v7 + 7) = v9;
  *(_OWORD *)(v7 + 5) = v8;
  v10 = a1 + 400;
  v22[0] = (__int128 *)__p;
  v11 = sub_19C080A24(v10, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, v22);
  v12 = (*(_DWORD *)a4
                     * *((_DWORD *)a4 + 2)
                     * *((_DWORD *)a4 + 4)
                     * *((_DWORD *)a4 + 6)
                     * *((_DWORD *)a4 + 8));
  v13 = (int)v12;
  if ((int)v12 > (unint64_t)((v11[6] - v11[5]) >> 2))
  {
    v14 = v12 << 32;
    memset(v22, 0, sizeof(v22));
    if ((v14 & 0x8000000000000000) != 0)
      sub_19C07DA0C();
    v15 = v14 >> 30;
    v16 = (char *)operator new(v14 >> 30);
    bzero(v16, v15 & 0x3FFFFFFFCLL);
    v25 = __p;
    v17 = sub_19C080A24(v10, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v25);
    v18 = &v16[4 * v13];
    v19 = (void *)v17[5];
    if (v19)
    {
      v17[6] = (uint64_t)v19;
      operator delete(v19);
      v17[5] = 0;
      v17[6] = 0;
      v17[7] = 0;
    }
    v17[5] = (uint64_t)v16;
    v17[6] = (uint64_t)v18;
    v17[7] = (uint64_t)v18;
  }
  v22[0] = (__int128 *)__p;
  v20 = sub_19C080A24(v10, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, v22);
  memcpy((void *)v20[5], a2, 4 * *(_DWORD *)a4 * *((_DWORD *)a4 + 2) * *((_DWORD *)a4 + 4) * *((_DWORD *)a4 + 6) * *((_DWORD *)a4 + 8));
  if (v24 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_19C07F280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  operator delete(v17);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C07F2D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  void **v8;

  sub_19C22E3BC(a1, a2, (uint64_t)__p);
  v8 = __p;
  v3 = sub_19C0803AC(a1 + 440, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v8);
  v4 = v3[5];
  if ((v7 & 0x80000000) == 0)
    return v3[5];
  operator delete(__p[0]);
  return v4;
}

void sub_19C07F354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C07F370(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  void **v8;

  sub_19C22E6B8(a1, a2, (uint64_t)__p);
  v8 = __p;
  v3 = sub_19C0803AC(a1 + 480, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v8);
  v4 = v3[5];
  if ((v7 & 0x80000000) == 0)
    return v3[5];
  operator delete(__p[0]);
  return v4;
}

void sub_19C07F3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C07F408(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  std::string *p_str;
  void **v12;
  uint64_t v13;
  uint64_t i;
  void **v15;
  uint64_t v16;
  uint64_t j;
  CFIndex v18;
  const void **v19;
  const void *ValueAtIndex;
  const void **v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  void *v37;
  uint64_t *v38;
  const void **v39;
  const void **v40;
  BOOL v41;
  void **v42;
  void **v43;
  uint64_t *k;
  void *v45;
  const void *v46;
  uint64_t *v47;
  _BOOL4 v48;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  std::runtime_error *v56;
  std::runtime_error *exception;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  std::string __str;
  __int128 *v72;

  v2 = a1;
  v3 = a1 + 440;
  v65 = (__int128 *)(*(_QWORD *)(a1 + 8) + 32);
  v4 = sub_19C0803AC(a1 + 440, (uint64_t)v65, (uint64_t)&unk_19C27ADD0, &v65);
  v5 = v4[7];
  LODWORD(v65) = v4[8];
  LODWORD(v63) = v5;
  sub_19C07FF3C("batchsize=", (uint64_t)&v65, ",seqlen=");
  v6 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v8 = *(unsigned __int8 *)(v2 + 319);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(v2 + 304);
  if (size == v8)
  {
    if (v9 >= 0)
      v10 = (unsigned __int8 *)(v2 + 296);
    else
      v10 = *(unsigned __int8 **)(v2 + 296);
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(__str.__r_.__value_.__l.__data_, v10, __str.__r_.__value_.__l.__size_))
        goto LABEL_31;
    }
    else
    {
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        goto LABEL_31;
      p_str = &__str;
      while (p_str->__r_.__value_.__s.__data_[0] == *v10)
      {
        p_str = (std::string *)((char *)p_str + 1);
        ++v10;
        if (!--v6)
          goto LABEL_31;
      }
    }
  }
  std::string::operator=((std::string *)(v2 + 296), &__str);
  if (espresso_plan_build_clean())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to clean espresso plan");
    goto LABEL_101;
  }
  espresso_network_select_configuration();
  if (espresso_plan_build())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to build espresso plan");
LABEL_101:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_QWORD *)(v2 + 344))
  {
    v12 = *(void ***)(v2 + 336);
    if (v12)
    {
      do
      {
        v42 = (void **)*v12;
        if (*((char *)v12 + 39) < 0)
          operator delete(v12[2]);
        operator delete(v12);
        v12 = v42;
      }
      while (v42);
    }
    *(_QWORD *)(v2 + 336) = 0;
    v13 = *(_QWORD *)(v2 + 328);
    if (v13)
    {
      for (i = 0; i != v13; ++i)
        *(_QWORD *)(*(_QWORD *)(v2 + 320) + 8 * i) = 0;
    }
    *(_QWORD *)(v2 + 344) = 0;
  }
  if (*(_QWORD *)(v2 + 384))
  {
    v15 = *(void ***)(v2 + 376);
    if (v15)
    {
      do
      {
        v43 = (void **)*v15;
        if (*((char *)v15 + 39) < 0)
          operator delete(v15[2]);
        operator delete(v15);
        v15 = v43;
      }
      while (v43);
    }
    *(_QWORD *)(v2 + 376) = 0;
    v16 = *(_QWORD *)(v2 + 368);
    if (v16)
    {
      for (j = 0; j != v16; ++j)
        *(_QWORD *)(*(_QWORD *)(v2 + 360) + 8 * j) = 0;
    }
    *(_QWORD *)(v2 + 384) = 0;
  }
LABEL_31:
  if (!*(_QWORD *)(v2 + 344))
  {
    v50 = *(_QWORD **)(v2 + 8);
    if (v50 != (_QWORD *)(v2 + 16))
    {
      while (!espresso_network_bind_buffer())
      {
        sub_19C080EFC(v2 + 320, (uint64_t)(v50 + 4), (uint64_t)(v50 + 4), (uint64_t)&v65);
        if (v70 != *(_DWORD *)(v2 + 56))
        {
          v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v56, "new config does not bind to new input shape");
          __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v51 = (_QWORD *)v50[1];
        if (v51)
        {
          do
          {
            v52 = v51;
            v51 = (_QWORD *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            v52 = (_QWORD *)v50[2];
            v41 = *v52 == (_QWORD)v50;
            v50 = v52;
          }
          while (!v41);
        }
        v50 = v52;
        if (v52 == (_QWORD *)(v2 + 16))
          goto LABEL_32;
      }
LABEL_95:
      v48 = 1;
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return !v48;
      goto LABEL_72;
    }
  }
LABEL_32:
  v61 = v2;
  if (!*(_QWORD *)(v2 + 384))
  {
    v53 = *(_QWORD **)(v2 + 32);
    if (v53 != (_QWORD *)(v2 + 40))
    {
      while (!espresso_network_bind_buffer())
      {
        sub_19C080EFC(v2 + 360, (uint64_t)(v53 + 4), (uint64_t)(v53 + 4), (uint64_t)&v65);
        v54 = (_QWORD *)v53[1];
        if (v54)
        {
          do
          {
            v55 = v54;
            v54 = (_QWORD *)*v54;
          }
          while (v54);
        }
        else
        {
          do
          {
            v55 = (_QWORD *)v53[2];
            v41 = *v55 == (_QWORD)v53;
            v53 = v55;
          }
          while (!v41);
        }
        v53 = v55;
        if (v55 == (_QWORD *)(v2 + 40))
          goto LABEL_33;
      }
      goto LABEL_95;
    }
  }
LABEL_33:
  v58 = v2 + 320;
  v59 = v3;
  if (a2 && *(int *)(v2 + 56) >= 1)
  {
    v18 = 0;
    v19 = (const void **)(v2 + 16);
    v62 = v2 + 400;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v18);
      v21 = *(const void ***)(v2 + 8);
      if (v21 != v19)
        break;
LABEL_36:
      if (++v18 >= *(int *)(v2 + 56))
        goto LABEL_69;
    }
    v22 = (uint64_t)ValueAtIndex + 16;
    while (1)
    {
      if (*((char *)v21 + 55) < 0)
      {
        v24 = (char *)v21[4];
        v23 = (uint64_t)v21[5];
        if (v23 >= 2)
        {
LABEL_44:
          v25 = &v24[v23];
          v26 = v24;
          do
          {
            v27 = (char *)memchr(v26, 95, v23 - 1);
            if (!v27)
              break;
            if (*(_WORD *)v27 == 29535)
            {
              if (v27 != v25 && v27 - v24 != -1)
              {
                v28 = sub_19C18731C(v22, v21 + 4);
                sub_19C187458(v22, v21 + 4, (uint64_t)&v65);
                *(_QWORD *)&v63 = v21 + 4;
                v29 = sub_19C080A24(v62, (uint64_t)(v21 + 4), (uint64_t)&unk_19C27ADD0, (__int128 **)&v63);
                v30 = ((_DWORD)v65 * v66 * v67 * v68 * v69);
                v31 = *(int *)(v2 + 56);
                v32 = (int)v31 * (uint64_t)(int)v30;
                if (v32 > (v29[6] - v29[5]) >> 2)
                {
                  v63 = 0uLL;
                  v64 = 0;
                  if (v32 >> 62)
                    sub_19C07DA0C();
                  v33 = (char *)operator new(4 * v32);
                  v34 = v30 << 32;
                  v35 = &v33[4 * v32];
                  *(_QWORD *)&v63 = v33;
                  v64 = (uint64_t)v35;
                  bzero(v33, ((v34 >> 30) * v31) & 0xFFFFFFFFFFFFFFFCLL);
                  *((_QWORD *)&v63 + 1) = v35;
                  v72 = (__int128 *)(v21 + 4);
                  v36 = sub_19C080A24(v62, (uint64_t)(v21 + 4), (uint64_t)&unk_19C27ADD0, &v72);
                  v37 = (void *)v36[5];
                  if (v37)
                  {
                    v36[6] = (uint64_t)v37;
                    operator delete(v37);
                  }
                  *(_OWORD *)(v36 + 5) = v63;
                  v36[7] = v64;
                }
                *(_QWORD *)&v63 = v21 + 4;
                v38 = sub_19C080A24(v62, (uint64_t)(v21 + 4), (uint64_t)&unk_19C27ADD0, (__int128 **)&v63);
                v2 = v61;
                memcpy((void *)(v38[5] + 4 * (int)v65 * v66 * v67 * v68 * v69 * v18), v28, 4 * (int)v65 * v66 * v67 * v68 * v69);
              }
              break;
            }
            v26 = v27 + 1;
            v23 = v25 - (_BYTE *)v26;
          }
          while (v25 - (_BYTE *)v26 >= 2);
        }
      }
      else
      {
        v23 = *((unsigned __int8 *)v21 + 55);
        v24 = (char *)(v21 + 4);
        if ((unint64_t)v23 >= 2)
          goto LABEL_44;
      }
      v39 = (const void **)v21[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (const void **)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (const void **)v21[2];
          v41 = *v40 == v21;
          v21 = v40;
        }
        while (!v41);
      }
      v21 = v40;
      if (v40 == v19)
        goto LABEL_36;
    }
  }
LABEL_69:
  for (k = *(uint64_t **)(v2 + 416); k; k = (uint64_t *)*k)
  {
    v65 = (__int128 *)(k + 2);
    v45 = (void *)sub_19C0813B8(v58, (uint64_t)(k + 2), (uint64_t)&unk_19C27ADD0, &v65)[5];
    v46 = (const void *)k[5];
    v65 = (__int128 *)(k + 2);
    v47 = sub_19C0803AC(v59, (uint64_t)(k + 2), (uint64_t)&unk_19C27ADD0, &v65);
    memcpy(v45, v46, 4* *((_DWORD *)v47 + 10)* *((_DWORD *)v47 + 12)* *((_DWORD *)v47 + 14)* *((_DWORD *)v47 + 16)* *((_DWORD *)v47 + 18));
  }
  v48 = espresso_plan_execute_sync() != 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
LABEL_72:
    operator delete(__str.__r_.__value_.__l.__data_);
  return !v48;
}

void sub_19C07FB50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;
  uint64_t v17;

  __cxa_free_exception(v16);
  if (*(char *)(v17 - 105) < 0)
    operator delete(*(void **)(v17 - 128));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C07F948);
}

uint64_t sub_19C07FBE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  void **v8;

  sub_19C22E6B8(a1, a2, (uint64_t)__p);
  v8 = __p;
  v3 = sub_19C0813B8(a1 + 360, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v8);
  v4 = v3[5];
  if ((v7 & 0x80000000) == 0)
    return v3[5];
  operator delete(__p[0]);
  return v4;
}

void sub_19C07FC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C07FC7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  __int128 v7;
  void *__p[2];
  char v9;
  void **v10;

  sub_19C22E6B8(a1, a2, (uint64_t)__p);
  v5 = (_QWORD *)(a1 + 480);
  if (sub_19C080120(v5, (uint64_t)__p))
  {
    v10 = __p;
    v6 = sub_19C0803AC((uint64_t)v5, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v10);
    v7 = *(_OWORD *)(v6 + 7);
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
    *(_OWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 32) = v6[9];
    if ((v9 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(__p[0]);
    return;
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v9 < 0)
    goto LABEL_5;
}

void sub_19C07FD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C07FD48(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void **v5;
  uint64_t v6;
  uint64_t j;
  char *v8;
  uint64_t v9;
  uint64_t k;
  void **v11;
  void **v12;
  char *v13;
  void *v14;

  if (a1[48])
  {
    v2 = (void **)a1[47];
    if (v2)
    {
      do
      {
        v11 = (void **)*v2;
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v11;
      }
      while (v11);
    }
    a1[47] = 0;
    v3 = a1[46];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(a1[45] + 8 * i) = 0;
    }
    a1[48] = 0;
  }
  if (a1[43])
  {
    v5 = (void **)a1[42];
    if (v5)
    {
      do
      {
        v12 = (void **)*v5;
        if (*((char *)v5 + 39) < 0)
          operator delete(v5[2]);
        operator delete(v5);
        v5 = v12;
      }
      while (v12);
    }
    a1[42] = 0;
    v6 = a1[41];
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *(_QWORD *)(a1[40] + 8 * j) = 0;
    }
    a1[43] = 0;
  }
  if (a1[53])
  {
    v8 = (char *)a1[52];
    if (v8)
    {
      do
      {
        v13 = *(char **)v8;
        v14 = (void *)*((_QWORD *)v8 + 5);
        if (v14)
        {
          *((_QWORD *)v8 + 6) = v14;
          operator delete(v14);
        }
        if (v8[39] < 0)
          operator delete(*((void **)v8 + 2));
        operator delete(v8);
        v8 = v13;
      }
      while (v13);
    }
    a1[52] = 0;
    v9 = a1[51];
    if (v9)
    {
      for (k = 0; k != v9; ++k)
        *(_QWORD *)(a1[50] + 8 * k) = 0;
    }
    a1[53] = 0;
  }
}

void sub_19C07FE9C()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot declare runtime output on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19C07FED8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C07FEEC()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "no supported");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19C07FF28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C07FF3C(const char *a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v15;
  uint64_t v16[8];
  void *__p[2];
  __int128 v18;
  int v19;
  uint64_t v20[20];

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v20[0] = MEMORY[0x1E0DE4FE0] + 64;
  v15 = v8;
  *(uint64_t *)((char *)&v16[-1] + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24));
  std::ios_base::init(v10, v16);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v15 = v5 + 24;
  v20[0] = v6;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  v19 = 16;
  v12 = strlen(a1);
  sub_19C07DCDC(&v15, (uint64_t)a1, v12);
  std::ostream::operator<<();
  v13 = strlen(a3);
  sub_19C07DCDC(&v15, (uint64_t)a3, v13);
  std::ostream::operator<<();
  std::stringbuf::str();
  v15 = *v7;
  *(uint64_t *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24)) = v7[3];
  v16[0] = v11 + 16;
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD1C08](v20);
}

void sub_19C0800C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C07DC58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C0800D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C080120(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char v27;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C07D2D0((uint64_t)&v27, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v22 = v13[1];
          if (v8 == v22)
          {
            v23 = *((unsigned __int8 *)v13 + 39);
            if ((v23 & 0x80u) == 0)
              v24 = *((unsigned __int8 *)v13 + 39);
            else
              v24 = v13[3];
            if (v24 == v15)
            {
              v25 = (const void **)(v13 + 2);
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp(*v25, v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                for (i = v2; *(unsigned __int8 *)v25 == *i; ++i)
                {
                  v25 = (const void **)((char *)v25 + 1);
                  if (!--v23)
                    return v13;
                }
              }
            }
          }
          else if ((v22 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            v20 = (const void **)(v13 + 2);
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp(*v20, v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              for (j = v2; *(unsigned __int8 *)v20 == *j; ++j)
              {
                v20 = (const void **)((char *)v20 + 1);
                if (!--v18)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t sub_19C080354()
{
  uint64_t result;

  qword_1EE4188F8 = 0;
  unk_1EE418900 = "MontrealNeuralNetworkState";
  qword_1EE418908 = 0;
  unk_1EE418910 = 0;
  qword_1EE418918 = (uint64_t)sub_19C0803A4;
  unk_1EE418920 = 0u;
  unk_1EE418930 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE418958 = result;
  return result;
}

uint64_t sub_19C0803A4(uint64_t a1)
{
  return sub_19C1872E4(a1 + 16);
}

uint64_t *sub_19C0803AC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  char *v28;
  _BYTE *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_19C07D2D0((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (char *)operator new(0x50uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v11;
  v29 = v28 + 16;
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19C07C6E8(v29, *(void **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v30 + 2);
    *(_OWORD *)v29 = v31;
  }
  *((_QWORD *)v28 + 9) = 0;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        sub_19C07D71C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19C080804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080830((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C080818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080830((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C080830(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_19C08087C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    do
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_26;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        return (uint64_t *)v10;
      v5 = v10[1];
    }
    while (v5);
    v6 = v10 + 1;
LABEL_26:
    v22 = (uint64_t *)operator new(0x38uLL);
    v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_29;
  }
  else
  {
    v10 = a1 + 1;
    v22 = (uint64_t *)operator new(0x38uLL);
    v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_19C07C6E8(v23, *(void **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v23[2] = *(_QWORD *)(a3 + 16);
LABEL_30:
  *v22 = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)v10;
  *v6 = v22;
  v24 = (uint64_t *)**a1;
  v25 = v22;
  if (v24)
  {
    *a1 = v24;
    v25 = *v6;
  }
  sub_19C07CC40(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_19C080A10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C080A24(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  _BYTE *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_19C07D2D0((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = v28 + 2;
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19C07C6E8(v29, *(void **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)v29 = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v28[7] = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        sub_19C07D71C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19C080E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080EA0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C080E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080EA0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C080EA0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 40);
      if (v3)
      {
        *(_QWORD *)(v2 + 48) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_19C080EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  char *v29;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float v36;
  float v37;
  _QWORD *v38;
  _QWORD *v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  size_t prime;
  int8x8_t v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD v51[2];
  char v52;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = sub_19C07D2D0((uint64_t)v51, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = (char *)operator new(0xD0uLL);
  v51[0] = v29;
  v51[1] = a1 + 16;
  v52 = 0;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = v12;
  v30 = v29 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C07C6E8(v30, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v30 = *(_OWORD *)a3;
    *((_QWORD *)v29 + 4) = *(_QWORD *)(a3 + 16);
  }
  v31 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v29 + 152) = *(_OWORD *)(a4 + 112);
  v32 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v29 + 168) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v29 + 184) = v32;
  v33 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v29 + 88) = *(_OWORD *)(a4 + 48);
  v34 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v29 + 104) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v29 + 120) = v34;
  *(_OWORD *)(v29 + 136) = v31;
  v35 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v29 + 40) = *(_OWORD *)a4;
  *((_QWORD *)v29 + 25) = *(_QWORD *)(a4 + 160);
  *(_OWORD *)(v29 + 56) = v35;
  *(_OWORD *)(v29 + 72) = v33;
  v52 = 1;
  v36 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v37 = *(float *)(a1 + 32);
  if (!v13 || (float)(v37 * (float)v13) < v36)
  {
    v40 = v13 < 3 || (v13 & (v13 - 1)) != 0;
    v41 = v40 | (2 * v13);
    v42 = vcvtps_u32_f32(v36 / v37);
    if (v41 <= v42)
      prime = v42;
    else
      prime = v41;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v44 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v44)
      goto LABEL_69;
    if (prime < *(_QWORD *)&v44)
    {
      v45 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v44 < 3uLL || (v46 = (uint8x8_t)vcnt_s8(v44), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        v45 = std::__next_prime(v45);
      }
      else
      {
        v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2)
          v45 = v47;
      }
      if (prime <= v45)
        prime = v45;
      if (prime < *(_QWORD *)&v44)
LABEL_69:
        sub_19C07D71C(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v48 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        v39 = (_QWORD *)v51[0];
        if (v38)
          goto LABEL_57;
      }
      else
      {
        v4 = v12;
        v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        v39 = (_QWORD *)v51[0];
        if (v38)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v48 & v12;
      v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v48 & v12));
      v39 = (_QWORD *)v51[0];
      if (v38)
        goto LABEL_57;
    }
LABEL_82:
    *v39 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v51[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v51[0])
    {
      v49 = *(_QWORD *)(*(_QWORD *)v51[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v49 >= v13)
          v49 %= v13;
      }
      else
      {
        v49 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = v51[0];
    }
    goto LABEL_93;
  }
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v39 = (_QWORD *)v51[0];
  if (!v38)
    goto LABEL_82;
LABEL_57:
  *v39 = *v38;
  *v38 = v51[0];
LABEL_93:
  v16 = (uint64_t *)v51[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_19C08138C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080830((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C0813A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080830((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C0813B8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  char *v28;
  _BYTE *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_19C07D2D0((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (char *)operator new(0xD0uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v11;
  v29 = v28 + 16;
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_19C07C6E8(v29, *(void **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v30 + 2);
    *(_OWORD *)v29 = v31;
  }
  *((_QWORD *)v28 + 25) = 0;
  *(_OWORD *)(v28 + 184) = 0u;
  *(_OWORD *)(v28 + 168) = 0u;
  *(_OWORD *)(v28 + 152) = 0u;
  *(_OWORD *)(v28 + 136) = 0u;
  *(_OWORD *)(v28 + 120) = 0u;
  *(_OWORD *)(v28 + 104) = 0u;
  *(_OWORD *)(v28 + 88) = 0u;
  *(_OWORD *)(v28 + 72) = 0u;
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        sub_19C07D71C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19C081830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080830((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C081844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C080830((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MRLNeuralNetworkCopyEvaluationResults(uint64_t a1, void *a2, void *a3, CFErrorRef *a4)
{
  unint64_t OutputDimension;
  size_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const void *v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  float *v57;
  float *v58;
  float v59;
  uint64_t v60;
  float *v61;
  float v62;
  BOOL v63;
  unint64_t v64;
  map<unsigned int, std::map<unsigned int, unsigned int>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::map<unsigned int, unsigned int>>>> *p_confusionMatrix;
  void *left;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *p_pair1;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *v68;
  unsigned int v69;
  char *v70;
  _QWORD *v71;
  uint64_t *v72;
  void *v73;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *v74;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *v75;
  unsigned int v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  CFTypeRef v81;
  uint64_t v82;
  const __CFString *v84;
  uint64_t (**v87)(id, _BYTE *);
  _QWORD *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  id v92;
  uint64_t Output;
  uint64_t v94;
  void *v95;
  MLPInferenceResult *v96;
  void *v97;
  char v98;
  CFTypeRef v99;

  v87 = a3;
  v96 = objc_alloc_init(MLPInferenceResult);
  v88 = (_QWORD *)a1;
  OutputDimension = MRLNeuralNetworkGetOutputDimension(a1, 0);
  v91 = 0;
  v99 = 0;
  v84 = CFSTR("SequenceLength");
  v6 = 4 * OutputDimension;
  while (1)
  {
    v98 = 0;
    v7 = (void *)v87[2](v87, &v98);
    if (v98)
    {
      sub_19C0902A8(v96, v91, OutputDimension);
      v80 = objc_claimAutoreleasedReturnValue();
      v81 = v99;
      if (!v99)
        goto LABEL_55;
      goto LABEL_54;
    }
    v10 = v7;
    v90 = v7;
    objc_msgSend_exMRL_dataForKey_(v7, v8, (uint64_t)CFSTR("MRLNeuralNetworkEvaluateInputDataKey"), v9);
    v92 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_exMRL_arrayForKey_(v10, v11, (uint64_t)CFSTR("MRLNeuralNetworkEvaluateOutputLabelKey"), v12);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_length(v92, v13, v14, v15))
    {
      if (!a4)
        goto LABEL_53;
      objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v16, (uint64_t)MRLNeuralNetworkErrorDomain, 1, 0);
      v82 = objc_claimAutoreleasedReturnValue();
      goto LABEL_52;
    }
    if (!objc_msgSend_count(v95, v16, v17, v18))
      break;
    v94 = objc_msgSend_count(v95, v19, v20, v21);
    v22 = a2;
    v89 = v22;
    if (a2)
    {
      v26 = (void *)objc_msgSend_mutableCopy(v22, v23, v24, v25);
      objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v27, v94, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v26, v30, (uint64_t)v29, (uint64_t)v84);

      v31 = (const void *)MRLNeuralNetworkTensorCreate(v26);
      if (v99)
        CFRelease(v99);
      v99 = v31;
      v32 = objc_retainAutorelease(v92);
      v36 = (char *)objc_msgSend_bytes(v32, v33, v34, v35);
      v40 = objc_msgSend_length(v32, v37, v38, v39);
      MRLNeuralNetworkTensorAppendData((uint64_t)v31, v36, v40);
      MRLNeuralNetworkSetInputTensor((uint64_t)v88, 0, (uint64_t)v31, a4);

      v41 = (uint64_t)v88;
    }
    else
    {
      v42 = objc_retainAutorelease(v92);
      v46 = objc_msgSend_bytes(v42, v43, v44, v45);
      v41 = (uint64_t)v88;
      MRLNeuralNetworkSetInput(v88, 0, 1, v94, v46, 0);
    }
    MRLNeuralNetworkPredict(v41);
    Output = MRLNeuralNetworkGetOutput(v41, 0);
    if (v94)
    {
      v50 = 0;
      objc_msgSend_objectAtIndexedSubscript_(v95, v47, 0, v49, v84);
      while (1)
      {
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = objc_msgSend_unsignedIntegerValue(v51, v52, v53, v54);

        v97 = 0;
        if (OutputDimension)
        {
          if ((OutputDimension & 0x8000000000000000) != 0)
            sub_19C07DA0C();
          v97 = operator new(v6);
          memcpy(v97, (const void *)(Output + 4 * v50 * OutputDimension), v6);
          v56 = (float *)operator new(v6);
          memcpy(v56, v97, v6);
          v57 = v56;
          if (OutputDimension != 1)
          {
            v58 = v56 + 1;
            v59 = *v56;
            v60 = 4 * OutputDimension - 4;
            v57 = v56;
            v61 = v56 + 1;
            do
            {
              v62 = *v61++;
              v63 = v59 < v62;
              v59 = fmaxf(v59, v62);
              if (v63)
                v57 = v58;
              v58 = v61;
              v60 -= 4;
            }
            while (v60);
          }
          v64 = (unint64_t)((char *)v57 - (char *)v56) >> 2;
          operator delete(v56);
        }
        else
        {
          LODWORD(v64) = 0;
        }
        p_confusionMatrix = &v96->confusionMatrix;
        p_pair1 = &v96->confusionMatrix.__tree_.__pair1_;
        left = v96->confusionMatrix.__tree_.__pair1_.__value_.__left_;
        if (left)
          break;
        v68 = &v96->confusionMatrix.__tree_.__pair1_;
LABEL_31:
        v70 = (char *)operator new(0x40uLL);
        *((_DWORD *)v70 + 8) = v55;
        *((_QWORD *)v70 + 7) = 0;
        *((_QWORD *)v70 + 6) = 0;
        *((_QWORD *)v70 + 5) = v70 + 48;
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v70 + 1) = 0;
        *((_QWORD *)v70 + 2) = v68;
        p_pair1->__value_.__left_ = v70;
        v71 = *(_QWORD **)p_confusionMatrix->__tree_.__begin_node_;
        v72 = (uint64_t *)v70;
        if (v71)
        {
          p_confusionMatrix->__tree_.__begin_node_ = v71;
          v72 = (uint64_t *)p_pair1->__value_.__left_;
        }
        sub_19C07CC40((uint64_t *)v96->confusionMatrix.__tree_.__pair1_.__value_.__left_, v72);
        ++v96->confusionMatrix.__tree_.__pair3_.__value_;
        v74 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *)(v70 + 48);
        v73 = (void *)*((_QWORD *)v70 + 6);
        if (!v73)
          goto LABEL_36;
        while (1)
        {
LABEL_38:
          while (1)
          {
            v75 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *)v73;
            v76 = *((_DWORD *)v73 + 7);
            if (v76 <= v64)
              break;
            v73 = v75->__value_.__left_;
            v74 = v75;
            if (!v75->__value_.__left_)
              goto LABEL_42;
          }
          if (v76 >= v64)
            break;
          v73 = v75[1].__value_.__left_;
          if (!v73)
          {
            v74 = v75 + 1;
            goto LABEL_42;
          }
        }
        v77 = v75;
LABEL_13:
        ++v77[8];
        v96->logLikelihood = v96->logLikelihood + log2f(*((float *)v97 + v55));
        operator delete(v97);
        if (++v50 == v94)
          goto LABEL_45;
        objc_msgSend_objectAtIndexedSubscript_(v95, v47, v50, v49, v84);
      }
      while (1)
      {
        while (1)
        {
          v68 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, std::map<unsigned int, unsigned int>>, void *>>> *)left;
          v69 = *((_DWORD *)left + 8);
          if (v69 <= v55)
            break;
          left = v68->__value_.__left_;
          p_pair1 = v68;
          if (!v68->__value_.__left_)
            goto LABEL_31;
        }
        if (v69 >= v55)
          break;
        left = v68[1].__value_.__left_;
        if (!left)
        {
          p_pair1 = v68 + 1;
          goto LABEL_31;
        }
      }
      v70 = (char *)v68;
      v74 = v68 + 6;
      v73 = v68[6].__value_.__left_;
      if (v73)
        goto LABEL_38;
LABEL_36:
      v75 = v74;
LABEL_42:
      v77 = operator new(0x28uLL);
      v77[7] = v64;
      v77[8] = 0;
      *(_QWORD *)v77 = 0;
      *((_QWORD *)v77 + 1) = 0;
      *((_QWORD *)v77 + 2) = v75;
      v74->__value_.__left_ = v77;
      v78 = **((_QWORD **)v70 + 5);
      v79 = (uint64_t *)v77;
      if (v78)
      {
        *((_QWORD *)v70 + 5) = v78;
        v79 = (uint64_t *)v74->__value_.__left_;
      }
      sub_19C07CC40(*((uint64_t **)v70 + 6), v79);
      ++*((_QWORD *)v70 + 7);
      goto LABEL_13;
    }
LABEL_45:
    v91 += objc_msgSend_count(v95, v47, v48, v49, v84);

  }
  if (!a4)
    goto LABEL_53;
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v19, (uint64_t)MRLNeuralNetworkErrorDomain, 2, 0);
  v82 = objc_claimAutoreleasedReturnValue();
LABEL_52:
  *a4 = (CFErrorRef)v82;
LABEL_53:

  v80 = 0;
  v81 = v99;
  if (!v99)
    goto LABEL_55;
LABEL_54:
  CFRelease(v81);
LABEL_55:

  return v80;
}

void sub_19C081E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *__p,uint64_t a26)
{
  uint64_t v26;

  sub_19C081F28((const void **)(v26 - 96));
  _Unwind_Resume(a1);
}

const void **sub_19C081F28(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t MRLModelCreate(const __CFDictionary *a1)
{
  const __CFNumber *Value;
  const __CFNumber *v3;
  uint64_t v4;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  char *v8;
  size_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  CFIndex v15;
  CFIndex v16;
  char *v17;
  size_t v18;
  void *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  unint64_t v37;
  void *v38[2];
  unint64_t v39;
  void *__dst[2];
  int64_t v41;
  void *valuePtr[2];
  int64_t v43;

  std::mutex::lock(&stru_1EE418980);
  if (!a1)
    goto LABEL_58;
  if (CFDictionaryContainsKey(a1, (const void *)kMRLModelParametersKey))
  {
    valuePtr[0] = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)kMRLModelParameterSizeKey);
    CFNumberGetValue(Value, kCFNumberIntType, valuePtr);
    __dst[0] = 0;
    v3 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)kMRLModelParametersKey);
    CFNumberGetValue(v3, kCFNumberLongLongType, __dst);
    v4 = operator new();
    sub_19C0A5638(v4, __dst[0], valuePtr[0]);
    goto LABEL_59;
  }
  if (!CFDictionaryContainsKey(a1, (const void *)kMRLModelFileLocationKey))
  {
LABEL_58:
    v4 = 0;
    goto LABEL_59;
  }
  v5 = (const __CFString *)CFDictionaryGetValue(a1, (const void *)kMRLModelFileLocationKey);
  Length = CFStringGetLength(v5);
  v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v8 = (char *)operator new[]();
  CFStringGetCString(v5, v8, v7, 0x8000100u);
  v9 = strlen(v8);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = (void **)operator new(v12 + 1);
    valuePtr[1] = v10;
    v43 = v13 | 0x8000000000000000;
    valuePtr[0] = v11;
    goto LABEL_12;
  }
  HIBYTE(v43) = v9;
  v11 = valuePtr;
  if (v9)
LABEL_12:
    memcpy(v11, v8, (size_t)v10);
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "None", 0);
  if (CFDictionaryContainsKey(a1, (const void *)kMRLModelEmbeddingLocationKey))
    v14 = (const __CFString *)CFDictionaryGetValue(a1, (const void *)kMRLModelEmbeddingLocationKey);
  v15 = CFStringGetLength(v14);
  v16 = CFStringGetMaximumSizeForEncoding(v15, 0x8000100u) + 1;
  v17 = (char *)operator new[]();
  CFStringGetCString(v14, v17, v16, 0x8000100u);
  v18 = strlen(v17);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = (void **)operator new(v21 + 1);
    __dst[1] = v19;
    v41 = v22 | 0x8000000000000000;
    __dst[0] = v20;
    goto LABEL_22;
  }
  HIBYTE(v41) = v18;
  v20 = __dst;
  if (v18)
LABEL_22:
    memcpy(v20, v17, (size_t)v19);
  *((_BYTE *)v19 + (_QWORD)v20) = 0;
  v4 = operator new();
  if (v43 >= 0)
    v23 = (const char *)valuePtr;
  else
    v23 = (const char *)valuePtr[0];
  v24 = strlen(v23);
  if (v24 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v25 = (void *)v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    v26 = operator new(v27 + 1);
    v38[1] = v25;
    v39 = v28 | 0x8000000000000000;
    v38[0] = v26;
    goto LABEL_33;
  }
  HIBYTE(v39) = v24;
  v26 = v38;
  if (v24)
LABEL_33:
    memmove(v26, v23, (size_t)v25);
  *((_BYTE *)v25 + (_QWORD)v26) = 0;
  if (v41 >= 0)
    v29 = (const char *)__dst;
  else
    v29 = (const char *)__dst[0];
  v30 = strlen(v29);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    __p[1] = v31;
    v37 = v34 | 0x8000000000000000;
    __p[0] = v32;
  }
  else
  {
    HIBYTE(v37) = v30;
    v32 = __p;
    if (!v30)
      goto LABEL_45;
  }
  memmove(v32, v29, (size_t)v31);
LABEL_45:
  *((_BYTE *)v31 + (_QWORD)v32) = 0;
  sub_19C0A59A8(v4, v38, __p);
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  CFRelease(v14);
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  operator delete[](v17);
  if (SHIBYTE(v43) < 0)
    operator delete(valuePtr[0]);
  operator delete[](v8);
LABEL_59:
  std::mutex::unlock(&stru_1EE418980);
  return v4;
}

void sub_19C0824EC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

const __CFDictionary *sub_19C082504(const __CFDictionary *result, _DWORD *a2)
{
  const __CFDictionary *v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  uint64_t v8;
  uint64_t valuePtr;

  if (result)
  {
    v3 = result;
    v8 = 0;
    valuePtr = 0;
    if (CFDictionaryContainsKey(result, (const void *)kMRLModelLearningRateKey))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelLearningRateKey);
      CFNumberGetValue(Value, kCFNumberFloatType, (char *)&valuePtr + 4);
      *a2 = HIDWORD(valuePtr);
    }
    if (CFDictionaryContainsKey(v3, (const void *)kMRLModelBeta1Key))
    {
      v5 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelBeta1Key);
      CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
      a2[1] = valuePtr;
    }
    if (CFDictionaryContainsKey(v3, (const void *)kMRLModelBeta2Key))
    {
      v6 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelBeta2Key);
      CFNumberGetValue(v6, kCFNumberFloatType, (char *)&v8 + 4);
      a2[2] = HIDWORD(v8);
    }
    result = (const __CFDictionary *)CFDictionaryContainsKey(v3, (const void *)kMRLModelEstimatorTypeKey);
    if ((_DWORD)result)
    {
      v7 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelEstimatorTypeKey);
      result = (const __CFDictionary *)CFNumberGetValue(v7, kCFNumberSInt32Type, &v8);
      a2[3] = v8;
    }
  }
  return result;
}

const __CFDictionary *sub_19C082608(const __CFDictionary *result, _DWORD *a2)
{
  const __CFDictionary *v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  const __CFNumber *v6;
  int v7;
  uint64_t valuePtr;

  if (result)
  {
    v3 = result;
    valuePtr = 0;
    v7 = 0;
    if (CFDictionaryContainsKey(result, (const void *)kMRLModelHiddenNodesKey))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelHiddenNodesKey);
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      a2[2] = HIDWORD(valuePtr);
    }
    if (CFDictionaryContainsKey(v3, (const void *)kMRLModelInputEncodingKey))
    {
      v5 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelInputEncodingKey);
      CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
      a2[7] = valuePtr;
    }
    result = (const __CFDictionary *)CFDictionaryContainsKey(v3, (const void *)kMRLModelModelConfigKey);
    if ((_DWORD)result)
    {
      v6 = (const __CFNumber *)CFDictionaryGetValue(v3, (const void *)kMRLModelModelConfigKey);
      result = (const __CFDictionary *)CFNumberGetValue(v6, kCFNumberSInt32Type, &v7);
      a2[5] = v7;
    }
  }
  return result;
}

uint64_t MRLModelCompile(int a1, int a2, const __CFDictionary *a3)
{
  const __CFData *Value;
  CFIndex Length;
  const UInt8 *BytePtr;
  uint64_t v9;
  int v10;
  const __CFNumber *v11;
  _DWORD v13[5];
  uint64_t v14;
  int v15;
  _QWORD v16[2];

  std::mutex::lock(&stru_1EE418980);
  v16[0] = 0x3F7D70A43C23D70ALL;
  v16[1] = 1065353199;
  sub_19C082504(a3, v16);
  if (a3 && CFDictionaryContainsKey(a3, (const void *)kMRLModelDataKey))
  {
    Value = (const __CFData *)CFDictionaryGetValue(a3, (const void *)kMRLModelDataKey);
    Length = CFDataGetLength(Value);
    BytePtr = CFDataGetBytePtr(Value);
    v9 = operator new();
    sub_19C0A5E40(v9, BytePtr, Length, v16);
    v13[0] = 2;
  }
  else
  {
    v13[0] = a1;
    v13[1] = a2;
    v13[2] = 256;
    v15 = 1;
    v14 = 0x2000000004;
    sub_19C082608(a3, v13);
    v9 = operator new();
    sub_19C0A5BA0(v9, v13, v16);
    v10 = 2;
    v13[0] = 2;
    if (!a3)
      goto LABEL_8;
  }
  if (CFDictionaryContainsKey(a3, (const void *)kMRLModelNumThreadsKey))
  {
    v11 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)kMRLModelNumThreadsKey);
    CFNumberGetValue(v11, kCFNumberIntType, v13);
    v10 = v13[0];
  }
  else
  {
    v10 = 2;
  }
LABEL_8:
  *(_DWORD *)(v9 + 44) = v10;
  std::mutex::unlock(&stru_1EE418980);
  return v9;
}

void sub_19C08285C(void *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C082838);
}

void sub_19C0828B4(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void MRLModelInitEpoch(uint64_t a1)
{
  std::mutex::lock(&stru_1EE418980);
  ++*(_DWORD *)(a1 + 48);
  sub_19C0AE218(a1);
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C082910(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C082928(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _DWORD *v38;
  unint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  _QWORD *v48;
  void *v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  void *v56;
  int64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void *__p;
  char *v68;
  char *v69;
  void *v70;
  char *v71;
  char *v72;

  if (a4 >= 1)
  {
    v6 = 0;
    v61 = a4;
    while (1)
    {
      v70 = 0;
      v71 = 0;
      v72 = 0;
      __p = 0;
      v68 = 0;
      v69 = 0;
      if (a3 >= 1)
        break;
LABEL_58:
      v48 = *(_QWORD **)(a5 + 8);
      if ((unint64_t)v48 >= *(_QWORD *)(a5 + 16))
      {
        v54 = sub_19C0887DC((char **)a5, (uint64_t)&v70);
        v51 = a6;
      }
      else
      {
        *v48 = 0;
        v48[1] = 0;
        v48[2] = 0;
        v49 = v70;
        v50 = v71 - (_BYTE *)v70;
        v51 = a6;
        if (v71 != v70)
        {
          if (v50 < 0)
            sub_19C07DA0C();
          v52 = (char *)operator new(v71 - (_BYTE *)v70);
          *v48 = v52;
          v48[1] = v52;
          v53 = &v52[4 * (v50 >> 2)];
          v48[2] = v53;
          memcpy(v52, v49, v50);
          v48[1] = v53;
        }
        v54 = (char *)(v48 + 3);
        *(_QWORD *)(a5 + 8) = v48 + 3;
      }
      *(_QWORD *)(a5 + 8) = v54;
      v55 = *(_QWORD **)(v51 + 8);
      if ((unint64_t)v55 >= *(_QWORD *)(v51 + 16))
      {
        v60 = sub_19C0887DC((char **)v51, (uint64_t)&__p);
      }
      else
      {
        *v55 = 0;
        v55[1] = 0;
        v55[2] = 0;
        v56 = __p;
        v57 = v68 - (_BYTE *)__p;
        if (v68 != __p)
        {
          if (v57 < 0)
            sub_19C07DA0C();
          v58 = (char *)operator new(v68 - (_BYTE *)__p);
          *v55 = v58;
          v55[1] = v58;
          v59 = &v58[4 * (v57 >> 2)];
          v55[2] = v59;
          memcpy(v58, v56, v57);
          v55[1] = v59;
        }
        v60 = (char *)(v55 + 3);
        *(_QWORD *)(v51 + 8) = v55 + 3;
      }
      *(_QWORD *)(v51 + 8) = v60;
      if (__p)
      {
        v68 = (char *)__p;
        operator delete(__p);
      }
      if (v70)
      {
        v71 = (char *)v70;
        operator delete(v70);
      }
      if (++v6 == v61)
        return;
    }
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v10 = (int)**(float **)(*(_QWORD *)(a1 + 8 * v6) + 8 * v8);
      if (!v10)
        goto LABEL_8;
      v11 = v71;
      if (v71 < v72)
      {
        *(_DWORD *)v71 = v10;
        v12 = (uint64_t)(v11 + 4);
        goto LABEL_31;
      }
      v13 = (char *)v70;
      v14 = v71 - (_BYTE *)v70;
      v15 = (v71 - (_BYTE *)v70) >> 2;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        goto LABEL_76;
      v17 = v72 - (_BYTE *)v70;
      if ((v72 - (_BYTE *)v70) >> 1 > v16)
        v16 = v17 >> 1;
      v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v16;
      if (v18)
        break;
      v19 = 0;
      v20 = (int *)(4 * v15);
      *(_DWORD *)(4 * v15) = v10;
      v12 = 4 * v15 + 4;
      if (v11 != v13)
        goto LABEL_23;
LABEL_29:
      v70 = v20;
      v71 = (char *)v12;
      v72 = &v19[4 * v18];
      if (v13)
      {
        operator delete(v13);
        v7 = v68;
      }
LABEL_31:
      v71 = (char *)v12;
      v30 = *(_QWORD *)(a2 + 8 * v6);
      if (v7 >= v69)
      {
        v31 = (char *)__p;
        v32 = v7 - (_BYTE *)__p;
        v33 = (v7 - (_BYTE *)__p) >> 2;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62)
LABEL_76:
          sub_19C07DA0C();
        v35 = v69 - (_BYTE *)__p;
        if ((v69 - (_BYTE *)__p) >> 1 > v34)
          v34 = v35 >> 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
          v36 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 >> 62)
LABEL_75:
            sub_19C07C7FC();
          v37 = operator new(4 * v36);
          v38 = &v37[4 * v33];
          *v38 = *(_DWORD *)(v30 + 4 * v8);
          v9 = (uint64_t)(v38 + 1);
          if (v7 == v31)
            goto LABEL_46;
LABEL_43:
          v39 = v7 - 4 - v31;
          if (v39 < 0xBC)
          {
            v40 = v7;
            goto LABEL_45;
          }
          if (&v37[v32 - 4 - (v39 & 0xFFFFFFFFFFFFFFFCLL)] > &v37[v32 - 4])
          {
            v40 = v7;
            goto LABEL_45;
          }
          if (&v7[-(v39 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
          {
            v40 = v7;
            goto LABEL_45;
          }
          if ((unint64_t)(v7 - v37 - v32) < 0x20)
          {
            v40 = v7;
            goto LABEL_45;
          }
          v42 = (v39 >> 2) + 1;
          v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
          v40 = &v7[-v43];
          v38 = (_DWORD *)((char *)v38 - v43);
          v44 = &v37[4 * v33 - 16];
          v45 = v7 - 16;
          v46 = v42 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 8;
          }
          while (v46);
          if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_45:
              v41 = *((_DWORD *)v40 - 1);
              v40 -= 4;
              *--v38 = v41;
            }
            while (v40 != v31);
          }
        }
        else
        {
          v37 = 0;
          v38 = (_DWORD *)(4 * v33);
          *(_DWORD *)(4 * v33) = *(_DWORD *)(v30 + 4 * v8);
          v9 = 4 * v33 + 4;
          if (v7 != v31)
            goto LABEL_43;
        }
LABEL_46:
        __p = v38;
        v68 = (char *)v9;
        v69 = &v37[4 * v36];
        if (v31)
          operator delete(v31);
        goto LABEL_7;
      }
      *(_DWORD *)v7 = *(_DWORD *)(v30 + 4 * v8);
      v9 = (uint64_t)(v7 + 4);
LABEL_7:
      v68 = (char *)v9;
      v7 = (char *)v9;
LABEL_8:
      if (++v8 == a3)
        goto LABEL_58;
    }
    if (v18 >> 62)
      goto LABEL_75;
    v19 = (char *)operator new(4 * v18);
    v20 = (int *)&v19[4 * v15];
    *v20 = v10;
    v12 = (uint64_t)(v20 + 1);
    if (v11 == v13)
      goto LABEL_29;
LABEL_23:
    v21 = v11 - 4 - v13;
    if (v21 < 0x2C)
      goto LABEL_81;
    if ((unint64_t)(v11 - &v19[v14]) < 0x20)
      goto LABEL_81;
    v22 = (v21 >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v24 = &v11[-v23];
    v20 = (int *)((char *)v20 - v23);
    v25 = &v19[4 * v15 - 16];
    v26 = v11 - 16;
    v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28 = *(_OWORD *)v26;
      *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
      *(_OWORD *)v25 = v28;
      v25 -= 32;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    v11 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_81:
      do
      {
        v29 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *--v20 = v29;
      }
      while (v11 != v13);
    }
    goto LABEL_29;
  }
}

void sub_19C082DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  uint64_t v21;
  void *v23;
  void *v24;

  v23 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v23;
    operator delete(v23);
  }
  *(_QWORD *)(a12 + 8) = v21;
  if (__p)
  {
    operator delete(__p);
    v24 = a20;
    if (!a20)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v24 = a20;
    if (!a20)
      goto LABEL_5;
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C082E80(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void MRLModelTrainBatch(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  char *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *__p[2];
  char v27;
  void *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;

  std::mutex::lock(&stru_1EE418980);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 188))
    sub_19C0A6448(a1);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  sub_19C082928(a2, a3, a4, a5, (uint64_t)&v31, (uint64_t)&v28);
  v10 = *(unsigned int *)(a1 + 36);
  v11 = *(unsigned int *)(a1 + 48);
  v12 = sub_19C0AD000(a1, *(unsigned int *)(a1 + 44), *(_DWORD *)(a1 + 64), 0, *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60));
  v27 = 7;
  strcpy((char *)__p, "Train: ");
  LODWORD(v25) = v10;
  sub_19C0AD1A0(a1, &v31, &v28, a5, 0, v11, (uint64_t)__p, v10, v25, v12, 0, 1, 1);
  if (v27 < 0)
    operator delete(__p[0]);
  sub_19C0AD188(a1, v12);
  v13 = (char *)v28;
  if (v28)
  {
    v14 = v29;
    v15 = v28;
    if (v29 != v28)
    {
      v16 = v29;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v14 - 2) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = v28;
    }
    v29 = v13;
    operator delete(v15);
  }
  v19 = (char *)v31;
  if (v31)
  {
    v20 = v32;
    v21 = v31;
    if (v32 != v31)
    {
      v22 = v32;
      do
      {
        v24 = (void *)*((_QWORD *)v22 - 3);
        v22 -= 24;
        v23 = v24;
        if (v24)
        {
          *((_QWORD *)v20 - 2) = v23;
          operator delete(v23);
        }
        v20 = v22;
      }
      while (v22 != v19);
      v21 = v31;
    }
    v32 = v19;
    operator delete(v21);
  }
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C08308C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C0830A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a17 < 0)
    operator delete(__p);
  sub_19C0830E8(&a18);
  sub_19C0830E8(&a21);
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void **sub_19C0830E8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__CFDictionary *MRLModelEvaluate(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  __CFDictionary *Mutable;
  const __CFAllocator *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  uint64_t v29;
  _BYTE valuePtr[4];
  uint64_t v31;
  void *__p[2];
  char v33;
  void *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  std::mutex::lock(&stru_1EE418980);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 188))
    sub_19C0A6448(a1);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  sub_19C082928(a2, a3, a4, a5, (uint64_t)&v37, (uint64_t)&v34);
  v33 = 10;
  strcpy((char *)__p, "Evaluate: ");
  v10 = sub_19C0A6834(a1);
  LODWORD(v29) = v10;
  sub_19C0AD908(a1, &v37, &v34, a5, 1, 0, (uint64_t)__p, v10, v29, (uint64_t)valuePtr);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &v31);
  v14 = CFNumberCreate(v12, kCFNumberIntType, valuePtr);
  v15 = CFNumberCreate(v12, kCFNumberFloatType, (char *)&v31 + 4);
  CFDictionaryAddValue(Mutable, (const void *)kMRLModelErrorRateKey, v13);
  CFDictionaryAddValue(Mutable, (const void *)kMRLModelErrorCountKey, v14);
  CFDictionaryAddValue(Mutable, (const void *)kMRLModelLogProbabilityKey, v15);
  CFRelease(v13);
  CFRelease(v14);
  CFRelease(v15);
  if (v33 < 0)
    operator delete(__p[0]);
  v16 = (char *)v34;
  if (v34)
  {
    v17 = v35;
    v18 = v34;
    if (v35 != v34)
    {
      v19 = v35;
      do
      {
        v21 = (void *)*((_QWORD *)v19 - 3);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *((_QWORD *)v17 - 2) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v16);
      v18 = v34;
    }
    v35 = v16;
    operator delete(v18);
  }
  v22 = v37;
  if (v37)
  {
    v23 = v38;
    v24 = v37;
    if (v38 != v37)
    {
      v25 = v38;
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v23 - 2) = v26;
          operator delete(v26);
        }
        v23 = v25;
      }
      while (v25 != v22);
      v24 = v37;
    }
    v38 = v22;
    operator delete(v24);
  }
  std::mutex::unlock(&stru_1EE418980);
  return Mutable;
}

void sub_19C0833D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C0833E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20)
{
  uint64_t v20;

  if (a19 < 0)
    operator delete(__p);
  sub_19C0830E8(&a20);
  sub_19C0830E8((void **)(v20 - 72));
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

__CFData *MRLModelCopySerializedData(uint64_t a1)
{
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  FILE *v4;
  int v5;

  std::mutex::lock(&stru_1EE418980);
  Mutable = CFDataCreateMutable(0, 0);
  CFDataIncreaseLength(Mutable, 104857600);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v4 = fmemopen(MutableBytePtr, 0x6400000uLL, "wb");
  v5 = sub_19C0A5E7C(a1, v4);
  CFDataSetLength(Mutable, v5);
  fclose(v4);
  std::mutex::unlock(&stru_1EE418980);
  return Mutable;
}

void sub_19C0834D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C0834E8(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C083500(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C083518(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

__CFData *MRLModelCopyQuantizedSerializedData(uint64_t a1, int a2)
{
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  FILE *v7;
  int v8;

  std::mutex::lock(&stru_1EE418980);
  if (*(_QWORD *)(a1 + 136) != 32 || a2 != 8)
    sub_19C2210D4(42);
  Mutable = CFDataCreateMutable(0, 0);
  CFDataIncreaseLength(Mutable, 104857600);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v7 = fmemopen(MutableBytePtr, 0x6400000uLL, "wb");
  v8 = sub_19C0A5FB4(a1, v7);
  CFDataSetLength(Mutable, v8);
  fclose(v7);
  std::mutex::unlock(&stru_1EE418980);
  return Mutable;
}

void sub_19C0835E4(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C0835FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C083614(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C08362C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C083644(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

uint64_t MRLModelGetOutputSize(uint64_t a1)
{
  uint64_t v2;

  std::mutex::lock(&stru_1EE418980);
  if (!a1)
    sub_19C2210D4(14);
  v2 = (int)sub_19C0A6834(a1);
  std::mutex::unlock(&stru_1EE418980);
  return v2;
}

void sub_19C0836B0(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

uint64_t MRLModelGetInputSize(uint64_t a1)
{
  uint64_t v2;

  std::mutex::lock(&stru_1EE418980);
  v2 = sub_19C0AC478(a1);
  std::mutex::unlock(&stru_1EE418980);
  return v2;
}

void sub_19C08370C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void MRLModelRecognize(uint64_t a1, __int128 *a2, uint64_t a3, float32x4_t *a4, int a5)
{
  unsigned __int8 v10;

  std::mutex::lock(&stru_1EE418980);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (*(_BYTE *)(a1 + 216))
  {
    sub_19C08386C(a1, a2, a3, a4, 0, -1, a5);
  }
  else
  {
    if (a5)
      sub_19C2210D4(201);
    v10 = atomic_load((unsigned __int8 *)&qword_1EE419E58);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419E58))
    {
      qword_1EE419E80 = 0;
      unk_1EE419E88 = 0;
      qword_1EE419E78 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419E78, &dword_19C079000);
      __cxa_guard_release(&qword_1EE419E58);
    }
    sub_19C083B64(a1, a2, a3, a4, 0, (uint64_t)&qword_1EE419E78);
  }
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C083834(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C0837CCLL);
}

void sub_19C083854(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C08386C(uint64_t a1, __int128 *a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, int a6, int a7)
{
  uint64_t v8;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  float32x4_t *v19;
  uint64_t v20;
  size_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  int *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  char *v34;
  void *v35;
  void *__p;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v8 = *(int *)(a1 + 220);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (v8 < a3)
    sub_19C2210D4(90);
  sub_19C0A60F4(a1, (uint64_t)"recognizeSequenceInternalFullBiDir, tokenID - activate all buffer to %d length", v8);
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (a3)
  {
    if (a3 < 0)
      sub_19C07DA0C();
    v15 = operator new(4 * a3);
    memcpy(v15, a2, 4 * a3);
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_QWORD *)(a1 + 176);
  sub_19C0AC480(a1, v16);
  v17 = *(_DWORD *)(a1 + 220) - 1;
  if (v17 >= (int)a3)
    v17 = a3;
  __p = 0;
  v37 = 0;
  v38 = 0;
  if (v17)
  {
    v35 = v15;
    v18 = a6;
    v19 = a5;
    v20 = v17;
    if (v17 < 0)
      sub_19C07DA0C();
    v21 = 4 * v17;
    v22 = operator new(v21);
    __p = v22;
    v38 = (char *)v22 + 4 * v20;
    bzero(v22, 4 * v20);
    v37 = (char *)v22 + v21;
    v23 = v20;
    if (v20 < 8)
    {
      v24 = 0;
      a5 = v19;
      a6 = v18;
      v15 = v35;
LABEL_15:
      v29 = (int *)a2 + v24;
      v30 = (_DWORD *)v22 + v24;
      v31 = v23 - v24;
      do
      {
        v32 = *v29++;
        *v30++ = v32;
        --v31;
      }
      while (v31);
      goto LABEL_17;
    }
    v24 = v20 & 0xFFFFFFF8;
    v25 = a2 + 1;
    v26 = v22 + 1;
    v27 = v24;
    a5 = v19;
    do
    {
      v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      *v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    a6 = v18;
    v15 = v35;
    if (v24 != v23)
      goto LABEL_15;
  }
LABEL_17:
  sub_19C0AC6E4(a1, v16);
  sub_19C0AB94C(a1, (uint64_t *)&__p);
  v33 = sub_19C0A6834(a1);
  if (a7)
  {
    if (!a4)
      sub_19C2210D4(103);
    if (a6 < 1)
      sub_19C0AC73C(a1, (char *)a4, (unint64_t)(v37 - (_BYTE *)__p) >> 2);
    else
      sub_19C0AC7F0(a1, a4, a5, a6, (unint64_t)(v37 - (_BYTE *)__p) >> 2);
LABEL_25:
    v34 = (char *)__p;
    if (!__p)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (!a4)
    goto LABEL_25;
  if (a6 >= 1)
  {
    sub_19C0ACD9C(a1, a4, (unint64_t)a5, a6, (unint64_t)(v37 - (_BYTE *)__p) >> 2);
    goto LABEL_25;
  }
  memcpy(a4, *(const void **)(a1 + 168), 4 * v33);
  v34 = (char *)__p;
  if (__p)
  {
LABEL_26:
    v37 = v34;
    operator delete(v34);
  }
LABEL_27:
  if (v15)
    operator delete(v15);
}

void sub_19C083B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  if (__p)
    operator delete(__p);
  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_19C083B64(uint64_t a1, _DWORD *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  void *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  void *__p;
  void *v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = a3;
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 188))
  {
    sub_19C0A6448(a1);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    if (v9)
      goto LABEL_3;
LABEL_6:
    v12 = 0;
    goto LABEL_7;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  if (v9 < 0)
    sub_19C07DA0C();
  v12 = operator new(4 * v9);
  memcpy(v12, a2, 4 * v9);
LABEL_7:
  v13 = *(_QWORD *)(a1 + 176);
  v22 = 1;
  sub_19C0AC480(a1, v13);
  if (v9)
  {
    if (a5)
    {
      v14 = operator new(4uLL);
      *v14 = *a2;
      v20 = v14 + 1;
      v21 = v14 + 1;
      __p = v14;
      sub_19C087590(&__p, v14, (char *)&v22);
      sub_19C0AC6E4(a1, a5);
      sub_19C0AAE5C(a1, (uint64_t *)&__p, a4, v13, 1, 0, a6);
      sub_19C0AC698(a1, v13, 1);
      if (__p)
      {
        v20 = __p;
        operator delete(__p);
      }
      v15 = v9 - 1;
      if (v15)
      {
        v17 = a2 + 1;
        do
        {
          v18 = operator new(4uLL);
          *v18 = *v17;
          v20 = v18 + 1;
          v21 = v18 + 1;
          __p = v18;
          sub_19C087590(&__p, v18, (char *)&v22);
          sub_19C0AC6E4(a1, v13);
          sub_19C0AAE5C(a1, (uint64_t *)&__p, a4, v13, 1, 0, a6);
          sub_19C0AC698(a1, v13, 1);
          if (__p)
          {
            v20 = __p;
            operator delete(__p);
          }
          ++v17;
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      do
      {
        v16 = operator new(4uLL);
        *v16 = *a2;
        v20 = v16 + 1;
        v21 = v16 + 1;
        __p = v16;
        sub_19C087590(&__p, v16, (char *)&v22);
        sub_19C0AC6E4(a1, v13);
        sub_19C0AAE5C(a1, (uint64_t *)&__p, a4, v13, 1, 0, a6);
        sub_19C0AC698(a1, v13, 1);
        if (__p)
        {
          v20 = __p;
          operator delete(__p);
        }
        ++a2;
        --v9;
      }
      while (v9);
    }
  }
  if (v12)
    operator delete(v12);
}

void sub_19C083DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  if (__p)
    operator delete(__p);
  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

void MRLModelRecognizeVectors(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, uint64_t a6)
{
  uint64_t v12;
  int v13;

  std::mutex::lock(&stru_1EE418980);
  if (!a1)
    sub_19C2210D4(992);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (!a4)
  {
    v13 = 991;
    goto LABEL_18;
  }
  if (!a2)
  {
    v13 = 99;
LABEL_18:
    sub_19C2210D4(v13);
  }
  if (*(_BYTE *)(a1 + 216))
  {
    if (a6 >= 1)
    {
      do
      {
        sub_19C083FF4(a1, a2, a3, a4, a5);
        a4 += 8 * *(int *)(a1 + 36) * a3;
        a2 += 8 * a3;
        --a6;
      }
      while (a6);
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 200);
    if (v12 && !*(_DWORD *)(v12 + 8))
    {
      sub_19C0840E0(a1, a2, a3, a6, a4, 0, a5);
    }
    else if (a6 >= 1)
    {
      do
      {
        sub_19C0840E0(a1, a2, a3, 1, a4, 0, 0);
        a4 += 8 * *(int *)(a1 + 36) * a3;
        a2 += 8 * a3;
        --a6;
      }
      while (a6);
    }
  }
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C083FAC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C083F6CLL);
}

void sub_19C083FDC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void *sub_19C083FF4(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char a5)
{
  int v10;
  uint64_t v11;
  int v12;
  const void *v14;
  size_t v15;

  v10 = *(_DWORD *)(a1 + 220);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  sub_19C0A60F4(a1, (uint64_t)"recognizeSequenceInternalFullBiDir, float* - activate all buffer to %d length", v10);
  v11 = *(_QWORD *)(a1 + 176);
  sub_19C0AC480(a1, v11);
  if (*(_DWORD *)(a1 + 220) - 1 >= (int)a3)
    v12 = a3;
  else
    v12 = *(_DWORD *)(a1 + 220) - 1;
  sub_19C0AC6E4(a1, v11);
  sub_19C0AC09C(a1, a2, a3);
  if ((a5 & 1) != 0)
  {
    if (!a4)
      sub_19C2210D4(303);
    return (void *)sub_19C0AC73C(a1, a4, v12);
  }
  else
  {
    v14 = *(const void **)(a1 + 168);
    v15 = 4 * (int)sub_19C0A6834(a1);
    return memcpy(a4, v14, v15);
  }
}

void sub_19C0840E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  unsigned __int8 v30;
  char *v31;
  void *__p;
  void *v33;
  _DWORD *v34;
  int v35;

  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  v14 = *(_QWORD *)(a1 + 200);
  if (v14)
  {
    if (*(_DWORD *)(v14 + 28) >= a4)
      goto LABEL_3;
LABEL_29:
    sub_19C2210D4(1764);
  }
  if (a4 > 1)
    goto LABEL_29;
LABEL_3:
  if (!*(_BYTE *)(a1 + 188))
    sub_19C0A6448(a1);
  v15 = *(_QWORD *)(a1 + 176);
  v35 = 1;
  sub_19C0AC480(a1, v15);
  if (a3 >= 1)
  {
    v16 = 0;
    do
    {
      v17 = *(__int128 **)(a2 + 8 * v16);
      v18 = (*(_DWORD *)(a1 + 32) * a4);
      if ((int)v18 >= 1)
      {
        v19 = 0;
        v20 = ***(_QWORD ***)(a1 + 208);
        if (v18 < 8)
          goto LABEL_14;
        if ((unint64_t)(v20 - (_QWORD)v17) < 0x20)
          goto LABEL_14;
        v19 = v18 & 0x7FFFFFF8;
        v21 = v17 + 1;
        v22 = (_OWORD *)(v20 + 16);
        v23 = v18 & 0xFFFFFFF8;
        do
        {
          v24 = *v21;
          *(v22 - 1) = *(v21 - 1);
          *v22 = v24;
          v21 += 2;
          v22 += 2;
          v23 -= 8;
        }
        while (v23);
        if (v19 != v18)
        {
LABEL_14:
          v25 = (int *)v17 + v19;
          v26 = (_DWORD *)(v20 + 4 * v19);
          v27 = v18 - v19;
          do
          {
            v28 = *v25++;
            *v26++ = v28;
            --v27;
          }
          while (v27);
        }
      }
      v29 = operator new(4uLL);
      *v29 = 0;
      v33 = v29 + 1;
      v34 = v29 + 1;
      __p = v29;
      sub_19C087590(&__p, v29, (char *)&v35);
      if (v16 || !a6)
        sub_19C0AC6E4(a1, v15);
      else
        sub_19C0AC6E4(a1, a6);
      v30 = atomic_load((unsigned __int8 *)&qword_1EE419E70);
      if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419E70))
      {
        qword_1EE419EC8 = 0;
        unk_1EE419ED0 = 0;
        qword_1EE419EC0 = 0;
        __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419EC0, &dword_19C079000);
        __cxa_guard_release(&qword_1EE419E70);
      }
      v31 = a5;
      if (a7)
        v31 = &a5[4 * *(_DWORD *)(a1 + 36) * (int)v16];
      sub_19C0AAE5C(a1, (uint64_t *)&__p, v31, v15, a4, v17, (uint64_t)&qword_1EE419EC0);
      sub_19C0AC698(a1, v15, 1);
      if (__p)
      {
        v33 = __p;
        operator delete(__p);
      }
      ++v16;
    }
    while (v16 != a3);
  }
}

void sub_19C084338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MRLModelRecognizeVectorsIncremental(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;

  std::mutex::lock(&stru_1EE418980);
  if (!a1)
    sub_19C2210D4(992);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (*(_BYTE *)(a1 + 216))
  {
    v14 = 456;
    goto LABEL_17;
  }
  if (!a5)
  {
    v14 = 991;
    goto LABEL_17;
  }
  if (!a3)
  {
    v14 = 99;
LABEL_17:
    sub_19C2210D4(v14);
  }
  v12 = *(_QWORD *)(a1 + 200);
  if (v12 && !*(_DWORD *)(v12 + 8))
  {
    sub_19C0840E0(a1, a3, a4, a6, a5, a2, 0);
  }
  else if (a6 >= 1)
  {
    v13 = 0;
    do
    {
      sub_19C0840E0(a1, a3, a4, 1, &a5[4 * *(_DWORD *)(a1 + 36) * (int)v13++], a2, 0);
      a3 += 8 * a4;
    }
    while (a6 != v13);
  }
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C08447C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C084434);
}

void sub_19C0844A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void MRLModelRecognizeVectorsTopN(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, float32x4_t *a5, float32x4_t *a6)
{
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  const void *v16;
  int v17;
  unsigned int v18;
  char *v19;
  float **v20;
  float *v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  unint64_t v27;
  unint64_t v28;
  float v29;
  float v30;
  float v31;
  int v32;
  int v33;
  unint64_t v34;
  float v35;
  float v36;
  unint64_t v37;
  float *v38;
  float *v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  float v49;
  unint64_t v50;
  float v51;
  int v52;
  float v53;
  float v54;
  int v55;
  unint64_t v56;
  float v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float *v62;
  float v63;
  float v64;
  int v65;
  int v66;
  float v67;
  float v68;
  float v69;
  float *v70;
  int32x4_t v71;
  float32x4_t *v72;
  int32x4_t v73;
  int32x4_t v74;
  uint64_t v75;
  float32x4_t v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  int v81;
  float v82;
  float v83;
  int v84;
  float *v85;
  float *v86;
  float *v87;
  int v88;
  int v89;
  int v90;
  float v91;
  float v92;
  int v93;
  float v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  __int32 *v100;
  __int32 *v101;
  __int32 *v102;
  uint64_t v103;
  __int32 v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v108;
  const float *v110;
  float32x4_t *v111;
  float32x4_t *v112;
  uint64_t v113;
  const float *v114;
  uint64_t v115;
  const float *v116;
  unsigned __int128 *v117;
  uint64_t v118;
  const float *v119;
  unsigned __int128 v120;
  unsigned __int128 v121;
  __int32 *v122;
  __int32 *v123;
  uint64_t v124;
  __int32 v125;
  int v126;
  float32x4x2_t v127;
  float32x4x2_t v128;
  float32x4x2_t v129;

  std::mutex::lock(&stru_1EE418980);
  if (!a1)
    sub_19C2210D4(992);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (!a6)
  {
    v126 = 991;
    goto LABEL_150;
  }
  if (!a2)
  {
    v126 = 99;
LABEL_150:
    sub_19C2210D4(v126);
  }
  if (*(_BYTE *)(a1 + 216))
    v12 = *(_DWORD *)(a1 + 220);
  else
    v12 = 2;
  sub_19C0A60F4(a1, (uint64_t)"MRLModelWrapper::MRLModelRecognizeVectorsTopN() float* allocate", v12);
  v13 = sub_19C0A6834(a1);
  if (*(_BYTE *)(a1 + 216))
  {
    v14 = *(_DWORD *)(a1 + 220);
    dword_1EE418968 = *(_DWORD *)(a1 + 224);
    sub_19C0A60F4(a1, (uint64_t)"recognizeSequenceInternalFullBiDir, float* - activate all buffer to %d length", v14);
    v15 = *(_QWORD *)(a1 + 176);
    sub_19C0AC480(a1, v15);
    sub_19C0AC6E4(a1, v15);
    sub_19C0AC09C(a1, a2, a3);
    v16 = *(const void **)(a1 + 168);
    v17 = sub_19C0A6834(a1);
    memcpy(a6, v16, 4 * v17);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = *(char **)(a1 + 168);
  sub_19C0840E0(a1, a2, a3, 1, v19, 0, 0);
  v20 = *(float ***)(a1 + 160);
  v21 = *v20;
  if ((int)v18 >= 1)
  {
    if (v18 < 8 || v21 + 1 < (float *)&v19[4 * v18] && v19 < (char *)&v21[2 * v18])
    {
      v22 = 0;
LABEL_15:
      v23 = &v21[2 * v22 + 1];
      do
      {
        *((_DWORD *)v23 - 1) = v22;
        *v23 = *(float *)&v19[4 * v22];
        v23 += 2;
        ++v22;
      }
      while (v18 != v22);
      goto LABEL_17;
    }
    v22 = v18 & 0x7FFFFFF8;
    v70 = v21 + 8;
    v71 = (int32x4_t)xmmword_19C276E70;
    v72 = (float32x4_t *)(v19 + 16);
    v73.i64[0] = 0x400000004;
    v73.i64[1] = 0x400000004;
    v74.i64[0] = 0x800000008;
    v74.i64[1] = 0x800000008;
    v75 = v18 & 0xFFFFFFF8;
    do
    {
      v129.val[0] = (float32x4_t)vaddq_s32(v71, v73);
      v76 = v72[-1];
      v129.val[1] = *v72;
      v77 = v70 - 8;
      vst2q_f32(v77, *(float32x4x2_t *)v71.i8);
      vst2q_f32(v70, v129);
      v71 = vaddq_s32(v71, v74);
      v70 += 16;
      v72 += 2;
      v75 -= 8;
    }
    while (v75);
    if (v22 != v18)
      goto LABEL_15;
  }
LABEL_17:
  v24 = &v21[2 * a4];
  v25 = v20[1];
  if (v24 != v25)
  {
    v26 = v21;
    do
    {
      v27 = ((char *)v25 - (char *)v26) >> 3;
      if (v27 < 2)
        break;
      if (v27 == 3)
      {
        v78 = v26[3];
        v79 = v26[1];
        v80 = *(v25 - 1);
        if (v78 <= v79)
        {
          if (v80 > v78)
          {
            v90 = *((_DWORD *)v26 + 2);
            v26[2] = *(v25 - 2);
            *((_DWORD *)v25 - 2) = v90;
            v26[3] = v80;
            *(v25 - 1) = v78;
            v91 = v26[3];
            v92 = v26[1];
            if (v91 > v92)
            {
              v93 = *(_DWORD *)v26;
              *v26 = v26[2];
              *((_DWORD *)v26 + 2) = v93;
              v26[1] = v91;
              v26[3] = v92;
            }
          }
        }
        else
        {
          v81 = *(_DWORD *)v26;
          if (v80 <= v78)
          {
            *v26 = v26[2];
            *((_DWORD *)v26 + 2) = v81;
            v26[1] = v78;
            v26[3] = v79;
            v94 = *(v25 - 1);
            if (v94 <= v79)
              break;
            v26[2] = *(v25 - 2);
            *((_DWORD *)v25 - 2) = v81;
            v26[3] = v94;
          }
          else
          {
            *v26 = *(v25 - 2);
            *((_DWORD *)v25 - 2) = v81;
            v26[1] = v80;
          }
          *(v25 - 1) = v79;
        }
        break;
      }
      if (v27 == 2)
      {
        v82 = *(v25 - 1);
        v83 = v26[1];
        if (v82 > v83)
        {
          v84 = *(_DWORD *)v26;
          *v26 = *(v25 - 2);
          *((_DWORD *)v25 - 2) = v84;
          v26[1] = v82;
          *(v25 - 1) = v83;
        }
        break;
      }
      if ((char *)v25 - (char *)v26 <= 63)
      {
        while (v26 != v25 - 2)
        {
          v85 = v26;
          v26 += 2;
          if (v85 != v25 && v26 != v25)
          {
            v86 = v26;
            v87 = v85;
            do
            {
              if (v86[1] > v87[1])
                v87 = v86;
              v86 += 2;
            }
            while (v86 != v25);
            if (v87 != v85)
            {
              v88 = *(_DWORD *)v85;
              *v85 = *v87;
              *(_DWORD *)v87 = v88;
              v89 = *((_DWORD *)v85 + 1);
              v85[1] = v87[1];
              *((_DWORD *)v87 + 1) = v89;
            }
          }
        }
        break;
      }
      v28 = (unint64_t)&v26[2 * (v27 >> 1)];
      v29 = *(float *)(v28 + 4);
      v30 = v26[1];
      v31 = *(v25 - 1);
      if (v29 <= v30)
      {
        if (v31 <= v29)
        {
          v33 = 0;
          v34 = (unint64_t)(v25 - 2);
          v35 = v26[1];
          v36 = *(float *)(v28 + 4);
          if (v35 <= v36)
            goto LABEL_43;
          goto LABEL_26;
        }
        v45 = *(float *)v28;
        *(float *)v28 = *(v25 - 2);
        *(v25 - 2) = v45;
        *(float *)(v28 + 4) = v31;
        *(v25 - 1) = v29;
        v46 = *(float *)(v28 + 4);
        v47 = v26[1];
        if (v46 > v47)
        {
          v48 = *(_DWORD *)v26;
          *v26 = *(float *)v28;
          *(_DWORD *)v28 = v48;
          v26[1] = v46;
          *(float *)(v28 + 4) = v47;
          goto LABEL_40;
        }
      }
      else
      {
        v32 = *(_DWORD *)v26;
        if (v31 > v29)
        {
          *v26 = *(v25 - 2);
          *((_DWORD *)v25 - 2) = v32;
          v26[1] = v31;
          *(v25 - 1) = v30;
          v33 = 1;
          v34 = (unint64_t)(v25 - 2);
          v35 = v26[1];
          v36 = *(float *)(v28 + 4);
          if (v35 <= v36)
            goto LABEL_43;
          goto LABEL_26;
        }
        *v26 = *(float *)v28;
        *(_DWORD *)v28 = v32;
        v26[1] = v29;
        *(float *)(v28 + 4) = v30;
        v49 = *(v25 - 1);
        if (v49 > v30)
        {
          *(float *)v28 = *(v25 - 2);
          *((_DWORD *)v25 - 2) = v32;
          *(float *)(v28 + 4) = v49;
          *(v25 - 1) = v30;
LABEL_40:
          v33 = 2;
          v34 = (unint64_t)(v25 - 2);
          v35 = v26[1];
          v36 = *(float *)(v28 + 4);
          if (v35 <= v36)
            goto LABEL_43;
          goto LABEL_26;
        }
      }
      v33 = 1;
      v34 = (unint64_t)(v25 - 2);
      v35 = v26[1];
      v36 = *(float *)(v28 + 4);
      if (v35 <= v36)
      {
LABEL_43:
        v50 = v34;
        while (1)
        {
          v37 = v50 - 8;
          if ((float *)(v50 - 8) == v26)
            break;
          v51 = *(float *)(v50 - 4);
          v50 -= 8;
          if (v51 > v36)
          {
            v52 = *(_DWORD *)v26;
            *v26 = *(float *)v37;
            *(_DWORD *)v37 = v52;
            v26[1] = v51;
            *(float *)(v37 + 4) = v35;
            ++v33;
            v38 = v26 + 2;
            if ((unint64_t)(v26 + 2) < v37)
              goto LABEL_27;
            goto LABEL_47;
          }
        }
        v59 = v26 + 2;
        v60 = *(v25 - 1);
        if (v35 <= v60)
        {
          if (v59 == (float *)v34)
            break;
          while (1)
          {
            v61 = v59[1];
            if (v35 > v61)
              break;
            v59 += 2;
            if (v59 == (float *)v34)
              goto LABEL_108;
          }
          v65 = *(_DWORD *)v59;
          *v59 = *(v25 - 2);
          *((_DWORD *)v25 - 2) = v65;
          v59[1] = v60;
          *(v25 - 1) = v61;
          v59 += 2;
        }
        if (v59 == (float *)v34)
          break;
        while (1)
        {
          v67 = v26[1];
          do
          {
            v56 = (unint64_t)v59;
            v68 = v59[1];
            v59 += 2;
          }
          while (v67 <= v68);
          do
          {
            v69 = *(float *)(v34 - 4);
            v34 -= 8;
          }
          while (v67 > v69);
          if (v56 >= v34)
            break;
          v66 = *(_DWORD *)v56;
          *(_DWORD *)v56 = *(_DWORD *)v34;
          *(_DWORD *)v34 = v66;
          *(float *)(v56 + 4) = v69;
          *(float *)(v34 + 4) = v68;
        }
        if (v56 > (unint64_t)v24)
          break;
        goto LABEL_80;
      }
LABEL_26:
      v37 = v34;
      v38 = v26 + 2;
      if ((unint64_t)(v26 + 2) >= v37)
      {
LABEL_47:
        v41 = v38;
      }
      else
      {
LABEL_27:
        v39 = v38;
        while (1)
        {
          v40 = *(float *)(v28 + 4);
          do
          {
            v41 = v39;
            v42 = v39[1];
            v39 += 2;
          }
          while (v42 > v40);
          do
          {
            v43 = *(float *)(v37 - 4);
            v37 -= 8;
          }
          while (v43 <= v40);
          if ((unint64_t)v41 >= v37)
            break;
          v44 = *v41;
          *v41 = *(float *)v37;
          *(float *)v37 = v44;
          v41[1] = v43;
          *(float *)(v37 + 4) = v42;
          ++v33;
          if ((float *)v28 == v41)
            v28 = v37;
        }
      }
      if (v41 != (float *)v28)
      {
        v53 = *(float *)(v28 + 4);
        v54 = v41[1];
        if (v53 > v54)
        {
          v55 = *(_DWORD *)v41;
          *v41 = *(float *)v28;
          *(_DWORD *)v28 = v55;
          v41[1] = v53;
          *(float *)(v28 + 4) = v54;
          ++v33;
        }
      }
      if (v41 == v24)
        break;
      if (!v33)
      {
        if (v41 <= v24)
        {
          v62 = v41 + 2;
          while (v62 != v25)
          {
            v63 = v62[1];
            v64 = *(v62 - 1);
            v62 += 2;
            if (v63 > v64)
              goto LABEL_53;
          }
        }
        else
        {
          while (v38 != v41)
          {
            v57 = v38[1];
            v58 = *(v38 - 1);
            v38 += 2;
            if (v57 > v58)
              goto LABEL_53;
          }
        }
        break;
      }
LABEL_53:
      if (v41 <= v24)
      {
        v56 = (unint64_t)(v41 + 2);
      }
      else
      {
        v25 = v41;
        v56 = (unint64_t)v26;
      }
LABEL_80:
      v26 = (float *)v56;
    }
    while (v25 != v24);
  }
LABEL_108:
  v95 = 126 - 2 * __clz(a4);
  if (a4)
    v96 = v95;
  else
    v96 = 0;
  sub_19C088A48(v21, v24, v96, 1);
  bzero(a5, 4 * a4);
  bzero(a6, 4 * a4);
  if ((int)v18 >= (int)a4)
    v97 = a4;
  else
    v97 = v18;
  if ((int)v97 >= 1)
  {
    v98 = (unint64_t)*v20;
    if (a5)
    {
      if (v97 < 0xC)
      {
        v99 = 0;
LABEL_118:
        v100 = (__int32 *)(v98 + 8 * v99 + 4);
        v101 = &a6->i32[v99];
        v102 = &a5->i32[v99];
        v103 = v97 - v99;
        do
        {
          *v102++ = *(v100 - 1);
          v104 = *v100;
          v100 += 2;
          *v101++ = v104;
          --v103;
        }
        while (v103);
        goto LABEL_9;
      }
      v99 = 0;
      v106 = v98 + 8 * v97;
      v108 = v106 > (unint64_t)a6 && v98 + 4 < (unint64_t)a6->u64 + 4 * v97;
      if (v98 < (unint64_t)a5->u64 + 4 * v97 && v106 - 4 > (unint64_t)a5)
        goto LABEL_118;
      if (v108)
        goto LABEL_118;
      v99 = v97 & 0x7FFFFFF8;
      v110 = (const float *)(v98 + 32);
      v111 = a5 + 1;
      v112 = a6 + 1;
      v113 = v97 & 0xFFFFFFF8;
      do
      {
        v114 = v110 - 8;
        v127 = vld2q_f32(v114);
        v128 = vld2q_f32(v110);
        v111[-1] = v127.val[0];
        *v111 = v128.val[0];
        v112[-1] = v127.val[1];
        *v112 = v128.val[1];
        v110 += 16;
        v111 += 2;
        v112 += 2;
        v113 -= 8;
      }
      while (v113);
      if (v99 != v97)
        goto LABEL_118;
    }
    else
    {
      if (v97 >= 0xD
        && (v98 + 8 * v97 <= (unint64_t)a6 || v98 + 4 >= (unint64_t)a6->u64 + 4 * v97))
      {
        v115 = v97 & 7;
        if ((v97 & 7) == 0)
          v115 = 8;
        v105 = v97 - v115;
        v116 = (const float *)(v98 + 36);
        v117 = (unsigned __int128 *)&a6[1];
        v118 = v105;
        do
        {
          v119 = v116 - 8;
          v120 = (unsigned __int128)vld2q_f32(v119);
          v121 = (unsigned __int128)vld2q_f32(v116);
          *(v117 - 1) = v120;
          *v117 = v121;
          v116 += 16;
          v117 += 2;
          v118 -= 8;
        }
        while (v118);
      }
      else
      {
        v105 = 0;
      }
      v122 = (__int32 *)(v98 + 8 * v105 + 4);
      v123 = &a6->i32[v105];
      v124 = v97 - v105;
      do
      {
        v125 = *v122;
        v122 += 2;
        *v123++ = v125;
        --v124;
      }
      while (v124);
    }
  }
LABEL_9:
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C084D34(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C0845ACLL);
}

void sub_19C084D64(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void MRLModelRecognizeVectorsIncrementalTopN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float32x4_t *a6, float32x4_t *a7)
{
  unsigned int v14;
  char *v15;
  float **v16;
  float *v17;
  uint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  unint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  int v28;
  int v29;
  unint64_t v30;
  float v31;
  float v32;
  unint64_t v33;
  float *v34;
  float *v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  int v44;
  float v45;
  unint64_t v46;
  float v47;
  int v48;
  float v49;
  float v50;
  int v51;
  unint64_t v52;
  float v53;
  float v54;
  float *v55;
  float v56;
  float v57;
  float *v58;
  float v59;
  float v60;
  int v61;
  float v62;
  float v63;
  float v64;
  int v65;
  float *v66;
  int32x4_t v67;
  float32x4_t *v68;
  int32x4_t v69;
  int32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  float *v73;
  float v74;
  float v75;
  int v76;
  float v77;
  float v78;
  float v79;
  int v80;
  float *v81;
  float *v82;
  float *v83;
  int v84;
  int v85;
  int v86;
  float v87;
  float v88;
  int v89;
  float v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  __int32 *v96;
  __int32 *v97;
  __int32 *v98;
  uint64_t v99;
  __int32 v100;
  uint64_t v101;
  unint64_t v102;
  BOOL v104;
  const float *v106;
  float32x4_t *v107;
  float32x4_t *v108;
  uint64_t v109;
  const float *v110;
  uint64_t v111;
  const float *v112;
  unsigned __int128 *v113;
  uint64_t v114;
  const float *v115;
  unsigned __int128 v116;
  unsigned __int128 v117;
  __int32 *v118;
  __int32 *v119;
  uint64_t v120;
  __int32 v121;
  int v122;
  float32x4x2_t v123;
  float32x4x2_t v124;
  float32x4x2_t v125;

  std::mutex::lock(&stru_1EE418980);
  if (!a1)
    sub_19C2210D4(992);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (*(_BYTE *)(a1 + 216))
  {
    v122 = 456;
    goto LABEL_145;
  }
  if (!a7)
  {
    v122 = 991;
    goto LABEL_145;
  }
  if (!a3)
  {
    v122 = 99;
LABEL_145:
    sub_19C2210D4(v122);
  }
  v14 = sub_19C0A6834(a1);
  v16 = *(float ***)(a1 + 160);
  v15 = *(char **)(a1 + 168);
  sub_19C0840E0(a1, a3, a4, 1, v15, a2, 0);
  v17 = *v16;
  if ((int)v14 < 1)
    goto LABEL_12;
  if (v14 < 8 || v17 + 1 < (float *)&v15[4 * v14] && v15 < (char *)&v17[2 * v14])
  {
    v18 = 0;
LABEL_10:
    v19 = &v17[2 * v18 + 1];
    do
    {
      *((_DWORD *)v19 - 1) = v18;
      *v19 = *(float *)&v15[4 * v18];
      v19 += 2;
      ++v18;
    }
    while (v14 != v18);
    goto LABEL_12;
  }
  v18 = v14 & 0x7FFFFFF8;
  v66 = v17 + 8;
  v67 = (int32x4_t)xmmword_19C276E70;
  v68 = (float32x4_t *)(v15 + 16);
  v69.i64[0] = 0x400000004;
  v69.i64[1] = 0x400000004;
  v70.i64[0] = 0x800000008;
  v70.i64[1] = 0x800000008;
  v71 = v14 & 0xFFFFFFF8;
  do
  {
    v125.val[0] = (float32x4_t)vaddq_s32(v67, v69);
    v72 = v68[-1];
    v125.val[1] = *v68;
    v73 = v66 - 8;
    vst2q_f32(v73, *(float32x4x2_t *)v67.i8);
    vst2q_f32(v66, v125);
    v67 = vaddq_s32(v67, v70);
    v66 += 16;
    v68 += 2;
    v71 -= 8;
  }
  while (v71);
  if (v18 != v14)
    goto LABEL_10;
LABEL_12:
  v20 = &v17[2 * a5];
  v21 = v16[1];
  if (v20 != v21)
  {
    v22 = v17;
    do
    {
      v23 = ((char *)v21 - (char *)v22) >> 3;
      if (v23 < 2)
        break;
      if (v23 == 3)
      {
        v77 = v22[3];
        v78 = v22[1];
        v79 = *(v21 - 1);
        if (v77 <= v78)
        {
          if (v79 > v77)
          {
            v86 = *((_DWORD *)v22 + 2);
            v22[2] = *(v21 - 2);
            *((_DWORD *)v21 - 2) = v86;
            v22[3] = v79;
            *(v21 - 1) = v77;
            v87 = v22[3];
            v88 = v22[1];
            if (v87 > v88)
            {
              v89 = *(_DWORD *)v22;
              *v22 = v22[2];
              *((_DWORD *)v22 + 2) = v89;
              v22[1] = v87;
              v22[3] = v88;
            }
          }
        }
        else
        {
          v80 = *(_DWORD *)v22;
          if (v79 <= v77)
          {
            *v22 = v22[2];
            *((_DWORD *)v22 + 2) = v80;
            v22[1] = v77;
            v22[3] = v78;
            v90 = *(v21 - 1);
            if (v90 <= v78)
              break;
            v22[2] = *(v21 - 2);
            *((_DWORD *)v21 - 2) = v80;
            v22[3] = v90;
          }
          else
          {
            *v22 = *(v21 - 2);
            *((_DWORD *)v21 - 2) = v80;
            v22[1] = v79;
          }
          *(v21 - 1) = v78;
        }
        break;
      }
      if (v23 == 2)
      {
        v74 = *(v21 - 1);
        v75 = v22[1];
        if (v74 > v75)
        {
          v76 = *(_DWORD *)v22;
          *v22 = *(v21 - 2);
          *((_DWORD *)v21 - 2) = v76;
          v22[1] = v74;
          *(v21 - 1) = v75;
        }
        break;
      }
      if ((char *)v21 - (char *)v22 <= 63)
      {
        while (v22 != v21 - 2)
        {
          v81 = v22;
          v22 += 2;
          if (v81 != v21 && v22 != v21)
          {
            v82 = v22;
            v83 = v81;
            do
            {
              if (v82[1] > v83[1])
                v83 = v82;
              v82 += 2;
            }
            while (v82 != v21);
            if (v83 != v81)
            {
              v84 = *(_DWORD *)v81;
              *v81 = *v83;
              *(_DWORD *)v83 = v84;
              v85 = *((_DWORD *)v81 + 1);
              v81[1] = v83[1];
              *((_DWORD *)v83 + 1) = v85;
            }
          }
        }
        break;
      }
      v24 = (unint64_t)&v22[2 * (v23 >> 1)];
      v25 = *(float *)(v24 + 4);
      v26 = v22[1];
      v27 = *(v21 - 1);
      if (v25 <= v26)
      {
        if (v27 <= v25)
        {
          v29 = 0;
          v30 = (unint64_t)(v21 - 2);
          v31 = v22[1];
          v32 = *(float *)(v24 + 4);
          if (v31 <= v32)
            goto LABEL_38;
          goto LABEL_21;
        }
        v41 = *(float *)v24;
        *(float *)v24 = *(v21 - 2);
        *(v21 - 2) = v41;
        *(float *)(v24 + 4) = v27;
        *(v21 - 1) = v25;
        v42 = *(float *)(v24 + 4);
        v43 = v22[1];
        if (v42 > v43)
        {
          v44 = *(_DWORD *)v22;
          *v22 = *(float *)v24;
          *(_DWORD *)v24 = v44;
          v22[1] = v42;
          *(float *)(v24 + 4) = v43;
          goto LABEL_35;
        }
      }
      else
      {
        v28 = *(_DWORD *)v22;
        if (v27 > v25)
        {
          *v22 = *(v21 - 2);
          *((_DWORD *)v21 - 2) = v28;
          v22[1] = v27;
          *(v21 - 1) = v26;
          v29 = 1;
          v30 = (unint64_t)(v21 - 2);
          v31 = v22[1];
          v32 = *(float *)(v24 + 4);
          if (v31 <= v32)
            goto LABEL_38;
          goto LABEL_21;
        }
        *v22 = *(float *)v24;
        *(_DWORD *)v24 = v28;
        v22[1] = v25;
        *(float *)(v24 + 4) = v26;
        v45 = *(v21 - 1);
        if (v45 > v26)
        {
          *(float *)v24 = *(v21 - 2);
          *((_DWORD *)v21 - 2) = v28;
          *(float *)(v24 + 4) = v45;
          *(v21 - 1) = v26;
LABEL_35:
          v29 = 2;
          v30 = (unint64_t)(v21 - 2);
          v31 = v22[1];
          v32 = *(float *)(v24 + 4);
          if (v31 <= v32)
            goto LABEL_38;
          goto LABEL_21;
        }
      }
      v29 = 1;
      v30 = (unint64_t)(v21 - 2);
      v31 = v22[1];
      v32 = *(float *)(v24 + 4);
      if (v31 <= v32)
      {
LABEL_38:
        v46 = v30;
        while (1)
        {
          v33 = v46 - 8;
          if ((float *)(v46 - 8) == v22)
            break;
          v47 = *(float *)(v46 - 4);
          v46 -= 8;
          if (v47 > v32)
          {
            v48 = *(_DWORD *)v22;
            *v22 = *(float *)v33;
            *(_DWORD *)v33 = v48;
            v22[1] = v47;
            *(float *)(v33 + 4) = v31;
            ++v29;
            v34 = v22 + 2;
            if ((unint64_t)(v22 + 2) < v33)
              goto LABEL_22;
            goto LABEL_42;
          }
        }
        v55 = v22 + 2;
        v56 = *(v21 - 1);
        if (v31 <= v56)
        {
          if (v55 == (float *)v30)
            break;
          while (1)
          {
            v57 = v55[1];
            if (v31 > v57)
              break;
            v55 += 2;
            if (v55 == (float *)v30)
              goto LABEL_102;
          }
          v61 = *(_DWORD *)v55;
          *v55 = *(v21 - 2);
          *((_DWORD *)v21 - 2) = v61;
          v55[1] = v56;
          *(v21 - 1) = v57;
          v55 += 2;
        }
        if (v55 == (float *)v30)
          break;
        while (1)
        {
          v62 = v22[1];
          do
          {
            v52 = (unint64_t)v55;
            v63 = v55[1];
            v55 += 2;
          }
          while (v62 <= v63);
          do
          {
            v64 = *(float *)(v30 - 4);
            v30 -= 8;
          }
          while (v62 > v64);
          if (v52 >= v30)
            break;
          v65 = *(_DWORD *)v52;
          *(_DWORD *)v52 = *(_DWORD *)v30;
          *(_DWORD *)v30 = v65;
          *(float *)(v52 + 4) = v64;
          *(float *)(v30 + 4) = v63;
        }
        if (v52 > (unint64_t)v20)
          break;
        goto LABEL_74;
      }
LABEL_21:
      v33 = v30;
      v34 = v22 + 2;
      if ((unint64_t)(v22 + 2) >= v33)
      {
LABEL_42:
        v37 = v34;
      }
      else
      {
LABEL_22:
        v35 = v34;
        while (1)
        {
          v36 = *(float *)(v24 + 4);
          do
          {
            v37 = v35;
            v38 = v35[1];
            v35 += 2;
          }
          while (v38 > v36);
          do
          {
            v39 = *(float *)(v33 - 4);
            v33 -= 8;
          }
          while (v39 <= v36);
          if ((unint64_t)v37 >= v33)
            break;
          v40 = *v37;
          *v37 = *(float *)v33;
          *(float *)v33 = v40;
          v37[1] = v39;
          *(float *)(v33 + 4) = v38;
          ++v29;
          if ((float *)v24 == v37)
            v24 = v33;
        }
      }
      if (v37 != (float *)v24)
      {
        v49 = *(float *)(v24 + 4);
        v50 = v37[1];
        if (v49 > v50)
        {
          v51 = *(_DWORD *)v37;
          *v37 = *(float *)v24;
          *(_DWORD *)v24 = v51;
          v37[1] = v49;
          *(float *)(v24 + 4) = v50;
          ++v29;
        }
      }
      if (v37 == v20)
        break;
      if (!v29)
      {
        if (v37 <= v20)
        {
          v58 = v37 + 2;
          while (v58 != v21)
          {
            v59 = v58[1];
            v60 = *(v58 - 1);
            v58 += 2;
            if (v59 > v60)
              goto LABEL_48;
          }
        }
        else
        {
          while (v34 != v37)
          {
            v53 = v34[1];
            v54 = *(v34 - 1);
            v34 += 2;
            if (v53 > v54)
              goto LABEL_48;
          }
        }
        break;
      }
LABEL_48:
      if (v37 <= v20)
      {
        v52 = (unint64_t)(v37 + 2);
      }
      else
      {
        v21 = v37;
        v52 = (unint64_t)v22;
      }
LABEL_74:
      v22 = (float *)v52;
    }
    while (v21 != v20);
  }
LABEL_102:
  v91 = 126 - 2 * __clz(a5);
  if (a5)
    v92 = v91;
  else
    v92 = 0;
  sub_19C089AD0(v17, v20, v92, 1);
  bzero(a6, 4 * a5);
  bzero(a7, 4 * a5);
  if ((int)v14 >= (int)a5)
    v93 = a5;
  else
    v93 = v14;
  if ((int)v93 >= 1)
  {
    v94 = (unint64_t)*v16;
    if (a6)
    {
      if (v93 < 0xC)
      {
        v95 = 0;
LABEL_112:
        v96 = (__int32 *)(v94 + 8 * v95 + 4);
        v97 = &a7->i32[v95];
        v98 = &a6->i32[v95];
        v99 = v93 - v95;
        do
        {
          *v98++ = *(v96 - 1);
          v100 = *v96;
          v96 += 2;
          *v97++ = v100;
          --v99;
        }
        while (v99);
        goto LABEL_140;
      }
      v95 = 0;
      v102 = v94 + 8 * v93;
      v104 = v102 > (unint64_t)a7 && v94 + 4 < (unint64_t)a7->u64 + 4 * v93;
      if (v94 < (unint64_t)a6->u64 + 4 * v93 && v102 - 4 > (unint64_t)a6)
        goto LABEL_112;
      if (v104)
        goto LABEL_112;
      v95 = v93 & 0x7FFFFFF8;
      v106 = (const float *)(v94 + 32);
      v107 = a6 + 1;
      v108 = a7 + 1;
      v109 = v93 & 0xFFFFFFF8;
      do
      {
        v110 = v106 - 8;
        v123 = vld2q_f32(v110);
        v124 = vld2q_f32(v106);
        v107[-1] = v123.val[0];
        *v107 = v124.val[0];
        v108[-1] = v123.val[1];
        *v108 = v124.val[1];
        v106 += 16;
        v107 += 2;
        v108 += 2;
        v109 -= 8;
      }
      while (v109);
      if (v95 != v93)
        goto LABEL_112;
    }
    else
    {
      if (v93 >= 0xD
        && (v94 + 8 * v93 <= (unint64_t)a7 || v94 + 4 >= (unint64_t)a7->u64 + 4 * v93))
      {
        v111 = v93 & 7;
        if ((v93 & 7) == 0)
          v111 = 8;
        v101 = v93 - v111;
        v112 = (const float *)(v94 + 36);
        v113 = (unsigned __int128 *)&a7[1];
        v114 = v101;
        do
        {
          v115 = v112 - 8;
          v116 = (unsigned __int128)vld2q_f32(v115);
          v117 = (unsigned __int128)vld2q_f32(v112);
          *(v113 - 1) = v116;
          *v113 = v117;
          v112 += 16;
          v113 += 2;
          v114 -= 8;
        }
        while (v114);
      }
      else
      {
        v101 = 0;
      }
      v118 = (__int32 *)(v94 + 8 * v101 + 4);
      v119 = &a7->i32[v101];
      v120 = v93 - v101;
      do
      {
        v121 = *v118;
        v118 += 2;
        *v119++ = v121;
        --v120;
      }
      while (v120);
    }
  }
LABEL_140:
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C085578(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C08552CLL);
}

void sub_19C0855A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void MRLModelRecognizeTopN(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, float32x4_t *a5, float32x4_t *a6, int a7)
{
  unsigned int v14;
  int v15;
  unsigned int v16;
  float32x4_t *v17;
  unsigned __int8 v18;
  float **v19;
  float *v20;
  uint64_t v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  float v30;
  int v31;
  int v32;
  unint64_t v33;
  float v34;
  float v35;
  unint64_t v36;
  float *v37;
  float *v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  int v47;
  float v48;
  unint64_t v49;
  float v50;
  int v51;
  float v52;
  float v53;
  int v54;
  unint64_t v55;
  float v56;
  float v57;
  float *v58;
  float v59;
  float v60;
  float *v61;
  float v62;
  float v63;
  int v64;
  float v65;
  float v66;
  float v67;
  int v68;
  float *v69;
  int32x4_t v70;
  float32x4_t *v71;
  int32x4_t v72;
  int32x4_t v73;
  uint64_t v74;
  float32x4_t v75;
  float *v76;
  float v77;
  float v78;
  float v79;
  int v80;
  float v81;
  float v82;
  int v83;
  float *v84;
  float *v85;
  float *v86;
  int v87;
  int v88;
  int v89;
  float v90;
  float v91;
  int v92;
  float v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  __int32 *v99;
  __int32 *v100;
  __int32 *v101;
  uint64_t v102;
  __int32 v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  BOOL v109;
  const float *v111;
  float32x4_t *v112;
  float32x4_t *v113;
  uint64_t v114;
  const float *v115;
  uint64_t v116;
  const float *v117;
  unsigned __int128 *v118;
  uint64_t v119;
  const float *v120;
  unsigned __int128 v121;
  unsigned __int128 v122;
  float *v123;
  __int32 *v124;
  uint64_t v125;
  __int32 v126;
  uint64_t v127;
  const float *v128;
  unsigned __int128 *v129;
  uint64_t v130;
  const float *v131;
  unsigned __int128 v132;
  unsigned __int128 v133;
  __int32 *v134;
  uint64_t v135;
  __int32 *v136;
  __int32 v137;
  float32x4x2_t v138;
  float32x4x2_t v139;
  float32x4x2_t v140;

  std::mutex::lock(&stru_1EE418980);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  v14 = sub_19C0A6834(a1);
  if (*(_BYTE *)(a1 + 216))
  {
    sub_19C0A7940(a1);
    if (*(_BYTE *)(a1 + 216))
      v15 = *(_DWORD *)(a1 + 220);
    else
      v15 = 2;
    sub_19C0A60F4(a1, (uint64_t)"MRLModelWrapper::MRLModelRecognizeTopN() token allocate", v15);
    sub_19C08386C(a1, a2, a3, a6, a5, a4, a7);
    goto LABEL_81;
  }
  if (a7)
    sub_19C2210D4(204);
  v16 = v14;
  if (!*(_BYTE *)(a1 + 188))
    sub_19C0A6448(a1);
  v17 = *(float32x4_t **)(a1 + 168);
  v18 = atomic_load((unsigned __int8 *)&qword_1EE419E60);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419E60))
  {
    qword_1EE419E98 = 0;
    unk_1EE419EA0 = 0;
    qword_1EE419E90 = 0;
    __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419E90, &dword_19C079000);
    __cxa_guard_release(&qword_1EE419E60);
  }
  sub_19C083B64(a1, a2, a3, v17, 0, (uint64_t)&qword_1EE419E90);
  v19 = *(float ***)(a1 + 160);
  v20 = *v19;
  if ((int)v16 >= 1)
  {
    if (v16 < 8 || v20 + 1 < &v17->f32[v16] && v17 < (float32x4_t *)&v20[2 * v16])
    {
      v21 = 0;
LABEL_13:
      v22 = &v20[2 * v21 + 1];
      do
      {
        *((_DWORD *)v22 - 1) = v21;
        *v22 = v17->f32[v21];
        v22 += 2;
        ++v21;
      }
      while (v16 != v21);
      goto LABEL_15;
    }
    v21 = v16 & 0x7FFFFFF8;
    v69 = v20 + 8;
    v70 = (int32x4_t)xmmword_19C276E70;
    v71 = v17 + 1;
    v72.i64[0] = 0x400000004;
    v72.i64[1] = 0x400000004;
    v73.i64[0] = 0x800000008;
    v73.i64[1] = 0x800000008;
    v74 = v16 & 0xFFFFFFF8;
    do
    {
      v140.val[0] = (float32x4_t)vaddq_s32(v70, v72);
      v75 = v71[-1];
      v140.val[1] = *v71;
      v76 = v69 - 8;
      vst2q_f32(v76, *(float32x4x2_t *)v70.i8);
      vst2q_f32(v69, v140);
      v70 = vaddq_s32(v70, v73);
      v69 += 16;
      v71 += 2;
      v74 -= 8;
    }
    while (v74);
    if (v21 != v16)
      goto LABEL_13;
  }
LABEL_15:
  v23 = &v20[2 * a4];
  v24 = v19[1];
  if (v23 != v24)
  {
    v25 = v20;
    do
    {
      v26 = ((char *)v24 - (char *)v25) >> 3;
      if (v26 < 2)
        break;
      if (v26 == 3)
      {
        v77 = v25[3];
        v78 = v25[1];
        v79 = *(v24 - 1);
        if (v77 <= v78)
        {
          if (v79 > v77)
          {
            v89 = *((_DWORD *)v25 + 2);
            v25[2] = *(v24 - 2);
            *((_DWORD *)v24 - 2) = v89;
            v25[3] = v79;
            *(v24 - 1) = v77;
            v90 = v25[3];
            v91 = v25[1];
            if (v90 > v91)
            {
              v92 = *(_DWORD *)v25;
              *v25 = v25[2];
              *((_DWORD *)v25 + 2) = v92;
              v25[1] = v90;
              v25[3] = v91;
            }
          }
        }
        else
        {
          v80 = *(_DWORD *)v25;
          if (v79 <= v77)
          {
            *v25 = v25[2];
            *((_DWORD *)v25 + 2) = v80;
            v25[1] = v77;
            v25[3] = v78;
            v93 = *(v24 - 1);
            if (v93 <= v78)
              break;
            v25[2] = *(v24 - 2);
            *((_DWORD *)v24 - 2) = v80;
            v25[3] = v93;
          }
          else
          {
            *v25 = *(v24 - 2);
            *((_DWORD *)v24 - 2) = v80;
            v25[1] = v79;
          }
          *(v24 - 1) = v78;
        }
        break;
      }
      if (v26 == 2)
      {
        v81 = *(v24 - 1);
        v82 = v25[1];
        if (v81 > v82)
        {
          v83 = *(_DWORD *)v25;
          *v25 = *(v24 - 2);
          *((_DWORD *)v24 - 2) = v83;
          v25[1] = v81;
          *(v24 - 1) = v82;
        }
        break;
      }
      if ((char *)v24 - (char *)v25 <= 63)
      {
        while (v25 != v24 - 2)
        {
          v84 = v25;
          v25 += 2;
          if (v84 != v24 && v25 != v24)
          {
            v85 = v25;
            v86 = v84;
            do
            {
              if (v85[1] > v86[1])
                v86 = v85;
              v85 += 2;
            }
            while (v85 != v24);
            if (v86 != v84)
            {
              v87 = *(_DWORD *)v84;
              *v84 = *v86;
              *(_DWORD *)v86 = v87;
              v88 = *((_DWORD *)v84 + 1);
              v84[1] = v86[1];
              *((_DWORD *)v86 + 1) = v88;
            }
          }
        }
        break;
      }
      v27 = (unint64_t)&v25[2 * (v26 >> 1)];
      v28 = *(float *)(v27 + 4);
      v29 = v25[1];
      v30 = *(v24 - 1);
      if (v28 <= v29)
      {
        if (v30 <= v28)
        {
          v32 = 0;
          v33 = (unint64_t)(v24 - 2);
          v34 = v25[1];
          v35 = *(float *)(v27 + 4);
          if (v34 <= v35)
            goto LABEL_41;
          goto LABEL_24;
        }
        v44 = *(float *)v27;
        *(float *)v27 = *(v24 - 2);
        *(v24 - 2) = v44;
        *(float *)(v27 + 4) = v30;
        *(v24 - 1) = v28;
        v45 = *(float *)(v27 + 4);
        v46 = v25[1];
        if (v45 > v46)
        {
          v47 = *(_DWORD *)v25;
          *v25 = *(float *)v27;
          *(_DWORD *)v27 = v47;
          v25[1] = v45;
          *(float *)(v27 + 4) = v46;
          goto LABEL_38;
        }
      }
      else
      {
        v31 = *(_DWORD *)v25;
        if (v30 > v28)
        {
          *v25 = *(v24 - 2);
          *((_DWORD *)v24 - 2) = v31;
          v25[1] = v30;
          *(v24 - 1) = v29;
          v32 = 1;
          v33 = (unint64_t)(v24 - 2);
          v34 = v25[1];
          v35 = *(float *)(v27 + 4);
          if (v34 <= v35)
            goto LABEL_41;
          goto LABEL_24;
        }
        *v25 = *(float *)v27;
        *(_DWORD *)v27 = v31;
        v25[1] = v28;
        *(float *)(v27 + 4) = v29;
        v48 = *(v24 - 1);
        if (v48 > v29)
        {
          *(float *)v27 = *(v24 - 2);
          *((_DWORD *)v24 - 2) = v31;
          *(float *)(v27 + 4) = v48;
          *(v24 - 1) = v29;
LABEL_38:
          v32 = 2;
          v33 = (unint64_t)(v24 - 2);
          v34 = v25[1];
          v35 = *(float *)(v27 + 4);
          if (v34 <= v35)
            goto LABEL_41;
          goto LABEL_24;
        }
      }
      v32 = 1;
      v33 = (unint64_t)(v24 - 2);
      v34 = v25[1];
      v35 = *(float *)(v27 + 4);
      if (v34 <= v35)
      {
LABEL_41:
        v49 = v33;
        while (1)
        {
          v36 = v49 - 8;
          if ((float *)(v49 - 8) == v25)
            break;
          v50 = *(float *)(v49 - 4);
          v49 -= 8;
          if (v50 > v35)
          {
            v51 = *(_DWORD *)v25;
            *v25 = *(float *)v36;
            *(_DWORD *)v36 = v51;
            v25[1] = v50;
            *(float *)(v36 + 4) = v34;
            ++v32;
            v37 = v25 + 2;
            if ((unint64_t)(v25 + 2) < v36)
              goto LABEL_25;
            goto LABEL_45;
          }
        }
        v58 = v25 + 2;
        v59 = *(v24 - 1);
        if (v34 <= v59)
        {
          if (v58 == (float *)v33)
            break;
          while (1)
          {
            v60 = v58[1];
            if (v34 > v60)
              break;
            v58 += 2;
            if (v58 == (float *)v33)
              goto LABEL_108;
          }
          v64 = *(_DWORD *)v58;
          *v58 = *(v24 - 2);
          *((_DWORD *)v24 - 2) = v64;
          v58[1] = v59;
          *(v24 - 1) = v60;
          v58 += 2;
        }
        if (v58 == (float *)v33)
          break;
        while (1)
        {
          v65 = v25[1];
          do
          {
            v55 = (unint64_t)v58;
            v66 = v58[1];
            v58 += 2;
          }
          while (v65 <= v66);
          do
          {
            v67 = *(float *)(v33 - 4);
            v33 -= 8;
          }
          while (v65 > v67);
          if (v55 >= v33)
            break;
          v68 = *(_DWORD *)v55;
          *(_DWORD *)v55 = *(_DWORD *)v33;
          *(_DWORD *)v33 = v68;
          *(float *)(v55 + 4) = v67;
          *(float *)(v33 + 4) = v66;
        }
        if (v55 > (unint64_t)v23)
          break;
        goto LABEL_77;
      }
LABEL_24:
      v36 = v33;
      v37 = v25 + 2;
      if ((unint64_t)(v25 + 2) >= v36)
      {
LABEL_45:
        v40 = v37;
      }
      else
      {
LABEL_25:
        v38 = v37;
        while (1)
        {
          v39 = *(float *)(v27 + 4);
          do
          {
            v40 = v38;
            v41 = v38[1];
            v38 += 2;
          }
          while (v41 > v39);
          do
          {
            v42 = *(float *)(v36 - 4);
            v36 -= 8;
          }
          while (v42 <= v39);
          if ((unint64_t)v40 >= v36)
            break;
          v43 = *v40;
          *v40 = *(float *)v36;
          *(float *)v36 = v43;
          v40[1] = v42;
          *(float *)(v36 + 4) = v41;
          ++v32;
          if ((float *)v27 == v40)
            v27 = v36;
        }
      }
      if (v40 != (float *)v27)
      {
        v52 = *(float *)(v27 + 4);
        v53 = v40[1];
        if (v52 > v53)
        {
          v54 = *(_DWORD *)v40;
          *v40 = *(float *)v27;
          *(_DWORD *)v27 = v54;
          v40[1] = v52;
          *(float *)(v27 + 4) = v53;
          ++v32;
        }
      }
      if (v40 == v23)
        break;
      if (!v32)
      {
        if (v40 <= v23)
        {
          v61 = v40 + 2;
          while (v61 != v24)
          {
            v62 = v61[1];
            v63 = *(v61 - 1);
            v61 += 2;
            if (v62 > v63)
              goto LABEL_51;
          }
        }
        else
        {
          while (v37 != v40)
          {
            v56 = v37[1];
            v57 = *(v37 - 1);
            v37 += 2;
            if (v56 > v57)
              goto LABEL_51;
          }
        }
        break;
      }
LABEL_51:
      if (v40 <= v23)
      {
        v55 = (unint64_t)(v40 + 2);
      }
      else
      {
        v24 = v40;
        v55 = (unint64_t)v25;
      }
LABEL_77:
      v25 = (float *)v55;
    }
    while (v24 != v23);
  }
LABEL_108:
  v94 = 126 - 2 * __clz(a4);
  if (a4)
    v95 = v94;
  else
    v95 = 0;
  sub_19C08AA04(v20, v23, v95, 1);
  bzero(a5, 4 * a4);
  bzero(a6, 4 * a4);
  if ((int)v16 >= (int)a4)
    v96 = a4;
  else
    v96 = v16;
  if ((int)v96 >= 1)
  {
    if (a5)
    {
      v97 = (unint64_t)*v19;
      if (a6)
      {
        if (v96 < 0xC)
        {
          v98 = 0;
LABEL_119:
          v99 = (__int32 *)(v97 + 8 * v98 + 4);
          v100 = &a6->i32[v98];
          v101 = &a5->i32[v98];
          v102 = v96 - v98;
          do
          {
            *v101++ = *(v99 - 1);
            v103 = *v99;
            v99 += 2;
            *v100++ = v103;
            --v102;
          }
          while (v102);
          goto LABEL_81;
        }
        v98 = 0;
        v107 = v97 + 8 * v96;
        v109 = v107 > (unint64_t)a6 && v97 + 4 < (unint64_t)a6->u64 + 4 * v96;
        if (v97 < (unint64_t)a5->u64 + 4 * v96 && v107 - 4 > (unint64_t)a5)
          goto LABEL_119;
        if (v109)
          goto LABEL_119;
        v98 = v96 & 0x7FFFFFF8;
        v111 = (const float *)(v97 + 32);
        v112 = a5 + 1;
        v113 = a6 + 1;
        v114 = v96 & 0xFFFFFFF8;
        do
        {
          v115 = v111 - 8;
          v138 = vld2q_f32(v115);
          v139 = vld2q_f32(v111);
          v112[-1] = v138.val[0];
          *v112 = v139.val[0];
          v113[-1] = v138.val[1];
          *v113 = v139.val[1];
          v111 += 16;
          v112 += 2;
          v113 += 2;
          v114 -= 8;
        }
        while (v114);
        if (v98 != v96)
          goto LABEL_119;
      }
      else
      {
        if (v96 >= 0xD
          && (v97 + 8 * v96 - 4 <= (unint64_t)a5 || v97 >= (unint64_t)a5->u64 + 4 * v96))
        {
          v127 = v96 & 7;
          if ((v96 & 7) == 0)
            v127 = 8;
          v106 = v96 - v127;
          v128 = (const float *)(v97 + 32);
          v129 = (unsigned __int128 *)&a5[1];
          v130 = v106;
          do
          {
            v131 = v128 - 8;
            v132 = (unsigned __int128)vld2q_f32(v131);
            v133 = (unsigned __int128)vld2q_f32(v128);
            *(v129 - 1) = v132;
            *v129 = v133;
            v128 += 16;
            v129 += 2;
            v130 -= 8;
          }
          while (v130);
        }
        else
        {
          v106 = 0;
        }
        v134 = (__int32 *)(v97 + 8 * v106);
        v135 = v96 - v106;
        v136 = &a5->i32[v106];
        do
        {
          v137 = *v134;
          v134 += 2;
          *v136++ = v137;
          --v135;
        }
        while (v135);
      }
    }
    else if (a6)
    {
      v104 = *v19;
      if (v96 >= 0xD && (&v104[2 * v96] <= (float *)a6 || v104 + 1 >= &a6->f32[v96]))
      {
        v116 = v96 & 7;
        if ((v96 & 7) == 0)
          v116 = 8;
        v105 = v96 - v116;
        v117 = v104 + 9;
        v118 = (unsigned __int128 *)&a6[1];
        v119 = v105;
        do
        {
          v120 = v117 - 8;
          v121 = (unsigned __int128)vld2q_f32(v120);
          v122 = (unsigned __int128)vld2q_f32(v117);
          *(v118 - 1) = v121;
          *v118 = v122;
          v117 += 16;
          v118 += 2;
          v119 -= 8;
        }
        while (v119);
      }
      else
      {
        v105 = 0;
      }
      v123 = &v104[2 * v105 + 1];
      v124 = &a6->i32[v105];
      v125 = v96 - v105;
      do
      {
        v126 = *(_DWORD *)v123;
        v123 += 2;
        *v124++ = v126;
        --v125;
      }
      while (v125);
    }
  }
LABEL_81:
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C085EDC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C085A88);
}

void sub_19C085F04(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

_QWORD *MRLModelStateCreate(uint64_t a1)
{
  _QWORD *v2;

  std::mutex::lock(&stru_1EE418980);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  v2 = sub_19C0A683C(a1);
  std::mutex::unlock(&stru_1EE418980);
  return v2;
}

void sub_19C085F70(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C085F54);
}

void sub_19C085F94(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

uint64_t MRLModelStateSave(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex::lock(&stru_1EE418980);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 188))
    sub_19C0A6448(a1);
  if (!a2)
    sub_19C2210D4(40);
  sub_19C0AC698(a1, a2, a3);
  std::mutex::unlock(&stru_1EE418980);
  return a2;
}

void sub_19C086034(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C086008);
}

void sub_19C08605C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

uint64_t MRLModelStateRestore(uint64_t a1, uint64_t a2)
{
  std::mutex::lock(&stru_1EE418980);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 188))
    sub_19C0A6448(a1);
  if (!a2)
    sub_19C2210D4(41);
  sub_19C0AC6E4(a1, a2);
  std::mutex::unlock(&stru_1EE418980);
  return a2;
}

void sub_19C0860EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C0860C4);
}

void sub_19C086114(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

uint64_t MRLModelStateIsEmpty(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  std::mutex::lock(&stru_1EE418980);
  if (!a2)
    sub_19C2210D4(45);
  v4 = sub_19C0AC4C4(a1, a2);
  std::mutex::unlock(&stru_1EE418980);
  return v4;
}

void sub_19C086188(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C086160);
}

void sub_19C0861AC(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void MRLModelRecognizeIncremental(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, void *a5)
{
  void *__p;
  void *v6;
  uint64_t v7;

  __p = 0;
  v6 = 0;
  v7 = 0;
  sub_19C086220(a1, a2, a3, a4, a5, (uint64_t)&__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_19C086204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C086220(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, void *a5, uint64_t a6)
{
  char *v12;
  int v13;
  void *__p;
  void *v15;
  char *v16;

  std::mutex::lock(&stru_1EE418980);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  __p = 0;
  v15 = 0;
  v16 = 0;
  if (!a4)
  {
    v12 = 0;
    if (!a2)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (a4 < 0)
    sub_19C07DA0C();
  v12 = (char *)operator new(4 * a4);
  __p = v12;
  v16 = &v12[4 * a4];
  memcpy(v12, a3, 4 * a4);
  v15 = v16;
  if (a2)
  {
LABEL_6:
    v13 = 1;
    sub_19C087590(&__p, v12, (char *)&v13);
  }
LABEL_7:
  if (*(_BYTE *)(a1 + 216))
    sub_19C2210D4(456);
  sub_19C083B64(a1, a3, a4, a5, a2, a6);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C086350(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C08630CLL);
}

void sub_19C086394(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void MRLModelRecognizeIncrementalOneClassOnly(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  void *__p;
  char *v34;
  char *v35;

  __p = 0;
  v34 = 0;
  v35 = 0;
  if (!a6 || a7 < 1)
    sub_19C2210D4(98);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = v34;
  v12 = a7;
  do
  {
    while (v7 < v9)
    {
      *(_DWORD *)v7 = *(_DWORD *)(a6 + 4 * v8);
      v7 += 4;
      v11 = v7;
      if (++v8 == v12)
        goto LABEL_34;
    }
    v13 = (v7 - v10) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
    {
      v34 = v11;
      v35 = v9;
      __p = v10;
      sub_19C07DA0C();
    }
    if ((v9 - v10) >> 1 > v14)
      v14 = (v9 - v10) >> 1;
    if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 62)
      {
        v34 = v11;
        v35 = v9;
        __p = v10;
        sub_19C07C7FC();
      }
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v13];
    *(_DWORD *)v17 = *(_DWORD *)(a6 + 4 * v8);
    v11 = v17 + 4;
    if (v7 != v10)
    {
      v18 = v7 - 4 - v10;
      if (v18 < 0xBC)
      {
        v19 = v7;
        goto LABEL_19;
      }
      if (&v16[v7 - v10 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v7 - v10 - 4])
      {
        v19 = v7;
        do
        {
LABEL_19:
          v20 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v17 - 1) = v20;
          v17 -= 4;
        }
        while (v19 != v10);
        goto LABEL_20;
      }
      if (&v7[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v19 = v7;
        goto LABEL_19;
      }
      if ((unint64_t)(v10 - v16) < 0x20)
      {
        v19 = v7;
        goto LABEL_19;
      }
      v21 = (v18 >> 2) + 1;
      v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
      v19 = &v7[-v22];
      v17 -= v22;
      v23 = &v16[4 * v13 - 16];
      v24 = v7 - 16;
      v25 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 8;
      }
      while (v25);
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_19;
    }
LABEL_20:
    v9 = &v16[4 * v15];
    if (v10)
      operator delete(v10);
    v10 = v17;
    ++v8;
    v7 = v11;
  }
  while (v8 != v12);
LABEL_34:
  v34 = v11;
  v35 = v9;
  __p = v10;
  sub_19C086220(a1, a2, a3, a4, a5, (uint64_t)&__p);
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19C086600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MRLModelRecognizeIncrementalClassPlusSuffixIds(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, void *a5, uint64_t a6, int a7, uint64_t a8, unsigned int a9)
{
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  void *__p;
  char *v71;
  char *v72;

  __p = 0;
  v71 = 0;
  v72 = 0;
  v10 = 98;
  if (!a6)
    goto LABEL_98;
  v63 = a1;
  if (a7 < 1)
    goto LABEL_98;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = v71;
  v16 = a7;
  do
  {
    while (v11 < v13)
    {
      *(_DWORD *)v11 = *(_DWORD *)(a6 + 4 * v12);
      v11 += 4;
      v15 = v11;
      if (++v12 == v16)
        goto LABEL_34;
    }
    v17 = (v11 - v14) >> 2;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62)
    {
      v71 = v15;
      v72 = v13;
      __p = v14;
      sub_19C07DA0C();
    }
    if ((v13 - v14) >> 1 > v18)
      v18 = (v13 - v14) >> 1;
    if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
    {
      if (v19 >> 62)
      {
        v71 = v15;
        v72 = v13;
        __p = v14;
        sub_19C07C7FC();
      }
      v20 = operator new(4 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[4 * v17];
    *(_DWORD *)v21 = *(_DWORD *)(a6 + 4 * v12);
    v15 = v21 + 4;
    if (v11 != v14)
    {
      v22 = v11 - 4 - v14;
      if (v22 < 0xBC)
      {
        v23 = v11;
        goto LABEL_19;
      }
      if (&v20[v11 - v14 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v20[v11 - v14 - 4])
      {
        v23 = v11;
        do
        {
LABEL_19:
          v24 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v21 - 1) = v24;
          v21 -= 4;
        }
        while (v23 != v14);
        goto LABEL_20;
      }
      if (&v11[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4)
      {
        v23 = v11;
        goto LABEL_19;
      }
      if ((unint64_t)(v14 - v20) < 0x20)
      {
        v23 = v11;
        goto LABEL_19;
      }
      v25 = (v22 >> 2) + 1;
      v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
      v23 = &v11[-v26];
      v21 -= v26;
      v27 = &v20[4 * v17 - 16];
      v28 = v11 - 16;
      v29 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 8;
      }
      while (v29);
      if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_19;
    }
LABEL_20:
    v13 = &v20[4 * v19];
    if (v14)
      operator delete(v14);
    v14 = v21;
    ++v12;
    v11 = v15;
  }
  while (v12 != v16);
LABEL_34:
  v71 = v15;
  v72 = v13;
  __p = v14;
  if (v15 < v13)
  {
    *(_DWORD *)v15 = -1;
    v31 = v15 + 4;
    v32 = a9;
    goto LABEL_58;
  }
  v33 = (v15 - v14) >> 2;
  v34 = v33 + 1;
  v32 = a9;
  if ((unint64_t)(v33 + 1) >> 62)
    sub_19C07DA0C();
  if ((v13 - v14) >> 1 > v34)
    v34 = (v13 - v14) >> 1;
  if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
    v35 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v35 = v34;
  if (v35)
  {
    if (v35 >> 62)
      sub_19C07C7FC();
    v36 = operator new(4 * v35);
  }
  else
  {
    v36 = 0;
  }
  v37 = &v36[4 * v33];
  v13 = &v36[4 * v35];
  *(_DWORD *)v37 = -1;
  v31 = v37 + 4;
  if (v15 != v14)
  {
    v38 = v15 - v14 - 4;
    if (v38 < 0x2C)
    {
      v39 = v15;
      goto LABEL_54;
    }
    if ((unint64_t)(v14 - v36) < 0x20)
    {
      v39 = v15;
      goto LABEL_54;
    }
    v40 = (v38 >> 2) + 1;
    v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    v39 = &v15[-v41];
    v37 -= v41;
    v42 = &v36[4 * v33 - 16];
    v43 = v15 - 16;
    v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *(_OWORD *)v43;
      *(v42 - 1) = *((_OWORD *)v43 - 1);
      *v42 = v45;
      v42 -= 2;
      v43 -= 32;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_54:
        v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v37 - 1) = v46;
        v37 -= 4;
      }
      while (v39 != v14);
    }
  }
  __p = v37;
  v72 = &v36[4 * v35];
  if (v14)
    operator delete(v14);
  v14 = v37;
LABEL_58:
  v71 = v31;
  v10 = 97;
  if (!a8 || (int)v32 < 1)
LABEL_98:
    sub_19C2210D4(v10);
  v47 = 0;
  do
  {
    while (v31 < v13)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a8 + 4 * v47);
      v31 += 4;
      if (++v47 == v32)
        goto LABEL_91;
    }
    v48 = (v31 - v14) >> 2;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62)
    {
      v71 = v31;
      v72 = v13;
      __p = v14;
      sub_19C07DA0C();
    }
    if ((v13 - v14) >> 1 > v49)
      v49 = (v13 - v14) >> 1;
    if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
      v50 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v50 = v49;
    if (v50)
    {
      if (v50 >> 62)
      {
        v71 = v31;
        v72 = v13;
        __p = v14;
        sub_19C07C7FC();
      }
      v51 = operator new(4 * v50);
    }
    else
    {
      v51 = 0;
    }
    v52 = &v51[4 * v48];
    *(_DWORD *)v52 = *(_DWORD *)(a8 + 4 * v47);
    v53 = v52 + 4;
    if (v31 != v14)
    {
      v54 = v31 - 4 - v14;
      if (v54 < 0xBC)
      {
        v55 = v31;
        goto LABEL_76;
      }
      if (&v51[v31 - v14 - 4 - (v54 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v31 - v14 - 4])
      {
        v55 = v31;
        do
        {
LABEL_76:
          v56 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v52 - 1) = v56;
          v52 -= 4;
        }
        while (v55 != v14);
        goto LABEL_77;
      }
      if (&v31[-(v54 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v31 - 4)
      {
        v55 = v31;
        goto LABEL_76;
      }
      if ((unint64_t)(v14 - v51) < 0x20)
      {
        v55 = v31;
        goto LABEL_76;
      }
      v57 = (v54 >> 2) + 1;
      v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
      v55 = &v31[-v58];
      v52 -= v58;
      v59 = &v51[4 * v48 - 16];
      v60 = v31 - 16;
      v61 = v57 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v62 = *(_OWORD *)v60;
        *(v59 - 1) = *((_OWORD *)v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 32;
        v61 -= 8;
      }
      while (v61);
      if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_76;
    }
LABEL_77:
    v13 = &v51[4 * v50];
    if (v14)
      operator delete(v14);
    v14 = v52;
    v31 = v53;
    v32 = a9;
    ++v47;
  }
  while (v47 != a9);
LABEL_91:
  v71 = v31;
  v72 = v13;
  __p = v14;
  sub_19C086220(v63, a2, a3, a4, a5, (uint64_t)&__p);
  if (__p)
  {
    v71 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19C086B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MRLModelRecognizeIncrementalTopN(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, unint64_t a5, float32x4_t *a6, float32x4_t *a7)
{
  _BYTE *v14;
  unsigned int v15;
  float32x4_t *v16;
  float **v17;
  unsigned __int8 v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  unint64_t v25;
  unint64_t v26;
  float v27;
  float v28;
  float v29;
  int v30;
  int v31;
  unint64_t v32;
  float v33;
  float v34;
  unint64_t v35;
  float *v36;
  float *v37;
  float v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  int v46;
  float v47;
  unint64_t v48;
  float v49;
  int v50;
  float v51;
  float v52;
  int v53;
  unint64_t v54;
  float v55;
  float v56;
  float *v57;
  float v58;
  float v59;
  float *v60;
  float v61;
  float v62;
  int v63;
  int v64;
  float v65;
  float v66;
  float v67;
  float *v68;
  int32x4_t v69;
  float32x4_t *v70;
  int32x4_t v71;
  int32x4_t v72;
  uint64_t v73;
  float32x4_t v74;
  float *v75;
  float v76;
  float v77;
  float v78;
  int v79;
  float v80;
  float v81;
  int v82;
  float *v83;
  float *v84;
  float *v85;
  int v86;
  int v87;
  int v88;
  float v89;
  float v90;
  int v91;
  float v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  __int32 *v98;
  __int32 *v99;
  __int32 *v100;
  uint64_t v101;
  __int32 v102;
  float *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v108;
  const float *v110;
  float32x4_t *v111;
  float32x4_t *v112;
  uint64_t v113;
  const float *v114;
  uint64_t v115;
  const float *v116;
  unsigned __int128 *v117;
  uint64_t v118;
  const float *v119;
  unsigned __int128 v120;
  unsigned __int128 v121;
  float *v122;
  __int32 *v123;
  uint64_t v124;
  __int32 v125;
  uint64_t v126;
  const float *v127;
  unsigned __int128 *v128;
  uint64_t v129;
  const float *v130;
  unsigned __int128 v131;
  unsigned __int128 v132;
  __int32 *v133;
  uint64_t v134;
  __int32 *v135;
  __int32 v136;
  int v137;
  void *__p;
  void *v139;
  _BYTE *v140;
  float32x4x2_t v141;
  float32x4x2_t v142;
  float32x4x2_t v143;

  std::mutex::lock(&stru_1EE418980);
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (*(_BYTE *)(a1 + 216))
    sub_19C2210D4(456);
  __p = 0;
  v139 = 0;
  v140 = 0;
  if (!a4)
  {
    v14 = 0;
    if (!a2)
      goto LABEL_8;
LABEL_7:
    v137 = 1;
    sub_19C087590(&__p, v14, (char *)&v137);
    goto LABEL_8;
  }
  if (a4 < 0)
    sub_19C07DA0C();
  v14 = operator new(4 * a4);
  __p = v14;
  v140 = &v14[4 * a4];
  memcpy(v14, a3, 4 * a4);
  v139 = v140;
  if (a2)
    goto LABEL_7;
LABEL_8:
  v15 = sub_19C0A6834(a1);
  v17 = *(float ***)(a1 + 160);
  v16 = *(float32x4_t **)(a1 + 168);
  v18 = atomic_load((unsigned __int8 *)&qword_1EE419E68);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419E68))
  {
    qword_1EE419EB0 = 0;
    unk_1EE419EB8 = 0;
    qword_1EE419EA8 = 0;
    __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419EA8, &dword_19C079000);
    __cxa_guard_release(&qword_1EE419E68);
  }
  sub_19C083B64(a1, a3, a4, v16, a2, (uint64_t)&qword_1EE419EA8);
  v19 = *v17;
  if ((int)v15 >= 1)
  {
    if (v15 < 8 || v19 + 1 < &v16->f32[v15] && v16 < (float32x4_t *)&v19[2 * v15])
    {
      v20 = 0;
LABEL_14:
      v21 = &v19[2 * v20 + 1];
      do
      {
        *((_DWORD *)v21 - 1) = v20;
        *v21 = v16->f32[v20];
        v21 += 2;
        ++v20;
      }
      while (v15 != v20);
      goto LABEL_16;
    }
    v20 = v15 & 0xFFFFFFF8;
    v68 = v19 + 8;
    v69 = (int32x4_t)xmmword_19C276E70;
    v70 = v16 + 1;
    v71.i64[0] = 0x400000004;
    v71.i64[1] = 0x400000004;
    v72.i64[0] = 0x800000008;
    v72.i64[1] = 0x800000008;
    v73 = v20;
    do
    {
      v143.val[0] = (float32x4_t)vaddq_s32(v69, v71);
      v74 = v70[-1];
      v143.val[1] = *v70;
      v75 = v68 - 8;
      vst2q_f32(v75, *(float32x4x2_t *)v69.i8);
      vst2q_f32(v68, v143);
      v69 = vaddq_s32(v69, v72);
      v68 += 16;
      v70 += 2;
      v73 -= 8;
    }
    while (v73);
    if (v20 != v15)
      goto LABEL_14;
  }
LABEL_16:
  v22 = &v19[2 * a5];
  v23 = v17[1];
  if (v22 != v23)
  {
    v24 = v19;
    do
    {
      v25 = ((char *)v23 - (char *)v24) >> 3;
      if (v25 < 2)
        break;
      if (v25 == 3)
      {
        v76 = v24[3];
        v77 = v24[1];
        v78 = *(v23 - 1);
        if (v76 <= v77)
        {
          if (v78 > v76)
          {
            v88 = *((_DWORD *)v24 + 2);
            v24[2] = *(v23 - 2);
            *((_DWORD *)v23 - 2) = v88;
            v24[3] = v78;
            *(v23 - 1) = v76;
            v89 = v24[3];
            v90 = v24[1];
            if (v89 > v90)
            {
              v91 = *(_DWORD *)v24;
              *v24 = v24[2];
              *((_DWORD *)v24 + 2) = v91;
              v24[1] = v89;
              v24[3] = v90;
            }
          }
        }
        else
        {
          v79 = *(_DWORD *)v24;
          if (v78 <= v76)
          {
            *v24 = v24[2];
            *((_DWORD *)v24 + 2) = v79;
            v24[1] = v76;
            v24[3] = v77;
            v92 = *(v23 - 1);
            if (v92 <= v77)
              break;
            v24[2] = *(v23 - 2);
            *((_DWORD *)v23 - 2) = v79;
            v24[3] = v92;
          }
          else
          {
            *v24 = *(v23 - 2);
            *((_DWORD *)v23 - 2) = v79;
            v24[1] = v78;
          }
          *(v23 - 1) = v77;
        }
        break;
      }
      if (v25 == 2)
      {
        v80 = *(v23 - 1);
        v81 = v24[1];
        if (v80 > v81)
        {
          v82 = *(_DWORD *)v24;
          *v24 = *(v23 - 2);
          *((_DWORD *)v23 - 2) = v82;
          v24[1] = v80;
          *(v23 - 1) = v81;
        }
        break;
      }
      if ((char *)v23 - (char *)v24 <= 63)
      {
        while (v24 != v23 - 2)
        {
          v83 = v24;
          v24 += 2;
          if (v83 != v23 && v24 != v23)
          {
            v84 = v24;
            v85 = v83;
            do
            {
              if (v84[1] > v85[1])
                v85 = v84;
              v84 += 2;
            }
            while (v84 != v23);
            if (v85 != v83)
            {
              v86 = *(_DWORD *)v83;
              *v83 = *v85;
              *(_DWORD *)v85 = v86;
              v87 = *((_DWORD *)v83 + 1);
              v83[1] = v85[1];
              *((_DWORD *)v85 + 1) = v87;
            }
          }
        }
        break;
      }
      v26 = (unint64_t)&v24[2 * (v25 >> 1)];
      v27 = *(float *)(v26 + 4);
      v28 = v24[1];
      v29 = *(v23 - 1);
      if (v27 <= v28)
      {
        if (v29 <= v27)
        {
          v31 = 0;
          v32 = (unint64_t)(v23 - 2);
          v33 = v24[1];
          v34 = *(float *)(v26 + 4);
          if (v33 <= v34)
            goto LABEL_42;
          goto LABEL_25;
        }
        v43 = *(float *)v26;
        *(float *)v26 = *(v23 - 2);
        *(v23 - 2) = v43;
        *(float *)(v26 + 4) = v29;
        *(v23 - 1) = v27;
        v44 = *(float *)(v26 + 4);
        v45 = v24[1];
        if (v44 > v45)
        {
          v46 = *(_DWORD *)v24;
          *v24 = *(float *)v26;
          *(_DWORD *)v26 = v46;
          v24[1] = v44;
          *(float *)(v26 + 4) = v45;
          goto LABEL_39;
        }
      }
      else
      {
        v30 = *(_DWORD *)v24;
        if (v29 > v27)
        {
          *v24 = *(v23 - 2);
          *((_DWORD *)v23 - 2) = v30;
          v24[1] = v29;
          *(v23 - 1) = v28;
          v31 = 1;
          v32 = (unint64_t)(v23 - 2);
          v33 = v24[1];
          v34 = *(float *)(v26 + 4);
          if (v33 <= v34)
            goto LABEL_42;
          goto LABEL_25;
        }
        *v24 = *(float *)v26;
        *(_DWORD *)v26 = v30;
        v24[1] = v27;
        *(float *)(v26 + 4) = v28;
        v47 = *(v23 - 1);
        if (v47 > v28)
        {
          *(float *)v26 = *(v23 - 2);
          *((_DWORD *)v23 - 2) = v30;
          *(float *)(v26 + 4) = v47;
          *(v23 - 1) = v28;
LABEL_39:
          v31 = 2;
          v32 = (unint64_t)(v23 - 2);
          v33 = v24[1];
          v34 = *(float *)(v26 + 4);
          if (v33 <= v34)
            goto LABEL_42;
          goto LABEL_25;
        }
      }
      v31 = 1;
      v32 = (unint64_t)(v23 - 2);
      v33 = v24[1];
      v34 = *(float *)(v26 + 4);
      if (v33 <= v34)
      {
LABEL_42:
        v48 = v32;
        while (1)
        {
          v35 = v48 - 8;
          if ((float *)(v48 - 8) == v24)
            break;
          v49 = *(float *)(v48 - 4);
          v48 -= 8;
          if (v49 > v34)
          {
            v50 = *(_DWORD *)v24;
            *v24 = *(float *)v35;
            *(_DWORD *)v35 = v50;
            v24[1] = v49;
            *(float *)(v35 + 4) = v33;
            ++v31;
            v36 = v24 + 2;
            if ((unint64_t)(v24 + 2) < v35)
              goto LABEL_26;
            goto LABEL_46;
          }
        }
        v57 = v24 + 2;
        v58 = *(v23 - 1);
        if (v33 <= v58)
        {
          if (v57 == (float *)v32)
            break;
          while (1)
          {
            v59 = v57[1];
            if (v33 > v59)
              break;
            v57 += 2;
            if (v57 == (float *)v32)
              goto LABEL_107;
          }
          v63 = *(_DWORD *)v57;
          *v57 = *(v23 - 2);
          *((_DWORD *)v23 - 2) = v63;
          v57[1] = v58;
          *(v23 - 1) = v59;
          v57 += 2;
        }
        if (v57 == (float *)v32)
          break;
        while (1)
        {
          v65 = v24[1];
          do
          {
            v54 = (unint64_t)v57;
            v66 = v57[1];
            v57 += 2;
          }
          while (v65 <= v66);
          do
          {
            v67 = *(float *)(v32 - 4);
            v32 -= 8;
          }
          while (v65 > v67);
          if (v54 >= v32)
            break;
          v64 = *(_DWORD *)v54;
          *(_DWORD *)v54 = *(_DWORD *)v32;
          *(_DWORD *)v32 = v64;
          *(float *)(v54 + 4) = v67;
          *(float *)(v32 + 4) = v66;
        }
        if (v54 > (unint64_t)v22)
          break;
        goto LABEL_79;
      }
LABEL_25:
      v35 = v32;
      v36 = v24 + 2;
      if ((unint64_t)(v24 + 2) >= v35)
      {
LABEL_46:
        v39 = v36;
      }
      else
      {
LABEL_26:
        v37 = v36;
        while (1)
        {
          v38 = *(float *)(v26 + 4);
          do
          {
            v39 = v37;
            v40 = v37[1];
            v37 += 2;
          }
          while (v40 > v38);
          do
          {
            v41 = *(float *)(v35 - 4);
            v35 -= 8;
          }
          while (v41 <= v38);
          if ((unint64_t)v39 >= v35)
            break;
          v42 = *v39;
          *v39 = *(float *)v35;
          *(float *)v35 = v42;
          v39[1] = v41;
          *(float *)(v35 + 4) = v40;
          ++v31;
          if ((float *)v26 == v39)
            v26 = v35;
        }
      }
      if (v39 != (float *)v26)
      {
        v51 = *(float *)(v26 + 4);
        v52 = v39[1];
        if (v51 > v52)
        {
          v53 = *(_DWORD *)v39;
          *v39 = *(float *)v26;
          *(_DWORD *)v26 = v53;
          v39[1] = v51;
          *(float *)(v26 + 4) = v52;
          ++v31;
        }
      }
      if (v39 == v22)
        break;
      if (!v31)
      {
        if (v39 <= v22)
        {
          v60 = v39 + 2;
          while (v60 != v23)
          {
            v61 = v60[1];
            v62 = *(v60 - 1);
            v60 += 2;
            if (v61 > v62)
              goto LABEL_52;
          }
        }
        else
        {
          while (v36 != v39)
          {
            v55 = v36[1];
            v56 = *(v36 - 1);
            v36 += 2;
            if (v55 > v56)
              goto LABEL_52;
          }
        }
        break;
      }
LABEL_52:
      if (v39 <= v22)
      {
        v54 = (unint64_t)(v39 + 2);
      }
      else
      {
        v23 = v39;
        v54 = (unint64_t)v24;
      }
LABEL_79:
      v24 = (float *)v54;
    }
    while (v23 != v22);
  }
LABEL_107:
  v93 = 126 - 2 * __clz(a5);
  if (a5)
    v94 = v93;
  else
    v94 = 0;
  sub_19C08B938(v19, v22, v94, 1);
  bzero(a6, 4 * a5);
  bzero(a7, 4 * a5);
  if ((int)v15 >= (int)a5)
    v95 = a5;
  else
    v95 = v15;
  if ((int)v95 >= 1)
  {
    if (a6)
    {
      v96 = (unint64_t)*v17;
      if (a7)
      {
        if (v95 >= 0xC)
        {
          v97 = 0;
          v106 = v96 + 8 * v95;
          v108 = v106 > (unint64_t)a7 && v96 + 4 < (unint64_t)a7->u64 + 4 * v95;
          if ((v96 >= (unint64_t)a6->u64 + 4 * v95 || v106 - 4 <= (unint64_t)a6) && !v108)
          {
            v97 = v95 & 0x7FFFFFF8;
            v110 = (const float *)(v96 + 32);
            v111 = a6 + 1;
            v112 = a7 + 1;
            v113 = v95 & 0xFFFFFFF8;
            do
            {
              v114 = v110 - 8;
              v141 = vld2q_f32(v114);
              v142 = vld2q_f32(v110);
              v111[-1] = v141.val[0];
              *v111 = v142.val[0];
              v112[-1] = v141.val[1];
              *v112 = v142.val[1];
              v110 += 16;
              v111 += 2;
              v112 += 2;
              v113 -= 8;
            }
            while (v113);
            if (v97 == v95)
              goto LABEL_158;
          }
        }
        else
        {
          v97 = 0;
        }
        v98 = (__int32 *)(v96 + 8 * v97 + 4);
        v99 = &a7->i32[v97];
        v100 = &a6->i32[v97];
        v101 = v95 - v97;
        do
        {
          *v100++ = *(v98 - 1);
          v102 = *v98;
          v98 += 2;
          *v99++ = v102;
          --v101;
        }
        while (v101);
      }
      else
      {
        if (v95 >= 0xD
          && (v96 + 8 * v95 - 4 <= (unint64_t)a6 || v96 >= (unint64_t)a6->u64 + 4 * v95))
        {
          v126 = v95 & 7;
          if ((v95 & 7) == 0)
            v126 = 8;
          v105 = v95 - v126;
          v127 = (const float *)(v96 + 32);
          v128 = (unsigned __int128 *)&a6[1];
          v129 = v105;
          do
          {
            v130 = v127 - 8;
            v131 = (unsigned __int128)vld2q_f32(v130);
            v132 = (unsigned __int128)vld2q_f32(v127);
            *(v128 - 1) = v131;
            *v128 = v132;
            v127 += 16;
            v128 += 2;
            v129 -= 8;
          }
          while (v129);
        }
        else
        {
          v105 = 0;
        }
        v133 = (__int32 *)(v96 + 8 * v105);
        v134 = v95 - v105;
        v135 = &a6->i32[v105];
        do
        {
          v136 = *v133;
          v133 += 2;
          *v135++ = v136;
          --v134;
        }
        while (v134);
      }
    }
    else if (a7)
    {
      v103 = *v17;
      if (v95 >= 0xD && (&v103[2 * v95] <= (float *)a7 || v103 + 1 >= &a7->f32[v95]))
      {
        v115 = v95 & 7;
        if ((v95 & 7) == 0)
          v115 = 8;
        v104 = v95 - v115;
        v116 = v103 + 9;
        v117 = (unsigned __int128 *)&a7[1];
        v118 = v104;
        do
        {
          v119 = v116 - 8;
          v120 = (unsigned __int128)vld2q_f32(v119);
          v121 = (unsigned __int128)vld2q_f32(v116);
          *(v117 - 1) = v120;
          *v117 = v121;
          v116 += 16;
          v117 += 2;
          v118 -= 8;
        }
        while (v118);
      }
      else
      {
        v104 = 0;
      }
      v122 = &v103[2 * v104 + 1];
      v123 = &a7->i32[v104];
      v124 = v95 - v104;
      do
      {
        v125 = *(_DWORD *)v122;
        v122 += 2;
        *v123++ = v125;
        --v124;
      }
      while (v124);
    }
  }
LABEL_158:
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C087528(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C0874A0);
}

void sub_19C087578(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

char *sub_19C087590(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  char *v47;
  int64_t v48;
  char *v49;
  size_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 2;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)v9 = *(_DWORD *)a3;
      a1[1] = v9 + 4;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 4);
    v12 = v11 >> 2;
    v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      v19 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = (char *)(v14 + v6);
      v16 = v14 + v6 + 4;
      if (v5 > v16)
        v16 = (unint64_t)a1[1];
      v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        v19 = a1[1];
      }
      else
      {
        v18 = v5 - (_QWORD)v15;
        v19 = a1[1];
        if (v18 >= 0x20)
        {
          v20 = (v17 >> 2) + 1;
          v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          v13 = (int *)((char *)v13 + v21);
          v19 = (_DWORD *)(v5 + v21);
          v22 = (_OWORD *)(v5 + 16);
          v23 = (__int128 *)(4 * v12 + 4 * v8 + v6 + 16);
          v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_50;
        }
      }
      do
      {
        v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4)
      memmove((void *)(v5 - 4 * v12), v9, v11);
    if (v9 <= v3)
      v3 += 4 * (a1[1] > v3);
    *(_DWORD *)v9 = *(_DWORD *)v3;
    return v9;
  }
  v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62)
    sub_19C07DA0C();
  v28 = v10 - v6;
  if (v28 >> 1 > v26)
    v26 = v28 >> 1;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
    v29 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v29 = v26;
  if (v29)
  {
    if (v29 >> 62)
      sub_19C07C7FC();
    v30 = (char *)operator new(4 * v29);
    v31 = &v30[4 * v8];
    v32 = &v30[4 * v29];
    if (v8 != v29)
      goto LABEL_28;
  }
  else
  {
    v30 = 0;
    v31 = (char *)(4 * v8);
    v32 = 0;
    if (v8)
      goto LABEL_28;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v52 = 1;
    else
      v52 = v7 >> 1;
    if (v52 >> 62)
      sub_19C07C7FC();
    v53 = (char *)operator new(4 * v52);
    v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    v32 = &v53[4 * v52];
    if (v30)
    {
      v54 = &v53[4 * v52];
      operator delete(v30);
      v32 = v54;
      v34 = (char *)*a1;
      *(_DWORD *)v31 = *(_DWORD *)v3;
      v35 = v31 + 4;
      v36 = v31;
      if (v34 != v9)
        goto LABEL_29;
      goto LABEL_35;
    }
  }
  else
  {
    v33 = v8 + 2;
    if (v8 >= -1)
      v33 = v8 + 1;
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  v34 = (char *)v6;
  *(_DWORD *)v31 = *(_DWORD *)v3;
  v35 = v31 + 4;
  v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    v38 = v37 - v34 - 4;
    v39 = v9;
    v36 = v31;
    if (v38 < 0x2C)
      goto LABEL_61;
    v39 = v9;
    v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20)
      goto LABEL_61;
    v40 = (v38 >> 2) + 1;
    v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    v39 = &v9[-v41];
    v36 = &v31[-v41];
    v42 = v31 - 16;
    v43 = (__int128 *)(v6 + 4 * v8 - 16);
    v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_61:
      do
      {
        v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = (char *)a1[1];
  v48 = v47 - v9;
  if (v47 != v9)
  {
    v49 = v9;
    v50 = v47 - v9;
    v51 = v32;
    memmove(v35, v49, v50);
    v32 = v51;
    v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34)
    operator delete(v34);
  return v31;
}

void sub_19C0878FC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void MRLModelStateReset(uint64_t a1, uint64_t a2)
{
  std::mutex::lock(&stru_1EE418980);
  if (a2)
    sub_19C0AC480(a1, a2);
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C087958(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 != 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x19C087944);
  }
  __cxa_end_catch();
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C087988(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void MRLModelStateRelease(uint64_t a1, char **a2)
{
  std::mutex::lock(&stru_1EE418980);
  if (a2)
    sub_19C0A69B8(a1, a2);
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C0879E4(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 != 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x19C0879D0);
  }
  __cxa_end_catch();
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C087A14(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

uint64_t MRLModelStateSize(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  std::mutex::lock(&stru_1EE418980);
  if (a2)
    v3 = (a2[1] - *a2) >> 4;
  else
    v3 = 0xFFFFFFFFLL;
  std::mutex::unlock(&stru_1EE418980);
  return v3;
}

uint64_t MRLModelStatePieceSize(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  std::mutex::lock(&stru_1EE418980);
  if (!a2 || ((v5 = (a2[1] - *a2) >> 4, (int)v5 >= 1) ? (v6 = (int)v5 <= a3) : (v6 = 1), v6))
    v7 = 0xFFFFFFFFLL;
  else
    v7 = *(unsigned int *)(*a2 + 16 * a3);
  std::mutex::unlock(&stru_1EE418980);
  return v7;
}

uint64_t MRLModelStatePieceData(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  std::mutex::lock(&stru_1EE418980);
  if (!a2 || ((v5 = (a2[1] - *a2) >> 4, (int)v5 >= 1) ? (v6 = (int)v5 <= a3) : (v6 = 1), v6))
    v7 = 0;
  else
    v7 = **(_QWORD **)(*a2 + 16 * a3 + 8);
  std::mutex::unlock(&stru_1EE418980);
  return v7;
}

uint64_t MRLModelStateCreateDescription()
{
  return 0;
}

uint64_t MRLModelGetIOMappings(uint64_t a1)
{
  uint64_t v2;

  std::mutex::lock(&stru_1EE418980);
  v2 = sub_19C0AC734(a1);
  std::mutex::unlock(&stru_1EE418980);
  return v2;
}

void sub_19C087B9C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void MRLModelRelease(uint64_t a1)
{
  void *v2;

  std::mutex::lock(&stru_1EE418980);
  if (a1)
  {
    dword_1EE418968 = *(_DWORD *)(a1 + 224);
    v2 = (void *)sub_19C0A6C40(a1);
    operator delete(v2);
  }
  std::mutex::unlock(&stru_1EE418980);
}

void MRLModelReset(uint64_t a1)
{
  std::mutex::lock(&stru_1EE418980);
  if (a1)
  {
    dword_1EE418968 = *(_DWORD *)(a1 + 224);
    if (*(_BYTE *)(a1 + 188))
      sub_19C0A61A8(a1);
    *(_BYTE *)(a1 + 188) = 0;
  }
  std::mutex::unlock(&stru_1EE418980);
}

void sub_19C087C5C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

uint64_t MRLModelLock(uint64_t a1)
{
  int v2;
  unsigned int v3;
  size_t v5;
  unint64_t v6;

  std::mutex::lock(&stru_1EE418980);
  if (a1)
  {
    dword_1EE418968 = *(_DWORD *)(a1 + 224);
    v2 = *(unsigned __int8 *)(a1 + 228);
    if (*(_BYTE *)(a1 + 228))
      goto LABEL_3;
    v5 = sub_19C0A5E60(a1);
    v6 = sub_19C0A5E44(a1);
    v3 = 0;
    if (!v6 || !v5)
      goto LABEL_4;
    if (v6 % getpagesize() || mlock((const void *)v6, v5) == -1)
    {
LABEL_3:
      v3 = 0;
    }
    else
    {
      v3 = 1;
      *(_BYTE *)(a1 + 228) = 1;
    }
LABEL_4:
    if (v2)
      a1 = 1;
    else
      a1 = v3;
  }
  std::mutex::unlock(&stru_1EE418980);
  return a1;
}

void sub_19C087D34(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C087D4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C087D64(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

uint64_t MRLModelUnlock(uint64_t a1)
{
  size_t v2;
  const void *v3;

  std::mutex::lock(&stru_1EE418980);
  if (a1)
  {
    dword_1EE418968 = *(_DWORD *)(a1 + 224);
    if (*(_BYTE *)(a1 + 228)
      && (v2 = sub_19C0A5E60(a1), (v3 = (const void *)sub_19C0A5E44(a1)) != 0)
      && munlock(v3, v2) != -1)
    {
      *(_BYTE *)(a1 + 228) = 0;
      a1 = 1;
    }
    else
    {
      a1 = 0;
    }
  }
  std::mutex::unlock(&stru_1EE418980);
  return a1;
}

void sub_19C087E08(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C087E20(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

void sub_19C087E38(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

uint64_t MRLModelSetMaxSequenceLength(uint64_t a1, int a2)
{
  uint64_t v4;

  std::mutex::lock(&stru_1EE418980);
  if (!a1)
    goto LABEL_6;
  dword_1EE418968 = *(_DWORD *)(a1 + 224);
  if (*(_BYTE *)(a1 + 188))
    sub_19C0A61A8(a1);
  *(_BYTE *)(a1 + 188) = 0;
  if ((a2 - 1) <= 0x270E)
  {
    v4 = 0;
    *(_DWORD *)(a1 + 220) = a2;
    *(_DWORD *)(a1 + 224) = a2;
    dword_1EE418968 = a2;
  }
  else
  {
LABEL_6:
    v4 = 0xFFFFFFFFLL;
  }
  std::mutex::unlock(&stru_1EE418980);
  return v4;
}

void sub_19C087EE0(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_1EE418980);
  _Unwind_Resume(a1);
}

CFMutableDataRef MRLModelCopyFlatWeights(uint64_t a1, _DWORD *a2)
{
  CFMutableDataRef Mutable;

  MRLModelGetWeights_0(a1);
  Mutable = CFDataCreateMutable(0, 0);
  if (a2)
    *a2 = *(_QWORD *)(a1 + 136);
  return Mutable;
}

void sub_19C087FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL MRLModelConvertFlatWeights(const char *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  void *v11;
  __CFData *v12;
  const __CFData *v13;
  void *v14;
  uint64_t v16;
  _BYTE v17[120];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _BYTE v21[408];
  _QWORD v22[20];

  v22[19] = *MEMORY[0x1E0C80C00];
  sub_19C088500(v20);
  std::istream::seekg();
  std::istream::tellg();
  v6 = v18;
  std::istream::seekg();
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, 0x8000100u);
  Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, (const void *)kMRLModelFileLocationKey, v8);
  v10 = MRLModelCreate(Mutable);
  MRLModelGetWeights_0(v10);
  if ((_DWORD)v18)
    goto LABEL_15;
  v11 = (void *)operator new[]();
  std::istream::read();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v20 + *(_QWORD *)(v20[0] - 24)), *(_DWORD *)&v21[*(_QWORD *)(v20[0] - 24) + 16] | 4);
  sub_19C0A64D8(v10);
  if (a4)
  {
    if (a4 != 8)
    {
      v13 = 0;
      goto LABEL_10;
    }
    v12 = MRLModelCopyQuantizedSerializedData(v10, 8);
  }
  else
  {
    v12 = MRLModelCopySerializedData(v10);
  }
  v13 = v12;
LABEL_10:
  sub_19C088618(&v16);
  CFDataGetBytePtr(v13);
  CFDataGetLength(v13);
  std::ostream::write();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v17[*(_QWORD *)(v16 - 24) - 8], *(_DWORD *)&v17[*(_QWORD *)(v16 - 24) + 24] | 4);
  CFRelease(v13);
  operator delete[](v11);
  std::mutex::lock(&stru_1EE418980);
  if (v10)
  {
    dword_1EE418968 = *(_DWORD *)(v10 + 224);
    v14 = (void *)sub_19C0A6C40(v10);
    operator delete(v14);
  }
  std::mutex::unlock(&stru_1EE418980);
  CFRelease(Mutable);
  v16 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v17[*(_QWORD *)(v16 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1A1AD1A64](v17);
  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](&v19);
LABEL_15:
  v20[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1AD1A64](v21);
  std::istream::~istream();
  MEMORY[0x1A1AD1C08](v22);
  return v6 == 0;
}

void sub_19C088440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  sub_19C088784(&STACK[0x258]);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C088500(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1A1AD1A58](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_19C0885D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1AD1C08](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C088618(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1A1AD1A58](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_19C0886E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C08872C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1AD1A64](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](a1 + 52);
  return a1;
}

_QWORD *sub_19C088784(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1AD1A64](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1A1AD1C08](a1 + 53);
  return a1;
}

char *sub_19C0887DC(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3) + 1;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * (v5 >> 3)];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v12 = *(const void **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v13)
  {
    v14 = &v9[v5];
    if (v13 < 0)
      sub_19C07DA0C();
    v15 = (char *)operator new(v13);
    *(_QWORD *)v10 = v15;
    v16 = &v15[4 * (v13 >> 2)];
    *((_QWORD *)v14 + 1) = v15;
    *((_QWORD *)v14 + 2) = v16;
    memcpy(v15, v12, v13);
    *((_QWORD *)v14 + 1) = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_19C0889B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  sub_19C0889DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0889DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

float *sub_19C088A48(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  int v33;
  int v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  float *v58;
  float *v59;
  float *v60;
  float *v61;
  float v62;
  float *v63;
  float v64;
  float *v65;
  float v66;
  int v67;
  float v68;
  float v69;
  BOOL v70;
  float *v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float *v76;
  float v77;
  float v78;
  int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  int v91;
  float v92;
  float v93;
  int v94;
  int v95;
  float v96;
  int v97;
  float v98;
  float v99;
  float *v100;
  BOOL v102;
  uint64_t v103;
  float *v104;
  float *v105;
  float v106;
  unint64_t v107;
  float v108;
  float *v109;
  int64_t v110;
  float *v111;
  int64_t v112;
  BOOL v113;
  uint64_t v114;
  float *v115;
  float *v116;
  float v117;
  int v118;
  float *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  float v125;
  float *v126;
  float *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  float *v132;
  int v133;
  float *v134;
  int v135;
  int v136;
  float *v137;
  float v138;
  float v139;
  float v140;
  float *v141;
  float v142;
  float v143;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v82 = *(a2 - 1);
        v83 = v8[1];
        if (v82 > v83)
        {
          v84 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v84;
          v8[1] = v82;
          *(a2 - 1) = v83;
        }
        return result;
      case 3:
        v85 = v8[3];
        v86 = v8[1];
        v87 = *(a2 - 1);
        if (v85 <= v86)
        {
          if (v87 > v85)
          {
            v135 = *((_DWORD *)v8 + 2);
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v135;
            v8[3] = v87;
            *(a2 - 1) = v85;
            v92 = v8[3];
            v98 = v8[1];
            if (v92 > v98)
            {
              v136 = *(_DWORD *)v8;
              *v8 = v8[2];
              *((_DWORD *)v8 + 2) = v136;
              goto LABEL_162;
            }
          }
        }
        else
        {
          v88 = *(_DWORD *)v8;
          if (v87 <= v85)
          {
            *v8 = v8[2];
            *((_DWORD *)v8 + 2) = v88;
            v8[1] = v85;
            v8[3] = v86;
            v143 = *(a2 - 1);
            if (v143 <= v86)
              return result;
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v8[3] = v143;
          }
          else
          {
            *v8 = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v8[1] = v87;
          }
          *(a2 - 1) = v86;
        }
        return result;
      case 4:
        return sub_19C08997C(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_19C08997C(v8, v8 + 2, v8 + 4, v8 + 6);
        v89 = *(a2 - 1);
        v90 = v8[7];
        if (v89 > v90)
        {
          v91 = *((_DWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v91;
          v8[7] = v89;
          *(a2 - 1) = v90;
          v92 = v8[7];
          v93 = v8[5];
          if (v92 > v93)
          {
            v94 = *((_DWORD *)v8 + 4);
            v95 = *((_DWORD *)v8 + 6);
            *((_DWORD *)v8 + 4) = v95;
            *((_DWORD *)v8 + 6) = v94;
            v8[5] = v92;
            v8[7] = v93;
            v96 = v8[3];
            if (v92 > v96)
            {
              v97 = *((_DWORD *)v8 + 2);
              *((_DWORD *)v8 + 2) = v95;
              *((_DWORD *)v8 + 4) = v97;
              v8[3] = v92;
              v8[5] = v96;
              v98 = v8[1];
              if (v92 > v98)
              {
                v99 = *v8;
                *(_DWORD *)v8 = v95;
                v8[2] = v99;
LABEL_162:
                v8[1] = v92;
                v8[3] = v98;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v100 = v8 + 2;
          v102 = v8 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v8;
              do
              {
                v106 = v104[3];
                if (v106 > v104[1])
                {
                  v107 = 0;
                  v108 = *v100;
                  do
                  {
                    v109 = &v104[v107 / 4];
                    v109[2] = v104[v107 / 4];
                    v109[3] = v104[v107 / 4 + 1];
                    if (v103 == v107)
                    {
                      v105 = v8;
                      goto LABEL_121;
                    }
                    v107 -= 8;
                  }
                  while (v106 > *(v109 - 1));
                  v105 = &v100[v107 / 4];
LABEL_121:
                  *v105 = v108;
                  v105[1] = v106;
                }
                v100 += 2;
                v104 += 2;
                v103 -= 8;
              }
              while (v100 != a2);
            }
          }
          else if (!v102)
          {
            v137 = v8 + 1;
            do
            {
              v138 = v7[3];
              v139 = v7[1];
              v7 = v100;
              if (v138 > v139)
              {
                v140 = *v100;
                v141 = v137;
                do
                {
                  v141[1] = *(v141 - 1);
                  v141[2] = *v141;
                  v142 = *(v141 - 2);
                  v141 -= 2;
                }
                while (v138 > v142);
                v141[1] = v140;
                v141[2] = v138;
              }
              v100 = v7 + 2;
              v137 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[2 * ((unint64_t)v10 >> 1)];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v17 = v8[1];
            v18 = v12[1];
            if (v17 <= v18)
            {
              if (v13 > v17)
              {
                v24 = *v8;
                *v8 = *(a2 - 2);
                *(a2 - 2) = v24;
                v8[1] = v13;
                *(a2 - 1) = v17;
                v25 = v8[1];
                v26 = v12[1];
                if (v25 > v26)
                {
                  v27 = *v12;
                  *v12 = *v8;
                  *v8 = v27;
                  v12[1] = v25;
                  v8[1] = v26;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
            }
            else
            {
              v19 = *(_DWORD *)v12;
              if (v13 <= v17)
              {
                *v12 = *v8;
                *(_DWORD *)v8 = v19;
                v12[1] = v17;
                v8[1] = v18;
                v38 = *(a2 - 1);
                if (v38 <= v18)
                  goto LABEL_32;
                *v8 = *(a2 - 2);
                *((_DWORD *)a2 - 2) = v19;
                v8[1] = v38;
              }
              else
              {
                *v12 = *(a2 - 2);
                *((_DWORD *)a2 - 2) = v19;
                v12[1] = v13;
              }
              *(a2 - 1) = v18;
            }
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v40 = v8[1];
            v39 = *v8;
            if (*(v8 - 1) > v40)
              goto LABEL_58;
            if (v40 <= *(a2 - 1))
            {
              v73 = v8 + 2;
              do
              {
                v8 = v73;
                if (v73 >= a2)
                  break;
                v74 = v73[1];
                v73 += 2;
              }
              while (v40 <= v74);
            }
            else
            {
              v71 = v8;
              do
              {
                v8 = v71 + 2;
                v72 = v71[3];
                v71 += 2;
              }
              while (v40 <= v72);
            }
            v75 = a2;
            if (v8 < a2)
            {
              v76 = a2;
              do
              {
                v75 = v76 - 2;
                v77 = *(v76 - 1);
                v76 -= 2;
              }
              while (v40 > v77);
            }
            while (v8 < v75)
            {
              v78 = *v8;
              *v8 = *v75;
              *v75 = v78;
              v79 = *((_DWORD *)v8 + 1);
              v8[1] = v75[1];
              *((_DWORD *)v75 + 1) = v79;
              do
              {
                v80 = v8[3];
                v8 += 2;
              }
              while (v40 <= v80);
              do
              {
                v81 = *(v75 - 1);
                v75 -= 2;
              }
              while (v40 > v81);
            }
            if (v8 - 2 != v7)
            {
              *v7 = *(v8 - 2);
              v7[1] = *(v8 - 1);
            }
            a4 = 0;
            *(v8 - 2) = v39;
            *(v8 - 1) = v40;
            continue;
          }
          v14 = v12[1];
          v15 = v8[1];
          if (v14 <= v15)
          {
            if (v13 > v14)
            {
              v20 = *(_DWORD *)v12;
              *v12 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v20;
              v12[1] = v13;
              *(a2 - 1) = v14;
              v21 = v12[1];
              v22 = v8[1];
              if (v21 > v22)
              {
                v23 = *v8;
                *v8 = *v12;
                *v12 = v23;
                v8[1] = v21;
                v12[1] = v22;
              }
            }
          }
          else
          {
            v16 = *v8;
            if (v13 <= v14)
            {
              *v8 = *v12;
              *v12 = v16;
              v8[1] = v14;
              v12[1] = v15;
              v28 = *(a2 - 1);
              if (v28 <= v15)
                goto LABEL_23;
              *v12 = *(a2 - 2);
              *(a2 - 2) = v16;
              v12[1] = v28;
            }
            else
            {
              *v8 = *(a2 - 2);
              *(a2 - 2) = v16;
              v8[1] = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v29 = &v8[2 * v11];
          v30 = *(v29 - 1);
          v31 = v8[3];
          v32 = *(a2 - 3);
          if (v30 <= v31)
          {
            if (v32 > v30)
            {
              v34 = *((_DWORD *)v29 - 2);
              *(v29 - 2) = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v34;
              *(v29 - 1) = v32;
              *(a2 - 3) = v30;
              v35 = *(v29 - 1);
              v36 = v8[3];
              if (v35 > v36)
              {
                v37 = *((_DWORD *)v8 + 2);
                v8[2] = *(v29 - 2);
                *((_DWORD *)v29 - 2) = v37;
                v8[3] = v35;
                *(v29 - 1) = v36;
              }
            }
          }
          else
          {
            v33 = *((_DWORD *)v8 + 2);
            if (v32 <= v30)
            {
              v8[2] = *(v29 - 2);
              *((_DWORD *)v29 - 2) = v33;
              v8[3] = v30;
              *(v29 - 1) = v31;
              v41 = *(a2 - 3);
              if (v41 <= v31)
                goto LABEL_37;
              *(v29 - 2) = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              *(v29 - 1) = v41;
            }
            else
            {
              v8[2] = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              v8[3] = v32;
            }
            *(a2 - 3) = v31;
          }
LABEL_37:
          v42 = v29[3];
          v43 = v8[5];
          v44 = *(a2 - 5);
          if (v42 <= v43)
          {
            if (v44 > v42)
            {
              v46 = *((_DWORD *)v29 + 2);
              v29[2] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v46;
              v29[3] = v44;
              *(a2 - 5) = v42;
              v47 = v29[3];
              v48 = v8[5];
              if (v47 > v48)
              {
                v49 = *((_DWORD *)v8 + 4);
                v8[4] = v29[2];
                *((_DWORD *)v29 + 2) = v49;
                v8[5] = v47;
                v29[3] = v48;
              }
            }
          }
          else
          {
            v45 = *((_DWORD *)v8 + 4);
            if (v44 <= v42)
            {
              v8[4] = v29[2];
              *((_DWORD *)v29 + 2) = v45;
              v8[5] = v42;
              v29[3] = v43;
              v50 = *(a2 - 5);
              if (v50 <= v43)
                goto LABEL_46;
              v29[2] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v29[3] = v50;
            }
            else
            {
              v8[4] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v8[5] = v44;
            }
            *(a2 - 5) = v43;
          }
LABEL_46:
          v51 = v12[1];
          v52 = *(v29 - 1);
          v53 = v29[3];
          if (v51 <= v52)
          {
            v54 = *v12;
            if (v53 <= v51)
              goto LABEL_52;
            v55 = v29[2];
            *v12 = v55;
            v29[2] = v54;
            v12[1] = v53;
            v29[3] = v51;
            if (v53 > v52)
            {
              v54 = *(v29 - 2);
              *(v29 - 2) = v55;
              *v12 = v54;
              *(v29 - 1) = v53;
              v12[1] = v52;
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          v54 = *(v29 - 2);
          if (v53 > v51)
          {
            *(v29 - 2) = v29[2];
            v29[2] = v54;
            *(v29 - 1) = v53;
            v29[3] = v52;
            v54 = *v12;
LABEL_52:
            v52 = v51;
            goto LABEL_56;
          }
          *(v29 - 2) = *v12;
          *v12 = v54;
          *(v29 - 1) = v51;
          v12[1] = v52;
          if (v53 > v52)
          {
            v55 = v29[2];
            *v12 = v55;
            v29[2] = v54;
            v12[1] = v53;
            v29[3] = v52;
LABEL_55:
            v52 = v53;
            v54 = v55;
          }
LABEL_56:
          v56 = *v8;
          *v8 = v54;
          *v12 = v56;
          v57 = *((_DWORD *)v8 + 1);
          v8[1] = v52;
          *((_DWORD *)v29 + 1) = v57;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v39 = *v8;
          v40 = v8[1];
LABEL_58:
          v58 = v8;
          do
          {
            v59 = v58;
            v58 += 2;
          }
          while (v59[3] > v40);
          v60 = a2;
          if (v59 == v8)
          {
            v63 = a2;
            while (v58 < v63)
            {
              v61 = v63 - 2;
              v64 = *(v63 - 1);
              v63 -= 2;
              if (v64 > v40)
                goto LABEL_66;
            }
            v61 = v63;
            v8 = v58;
          }
          else
          {
            do
            {
              v61 = v60 - 2;
              v62 = *(v60 - 1);
              v60 -= 2;
            }
            while (v62 <= v40);
LABEL_66:
            v8 = v58;
            if (v58 < v61)
            {
              v65 = v61;
              do
              {
                v66 = *v8;
                *v8 = *v65;
                *v65 = v66;
                v67 = *((_DWORD *)v8 + 1);
                v8[1] = v65[1];
                *((_DWORD *)v65 + 1) = v67;
                do
                {
                  v68 = v8[3];
                  v8 += 2;
                }
                while (v68 > v40);
                do
                {
                  v69 = *(v65 - 1);
                  v65 -= 2;
                }
                while (v69 <= v40);
              }
              while (v8 < v65);
            }
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          *(v8 - 2) = v39;
          *(v8 - 1) = v40;
          if (v58 < v61)
            goto LABEL_77;
          v70 = sub_19C0895D4(v7, v8 - 2);
          result = (float *)sub_19C0895D4(v8, a2);
          if (!(_DWORD)result)
          {
            if (v70)
              continue;
LABEL_77:
            result = (float *)sub_19C088A48(v7, v8 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 2;
          if (v70)
            return result;
          goto LABEL_2;
        }
        if (v8 != a2)
        {
          v110 = (unint64_t)(v10 - 2) >> 1;
          v111 = v8 + 2;
          v112 = v110;
          do
          {
            if (v110 >= v112)
            {
              v114 = (2 * v112) | 1;
              v115 = &v111[4 * v112];
              if (2 * v112 + 2 < v10 && v115[1] > v115[3])
              {
                v115 += 2;
                v114 = 2 * v112 + 2;
              }
              v116 = &v8[2 * v112];
              v117 = v116[1];
              if (v115[1] <= v117)
              {
                v118 = *(_DWORD *)v116;
                do
                {
                  v119 = v116;
                  v116 = v115;
                  *v119 = *v115;
                  v119[1] = v115[1];
                  if (v110 < v114)
                    break;
                  result = (float *)(2 * v114);
                  v120 = (2 * v114) | 1;
                  v115 = &v111[4 * v114];
                  v121 = 2 * v114 + 2;
                  if (v121 < v10 && v115[1] > v115[3])
                  {
                    v115 += 2;
                    v120 = v121;
                  }
                  v114 = v120;
                }
                while (v115[1] <= v117);
                *(_DWORD *)v116 = v118;
                v116[1] = v117;
              }
            }
            v113 = v112-- <= 0;
          }
          while (!v113);
          v122 = (unint64_t)v9 >> 3;
          do
          {
            v123 = 0;
            v124 = *v8;
            v125 = v8[1];
            v126 = v8;
            do
            {
              v127 = v126;
              v126 += 2 * v123 + 2;
              v128 = 2 * v123;
              v123 = (2 * v123) | 1;
              v129 = v128 + 2;
              if (v129 < v122 && v126[1] > v126[3])
              {
                v126 += 2;
                v123 = v129;
              }
              *v127 = *v126;
              v127[1] = v126[1];
            }
            while (v123 <= (uint64_t)((unint64_t)(v122 - 2) >> 1));
            if (v126 == a2 - 2)
            {
              *v126 = v124;
            }
            else
            {
              *v126 = *(a2 - 2);
              v126[1] = *(a2 - 1);
              *(a2 - 2) = v124;
              *(a2 - 1) = v125;
              v130 = (char *)v126 - (char *)v8 + 8;
              if (v130 < 9)
                goto LABEL_146;
              v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
              v132 = &v8[2 * v131];
              v125 = v126[1];
              if (v132[1] <= v125)
                goto LABEL_146;
              v133 = *(_DWORD *)v126;
              do
              {
                v134 = v126;
                v126 = v132;
                *v134 = *v132;
                v134[1] = v132[1];
                if (!v131)
                  break;
                v131 = (v131 - 1) >> 1;
                v132 = &v8[2 * v131];
              }
              while (v132[1] > v125);
              *(_DWORD *)v126 = v133;
            }
            v126[1] = v125;
LABEL_146:
            a2 -= 2;
            v113 = v122-- <= 2;
          }
          while (!v113);
        }
        return result;
    }
  }
}

BOOL sub_19C0895D4(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float *v38;
  uint64_t v39;
  int v40;
  float *v41;
  float v42;
  int v43;
  uint64_t v44;
  float *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 <= v20)
        return 1;
      v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = *((_DWORD *)a1 + 4);
      v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      v26 = a1[3];
      if (v22 <= v26)
        return 1;
      v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      v28 = a1[1];
      if (v22 <= v28)
        return 1;
      v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 > v13)
      {
        v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13)
            goto LABEL_30;
          a1[2] = a1[4];
          a1[4] = v17;
          v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        v34 = *((_DWORD *)a1 + 2);
        v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          v18 = a1 + 1;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v42 = v38[1];
        if (v42 > v41[1])
          break;
LABEL_39:
        v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_DWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

float *sub_19C08997C(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v4 = a2[1];
  v5 = result[1];
  v6 = a3[1];
  if (v4 > v5)
  {
    v7 = *result;
    if (v6 <= v4)
    {
      *result = *a2;
      *a2 = v7;
      result[1] = v4;
      a2[1] = v5;
      v4 = a3[1];
      if (v4 <= v5)
        goto LABEL_11;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v4;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      result[1] = v6;
    }
    a3[1] = v5;
    v4 = v5;
LABEL_11:
    v12 = a4[1];
    if (v12 <= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 <= v4)
  {
    v4 = a3[1];
    v12 = a4[1];
    if (v12 <= v6)
      return result;
    goto LABEL_14;
  }
  v8 = *a2;
  *a2 = *a3;
  *a3 = v8;
  a2[1] = v6;
  a3[1] = v4;
  v9 = a2[1];
  v10 = result[1];
  if (v9 <= v10)
    goto LABEL_11;
  v11 = *result;
  *result = *a2;
  *a2 = v11;
  result[1] = v9;
  a2[1] = v10;
  v4 = a3[1];
  v12 = a4[1];
  if (v12 <= v4)
    return result;
LABEL_14:
  v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  a3[1] = v12;
  a4[1] = v4;
  v14 = a3[1];
  v15 = a2[1];
  if (v14 > v15)
  {
    v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    a2[1] = v14;
    a3[1] = v15;
    v17 = a2[1];
    v18 = result[1];
    if (v17 > v18)
    {
      v19 = *result;
      *result = *a2;
      *a2 = v19;
      result[1] = v17;
      a2[1] = v18;
    }
  }
  return result;
}

float *sub_19C089AD0(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  int v33;
  int v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  float *v58;
  float *v59;
  float *v60;
  float *v61;
  float v62;
  float *v63;
  float v64;
  float *v65;
  float v66;
  int v67;
  float v68;
  float v69;
  BOOL v70;
  float *v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float *v76;
  float v77;
  float v78;
  int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  int v91;
  float v92;
  float v93;
  int v94;
  int v95;
  float v96;
  int v97;
  float v98;
  float v99;
  float *v100;
  BOOL v102;
  uint64_t v103;
  float *v104;
  float *v105;
  float v106;
  unint64_t v107;
  float v108;
  float *v109;
  int64_t v110;
  float *v111;
  int64_t v112;
  BOOL v113;
  uint64_t v114;
  float *v115;
  float *v116;
  float v117;
  int v118;
  float *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  float v125;
  float *v126;
  float *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  float *v132;
  int v133;
  float *v134;
  int v135;
  int v136;
  float *v137;
  float v138;
  float v139;
  float v140;
  float *v141;
  float v142;
  float v143;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v82 = *(a2 - 1);
        v83 = v8[1];
        if (v82 > v83)
        {
          v84 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v84;
          v8[1] = v82;
          *(a2 - 1) = v83;
        }
        return result;
      case 3:
        v85 = v8[3];
        v86 = v8[1];
        v87 = *(a2 - 1);
        if (v85 <= v86)
        {
          if (v87 > v85)
          {
            v135 = *((_DWORD *)v8 + 2);
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v135;
            v8[3] = v87;
            *(a2 - 1) = v85;
            v92 = v8[3];
            v98 = v8[1];
            if (v92 > v98)
            {
              v136 = *(_DWORD *)v8;
              *v8 = v8[2];
              *((_DWORD *)v8 + 2) = v136;
              goto LABEL_162;
            }
          }
        }
        else
        {
          v88 = *(_DWORD *)v8;
          if (v87 <= v85)
          {
            *v8 = v8[2];
            *((_DWORD *)v8 + 2) = v88;
            v8[1] = v85;
            v8[3] = v86;
            v143 = *(a2 - 1);
            if (v143 <= v86)
              return result;
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v8[3] = v143;
          }
          else
          {
            *v8 = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v8[1] = v87;
          }
          *(a2 - 1) = v86;
        }
        return result;
      case 4:
        return sub_19C08997C(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_19C08997C(v8, v8 + 2, v8 + 4, v8 + 6);
        v89 = *(a2 - 1);
        v90 = v8[7];
        if (v89 > v90)
        {
          v91 = *((_DWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v91;
          v8[7] = v89;
          *(a2 - 1) = v90;
          v92 = v8[7];
          v93 = v8[5];
          if (v92 > v93)
          {
            v94 = *((_DWORD *)v8 + 4);
            v95 = *((_DWORD *)v8 + 6);
            *((_DWORD *)v8 + 4) = v95;
            *((_DWORD *)v8 + 6) = v94;
            v8[5] = v92;
            v8[7] = v93;
            v96 = v8[3];
            if (v92 > v96)
            {
              v97 = *((_DWORD *)v8 + 2);
              *((_DWORD *)v8 + 2) = v95;
              *((_DWORD *)v8 + 4) = v97;
              v8[3] = v92;
              v8[5] = v96;
              v98 = v8[1];
              if (v92 > v98)
              {
                v99 = *v8;
                *(_DWORD *)v8 = v95;
                v8[2] = v99;
LABEL_162:
                v8[1] = v92;
                v8[3] = v98;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v100 = v8 + 2;
          v102 = v8 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v8;
              do
              {
                v106 = v104[3];
                if (v106 > v104[1])
                {
                  v107 = 0;
                  v108 = *v100;
                  do
                  {
                    v109 = &v104[v107 / 4];
                    v109[2] = v104[v107 / 4];
                    v109[3] = v104[v107 / 4 + 1];
                    if (v103 == v107)
                    {
                      v105 = v8;
                      goto LABEL_121;
                    }
                    v107 -= 8;
                  }
                  while (v106 > *(v109 - 1));
                  v105 = &v100[v107 / 4];
LABEL_121:
                  *v105 = v108;
                  v105[1] = v106;
                }
                v100 += 2;
                v104 += 2;
                v103 -= 8;
              }
              while (v100 != a2);
            }
          }
          else if (!v102)
          {
            v137 = v8 + 1;
            do
            {
              v138 = v7[3];
              v139 = v7[1];
              v7 = v100;
              if (v138 > v139)
              {
                v140 = *v100;
                v141 = v137;
                do
                {
                  v141[1] = *(v141 - 1);
                  v141[2] = *v141;
                  v142 = *(v141 - 2);
                  v141 -= 2;
                }
                while (v138 > v142);
                v141[1] = v140;
                v141[2] = v138;
              }
              v100 = v7 + 2;
              v137 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[2 * ((unint64_t)v10 >> 1)];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v17 = v8[1];
            v18 = v12[1];
            if (v17 <= v18)
            {
              if (v13 > v17)
              {
                v24 = *v8;
                *v8 = *(a2 - 2);
                *(a2 - 2) = v24;
                v8[1] = v13;
                *(a2 - 1) = v17;
                v25 = v8[1];
                v26 = v12[1];
                if (v25 > v26)
                {
                  v27 = *v12;
                  *v12 = *v8;
                  *v8 = v27;
                  v12[1] = v25;
                  v8[1] = v26;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
            }
            else
            {
              v19 = *(_DWORD *)v12;
              if (v13 <= v17)
              {
                *v12 = *v8;
                *(_DWORD *)v8 = v19;
                v12[1] = v17;
                v8[1] = v18;
                v38 = *(a2 - 1);
                if (v38 <= v18)
                  goto LABEL_32;
                *v8 = *(a2 - 2);
                *((_DWORD *)a2 - 2) = v19;
                v8[1] = v38;
              }
              else
              {
                *v12 = *(a2 - 2);
                *((_DWORD *)a2 - 2) = v19;
                v12[1] = v13;
              }
              *(a2 - 1) = v18;
            }
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v40 = v8[1];
            v39 = *v8;
            if (*(v8 - 1) > v40)
              goto LABEL_58;
            if (v40 <= *(a2 - 1))
            {
              v73 = v8 + 2;
              do
              {
                v8 = v73;
                if (v73 >= a2)
                  break;
                v74 = v73[1];
                v73 += 2;
              }
              while (v40 <= v74);
            }
            else
            {
              v71 = v8;
              do
              {
                v8 = v71 + 2;
                v72 = v71[3];
                v71 += 2;
              }
              while (v40 <= v72);
            }
            v75 = a2;
            if (v8 < a2)
            {
              v76 = a2;
              do
              {
                v75 = v76 - 2;
                v77 = *(v76 - 1);
                v76 -= 2;
              }
              while (v40 > v77);
            }
            while (v8 < v75)
            {
              v78 = *v8;
              *v8 = *v75;
              *v75 = v78;
              v79 = *((_DWORD *)v8 + 1);
              v8[1] = v75[1];
              *((_DWORD *)v75 + 1) = v79;
              do
              {
                v80 = v8[3];
                v8 += 2;
              }
              while (v40 <= v80);
              do
              {
                v81 = *(v75 - 1);
                v75 -= 2;
              }
              while (v40 > v81);
            }
            if (v8 - 2 != v7)
            {
              *v7 = *(v8 - 2);
              v7[1] = *(v8 - 1);
            }
            a4 = 0;
            *(v8 - 2) = v39;
            *(v8 - 1) = v40;
            continue;
          }
          v14 = v12[1];
          v15 = v8[1];
          if (v14 <= v15)
          {
            if (v13 > v14)
            {
              v20 = *(_DWORD *)v12;
              *v12 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v20;
              v12[1] = v13;
              *(a2 - 1) = v14;
              v21 = v12[1];
              v22 = v8[1];
              if (v21 > v22)
              {
                v23 = *v8;
                *v8 = *v12;
                *v12 = v23;
                v8[1] = v21;
                v12[1] = v22;
              }
            }
          }
          else
          {
            v16 = *v8;
            if (v13 <= v14)
            {
              *v8 = *v12;
              *v12 = v16;
              v8[1] = v14;
              v12[1] = v15;
              v28 = *(a2 - 1);
              if (v28 <= v15)
                goto LABEL_23;
              *v12 = *(a2 - 2);
              *(a2 - 2) = v16;
              v12[1] = v28;
            }
            else
            {
              *v8 = *(a2 - 2);
              *(a2 - 2) = v16;
              v8[1] = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v29 = &v8[2 * v11];
          v30 = *(v29 - 1);
          v31 = v8[3];
          v32 = *(a2 - 3);
          if (v30 <= v31)
          {
            if (v32 > v30)
            {
              v34 = *((_DWORD *)v29 - 2);
              *(v29 - 2) = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v34;
              *(v29 - 1) = v32;
              *(a2 - 3) = v30;
              v35 = *(v29 - 1);
              v36 = v8[3];
              if (v35 > v36)
              {
                v37 = *((_DWORD *)v8 + 2);
                v8[2] = *(v29 - 2);
                *((_DWORD *)v29 - 2) = v37;
                v8[3] = v35;
                *(v29 - 1) = v36;
              }
            }
          }
          else
          {
            v33 = *((_DWORD *)v8 + 2);
            if (v32 <= v30)
            {
              v8[2] = *(v29 - 2);
              *((_DWORD *)v29 - 2) = v33;
              v8[3] = v30;
              *(v29 - 1) = v31;
              v41 = *(a2 - 3);
              if (v41 <= v31)
                goto LABEL_37;
              *(v29 - 2) = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              *(v29 - 1) = v41;
            }
            else
            {
              v8[2] = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              v8[3] = v32;
            }
            *(a2 - 3) = v31;
          }
LABEL_37:
          v42 = v29[3];
          v43 = v8[5];
          v44 = *(a2 - 5);
          if (v42 <= v43)
          {
            if (v44 > v42)
            {
              v46 = *((_DWORD *)v29 + 2);
              v29[2] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v46;
              v29[3] = v44;
              *(a2 - 5) = v42;
              v47 = v29[3];
              v48 = v8[5];
              if (v47 > v48)
              {
                v49 = *((_DWORD *)v8 + 4);
                v8[4] = v29[2];
                *((_DWORD *)v29 + 2) = v49;
                v8[5] = v47;
                v29[3] = v48;
              }
            }
          }
          else
          {
            v45 = *((_DWORD *)v8 + 4);
            if (v44 <= v42)
            {
              v8[4] = v29[2];
              *((_DWORD *)v29 + 2) = v45;
              v8[5] = v42;
              v29[3] = v43;
              v50 = *(a2 - 5);
              if (v50 <= v43)
                goto LABEL_46;
              v29[2] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v29[3] = v50;
            }
            else
            {
              v8[4] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v8[5] = v44;
            }
            *(a2 - 5) = v43;
          }
LABEL_46:
          v51 = v12[1];
          v52 = *(v29 - 1);
          v53 = v29[3];
          if (v51 <= v52)
          {
            v54 = *v12;
            if (v53 <= v51)
              goto LABEL_52;
            v55 = v29[2];
            *v12 = v55;
            v29[2] = v54;
            v12[1] = v53;
            v29[3] = v51;
            if (v53 > v52)
            {
              v54 = *(v29 - 2);
              *(v29 - 2) = v55;
              *v12 = v54;
              *(v29 - 1) = v53;
              v12[1] = v52;
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          v54 = *(v29 - 2);
          if (v53 > v51)
          {
            *(v29 - 2) = v29[2];
            v29[2] = v54;
            *(v29 - 1) = v53;
            v29[3] = v52;
            v54 = *v12;
LABEL_52:
            v52 = v51;
            goto LABEL_56;
          }
          *(v29 - 2) = *v12;
          *v12 = v54;
          *(v29 - 1) = v51;
          v12[1] = v52;
          if (v53 > v52)
          {
            v55 = v29[2];
            *v12 = v55;
            v29[2] = v54;
            v12[1] = v53;
            v29[3] = v52;
LABEL_55:
            v52 = v53;
            v54 = v55;
          }
LABEL_56:
          v56 = *v8;
          *v8 = v54;
          *v12 = v56;
          v57 = *((_DWORD *)v8 + 1);
          v8[1] = v52;
          *((_DWORD *)v29 + 1) = v57;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v39 = *v8;
          v40 = v8[1];
LABEL_58:
          v58 = v8;
          do
          {
            v59 = v58;
            v58 += 2;
          }
          while (v59[3] > v40);
          v60 = a2;
          if (v59 == v8)
          {
            v63 = a2;
            while (v58 < v63)
            {
              v61 = v63 - 2;
              v64 = *(v63 - 1);
              v63 -= 2;
              if (v64 > v40)
                goto LABEL_66;
            }
            v61 = v63;
            v8 = v58;
          }
          else
          {
            do
            {
              v61 = v60 - 2;
              v62 = *(v60 - 1);
              v60 -= 2;
            }
            while (v62 <= v40);
LABEL_66:
            v8 = v58;
            if (v58 < v61)
            {
              v65 = v61;
              do
              {
                v66 = *v8;
                *v8 = *v65;
                *v65 = v66;
                v67 = *((_DWORD *)v8 + 1);
                v8[1] = v65[1];
                *((_DWORD *)v65 + 1) = v67;
                do
                {
                  v68 = v8[3];
                  v8 += 2;
                }
                while (v68 > v40);
                do
                {
                  v69 = *(v65 - 1);
                  v65 -= 2;
                }
                while (v69 <= v40);
              }
              while (v8 < v65);
            }
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          *(v8 - 2) = v39;
          *(v8 - 1) = v40;
          if (v58 < v61)
            goto LABEL_77;
          v70 = sub_19C08A65C(v7, v8 - 2);
          result = (float *)sub_19C08A65C(v8, a2);
          if (!(_DWORD)result)
          {
            if (v70)
              continue;
LABEL_77:
            result = (float *)sub_19C089AD0(v7, v8 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 2;
          if (v70)
            return result;
          goto LABEL_2;
        }
        if (v8 != a2)
        {
          v110 = (unint64_t)(v10 - 2) >> 1;
          v111 = v8 + 2;
          v112 = v110;
          do
          {
            if (v110 >= v112)
            {
              v114 = (2 * v112) | 1;
              v115 = &v111[4 * v112];
              if (2 * v112 + 2 < v10 && v115[1] > v115[3])
              {
                v115 += 2;
                v114 = 2 * v112 + 2;
              }
              v116 = &v8[2 * v112];
              v117 = v116[1];
              if (v115[1] <= v117)
              {
                v118 = *(_DWORD *)v116;
                do
                {
                  v119 = v116;
                  v116 = v115;
                  *v119 = *v115;
                  v119[1] = v115[1];
                  if (v110 < v114)
                    break;
                  result = (float *)(2 * v114);
                  v120 = (2 * v114) | 1;
                  v115 = &v111[4 * v114];
                  v121 = 2 * v114 + 2;
                  if (v121 < v10 && v115[1] > v115[3])
                  {
                    v115 += 2;
                    v120 = v121;
                  }
                  v114 = v120;
                }
                while (v115[1] <= v117);
                *(_DWORD *)v116 = v118;
                v116[1] = v117;
              }
            }
            v113 = v112-- <= 0;
          }
          while (!v113);
          v122 = (unint64_t)v9 >> 3;
          do
          {
            v123 = 0;
            v124 = *v8;
            v125 = v8[1];
            v126 = v8;
            do
            {
              v127 = v126;
              v126 += 2 * v123 + 2;
              v128 = 2 * v123;
              v123 = (2 * v123) | 1;
              v129 = v128 + 2;
              if (v129 < v122 && v126[1] > v126[3])
              {
                v126 += 2;
                v123 = v129;
              }
              *v127 = *v126;
              v127[1] = v126[1];
            }
            while (v123 <= (uint64_t)((unint64_t)(v122 - 2) >> 1));
            if (v126 == a2 - 2)
            {
              *v126 = v124;
            }
            else
            {
              *v126 = *(a2 - 2);
              v126[1] = *(a2 - 1);
              *(a2 - 2) = v124;
              *(a2 - 1) = v125;
              v130 = (char *)v126 - (char *)v8 + 8;
              if (v130 < 9)
                goto LABEL_146;
              v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
              v132 = &v8[2 * v131];
              v125 = v126[1];
              if (v132[1] <= v125)
                goto LABEL_146;
              v133 = *(_DWORD *)v126;
              do
              {
                v134 = v126;
                v126 = v132;
                *v134 = *v132;
                v134[1] = v132[1];
                if (!v131)
                  break;
                v131 = (v131 - 1) >> 1;
                v132 = &v8[2 * v131];
              }
              while (v132[1] > v125);
              *(_DWORD *)v126 = v133;
            }
            v126[1] = v125;
LABEL_146:
            a2 -= 2;
            v113 = v122-- <= 2;
          }
          while (!v113);
        }
        return result;
    }
  }
}

BOOL sub_19C08A65C(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float *v38;
  uint64_t v39;
  int v40;
  float *v41;
  float v42;
  int v43;
  uint64_t v44;
  float *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 <= v20)
        return 1;
      v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = *((_DWORD *)a1 + 4);
      v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      v26 = a1[3];
      if (v22 <= v26)
        return 1;
      v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      v28 = a1[1];
      if (v22 <= v28)
        return 1;
      v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 > v13)
      {
        v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13)
            goto LABEL_30;
          a1[2] = a1[4];
          a1[4] = v17;
          v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        v34 = *((_DWORD *)a1 + 2);
        v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          v18 = a1 + 1;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v42 = v38[1];
        if (v42 > v41[1])
          break;
LABEL_39:
        v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_DWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

float *sub_19C08AA04(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  int v33;
  int v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  float *v58;
  float *v59;
  float *v60;
  float *v61;
  float v62;
  float *v63;
  float v64;
  float *v65;
  float v66;
  int v67;
  float v68;
  float v69;
  BOOL v70;
  float *v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float *v76;
  float v77;
  float v78;
  int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  int v91;
  float v92;
  float v93;
  int v94;
  int v95;
  float v96;
  int v97;
  float v98;
  float v99;
  float *v100;
  BOOL v102;
  uint64_t v103;
  float *v104;
  float *v105;
  float v106;
  unint64_t v107;
  float v108;
  float *v109;
  int64_t v110;
  float *v111;
  int64_t v112;
  BOOL v113;
  uint64_t v114;
  float *v115;
  float *v116;
  float v117;
  int v118;
  float *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  float v125;
  float *v126;
  float *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  float *v132;
  int v133;
  float *v134;
  int v135;
  int v136;
  float *v137;
  float v138;
  float v139;
  float v140;
  float *v141;
  float v142;
  float v143;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v82 = *(a2 - 1);
        v83 = v8[1];
        if (v82 > v83)
        {
          v84 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v84;
          v8[1] = v82;
          *(a2 - 1) = v83;
        }
        return result;
      case 3:
        v85 = v8[3];
        v86 = v8[1];
        v87 = *(a2 - 1);
        if (v85 <= v86)
        {
          if (v87 > v85)
          {
            v135 = *((_DWORD *)v8 + 2);
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v135;
            v8[3] = v87;
            *(a2 - 1) = v85;
            v92 = v8[3];
            v98 = v8[1];
            if (v92 > v98)
            {
              v136 = *(_DWORD *)v8;
              *v8 = v8[2];
              *((_DWORD *)v8 + 2) = v136;
              goto LABEL_162;
            }
          }
        }
        else
        {
          v88 = *(_DWORD *)v8;
          if (v87 <= v85)
          {
            *v8 = v8[2];
            *((_DWORD *)v8 + 2) = v88;
            v8[1] = v85;
            v8[3] = v86;
            v143 = *(a2 - 1);
            if (v143 <= v86)
              return result;
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v8[3] = v143;
          }
          else
          {
            *v8 = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v8[1] = v87;
          }
          *(a2 - 1) = v86;
        }
        return result;
      case 4:
        return sub_19C08997C(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_19C08997C(v8, v8 + 2, v8 + 4, v8 + 6);
        v89 = *(a2 - 1);
        v90 = v8[7];
        if (v89 > v90)
        {
          v91 = *((_DWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v91;
          v8[7] = v89;
          *(a2 - 1) = v90;
          v92 = v8[7];
          v93 = v8[5];
          if (v92 > v93)
          {
            v94 = *((_DWORD *)v8 + 4);
            v95 = *((_DWORD *)v8 + 6);
            *((_DWORD *)v8 + 4) = v95;
            *((_DWORD *)v8 + 6) = v94;
            v8[5] = v92;
            v8[7] = v93;
            v96 = v8[3];
            if (v92 > v96)
            {
              v97 = *((_DWORD *)v8 + 2);
              *((_DWORD *)v8 + 2) = v95;
              *((_DWORD *)v8 + 4) = v97;
              v8[3] = v92;
              v8[5] = v96;
              v98 = v8[1];
              if (v92 > v98)
              {
                v99 = *v8;
                *(_DWORD *)v8 = v95;
                v8[2] = v99;
LABEL_162:
                v8[1] = v92;
                v8[3] = v98;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v100 = v8 + 2;
          v102 = v8 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v8;
              do
              {
                v106 = v104[3];
                if (v106 > v104[1])
                {
                  v107 = 0;
                  v108 = *v100;
                  do
                  {
                    v109 = &v104[v107 / 4];
                    v109[2] = v104[v107 / 4];
                    v109[3] = v104[v107 / 4 + 1];
                    if (v103 == v107)
                    {
                      v105 = v8;
                      goto LABEL_121;
                    }
                    v107 -= 8;
                  }
                  while (v106 > *(v109 - 1));
                  v105 = &v100[v107 / 4];
LABEL_121:
                  *v105 = v108;
                  v105[1] = v106;
                }
                v100 += 2;
                v104 += 2;
                v103 -= 8;
              }
              while (v100 != a2);
            }
          }
          else if (!v102)
          {
            v137 = v8 + 1;
            do
            {
              v138 = v7[3];
              v139 = v7[1];
              v7 = v100;
              if (v138 > v139)
              {
                v140 = *v100;
                v141 = v137;
                do
                {
                  v141[1] = *(v141 - 1);
                  v141[2] = *v141;
                  v142 = *(v141 - 2);
                  v141 -= 2;
                }
                while (v138 > v142);
                v141[1] = v140;
                v141[2] = v138;
              }
              v100 = v7 + 2;
              v137 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[2 * ((unint64_t)v10 >> 1)];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v17 = v8[1];
            v18 = v12[1];
            if (v17 <= v18)
            {
              if (v13 > v17)
              {
                v24 = *v8;
                *v8 = *(a2 - 2);
                *(a2 - 2) = v24;
                v8[1] = v13;
                *(a2 - 1) = v17;
                v25 = v8[1];
                v26 = v12[1];
                if (v25 > v26)
                {
                  v27 = *v12;
                  *v12 = *v8;
                  *v8 = v27;
                  v12[1] = v25;
                  v8[1] = v26;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
            }
            else
            {
              v19 = *(_DWORD *)v12;
              if (v13 <= v17)
              {
                *v12 = *v8;
                *(_DWORD *)v8 = v19;
                v12[1] = v17;
                v8[1] = v18;
                v38 = *(a2 - 1);
                if (v38 <= v18)
                  goto LABEL_32;
                *v8 = *(a2 - 2);
                *((_DWORD *)a2 - 2) = v19;
                v8[1] = v38;
              }
              else
              {
                *v12 = *(a2 - 2);
                *((_DWORD *)a2 - 2) = v19;
                v12[1] = v13;
              }
              *(a2 - 1) = v18;
            }
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v40 = v8[1];
            v39 = *v8;
            if (*(v8 - 1) > v40)
              goto LABEL_58;
            if (v40 <= *(a2 - 1))
            {
              v73 = v8 + 2;
              do
              {
                v8 = v73;
                if (v73 >= a2)
                  break;
                v74 = v73[1];
                v73 += 2;
              }
              while (v40 <= v74);
            }
            else
            {
              v71 = v8;
              do
              {
                v8 = v71 + 2;
                v72 = v71[3];
                v71 += 2;
              }
              while (v40 <= v72);
            }
            v75 = a2;
            if (v8 < a2)
            {
              v76 = a2;
              do
              {
                v75 = v76 - 2;
                v77 = *(v76 - 1);
                v76 -= 2;
              }
              while (v40 > v77);
            }
            while (v8 < v75)
            {
              v78 = *v8;
              *v8 = *v75;
              *v75 = v78;
              v79 = *((_DWORD *)v8 + 1);
              v8[1] = v75[1];
              *((_DWORD *)v75 + 1) = v79;
              do
              {
                v80 = v8[3];
                v8 += 2;
              }
              while (v40 <= v80);
              do
              {
                v81 = *(v75 - 1);
                v75 -= 2;
              }
              while (v40 > v81);
            }
            if (v8 - 2 != v7)
            {
              *v7 = *(v8 - 2);
              v7[1] = *(v8 - 1);
            }
            a4 = 0;
            *(v8 - 2) = v39;
            *(v8 - 1) = v40;
            continue;
          }
          v14 = v12[1];
          v15 = v8[1];
          if (v14 <= v15)
          {
            if (v13 > v14)
            {
              v20 = *(_DWORD *)v12;
              *v12 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v20;
              v12[1] = v13;
              *(a2 - 1) = v14;
              v21 = v12[1];
              v22 = v8[1];
              if (v21 > v22)
              {
                v23 = *v8;
                *v8 = *v12;
                *v12 = v23;
                v8[1] = v21;
                v12[1] = v22;
              }
            }
          }
          else
          {
            v16 = *v8;
            if (v13 <= v14)
            {
              *v8 = *v12;
              *v12 = v16;
              v8[1] = v14;
              v12[1] = v15;
              v28 = *(a2 - 1);
              if (v28 <= v15)
                goto LABEL_23;
              *v12 = *(a2 - 2);
              *(a2 - 2) = v16;
              v12[1] = v28;
            }
            else
            {
              *v8 = *(a2 - 2);
              *(a2 - 2) = v16;
              v8[1] = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v29 = &v8[2 * v11];
          v30 = *(v29 - 1);
          v31 = v8[3];
          v32 = *(a2 - 3);
          if (v30 <= v31)
          {
            if (v32 > v30)
            {
              v34 = *((_DWORD *)v29 - 2);
              *(v29 - 2) = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v34;
              *(v29 - 1) = v32;
              *(a2 - 3) = v30;
              v35 = *(v29 - 1);
              v36 = v8[3];
              if (v35 > v36)
              {
                v37 = *((_DWORD *)v8 + 2);
                v8[2] = *(v29 - 2);
                *((_DWORD *)v29 - 2) = v37;
                v8[3] = v35;
                *(v29 - 1) = v36;
              }
            }
          }
          else
          {
            v33 = *((_DWORD *)v8 + 2);
            if (v32 <= v30)
            {
              v8[2] = *(v29 - 2);
              *((_DWORD *)v29 - 2) = v33;
              v8[3] = v30;
              *(v29 - 1) = v31;
              v41 = *(a2 - 3);
              if (v41 <= v31)
                goto LABEL_37;
              *(v29 - 2) = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              *(v29 - 1) = v41;
            }
            else
            {
              v8[2] = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              v8[3] = v32;
            }
            *(a2 - 3) = v31;
          }
LABEL_37:
          v42 = v29[3];
          v43 = v8[5];
          v44 = *(a2 - 5);
          if (v42 <= v43)
          {
            if (v44 > v42)
            {
              v46 = *((_DWORD *)v29 + 2);
              v29[2] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v46;
              v29[3] = v44;
              *(a2 - 5) = v42;
              v47 = v29[3];
              v48 = v8[5];
              if (v47 > v48)
              {
                v49 = *((_DWORD *)v8 + 4);
                v8[4] = v29[2];
                *((_DWORD *)v29 + 2) = v49;
                v8[5] = v47;
                v29[3] = v48;
              }
            }
          }
          else
          {
            v45 = *((_DWORD *)v8 + 4);
            if (v44 <= v42)
            {
              v8[4] = v29[2];
              *((_DWORD *)v29 + 2) = v45;
              v8[5] = v42;
              v29[3] = v43;
              v50 = *(a2 - 5);
              if (v50 <= v43)
                goto LABEL_46;
              v29[2] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v29[3] = v50;
            }
            else
            {
              v8[4] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v8[5] = v44;
            }
            *(a2 - 5) = v43;
          }
LABEL_46:
          v51 = v12[1];
          v52 = *(v29 - 1);
          v53 = v29[3];
          if (v51 <= v52)
          {
            v54 = *v12;
            if (v53 <= v51)
              goto LABEL_52;
            v55 = v29[2];
            *v12 = v55;
            v29[2] = v54;
            v12[1] = v53;
            v29[3] = v51;
            if (v53 > v52)
            {
              v54 = *(v29 - 2);
              *(v29 - 2) = v55;
              *v12 = v54;
              *(v29 - 1) = v53;
              v12[1] = v52;
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          v54 = *(v29 - 2);
          if (v53 > v51)
          {
            *(v29 - 2) = v29[2];
            v29[2] = v54;
            *(v29 - 1) = v53;
            v29[3] = v52;
            v54 = *v12;
LABEL_52:
            v52 = v51;
            goto LABEL_56;
          }
          *(v29 - 2) = *v12;
          *v12 = v54;
          *(v29 - 1) = v51;
          v12[1] = v52;
          if (v53 > v52)
          {
            v55 = v29[2];
            *v12 = v55;
            v29[2] = v54;
            v12[1] = v53;
            v29[3] = v52;
LABEL_55:
            v52 = v53;
            v54 = v55;
          }
LABEL_56:
          v56 = *v8;
          *v8 = v54;
          *v12 = v56;
          v57 = *((_DWORD *)v8 + 1);
          v8[1] = v52;
          *((_DWORD *)v29 + 1) = v57;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v39 = *v8;
          v40 = v8[1];
LABEL_58:
          v58 = v8;
          do
          {
            v59 = v58;
            v58 += 2;
          }
          while (v59[3] > v40);
          v60 = a2;
          if (v59 == v8)
          {
            v63 = a2;
            while (v58 < v63)
            {
              v61 = v63 - 2;
              v64 = *(v63 - 1);
              v63 -= 2;
              if (v64 > v40)
                goto LABEL_66;
            }
            v61 = v63;
            v8 = v58;
          }
          else
          {
            do
            {
              v61 = v60 - 2;
              v62 = *(v60 - 1);
              v60 -= 2;
            }
            while (v62 <= v40);
LABEL_66:
            v8 = v58;
            if (v58 < v61)
            {
              v65 = v61;
              do
              {
                v66 = *v8;
                *v8 = *v65;
                *v65 = v66;
                v67 = *((_DWORD *)v8 + 1);
                v8[1] = v65[1];
                *((_DWORD *)v65 + 1) = v67;
                do
                {
                  v68 = v8[3];
                  v8 += 2;
                }
                while (v68 > v40);
                do
                {
                  v69 = *(v65 - 1);
                  v65 -= 2;
                }
                while (v69 <= v40);
              }
              while (v8 < v65);
            }
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          *(v8 - 2) = v39;
          *(v8 - 1) = v40;
          if (v58 < v61)
            goto LABEL_77;
          v70 = sub_19C08B590(v7, v8 - 2);
          result = (float *)sub_19C08B590(v8, a2);
          if (!(_DWORD)result)
          {
            if (v70)
              continue;
LABEL_77:
            result = (float *)sub_19C08AA04(v7, v8 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 2;
          if (v70)
            return result;
          goto LABEL_2;
        }
        if (v8 != a2)
        {
          v110 = (unint64_t)(v10 - 2) >> 1;
          v111 = v8 + 2;
          v112 = v110;
          do
          {
            if (v110 >= v112)
            {
              v114 = (2 * v112) | 1;
              v115 = &v111[4 * v112];
              if (2 * v112 + 2 < v10 && v115[1] > v115[3])
              {
                v115 += 2;
                v114 = 2 * v112 + 2;
              }
              v116 = &v8[2 * v112];
              v117 = v116[1];
              if (v115[1] <= v117)
              {
                v118 = *(_DWORD *)v116;
                do
                {
                  v119 = v116;
                  v116 = v115;
                  *v119 = *v115;
                  v119[1] = v115[1];
                  if (v110 < v114)
                    break;
                  result = (float *)(2 * v114);
                  v120 = (2 * v114) | 1;
                  v115 = &v111[4 * v114];
                  v121 = 2 * v114 + 2;
                  if (v121 < v10 && v115[1] > v115[3])
                  {
                    v115 += 2;
                    v120 = v121;
                  }
                  v114 = v120;
                }
                while (v115[1] <= v117);
                *(_DWORD *)v116 = v118;
                v116[1] = v117;
              }
            }
            v113 = v112-- <= 0;
          }
          while (!v113);
          v122 = (unint64_t)v9 >> 3;
          do
          {
            v123 = 0;
            v124 = *v8;
            v125 = v8[1];
            v126 = v8;
            do
            {
              v127 = v126;
              v126 += 2 * v123 + 2;
              v128 = 2 * v123;
              v123 = (2 * v123) | 1;
              v129 = v128 + 2;
              if (v129 < v122 && v126[1] > v126[3])
              {
                v126 += 2;
                v123 = v129;
              }
              *v127 = *v126;
              v127[1] = v126[1];
            }
            while (v123 <= (uint64_t)((unint64_t)(v122 - 2) >> 1));
            if (v126 == a2 - 2)
            {
              *v126 = v124;
            }
            else
            {
              *v126 = *(a2 - 2);
              v126[1] = *(a2 - 1);
              *(a2 - 2) = v124;
              *(a2 - 1) = v125;
              v130 = (char *)v126 - (char *)v8 + 8;
              if (v130 < 9)
                goto LABEL_146;
              v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
              v132 = &v8[2 * v131];
              v125 = v126[1];
              if (v132[1] <= v125)
                goto LABEL_146;
              v133 = *(_DWORD *)v126;
              do
              {
                v134 = v126;
                v126 = v132;
                *v134 = *v132;
                v134[1] = v132[1];
                if (!v131)
                  break;
                v131 = (v131 - 1) >> 1;
                v132 = &v8[2 * v131];
              }
              while (v132[1] > v125);
              *(_DWORD *)v126 = v133;
            }
            v126[1] = v125;
LABEL_146:
            a2 -= 2;
            v113 = v122-- <= 2;
          }
          while (!v113);
        }
        return result;
    }
  }
}

BOOL sub_19C08B590(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float *v38;
  uint64_t v39;
  int v40;
  float *v41;
  float v42;
  int v43;
  uint64_t v44;
  float *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 <= v20)
        return 1;
      v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = *((_DWORD *)a1 + 4);
      v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      v26 = a1[3];
      if (v22 <= v26)
        return 1;
      v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      v28 = a1[1];
      if (v22 <= v28)
        return 1;
      v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 > v13)
      {
        v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13)
            goto LABEL_30;
          a1[2] = a1[4];
          a1[4] = v17;
          v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        v34 = *((_DWORD *)a1 + 2);
        v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          v18 = a1 + 1;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v42 = v38[1];
        if (v42 > v41[1])
          break;
LABEL_39:
        v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_DWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

float *sub_19C08B938(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  int v33;
  int v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  int v57;
  float *v58;
  float *v59;
  float *v60;
  float *v61;
  float v62;
  float *v63;
  float v64;
  float *v65;
  float v66;
  int v67;
  float v68;
  float v69;
  BOOL v70;
  float *v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  float *v76;
  float v77;
  float v78;
  int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  int v91;
  float v92;
  float v93;
  int v94;
  int v95;
  float v96;
  int v97;
  float v98;
  float v99;
  float *v100;
  BOOL v102;
  uint64_t v103;
  float *v104;
  float *v105;
  float v106;
  unint64_t v107;
  float v108;
  float *v109;
  int64_t v110;
  float *v111;
  int64_t v112;
  BOOL v113;
  uint64_t v114;
  float *v115;
  float *v116;
  float v117;
  int v118;
  float *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  float v125;
  float *v126;
  float *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  float *v132;
  int v133;
  float *v134;
  int v135;
  int v136;
  float *v137;
  float v138;
  float v139;
  float v140;
  float *v141;
  float v142;
  float v143;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v82 = *(a2 - 1);
        v83 = v8[1];
        if (v82 > v83)
        {
          v84 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v84;
          v8[1] = v82;
          *(a2 - 1) = v83;
        }
        return result;
      case 3:
        v85 = v8[3];
        v86 = v8[1];
        v87 = *(a2 - 1);
        if (v85 <= v86)
        {
          if (v87 > v85)
          {
            v135 = *((_DWORD *)v8 + 2);
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v135;
            v8[3] = v87;
            *(a2 - 1) = v85;
            v92 = v8[3];
            v98 = v8[1];
            if (v92 > v98)
            {
              v136 = *(_DWORD *)v8;
              *v8 = v8[2];
              *((_DWORD *)v8 + 2) = v136;
              goto LABEL_162;
            }
          }
        }
        else
        {
          v88 = *(_DWORD *)v8;
          if (v87 <= v85)
          {
            *v8 = v8[2];
            *((_DWORD *)v8 + 2) = v88;
            v8[1] = v85;
            v8[3] = v86;
            v143 = *(a2 - 1);
            if (v143 <= v86)
              return result;
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v8[3] = v143;
          }
          else
          {
            *v8 = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v88;
            v8[1] = v87;
          }
          *(a2 - 1) = v86;
        }
        return result;
      case 4:
        return sub_19C08997C(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_19C08997C(v8, v8 + 2, v8 + 4, v8 + 6);
        v89 = *(a2 - 1);
        v90 = v8[7];
        if (v89 > v90)
        {
          v91 = *((_DWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v91;
          v8[7] = v89;
          *(a2 - 1) = v90;
          v92 = v8[7];
          v93 = v8[5];
          if (v92 > v93)
          {
            v94 = *((_DWORD *)v8 + 4);
            v95 = *((_DWORD *)v8 + 6);
            *((_DWORD *)v8 + 4) = v95;
            *((_DWORD *)v8 + 6) = v94;
            v8[5] = v92;
            v8[7] = v93;
            v96 = v8[3];
            if (v92 > v96)
            {
              v97 = *((_DWORD *)v8 + 2);
              *((_DWORD *)v8 + 2) = v95;
              *((_DWORD *)v8 + 4) = v97;
              v8[3] = v92;
              v8[5] = v96;
              v98 = v8[1];
              if (v92 > v98)
              {
                v99 = *v8;
                *(_DWORD *)v8 = v95;
                v8[2] = v99;
LABEL_162:
                v8[1] = v92;
                v8[3] = v98;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v100 = v8 + 2;
          v102 = v8 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v8;
              do
              {
                v106 = v104[3];
                if (v106 > v104[1])
                {
                  v107 = 0;
                  v108 = *v100;
                  do
                  {
                    v109 = &v104[v107 / 4];
                    v109[2] = v104[v107 / 4];
                    v109[3] = v104[v107 / 4 + 1];
                    if (v103 == v107)
                    {
                      v105 = v8;
                      goto LABEL_121;
                    }
                    v107 -= 8;
                  }
                  while (v106 > *(v109 - 1));
                  v105 = &v100[v107 / 4];
LABEL_121:
                  *v105 = v108;
                  v105[1] = v106;
                }
                v100 += 2;
                v104 += 2;
                v103 -= 8;
              }
              while (v100 != a2);
            }
          }
          else if (!v102)
          {
            v137 = v8 + 1;
            do
            {
              v138 = v7[3];
              v139 = v7[1];
              v7 = v100;
              if (v138 > v139)
              {
                v140 = *v100;
                v141 = v137;
                do
                {
                  v141[1] = *(v141 - 1);
                  v141[2] = *v141;
                  v142 = *(v141 - 2);
                  v141 -= 2;
                }
                while (v138 > v142);
                v141[1] = v140;
                v141[2] = v138;
              }
              v100 = v7 + 2;
              v137 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[2 * ((unint64_t)v10 >> 1)];
          v13 = *(a2 - 1);
          if ((unint64_t)v9 < 0x401)
          {
            v17 = v8[1];
            v18 = v12[1];
            if (v17 <= v18)
            {
              if (v13 > v17)
              {
                v24 = *v8;
                *v8 = *(a2 - 2);
                *(a2 - 2) = v24;
                v8[1] = v13;
                *(a2 - 1) = v17;
                v25 = v8[1];
                v26 = v12[1];
                if (v25 > v26)
                {
                  v27 = *v12;
                  *v12 = *v8;
                  *v8 = v27;
                  v12[1] = v25;
                  v8[1] = v26;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
            }
            else
            {
              v19 = *(_DWORD *)v12;
              if (v13 <= v17)
              {
                *v12 = *v8;
                *(_DWORD *)v8 = v19;
                v12[1] = v17;
                v8[1] = v18;
                v38 = *(a2 - 1);
                if (v38 <= v18)
                  goto LABEL_32;
                *v8 = *(a2 - 2);
                *((_DWORD *)a2 - 2) = v19;
                v8[1] = v38;
              }
              else
              {
                *v12 = *(a2 - 2);
                *((_DWORD *)a2 - 2) = v19;
                v12[1] = v13;
              }
              *(a2 - 1) = v18;
            }
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v40 = v8[1];
            v39 = *v8;
            if (*(v8 - 1) > v40)
              goto LABEL_58;
            if (v40 <= *(a2 - 1))
            {
              v73 = v8 + 2;
              do
              {
                v8 = v73;
                if (v73 >= a2)
                  break;
                v74 = v73[1];
                v73 += 2;
              }
              while (v40 <= v74);
            }
            else
            {
              v71 = v8;
              do
              {
                v8 = v71 + 2;
                v72 = v71[3];
                v71 += 2;
              }
              while (v40 <= v72);
            }
            v75 = a2;
            if (v8 < a2)
            {
              v76 = a2;
              do
              {
                v75 = v76 - 2;
                v77 = *(v76 - 1);
                v76 -= 2;
              }
              while (v40 > v77);
            }
            while (v8 < v75)
            {
              v78 = *v8;
              *v8 = *v75;
              *v75 = v78;
              v79 = *((_DWORD *)v8 + 1);
              v8[1] = v75[1];
              *((_DWORD *)v75 + 1) = v79;
              do
              {
                v80 = v8[3];
                v8 += 2;
              }
              while (v40 <= v80);
              do
              {
                v81 = *(v75 - 1);
                v75 -= 2;
              }
              while (v40 > v81);
            }
            if (v8 - 2 != v7)
            {
              *v7 = *(v8 - 2);
              v7[1] = *(v8 - 1);
            }
            a4 = 0;
            *(v8 - 2) = v39;
            *(v8 - 1) = v40;
            continue;
          }
          v14 = v12[1];
          v15 = v8[1];
          if (v14 <= v15)
          {
            if (v13 > v14)
            {
              v20 = *(_DWORD *)v12;
              *v12 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v20;
              v12[1] = v13;
              *(a2 - 1) = v14;
              v21 = v12[1];
              v22 = v8[1];
              if (v21 > v22)
              {
                v23 = *v8;
                *v8 = *v12;
                *v12 = v23;
                v8[1] = v21;
                v12[1] = v22;
              }
            }
          }
          else
          {
            v16 = *v8;
            if (v13 <= v14)
            {
              *v8 = *v12;
              *v12 = v16;
              v8[1] = v14;
              v12[1] = v15;
              v28 = *(a2 - 1);
              if (v28 <= v15)
                goto LABEL_23;
              *v12 = *(a2 - 2);
              *(a2 - 2) = v16;
              v12[1] = v28;
            }
            else
            {
              *v8 = *(a2 - 2);
              *(a2 - 2) = v16;
              v8[1] = v13;
            }
            *(a2 - 1) = v15;
          }
LABEL_23:
          v29 = &v8[2 * v11];
          v30 = *(v29 - 1);
          v31 = v8[3];
          v32 = *(a2 - 3);
          if (v30 <= v31)
          {
            if (v32 > v30)
            {
              v34 = *((_DWORD *)v29 - 2);
              *(v29 - 2) = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v34;
              *(v29 - 1) = v32;
              *(a2 - 3) = v30;
              v35 = *(v29 - 1);
              v36 = v8[3];
              if (v35 > v36)
              {
                v37 = *((_DWORD *)v8 + 2);
                v8[2] = *(v29 - 2);
                *((_DWORD *)v29 - 2) = v37;
                v8[3] = v35;
                *(v29 - 1) = v36;
              }
            }
          }
          else
          {
            v33 = *((_DWORD *)v8 + 2);
            if (v32 <= v30)
            {
              v8[2] = *(v29 - 2);
              *((_DWORD *)v29 - 2) = v33;
              v8[3] = v30;
              *(v29 - 1) = v31;
              v41 = *(a2 - 3);
              if (v41 <= v31)
                goto LABEL_37;
              *(v29 - 2) = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              *(v29 - 1) = v41;
            }
            else
            {
              v8[2] = *(a2 - 4);
              *((_DWORD *)a2 - 4) = v33;
              v8[3] = v32;
            }
            *(a2 - 3) = v31;
          }
LABEL_37:
          v42 = v29[3];
          v43 = v8[5];
          v44 = *(a2 - 5);
          if (v42 <= v43)
          {
            if (v44 > v42)
            {
              v46 = *((_DWORD *)v29 + 2);
              v29[2] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v46;
              v29[3] = v44;
              *(a2 - 5) = v42;
              v47 = v29[3];
              v48 = v8[5];
              if (v47 > v48)
              {
                v49 = *((_DWORD *)v8 + 4);
                v8[4] = v29[2];
                *((_DWORD *)v29 + 2) = v49;
                v8[5] = v47;
                v29[3] = v48;
              }
            }
          }
          else
          {
            v45 = *((_DWORD *)v8 + 4);
            if (v44 <= v42)
            {
              v8[4] = v29[2];
              *((_DWORD *)v29 + 2) = v45;
              v8[5] = v42;
              v29[3] = v43;
              v50 = *(a2 - 5);
              if (v50 <= v43)
                goto LABEL_46;
              v29[2] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v29[3] = v50;
            }
            else
            {
              v8[4] = *(a2 - 6);
              *((_DWORD *)a2 - 6) = v45;
              v8[5] = v44;
            }
            *(a2 - 5) = v43;
          }
LABEL_46:
          v51 = v12[1];
          v52 = *(v29 - 1);
          v53 = v29[3];
          if (v51 <= v52)
          {
            v54 = *v12;
            if (v53 <= v51)
              goto LABEL_52;
            v55 = v29[2];
            *v12 = v55;
            v29[2] = v54;
            v12[1] = v53;
            v29[3] = v51;
            if (v53 > v52)
            {
              v54 = *(v29 - 2);
              *(v29 - 2) = v55;
              *v12 = v54;
              *(v29 - 1) = v53;
              v12[1] = v52;
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          v54 = *(v29 - 2);
          if (v53 > v51)
          {
            *(v29 - 2) = v29[2];
            v29[2] = v54;
            *(v29 - 1) = v53;
            v29[3] = v52;
            v54 = *v12;
LABEL_52:
            v52 = v51;
            goto LABEL_56;
          }
          *(v29 - 2) = *v12;
          *v12 = v54;
          *(v29 - 1) = v51;
          v12[1] = v52;
          if (v53 > v52)
          {
            v55 = v29[2];
            *v12 = v55;
            v29[2] = v54;
            v12[1] = v53;
            v29[3] = v52;
LABEL_55:
            v52 = v53;
            v54 = v55;
          }
LABEL_56:
          v56 = *v8;
          *v8 = v54;
          *v12 = v56;
          v57 = *((_DWORD *)v8 + 1);
          v8[1] = v52;
          *((_DWORD *)v29 + 1) = v57;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v39 = *v8;
          v40 = v8[1];
LABEL_58:
          v58 = v8;
          do
          {
            v59 = v58;
            v58 += 2;
          }
          while (v59[3] > v40);
          v60 = a2;
          if (v59 == v8)
          {
            v63 = a2;
            while (v58 < v63)
            {
              v61 = v63 - 2;
              v64 = *(v63 - 1);
              v63 -= 2;
              if (v64 > v40)
                goto LABEL_66;
            }
            v61 = v63;
            v8 = v58;
          }
          else
          {
            do
            {
              v61 = v60 - 2;
              v62 = *(v60 - 1);
              v60 -= 2;
            }
            while (v62 <= v40);
LABEL_66:
            v8 = v58;
            if (v58 < v61)
            {
              v65 = v61;
              do
              {
                v66 = *v8;
                *v8 = *v65;
                *v65 = v66;
                v67 = *((_DWORD *)v8 + 1);
                v8[1] = v65[1];
                *((_DWORD *)v65 + 1) = v67;
                do
                {
                  v68 = v8[3];
                  v8 += 2;
                }
                while (v68 > v40);
                do
                {
                  v69 = *(v65 - 1);
                  v65 -= 2;
                }
                while (v69 <= v40);
              }
              while (v8 < v65);
            }
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          *(v8 - 2) = v39;
          *(v8 - 1) = v40;
          if (v58 < v61)
            goto LABEL_77;
          v70 = sub_19C08C4C4(v7, v8 - 2);
          result = (float *)sub_19C08C4C4(v8, a2);
          if (!(_DWORD)result)
          {
            if (v70)
              continue;
LABEL_77:
            result = (float *)sub_19C08B938(v7, v8 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 2;
          if (v70)
            return result;
          goto LABEL_2;
        }
        if (v8 != a2)
        {
          v110 = (unint64_t)(v10 - 2) >> 1;
          v111 = v8 + 2;
          v112 = v110;
          do
          {
            if (v110 >= v112)
            {
              v114 = (2 * v112) | 1;
              v115 = &v111[4 * v112];
              if (2 * v112 + 2 < v10 && v115[1] > v115[3])
              {
                v115 += 2;
                v114 = 2 * v112 + 2;
              }
              v116 = &v8[2 * v112];
              v117 = v116[1];
              if (v115[1] <= v117)
              {
                v118 = *(_DWORD *)v116;
                do
                {
                  v119 = v116;
                  v116 = v115;
                  *v119 = *v115;
                  v119[1] = v115[1];
                  if (v110 < v114)
                    break;
                  result = (float *)(2 * v114);
                  v120 = (2 * v114) | 1;
                  v115 = &v111[4 * v114];
                  v121 = 2 * v114 + 2;
                  if (v121 < v10 && v115[1] > v115[3])
                  {
                    v115 += 2;
                    v120 = v121;
                  }
                  v114 = v120;
                }
                while (v115[1] <= v117);
                *(_DWORD *)v116 = v118;
                v116[1] = v117;
              }
            }
            v113 = v112-- <= 0;
          }
          while (!v113);
          v122 = (unint64_t)v9 >> 3;
          do
          {
            v123 = 0;
            v124 = *v8;
            v125 = v8[1];
            v126 = v8;
            do
            {
              v127 = v126;
              v126 += 2 * v123 + 2;
              v128 = 2 * v123;
              v123 = (2 * v123) | 1;
              v129 = v128 + 2;
              if (v129 < v122 && v126[1] > v126[3])
              {
                v126 += 2;
                v123 = v129;
              }
              *v127 = *v126;
              v127[1] = v126[1];
            }
            while (v123 <= (uint64_t)((unint64_t)(v122 - 2) >> 1));
            if (v126 == a2 - 2)
            {
              *v126 = v124;
            }
            else
            {
              *v126 = *(a2 - 2);
              v126[1] = *(a2 - 1);
              *(a2 - 2) = v124;
              *(a2 - 1) = v125;
              v130 = (char *)v126 - (char *)v8 + 8;
              if (v130 < 9)
                goto LABEL_146;
              v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
              v132 = &v8[2 * v131];
              v125 = v126[1];
              if (v132[1] <= v125)
                goto LABEL_146;
              v133 = *(_DWORD *)v126;
              do
              {
                v134 = v126;
                v126 = v132;
                *v134 = *v132;
                v134[1] = v132[1];
                if (!v131)
                  break;
                v131 = (v131 - 1) >> 1;
                v132 = &v8[2 * v131];
              }
              while (v132[1] > v125);
              *(_DWORD *)v126 = v133;
            }
            v126[1] = v125;
LABEL_146:
            a2 -= 2;
            v113 = v122-- <= 2;
          }
          while (!v113);
        }
        return result;
    }
  }
}

BOOL sub_19C08C4C4(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float *v38;
  uint64_t v39;
  int v40;
  float *v41;
  float v42;
  int v43;
  uint64_t v44;
  float *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19C08997C(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 <= v20)
        return 1;
      v21 = *((_DWORD *)a1 + 6);
      a1[6] = *(a2 - 2);
      *((_DWORD *)a2 - 2) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = *((_DWORD *)a1 + 4);
      v25 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 6) = v24;
      a1[5] = v22;
      a1[7] = v23;
      v26 = a1[3];
      if (v22 <= v26)
        return 1;
      v27 = *((_DWORD *)a1 + 2);
      *((_DWORD *)a1 + 2) = v25;
      *((_DWORD *)a1 + 4) = v27;
      a1[3] = v22;
      a1[5] = v26;
      v28 = a1[1];
      if (v22 <= v28)
        return 1;
      v29 = *a1;
      *(_DWORD *)a1 = v25;
      a1[2] = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 > v13)
      {
        v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13)
            goto LABEL_30;
          a1[2] = a1[4];
          a1[4] = v17;
          v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        v34 = *((_DWORD *)a1 + 2);
        v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          v18 = a1 + 1;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v42 = v38[1];
        if (v42 > v41[1])
          break;
LABEL_39:
        v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_DWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (float *)((char *)a1 + v44);
        v45[6] = *(float *)((char *)a1 + v44 + 16);
        v45[7] = *(float *)((char *)a1 + v44 + 20);
        if (v44 == -16)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 8;
      }
      while (v42 > v45[3]);
      v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 6) = v43;
      *((float *)v46 + 7) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

uint64_t sub_19C08C9D0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_19C08CA44(uint64_t a1, uint64_t a2, int *a3, __int128 *a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;

  *(_QWORD *)a1 = &unk_1E3D242A8;
  *(_QWORD *)(a1 + 8) = a2;
  v11 = *a4;
  v12 = a4[1];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v12;
  v13 = *a6;
  v14 = a6[1];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a6 + 4);
  *(_OWORD *)(a1 + 72) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  v15 = *a3;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 96) = a5;
  *(_QWORD *)(a1 + 104) = a7;
  *(_QWORD *)(a1 + 112) = a8;
  *(_DWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 136) = a9;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v17 = *(const void **)a10;
  v16 = *(_QWORD *)(a10 + 8);
  v18 = v16 - *(_QWORD *)a10;
  if (v16 != *(_QWORD *)a10)
  {
    if (v18 < 0)
      sub_19C07DA0C();
    v19 = (char *)operator new(v16 - (_QWORD)v17);
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v19;
    v20 = &v19[4 * (v18 >> 2)];
    *(_QWORD *)(a1 + 160) = v20;
    memcpy(v19, v17, v18);
    *(_QWORD *)(a1 + 152) = v20;
  }
  return a1;
}

void sub_19C08CB10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 152) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C08CB2C(uint64_t a1, uint64_t a2, int *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;

  *(_QWORD *)a1 = &unk_1E3D242A8;
  *(_QWORD *)(a1 + 8) = a2;
  v10 = *a4;
  v11 = a4[1];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *a4;
  v13 = a4[1];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(a1 + 72) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v14 = *a3;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 96) = a5;
  *(_QWORD *)(a1 + 104) = a5;
  *(_QWORD *)(a1 + 112) = a6;
  *(float *)(a1 + 120) = a9;
  *(_BYTE *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 136) = a7;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v16 = *(const void **)a8;
  v15 = *(_QWORD *)(a8 + 8);
  v17 = v15 - *(_QWORD *)a8;
  if (v15 != *(_QWORD *)a8)
  {
    if (v17 < 0)
      sub_19C07DA0C();
    v18 = (char *)operator new(v15 - *(_QWORD *)a8);
    *(_QWORD *)(a1 + 144) = v18;
    *(_QWORD *)(a1 + 152) = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *(_QWORD *)(a1 + 160) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 152) = v19;
  }
  return a1;
}

void sub_19C08CBF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 152) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C08CC14(uint64_t a1)
{
  const float *v1;
  const float *v3;
  const float *v4;
  float *v5;
  vDSP_Length v6;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  int v16;
  const float *v17;
  const float *v18;
  float *v19;
  vDSP_Length v20;
  const float *v21;
  const float *v22;
  float *v23;
  vDSP_Length v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  const float *v35;
  const float *v36;
  vDSP_Length v37;
  const float *v38;
  const float *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  float *v46;
  const float *v47;
  const float *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float *v60;
  const float *v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  vDSP_Length v65;
  const float *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  int v70;
  _OWORD v71[3];
  _QWORD v72[3];
  _QWORD __B[3];

  v1 = **(const float ***)(a1 + 104);
  if (!v1)
    return;
  if (*(_BYTE *)(a1 + 124))
  {
    switch(*(_DWORD *)(a1 + 128))
    {
      case 0:
        v3 = **(const float ***)(a1 + 96);
        v4 = (const float *)(a1 + 120);
        v5 = **(float ***)(a1 + 112);
        v6 = *(_DWORD *)(a1 + 16)
           * *(_DWORD *)(a1 + 24)
           * *(_DWORD *)(a1 + 32)
           * *(_DWORD *)(a1 + 40)
           * *(_DWORD *)(a1 + 48);
        goto LABEL_29;
      case 1:
        *(float *)v71 = -*(float *)(a1 + 120);
        goto LABEL_28;
      case 2:
        v17 = **(const float ***)(a1 + 96);
        v18 = (const float *)(a1 + 120);
        v19 = **(float ***)(a1 + 112);
        v20 = *(_DWORD *)(a1 + 16)
            * *(_DWORD *)(a1 + 24)
            * *(_DWORD *)(a1 + 32)
            * *(_DWORD *)(a1 + 40)
            * *(_DWORD *)(a1 + 48);
        goto LABEL_31;
      case 3:
        v21 = **(const float ***)(a1 + 96);
        v22 = (const float *)(a1 + 120);
        v23 = **(float ***)(a1 + 112);
        v24 = *(_DWORD *)(a1 + 16)
            * *(_DWORD *)(a1 + 24)
            * *(_DWORD *)(a1 + 32)
            * *(_DWORD *)(a1 + 40)
            * *(_DWORD *)(a1 + 48);
        goto LABEL_33;
      default:
        goto LABEL_84;
    }
    goto LABEL_84;
  }
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 56)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 64)
    && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 72)
    && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 80)
    && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 88))
  {
    v16 = *(_DWORD *)(a1 + 128);
    switch(v16)
    {
      case 2:
        vDSP_vmul(**(const float ***)(a1 + 96), 1, v1, 1, **(float ***)(a1 + 112), 1, *(_DWORD *)(a1 + 16)* *(_DWORD *)(a1 + 24)* *(_DWORD *)(a1 + 32)* *(_DWORD *)(a1 + 40)* *(_DWORD *)(a1 + 48));
        break;
      case 1:
        vDSP_vsub(**(const float ***)(a1 + 96), 1, v1, 1, **(float ***)(a1 + 112), 1, *(_DWORD *)(a1 + 16)* *(_DWORD *)(a1 + 24)* *(_DWORD *)(a1 + 32)* *(_DWORD *)(a1 + 40)* *(_DWORD *)(a1 + 48));
        break;
      case 0:
        vDSP_vadd(**(const float ***)(a1 + 96), 1, v1, 1, **(float ***)(a1 + 112), 1, *(_DWORD *)(a1 + 16)* *(_DWORD *)(a1 + 24)* *(_DWORD *)(a1 + 32)* *(_DWORD *)(a1 + 40)* *(_DWORD *)(a1 + 48));
        break;
    }
    goto LABEL_84;
  }
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  if (v11 == 1)
  {
    LODWORD(v14) = v13 * v12 * *(_QWORD *)(a1 + 72);
    if ((_DWORD)v14 == 1)
    {
      if (*(_QWORD *)(a1 + 80) == 1)
      {
        v15 = *v1;
        *(float *)v71 = *v1;
        switch(*(_DWORD *)(a1 + 128))
        {
          case 0:
LABEL_28:
            v3 = **(const float ***)(a1 + 96);
            v5 = **(float ***)(a1 + 112);
            v6 = *(_DWORD *)(a1 + 16)
               * *(_DWORD *)(a1 + 24)
               * *(_DWORD *)(a1 + 32)
               * *(_DWORD *)(a1 + 40)
               * *(_DWORD *)(a1 + 48);
            v4 = (const float *)v71;
            goto LABEL_29;
          case 1:
            *(float *)__B = -v15;
            v3 = **(const float ***)(a1 + 96);
            v5 = **(float ***)(a1 + 112);
            v6 = *(_DWORD *)(a1 + 16)
               * *(_DWORD *)(a1 + 24)
               * *(_DWORD *)(a1 + 32)
               * *(_DWORD *)(a1 + 40)
               * *(_DWORD *)(a1 + 48);
            v4 = (const float *)__B;
LABEL_29:
            vDSP_vsadd(v3, 1, v4, v5, 1, v6);
            break;
          case 2:
            v17 = **(const float ***)(a1 + 96);
            v19 = **(float ***)(a1 + 112);
            v20 = *(_DWORD *)(a1 + 16)
                * *(_DWORD *)(a1 + 24)
                * *(_DWORD *)(a1 + 32)
                * *(_DWORD *)(a1 + 40)
                * *(_DWORD *)(a1 + 48);
            v18 = (const float *)v71;
LABEL_31:
            vDSP_vsmul(v17, 1, v18, v19, 1, v20);
            break;
          case 3:
            v21 = **(const float ***)(a1 + 96);
            v23 = **(float ***)(a1 + 112);
            v24 = *(_DWORD *)(a1 + 16)
                * *(_DWORD *)(a1 + 24)
                * *(_DWORD *)(a1 + 32)
                * *(_DWORD *)(a1 + 40)
                * *(_DWORD *)(a1 + 48);
            v22 = (const float *)v71;
LABEL_33:
            vDSP_vsdiv(v21, 1, v22, v23, 1, v24);
            break;
          default:
            goto LABEL_84;
        }
      }
      else
      {
        v52 = *(_QWORD *)(a1 + 48);
        if (v52)
        {
          v53 = 0;
          v54 = *(_QWORD *)(a1 + 16);
          v55 = *(_QWORD *)(a1 + 24);
          v56 = *(_QWORD *)(a1 + 32);
          v57 = *(_QWORD *)(a1 + 40);
          do
          {
            if (v57)
            {
              v58 = 0;
              v59 = 4 * v57 * v53 * (int)v54 * (int)v55 * (int)v56;
              v60 = (float *)(**(_QWORD **)(a1 + 112) + v59);
              v61 = (const float *)(**(_QWORD **)(a1 + 96) + v59);
              v62 = **(_QWORD **)(a1 + 104);
              do
              {
                LODWORD(v71[0]) = 0;
                v64 = *(float *)(v62 + 4 * v58);
                *(float *)v71 = v64;
                switch(*(_DWORD *)(a1 + 128))
                {
                  case 0:
                    v65 = (int)v54 * (int)v55 * (int)v56;
                    v66 = (const float *)v71;
                    goto LABEL_83;
                  case 1:
                    *(float *)__B = -v64;
                    v65 = (int)v54 * (int)v55 * (int)v56;
                    v66 = (const float *)__B;
LABEL_83:
                    vDSP_vsadd(v61, 1, v66, v60, 1, v65);
                    break;
                  case 2:
                    vDSP_vsmul(v61, 1, (const float *)v71, v60, 1, (int)v54 * (int)v55 * (int)v56);
                    break;
                  case 3:
                    vDSP_vsdiv(v61, 1, (const float *)v71, v60, 1, (int)v54 * (int)v55 * (int)v56);
                    break;
                  default:
                    break;
                }
                v54 = *(_QWORD *)(a1 + 16);
                v55 = *(_QWORD *)(a1 + 24);
                v56 = *(_QWORD *)(a1 + 32);
                v57 = *(_QWORD *)(a1 + 40);
                v63 = 4 * (int)v54 * (int)v55 * (int)v56;
                v61 = (const float *)((char *)v61 + v63);
                v60 = (float *)((char *)v60 + v63);
                ++v58;
              }
              while (v57 > v58);
              v52 = *(_QWORD *)(a1 + 48);
            }
            ++v53;
          }
          while (v52 > v53);
        }
      }
      goto LABEL_84;
    }
  }
  else
  {
    v14 = v13 * v12 * *(_QWORD *)(a1 + 72);
  }
  v25 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(a1 + 24);
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(_QWORD *)(a1 + 48);
  if (v14 == (_DWORD)v26 * (_DWORD)v25 * (_DWORD)v27)
  {
    if (!v28)
      goto LABEL_84;
    v42 = 0;
    v43 = *(_QWORD *)(a1 + 40);
    while (!v43)
    {
LABEL_54:
      if (v28 <= ++v42)
        goto LABEL_84;
    }
    v44 = 0;
    v45 = 4 * v43 * v42 * (int)v25 * (int)v26 * (int)v27;
    v46 = (float *)(**(_QWORD **)(a1 + 112) + v45);
    v47 = (const float *)(**(_QWORD **)(a1 + 96) + v45);
    v48 = **(const float ***)(a1 + 104);
    while (1)
    {
      v51 = *(_DWORD *)(a1 + 128);
      if (v51 == 2)
        break;
      if (v51 != 1)
      {
        if (!v51)
        {
          vDSP_vadd(v47, 1, v48, 1, v46, 1, (int)v25 * (int)v26 * (int)v27);
          v25 = *(_QWORD *)(a1 + 16);
          v26 = *(_QWORD *)(a1 + 24);
          v27 = *(_QWORD *)(a1 + 32);
          if (*(_QWORD *)(a1 + 80) == 1)
            goto LABEL_68;
          goto LABEL_57;
        }
        goto LABEL_65;
      }
      vDSP_vsub(v47, 1, v48, 1, v46, 1, (int)v25 * (int)v26 * (int)v27);
      v25 = *(_QWORD *)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v27 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(a1 + 80) == 1)
      {
LABEL_68:
        v49 = 0;
        goto LABEL_58;
      }
LABEL_57:
      v49 = *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 72);
LABEL_58:
      v50 = 4 * (int)v25 * (int)v26 * (int)v27;
      v47 = (const float *)((char *)v47 + v50);
      v46 = (float *)((char *)v46 + v50);
      v48 += v49;
      ++v44;
      v43 = *(_QWORD *)(a1 + 40);
      if (v43 <= v44)
      {
        v28 = *(_QWORD *)(a1 + 48);
        goto LABEL_54;
      }
    }
    vDSP_vmul(v47, 1, v48, 1, v46, 1, (int)v25 * (int)v26 * (int)v27);
LABEL_65:
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_QWORD *)(a1 + 24);
    v27 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(a1 + 80) == 1)
      goto LABEL_68;
    goto LABEL_57;
  }
  if (v28 == v11 && v11)
  {
    v29 = 0;
    v30 = *(_QWORD *)(a1 + 40);
    v31 = *(_QWORD *)(a1 + 80);
    while (!v30)
    {
LABEL_40:
      if (v11 <= ++v29)
        goto LABEL_84;
    }
    v32 = 0;
    v33 = 4 * v30 * v29 * (int)v25 * (int)v26 * (int)v27;
    v34 = (float *)(**(_QWORD **)(a1 + 112) + v33);
    v35 = (const float *)(**(_QWORD **)(a1 + 104)
                        + 4 * v31 * v29 * *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 64) * *(_DWORD *)(a1 + 72));
    v36 = (const float *)(**(_QWORD **)(a1 + 96) + v33);
    while (1)
    {
      v41 = *(_DWORD *)(a1 + 128);
      if (v41 == 2)
      {
        vDSP_vsmul(v36, 1, v35, v34, 1, (int)v25 * (int)v26 * (int)v27);
        goto LABEL_45;
      }
      if (v41 == 1)
      {
        LODWORD(v71[0]) = 0;
        *(float *)v71 = -*v35;
        v37 = (int)v25 * (int)v26 * (int)v27;
        v38 = (const float *)v71;
        v39 = v36;
      }
      else
      {
        v37 = (int)v25 * (int)v26 * (int)v27;
        v39 = v36;
        v38 = v35;
        if (v41)
        {
          vDSP_vsdiv(v36, 1, v35, v34, 1, v37);
          goto LABEL_45;
        }
      }
      vDSP_vsadd(v39, 1, v38, v34, 1, v37);
LABEL_45:
      v25 = *(_QWORD *)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
      v27 = *(_QWORD *)(a1 + 32);
      v30 = *(_QWORD *)(a1 + 40);
      v40 = 4 * (int)v25 * (int)v26 * (int)v27;
      v36 = (const float *)((char *)v36 + v40);
      v34 = (float *)((char *)v34 + v40);
      v31 = *(_QWORD *)(a1 + 80);
      v35 += v31 != 1;
      if (v30 <= ++v32)
      {
        v11 = *(_QWORD *)(a1 + 48);
        goto LABEL_40;
      }
    }
  }
LABEL_84:
  v67 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32);
  v72[2] = 0;
  __B[0] = v67;
  __B[1] = 0x3F80000000010020;
  __B[2] = 0;
  v72[0] = v67;
  v72[1] = 0x3F80000000010020;
  memset(v71, 0, sizeof(v71));
  switch(*(_QWORD *)(a1 + 136))
  {
    case 1:
      LODWORD(v71[0]) = 3;
      goto LABEL_90;
    case 2:
      LODWORD(v71[0]) = 4;
      goto LABEL_90;
    case 4:
      LODWORD(v71[0]) = 11;
      goto LABEL_90;
    case 5:
      LODWORD(v71[0]) = 1;
      goto LABEL_90;
    case 8:
    case 0xALL:
    case 0xCLL:
      return;
    case 9:
      LODWORD(v71[0]) = 8;
      *(_QWORD *)((char *)v71 + 4) = **(_QWORD **)(a1 + 144);
      goto LABEL_90;
    default:
LABEL_90:
      v68 = (void *)MEMORY[0x1A1AD1464](__B, v72, v71, 0);
      v69 = v68;
      if (v68)
      {
        v70 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 32);
        BNNSFilterApplyBatch(v68, v70 * *(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 48) / (unint64_t)v70, **(const void ***)(a1 + 112), v70, **(void ***)(a1 + 112), v70);
      }
      BNNSFilterDestroy(v69);
      break;
  }
}

_QWORD *sub_19C08D578(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E3D242A8;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C08D5B8(_QWORD *__p)
{
  void *v2;

  *__p = &unk_1E3D242A8;
  v2 = (void *)__p[18];
  if (v2)
  {
    __p[19] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

id sub_19C08D5F8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;

  objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v5 = v4;

    return v5;
  }
  else
  {

    return 0;
  }
}

id sub_19C08D664(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;

  objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v5 = v4;

    return v5;
  }
  else
  {

    return 0;
  }
}

uint64_t sub_19C08D6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a1, sel_exMRL_BOOLForKey_keyPresent_, a3, 0);
}

uint64_t sub_19C08D6D8(void *a1, const char *a2, uint64_t a3, BOOL *a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  objc_msgSend_exMRL_numberForKey_(a1, a2, a3, (uint64_t)a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v5;
  if (a4)
    *a4 = v5 != 0;
  if (v5)
  {
    v10 = objc_msgSend_BOOLValue(v5, v6, v7, v8);

    return v10;
  }
  else
  {

    return 0;
  }
}

id sub_19C08D740(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;

  if (!a3)
    return 0;
  objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v5 = v4;

    return v5;
  }
  else
  {

    return 0;
  }
}

id sub_19C08D7C4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;

  objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v5 = v4;

    return v5;
  }
  else
  {

    return 0;
  }
}

id sub_19C08D830(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;

  objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v5 = v4;

    return v5;
  }
  else
  {

    return 0;
  }
}

id sub_19C08D89C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v5;

  objc_msgSend_objectForKeyedSubscript_(a1, a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v5 = v4;

    return v5;
  }
  else
  {

    return 0;
  }
}

id sub_19C08D908(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend_string(MEMORY[0x1E0CB37A0], a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v6 = a1;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v8)
  {
    v11 = v8;
    v12 = *(_QWORD *)v23;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v23 != v12)
          objc_enumerationMutation(v6);
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v9, (uint64_t)CFSTR("%@, "), v10, *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v13));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_appendString_(v5, v15, (uint64_t)v14, v16);

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v22, (uint64_t)v26, 16);
    }
    while (v11);
  }

  v20 = (void *)objc_msgSend_copy(v5, v17, v18, v19);
  return v20;
}

uint64_t sub_19C08DCE0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = &off_1EE418F90;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_19C08DCF4(_QWORD *a1)
{
  if (a1 != &off_1EE418F90)
  {
    sub_19C08DCF4(a1[2]);
    sub_19C08DCF4(a1[1]);
    free(a1);
  }
}

void sub_19C08DD38(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  v2 = *(void ***)(a1 + 8);
  v3 = v2;
  do
  {
    if (v3 == (void **)&off_1EE418F90)
      goto LABEL_5;
    v4 = v3;
    v3 = (void **)v3[2];
  }
  while (v3 != (void **)&off_1EE418F90);
  if (!v4)
  {
LABEL_5:
    sub_19C08DCF4(v2);
    *(_QWORD *)(a1 + 8) = &off_1EE418F90;
    return;
  }
  while (1)
  {
    free(v4[3]);
    v4[3] = 0;
    v5 = (void **)v4[1];
    if (v5 == (void **)&off_1EE418F90)
      break;
    do
    {
      v4 = v5;
      v5 = (void **)v5[2];
    }
    while (v5 != (void **)&off_1EE418F90);
LABEL_6:
    if (!v4)
      goto LABEL_15;
  }
  do
  {
    v6 = v4;
    v4 = (void **)*v4;
  }
  while (v4 != (void **)&off_1EE418F90 && v6 == v4[1]);
  if (v4 != (void **)&off_1EE418F90)
    goto LABEL_6;
LABEL_15:
  sub_19C08DCF4(*(_QWORD **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = &off_1EE418F90;
}

uint64_t sub_19C08DDFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  while ((_UNKNOWN **)v1 != &off_1EE418F90)
  {
    result = v1;
    v1 = *(_QWORD *)(v1 + 16);
    if ((_UNKNOWN **)v1 == &off_1EE418F90)
      return result;
  }
  return 0;
}

_QWORD *sub_19C08DE2C(_QWORD *result)
{
  _QWORD *v1;
  _UNKNOWN **v2;
  BOOL v3;

  if (result)
  {
    v1 = (_QWORD *)result[1];
    if (v1 == &off_1EE418F90)
    {
      do
      {
        v2 = (_UNKNOWN **)*result;
        v3 = (_UNKNOWN **)*result != &off_1EE418F90 && result == *(_QWORD **)(*result + 8);
        result = (_QWORD *)*result;
      }
      while (v3);
      if (v2 == &off_1EE418F90)
        return 0;
      else
        return v2;
    }
    else
    {
      do
      {
        result = v1;
        v1 = (_QWORD *)v1[2];
      }
      while (v1 != &off_1EE418F90);
    }
  }
  return result;
}

_QWORD *sub_19C08DE7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = malloc_type_malloc(0x28uLL, 0x10A0040E109E3ABuLL);
  v5 = v4;
  if (v4)
  {
    v4[3] = a2;
    sub_19C08DED8(a1, (uint64_t)v4);
  }
  return v5;
}

uint64_t sub_19C08DED8(uint64_t result, uint64_t a2)
{
  _UNKNOWN **v2;
  uint64_t v3;
  uint64_t v4;
  _UNKNOWN **v5;
  uint64_t (*v6)(uint64_t, void *);
  _UNKNOWN **v7;
  uint64_t v8;
  _UNKNOWN **v9;
  _UNKNOWN **v10;
  _UNKNOWN **v12;
  _UNKNOWN **v13;
  _QWORD *v14;
  _QWORD *v15;
  _UNKNOWN **v16;
  _UNKNOWN **v17;
  _UNKNOWN **v18;

  v2 = (_UNKNOWN **)a2;
  v3 = result;
  v4 = *(_QWORD *)(a2 + 24);
  v6 = *(uint64_t (**)(uint64_t, void *))result;
  v5 = *(_UNKNOWN ***)(result + 8);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = &off_1EE418F90;
  *(_QWORD *)(a2 + 16) = &off_1EE418F90;
  *(_QWORD *)a2 = &off_1EE418F90;
  ++*(_DWORD *)(result + 16);
  if (v5 == &off_1EE418F90)
  {
    *(_QWORD *)(result + 8) = a2;
    *(_DWORD *)(a2 + 32) = 1;
  }
  else
  {
    do
    {
      while (1)
      {
        v7 = v5;
        result = v6(v4, v5[3]);
        if ((int)result <= 0)
          break;
        v5 = (_UNKNOWN **)v7[1];
        if (v5 == &off_1EE418F90)
        {
          v7[1] = v2;
          *v2 = v7;
          if (*((_DWORD *)v7 + 8))
            return result;
          while (1)
          {
LABEL_10:
            v8 = (uint64_t)*v7;
            v9 = (_UNKNOWN **)*((_QWORD *)*v7 + 2);
            v10 = v9;
            if (v7 == v9)
              v10 = *(_UNKNOWN ***)(v8 + 8);
            if (v10 == &off_1EE418F90 || *((_DWORD *)v10 + 8))
              break;
            *((_DWORD *)v10 + 8) = 1;
            *((_DWORD *)v7 + 8) = 1;
            v7 = *(_UNKNOWN ***)v8;
            if (*(_UNKNOWN ***)v8 != &off_1EE418F90)
            {
              *(_DWORD *)(v8 + 32) = 0;
              v2 = (_UNKNOWN **)v8;
              if (!*((_DWORD *)v7 + 8))
                continue;
            }
            return result;
          }
          if (v7 == v9 && v2 == (_UNKNOWN **)v7[1])
          {
            v16 = (_UNKNOWN **)v2[2];
            v7[1] = v16;
            v2[2] = v7;
            if ((_UNKNOWN **)v8 == &off_1EE418F90)
            {
              *(_QWORD *)(v3 + 8) = v2;
            }
            else if (*(_UNKNOWN ***)(v8 + 16) == v7)
            {
              *(_QWORD *)(v8 + 16) = v2;
            }
            else
            {
              *(_QWORD *)(v8 + 8) = v2;
              v16 = (_UNKNOWN **)v7[1];
            }
            *v2 = (_UNKNOWN *)v8;
            *v7 = v2;
            if (v16 != &off_1EE418F90)
              *v16 = v7;
            v13 = (_UNKNOWN **)v2[2];
LABEL_35:
            *((_DWORD *)v2 + 8) = 1;
            v14 = *v2;
            *((_DWORD *)*v2 + 8) = 0;
            v15 = v2 + 2;
            v12 = v13;
            goto LABEL_36;
          }
          v12 = (_UNKNOWN **)v7[2];
          if (v2 != v12)
          {
            v13 = v2;
            v2 = v7;
            goto LABEL_23;
          }
          if (v7 != *(_UNKNOWN ***)(v8 + 8))
          {
            v13 = v2;
            v2 = v7;
            goto LABEL_35;
          }
          v18 = (_UNKNOWN **)v2[1];
          v7[2] = v18;
          v2[1] = v7;
          if ((_UNKNOWN **)v8 == &off_1EE418F90)
          {
            *(_QWORD *)(v3 + 8) = v2;
          }
          else if (*(_UNKNOWN ***)(v8 + 16) == v7)
          {
            *(_QWORD *)(v8 + 16) = v2;
            v18 = (_UNKNOWN **)v7[2];
          }
          else
          {
            *(_QWORD *)(v8 + 8) = v2;
          }
          *v2 = (_UNKNOWN *)v8;
          *v7 = v2;
          if (v18 != &off_1EE418F90)
            *v18 = v7;
          v13 = (_UNKNOWN **)v2[1];
          v12 = (_UNKNOWN **)v2[2];
LABEL_23:
          *((_DWORD *)v2 + 8) = 1;
          v14 = *v2;
          *((_DWORD *)*v2 + 8) = 0;
          v15 = v2 + 2;
          if (v13 == v12)
          {
LABEL_36:
            if (v2 != (_UNKNOWN **)v14[2])
              goto LABEL_37;
            v12 = (_UNKNOWN **)v2[1];
            v14[2] = v12;
            v2[1] = v14;
            v17 = (_UNKNOWN **)*v14;
            if ((_UNKNOWN **)*v14 != &off_1EE418F90)
            {
              if (v17[2] == (_UNKNOWN *)v14)
              {
                v17[2] = v2;
                v12 = (_UNKNOWN **)v14[2];
              }
              else
              {
                v17[1] = v2;
              }
LABEL_52:
              *v2 = v17;
              *v14 = v2;
              if (v12 != &off_1EE418F90)
                *v12 = v14;
              return result;
            }
          }
          else
          {
LABEL_37:
            if (v13 != (_UNKNOWN **)v2[1] || v2 != (_UNKNOWN **)v14[1])
              return result;
            v14[1] = v12;
            *v15 = v14;
            v17 = (_UNKNOWN **)*v14;
            if ((_UNKNOWN **)*v14 != &off_1EE418F90)
            {
              if (v17[2] == (_UNKNOWN *)v14)
              {
                v17[2] = v2;
              }
              else
              {
                v17[1] = v2;
                v12 = (_UNKNOWN **)v14[1];
              }
              goto LABEL_52;
            }
          }
          *(_QWORD *)(v3 + 8) = v2;
          goto LABEL_52;
        }
      }
      v5 = (_UNKNOWN **)v7[2];
    }
    while (v5 != &off_1EE418F90);
    v7[2] = v2;
    *v2 = v7;
    if (!*((_DWORD *)v7 + 8))
      goto LABEL_10;
  }
  return result;
}

uint64_t sub_19C08E1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, _QWORD);
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if ((_UNKNOWN **)v2 == &off_1EE418F90)
    return 0;
  v4 = *(uint64_t (**)(uint64_t, _QWORD))a1;
  while (1)
  {
    v5 = v4(a2, *(_QWORD *)(v2 + 24));
    if (!v5)
      break;
    if (v5 >= 1)
      v6 = 8;
    else
      v6 = 16;
    v2 = *(_QWORD *)(v2 + v6);
    if ((_UNKNOWN **)v2 == &off_1EE418F90)
      return 0;
  }
  return v2;
}

uint64_t sub_19C08E240(uint64_t a1, uint64_t a2)
{
  return sub_19C08E24C(*(_UNKNOWN ***)(a1 + 8), a2, (int (**)(void *, uint64_t))a1);
}

uint64_t sub_19C08E24C(_UNKNOWN **a1, uint64_t a2, int (**a3)(void *, uint64_t))
{
  _UNKNOWN **v5;
  int (*v6)(void *, uint64_t);
  uint64_t result;

  if (a1 == &off_1EE418F90)
    return 0;
  v5 = a1;
  v6 = *a3;
  while (v6(v5[3], a2) <= 0)
  {
    v5 = (_UNKNOWN **)v5[1];
    if (v5 == &off_1EE418F90)
      return 0;
  }
  result = sub_19C08E24C(v5[2], a2, a3);
  if (!result)
    return (uint64_t)v5;
  return result;
}

uint64_t sub_19C08E2E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  while ((_UNKNOWN **)v1 != &off_1EE418F90)
  {
    result = v1;
    v1 = *(_QWORD *)(v1 + 8);
    if ((_UNKNOWN **)v1 == &off_1EE418F90)
      return result;
  }
  return 0;
}

_QWORD *sub_19C08E314(_QWORD *result)
{
  _QWORD *v1;
  _UNKNOWN **v2;
  BOOL v3;

  if (result)
  {
    v1 = (_QWORD *)result[2];
    if (v1 == &off_1EE418F90)
    {
      do
      {
        v2 = (_UNKNOWN **)*result;
        v3 = (_UNKNOWN **)*result != &off_1EE418F90 && result == *(_QWORD **)(*result + 16);
        result = (_QWORD *)*result;
      }
      while (v3);
      if (v2 == &off_1EE418F90)
        return 0;
      else
        return v2;
    }
    else
    {
      do
      {
        result = v1;
        v1 = (_QWORD *)v1[1];
      }
      while (v1 != &off_1EE418F90);
    }
  }
  return result;
}

_UNKNOWN **sub_19C08E364(uint64_t a1, _UNKNOWN **a2)
{
  void *v2;
  _UNKNOWN **v3;
  _UNKNOWN **v4;
  _UNKNOWN **v5;
  _QWORD *v6;
  _UNKNOWN **v7;
  _DWORD *v8;
  _DWORD *v9;
  _UNKNOWN **v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _DWORD *v15;
  uint64_t v16;
  _UNKNOWN **v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  _UNKNOWN **v21;
  _QWORD *v22;
  _UNKNOWN **v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _UNKNOWN **v27;

  v3 = (_UNKNOWN **)a2[2];
  v2 = a2[3];
  if (v3 == &off_1EE418F90)
  {
    v4 = a2;
    goto LABEL_7;
  }
  if (a2[1] != (_UNKNOWN *)&off_1EE418F90)
  {
    do
    {
      v4 = v3;
      v3 = (_UNKNOWN **)v3[1];
    }
    while (v3 != &off_1EE418F90);
    v3 = (_UNKNOWN **)v4[2];
    a2[3] = v4[3];
    if (v3 != &off_1EE418F90)
    {
LABEL_8:
      v5 = (_UNKNOWN **)*v4;
      if (*v4 != (_UNKNOWN *)&off_1EE418F90)
        goto LABEL_9;
LABEL_48:
      *(_QWORD *)(a1 + 8) = v3;
      if (v3 == &off_1EE418F90)
        goto LABEL_13;
      goto LABEL_12;
    }
LABEL_7:
    v3 = (_UNKNOWN **)v4[1];
    goto LABEL_8;
  }
  v4 = a2;
  v5 = (_UNKNOWN **)*a2;
  if (*a2 == (_UNKNOWN *)&off_1EE418F90)
    goto LABEL_48;
LABEL_9:
  v6 = v5 + 1;
  if (v5[1] != (_UNKNOWN *)v4)
    v6 = v5 + 2;
  *v6 = v3;
  if (v3 == &off_1EE418F90)
    goto LABEL_13;
LABEL_12:
  *v3 = v5;
LABEL_13:
  if (*((_DWORD *)v4 + 8) != 1)
    goto LABEL_51;
  if (!*((_DWORD *)v3 + 8))
  {
    *((_DWORD *)v3 + 8) = 1;
    goto LABEL_51;
  }
  if (v5 == &off_1EE418F90)
  {
LABEL_51:
    --*(_DWORD *)(a1 + 16);
    v4[3] = v2;
    return v4;
  }
  while (1)
  {
    v7 = v5;
    v8 = v5[2];
    if (v3 != (_UNKNOWN **)v8)
    {
      if (v8[8])
      {
        v9 = v5[2];
        goto LABEL_39;
      }
      *((_DWORD *)v5 + 8) = 0;
      v8[8] = 1;
      v10 = (_UNKNOWN **)*((_QWORD *)v8 + 1);
      v5[2] = v10;
      *((_QWORD *)v8 + 1) = v5;
      v12 = *v5;
      if (*v7 == (_UNKNOWN *)&off_1EE418F90)
      {
        *(_QWORD *)(a1 + 8) = v8;
        *(_QWORD *)v8 = v12;
        *v7 = v8;
        if (v10 == &off_1EE418F90)
          goto LABEL_36;
      }
      else if ((_UNKNOWN **)v12[2] == v7)
      {
        v12[2] = v8;
        v10 = (_UNKNOWN **)v7[2];
        *(_QWORD *)v8 = v12;
        *v7 = v8;
        if (v10 == &off_1EE418F90)
          goto LABEL_36;
      }
      else
      {
        v12[1] = v8;
        *(_QWORD *)v8 = v12;
        *v7 = v8;
        if (v10 == &off_1EE418F90)
          goto LABEL_36;
      }
LABEL_35:
      *v10 = v7;
      goto LABEL_36;
    }
    v9 = v5[1];
    if (v9[8])
      goto LABEL_38;
    *((_DWORD *)v7 + 8) = 0;
    v9[8] = 1;
    v10 = (_UNKNOWN **)*((_QWORD *)v9 + 2);
    v7[1] = v10;
    *((_QWORD *)v9 + 2) = v7;
    v11 = (uint64_t)*v7;
    if (*v7 != (_UNKNOWN *)&off_1EE418F90)
    {
      if (*(_UNKNOWN ***)(v11 + 16) == v7)
      {
        *(_QWORD *)(v11 + 16) = v9;
        *(_QWORD *)v9 = v11;
        *v7 = v9;
        if (v10 == &off_1EE418F90)
          goto LABEL_36;
      }
      else
      {
        *(_QWORD *)(v11 + 8) = v9;
        v10 = (_UNKNOWN **)v7[1];
        *(_QWORD *)v9 = v11;
        *v7 = v9;
        if (v10 == &off_1EE418F90)
          goto LABEL_36;
      }
      goto LABEL_35;
    }
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)v9 = v11;
    *v7 = v9;
    if (v10 != &off_1EE418F90)
      goto LABEL_35;
LABEL_36:
    v8 = v7[2];
    v9 = v8;
    if (v3 != (_UNKNOWN **)v8)
      goto LABEL_39;
    v9 = v7[1];
LABEL_38:
    v8 = v3;
LABEL_39:
    v13 = *((_DWORD *)v7 + 8);
    if (v13 != 1)
      break;
    if (v9[8] != 1 || *(_DWORD *)(*((_QWORD *)v9 + 2) + 32) != 1 || *(_DWORD *)(*((_QWORD *)v9 + 1) + 32) != 1)
      goto LABEL_59;
    if (v9 != (_DWORD *)&off_1EE418F90)
      v9[8] = 0;
    v5 = (_UNKNOWN **)*v7;
    v3 = v7;
    if (*v7 == (_UNKNOWN *)&off_1EE418F90)
      goto LABEL_51;
  }
  if (v13)
  {
LABEL_59:
    v15 = v7 + 4;
    goto LABEL_60;
  }
  v15 = v7 + 4;
  if (v9[8] == 1 && *(_DWORD *)(*((_QWORD *)v9 + 2) + 32) == 1 && *(_DWORD *)(*((_QWORD *)v9 + 1) + 32) == 1)
  {
    if (v9 != (_DWORD *)&off_1EE418F90)
      v9[8] = 0;
    *v15 = 1;
    --*(_DWORD *)(a1 + 16);
    v4[3] = v2;
    return v4;
  }
LABEL_60:
  if (v3 == (_UNKNOWN **)v8
    && v9[8] == 1
    && (v16 = *((_QWORD *)v9 + 2), !*(_DWORD *)(v16 + 32))
    && *(_DWORD *)(*((_QWORD *)v9 + 1) + 32) == 1)
  {
    v9[8] = 0;
    *(_DWORD *)(v16 + 32) = 1;
    v17 = *(_UNKNOWN ***)(v16 + 8);
    *((_QWORD *)v9 + 2) = v17;
    *(_QWORD *)(v16 + 8) = v9;
    v18 = *(_QWORD **)v9;
    if (*(_UNKNOWN ***)v9 == &off_1EE418F90)
    {
      *(_QWORD *)(a1 + 8) = v16;
    }
    else if ((_DWORD *)v18[2] == v9)
    {
      v18[2] = v16;
      v17 = (_UNKNOWN **)*((_QWORD *)v9 + 2);
    }
    else
    {
      v18[1] = v16;
    }
    *(_QWORD *)v16 = v18;
    *(_QWORD *)v9 = v16;
    if (v17 != &off_1EE418F90)
      *v17 = v9;
    v8 = v7[2];
    v9 = v8;
    if (v3 == (_UNKNOWN **)v8)
    {
      v19 = (void **)(v7 + 1);
      goto LABEL_85;
    }
  }
  else
  {
    v19 = (void **)(v7 + 1);
    if (v3 == (_UNKNOWN **)v7[1] && v9[8] == 1)
    {
      v20 = *((_QWORD *)v9 + 1);
      if (!*(_DWORD *)(v20 + 32) && *(_DWORD *)(*((_QWORD *)v9 + 2) + 32) == 1)
      {
        v9[8] = 0;
        *(_DWORD *)(v20 + 32) = 1;
        v21 = *(_UNKNOWN ***)(v20 + 16);
        *((_QWORD *)v9 + 1) = v21;
        *(_QWORD *)(v20 + 16) = v9;
        v22 = *(_QWORD **)v9;
        if (*(_UNKNOWN ***)v9 == &off_1EE418F90)
        {
          *(_QWORD *)(a1 + 8) = v20;
        }
        else if ((_DWORD *)v22[2] == v9)
        {
          v22[2] = v20;
        }
        else
        {
          v22[1] = v20;
          v21 = (_UNKNOWN **)*((_QWORD *)v9 + 1);
        }
        *(_QWORD *)v20 = v22;
        *(_QWORD *)v9 = v20;
        if (v21 != &off_1EE418F90)
          *v21 = v9;
        v8 = v7[2];
        v9 = v8;
        if (v3 == (_UNKNOWN **)v8)
        {
LABEL_85:
          v9 = *v19;
          v8 = v3;
        }
      }
    }
  }
  v9[8] = *v15;
  *v15 = 1;
  if (v3 == (_UNKNOWN **)v8)
  {
    *(_DWORD *)(*((_QWORD *)v9 + 1) + 32) = 1;
    v26 = (uint64_t)*v7;
    v25 = v7[1];
    v27 = (_UNKNOWN **)v25[2];
    v7[1] = v27;
    v25[2] = v7;
    if ((_UNKNOWN **)v26 == &off_1EE418F90)
    {
      *(_QWORD *)(a1 + 8) = v25;
    }
    else if (*(_UNKNOWN ***)(v26 + 16) == v7)
    {
      *(_QWORD *)(v26 + 16) = v25;
    }
    else
    {
      *(_QWORD *)(v26 + 8) = v25;
      v27 = (_UNKNOWN **)v7[1];
    }
    *v25 = v26;
    *v7 = v25;
    if (v27 != &off_1EE418F90)
    {
      *v27 = v7;
      --*(_DWORD *)(a1 + 16);
      v4[3] = v2;
      return v4;
    }
    goto LABEL_51;
  }
  *(_DWORD *)(*((_QWORD *)v9 + 2) + 32) = 1;
  v23 = (_UNKNOWN **)*((_QWORD *)v8 + 1);
  v7[2] = v23;
  *((_QWORD *)v8 + 1) = v7;
  v24 = (uint64_t)*v7;
  if (*v7 == (_UNKNOWN *)&off_1EE418F90)
  {
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)v8 = v24;
    *v7 = v8;
    if (v23 == &off_1EE418F90)
      goto LABEL_51;
  }
  else if (*(_UNKNOWN ***)(v24 + 16) == v7)
  {
    *(_QWORD *)(v24 + 16) = v8;
    v23 = (_UNKNOWN **)v7[2];
    *(_QWORD *)v8 = v24;
    *v7 = v8;
    if (v23 == &off_1EE418F90)
      goto LABEL_51;
  }
  else
  {
    *(_QWORD *)(v24 + 8) = v8;
    *(_QWORD *)v8 = v24;
    *v7 = v8;
    if (v23 == &off_1EE418F90)
      goto LABEL_51;
  }
  *v23 = v7;
  --*(_DWORD *)(a1 + 16);
  v4[3] = v2;
  return v4;
}

_UNKNOWN **sub_19C08E8A0(uint64_t a1, _UNKNOWN **a2)
{
  _UNKNOWN **v3;

  v3 = sub_19C08E364(a1, a2);
  sub_19C08DED8(a1, (uint64_t)v3);
  return v3;
}

void sub_19C08EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_19C08EFF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C08F00C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C08F024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C08F0BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C08F414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19C08F51C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v2 = *(void **)a1;
  if (v2)
    free(v2);
  v3 = *(void **)(a1 + 8);
  if (v3)
    free(v3);
  v4 = *(void **)(a1 + 16);
  if (v4)
    free(v4);
  v5 = *(void **)(a1 + 24);
  if (v5)
    free(v5);
  v6 = *(void **)(a1 + 32);
  if (v6)
    free(v6);
  v7 = *(void **)(a1 + 40);
  if (v7)
    free(v7);
  v8 = *(void **)(a1 + 48);
  if (v8)
    free(v8);
  v9 = *(void **)(a1 + 56);
  if (v9)
    free(v9);
  v10 = *(void **)(a1 + 64);
  if (v10)
    free(v10);
  v11 = *(void **)(a1 + 72);
  if (v11)
    free(v11);
  v12 = *(void **)(a1 + 80);
  if (v12)
    free(v12);
  v13 = *(void **)(a1 + 88);
  if (v13)
    free(v13);
  v14 = *(void **)(a1 + 96);
  if (v14)
    free(v14);
  v15 = *(void **)(a1 + 104);
  if (v15)
    free(v15);
  v16 = *(void **)(a1 + 112);
  if (v16)
    free(v16);
  v17 = *(void **)(a1 + 120);
  if (v17)
    free(v17);
}

void sub_19C08F6C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C08F6F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C08F7D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_19C08F7FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19C08F8B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19C08F8C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C08F8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C08F974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C08F988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C08FC40()
{
  JUMPOUT(0x19C08FC14);
}

_QWORD *sub_19C08FCE4(_QWORD *a1, uint64_t a2, uint64_t a3, int32x2_t *__src)
{
  int32x2_t v7;
  uint64_t v8;
  int v9;
  int32x2_t v10;
  __int128 v11;
  uint64_t v12;
  int32x2_t v13;
  __int128 v14;
  void *__p[2];
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v17 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18E344((uint64_t)a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  *a1 = &unk_1E3D21F38;
  v7 = __src[32];
  LODWORD(v8) = __src[17].i32[0];
  if ((int)v8 <= 1)
    v8 = 1;
  else
    v8 = v8;
  v9 = __src[33].i32[0];
  v18 = 1;
  v10 = vmax_s32(__src[16], (int32x2_t)0x100000001);
  *(_QWORD *)&v11 = v10.u32[0];
  *((_QWORD *)&v11 + 1) = v10.u32[1];
  v19 = v11;
  v20 = v8;
  sub_19C07C964((uint64_t)(a1 + 2), &v18, (int *)&v21);
  if (v9 <= 1)
    v12 = 1;
  else
    v12 = v9;
  v13 = vmax_s32(v7, (int32x2_t)0x100000001);
  v18 = 9;
  *(_QWORD *)&v14 = v13.u32[0];
  *((_QWORD *)&v14 + 1) = v13.u32[1];
  v19 = v14;
  v20 = v12;
  sub_19C07C964((uint64_t)(a1 + 5), &v18, (int *)&v21);
  return a1;
}

void sub_19C08FE30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C18E518(v1);
  _Unwind_Resume(a1);
}

void sub_19C08FE44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C18E518(v1);
  _Unwind_Resume(a1);
}

void sub_19C08FE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C08FE78(unsigned int *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t i;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *sub_19C18FEB8((uint64_t)a1, 9);
  (*(void (**)(uint64_t *__return_ptr, unsigned int *, uint64_t))(*(_QWORD *)a1 + 168))(&v35, a1, 9);
  v3 = v35;
  v4 = v36;
  v5 = v38;
  v33 = *sub_19C18FCD8((uint64_t)a1, 1);
  (*(void (**)(uint64_t *__return_ptr, unsigned int *, uint64_t))(*(_QWORD *)a1 + 160))(&v35, a1, 1);
  v6 = v35;
  v34 = v36;
  v31 = v38;
  v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 224))(a1);
  v8 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 216))(a1, 1);
  if (v7)
  {
    v9 = (int)v37 * (int)v34 / (int)v37;
    v10 = (int)v37 * (int)v34 % (int)v37;
    if (v9 | v10)
    {
      if (v6)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = a1[158];
        if ((int)v14 < 0)
          v14 = (int)v14 + 5;
        v15 = a1[159];
        if ((int)v15 < 0)
          v15 = (int)v15 + 5;
        v16 = a1[160];
        if ((int)v16 < 0)
          v16 = (int)v16 + 5;
        v17 = a1[161];
        if ((int)v17 < 0)
          v17 = (int)v17 + 5;
        v18 = a1[162];
        if ((int)v18 < 0)
          v18 = (int)v18 + 5;
        do
        {
          v32 = v13;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = (v12 + v31 * v11) * v37;
          do
          {
            for (i = 0; i != v6; ++i)
            {
              v35 = i;
              v36 = v20;
              v37 = v19;
              v38 = v12;
              v39 = v11;
              *((_DWORD *)v2
              + *(&v35 + v14)
              + v3 * *(&v35 + v15)
              + v4 * v3 * (*(&v35 + v16) + (*(&v35 + v17) + v5 * *(&v35 + v18)) * v19)) = *(_DWORD *)((char *)v33 + 4 * i + 4 * v6 * (v20 + v34 * (v22 + v19)));
            }
            v20 = ++v21 / (int)v37;
            v19 = v21 % (int)v37;
          }
          while (v21 / (int)v37 != v9 || v19 != v10);
          v13 = v32 + 1;
          v12 = (v32 + 1) / v8;
          v11 = (v32 + 1) % v8;
        }
        while (v12 != v7 || v11);
      }
      else
      {
        v27 = 0;
        do
        {
          v28 = 1;
          do
          {
            v29 = v28 / (int)v37 == v9 && (_DWORD)v37 * (_DWORD)v34 + (_DWORD)v37 * (v28 / (int)v37 - v9) == v28;
            ++v28;
          }
          while (!v29);
          ++v27;
        }
        while (v27 / v8 != v7 || v27 % v8);
      }
    }
    else
    {
      v25 = 1;
      do
      {
        v26 = v25 / v8 == v7 && v25 / v8 * v8 == v25;
        ++v25;
      }
      while (!v26);
    }
  }
  return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t *sub_19C090128(uint64_t *result, int a2)
{
  uint64_t *v3;
  char *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;

  v3 = result;
  v5 = (uint64_t **)(result + 6);
  v4 = (char *)result[6];
  v6 = result[2] + 40;
  v7 = *((unsigned int *)result + 158);
  if ((int)v7 < 0)
    v7 = (int)v7 + 5;
  v8 = *(_QWORD *)(v6 + 8 * v7);
  v9 = *((unsigned int *)result + 159);
  if ((int)v9 < 0)
    v9 = (int)v9 + 5;
  v10 = *(_QWORD *)(v6 + 8 * v9);
  v11 = *((unsigned int *)result + 160);
  if ((int)v11 < 0)
    v11 = (int)v11 + 5;
  v12 = *(_QWORD *)(v6 + 8 * v11);
  v13 = *((unsigned int *)result + 161);
  if ((int)v13 < 0)
    v13 = (int)v13 + 5;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  v15 = *((unsigned int *)result + 162);
  if ((int)v15 < 0)
    v15 = (int)v15 + 5;
  v16 = *(_QWORD *)(v6 + 8 * v15);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v17 = v4;
        v18 = *((_DWORD *)v4 + 8);
        if (v18 <= a2)
          break;
        v4 = *(char **)v17;
        v5 = (uint64_t **)v17;
        if (!*(_QWORD *)v17)
          goto LABEL_18;
      }
      if (v18 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v17 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v17 + 8);
        goto LABEL_18;
      }
    }
  }
  else
  {
    v17 = (char *)(result + 6);
LABEL_18:
    v19 = v17;
    v17 = (char *)operator new(0x50uLL);
    *((_DWORD *)v17 + 8) = a2;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((_QWORD *)v17 + 9) = 0;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v19;
    *v5 = (uint64_t *)v17;
    v20 = *(_QWORD *)v3[5];
    v21 = (uint64_t *)v17;
    if (v20)
    {
      v3[5] = v20;
      v21 = *v5;
    }
    result = sub_19C07CC40((uint64_t *)v3[6], v21);
    ++v3[7];
  }
  *((_QWORD *)v17 + 5) = v8;
  *((_QWORD *)v17 + 6) = v10;
  *((_QWORD *)v17 + 7) = v12;
  *((_QWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 9) = v16;
  return result;
}

void sub_19C090294(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C18E518(a1);
  operator delete(v1);
}

id sub_19C0902A8(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  char *v42;
  _QWORD **v43;
  uint64_t *v44;
  uint64_t **v45;
  unsigned int v46;
  uint64_t **v47;
  unsigned int v48;
  char *v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t **v54;
  uint64_t *v55;
  unsigned int v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  double v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t **v70;
  unsigned int v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t *v74;
  BOOL v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _BYTE *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  _QWORD **v87;
  char *v88;
  char **v89;
  char **v90;
  char **v91;
  unsigned int v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  void **v109;
  unsigned int v110;
  _QWORD *v111;
  char *v112;
  unsigned int v113;
  _DWORD *v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _DWORD *v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  unsigned int v138;
  uint64_t **v139;
  unsigned int v140;
  _DWORD *v141;
  _QWORD *v142;
  uint64_t *v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t **v151;
  uint64_t *v152;
  unsigned int v153;
  uint64_t **v154;
  unsigned int v155;
  uint64_t **v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t *v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  void *v169;
  const char *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  const char *v185;
  float v186;
  long double v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  double v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  const char *v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  double v202;
  void *v203;
  const char *v204;
  id v205;
  uint64_t v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  unint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  void *v217;
  char *v218;
  uint64_t **v219;
  unsigned int v220;
  char *__p;
  char *v222;

  v216 = a1;
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v5, v6, v7);
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v222 = 0;
  if (a3)
  {
    v11 = a3;
    v12 = 0;
    v13 = 0;
    LODWORD(a3) = 0;
    v14 = 0;
    while (1)
    {
      while (v12 < v13)
      {
        *(_DWORD *)v12 = a3;
        v12 += 4;
        v15 = (uint64_t)v12;
        a3 = (a3 + 1);
        if (a3 >= v11)
          goto LABEL_31;
      }
      v16 = (v12 - v14) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        sub_19C07DA0C();
      if ((v13 - v14) >> 1 > v17)
        v17 = (v13 - v14) >> 1;
      if ((unint64_t)(v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
      {
        if (v18 >> 62)
          sub_19C07C7FC();
        v19 = (char *)operator new(4 * v18);
        v20 = &v19[4 * v16];
        *(_DWORD *)v20 = a3;
        v15 = (uint64_t)(v20 + 4);
        if (v12 == v14)
          goto LABEL_23;
      }
      else
      {
        v19 = 0;
        v20 = (char *)(4 * v16);
        *(_DWORD *)(4 * v16) = a3;
        v15 = 4 * v16 + 4;
        if (v12 == v14)
          goto LABEL_23;
      }
      v21 = v12 - 4 - v14;
      if (v21 >= 0xBC)
      {
        if (&v19[v12 - v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] <= &v19[v12 - v14 - 4]
          && &v12[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v12 - 4
          && (unint64_t)(v14 - v19) >= 0x20)
        {
          v26 = (v21 >> 2) + 1;
          v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
          v22 = &v12[-v27];
          v20 -= v27;
          v28 = &v19[4 * v16 - 16];
          v29 = (__int128 *)(v12 - 16);
          v30 = v26 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v31 = *v29;
            *((_OWORD *)v28 - 1) = *(v29 - 1);
            *(_OWORD *)v28 = v31;
            v28 -= 32;
            v29 -= 2;
            v30 -= 8;
          }
          while (v30);
          if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_23;
        }
        else
        {
          v22 = v12;
        }
      }
      else
      {
        v22 = v12;
      }
      do
      {
        v23 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v20 - 1) = v23;
        v20 -= 4;
      }
      while (v22 != v14);
LABEL_23:
      v13 = &v19[4 * v18];
      if (v14)
      {
        v24 = v14;
        v25 = v15;
        operator delete(v24);
        v15 = v25;
      }
      v14 = v20;
      a3 = (a3 + 1);
      v12 = (char *)v15;
      if (a3 >= v11)
      {
LABEL_31:
        v214 = (char *)v15;
        v222 = (char *)v15;
        a3 = v11;
        goto LABEL_33;
      }
    }
  }
  v214 = 0;
  v14 = 0;
LABEL_33:
  __p = v14;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v8, v9, v10, a2);
  v212 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v32, v33, v34);
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v35, v36, v37);
  v210 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14 != v214)
  {
    v213 = a3;
    v41 = 0.0;
    v42 = v14;
    while (1)
    {
      v43 = (_QWORD **)(v216 + 8);
      v45 = (uint64_t **)(v216 + 16);
      v44 = (uint64_t *)*((_QWORD *)v216 + 2);
      v218 = v42;
      v46 = *(_DWORD *)v42;
      if (v44)
      {
        while (1)
        {
          while (1)
          {
            v47 = (uint64_t **)v44;
            v48 = *((_DWORD *)v44 + 8);
            if (v46 >= v48)
              break;
            v44 = *v47;
            v45 = v47;
            if (!*v47)
              goto LABEL_43;
          }
          if (v48 >= v46)
            break;
          v44 = v47[1];
          if (!v44)
          {
            v45 = v47 + 1;
            goto LABEL_43;
          }
        }
        v49 = (char *)v47;
        v55 = v47[6];
        v53 = v47 + 6;
        v52 = v55;
        v54 = v53;
        v219 = v53;
        if (v55)
          goto LABEL_50;
      }
      else
      {
        v47 = (uint64_t **)(v216 + 16);
LABEL_43:
        v49 = (char *)operator new(0x40uLL);
        *((_DWORD *)v49 + 8) = v46;
        *((_QWORD *)v49 + 7) = 0;
        *((_QWORD *)v49 + 6) = 0;
        *((_QWORD *)v49 + 5) = v49 + 48;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
        *((_QWORD *)v49 + 2) = v47;
        *v45 = (uint64_t *)v49;
        v50 = (_QWORD *)**v43;
        v51 = (uint64_t *)v49;
        if (v50)
        {
          *v43 = v50;
          v51 = *v45;
        }
        sub_19C07CC40(*((uint64_t **)v216 + 2), v51);
        ++*((_QWORD *)v216 + 3);
        v46 = *(_DWORD *)v218;
        v53 = (uint64_t **)(v49 + 48);
        v52 = (uint64_t *)*((_QWORD *)v49 + 6);
        v54 = (uint64_t **)(v49 + 48);
        v219 = (uint64_t **)(v49 + 48);
        if (v52)
        {
          while (1)
          {
LABEL_50:
            while (1)
            {
              v53 = (uint64_t **)v52;
              v56 = *((_DWORD *)v52 + 7);
              if (v46 >= v56)
                break;
              v52 = *v53;
              v54 = v53;
              if (!*v53)
                goto LABEL_54;
            }
            if (v56 >= v46)
              break;
            v52 = v53[1];
            if (!v52)
            {
              v54 = v53 + 1;
              goto LABEL_54;
            }
          }
          LODWORD(v3) = *((_DWORD *)v53 + 8);
          if (v213 > 0x31)
            goto LABEL_35;
LABEL_59:
          objc_msgSend_array(MEMORY[0x1E0C99DE8], v38, v39, v40);
          v217 = (void *)objc_claimAutoreleasedReturnValue();
          v63 = (unsigned int *)__p;
          v64 = 0.0;
          if (__p == v222)
          {
            v65 = 0;
          }
          else
          {
            v215 = v49;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v219;
              v68 = *v219;
              v69 = *v63;
LABEL_63:
              v70 = v67;
              if (v68)
              {
                while (1)
                {
                  v67 = (uint64_t **)v68;
                  v71 = *((_DWORD *)v68 + 7);
                  if (v69 < v71)
                  {
                    v68 = *v67;
                    goto LABEL_63;
                  }
                  if (v71 >= v69)
                    break;
                  v68 = v67[1];
                  if (!v68)
                  {
                    v70 = v67 + 1;
                    goto LABEL_68;
                  }
                }
                v220 = *((_DWORD *)v67 + 8);
              }
              else
              {
LABEL_68:
                v72 = (uint64_t *)operator new(0x28uLL);
                *((_DWORD *)v72 + 7) = v69;
                *((_DWORD *)v72 + 8) = 0;
                *v72 = 0;
                v72[1] = 0;
                v72[2] = (uint64_t)v67;
                *v70 = v72;
                v73 = (_QWORD *)**((_QWORD **)v215 + 5);
                if (v73)
                {
                  *((_QWORD *)v215 + 5) = v73;
                  v72 = *v70;
                }
                v74 = *v219;
                v75 = v72 == *v219;
                *((_BYTE *)v72 + 24) = v75;
                if (!v75)
                {
                  do
                  {
                    v76 = v72[2];
                    if (*(_BYTE *)(v76 + 24))
                      break;
                    v77 = *(uint64_t **)(v76 + 16);
                    v78 = *v77;
                    if (*v77 == v76)
                    {
                      v81 = v77[1];
                      if (!v81 || (v82 = *(unsigned __int8 *)(v81 + 24), v79 = (_BYTE *)(v81 + 24), v82))
                      {
                        if (*(uint64_t **)v76 == v72)
                        {
                          *(_BYTE *)(v76 + 24) = 1;
                          *((_BYTE *)v77 + 24) = 0;
                          v85 = *(_QWORD *)(v76 + 8);
                          *v77 = v85;
                          if (v85)
                            goto LABEL_85;
                        }
                        else
                        {
                          v83 = *(uint64_t **)(v76 + 8);
                          v84 = *v83;
                          *(_QWORD *)(v76 + 8) = *v83;
                          if (v84)
                          {
                            *(_QWORD *)(v84 + 16) = v76;
                            v77 = *(uint64_t **)(v76 + 16);
                          }
                          v83[2] = (uint64_t)v77;
                          *(_QWORD *)(*(_QWORD *)(v76 + 16) + 8 * (**(_QWORD **)(v76 + 16) != v76)) = v83;
                          *v83 = v76;
                          *(_QWORD *)(v76 + 16) = v83;
                          v77 = (uint64_t *)v83[2];
                          v76 = *v77;
                          *((_BYTE *)v83 + 24) = 1;
                          *((_BYTE *)v77 + 24) = 0;
                          v85 = *(_QWORD *)(v76 + 8);
                          *v77 = v85;
                          if (v85)
LABEL_85:
                            *(_QWORD *)(v85 + 16) = v77;
                        }
                        *(_QWORD *)(v76 + 16) = v77[2];
                        *(_QWORD *)(v77[2] + 8 * (*(_QWORD *)v77[2] != (_QWORD)v77)) = v76;
                        *(_QWORD *)(v76 + 8) = v77;
LABEL_92:
                        v77[2] = v76;
                        break;
                      }
                    }
                    else if (!v78 || (v80 = *(unsigned __int8 *)(v78 + 24), v79 = (_BYTE *)(v78 + 24), v80))
                    {
                      if (*(uint64_t **)v76 == v72)
                      {
                        v133 = v72[1];
                        *(_QWORD *)v76 = v133;
                        if (v133)
                        {
                          *(_QWORD *)(v133 + 16) = v76;
                          v77 = *(uint64_t **)(v76 + 16);
                        }
                        v72[2] = (uint64_t)v77;
                        *(_QWORD *)(*(_QWORD *)(v76 + 16) + 8 * (**(_QWORD **)(v76 + 16) != v76)) = v72;
                        v72[1] = v76;
                        *(_QWORD *)(v76 + 16) = v72;
                        v77 = (uint64_t *)v72[2];
                        *((_BYTE *)v72 + 24) = 1;
                        *((_BYTE *)v77 + 24) = 0;
                        v76 = v77[1];
                        v86 = *(uint64_t **)v76;
                        v77[1] = *(_QWORD *)v76;
                        if (v86)
LABEL_90:
                          v86[2] = (uint64_t)v77;
                      }
                      else
                      {
                        *(_BYTE *)(v76 + 24) = 1;
                        *((_BYTE *)v77 + 24) = 0;
                        v76 = v77[1];
                        v86 = *(uint64_t **)v76;
                        v77[1] = *(_QWORD *)v76;
                        if (v86)
                          goto LABEL_90;
                      }
                      *(_QWORD *)(v76 + 16) = v77[2];
                      *(_QWORD *)(v77[2] + 8 * (*(_QWORD *)v77[2] != (_QWORD)v77)) = v76;
                      *(_QWORD *)v76 = v77;
                      goto LABEL_92;
                    }
                    *(_BYTE *)(v76 + 24) = 1;
                    v72 = v77;
                    *((_BYTE *)v77 + 24) = v77 == v74;
                    *v79 = 1;
                  }
                  while (v77 != v74);
                }
                v220 = 0;
                ++*((_QWORD *)v215 + 7);
                v69 = *v63;
              }
              v87 = (_QWORD **)(v216 + 8);
              v89 = (char **)(v216 + 16);
              v88 = (char *)*((_QWORD *)v216 + 2);
              v90 = (char **)(v216 + 16);
              v91 = (char **)(v216 + 16);
              if (v88)
              {
                while (1)
                {
                  while (1)
                  {
                    v91 = (char **)v88;
                    v92 = *((_DWORD *)v88 + 8);
                    if (v69 >= v92)
                      break;
                    v88 = *v91;
                    v90 = v91;
                    if (!*v91)
                      goto LABEL_101;
                  }
                  if (v92 >= v69)
                    break;
                  v88 = v91[1];
                  if (!v88)
                  {
                    v90 = v91 + 1;
                    goto LABEL_101;
                  }
                }
                v93 = (char *)v91;
              }
              else
              {
LABEL_101:
                v93 = (char *)operator new(0x40uLL);
                *((_DWORD *)v93 + 8) = v69;
                *((_QWORD *)v93 + 7) = 0;
                *((_QWORD *)v93 + 6) = 0;
                *((_QWORD *)v93 + 5) = v93 + 48;
                *(_QWORD *)v93 = 0;
                *((_QWORD *)v93 + 1) = 0;
                *((_QWORD *)v93 + 2) = v91;
                *v90 = v93;
                v94 = (_QWORD *)**v87;
                v95 = v93;
                if (v94)
                {
                  *v87 = v94;
                  v95 = *v90;
                }
                v96 = *v89;
                v75 = v95 == *v89;
                v95[24] = v75;
                if (!v75)
                {
                  do
                  {
                    v97 = *((_QWORD *)v95 + 2);
                    if (*(_BYTE *)(v97 + 24))
                      break;
                    v98 = *(char **)(v97 + 16);
                    v99 = *(_QWORD *)v98;
                    if (*(_QWORD *)v98 == v97)
                    {
                      v102 = *((_QWORD *)v98 + 1);
                      if (!v102 || (v103 = *(unsigned __int8 *)(v102 + 24), v100 = (_BYTE *)(v102 + 24), v103))
                      {
                        if (*(char **)v97 == v95)
                        {
                          *(_BYTE *)(v97 + 24) = 1;
                          v98[24] = 0;
                          v106 = *(_QWORD *)(v97 + 8);
                          *(_QWORD *)v98 = v106;
                          if (v106)
                            goto LABEL_118;
                        }
                        else
                        {
                          v104 = *(uint64_t **)(v97 + 8);
                          v105 = *v104;
                          *(_QWORD *)(v97 + 8) = *v104;
                          if (v105)
                          {
                            *(_QWORD *)(v105 + 16) = v97;
                            v98 = *(char **)(v97 + 16);
                          }
                          v104[2] = (uint64_t)v98;
                          *(_QWORD *)(*(_QWORD *)(v97 + 16) + 8 * (**(_QWORD **)(v97 + 16) != v97)) = v104;
                          *v104 = v97;
                          *(_QWORD *)(v97 + 16) = v104;
                          v98 = (char *)v104[2];
                          v97 = *(_QWORD *)v98;
                          *((_BYTE *)v104 + 24) = 1;
                          v98[24] = 0;
                          v106 = *(_QWORD *)(v97 + 8);
                          *(_QWORD *)v98 = v106;
                          if (v106)
LABEL_118:
                            *(_QWORD *)(v106 + 16) = v98;
                        }
                        *(_QWORD *)(v97 + 16) = *((_QWORD *)v98 + 2);
                        *(_QWORD *)(*((_QWORD *)v98 + 2) + 8 * (**((_QWORD **)v98 + 2) != (_QWORD)v98)) = v97;
                        *(_QWORD *)(v97 + 8) = v98;
LABEL_125:
                        *((_QWORD *)v98 + 2) = v97;
                        break;
                      }
                    }
                    else if (!v99 || (v101 = *(unsigned __int8 *)(v99 + 24), v100 = (_BYTE *)(v99 + 24), v101))
                    {
                      if (*(char **)v97 == v95)
                      {
                        v134 = *((_QWORD *)v95 + 1);
                        *(_QWORD *)v97 = v134;
                        if (v134)
                        {
                          *(_QWORD *)(v134 + 16) = v97;
                          v98 = *(char **)(v97 + 16);
                        }
                        *((_QWORD *)v95 + 2) = v98;
                        *(_QWORD *)(*(_QWORD *)(v97 + 16) + 8 * (**(_QWORD **)(v97 + 16) != v97)) = v95;
                        *((_QWORD *)v95 + 1) = v97;
                        *(_QWORD *)(v97 + 16) = v95;
                        v98 = (char *)*((_QWORD *)v95 + 2);
                        v95[24] = 1;
                        v98[24] = 0;
                        v97 = *((_QWORD *)v98 + 1);
                        v107 = *(char **)v97;
                        *((_QWORD *)v98 + 1) = *(_QWORD *)v97;
                        if (v107)
LABEL_123:
                          *((_QWORD *)v107 + 2) = v98;
                      }
                      else
                      {
                        *(_BYTE *)(v97 + 24) = 1;
                        v98[24] = 0;
                        v97 = *((_QWORD *)v98 + 1);
                        v107 = *(char **)v97;
                        *((_QWORD *)v98 + 1) = *(_QWORD *)v97;
                        if (v107)
                          goto LABEL_123;
                      }
                      *(_QWORD *)(v97 + 16) = *((_QWORD *)v98 + 2);
                      *(_QWORD *)(*((_QWORD *)v98 + 2) + 8 * (**((_QWORD **)v98 + 2) != (_QWORD)v98)) = v97;
                      *(_QWORD *)v97 = v98;
                      goto LABEL_125;
                    }
                    *(_BYTE *)(v97 + 24) = 1;
                    v95 = v98;
                    v98[24] = v98 == v96;
                    *v100 = 1;
                  }
                  while (v98 != v96);
                }
                ++*((_QWORD *)v216 + 3);
              }
              v109 = (void **)(v93 + 48);
              v108 = (char *)*((_QWORD *)v93 + 6);
              v110 = *(_DWORD *)v218;
              v111 = v93 + 48;
              v112 = v93 + 48;
              if (v108)
              {
                while (1)
                {
                  while (1)
                  {
                    v112 = v108;
                    v113 = *((_DWORD *)v108 + 7);
                    if (v110 >= v113)
                      break;
                    v108 = *(char **)v112;
                    v111 = v112;
                    if (!*(_QWORD *)v112)
                      goto LABEL_134;
                  }
                  if (v113 >= v110)
                    break;
                  v108 = (char *)*((_QWORD *)v112 + 1);
                  if (!v108)
                  {
                    v111 = v112 + 8;
                    goto LABEL_134;
                  }
                }
                v127 = *((_DWORD *)v112 + 8);
              }
              else
              {
LABEL_134:
                v114 = operator new(0x28uLL);
                v114[7] = v110;
                v114[8] = 0;
                *(_QWORD *)v114 = 0;
                *((_QWORD *)v114 + 1) = 0;
                *((_QWORD *)v114 + 2) = v112;
                *v111 = v114;
                v115 = **((_QWORD **)v93 + 5);
                if (v115)
                {
                  *((_QWORD *)v93 + 5) = v115;
                  v114 = (_DWORD *)*v111;
                }
                v116 = *v109;
                v75 = v114 == *v109;
                *((_BYTE *)v114 + 24) = v75;
                if (!v75)
                {
                  do
                  {
                    v117 = *((_QWORD *)v114 + 2);
                    if (*(_BYTE *)(v117 + 24))
                      break;
                    v118 = *(_BYTE **)(v117 + 16);
                    v119 = *(_QWORD *)v118;
                    if (*(_QWORD *)v118 == v117)
                    {
                      v122 = *((_QWORD *)v118 + 1);
                      if (!v122 || (v123 = *(unsigned __int8 *)(v122 + 24), v120 = (_BYTE *)(v122 + 24), v123))
                      {
                        if (*(_DWORD **)v117 == v114)
                        {
                          *(_BYTE *)(v117 + 24) = 1;
                          v118[24] = 0;
                          v126 = *(_QWORD *)(v117 + 8);
                          *(_QWORD *)v118 = v126;
                          if (v126)
                            goto LABEL_151;
                        }
                        else
                        {
                          v124 = *(uint64_t **)(v117 + 8);
                          v125 = *v124;
                          *(_QWORD *)(v117 + 8) = *v124;
                          if (v125)
                          {
                            *(_QWORD *)(v125 + 16) = v117;
                            v118 = *(_BYTE **)(v117 + 16);
                          }
                          v124[2] = (uint64_t)v118;
                          *(_QWORD *)(*(_QWORD *)(v117 + 16) + 8 * (**(_QWORD **)(v117 + 16) != v117)) = v124;
                          *v124 = v117;
                          *(_QWORD *)(v117 + 16) = v124;
                          v118 = (_BYTE *)v124[2];
                          v117 = *(_QWORD *)v118;
                          *((_BYTE *)v124 + 24) = 1;
                          v118[24] = 0;
                          v126 = *(_QWORD *)(v117 + 8);
                          *(_QWORD *)v118 = v126;
                          if (v126)
LABEL_151:
                            *(_QWORD *)(v126 + 16) = v118;
                        }
                        *(_QWORD *)(v117 + 16) = *((_QWORD *)v118 + 2);
                        *(_QWORD *)(*((_QWORD *)v118 + 2) + 8 * (**((_QWORD **)v118 + 2) != (_QWORD)v118)) = v117;
                        *(_QWORD *)(v117 + 8) = v118;
LABEL_158:
                        *((_QWORD *)v118 + 2) = v117;
                        break;
                      }
                    }
                    else if (!v119 || (v121 = *(unsigned __int8 *)(v119 + 24), v120 = (_BYTE *)(v119 + 24), v121))
                    {
                      if (*(_DWORD **)v117 == v114)
                      {
                        v135 = *((_QWORD *)v114 + 1);
                        *(_QWORD *)v117 = v135;
                        if (v135)
                        {
                          *(_QWORD *)(v135 + 16) = v117;
                          v118 = *(_BYTE **)(v117 + 16);
                        }
                        *((_QWORD *)v114 + 2) = v118;
                        *(_QWORD *)(*(_QWORD *)(v117 + 16) + 8 * (**(_QWORD **)(v117 + 16) != v117)) = v114;
                        *((_QWORD *)v114 + 1) = v117;
                        *(_QWORD *)(v117 + 16) = v114;
                        v118 = (_BYTE *)*((_QWORD *)v114 + 2);
                        *((_BYTE *)v114 + 24) = 1;
                        v118[24] = 0;
                        v117 = *((_QWORD *)v118 + 1);
                        v128 = *(_DWORD **)v117;
                        *((_QWORD *)v118 + 1) = *(_QWORD *)v117;
                        if (v128)
LABEL_156:
                          *((_QWORD *)v128 + 2) = v118;
                      }
                      else
                      {
                        *(_BYTE *)(v117 + 24) = 1;
                        v118[24] = 0;
                        v117 = *((_QWORD *)v118 + 1);
                        v128 = *(_DWORD **)v117;
                        *((_QWORD *)v118 + 1) = *(_QWORD *)v117;
                        if (v128)
                          goto LABEL_156;
                      }
                      *(_QWORD *)(v117 + 16) = *((_QWORD *)v118 + 2);
                      *(_QWORD *)(*((_QWORD *)v118 + 2) + 8 * (**((_QWORD **)v118 + 2) != (_QWORD)v118)) = v117;
                      *(_QWORD *)v117 = v118;
                      goto LABEL_158;
                    }
                    *(_BYTE *)(v117 + 24) = 1;
                    v114 = v118;
                    v118[24] = v118 == (_BYTE *)v116;
                    *v120 = 1;
                  }
                  while (v118 != (_BYTE *)v116);
                }
                v127 = 0;
                ++*((_QWORD *)v93 + 7);
              }
              objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v60, v220, v62);
              v129 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_addObject_(v217, v130, (uint64_t)v129, v131);
              v66 += v127;
              v65 += v220;

              ++v63;
            }
            while (v63 != (unsigned int *)v222);
            v136 = v219;
            if (v66)
            {
              v137 = *v219;
              v138 = *(_DWORD *)v218;
              v139 = v219;
              v49 = v215;
              if (*v219)
              {
                while (1)
                {
                  while (1)
                  {
                    v136 = (uint64_t **)v137;
                    v140 = *((_DWORD *)v137 + 7);
                    if (v138 >= v140)
                      break;
                    v137 = *v136;
                    v139 = v136;
                    if (!*v136)
                      goto LABEL_188;
                  }
                  if (v140 >= v138)
                    break;
                  v137 = v136[1];
                  if (!v137)
                  {
                    v139 = v136 + 1;
                    goto LABEL_188;
                  }
                }
                v141 = v136;
              }
              else
              {
LABEL_188:
                v141 = operator new(0x28uLL);
                v141[7] = v138;
                v141[8] = 0;
                *(_QWORD *)v141 = 0;
                *((_QWORD *)v141 + 1) = 0;
                *((_QWORD *)v141 + 2) = v136;
                *v139 = (uint64_t *)v141;
                v142 = (_QWORD *)**((_QWORD **)v215 + 5);
                v143 = (uint64_t *)v141;
                if (v142)
                {
                  *((_QWORD *)v215 + 5) = v142;
                  v143 = *v139;
                }
                sub_19C07CC40(*((uint64_t **)v215 + 6), v143);
                ++*((_QWORD *)v215 + 7);
              }
              LODWORD(v132) = v141[8];
              v64 = (double)v132 * 100.0 / (double)v66;
            }
            else
            {
              v49 = v215;
            }
          }
          objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v60, v61, v62, v64);
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v212, v145, (uint64_t)v144, v146);

          if (v65)
          {
            v151 = v219;
            v152 = *v219;
            v153 = *(_DWORD *)v218;
            v154 = v219;
            if (*v219)
            {
              while (1)
              {
                while (1)
                {
                  v154 = (uint64_t **)v152;
                  v155 = *((_DWORD *)v152 + 7);
                  if (v153 >= v155)
                    break;
                  v152 = *v154;
                  v151 = v154;
                  if (!*v154)
                    goto LABEL_203;
                }
                if (v155 >= v153)
                  break;
                v152 = v154[1];
                if (!v152)
                {
                  v151 = v154 + 1;
                  goto LABEL_203;
                }
              }
              v157 = v154;
            }
            else
            {
LABEL_203:
              v156 = v151;
              v157 = operator new(0x28uLL);
              v157[7] = v153;
              v157[8] = 0;
              *(_QWORD *)v157 = 0;
              *((_QWORD *)v157 + 1) = 0;
              *((_QWORD *)v157 + 2) = v154;
              *v156 = (uint64_t *)v157;
              v158 = **((_QWORD **)v49 + 5);
              v159 = (uint64_t *)v157;
              if (v158)
              {
                *((_QWORD *)v49 + 5) = v158;
                v159 = *v156;
              }
              sub_19C07CC40(*((uint64_t **)v49 + 6), v159);
              ++*((_QWORD *)v49 + 7);
            }
            LODWORD(v150) = v157[8];
            objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v147, v148, v149, (double)v150 * 100.0 / (double)v65);
          }
          else
          {
            objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v147, v148, v149, 0.0);
          }
          v160 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v211, v161, (uint64_t)v160, v162);

          v166 = (void *)objc_msgSend_copy(v217, v163, v164, v165);
          objc_msgSend_addObject_(v210, v167, (uint64_t)v166, v168);

          goto LABEL_35;
        }
      }
LABEL_54:
      v57 = operator new(0x28uLL);
      v57[7] = v46;
      v57[8] = 0;
      *(_QWORD *)v57 = 0;
      *((_QWORD *)v57 + 1) = 0;
      *((_QWORD *)v57 + 2) = v53;
      *v54 = (uint64_t *)v57;
      v58 = **((_QWORD **)v49 + 5);
      v59 = (uint64_t *)v57;
      if (v58)
      {
        *((_QWORD *)v49 + 5) = v58;
        v59 = *v54;
      }
      sub_19C07CC40(*((uint64_t **)v49 + 6), v59);
      ++*((_QWORD *)v49 + 7);
      LODWORD(v3) = v57[8];
      if (v213 <= 0x31)
        goto LABEL_59;
LABEL_35:
      v41 = v41 + (double)v3;
      v42 = v218 + 4;
      if (v218 + 4 == v214)
        goto LABEL_211;
    }
  }
  v41 = 0.0;
LABEL_211:
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v38, v39, v40, v41 * 100.0 / (double)v208);
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v209, v170, (uint64_t)v169, (uint64_t)MLPModelTrainerOverallAccuracyKey[0]);

  v174 = (void *)objc_msgSend_copy(v212, v171, v172, v173);
  objc_msgSend_setObject_forKeyedSubscript_(v209, v175, (uint64_t)v174, (uint64_t)MLPModelTrainerPerClassPrecisionKey[0]);

  v179 = (void *)objc_msgSend_copy(v211, v176, v177, v178);
  objc_msgSend_setObject_forKeyedSubscript_(v209, v180, (uint64_t)v179, (uint64_t)MLPModelTrainerPerClassRecallKey[0]);

  v184 = (void *)objc_msgSend_copy(v210, v181, v182, v183);
  objc_msgSend_setObject_forKeyedSubscript_(v209, v185, (uint64_t)v184, (uint64_t)MLPModelTrainerConfusionMatrixKey[0]);

  v186 = (float)-*((float *)v216 + 8) / (float)v208;
  v187 = exp2(v186);
  *(float *)&v187 = v187;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v188, v189, v190, (double)v187);
  v191 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v209, v192, (uint64_t)v191, (uint64_t)MLPModelTrainerPerplexityKey[0]);

  *(float *)&v193 = v186;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v194, v195, v196, v193);
  v197 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v209, v198, (uint64_t)v197, (uint64_t)MLPModelTrainerBpcKey[0]);

  LODWORD(v202) = *((_DWORD *)v216 + 9);
  if (*(float *)&v202 > 0.0)
  {
    *(float *)&v202 = *(float *)&v202 / (float)v208;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v199, v200, v201, v202);
    v203 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v209, v204, (uint64_t)v203, (uint64_t)MLPModelTrainerLossValueKey[0]);

  }
  v205 = v209;

  if (__p)
    operator delete(__p);

  return v205;
}

void sub_19C09127C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  void *v25;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19C091410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C091478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t MRLNeuralNetworkCreateModelContainerWithJSON(uint64_t a1)
{
  MontrealModelJSONParser *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ModelContainer;

  v2 = [MontrealModelJSONParser alloc];
  v5 = (void *)objc_msgSend_initWithURL_(v2, v3, a1, v4);
  v9 = v5;
  if (v5)
  {
    objc_msgSend_network(v5, v6, v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    ModelContainer = objc_msgSend_generateModelContainer(v10, v11, v12, v13);

    return ModelContainer;
  }
  else
  {

    return 0;
  }
}

void sub_19C091568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19C09157C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19C09158C(char **a1)
{
  unint64_t *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  char *v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t __n;
  char *v65;
  unint64_t *v66;
  unint64_t *v67;
  char *v69;
  uint64_t v70;

  if (!*((_BYTE *)a1 + 66))
  {
    v1 = (unint64_t *)a1;
    v2 = *((unsigned __int8 *)a1 + 65);
    v3 = 7;
    if (!*((_BYTE *)a1 + 65))
      v3 = 6;
    if ((unint64_t)a1[v3] >= 2)
    {
      v4 = 6;
      if (!*((_BYTE *)a1 + 65))
        v4 = 7;
      v5 = *a1;
      if (!a1[v4]
        || (v6 = (*((_DWORD *)a1 + 6) * *((_DWORD *)a1 + 8) * *((_DWORD *)a1 + 10)), v6 << 32 < 1))
      {
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        if (!v5)
          goto LABEL_78;
        goto LABEL_77;
      }
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = (unint64_t *)(a1 + 7);
      v12 = (unint64_t *)(a1 + 6);
      v13 = (int)v6;
      __n = 4 * (int)v6;
      v67 = (unint64_t *)(a1 + 7);
      v66 = (unint64_t *)(a1 + 6);
      v70 = (int)v6;
      while (1)
      {
        v15 = v2 == 0;
        v16 = v2 ? v11 : v12;
        if (*v16)
          break;
LABEL_11:
        v5 += 4 * v13;
        ++v8;
        if (v2)
          v14 = v12;
        else
          v14 = v11;
        if (*v14 <= v8)
        {
          v5 = (char *)*v1;
          *v1 = v10;
          v1[1] = (unint64_t)v7;
          v1[2] = (unint64_t)v9;
          if (!v5)
            goto LABEL_78;
LABEL_77:
          operator delete(v5);
          v2 = *((unsigned __int8 *)v1 + 65);
          goto LABEL_78;
        }
      }
      v63 = v8;
      v17 = 0;
      v69 = v5;
      while (1)
      {
        if (v15)
          v19 = v11;
        else
          v19 = v12;
        v20 = &v5[4 * v17 * v13 * *v19];
        v21 = (int64_t)&v7[-v10];
        v22 = (uint64_t)&v7[-v10] >> 2;
        v23 = (_BYTE *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL));
        if (v13 > (v9 - v7) >> 2)
        {
          v24 = v22 + v13;
          if ((unint64_t)(v22 + v13) >> 62)
            sub_19C07DA0C();
          if ((uint64_t)&v9[-v10] >> 1 > v24)
            v24 = (uint64_t)&v9[-v10] >> 1;
          if ((unint64_t)&v9[-v10] >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            if (v25 >> 62)
              sub_19C07C7FC();
            v26 = operator new(4 * v25);
          }
          else
          {
            v26 = 0;
          }
          v40 = &v26[4 * v22];
          memcpy(v40, v20, __n);
          if ((char *)v10 != v7)
          {
            v41 = v21 - 4;
            if ((unint64_t)(v21 - 4) < 0xBC
              || &v26[(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[(v21 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                            - 4]
              || v10 + (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL) > v10
                                                                                       + (v21 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                       - 4)
            {
              v42 = (char *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL));
              v43 = &v26[4 * v22];
            }
            else
            {
              v42 = (char *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL));
              v43 = &v26[4 * v22];
              if (v10 - (unint64_t)v26 >= 0x20)
              {
                v47 = (v41 >> 2) + 1;
                v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
                v42 = &v23[-v48];
                v43 = &v40[-v48];
                v49 = &v26[4 * v22 - 16];
                v50 = (__int128 *)(v10 + 4 * v22 - 16);
                v51 = v47 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v52 = *v50;
                  *(v49 - 1) = *(v50 - 1);
                  *v49 = v52;
                  v49 -= 2;
                  v50 -= 2;
                  v51 -= 8;
                }
                while (v51);
                if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_51:
                  v45 = &v40[4 * v70];
                  v46 = v7 - v23;
                  if (v46)
                    goto LABEL_52;
                  goto LABEL_53;
                }
              }
            }
            do
            {
              v44 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v43 - 1) = v44;
              v43 -= 4;
            }
            while (v42 != (char *)v10);
            goto LABEL_51;
          }
          v43 = &v26[4 * v22];
          v45 = &v40[4 * v70];
          v46 = v7 - v23;
          if (v46)
LABEL_52:
            memmove(v45, v23, v46);
LABEL_53:
          v9 = &v26[4 * v25];
          v7 = &v45[v46];
          v1 = (unint64_t *)a1;
          v5 = v69;
          v12 = v66;
          v11 = v67;
          if (v10)
            operator delete((void *)v10);
          v10 = (unint64_t)v43;
          v13 = v70;
          goto LABEL_21;
        }
        v65 = v9;
        v27 = &v20[4 * v13];
        v28 = (v7 - v23) >> 2;
        if (v28 >= v13)
          break;
        v29 = &v20[4 * v28];
        v30 = v27 - v29;
        memmove(v7, v29, v30);
        v31 = &v7[v30];
        if (v7 - v23 >= 1)
        {
          v27 = v29;
          v13 = v70;
          goto LABEL_41;
        }
        v7 += v30;
LABEL_74:
        v1 = (unint64_t *)a1;
        v5 = v69;
        v12 = v66;
        v11 = v67;
        v13 = v70;
        v9 = v65;
LABEL_21:
        ++v17;
        v2 = *((unsigned __int8 *)v1 + 65);
        v15 = *((_BYTE *)v1 + 65) == 0;
        v18 = 7;
        if (!*((_BYTE *)v1 + 65))
          v18 = 6;
        if (v1[v18] <= v17)
        {
          v8 = v63;
          goto LABEL_11;
        }
      }
      v31 = v7;
LABEL_41:
      v32 = &v23[4 * v13];
      v33 = v31 - v32;
      v34 = (v31 - v32) >> 2;
      v35 = &v31[-4 * v13];
      v36 = v31;
      if (v35 < v7)
      {
        v37 = (v21 & 0xFFFFFFFFFFFFFFFCLL) + v33;
        v38 = v10 + v37 + 4;
        if ((unint64_t)v7 > v38)
          v38 = (unint64_t)v7;
        v39 = v38 + ~v10 - v37;
        if (v39 >= 0x2C)
        {
          v36 = v31;
          if ((unint64_t)&v32[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - v10] >= 0x20)
          {
            v53 = (v39 >> 2) + 1;
            v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
            v35 += v54;
            v36 = &v31[v54];
            v55 = v31 + 16;
            v56 = (__int128 *)(v10 + 4 * v34 + 4 * v22 + 16);
            v57 = v53 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v58 = *v56;
              *(v55 - 1) = *(v56 - 1);
              *v55 = v58;
              v55 += 2;
              v56 += 2;
              v57 -= 8;
            }
            while (v57);
            if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_69;
          }
        }
        else
        {
          v36 = v31;
        }
        do
        {
          v59 = *(_DWORD *)v35;
          v35 += 4;
          *(_DWORD *)v36 = v59;
          v36 += 4;
        }
        while (v35 < v7);
      }
LABEL_69:
      if (v31 != v32)
        memmove(&v31[-4 * v34], (const void *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL)), v33);
      if (v27 != v20)
        memmove((void *)(v10 + ((unint64_t)&v7[-v10] & 0xFFFFFFFFFFFFFFFCLL)), v20, v27 - v20);
      v7 = v36;
      goto LABEL_74;
    }
LABEL_78:
    v60 = 7;
    if (v2)
      v61 = 7;
    else
      v61 = 6;
    if (v2)
      v60 = 6;
    v62 = (char *)v1[v61];
    v1[v61] = v1[v60];
    v1[v60] = (unint64_t)v62;
    *((_BYTE *)v1 + 65) = v2 ^ 1;
    *((_BYTE *)v1 + 66) = 1;
  }
}

void sub_19C091A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;

  if (v20)
    operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C091AC8(uint64_t *a1, uint64_t *a2)
{
  int v3;
  uint64_t Instance;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  std::runtime_error *exception;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string v15;

  v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 3)
      goto LABEL_20;
    a2 = (uint64_t *)*a2;
  }
  else if (v3 != 3)
  {
    goto LABEL_20;
  }
  if (*(_WORD *)a2 != 20547 || *((_BYTE *)a2 + 2) != 85)
  {
LABEL_20:
    sub_19C091FC4(&v15, "Invalid Engine. Support Engines = {CPU}");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v15);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E08;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D1D180, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
  v15.__r_.__value_.__s.__data_[0] = 0;
  if (qword_1EE418A30 != -1)
    dispatch_once(&qword_1EE418A30, &unk_1E3D25140);
  Instance = _CFRuntimeCreateInstance();
  v6 = Instance + 16;
  sub_19C22E040(Instance + 16);
  v7 = operator new();
  sub_19C1A15D0(v7);
  if (*((char *)a1 + 23) >= 0)
    v8 = a1;
  else
    v8 = (uint64_t *)*a1;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8, v6))
  {
    v14 = (_QWORD *)v7;
    sub_19C233584(v6, (uint64_t *)&v14);
    v9 = v14;
    v14 = 0;
    if (!v9)
      goto LABEL_18;
LABEL_30:
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return Instance;
LABEL_31:
    operator delete(v15.__r_.__value_.__l.__data_);
    return Instance;
  }
  v9 = (_QWORD *)operator new();
  sub_19C185B84(v9);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*((char *)a1 + 23) >= 0)
    v12 = a1;
  else
    v12 = (uint64_t *)*a1;
  if (!(*(unsigned int (**)(_QWORD *, uint64_t *, uint64_t))(*v9 + 16))(v9, v12, v6))
  {
    Instance = 0;
    goto LABEL_30;
  }
  v13 = v9;
  sub_19C233584(v6, (uint64_t *)&v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    goto LABEL_30;
LABEL_18:
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
  return Instance;
}

void sub_19C091DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if ((a19 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C091DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::runtime_error::~runtime_error(&a11);
  __cxa_end_catch();
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  JUMPOUT(0x19C091FB4);
}

void sub_19C091DFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, uint64_t a12, std::string *a13)
{
  const std::runtime_error *exception_ptr;
  const char *v16;
  std::runtime_error *exception;
  std::runtime_error *v18;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a2 == 3)
  {
    exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(a1);
    std::runtime_error::runtime_error(&a11, exception_ptr);
    __cxa_begin_catch(a1);
    v16 = std::runtime_error::what(&a11);
    std::string::append((std::string *)&a13, v16);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const std::string *)&a13);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E30;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D1D198, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  __cxa_begin_catch(a1);
  v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v18, (const std::string *)&a13);
  v18->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E30;
  __cxa_throw(v18, (struct type_info *)&unk_1E3D1D198, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_19C091F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void *v19;

  __cxa_free_exception(v19);
  std::runtime_error::~runtime_error(&a11);
  __cxa_end_catch();
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  JUMPOUT(0x19C091FB4);
}

void sub_19C091F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(a14);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19C091F58);
}

void sub_19C091F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  if (a19 < 0)
  {
    operator delete(a14);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19C091F58);
}

void sub_19C091FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    JUMPOUT(0x19C091FB4);
  JUMPOUT(0x19C091F58);
}

_QWORD *sub_19C091FC4(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_19C092080(char *a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  int v5;
  uint64_t Instance;
  __n128 v9;
  char v10;
  double v12;
  uint64_t v13;
  std::runtime_error *v15;
  std::runtime_error *exception;
  std::string v17;
  void *__p;
  char v19;

  v3 = a1;
  v19 = 0;
  LOBYTE(__p) = 0;
  if (a1[23] < 0)
    a1 = *(char **)a1;
  v4 = strstr(a1, ".espresso.net");
  v5 = *((unsigned __int8 *)a2 + 23);
  if (!v4)
  {
    if ((v5 & 0x80) != 0)
    {
      if (a2[1] != 3)
        goto LABEL_44;
      a2 = (uint64_t *)*a2;
    }
    else if (v5 != 3)
    {
      goto LABEL_44;
    }
    if (*(_WORD *)a2 == 20547 && *((_BYTE *)a2 + 2) == 85)
    {
      if (qword_1EE418A30 != -1)
        dispatch_once(&qword_1EE418A30, &unk_1E3D25140);
      Instance = _CFRuntimeCreateInstance();
      v12 = sub_19C09E52C(Instance + 16);
      v10 = (*(uint64_t (**)(uint64_t, char *, double))(*(_QWORD *)v13 + 104))(v13, v3, v12);
      goto LABEL_38;
    }
LABEL_44:
    sub_19C091FC4(&v17, "Invalid Engine. Support Engines = {CPU}");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E08;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D1D180, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if ((v5 & 0x80) != 0)
  {
    if (a2[1] != 3)
      goto LABEL_43;
    a2 = (uint64_t *)*a2;
  }
  else if (v5 != 3)
  {
    goto LABEL_43;
  }
  if (*(_WORD *)a2 == 20547 && *((_BYTE *)a2 + 2) == 85)
  {
    if (qword_1EE418A30 != -1)
      dispatch_once(&qword_1EE418A30, &unk_1E3D25140);
    Instance = _CFRuntimeCreateInstance();
    v9.n128_f64[0] = sub_19C09E52C(Instance + 16);
  }
  else
  {
    if (*(_WORD *)a2 != 20033 || *((_BYTE *)a2 + 2) != 69)
    {
LABEL_43:
      sub_19C091FC4(&v17, "Invalid Engine. Support Engines = {CPU, ANE}");
      v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, &v17);
      v15->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E08;
      __cxa_throw(v15, (struct type_info *)&unk_1E3D1D180, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    if (qword_1EE418A30 != -1)
      dispatch_once(&qword_1EE418A30, &unk_1E3D25140);
    Instance = _CFRuntimeCreateInstance();
    v9.n128_f64[0] = sub_19C07E258(Instance + 16);
  }
  v10 = (*(uint64_t (**)(uint64_t, char *, __n128))(*(_QWORD *)(Instance + 16) + 104))(Instance + 16, v3, v9);
LABEL_38:
  if ((v10 & 1) == 0)
    Instance = 0;
  if (v19 < 0)
    operator delete(__p);
  return Instance;
}

void sub_19C092384(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15)
{
  std::runtime_error *exception;

  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  MEMORY[0x1A1AD19F8](&a15, "Unable to load Espresso Model");
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, (const std::string *)&a15);
  exception->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E30;
  __cxa_throw(exception, (struct type_info *)&unk_1E3D1D198, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_19C092424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  __cxa_end_catch();
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *sub_19C092458(uint64_t a1, uint64_t *a2)
{
  int v3;
  void *Instance;
  double v6;
  uint64_t v7;
  std::runtime_error *exception;
  std::string v10;
  char v11;
  char v12;

  v12 = 0;
  v11 = 0;
  v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 3)
      goto LABEL_16;
    a2 = (uint64_t *)*a2;
  }
  else if (v3 != 3)
  {
    goto LABEL_16;
  }
  if (*(_WORD *)a2 != 20547 || *((_BYTE *)a2 + 2) != 85)
  {
LABEL_16:
    sub_19C091FC4(&v10, "Invalid Engine. Support Engines for E5RT = {CPU}");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v10);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E3D20E08;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D1D180, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (qword_1EE418A30 != -1)
    dispatch_once(&qword_1EE418A30, &unk_1E3D25140);
  Instance = (void *)_CFRuntimeCreateInstance();
  v6 = sub_19C17F2D8((uint64_t)Instance + 16);
  if (((*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v7 + 104))(v7, a1, v6) & 1) == 0)
  {
    operator delete(Instance);
    return 0;
  }
  return Instance;
}

void sub_19C09259C(void *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::string *a7)
{
  __break(1u);
}

void sub_19C092634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  __cxa_free_exception(v18);
  __cxa_end_catch();
  if (v17)
  {
    operator delete(v17);
    if (a17 < 0)
    {
LABEL_3:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a17 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C092684(const __CFData *a1, const void *a2)
{
  uint64_t Instance;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 *BytePtr;
  CFIndex Length;
  uint64_t v10;
  std::runtime_error *exception;
  _QWORD *v13;
  _QWORD *v14;

  if (qword_1EE418A30 != -1)
    dispatch_once(&qword_1EE418A30, &unk_1E3D25140);
  Instance = _CFRuntimeCreateInstance();
  v5 = (char *)(Instance + 16);
  sub_19C22E040(Instance + 16);
  v6 = (_QWORD *)operator new();
  sub_19C185B84(v6);
  v7 = operator new();
  sub_19C1A15D0(v7);
  if (a2)
  {
    if (CFEqual(a2, CFSTR("FlatModel")))
    {
      BytePtr = (__int128 *)CFDataGetBytePtr(a1);
      Length = CFDataGetLength(a1);
      if (sub_19C1A19A4(v7, v5, BytePtr, Length))
      {
        v14 = v6;
        sub_19C233584((uint64_t)v5, (uint64_t *)&v14);
        v10 = (uint64_t)v14;
        v14 = 0;
        if (!v10)
          goto LABEL_11;
        goto LABEL_10;
      }
    }
  }
  if (!sub_19C1870D0((uint64_t)v6, (uint64_t)a1, v5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to create network from data. ");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = v6;
  sub_19C233584((uint64_t)v5, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
LABEL_10:
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_11:
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return Instance;
}

void sub_19C092848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t MRLNeuralNetworkCreate(CFDictionaryRef theDict)
{
  const __CFURL *Value;
  const __CFString *v3;
  CFStringRef v4;
  std::string *v5;
  __int128 v6;
  std::string *p_p;
  std::string::size_type size;
  const __CFString *v9;
  std::string *v10;
  char *v11;
  int v12;
  const __CFString *v13;
  uint64_t v14;
  const __CFData *v15;
  const void *v16;
  uint64_t Instance;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex v20;
  __int128 v21;
  const __CFString *ValueAtIndex;
  _OWORD *v23;
  _QWORD *v24;
  const void *v25;
  size_t v26;
  size_t v27;
  void *v28;
  std::string::size_type v29;
  char *v30;
  const void *v31;
  size_t v32;
  size_t v33;
  void *v34;
  CFIndex v35;
  __int128 v36;
  const __CFString *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string::size_type v43;
  std::string::size_type v44;
  void *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const __CFURL *v53;
  const __CFString *v54;
  const __CFString *v55;
  const __CFString *v56;
  const void *v57;
  void *v59;
  char v60;
  void *v61[2];
  char v62;
  std::string v63;
  std::string __p;
  const void *v65;
  std::string v66;

  if (theDict)
  {
    if (CFDictionaryContainsKey(theDict, CFSTR("MRLNeuralNetworkOptionModelURLKey")))
    {
      Value = (const __CFURL *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionModelURLKey"));
      v3 = CFURLCopyFileSystemPath(Value, kCFURLPOSIXPathStyle);
      sub_19C242794(v3, &v66);
      v4 = CFURLCopyFragment(Value, 0);
      sub_19C09827C(&v65, v4);
      if (!v65)
        goto LABEL_12;
      v61[0] = &v65;
      sub_19C093440((const __CFString ***)v61, &v63);
      v5 = std::string::insert(&v63, 0, "#");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(&v66, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_12;
      }
      else if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v63.__r_.__value_.__l.__data_);
LABEL_12:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
      LODWORD(__p.__r_.__value_.__l.__data_) = 5591107;
      if (CFDictionaryContainsKey(theDict, CFSTR("MRLNeuralNetworkOptionEngineKey")))
      {
        v9 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionEngineKey"));
        sub_19C242794(v9, &v63);
        __p = v63;
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v66;
      else
        v10 = (std::string *)v66.__r_.__value_.__r.__words[0];
      v11 = strstr((char *)v10, ".espresso.");
      v12 = CFDictionaryContainsKey(theDict, CFSTR("kMRLNeuralNetworkOptionModelTypeKey"));
      if (v11)
        v13 = CFSTR("Espresso");
      else
        v13 = CFSTR("FlatModel");
      if (v12)
        v13 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("kMRLNeuralNetworkOptionModelTypeKey"));
      if (CFEqual(v13, CFSTR("Espresso")))
      {
        v14 = sub_19C092080((char *)&v66, (uint64_t *)&__p);
      }
      else if (CFEqual(v13, CFSTR("EspressoE5RT")))
      {
        v14 = (uint64_t)sub_19C092458((uint64_t)&v66, (uint64_t *)&__p);
      }
      else
      {
        if (!CFEqual(v13, CFSTR("FlatModel")))
        {
          Instance = 0;
          if (!v3)
            goto LABEL_91;
          goto LABEL_90;
        }
        v14 = sub_19C091AC8((uint64_t *)&v66, (uint64_t *)&__p);
      }
      Instance = v14;
      if (!v3)
      {
LABEL_91:
        v49 = CFDictionaryContainsKey(theDict, CFSTR("MRLNeuralNetworkOptionANENetworkURLKey"));
        if (!(_DWORD)v49 || !sub_19C16D010(v49, v50, v51, v52))
        {
LABEL_102:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            v57 = v65;
            if (!v65)
              goto LABEL_107;
          }
          else
          {
            v57 = v65;
            if (!v65)
            {
LABEL_107:
              if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
              {
                v48 = (void *)v66.__r_.__value_.__r.__words[0];
LABEL_109:
                operator delete(v48);
                return Instance;
              }
              return Instance;
            }
          }
          CFRelease(v57);
          goto LABEL_107;
        }
        v53 = (const __CFURL *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionANENetworkURLKey"));
        v54 = CFURLCopyFileSystemPath(v53, kCFURLPOSIXPathStyle);
        v55 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionANEStartNodeName"));
        v56 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionANEEndNodeName"));
        sub_19C242794(v55, &v63);
        sub_19C242794(v56, v61);
        sub_19C242794(v54, &v59);
        sub_19C2347D4(Instance + 16, (unsigned __int8 **)&v63, (char *)v61);
        if (v60 < 0)
        {
          operator delete(v59);
          if ((v62 & 0x80000000) == 0)
          {
LABEL_95:
            if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_96;
            goto LABEL_100;
          }
        }
        else if ((v62 & 0x80000000) == 0)
        {
          goto LABEL_95;
        }
        operator delete(v61[0]);
        if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_96:
          if (!v54)
            goto LABEL_102;
LABEL_101:
          CFRelease(v54);
          goto LABEL_102;
        }
LABEL_100:
        operator delete(v63.__r_.__value_.__l.__data_);
        if (!v54)
          goto LABEL_102;
        goto LABEL_101;
      }
LABEL_90:
      CFRelease(v3);
      goto LABEL_91;
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("MRLNeuralNetworkOptionModelDataKey")))
    {
      v15 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionModelDataKey"));
      v16 = CFDictionaryGetValue(theDict, CFSTR("kMRLNeuralNetworkOptionModelTypeKey"));
      return sub_19C092684(v15, v16);
    }
  }
  if (qword_1EE418A30 != -1)
    dispatch_once(&qword_1EE418A30, &unk_1E3D25140);
  Instance = _CFRuntimeCreateInstance();
  sub_19C22E040(Instance + 16);
  memset(&v66, 0, sizeof(v66));
  memset(&__p, 0, sizeof(__p));
  if (!theDict
    || !CFDictionaryContainsKey(theDict, CFSTR("MRLNeuralNetworkOptionInputNamesKey"))
    || !CFDictionaryContainsKey(theDict, CFSTR("MRLNeuralNetworkOptionOutputNamesKey")))
  {
    v24 = (_QWORD *)v66.__r_.__value_.__l.__size_;
    if (v66.__r_.__value_.__l.__size_ >= v66.__r_.__value_.__r.__words[2])
    {
      v66.__r_.__value_.__l.__size_ = (std::string::size_type)sub_19C0999BC((void **)&v66.__r_.__value_.__l.__data_, (const char **)&qword_1EE418970);
      goto LABEL_43;
    }
    v25 = (const void *)qword_1EE418970;
    v26 = strlen((const char *)qword_1EE418970);
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_19C07C774();
    v27 = v26;
    if (v26 >= 0x17)
    {
      v39 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v39 = v26 | 7;
      v40 = v39 + 1;
      v28 = operator new(v39 + 1);
      *(_QWORD *)(v66.__r_.__value_.__l.__size_ + 8) = v27;
      v24[2] = v40 | 0x8000000000000000;
      *v24 = v28;
    }
    else
    {
      *(_BYTE *)(v66.__r_.__value_.__l.__size_ + 23) = v26;
      v28 = v24;
      if (!v26)
      {
        *(_BYTE *)v24 = 0;
        v66.__r_.__value_.__l.__size_ = (std::string::size_type)(v24 + 3);
        v29 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
LABEL_43:
          v30 = sub_19C0999BC((void **)&__p.__r_.__value_.__l.__data_, (const char **)&qword_1EE418978);
LABEL_70:
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
          goto LABEL_71;
        }
LABEL_45:
        v31 = (const void *)qword_1EE418978;
        v32 = strlen((const char *)qword_1EE418978);
        if (v32 > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        v33 = v32;
        if (v32 >= 0x17)
        {
          v41 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17)
            v41 = v32 | 7;
          v42 = v41 + 1;
          v34 = operator new(v41 + 1);
          *(_QWORD *)(v29 + 8) = v33;
          *(_QWORD *)(v29 + 16) = v42 | 0x8000000000000000;
          *(_QWORD *)v29 = v34;
        }
        else
        {
          *(_BYTE *)(v29 + 23) = v32;
          v34 = (void *)v29;
          if (!v32)
            goto LABEL_69;
        }
        memmove(v34, v31, v33);
LABEL_69:
        *((_BYTE *)v34 + v33) = 0;
        v30 = (char *)(v29 + 24);
        goto LABEL_70;
      }
    }
    memmove(v28, v25, v27);
    *((_BYTE *)v28 + v27) = 0;
    v66.__r_.__value_.__l.__size_ = (std::string::size_type)(v24 + 3);
    v29 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      goto LABEL_43;
    goto LABEL_45;
  }
  v18 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionInputNamesKey"));
  v19 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionOutputNamesKey"));
  v20 = 0;
  while (v20 < CFArrayGetCount(v18))
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v18, v20);
    sub_19C242794(ValueAtIndex, &v63);
    v23 = (_OWORD *)v66.__r_.__value_.__l.__size_;
    if (v66.__r_.__value_.__l.__size_ < v66.__r_.__value_.__r.__words[2])
    {
      v21 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
      *(_QWORD *)(v66.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
      *v23 = v21;
      v66.__r_.__value_.__l.__size_ = (std::string::size_type)v23 + 24;
      ++v20;
    }
    else
    {
      v66.__r_.__value_.__l.__size_ = (std::string::size_type)sub_19C099854((void **)&v66.__r_.__value_.__l.__data_, (uint64_t)&v63);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      ++v20;
    }
  }
  v35 = 0;
  while (v35 < CFArrayGetCount(v19))
  {
    v37 = (const __CFString *)CFArrayGetValueAtIndex(v19, v35);
    sub_19C242794(v37, &v63);
    v38 = (_OWORD *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
    {
      v36 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
      *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
      *v38 = v36;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v38 + 24;
      ++v35;
    }
    else
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)sub_19C099854((void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v63);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      ++v35;
    }
  }
LABEL_71:
  sub_19C22E250((_QWORD *)(Instance + 16), (const void ***)&v66, (const void ***)&__p);
  v43 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v44 = __p.__r_.__value_.__l.__size_;
    v45 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v44 - 1) < 0)
          operator delete(*(void **)(v44 - 24));
        v44 -= 24;
      }
      while (v44 != v43);
      v45 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v43;
    operator delete(v45);
  }
  v46 = v66.__r_.__value_.__r.__words[0];
  if (v66.__r_.__value_.__r.__words[0])
  {
    v47 = v66.__r_.__value_.__l.__size_;
    v48 = (void *)v66.__r_.__value_.__r.__words[0];
    if (v66.__r_.__value_.__l.__size_ != v66.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v47 - 1) < 0)
          operator delete(*(void **)(v47 - 24));
        v47 -= 24;
      }
      while (v47 != v46);
      v48 = (void *)v66.__r_.__value_.__r.__words[0];
    }
    v66.__r_.__value_.__l.__size_ = v46;
    goto LABEL_109;
  }
  return Instance;
}

void sub_19C0930B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  CFErrorRef *v33;
  uint64_t v34;
  void *v37;
  void *v38;
  const __CFAllocator *v39;
  __CFDictionary *Mutable;
  const char *v41;
  CFStringRef v42;
  const __CFAllocator *v43;
  __CFDictionary *v44;
  const char *v45;
  CFStringRef v46;

  sub_19C07AD50(&a28);
  sub_19C07AD50((void **)(v34 - 88));
  v37 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v33)
    {
      v38 = v37;
      v39 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v41 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      v42 = CFStringCreateWithCString(v39, v41, 0);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v42);
      *v33 = CFErrorCreate(v39, MRLNeuralNetworkErrorDomain, 0, Mutable);
      CFRelease(v42);
      CFRelease(Mutable);
    }
  }
  else if (v33)
  {
    v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v44 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    sub_19C091FC4((_QWORD *)(v34 - 88), "Unknown expection");
    v45 = *(char *)(v34 - 65) >= 0 ? (const char *)(v34 - 88) : *(const char **)(v34 - 88);
    v46 = CFStringCreateWithCString(v43, v45, 0);
    CFDictionaryAddValue(v44, (const void *)*MEMORY[0x1E0C9AFE0], v46);
    *v33 = CFErrorCreate(v43, MRLNeuralNetworkErrorDomain, 0, v44);
    CFRelease(v46);
    CFRelease(v44);
    if (*(char *)(v34 - 65) < 0)
      operator delete(*(void **)(v34 - 88));
  }
  __cxa_end_catch();
  JUMPOUT(0x19C09305CLL);
}

void sub_19C0933FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t sub_19C093440@<X0>(const __CFString ***a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  std::runtime_error *exception;

  v3 = **a1;
  if (!v3 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v3)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_19C0992F0(v3, a2);
}

void sub_19C0934BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void **sub_19C0934D0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t MRLNeuralNetworkSetInput(_QWORD *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, CFErrorRef *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  const __CFAllocator *v16;
  __CFDictionary *Mutable;
  const char *v18;
  CFStringRef v19;
  void *__p[2];
  char v22;
  void *v23;
  char v24;
  _OWORD v25[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30[2];
  char v31;

  sub_19C242794(a2, v30);
  v12 = a1[2];
  a1 += 2;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, void **))(v12 + 32))(&v27, a1, v30);
  *((_QWORD *)&v28 + 1) = a3;
  v29 = a4;
  v26 = a4;
  v25[0] = v27;
  v25[1] = v28;
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t, void **, _OWORD *, uint64_t))(*a1 + 40))(a1, a5, v30, v25, 1);
  v14 = v13;
  if (a6)
    v15 = v13;
  else
    v15 = 1;
  if ((v15 & 1) == 0)
  {
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    sub_19C242794(a2, __p);
    sub_19C0936FC("Please provide a valid input name. ", (uint64_t)__p, " input cannot be set");
    if (v22 < 0)
      operator delete(__p[0]);
    v18 = v24 >= 0 ? (const char *)&v23 : (const char *)v23;
    v19 = CFStringCreateWithCString(v16, v18, 0);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v19);
    *a6 = CFErrorCreate(v16, MRLNeuralNetworkErrorDomain, 0, Mutable);
    CFRelease(v19);
    CFRelease(Mutable);
    if (v24 < 0)
    {
      operator delete(v23);
      if ((v31 & 0x80000000) == 0)
        return v14;
      goto LABEL_12;
    }
  }
  if (v31 < 0)
LABEL_12:
    operator delete(v30[0]);
  return v14;
}

void sub_19C0936A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 49) < 0)
    operator delete(*(void **)(v20 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0936FC(const char *a1, uint64_t a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  size_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v19;
  uint64_t v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[20];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v9;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v11, v20);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v19 = v6 + 24;
  v24[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  v13 = strlen(a1);
  sub_19C07DCDC(&v19, (uint64_t)a1, v13);
  v14 = *(char *)(a2 + 23);
  if (v14 >= 0)
    v15 = a2;
  else
    v15 = *(_QWORD *)a2;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a2 + 23);
  else
    v16 = *(_QWORD *)(a2 + 8);
  sub_19C07DCDC(&v19, v15, v16);
  v17 = strlen(a3);
  sub_19C07DCDC(&v19, (uint64_t)a3, v17);
  std::stringbuf::str();
  v19 = *v8;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v8[3];
  v20[0] = v12 + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD1C08](v24);
}

void sub_19C093884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C07DC58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C093898(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD1C08](v1);
  _Unwind_Resume(a1);
}

uint64_t MRLNeuralNetworkSetInputTensor(uint64_t a1, const __CFString *a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  const __CFAllocator *v14;
  __CFDictionary *Mutable;
  void **v16;
  CFStringRef v17;
  void *v19[2];
  char v20;
  _OWORD v21[2];
  uint64_t v22;
  void *__p[2];
  char v24;

  sub_19C09158C((char **)(a3 + 16));
  v8 = *(_QWORD *)(a3 + 16);
  sub_19C242794(a2, __p);
  v9 = *(_OWORD *)(a3 + 56);
  v21[0] = *(_OWORD *)(a3 + 40);
  v21[1] = v9;
  v22 = *(_QWORD *)(a3 + 72);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, void **, _OWORD *, _QWORD))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16, v8, __p, v21, 0);
  v11 = v10;
  if (v24 < 0)
  {
    operator delete(__p[0]);
    if (a4)
      v13 = v11;
    else
      v13 = 1;
    if ((v13 & 1) != 0)
      return v11;
  }
  else
  {
    if (a4)
      v12 = v10;
    else
      v12 = 1;
    if ((v12 & 1) != 0)
      return v11;
  }
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  sub_19C242794(a2, v19);
  sub_19C0936FC("Please provide a valid input name. ", (uint64_t)v19, " input cannot be set");
  if (v20 < 0)
    operator delete(v19[0]);
  if (v24 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v17 = CFStringCreateWithCString(v14, (const char *)v16, 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v17);
  *a4 = CFErrorCreate(v14, MRLNeuralNetworkErrorDomain, 0, Mutable);
  CFRelease(v17);
  CFRelease(Mutable);
  if (v24 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_19C093A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkPredict(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 72))(a1 + 16);
}

uint64_t MRLNeuralNetworkGetOutput(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v4;
  void *__p[2];
  char v6;

  sub_19C242794(a2, __p);
  result = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16, __p);
  v4 = result;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    return v4;
  }
  return result;
}

void sub_19C093B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkCopyOutputTensor(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t Instance;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *__p[2];
  uint64_t v13;
  int v14;
  unint64_t v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  sub_19C242794(a2, __p);
  v4 = a1 + 16;
  v5 = (char *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16, __p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  sub_19C242794(a2, v16);
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 56))(__p, v4, v16);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  *(_OWORD *)v16 = *(_OWORD *)__p;
  v6 = v15;
  v17 = v13;
  if (qword_1EE4189C0 != -1)
    dispatch_once(&qword_1EE4189C0, &unk_1E3D253D0);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = 0;
  *(_QWORD *)(Instance + 24) = 0;
  *(_QWORD *)(Instance + 32) = 0;
  *(_OWORD *)(Instance + 40) = *(_OWORD *)v16;
  v8 = v17;
  *(_QWORD *)(Instance + 72) = v6;
  *(_WORD *)(Instance + 80) = 1;
  *(_BYTE *)(Instance + 82) = 0;
  v9 = *(_DWORD *)(Instance + 40) * *(_DWORD *)(Instance + 48) * (int)v8;
  v10 = 4 * LODWORD(__p[0]) * LODWORD(__p[1]) * (int)v13 * v14 * (int)v15 / v9 / v6;
  *(_QWORD *)(Instance + 56) = v8;
  *(_QWORD *)(Instance + 64) = (int)((uint64_t)v10 >> 2);
  sub_19C0994CC((unint64_t *)(Instance + 16), 0, v5, &v5[4 * v9 * v6 * (v10 >> 2)], v9 * v6 * (v10 >> 2));
  sub_19C09158C((char **)(Instance + 16));
  return Instance;
}

void sub_19C093D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *MRLNeuralNetworkTensorAppendData(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 40);
  v4 = 64;
  if (*(_BYTE *)(a1 + 81))
    v5 = 64;
  else
    v5 = 72;
  v6 = *(_QWORD *)(a1 + v5);
  v7 = (a3 / v3 / v6) >> 2;
  if (*(_BYTE *)(a1 + 81))
    v4 = 72;
  *(_QWORD *)(a1 + v4) += (int)v7;
  return sub_19C0994CC((unint64_t *)(a1 + 16), *(void **)(a1 + 24), __src, &__src[4 * v6 * v3 * v7], v6 * v3 * v7);
}

uint64_t MRLNeuralNetworkTensorGetData(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 64;
  if (!*(_BYTE *)(a1 + 81))
    v2 = 72;
  return *(_QWORD *)(a1 + 16)
       + 4 * a2 * *(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + v2);
}

CFDictionaryRef MRLNeuralNetworkTensorCopyShape(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;
  const __CFDictionary *v6;
  CFDictionaryRef Copy;
  uint64_t *v8;
  CFTypeRef v10;
  int v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef *v16;
  uint64_t v17;
  const __CFDictionary *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef cf;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 48);
  v3 = (uint64_t *)(a1 + 40);
  if (*(_QWORD *)(a1 + 40) == 1 && *(_QWORD *)(a1 + 48) == 1)
  {
    CFRetain(CFSTR("ShapeDimension"));
    sub_19C09827C(&v15, CFSTR("ShapeDimension"));
    LODWORD(v10) = 3;
    sub_19C099C54(&v19, &v15, (int *)&v10);
    CFRetain(CFSTR("InputDimension"));
    sub_19C09827C(&v14, CFSTR("InputDimension"));
    v13 = (CFTypeRef)(*(_DWORD *)(a1 + 40) * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56));
    sub_19C099D30(&v21, &v14, (uint64_t *)&v13);
    CFRetain(CFSTR("SequenceLength"));
    sub_19C09827C(&v12, CFSTR("SequenceLength"));
    if (*(_BYTE *)(a1 + 81))
      v8 = (uint64_t *)(a1 + 64);
    else
      v8 = (uint64_t *)(a1 + 72);
    sub_19C099D30(&v23, &v12, v8);
    v16 = &v19;
    v17 = 3;
    v6 = sub_19C098328((uint64_t)&v16);
    v18 = v6;
    if (v24)
      CFRelease(v24);
    if (v23)
      CFRelease(v23);
    if (v22)
      CFRelease(v22);
    if (v21)
      CFRelease(v21);
    if (v20)
      CFRelease(v20);
    if (v19)
      CFRelease(v19);
    if (v12)
      CFRelease(v12);
    if (v14)
      CFRelease(v14);
    if (v15)
      CFRelease(v15);
    Copy = CFDictionaryCreateCopy(0, v6);
    if (v6)
      goto LABEL_62;
  }
  else
  {
    CFRetain(CFSTR("ShapeDimension"));
    sub_19C09827C(&v15, CFSTR("ShapeDimension"));
    v11 = 5;
    sub_19C099C54(&v19, &v15, &v11);
    CFRetain(CFSTR("Width"));
    sub_19C09827C(&v14, CFSTR("Width"));
    sub_19C099D30(&v21, &v14, v3);
    CFRetain(CFSTR("Height"));
    sub_19C09827C(&v13, CFSTR("Height"));
    sub_19C099D30(&v23, &v13, v2);
    CFRetain(CFSTR("Channel"));
    sub_19C09827C(&v12, CFSTR("Channel"));
    sub_19C099D30(&v25, &v12, (uint64_t *)(a1 + 56));
    CFRetain(CFSTR("SequenceLength"));
    sub_19C09827C(&v10, CFSTR("SequenceLength"));
    if (*(_BYTE *)(a1 + 81))
      v5 = (uint64_t *)(a1 + 64);
    else
      v5 = (uint64_t *)(a1 + 72);
    sub_19C099D30(&v27, &v10, v5);
    v16 = &v19;
    v17 = 5;
    v6 = sub_19C098328((uint64_t)&v16);
    v18 = v6;
    if (cf)
      CFRelease(cf);
    if (v27)
      CFRelease(v27);
    if (v26)
      CFRelease(v26);
    if (v25)
      CFRelease(v25);
    if (v24)
      CFRelease(v24);
    if (v23)
      CFRelease(v23);
    if (v22)
      CFRelease(v22);
    if (v21)
      CFRelease(v21);
    if (v20)
      CFRelease(v20);
    if (v19)
      CFRelease(v19);
    if (v10)
      CFRelease(v10);
    if (v12)
      CFRelease(v12);
    if (v13)
      CFRelease(v13);
    if (v14)
      CFRelease(v14);
    if (v15)
      CFRelease(v15);
    Copy = CFDictionaryCreateCopy(0, v6);
    if (v6)
LABEL_62:
      CFRelease(v6);
  }
  return Copy;
}

void sub_19C094204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_19C07AF7C(exception_object);
}

uint64_t sub_19C094454(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

const void **sub_19C094494(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t MRLNeuralNetworkCopyStates(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
}

uint64_t MRLNeuralNetworkGetOutputDimension(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  int v4;
  void *__p[2];
  char v6;

  sub_19C242794(a2, __p);
  LODWORD(result) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16, __p);
  v4 = result;
  if ((v6 & 0x80000000) == 0)
    return (int)result;
  operator delete(__p[0]);
  return v4;
}

void sub_19C094540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkAddNode(uint64_t a1, const __CFString *a2, void *__src)
{
  uint64_t v4;
  void *__p[2];
  char v7;
  _QWORD __dst[88];

  v4 = a1 + 16;
  memcpy(__dst, __src, sizeof(__dst));
  sub_19C242794(a2, __p);
  sub_19C22ECC8(v4, __dst, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_19C0945E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkConnectNodes(uint64_t a1, const __CFString *a2, int a3, const __CFString *a4, int a5)
{
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  sub_19C242794(a2, v13);
  sub_19C242794(a4, __p);
  v9 = sub_19C2306E8(a1 + 16, (uint64_t)v13, a3, (uint64_t)__p, a5);
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((v14 & 0x80000000) == 0)
      return v9;
  }
  else if ((v14 & 0x80000000) == 0)
  {
    return v9;
  }
  operator delete(v13[0]);
  return v9;
}

void sub_19C0946B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkCopyModelData(uint64_t a1)
{
  return sub_19C235C9C(a1 + 16);
}

uint64_t MRLNeuralNetworkSave(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFURL *Value;
  const __CFString *v5;
  char **v6;
  const void *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  int v11;
  CFTypeID TypeID;
  CFTypeID v13;
  const __CFDictionary *v14;
  unint64_t Count;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  const void **v20;
  unint64_t v21;
  int v22;
  void *v23;
  std::string::size_type size;
  const __CFString *v25;
  const void *v26;
  CFTypeID v27;
  std::string::size_type v28;
  const __CFString *v29;
  const void *v30;
  CFTypeID v31;
  const __CFNumber *v32;
  CFTypeID v33;
  uint64_t v34;
  CFTypeID v35;
  const __CFNumber *v36;
  CFTypeID v37;
  uint64_t v38;
  CFTypeID v39;
  char *v40;
  char **v41;
  char **v42;
  size_t v43;
  _BYTE *v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  size_t v49;
  char *v50;
  size_t v51;
  int v52;
  _BOOL4 v53;
  int v54;
  _BOOL4 v55;
  char *v56;
  _BYTE *v57;
  BOOL v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _BYTE *v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  const void *v72;
  int64_t v73;
  char *v74;
  int64_t v75;
  uint64_t v76;
  char **v77;
  uint64_t v78;
  uint64_t *v80;
  char *v81;
  uint64_t *v82;
  _BYTE *v83;
  __int128 v84;
  uint64_t v85;
  char **v86;
  std::logic_error *v87;
  std::runtime_error *v88;
  std::logic_error *v89;
  std::runtime_error *v90;
  std::runtime_error *v91;
  std::runtime_error *v92;
  std::runtime_error *v93;
  std::runtime_error *exception;
  std::runtime_error *v95;
  int v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  uint64_t v100;
  __int128 v101;
  void *v102;
  char *v103;
  char *v104;
  void *v105;
  void *v106;
  char *v107;
  CFDictionaryRef v108;
  const __CFString *v109;
  const void *v110;
  _BYTE theDicta[24];
  __int128 v112;
  void *__p[3];
  std::string __str;
  uint64_t v115;
  void *v116;
  _BYTE *v117;
  const __CFDictionary *v118;
  int v119;
  void *v120[2];
  char v121;
  char **v122;
  char *v123;
  uint64_t v124;
  void *v125[2];
  char v126;

  Value = (const __CFURL *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionModelURLKey"));
  v5 = CFURLCopyFileSystemPath(Value, kCFURLPOSIXPathStyle);
  sub_19C242794(v5, v125);
  if (v5)
    CFRelease(v5);
  v123 = 0;
  v124 = 0;
  v6 = &v123;
  v122 = &v123;
  v7 = CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionQuantizationParamsKey"));
  v8 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionModelNameKey"));
  v9 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("MRLNeuralNetworkOptionModelVersionKey"));
  v10 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("kMRLNeuralNetworkOptionModelTypeKey"));
  if (!v10)
    v10 = CFSTR("FlatModel");
  v11 = CFEqual(v10, CFSTR("Espresso"));
  if (v8)
  {
    TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(v8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not convert");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    sub_19C0992F0(v8, v120);
    v119 = 0;
    if (!v9)
      goto LABEL_12;
  }
  else
  {
    v121 = 5;
    v119 = 0;
    strcpy((char *)v120, "model");
    if (!v9)
      goto LABEL_12;
  }
  v13 = CFStringGetTypeID();
  if (v13 != CFGetTypeID(v9))
  {
    v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v95, "Could not convert");
    __cxa_throw(v95, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C0992F0(v9, &__str);
  v119 = std::stoi(&__str, 0, 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_167;
    goto LABEL_13;
  }
LABEL_12:
  if (!v7)
    goto LABEL_167;
LABEL_13:
  CFRetain(v7);
  v96 = v11;
  v97 = a1;
  sub_19C0987C4(&v118, v7);
  sub_19C098870((uint64_t)&__str, v118);
  while (1)
  {
    *(_QWORD *)theDicta = v118;
    v14 = v118;
    *(_OWORD *)&theDicta[8] = 0u;
    v112 = 0u;
    memset(__p, 0, sizeof(__p));
    if (v118)
    {
      Count = CFDictionaryGetCount(v118);
      v16 = Count;
      v17 = (uint64_t)(v112 - *(_QWORD *)&theDicta[16]) >> 3;
      if (Count <= v17)
      {
        if (Count < v17)
          *(_QWORD *)&v112 = *(_QWORD *)&theDicta[16] + 8 * Count;
      }
      else
      {
        sub_19C098930((void **)&theDicta[16], Count - v17);
      }
      v20 = (const void **)__p[0];
      v21 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if (v16 <= v21)
      {
        if (v16 < v21)
          __p[1] = (char *)__p[0] + 8 * v16;
      }
      else
      {
        sub_19C098930(__p, v16 - v21);
        v20 = (const void **)__p[0];
      }
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)theDicta, *(const void ***)&theDicta[16], v20);
      v14 = *(const __CFDictionary **)&theDicta[16];
      v18 = (uint64_t)(v112 - *(_QWORD *)&theDicta[16]) >> 3;
      *(_QWORD *)&theDicta[8] = v18;
      v19 = __str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0])
      {
LABEL_27:
        v22 = 0;
        v23 = __p[0];
        if (!__p[0])
          goto LABEL_29;
LABEL_28:
        __p[1] = v23;
        operator delete(v23);
        v14 = *(const __CFDictionary **)&theDicta[16];
        goto LABEL_29;
      }
    }
    else
    {
      v18 = 0;
      *(_QWORD *)&theDicta[8] = 0;
      v19 = __str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_27;
    }
    if (__str.__r_.__value_.__l.__size_ == (int64_t)(v115 - __str.__r_.__value_.__r.__words[2]) >> 3)
      goto LABEL_27;
    v58 = v19 == *(_QWORD *)theDicta && __str.__r_.__value_.__l.__size_ == v18;
    v22 = !v58;
    v23 = __p[0];
    if (__p[0])
      goto LABEL_28;
LABEL_29:
    if (v14)
    {
      *(_QWORD *)&v112 = v14;
      operator delete(v14);
    }
    if (!v22)
      break;
    size = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || __str.__r_.__value_.__l.__size_ >= (int64_t)(v115 - __str.__r_.__value_.__r.__words[2]) >> 3)
    {
      v87 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v87, "DictionaryRef_iterator iterator out of range.");
      v87->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
      __cxa_throw(v87, (struct type_info *)off_1E3D1C4C0, MEMORY[0x1E0DE42E0]);
    }
    v25 = *(const __CFString **)(__str.__r_.__value_.__r.__words[2] + 8 * __str.__r_.__value_.__l.__size_);
    if (v25)
    {
      CFRetain(*(CFTypeRef *)(__str.__r_.__value_.__r.__words[2] + 8 * __str.__r_.__value_.__l.__size_));
      size = __str.__r_.__value_.__l.__size_;
    }
    v26 = (const void *)*((_QWORD *)v116 + size);
    if (v26)
      CFRetain(*((CFTypeRef *)v116 + size));
    if (v25)
      CFRetain(v25);
    v109 = v25;
    if (v26)
    {
      CFRetain(v26);
      v110 = v26;
      CFRelease(v26);
      if (!v25)
        goto LABEL_189;
    }
    else
    {
      v110 = 0;
      if (!v25)
        goto LABEL_189;
    }
    CFRelease(v25);
    v27 = CFStringGetTypeID();
    if (v27 != CFGetTypeID(v25))
    {
LABEL_189:
      v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v88, "Could not convert");
      __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    sub_19C0992F0(v25, theDicta);
    if (v26)
      CFRelease(v26);
    CFRelease(v25);
    v28 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
      || __str.__r_.__value_.__l.__size_ >= (int64_t)(v115 - __str.__r_.__value_.__r.__words[2]) >> 3)
    {
      v89 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v89, "DictionaryRef_iterator iterator out of range.");
      v89->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
      __cxa_throw(v89, (struct type_info *)off_1E3D1C4C0, MEMORY[0x1E0DE42E0]);
    }
    v29 = *(const __CFString **)(__str.__r_.__value_.__r.__words[2] + 8 * __str.__r_.__value_.__l.__size_);
    if (v29)
    {
      CFRetain(*(CFTypeRef *)(__str.__r_.__value_.__r.__words[2] + 8 * __str.__r_.__value_.__l.__size_));
      v28 = __str.__r_.__value_.__l.__size_;
    }
    v30 = (const void *)*((_QWORD *)v116 + v28);
    if (v30)
      CFRetain(*((CFTypeRef *)v116 + v28));
    if (v29)
      CFRetain(v29);
    v109 = v29;
    if (!v30)
    {
      v110 = 0;
      if (!v29)
        goto LABEL_60;
LABEL_59:
      CFRelease(v29);
      goto LABEL_60;
    }
    CFRetain(v30);
    v110 = v30;
    CFRelease(v30);
    if (v29)
      goto LABEL_59;
LABEL_60:
    if (!v30)
    {
      v108 = 0;
      if (!v29)
        goto LABEL_66;
LABEL_65:
      CFRelease(v29);
      goto LABEL_66;
    }
    CFRetain(v30);
    v108 = (CFDictionaryRef)v30;
    v31 = CFGetTypeID(v30);
    if (v31 != CFDictionaryGetTypeID())
    {
      v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v93, "Could not construct");
      __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    CFRelease(v30);
    if (v29)
      goto LABEL_65;
LABEL_66:
    if (!v30)
    {
      v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v92, "Could not construct");
      goto LABEL_195;
    }
    if (!CFDictionaryGetValue((CFDictionaryRef)v30, CFSTR("MRLNeuralNetworkOptionQuantizationSchemeNameKey")))
    {
      v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v92, "Could not find item");
LABEL_195:
      __cxa_throw(v92, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!v108)
    {
      v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not construct");
LABEL_198:
      __cxa_throw(v90, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v32 = (const __CFNumber *)CFDictionaryGetValue(v108, CFSTR("MRLNeuralNetworkOptionQuantizationSchemeLinearInt8RangeMinKey"));
    if (!v32)
    {
      v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not find item");
      goto LABEL_198;
    }
    v33 = CFNumberGetTypeID();
    if (v33 == CFGetTypeID(v32))
    {
      v34 = sub_19C099E0C(v32);
    }
    else
    {
      v35 = CFBooleanGetTypeID();
      if (v35 != CFGetTypeID(v32))
        goto LABEL_191;
      v34 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v32)) | 0x100000000;
    }
    if ((v34 & 0xFF00000000) == 0)
    {
LABEL_191:
      v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not convert");
      goto LABEL_198;
    }
    v36 = (const __CFNumber *)CFDictionaryGetValue(v108, CFSTR("MRLNeuralNetworkOptionQuantizationSchemeLinearInt8RangeMaxKey"));
    if (!v36)
    {
      v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v91, "Could not find item");
LABEL_200:
      __cxa_throw(v91, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v37 = CFNumberGetTypeID();
    if (v37 == CFGetTypeID(v36))
    {
      v38 = sub_19C099E0C(v36);
    }
    else
    {
      v39 = CFBooleanGetTypeID();
      if (v39 != CFGetTypeID(v36))
        goto LABEL_192;
      v38 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v36)) | 0x100000000;
    }
    if ((v38 & 0xFF00000000) == 0)
    {
LABEL_192:
      v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v91, "Could not convert");
      goto LABEL_200;
    }
    v40 = v123;
    v41 = v6;
    v42 = v6;
    if (v123)
    {
      if (theDicta[23] >= 0)
        v43 = theDicta[23];
      else
        v43 = *(_QWORD *)&theDicta[8];
      if (theDicta[23] >= 0)
        v44 = theDicta;
      else
        v44 = *(_BYTE **)theDicta;
      while (1)
      {
        while (1)
        {
          v6 = (char **)v40;
          v47 = (char *)*((_QWORD *)v40 + 4);
          v45 = v40 + 32;
          v46 = v47;
          v48 = v45[23];
          if (v48 >= 0)
            v49 = v45[23];
          else
            v49 = *((_QWORD *)v45 + 1);
          if (v48 >= 0)
            v50 = v45;
          else
            v50 = v46;
          if (v49 >= v43)
            v51 = v43;
          else
            v51 = v49;
          v52 = memcmp(v44, v50, v51);
          v53 = v43 < v49;
          if (v52)
            v53 = v52 < 0;
          if (!v53)
            break;
          v40 = *v6;
          v41 = v6;
          if (!*v6)
            goto LABEL_106;
        }
        v54 = memcmp(v50, v44, v51);
        v55 = v49 < v43;
        if (v54)
          v55 = v54 < 0;
        if (!v55)
          break;
        v40 = v6[1];
        if (!v40)
        {
          v41 = v6 + 1;
          goto LABEL_106;
        }
      }
      v56 = (char *)v6;
    }
    else
    {
LABEL_106:
      v56 = (char *)operator new(0x40uLL);
      v57 = v56 + 32;
      if ((theDicta[23] & 0x80000000) != 0)
      {
        sub_19C07C6E8(v57, *(void **)theDicta, *(unint64_t *)&theDicta[8]);
      }
      else
      {
        *(_OWORD *)v57 = *(_OWORD *)theDicta;
        *((_QWORD *)v56 + 6) = *(_QWORD *)&theDicta[16];
      }
      *((_QWORD *)v56 + 7) = 0;
      *(_QWORD *)v56 = 0;
      *((_QWORD *)v56 + 1) = 0;
      *((_QWORD *)v56 + 2) = v6;
      *v41 = v56;
      v59 = v56;
      if (*v122)
      {
        v122 = (char **)*v122;
        v59 = *v41;
      }
      v60 = v123;
      v59[24] = v59 == v123;
      if (v59 != v60)
      {
        do
        {
          v61 = *((_QWORD *)v59 + 2);
          if (*(_BYTE *)(v61 + 24))
            break;
          v62 = *(char **)(v61 + 16);
          v63 = *(_QWORD *)v62;
          if (*(_QWORD *)v62 == v61)
          {
            v66 = *((_QWORD *)v62 + 1);
            if (!v66 || (v67 = *(unsigned __int8 *)(v66 + 24), v64 = (_BYTE *)(v66 + 24), v67))
            {
              if (*(char **)v61 == v59)
              {
                *(_BYTE *)(v61 + 24) = 1;
                v62[24] = 0;
                v70 = *(_QWORD *)(v61 + 8);
                *(_QWORD *)v62 = v70;
                if (v70)
                  goto LABEL_133;
              }
              else
              {
                v68 = *(uint64_t **)(v61 + 8);
                v69 = *v68;
                *(_QWORD *)(v61 + 8) = *v68;
                if (v69)
                {
                  *(_QWORD *)(v69 + 16) = v61;
                  v62 = *(char **)(v61 + 16);
                }
                v68[2] = (uint64_t)v62;
                *(_QWORD *)(*(_QWORD *)(v61 + 16) + 8 * (**(_QWORD **)(v61 + 16) != v61)) = v68;
                *v68 = v61;
                *(_QWORD *)(v61 + 16) = v68;
                v62 = (char *)v68[2];
                v61 = *(_QWORD *)v62;
                *((_BYTE *)v68 + 24) = 1;
                v62[24] = 0;
                v70 = *(_QWORD *)(v61 + 8);
                *(_QWORD *)v62 = v70;
                if (v70)
LABEL_133:
                  *(_QWORD *)(v70 + 16) = v62;
              }
              *(_QWORD *)(v61 + 16) = *((_QWORD *)v62 + 2);
              *(_QWORD *)(*((_QWORD *)v62 + 2) + 8 * (**((_QWORD **)v62 + 2) != (_QWORD)v62)) = v61;
              *(_QWORD *)(v61 + 8) = v62;
LABEL_140:
              *((_QWORD *)v62 + 2) = v61;
              break;
            }
          }
          else if (!v63 || (v65 = *(unsigned __int8 *)(v63 + 24), v64 = (_BYTE *)(v63 + 24), v65))
          {
            if (*(char **)v61 == v59)
            {
              v76 = *((_QWORD *)v59 + 1);
              *(_QWORD *)v61 = v76;
              if (v76)
              {
                *(_QWORD *)(v76 + 16) = v61;
                v62 = *(char **)(v61 + 16);
              }
              *((_QWORD *)v59 + 2) = v62;
              *(_QWORD *)(*(_QWORD *)(v61 + 16) + 8 * (**(_QWORD **)(v61 + 16) != v61)) = v59;
              *((_QWORD *)v59 + 1) = v61;
              *(_QWORD *)(v61 + 16) = v59;
              v62 = (char *)*((_QWORD *)v59 + 2);
              v59[24] = 1;
              v62[24] = 0;
              v61 = *((_QWORD *)v62 + 1);
              v71 = *(char **)v61;
              *((_QWORD *)v62 + 1) = *(_QWORD *)v61;
              if (v71)
LABEL_138:
                *((_QWORD *)v71 + 2) = v62;
            }
            else
            {
              *(_BYTE *)(v61 + 24) = 1;
              v62[24] = 0;
              v61 = *((_QWORD *)v62 + 1);
              v71 = *(char **)v61;
              *((_QWORD *)v62 + 1) = *(_QWORD *)v61;
              if (v71)
                goto LABEL_138;
            }
            *(_QWORD *)(v61 + 16) = *((_QWORD *)v62 + 2);
            *(_QWORD *)(*((_QWORD *)v62 + 2) + 8 * (**((_QWORD **)v62 + 2) != (_QWORD)v62)) = v61;
            *(_QWORD *)v61 = v62;
            goto LABEL_140;
          }
          *(_BYTE *)(v61 + 24) = 1;
          v59 = v62;
          v62[24] = v62 == v60;
          *v64 = 1;
        }
        while (v62 != v60);
      }
      ++v124;
    }
    *((_DWORD *)v56 + 14) = v34;
    *((_DWORD *)v56 + 15) = v38;
    v101 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    v103 = 0;
    v104 = 0;
    v102 = 0;
    v72 = (const void *)__str.__r_.__value_.__r.__words[2];
    v73 = v115 - __str.__r_.__value_.__r.__words[2];
    if (v115 == __str.__r_.__value_.__r.__words[2])
    {
      v74 = 0;
      v6 = v42;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v75 = v117 - (_BYTE *)v116;
      if (v117 == v116)
        goto LABEL_153;
    }
    else
    {
      if (v73 < 0)
        sub_19C07DA0C();
      v74 = (char *)operator new(v115 - __str.__r_.__value_.__r.__words[2]);
      v6 = v42;
      v102 = v74;
      v104 = &v74[8 * (v73 >> 3)];
      memcpy(v74, v72, v73);
      v103 = v104;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v75 = v117 - (_BYTE *)v116;
      if (v117 == v116)
      {
LABEL_153:
        ++__str.__r_.__value_.__l.__size_;
        if (v74)
          goto LABEL_147;
        goto LABEL_148;
      }
    }
    if (v75 < 0)
      sub_19C07DA0C();
    v105 = operator new(v75);
    v106 = v105;
    v107 = (char *)v105 + 8 * (v75 >> 3);
    ++__str.__r_.__value_.__l.__size_;
    operator delete(v105);
    v74 = (char *)v102;
    if (v102)
    {
LABEL_147:
      v103 = v74;
      operator delete(v74);
    }
LABEL_148:
    if (v108)
      CFRelease(v108);
    if ((theDicta[23] & 0x80000000) != 0)
      operator delete(*(void **)theDicta);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  a1 = v97;
  v11 = v96;
  if (__str.__r_.__value_.__r.__words[2])
  {
    v115 = __str.__r_.__value_.__r.__words[2];
    operator delete((void *)__str.__r_.__value_.__r.__words[2]);
  }
  if (v118)
    CFRelease(v118);
LABEL_167:
  v99 = 0;
  v100 = 0;
  v98 = &v99;
  v77 = v122;
  if (v122 != v6)
  {
    do
    {
      v80 = sub_19C098BC4((uint64_t **)&v98, (uint64_t *)&v99, (uint64_t **)theDicta, (uint64_t **)&v109, (const void **)v77 + 4);
      if (*v80)
      {
        v81 = v77[1];
        if (v81)
          goto LABEL_181;
      }
      else
      {
        v82 = (uint64_t *)operator new(0x40uLL);
        v83 = v82 + 4;
        if (*((char *)v77 + 55) < 0)
        {
          sub_19C07C6E8(v83, v77[4], (unint64_t)v77[5]);
        }
        else
        {
          v84 = *((_OWORD *)v77 + 2);
          v82[6] = (uint64_t)v77[6];
          *(_OWORD *)v83 = v84;
        }
        v82[7] = (uint64_t)v77[7];
        v85 = *(_QWORD *)theDicta;
        *v82 = 0;
        v82[1] = 0;
        v82[2] = v85;
        *v80 = (uint64_t)v82;
        if (*v98)
        {
          v98 = (uint64_t **)*v98;
          v82 = (uint64_t *)*v80;
        }
        sub_19C07CC40(v99, v82);
        ++v100;
        v81 = v77[1];
        if (v81)
        {
          do
          {
LABEL_181:
            v86 = (char **)v81;
            v81 = *(char **)v81;
          }
          while (v81);
          goto LABEL_171;
        }
      }
      do
      {
        v86 = (char **)v77[2];
        v58 = *v86 == (char *)v77;
        v77 = v86;
      }
      while (!v58);
LABEL_171:
      v77 = v86;
    }
    while (v86 != v6);
  }
  v78 = sub_19C23421C(a1 + 16, (uint64_t *)v125, (const void ***)&v98, (uint64_t)v120, (uint64_t)&v119, v11 != 0);
  sub_19C098FBC((uint64_t)&v98, (char *)v99);
  if (v121 < 0)
  {
    operator delete(v120[0]);
    sub_19C098FBC((uint64_t)&v122, v123);
    if ((v126 & 0x80000000) == 0)
      return v78;
LABEL_207:
    operator delete(v125[0]);
    return v78;
  }
  sub_19C098FBC((uint64_t)&v122, v123);
  if (v126 < 0)
    goto LABEL_207;
  return v78;
}

void sub_19C095848(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  __cxa_end_catch();
  JUMPOUT(0x19C0958E0);
}

_QWORD *sub_19C095914(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_19C095954(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

CFDictionaryRef MRLNeuralNetworkCopyInputNamesAndDimensions(uint64_t a1)
{
  const void **v1;
  const void ***v2;
  uint64_t v3;
  const void **v4;
  const void ***v5;
  BOOL v6;
  uint64_t *v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  _QWORD *v14;
  char **v15;
  uint64_t *v16;
  uint64_t *v17;
  CFDictionaryRef Copy;
  char *v20;
  char **v21;
  char **v22;
  char *v23[2];
  char **v24;
  char *v25[2];
  char **v26;
  char *v27[2];
  __int128 *v28;

  v27[0] = 0;
  v27[1] = 0;
  v25[1] = 0;
  v26 = v27;
  v24 = v25;
  v25[0] = 0;
  v1 = *(const void ***)(a1 + 24);
  v2 = (const void ***)(a1 + 32);
  if (v1 != (const void **)(a1 + 32))
  {
    v3 = a1 + 16;
    do
    {
      sub_19C098AD0((uint64_t **)&v24, (uint64_t *)v25, v1 + 4, (uint64_t)(v1 + 4));
      v4 = (const void **)v1[1];
      if (v4)
      {
        do
        {
          v5 = (const void ***)v4;
          v4 = (const void **)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (const void ***)v1[2];
          v6 = *v5 == v1;
          v1 = (const void **)v5;
        }
        while (!v6);
      }
      v1 = (const void **)v5;
    }
    while (v5 != v2);
    v7 = (uint64_t *)v24;
    if (v24 != v25)
    {
      do
      {
        v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, v7 + 4);
        v28 = (__int128 *)(v7 + 4);
        v9 = sub_19C099140((uint64_t **)&v26, (const void **)v7 + 4, (uint64_t)&unk_19C27ADD0, &v28);
        v10 = v9[7];
        v11 = v9[9];
        if (v11 == v10)
        {
          if (v11)
          {
            v9[8] = v11;
            operator delete(v11);
            v9[7] = 0;
            v9[8] = 0;
            v9[9] = 0;
          }
          v13 = (uint64_t *)operator new(8uLL);
          v9[8] = v13;
          v14 = v9 + 8;
          *(v14 - 1) = v13;
          v14[1] = v13 + 1;
          *v13 = v8;
          *v14 = v13 + 1;
          v12 = (char *)v7[1];
          if (v12)
          {
            do
            {
LABEL_19:
              v15 = (char **)v12;
              v12 = *(char **)v12;
            }
            while (v12);
            goto LABEL_12;
          }
        }
        else
        {
          *v10 = v8;
          v9[8] = v10 + 1;
          v12 = (char *)v7[1];
          if (v12)
            goto LABEL_19;
        }
        do
        {
          v15 = (char **)v7[2];
          v6 = *v15 == (char *)v7;
          v7 = (uint64_t *)v15;
        }
        while (!v6);
LABEL_12:
        v7 = (uint64_t *)v15;
      }
      while (v15 != v25);
    }
  }
  sub_19C098FBC((uint64_t)&v24, v25[0]);
  v23[0] = 0;
  v23[1] = 0;
  v22 = v23;
  v16 = (uint64_t *)v26;
  if (v26 != v27)
  {
    do
    {
      sub_19C09B3CC((uint64_t **)&v22, (uint64_t *)v23, (const void **)v16 + 4, (__int128 *)v16 + 2);
      v20 = (char *)v16[1];
      if (v20)
      {
        do
        {
          v21 = (char **)v20;
          v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (char **)v16[2];
          v6 = *v21 == (char *)v16;
          v16 = (uint64_t *)v21;
        }
        while (!v6);
      }
      v16 = (uint64_t *)v21;
    }
    while (v21 != v27);
  }
  v17 = (uint64_t *)sub_19C09A01C(&v22);
  v24 = (char **)v17;
  Copy = CFDictionaryCreateCopy(0, (CFDictionaryRef)v17);
  if (v17)
    CFRelease(v17);
  sub_19C09B35C((uint64_t)&v22, v23[0]);
  sub_19C09B35C((uint64_t)&v26, v27[0]);
  return Copy;
}

void sub_19C095C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
  sub_19C094494(&a13);
  sub_19C09B35C((uint64_t)&a10, a11);
  sub_19C09B35C((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_19C095C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, char *a17)
{
  sub_19C098FBC((uint64_t)&a13, a14);
  sub_19C09B35C((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

CFDictionaryRef MRLNeuralNetworkCopyOutputNamesAndDimensions(uint64_t a1)
{
  const void **v1;
  const void ***v2;
  uint64_t v3;
  const void **v4;
  const void ***v5;
  BOOL v6;
  uint64_t *v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  _QWORD *v14;
  char **v15;
  uint64_t *v16;
  uint64_t *v17;
  CFDictionaryRef Copy;
  char *v20;
  char **v21;
  char **v22;
  char *v23[2];
  char **v24;
  char *v25[2];
  char **v26;
  char *v27[2];
  __int128 *v28;

  v27[0] = 0;
  v27[1] = 0;
  v25[1] = 0;
  v26 = v27;
  v24 = v25;
  v25[0] = 0;
  v1 = *(const void ***)(a1 + 48);
  v2 = (const void ***)(a1 + 56);
  if (v1 != (const void **)(a1 + 56))
  {
    v3 = a1 + 16;
    do
    {
      sub_19C098AD0((uint64_t **)&v24, (uint64_t *)v25, v1 + 4, (uint64_t)(v1 + 4));
      v4 = (const void **)v1[1];
      if (v4)
      {
        do
        {
          v5 = (const void ***)v4;
          v4 = (const void **)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (const void ***)v1[2];
          v6 = *v5 == v1;
          v1 = (const void **)v5;
        }
        while (!v6);
      }
      v1 = (const void **)v5;
    }
    while (v5 != v2);
    v7 = (uint64_t *)v24;
    if (v24 != v25)
    {
      do
      {
        v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 24))(v3, v7 + 4);
        v28 = (__int128 *)(v7 + 4);
        v9 = sub_19C099140((uint64_t **)&v26, (const void **)v7 + 4, (uint64_t)&unk_19C27ADD0, &v28);
        v10 = v9[7];
        v11 = v9[9];
        if (v11 == v10)
        {
          if (v11)
          {
            v9[8] = v11;
            operator delete(v11);
            v9[7] = 0;
            v9[8] = 0;
            v9[9] = 0;
          }
          v13 = (uint64_t *)operator new(8uLL);
          v9[8] = v13;
          v14 = v9 + 8;
          *(v14 - 1) = v13;
          v14[1] = v13 + 1;
          *v13 = v8;
          *v14 = v13 + 1;
          v12 = (char *)v7[1];
          if (v12)
          {
            do
            {
LABEL_19:
              v15 = (char **)v12;
              v12 = *(char **)v12;
            }
            while (v12);
            goto LABEL_12;
          }
        }
        else
        {
          *v10 = v8;
          v9[8] = v10 + 1;
          v12 = (char *)v7[1];
          if (v12)
            goto LABEL_19;
        }
        do
        {
          v15 = (char **)v7[2];
          v6 = *v15 == (char *)v7;
          v7 = (uint64_t *)v15;
        }
        while (!v6);
LABEL_12:
        v7 = (uint64_t *)v15;
      }
      while (v15 != v25);
    }
  }
  sub_19C098FBC((uint64_t)&v24, v25[0]);
  v23[0] = 0;
  v23[1] = 0;
  v22 = v23;
  v16 = (uint64_t *)v26;
  if (v26 != v27)
  {
    do
    {
      sub_19C09B3CC((uint64_t **)&v22, (uint64_t *)v23, (const void **)v16 + 4, (__int128 *)v16 + 2);
      v20 = (char *)v16[1];
      if (v20)
      {
        do
        {
          v21 = (char **)v20;
          v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (char **)v16[2];
          v6 = *v21 == (char *)v16;
          v16 = (uint64_t *)v21;
        }
        while (!v6);
      }
      v16 = (uint64_t *)v21;
    }
    while (v21 != v27);
  }
  v17 = (uint64_t *)sub_19C09A01C(&v22);
  v24 = (char **)v17;
  Copy = CFDictionaryCreateCopy(0, (CFDictionaryRef)v17);
  if (v17)
    CFRelease(v17);
  sub_19C09B35C((uint64_t)&v22, v23[0]);
  sub_19C09B35C((uint64_t)&v26, v27[0]);
  return Copy;
}

void sub_19C095EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
  sub_19C094494(&a13);
  sub_19C09B35C((uint64_t)&a10, a11);
  sub_19C09B35C((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void sub_19C095F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, char a16, char *a17)
{
  sub_19C098FBC((uint64_t)&a13, a14);
  sub_19C09B35C((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void MRLNeuralNetworkGetNodeParams(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID;
  std::runtime_error *exception;
  void *__p[2];
  char v7;

  if (!a2 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not convert");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C0992F0(a2, __p);
  sub_19C233EB0(a1 + 16, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_19C096028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  CFErrorRef *v26;
  void *v29;
  const __CFAllocator *v30;
  const char *v31;
  CFStringRef v32;
  CFMutableDictionaryRef Mutable;
  char v34;

  if (v34 < 0)
    operator delete(Mutable);
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v29 = __cxa_begin_catch(exception_object);
  v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v31 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29);
  v32 = CFStringCreateWithCString(v30, v31, 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v32);
  *v26 = CFErrorCreate(v30, MRLNeuralNetworkErrorDomain, 0, Mutable);
  bzero(v25, 0x2C0uLL);
  sub_19C096164((const void **)&v32);
  sub_19C096198((const void **)&Mutable);
  __cxa_end_catch();
}

const void **sub_19C096164(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

const void **sub_19C096198(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

_QWORD *MRLNeuralNetworkStateCreate()
{
  _QWORD *result;

  if (qword_1EE4188F0 != -1)
    dispatch_once(&qword_1EE4188F0, &unk_1E3D25410);
  result = (_QWORD *)_CFRuntimeCreateInstance();
  result[3] = 0;
  result[2] = result + 3;
  result[6] = 0;
  result[4] = 0;
  result[5] = result + 6;
  result[8] = 0;
  result[9] = 0;
  result[7] = 0;
  return result;
}

uint64_t MRLNeuralNetworkTensorCreate(CFTypeRef cf)
{
  const void *Value;
  const void *v3;
  const void *v4;
  int v5;
  const __CFDictionary *v6;
  const void *v7;
  uint64_t v8;
  const __CFDictionary *v9;
  const void *v10;
  int v11;
  const __CFDictionary *v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  const __CFDictionary *v18;
  const void *v19;
  const void *v20;
  const __CFBoolean *v21;
  BOOL v22;
  const __CFDictionary *v23;
  const __CFBoolean *v24;
  BOOL v25;
  std::runtime_error *v26;
  const __CFBoolean *v27;
  std::runtime_error *v28;
  const __CFBoolean *v29;
  uint64_t Instance;
  std::runtime_error *v32;
  std::runtime_error *v33;
  std::runtime_error *v34;
  std::runtime_error *exception;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *v43;
  CFDictionaryRef theDict;

  if (cf)
    CFRetain(cf);
  sub_19C0987C4(&theDict, cf);
  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("ShapeDimension"));
  if (Value && (sub_19C09B5E4((uint64_t)Value) & 0xFF00000000) != 0)
  {
    if (!theDict)
    {
      v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v38, "Could not construct");
      __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v3 = CFDictionaryGetValue(theDict, CFSTR("ShapeDimension"));
    if (v3)
    {
      if (sub_19C09B5E4((uint64_t)v3) == 5)
      {
        if (!theDict)
        {
          v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v4 = CFDictionaryGetValue(theDict, CFSTR("Width"));
        if (v4)
        {
          v5 = sub_19C09B5E4((uint64_t)v4);
          v6 = theDict;
          if (theDict)
            goto LABEL_12;
        }
        else
        {
          v5 = 0;
          v6 = theDict;
          if (theDict)
          {
LABEL_12:
            v7 = CFDictionaryGetValue(v6, CFSTR("Height"));
            if (v7)
            {
              LODWORD(v8) = sub_19C09B5E4((uint64_t)v7);
              v9 = theDict;
              if (theDict)
                goto LABEL_14;
            }
            else
            {
              LODWORD(v8) = 0;
              v9 = theDict;
              if (theDict)
              {
LABEL_14:
                v10 = CFDictionaryGetValue(v9, CFSTR("Channel"));
                if (v10)
                {
                  v11 = sub_19C09B5E4((uint64_t)v10);
                  v12 = theDict;
                  if (theDict)
                  {
LABEL_16:
                    v13 = CFDictionaryGetValue(v12, CFSTR("SequenceLength"));
                    v14 = v5;
                    v8 = (int)v8;
                    if (v13 && (sub_19C09B5E4((uint64_t)v13) & 0xFF00000000) != 0)
                    {
                      if (!theDict)
                      {
                        v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v43, "Could not construct");
                        __cxa_throw(v43, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                      }
                      v15 = CFDictionaryGetValue(theDict, CFSTR("SequenceLength"));
                      if (v15)
                        LODWORD(v15) = sub_19C09B5E4((uint64_t)v15);
                      v16 = (int)v15;
                      goto LABEL_33;
                    }
LABEL_32:
                    v16 = 1;
                    goto LABEL_33;
                  }
                }
                else
                {
                  v11 = 0;
                  v12 = theDict;
                  if (theDict)
                    goto LABEL_16;
                }
                v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v34, "Could not construct");
                __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
            }
            v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v33, "Could not construct");
            __cxa_throw(v33, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
        }
        v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v32, "Could not construct");
        __cxa_throw(v32, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
    }
  }
  if (!theDict)
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = CFDictionaryGetValue(theDict, CFSTR("InputDimension"));
  if (!v17)
  {
    v11 = 0;
    v18 = theDict;
    if (theDict)
      goto LABEL_25;
LABEL_41:
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = sub_19C09B5E4((uint64_t)v17);
  v18 = theDict;
  if (!theDict)
    goto LABEL_41;
LABEL_25:
  v19 = CFDictionaryGetValue(v18, CFSTR("SequenceLength"));
  if (!v19 || (sub_19C09B5E4((uint64_t)v19) & 0xFF00000000) == 0)
  {
    v14 = 1;
    v8 = 1;
    goto LABEL_32;
  }
  if (!theDict)
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v20 = CFDictionaryGetValue(theDict, CFSTR("SequenceLength"));
  if (v20)
    LODWORD(v20) = sub_19C09B5E4((uint64_t)v20);
  v16 = (int)v20;
  v14 = 1;
  v8 = 1;
LABEL_33:
  if (!theDict)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v21 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("isBatchFirst"));
  if (v21 && (unsigned __int16)sub_19C09B8A8(v21) >= 0x100u)
  {
    if (!theDict)
    {
      v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
      __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v27 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("isBatchFirst"));
    if (v27)
    {
      v22 = sub_19C09B8A8(v27) != 0;
      v23 = theDict;
      if (theDict)
        goto LABEL_37;
    }
    else
    {
      v22 = 0;
      v23 = theDict;
      if (theDict)
        goto LABEL_37;
    }
LABEL_45:
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22 = 1;
  v23 = theDict;
  if (!theDict)
    goto LABEL_45;
LABEL_37:
  v24 = (const __CFBoolean *)CFDictionaryGetValue(v23, CFSTR("isChannelLast"));
  if (v24 && (unsigned __int16)sub_19C09B8A8(v24) >= 0x100u)
  {
    if (!theDict)
    {
      v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v41, "Could not construct");
      __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v29 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("isChannelLast"));
    if (v29)
      v25 = sub_19C09B8A8(v29) != 0;
    else
      v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  if (qword_1EE4189C0 != -1)
    dispatch_once(&qword_1EE4189C0, &unk_1E3D253D0);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = 0;
  *(_QWORD *)(Instance + 24) = 0;
  *(_QWORD *)(Instance + 32) = 0;
  *(_QWORD *)(Instance + 40) = v14;
  *(_QWORD *)(Instance + 48) = v8;
  *(_QWORD *)(Instance + 56) = v11;
  *(_QWORD *)(Instance + 64) = v16;
  *(_QWORD *)(Instance + 72) = 0;
  *(_BYTE *)(Instance + 80) = v25;
  *(_BYTE *)(Instance + 81) = v22;
  *(_BYTE *)(Instance + 82) = 0;
  if (theDict)
    CFRelease(theDict);
  return Instance;
}

void sub_19C096874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C094494((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C096888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  sub_19C094494(&a10);
  _Unwind_Resume(a1);
}

void sub_19C096A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C094494((const void **)va);
  _Unwind_Resume(a1);
}

void MRLNeuralNetworkStateSetData(uint64_t a1, const __CFString *a2, char *a3, unint64_t a4)
{
  CFTypeID TypeID;
  std::runtime_error *exception;
  void *__p[2];
  char v11;

  if (!a2 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C0992E0(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_19C0992F0(a2, __p);
  sub_19C187604((uint64_t **)(a1 + 16), (__int128 *)__p, a3, a4);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_19C096B04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C096B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkSetPartialOutputIndices(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _OWORD *v9;
  unsigned int *v10;
  char *v11;
  unint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *i;
  uint64_t v26;
  char *v27;
  int64_t v28;
  int64_t v29;
  char v30;
  std::runtime_error *exception;
  void *v33;
  char v34;
  void *v35[2];
  char v36;
  void *__p;
  char *v38;
  char *v39;

  __p = 0;
  v38 = 0;
  v39 = 0;
  if (a4)
  {
    v7 = 4 * a4;
    if ((unint64_t)(4 * a4) >= 0x7FFFFFFFFFFFFFFDLL)
      sub_19C07DA0C();
    v9 = operator new(8 * a4);
    __p = v9;
    v39 = (char *)v9 + 8 * a4;
    v10 = (unsigned int *)a3;
    v11 = (char *)v9;
    if ((unint64_t)(v7 - 4) < 0xC)
      goto LABEL_35;
    v12 = ((unint64_t)(v7 - 4) >> 2) + 1;
    v10 = (unsigned int *)(a3 + 4 * (v12 & 0x7FFFFFFFFFFFFFFCLL));
    v11 = (char *)v9 + 8 * (v12 & 0x7FFFFFFFFFFFFFFCLL);
    v13 = v9 + 1;
    v14 = (_QWORD *)(a3 + 8);
    v15 = v12 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v16 = *(v14 - 1);
      *(_QWORD *)&v17 = v16;
      *((_QWORD *)&v17 + 1) = HIDWORD(v16);
      v18 = v17;
      *(_QWORD *)&v17 = *v14;
      *((_QWORD *)&v17 + 1) = HIDWORD(*v14);
      *(v13 - 1) = v18;
      *v13 = v17;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        v19 = *v10++;
        *(_QWORD *)v11 = v19;
        v11 += 8;
      }
      while (v10 != (unsigned int *)(a3 + 4 * a4));
    }
    v38 = v11;
  }
  std::__sort<std::__less<long,long> &,long *>();
  v20 = v38;
  if (__p != v38)
  {
    v21 = (char *)__p + 8;
    while (v21 != v38)
    {
      v22 = v21 - 8;
      v23 = *((_QWORD *)v21 - 1);
      v24 = *(_QWORD *)v21;
      v21 += 8;
      if (v23 == v24)
      {
        for (i = v22 + 16; i != v20; i += 8)
        {
          v26 = v23;
          v23 = *(_QWORD *)i;
          if (v26 != *(_QWORD *)i)
          {
            *((_QWORD *)v22 + 1) = v23;
            v22 += 8;
          }
        }
        v27 = v22 + 8;
        v28 = v20 - (v22 + 8);
        if (v28)
        {
          v29 = v20 - &v27[v28];
          if (v20 != &v27[v28])
            memmove(v27, &v27[v28], v20 - &v27[v28]);
          v38 = &v27[v29];
        }
        break;
      }
    }
  }
  v34 = 0;
  LOBYTE(v33) = 0;
  sub_19C096EE8(a2, (uint64_t)&v33, (uint64_t)v35);
  v30 = sub_19C23458C(a1 + 16, (uint64_t)v35, (uint64_t)&__p, 0);
  if (v36 < 0)
  {
    operator delete(v35[0]);
    if ((v34 & 0x80000000) == 0)
    {
LABEL_25:
      if ((v30 & 1) != 0)
        goto LABEL_26;
LABEL_31:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unknown error. ");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else if ((v34 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v33);
  if ((v30 & 1) == 0)
    goto LABEL_31;
LABEL_26:
  if (__p)
  {
    v38 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

uint64_t sub_19C096D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  CFErrorRef *v43;
  void *v44;
  void *v45;
  const __CFAllocator *v46;
  __CFDictionary *Mutable;
  const char *v48;
  CFStringRef v49;
  void *v53;

  if (v53)
    operator delete(v53);
  if (a2 != 1)
    _Unwind_Resume(a1);
  v44 = __cxa_begin_catch(a1);
  if (v43)
  {
    v45 = v44;
    v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v48 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
    v49 = CFStringCreateWithCString(v46, v48, 0);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v49);
    *v43 = CFErrorCreate(v46, MRLNeuralNetworkErrorDomain, 0, Mutable);
    CFRelease(v49);
    CFRelease(Mutable);
  }
  __cxa_end_catch();
  return 0;
}

void sub_19C096EE8(const __CFString *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CFTypeID TypeID;
  void *__p[2];
  uint64_t v8;
  char v9;

  if (a1 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    sub_19C09BCAC(a1, __p);
    v9 = 1;
    if (SHIBYTE(v8) < 0)
    {
      sub_19C07C6E8((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
      if (v9)
      {
        if (SHIBYTE(v8) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 16) = v8;
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
}

uint64_t MRLNeuralNetworkSetPartialOutputRange(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  char v8;
  std::runtime_error *exception;
  void *__p;
  void *v12;
  _QWORD *v13;
  void *v14;
  char v15;
  void *v16[2];
  char v17;

  v15 = 0;
  LOBYTE(v14) = 0;
  sub_19C096EE8(a2, (uint64_t)&v14, (uint64_t)v16);
  v7 = operator new(0x10uLL);
  v12 = v7 + 2;
  v13 = v7 + 2;
  *v7 = a3;
  v7[1] = a4;
  __p = v7;
  v8 = sub_19C23458C(a1 + 16, (uint64_t)v16, (uint64_t)&__p, 1);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if ((v17 & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_8:
    operator delete(v14);
    if ((v8 & 1) != 0)
      return 1;
LABEL_9:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown error. ");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  operator delete(v16[0]);
  if (v15 < 0)
    goto LABEL_8;
LABEL_5:
  if ((v8 & 1) == 0)
    goto LABEL_9;
  return 1;
}

uint64_t sub_19C0970D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  CFErrorRef *v30;
  void *v31;
  void *v32;
  const __CFAllocator *v33;
  __CFDictionary *Mutable;
  const char *v35;
  CFStringRef v36;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v31 = __cxa_begin_catch(exception_object);
  if (v30)
  {
    v32 = v31;
    v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v35 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
    v36 = CFStringCreateWithCString(v33, v35, 0);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v36);
    *v30 = CFErrorCreate(v33, MRLNeuralNetworkErrorDomain, 0, Mutable);
    CFRelease(v36);
    CFRelease(Mutable);
  }
  __cxa_end_catch();
  return 0;
}

uint64_t MRLNeuralNetworkModelUnLock(uint64_t result)
{
  if (result)
    return sub_19C235CAC(result + 16);
  return result;
}

uint64_t MRLNeuralNetworkDeclareOutput(uint64_t a1, const __CFString *a2)
{
  uint64_t result;
  uint64_t v4;
  void *__p[2];
  char v6;

  sub_19C242794(a2, __p);
  result = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(a1 + 16) + 88))(a1 + 16, __p);
  v4 = result;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    return v4;
  }
  return result;
}

void sub_19C0972B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkCopyIncrementalStates(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 96))(a1 + 16);
}

void sub_19C0973E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *MRLNeuralNetworkIncrementalStateCreate(uint64_t a1)
{
  _QWORD *result;

  if (qword_1EE4188F0 != -1)
    dispatch_once(&qword_1EE4188F0, &unk_1E3D25410);
  result = (_QWORD *)_CFRuntimeCreateInstance();
  result[3] = 0;
  result[2] = result + 3;
  result[6] = 0;
  result[4] = 0;
  result[5] = result + 6;
  result[7] = 0;
  result[8] = a1;
  result[9] = 0;
  return result;
}

void MRLNeuralNetworkAppendIncrementalState(uint64_t a1, uint64_t a2)
{
  sub_19C09749C((uint64_t **)(a1 + 16), a2 + 16);
}

void sub_19C09749C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  void *v13;
  void **v14;
  _QWORD *v15;
  const void *v16;
  const void *v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  int v22;
  _BOOL4 v23;
  int v24;
  _BOOL4 v25;
  _QWORD *v26;
  _BYTE *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  NSObject *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  unint64_t v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t *v59;
  size_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  size_t v64;
  size_t v65;
  uint64_t *v66;
  char *v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  unint64_t v71;
  __int128 v72;
  char *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v85;
  size_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t **v90;
  _QWORD *v91;
  uint8_t v92;
  char v93[15];
  _OWORD v94[2];
  uint64_t v95;
  void *__p[2];
  uint64_t v97;
  _QWORD v98[5];
  __int128 __dst;
  uint64_t v100;

  v2 = (uint64_t)a1;
  if (!a1[7])
  {
    v47 = (_QWORD *)sub_19C1875A8(a2);
    v48 = (_QWORD *)*v47;
    v91 = v47 + 1;
    if ((_QWORD *)*v47 != v47 + 1)
    {
      do
      {
        if (*((char *)v48 + 55) < 0)
        {
          sub_19C07C6E8(&__dst, (void *)v48[4], v48[5]);
        }
        else
        {
          __dst = *((_OWORD *)v48 + 2);
          v100 = v48[6];
        }
        v49 = v48[7];
        v50 = *((_DWORD *)v48 + 16);
        v52 = v48[9];
        v51 = v48[10];
        v53 = v48[11];
        v54 = *(_QWORD *)(v2 + 48);
        __p[0] = &__dst;
        v55 = sub_19C099140((uint64_t **)v2, (const void **)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)__p);
        v56 = (int)v49 * v50 * (int)v52 * (int)v51 * (int)v53 * v54;
        if ((char *)v55[8] - (char *)v55[7] < v56)
        {
          __p[0] = &__dst;
          v57 = sub_19C099140(a1, (const void **)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)__p);
          v58 = v57[7];
          v59 = v57[8];
          v60 = v56 - ((char *)v59 - (char *)v58);
          if (v56 <= (char *)v59 - (char *)v58)
          {
            if (v56 < (char *)v59 - (char *)v58)
              v57[8] = (uint64_t *)((char *)v58 + v56);
          }
          else
          {
            v61 = v57[9];
            if ((char *)v61 - (char *)v59 >= v60)
            {
              bzero(v57[8], v60);
              v57[8] = (uint64_t *)((char *)v58 + v56);
              goto LABEL_126;
            }
            v88 = (char *)v59 - (char *)v58;
            if ((v56 & 0x8000000000000000) != 0)
              sub_19C07DA0C();
            v62 = (char *)v61 - (char *)v58;
            v63 = 2 * v62;
            if (2 * v62 <= v56)
              v63 = v56;
            if (v62 >= 0x3FFFFFFFFFFFFFFFLL)
              v64 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v64 = v63;
            v86 = v64;
            v83 = (uint64_t *)operator new(v64);
            v81 = (uint64_t *)((char *)v83 + v88);
            bzero((char *)v83 + v88, v60);
            if (v59 != v58)
            {
              if (v88 < 8)
              {
                v65 = v86;
                v67 = (char *)v83 + v88;
                v66 = v83;
                goto LABEL_122;
              }
              v67 = (char *)v83 + v88;
              v66 = v83;
              v65 = v86;
              if ((unint64_t)((char *)v58 - (char *)v83) < 0x20)
                goto LABEL_122;
              if (v88 >= 0x20)
              {
                v68 = v88 & 0xFFFFFFFFFFFFFFE0;
                v69 = (char *)v83 + v88 - 16;
                v70 = v59 - 2;
                v71 = v88 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v72 = *(_OWORD *)v70;
                  *((_OWORD *)v69 - 1) = *((_OWORD *)v70 - 1);
                  *(_OWORD *)v69 = v72;
                  v69 -= 32;
                  v70 -= 4;
                  v71 -= 32;
                }
                while (v71);
                if (v88 != v68)
                {
                  if ((v88 & 0x18) == 0)
                  {
                    v67 = (char *)v81 - v68;
                    v59 = (uint64_t *)((char *)v59 - v68);
                    goto LABEL_122;
                  }
                  goto LABEL_117;
                }
              }
              else
              {
                v68 = 0;
LABEL_117:
                v67 = (char *)v81 - (v88 & 0xFFFFFFFFFFFFFFF8);
                v73 = (char *)v83 + (char *)v59 - v68 - (char *)v58 - 8;
                v74 = (uint64_t *)((char *)v59 - v68 - 8);
                v75 = v68 - (v88 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v76 = *v74--;
                  *(_QWORD *)v73 = v76;
                  v73 -= 8;
                  v75 += 8;
                }
                while (v75);
                v59 = (uint64_t *)((char *)v59 - (v88 & 0xFFFFFFFFFFFFFFF8));
                if (v88 != (v88 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_122:
                  v77 = v67 - 1;
                  do
                  {
                    v78 = *((_BYTE *)v59 - 1);
                    v59 = (uint64_t *)((char *)v59 - 1);
                    *v77-- = v78;
                  }
                  while (v59 != v58);
                }
              }
              v59 = v58;
              v57[7] = v66;
              v57[8] = (uint64_t *)((char *)v66 + v56);
              v57[9] = (uint64_t *)((char *)v66 + v65);
              if (!v58)
                goto LABEL_126;
LABEL_125:
              operator delete(v59);
              goto LABEL_126;
            }
            v57[7] = v81;
            v57[8] = (uint64_t *)((char *)v83 + v56);
            v57[9] = (uint64_t *)((char *)v83 + v86);
            if (v59)
              goto LABEL_125;
          }
        }
LABEL_126:
        v98[0] = v49;
        v98[1] = 0;
        v98[2] = v52;
        v98[3] = v51;
        v98[4] = v53;
        sub_19C187658((uint64_t)a1, &__dst, (uint64_t)v98);
        if (SHIBYTE(v100) < 0)
        {
          operator delete((void *)__dst);
          v79 = (_QWORD *)v48[1];
          if (v79)
          {
            do
            {
LABEL_130:
              v80 = v79;
              v79 = (_QWORD *)*v79;
            }
            while (v79);
            goto LABEL_89;
          }
        }
        else
        {
          v79 = (_QWORD *)v48[1];
          if (v79)
            goto LABEL_130;
        }
        do
        {
          v80 = (_QWORD *)v48[2];
          v31 = *v80 == (_QWORD)v48;
          v48 = v80;
        }
        while (!v31);
LABEL_89:
        v48 = v80;
        v2 = (uint64_t)a1;
      }
      while (v80 != v91);
    }
  }
  v3 = (_QWORD *)sub_19C1875A8(a2);
  v4 = v3 + 1;
  v5 = (_QWORD *)*v3;
  if ((_QWORD *)*v3 != v3 + 1)
  {
    v90 = (uint64_t **)(v2 + 8);
    v82 = v3 + 1;
    do
    {
      if (*((char *)v5 + 55) < 0)
      {
        sub_19C07C6E8(__p, (void *)v5[4], v5[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v5 + 2);
        v97 = v5[6];
      }
      v6 = *(_OWORD *)(v5 + 9);
      v94[0] = *(_OWORD *)(v5 + 7);
      v94[1] = v6;
      v95 = v5[11];
      if (sub_19C09901C(v2, (const void **)__p, (uint64_t)v94))
      {
        v87 = sub_19C18731C(a2, (const void **)__p);
        sub_19C187458(v2, (const void **)__p, (uint64_t)&__dst);
        v85 = v100;
        if (v100)
        {
          v7 = 0;
          v8 = __dst;
          do
          {
            v9 = *(_QWORD *)(v2 + 56);
            v10 = *(uint64_t **)(v2 + 8);
            v11 = v90;
            v12 = v90;
            if (v10)
            {
              if (v97 >= 0)
                v13 = (void *)HIBYTE(v97);
              else
                v13 = __p[1];
              if (v97 >= 0)
                v14 = __p;
              else
                v14 = (void **)__p[0];
              while (1)
              {
                while (1)
                {
                  v11 = (uint64_t **)v10;
                  v17 = (const void *)v10[4];
                  v15 = v10 + 4;
                  v16 = v17;
                  v18 = *((char *)v15 + 23);
                  if (v18 >= 0)
                    v19 = *((unsigned __int8 *)v15 + 23);
                  else
                    v19 = v15[1];
                  if (v18 >= 0)
                    v20 = v15;
                  else
                    v20 = v16;
                  if (v19 >= (unint64_t)v13)
                    v21 = (size_t)v13;
                  else
                    v21 = v19;
                  v22 = memcmp(v14, v20, v21);
                  v23 = (unint64_t)v13 < v19;
                  if (v22)
                    v23 = v22 < 0;
                  if (!v23)
                    break;
                  v10 = *v11;
                  v12 = v11;
                  if (!*v11)
                    goto LABEL_41;
                }
                v24 = memcmp(v20, v14, v21);
                v25 = v19 < (unint64_t)v13;
                if (v24)
                  v25 = v24 < 0;
                if (!v25)
                  break;
                v10 = v11[1];
                if (!v10)
                {
                  v12 = v11 + 1;
                  goto LABEL_41;
                }
              }
              v26 = v11;
              v2 = (uint64_t)a1;
            }
            else
            {
LABEL_41:
              v26 = operator new(0x50uLL);
              v27 = v26 + 4;
              if (SHIBYTE(v97) < 0)
              {
                sub_19C07C6E8(v27, __p[0], (unint64_t)__p[1]);
              }
              else
              {
                *(_OWORD *)v27 = *(_OWORD *)__p;
                v26[6] = v97;
              }
              v2 = (uint64_t)a1;
              v26[7] = 0;
              v26[8] = 0;
              v26[9] = 0;
              *v26 = 0;
              v26[1] = 0;
              v26[2] = v11;
              *v12 = v26;
              v28 = (uint64_t *)**a1;
              v29 = v26;
              if (v28)
              {
                *a1 = v28;
                v29 = *v12;
              }
              v30 = *v90;
              v31 = v29 == *v90;
              *((_BYTE *)v29 + 24) = v31;
              if (!v31)
              {
                do
                {
                  v32 = v29[2];
                  if (*(_BYTE *)(v32 + 24))
                    break;
                  v33 = *(uint64_t **)(v32 + 16);
                  v34 = *v33;
                  if (*v33 == v32)
                  {
                    v37 = v33[1];
                    if (!v37 || (v38 = *(unsigned __int8 *)(v37 + 24), v35 = (_BYTE *)(v37 + 24), v38))
                    {
                      if (*(uint64_t **)v32 == v29)
                      {
                        *(_BYTE *)(v32 + 24) = 1;
                        *((_BYTE *)v33 + 24) = 0;
                        v41 = *(_QWORD *)(v32 + 8);
                        *v33 = v41;
                        if (v41)
                          goto LABEL_61;
                      }
                      else
                      {
                        v39 = *(uint64_t **)(v32 + 8);
                        v40 = *v39;
                        *(_QWORD *)(v32 + 8) = *v39;
                        if (v40)
                        {
                          *(_QWORD *)(v40 + 16) = v32;
                          v33 = *(uint64_t **)(v32 + 16);
                        }
                        v39[2] = (uint64_t)v33;
                        *(_QWORD *)(*(_QWORD *)(v32 + 16) + 8 * (**(_QWORD **)(v32 + 16) != v32)) = v39;
                        *v39 = v32;
                        *(_QWORD *)(v32 + 16) = v39;
                        v33 = (uint64_t *)v39[2];
                        v32 = *v33;
                        *((_BYTE *)v39 + 24) = 1;
                        *((_BYTE *)v33 + 24) = 0;
                        v41 = *(_QWORD *)(v32 + 8);
                        *v33 = v41;
                        if (v41)
LABEL_61:
                          *(_QWORD *)(v41 + 16) = v33;
                      }
                      *(_QWORD *)(v32 + 16) = v33[2];
                      *(_QWORD *)(v33[2] + 8 * (*(_QWORD *)v33[2] != (_QWORD)v33)) = v32;
                      *(_QWORD *)(v32 + 8) = v33;
LABEL_13:
                      v33[2] = v32;
                      break;
                    }
                  }
                  else if (!v34 || (v36 = *(unsigned __int8 *)(v34 + 24), v35 = (_BYTE *)(v34 + 24), v36))
                  {
                    if (*(uint64_t **)v32 == v29)
                    {
                      v43 = v29[1];
                      *(_QWORD *)v32 = v43;
                      if (v43)
                      {
                        *(_QWORD *)(v43 + 16) = v32;
                        v33 = *(uint64_t **)(v32 + 16);
                      }
                      v29[2] = (uint64_t)v33;
                      *(_QWORD *)(*(_QWORD *)(v32 + 16) + 8 * (**(_QWORD **)(v32 + 16) != v32)) = v29;
                      v29[1] = v32;
                      *(_QWORD *)(v32 + 16) = v29;
                      v33 = (uint64_t *)v29[2];
                      *((_BYTE *)v29 + 24) = 1;
                      *((_BYTE *)v33 + 24) = 0;
                      v32 = v33[1];
                      v42 = *(uint64_t **)v32;
                      v33[1] = *(_QWORD *)v32;
                      if (!v42)
                        goto LABEL_12;
                    }
                    else
                    {
                      *(_BYTE *)(v32 + 24) = 1;
                      *((_BYTE *)v33 + 24) = 0;
                      v32 = v33[1];
                      v42 = *(uint64_t **)v32;
                      v33[1] = *(_QWORD *)v32;
                      if (!v42)
                        goto LABEL_12;
                    }
                    v42[2] = (uint64_t)v33;
LABEL_12:
                    *(_QWORD *)(v32 + 16) = v33[2];
                    *(_QWORD *)(v33[2] + 8 * (*(_QWORD *)v33[2] != (_QWORD)v33)) = v32;
                    *(_QWORD *)v32 = v33;
                    goto LABEL_13;
                  }
                  *(_BYTE *)(v32 + 24) = 1;
                  v29 = v33;
                  *((_BYTE *)v33 + 24) = v33 == v30;
                  *v35 = 1;
                }
                while (v33 != v30);
              }
              a1[2] = (uint64_t *)((char *)a1[2] + 1);
            }
            memcpy((void *)(v26[7] + v9 * v8 + *(_QWORD *)(v2 + 48) * v7 * v8), (char *)v87 + v7 * v8, v8);
            ++v7;
          }
          while (v7 != v85);
        }
        v4 = v82;
        if ((SHIBYTE(v97) & 0x80000000) == 0)
        {
LABEL_75:
          v45 = (_QWORD *)v5[1];
          if (!v45)
            goto LABEL_81;
          goto LABEL_79;
        }
      }
      else
      {
        v44 = sub_19C1A0644();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          sub_19C255470(&v92, v93, v44);
          if ((SHIBYTE(v97) & 0x80000000) == 0)
            goto LABEL_75;
        }
        else if ((SHIBYTE(v97) & 0x80000000) == 0)
        {
          goto LABEL_75;
        }
      }
      operator delete(__p[0]);
      v45 = (_QWORD *)v5[1];
      if (!v45)
      {
        do
        {
LABEL_81:
          v46 = (_QWORD *)v5[2];
          v31 = *v46 == (_QWORD)v5;
          v5 = v46;
        }
        while (!v31);
        goto LABEL_4;
      }
      do
      {
LABEL_79:
        v46 = v45;
        v45 = (_QWORD *)*v45;
      }
      while (v45);
LABEL_4:
      v5 = v46;
    }
    while (v46 != v4);
  }
  ++*(_QWORD *)(v2 + 56);
}

void sub_19C097CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t MRLNeuralNetworkResetIncrementalState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 64) = a2;
  *(_QWORD *)(result + 72) = 0;
  return result;
}

uint64_t MRLEmbeddingMemoryModelCreate(CFTypeRef cf)
{
  const void *Value;
  unint64_t v3;
  const __CFDictionary *v4;
  const void *v5;
  unint64_t v6;
  std::runtime_error *v7;
  uint64_t Instance;
  std::runtime_error *exception;
  CFDictionaryRef theDict;

  if (cf)
    CFRetain(cf);
  sub_19C0987C4(&theDict, cf);
  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("MRLEmbeddingMemoryModelEmbeddingDimensionKey"));
  if (Value)
  {
    v3 = sub_19C09BE78((unint64_t)Value);
    v4 = theDict;
    if (theDict)
      goto LABEL_6;
LABEL_9:
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Could not construct");
    __cxa_throw(v7, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = 0;
  v4 = theDict;
  if (!theDict)
    goto LABEL_9;
LABEL_6:
  v5 = CFDictionaryGetValue(v4, CFSTR("MRLEmbeddingMemoryModelSizeKey"));
  if (v5)
    v6 = sub_19C09BE78((unint64_t)v5);
  else
    v6 = 0;
  if (qword_1EE418FC0 != -1)
    dispatch_once(&qword_1EE418FC0, &unk_1E3D25450);
  Instance = _CFRuntimeCreateInstance();
  sub_19C1844D4(Instance + 16, v3, v6);
  if (theDict)
    CFRelease(theDict);
  return Instance;
}

void sub_19C097E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C094494((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C097E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  sub_19C094494(&a12);
  _Unwind_Resume(a1);
}

void sub_19C097ED8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  CFErrorRef *v15;
  const __CFAllocator *v16;
  void *v18;
  void *v19;
  __CFDictionary *Mutable;
  const char *v21;
  CFStringRef v22;
  __CFDictionary *v23;
  const char *v24;
  CFStringRef v25;

  v18 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v15)
    {
      v19 = v18;
      Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v21 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
      v22 = CFStringCreateWithCString(v16, v21, 0);
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v22);
      *v15 = CFErrorCreate(v16, MRLNeuralNetworkErrorDomain, 0, Mutable);
      CFRelease(v22);
      CFRelease(Mutable);
    }
  }
  else if (v15)
  {
    v23 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    sub_19C091FC4(&__p, "Unknown expection");
    v24 = a14 >= 0 ? (const char *)&__p : (const char *)__p;
    v25 = CFStringCreateWithCString(v16, v24, 0);
    CFDictionaryAddValue(v23, (const void *)*MEMORY[0x1E0C9AFE0], v25);
    *v15 = CFErrorCreate(v16, MRLNeuralNetworkErrorDomain, 0, v23);
    CFRelease(v25);
    CFRelease(v23);
    if (a14 < 0)
      operator delete(__p);
  }
  __cxa_end_catch();
  if (!a15)
    JUMPOUT(0x19C097E18);
  JUMPOUT(0x19C097E14);
}

void sub_19C098040(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __cxa_end_catch();
  JUMPOUT(0x19C097EB8);
}

uint64_t MRLEmbeddingMemoryModelAddEmbedding(uint64_t a1, CFArrayRef theArray, CFIndex a3, const __CFString *a4, uint64_t a5)
{
  const void *ValueAtIndex;
  uint64_t v11;
  void *__p[2];
  char v14;

  if (CFArrayGetCount(theArray) <= a3 || *(_QWORD *)(a1 + 88) != a5)
    return 0xFFFFFFFFLL;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  sub_19C242794(a4, __p);
  v11 = sub_19C184528(a1 + 16, (uint64_t)ValueAtIndex, (const void **)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_19C098158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float *MRLEmbeddingMemoryModelGetOutputDistances(uint64_t a1, CFArrayRef theArray, CFIndex a3, const __CFString *a4, uint64_t a5)
{
  const void *ValueAtIndex;
  float *v11;
  void *__p[2];
  char v14;

  if (CFArrayGetCount(theArray) <= a3 || *(_QWORD *)(a1 + 88) != a5)
    return 0;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  sub_19C242794(a4, __p);
  v11 = sub_19C1846EC(a1 + 16, (uint64_t)ValueAtIndex, (const void **)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_19C098224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C098240(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

void sub_19C098254(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

void sub_19C098268(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

_QWORD *sub_19C09827C(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_19C0982F8(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_19C098328(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  const void **v41;
  const void **v42;
  CFDictionaryRef v43;
  std::runtime_error *exception;
  unint64_t v46;
  char *__p;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;

  v1 = *(_QWORD *)(a1 + 8);
  v50 = 0;
  if (v1)
  {
    if (v1 >> 61)
      sub_19C07DA0C();
    v50 = (char *)operator new(8 * v1);
    v51 = v50;
    v52 = &v50[8 * v1];
    __p = (char *)operator new(8 * v1);
    v48 = __p;
    v49 = &__p[8 * v1];
    v3 = *(uint64_t **)a1;
    v46 = v1;
    v4 = *(_QWORD *)a1 + 16 * v1;
    while (1)
    {
      v6 = *v3;
      v7 = v51;
      if (v51 < v52)
      {
        *(_QWORD *)v51 = v6;
        v8 = (uint64_t)(v51 + 8);
        goto LABEL_19;
      }
      v9 = (v51 - v50) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        sub_19C07DA0C();
      v11 = v52 - v50;
      if ((v52 - v50) >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_19C07C7FC();
        v13 = operator new(8 * v12);
        v14 = &v13[8 * v9];
        *(_QWORD *)v14 = v6;
        v8 = (uint64_t)(v14 + 8);
        if (v51 == v50)
        {
LABEL_17:
          v50 = v14;
          v52 = &v13[8 * v12];
          if (!v51)
            goto LABEL_19;
LABEL_18:
          operator delete(v7);
          goto LABEL_19;
        }
      }
      else
      {
        v13 = 0;
        v14 = (char *)(8 * v9);
        *(_QWORD *)(8 * v9) = v6;
        v8 = 8 * v9 + 8;
        if (v51 == v50)
          goto LABEL_17;
      }
      v23 = v51 - 8 - v50;
      if (v23 < 0x58)
        goto LABEL_65;
      if ((unint64_t)(v50 - v13) < 0x20)
        goto LABEL_65;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v26 = &v51[-v25];
      v14 -= v25;
      v27 = &v13[8 * v9 - 16];
      v28 = v51 - 16;
      v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      v7 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_65:
        do
        {
          v31 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v14 - 1) = v31;
          v14 -= 8;
        }
        while (v7 != v50);
      }
      v7 = v50;
      v50 = v14;
      v52 = &v13[8 * v12];
      if (v7)
        goto LABEL_18;
LABEL_19:
      v51 = (char *)v8;
      v15 = v3[1];
      v16 = v48;
      if (v48 >= v49)
      {
        v17 = (v48 - __p) >> 3;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_19C07DA0C();
        v19 = v49 - __p;
        if ((v49 - __p) >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          if (v20 >> 61)
            sub_19C07C7FC();
          v21 = operator new(8 * v20);
          v22 = &v21[8 * v17];
          *(_QWORD *)v22 = v15;
          v5 = (uint64_t)(v22 + 8);
          if (v48 == __p)
            goto LABEL_29;
LABEL_41:
          v32 = v48 - 8 - __p;
          if (v32 < 0x58)
            goto LABEL_66;
          if ((unint64_t)(__p - v21) < 0x20)
            goto LABEL_66;
          v33 = (v32 >> 3) + 1;
          v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
          v35 = &v48[-v34];
          v22 -= v34;
          v36 = &v21[8 * v17 - 16];
          v37 = v48 - 16;
          v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 32;
            v38 -= 4;
          }
          while (v38);
          v16 = v35;
          if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_66:
            do
            {
              v40 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v22 - 1) = v40;
              v22 -= 8;
            }
            while (v16 != __p);
          }
          v16 = __p;
          __p = v22;
          v49 = &v21[8 * v20];
          if (!v16)
            goto LABEL_5;
        }
        else
        {
          v21 = 0;
          v22 = (char *)(8 * v17);
          *(_QWORD *)(8 * v17) = v15;
          v5 = 8 * v17 + 8;
          if (v48 != __p)
            goto LABEL_41;
LABEL_29:
          __p = v22;
          v49 = &v21[8 * v20];
          if (!v48)
            goto LABEL_5;
        }
        operator delete(v16);
        goto LABEL_5;
      }
      *(_QWORD *)v48 = v15;
      v5 = (uint64_t)(v48 + 8);
LABEL_5:
      v48 = (char *)v5;
      v3 += 2;
      if (v3 == (uint64_t *)v4)
      {
        v41 = (const void **)v50;
        v1 = v46;
        v42 = (const void **)__p;
        goto LABEL_51;
      }
    }
  }
  v42 = 0;
  v41 = 0;
  __p = 0;
LABEL_51:
  v43 = CFDictionaryCreate(0, v41, v42, v1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v43)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (__p)
    operator delete(__p);
  if (v50)
    operator delete(v50);
  return v43;
}

void sub_19C098724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v17;

  __cxa_free_exception(v15);
  if (__p)
  {
    operator delete(__p);
    v17 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v17 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

const void **sub_19C098794(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *sub_19C0987C4(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_19C098840(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C098870(uint64_t a1, CFDictionaryRef theDict)
{
  void **v3;
  unint64_t Count;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const void **v8;
  unint64_t v9;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    v5 = Count;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = (*(_QWORD *)(a1 + 24) - v6) >> 3;
    if (Count <= v7)
    {
      if (Count < v7)
        *(_QWORD *)(a1 + 24) = v6 + 8 * Count;
    }
    else
    {
      sub_19C098930((void **)(a1 + 16), Count - v7);
    }
    v8 = *(const void ***)(a1 + 40);
    v9 = (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v8) >> 3;
    if (v5 <= v9)
    {
      if (v5 < v9)
        *(_QWORD *)(a1 + 48) = &v8[v5];
    }
    else
    {
      sub_19C098930(v3, v5 - v9);
      v8 = (const void **)*v3;
    }
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), v8);
  }
  return a1;
}

void sub_19C098930(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_19C07DA0C();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_19C07C7FC();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

_QWORD *sub_19C098AD0(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_19C098BC4(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (_QWORD *)*v6;
  v8 = v6;
  v9 = operator new(0x38uLL);
  v10 = v9 + 4;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_19C07C6E8(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a4;
    v9[6] = *(_QWORD *)(a4 + 16);
  }
  v11 = v15;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v11;
  *v8 = (uint64_t)v9;
  v12 = (uint64_t *)**a1;
  v13 = v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  sub_19C07CC40(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_19C098BB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C098BC4(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t **v38;
  _QWORD *v39;
  const void *v40;
  const void *v41;
  int v42;
  size_t v43;
  const void *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  int v48;
  _BOOL4 v49;
  uint64_t *v50;
  int v51;
  size_t v52;
  uint64_t *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  _QWORD *v60;
  const void *v61;
  const void *v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  _BOOL4 v68;
  int v69;
  _BOOL4 v70;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_20;
  v10 = *((char *)a2 + 55);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *((unsigned __int8 *)a2 + 55);
  else
    v14 = a2[5];
  if (v10 >= 0)
    v15 = a2 + 4;
  else
    v15 = (const void *)a2[4];
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v18 = v12 < v14;
  if (v17)
    v18 = v17 < 0;
  if (v18)
  {
LABEL_20:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      v20 = (uint64_t *)*a2;
      do
      {
        v21 = v20;
        v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      v26 = a2;
      do
      {
        v21 = (uint64_t *)v26[2];
        v27 = *v21 == (_QWORD)v26;
        v26 = v21;
      }
      while (v27);
    }
    v28 = *((char *)a5 + 23);
    v29 = *((char *)v21 + 55);
    if (v29 >= 0)
      v30 = *((unsigned __int8 *)v21 + 55);
    else
      v30 = v21[5];
    if (v29 >= 0)
      v31 = v21 + 4;
    else
      v31 = (const void *)v21[4];
    if (v28 >= 0)
      v32 = *((unsigned __int8 *)a5 + 23);
    else
      v32 = (size_t)a5[1];
    if (v28 >= 0)
      v33 = a5;
    else
      v33 = *a5;
    if (v32 >= v30)
      v34 = v30;
    else
      v34 = v32;
    v35 = memcmp(v31, v33, v34);
    v36 = v30 < v32;
    if (v35)
      v36 = v35 < 0;
    if (v36)
      goto LABEL_53;
    v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          v38 = (uint64_t **)v37;
          v41 = (const void *)v37[4];
          v39 = v37 + 4;
          v40 = v41;
          v42 = *((char *)v39 + 23);
          if (v42 >= 0)
            v43 = *((unsigned __int8 *)v39 + 23);
          else
            v43 = v39[1];
          if (v42 >= 0)
            v44 = v39;
          else
            v44 = v40;
          if (v43 >= v32)
            v45 = v32;
          else
            v45 = v43;
          v46 = memcmp(v33, v44, v45);
          v47 = v32 < v43;
          if (v46)
            v47 = v46 < 0;
          if (!v47)
            break;
          v37 = *v38;
          v8 = v38;
          if (!*v38)
            goto LABEL_74;
        }
        v48 = memcmp(v44, v33, v45);
        v49 = v43 < v32;
        if (v48)
          v49 = v48 < 0;
        if (!v49)
          break;
        v8 = v38 + 1;
        v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  v22 = memcmp(v15, v13, v16);
  v23 = v14 < v12;
  if (v22)
    v23 = v22 < 0;
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v24 = a2[1];
  if (v24)
  {
    v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      v27 = *a4 == v50;
      v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    v51 = *((char *)a4 + 55);
    if (v51 >= 0)
      v52 = *((unsigned __int8 *)a4 + 55);
    else
      v52 = (size_t)a4[5];
    if (v51 >= 0)
      v53 = (uint64_t *)(a4 + 4);
    else
      v53 = a4[4];
    if (v52 >= v12)
      v54 = v12;
    else
      v54 = v52;
    v55 = memcmp(v13, v53, v54);
    v56 = v12 < v52;
    if (v55)
      v56 = v55 < 0;
    if (!v56)
    {
      v57 = *v8;
      if (*v8)
      {
        v58 = a3;
        do
        {
          while (1)
          {
            v59 = (uint64_t **)v57;
            v62 = (const void *)v57[4];
            v60 = v57 + 4;
            v61 = v62;
            v63 = *((char *)v60 + 23);
            if (v63 >= 0)
              v64 = *((unsigned __int8 *)v60 + 23);
            else
              v64 = v60[1];
            if (v63 >= 0)
              v65 = v60;
            else
              v65 = v61;
            if (v64 >= v12)
              v66 = v12;
            else
              v66 = v64;
            v67 = memcmp(v13, v65, v66);
            v68 = v12 < v64;
            if (v67)
              v68 = v67 < 0;
            if (!v68)
              break;
            v57 = *v59;
            v8 = v59;
            if (!*v59)
              goto LABEL_119;
          }
          v69 = memcmp(v65, v13, v66);
          v70 = v64 < v12;
          if (v69)
            v70 = v69 < 0;
          if (!v70)
            break;
          v8 = v59 + 1;
          v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        v59 = v8;
        v58 = a3;
      }
LABEL_119:
      *v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void sub_19C098FBC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_19C098FBC(a1, *(_QWORD *)a2);
    sub_19C098FBC(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

BOOL sub_19C09901C(uint64_t a1, const void **a2, uint64_t a3)
{
  _BOOL8 result;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  __int128 v15;
  _BYTE v16[24];

  sub_19C187458(a1, a2, (uint64_t)&v15);
  if (*(_QWORD *)(a3 + 8) == 1)
  {
    if (*(_QWORD *)a3 == (_QWORD)v15
      && *(_QWORD *)(a3 + 16) == *(_QWORD *)v16
      && *(_OWORD *)(a3 + 24) == *(_OWORD *)&v16[8])
    {
      ++*((_QWORD *)&v15 + 1);
      v14 = *(_QWORD *)&v16[16];
      v13[0] = v15;
      v13[1] = *(_OWORD *)v16;
      sub_19C187658(a1, (__int128 *)a2, (uint64_t)v13);
      return 1;
    }
    else
    {
      v10 = sub_19C1A0644();
      result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_19C2554A4(v10, v11, v12);
        return 0;
      }
    }
  }
  else
  {
    v7 = sub_19C1A0644();
    result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_19C2554DC(v7, v8, v9);
      return 0;
    }
  }
  return result;
}

uint64_t **sub_19C099140(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x50uLL);
    v24 = v23 + 4;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_19C07C6E8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    v23[9] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_19C07CC40(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19C0992CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_19C0992E0@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

unint64_t sub_19C0992F0@<X0>(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *CStringPtr;
  const char *v5;
  unint64_t result;
  size_t v7;
  CFIndex Length;
  CFIndex v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  CFIndex v14;
  CFIndex v15;
  UInt8 *v16;
  CFIndex maxBufLen;
  CFRange v18;
  CFRange v19;

  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    v5 = CStringPtr;
    result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      v7 = result;
      if (result >= 0x17)
      {
        v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17)
          v11 = result | 7;
        v12 = v11 + 1;
        v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((_BYTE *)a2 + 23) = result;
        if (!result)
          goto LABEL_14;
      }
      result = (unint64_t)memmove(a2, v5, v7);
LABEL_14:
      *((_BYTE *)a2 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_19C07C774();
  }
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(a1, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_23;
  if ((unint64_t)maxBufLen >= 0x17)
  {
    v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17)
      v14 = maxBufLen | 7;
    v15 = v14 + 1;
    v10 = operator new(v14 + 1);
    a2[1] = v9;
    a2[2] = v15 | 0x8000000000000000;
    *a2 = v10;
  }
  else
  {
    *((_BYTE *)a2 + 23) = maxBufLen;
    v10 = a2;
    if (!v9)
      goto LABEL_19;
  }
  bzero(v10, v9);
LABEL_19:
  *((_BYTE *)v10 + v9) = 0;
  if (*((char *)a2 + 23) >= 0)
    v16 = (UInt8 *)a2;
  else
    v16 = (UInt8 *)*a2;
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(a1, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

void sub_19C0994B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_19C0994CC(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  int *v27;
  _DWORD *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  char *v53;
  size_t v54;
  int v55;
  char *v56;
  unint64_t v58;
  uint64_t v59;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  if (a5 < 1)
    return v8;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 2)
  {
    v14 = a5 + ((uint64_t)(v13 - v6) >> 2);
    if (v14 >> 62)
      sub_19C07DA0C();
    v15 = v12 - v6;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        sub_19C07C7FC();
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      v18 = (char *)operator new(4 * v16);
    }
    else
    {
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      v18 = 0;
    }
    v40 = 4 * a5;
    v59 = 4 * a5;
    v41 = &v18[4 * (v7 >> 2)];
    v42 = v18;
    memcpy(v41, __src, v40);
    v43 = v41;
    if ((void *)v6 != a2)
    {
      v44 = v17;
      v43 = v41;
      if ((unint64_t)(v7 - 4) < 0x3C)
        goto LABEL_51;
      v44 = v17;
      v43 = v41;
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v42[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
        goto LABEL_51;
      v45 = ((unint64_t)(v7 - 4) >> 2) + 1;
      v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
      v44 = &v17[-v46];
      v43 = &v41[-v46];
      v47 = 4 * (v7 >> 2) - 16;
      v48 = &v42[v47];
      v49 = (__int128 *)(v6 + v47);
      v50 = v45 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)v48 = v51;
        v48 -= 32;
        v49 -= 2;
        v50 -= 8;
      }
      while (v50);
      if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_51:
        do
        {
          v52 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v43 - 1) = v52;
          v43 -= 4;
        }
        while (v44 != (char *)v6);
      }
    }
    v53 = &v42[4 * v16];
    v54 = v13 - (_QWORD)v17;
    if (v54)
      memmove(&v41[v59], v17, v54);
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v41[v59 + v54];
    a1[2] = (unint64_t)v53;
    if (v6)
      operator delete((void *)v6);
    return v41;
  }
  v19 = v13 - (_QWORD)v8;
  v20 = (uint64_t)(v13 - (_QWORD)v8) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = a1[1];
  }
  else
  {
    v21 = &__src[4 * v20];
    v22 = a4 - v21;
    if (a4 != v21)
    {
      v58 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v20], a4 - v21);
      v8 = (char *)v58;
    }
    v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1)
      return v8;
  }
  v24 = &v8[4 * a5];
  v25 = v23 - (_QWORD)v24;
  v26 = (uint64_t)(v23 - (_QWORD)v24) >> 2;
  v27 = (int *)(v23 - 4 * a5);
  v28 = (_DWORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    v29 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v25;
    v30 = (char *)(v29 + v6);
    v31 = v29 + v6 + 4;
    if (v13 > v31)
      v31 = v13;
    v32 = v31 + ~v6 - v29;
    if (v32 < 0x2C)
    {
      v28 = (_DWORD *)v23;
    }
    else
    {
      v33 = v23 - (_QWORD)v30;
      v28 = (_DWORD *)v23;
      if (v33 >= 0x20)
      {
        v34 = (v32 >> 2) + 1;
        v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
        v27 = (int *)((char *)v27 + v35);
        v28 = (_DWORD *)(v23 + v35);
        v36 = (_OWORD *)(v23 + 16);
        v37 = (__int128 *)(4 * v26 + 4 * (v7 >> 2) + v6 + 16);
        v38 = v34 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v39 = *v37;
          *(v36 - 1) = *(v37 - 1);
          *v36 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 8;
        }
        while (v38);
        if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_41;
      }
    }
    do
    {
      v55 = *v27++;
      *v28++ = v55;
    }
    while ((unint64_t)v27 < v13);
  }
LABEL_41:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    v56 = v8;
    memmove((void *)(v23 - 4 * v26), v8, v25);
    v8 = v56;
  }
  if (v21 != __src)
  {
    v41 = v8;
    memmove(v8, __src, v21 - __src);
    return v41;
  }
  return v8;
}

uint64_t sub_19C0997F8()
{
  uint64_t result;

  qword_1EE418A38 = 0;
  unk_1EE418A40 = "MontrealNeuralNetwork";
  qword_1EE418A48 = 0;
  unk_1EE418A50 = 0;
  qword_1EE418A58 = (uint64_t)sub_19C099848;
  unk_1EE418A60 = 0u;
  unk_1EE418A70 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE418A98 = result;
  return result;
}

uint64_t sub_19C099848(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
}

char *sub_19C099854(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

char *sub_19C0999BC(void **a1, const char **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C07DA0C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_19C07C7FC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v22 = v8;
  v23 = v8;
  v24 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)v8 = v18;
    v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *v8 = 0;
      v12 = v8;
      v13 = v8 + 24;
      v14 = (char *)*a1;
      v15 = (char *)a1[1];
      if (v15 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  v12 = v22;
  v13 = v23 + 24;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
LABEL_23:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v19 = *(_OWORD *)(v15 - 24);
    *((_QWORD *)v12 - 1) = *((_QWORD *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *((_QWORD *)v15 - 2) = 0;
    *((_QWORD *)v15 - 1) = 0;
    *((_QWORD *)v15 - 3) = 0;
    v15 -= 24;
  }
  while (v15 != v14);
  v20 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  if (v15 != v20)
  {
    do
    {
      if (*(v15 - 1) < 0)
        operator delete(*((void **)v15 - 3));
      v15 -= 24;
    }
    while (v15 != v20);
    v15 = v20;
  }
LABEL_28:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_19C099BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C07DBF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C099BEC()
{
  uint64_t result;

  qword_1EE4189C8 = 0;
  unk_1EE4189D0 = "MontrealNeuralNetworkTensor";
  qword_1EE4189D8 = 0;
  unk_1EE4189E0 = 0;
  qword_1EE4189E8 = (uint64_t)sub_19C099C3C;
  unk_1EE4189F0 = 0u;
  unk_1EE418A00 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE418A28 = result;
  return result;
}

void sub_19C099C3C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

_QWORD *sub_19C099C54(_QWORD *a1, CFTypeRef *a2, int *a3)
{
  CFTypeRef v5;
  CFNumberRef v6;
  std::runtime_error *exception;
  int valuePtr;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  valuePtr = *a3;
  v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_19C099CF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  sub_19C098794((const void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C099D30(_QWORD *a1, CFTypeRef *a2, uint64_t *a3)
{
  CFTypeRef v5;
  CFNumberRef v6;
  std::runtime_error *exception;
  uint64_t valuePtr;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  valuePtr = *a3;
  v6 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_19C099DCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  sub_19C098794((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C099E0C(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  const __CFNumber *v15;
  CFNumberType v16;
  int Value;
  int8x8_t v18;
  float v19;
  int16x4_t v20;
  uint64_t v21;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberSInt64Type;
      goto LABEL_22;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloat32Type;
      goto LABEL_18;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberFloat64Type;
      goto LABEL_24;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v18.i8[0] = LOBYTE(valuePtr);
      v19 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).i32[0];
      goto LABEL_25;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_12:
      Value = CFNumberGetValue(v7, v8, &valuePtr);
      v20.i16[0] = LOWORD(valuePtr);
      v19 = (float)vmovl_s16(v20).i32[0];
      goto LABEL_25;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
LABEL_14:
      Value = CFNumberGetValue(v9, v10, &valuePtr);
      v19 = (float)SLODWORD(valuePtr);
      goto LABEL_25;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongType;
      goto LABEL_22;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongLongType;
      goto LABEL_22;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloatType;
LABEL_18:
      Value = CFNumberGetValue(v13, v14, &valuePtr);
      v21 = LODWORD(valuePtr);
      goto LABEL_26;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberDoubleType;
      goto LABEL_24;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberCFIndexType;
      goto LABEL_22;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberNSIntegerType;
LABEL_22:
      Value = CFNumberGetValue(v11, v12, &valuePtr);
      v19 = (float)*(uint64_t *)&valuePtr;
      goto LABEL_25;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberCGFloatType;
LABEL_24:
      Value = CFNumberGetValue(v15, v16, &valuePtr);
      v19 = valuePtr;
LABEL_25:
      v21 = LODWORD(v19);
LABEL_26:
      v6 = v21 | 0x100000000;
      if (!Value)
        v6 = 0;
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

CFDictionaryRef sub_19C09A01C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  CFStringRef *v5;
  const UInt8 *v6;
  uint64_t **v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  CFDictionaryRef v11;
  CFStringRef *v12;
  CFStringRef *v13;
  void *v14;
  const void *v15;
  const void *v16;
  void *__p;
  CFStringRef *v19;
  unint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_19C09A184((uint64_t)&__p, a1[2]);
  v4 = (_QWORD *)*a1;
  v2 = a1 + 1;
  v3 = v4;
  if (v4 != v2)
  {
    v5 = v19;
    do
    {
      v6 = (const UInt8 *)(v3 + 4);
      v7 = (uint64_t **)(v3 + 7);
      if ((unint64_t)v5 >= v20)
      {
        v5 = sub_19C09A8CC((CFStringRef **)&__p, v6, v7);
        v19 = v5;
        v8 = (_QWORD *)v3[1];
        if (v8)
        {
          do
          {
LABEL_8:
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      else
      {
        sub_19C09AAE0(v5, v6, v7);
        v5 += 2;
        v19 = v5;
        v8 = (_QWORD *)v3[1];
        if (v8)
          goto LABEL_8;
      }
      do
      {
        v9 = (_QWORD *)v3[2];
        v10 = *v9 == (_QWORD)v3;
        v3 = v9;
      }
      while (!v10);
LABEL_3:
      v3 = v9;
    }
    while (v9 != v2);
  }
  v11 = sub_19C09A310((char **)&__p);
  v12 = (CFStringRef *)__p;
  if (__p)
  {
    v13 = v19;
    v14 = __p;
    if (v19 != __p)
    {
      do
      {
        v15 = *(v13 - 1);
        if (v15)
          CFRelease(v15);
        v16 = *(v13 - 2);
        if (v16)
          CFRelease(v16);
        v13 -= 2;
      }
      while (v13 != v12);
      v14 = __p;
    }
    v19 = v12;
    operator delete(v14);
  }
  return v11;
}

void sub_19C09A14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09A7D8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C09A16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09A7D8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C09A184(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const double *v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const void *v21;
  const void *v22;
  float64x2x2_t v23;

  v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
    return;
  if (a2 >> 60)
    sub_19C07DA0C();
  v4 = *(char **)(a1 + 8);
  v5 = 16 * a2;
  v6 = (char *)operator new(16 * a2);
  v7 = &v6[v5];
  v8 = v4 - v2;
  v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  if (v4 != v2)
  {
    v10 = v8 - 16;
    if ((unint64_t)(v8 - 16) >= 0x90)
    {
      v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF0) - (v10 & 0xFFFFFFFFFFFFFFF0) - 16] >= v4
         || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF0) - 16] >= v9;
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
      if (v12)
      {
        v13 = (v10 >> 4) + 1;
        v14 = 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
        v11 = (char *)(v9 - v14);
        v15 = &v4[-v14];
        v16 = (const double *)(v4 - 32);
        v17 = (double *)(v9 - 32);
        v18 = v13 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v23 = vld2q_f64(v16);
          vst2q_f64(v17, v23);
          *(_OWORD *)v16 = 0uLL;
          *((_OWORD *)v16 + 1) = 0uLL;
          v16 -= 4;
          v17 -= 4;
          v18 -= 2;
        }
        while (v18);
        v4 = v15;
        if (v13 == (v13 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_17:
          v20 = *(char **)a1;
          v2 = *(char **)(a1 + 8);
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v7;
          if (v2 == v20)
          {
            if (v2)
              goto LABEL_19;
          }
          else
          {
            do
            {
              v21 = (const void *)*((_QWORD *)v2 - 1);
              if (v21)
                CFRelease(v21);
              v22 = (const void *)*((_QWORD *)v2 - 2);
              if (v22)
                CFRelease(v22);
              v2 -= 16;
            }
            while (v2 != v20);
            v2 = v20;
            if (v20)
              goto LABEL_19;
          }
          return;
        }
      }
    }
    else
    {
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
    }
    do
    {
      v19 = *((_QWORD *)v4 - 2);
      v4 -= 16;
      *((_QWORD *)v11 - 2) = v19;
      v11 -= 16;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
    }
    while (v4 != v2);
    goto LABEL_17;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  if (v2)
LABEL_19:
    operator delete(v2);
}

CFDictionaryRef sub_19C09A310(char **a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  CFIndex v4;
  size_t v5;
  const void **v6;
  const void **v7;
  uint64_t v8;
  const void *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  const void **v17;
  const void *v18;
  const void **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  const void **v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void **v29;
  _OWORD *v30;
  const void **v31;
  uint64_t v32;
  __int128 v33;
  const void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void **v38;
  _OWORD *v39;
  const void **v40;
  uint64_t v41;
  __int128 v42;
  const void *v43;
  CFDictionaryRef v44;
  std::runtime_error *exception;
  std::runtime_error *v47;
  uint64_t v48;
  const void **__p;
  const void **v50;
  const void **v51;
  const void **v52;
  const void **v53;
  const void **v54;

  v2 = *a1;
  v1 = a1[1];
  v52 = 0;
  v3 = v1 - *a1;
  v4 = v3 >> 4;
  if (v1 == *a1)
  {
    v6 = 0;
    v7 = 0;
    __p = 0;
    goto LABEL_55;
  }
  if (v3 < 0)
    sub_19C07DA0C();
  v5 = (unint64_t)v3 >> 1;
  v6 = (const void **)operator new((unint64_t)v3 >> 1);
  v52 = v6;
  v53 = v6;
  v54 = &v6[v4];
  v7 = (const void **)operator new(v5);
  __p = v7;
  v50 = v7;
  v51 = &v7[v4];
  if (v1 != v2)
  {
    v48 = (v1 - v2) >> 4;
    while (1)
    {
      v9 = *(const void **)v2;
      if (!*(_QWORD *)v2 || !*((_QWORD *)v2 + 1))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v10 = v53;
      if (v53 < v54)
      {
        *v53 = v9;
        v11 = (uint64_t)(v53 + 1);
        goto LABEL_24;
      }
      v12 = v53 - v52;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_19C07DA0C();
      v14 = (char *)v54 - (char *)v52;
      if (((char *)v54 - (char *)v52) >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          sub_19C07C7FC();
        v16 = operator new(8 * v15);
        v17 = (const void **)&v16[8 * v12];
        *v17 = v9;
        v11 = (uint64_t)(v17 + 1);
        if (v53 == v52)
        {
LABEL_22:
          v52 = v17;
          v54 = (const void **)&v16[8 * v15];
          if (!v53)
            goto LABEL_24;
LABEL_23:
          operator delete(v10);
          goto LABEL_24;
        }
      }
      else
      {
        v16 = 0;
        v17 = (const void **)(8 * v12);
        *(_QWORD *)(8 * v12) = v9;
        v11 = 8 * v12 + 8;
        if (v53 == v52)
          goto LABEL_22;
      }
      v26 = (char *)(v53 - 1) - (char *)v52;
      if (v26 < 0x58)
        goto LABEL_70;
      if ((unint64_t)((char *)v52 - v16) < 0x20)
        goto LABEL_70;
      v27 = (v26 >> 3) + 1;
      v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = &v53[v28 / 0xFFFFFFFFFFFFFFF8];
      v17 = (const void **)((char *)v17 - v28);
      v30 = &v16[8 * v12 - 16];
      v31 = v53 - 2;
      v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *v30 = v33;
        v30 -= 2;
        v31 -= 4;
        v32 -= 4;
      }
      while (v32);
      v10 = v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_70:
        do
        {
          v34 = *--v10;
          *--v17 = v34;
        }
        while (v10 != v52);
      }
      v10 = v52;
      v52 = v17;
      v54 = (const void **)&v16[8 * v15];
      if (v10)
        goto LABEL_23;
LABEL_24:
      v53 = (const void **)v11;
      v18 = (const void *)*((_QWORD *)v2 + 1);
      v19 = v50;
      if (v50 >= v51)
      {
        v20 = v50 - __p;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          sub_19C07DA0C();
        v22 = (char *)v51 - (char *)__p;
        if (((char *)v51 - (char *)__p) >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 >> 61)
            sub_19C07C7FC();
          v24 = operator new(8 * v23);
          v25 = (const void **)&v24[8 * v20];
          *v25 = v18;
          v8 = (uint64_t)(v25 + 1);
          if (v50 == __p)
            goto LABEL_34;
LABEL_46:
          v35 = (char *)(v50 - 1) - (char *)__p;
          if (v35 < 0x58)
            goto LABEL_71;
          if ((unint64_t)((char *)__p - v24) < 0x20)
            goto LABEL_71;
          v36 = (v35 >> 3) + 1;
          v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          v38 = &v50[v37 / 0xFFFFFFFFFFFFFFF8];
          v25 = (const void **)((char *)v25 - v37);
          v39 = &v24[8 * v20 - 16];
          v40 = v50 - 2;
          v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *v39 = v42;
            v39 -= 2;
            v40 -= 4;
            v41 -= 4;
          }
          while (v41);
          v19 = v38;
          if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_71:
            do
            {
              v43 = *--v19;
              *--v25 = v43;
            }
            while (v19 != __p);
          }
          v19 = __p;
          __p = v25;
          v51 = (const void **)&v24[8 * v23];
          if (!v19)
            goto LABEL_8;
        }
        else
        {
          v24 = 0;
          v25 = (const void **)(8 * v20);
          *(_QWORD *)(8 * v20) = v18;
          v8 = 8 * v20 + 8;
          if (v50 != __p)
            goto LABEL_46;
LABEL_34:
          __p = v25;
          v51 = (const void **)&v24[8 * v23];
          if (!v50)
            goto LABEL_8;
        }
        operator delete(v19);
        goto LABEL_8;
      }
      *v50 = v18;
      v8 = (uint64_t)(v50 + 1);
LABEL_8:
      v50 = (const void **)v8;
      v2 += 16;
      if (v2 == v1)
      {
        v6 = v52;
        v4 = v48;
        v7 = __p;
        break;
      }
    }
  }
LABEL_55:
  v44 = CFDictionaryCreate(0, v6, v7, v4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v44)
  {
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (__p)
    operator delete(__p);
  if (v52)
    operator delete(v52);
  return v44;
}

void sub_19C09A760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v17;

  __cxa_free_exception(v15);
  if (__p)
  {
    operator delete(__p);
    v17 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v17 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void **sub_19C09A7D8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (const void *)*((_QWORD *)v3 - 1);
        if (v5)
          CFRelease(v5);
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
          CFRelease(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19C09A858(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  CFTypeRef *v4;
  const void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (CFTypeRef *)(i - 16);
    *(_QWORD *)(a1 + 16) = i - 16;
    v5 = *(const void **)(i - 8);
    if (v5)
      CFRelease(v5);
    if (*v4)
      CFRelease(*v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

CFStringRef *sub_19C09A8CC(CFStringRef **a1, const UInt8 *a2, uint64_t **a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  CFStringRef *v11;
  CFStringRef *v12;
  CFStringRef *v13;
  CFStringRef *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFStringRef *v19;
  CFStringRef *v20;
  const double *v21;
  double *v22;
  uint64_t v23;
  const __CFString *v24;
  CFStringRef *v25;
  const void *v26;
  const void *v27;
  CFStringRef *v29;
  CFStringRef *v30;
  float64x2x2_t v31;

  v4 = ((char *)a1[1] - (char *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_19C07DA0C();
  v8 = (char *)a1[2] - (char *)*a1;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_19C07C7FC();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v29 = (CFStringRef *)&v10[16 * v4];
  v30 = (CFStringRef *)&v10[16 * v9];
  sub_19C09AAE0(v29, a2, a3);
  v11 = v29;
  v12 = v29 + 2;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v29;
    a1[1] = v12;
    a1[2] = v30;
  }
  else
  {
    v15 = (char *)v14 - (char *)*a1 - 16;
    if (v15 < 0x70)
      goto LABEL_18;
    v16 = ((char *)v13 - (char *)v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    if ((CFStringRef *)((char *)v29 + v16) < v14 && (CFStringRef *)((char *)v14 + v16) < v29)
      goto LABEL_18;
    v17 = (v15 >> 4) + 1;
    v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFELL);
    v19 = &v29[v18 / 0xFFFFFFFFFFFFFFF8];
    v20 = &v14[v18 / 0xFFFFFFFFFFFFFFF8];
    v21 = (const double *)(v14 - 4);
    v22 = (double *)(v29 - 4);
    v23 = v17 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v31 = vld2q_f64(v21);
      vst2q_f64(v22, v31);
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v21 + 1) = 0uLL;
      v21 -= 4;
      v22 -= 4;
      v23 -= 2;
    }
    while (v23);
    v11 = v19;
    v14 = v20;
    if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v19 = v11;
      do
      {
        v24 = *(v14 - 2);
        v14 -= 2;
        *(v19 - 2) = v24;
        v19 -= 2;
        *v14 = 0;
        v19[1] = v14[1];
        v14[1] = 0;
      }
      while (v14 != v13);
    }
    v25 = *a1;
    v14 = a1[1];
    *a1 = v19;
    a1[1] = v12;
    a1[2] = v30;
    if (v14 != v25)
    {
      do
      {
        v26 = *(v14 - 1);
        if (v26)
          CFRelease(v26);
        v27 = *(v14 - 2);
        if (v27)
          CFRelease(v27);
        v14 -= 2;
      }
      while (v14 != v25);
      v14 = v25;
    }
  }
  if (v14)
    operator delete(v14);
  return v29 + 2;
}

void sub_19C09AAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09A858((uint64_t)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_19C09AAE0(CFStringRef *a1, const UInt8 *a2, uint64_t **a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  std::runtime_error *exception;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  a1[1] = (CFStringRef)sub_19C09ABC0(a3);
  return a1;
}

void sub_19C09AB80(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void sub_19C09ABAC(_Unwind_Exception *a1)
{
  const void **v1;

  sub_19C098794(v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_19C09ABC0(uint64_t **a1)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  CFNumberRef *v5;
  CFArrayRef v6;
  CFNumberRef *v7;
  CFNumberRef *v8;
  void *v9;
  const void *v10;
  const void *v11;
  uint64_t v13;
  void *__p;
  CFNumberRef *v15;
  unint64_t v16;

  v2 = a1[1] - *a1;
  __p = 0;
  v15 = 0;
  v16 = 0;
  sub_19C09ACF8((uint64_t)&__p, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = v15;
    do
    {
      v13 = *v3;
      if ((unint64_t)v5 >= v16)
        v5 = sub_19C09B0C0((CFNumberRef **)&__p, &v13);
      else
        sub_19C09B2B0((uint64_t)&v16, v5++, &v13);
      v15 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v6 = sub_19C09AE70((char **)&__p);
  v7 = (CFNumberRef *)__p;
  if (__p)
  {
    v8 = v15;
    v9 = __p;
    if (v15 != __p)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        if (v11)
          CFRelease(v10);
      }
      while (v8 != v7);
      v9 = __p;
    }
    v15 = v7;
    operator delete(v9);
  }
  return v6;
}

void sub_19C09ACC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B000((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C09ACE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B000((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C09ACF8(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  const void *v23;
  const void *v24;

  v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
    return;
  if (a2 >> 61)
    sub_19C07DA0C();
  v4 = *(char **)(a1 + 8);
  v5 = 8 * a2;
  v6 = (char *)operator new(8 * a2);
  v7 = &v6[v5];
  v8 = v4 - v2;
  v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 != v2)
  {
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) >= 0x78)
    {
      v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
         || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9;
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        v13 = v8 >> 3;
        v14 = (v10 >> 3) + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v11 = (char *)(v9 - v15);
        v16 = &v4[-v15];
        v17 = v4 - 16;
        v18 = &v6[8 * v13 - 16];
        v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v20 = *(_OWORD *)v17;
          *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
          *(_OWORD *)v18 = v20;
          *((_OWORD *)v17 - 1) = 0uLL;
          *(_OWORD *)v17 = 0uLL;
          v17 -= 32;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        v4 = v16;
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          v22 = *(char **)a1;
          v2 = *(char **)(a1 + 8);
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v7;
          if (v2 == v22)
          {
            if (v2)
              goto LABEL_19;
          }
          else
          {
            do
            {
              v24 = (const void *)*((_QWORD *)v2 - 1);
              v2 -= 8;
              v23 = v24;
              if (v24)
                CFRelease(v23);
            }
            while (v2 != v22);
            v2 = v22;
            if (v22)
              goto LABEL_19;
          }
          return;
        }
      }
    }
    else
    {
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v21 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v11 - 1) = v21;
      v11 -= 8;
      *(_QWORD *)v4 = 0;
    }
    while (v4 != v2);
    goto LABEL_17;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  if (v2)
LABEL_19:
    operator delete(v2);
}

CFArrayRef sub_19C09AE70(char **a1)
{
  char *v1;
  char *v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  CFArrayRef v15;
  std::runtime_error *exception;

  v2 = *a1;
  v1 = a1[1];
  v3 = v1 - *a1;
  if (v1 == *a1)
  {
    v4 = 0;
    v5 = 0;
    goto LABEL_12;
  }
  if ((v3 & 0x8000000000000000) != 0)
    sub_19C07DA0C();
  v4 = (char *)operator new(v1 - v2);
  bzero(v4, v1 - v2);
  v5 = &v4[v3];
  if (v3 - 8 < 0x18)
  {
    v6 = v4;
    do
    {
LABEL_11:
      v14 = *(_QWORD *)v2;
      v2 += 8;
      *(_QWORD *)v6 = v14;
      v6 += 8;
    }
    while (v2 != v1);
    goto LABEL_12;
  }
  v6 = v4;
  if ((unint64_t)(v4 - v2) < 0x20)
    goto LABEL_11;
  v7 = 0;
  v8 = ((v3 - 8) >> 3) + 1;
  v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL);
  v6 = &v4[v9];
  v10 = &v2[v9];
  v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v12 = &v4[v7];
    v13 = *(_OWORD *)&v2[v7 + 16];
    *(_OWORD *)v12 = *(_OWORD *)&v2[v7];
    *((_OWORD *)v12 + 1) = v13;
    v7 += 32;
    v11 -= 4;
  }
  while (v11);
  v2 = v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_11;
LABEL_12:
  v15 = CFArrayCreate(0, (const void **)v4, (v5 - v4) >> 3, MEMORY[0x1E0C9B378]);
  if (!v15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v4)
    operator delete(v4);
  return v15;
}

void sub_19C09AFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v12;

  __cxa_free_exception(v12);
  if (v11)
    operator delete(v11);
  _Unwind_Resume(a1);
}

void **sub_19C09B000(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19C09B06C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(const void **)(v2 - 8);
    v2 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      CFRelease(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

CFNumberRef *sub_19C09B0C0(CFNumberRef **a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  CFNumberRef *v9;
  CFNumberRef *v10;
  CFNumberRef *v11;
  CFNumberRef *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFNumberRef *v17;
  CFNumberRef *v18;
  CFNumberRef *v19;
  CFNumberRef *v20;
  uint64_t v21;
  __int128 v22;
  const __CFNumber *v23;
  CFNumberRef *v24;
  const void *v25;
  const void *v26;
  CFNumberRef *v28;
  CFNumberRef *v29;

  v3 = a1[1] - *a1;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61)
    sub_19C07DA0C();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v4)
    v4 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 61)
      sub_19C07C7FC();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v28 = (CFNumberRef *)&v8[8 * v3];
  v29 = (CFNumberRef *)&v8[8 * v7];
  sub_19C09B2B0((uint64_t)(a1 + 2), v28, a2);
  v9 = v28;
  v10 = v28 + 1;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v28;
    a1[1] = v10;
    a1[2] = v29;
  }
  else
  {
    v13 = (char *)v12 - (char *)*a1 - 8;
    if (v13 < 0x58)
      goto LABEL_18;
    v14 = ((char *)v11 - (char *)v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((CFNumberRef *)((char *)v28 + v14) < v12 && (CFNumberRef *)((char *)v12 + v14) < v28)
      goto LABEL_18;
    v15 = (v13 >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v28[v16 / 0xFFFFFFFFFFFFFFF8];
    v18 = &v12[v16 / 0xFFFFFFFFFFFFFFF8];
    v19 = v12 - 2;
    v20 = v28 - 2;
    v21 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v19;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
      *(_OWORD *)v20 = v22;
      *((_OWORD *)v19 - 1) = 0uLL;
      *(_OWORD *)v19 = 0uLL;
      v19 -= 4;
      v20 -= 4;
      v21 -= 4;
    }
    while (v21);
    v9 = v17;
    v12 = v18;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_18:
      v17 = v9;
      do
      {
        v23 = *--v12;
        *--v17 = v23;
        *v12 = 0;
      }
      while (v12 != v11);
    }
    v24 = *a1;
    v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v29;
    if (v12 != v24)
    {
      do
      {
        v26 = *--v12;
        v25 = v26;
        if (v26)
          CFRelease(v25);
      }
      while (v12 != v24);
      v12 = v24;
    }
  }
  if (v12)
    operator delete(v12);
  return v28 + 1;
}

void sub_19C09B298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C09B06C((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef sub_19C09B2B0(uint64_t a1, CFNumberRef *a2, uint64_t *a3)
{
  CFNumberRef result;
  std::runtime_error *exception;
  uint64_t valuePtr;

  valuePtr = *a3;
  result = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C09B330(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void sub_19C09B35C(uint64_t a1, char *a2)
{
  void *v4;

  if (a2)
  {
    sub_19C09B35C(a1, *(_QWORD *)a2);
    sub_19C09B35C(a1, *((_QWORD *)a2 + 1));
    v4 = (void *)*((_QWORD *)a2 + 7);
    if (v4)
    {
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_19C09B3CC(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = sub_19C098BC4(a1, a2, &v14, &v13, a3);
  if (*v6)
    return (uint64_t *)*v6;
  v8 = v6;
  v9 = (uint64_t *)operator new(0x50uLL);
  sub_19C09B4A4(v9 + 4, a4);
  v10 = v14;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = (uint64_t)v10;
  *v8 = (uint64_t)v9;
  v11 = (uint64_t *)**a1;
  v12 = v9;
  if (v11)
  {
    *a1 = v11;
    v12 = (uint64_t *)*v8;
  }
  sub_19C07CC40(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_19C09B490(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C09B4A4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C07C6E8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return __dst;
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return __dst;
  }
  if (v7 < 0)
    sub_19C07DA0C();
  v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[8 * (v7 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_19C09B570(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19C255514(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C09B594()
{
  uint64_t result;

  qword_1EE4188F8 = 0;
  unk_1EE418900 = "MontrealNeuralNetworkState";
  qword_1EE418908 = 0;
  unk_1EE418910 = 0;
  qword_1EE418918 = (uint64_t)sub_19C0803A4;
  unk_1EE418920 = 0u;
  unk_1EE418930 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE418958 = result;
  return result;
}

uint64_t sub_19C09B5E4(uint64_t result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  CFTypeID v3;

  if (result)
  {
    v1 = (const __CFNumber *)result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      return sub_19C09B67C(v1);
    }
    else
    {
      v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1))
        return CFBooleanGetValue(v1) | 0x100000000;
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_19C09B67C(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  int Value;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  int v19;
  uint64_t v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_17;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_28;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberSInt64Type;
      goto LABEL_28;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloat32Type;
      goto LABEL_24;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberFloat64Type;
      goto LABEL_30;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v16 = Value != 0;
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      v18 = -256;
      if ((v16 & (SLOBYTE(valuePtr) < 0)) == 0)
        v18 = 0;
      v5 = v16 << 32;
      LODWORD(v6) = v18 & 0xFFFFFF00 | v17;
      v4 = v6 & 0xFFFFFF00;
      return v5 | v4 & 0xFFFFFF00 | v6;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_17:
      if (CFNumberGetValue(v7, v8, &valuePtr))
        v6 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
      else
        v6 = 0;
      goto LABEL_33;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
      goto LABEL_28;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongType;
      goto LABEL_28;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongLongType;
      goto LABEL_28;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloatType;
LABEL_24:
      v19 = CFNumberGetValue(v11, v12, &valuePtr);
      v20 = (int)*(float *)&valuePtr;
      goto LABEL_31;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberDoubleType;
      goto LABEL_30;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberCFIndexType;
      goto LABEL_28;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberNSIntegerType;
LABEL_28:
      v19 = CFNumberGetValue(v9, v10, &valuePtr);
      v20 = LODWORD(valuePtr);
      goto LABEL_31;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberCGFloatType;
LABEL_30:
      v19 = CFNumberGetValue(v13, v14, &valuePtr);
      v20 = (int)valuePtr;
LABEL_31:
      v6 = v20 | 0x100000000;
      if (!v19)
        v6 = 0;
LABEL_33:
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

uint64_t sub_19C09B8A8(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  CFTypeID v4;
  __int16 v5;

  if (!a1)
    return 0;
  TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1))
    return (CFBooleanGetValue(a1) != 0) | 0x100u;
  v4 = CFNumberGetTypeID();
  if (v4 != CFGetTypeID(a1))
    return 0;
  v5 = sub_19C09B96C(a1);
  return v5 | (HIBYTE(v5) << 8);
}

uint64_t sub_19C09B96C(const __CFNumber *a1)
{
  int Value;
  BOOL v3;
  _BOOL4 v4;
  uint64_t result;
  int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  int v12;
  int v14;
  int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  int v28;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  int v34;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
      if (Value)
        v3 = LOBYTE(valuePtr) == 0;
      else
        v3 = 1;
      v4 = !v3;
      if (Value)
        goto LABEL_18;
      goto LABEL_26;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
      if (v6)
        v7 = LOWORD(valuePtr) == 0;
      else
        v7 = 1;
      v4 = !v7;
      if (v6)
        goto LABEL_18;
      goto LABEL_26;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v8 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
      if (v8)
        v9 = LODWORD(valuePtr) == 0;
      else
        v9 = 1;
      v4 = !v9;
      if (!v8)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
      if (v10)
        v11 = *(_QWORD *)&valuePtr == 0;
      else
        v11 = 1;
      v4 = !v11;
      if (!v10)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v12 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
      v4 = *(float *)&valuePtr != 0.0 && v12 != 0;
      if (!v12)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v14 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
      v4 = valuePtr != 0.0 && v14 != 0;
      if (!v14)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v16 = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
      if (v16)
        v17 = LOBYTE(valuePtr) == 0;
      else
        v17 = 1;
      v4 = !v17;
      if (!v16)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v18 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
      if (v18)
        v19 = LOWORD(valuePtr) == 0;
      else
        v19 = 1;
      v4 = !v19;
      if (!v18)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v20 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
      if (v20)
        v21 = LODWORD(valuePtr) == 0;
      else
        v21 = 1;
      v4 = !v21;
      if (!v20)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v22 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
      if (v22)
        v23 = *(_QWORD *)&valuePtr == 0;
      else
        v23 = 1;
      v4 = !v23;
      if (!v22)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v24 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
      if (v24)
        v25 = *(_QWORD *)&valuePtr == 0;
      else
        v25 = 1;
      v4 = !v25;
      if (!v24)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v26 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
      v4 = *(float *)&valuePtr != 0.0 && v26 != 0;
      if (!v26)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v28 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
      v4 = valuePtr != 0.0 && v28 != 0;
      if (!v28)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v30 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
      if (v30)
        v31 = *(_QWORD *)&valuePtr == 0;
      else
        v31 = 1;
      v4 = !v31;
      if (!v30)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v32 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
      if (v32)
        v33 = *(_QWORD *)&valuePtr == 0;
      else
        v33 = 1;
      v4 = !v33;
      if (!v32)
        goto LABEL_26;
      goto LABEL_18;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v34 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
      v4 = valuePtr != 0.0 && v34 != 0;
      if (v34)
LABEL_18:
        result = v4 | 0x100u;
      else
LABEL_26:
        result = v4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unint64_t sub_19C09BCAC@<X0>(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *CStringPtr;
  const char *v5;
  unint64_t result;
  size_t v7;
  CFIndex Length;
  CFIndex v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  CFIndex v14;
  CFIndex v15;
  UInt8 *v16;
  CFIndex maxBufLen;
  CFRange v18;
  CFRange v19;

  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  v5 = CStringPtr;
  if (CStringPtr)
  {
    result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      v7 = result;
      if (result >= 0x17)
      {
        v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17)
          v11 = result | 7;
        v12 = v11 + 1;
        v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((_BYTE *)a2 + 23) = result;
        if (!result)
          goto LABEL_14;
      }
      result = (unint64_t)memmove(a2, v5, v7);
LABEL_14:
      *((_BYTE *)a2 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_19C07C774();
  }
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(a1, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_23;
  if ((unint64_t)maxBufLen >= 0x17)
  {
    v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17)
      v14 = maxBufLen | 7;
    v15 = v14 + 1;
    v10 = operator new(v14 + 1);
    a2[1] = v9;
    a2[2] = v15 | 0x8000000000000000;
    *a2 = v10;
  }
  else
  {
    *((_BYTE *)a2 + 23) = maxBufLen;
    v10 = a2;
    if (!v9)
      goto LABEL_19;
  }
  bzero(v10, v9);
LABEL_19:
  *((_BYTE *)v10 + v9) = 0;
  if (*((char *)a2 + 23) >= 0)
    v16 = (UInt8 *)a2;
  else
    v16 = (UInt8 *)*a2;
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(a1, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

unint64_t sub_19C09BE78(unint64_t result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  CFTypeID v3;

  if (result)
  {
    v1 = (const __CFNumber *)result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      return sub_19C09BF18(v1);
    }
    else
    {
      v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1))
        return CFBooleanGetValue(v1);
      else
        return 0;
    }
  }
  return result;
}

unint64_t sub_19C09BF18(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  unint64_t v4;
  unint64_t v5;
  const __CFNumber *v6;
  CFNumberType v7;
  const __CFNumber *v8;
  CFNumberType v9;
  const __CFNumber *v10;
  CFNumberType v11;
  const __CFNumber *v12;
  CFNumberType v13;
  const __CFNumber *v14;
  CFNumberType v15;
  int Value;
  char v17;
  BOOL v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberSInt16Type;
      goto LABEL_18;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberSInt32Type;
      goto LABEL_20;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberSInt64Type;
      goto LABEL_31;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloat32Type;
      goto LABEL_27;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberFloat64Type;
      goto LABEL_33;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      if (Value != 0 && SLOBYTE(valuePtr) < 0)
        v4 = -256;
      else
        v4 = 0;
      LOBYTE(v5) = v17;
      return v5 | v4;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberShortType;
LABEL_18:
      v18 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLOWORD(valuePtr);
      goto LABEL_21;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberIntType;
LABEL_20:
      v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLODWORD(valuePtr);
LABEL_21:
      v21 = v20 & 0xFFFFFFFFFFFFFF00 | v19;
      if (v18)
        v5 = 0;
      else
        v5 = v21;
      goto LABEL_37;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongType;
      goto LABEL_31;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongLongType;
      goto LABEL_31;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloatType;
LABEL_27:
      v22 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      v5 = (unint64_t)*(float *)&valuePtr;
      goto LABEL_34;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberDoubleType;
      goto LABEL_33;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberCFIndexType;
      goto LABEL_31;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberNSIntegerType;
LABEL_31:
      v22 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      v5 = *(_QWORD *)&valuePtr;
      goto LABEL_34;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberCGFloatType;
LABEL_33:
      v22 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      v5 = (unint64_t)valuePtr;
LABEL_34:
      if (v22)
        v5 = 0;
LABEL_37:
      v4 = v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return v5 | v4;
}

uint64_t sub_19C09C15C()
{
  uint64_t result;

  qword_1EE418FC8 = 0;
  unk_1EE418FD0 = "MRLEmbeddingMemoryModel";
  qword_1EE418FD8 = 0;
  unk_1EE418FE0 = 0;
  qword_1EE418FE8 = (uint64_t)sub_19C09C1AC;
  unk_1EE418FF0 = 0u;
  unk_1EE419000 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE419028 = result;
  return result;
}

uint64_t sub_19C09C1AC(uint64_t a1)
{
  return sub_19C1844D8(a1 + 16);
}

void sub_19C09C1B4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

double sub_19C09C1C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  double result;

  v5 = sub_19C2384F8(a1, a2, a3, (int *)a4);
  *v5 = &unk_1E3D23088;
  v5[127] = *(_QWORD *)(a4 + 464);
  v5[128] = *(_QWORD *)(a4 + 456);
  v5[129] = *(_QWORD *)(a4 + 448);
  v5[130] = *(_QWORD *)(a4 + 592);
  v5[131] = *(_QWORD *)(a4 + 584);
  v5[132] = *(_QWORD *)(a4 + 576);
  *((_DWORD *)v5 + 270) = *(_DWORD *)(a4 + 320);
  *((_DWORD *)v5 + 271) = *(_DWORD *)(a4 + 324);
  *((_BYTE *)v5 + 1088) = *(_DWORD *)(a4 + 328) != 0;
  result = 0.0;
  *(_OWORD *)(v5 + 133) = 0u;
  return result;
}

uint64_t sub_19C09C24C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a1);
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a1);
}

void sub_19C09C310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;

  if (*(_BYTE *)(a1 + 1088))
  {
    v6 = a2 * a2;
    *(_QWORD *)(a1 + 1064) = operator new[]();
    v7 = operator new[]();
    *(_QWORD *)(a1 + 1072) = v7;
    v8 = (*(_DWORD *)(a1 + 1084) * a3);
    if ((int)v8 >= 1 && (int)a2 >= 1)
    {
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 1064);
      v12 = 4 * v6;
      v13 = 4 * a2;
      do
      {
        v14 = 0;
        v15 = v7;
        v16 = v11;
        do
        {
          v17 = 0;
          do
          {
            if (v17 <= v14)
              v18 = 1.0;
            else
              v18 = 0.0;
            v19 = -1000000000.0;
            if (v17 <= v14)
              v19 = 0.0;
            *(float *)(v16 + 4 * v17) = v18;
            *(float *)(v15 + 4 * v17++) = v19;
          }
          while (a2 != v17);
          ++v14;
          v16 += v13;
          v15 += v13;
        }
        while (v14 != a2);
        ++v10;
        v11 += v12;
        v7 += v12;
      }
      while (v10 != v8);
    }
  }
  sub_19C18FB08(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, a3, a2);
  v20 = *(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160);
  if ((int)(v20 >> 3) >= 1)
  {
    v21 = 0;
    v22 = (a3 * a2);
    v23 = v20 & 0x7FFFFFFF8;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 160) + v21) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 160) + v21), v22);
      v21 += 8;
    }
    while (v23 != v21);
  }
  sub_19C18FB60(a1, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (*(_BYTE *)(a1 + 1088))
  {
    v24 = *(void **)(a1 + 1064);
    if (v24)
      operator delete[](v24);
    v25 = *(void **)(a1 + 1072);
    if (v25)
      operator delete[](v25);
  }
}

uint64_t *sub_19C09C4F8(uint64_t *result, int a2)
{
  uint64_t *v3;
  int *v4;
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  int *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t **v23;
  char *v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;

  v3 = result;
  v5 = (uint64_t **)(result + 3);
  v4 = (int *)result[3];
  v6 = (uint64_t **)(result + 3);
  v7 = (char *)(result + 3);
  if (v4)
  {
    v8 = (int *)result[3];
    while (1)
    {
      while (1)
      {
        v7 = (char *)v8;
        v9 = v8[8];
        if (v9 < 3)
          break;
        v8 = *(int **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_8;
      }
      if (v9 == 2)
        break;
      v8 = (int *)*((_QWORD *)v7 + 1);
      if (!v8)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v10 = v7;
    v7 = (char *)operator new(0x50uLL);
    *((_DWORD *)v7 + 8) = 2;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_QWORD *)v7 + 9) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v6 = (uint64_t *)v7;
    v11 = *(_QWORD *)v3[2];
    v12 = (uint64_t *)v7;
    if (v11)
    {
      v3[2] = v11;
      v12 = *v6;
    }
    result = sub_19C07CC40((uint64_t *)v3[3], v12);
    v4 = (int *)v3[3];
    ++v3[4];
  }
  v13 = *((_QWORD *)v7 + 7);
  v14 = *((_QWORD *)v7 + 9);
  v15 = (char *)v5;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v15 = (char *)v4;
        v16 = v4[8];
        if (v16 < 2)
          break;
        v4 = *(int **)v15;
        v5 = (uint64_t **)v15;
        if (!*(_QWORD *)v15)
          goto LABEL_18;
      }
      if (v16 == 1)
        break;
      v4 = (int *)*((_QWORD *)v15 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v15 + 8);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v17 = v15;
    v15 = (char *)operator new(0x50uLL);
    *((_DWORD *)v15 + 8) = 1;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *((_QWORD *)v15 + 9) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v17;
    *v5 = (uint64_t *)v15;
    v18 = *(_QWORD *)v3[2];
    v19 = (uint64_t *)v15;
    if (v18)
    {
      v3[2] = v18;
      v19 = *v5;
    }
    result = sub_19C07CC40((uint64_t *)v3[3], v19);
    ++v3[4];
  }
  v20 = *((_QWORD *)v15 + 9);
  if (a2 == 10)
  {
    v13 = *((_QWORD *)v15 + 9);
    v20 = *((int *)v3 + 271);
    v21 = *((_QWORD *)v15 + 8);
    v23 = (uint64_t **)(v3 + 6);
    v22 = (char *)v3[6];
    if (v22)
      goto LABEL_27;
LABEL_25:
    v24 = (char *)v23;
LABEL_31:
    v26 = v24;
    v24 = (char *)operator new(0x50uLL);
    *((_DWORD *)v24 + 8) = a2;
    *(_OWORD *)(v24 + 40) = 0u;
    *(_OWORD *)(v24 + 56) = 0u;
    *((_QWORD *)v24 + 9) = 0;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v26;
    *v23 = (uint64_t *)v24;
    v27 = *(_QWORD *)v3[5];
    v28 = (uint64_t *)v24;
    if (v27)
    {
      v3[5] = v27;
      v28 = *v23;
    }
    result = sub_19C07CC40((uint64_t *)v3[6], v28);
    ++v3[7];
    goto LABEL_34;
  }
  v14 = 1;
  v21 = *((_QWORD *)v15 + 8);
  v23 = (uint64_t **)(v3 + 6);
  v22 = (char *)v3[6];
  if (!v22)
    goto LABEL_25;
  while (1)
  {
LABEL_27:
    while (1)
    {
      v24 = v22;
      v25 = *((_DWORD *)v22 + 8);
      if (v25 <= a2)
        break;
      v22 = *(char **)v24;
      v23 = (uint64_t **)v24;
      if (!*(_QWORD *)v24)
        goto LABEL_31;
    }
    if (v25 >= a2)
      break;
    v22 = (char *)*((_QWORD *)v24 + 1);
    if (!v22)
    {
      v23 = (uint64_t **)(v24 + 8);
      goto LABEL_31;
    }
  }
LABEL_34:
  *((_QWORD *)v24 + 5) = 1;
  *((_QWORD *)v24 + 6) = v14;
  *((_QWORD *)v24 + 7) = v13;
  *((_QWORD *)v24 + 8) = v21;
  *((_QWORD *)v24 + 9) = v20;
  return result;
}

void sub_19C09C768(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_19C18E518(a1);
  operator delete(v1);
}

void sub_19C09C77C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9;
  id v10;
  const char *v11;
  void *v12;
  NSObject *v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  id v19;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = objc_alloc(MEMORY[0x1E0CB3940]);
  v12 = (void *)objc_msgSend_initWithFormat_arguments_(v10, v11, (uint64_t)v9, (uint64_t)&a9);
  sub_19C1A0644();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v14 = objc_retainAutorelease(v12);
    *(_DWORD *)buf = 136315138;
    v21 = objc_msgSend_UTF8String(v14, v15, v16, v17);
    _os_log_error_impl(&dword_19C079000, v13, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }

  objc_msgSend_exceptionWithName_reason_userInfo_(MEMORY[0x1E0C99DA0], v18, *MEMORY[0x1E0C99768], (uint64_t)v12, 0);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  objc_exception_throw(v19);
}

void sub_19C09C858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_19C09C888(uint64_t a1, uint64_t a2, uint64_t a3, int *__src)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  int *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  _OWORD *v29;
  int *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  int v34;
  int *v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  _OWORD *v49;
  int *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  _OWORD *v118;
  __int128 *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  void **v124;
  void **v125;
  char **v126;
  char **v127;
  int *v128;
  void *__p[2];
  uint64_t v130;
  int v131;
  int64x2_t v132;
  uint64_t v133;
  int64x2_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v130 = *(_QWORD *)(a2 + 16);
  }
  sub_19C18E344(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v130) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D23E58;
  v125 = (void **)(a1 + 1072);
  v126 = (char **)(a1 + 1040);
  v124 = (void **)(a1 + 1096);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  v127 = (char **)(a1 + 1016);
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  LODWORD(v7) = __src[32];
  if ((int)v7 <= 1)
    v7 = 1;
  else
    v7 = v7;
  v131 = 1;
  v132 = vdupq_n_s64(1uLL);
  v133 = v7;
  v134 = v132;
  sub_19C07C964(a1 + 16, &v131, (int *)&v135);
  v8 = __src[64];
  v131 = 9;
  v132 = vdupq_n_s64(1uLL);
  v134 = 0uLL;
  v133 = v8;
  sub_19C07C964(a1 + 40, &v131, (int *)&v135);
  LODWORD(v9) = __src[80];
  *(_DWORD *)(a1 + 1064) = v9;
  if ((int)v9 >= 1)
  {
    v10 = 0;
    while (1)
    {
      v12 = *(float *)(*((_QWORD *)__src + 71) + 4 * v10);
      v13 = (int)(*(float *)(*((_QWORD *)__src + 70) + 4 * v10) + 0.5);
      v14 = *(int **)(a1 + 1080);
      v15 = *(_QWORD *)(a1 + 1088);
      if ((unint64_t)v14 < v15)
      {
        *v14 = v13;
        v16 = (uint64_t)(v14 + 1);
        goto LABEL_34;
      }
      v17 = (int *)*v125;
      v18 = (char *)v14 - (_BYTE *)*v125;
      v19 = v18 >> 2;
      v20 = (v18 >> 2) + 1;
      if (v20 >> 62)
        sub_19C07DA0C();
      v21 = v15 - (_QWORD)v17;
      if (v21 >> 1 > v20)
        v20 = v21 >> 1;
      v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v20;
      if (v22)
        break;
      v23 = 0;
      v24 = (int *)(4 * v19);
      *(_DWORD *)(4 * v19) = v13;
      v16 = 4 * v19 + 4;
      if (v14 != v17)
        goto LABEL_26;
LABEL_32:
      *(_QWORD *)(a1 + 1072) = v24;
      *(_QWORD *)(a1 + 1080) = v16;
      *(_QWORD *)(a1 + 1088) = &v23[4 * v22];
      if (v17)
        operator delete(v17);
LABEL_34:
      *(_QWORD *)(a1 + 1080) = v16;
      v34 = (int)(v12 + 0.5);
      v35 = *(int **)(a1 + 1104);
      v36 = *(_QWORD *)(a1 + 1112);
      if ((unint64_t)v35 >= v36)
      {
        v37 = (int *)*v124;
        v38 = (char *)v35 - (_BYTE *)*v124;
        v39 = v38 >> 2;
        v40 = (v38 >> 2) + 1;
        if (v40 >> 62)
          sub_19C07DA0C();
        v41 = v36 - (_QWORD)v37;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >> 62)
            sub_19C07C7FC();
          v43 = operator new(4 * v42);
          v44 = (int *)&v43[4 * v39];
          *v44 = v34;
          v11 = (uint64_t)(v44 + 1);
          if (v35 == v37)
            goto LABEL_52;
LABEL_46:
          v45 = (char *)(v35 - 1) - (char *)v37;
          if (v45 < 0x2C)
            goto LABEL_138;
          if ((unint64_t)((char *)v35 - &v43[v38]) < 0x20)
            goto LABEL_138;
          v46 = (v45 >> 2) + 1;
          v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          v48 = &v35[v47 / 0xFFFFFFFFFFFFFFFCLL];
          v44 = (int *)((char *)v44 - v47);
          v49 = &v43[4 * v39 - 16];
          v50 = v35 - 4;
          v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 8;
            v51 -= 8;
          }
          while (v51);
          v35 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_138:
            do
            {
              v53 = *--v35;
              *--v44 = v53;
            }
            while (v35 != v37);
          }
        }
        else
        {
          v43 = 0;
          v44 = (int *)(4 * v39);
          *(_DWORD *)(4 * v39) = v34;
          v11 = 4 * v39 + 4;
          if (v35 != v37)
            goto LABEL_46;
        }
LABEL_52:
        *(_QWORD *)(a1 + 1096) = v44;
        *(_QWORD *)(a1 + 1104) = v11;
        *(_QWORD *)(a1 + 1112) = &v43[4 * v42];
        if (v37)
          operator delete(v37);
        goto LABEL_12;
      }
      *v35 = v34;
      v11 = (uint64_t)(v35 + 1);
LABEL_12:
      *(_QWORD *)(a1 + 1104) = v11;
      ++v10;
      v9 = *(int *)(a1 + 1064);
      if (v10 >= v9)
        goto LABEL_54;
    }
    if (v22 >> 62)
      sub_19C07C7FC();
    v23 = operator new(4 * v22);
    v24 = (int *)&v23[4 * v19];
    *v24 = v13;
    v16 = (uint64_t)(v24 + 1);
    if (v14 == v17)
      goto LABEL_32;
LABEL_26:
    v25 = (char *)(v14 - 1) - (char *)v17;
    if (v25 < 0x2C)
      goto LABEL_139;
    if ((unint64_t)((char *)v14 - &v23[v18]) < 0x20)
      goto LABEL_139;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v14[v27 / 0xFFFFFFFFFFFFFFFCLL];
    v24 = (int *)((char *)v24 - v27);
    v29 = &v23[4 * v19 - 16];
    v30 = v14 - 4;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 8;
      v31 -= 8;
    }
    while (v31);
    v14 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_139:
      do
      {
        v33 = *--v14;
        *--v24 = v33;
      }
      while (v14 != v17);
    }
    goto LABEL_32;
  }
LABEL_54:
  v54 = *((_QWORD *)__src + 56);
  v55 = *(char **)(a1 + 1024);
  v56 = *(_QWORD *)(a1 + 1032);
  if ((unint64_t)v55 < v56)
  {
    *(_QWORD *)v55 = v54;
    v57 = (uint64_t)(v55 + 8);
    goto LABEL_76;
  }
  v58 = *v127;
  v59 = v55 - *v127;
  v60 = v59 >> 3;
  v61 = (v59 >> 3) + 1;
  if (v61 >> 61)
    sub_19C07DA0C();
  v62 = v56 - (_QWORD)v58;
  if (v62 >> 2 > v61)
    v61 = v62 >> 2;
  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
    v63 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v63 = v61;
  if (!v63)
  {
    v64 = 0;
    v65 = (_QWORD *)(8 * v60);
    v66 = 0;
    *(_QWORD *)(8 * v60) = v54;
    v57 = 8 * v60 + 8;
    v67 = (char *)(v55 - v58);
    if (v55 != v58)
      goto LABEL_65;
LABEL_74:
    *(_QWORD *)(a1 + 1016) = v65;
    *(_QWORD *)(a1 + 1024) = v57;
    *(_QWORD *)(a1 + 1032) = v66;
    if (!v55)
      goto LABEL_76;
    goto LABEL_75;
  }
  if (v63 >> 61)
    sub_19C07C7FC();
  v64 = operator new(8 * v63);
  v65 = &v64[8 * v60];
  v66 = &v64[8 * v63];
  *v65 = v54;
  v57 = (uint64_t)(v65 + 1);
  v67 = (char *)(v55 - v58);
  if (v55 == v58)
    goto LABEL_74;
LABEL_65:
  v68 = (unint64_t)(v67 - 8);
  if (v68 < 0x58)
    goto LABEL_140;
  if ((unint64_t)(v55 - &v64[v59]) < 0x20)
    goto LABEL_140;
  v69 = (v68 >> 3) + 1;
  v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
  v71 = &v55[-v70];
  v65 = (_QWORD *)((char *)v65 - v70);
  v72 = &v64[8 * v60 - 16];
  v73 = v55 - 16;
  v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v75 = *(_OWORD *)v73;
    *(v72 - 1) = *((_OWORD *)v73 - 1);
    *v72 = v75;
    v72 -= 2;
    v73 -= 32;
    v74 -= 4;
  }
  while (v74);
  v55 = v71;
  if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_140:
    do
    {
      v76 = *((_QWORD *)v55 - 1);
      v55 -= 8;
      *--v65 = v76;
    }
    while (v55 != v58);
  }
  v55 = *v127;
  *(_QWORD *)(a1 + 1016) = v65;
  *(_QWORD *)(a1 + 1024) = v57;
  *(_QWORD *)(a1 + 1032) = v66;
  if (v55)
  {
LABEL_75:
    operator delete(v55);
    LODWORD(v9) = *(_DWORD *)(a1 + 1064);
  }
LABEL_76:
  *(_QWORD *)(a1 + 1024) = v57;
  if ((int)v9 >= 2)
  {
    v77 = 1;
    v128 = __src;
    do
    {
      v79 = &__src[2 * v77];
      v80 = *((_QWORD *)v79 + 56);
      v81 = *(char **)(a1 + 1024);
      v82 = *(_QWORD *)(a1 + 1032);
      if ((unint64_t)v81 < v82)
      {
        *(_QWORD *)v81 = v80;
        v83 = (uint64_t)(v81 + 8);
        goto LABEL_103;
      }
      v84 = *v127;
      v85 = v81 - *v127;
      v86 = v85 >> 3;
      v87 = (v85 >> 3) + 1;
      if (v87 >> 61)
        sub_19C07DA0C();
      v88 = v82 - (_QWORD)v84;
      if (v88 >> 2 > v87)
        v87 = v88 >> 2;
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
        v89 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
      {
        if (v89 >> 61)
          sub_19C07C7FC();
        v90 = operator new(8 * v89);
        v91 = &v90[8 * v86];
        *v91 = v80;
        v83 = (uint64_t)(v91 + 1);
        if (v81 != v84)
        {
LABEL_91:
          v92 = v81 - 8 - v84;
          if (v92 < 0x58)
          {
            __src = v128;
            goto LABEL_100;
          }
          v93 = v81 - &v90[v85];
          __src = v128;
          if (v93 < 0x20)
            goto LABEL_141;
          v94 = (v92 >> 3) + 1;
          v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
          v96 = &v81[-v95];
          v91 = (_QWORD *)((char *)v91 - v95);
          v97 = &v90[8 * v86 - 16];
          v98 = v81 - 16;
          v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v100 = *(_OWORD *)v98;
            *(v97 - 1) = *((_OWORD *)v98 - 1);
            *v97 = v100;
            v97 -= 2;
            v98 -= 32;
            v99 -= 4;
          }
          while (v99);
          v81 = v96;
          if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_141:
            do
            {
LABEL_100:
              v101 = *((_QWORD *)v81 - 1);
              v81 -= 8;
              *--v91 = v101;
            }
            while (v81 != v84);
          }
          v81 = *v127;
          *(_QWORD *)(a1 + 1016) = v91;
          *(_QWORD *)(a1 + 1024) = v83;
          *(_QWORD *)(a1 + 1032) = &v90[8 * v89];
          if (!v81)
            goto LABEL_103;
LABEL_102:
          operator delete(v81);
          goto LABEL_103;
        }
      }
      else
      {
        v90 = 0;
        v91 = (_QWORD *)(8 * v86);
        *(_QWORD *)(8 * v86) = v80;
        v83 = 8 * v86 + 8;
        if (v81 != v84)
          goto LABEL_91;
      }
      __src = v128;
      *(_QWORD *)(a1 + 1016) = v91;
      *(_QWORD *)(a1 + 1024) = v83;
      *(_QWORD *)(a1 + 1032) = &v90[8 * v89];
      if (v81)
        goto LABEL_102;
LABEL_103:
      *(_QWORD *)(a1 + 1024) = v83;
      v102 = *((_QWORD *)v79 + 71);
      v103 = *(char **)(a1 + 1048);
      v104 = *(_QWORD *)(a1 + 1056);
      if ((unint64_t)v103 < v104)
      {
        *(_QWORD *)v103 = v102;
        v78 = (uint64_t)(v103 + 8);
        goto LABEL_79;
      }
      v105 = *v126;
      v106 = v103 - *v126;
      v107 = v106 >> 3;
      v108 = (v106 >> 3) + 1;
      if (v108 >> 61)
        sub_19C07DA0C();
      v109 = v104 - (_QWORD)v105;
      if (v109 >> 2 > v108)
        v108 = v109 >> 2;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
        v110 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v110 = v108;
      if (v110)
      {
        if (v110 >> 61)
          sub_19C07C7FC();
        v111 = operator new(8 * v110);
        v112 = &v111[8 * v107];
        *v112 = v102;
        v78 = (uint64_t)(v112 + 1);
        if (v103 == v105)
        {
LABEL_116:
          __src = v128;
          *(_QWORD *)(a1 + 1040) = v112;
          *(_QWORD *)(a1 + 1048) = v78;
          *(_QWORD *)(a1 + 1056) = &v111[8 * v110];
          if (!v103)
            goto LABEL_79;
LABEL_124:
          operator delete(v103);
          goto LABEL_79;
        }
      }
      else
      {
        v111 = 0;
        v112 = (_QWORD *)(8 * v107);
        *(_QWORD *)(8 * v107) = v102;
        v78 = 8 * v107 + 8;
        if (v103 == v105)
          goto LABEL_116;
      }
      v113 = v103 - 8 - v105;
      if (v113 < 0x58)
      {
        __src = v128;
        do
        {
LABEL_122:
          v122 = *((_QWORD *)v103 - 1);
          v103 -= 8;
          *--v112 = v122;
        }
        while (v103 != v105);
        goto LABEL_123;
      }
      v114 = v103 - &v111[v106];
      __src = v128;
      if (v114 < 0x20)
        goto LABEL_122;
      v115 = (v113 >> 3) + 1;
      v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
      v117 = &v103[-v116];
      v112 = (_QWORD *)((char *)v112 - v116);
      v118 = &v111[8 * v107 - 16];
      v119 = (__int128 *)(v103 - 16);
      v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v121 = *v119;
        *(v118 - 1) = *(v119 - 1);
        *v118 = v121;
        v118 -= 2;
        v119 -= 2;
        v120 -= 4;
      }
      while (v120);
      v103 = v117;
      if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_122;
LABEL_123:
      v103 = *v126;
      *(_QWORD *)(a1 + 1040) = v112;
      *(_QWORD *)(a1 + 1048) = v78;
      *(_QWORD *)(a1 + 1056) = &v111[8 * v110];
      if (v103)
        goto LABEL_124;
LABEL_79:
      *(_QWORD *)(a1 + 1048) = v78;
      ++v77;
    }
    while (v77 < *(int *)(a1 + 1064));
  }
  return a1;
}

void sub_19C09D19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v22 = *a10;
  if (*a10)
  {
    v20[138] = v22;
    operator delete(v22);
    v23 = *a11;
    if (!*a11)
    {
LABEL_3:
      v24 = *a12;
      if (!*a12)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v23 = *a11;
    if (!*a11)
      goto LABEL_3;
  }
  v20[135] = v23;
  operator delete(v23);
  v24 = *a12;
  if (!*a12)
  {
LABEL_4:
    v25 = *a13;
    if (!*a13)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v20[131] = v24;
  operator delete(v24);
  v25 = *a13;
  if (!*a13)
  {
LABEL_5:
    sub_19C18E518((uint64_t)v20);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v20[128] = v25;
  operator delete(v25);
  sub_19C18E518((uint64_t)v20);
  _Unwind_Resume(a1);
}

uint64_t sub_19C09D278(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 56))(a2, a1);
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 56))(a2, a1);
}

int64x2_t sub_19C09D33C(uint64_t a1, int a2)
{
  int v4;
  int v5;
  char *v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  int64x2_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 1);
  v7 = (uint64_t **)(a1 + 48);
  v6 = *(char **)(a1 + 48);
  v8 = *(int *)(a1 + 568);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v10 <= a2)
          break;
        v6 = *(char **)v9;
        v7 = (uint64_t **)v9;
        if (!*(_QWORD *)v9)
          goto LABEL_8;
      }
      if (v10 >= a2)
        break;
      v6 = (char *)*((_QWORD *)v9 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v9 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v9 = (char *)(a1 + 48);
LABEL_8:
    v11 = v9;
    v9 = (char *)operator new(0x50uLL);
    *((_DWORD *)v9 + 8) = a2;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((_QWORD *)v9 + 9) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v7 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 40);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 40) = v12;
      v13 = *v7;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 48), v13);
    ++*(_QWORD *)(a1 + 56);
  }
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v9 + 40) = result;
  *((_QWORD *)v9 + 7) = v8;
  *((_QWORD *)v9 + 8) = v4;
  *((_QWORD *)v9 + 9) = v5;
  return result;
}

uint64_t sub_19C09D458(uint64_t a1, uint64_t a2, uint64_t a3, int *__src)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  int *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  _OWORD *v29;
  int *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  int v34;
  int *v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  _OWORD *v49;
  int *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BYTE *v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  _OWORD *v118;
  __int128 *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  void **v124;
  void **v125;
  char **v126;
  char **v127;
  int *v128;
  void *__p[2];
  uint64_t v130;
  int v131;
  int64x2_t v132;
  uint64_t v133;
  int64x2_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v130 = *(_QWORD *)(a2 + 16);
  }
  sub_19C19065C(a1, (__int128 *)__p, a3, __src);
  if (SHIBYTE(v130) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E3D23CE8;
  v125 = (void **)(a1 + 1072);
  v126 = (char **)(a1 + 1040);
  v124 = (void **)(a1 + 1096);
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  v127 = (char **)(a1 + 1016);
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  LODWORD(v7) = __src[32];
  if ((int)v7 <= 1)
    v7 = 1;
  else
    v7 = v7;
  v131 = 1;
  v132 = vdupq_n_s64(1uLL);
  v133 = v7;
  v134 = v132;
  sub_19C07C964(a1 + 16, &v131, (int *)&v135);
  v8 = __src[64];
  v131 = 9;
  v132 = vdupq_n_s64(1uLL);
  v134 = 0uLL;
  v133 = v8;
  sub_19C07C964(a1 + 40, &v131, (int *)&v135);
  LODWORD(v9) = __src[80];
  *(_DWORD *)(a1 + 1064) = v9;
  if ((int)v9 >= 1)
  {
    v10 = 0;
    while (1)
    {
      v12 = *(float *)(*((_QWORD *)__src + 71) + 4 * v10);
      v13 = (int)(*(float *)(*((_QWORD *)__src + 70) + 4 * v10) + 0.5);
      v14 = *(int **)(a1 + 1080);
      v15 = *(_QWORD *)(a1 + 1088);
      if ((unint64_t)v14 < v15)
      {
        *v14 = v13;
        v16 = (uint64_t)(v14 + 1);
        goto LABEL_34;
      }
      v17 = (int *)*v125;
      v18 = (char *)v14 - (_BYTE *)*v125;
      v19 = v18 >> 2;
      v20 = (v18 >> 2) + 1;
      if (v20 >> 62)
        sub_19C07DA0C();
      v21 = v15 - (_QWORD)v17;
      if (v21 >> 1 > v20)
        v20 = v21 >> 1;
      v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v20;
      if (v22)
        break;
      v23 = 0;
      v24 = (int *)(4 * v19);
      *(_DWORD *)(4 * v19) = v13;
      v16 = 4 * v19 + 4;
      if (v14 != v17)
        goto LABEL_26;
LABEL_32:
      *(_QWORD *)(a1 + 1072) = v24;
      *(_QWORD *)(a1 + 1080) = v16;
      *(_QWORD *)(a1 + 1088) = &v23[4 * v22];
      if (v17)
        operator delete(v17);
LABEL_34:
      *(_QWORD *)(a1 + 1080) = v16;
      v34 = (int)(v12 + 0.5);
      v35 = *(int **)(a1 + 1104);
      v36 = *(_QWORD *)(a1 + 1112);
      if ((unint64_t)v35 >= v36)
      {
        v37 = (int *)*v124;
        v38 = (char *)v35 - (_BYTE *)*v124;
        v39 = v38 >> 2;
        v40 = (v38 >> 2) + 1;
        if (v40 >> 62)
          sub_19C07DA0C();
        v41 = v36 - (_QWORD)v37;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >> 62)
            sub_19C07C7FC();
          v43 = operator new(4 * v42);
          v44 = (int *)&v43[4 * v39];
          *v44 = v34;
          v11 = (uint64_t)(v44 + 1);
          if (v35 == v37)
            goto LABEL_52;
LABEL_46:
          v45 = (char *)(v35 - 1) - (char *)v37;
          if (v45 < 0x2C)
            goto LABEL_138;
          if ((unint64_t)((char *)v35 - &v43[v38]) < 0x20)
            goto LABEL_138;
          v46 = (v45 >> 2) + 1;
          v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          v48 = &v35[v47 / 0xFFFFFFFFFFFFFFFCLL];
          v44 = (int *)((char *)v44 - v47);
          v49 = &v43[4 * v39 - 16];
          v50 = v35 - 4;
          v51 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 8;
            v51 -= 8;
          }
          while (v51);
          v35 = v48;
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_138:
            do
            {
              v53 = *--v35;
              *--v44 = v53;
            }
            while (v35 != v37);
          }
        }
        else
        {
          v43 = 0;
          v44 = (int *)(4 * v39);
          *(_DWORD *)(4 * v39) = v34;
          v11 = 4 * v39 + 4;
          if (v35 != v37)
            goto LABEL_46;
        }
LABEL_52:
        *(_QWORD *)(a1 + 1096) = v44;
        *(_QWORD *)(a1 + 1104) = v11;
        *(_QWORD *)(a1 + 1112) = &v43[4 * v42];
        if (v37)
          operator delete(v37);
        goto LABEL_12;
      }
      *v35 = v34;
      v11 = (uint64_t)(v35 + 1);
LABEL_12:
      *(_QWORD *)(a1 + 1104) = v11;
      ++v10;
      v9 = *(int *)(a1 + 1064);
      if (v10 >= v9)
        goto LABEL_54;
    }
    if (v22 >> 62)
      sub_19C07C7FC();
    v23 = operator new(4 * v22);
    v24 = (int *)&v23[4 * v19];
    *v24 = v13;
    v16 = (uint64_t)(v24 + 1);
    if (v14 == v17)
      goto LABEL_32;
LABEL_26:
    v25 = (char *)(v14 - 1) - (char *)v17;
    if (v25 < 0x2C)
      goto LABEL_139;
    if ((unint64_t)((char *)v14 - &v23[v18]) < 0x20)
      goto LABEL_139;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v14[v27 / 0xFFFFFFFFFFFFFFFCLL];
    v24 = (int *)((char *)v24 - v27);
    v29 = &v23[4 * v19 - 16];
    v30 = v14 - 4;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 8;
      v31 -= 8;
    }
    while (v31);
    v14 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_139:
      do
      {
        v33 = *--v14;
        *--v24 = v33;
      }
      while (v14 != v17);
    }
    goto LABEL_32;
  }
LABEL_54:
  v54 = *((_QWORD *)__src + 56);
  v55 = *(char **)(a1 + 1024);
  v56 = *(_QWORD *)(a1 + 1032);
  if ((unint64_t)v55 < v56)
  {
    *(_QWORD *)v55 = v54;
    v57 = (uint64_t)(v55 + 8);
    goto LABEL_76;
  }
  v58 = *v127;
  v59 = v55 - *v127;
  v60 = v59 >> 3;
  v61 = (v59 >> 3) + 1;
  if (v61 >> 61)
    sub_19C07DA0C();
  v62 = v56 - (_QWORD)v58;
  if (v62 >> 2 > v61)
    v61 = v62 >> 2;
  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
    v63 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v63 = v61;
  if (!v63)
  {
    v64 = 0;
    v65 = (_QWORD *)(8 * v60);
    v66 = 0;
    *(_QWORD *)(8 * v60) = v54;
    v57 = 8 * v60 + 8;
    v67 = (char *)(v55 - v58);
    if (v55 != v58)
      goto LABEL_65;
LABEL_74:
    *(_QWORD *)(a1 + 1016) = v65;
    *(_QWORD *)(a1 + 1024) = v57;
    *(_QWORD *)(a1 + 1032) = v66;
    if (!v55)
      goto LABEL_76;
    goto LABEL_75;
  }
  if (v63 >> 61)
    sub_19C07C7FC();
  v64 = operator new(8 * v63);
  v65 = &v64[8 * v60];
  v66 = &v64[8 * v63];
  *v65 = v54;
  v57 = (uint64_t)(v65 + 1);
  v67 = (char *)(v55 - v58);
  if (v55 == v58)
    goto LABEL_74;
LABEL_65:
  v68 = (unint64_t)(v67 - 8);
  if (v68 < 0x58)
    goto LABEL_140;
  if ((unint64_t)(v55 - &v64[v59]) < 0x20)
    goto LABEL_140;
  v69 = (v68 >> 3) + 1;
  v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
  v71 = &v55[-v70];
  v65 = (_QWORD *)((char *)v65 - v70);
  v72 = &v64[8 * v60 - 16];
  v73 = v55 - 16;
  v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v75 = *(_OWORD *)v73;
    *(v72 - 1) = *((_OWORD *)v73 - 1);
    *v72 = v75;
    v72 -= 2;
    v73 -= 32;
    v74 -= 4;
  }
  while (v74);
  v55 = v71;
  if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_140:
    do
    {
      v76 = *((_QWORD *)v55 - 1);
      v55 -= 8;
      *--v65 = v76;
    }
    while (v55 != v58);
  }
  v55 = *v127;
  *(_QWORD *)(a1 + 1016) = v65;
  *(_QWORD *)(a1 + 1024) = v57;
  *(_QWORD *)(a1 + 1032) = v66;
  if (v55)
  {
LABEL_75:
    operator delete(v55);
    LODWORD(v9) = *(_DWORD *)(a1 + 1064);
  }
LABEL_76:
  *(_QWORD *)(a1 + 1024) = v57;
  if ((int)v9 >= 2)
  {
    v77 = 1;
    v128 = __src;
    do
    {
      v79 = &__src[2 * v77];
      v80 = *((_QWORD *)v79 + 56);
      v81 = *(char **)(a1 + 1024);
      v82 = *(_QWORD *)(a1 + 1032);
      if ((unint64_t)v81 < v82)
      {
        *(_QWORD *)v81 = v80;
        v83 = (uint64_t)(v81 + 8);
        goto LABEL_103;
      }
      v84 = *v127;
      v85 = v81 - *v127;
      v86 = v85 >> 3;
      v87 = (v85 >> 3) + 1;
      if (v87 >> 61)
        sub_19C07DA0C();
      v88 = v82 - (_QWORD)v84;
      if (v88 >> 2 > v87)
        v87 = v88 >> 2;
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
        v89 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
      {
        if (v89 >> 61)
          sub_19C07C7FC();
        v90 = operator new(8 * v89);
        v91 = &v90[8 * v86];
        *v91 = v80;
        v83 = (uint64_t)(v91 + 1);
        if (v81 != v84)
        {
LABEL_91:
          v92 = v81 - 8 - v84;
          if (v92 < 0x58)
          {
            __src = v128;
            goto LABEL_100;
          }
          v93 = v81 - &v90[v85];
          __src = v128;
          if (v93 < 0x20)
            goto LABEL_141;
          v94 = (v92 >> 3) + 1;
          v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
          v96 = &v81[-v95];
          v91 = (_QWORD *)((char *)v91 - v95);
          v97 = &v90[8 * v86 - 16];
          v98 = v81 - 16;
          v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v100 = *(_OWORD *)v98;
            *(v97 - 1) = *((_OWORD *)v98 - 1);
            *v97 = v100;
            v97 -= 2;
            v98 -= 32;
            v99 -= 4;
          }
          while (v99);
          v81 = v96;
          if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_141:
            do
            {
LABEL_100:
              v101 = *((_QWORD *)v81 - 1);
              v81 -= 8;
              *--v91 = v101;
            }
            while (v81 != v84);
          }
          v81 = *v127;
          *(_QWORD *)(a1 + 1016) = v91;
          *(_QWORD *)(a1 + 1024) = v83;
          *(_QWORD *)(a1 + 1032) = &v90[8 * v89];
          if (!v81)
            goto LABEL_103;
LABEL_102:
          operator delete(v81);
          goto LABEL_103;
        }
      }
      else
      {
        v90 = 0;
        v91 = (_QWORD *)(8 * v86);
        *(_QWORD *)(8 * v86) = v80;
        v83 = 8 * v86 + 8;
        if (v81 != v84)
          goto LABEL_91;
      }
      __src = v128;
      *(_QWORD *)(a1 + 1016) = v91;
      *(_QWORD *)(a1 + 1024) = v83;
      *(_QWORD *)(a1 + 1032) = &v90[8 * v89];
      if (v81)
        goto LABEL_102;
LABEL_103:
      *(_QWORD *)(a1 + 1024) = v83;
      v102 = *((_QWORD *)v79 + 71);
      v103 = *(char **)(a1 + 1048);
      v104 = *(_QWORD *)(a1 + 1056);
      if ((unint64_t)v103 < v104)
      {
        *(_QWORD *)v103 = v102;
        v78 = (uint64_t)(v103 + 8);
        goto LABEL_79;
      }
      v105 = *v126;
      v106 = v103 - *v126;
      v107 = v106 >> 3;
      v108 = (v106 >> 3) + 1;
      if (v108 >> 61)
        sub_19C07DA0C();
      v109 = v104 - (_QWORD)v105;
      if (v109 >> 2 > v108)
        v108 = v109 >> 2;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
        v110 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v110 = v108;
      if (v110)
      {
        if (v110 >> 61)
          sub_19C07C7FC();
        v111 = operator new(8 * v110);
        v112 = &v111[8 * v107];
        *v112 = v102;
        v78 = (uint64_t)(v112 + 1);
        if (v103 == v105)
        {
LABEL_116:
          __src = v128;
          *(_QWORD *)(a1 + 1040) = v112;
          *(_QWORD *)(a1 + 1048) = v78;
          *(_QWORD *)(a1 + 1056) = &v111[8 * v110];
          if (!v103)
            goto LABEL_79;
LABEL_124:
          operator delete(v103);
          goto LABEL_79;
        }
      }
      else
      {
        v111 = 0;
        v112 = (_QWORD *)(8 * v107);
        *(_QWORD *)(8 * v107) = v102;
        v78 = 8 * v107 + 8;
        if (v103 == v105)
          goto LABEL_116;
      }
      v113 = v103 - 8 - v105;
      if (v113 < 0x58)
      {
        __src = v128;
        do
        {
LABEL_122:
          v122 = *((_QWORD *)v103 - 1);
          v103 -= 8;
          *--v112 = v122;
        }
        while (v103 != v105);
        goto LABEL_123;
      }
      v114 = v103 - &v111[v106];
      __src = v128;
      if (v114 < 0x20)
        goto LABEL_122;
      v115 = (v113 >> 3) + 1;
      v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
      v117 = &v103[-v116];
      v112 = (_QWORD *)((char *)v112 - v116);
      v118 = &v111[8 * v107 - 16];
      v119 = (__int128 *)(v103 - 16);
      v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v121 = *v119;
        *(v118 - 1) = *(v119 - 1);
        *v118 = v121;
        v118 -= 2;
        v119 -= 2;
        v120 -= 4;
      }
      while (v120);
      v103 = v117;
      if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_122;
LABEL_123:
      v103 = *v126;
      *(_QWORD *)(a1 + 1040) = v112;
      *(_QWORD *)(a1 + 1048) = v78;
      *(_QWORD *)(a1 + 1056) = &v111[8 * v110];
      if (v103)
        goto LABEL_124;
LABEL_79:
      *(_QWORD *)(a1 + 1048) = v78;
      ++v77;
    }
    while (v77 < *(int *)(a1 + 1064));
  }
  return a1;
}

void sub_19C09DD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v22 = *a10;
  if (*a10)
  {
    v20[138] = v22;
    operator delete(v22);
    v23 = *a11;
    if (!*a11)
    {
LABEL_3:
      v24 = *a12;
      if (!*a12)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v23 = *a11;
    if (!*a11)
      goto LABEL_3;
  }
  v20[135] = v23;
  operator delete(v23);
  v24 = *a12;
  if (!*a12)
  {
LABEL_4:
    v25 = *a13;
    if (!*a13)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v20[131] = v24;
  operator delete(v24);
  v25 = *a13;
  if (!*a13)
  {
LABEL_5:
    sub_19C190830((uint64_t)v20);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v20[128] = v25;
  operator delete(v25);
  sub_19C190830((uint64_t)v20);
  _Unwind_Resume(a1);
}

uint64_t sub_19C09DE48(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_QWORD *)a1[20];
  v5 = (_QWORD *)a1[21];
  if (v4 == v5)
  {
    a1[21] = v4;
    if (!a1[31])
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 160))(a2, a1);
    goto LABEL_8;
  }
  do
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    ++v4;
  }
  while (v4 != v5);
  a1[21] = a1[20];
  if (a1[31])
  {
LABEL_8:
    v7 = a1[29];
    v6 = (uint64_t *)a1[30];
    v8 = *v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    a1[31] = 0;
    if (v6 != a1 + 29)
    {
      do
      {
        v9 = (uint64_t *)v6[1];
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != a1 + 29);
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 160))(a2, a1);
}

int64x2_t sub_19C09DF0C(uint64_t a1, int a2)
{
  int v4;
  int v5;
  char *v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  int64x2_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, 1);
  v7 = (uint64_t **)(a1 + 48);
  v6 = *(char **)(a1 + 48);
  v8 = *(int *)(a1 + 568);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v10 <= a2)
          break;
        v6 = *(char **)v9;
        v7 = (uint64_t **)v9;
        if (!*(_QWORD *)v9)
          goto LABEL_8;
      }
      if (v10 >= a2)
        break;
      v6 = (char *)*((_QWORD *)v9 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v9 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v9 = (char *)(a1 + 48);
LABEL_8:
    v11 = v9;
    v9 = (char *)operator new(0x50uLL);
    *((_DWORD *)v9 + 8) = a2;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((_QWORD *)v9 + 9) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v7 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 40);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 40) = v12;
      v13 = *v7;
    }
    sub_19C07CC40(*(uint64_t **)(a1 + 48), v13);
    ++*(_QWORD *)(a1 + 56);
  }
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v9 + 40) = result;
  *((_QWORD *)v9 + 7) = v8;
  *((_QWORD *)v9 + 8) = v4;
  *((_QWORD *)v9 + 9) = v5;
  return result;
}

uint64_t sub_19C09E028(_QWORD *a1, int a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;

  v4 = (a3 * a2);
  sub_19C18FB08((uint64_t)a1);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 312))(a1, 1, v4);
  if ((int)v4 >= 1)
  {
    do
    {
      v7 = sub_19C18FCD8((uint64_t)a1, 1);
      v8 = (char *)a1[138];
      v9 = (char *)a1[137];
      v10 = v8 - v9;
      if (v8 != v9)
      {
        v11 = (int)(*(float *)*v7 + 0.5);
        v12 = v11 - *(_DWORD *)v9;
        if (v11 < *(_DWORD *)v9)
        {
          *(float *)*sub_19C18FCD8((uint64_t)a1, 1) = (float)v11;
          v5 = (_QWORD *)a1[20];
        }
        else
        {
          if ((unint64_t)v10 < 5)
            goto LABEL_5;
          v13 = v10 >> 2;
          v14 = 1;
          while (1)
          {
            v15 = *(_DWORD *)&v9[4 * v14];
            v16 = __OFSUB__(v12, v15);
            v17 = v12 - v15;
            if (v17 < 0 != v16)
              break;
            ++v14;
            v12 = v17;
            if (v13 <= v14)
              goto LABEL_5;
          }
          *(float *)*sub_19C18FCD8((uint64_t)a1, 1) = (float)v12;
          v18 = 2 * v14;
          v19 = *(_QWORD *)(a1[20] + 8 * (v18 - 1));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 1);
          v5 = (_QWORD *)(a1[20] + 8 * v18);
        }
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
      }
LABEL_5:
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 320))(a1, 1);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 328))(a1, 1);
      v6 = (int)v4 <= 1;
      LODWORD(v4) = v4 - 1;
    }
    while (!v6);
  }
  sub_19C18FB60((uint64_t)a1, 1);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
}

uint64_t sub_19C09E1B8(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;

  v4 = (a3 * a2);
  sub_19C18FB08(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 1, v4);
  if ((int)v4 >= 1)
  {
    do
    {
      v8 = sub_19C18FCD8(a1, 1);
      v9 = *(char **)(a1 + 1104);
      v10 = *(char **)(a1 + 1096);
      v11 = v9 - v10;
      if (v9 != v10)
      {
        v12 = (int)(*(float *)*v8 + 0.5);
        v13 = v12 - *(_DWORD *)v10;
        if (v12 < *(_DWORD *)v10)
        {
          *(float *)*sub_19C18FCD8(a1, 1) = (float)v12;
          (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 160) + 16))(**(_QWORD **)(a1 + 160), 1);
          v5 = 1;
        }
        else
        {
          if ((unint64_t)v11 < 5)
            goto LABEL_5;
          v14 = v11 >> 2;
          v15 = 1;
          while (1)
          {
            v16 = *(_DWORD *)&v10[4 * v15];
            v17 = __OFSUB__(v13, v16);
            v18 = v13 - v16;
            if (v18 < 0 != v17)
              break;
            ++v15;
            v13 = v18;
            if (v14 <= v15)
              goto LABEL_5;
          }
          *(float *)*sub_19C18FCD8(a1, 1) = (float)v13;
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + ((uint64_t)(v15 << 33) >> 29));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 1);
          v5 = (int)((2 * v15) | 1);
        }
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v5);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 1);
      }
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 320))(a1, 1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 328))(a1, 1);
      v7 = (int)v4 <= 1;
      LODWORD(v4) = v4 - 1;
    }
    while (!v7);
  }
  sub_19C18FB60(a1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t sub_19C09E364(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &unk_1E3D23E58;
  v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[130];
  if (v4)
  {
    a1[131] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[127];
  if (v5)
  {
    a1[128] = v5;
    operator delete(v5);
  }
  return sub_19C18E518((uint64_t)a1);
}

void sub_19C09E3D4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &unk_1E3D23E58;
  v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[130];
  if (v4)
  {
    a1[131] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[127];
  if (v5)
  {
    a1[128] = v5;
    operator delete(v5);
  }
  v6 = (void *)sub_19C18E518((uint64_t)a1);
  operator delete(v6);
}

uint64_t sub_19C09E448(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &unk_1E3D23CE8;
  v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[130];
  if (v4)
  {
    a1[131] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[127];
  if (v5)
  {
    a1[128] = v5;
    operator delete(v5);
  }
  return sub_19C190830((uint64_t)a1);
}

void sub_19C09E4B8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &unk_1E3D23CE8;
  v2 = (void *)a1[137];
  if (v2)
  {
    a1[138] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[134];
  if (v3)
  {
    a1[135] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[130];
  if (v4)
  {
    a1[131] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[127];
  if (v5)
  {
    a1[128] = v5;
    operator delete(v5);
  }
  v6 = (void *)sub_19C190830((uint64_t)a1);
  operator delete(v6);
}

double sub_19C09E52C(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_19C22DF48(a1);
  *(_QWORD *)v1 = off_1E3D22DF0;
  result = 0.0;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_QWORD *)(v1 + 304) = 0;
  *(_BYTE *)(v1 + 312) = 1;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_QWORD *)(v1 + 368) = 0;
  *(_DWORD *)(v1 + 376) = 1065353216;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_DWORD *)(v1 + 416) = 1065353216;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_DWORD *)(v1 + 456) = 1065353216;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_DWORD *)(v1 + 496) = 1065353216;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_DWORD *)(v1 + 536) = 1065353216;
  *(_OWORD *)(v1 + 544) = 0u;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_DWORD *)(v1 + 576) = 1065353216;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_DWORD *)(v1 + 616) = 1065353216;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_DWORD *)(v1 + 656) = 1065353216;
  *(_OWORD *)(v1 + 664) = 0u;
  *(_OWORD *)(v1 + 680) = 0u;
  *(_OWORD *)(v1 + 696) = 0u;
  *(_QWORD *)(v1 + 712) = 0;
  *(_DWORD *)(v1 + 720) = 1065353216;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_OWORD *)(v1 + 744) = 0u;
  *(_DWORD *)(v1 + 760) = 1065353216;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_OWORD *)(v1 + 784) = 0u;
  *(_DWORD *)(v1 + 800) = 1065353216;
  *(_DWORD *)(v1 + 808) = 1084227584;
  return result;
}

uint64_t sub_19C09E5E8(_QWORD *a1)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void *v15;
  char *v16;
  void *v17;
  void **v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;
  void *v23;
  void **v24;
  void *v25;
  void **v26;
  void *v27;
  void **v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void **v33;
  char *v34;
  void *v35;
  void **v36;
  char *v37;
  void *v38;
  char *v39;
  void *v40;
  void **v41;
  void **v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;

  *a1 = off_1E3D22DF0;
  espresso_plan_destroy();
  espresso_context_destroy();
  v2 = (void **)a1[98];
  if (v2)
  {
    do
    {
      v11 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v11;
    }
    while (v11);
  }
  v3 = (void *)a1[96];
  a1[96] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void **)a1[93];
  if (v4)
  {
    do
    {
      v12 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v12;
    }
    while (v12);
  }
  v5 = (void *)a1[91];
  a1[91] = 0;
  if (v5)
    operator delete(v5);
  v6 = (void **)a1[88];
  if (v6)
  {
    do
    {
      v13 = (void **)*v6;
      if (*((char *)v6 + 39) < 0)
        operator delete(v6[2]);
      operator delete(v6);
      v6 = v13;
    }
    while (v13);
  }
  v7 = (void *)a1[86];
  a1[86] = 0;
  if (v7)
    operator delete(v7);
  v8 = a1[83];
  if (v8)
  {
    v9 = a1[84];
    v10 = (void *)a1[83];
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)a1[83];
    }
    a1[84] = v8;
    operator delete(v10);
  }
  v14 = (void **)a1[80];
  if (v14)
  {
    do
    {
      v33 = (void **)*v14;
      if (*((char *)v14 + 39) < 0)
        operator delete(v14[2]);
      operator delete(v14);
      v14 = v33;
    }
    while (v33);
  }
  v15 = (void *)a1[78];
  a1[78] = 0;
  if (v15)
    operator delete(v15);
  v16 = (char *)a1[75];
  if (v16)
  {
    do
    {
      v34 = *(char **)v16;
      v35 = (void *)*((_QWORD *)v16 + 5);
      if (v35)
      {
        *((_QWORD *)v16 + 6) = v35;
        operator delete(v35);
      }
      if (v16[39] < 0)
        operator delete(*((void **)v16 + 2));
      operator delete(v16);
      v16 = v34;
    }
    while (v34);
  }
  v17 = (void *)a1[73];
  a1[73] = 0;
  if (v17)
    operator delete(v17);
  v18 = (void **)a1[70];
  if (v18)
  {
    do
    {
      v36 = (void **)*v18;
      if (*((char *)v18 + 39) < 0)
        operator delete(v18[2]);
      operator delete(v18);
      v18 = v36;
    }
    while (v36);
  }
  v19 = (void *)a1[68];
  a1[68] = 0;
  if (v19)
    operator delete(v19);
  v20 = (char *)a1[65];
  if (v20)
  {
    do
    {
      v37 = *(char **)v20;
      v38 = (void *)*((_QWORD *)v20 + 5);
      if (v38)
      {
        *((_QWORD *)v20 + 6) = v38;
        operator delete(v38);
      }
      if (v20[39] < 0)
        operator delete(*((void **)v20 + 2));
      operator delete(v20);
      v20 = v37;
    }
    while (v37);
  }
  v21 = (void *)a1[63];
  a1[63] = 0;
  if (v21)
    operator delete(v21);
  v22 = (char *)a1[60];
  if (v22)
  {
    do
    {
      v39 = *(char **)v22;
      v40 = (void *)*((_QWORD *)v22 + 5);
      if (v40)
      {
        *((_QWORD *)v22 + 6) = v40;
        operator delete(v40);
      }
      if (v22[39] < 0)
        operator delete(*((void **)v22 + 2));
      operator delete(v22);
      v22 = v39;
    }
    while (v39);
  }
  v23 = (void *)a1[58];
  a1[58] = 0;
  if (v23)
    operator delete(v23);
  v24 = (void **)a1[55];
  if (v24)
  {
    do
    {
      v41 = (void **)*v24;
      if (*((char *)v24 + 39) < 0)
        operator delete(v24[2]);
      operator delete(v24);
      v24 = v41;
    }
    while (v41);
  }
  v25 = (void *)a1[53];
  a1[53] = 0;
  if (v25)
    operator delete(v25);
  v26 = (void **)a1[50];
  if (v26)
  {
    do
    {
      v42 = (void **)*v26;
      if (*((char *)v26 + 39) < 0)
        operator delete(v26[2]);
      operator delete(v26);
      v26 = v42;
    }
    while (v42);
  }
  v27 = (void *)a1[48];
  a1[48] = 0;
  if (v27)
    operator delete(v27);
  v28 = (void **)a1[45];
  if (v28)
  {
    do
    {
      v43 = (void **)*v28;
      if (*((char *)v28 + 39) < 0)
        operator delete(v28[2]);
      operator delete(v28);
      v28 = v43;
    }
    while (v43);
  }
  v29 = (void *)a1[43];
  a1[43] = 0;
  if (v29)
    operator delete(v29);
  v30 = a1[40];
  if (v30)
  {
    v31 = a1[41];
    v32 = (void *)a1[40];
    if (v31 != v30)
    {
      do
      {
        if (*(char *)(v31 - 49) < 0)
          operator delete(*(void **)(v31 - 72));
        v31 -= 72;
      }
      while (v31 != v30);
      v32 = (void *)a1[40];
    }
    a1[41] = v30;
    operator delete(v32);
  }
  v44 = a1[36];
  if (v44)
  {
    v45 = a1[37];
    v46 = (void *)a1[36];
    if (v45 != v44)
    {
      do
      {
        if (*(char *)(v45 - 1) < 0)
          operator delete(*(void **)(v45 - 24));
        v45 -= 24;
      }
      while (v45 != v44);
      v46 = (void *)a1[36];
    }
    a1[37] = v44;
    operator delete(v46);
  }
  return sub_19C22E138((uint64_t)a1);
}

void sub_19C09E9FC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_19C09E5E8(a1);
  operator delete(v1);
}

BOOL sub_19C09EA10(uint64_t a1, char **a2)
{
  char v2;
  uint64_t v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v15;
  void *v16;
  char *v17;
  char *v18;

  v2 = *((_BYTE *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (uint64_t)a2[1];
  if (v2 >= 0)
    v4 = (char *)a2;
  else
    v4 = *a2;
  if (v3 >= 7)
  {
    v5 = v4;
    v6 = &v4[v3];
    v7 = v3;
    v8 = v4;
    while (1)
    {
      v9 = (char *)memchr(v8, 95, v7 - 6);
      if (!v9)
        goto LABEL_18;
      if (*(_DWORD *)v9 == 1935633247 && *(_DWORD *)(v9 + 3) == 1852399475)
        break;
      v8 = v9 + 1;
      v7 = v6 - (_BYTE *)v8;
      if (v6 - (_BYTE *)v8 < 7)
        goto LABEL_18;
    }
    if (v9 == v6 || v9 - v4 == -1)
    {
LABEL_18:
      v11 = v3;
      v12 = v4;
      do
      {
        v13 = (char *)memchr(v12, 95, v11 - 6);
        if (!v13)
          break;
        if (*(_DWORD *)v13 == 1935636063 && *(_DWORD *)(v13 + 3) == 1852399475)
        {
          if (v13 != v6 && v13 - v4 != -1)
            return 1;
          break;
        }
        v12 = v13 + 1;
        v11 = v6 - (_BYTE *)v12;
      }
      while (v6 - (_BYTE *)v12 >= 7);
      if (v3 <= 7)
        return 0;
      v15 = v3;
      v16 = v4;
      while (1)
      {
        v17 = (char *)memchr(v16, 95, v15 - 7);
        if (!v17)
          goto LABEL_39;
        if (*(_QWORD *)v17 == 0x74756F5F735F6B5FLL)
          break;
        v16 = v17 + 1;
        v15 = v6 - (_BYTE *)v16;
        if (v6 - (_BYTE *)v16 < 8)
          goto LABEL_39;
      }
      if (v17 == v6 || v17 - v4 == -1)
      {
LABEL_39:
        while (1)
        {
          v18 = (char *)memchr(v5, 95, v3 - 7);
          if (!v18)
            break;
          if (*(_QWORD *)v18 == 0x74756F5F735F765FLL)
            return v18 != v6 && v18 - v4 != -1;
          v5 = v18 + 1;
          v3 = v6 - (v18 + 1);
          if (v3 < 8)
            return 0;
        }
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

BOOL sub_19C09EBE8(int a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v16;
  void *v17;
  _DWORD *v18;
  _DWORD *v20;

  v3 = *(_BYTE *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 5)
  {
    v6 = (void *)v5;
    v7 = (char *)(v5 + v4);
    v8 = v4;
    v9 = (void *)v5;
    do
    {
      v10 = (char *)memchr(v9, 95, v8 - 4);
      if (!v10)
        break;
      if (*(_DWORD *)v10 == 1767860319 && v10[4] == 110)
      {
        if (v10 != v7 && &v10[-v5] != (char *)-1)
          return 1;
        break;
      }
      v9 = v10 + 1;
      v8 = v7 - (_BYTE *)v9;
    }
    while (v7 - (_BYTE *)v9 >= 5);
    v12 = v4;
    v13 = (void *)v5;
    do
    {
      v14 = (char *)memchr(v13, 95, v12 - 4);
      if (!v14)
        break;
      if (*(_DWORD *)v14 == 1767859039 && v14[4] == 110)
      {
        if (v14 != v7 && &v14[-v5] != (char *)-1)
          return 1;
        break;
      }
      v13 = v14 + 1;
      v12 = v7 - (_BYTE *)v13;
    }
    while (v7 - (_BYTE *)v13 >= 5);
    if (v4 < 7)
      goto LABEL_48;
    v16 = v4;
    v17 = (void *)v5;
    while (1)
    {
      v18 = memchr(v17, 95, v16 - 6);
      if (!v18)
        goto LABEL_39;
      if (*v18 == 1751085663 && *(_DWORD *)((char *)v18 + 3) == 1852399464)
        break;
      v17 = (char *)v18 + 1;
      v16 = v7 - (_BYTE *)v17;
      if (v7 - (_BYTE *)v17 < 7)
        goto LABEL_39;
    }
    if (v18 != (_DWORD *)v7 && (_DWORD *)((char *)v18 - v5) != (_DWORD *)-1)
      return 1;
LABEL_39:
    do
    {
      v20 = memchr(v6, 95, v4 - 6);
      if (!v20)
        break;
      if (*v20 == 1667199583 && *(_DWORD *)((char *)v20 + 3) == 1852399459)
      {
        if (v20 != (_DWORD *)v7 && (_DWORD *)((char *)v20 - v5) != (_DWORD *)-1)
          return 1;
        break;
      }
      v6 = (char *)v20 + 1;
      v4 = v7 - ((char *)v20 + 1);
    }
    while (v4 >= 7);
  }
LABEL_48:
  if (sub_19C09EE54((uint64_t *)a2, "_h_out", 0) != -1
    || sub_19C09EE54((uint64_t *)a2, "_c_out", 0) != -1
    || sub_19C09EE54((uint64_t *)a2, "_r_h_out", 0) != -1)
  {
    return 1;
  }
  return sub_19C09EE54((uint64_t *)a2, "_r_c_out", 0) != -1;
}

unint64_t sub_19C09EE54(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v9;
  void *v10;
  char *v11;
  int64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  v9 = v7;
  if (v7)
  {
    v10 = (void *)(v5 + a3);
    v11 = (char *)(v5 + v6);
    v12 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v9)
    {
      v14 = *__s;
      do
      {
        v15 = v12 - v9;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v10, v14, v15 + 1);
        if (!v16)
          break;
        v13 = v16;
        if (!memcmp(v16, __s, v9))
          goto LABEL_9;
        v10 = v13 + 1;
        v12 = v11 - (v13 + 1);
      }
      while (v12 >= v9);
    }
    v13 = v11;
LABEL_9:
    if (v13 == v11)
      return -1;
    else
      return (unint64_t)&v13[-v5];
  }
  return a3;
}

uint64_t sub_19C09EF48(uint64_t a1)
{
  const void **v1;
  const void **v2;
  uint64_t v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *p_dst;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  char *__dst;
  size_t v14;
  unint64_t v15;

  v1 = *(const void ***)(a1 + 664);
  v2 = *(const void ***)(a1 + 672);
  if (v1 != v2)
  {
    LOBYTE(v3) = 1;
    while (1)
    {
      if ((v3 & 1) != 0)
      {
        v4 = *((char *)v1 + 23);
        if (v4 >= 0)
          v5 = *((unsigned __int8 *)v1 + 23);
        else
          v5 = (size_t)v1[1];
        v6 = v5 + 3;
        if (v5 + 3 >= 0x7FFFFFFFFFFFFFF8)
          sub_19C07C774();
        if (v6 >= 0x17)
        {
          v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v6 | 7) != 0x17)
            v8 = v6 | 7;
          v9 = v8 + 1;
          p_dst = (char *)operator new(v8 + 1);
          v14 = v5 + 3;
          v15 = v9 | 0x8000000000000000;
          __dst = p_dst;
LABEL_17:
          if (v4 >= 0)
            v10 = v1;
          else
            v10 = *v1;
          v11 = memmove(p_dst, v10, v5);
          *(_DWORD *)&p_dst[v5] = 7235935;
          a1 = sub_19C09EA10((uint64_t)v11, &__dst);
          v3 = a1;
          if ((SHIBYTE(v15) & 0x80000000) == 0)
            goto LABEL_4;
LABEL_21:
          operator delete(__dst);
          goto LABEL_4;
        }
        v14 = 0;
        v15 = 0;
        __dst = 0;
        p_dst = (char *)&__dst;
        HIBYTE(v15) = v5 + 3;
        if (v5)
          goto LABEL_17;
        LODWORD(__dst) = 7235935;
        a1 = sub_19C09EA10(a1, &__dst);
        v3 = a1;
        if (SHIBYTE(v15) < 0)
          goto LABEL_21;
      }
      else
      {
        v3 = 0;
      }
LABEL_4:
      v1 += 3;
      if (v1 == v2)
        return v3;
    }
  }
  return 0;
}

void sub_19C09F094(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *p_p;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const void *v25;
  void *__p;
  size_t v27;
  int64_t v28;

  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = a1[1];
  v6 = (uint64_t)v4 + v5 - 3;
  v7 = v5 - 3;
  if ((unint64_t)(v5 - 3) > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  if (v7 > 0x16)
  {
    v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v16 = v7 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v27 = v5 - 3;
    v28 = v17 | 0x8000000000000000;
    __p = p_p;
    if (v4 != (uint64_t *)v6)
      goto LABEL_10;
LABEL_19:
    v10 = p_p;
    goto LABEL_22;
  }
  HIBYTE(v28) = v5 - 3;
  p_p = &__p;
  if (v4 == (uint64_t *)v6)
    goto LABEL_19;
LABEL_10:
  v9 = v5 - 3;
  if ((unint64_t)(v5 - 3) < 0x20 || (unint64_t)((char *)p_p - (char *)v4) < 0x20)
  {
    v10 = p_p;
    v11 = (char *)v4;
  }
  else
  {
    v10 = (char *)p_p + (v9 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)v4 + (v9 & 0xFFFFFFFFFFFFFFE0);
    v12 = (__int128 *)(v4 + 2);
    v13 = p_p + 1;
    v14 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_22;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != (char *)v6);
LABEL_22:
  *v10 = 0;
  v19 = SHIBYTE(v28);
  if (v28 >= 0)
    v20 = HIBYTE(v28);
  else
    v20 = v27;
  v21 = v20 + 4;
  if (v20 + 4 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  if (v21 >= 0x17)
  {
    v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v22 = v21 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    a2[1] = v21;
    a2[2] = v23 | 0x8000000000000000;
    *a2 = v24;
    a2 = v24;
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *((_BYTE *)a2 + 23) = v21;
    if (!v20)
    {
      strcpy((char *)a2, "_out");
      if ((v19 & 0x80000000) == 0)
        return;
LABEL_37:
      operator delete(__p);
      return;
    }
  }
  if (v19 >= 0)
    v25 = &__p;
  else
    v25 = __p;
  memmove(a2, v25, v20);
  strcpy((char *)a2 + v20, "_out");
  if (v19 < 0)
    goto LABEL_37;
}

void sub_19C09F2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  int v10;

  if (v10 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *sub_19C09F2C8(uint64_t a1)
{
  char v2;
  int v3;
  uint64_t v4;
  uint64_t **v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  vDSP_Length v27;
  vDSP_Length v28;
  uint64_t v29;
  const float *v30;
  const float *v31;
  const float *v32;
  int v33;
  uint64_t **Instance;
  uint64_t **v35;
  __int128 *v36;
  size_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  _DWORD *v54;
  int v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  int v62;
  uint64_t v63;
  int v64;
  int v66;
  uint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t **v76;
  __CFArray *theArray;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *value;
  uint64_t **valuea;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t **v89;
  int v90;
  uint64_t v91;
  float v92;
  float __C;
  float __B;
  void *__p;
  void *v96;
  char *v97;
  _QWORD v98[5];
  char *v99;
  char *v100;
  char *v101;
  _QWORD v102[6];

  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v2 = sub_19C09EF48(a1);
  v91 = a1;
  v3 = *(_DWORD *)(a1 + 56);
  if ((v2 & 1) == 0)
  {
    if (v3 < 1)
      return theArray;
    v33 = 0;
    while (1)
    {
      if (qword_1EE4188F0 != -1)
        dispatch_once(&qword_1EE4188F0, &unk_1E3D25160);
      Instance = (uint64_t **)_CFRuntimeCreateInstance();
      Instance[3] = 0;
      Instance[2] = (uint64_t *)(Instance + 3);
      v35 = Instance + 2;
      Instance[6] = 0;
      Instance[4] = 0;
      Instance[5] = (uint64_t *)(Instance + 6);
      Instance[8] = 0;
      Instance[9] = 0;
      Instance[7] = 0;
      valuea = Instance;
      v36 = *(__int128 **)(v91 + 440);
      if (v36)
        break;
LABEL_43:
      CFArrayAppendValue(theArray, valuea);
      CFRelease(valuea);
      if (++v33 >= *(_DWORD *)(v91 + 56))
        return theArray;
    }
    while (1)
    {
      if (*((_QWORD *)v36 + 18) != *(_DWORD *)(v91 + 56))
        return theArray;
      if (*((_QWORD *)v36 + 5))
        break;
LABEL_45:
      v36 = *(__int128 **)v36;
      if (!v36)
        goto LABEL_43;
    }
    v37 = *((_QWORD *)v36 + 16);
    v39 = *((_QWORD *)v36 + 17);
    v40 = *((_QWORD *)v36 + 19);
    v102[0] = *((_QWORD *)v36 + 15);
    v38 = v102[0];
    v102[1] = v37;
    v102[2] = v39;
    v102[3] = 1;
    v102[4] = v40;
    sub_19C187658((uint64_t)v35, v36 + 1, (uint64_t)v102);
    v41 = *((_QWORD *)v36 + 19);
    v42 = (v38 * v37 * v39);
    v43 = *((_QWORD *)v36 + 5);
    v44 = (v42 * v40);
    v99 = 0;
    v100 = 0;
    v101 = 0;
    if (v44 << 32)
    {
      v86 = v41;
      v88 = v38;
      v90 = v37;
      if (v44 << 32 < 0)
        sub_19C07DA0C();
      v45 = (int)v44;
      v37 = (4 * v44) & 0x3FFFFFFFFLL;
      v46 = (char *)operator new(v37);
      v99 = v46;
      v101 = &v46[4 * v45];
      bzero(v46, v37);
      v47 = v101;
      v100 = v101;
      v38 = v88;
      LODWORD(v37) = v90;
      LODWORD(v41) = v86;
      if (v86 < 1)
        goto LABEL_59;
    }
    else
    {
      v47 = 0;
      v46 = 0;
      if ((int)v41 < 1)
      {
LABEL_59:
        sub_19C187604(v35, v36 + 1, v46, v47 - v46);
        if (v99)
          operator delete(v99);
        goto LABEL_45;
      }
    }
    if ((int)v42 >= 1)
    {
      v48 = v41;
      v49 = *(_DWORD *)(v91 + 56) * v38 * v37 * v39;
      v50 = 4 * v42;
      v51 = v33 * v38;
      if (v42 >= 8)
      {
        v58 = 0;
        v59 = 0;
        v60 = v42 - 1;
        v61 = v46 + 16;
        v62 = v51 * v37 * v39;
        do
        {
          v63 = 0;
          v64 = v49 * v59 + v42 * v33;
          if (v64 + (int)v60 < v64 || HIDWORD(v60) != 0)
            goto LABEL_72;
          if ((unint64_t)&v46[v50 * v59 - v43 + -4 * v64] < 0x20)
            goto LABEL_72;
          v66 = v62;
          v67 = v42 & 0xFFFFFFF8;
          v68 = v61;
          do
          {
            v69 = (_OWORD *)(v43 + 4 * v66);
            v70 = v69[1];
            *(v68 - 1) = *v69;
            *v68 = v70;
            v68 += 2;
            v66 += 8;
            v67 -= 8;
          }
          while (v67);
          v63 = v42 & 0xFFFFFFF8;
          if (v63 != v42)
          {
LABEL_72:
            v71 = &v46[4 * v63 + 4 * v58];
            v72 = v62 + v63;
            v73 = v42 - v63;
            do
            {
              *(_DWORD *)v71 = *(_DWORD *)(v43 + 4 * v72);
              v71 += 4;
              ++v72;
              --v73;
            }
            while (v73);
          }
          ++v59;
          v61 = (_OWORD *)((char *)v61 + v50);
          v62 += v49;
          v58 += v42;
        }
        while (v59 != v48);
      }
      else
      {
        v52 = 0;
        v53 = v51 * v37 * v39;
        v54 = v46;
        do
        {
          v55 = v53;
          v56 = v54;
          v57 = v42;
          do
          {
            *v56++ = *(_DWORD *)(v43 + 4 * v55++);
            --v57;
          }
          while (v57);
          ++v52;
          v54 = (_DWORD *)((char *)v54 + v50);
          v53 += v49;
        }
        while (v52 != v48);
      }
    }
    goto LABEL_59;
  }
  if (v3 >= 1)
  {
    v78 = 0;
    v4 = 0;
    v81 = a1 + 544;
    v82 = a1 + 504;
    v79 = a1 + 624;
    v80 = a1 + 584;
    while (1)
    {
      v75 = v4;
      if (qword_1EE4188F0 != -1)
        dispatch_once(&qword_1EE4188F0, &unk_1E3D25160);
      v5 = (uint64_t **)_CFRuntimeCreateInstance();
      v5[3] = 0;
      v5[2] = (uint64_t *)(v5 + 3);
      v89 = v5 + 2;
      v5[6] = 0;
      v5[4] = 0;
      v5[5] = (uint64_t *)(v5 + 6);
      v5[8] = 0;
      v5[9] = 0;
      v5[7] = 0;
      v76 = v5;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v6 = *(char **)(v91 + 664);
      value = *(char **)(v91 + 672);
      if (v6 != value)
        break;
LABEL_7:
      CFArrayAppendValue(theArray, v76);
      CFRelease(v76);
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      v4 = v75 + 1;
      v78 += 4;
      if (v75 + 1 >= *(int *)(v91 + 56))
        return theArray;
    }
    while (1)
    {
      __p = v6;
      v7 = sub_19C080A24(v82, (uint64_t)v6, (uint64_t)&unk_19C27ADD0, (__int128 **)&__p)[5];
      __p = v6;
      v8 = sub_19C0803AC(v81, (uint64_t)v6, (uint64_t)&unk_19C27ADD0, (__int128 **)&__p);
      v10 = v8[5];
      v9 = v8[6];
      v11 = v8[7];
      v12 = v8[9];
      __p = v6;
      v13 = sub_19C080A24(v80, (uint64_t)v6, (uint64_t)&unk_19C27ADD0, (__int128 **)&__p)[5];
      __p = v6;
      v14 = sub_19C0803AC(v79, (uint64_t)v6, (uint64_t)&unk_19C27ADD0, (__int128 **)&__p);
      v15 = v14[5];
      v16 = v14[7];
      if (v16 != v11 || v15 != v10)
        break;
      v85 = v7;
      v87 = v13;
      v18 = v14[6];
      v98[0] = v10;
      v98[1] = v18 + v9;
      v98[2] = v11;
      v98[3] = 1;
      v98[4] = v12;
      sub_19C187658((uint64_t)v89, (__int128 *)v6, (uint64_t)v98);
      v19 = (v10 * (v18 + v9) * v11 * v12);
      __p = 0;
      v96 = 0;
      v97 = 0;
      if (v19 << 32)
      {
        if (v19 << 32 < 0)
          sub_19C07DA0C();
        v20 = (int)v19;
        v21 = (char *)operator new((int)v19);
        v22 = &v21[v20];
        __p = v21;
        v97 = &v21[v20];
        bzero(v21, v20);
        v96 = v22;
      }
      v23 = (int)v10 * ((int)v18 + (int)v9);
      v24 = (v100 - v99) >> 2;
      if (v23 <= v24)
      {
        if (v23 < v24)
          v100 = &v99[4 * v23];
      }
      else
      {
        sub_19C0A36A4((uint64_t)&v99, v23 - v24);
      }
      if (v11)
      {
        v25 = v10 * v9;
        v26 = (int)v15 * (int)v18 * (int)v16;
        v27 = (int)v10 * (int)v9;
        v28 = (int)v10 * (int)v18;
        if (v25)
        {
          v29 = 0;
          v30 = (const float *)(v87 + v78 * v26);
          v31 = (const float *)(v85 + v78 * v25 * (int)v11);
          do
          {
            __B = 128.0 / *(float *)(v91 + 808);
            __C = 127.1;
            v92 = -127.1;
            vDSP_vsmul(v31, 1, &__B, (float *)v99, 1, v27);
            vDSP_vclip((const float *)v99, 1, &v92, &__C, (float *)v99, 1, v27);
            vDSP_vfixr8((const float *)v99, 1, (char *)__p + v29, 1, v27);
            if ((_DWORD)v28)
            {
              vDSP_vsmul(v30, 1, &__B, (float *)v99, 1, v28);
              vDSP_vclip((const float *)v99, 1, &v92, &__C, (float *)v99, 1, v28);
              vDSP_vfixr8((const float *)v99, 1, (char *)__p + v27 + v29, 1, v28);
            }
            sub_19C1875B0(v89, (__int128 *)v6, (char **)&__p);
            v30 += v28;
            v29 += v23;
            v31 += v27;
            --v11;
          }
          while (v11);
        }
        else if ((_DWORD)v28)
        {
          v32 = (const float *)(v87 + v78 * v26);
          do
          {
            __B = 128.0 / *(float *)(v91 + 808);
            __C = 127.1;
            v92 = -127.1;
            vDSP_vsmul(v32, 1, &__B, (float *)v99, 1, v28);
            vDSP_vclip((const float *)v99, 1, &v92, &__C, (float *)v99, 1, v28);
            vDSP_vfixr8((const float *)v99, 1, (char *)__p + v27, 1, v28);
            sub_19C1875B0(v89, (__int128 *)v6, (char **)&__p);
            v27 += v23;
            v32 += v28;
            --v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            __B = 128.0 / *(float *)(v91 + 808);
            __C = 127.1;
            v92 = -127.1;
            sub_19C1875B0(v89, (__int128 *)v6, (char **)&__p);
            --v11;
          }
          while (v11);
        }
      }
      if (__p)
      {
        v96 = __p;
        operator delete(__p);
      }
      v6 += 24;
      if (v6 == value)
        goto LABEL_7;
    }
    if (v99)
    {
      v100 = v99;
      operator delete(v99);
    }
  }
  return theArray;
}

void sub_19C09FB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 168);
  if (v29)
  {
    *(_QWORD *)(v27 - 160) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *sub_19C09FBB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t **Instance;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  int v18;
  vDSP_Length v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  const float *v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  BOOL v41;
  std::runtime_error *exception;
  __CFArray *theArray;
  uint64_t v45;
  uint64_t **value;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t **v53;
  float v54;
  float __C;
  float __B;
  void *__p;
  void *v58;
  char *v59;
  _QWORD v60[5];
  char *v61;
  char *v62;
  _BYTE *v63;

  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!sub_19C09EF48(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "no supported");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    v47 = 0;
    v2 = 0;
    while (1)
    {
      v45 = v2;
      if (qword_1EE4188F0 != -1)
        dispatch_once(&qword_1EE4188F0, &unk_1E3D25160);
      Instance = (uint64_t **)_CFRuntimeCreateInstance();
      Instance[3] = 0;
      Instance[2] = (uint64_t *)(Instance + 3);
      v53 = Instance + 2;
      Instance[6] = 0;
      Instance[4] = 0;
      Instance[5] = (uint64_t *)(Instance + 6);
      Instance[8] = 0;
      Instance[9] = 0;
      Instance[7] = 0;
      value = Instance;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v4 = *(char **)(a1 + 664);
      v51 = *(char **)(a1 + 672);
      if (v4 != v51)
        break;
LABEL_54:
      CFArrayAppendValue(theArray, value);
      CFRelease(value);
      if (v61)
        operator delete(v61);
      v2 = v45 + 1;
      v47 += 4;
      if (v45 + 1 >= *(int *)(a1 + 56))
        return theArray;
    }
    v5 = 0;
    v6 = 0;
    while (1)
    {
      __p = v4;
      v7 = sub_19C080A24(a1 + 584, (uint64_t)v4, (uint64_t)&unk_19C27ADD0, (__int128 **)&__p)[5];
      __p = v4;
      v8 = sub_19C0803AC(a1 + 624, (uint64_t)v4, (uint64_t)&unk_19C27ADD0, (__int128 **)&__p);
      v10 = v8[6];
      v11 = v8[7];
      v12 = v8[8];
      v13 = v8[9];
      v60[0] = v8[5];
      v9 = v60[0];
      v60[1] = v10;
      v60[2] = v11;
      v60[3] = v12;
      v60[4] = v13;
      sub_19C187658((uint64_t)v53, (__int128 *)v4, (uint64_t)v60);
      v14 = (v9 * v10 * v11 * v12 * v13);
      __p = 0;
      v58 = 0;
      v59 = 0;
      if (v14 << 32)
      {
        if (v14 << 32 < 0)
          sub_19C07DA0C();
        v15 = (int)v14;
        v16 = (char *)operator new((int)v14);
        v17 = &v16[v15];
        __p = v16;
        v59 = &v16[v15];
        bzero(v16, v15);
        v58 = v17;
      }
      v52 = v7;
      v18 = v9 * v10;
      v19 = v18;
      v20 = (v6 - v5) >> 2;
      v21 = v18 - v20;
      if (v18 <= v20)
      {
        if (v18 >= v20)
          goto LABEL_28;
        v6 = &v5[4 * v18];
      }
      else
      {
        if (v21 > (v63 - v6) >> 2)
        {
          if (v18 < 0)
            sub_19C07DA0C();
          v22 = (v63 - v5) >> 1;
          if (v22 <= v18)
            v22 = v18;
          if ((unint64_t)(v63 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          if (v22 >> 62)
            sub_19C07C7FC();
          v49 = v18;
          v50 = v22;
          v48 = operator new(4 * v22);
          v23 = &v48[4 * v20];
          bzero(v23, 4 * v21);
          if (v6 == v5)
          {
            v26 = &v48[4 * v20];
            v27 = v50;
            v28 = 4 * v21;
            v29 = v48;
          }
          else
          {
            v24 = v6 - 4 - v5;
            if (v24 < 0xBC)
            {
              v25 = v6;
              v26 = &v48[4 * v20];
              v27 = v50;
              v28 = 4 * v21;
              v29 = v48;
              goto LABEL_37;
            }
            v29 = v48;
            v30 = &v48[v6 - v5 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v48[v6 - v5 - 4]
               || &v6[-(v24 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4;
            if (v30 || (unint64_t)(v5 - v48) < 0x20)
            {
              v25 = v6;
              v26 = &v48[4 * v20];
              v27 = v50;
              v28 = 4 * v21;
              goto LABEL_37;
            }
            v35 = (v24 >> 2) + 1;
            v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
            v25 = &v6[-v36];
            v26 = &v23[-v36];
            v37 = &v48[4 * v20 - 16];
            v38 = v6 - 16;
            v39 = v35 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v40 = *(_OWORD *)v38;
              *(v37 - 1) = *((_OWORD *)v38 - 1);
              *v37 = v40;
              v37 -= 2;
              v38 -= 32;
              v39 -= 8;
            }
            while (v39);
            v41 = v35 == (v35 & 0x7FFFFFFFFFFFFFF8);
            v27 = v50;
            v28 = 4 * v21;
            if (!v41)
            {
              do
              {
LABEL_37:
                v31 = *((_DWORD *)v25 - 1);
                v25 -= 4;
                *((_DWORD *)v26 - 1) = v31;
                v26 -= 4;
              }
              while (v25 != v5);
            }
          }
          v61 = v26;
          v62 = &v23[v28];
          v6 = &v23[v28];
          v63 = &v29[4 * v27];
          if (v5)
            operator delete(v5);
          v5 = v26;
          v18 = v49;
          if (!v11)
            goto LABEL_47;
LABEL_41:
          if (v18)
          {
            v32 = 0;
            v33 = (const float *)(v52 + v47 * v18 * (int)v11);
            do
            {
              __B = 128.0 / *(float *)(a1 + 808);
              v54 = -127.1;
              __C = 127.1;
              v5 = v61;
              vDSP_vsmul(v33, 1, &__B, (float *)v61, 1, v19);
              vDSP_vclip((const float *)v5, 1, &v54, &__C, (float *)v5, 1, v19);
              vDSP_vfixr8((const float *)v5, 1, (char *)__p + v32, 1, v19);
              v32 += v19;
              v33 += v19;
              --v11;
            }
            while (v11);
          }
          else
          {
            v34 = 128.0 / *(float *)(a1 + 808);
            do
            {
              __B = v34;
              --v11;
            }
            while (v11);
          }
          goto LABEL_47;
        }
        bzero(v6, 4 * v21);
        v6 += 4 * v21;
      }
      v62 = v6;
LABEL_28:
      if (v11)
        goto LABEL_41;
LABEL_47:
      sub_19C1875B0(v53, (__int128 *)v4, (char **)&__p);
      if (__p)
      {
        v58 = __p;
        operator delete(__p);
      }
      v4 += 24;
      if (v4 == v51)
        goto LABEL_54;
    }
  }
  return theArray;
}

void sub_19C0A011C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A0130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 128);
  if (!v28)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v26 - 120) = v28;
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

void sub_19C0A0194(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t *v6;
  __int128 v7;
  void *__p[2];
  char v9;
  void **v10;

  sub_19C22E3BC(a1, a2, (uint64_t)__p);
  v5 = v9;
  if (v9 < 0)
  {
    if (__p[1])
    {
LABEL_3:
      v10 = __p;
      v6 = sub_19C0803AC(a1 + 728, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v10);
      v7 = *(_OWORD *)(v6 + 7);
      *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
      *(_OWORD *)(a3 + 16) = v7;
      *(_QWORD *)(a3 + 32) = v6[9];
      if ((v9 & 0x80) == 0)
        return;
LABEL_7:
      operator delete(__p[0]);
      return;
    }
  }
  else if (v9)
  {
    goto LABEL_3;
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v5 < 0)
    goto LABEL_7;
}

void sub_19C0A0240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0A025C(uint64_t a1)
{
  uint64_t result;
  uint64_t *v3;
  void **v4;
  void **v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = espresso_create_context();
  *(_QWORD *)(a1 + 280) = result;
  if (result)
  {
    result = espresso_create_plan();
    *(_QWORD *)(a1 + 272) = result;
    if (result)
    {
      v3 = (uint64_t *)(a1 + 256);
      if (espresso_plan_add_network() || *(_DWORD *)(a1 + 264) == -1)
      {
        return 0;
      }
      else
      {
        result = *v3;
        if (*v3)
        {
          v10 = 0;
          v11 = 0;
          v12 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
          c_network_get_input_names();
          c_network_get_output_names();
          *(_BYTE *)(a1 + 312) = 1;
          v4 = (void **)v10;
          if (v10)
          {
            v5 = v11;
            v6 = v10;
            if (v11 != v10)
            {
              do
              {
                if (*((char *)v5 - 1) < 0)
                  operator delete(*(v5 - 3));
                v5 -= 3;
              }
              while (v5 != v4);
              v6 = v10;
            }
            v11 = v4;
            operator delete(v6);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

void sub_19C0A07D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (a2)
  {
    *(_QWORD *)(v33 + 672) = v34;
    if (a19 < 0)
      operator delete(__p);
    sub_19C07AD50(&a20);
    sub_19C07AD50(&a23);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x19C0A02E0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0A0890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  std::string::size_type v12;
  std::string *v13;
  uint64_t v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  BOOL v21;
  uint64_t *v22;
  const void *v23;
  uint64_t v24;
  const void *v25;
  int v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::string __dst;

  v8 = *(char *)(a3 + 23);
  if (v8 < 0)
  {
    sub_19C07C6E8(&__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8))
        goto LABEL_9;
    }
    else if (*(_BYTE *)(a3 + 23))
    {
      goto LABEL_9;
    }
  }
  else
  {
    __dst = *(std::string *)a3;
    if ((_BYTE)v8)
      goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 24) != 1)
    goto LABEL_48;
  std::string::operator=(&__dst, (const std::string *)(*(_QWORD *)(a1 + 8) + 32));
LABEL_9:
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_48;
  v38 = a4;
  v10 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v11 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v12 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? HIBYTE(__dst.__r_.__value_.__r.__words[2])
      : __dst.__r_.__value_.__l.__size_;
  v13 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__dst
      : (std::string *)__dst.__r_.__value_.__r.__words[0];
  v14 = a1 + 16;
  do
  {
    v15 = *(char *)(v9 + 55);
    if (v15 >= 0)
      v16 = *(unsigned __int8 *)(v9 + 55);
    else
      v16 = *(_QWORD *)(v9 + 40);
    if (v15 >= 0)
      v17 = (const void *)(v9 + 32);
    else
      v17 = *(const void **)(v9 + 32);
    if (v12 >= v16)
      v18 = v16;
    else
      v18 = v12;
    v19 = memcmp(v17, v13, v18);
    v20 = v16 < v12;
    if (v19)
      v20 = v19 < 0;
    v21 = !v20;
    if (v20)
      v22 = (uint64_t *)(v9 + 8);
    else
      v22 = (uint64_t *)v9;
    if (v21)
      v14 = v9;
    v9 = *v22;
  }
  while (*v22);
  if (v14 == a1 + 16)
    goto LABEL_48;
  v25 = *(const void **)(v14 + 32);
  v24 = v14 + 32;
  v23 = v25;
  v26 = *(char *)(v24 + 23);
  if (v26 >= 0)
    v27 = *(unsigned __int8 *)(v24 + 23);
  else
    v27 = *(_QWORD *)(v24 + 8);
  if (v26 >= 0)
    v28 = (const void *)v24;
  else
    v28 = v23;
  if (v27 >= v12)
    v29 = v12;
  else
    v29 = v27;
  v30 = memcmp(v13, v28, v29);
  v31 = v12 < v27;
  if (v30)
    v31 = v30 < 0;
  if (v31)
  {
LABEL_48:
    v32 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_49;
    return v32;
  }
  *(_DWORD *)(a1 + 56) = *(_QWORD *)(v38 + 24);
  v39 = a2;
  v34 = *(_QWORD *)(a1 + 328);
  if (v34 >= *(_QWORD *)(a1 + 336))
  {
    *(_QWORD *)(a1 + 328) = sub_19C0A3840((char **)(a1 + 320), (uint64_t)&__dst, &v39, v38);
    v32 = 1;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v32;
    goto LABEL_49;
  }
  if (v10 < 0)
  {
    sub_19C07C6E8(*(_BYTE **)(a1 + 328), (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    v35 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_QWORD *)(v34 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    *(_OWORD *)v34 = v35;
  }
  *(_QWORD *)(v34 + 24) = a2;
  v36 = *(_OWORD *)v38;
  v37 = *(_OWORD *)(v38 + 16);
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v38 + 32);
  *(_OWORD *)(v34 + 32) = v36;
  *(_OWORD *)(v34 + 48) = v37;
  *(_QWORD *)(a1 + 328) = v34 + 72;
  *(_QWORD *)(a1 + 328) = v34 + 72;
  v32 = 1;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_49:
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v32;
}

void sub_19C0A0AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 328) = v19;
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0A0B00(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  void **v10;

  sub_19C22E3BC(a1, a2, (uint64_t)__p);
  v10 = __p;
  v3 = sub_19C0803AC(a1 + 728, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v10);
  v4 = v3[5];
  v5 = v3[6];
  v6 = v3[7];
  if (v9 < 0)
    operator delete(__p[0]);
  return (v4 * v5 * v6);
}

void sub_19C0A0B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0A0B94(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  void **v10;

  sub_19C22E6B8(a1, a2, (uint64_t)__p);
  v10 = __p;
  v3 = sub_19C0803AC(a1 + 768, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v10);
  v4 = v3[5];
  v5 = v3[6];
  v6 = v3[7];
  if (v9 < 0)
    operator delete(__p[0]);
  return (v4 * v5 * v6);
}

void sub_19C0A0C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0A0C28(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  uint64_t j;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  uint64_t k;
  unint64_t v15;
  char *v16;
  void **v17;
  void **v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  __int8 *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  unint64_t v40;
  int8x16_t v41;
  uint64_t v42;
  uint64_t v43;
  __int8 v44;
  _BOOL4 v45;
  const void *ValueAtIndex;
  uint64_t v47;
  uint64_t v48;
  std::string *v49;
  char *v50;
  unint64_t m;
  std::string *v52;
  char *v53;
  char *v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  std::string **v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t n;
  _QWORD *v74;
  uint64_t blob_shape;
  _BOOL4 v76;
  void *v77;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  _QWORD *v81;
  _QWORD *v82;
  BOOL v83;
  uint64_t v85;
  uint64_t kk;
  uint64_t v87;
  uint64_t v88;
  int8x16_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  unint64_t v97;
  __int128 v98;
  _DWORD *v99;
  int *v100;
  unint64_t v101;
  int v102;
  const void **v103;
  size_t v104;
  int v105;
  size_t v106;
  size_t v107;
  unint64_t v108;
  __int128 *p_dst;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t ii;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const void *v120;
  void *v121;
  int v122;
  CFIndex v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  const void *v132;
  CFIndex v133;
  int v134;
  uint64_t v135;
  int v136;
  _DWORD *v137;
  int *v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  __int128 *v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  _OWORD *v147;
  unint64_t v148;
  __int128 *v149;
  __int128 v150;
  _DWORD *v151;
  int *v152;
  unint64_t v153;
  int v154;
  uint64_t *v155;
  void *v156;
  _QWORD *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  CFIndex v162;
  const void *v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  unint64_t v167;
  float *v168;
  vDSP_Length v169;
  CFIndex v170;
  const void *v171;
  _QWORD *v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  void *v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  unint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  __int128 *v201;
  uint64_t v202;
  __int128 *v203;
  char *v204;
  __int128 *v205;
  _OWORD *v206;
  unint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  int8x16_t *v213;
  uint64_t v214;
  int8x16_t *v215;
  char *v216;
  int8x16_t *v217;
  int8x16_t *v218;
  unint64_t v219;
  int8x16_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  _BOOL4 v224;
  uint64_t *v225;
  void *v226;
  _QWORD *v227;
  uint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t jj;
  uint64_t v236;
  __int8 v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  const void **v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  int v247;
  _QWORD *v248;
  uint64_t v249;
  int v250;
  uint64_t v252;
  _QWORD *v253;
  int64x2_t v254;
  uint64_t v255;
  const void **v256;
  uint64_t v257;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  __int128 *__dst;
  size_t v264;
  unint64_t v265;
  __int128 __B;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  void *__p;
  char *v278;
  char *v279;
  std::string *v280;
  std::string *v281;
  char *v282;
  char *v283;
  char *v284;
  unint64_t v285;
  int8x16_t v286;
  int8x16_t v287;
  uint64_t v288;
  __int128 *v289[4];

  v2 = a1;
  v289[1] = *(__int128 **)MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 384);
  if (*(_QWORD *)(a1 + 408))
  {
    v4 = *(void ***)(a1 + 400);
    if (v4)
    {
      do
      {
        v17 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v17;
      }
      while (v17);
    }
    *(_QWORD *)(a1 + 400) = 0;
    v5 = *(_QWORD *)(a1 + 392);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*v3 + 8 * i) = 0;
    }
    v2 = a1;
    *(_QWORD *)(a1 + 408) = 0;
  }
  v7 = (_QWORD *)(v2 + 344);
  if (*(_QWORD *)(v2 + 368))
  {
    v8 = *(void ***)(v2 + 360);
    if (v8)
    {
      do
      {
        v18 = (void **)*v8;
        if (*((char *)v8 + 39) < 0)
          operator delete(v8[2]);
        operator delete(v8);
        v8 = v18;
      }
      while (v18);
    }
    *(_QWORD *)(a1 + 360) = 0;
    v9 = *(_QWORD *)(a1 + 352);
    if (v9)
    {
      for (j = 0; j != v9; ++j)
        *(_QWORD *)(*v7 + 8 * j) = 0;
    }
    v2 = a1;
    *(_QWORD *)(a1 + 368) = 0;
  }
  v249 = (uint64_t)v7;
  v11 = (_QWORD *)(v2 + 424);
  if (*(_QWORD *)(v2 + 448))
  {
    v12 = *(void ***)(v2 + 440);
    if (v12)
    {
      do
      {
        v19 = (void **)*v12;
        if (*((char *)v12 + 39) < 0)
          operator delete(v12[2]);
        operator delete(v12);
        v12 = v19;
      }
      while (v19);
    }
    *(_QWORD *)(a1 + 440) = 0;
    v13 = *(_QWORD *)(a1 + 432);
    if (v13)
    {
      for (k = 0; k != v13; ++k)
        *(_QWORD *)(*v11 + 8 * k) = 0;
    }
    v2 = a1;
    *(_QWORD *)(a1 + 448) = 0;
  }
  if (!*(_BYTE *)(v2 + 312))
    espresso_plan_build_clean();
  v15 = *(_QWORD *)(v2 + 712) - 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(v2 + 328) - *(_QWORD *)(v2 + 320)) >> 3);
  v282 = 0;
  v283 = 0;
  v284 = 0;
  v244 = (uint64_t)v11;
  v245 = (uint64_t)v3;
  if (v15)
  {
    if (v15 >> 62)
      sub_19C07DA0C();
    v16 = (char *)operator new(4 * v15);
    v282 = v16;
    v284 = &v16[4 * v15];
    bzero(v16, 4 * v15);
    v283 = v284;
    v262 = (char *)operator new(4 * v15);
    bzero(v262, 4 * v15);
    v261 = (char *)operator new(4 * v15);
    bzero(v261, 4 * v15);
    v260 = (char *)operator new(4 * v15);
    bzero(v260, 4 * v15);
    v259 = (char *)operator new(4 * v15);
    bzero(v259, 4 * v15);
    v246 = operator new(4 * v15);
    memset_pattern16(v246, &unk_19C2770A0, 4 * v15);
  }
  else
  {
    v16 = 0;
    v261 = 0;
    v262 = 0;
    v259 = 0;
    v260 = 0;
    v246 = 0;
  }
  sub_19C0A2984(&v280, v15);
  v21 = *(_QWORD *)(a1 + 320);
  v20 = *(_QWORD *)(a1 + 328);
  if (v21 == v20)
  {
    LODWORD(v23) = 0;
    v25 = 0;
    v27 = *(char **)(a1 + 704);
    if (!v27)
      goto LABEL_68;
    goto LABEL_40;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = *(_QWORD *)(v21 + 64);
    v25 = *(_DWORD *)(v21 + 56);
    v26 = 4 * v23;
    *(_DWORD *)&v16[v26] = *(_QWORD *)(v21 + 32);
    *(_DWORD *)&v262[v26] = *(_QWORD *)(v21 + 40);
    *(_DWORD *)&v261[v26] = *(_QWORD *)(v21 + 48);
    *(_DWORD *)&v260[v26] = v25;
    *(_DWORD *)&v259[v26] = v24;
    std::string::operator=(&v280[v22], (const std::string *)v21);
    ++v23;
    v21 += 72;
    ++v22;
  }
  while (v21 != v20);
  v27 = *(char **)(a1 + 704);
  if (v27)
  {
LABEL_40:
    v28 = v23;
    do
    {
      if (v27[39] < 0)
      {
        v30 = (int8x16_t *)*((_QWORD *)v27 + 2);
        v29 = *((_QWORD *)v27 + 3);
      }
      else
      {
        v29 = v27[39];
        v30 = (int8x16_t *)(v27 + 16);
      }
      v31 = (uint64_t)v30->i64 + v29 - 3;
      v32 = v29 - 3;
      if ((unint64_t)(v29 - 3) > 0x7FFFFFFFFFFFFFF7)
        sub_19C07C774();
      v33 = *((_QWORD *)v27 + 6);
      v252 = *((_QWORD *)v27 + 5);
      v255 = *((_QWORD *)v27 + 7);
      v34 = *((_QWORD *)v27 + 9);
      if (v32 > 0x16)
      {
        v42 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17)
          v42 = v32 | 7;
        v43 = v42 + 1;
        v35 = (int8x16_t *)operator new(v42 + 1);
        v286.i64[1] = v32;
        v287.i64[0] = v43 | 0x8000000000000000;
        v286.i64[0] = (uint64_t)v35;
        if (v30 == (int8x16_t *)v31)
        {
LABEL_57:
          v36 = v35;
          goto LABEL_60;
        }
      }
      else
      {
        v287.i8[7] = v29 - 3;
        v35 = &v286;
        if (v30 == (int8x16_t *)v31)
          goto LABEL_57;
      }
      if (v32 < 0x20 || (unint64_t)((char *)v35 - (char *)v30) < 0x20)
      {
        v36 = v35;
        v37 = (__int8 *)v30;
      }
      else
      {
        v36 = (int8x16_t *)((char *)v35 + (v32 & 0xFFFFFFFFFFFFFFE0));
        v37 = &v30->i8[v32 & 0xFFFFFFFFFFFFFFE0];
        v38 = v30 + 1;
        v39 = v35 + 1;
        v40 = v32 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v41 = *v38;
          v39[-1] = v38[-1];
          *v39 = v41;
          v38 += 2;
          v39 += 2;
          v40 -= 32;
        }
        while (v40);
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_60;
      }
      do
      {
        v44 = *v37++;
        v36->i8[0] = v44;
        v36 = (int8x16_t *)((char *)v36 + 1);
      }
      while (v37 != (__int8 *)v31);
LABEL_60:
      v36->i8[0] = 0;
      if (a2)
      {
        v45 = sub_19C09EA10((uint64_t)v35, (char **)v27 + 2);
        if (v45 || sub_19C09EBE8(v45, (uint64_t)(v27 + 16)))
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a2, 0);
          sub_19C187458((uint64_t)ValueAtIndex + 16, (const void **)&v286, (uint64_t)&__B);
          if (sub_19C09EA10(v47, (char **)v27 + 2))
            LODWORD(v33) = DWORD2(__B);
          else
            LODWORD(v34) = v268;
        }
      }
      v48 = 4 * v28;
      *(_DWORD *)&v282[v48] = v252;
      *(_DWORD *)&v262[v48] = v33;
      *(_DWORD *)&v261[v48] = v255;
      *(_DWORD *)&v260[v48] = v25;
      *(_DWORD *)&v259[v48] = v34;
      std::string::operator=(&v280[v28], (const std::string *)(v27 + 16));
      if (v287.i8[7] < 0)
        operator delete((void *)v286.i64[0]);
      ++v28;
      v27 = *(char **)v27;
    }
    while (v27);
  }
LABEL_68:
  __p = 0;
  v278 = 0;
  v279 = 0;
  v49 = v280;
  if (v281 != v280)
  {
    v50 = 0;
    for (m = 0; 0xAAAAAAAAAAAAAAABLL * (((char *)v281 - (char *)v280) >> 3) > m; ++m)
    {
      v52 = &v49[m];
      if (SHIBYTE(v52->__r_.__value_.__r.__words[2]) < 0)
      {
        v52 = (std::string *)v52->__r_.__value_.__r.__words[0];
        v53 = v279;
        if (v50 >= v279)
        {
LABEL_76:
          v54 = (char *)__p;
          v55 = v50 - (_BYTE *)__p;
          v56 = (v50 - (_BYTE *)__p) >> 3;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 61)
            sub_19C07DA0C();
          v58 = v53 - (_BYTE *)__p;
          if (v58 >> 2 > v57)
            v57 = v58 >> 2;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            if (v59 >> 61)
              sub_19C07C7FC();
            v60 = operator new(8 * v59);
            v61 = (std::string **)&v60[8 * v56];
            *v61 = v52;
            v62 = (uint64_t)(v61 + 1);
            if (v50 != v54)
            {
LABEL_85:
              v63 = v50 - 8 - v54;
              if (v63 < 0x168)
              {
                v64 = v50;
                goto LABEL_87;
              }
              if (&v60[v55 - 8 - (v63 & 0xFFFFFFFFFFFFFFF8)] > &v60[v55 - 8])
              {
                v64 = v50;
                goto LABEL_87;
              }
              if (&v50[-(v63 & 0xFFFFFFFFFFFFFFF8) - 8] > v50 - 8)
              {
                v64 = v50;
                goto LABEL_87;
              }
              if ((unint64_t)(v50 - &v60[v55]) < 0x20)
              {
                v64 = v50;
                goto LABEL_87;
              }
              v66 = (v63 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v64 = &v50[-v67];
              v61 = (std::string **)((char *)v61 - v67);
              v68 = &v60[8 * v56 - 16];
              v69 = v50 - 16;
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *(_OWORD *)v69;
                *(v68 - 1) = *((_OWORD *)v69 - 1);
                *v68 = v71;
                v68 -= 2;
                v69 -= 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_87:
                  v65 = (std::string *)*((_QWORD *)v64 - 1);
                  v64 -= 8;
                  *--v61 = v65;
                }
                while (v64 != v54);
              }
              v50 = (char *)__p;
              __p = v61;
              v278 = (char *)v62;
              v279 = &v60[8 * v59];
              if (!v50)
              {
LABEL_93:
                v50 = (char *)v62;
                goto LABEL_71;
              }
LABEL_92:
              operator delete(v50);
              goto LABEL_93;
            }
          }
          else
          {
            v60 = 0;
            v61 = (std::string **)(8 * v56);
            *(_QWORD *)(8 * v56) = v52;
            v62 = 8 * v56 + 8;
            if (v50 != v54)
              goto LABEL_85;
          }
          __p = v61;
          v278 = (char *)v62;
          v279 = &v60[8 * v59];
          if (!v50)
            goto LABEL_93;
          goto LABEL_92;
        }
      }
      else
      {
        v53 = v279;
        if (v50 >= v279)
          goto LABEL_76;
      }
      *(_QWORD *)v50 = v52;
      v50 += 8;
LABEL_71:
      v278 = v50;
      v49 = v280;
    }
  }
  if (espresso_network_change_input_blob_shapes_seq_rank())
    goto LABEL_109;
  v72 = *(_QWORD *)(a1 + 288);
  for (n = *(_QWORD *)(a1 + 296); v72 != n; v72 += 24)
    espresso_network_declare_output();
  v74 = *(_QWORD **)(a1 + 32);
  v253 = (_QWORD *)(a1 + 40);
  if (v74 != (_QWORD *)(a1 + 40))
  {
    do
    {
      espresso_network_declare_output();
      v81 = (_QWORD *)v74[1];
      if (v81)
      {
        do
        {
          v82 = v81;
          v81 = (_QWORD *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = (_QWORD *)v74[2];
          v83 = *v82 == (_QWORD)v74;
          v74 = v82;
        }
        while (!v83);
      }
      v74 = v82;
    }
    while (v82 != v253);
  }
  blob_shape = espresso_plan_build();
  if ((_DWORD)blob_shape)
    goto LABEL_109;
  *(_BYTE *)(a1 + 312) = 0;
  v88 = *(_QWORD *)(a1 + 320);
  v87 = *(_QWORD *)(a1 + 328);
  while (v88 != v87)
  {
    if ((sub_19C09EF48(a1) & 1) != 0)
    {
      v276 = 0;
      v274 = 0u;
      v275 = 0u;
      v273 = 0u;
      v271 = 0u;
      v272 = 0u;
      v269 = 0u;
      v270 = 0u;
      v267 = 0u;
      v268 = 0u;
      __B = 0u;
      v89 = vextq_s8(*(int8x16_t *)(v88 + 40), *(int8x16_t *)(v88 + 40), 8uLL);
      v286 = vextq_s8(*(int8x16_t *)(v88 + 56), *(int8x16_t *)(v88 + 56), 8uLL);
      v287 = v89;
      v288 = *(_QWORD *)(v88 + 32);
      espresso_buffer_pack_tensor_shape();
      *(_QWORD *)&__B = *(_QWORD *)(v88 + 24);
      LODWORD(v276) = 65568;
      blob_shape = espresso_network_bind_buffer();
    }
    else
    {
      if (espresso_network_bind_buffer())
        goto LABEL_109;
      v90 = (*(_DWORD *)(v88 + 32)
                         * *(_DWORD *)(v88 + 40)
                         * *(_DWORD *)(v88 + 48)
                         * *(_DWORD *)(v88 + 56)
                         * *(_DWORD *)(v88 + 64));
      v91 = (int)v90;
      if ((_QWORD)v273 * *((_QWORD *)&v275 + 1) != (int)v90)
        goto LABEL_109;
      if (v90 << 32)
      {
        v92 = 0;
        v93 = __B;
        v94 = *(_QWORD *)(v88 + 24);
        if (v91 <= 1)
          v91 = 1;
        if (v91 < 8)
          goto LABEL_161;
        if ((unint64_t)(__B - v94) < 0x20)
          goto LABEL_161;
        v92 = v91 & 0xFFFFFFFFFFFFFFF8;
        v95 = (__int128 *)(v94 + 16);
        v96 = (_OWORD *)(__B + 16);
        v97 = v91 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v98 = *v95;
          *(v96 - 1) = *(v95 - 1);
          *v96 = v98;
          v95 += 2;
          v96 += 2;
          v97 -= 8;
        }
        while (v97);
        if (v91 != v92)
        {
LABEL_161:
          v99 = (_DWORD *)(v93 + 4 * v92);
          v100 = (int *)(v94 + 4 * v92);
          v101 = v91 - v92;
          do
          {
            v102 = *v100++;
            *v99++ = v102;
            --v101;
          }
          while (v101);
        }
      }
      blob_shape = (uint64_t)sub_19C080EFC(v249, v88, v88, (uint64_t)&__B);
    }
    v88 += 72;
  }
  v103 = *(const void ***)(a1 + 664);
  v243 = *(const void ***)(a1 + 672);
  if (v103 != v243)
  {
    v242 = a1 + 544;
    v248 = (_QWORD *)(a1 + 504);
    do
    {
      v104 = *((unsigned __int8 *)v103 + 23);
      v105 = (char)v104;
      v256 = v103;
      v106 = (size_t)v103[1];
      if ((v104 & 0x80u) == 0)
        v107 = v104;
      else
        v107 = v106;
      v108 = v107 + 3;
      if (v107 + 3 > 0x7FFFFFFFFFFFFFF7)
        sub_19C07C774();
      if (v108 >= 0x17)
      {
        v118 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17)
          v118 = v108 | 7;
        v119 = v118 + 1;
        p_dst = (__int128 *)operator new(v118 + 1);
        v264 = v107 + 3;
        v265 = v119 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        v264 = 0;
        v265 = 0;
        __dst = 0;
        p_dst = (__int128 *)&__dst;
        HIBYTE(v265) = v107 + 3;
        if (!v107)
        {
          LODWORD(__dst) = 7235935;
          if (sub_19C09EA10(blob_shape, (char **)&__dst))
            goto LABEL_174;
          goto LABEL_191;
        }
      }
      if (v105 >= 0)
        v120 = v256;
      else
        v120 = *v256;
      v121 = memmove(p_dst, v120, v107);
      *(_DWORD *)((char *)p_dst + v107) = 7235935;
      if (sub_19C09EA10((uint64_t)v121, (char **)&__dst))
      {
LABEL_174:
        if (espresso_network_query_blob_shape())
          goto LABEL_336;
        if (v285)
        {
          v110 = v286.i64[0];
          *(_QWORD *)&__B = v256;
          sub_19C0803AC(v242, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[9] = v110;
          if (v285 >= 2)
          {
            v111 = v286.i64[1];
            *(_QWORD *)&__B = v256;
            v110 *= v286.i64[1];
            sub_19C0803AC(v242, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[8] = v111;
            if (v285 >= 3)
            {
              v112 = v287.i64[0];
              *(_QWORD *)&__B = v256;
              v110 *= v287.i64[0];
              sub_19C0803AC(v242, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[7] = v112;
              if (v285 >= 4)
              {
                v113 = v287.i64[1];
                *(_QWORD *)&__B = v256;
                v110 *= v287.i64[1];
                sub_19C0803AC(v242, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[6] = v113;
                if (v285 >= 5)
                {
                  v114 = v288;
                  *(_QWORD *)&__B = v256;
                  v110 *= v288;
                  sub_19C0803AC(v242, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[5] = v114;
                  if (v285 >= 6)
                  {
                    v115 = 9;
                    for (ii = 5; ii < v285; ++ii)
                    {
                      v117 = v286.i64[ii];
                      *(_QWORD *)&__B = v256;
                      v110 *= v117;
                      sub_19C0803AC(v242, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[v115--] = v117;
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v110 = 1;
        }
        if (!sub_19C0A3AD8(v248, (uint64_t)v256))
        {
          *(_QWORD *)&__B = v256;
          v155 = sub_19C080A24((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
          v157 = v155 + 5;
          v156 = (void *)v155[5];
          if (v156)
          {
            v155[6] = (uint64_t)v156;
            operator delete(v156);
          }
          *v157 = 0;
          v157[1] = 0;
          v157[2] = 0;
        }
        *(_QWORD *)&__B = v256;
        v158 = sub_19C080A24((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
        if (v110 > (v158[6] - v158[5]) >> 2)
        {
          *(_QWORD *)&__B = v256;
          v159 = sub_19C080A24((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
          v160 = v159[5];
          v161 = (v159[6] - v160) >> 2;
          if (v110 <= v161)
          {
            if (v110 < v161)
              v159[6] = v160 + 4 * v110;
          }
          else
          {
            sub_19C0A36A4((uint64_t)(v159 + 5), v110 - v161);
          }
        }
        if (a2 && v110 && *(int *)(a1 + 56) >= 1)
        {
          v162 = 0;
          do
          {
            v163 = CFArrayGetValueAtIndex(a2, v162);
            v164 = *(int *)(a1 + 56);
            v165 = sub_19C18731C((uint64_t)v163 + 16, v256);
            *(_QWORD *)&__B = v256;
            v166 = sub_19C080A24((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
            v167 = v110 / v164;
            v168 = (float *)(v166[5] + 4 * (int)(v162 * (v110 / v164)));
            v169 = (int)v167;
            vDSP_vflt8((const char *)v165, 1, v168, 1, (int)v167);
            *(float *)&__B = *(float *)(a1 + 808) * 0.0078125;
            vDSP_vsmul(v168, 1, (const float *)&__B, v168, 1, v169);
            ++v162;
          }
          while (v162 < *(int *)(a1 + 56));
        }
        v276 = 0;
        v274 = 0u;
        v275 = 0u;
        v273 = 0u;
        v271 = 0u;
        v272 = 0u;
        v269 = 0u;
        v270 = 0u;
        v267 = 0u;
        v268 = 0u;
        __B = 0u;
        espresso_buffer_pack_tensor_shape();
        v289[0] = (__int128 *)v256;
        *(_QWORD *)&__B = sub_19C080A24((uint64_t)v248, (uint64_t)v256, (uint64_t)&unk_19C27ADD0, v289)[5];
        LODWORD(v276) = 65568;
        blob_shape = espresso_network_bind_buffer();
        if ((_DWORD)blob_shape)
        {
LABEL_336:
          if (SHIBYTE(v265) < 0)
          {
            operator delete(__dst);
            v76 = 1;
            v77 = __p;
            if (!__p)
              goto LABEL_111;
LABEL_110:
            operator delete(v77);
            goto LABEL_111;
          }
LABEL_109:
          v76 = 1;
          v77 = __p;
          if (!__p)
            goto LABEL_111;
          goto LABEL_110;
        }
        goto LABEL_230;
      }
LABEL_191:
      blob_shape = espresso_network_bind_buffer();
      if ((_DWORD)blob_shape)
        goto LABEL_336;
      if (a2 && (int)v273 >= 1 && *(int *)(a1 + 56) >= 1)
      {
        v122 = DWORD2(v271) * v271 * v272;
        if (v122 > 0)
        {
          v250 = 0;
          v123 = 0;
          v124 = __B;
          v125 = v122;
          v126 = v273;
          v127 = (DWORD2(v271) * v271 * v272);
          v128 = 4 * v122;
          v247 = DWORD2(v271) * v271 * v272;
          v129 = v122 & 7;
          v130 = v127 - ((*((_QWORD *)&v271 + 1) * v271 * v272) & 7);
          v131 = __B + 16;
          while (1)
          {
            v132 = CFArrayGetValueAtIndex(a2, v123);
            blob_shape = (uint64_t)sub_19C18731C((uint64_t)v132 + 16, v256);
            v133 = *(int *)(a1 + 56);
            v134 = v133 * v247;
            if (v127 >= 8)
              break;
            v135 = 0;
            v136 = v250;
            do
            {
              v137 = (_DWORD *)(v124 + 4 * v136);
              v138 = (int *)blob_shape;
              v139 = v127;
              do
              {
                v140 = *v138++;
                *v137++ = v140;
                --v139;
              }
              while (v139);
              ++v135;
              v136 += v134;
              blob_shape += v128;
            }
            while (v135 != v126);
LABEL_197:
            ++v123;
            v250 += v247;
            if (v123 >= v133)
              goto LABEL_230;
          }
          v141 = 0;
          v142 = 0;
          v143 = (__int128 *)(blob_shape + 16);
          v144 = v250;
          while (2)
          {
            v145 = v144;
            if ((unint64_t)(v124 + 4 * (v247 * (int)v123 + (int)v142 * v134) - (blob_shape + v128 * v142)) < 0x20)
            {
              v146 = 0;
              goto LABEL_211;
            }
            v147 = (_OWORD *)(v131 + 4 * v144);
            v148 = v130;
            v149 = v143;
            do
            {
              v150 = *v149;
              *(v147 - 1) = *(v149 - 1);
              *v147 = v150;
              v149 += 2;
              v147 += 2;
              v148 -= 8;
            }
            while (v148);
            v146 = v130;
            if (v129)
            {
LABEL_211:
              v151 = (_DWORD *)(v124 + 4 * (v146 + v145));
              v152 = (int *)(blob_shape + 4 * (v146 + v141));
              v153 = v127 - v146;
              do
              {
                v154 = *v152++;
                *v151++ = v154;
                --v153;
              }
              while (v153);
            }
            ++v142;
            v143 = (__int128 *)((char *)v143 + v128);
            v144 = v145 + v134;
            v141 += v125;
            if (v142 == v126)
              goto LABEL_197;
            continue;
          }
        }
        v170 = 0;
        do
        {
          v171 = CFArrayGetValueAtIndex(a2, v170);
          blob_shape = (uint64_t)sub_19C18731C((uint64_t)v171 + 16, v256);
          ++v170;
        }
        while (v170 < *(int *)(a1 + 56));
      }
LABEL_230:
      if (SHIBYTE(v265) < 0)
        operator delete(__dst);
      v103 = v256 + 3;
    }
    while (v256 + 3 != v243);
  }
  v172 = *(_QWORD **)(a1 + 32);
  if (v172 != v253)
  {
    v173 = (_QWORD *)(a1 + 464);
    while (1)
    {
      if ((sub_19C09EF48(a1) & 1) == 0)
      {
        if (espresso_network_bind_buffer())
          goto LABEL_109;
        blob_shape = (uint64_t)sub_19C080EFC(v245, (uint64_t)(v172 + 4), (uint64_t)(v172 + 4), (uint64_t)&__B);
        goto LABEL_261;
      }
      if (!sub_19C0A3AD8(v173, (uint64_t)(v172 + 4)))
      {
        *(_QWORD *)&__B = v172 + 4;
        v176 = sub_19C080A24((uint64_t)v173, (uint64_t)(v172 + 4), (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
        v178 = v176 + 5;
        v177 = (void *)v176[5];
        if (v177)
        {
          v176[6] = (uint64_t)v177;
          operator delete(v177);
        }
        *v178 = 0;
        v178[1] = 0;
        v178[2] = 0;
      }
      if (espresso_network_query_blob_shape())
        goto LABEL_109;
      if (!v289[0])
      {
        v175 = 1;
        goto LABEL_255;
      }
      if (v289[0] == (__int128 *)1)
        break;
      v174 = (unint64_t)v289[0] & 0xFFFFFFFFFFFFFFFELL;
      v179 = (unint64_t)v289[0] & 0xFFFFFFFFFFFFFFFELL;
      v180 = &v286.i64[1];
      v181 = 1;
      v182 = 1;
      do
      {
        v181 *= *(v180 - 1);
        v182 *= *v180;
        v180 += 2;
        v179 -= 2;
      }
      while (v179);
      v175 = v182 * v181;
      if (v289[0] != (__int128 *)v174)
        goto LABEL_253;
LABEL_255:
      *(_QWORD *)&__B = v172 + 4;
      v186 = sub_19C080A24((uint64_t)v173, (uint64_t)(v172 + 4), (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
      if (v175 > (v186[6] - v186[5]) >> 2)
      {
        *(_QWORD *)&__B = v172 + 4;
        v187 = sub_19C080A24((uint64_t)v173, (uint64_t)(v172 + 4), (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
        v188 = v187[5];
        v189 = (v187[6] - v188) >> 2;
        if (v175 <= v189)
        {
          if (v175 < v189)
            v187[6] = v188 + 4 * v175;
        }
        else
        {
          sub_19C0A36A4((uint64_t)(v187 + 5), v175 - v189);
        }
      }
      v276 = 0;
      v274 = 0u;
      v275 = 0u;
      v273 = 0u;
      v271 = 0u;
      v272 = 0u;
      v269 = 0u;
      v270 = 0u;
      v267 = 0u;
      v268 = 0u;
      __B = 0u;
      espresso_buffer_pack_tensor_shape();
      __dst = (__int128 *)(v172 + 4);
      *(_QWORD *)&__B = sub_19C080A24((uint64_t)v173, (uint64_t)(v172 + 4), (uint64_t)&unk_19C27ADD0, &__dst)[5];
      LODWORD(v276) = 65568;
      blob_shape = espresso_network_bind_buffer();
      if ((_DWORD)blob_shape)
        goto LABEL_109;
LABEL_261:
      v190 = (_QWORD *)v172[1];
      if (v190)
      {
        do
        {
          v191 = v190;
          v190 = (_QWORD *)*v190;
        }
        while (v190);
      }
      else
      {
        do
        {
          v191 = (_QWORD *)v172[2];
          v83 = *v191 == (_QWORD)v172;
          v172 = v191;
        }
        while (!v83);
      }
      v172 = v191;
      if (v191 == v253)
        goto LABEL_267;
    }
    v174 = 0;
    v175 = 1;
LABEL_253:
    v183 = &v286.i64[v174];
    v184 = (char *)v289[0] - v174;
    do
    {
      v185 = *v183++;
      v175 *= v185;
      --v184;
    }
    while (v184);
    goto LABEL_255;
  }
LABEL_267:
  v192 = *(_QWORD *)(a1 + 288);
  v193 = *(_QWORD *)(a1 + 296);
  if (v192 != v193)
  {
    v194 = (_QWORD *)(a1 + 584);
    v257 = a1 + 624;
    v254 = vdupq_n_s64(1uLL);
    while (1)
    {
      if (sub_19C09EA10(blob_shape, (char **)v192))
      {
        if (*(char *)(v192 + 23) < 0)
        {
          v196 = *(char **)v192;
          v195 = *(_QWORD *)(v192 + 8);
        }
        else
        {
          v195 = *(unsigned __int8 *)(v192 + 23);
          v196 = (char *)v192;
        }
        v199 = (uint64_t)&v196[v195 - 4];
        v200 = v195 - 4;
        if ((unint64_t)(v195 - 4) > 0x7FFFFFFFFFFFFFF7)
          sub_19C07C774();
        if (v200 > 0x16)
        {
          v209 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v200 | 7) != 0x17)
            v209 = v200 | 7;
          v210 = v209 + 1;
          v201 = (__int128 *)operator new(v209 + 1);
          v264 = v195 - 4;
          v265 = v210 | 0x8000000000000000;
          __dst = v201;
          if (v196 == (char *)v199)
            goto LABEL_291;
LABEL_282:
          v202 = v195 - 4;
          if ((unint64_t)(v195 - 4) < 0x20 || (unint64_t)((char *)v201 - v196) < 0x20)
          {
            v203 = v201;
            v204 = v196;
          }
          else
          {
            v203 = (__int128 *)((char *)v201 + (v202 & 0xFFFFFFFFFFFFFFE0));
            v204 = &v196[v202 & 0xFFFFFFFFFFFFFFE0];
            v205 = (__int128 *)(v196 + 16);
            v206 = v201 + 1;
            v207 = v202 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v208 = *v205;
              *(v206 - 1) = *(v205 - 1);
              *v206 = v208;
              v205 += 2;
              v206 += 2;
              v207 -= 32;
            }
            while (v207);
            if (v202 == (v202 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_308;
          }
          do
          {
            v223 = *v204++;
            *(_BYTE *)v203 = v223;
            v203 = (__int128 *)((char *)v203 + 1);
          }
          while (v204 != (char *)v199);
          goto LABEL_308;
        }
        HIBYTE(v265) = v195 - 4;
        v201 = (__int128 *)&__dst;
        if (v196 != (char *)v199)
          goto LABEL_282;
LABEL_291:
        v203 = v201;
LABEL_308:
        *(_BYTE *)v203 = 0;
        if (!sub_19C0A3AD8(v194, (uint64_t)&__dst))
        {
          *(_QWORD *)&__B = &__dst;
          v225 = sub_19C080A24((uint64_t)v194, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
          v227 = v225 + 5;
          v226 = (void *)v225[5];
          if (v226)
          {
            v225[6] = (uint64_t)v226;
            operator delete(v226);
          }
          *v227 = 0;
          v227[1] = 0;
          v227[2] = 0;
          *(_QWORD *)&__B = &__dst;
          v228 = sub_19C0803AC(v257, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
          *(int64x2_t *)(v228 + 5) = v254;
          *(int64x2_t *)(v228 + 7) = v254;
          v228[9] = 1;
        }
        blob_shape = espresso_network_query_blob_shape();
        if ((_DWORD)blob_shape)
        {
          v224 = 1;
          if (SHIBYTE(v265) < 0)
            goto LABEL_269;
        }
        else
        {
          if (v285)
          {
            v229 = v286.i64[0];
            *(_QWORD *)&__B = &__dst;
            sub_19C0803AC(v257, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[9] = v229;
            if (v285 >= 2)
            {
              v230 = v286.i64[1];
              *(_QWORD *)&__B = &__dst;
              v229 *= v286.i64[1];
              sub_19C0803AC(v257, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[8] = v230;
              if (v285 >= 3)
              {
                v231 = v287.i64[0];
                *(_QWORD *)&__B = &__dst;
                v229 *= v287.i64[0];
                sub_19C0803AC(v257, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[7] = v231;
                if (v285 >= 4)
                {
                  v232 = v287.i64[1];
                  *(_QWORD *)&__B = &__dst;
                  v229 *= v287.i64[1];
                  sub_19C0803AC(v257, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[6] = v232;
                  if (v285 >= 5)
                  {
                    v233 = v288;
                    *(_QWORD *)&__B = &__dst;
                    v229 *= v288;
                    sub_19C0803AC(v257, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[5] = v233;
                    if (v285 >= 6)
                    {
                      v234 = 9;
                      for (jj = 5; jj < v285; ++jj)
                      {
                        v236 = v286.i64[jj];
                        *(_QWORD *)&__B = &__dst;
                        v229 *= v236;
                        sub_19C0803AC(v257, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B)[v234--] = v236;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            v229 = 1;
          }
          *(_QWORD *)&__B = &__dst;
          v238 = sub_19C080A24((uint64_t)v194, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
          if (v229 > (v238[6] - v238[5]) >> 2)
          {
            *(_QWORD *)&__B = &__dst;
            v239 = sub_19C080A24((uint64_t)v194, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, (__int128 **)&__B);
            v240 = v239[5];
            v241 = (v239[6] - v240) >> 2;
            if (v229 <= v241)
            {
              if (v229 < v241)
                v239[6] = v240 + 4 * v229;
            }
            else
            {
              sub_19C0A36A4((uint64_t)(v239 + 5), v229 - v241);
            }
          }
          v276 = 0;
          v274 = 0u;
          v275 = 0u;
          v273 = 0u;
          v271 = 0u;
          v272 = 0u;
          v269 = 0u;
          v270 = 0u;
          v267 = 0u;
          v268 = 0u;
          __B = 0u;
          espresso_buffer_pack_tensor_shape();
          v289[0] = (__int128 *)&__dst;
          *(_QWORD *)&__B = sub_19C080A24((uint64_t)v194, (uint64_t)&__dst, (uint64_t)&unk_19C27ADD0, v289)[5];
          LODWORD(v276) = 65568;
          blob_shape = espresso_network_bind_buffer();
          v224 = blob_shape != 0;
          if (SHIBYTE(v265) < 0)
LABEL_269:
            operator delete(__dst);
        }
        if (v224)
          goto LABEL_109;
        goto LABEL_271;
      }
      if (espresso_network_bind_buffer())
        goto LABEL_109;
      if (*(char *)(v192 + 23) < 0)
      {
        v198 = *(char **)v192;
        v197 = *(_QWORD *)(v192 + 8);
      }
      else
      {
        v197 = *(unsigned __int8 *)(v192 + 23);
        v198 = (char *)v192;
      }
      v211 = (uint64_t)&v198[v197 - 4];
      v212 = v197 - 4;
      if ((unint64_t)(v197 - 4) > 0x7FFFFFFFFFFFFFF7)
        sub_19C07C774();
      if (v212 > 0x16)
      {
        v221 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v212 | 7) != 0x17)
          v221 = v212 | 7;
        v222 = v221 + 1;
        v213 = (int8x16_t *)operator new(v221 + 1);
        v286.i64[1] = v197 - 4;
        v287.i64[0] = v222 | 0x8000000000000000;
        v286.i64[0] = (uint64_t)v213;
        if (v198 == (char *)v211)
        {
LABEL_305:
          v215 = v213;
          goto LABEL_326;
        }
      }
      else
      {
        v287.i8[7] = v197 - 4;
        v213 = &v286;
        if (v198 == (char *)v211)
          goto LABEL_305;
      }
      v214 = v197 - 4;
      if ((unint64_t)(v197 - 4) < 0x20 || (unint64_t)((char *)v213 - v198) < 0x20)
        break;
      v215 = (int8x16_t *)((char *)v213 + (v214 & 0xFFFFFFFFFFFFFFE0));
      v216 = &v198[v214 & 0xFFFFFFFFFFFFFFE0];
      v217 = (int8x16_t *)(v198 + 16);
      v218 = v213 + 1;
      v219 = v214 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v220 = *v217;
        v218[-1] = v217[-1];
        *v218 = v220;
        v217 += 2;
        v218 += 2;
        v219 -= 32;
      }
      while (v219);
      if (v214 != (v214 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_325;
LABEL_326:
      v215->i8[0] = 0;
      blob_shape = (uint64_t)sub_19C080EFC(v244, (uint64_t)&v286, (uint64_t)&v286, (uint64_t)&__B);
      if (v287.i8[7] < 0)
        operator delete((void *)v286.i64[0]);
LABEL_271:
      v192 += 24;
      if (v192 == v193)
        goto LABEL_339;
    }
    v215 = v213;
    v216 = v198;
    do
    {
LABEL_325:
      v237 = *v216++;
      v215->i8[0] = v237;
      v215 = (int8x16_t *)((char *)v215 + 1);
    }
    while (v216 != (char *)v211);
    goto LABEL_326;
  }
LABEL_339:
  v76 = espresso_plan_execute_sync() != 0;
  v77 = __p;
  if (__p)
    goto LABEL_110;
LABEL_111:
  v78 = v280;
  if (v280)
  {
    v79 = v281;
    v80 = v280;
    if (v281 != v280)
    {
      do
      {
        if (SHIBYTE(v79[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79[-1].__r_.__value_.__l.__data_);
        --v79;
      }
      while (v79 != v78);
      v80 = v280;
    }
    v281 = v78;
    operator delete(v80);
  }
  if (v246)
    operator delete(v246);
  if (v259)
    operator delete(v259);
  if (v260)
    operator delete(v260);
  if (v261)
    operator delete(v261);
  if (v262)
    operator delete(v262);
  if (v282)
    operator delete(v282);
  if (v76)
    return 0;
  v85 = *(_QWORD *)(a1 + 320);
  for (kk = *(_QWORD *)(a1 + 328); kk != v85; kk -= 72)
  {
    if (*(char *)(kk - 49) < 0)
      operator delete(*(void **)(kk - 72));
  }
  *(_QWORD *)(a1 + 328) = v85;
  return 1;
}

void sub_19C0A2764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,void *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  uint64_t v58;
  void *v60;

  if (a2)
  {
    if (a35 < 0)
      operator delete(__p);
    if (a57)
      operator delete(a57);
    sub_19C07AD50((void **)(v58 - 240));
    if (a16)
      operator delete(a16);
    if (a26)
      operator delete(a26);
    if (a27)
      operator delete(a27);
    if (a28)
      operator delete(a28);
    if (a29)
      operator delete(a29);
    v60 = *(void **)(v58 - 216);
    if (v60)
      operator delete(v60);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x19C0A14B4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C0A2984(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C07DA0C();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19C0A2A2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_19C255528((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0A2A4C(_QWORD *a1, uint64_t a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  std::string __p;
  std::string *p_p;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_11;
  }
  else
  {
    __p = *(std::string *)a2;
    v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v3 = __p.__r_.__value_.__l.__size_;
    if (v3)
      goto LABEL_11;
  }
  if (a1[6] != 1)
    goto LABEL_17;
  std::string::operator=(&__p, (const std::string *)(a1[4] + 32));
LABEL_11:
  if (sub_19C0A3AD8(a1 + 48, (uint64_t)&__p))
  {
    p_p = &__p;
    v5 = sub_19C0813B8((uint64_t)(a1 + 48), (uint64_t)&__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&p_p);
    goto LABEL_15;
  }
  v6 = a1 + 58;
  if (!sub_19C0A3AD8(v6, (uint64_t)&__p))
  {
LABEL_17:
    v7 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v7;
    goto LABEL_18;
  }
  p_p = &__p;
  v5 = sub_19C080A24((uint64_t)v6, (uint64_t)&__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&p_p);
LABEL_15:
  v7 = v5[5];
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v7;
LABEL_18:
  operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_19C0A2B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C0A2BC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  __int128 v7;
  void *__p[2];
  char v9;
  void **v10;

  sub_19C22E6B8(a1, a2, (uint64_t)__p);
  v5 = (_QWORD *)(a1 + 768);
  if (sub_19C080120(v5, (uint64_t)__p))
  {
    v10 = __p;
    v6 = sub_19C0803AC((uint64_t)v5, (uint64_t)__p, (uint64_t)&unk_19C27ADD0, (__int128 **)&v10);
    v7 = *(_OWORD *)(v6 + 7);
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 5);
    *(_OWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 32) = v6[9];
    if ((v9 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(__p[0]);
    return;
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (v9 < 0)
    goto LABEL_5;
}

void sub_19C0A2C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C0A2C8C(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void **v5;
  uint64_t v6;
  uint64_t j;
  void **v8;
  uint64_t v9;
  uint64_t k;
  char *v11;
  uint64_t v12;
  uint64_t m;
  char *v14;
  uint64_t v15;
  uint64_t n;
  char *v17;
  uint64_t v18;
  uint64_t ii;
  void **v20;
  uint64_t v21;
  uint64_t jj;
  uint64_t v23;
  uint64_t kk;
  void **v25;
  void **v26;
  void **v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  std::string *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  _BOOL4 v56;
  int v57;
  int v58;
  char *v59;
  char *v60;
  unint64_t v61;
  void *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  char *v81;
  void *v82;
  void **v83;
  void **v84;
  void *v85;
  void *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *__p;
  char *v93;
  void *v94;
  void **v95;
  char *v96;
  char *v97;
  char *v98;

  if (*(_QWORD *)(a1 + 408))
  {
    v2 = *(void ***)(a1 + 400);
    if (v2)
    {
      do
      {
        v25 = (void **)*v2;
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 400) = 0;
    v3 = *(_QWORD *)(a1 + 392);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 408) = 0;
  }
  if (*(_QWORD *)(a1 + 368))
  {
    v5 = *(void ***)(a1 + 360);
    if (v5)
    {
      do
      {
        v26 = (void **)*v5;
        if (*((char *)v5 + 39) < 0)
          operator delete(v5[2]);
        operator delete(v5);
        v5 = v26;
      }
      while (v26);
    }
    *(_QWORD *)(a1 + 360) = 0;
    v6 = *(_QWORD *)(a1 + 352);
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 368) = 0;
  }
  if (*(_QWORD *)(a1 + 448))
  {
    v8 = *(void ***)(a1 + 440);
    if (v8)
    {
      do
      {
        v27 = (void **)*v8;
        if (*((char *)v8 + 39) < 0)
          operator delete(v8[2]);
        operator delete(v8);
        v8 = v27;
      }
      while (v27);
    }
    *(_QWORD *)(a1 + 440) = 0;
    v9 = *(_QWORD *)(a1 + 432);
    if (v9)
    {
      for (k = 0; k != v9; ++k)
        *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * k) = 0;
    }
    *(_QWORD *)(a1 + 448) = 0;
  }
  if (*(_QWORD *)(a1 + 488))
  {
    v11 = *(char **)(a1 + 480);
    if (v11)
    {
      do
      {
        v28 = *(char **)v11;
        v29 = (void *)*((_QWORD *)v11 + 5);
        if (v29)
        {
          *((_QWORD *)v11 + 6) = v29;
          operator delete(v29);
        }
        if (v11[39] < 0)
          operator delete(*((void **)v11 + 2));
        operator delete(v11);
        v11 = v28;
      }
      while (v28);
    }
    *(_QWORD *)(a1 + 480) = 0;
    v12 = *(_QWORD *)(a1 + 472);
    if (v12)
    {
      for (m = 0; m != v12; ++m)
        *(_QWORD *)(*(_QWORD *)(a1 + 464) + 8 * m) = 0;
    }
    *(_QWORD *)(a1 + 488) = 0;
  }
  if (*(_QWORD *)(a1 + 528))
  {
    v14 = *(char **)(a1 + 520);
    if (v14)
    {
      do
      {
        v30 = *(char **)v14;
        v31 = (void *)*((_QWORD *)v14 + 5);
        if (v31)
        {
          *((_QWORD *)v14 + 6) = v31;
          operator delete(v31);
        }
        if (v14[39] < 0)
          operator delete(*((void **)v14 + 2));
        operator delete(v14);
        v14 = v30;
      }
      while (v30);
    }
    *(_QWORD *)(a1 + 520) = 0;
    v15 = *(_QWORD *)(a1 + 512);
    if (v15)
    {
      for (n = 0; n != v15; ++n)
        *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * n) = 0;
    }
    *(_QWORD *)(a1 + 528) = 0;
  }
  if (*(_QWORD *)(a1 + 608))
  {
    v17 = *(char **)(a1 + 600);
    if (v17)
    {
      do
      {
        v32 = *(char **)v17;
        v33 = (void *)*((_QWORD *)v17 + 5);
        if (v33)
        {
          *((_QWORD *)v17 + 6) = v33;
          operator delete(v33);
        }
        if (v17[39] < 0)
          operator delete(*((void **)v17 + 2));
        operator delete(v17);
        v17 = v32;
      }
      while (v32);
    }
    *(_QWORD *)(a1 + 600) = 0;
    v18 = *(_QWORD *)(a1 + 592);
    if (v18)
    {
      for (ii = 0; ii != v18; ++ii)
        *(_QWORD *)(*(_QWORD *)(a1 + 584) + 8 * ii) = 0;
    }
    *(_QWORD *)(a1 + 608) = 0;
  }
  if (*(_QWORD *)(a1 + 648))
  {
    v20 = *(void ***)(a1 + 640);
    if (v20)
    {
      do
      {
        v34 = (void **)*v20;
        if (*((char *)v20 + 39) < 0)
          operator delete(v20[2]);
        operator delete(v20);
        v20 = v34;
      }
      while (v34);
    }
    *(_QWORD *)(a1 + 640) = 0;
    v21 = *(_QWORD *)(a1 + 632);
    if (v21)
    {
      for (jj = 0; jj != v21; ++jj)
        *(_QWORD *)(*(_QWORD *)(a1 + 624) + 8 * jj) = 0;
    }
    *(_QWORD *)(a1 + 648) = 0;
  }
  v23 = *(_QWORD *)(a1 + 320);
  for (kk = *(_QWORD *)(a1 + 328); kk != v23; kk -= 72)
  {
    if (*(char *)(kk - 49) < 0)
      operator delete(*(void **)(kk - 72));
  }
  *(_QWORD *)(a1 + 328) = v23;
  if (!*(_BYTE *)(a1 + 312))
    espresso_plan_build_clean();
  if (!sub_19C09EF48(a1))
    goto LABEL_156;
  v35 = *(_QWORD *)(a1 + 752);
  v36 = *(_QWORD *)(a1 + 712);
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v37 = v36 + v35;
  if (v36 + v35)
  {
    if (v37 >> 62)
      sub_19C07DA0C();
    v96 = (char *)operator new(4 * v37);
    v98 = &v96[4 * v37];
    bzero(v96, 4 * v37);
    v97 = v98;
    v38 = (char *)operator new(4 * v37);
    bzero(v38, 4 * v37);
    v39 = (char *)operator new(4 * v37);
    bzero(v39, 4 * v37);
    v89 = (char *)operator new(4 * v37);
    bzero(v89, 4 * v37);
    v40 = (char *)operator new(4 * v37);
    bzero(v40, 4 * v37);
    v86 = operator new(4 * v37);
    memset_pattern16(v86, &unk_19C2770A0, 4 * v37);
    v41 = v89;
  }
  else
  {
    v38 = 0;
    v39 = 0;
    v41 = 0;
    v40 = 0;
    v86 = 0;
  }
  v90 = v41;
  v91 = v40;
  v87 = v39;
  v88 = v38;
  v42 = (std::string *)sub_19C0A2984(&v94, v37);
  v43 = *(uint64_t **)(a1 + 744);
  if (v43)
  {
    v44 = 0;
    v45 = 0;
    do
    {
      v46 = v43[6];
      v47 = v43[7];
      v48 = 4 * v45;
      *(_DWORD *)&v96[v48] = v43[5];
      *(_DWORD *)&v38[v48] = v46;
      *(_DWORD *)&v39[v48] = v47;
      *(_DWORD *)&v41[v48] = 1;
      *(_DWORD *)&v40[v48] = 1;
      v42 = std::string::operator=((std::string *)((char *)v94 + v44), (const std::string *)(v43 + 2));
      ++v45;
      v43 = (uint64_t *)*v43;
      v44 += 24;
    }
    while (v43);
    v49 = *(uint64_t **)(a1 + 704);
    if (!v49)
      goto LABEL_96;
LABEL_88:
    v50 = 4 * v45;
    v51 = 24 * v45;
    do
    {
      v52 = v49[5];
      v53 = *((_DWORD *)v49 + 12);
      v54 = v49[7];
      v55 = *((_DWORD *)v49 + 18);
      v56 = sub_19C09EA10((uint64_t)v42, (char **)v49 + 2);
      *(_DWORD *)&v96[v50] = v52;
      if (v56)
        v57 = 0;
      else
        v57 = v53;
      *(_DWORD *)&v88[v50] = v57;
      *(_DWORD *)&v87[v50] = v54;
      *(_DWORD *)&v90[v50] = 1;
      if (v56)
        v58 = v55;
      else
        v58 = 0;
      *(_DWORD *)&v91[v50] = v58;
      v42 = std::string::operator=((std::string *)((char *)v94 + v51), (const std::string *)(v49 + 2));
      v49 = (uint64_t *)*v49;
      v50 += 4;
      v51 += 24;
    }
    while (v49);
    goto LABEL_96;
  }
  LODWORD(v45) = 0;
  v49 = *(uint64_t **)(a1 + 704);
  if (v49)
    goto LABEL_88;
LABEL_96:
  __p = 0;
  v93 = 0;
  v59 = (char *)v94;
  if (v95 != v94)
  {
    v60 = 0;
    v61 = 0;
    v62 = v91;
    while (1)
    {
      v63 = &v59[24 * v61];
      if (v63[23] < 0)
      {
        v63 = *(char **)v63;
        v64 = v93;
        if (v60 >= v93)
        {
LABEL_104:
          v65 = (v60 - __p) >> 3;
          v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 61)
            sub_19C07DA0C();
          v67 = v64 - __p;
          if (v67 >> 2 > v66)
            v66 = v67 >> 2;
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
            v68 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v68 = v66;
          if (v68)
          {
            if (v68 >> 61)
              sub_19C07C7FC();
            v69 = operator new(8 * v68);
            v70 = &v69[8 * v65];
            *(_QWORD *)v70 = v63;
            v71 = (uint64_t)(v70 + 8);
            if (v60 != __p)
            {
LABEL_113:
              v72 = v60 - 8 - __p;
              if (v72 < 0x168)
              {
                v73 = v60;
                goto LABEL_115;
              }
              if (&v69[v60 - __p - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v60 - __p - 8])
              {
                v73 = v60;
                goto LABEL_115;
              }
              if (&v60[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v60 - 8)
              {
                v73 = v60;
                goto LABEL_115;
              }
              if ((unint64_t)(__p - v69) < 0x20)
              {
                v73 = v60;
                goto LABEL_115;
              }
              v75 = (v72 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v73 = &v60[-v76];
              v70 -= v76;
              v77 = &v69[8 * v65 - 16];
              v78 = v60 - 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *(_OWORD *)v78;
                *(v77 - 1) = *((_OWORD *)v78 - 1);
                *v77 = v80;
                v77 -= 2;
                v78 -= 32;
                v79 -= 4;
              }
              while (v79);
              if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_115:
                  v74 = *((_QWORD *)v73 - 1);
                  v73 -= 8;
                  *((_QWORD *)v70 - 1) = v74;
                  v70 -= 8;
                }
                while (v73 != __p);
              }
              v60 = __p;
              __p = v70;
              v93 = &v69[8 * v68];
              if (!v60)
              {
LABEL_121:
                v60 = (char *)v71;
                v62 = v91;
                goto LABEL_99;
              }
LABEL_120:
              operator delete(v60);
              goto LABEL_121;
            }
          }
          else
          {
            v69 = 0;
            v70 = (char *)(8 * v65);
            *(_QWORD *)(8 * v65) = v63;
            v71 = 8 * v65 + 8;
            if (v60 != __p)
              goto LABEL_113;
          }
          __p = v70;
          v93 = &v69[8 * v68];
          if (!v60)
            goto LABEL_121;
          goto LABEL_120;
        }
      }
      else
      {
        v64 = v93;
        if (v60 >= v93)
          goto LABEL_104;
      }
      *(_QWORD *)v60 = v63;
      v60 += 8;
LABEL_99:
      ++v61;
      v59 = (char *)v94;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (_BYTE *)v94) >> 3) <= v61)
      {
        v81 = __p;
        goto LABEL_134;
      }
    }
  }
  v81 = 0;
  v62 = v91;
LABEL_134:
  v82 = v96;
  espresso_network_change_input_blob_shapes_seq_rank();
  espresso_plan_build();
  espresso_plan_build_clean();
  if (v81)
    operator delete(v81);
  v83 = (void **)v94;
  if (v94)
  {
    v84 = v95;
    v85 = v94;
    if (v95 != v94)
    {
      do
      {
        if (*((char *)v84 - 1) < 0)
          operator delete(*(v84 - 3));
        v84 -= 3;
      }
      while (v84 != v83);
      v85 = v94;
    }
    v95 = v83;
    operator delete(v85);
  }
  if (v86)
    operator delete(v86);
  if (v62)
    operator delete(v62);
  if (v90)
    operator delete(v90);
  if (v87)
    operator delete(v87);
  if (v88)
    operator delete(v88);
  if (v82)
    operator delete(v82);
LABEL_156:
  *(_BYTE *)(a1 + 312) = 1;
}

void sub_19C0A34D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;
  void *v24;
  void *v25;

  operator delete(v25);
  if (a14)
    operator delete(a14);
  if (v24)
    operator delete(v24);
  if (v23)
    operator delete(v23);
  if (a22)
    operator delete(a22);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C0A3494);
}

uint64_t sub_19C0A35D8(uint64_t a1, const void **a2)
{
  if (espresso_network_declare_output())
    return 0;
  sub_19C08087C((uint64_t **)(a1 + 32), a2, (uint64_t)a2);
  return 1;
}

uint64_t sub_19C0A3654()
{
  uint64_t result;

  qword_1EE4188F8 = 0;
  unk_1EE418900 = "MontrealNeuralNetworkState";
  qword_1EE418908 = 0;
  unk_1EE418910 = 0;
  qword_1EE418918 = (uint64_t)sub_19C0803A4;
  unk_1EE418920 = 0u;
  unk_1EE418930 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE418958 = result;
  return result;
}

void sub_19C0A36A4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_19C07DA0C();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_19C07C7FC();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

char *sub_19C0A3840(char **a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  void **v22;
  char *v24;

  v5 = *a1;
  v6 = a1[1];
  v7 = 0x8E38E38E38E38E39 * ((v6 - *a1) >> 3);
  v8 = v7 + 1;
  if (v7 + 1 > 0x38E38E38E38E38ELL)
    sub_19C07DA0C();
  if (0x1C71C71C71C71C72 * ((a1[2] - v5) >> 3) > v8)
    v8 = 0x1C71C71C71C71C72 * ((a1[2] - v5) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - v5) >> 3) >= 0x1C71C71C71C71C7)
    v12 = 0x38E38E38E38E38ELL;
  else
    v12 = v8;
  if (v12)
  {
    if (v12 > 0x38E38E38E38E38ELL)
      sub_19C07C7FC();
    v13 = (char *)operator new(72 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[72 * v7];
  v24 = &v13[72 * v12];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C07C6E8(v14, *(void **)a2, *(_QWORD *)(a2 + 8));
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
  }
  v15 = v14;
  *((_QWORD *)v14 + 3) = *a3;
  v16 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v14 + 2) = *(_OWORD *)a4;
  *((_OWORD *)v14 + 3) = v16;
  *((_QWORD *)v14 + 8) = *(_QWORD *)(a4 + 32);
  v17 = v14 + 72;
  if (v6 == v5)
  {
    v21 = v5;
  }
  else
  {
    do
    {
      v18 = *(_OWORD *)(v6 - 72);
      *((_QWORD *)v15 - 7) = *((_QWORD *)v6 - 7);
      *(_OWORD *)(v15 - 72) = v18;
      *((_QWORD *)v6 - 8) = 0;
      *((_QWORD *)v6 - 7) = 0;
      *((_QWORD *)v6 - 9) = 0;
      *((_QWORD *)v15 - 6) = *((_QWORD *)v6 - 6);
      v19 = *(_OWORD *)(v6 - 40);
      v20 = *(_OWORD *)(v6 - 24);
      *((_QWORD *)v15 - 1) = *((_QWORD *)v6 - 1);
      *(_OWORD *)(v15 - 24) = v20;
      *(_OWORD *)(v15 - 40) = v19;
      v15 -= 72;
      v6 -= 72;
    }
    while (v6 != v5);
    v21 = *a1;
    v5 = a1[1];
    v17 = v14 + 72;
  }
  *a1 = v15;
  a1[1] = v17;
  a1[2] = v24;
  if (v5 != v21)
  {
    v22 = (void **)(v5 - 72);
    do
    {
      if (*((char *)v22 + 23) < 0)
        operator delete(*v22);
      v22 -= 9;
    }
    while (v22 + 9 != (void **)v21);
    v5 = v21;
  }
  if (v5)
    operator delete(v5);
  return v17;
}

void sub_19C0A3A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C0A3A74((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A3A74(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 9;
      *(_QWORD *)(a1 + 16) = v2 - 9;
      if (*((char *)v2 - 49) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_19C0A3AD8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char v27;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C07D2D0((uint64_t)&v27, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v22 = v13[1];
          if (v22 == v8)
          {
            v23 = *((unsigned __int8 *)v13 + 39);
            if ((v23 & 0x80u) == 0)
              v24 = *((unsigned __int8 *)v13 + 39);
            else
              v24 = v13[3];
            if (v24 == v15)
            {
              v25 = (const void **)(v13 + 2);
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp(*v25, v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                for (i = v2; *(unsigned __int8 *)v25 == *i; ++i)
                {
                  v25 = (const void **)((char *)v25 + 1);
                  if (!--v23)
                    return v13;
                }
              }
            }
          }
          else if ((v22 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            v20 = (const void **)(v13 + 2);
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp(*v20, v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              for (j = v2; *(unsigned __int8 *)v20 == *j; ++j)
              {
                v20 = (const void **)((char *)v20 + 1);
                if (!--v18)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t sub_19C0A3D0C(uint64_t a1, std::string *this)
{
  uint64_t v2;
  unsigned int *v3;
  std::string::size_type v5;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  std::string::value_type *v10;
  std::string::value_type v11;

  v2 = *(int *)(a1 + 72);
  v3 = (unsigned int *)(*(_QWORD *)a1 + v2);
  if ((unint64_t)v3 > *(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - 4
    || (v5 = *v3, *(_DWORD *)(a1 + 72) = v2 + 4, v5 >= 0x2711)
    || !(_DWORD)v5)
  {
    sub_19C2210D4(24);
  }
  v7 = (int)v5;
  std::string::resize(this, v5, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = this;
  else
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  do
  {
    v9 = *(int *)(a1 + 72);
    v10 = (std::string::value_type *)(*(_QWORD *)a1 + v9);
    if ((unint64_t)v10 > *(_QWORD *)a1 + *(_QWORD *)(a1 + 8) - 1)
      sub_19C2210D4(23);
    v11 = *v10;
    *(_DWORD *)(a1 + 72) = v9 + 1;
    v8->__r_.__value_.__s.__data_[0] = v11;
    v8 = (std::string *)((char *)v8 + 1);
    --v5;
  }
  while (v5);
  return v7;
}

void sub_19C0A3DD8(float32x2_t **a1, uint64_t *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  vDSP_Length v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  const float *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  float64x2_t v27;
  float32x2_t *v33;
  float32x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  float32x2_t *v41;
  float32x2_t *v42;
  float32x2_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v53;
  uint64_t v54;
  float32x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float v72;
  float32x4_t v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  const float *v77;
  uint64_t v78;
  float32x4_t *v79;
  float32x4_t *v80;
  uint64_t v81;
  float32x2_t *v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  float *v91;
  float v92;
  int v93;
  uint64_t v94;
  uint64_t v96;
  vDSP_Length __N;
  float32x4_t v98;
  float v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float v103;
  float __B;
  int v105;

  if ((int)a3 < 1)
    return;
  v5 = a4;
  v6 = a4 - 1;
  if ((int)a4 < 1)
    v6 = a4 + 2;
  if (a5 > 5)
    sub_19C2210D4(41);
  v7 = a2;
  v9 = (int)a4;
  v10 = 4 * (int)a4;
  v11 = a4;
  __N = (int)a4;
  switch(a5)
  {
    case 0u:
      v12 = 0;
      v13 = a3;
      do
      {
        memmove((char *)*a1 + v12, (const void *)(*v7 + v12), 4 * (int)v5);
        v12 += v10;
        --v13;
      }
      while (v13);
      return;
    case 1u:
      v50 = 0;
      v51 = 0;
      v94 = a3;
      v93 = (v6 >> 2) + 1;
      __asm { FMOV            V0.4S, #1.0 }
      v98 = _Q0;
      v96 = 4 * (int)a4;
      while (1)
      {
        v53 = v7;
        v54 = v5;
        v55 = *a1;
        v56 = (uint64_t)*a1 + 4 * v51 * v9;
        v57 = *v53;
        if ((v56 & 0xF) == 0)
        {
          if ((int)v54 >= -2)
          {
            v63 = v93;
            do
            {
              *(double *)v64.i64 = MEMORY[0x1A1AD26E8]((__n128)vnegq_f32(*(float32x4_t *)(v57 + v50)));
              *(float32x4_t *)((char *)v55->f32 + v50) = vdivq_f32(v98, vaddq_f32(v64, v98));
              v55 += 2;
              v57 += 16;
              --v63;
            }
            while (v63);
          }
          goto LABEL_48;
        }
        if ((int)v54 >= 1)
        {
          if (v54 >= 4 && (unint64_t)(v56 - (v96 * v51 + v57)) >= 0x10)
          {
            v65 = (float32x4_t *)(v57 + v50);
            v66 = (float32x4_t *)((char *)v55 + v50);
            v67 = v11 & 0xFFFFFFFC;
            do
            {
              v68 = *v65++;
              v102 = vnegq_f32(v68);
              v99 = expf(v102.f32[1]);
              v69.f32[0] = expf(v102.f32[0]);
              v69.f32[1] = v99;
              v100 = v69;
              v70 = expf(v102.f32[2]);
              v71 = v100;
              v71.f32[2] = v70;
              v101 = v71;
              v72 = expf(v102.f32[3]);
              v73 = v101;
              v73.f32[3] = v72;
              *v66++ = vdivq_f32(v98, vaddq_f32(v73, v98));
              v67 -= 4;
            }
            while (v67);
            v58 = v11 & 0xFFFFFFFC;
            if (v58 == v11)
              goto LABEL_48;
          }
          else
          {
            v58 = 0;
          }
          v59 = v11 - v58;
          v60 = 4 * v58;
          v61 = (uint64_t)v55 + v60;
          v62 = v57 + v60;
          do
          {
            *(float *)(v61 + v50) = 1.0 / (float)(expf(-*(float *)(v62 + v50)) + 1.0);
            v61 += 4;
            v62 += 4;
            --v59;
          }
          while (v59);
        }
LABEL_48:
        ++v51;
        v9 = __N;
        v50 += v96;
        v5 = v54;
        v7 = a2;
        if (v51 == v94)
          return;
      }
    case 2u:
      v14 = 0;
      v15 = a3;
      do
      {
        v16 = (float *)((char *)*a1 + v14);
        v17 = (const float *)(*v7 + v14);
        v105 = v5;
        vvtanhf(v16, v17, &v105);
        v14 += v10;
        --v15;
      }
      while (v15);
      return;
    case 3u:
      v74 = 0;
      v75 = a3;
      do
      {
        v76 = (float *)((char *)*a1 + v74);
        v77 = (const float *)(*v7 + v74);
        v105 = v5;
        v103 = 1.7159;
        __B = 0.66667;
        vDSP_vsmul(v77, 1, &__B, v76, 1, __N);
        vvtanhf(v76, v76, &v105);
        vDSP_vsmul(v76, 1, &v103, v76, 1, v105);
        v74 += v10;
        --v75;
      }
      while (v75);
      return;
    case 4u:
      if ((int)a4 < 1)
        return;
      v18 = (float32x4_t *)*a1;
      v19 = (float32x4_t *)*a2;
      v20 = a3;
      if (a4 >= 8)
      {
        v78 = 0;
        v79 = v19 + 1;
        v80 = v18 + 1;
        v81 = *a2;
        v82 = *a1;
        while (1)
        {
          if ((unint64_t)((char *)v18 + v10 * v78 - ((char *)v19 + v10 * v78)) >= 0x20)
          {
            v84 = a4 & 0xFFFFFFF8;
            v85 = v80;
            v86 = v79;
            do
            {
              v87 = vmaxnmq_f32(*v86, (float32x4_t)0);
              v85[-1] = vmaxnmq_f32(v86[-1], (float32x4_t)0);
              *v85 = v87;
              v86 += 2;
              v85 += 2;
              v84 -= 8;
            }
            while (v84);
            v83 = a4 & 0xFFFFFFF8;
            if (v83 == a4)
              goto LABEL_69;
          }
          else
          {
            v83 = 0;
          }
          v88 = a4 - v83;
          v89 = 4 * v83;
          v90 = (float *)v82 + v83;
          v91 = (float *)(v81 + v89);
          do
          {
            v92 = *v91++;
            *v90++ = fmaxf(v92, 0.0);
            --v88;
          }
          while (v88);
LABEL_69:
          ++v78;
          v79 = (float32x4_t *)((char *)v79 + v10);
          v80 = (float32x4_t *)((char *)v80 + v10);
          v82 = (float32x2_t *)((char *)v82 + v10);
          v81 += v10;
          if (v78 == a3)
            return;
        }
      }
      v21 = 0;
      v22 = (uint64_t)&v19->i64[1] + 4;
      do
      {
        *(float *)((char *)v18->f32 + v21) = fmaxf(*(float *)(v22 + v21 - 12), 0.0);
        if ((_DWORD)a4 != 1)
        {
          *(float *)((char *)&v18->f32[1] + v21) = fmaxf(*(float *)(v22 + v21 - 8), 0.0);
          if ((_DWORD)a4 != 2)
          {
            *(float *)((char *)&v18->f32[2] + v21) = fmaxf(*(float *)(v22 + v21 - 4), 0.0);
            if ((_DWORD)a4 != 3)
            {
              *(float *)((char *)&v18->f32[3] + v21) = fmaxf(*(float *)(v22 + v21), 0.0);
              if ((_DWORD)a4 != 4)
              {
                *(float *)((char *)v18[1].f32 + v21) = fmaxf(*(float *)(v22 + v21 + 4), 0.0);
                if ((_DWORD)a4 != 5)
                {
                  *(float *)((char *)&v18[1].f32[1] + v21) = fmaxf(*(float *)(v22 + v21 + 8), 0.0);
                  if ((_DWORD)a4 != 6)
                    *(float *)((char *)&v18[1].f32[2] + v21) = fmaxf(*(float *)(v22 + v21 + 12), 0.0);
                }
              }
            }
          }
        }
        v21 += v10;
        --v20;
      }
      while (v20);
      return;
    default:
      if ((int)a4 < 1)
        return;
      v23 = 0;
      v24 = *a1;
      v25 = *a2;
      v26 = 4 * (int)a4;
      v27 = (float64x2_t)vdupq_n_s64(0x3FC999999999999AuLL);
      __asm
      {
        FMOV            V3.2D, #0.5
        FMOV            V4.2S, #1.0
      }
      v33 = (float32x2_t *)*a2;
      v34 = *a1;
      break;
  }
  while (1)
  {
    if (a4 < 4)
    {
      v35 = 0;
      goto LABEL_44;
    }
    v36 = 4 * a4 + v10 * v23;
    v37 = v25 + v36;
    v38 = (unint64_t)v24 + v36;
    if ((unint64_t)v24 + v10 * v23 >= v37 || v25 + v10 * v23 >= v38)
      break;
    v35 = 0;
    do
    {
LABEL_44:
      v48 = v33->f32[v35] * 0.2 + 0.5;
      v34->f32[v35] = v48;
      v49 = 0.0;
      if (v48 < 0.0 || (v49 = 1.0, v48 > 1.0))
        v34->f32[v35] = v49;
      ++v35;
    }
    while (a4 != v35);
LABEL_25:
    ++v23;
    v34 = (float32x2_t *)((char *)v34 + v26);
    v33 = (float32x2_t *)((char *)v33 + v26);
    if (v23 == a3)
      return;
  }
  v40 = a4 & 0xFFFFFFFE;
  v41 = v33;
  v42 = v34;
  while (1)
  {
    v43 = vcvt_f32_f64(vmlaq_f64(_Q3, vcvtq_f64_f32(*v41), v27));
    *v42 = v43;
    v44 = (int8x8_t)vcltz_f32(v43);
    v45 = (int8x8_t)vcgt_f32(v43, _D4);
    v46 = vand_s8(vand_s8((int8x8_t)_D4, (int8x8_t)vcgez_f32(v43)), v45);
    v47 = vorr_s8(v45, v44);
    if ((v47.i8[0] & 1) != 0)
    {
      v42->i32[0] = v46.i32[0];
      if ((v47.i8[4] & 1) != 0)
        goto LABEL_39;
    }
    else if ((v47.i8[4] & 1) != 0)
    {
LABEL_39:
      v42->i32[1] = v46.i32[1];
    }
    ++v42;
    ++v41;
    v40 -= 2;
    if (!v40)
    {
      v35 = a4 & 0xFFFFFFFE;
      if (v35 == a4)
        goto LABEL_25;
      goto LABEL_44;
    }
  }
}

uint64_t sub_19C0A441C(FILE *__stream, int a2, int *a3, _DWORD *a4, void *a5, void *a6, void *a7, _DWORD *a8, _DWORD *a9, int *a10, unsigned int *a11, _DWORD *a12)
{
  unsigned int v16;
  int v18;
  int v19;
  int v20;
  __int128 v24;
  uint64_t v25;
  int v26;
  unsigned int __ptr;

  *a10 = 32;
  __ptr = -1;
  fread(&__ptr, 4uLL, 1uLL, __stream);
  v16 = __ptr;
  if (__ptr > 1)
  {
    if ((__ptr & 0xFFFFFFFE) == 4)
    {
      *a11 = 3;
      v24 = xmmword_19C277530;
      v25 = 0x100000001;
      v26 = 32;
      sub_19C0A45F4((int *)&v24, __stream, 1);
      v19 = HIDWORD(v25);
      *a10 = v26;
      v20 = DWORD1(v24);
      *a8 = v25;
      *a9 = v20;
      *a12 = v19;
      *a3 = 0;
      if (v16 != 5)
        goto LABEL_4;
      goto LABEL_3;
    }
    if ((__ptr & 0xFFFFFFFE) != 2)
      sub_19C2210D4(38);
    *a11 = 2;
    v24 = xmmword_19C277530;
    v25 = 0x100000001;
    v26 = 32;
    sub_19C0A45F4((int *)&v24, __stream, 1);
    v18 = DWORD1(v24);
    *a8 = v25;
    *a9 = v18;
    if (v16 == 3)
    {
LABEL_3:
      (*(void (**)(_DWORD *, FILE *, uint64_t))(*(_QWORD *)a4 + 8))(a4, __stream, 1);
      *a3 = a4[2];
    }
  }
  else
  {
    *a11 = 1;
    *a8 = -1;
    *a9 = 2;
    if (*a3 >= 1)
      goto LABEL_3;
  }
LABEL_4:
  sub_19C2212D8(__stream, (int)"LMTRAINER", a5);
  sub_19C2212D8(__stream, (int)"LMTRAINER", a6);
  sub_19C2212D8(__stream, (int)"LMTRAINER", a7);
  return *a11;
}

size_t sub_19C0A45F4(int *__ptr, FILE *__stream, int a3)
{
  size_t v5;
  size_t v6;
  size_t v7;
  int *v8;
  size_t v9;
  size_t v10;
  size_t result;
  int v12;
  unsigned int v13;
  int __ptra;

  if (a3)
  {
    __ptra = 0;
    fread(&__ptra, 4uLL, 1uLL, __stream);
  }
  v5 = fread(__ptr, 4uLL, 1uLL, __stream);
  v6 = fread(__ptr + 1, 4uLL, 1uLL, __stream) + v5;
  v7 = fread(__ptr + 2, 4uLL, 1uLL, __stream);
  v8 = __ptr + 3;
  v9 = v6 + v7 + fread(__ptr + 3, 4uLL, 1uLL, __stream);
  v10 = fread(__ptr + 4, 4uLL, 1uLL, __stream);
  result = fread(__ptr + 5, 4uLL, 1uLL, __stream);
  if (v9 + v10 + result != 6)
    sub_19C2210D4(67);
  v12 = *v8 & 3;
  if (!v12)
    goto LABEL_10;
  v13 = *v8 & 0xFFFFFFFC;
  if (!v13)
    v13 = 32;
  __ptr[6] = v13;
  if (v13 > 0x20 || ((1 << v13) & 0x100010100) == 0)
LABEL_10:
    sub_19C2210D4(25);
  *v8 = v12;
  return result;
}

uint64_t sub_19C0A4740(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;

  *a1 = off_1E3D1E1F8;
  v2 = a1[6];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[7];
  if (v3)
  {
    v4 = v3[5];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 368))(v4);
    v5 = v3[12];
    if (v5)
    {
      v6 = (void *)sub_19C0AE294(v5);
      operator delete(v6);
    }
    v7 = (void *)v3[13];
    if (v7)
    {
      v3[14] = v7;
      operator delete(v7);
    }
    operator delete(v3);
  }
  if (dword_1EE418968 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(a1[8] + 8 * v8);
      if (v9)
        operator delete(v9);
      v10 = *(void **)(a1[14] + 8 * v8);
      if (v10)
        operator delete(v10);
      ++v8;
    }
    while (v8 < dword_1EE418968);
  }
  v11 = (void *)a1[14];
  if (v11)
  {
    a1[15] = v11;
    operator delete(v11);
  }
  v12 = a1[11];
  if (v12)
  {
    v13 = a1[12];
    v14 = (void *)a1[11];
    if (v13 != v12)
    {
      v15 = a1[12];
      do
      {
        v17 = *(void **)(v15 - 24);
        v15 -= 24;
        v16 = v17;
        if (v17)
        {
          *(_QWORD *)(v13 - 16) = v16;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v12);
      v14 = (void *)a1[11];
    }
    a1[12] = v12;
    operator delete(v14);
  }
  v18 = (void *)a1[8];
  if (v18)
  {
    a1[9] = v18;
    operator delete(v18);
  }
  return nullsub_171(a1);
}

uint64_t sub_19C0A4884(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C0A48B8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_19C0A4740(a1);
  operator delete(v1);
}

uint64_t sub_19C0A48CC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t (***a6)(_QWORD), uint64_t a7, int a8, float a9, float a10, double a11, int a12, char a13)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _BOOL4 v34;
  int v35;
  uint64_t *v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  float v47;
  double v48;
  int v49;
  int v50;
  _BOOL4 v51;
  __int16 v52;
  char v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  *(_QWORD *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 136) = a3;
  *(float *)(a1 + 144) = a9;
  *(_DWORD *)(a1 + 148) = a8;
  *(_BYTE *)(a1 + 140) = a13;
  *(_DWORD *)(a1 + 160) = a4;
  *(_DWORD *)(a1 + 164) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 36) = (**a6)(a6);
  v17 = operator new();
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 112) - 8);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 272))(v18);
  *(_QWORD *)v17 = &unk_1E3D1E220;
  *(_DWORD *)(v17 + 8) = v19;
  v20 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = v17;
  v21 = dword_1EE418968;
  v22 = dword_1EE418968;
  v23 = (*(_QWORD *)(a1 + 72) - v20) >> 3;
  if (dword_1EE418968 <= v23)
  {
    if (dword_1EE418968 < v23)
      *(_QWORD *)(a1 + 72) = v20 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 64), dword_1EE418968 - v23);
    v21 = dword_1EE418968;
    v22 = dword_1EE418968;
  }
  v24 = *(_QWORD *)(a1 + 112);
  v25 = (*(_QWORD *)(a1 + 120) - v24) >> 3;
  if (v22 <= v25)
  {
    if (v22 < v25)
      *(_QWORD *)(a1 + 120) = v24 + 8 * v22;
  }
  else
  {
    sub_19C098930((void **)(a1 + 112), v22 - v25);
    v21 = dword_1EE418968;
  }
  if (v21 >= 1)
  {
    v26 = 0;
    do
    {
      v27 = **(_QWORD **)(*(_QWORD *)(a1 + 152) + 104);
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 264))(v27);
      v29 = (void *)operator new[]();
      v30 = v29;
      if (v28 >= 1)
        bzero(v29, 4 * v28);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v26) = v30;
      v31 = *(unsigned int *)(a1 + 164);
      v32 = (void *)operator new[]();
      v33 = v32;
      if ((int)v31 >= 1)
        bzero(v32, 4 * v31);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v26++) = v33;
    }
    while (v26 < dword_1EE418968);
  }
  v34 = *(_DWORD *)(a1 + 136) == 1;
  v35 = *(_DWORD *)(a1 + 148);
  v36 = *(uint64_t **)(a1 + 152);
  v37 = *((_DWORD *)v36 + 2);
  v38 = *(_DWORD *)(a1 + 144);
  v39 = *v36;
  v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
  v43 = v35;
  v45 = v37;
  v44 = v39;
  v46 = v38;
  v47 = a10;
  v48 = a11;
  v49 = a12;
  v50 = v40;
  v51 = v34;
  v52 = 0;
  v53 = 0;
  v54 = 32;
  v55 = 1;
  v56 = 0;
  v57 = 0;
  v41 = operator new();
  sub_19C0AE44C(v41, &v43, a7);
  *(_QWORD *)(a1 + 56) = v41;
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v41 + 40) + 328))(*(_QWORD *)(v41 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 152) + 40));
}

void sub_19C0A4BBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A4BD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A4BE8(uint64_t a1)
{
  double Current;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  std::locale v61;

  Current = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 208))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, float, float))(**(_QWORD **)(*(_QWORD *)(a1 + 152) + 40) + 336))(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40), *(unsigned int *)(*(_QWORD *)(a1 + 56) + 12), *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 40) + 32), *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 40) + 36));
    *(CFAbsoluteTime *)(a1 + 240) = CFAbsoluteTimeGetCurrent() - Current;
    return;
  }
  v3 = (*(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) - **(_QWORD **)(a1 + 192)) >> 2;
  if (dword_1EE418968 >= (int)v3)
    v4 = v3;
  else
    v4 = dword_1EE418968;
  v60 = 0;
  v6 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  if (v5 == v6)
  {
    v6 = *(_QWORD *)(a1 + 96);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 96);
    do
    {
      v9 = *(void **)(v7 - 24);
      v7 -= 24;
      v8 = v9;
      if (v9)
      {
        *(_QWORD *)(v5 - 16) = v8;
        operator delete(v8);
      }
      v5 = v7;
    }
    while (v7 != v6);
    *(_QWORD *)(a1 + 96) = v6;
    v5 = *(_QWORD *)(a1 + 88);
  }
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3);
  if ((int)v4 <= v10)
  {
    if ((int)v4 < v10)
    {
      v11 = v5 + 24 * (int)v4;
      if (v6 != v11)
      {
        v12 = v6;
        do
        {
          v14 = *(void **)(v12 - 24);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *(_QWORD *)(v6 - 16) = v13;
            operator delete(v13);
          }
          v6 = v12;
        }
        while (v12 != v11);
      }
      *(_QWORD *)(a1 + 96) = v11;
    }
  }
  else
  {
    sub_19C167E70(a1 + 88, (int)v4 - v10);
  }
  v59 = a1 + 88;
  *(_QWORD *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 212) = 0;
  if ((int)v4 >= 1)
  {
    v15 = 0;
    while (1)
    {
      v17 = *(unsigned int *)(**(_QWORD **)(a1 + 200) + 4 * v15);
      v18 = *(_QWORD *)(a1 + 64);
      v19 = 8 * v15;
      v20 = **(_QWORD **)(*(_QWORD *)(a1 + 152) + 104);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 264))(v20);
      bzero(*(void **)(v18 + 8 * v15), 4 * v21);
      v22 = *(_QWORD *)(a1 + 112);
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 112) - 8);
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 272))(v23);
      bzero(*(void **)(v22 + 8 * v15), 4 * v24);
      if (*(_DWORD *)(a1 + 136) >= 6u)
      {
        v57 = sub_19C0A5194(MEMORY[0x1E0DE4A60], "inputEncoding has wrong value!");
        sub_19C0A5194(v57, "not allowed ");
        v58 = (_QWORD *)std::ostream::operator<<();
        sub_19C0A51C8(v58);
        exit(5);
      }
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 8))(*(_QWORD *)(a1 + 40), *(unsigned int *)(**(_QWORD **)(a1 + 192) + 4 * v15), *(_QWORD *)(a1 + 64) + v19);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 8))(*(_QWORD *)(a1 + 48), v17, *(_QWORD *)(a1 + 112) + v19);
      if (*(_DWORD *)(a1 + 136) != 1)
        goto LABEL_26;
      v25 = *(_QWORD *)(a1 + 88) + 24 * v15;
      v26 = **(_QWORD **)(a1 + 192);
      v28 = *(char **)(v25 + 8);
      v27 = *(_QWORD *)(v25 + 16);
      if ((unint64_t)v28 >= v27)
        break;
      *(_DWORD *)v28 = *(_DWORD *)(v26 + 4 * v15);
      v16 = (uint64_t)(v28 + 4);
LABEL_25:
      *(_QWORD *)(v25 + 8) = v16;
LABEL_26:
      if (++v15 == v4)
        goto LABEL_50;
    }
    v29 = *(char **)v25;
    v30 = (uint64_t)&v28[-*(_QWORD *)v25];
    v31 = v30 >> 2;
    v32 = (v30 >> 2) + 1;
    if (v32 >> 62)
      sub_19C07DA0C();
    v33 = v27 - (_QWORD)v29;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 62)
        sub_19C07C7FC();
      v35 = operator new(4 * v34);
      v36 = &v35[4 * v31];
      *v36 = *(_DWORD *)(v26 + 4 * v15);
      v16 = (uint64_t)(v36 + 1);
      if (v28 == v29)
        goto LABEL_48;
    }
    else
    {
      v35 = 0;
      v36 = (_DWORD *)(4 * v31);
      *(_DWORD *)(4 * v31) = *(_DWORD *)(v26 + 4 * v15);
      v16 = 4 * v31 + 4;
      if (v28 == v29)
      {
LABEL_48:
        *(_QWORD *)v25 = v36;
        *(_QWORD *)(v25 + 8) = v16;
        *(_QWORD *)(v25 + 16) = &v35[4 * v34];
        if (v29)
          operator delete(v29);
        goto LABEL_25;
      }
    }
    v37 = v28 - 4 - v29;
    if (v37 < 0x2C)
      goto LABEL_73;
    if ((unint64_t)(v28 - &v35[v30]) < 0x20)
      goto LABEL_73;
    v38 = (v37 >> 2) + 1;
    v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
    v40 = &v28[-v39];
    v36 = (_DWORD *)((char *)v36 - v39);
    v41 = &v35[4 * v31 - 16];
    v42 = v28 - 16;
    v43 = v38 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v44 = *(_OWORD *)v42;
      *(v41 - 1) = *((_OWORD *)v42 - 1);
      *v41 = v44;
      v41 -= 2;
      v42 -= 32;
      v43 -= 8;
    }
    while (v43);
    v28 = v40;
    if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_73:
      do
      {
        v45 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--v36 = v45;
      }
      while (v28 != v29);
    }
    goto LABEL_48;
  }
LABEL_50:
  if (*(_DWORD *)(a1 + 136) != 1)
  {
    v47 = *(_QWORD *)(a1 + 88);
    v46 = *(_QWORD *)(a1 + 96);
    if (v46 != v47)
    {
      v48 = *(_QWORD *)(a1 + 96);
      do
      {
        v50 = *(void **)(v48 - 24);
        v48 -= 24;
        v49 = v50;
        if (v50)
        {
          *(_QWORD *)(v46 - 16) = v49;
          operator delete(v49);
        }
        v46 = v48;
      }
      while (v48 != v47);
    }
    *(_QWORD *)(a1 + 96) = v47;
  }
  if (*(_DWORD *)(a1 + 168))
  {
    v51 = sub_19C07DCDC(MEMORY[0x1E0DE4A60], (uint64_t)"Threaded recognize not supported", 32);
    std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
    v52 = std::locale::use_facet(&v61, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
    std::locale::~locale(&v61);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    v53 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(v53 + 28))
      sub_19C2210D4(43);
    v54 = *(unsigned int *)(a1 + 184);
    *(_DWORD *)(v53 + 12) = v4;
    if ((int)v4 < 1 || dword_1EE418968 <= (int)v4)
      sub_19C2210D4(39);
    if (*(_BYTE *)(v53 + 16))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v53 + 112) - 8)
                                                                        + 216))(*(_QWORD *)(*(_QWORD *)(v53 + 112) - 8), a1 + 112, v59, v4, 0);
      v55 = *(unsigned int *)(v53 + 12);
    }
    else
    {
      v55 = v4;
    }
    sub_19C1651C0(*(float **)(v53 + 40), a1 + 64, v59, a1 + 112, v55, (uint64_t)&v60 + 4, (float *)&v60, v54, 1);
    *(_DWORD *)(a1 + 212) += SHIDWORD(v60) / (int)v4;
    *(float *)(a1 + 216) = *(float *)(a1 + 216) + *(float *)&v60;
    v56 = *(_DWORD *)(a1 + 224) + v4;
    ++*(_DWORD *)(a1 + 220);
    *(_DWORD *)(a1 + 224) = v56;
    *(CFAbsoluteTime *)(a1 + 232) = CFAbsoluteTimeGetCurrent() - Current;
  }
}

void sub_19C0A5180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C0A5194(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_19C07DCDC(a1, (uint64_t)__s, v4);
}

_QWORD *sub_19C0A51C8(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_19C0A5244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A5258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 2;
  v6 = operator new();
  *(_QWORD *)v6 = &unk_1E3D1E460;
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v6 + 48;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 80) = v6 + 88;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_BYTE *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = xmmword_19C277540;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 32;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 181) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = a3;
  *(_QWORD *)(a1 + 200) = a2;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 220) = 0x200000046;
  *(_BYTE *)(a1 + 228) = 0;
  sub_19C0A53B0(a1, a2, a3);
  return a1;
}

void sub_19C0A5374(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char *v2;

  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*(void **)(v1 + 96));
    if ((*v2 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*v2 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 72));
  _Unwind_Resume(exception_object);
}

void sub_19C0A53B0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD v19[2];
  int32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  int v32;

  dword_1EE418968 = 2;
  nullsub_171("MRLModelWrapper, layer #0 ");
  v6 = *(_QWORD *)(a1 + 200);
  if (*(_DWORD *)v6)
    sub_19C2210D4(90);
  v7 = *(_DWORD *)(v6 + 8) == 7;
  v8 = *(_DWORD *)(v6 + 496 * (*(_DWORD *)(a1 + 192) - 1) + 16) << v7;
  *(_DWORD *)(a1 + 36) = v8;
  *(_BYTE *)(a1 + 188) = 0;
  v9 = 1;
  *(_DWORD *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 20) = -1;
  *(_BYTE *)(a1 + 152) = 0;
  v10 = *(_DWORD *)(v6 + 36);
  *(_BYTE *)(a1 + 216) = v7;
  v11 = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(a1 + 32) = v11;
  *(_DWORD *)(a1 + 40) = v8;
  if (*(_BYTE *)(v6 + 20))
  {
    *(_DWORD *)a1 = 1;
    goto LABEL_9;
  }
  *(_DWORD *)a1 = 6;
  v12 = (_QWORD *)operator new();
  v12[1] = 0;
  v12[2] = 0;
  *v12 = 0;
  v13 = operator new(0x18uLL);
  v12[1] = v13 + 3;
  v12[2] = v13 + 3;
  v13[1] = 0;
  v13[2] = 0;
  *v13 = 0;
  *v12 = v13;
  *(_QWORD *)(a1 + 208) = v12;
  v11 = *(_DWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 200);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 28) * v11;
    if (v15)
    {
LABEL_6:
      sub_19C0A36A4((uint64_t)v13, v15);
      v9 = 0;
      v11 = *(_DWORD *)(a1 + 32);
      goto LABEL_9;
    }
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 32);
    if (v11)
      goto LABEL_6;
  }
  v9 = 0;
LABEL_9:
  *(_DWORD *)(a1 + 16) = 16;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 8) = sub_19C0A73EC(a1, *(_DWORD *)a1, (int *)(a1 + 32), (_DWORD *)(a1 + 36), v11, *(_DWORD *)(a1 + 36));
  v16 = *(_DWORD *)(a1 + 32);
  v17 = *(_DWORD *)a1;
  v19[0] = *(_DWORD *)(a1 + 16);
  v19[1] = v16;
  v20 = vrev64_s32(*(int32x2_t *)(a1 + 36));
  v21 = 0x3F6666663C23D70ALL;
  v22 = 0x3FEFF7CED916872BLL;
  v23 = 0;
  v24 = v17;
  v25 = v9;
  v26 = 256;
  v27 = 0;
  v28 = v10;
  v29 = 0;
  v30 = a2;
  v31 = a3;
  v32 = 0;
  if ((v10 & 7) != 0)
    sub_19C2210D4(234);
  v18 = operator new();
  sub_19C0AE44C(v18, v19, *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 120) = v18;
  *(_BYTE *)(v18 + 28) = 0;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v18 + 40) + 280))(*(_QWORD *)(v18 + 40), 0);
  *(_BYTE *)(a1 + 188) = 1;
  sub_19C0A61A8(a1);
  *(_BYTE *)(a1 + 188) = 0;
}

void sub_19C0A560C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A5620(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A563C(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 2;
  v6 = operator new();
  *(_QWORD *)v6 = &unk_1E3D1E460;
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v6 + 48;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 80) = v6 + 88;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_BYTE *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = xmmword_19C277540;
  *(_DWORD *)(a1 + 48) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19C07C6E8((_BYTE *)(a1 + 72), *(void **)a2, *((_QWORD *)a2 + 1));
    v8 = a1 + 96;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    sub_19C07C6E8((_BYTE *)v8, *(void **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_6;
  }
  v7 = *a2;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 72) = v7;
  v8 = a1 + 96;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_5;
LABEL_3:
  v9 = *a3;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v8 = v9;
LABEL_6:
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 32;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 181) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 220) = 0x200000046;
  *(_BYTE *)(a1 + 228) = 0;
  sub_19C0A57E8(a1);
  return a1;
}

void sub_19C0A579C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_19C0A57E8(uint64_t a1)
{
  const char *v2;
  FILE *v3;
  FILE *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD v12[2];
  int32x2_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  _BOOL4 v18;
  __int16 v19;
  char v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;

  *(_BYTE *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 184) = -1;
  *(_DWORD *)(a1 + 20) = -1;
  *(_BYTE *)(a1 + 152) = 0;
  v25 = -1;
  v26 = -1;
  v2 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    v2 = *(const char **)v2;
  v3 = fopen(v2, "rb");
  if (!v3)
    sub_19C2210D4(12);
  v4 = v3;
  sub_19C0A9FB4(a1, v3, &v26, &v25);
  v5 = v26;
  *(_QWORD *)(a1 + 136) = v26;
  fclose(v4);
  dword_1EE418968 = 2;
  if (*(_BYTE *)(a1 + 216))
    v6 = 70;
  else
    v6 = 2;
  *(_DWORD *)(a1 + 224) = v6;
  v7 = sub_19C0A73EC(a1, *(_DWORD *)a1, (int *)(a1 + 32), (_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36));
  *(_QWORD *)(a1 + 8) = v7;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v9 = *(_DWORD *)(a1 + 32);
  v10 = *(_DWORD *)a1;
  v12[0] = *(_DWORD *)(a1 + 16);
  v12[1] = v9;
  v13 = vrev64_s32(*(int32x2_t *)(a1 + 36));
  v14 = 0x3F6666663C23D70ALL;
  v15 = 0x3FEFF7CED916872BLL;
  v16 = 0;
  v17 = v10;
  v18 = v8 == 1;
  v19 = 256;
  v20 = 1;
  v21 = v5;
  v22 = 1;
  v23 = 0;
  v24 = 0;
  if ((v5 & 7) != 0)
    sub_19C2210D4(234);
  v11 = operator new();
  sub_19C0AE44C(v11, v12, *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 120) = v11;
  sub_19C0A7954(a1, v5);
  *(_BYTE *)(a1 + 188) = 1;
  sub_19C0A61A8(a1);
  *(_BYTE *)(a1 + 188) = 0;
}

void sub_19C0A5994(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A59AC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 5);
  *(_DWORD *)(a1 + 20) = -1;
  v6 = operator new();
  *(_QWORD *)v6 = &unk_1E3D1E460;
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v6 + 48;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 80) = v6 + 88;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_BYTE *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v7 = *a3;
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 52) = v7;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a3 + 3);
  *(_OWORD *)(a1 + 95) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 220) = 0x10000000046;
  *(_BYTE *)(a1 + 228) = 0;
  dword_1EE418968 = 256;
  *(_BYTE *)(a1 + 188) = 0;
  v8 = *((_DWORD *)a2 + 7);
  *(_DWORD *)a1 = v8;
  v9 = *((int *)a2 + 6);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 5);
  v10 = *a2;
  v11 = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 32) = *a2;
  *(_DWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = 0;
  v12 = sub_19C0A73EC(a1, v8, (int *)(a1 + 32), (_DWORD *)(a1 + 36), v10, SHIDWORD(v10));
  *(_QWORD *)(a1 + 8) = v12;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) == 1;
  v14 = sub_19C0A7320((int *)a1, (float *)a3, 0, 0, v9, v13);
  *(_QWORD *)(a1 + 120) = v14;
  *(_BYTE *)(v14 + 28) = 0;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v14 + 40) + 280))(*(_QWORD *)(v14 + 40), 0);
  return a1;
}

void sub_19C0A5B64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char *v2;

  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*(void **)(v1 + 96));
    if ((*v2 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*v2 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0A5BA4(uint64_t a1, void *a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000002;
  v8 = operator new();
  *(_QWORD *)v8 = &unk_1E3D1E460;
  *(_DWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v8 + 48;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 80) = v8 + 88;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_BYTE *)(v8 + 12) = 0;
  *(_DWORD *)(v8 + 72) = 0;
  *(_DWORD *)(v8 + 112) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 32) = xmmword_19C277540;
  *(_DWORD *)(a1 + 48) = 0;
  v9 = *a4;
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(a1 + 52) = v9;
  LODWORD(v9) = *((_DWORD *)a4 + 3);
  *(_OWORD *)(a1 + 95) = 0u;
  *(_DWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 32;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 1;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 220) = 0x10000000046;
  *(_BYTE *)(a1 + 228) = 0;
  dword_1EE418968 = 256;
  *(_BYTE *)(a1 + 188) = 0;
  sub_19C0A5D34(a1, a2, a3, (float *)a4);
  return a1;
}

void sub_19C0A5CF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char *v2;

  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*(void **)(v1 + 96));
    if ((*v2 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*v2 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0A5D34(uint64_t a1, void *__buf, int a3, float *a4)
{
  FILE *v8;
  FILE *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  int v16;

  v15 = -1;
  v16 = -1;
  v8 = fmemopen(__buf, a3, "rb");
  if (!v8)
    sub_19C2210D4(12);
  v9 = v8;
  sub_19C0A9FB4(a1, v8, &v16, &v15);
  fclose(v9);
  v10 = sub_19C0A73EC(a1, *(_DWORD *)a1, (int *)(a1 + 32), (_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36));
  *(_QWORD *)(a1 + 8) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) == 1;
  v12 = v16;
  *(_QWORD *)(a1 + 120) = sub_19C0A7320((int *)a1, a4, 0, 1, v16, v11);
  sub_19C0A92A0(a1, (unsigned int *)__buf, a3, v12);
  *(_QWORD *)(a1 + 136) = v12;
  v13 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(v13 + 28) = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 40) + 280))(*(_QWORD *)(v13 + 40), 0);
}

uint64_t sub_19C0A5E44(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return **(_QWORD **)(v1 + 96);
  else
    return 0;
}

uint64_t sub_19C0A5E60(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return *(_QWORD *)(*(_QWORD *)(v1 + 96) + 8);
  else
    return 0;
}

uint64_t sub_19C0A5E7C(uint64_t a1, FILE *a2)
{
  return sub_19C0A5E84(*(_QWORD *)(a1 + 120), a2);
}

uint64_t sub_19C0A5E84(uint64_t a1, FILE *__stream)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  unsigned int v13;

  v4 = *(_DWORD *)(a1 + 68);
  if (*(_BYTE *)(a1 + 16))
    v5 = 5;
  else
    v5 = 4;
  v12 = v5;
  v13 = 0;
  sub_19C221464(__stream, &v13, &v12);
  v11 = 6;
  sub_19C221464(__stream, &v13, &v11);
  v6 = *(_DWORD *)(a1 + 24);
  v7 = sub_19C2210A4();
  *(_DWORD *)(a1 + 64) = 3;
  *(_DWORD *)(a1 + 68) = v4;
  *(_QWORD *)(a1 + 72) = 0x100000001;
  *(_DWORD *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 84) = 1;
  *(_DWORD *)(a1 + 88) = v7;
  sub_19C168064((_DWORD *)(a1 + 64), __stream, &v13);
  if (*(_BYTE *)(a1 + 16))
    (***(void (****)(_QWORD, FILE *, unsigned int *))(a1 + 56))(*(_QWORD *)(a1 + 56), __stream, &v13);
  sub_19C2213B0(__stream, &v13, *(_DWORD *)a1);
  sub_19C2213B0(__stream, &v13, *(_DWORD *)(a1 + 4));
  sub_19C2213B0(__stream, &v13, *(_DWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 40);
  v9 = sub_19C2210A4();
  (*(void (**)(uint64_t, FILE *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, __stream, &v13, 1, v9);
  return v13;
}

uint64_t sub_19C0A5FB4(uint64_t a1, FILE *a2)
{
  return sub_19C0A5FBC(*(_QWORD *)(a1 + 120), a2);
}

uint64_t sub_19C0A5FBC(uint64_t a1, FILE *__stream)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  unsigned int v13;

  v4 = *(_DWORD *)(a1 + 68);
  if (*(_BYTE *)(a1 + 16))
    v5 = 5;
  else
    v5 = 4;
  v12 = v5;
  v13 = 0;
  sub_19C221464(__stream, &v13, &v12);
  v11 = 6;
  sub_19C221464(__stream, &v13, &v11);
  v6 = *(_DWORD *)(a1 + 24);
  v7 = sub_19C2210B4();
  *(_DWORD *)(a1 + 64) = 3;
  *(_DWORD *)(a1 + 68) = v4;
  *(_QWORD *)(a1 + 72) = 0x100000001;
  *(_DWORD *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 84) = 1;
  *(_DWORD *)(a1 + 88) = v7;
  sub_19C168064((_DWORD *)(a1 + 64), __stream, &v13);
  if (*(_BYTE *)(a1 + 16))
    (***(void (****)(_QWORD, FILE *, unsigned int *))(a1 + 56))(*(_QWORD *)(a1 + 56), __stream, &v13);
  sub_19C2213B0(__stream, &v13, *(_DWORD *)a1);
  sub_19C2213B0(__stream, &v13, *(_DWORD *)(a1 + 4));
  sub_19C2213B0(__stream, &v13, *(_DWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 40);
  v9 = sub_19C2210B4();
  (*(void (**)(uint64_t, FILE *, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, __stream, &v13, 1, v9);
  return v13;
}

uint64_t sub_19C0A60F4(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = result;
  if (dword_1EE418968 < a3 || !*(_BYTE *)(result + 188))
  {
    sub_19C0A61A8(result);
    *(_BYTE *)(v4 + 188) = 0;
    dword_1EE418968 = *(_DWORD *)(v4 + 220);
    *(_DWORD *)(v4 + 224) = a3;
    v5 = *(_QWORD *)(v4 + 120);
    if (!v5)
      sub_19C2210D4(37);
    if (*(_BYTE *)(v4 + 216))
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 40) + 184))(*(_QWORD *)(v5 + 40));
    sub_19C0A66BC(v4);
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 120) + 40) + 200))(*(_QWORD *)(*(_QWORD *)(v4 + 120) + 40));
    *(_BYTE *)(v4 + 188) = 1;
  }
  return result;
}

void sub_19C0A61A8(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1 && *(_BYTE *)(a1 + 188))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 208))(*(_QWORD *)(v1 + 40));
    sub_19C0A68A0((_QWORD *)a1);
    v3 = (void *)qword_1ECD3EEC8;
    qword_1ECD3EED0 = qword_1ECD3EEC8;
    qword_1ECD3EF00 = qword_1ECD3EEF8;
    qword_1ECD3EF78 = qword_1ECD3EF70;
    if (qword_1ECD3EED8 != qword_1ECD3EEC8)
    {
      qword_1ECD3EEC8 = 0;
      qword_1ECD3EED0 = 0;
      qword_1ECD3EED8 = 0;
      if (v3)
        operator delete(v3);
    }
    sub_19C16B27C((uint64_t)&qword_1ECD3EEF8);
    sub_19C16B27C((uint64_t)&qword_1ECD3EF70);
    v4 = (void *)qword_1ECD3EE08;
    qword_1ECD3EE10 = qword_1ECD3EE08;
    qword_1ECD3EDF8 = qword_1ECD3EDF0;
    qword_1ECD3EE28 = qword_1ECD3EE20;
    if (qword_1ECD3EE18 != qword_1ECD3EE08)
    {
      qword_1ECD3EE08 = 0;
      qword_1ECD3EE10 = 0;
      qword_1ECD3EE18 = 0;
      if (v4)
        operator delete(v4);
    }
    sub_19C16B27C((uint64_t)&qword_1ECD3EDF0);
    sub_19C16B27C((uint64_t)&qword_1ECD3EE20);
    v5 = (void *)qword_1ECD3EF88;
    qword_1ECD3EF90 = qword_1ECD3EF88;
    qword_1ECD3EE40 = qword_1ECD3EE38;
    qword_1ECD3EE58 = qword_1ECD3EE50;
    if (qword_1ECD3EF98 != qword_1ECD3EF88)
    {
      qword_1ECD3EF88 = 0;
      qword_1ECD3EF90 = 0;
      qword_1ECD3EF98 = 0;
      if (v5)
        operator delete(v5);
    }
    sub_19C16B27C((uint64_t)&qword_1ECD3EE38);
    sub_19C16B27C((uint64_t)&qword_1ECD3EE50);
    v6 = (void *)qword_1ECD3EE98;
    qword_1ECD3EEA0 = qword_1ECD3EE98;
    qword_1ECD3EEB8 = qword_1ECD3EEB0;
    qword_1ECD3EEE8 = qword_1ECD3EEE0;
    if (qword_1ECD3EEA8 != qword_1ECD3EE98)
    {
      qword_1ECD3EE98 = 0;
      qword_1ECD3EEA0 = 0;
      qword_1ECD3EEA8 = 0;
      if (v6)
        operator delete(v6);
    }
    sub_19C16B27C((uint64_t)&qword_1ECD3EEB0);
    sub_19C16B27C((uint64_t)&qword_1ECD3EEE0);
    v7 = (void *)qword_1ECD3EF28;
    qword_1ECD3EF30 = qword_1ECD3EF28;
    qword_1ECD3EF48 = qword_1ECD3EF40;
    qword_1ECD3EF18 = qword_1ECD3EF10;
    if (qword_1ECD3EF38 != qword_1ECD3EF28)
    {
      qword_1ECD3EF28 = 0;
      qword_1ECD3EF30 = 0;
      qword_1ECD3EF38 = 0;
      if (v7)
        operator delete(v7);
    }
    sub_19C16B27C((uint64_t)&qword_1ECD3EF40);
    sub_19C16B27C((uint64_t)&qword_1ECD3EF10);
    v8 = (void *)qword_1ECD3EE80;
    qword_1ECD3EE88 = qword_1ECD3EE80;
    qword_1ECD3EF60 = qword_1ECD3EF58;
    qword_1ECD3EE70 = qword_1ECD3EE68;
    if (qword_1ECD3EE90 != qword_1ECD3EE80)
    {
      qword_1ECD3EE80 = 0;
      qword_1ECD3EE88 = 0;
      qword_1ECD3EE90 = 0;
      if (v8)
        operator delete(v8);
    }
    sub_19C16B27C((uint64_t)&qword_1ECD3EF58);
    sub_19C16B27C((uint64_t)&qword_1ECD3EE68);
    *(_BYTE *)(a1 + 188) = 0;
  }
}

uint64_t sub_19C0A6448(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 120);
  if (!v1)
    sub_19C2210D4(37);
  v2 = result;
  if (!*(_BYTE *)(result + 188))
  {
    if (*(_BYTE *)(result + 216))
      (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 184))(*(_QWORD *)(v1 + 40));
    sub_19C0A66BC(v2);
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 120) + 40) + 200))(*(_QWORD *)(*(_QWORD *)(v2 + 120) + 40));
    *(_BYTE *)(v2 + 188) = 1;
  }
  return result;
}

uint64_t MRLModelGetWeights_0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 168))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
}

uint64_t sub_19C0A64D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
}

void sub_19C0A64EC(_QWORD *a1, int a2)
{
  void ***v4;
  void **v5;
  void **v6;
  _QWORD *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  void *v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  void *v25;
  void *v26;

  v4 = (void ***)a1[16];
  v5 = *v4;
  v6 = v4[1];
  if (v6 == *v4)
  {
    v10 = 0;
LABEL_16:
    sub_19C167E70((uint64_t)v4, 1 - v10);
    goto LABEL_18;
  }
  v7 = *v5;
  if (v5[1] != *v5)
  {
    v8 = 0;
    do
    {
      v9 = (void *)v7[v8];
      if (v9)
      {
        operator delete[](v9);
        v5 = *v4;
        v7 = **v4;
      }
      ++v8;
    }
    while (v8 < ((_BYTE *)v5[1] - (_BYTE *)v7) >> 3);
    v6 = v4[1];
  }
  v10 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5);
  if (v6 == v5)
    goto LABEL_16;
  if (v10 >= 2)
  {
    v11 = v5 + 3;
    if (v6 != v5 + 3)
    {
      v12 = v6;
      do
      {
        v14 = *(v12 - 3);
        v12 -= 3;
        v13 = v14;
        if (v14)
        {
          *(v6 - 2) = v13;
          operator delete(v13);
        }
        v6 = v12;
      }
      while (v12 != v11);
    }
    v4[1] = v11;
  }
LABEL_18:
  v15 = *v4;
  v16 = **v4;
  v17 = ((_BYTE *)(*v4)[1] - v16) >> 3;
  if (a2 <= v17)
  {
    if (a2 < v17)
      v15[1] = &v16[8 * a2];
  }
  else
  {
    sub_19C098930(v15, a2 - v17);
  }
  if (a2 >= 1)
  {
    v18 = 0;
    v19 = 8 * a2;
    do
    {
      v20 = **(_QWORD **)(a1[15] + 104);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 264))(v20);
      v22 = a1[25];
      if (v22)
        v23 = *(_DWORD *)(v22 + 28);
      else
        v23 = 1;
      v24 = v23 * v21;
      v25 = (void *)operator new[]();
      v26 = v25;
      if (v24 >= 1)
        bzero(v25, 4 * v24);
      *(_QWORD *)((char *)**v4 + v18) = v26;
      v18 += 8;
    }
    while (v19 != v18);
  }
}

void sub_19C0A66BC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;

  if (!*(_QWORD *)(a1 + 120))
    sub_19C2210D4(639);
  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *(_QWORD *)(a1 + 128) = v2;
  sub_19C0A64EC((_QWORD *)a1, 2);
  v3 = *(int *)(a1 + 36);
  if (!(_DWORD)v3)
  {
    *(_QWORD *)(a1 + 168) = 0;
    sub_19C2210D4(10);
  }
  *(_QWORD *)(a1 + 168) = operator new[]();
  v4 = *(_QWORD *)(a1 + 120);
  if (!v4)
    sub_19C2210D4(34);
  v5 = (_QWORD *)operator new();
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v4 + 40) + 128))(*(_QWORD *)(v4 + 40), v5);
  *(_QWORD *)(a1 + 176) = v5;
  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  if ((v3 & 0x80000000) != 0)
    sub_19C07DA0C();
  v7 = (char *)operator new(8 * v3);
  *v6 = v7;
  v6[2] = &v7[8 * v3];
  bzero(v7, 8 * v3);
  v6[1] = &v7[8 * v3];
  *(_QWORD *)(a1 + 160) = v6;
}

void sub_19C0A6810(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A6834(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

_QWORD *sub_19C0A683C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(a1 + 120);
  if (!v1)
    sub_19C2210D4(34);
  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v1 + 40) + 128))(*(_QWORD *)(v1 + 40), v2);
  return v2;
}

void sub_19C0A68A0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  char **v13;
  void **v14;
  void *v15;

  v2 = (uint64_t **)a1[16];
  if (v2)
  {
    v3 = *v2;
    v4 = **v2;
    if ((*v2)[1] == v4)
      goto LABEL_9;
    v5 = 0;
    do
    {
      v6 = *(void **)(v4 + 8 * v5);
      if (v6)
      {
        operator delete[](v6);
        v3 = *v2;
        v4 = **v2;
      }
      ++v5;
    }
    while (v5 < (v3[1] - v4) >> 3);
    v2 = (uint64_t **)a1[16];
    if (!v2)
      goto LABEL_17;
    v3 = *v2;
    if (*v2)
    {
LABEL_9:
      v7 = v2[1];
      v8 = v3;
      if (v7 != v3)
      {
        v9 = v2[1];
        do
        {
          v11 = (void *)*(v9 - 3);
          v9 -= 3;
          v10 = v11;
          if (v11)
          {
            *(v7 - 2) = (uint64_t)v10;
            operator delete(v10);
          }
          v7 = v9;
        }
        while (v9 != v3);
        v8 = *v2;
      }
      v2[1] = v3;
      operator delete(v8);
    }
    operator delete(v2);
LABEL_17:
    a1[16] = 0;
  }
  v12 = (void *)a1[21];
  if (v12)
  {
    operator delete[](v12);
    a1[21] = 0;
  }
  v13 = (char **)a1[22];
  if (v13)
  {
    sub_19C0A69B8((uint64_t)a1, v13);
    a1[22] = 0;
  }
  v14 = (void **)a1[20];
  if (v14)
  {
    v15 = *v14;
    if (*v14)
    {
      v14[1] = v15;
      operator delete(v15);
    }
    operator delete(v14);
    a1[20] = 0;
  }
}

void sub_19C0A69B8(uint64_t a1, char **__p)
{
  char *v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;

  if (!*(_QWORD *)(a1 + 120))
    sub_19C2210D4(40);
  if (!__p)
    sub_19C2210D4(41);
  v3 = __p[1];
  if (v3 != *__p)
  {
    v4 = 0;
    v5 = 8;
    v3 = *__p;
    do
    {
      v6 = *(void ***)&v3[v5];
      if (!*v6 || (operator delete[](*v6), v3 = *__p, (v6 = *(void ***)&(*__p)[v5]) != 0))
      {
        operator delete(v6);
        v3 = *__p;
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < (__p[1] - v3) >> 4);
  }
  if (v3)
  {
    __p[1] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

uint64_t sub_19C0A6A68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void **v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;

  sub_19C0A61A8(a1);
  *(_BYTE *)(a1 + 188) = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = (void *)sub_19C166B7C(v3);
    operator delete(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(_QWORD **)(a1 + 120);
  if (v5)
  {
    v6 = v5[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6);
    v7 = v5[12];
    if (v7)
    {
      v8 = (void *)sub_19C0AE294(v7);
      operator delete(v8);
    }
    v9 = (void *)v5[13];
    if (v9)
    {
      v5[14] = v9;
      operator delete(v9);
    }
    operator delete(v5);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v10 = *(_QWORD *)(a1 + 144);
  if (v10)
  {
    v11 = *(_DWORD *)(a1 + 184);
    if (v11 == 3)
    {
      sub_19C07C924(v10 + 72, *(_QWORD **)(v10 + 80));
      sub_19C07C924(v10 + 48, *(_QWORD **)(v10 + 56));
      sub_19C166D48(v10 + 24, *(char **)(v10 + 32));
      sub_19C098FBC(v10, *(char **)(v10 + 8));
    }
    else
    {
      if (v11 != 2)
      {
LABEL_19:
        *(_QWORD *)(a1 + 144) = 0;
        goto LABEL_20;
      }
      sub_19C07C924(v10 + 72, *(_QWORD **)(v10 + 80));
      sub_19C07C924(v10 + 48, *(_QWORD **)(v10 + 56));
      sub_19C07C924(v10 + 24, *(_QWORD **)(v10 + 32));
      sub_19C07C924(v10, *(_QWORD **)(v10 + 8));
    }
    operator delete((void *)v10);
    goto LABEL_19;
  }
LABEL_20:
  v12 = *(void ***)(a1 + 208);
  if (v12)
  {
    v13 = (char *)*v12;
    if (*v12)
    {
      v14 = (char *)v12[1];
      v15 = *v12;
      if (v14 != v13)
      {
        v16 = (char *)v12[1];
        do
        {
          v18 = (void *)*((_QWORD *)v16 - 3);
          v16 -= 24;
          v17 = v18;
          if (v18)
          {
            *((_QWORD *)v14 - 2) = v17;
            operator delete(v17);
          }
          v14 = v16;
        }
        while (v16 != v13);
        v15 = *v12;
      }
      v12[1] = v13;
      operator delete(v15);
    }
    operator delete(v12);
  }
  dword_1EE418968 = 2;
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 72));
  return a1;
}

void sub_19C0A6C44(_QWORD *a1, int a2, int a3, char **a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  char *v68;
  unint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  int v109;
  int v110;
  _QWORD *v111;

  v6 = a3 + a2;
  v7 = (a3 + a2 - 2) % a3;
  v8 = *a1;
  v10 = a4[1];
  v9 = a4[2];
  v11 = v10;
  v111 = a1;
  v110 = a3 + a2;
  if (v10 < v9)
  {
    *(_DWORD *)v10 = *(_DWORD *)(v8 + 4 * v7);
    v12 = v10 + 4;
    goto LABEL_25;
  }
  v13 = *a4;
  v14 = v10 - *a4;
  v15 = v14 >> 2;
  v16 = (v14 >> 2) + 1;
  if (v16 >> 62)
    goto LABEL_127;
  v17 = v9 - v13;
  if (v17 >> 1 > v16)
    v16 = v17 >> 1;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
    v18 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
  {
    if (v18 >> 62)
      goto LABEL_128;
    v19 = operator new(4 * v18);
  }
  else
  {
    v19 = 0;
  }
  v20 = &v19[4 * v15];
  v9 = &v19[4 * v18];
  *(_DWORD *)v20 = *(_DWORD *)(v8 + 4 * v7);
  v12 = v20 + 4;
  if (v10 == v13)
  {
    v6 = v110;
  }
  else
  {
    v21 = v10 - v13 - 4;
    if (v21 >= 0x2C)
    {
      v22 = v10 - v19 - v14;
      v6 = v110;
      if (v22 >= 0x20)
      {
        v23 = (v21 >> 2) + 1;
        v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        v11 = &v10[-v24];
        v20 -= v24;
        v25 = &v19[4 * v15 - 16];
        v26 = v10 - 16;
        v27 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_22;
      }
    }
    else
    {
      v6 = v110;
    }
    do
    {
      v29 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v20 - 1) = v29;
      v20 -= 4;
    }
    while (v11 != v13);
  }
LABEL_22:
  *a4 = v20;
  a4[1] = v12;
  a4[2] = v9;
  if (v13)
  {
    operator delete(v13);
    v9 = a4[2];
  }
  a1 = v111;
LABEL_25:
  a4[1] = v12;
  v30 = (v6 - 1) % a3;
  v31 = *a1;
  if (v12 < v9)
  {
    *(_DWORD *)v12 = *(_DWORD *)(v31 + 4 * v30);
    v32 = v12 + 4;
    goto LABEL_45;
  }
  v33 = *a4;
  v34 = v12 - *a4;
  v35 = v34 >> 2;
  v36 = (v34 >> 2) + 1;
  if (v36 >> 62)
    goto LABEL_127;
  v37 = v9 - v33;
  if (v37 >> 1 > v36)
    v36 = v37 >> 1;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
    v38 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (v38)
  {
    if (v38 >> 62)
      goto LABEL_128;
    v39 = operator new(4 * v38);
  }
  else
  {
    v39 = 0;
  }
  v40 = &v39[4 * v35];
  v9 = &v39[4 * v38];
  *(_DWORD *)v40 = *(_DWORD *)(v31 + 4 * v30);
  v32 = v40 + 4;
  if (v12 == v33)
  {
    v6 = v110;
    *a4 = v40;
    a4[1] = v32;
    a4[2] = v9;
    if (!v33)
      goto LABEL_44;
    goto LABEL_43;
  }
  v41 = v12 - v33 - 4;
  if (v41 < 0x2C || (unint64_t)(v12 - v39 - v34) < 0x20)
  {
    v42 = v12;
    v6 = v110;
    do
    {
LABEL_41:
      v43 = *((_DWORD *)v42 - 1);
      v42 -= 4;
      *((_DWORD *)v40 - 1) = v43;
      v40 -= 4;
    }
    while (v42 != v33);
    goto LABEL_42;
  }
  v85 = (v41 >> 2) + 1;
  v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
  v42 = &v12[-v86];
  v40 -= v86;
  v87 = &v39[4 * v35 - 16];
  v88 = v12 - 16;
  v89 = v85 & 0x7FFFFFFFFFFFFFF8;
  v6 = v110;
  do
  {
    v90 = *(_OWORD *)v88;
    *(v87 - 1) = *((_OWORD *)v88 - 1);
    *v87 = v90;
    v87 -= 2;
    v88 -= 32;
    v89 -= 8;
  }
  while (v89);
  if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_41;
LABEL_42:
  *a4 = v40;
  a4[1] = v32;
  a4[2] = v9;
  if (v33)
  {
LABEL_43:
    operator delete(v33);
    v9 = a4[2];
  }
LABEL_44:
  a1 = v111;
LABEL_45:
  a4[1] = v32;
  v44 = v6 % a3;
  v45 = *a1;
  if (v32 < v9)
  {
    *(_DWORD *)v32 = *(_DWORD *)(v45 + 4 * v44);
    v46 = v32 + 4;
    goto LABEL_67;
  }
  v47 = *a4;
  v48 = v32 - *a4;
  v49 = v48 >> 2;
  v50 = (v48 >> 2) + 1;
  if (v50 >> 62)
    goto LABEL_127;
  v51 = v9 - v47;
  if (v51 >> 1 > v50)
    v50 = v51 >> 1;
  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
    v52 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v52 = v50;
  if (v52)
  {
    if (v52 >> 62)
      goto LABEL_128;
    v53 = operator new(4 * v52);
  }
  else
  {
    v53 = 0;
  }
  v54 = &v53[4 * v49];
  v9 = &v53[4 * v52];
  *(_DWORD *)v54 = *(_DWORD *)(v45 + 4 * v44);
  v46 = v54 + 4;
  if (v32 == v47)
  {
    v6 = v110;
    *a4 = v54;
    a4[1] = v46;
    a4[2] = v9;
    if (!v47)
      goto LABEL_66;
    goto LABEL_65;
  }
  v55 = v32 - v47 - 4;
  if (v55 < 0x2C || (unint64_t)(v32 - v53 - v48) < 0x20)
  {
    v56 = v32;
    v6 = v110;
    do
    {
LABEL_63:
      v57 = *((_DWORD *)v56 - 1);
      v56 -= 4;
      *((_DWORD *)v54 - 1) = v57;
      v54 -= 4;
    }
    while (v56 != v47);
    goto LABEL_64;
  }
  v91 = (v55 >> 2) + 1;
  v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
  v56 = &v32[-v92];
  v54 -= v92;
  v93 = &v53[4 * v49 - 16];
  v94 = v32 - 16;
  v95 = v91 & 0x7FFFFFFFFFFFFFF8;
  v6 = v110;
  do
  {
    v96 = *(_OWORD *)v94;
    *(v93 - 1) = *((_OWORD *)v94 - 1);
    *v93 = v96;
    v93 -= 2;
    v94 -= 32;
    v95 -= 8;
  }
  while (v95);
  if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_63;
LABEL_64:
  *a4 = v54;
  a4[1] = v46;
  a4[2] = v9;
  if (v47)
  {
LABEL_65:
    operator delete(v47);
    v9 = a4[2];
  }
LABEL_66:
  a1 = v111;
LABEL_67:
  a4[1] = v46;
  v58 = (v6 + 1) % a3;
  v59 = *a1;
  if (v46 < v9)
  {
    *(_DWORD *)v46 = *(_DWORD *)(v59 + 4 * v58);
    v60 = v46 + 4;
    goto LABEL_89;
  }
  v61 = *a4;
  v62 = v46 - *a4;
  v63 = v62 >> 2;
  v64 = (v62 >> 2) + 1;
  if (v64 >> 62)
    goto LABEL_127;
  v65 = v9 - v61;
  if (v65 >> 1 > v64)
    v64 = v65 >> 1;
  if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
    v66 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v66 = v64;
  if (v66)
  {
    if (v66 >> 62)
      goto LABEL_128;
    v67 = operator new(4 * v66);
  }
  else
  {
    v67 = 0;
  }
  v68 = &v67[4 * v63];
  v9 = &v67[4 * v66];
  *(_DWORD *)v68 = *(_DWORD *)(v59 + 4 * v58);
  v60 = v68 + 4;
  if (v46 == v61)
  {
    v6 = v110;
    *a4 = v68;
    a4[1] = v60;
    a4[2] = v9;
    if (!v61)
      goto LABEL_88;
    goto LABEL_87;
  }
  v69 = v46 - v61 - 4;
  if (v69 < 0x2C || (unint64_t)(v46 - v67 - v62) < 0x20)
  {
    v70 = v46;
    v6 = v110;
    do
    {
LABEL_85:
      v71 = *((_DWORD *)v70 - 1);
      v70 -= 4;
      *((_DWORD *)v68 - 1) = v71;
      v68 -= 4;
    }
    while (v70 != v61);
    goto LABEL_86;
  }
  v97 = (v69 >> 2) + 1;
  v98 = 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
  v70 = &v46[-v98];
  v68 -= v98;
  v99 = &v67[4 * v63 - 16];
  v100 = v46 - 16;
  v101 = v97 & 0x7FFFFFFFFFFFFFF8;
  v6 = v110;
  do
  {
    v102 = *(_OWORD *)v100;
    *(v99 - 1) = *((_OWORD *)v100 - 1);
    *v99 = v102;
    v99 -= 2;
    v100 -= 32;
    v101 -= 8;
  }
  while (v101);
  if (v97 != (v97 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_85;
LABEL_86:
  *a4 = v68;
  a4[1] = v60;
  a4[2] = v9;
  if (v61)
  {
LABEL_87:
    operator delete(v61);
    v9 = a4[2];
  }
LABEL_88:
  a1 = v111;
LABEL_89:
  a4[1] = v60;
  v72 = (v6 + 2) % a3;
  v73 = *a1;
  if (v60 < v9)
  {
    *(_DWORD *)v60 = *(_DWORD *)(v73 + 4 * v72);
    v74 = v60 + 4;
    goto LABEL_126;
  }
  v75 = *a4;
  v76 = v60 - *a4;
  v77 = v76 >> 2;
  v78 = (v76 >> 2) + 1;
  if (v78 >> 62)
LABEL_127:
    sub_19C07DA0C();
  v79 = v9 - v75;
  if (v79 >> 1 > v78)
    v78 = v79 >> 1;
  if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
    v80 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v80 = v78;
  if (v80)
  {
    if (!(v80 >> 62))
    {
      v81 = operator new(4 * v80);
      goto LABEL_103;
    }
LABEL_128:
    sub_19C07C7FC();
  }
  v81 = 0;
LABEL_103:
  v82 = &v81[4 * v77];
  *(_DWORD *)v82 = *(_DWORD *)(v73 + 4 * v72);
  v74 = v82 + 4;
  if (v60 == v75)
    goto LABEL_124;
  v83 = v60 - v75 - 4;
  if (v83 < 0x2C)
  {
    v84 = v60;
    goto LABEL_123;
  }
  if ((unint64_t)(v60 - v81 - v76) < 0x20)
  {
    v84 = v60;
    do
    {
LABEL_123:
      v109 = *((_DWORD *)v84 - 1);
      v84 -= 4;
      *((_DWORD *)v82 - 1) = v109;
      v82 -= 4;
    }
    while (v84 != v75);
    goto LABEL_124;
  }
  v103 = (v83 >> 2) + 1;
  v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
  v84 = &v60[-v104];
  v82 -= v104;
  v105 = &v81[4 * v77 - 16];
  v106 = v60 - 16;
  v107 = v103 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v108 = *(_OWORD *)v106;
    *(v105 - 1) = *((_OWORD *)v106 - 1);
    *v105 = v108;
    v105 -= 2;
    v106 -= 32;
    v107 -= 8;
  }
  while (v107);
  if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_123;
LABEL_124:
  *a4 = v82;
  a4[1] = v74;
  a4[2] = &v81[4 * v80];
  if (v75)
    operator delete(v75);
LABEL_126:
  a4[1] = v74;
}

uint64_t sub_19C0A7320(int *a1, float *a2, char a3, char a4, int a5, int a6)
{
  int v6;
  double v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  _DWORD v14[2];
  int32x2_t v15;
  uint64_t v16;
  double v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a1[8];
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 3);
  v9 = *a1;
  v14[0] = a1[4];
  v14[1] = v6;
  v10 = *(_QWORD *)a2;
  v15 = vrev64_s32(*(int32x2_t *)(a1 + 9));
  v16 = v10;
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v20 = a6;
  v21 = 0;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = 1;
  v26 = 0;
  v27 = 0;
  if ((a5 & 7) != 0)
    sub_19C2210D4(234);
  v12 = operator new();
  sub_19C0AE44C(v12, v14, *((_QWORD *)a1 + 3));
  return v12;
}

void sub_19C0A73D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A73EC(uint64_t a1, int a2, int *a3, _DWORD *a4, int a5, int a6)
{
  uint64_t v11;
  int v12;
  char *v13;
  long double v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  void *v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;
  int v35;
  void *__p[2];
  uint64_t v37;

  switch(a2)
  {
    case 0:
      *a3 = 20;
      *a4 = a6;
      v11 = operator new();
      v12 = *a3;
      v13 = (char *)&unk_1E3D1E098;
      goto LABEL_8;
    case 1:
      *a3 = a5;
      *a4 = a6;
      v11 = operator new();
      v12 = *a3;
      v13 = (char *)&unk_1E3D1E210;
LABEL_8:
      *(_QWORD *)v11 = v13 + 16;
      *(_DWORD *)(v11 + 8) = v12;
      return v11;
    case 2:
      v11 = operator new();
      *(_QWORD *)v11 = &unk_1E3D1F3D0;
      *(_DWORD *)(v11 + 8) = a5;
      *(_DWORD *)(v11 + 20) = 10;
      v14 = log2((double)a5);
      v15 = 1 << ((int)v14 - 9);
      *(_DWORD *)(v11 + 12) = 1024;
      *(_DWORD *)(v11 + 16) = v15;
      *(_DWORD *)(v11 + 24) = (int)v14 - 9;
      *(_DWORD *)(v11 + 28) = v15 + 1024;
      *(_DWORD *)(v11 + 36) = 0;
      *(_DWORD *)(v11 + 40) = 0;
      *(_DWORD *)(v11 + 32) = (int)v14 + 1;
      *a3 = v15 + 1024;
      *a4 = a6;
      return v11;
    case 3:
      *a3 = 20;
      *a4 = a6;
      v11 = operator new();
      *(_DWORD *)(v11 + 8) = *a3;
      *(_QWORD *)v11 = &unk_1E3D1E148;
      return v11;
    case 4:
      *a3 = a5;
      *a4 = a6;
      v11 = operator new();
      if (*(char *)(a1 + 119) < 0)
      {
        sub_19C07C6E8(__p, *(void **)(a1 + 96), *(_QWORD *)(a1 + 104));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 96);
        v37 = *(_QWORD *)(a1 + 112);
      }
      sub_19C166F30(v11, (uint64_t)__p, *a3);
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        return v11;
      v31 = __p[0];
LABEL_18:
      operator delete(v31);
      break;
    case 5:
      *a4 = a6;
      v16 = operator new();
      *(_QWORD *)v16 = &unk_1E3D1E0A8;
      *(_DWORD *)(v16 + 8) = 20;
      v17 = operator new(8uLL);
      *v17 = v16;
      v18 = operator new();
      *(_QWORD *)v18 = &unk_1E3D1E0A8;
      *(_DWORD *)(v18 + 8) = 20;
      v19 = operator new(0x10uLL);
      *v19 = *v17;
      v19[1] = v18;
      operator delete(v17);
      v20 = operator new();
      *(_QWORD *)v20 = &unk_1E3D1E0A8;
      *(_DWORD *)(v20 + 8) = 20;
      v21 = operator new(0x20uLL);
      v21[2] = v20;
      *(_OWORD *)v21 = *(_OWORD *)v19;
      operator delete(v19);
      v22 = operator new();
      *(_QWORD *)v22 = &unk_1E3D1E0A8;
      *(_DWORD *)(v22 + 8) = 20;
      v21[3] = v22;
      v23 = operator new();
      *(_QWORD *)v23 = &unk_1E3D1E0A8;
      *(_DWORD *)(v23 + 8) = 20;
      v24 = operator new(0x40uLL);
      v24[4] = v23;
      v25 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v21;
      *((_OWORD *)v24 + 1) = v25;
      operator delete(v21);
      v11 = operator new();
      v26 = operator new(0x28uLL);
      v27 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v26 = *(_OWORD *)v24;
      *((_OWORD *)v26 + 1) = v27;
      *((_QWORD *)v26 + 4) = v24[4];
      *(_QWORD *)v11 = &unk_1E3D1E1A0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_DWORD *)(v11 + 8) = 0;
      sub_19C11EAD0((_QWORD *)(v11 + 16), (char *)v26, (char *)v26 + 40, 5uLL);
      v28 = *(_QWORD *)(v11 + 24) - *(_QWORD *)(v11 + 16);
      if ((int)(v28 >> 3) >= 1)
      {
        v29 = 0;
        v30 = v28 & 0x7FFFFFFF8;
        do
        {
          *(_DWORD *)(v11 + 8) += (***(uint64_t (****)(_QWORD))(*(_QWORD *)(v11 + 16) + v29))(*(_QWORD *)(*(_QWORD *)(v11 + 16) + v29));
          v29 += 8;
        }
        while (v30 != v29);
      }
      operator delete(v26);
      *a3 = 100;
      v31 = v24;
      goto LABEL_18;
    case 6:
      *a3 = a5;
      *a4 = a6;
      if (!*(_QWORD *)(a1 + 208))
      {
        v35 = 100;
LABEL_22:
        sub_19C2210D4(v35);
      }
      v11 = operator new();
      v32 = *a3;
      v33 = *(_QWORD *)(a1 + 208);
      *(_QWORD *)v11 = &unk_1E3D1E0F8;
      *(_DWORD *)(v11 + 8) = v32;
      *(_QWORD *)(v11 + 16) = v33;
      break;
    default:
      v35 = 46;
      goto LABEL_22;
  }
  return v11;
}

void sub_19C0A78BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A7940(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
}

uint64_t sub_19C0A7954(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **p_dst;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 __dst;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  if (*(_BYTE *)(a1 + 216))
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
  if (!*(_BYTE *)(a1 + 152))
  {
    if (a2 == 16)
    {
      v9 = *(_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 95) < 0)
      {
        sub_19C07C6E8(&v20, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
      }
      else
      {
        v20 = *(_OWORD *)(a1 + 72);
        v21 = *(_QWORD *)(a1 + 88);
      }
      sub_19C0A8C00(v9, (const char *)&v20);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_58;
      p_dst = (void **)&v20;
    }
    else if (a2 == 8)
    {
      v7 = *(_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 95) < 0)
      {
        sub_19C07C6E8(&__dst, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
      }
      else
      {
        __dst = *(_OWORD *)(a1 + 72);
        v23 = *(_QWORD *)(a1 + 88);
      }
      sub_19C0A88B0(v7, (const char *)&__dst);
      if ((SHIBYTE(v23) & 0x80000000) == 0)
        goto LABEL_58;
      p_dst = (void **)&__dst;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 95) < 0)
      {
        sub_19C07C6E8(&v18, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
      }
      else
      {
        v18 = *(_OWORD *)(a1 + 72);
        v19 = *(_QWORD *)(a1 + 88);
      }
      sub_19C0A8F50(v10, (const char *)&v18);
      if ((SHIBYTE(v19) & 0x80000000) == 0)
        goto LABEL_58;
      p_dst = (void **)&v18;
    }
LABEL_57:
    operator delete(*p_dst);
    goto LABEL_58;
  }
  v4 = *(_DWORD *)(a1 + 184);
  if ((v4 & 0xFFFFFFFE) != 2)
    sub_19C2210D4(19);
  v5 = *(_QWORD *)(a1 + 144);
  if (v4 == 2)
  {
    if (a2 == 16)
    {
      v11 = *(_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 95) < 0)
      {
        sub_19C07C6E8(&v32, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
      }
      else
      {
        v32 = *(_OWORD *)(a1 + 72);
        v33 = *(_QWORD *)(a1 + 88);
      }
      sub_19C0A7FB4(v11, (const char *)&v32, v5, v5 + 24, v5 + 48, v5 + 72);
      if (SHIBYTE(v33) < 0)
      {
        p_dst = (void **)&v32;
        goto LABEL_57;
      }
    }
    else if (a2 == 8)
    {
      v6 = *(_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 95) < 0)
      {
        sub_19C07C6E8(&v34, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
      }
      else
      {
        v34 = *(_OWORD *)(a1 + 72);
        v35 = *(_QWORD *)(a1 + 88);
      }
      sub_19C0A7DE8(v6, (const char *)&v34, v5, v5 + 24, v5 + 48, v5 + 72);
      if (SHIBYTE(v35) < 0)
      {
        p_dst = (void **)&v34;
        goto LABEL_57;
      }
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 120);
      if (*(char *)(a1 + 95) < 0)
      {
        sub_19C07C6E8(&v30, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
      }
      else
      {
        v30 = *(_OWORD *)(a1 + 72);
        v31 = *(_QWORD *)(a1 + 88);
      }
      sub_19C0A8180(v13, (const char *)&v30, v5, v5 + 24, v5 + 48, v5 + 72);
      if (SHIBYTE(v31) < 0)
      {
        p_dst = (void **)&v30;
        goto LABEL_57;
      }
    }
  }
  else if (a2 == 16)
  {
    v12 = *(_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 95) < 0)
    {
      sub_19C07C6E8(&v26, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
    }
    else
    {
      v26 = *(_OWORD *)(a1 + 72);
      v27 = *(_QWORD *)(a1 + 88);
    }
    sub_19C0A8518(v12, (const char *)&v26, v5, v5 + 24, v5 + 48, v5 + 72);
    if (SHIBYTE(v27) < 0)
    {
      p_dst = (void **)&v26;
      goto LABEL_57;
    }
  }
  else if (a2 == 8)
  {
    v8 = *(_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 95) < 0)
    {
      sub_19C07C6E8(&v28, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
    }
    else
    {
      v28 = *(_OWORD *)(a1 + 72);
      v29 = *(_QWORD *)(a1 + 88);
    }
    sub_19C0A834C(v8, (const char *)&v28, v5, v5 + 24, v5 + 48, v5 + 72);
    if (SHIBYTE(v29) < 0)
    {
      p_dst = (void **)&v28;
      goto LABEL_57;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 120);
    if (*(char *)(a1 + 95) < 0)
    {
      sub_19C07C6E8(&v24, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
    }
    else
    {
      v24 = *(_OWORD *)(a1 + 72);
      v25 = *(_QWORD *)(a1 + 88);
    }
    sub_19C0A86E4(v14, (const char *)&v24, v5, v5 + 24, v5 + 48, v5 + 72);
    if (SHIBYTE(v25) < 0)
    {
      p_dst = (void **)&v24;
      goto LABEL_57;
    }
  }
LABEL_58:
  v16 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(v16 + 28) = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v16 + 40) + 280))(*(_QWORD *)(v16 + 40), 0);
}

void sub_19C0A7D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0A7DE8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  __int128 __p;
  char v20;
  __int128 __dst;
  unint64_t v22;

  v12 = operator new();
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v13 = strlen(a2);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v22 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v22) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_10:
    memmove(p_dst, a2, v14);
  *((_BYTE *)p_dst + v14) = 0;
  v20 = 1;
  LOWORD(__p) = 114;
  sub_19C168800(v12, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 96) = v12;
  if (v20 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return sub_19C168160(a1, a3, a4, a5, a6);
LABEL_15:
    operator delete((void *)__dst);
    return sub_19C168160(a1, a3, a4, a5, a6);
  }
  if (SHIBYTE(v22) < 0)
    goto LABEL_15;
  return sub_19C168160(a1, a3, a4, a5, a6);
}

void sub_19C0A7F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C0A7FA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A7FB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  __int128 __p;
  char v20;
  __int128 __dst;
  unint64_t v22;

  v12 = operator new();
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v13 = strlen(a2);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v22 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v22) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_10:
    memmove(p_dst, a2, v14);
  *((_BYTE *)p_dst + v14) = 0;
  v20 = 1;
  LOWORD(__p) = 114;
  sub_19C168800(v12, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 96) = v12;
  if (v20 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return sub_19C168CE8(a1, a3, a4, a5, a6);
LABEL_15:
    operator delete((void *)__dst);
    return sub_19C168CE8(a1, a3, a4, a5, a6);
  }
  if (SHIBYTE(v22) < 0)
    goto LABEL_15;
  return sub_19C168CE8(a1, a3, a4, a5, a6);
}

void sub_19C0A8120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C0A816C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A8180(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  __int128 __p;
  char v20;
  __int128 __dst;
  unint64_t v22;

  v12 = operator new();
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v13 = strlen(a2);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v22 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v22) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_10:
    memmove(p_dst, a2, v14);
  *((_BYTE *)p_dst + v14) = 0;
  v20 = 1;
  LOWORD(__p) = 114;
  sub_19C168800(v12, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 96) = v12;
  if (v20 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return sub_19C169388(a1, a3, a4, a5, a6);
LABEL_15:
    operator delete((void *)__dst);
    return sub_19C169388(a1, a3, a4, a5, a6);
  }
  if (SHIBYTE(v22) < 0)
    goto LABEL_15;
  return sub_19C169388(a1, a3, a4, a5, a6);
}

void sub_19C0A82EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C0A8338(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A834C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  __int128 __p;
  char v20;
  __int128 __dst;
  unint64_t v22;

  v12 = operator new();
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v13 = strlen(a2);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v22 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v22) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_10:
    memmove(p_dst, a2, v14);
  *((_BYTE *)p_dst + v14) = 0;
  v20 = 1;
  LOWORD(__p) = 114;
  sub_19C168800(v12, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 96) = v12;
  if (v20 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return sub_19C169A28(a1, a3, a4, a5, a6);
LABEL_15:
    operator delete((void *)__dst);
    return sub_19C169A28(a1, a3, a4, a5, a6);
  }
  if (SHIBYTE(v22) < 0)
    goto LABEL_15;
  return sub_19C169A28(a1, a3, a4, a5, a6);
}

void sub_19C0A84B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C0A8504(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A8518(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  __int128 __p;
  char v20;
  __int128 __dst;
  unint64_t v22;

  v12 = operator new();
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v13 = strlen(a2);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v22 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v22) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_10:
    memmove(p_dst, a2, v14);
  *((_BYTE *)p_dst + v14) = 0;
  v20 = 1;
  LOWORD(__p) = 114;
  sub_19C168800(v12, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 96) = v12;
  if (v20 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return sub_19C16A1F8(a1, a3, a4, a5, a6);
LABEL_15:
    operator delete((void *)__dst);
    return sub_19C16A1F8(a1, a3, a4, a5, a6);
  }
  if (SHIBYTE(v22) < 0)
    goto LABEL_15;
  return sub_19C16A1F8(a1, a3, a4, a5, a6);
}

void sub_19C0A8684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C0A86D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A86E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  __int128 __p;
  char v20;
  __int128 __dst;
  unint64_t v22;

  v12 = operator new();
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v13 = strlen(a2);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v22 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v22) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_10:
    memmove(p_dst, a2, v14);
  *((_BYTE *)p_dst + v14) = 0;
  v20 = 1;
  LOWORD(__p) = 114;
  sub_19C168800(v12, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 96) = v12;
  if (v20 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return sub_19C16A82C(a1, a3, a4, a5, a6);
LABEL_15:
    operator delete((void *)__dst);
    return sub_19C16A82C(a1, a3, a4, a5, a6);
  }
  if (SHIBYTE(v22) < 0)
    goto LABEL_15;
  return sub_19C16A82C(a1, a3, a4, a5, a6);
}

void sub_19C0A8850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C0A889C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A88B0(uint64_t a1, const char *a2)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  __int128 __p;
  char v28;
  __int128 __dst;
  unint64_t v30;

  v4 = operator new();
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v30 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v30) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_10:
    memmove(p_dst, a2, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v28 = 1;
  LOWORD(__p) = 114;
  sub_19C168800(v4, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 96) = v4;
  if (v28 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete((void *)__dst);
LABEL_13:
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(int *)(v10 + 72);
  v13 = (unsigned int *)(*(_QWORD *)v10 + v12);
  if ((unint64_t)v13 <= *(_QWORD *)v10 + *(_QWORD *)(v10 + 8) - 4)
  {
    v14 = *v13;
    *(_DWORD *)(v10 + 72) = v12 + 4;
    if (v14 > 1)
    {
      if (v14 - 2 > 3)
        sub_19C2210D4(38);
      sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v10, 1);
      if (v14 == 3 || v14 == 5)
        goto LABEL_17;
      goto LABEL_18;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 64) = xmmword_19C277550;
  *(_DWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 84) = 0x2000000001;
  if (v14)
LABEL_17:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
LABEL_18:
  v16 = *(_DWORD *)(a1 + 88);
  if (v16 != sub_19C2210B4() || *(_DWORD *)(a1 + 84) != 1)
    sub_19C2210D4(33);
  v17 = *(uint64_t **)(a1 + 96);
  v18 = *v17;
  v19 = v17[1];
  v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)a1 = 0;
    v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4)
      goto LABEL_22;
LABEL_25:
    *(_DWORD *)(a1 + 4) = 0;
    v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v23 <= v18 + v19 - 4)
      goto LABEL_23;
LABEL_26:
    *(_DWORD *)(a1 + 8) = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
  }
  *(_DWORD *)a1 = *v20;
  v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  v18 = *v17;
  v19 = v17[1];
  v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4)
    goto LABEL_25;
LABEL_22:
  *(_DWORD *)(a1 + 4) = *v21;
  v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  v23 = (_DWORD *)(*v17 + v22);
  if ((unint64_t)v23 > *v17 + v17[1] - 4)
    goto LABEL_26;
LABEL_23:
  *(_DWORD *)(a1 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
}

void sub_19C0A8BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C0A8BEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A8C00(uint64_t a1, const char *a2)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  __int128 __p;
  char v28;
  __int128 __dst;
  unint64_t v30;

  v4 = operator new();
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v30 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v30) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_10:
    memmove(p_dst, a2, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v28 = 1;
  LOWORD(__p) = 114;
  sub_19C168800(v4, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 96) = v4;
  if (v28 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete((void *)__dst);
LABEL_13:
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(int *)(v10 + 72);
  v13 = (unsigned int *)(*(_QWORD *)v10 + v12);
  if ((unint64_t)v13 <= *(_QWORD *)v10 + *(_QWORD *)(v10 + 8) - 4)
  {
    v14 = *v13;
    *(_DWORD *)(v10 + 72) = v12 + 4;
    if (v14 > 1)
    {
      if (v14 - 2 > 3)
        sub_19C2210D4(38);
      sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v10, 1);
      if (v14 == 3 || v14 == 5)
        goto LABEL_17;
      goto LABEL_18;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 64) = xmmword_19C277550;
  *(_DWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 84) = 0x2000000001;
  if (v14)
LABEL_17:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
LABEL_18:
  v16 = *(_DWORD *)(a1 + 88);
  if (v16 != sub_19C2210AC() || *(_DWORD *)(a1 + 84) != 1)
    sub_19C2210D4(33);
  v17 = *(uint64_t **)(a1 + 96);
  v18 = *v17;
  v19 = v17[1];
  v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)a1 = 0;
    v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4)
      goto LABEL_22;
LABEL_25:
    *(_DWORD *)(a1 + 4) = 0;
    v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v23 <= v18 + v19 - 4)
      goto LABEL_23;
LABEL_26:
    *(_DWORD *)(a1 + 8) = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
  }
  *(_DWORD *)a1 = *v20;
  v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  v18 = *v17;
  v19 = v17[1];
  v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4)
    goto LABEL_25;
LABEL_22:
  *(_DWORD *)(a1 + 4) = *v21;
  v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  v23 = (_DWORD *)(*v17 + v22);
  if ((unint64_t)v23 > *v17 + v17[1] - 4)
    goto LABEL_26;
LABEL_23:
  *(_DWORD *)(a1 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
}

void sub_19C0A8EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C0A8F3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A8F50(uint64_t a1, const char *a2)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int v24;
  __int128 __p;
  char v28;
  __int128 __dst;
  unint64_t v30;

  v4 = operator new();
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C07C774();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v30 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v30) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_10:
    memmove(p_dst, a2, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v28 = 1;
  LOWORD(__p) = 114;
  sub_19C168800(v4, &__dst, &__p, 1);
  *(_QWORD *)(a1 + 96) = v4;
  if (v28 < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete((void *)__dst);
LABEL_13:
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(int *)(v10 + 72);
  v13 = (unsigned int *)(*(_QWORD *)v10 + v12);
  if ((unint64_t)v13 <= *(_QWORD *)v10 + *(_QWORD *)(v10 + 8) - 4)
  {
    v14 = *v13;
    *(_DWORD *)(v10 + 72) = v12 + 4;
    if (v14 > 1)
    {
      if (v14 - 2 > 3)
        sub_19C2210D4(38);
      sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v10, 1);
      if (v14 == 3 || v14 == 5)
        goto LABEL_17;
      goto LABEL_18;
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 64) = xmmword_19C277550;
  *(_DWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 84) = 0x2000000001;
  if (v14)
LABEL_17:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
LABEL_18:
  v16 = *(_DWORD *)(a1 + 88);
  if (v16 != sub_19C2210A4() || *(_DWORD *)(a1 + 84) != 1)
    sub_19C2210D4(33);
  v17 = *(uint64_t **)(a1 + 96);
  v18 = *v17;
  v19 = v17[1];
  v20 = (_DWORD *)(*v17 + *((int *)v17 + 18));
  if ((unint64_t)v20 > *v17 + v19 - 4)
  {
    *(_DWORD *)a1 = 0;
    v21 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v21 <= v18 + v19 - 4)
      goto LABEL_22;
LABEL_25:
    *(_DWORD *)(a1 + 4) = 0;
    v23 = (_DWORD *)(v18 + *((int *)v17 + 18));
    if ((unint64_t)v23 <= v18 + v19 - 4)
      goto LABEL_23;
LABEL_26:
    *(_DWORD *)(a1 + 8) = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
  }
  *(_DWORD *)a1 = *v20;
  v24 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v24;
  v18 = *v17;
  v19 = v17[1];
  v21 = (_DWORD *)(*v17 + v24);
  if ((unint64_t)v21 > *v17 + v19 - 4)
    goto LABEL_25;
LABEL_22:
  *(_DWORD *)(a1 + 4) = *v21;
  v22 = *((_DWORD *)v17 + 18) + 4;
  *((_DWORD *)v17 + 18) = v22;
  v23 = (_DWORD *)(*v17 + v22);
  if ((unint64_t)v23 > *v17 + v17[1] - 4)
    goto LABEL_26;
LABEL_23:
  *(_DWORD *)(a1 + 8) = *v23;
  *((_DWORD *)v17 + 18) += 4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
}

void sub_19C0A9240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      operator delete(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_19C0A928C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A92A0(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  if (*(_BYTE *)(a1 + 216))
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
  if (*(_BYTE *)(a1 + 152))
  {
    v8 = *(_DWORD *)(a1 + 184);
    if ((v8 & 0xFFFFFFFE) != 2)
      sub_19C2210D4(19);
    v9 = *(_QWORD *)(a1 + 144);
    if (v8 == 2)
    {
      if (a4 == 16)
      {
        v17 = *(_QWORD *)(a1 + 120);
        v18 = operator new();
        *(_QWORD *)v18 = 0;
        *(_QWORD *)(v18 + 8) = 0;
        v19 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v18 + 16) = v19;
        *(_OWORD *)(v18 + 24) = xmmword_19C277560;
        strcpy(v19, "do-not-use-this-path,from-raw-buffer");
        *(_BYTE *)(v18 + 63) = 2;
        strcpy((char *)(v18 + 40), "rb");
        *(_DWORD *)(v18 + 64) = 0;
        *(_BYTE *)(v18 + 68) = 1;
        *(_DWORD *)(v18 + 72) = 0;
        *(_QWORD *)v18 = a2;
        *(_QWORD *)(v18 + 8) = a3;
        *(_QWORD *)(v17 + 96) = v18;
        return sub_19C168CE8(v17, v9, v9 + 24, v9 + 48, v9 + 72);
      }
      else if (a4 == 8)
      {
        v10 = *(_QWORD *)(a1 + 120);
        v11 = operator new();
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v12 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = xmmword_19C277560;
        strcpy(v12, "do-not-use-this-path,from-raw-buffer");
        *(_BYTE *)(v11 + 63) = 2;
        strcpy((char *)(v11 + 40), "rb");
        *(_DWORD *)(v11 + 64) = 0;
        *(_BYTE *)(v11 + 68) = 1;
        *(_DWORD *)(v11 + 72) = 0;
        *(_QWORD *)v11 = a2;
        *(_QWORD *)(v11 + 8) = a3;
        *(_QWORD *)(v10 + 96) = v11;
        return sub_19C168160(v10, v9, v9 + 24, v9 + 48, v9 + 72);
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 120);
        v24 = operator new();
        *(_QWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = 0;
        v25 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v24 + 16) = v25;
        *(_OWORD *)(v24 + 24) = xmmword_19C277560;
        strcpy(v25, "do-not-use-this-path,from-raw-buffer");
        *(_BYTE *)(v24 + 63) = 2;
        strcpy((char *)(v24 + 40), "rb");
        *(_DWORD *)(v24 + 64) = 0;
        *(_BYTE *)(v24 + 68) = 1;
        *(_DWORD *)(v24 + 72) = 0;
        *(_QWORD *)v24 = a2;
        *(_QWORD *)(v24 + 8) = a3;
        *(_QWORD *)(v23 + 96) = v24;
        return sub_19C169388(v23, v9, v9 + 24, v9 + 48, v9 + 72);
      }
    }
    else if (a4 == 16)
    {
      v20 = *(_QWORD *)(a1 + 120);
      v21 = operator new();
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      v22 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v21 + 16) = v22;
      *(_OWORD *)(v21 + 24) = xmmword_19C277560;
      strcpy(v22, "do-not-use-this-path,from-raw-buffer");
      *(_BYTE *)(v21 + 63) = 2;
      strcpy((char *)(v21 + 40), "rb");
      *(_DWORD *)(v21 + 64) = 0;
      *(_BYTE *)(v21 + 68) = 1;
      *(_DWORD *)(v21 + 72) = 0;
      *(_QWORD *)v21 = a2;
      *(_QWORD *)(v21 + 8) = a3;
      *(_QWORD *)(v20 + 96) = v21;
      return sub_19C16A1F8(v20, v9, v9 + 24, v9 + 48, v9 + 72);
    }
    else if (a4 == 8)
    {
      v14 = *(_QWORD *)(a1 + 120);
      v15 = operator new();
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      v16 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v15 + 16) = v16;
      *(_OWORD *)(v15 + 24) = xmmword_19C277560;
      strcpy(v16, "do-not-use-this-path,from-raw-buffer");
      *(_BYTE *)(v15 + 63) = 2;
      strcpy((char *)(v15 + 40), "rb");
      *(_DWORD *)(v15 + 64) = 0;
      *(_BYTE *)(v15 + 68) = 1;
      *(_DWORD *)(v15 + 72) = 0;
      *(_QWORD *)v15 = a2;
      *(_QWORD *)(v15 + 8) = a3;
      *(_QWORD *)(v14 + 96) = v15;
      return sub_19C169A28(v14, v9, v9 + 24, v9 + 48, v9 + 72);
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 120);
      v27 = operator new();
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v27 + 8) = 0;
      v28 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v27 + 16) = v28;
      *(_OWORD *)(v27 + 24) = xmmword_19C277560;
      strcpy(v28, "do-not-use-this-path,from-raw-buffer");
      *(_BYTE *)(v27 + 63) = 2;
      strcpy((char *)(v27 + 40), "rb");
      *(_DWORD *)(v27 + 64) = 0;
      *(_BYTE *)(v27 + 68) = 1;
      *(_DWORD *)(v27 + 72) = 0;
      *(_QWORD *)v27 = a2;
      *(_QWORD *)(v27 + 8) = a3;
      *(_QWORD *)(v26 + 96) = v27;
      return sub_19C16A82C(v26, v9, v9 + 24, v9 + 48, v9 + 72);
    }
  }
  else if (a4 == 16)
  {
    return sub_19C0A9AC4(*(_QWORD *)(a1 + 120), a2, a3);
  }
  else if (a4 == 8)
  {
    return sub_19C0A984C(*(_QWORD *)(a1 + 120), a2, a3);
  }
  else
  {
    return sub_19C0A9D3C(*(_QWORD *)(a1 + 120), a2, a3);
  }
}

void sub_19C0A97D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A97E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A97FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A9810(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A9824(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A9838(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A984C(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  int v19;

  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (char *)operator new(0x28uLL);
  v8 = 0;
  *(_QWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 24) = xmmword_19C277560;
  strcpy(v7, "do-not-use-this-path,from-raw-buffer");
  *(_BYTE *)(v6 + 63) = 2;
  strcpy((char *)(v6 + 40), "rb");
  *(_DWORD *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 68) = 1;
  *(_DWORD *)(v6 + 72) = 0;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(a1 + 96) = v6;
  v9 = *(_QWORD *)(a1 + 56);
  if ((unsigned int *)((char *)a2 + a3 - 4) >= a2 && (v8 = *a2, *(_DWORD *)(v6 + 72) = 4, v8 > 1))
  {
    if (v8 - 2 > 3)
      sub_19C2210D4(38);
    sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v6, 1);
    if (v8 == 3 || v8 == 5)
      goto LABEL_4;
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19C277550;
    *(_DWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 84) = 0x2000000001;
    if (v8)
LABEL_4:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v6);
  }
  v11 = *(_DWORD *)(a1 + 88);
  if (v11 != sub_19C2210B4() || *(_DWORD *)(a1 + 84) != 1)
    sub_19C2210D4(33);
  v12 = *(uint64_t **)(a1 + 96);
  v13 = *v12;
  v14 = v12[1];
  v15 = (_DWORD *)(*v12 + *((int *)v12 + 18));
  if ((unint64_t)v15 > *v12 + v14 - 4)
  {
    *(_DWORD *)a1 = 0;
    v16 = (_DWORD *)(v13 + *((int *)v12 + 18));
    if ((unint64_t)v16 <= v13 + v14 - 4)
      goto LABEL_9;
LABEL_12:
    *(_DWORD *)(a1 + 4) = 0;
    v18 = (_DWORD *)(v13 + *((int *)v12 + 18));
    if ((unint64_t)v18 <= v13 + v14 - 4)
      goto LABEL_10;
LABEL_13:
    *(_DWORD *)(a1 + 8) = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
  }
  *(_DWORD *)a1 = *v15;
  v19 = *((_DWORD *)v12 + 18) + 4;
  *((_DWORD *)v12 + 18) = v19;
  v13 = *v12;
  v14 = v12[1];
  v16 = (_DWORD *)(*v12 + v19);
  if ((unint64_t)v16 > *v12 + v14 - 4)
    goto LABEL_12;
LABEL_9:
  *(_DWORD *)(a1 + 4) = *v16;
  v17 = *((_DWORD *)v12 + 18) + 4;
  *((_DWORD *)v12 + 18) = v17;
  v18 = (_DWORD *)(*v12 + v17);
  if ((unint64_t)v18 > *v12 + v12[1] - 4)
    goto LABEL_13;
LABEL_10:
  *(_DWORD *)(a1 + 8) = *v18;
  *((_DWORD *)v12 + 18) += 4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
}

void sub_19C0A9AB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A9AC4(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  int v19;

  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (char *)operator new(0x28uLL);
  v8 = 0;
  *(_QWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 24) = xmmword_19C277560;
  strcpy(v7, "do-not-use-this-path,from-raw-buffer");
  *(_BYTE *)(v6 + 63) = 2;
  strcpy((char *)(v6 + 40), "rb");
  *(_DWORD *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 68) = 1;
  *(_DWORD *)(v6 + 72) = 0;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(a1 + 96) = v6;
  v9 = *(_QWORD *)(a1 + 56);
  if ((unsigned int *)((char *)a2 + a3 - 4) >= a2 && (v8 = *a2, *(_DWORD *)(v6 + 72) = 4, v8 > 1))
  {
    if (v8 - 2 > 3)
      sub_19C2210D4(38);
    sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v6, 1);
    if (v8 == 3 || v8 == 5)
      goto LABEL_4;
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19C277550;
    *(_DWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 84) = 0x2000000001;
    if (v8)
LABEL_4:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v6);
  }
  v11 = *(_DWORD *)(a1 + 88);
  if (v11 != sub_19C2210AC() || *(_DWORD *)(a1 + 84) != 1)
    sub_19C2210D4(33);
  v12 = *(uint64_t **)(a1 + 96);
  v13 = *v12;
  v14 = v12[1];
  v15 = (_DWORD *)(*v12 + *((int *)v12 + 18));
  if ((unint64_t)v15 > *v12 + v14 - 4)
  {
    *(_DWORD *)a1 = 0;
    v16 = (_DWORD *)(v13 + *((int *)v12 + 18));
    if ((unint64_t)v16 <= v13 + v14 - 4)
      goto LABEL_9;
LABEL_12:
    *(_DWORD *)(a1 + 4) = 0;
    v18 = (_DWORD *)(v13 + *((int *)v12 + 18));
    if ((unint64_t)v18 <= v13 + v14 - 4)
      goto LABEL_10;
LABEL_13:
    *(_DWORD *)(a1 + 8) = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
  }
  *(_DWORD *)a1 = *v15;
  v19 = *((_DWORD *)v12 + 18) + 4;
  *((_DWORD *)v12 + 18) = v19;
  v13 = *v12;
  v14 = v12[1];
  v16 = (_DWORD *)(*v12 + v19);
  if ((unint64_t)v16 > *v12 + v14 - 4)
    goto LABEL_12;
LABEL_9:
  *(_DWORD *)(a1 + 4) = *v16;
  v17 = *((_DWORD *)v12 + 18) + 4;
  *((_DWORD *)v12 + 18) = v17;
  v18 = (_DWORD *)(*v12 + v17);
  if ((unint64_t)v18 > *v12 + v12[1] - 4)
    goto LABEL_13;
LABEL_10:
  *(_DWORD *)(a1 + 8) = *v18;
  *((_DWORD *)v12 + 18) += 4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
}

void sub_19C0A9D28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0A9D3C(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  int v19;

  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (char *)operator new(0x28uLL);
  v8 = 0;
  *(_QWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 24) = xmmword_19C277560;
  strcpy(v7, "do-not-use-this-path,from-raw-buffer");
  *(_BYTE *)(v6 + 63) = 2;
  strcpy((char *)(v6 + 40), "rb");
  *(_DWORD *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 68) = 1;
  *(_DWORD *)(v6 + 72) = 0;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(a1 + 96) = v6;
  v9 = *(_QWORD *)(a1 + 56);
  if ((unsigned int *)((char *)a2 + a3 - 4) >= a2 && (v8 = *a2, *(_DWORD *)(v6 + 72) = 4, v8 > 1))
  {
    if (v8 - 2 > 3)
      sub_19C2210D4(38);
    sub_19C168A98((_DWORD *)(a1 + 64), (uint64_t *)v6, 1);
    if (v8 == 3 || v8 == 5)
      goto LABEL_4;
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 64) = xmmword_19C277550;
    *(_DWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 84) = 0x2000000001;
    if (v8)
LABEL_4:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v6);
  }
  v11 = *(_DWORD *)(a1 + 88);
  if (v11 != sub_19C2210A4() || *(_DWORD *)(a1 + 84) != 1)
    sub_19C2210D4(33);
  v12 = *(uint64_t **)(a1 + 96);
  v13 = *v12;
  v14 = v12[1];
  v15 = (_DWORD *)(*v12 + *((int *)v12 + 18));
  if ((unint64_t)v15 > *v12 + v14 - 4)
  {
    *(_DWORD *)a1 = 0;
    v16 = (_DWORD *)(v13 + *((int *)v12 + 18));
    if ((unint64_t)v16 <= v13 + v14 - 4)
      goto LABEL_9;
LABEL_12:
    *(_DWORD *)(a1 + 4) = 0;
    v18 = (_DWORD *)(v13 + *((int *)v12 + 18));
    if ((unint64_t)v18 <= v13 + v14 - 4)
      goto LABEL_10;
LABEL_13:
    *(_DWORD *)(a1 + 8) = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
  }
  *(_DWORD *)a1 = *v15;
  v19 = *((_DWORD *)v12 + 18) + 4;
  *((_DWORD *)v12 + 18) = v19;
  v13 = *v12;
  v14 = v12[1];
  v16 = (_DWORD *)(*v12 + v19);
  if ((unint64_t)v16 > *v12 + v14 - 4)
    goto LABEL_12;
LABEL_9:
  *(_DWORD *)(a1 + 4) = *v16;
  v17 = *((_DWORD *)v12 + 18) + 4;
  *((_DWORD *)v12 + 18) = v17;
  v18 = (_DWORD *)(*v12 + v17);
  if ((unint64_t)v18 > *v12 + v12[1] - 4)
    goto LABEL_13;
LABEL_10:
  *(_DWORD *)(a1 + 8) = *v18;
  *((_DWORD *)v12 + 18) += 4;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40));
}

void sub_19C0A9FA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0A9FB4(uint64_t a1, FILE *__stream, int *a3, unsigned int *a4)
{
  int *v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _OWORD v16[2];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (int *)(a1 + 16);
  sub_19C0A441C(__stream, (int)__stream, (int *)(a1 + 20), *(_DWORD **)(a1 + 24), (void *)(a1 + 32), (void *)(a1 + 40), (void *)(a1 + 36), (_DWORD *)a1, (_DWORD *)(a1 + 16), a3, a4, (_DWORD *)(a1 + 184));
  v7 = atomic_load((unsigned __int8 *)dword_1EE419ED8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire((__guard *)dword_1EE419ED8))
  {
    v17 = 52;
    v16[0] = xmmword_19C277280;
    v16[1] = unk_19C277290;
    sub_19C0AA2D4((uint64_t)&qword_1EE419F88, (int *)v16, 9);
    __cxa_atexit((void (*)(void *))sub_19C0AA360, &qword_1EE419F88, &dword_19C079000);
    __cxa_guard_release((__guard *)dword_1EE419ED8);
  }
  if (qword_1EE419F90)
  {
    v8 = *v6;
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EE419F90);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = *v6;
      if (qword_1EE419F90 <= v8)
        v10 = v8 % qword_1EE419F90;
    }
    else
    {
      v10 = (qword_1EE419F90 - 1) & v8;
    }
    v11 = *(uint64_t **)(qword_1EE419F88 + 8 * v10);
    if (v11)
    {
      v11 = (uint64_t *)*v11;
      if (v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v8)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v8)
                goto LABEL_23;
            }
            else if ((v13 & (qword_1EE419F90 - 1)) != v10)
            {
              goto LABEL_22;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v8)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v8)
              break;
          }
          else
          {
            if (v12 >= qword_1EE419F90)
              v12 %= (unint64_t)qword_1EE419F90;
            if (v12 != v10)
              goto LABEL_22;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
LABEL_22:
    v11 = 0;
  }
LABEL_23:
  *(_BYTE *)(a1 + 216) = v11 != 0;
  v14 = *(_DWORD *)(a1 + 184);
  *(_BYTE *)(a1 + 152) = v14 != 1;
  *(_QWORD *)(a1 + 144) = 0;
  if (v14 == 3)
  {
    v15 = (_QWORD *)operator new();
    v15[2] = 0;
    v15[1] = 0;
    *v15 = v15 + 1;
    v15[4] = 0;
    v15[5] = 0;
    v15[3] = v15 + 4;
    v15[8] = 0;
    v15[7] = 0;
    v15[6] = v15 + 7;
    v15[11] = 0;
    v15[10] = 0;
    v15[9] = v15 + 10;
    sub_19C0AA7F8(__stream, (uint64_t)v15, (uint64_t)(v15 + 3), (uint64_t)(v15 + 6), (uint64_t)(v15 + 9));
  }
  else
  {
    if (v14 != 2)
      return;
    v15 = (_QWORD *)operator new();
    v15[2] = 0;
    v15[1] = 0;
    *v15 = v15 + 1;
    v15[4] = 0;
    v15[5] = 0;
    v15[3] = v15 + 4;
    v15[8] = 0;
    v15[7] = 0;
    v15[6] = v15 + 7;
    v15[11] = 0;
    v15[10] = 0;
    v15[9] = v15 + 10;
    sub_19C0AA3A8(__stream, (uint64_t)v15, (uint64_t)(v15 + 3), (uint64_t)(v15 + 6), (uint64_t)(v15 + 9));
  }
  *(_QWORD *)(a1 + 144) = v15;
}

void sub_19C0AA2B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort((__guard *)dword_1EE419ED8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0AA2D4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      sub_19C16AE60(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_19C0AA334(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)(v1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  sub_19C255590((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0AA360(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

size_t sub_19C0AA3A8(FILE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t **v8;
  uint64_t **v9;
  int i;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  int v16;
  uint64_t **v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t **v30;
  size_t result;
  int j;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  FILE *__stream;
  uint64_t v54;
  int v55;
  int __ptr;

  v8 = (uint64_t **)(a2 + 8);
  sub_19C07C924(a2, *(_QWORD **)(a2 + 8));
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 16) = 0;
  *v8 = 0;
  v9 = (uint64_t **)(a3 + 8);
  sub_19C07C924(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  __ptr = -1;
  __stream = a1;
  sub_19C2212D8(a1, (int)"SentenceRecognizer", &__ptr);
  if (__ptr >= 1)
  {
    for (i = 0; i < __ptr; ++i)
    {
      HIDWORD(v54) = 0;
      v55 = 0;
      sub_19C2212D8(__stream, (int)"SentenceRecognizer", &v55);
      sub_19C2212D8(__stream, (int)"SentenceRecognizer", (char *)&v54 + 4);
      v11 = HIDWORD(v54);
      v12 = v55;
      v13 = *v8;
      v14 = v8;
      v15 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            v15 = (uint64_t **)v13;
            v16 = *((_DWORD *)v13 + 7);
            if (v55 >= v16)
              break;
            v13 = *v15;
            v14 = v15;
            if (!*v15)
              goto LABEL_12;
          }
          if (v16 >= v55)
            break;
          v13 = v15[1];
          if (!v13)
          {
            v14 = v15 + 1;
            goto LABEL_12;
          }
        }
        v21 = HIDWORD(v54);
        *((_DWORD *)v15 + 8) = HIDWORD(v54);
        v22 = *v9;
        v23 = (uint64_t **)(a3 + 8);
        v24 = (uint64_t **)(a3 + 8);
        if (*v9)
          goto LABEL_19;
      }
      else
      {
LABEL_12:
        v17 = v15;
        v18 = operator new(0x28uLL);
        v18[7] = v12;
        v18[8] = 0;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = v17;
        *v14 = (uint64_t *)v18;
        v19 = **(_QWORD **)a2;
        v20 = (uint64_t *)v18;
        if (v19)
        {
          *(_QWORD *)a2 = v19;
          v20 = *v14;
        }
        sub_19C07CC40(*(uint64_t **)(a2 + 8), v20);
        ++*(_QWORD *)(a2 + 16);
        v21 = HIDWORD(v54);
        v12 = v55;
        v18[8] = v11;
        v22 = *v9;
        v23 = (uint64_t **)(a3 + 8);
        v24 = (uint64_t **)(a3 + 8);
        if (*v9)
        {
          while (1)
          {
LABEL_19:
            while (1)
            {
              v24 = (uint64_t **)v22;
              v25 = *((_DWORD *)v22 + 7);
              if (v21 >= v25)
                break;
              v22 = *v24;
              v23 = v24;
              if (!*v24)
                goto LABEL_23;
            }
            if (v25 >= v21)
              goto LABEL_4;
            v22 = v24[1];
            if (!v22)
            {
              v23 = v24 + 1;
              break;
            }
          }
        }
      }
LABEL_23:
      v26 = (uint64_t *)v24;
      v24 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v24 + 7) = v21;
      *((_DWORD *)v24 + 8) = 0;
      *v24 = 0;
      v24[1] = 0;
      v24[2] = v26;
      *v23 = (uint64_t *)v24;
      v27 = **(_QWORD **)a3;
      v28 = (uint64_t *)v24;
      if (v27)
      {
        *(_QWORD *)a3 = v27;
        v28 = *v23;
      }
      sub_19C07CC40(*(uint64_t **)(a3 + 8), v28);
      ++*(_QWORD *)(a3 + 16);
LABEL_4:
      *((_DWORD *)v24 + 8) = v12;
    }
  }
  v29 = (uint64_t *)(a4 + 8);
  sub_19C07C924(a4, *(_QWORD **)(a4 + 8));
  *(_QWORD *)a4 = a4 + 8;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v30 = (uint64_t **)(a5 + 8);
  sub_19C07C924(a5, *(_QWORD **)(a5 + 8));
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v55 = -1;
  result = sub_19C2212D8(__stream, (int)"SentenceRecognizer", &v55);
  if (v55 >= 1)
  {
    for (j = 0; j < v55; ++j)
    {
      v54 = 0;
      sub_19C2212D8(__stream, (int)"SentenceRecognizer", (char *)&v54 + 4);
      result = sub_19C2212D8(__stream, (int)"SentenceRecognizer", &v54);
      v33 = v54;
      v34 = HIDWORD(v54);
      v35 = *v29;
      v36 = (uint64_t **)(a4 + 8);
      v37 = a4 + 8;
      if (*v29)
      {
        while (1)
        {
          while (1)
          {
            v37 = v35;
            v38 = *(_DWORD *)(v35 + 28);
            if (SHIDWORD(v54) >= v38)
              break;
            v35 = *(_QWORD *)v37;
            v36 = (uint64_t **)v37;
            if (!*(_QWORD *)v37)
              goto LABEL_36;
          }
          if (v38 >= SHIDWORD(v54))
            break;
          v35 = *(_QWORD *)(v37 + 8);
          if (!v35)
          {
            v36 = (uint64_t **)(v37 + 8);
            goto LABEL_36;
          }
        }
        v43 = v54;
        *(_DWORD *)(v37 + 32) = v54;
        v44 = *v30;
        v45 = (uint64_t **)(a5 + 8);
        v46 = (uint64_t **)(a5 + 8);
        if (*v30)
          goto LABEL_43;
      }
      else
      {
LABEL_36:
        v39 = v37;
        v40 = operator new(0x28uLL);
        v40[7] = v34;
        v40[8] = 0;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
        *((_QWORD *)v40 + 2) = v39;
        *v36 = (uint64_t *)v40;
        v41 = **(_QWORD **)a4;
        v42 = (uint64_t *)v40;
        if (v41)
        {
          *(_QWORD *)a4 = v41;
          v42 = *v36;
        }
        result = (size_t)sub_19C07CC40(*(uint64_t **)(a4 + 8), v42);
        ++*(_QWORD *)(a4 + 16);
        v43 = v54;
        v34 = HIDWORD(v54);
        v40[8] = v33;
        v44 = *v30;
        v45 = (uint64_t **)(a5 + 8);
        v46 = (uint64_t **)(a5 + 8);
        if (*v30)
        {
          while (1)
          {
LABEL_43:
            while (1)
            {
              v46 = (uint64_t **)v44;
              v47 = *((_DWORD *)v44 + 7);
              if (v43 >= v47)
                break;
              v44 = *v46;
              v45 = v46;
              if (!*v46)
                goto LABEL_47;
            }
            if (v47 >= v43)
              goto LABEL_28;
            v44 = v46[1];
            if (!v44)
            {
              v45 = v46 + 1;
              break;
            }
          }
        }
      }
LABEL_47:
      v48 = (uint64_t *)v46;
      v46 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v46 + 7) = v43;
      *((_DWORD *)v46 + 8) = 0;
      *v46 = 0;
      v46[1] = 0;
      v46[2] = v48;
      *v45 = (uint64_t *)v46;
      v49 = **(_QWORD **)a5;
      v50 = (uint64_t *)v46;
      if (v49)
      {
        *(_QWORD *)a5 = v49;
        v50 = *v45;
      }
      result = (size_t)sub_19C07CC40(*(uint64_t **)(a5 + 8), v50);
      ++*(_QWORD *)(a5 + 16);
LABEL_28:
      *((_DWORD *)v46 + 8) = v34;
    }
  }
  return result;
}

size_t sub_19C0AA7F8(FILE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t **v10;
  uint64_t **v11;
  int i;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  size_t result;
  int j;
  int v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  int v45;
  std::string __str;
  int __ptr;
  std::string *p_str;

  v9 = (_QWORD *)(a2 + 8);
  sub_19C098FBC(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = v9;
  v10 = (uint64_t **)a2;
  *(_QWORD *)(a2 + 16) = 0;
  *v9 = 0;
  v11 = (uint64_t **)(a3 + 8);
  sub_19C166D48(a3, *(char **)(a3 + 8));
  *(_QWORD *)a3 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  __ptr = -1;
  sub_19C2212D8(a1, (int)"SentenceRecognizer", &__ptr);
  if (__ptr >= 1)
  {
    for (i = 0; i < __ptr; ++i)
    {
      memset(&__str, 0, sizeof(__str));
      v45 = 0;
      sub_19C2212EC(a1, (uint64_t)"SentenceRecognizer", (uint64_t)&__str);
      sub_19C2212D8(a1, (int)"SentenceRecognizer", &v45);
      v13 = v45;
      p_str = &__str;
      *((_DWORD *)sub_19C16A05C(v10, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&unk_19C27ADD0, (__int128 **)&p_str)+ 14) = v13;
      v14 = *v11;
      v15 = v45;
      v16 = (uint64_t **)(a3 + 8);
      v17 = (uint64_t **)(a3 + 8);
      if (*v11)
      {
        while (1)
        {
          while (1)
          {
            v17 = (uint64_t **)v14;
            v18 = *((_DWORD *)v14 + 8);
            if (v45 >= v18)
              break;
            v14 = *v17;
            v16 = v17;
            if (!*v17)
              goto LABEL_11;
          }
          if (v18 >= v45)
            break;
          v14 = v17[1];
          if (!v14)
          {
            v16 = v17 + 1;
            goto LABEL_11;
          }
        }
        v19 = (char *)v17;
      }
      else
      {
LABEL_11:
        v19 = (char *)operator new(0x40uLL);
        *((_DWORD *)v19 + 8) = v15;
        *((_QWORD *)v19 + 6) = 0;
        *((_QWORD *)v19 + 7) = 0;
        *((_QWORD *)v19 + 5) = 0;
        *(_QWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = v17;
        *v16 = (uint64_t *)v19;
        v20 = **(_QWORD **)a3;
        v21 = (uint64_t *)v19;
        if (v20)
        {
          *(_QWORD *)a3 = v20;
          v21 = *v16;
        }
        sub_19C07CC40(*(uint64_t **)(a3 + 8), v21);
        ++*(_QWORD *)(a3 + 16);
      }
      std::string::operator=((std::string *)(v19 + 40), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  v22 = (uint64_t *)(a4 + 8);
  sub_19C07C924(a4, *(_QWORD **)(a4 + 8));
  *(_QWORD *)a4 = a4 + 8;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v23 = (uint64_t **)(a5 + 8);
  sub_19C07C924(a5, *(_QWORD **)(a5 + 8));
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  LODWORD(__str.__r_.__value_.__l.__data_) = -1;
  result = sub_19C2212D8(a1, (int)"SentenceRecognizer", &__str);
  if (SLODWORD(__str.__r_.__value_.__l.__data_) >= 1)
  {
    for (j = 0; j < SLODWORD(__str.__r_.__value_.__l.__data_); ++j)
    {
      LODWORD(p_str) = 0;
      v45 = 0;
      sub_19C2212D8(a1, (int)"SentenceRecognizer", &p_str);
      result = sub_19C2212D8(a1, (int)"SentenceRecognizer", &v45);
      v26 = v45;
      v27 = *v22;
      v28 = (uint64_t **)(a4 + 8);
      v29 = a4 + 8;
      v30 = (int)p_str;
      if (*v22)
      {
        while (1)
        {
          while (1)
          {
            v29 = v27;
            v31 = *(_DWORD *)(v27 + 28);
            if ((int)p_str >= v31)
              break;
            v27 = *(_QWORD *)v29;
            v28 = (uint64_t **)v29;
            if (!*(_QWORD *)v29)
              goto LABEL_28;
          }
          if (v31 >= (int)p_str)
            break;
          v27 = *(_QWORD *)(v29 + 8);
          if (!v27)
          {
            v28 = (uint64_t **)(v29 + 8);
            goto LABEL_28;
          }
        }
        v36 = v45;
        *(_DWORD *)(v29 + 32) = v45;
        v37 = *v23;
        v38 = (uint64_t **)(a5 + 8);
        v39 = (uint64_t **)(a5 + 8);
        if (*v23)
          goto LABEL_35;
      }
      else
      {
LABEL_28:
        v32 = v29;
        v33 = operator new(0x28uLL);
        v33[7] = v30;
        v33[8] = 0;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = v32;
        *v28 = (uint64_t *)v33;
        v34 = **(_QWORD **)a4;
        v35 = (uint64_t *)v33;
        if (v34)
        {
          *(_QWORD *)a4 = v34;
          v35 = *v28;
        }
        result = (size_t)sub_19C07CC40(*(uint64_t **)(a4 + 8), v35);
        ++*(_QWORD *)(a4 + 16);
        v30 = (int)p_str;
        v36 = v45;
        v33[8] = v26;
        v37 = *v23;
        v38 = (uint64_t **)(a5 + 8);
        v39 = (uint64_t **)(a5 + 8);
        if (*v23)
        {
          while (1)
          {
LABEL_35:
            while (1)
            {
              v39 = (uint64_t **)v37;
              v40 = *((_DWORD *)v37 + 7);
              if (v36 >= v40)
                break;
              v37 = *v39;
              v38 = v39;
              if (!*v39)
                goto LABEL_39;
            }
            if (v40 >= v36)
              goto LABEL_20;
            v37 = v39[1];
            if (!v37)
            {
              v38 = v39 + 1;
              break;
            }
          }
        }
      }
LABEL_39:
      v41 = (uint64_t *)v39;
      v39 = (uint64_t **)operator new(0x28uLL);
      *((_DWORD *)v39 + 7) = v36;
      *((_DWORD *)v39 + 8) = 0;
      *v39 = 0;
      v39[1] = 0;
      v39[2] = v41;
      *v38 = (uint64_t *)v39;
      v42 = **(_QWORD **)a5;
      v43 = (uint64_t *)v39;
      if (v42)
      {
        *(_QWORD *)a5 = v42;
        v43 = *v38;
      }
      result = (size_t)sub_19C07CC40(*(uint64_t **)(a5 + 8), v43);
      ++*(_QWORD *)(a5 + 16);
LABEL_20:
      *((_DWORD *)v39 + 8) = v30;
    }
  }
  return result;
}

void sub_19C0AABF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C0AAC0C(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  const void ***v9;
  const void ***v10;
  const void **v11;
  const void **v12;
  char *v13;
  const void **v14;
  const void ***v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  const void *v20;
  const void *v21;
  unint64_t v22;
  int v23;
  const void *v24;
  size_t v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  uint64_t *v29;
  const void *v30;
  BOOL v31;
  uint64_t *v32;
  unint64_t v33;
  const void *v34;
  const void *v35;
  size_t v36;
  _BOOL4 v37;
  int v38;
  _BOOL4 v39;
  int v40;
  _DWORD v41[5];
  char v42;
  uint64_t *v43;
  uint64_t v44[2];

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v5 = *a2;
  if (v4 != 1)
  {
    if ((v5 & 0x80000000) == 0)
      return;
LABEL_6:
    v7 = *(_DWORD *)(a1 + 184);
    if (v7 != 3)
    {
      if (v7 == 1)
      {
        v8 = 3;
LABEL_20:
        *a2 = v8;
        return;
      }
LABEL_19:
      v8 = 1;
      goto LABEL_20;
    }
    v9 = *(const void ****)(a1 + 144);
    if (!v9)
      goto LABEL_19;
    v44[0] = 0;
    v44[1] = 0;
    v43 = v44;
    v12 = *v9;
    v10 = v9 + 1;
    v11 = v12;
    if (v12 == (const void **)v10)
    {
      v13 = 0;
    }
    else
    {
      do
      {
        sub_19C16B180(&v43, v44, v11 + 4, (uint64_t)(v11 + 4));
        v14 = (const void **)v11[1];
        if (v14)
        {
          do
          {
            v15 = (const void ***)v14;
            v14 = (const void **)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (const void ***)v11[2];
            v31 = *v15 == v11;
            v11 = (const void **)v15;
          }
          while (!v31);
        }
        v11 = (const void **)v15;
      }
      while (v15 != v10);
      v13 = (char *)v44[0];
      v42 = 3;
      v41[0] = 4935253;
      if (v44[0])
      {
        v16 = v44;
        v17 = v44[0];
        do
        {
          v18 = (uint64_t *)v17;
          v19 = v16;
          v21 = (const void *)(v17 + 32);
          v20 = *(const void **)(v17 + 32);
          v22 = *(unsigned __int8 *)(v17 + 55);
          v23 = (char)v22;
          if ((v22 & 0x80u) != 0)
            v22 = v18[5];
          if (v23 >= 0)
            v24 = v21;
          else
            v24 = v20;
          if (v22 >= 3)
            v25 = 3;
          else
            v25 = v22;
          v26 = v22 < 3;
          v27 = memcmp(v24, v41, v25);
          v28 = v27 < 0;
          if (!v27)
            v28 = v26;
          v29 = v18 + 1;
          if (v28)
          {
            v16 = v19;
          }
          else
          {
            v29 = v18;
            v16 = v18;
          }
          v17 = *v29;
        }
        while (v17);
        if (v16 != v44)
        {
          v30 = v19 + 4;
          v31 = !v28;
          if (v28)
            v32 = v19;
          else
            v32 = v18;
          if (v31)
            v30 = v21;
          v34 = (const void *)v32[4];
          v33 = v32[5];
          if (*((char *)v16 + 55) < 0)
          {
            v35 = v34;
          }
          else
          {
            v33 = *((unsigned __int8 *)v16 + 55);
            v35 = v30;
          }
          v36 = v33 >= 3 ? 3 : v33;
          v37 = v33 > 3;
          v38 = memcmp(v41, v35, v36);
          v39 = v38 < 0;
          if (!v38)
            v39 = v37;
          if (!v39)
          {
            v40 = *((_DWORD *)v16 + 14);
            goto LABEL_55;
          }
        }
      }
    }
    v40 = 1;
LABEL_55:
    *a2 = v40;
    sub_19C098FBC((uint64_t)&v43, v13);
    return;
  }
  v6 = **(_QWORD **)(*(_QWORD *)(a1 + 120) + 104);
  if (v5 >= (*(int (**)(uint64_t))(*(_QWORD *)v6 + 264))(v6) || *a2 < 0)
    goto LABEL_6;
}

void sub_19C0AAE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_19C098FBC((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_19C0AAE5C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, int a5, const void *a6, uint64_t a7)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  char *v63;
  char *v64;
  char *v65;
  void *v66;
  void *v67;
  int v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  int v78;
  char *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  void *v84;
  int v85;
  uint64_t v90;
  uint64_t *v92;
  int v93;
  uint64_t v94;
  void *__p;
  void *v96;
  uint64_t v97;
  char *v98;
  char *v99;

  (***(void (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v92 = *(uint64_t **)(a1 + 128);
  if (dword_1EE418968 >= (int)((unint64_t)(a2[1] - *a2) >> 2))
    v9 = (unint64_t)(a2[1] - *a2) >> 2;
  else
    v9 = dword_1EE418968;
  v90 = v9;
  sub_19C0AB6A0(&v98, v9);
  if (v9 >= 1)
  {
    v10 = 0;
    do
    {
      sub_19C0AAC0C(a1, (int *)(*a2 + v10));
      v10 += 4;
    }
    while (4 * v90 != v10);
    v11 = 0;
    while (1)
    {
      v13 = *(_QWORD *)*v92;
      v14 = **(_QWORD **)(*(_QWORD *)(a1 + 120) + 104);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 264))(v14);
      bzero(*(void **)(v13 + 8 * v11), 4 * v15 * a5);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8), *(unsigned int *)(*a2 + 4 * v11), *(_QWORD *)*v92 + 8 * v11);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) == 5)
      {
        __p = 0;
        v96 = 0;
        v97 = 0;
        sub_19C0A6C44(a2, v11, v90, (char **)&__p);
        v16 = __dynamic_cast(*(const void **)(a1 + 8), (const struct __class_type_info *)&unk_1E3D1D038, (const struct __class_type_info *)&unk_1E3D1CDB8, 0);
        if (!v16)
          __cxa_bad_cast();
        (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v16 + 56))(v16, &__p, *(_QWORD *)*v92 + 8 * v11);
        if (__p)
        {
          v96 = __p;
          operator delete(__p);
        }
      }
      else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) == 6)
      {
        if (!a6)
          sub_19C2210D4(7345);
        if (v11)
        {
          v17 = *(void **)(*(_QWORD *)*v92 + 8 * v11);
          v18 = **(_QWORD **)(*(_QWORD *)(a1 + 120) + 104);
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 264))(v18);
          memcpy(v17, a6, 4 * v19 * a5);
        }
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8), *(unsigned int *)(*a2 + 4 * v11), *(_QWORD *)*v92 + 8 * v11);
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) == 1)
        break;
LABEL_43:
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) != 4)
        goto LABEL_10;
      v42 = &v98[24 * v11];
      v43 = *a2;
      v45 = (char *)*((_QWORD *)v42 + 1);
      v44 = *((_QWORD *)v42 + 2);
      if ((unint64_t)v45 >= v44)
      {
        v46 = *(char **)v42;
        v47 = (uint64_t)&v45[-*(_QWORD *)v42];
        v48 = v47 >> 2;
        v49 = (v47 >> 2) + 1;
        if (v49 >> 62)
LABEL_88:
          sub_19C07DA0C();
        v50 = v44 - (_QWORD)v46;
        if (v50 >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 62)
LABEL_89:
            sub_19C07C7FC();
          v52 = operator new(4 * v51);
          v53 = &v52[4 * v48];
          *v53 = *(_DWORD *)(v43 + 4 * v11);
          v12 = (uint64_t)(v53 + 1);
          if (v45 == v46)
            goto LABEL_62;
LABEL_56:
          v54 = v45 - 4 - v46;
          if (v54 < 0x2C)
            goto LABEL_99;
          if ((unint64_t)(v45 - &v52[v47]) < 0x20)
            goto LABEL_99;
          v55 = (v54 >> 2) + 1;
          v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
          v57 = &v45[-v56];
          v53 = (_DWORD *)((char *)v53 - v56);
          v58 = &v52[4 * v48 - 16];
          v59 = v45 - 16;
          v60 = v55 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *v58 = v61;
            v58 -= 2;
            v59 -= 32;
            v60 -= 8;
          }
          while (v60);
          v45 = v57;
          if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_99:
            do
            {
              v62 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *--v53 = v62;
            }
            while (v45 != v46);
          }
        }
        else
        {
          v52 = 0;
          v53 = (_DWORD *)(4 * v48);
          *(_DWORD *)(4 * v48) = *(_DWORD *)(v43 + 4 * v11);
          v12 = 4 * v48 + 4;
          if (v45 != v46)
            goto LABEL_56;
        }
LABEL_62:
        *(_QWORD *)v42 = v53;
        *((_QWORD *)v42 + 1) = v12;
        *((_QWORD *)v42 + 2) = &v52[4 * v51];
        if (v46)
          operator delete(v46);
        goto LABEL_9;
      }
      *(_DWORD *)v45 = *(_DWORD *)(v43 + 4 * v11);
      v12 = (uint64_t)(v45 + 4);
LABEL_9:
      *((_QWORD *)v42 + 1) = v12;
LABEL_10:
      if (++v11 == v90)
        goto LABEL_64;
    }
    v20 = &v98[24 * v11];
    v21 = *a2;
    v23 = (char *)*((_QWORD *)v20 + 1);
    v22 = *((_QWORD *)v20 + 2);
    if ((unint64_t)v23 < v22)
    {
      *(_DWORD *)v23 = *(_DWORD *)(v21 + 4 * v11);
      v24 = (uint64_t)(v23 + 4);
LABEL_42:
      *((_QWORD *)v20 + 1) = v24;
      goto LABEL_43;
    }
    v25 = *(char **)v20;
    v26 = (uint64_t)&v23[-*(_QWORD *)v20];
    v27 = v26 >> 2;
    v28 = (v26 >> 2) + 1;
    if (v28 >> 62)
      goto LABEL_88;
    v29 = v22 - (_QWORD)v25;
    if (v29 >> 1 > v28)
      v28 = v29 >> 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
      v30 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      if (v30 >> 62)
        goto LABEL_89;
      v31 = operator new(4 * v30);
      v32 = &v31[4 * v27];
      *v32 = *(_DWORD *)(v21 + 4 * v11);
      v24 = (uint64_t)(v32 + 1);
      if (v23 == v25)
        goto LABEL_40;
    }
    else
    {
      v31 = 0;
      v32 = (_DWORD *)(4 * v27);
      *(_DWORD *)(4 * v27) = *(_DWORD *)(v21 + 4 * v11);
      v24 = 4 * v27 + 4;
      if (v23 == v25)
      {
LABEL_40:
        *(_QWORD *)v20 = v32;
        *((_QWORD *)v20 + 1) = v24;
        *((_QWORD *)v20 + 2) = &v31[4 * v30];
        if (v25)
          operator delete(v25);
        goto LABEL_42;
      }
    }
    v33 = v23 - 4 - v25;
    if (v33 < 0x2C)
      goto LABEL_100;
    if ((unint64_t)(v23 - &v31[v26]) < 0x20)
      goto LABEL_100;
    v34 = (v33 >> 2) + 1;
    v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    v36 = &v23[-v35];
    v32 = (_DWORD *)((char *)v32 - v35);
    v37 = &v31[4 * v27 - 16];
    v38 = v23 - 16;
    v39 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 8;
    }
    while (v39);
    v23 = v36;
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_100:
      do
      {
        v41 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *--v32 = v41;
      }
      while (v23 != v25);
    }
    goto LABEL_40;
  }
LABEL_64:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) != 1)
  {
    v64 = v98;
    v63 = v99;
    if (v99 != v98)
    {
      v65 = v99;
      do
      {
        v67 = (void *)*((_QWORD *)v65 - 3);
        v65 -= 24;
        v66 = v67;
        if (v67)
        {
          *((_QWORD *)v63 - 2) = v66;
          operator delete(v66);
        }
        v63 = v65;
      }
      while (v65 != v64);
    }
    v99 = v64;
  }
  v68 = *(unsigned __int8 *)(a1 + 152);
  v94 = 0;
  v93 = 0;
  v69 = atomic_load((unsigned __int8 *)&qword_1EE419EE0);
  if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419EE0))
  {
    qword_1EE419F18 = 0;
    unk_1EE419F20 = 0;
    qword_1EE419F10 = 0;
    __cxa_atexit((void (*)(void *))sub_19C0A4884, &qword_1EE419F10, &dword_19C079000);
    __cxa_guard_release(&qword_1EE419EE0);
  }
  if ((int)v90 > 0x1000000)
  {
    v85 = 34;
    goto LABEL_95;
  }
  if (a5 >= 257)
  {
    v85 = 35;
LABEL_95:
    sub_19C2210D4(v85);
  }
  sub_19C0AB768(*(_QWORD *)(a1 + 120), *v92, (uint64_t)&v98, &qword_1EE419F10, (uint64_t)&v94, 0, (float *)&v94 + 1, v90 | (a5 << 24), v68 == 0, a4, (uint64_t)&v93, a7);
  v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 32))(v70);
  __p = 0;
  v96 = 0;
  v97 = 0;
  v73 = *(const void **)v71;
  v72 = *(_QWORD *)(v71 + 8);
  v74 = v72 - *(_QWORD *)v71;
  if (v72 == *(_QWORD *)v71)
  {
    v75 = 0;
  }
  else
  {
    if (v74 < 0)
      sub_19C07DA0C();
    v75 = operator new(v72 - *(_QWORD *)v71);
    memcpy(v75, v73, v74 & 0xFFFFFFFFFFFFFFF8);
  }
  v76 = (const void *)*((_QWORD *)v75 + v90 - 1);
  v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 272))(v77);
  memcpy(a3, v76, 4 * a5 * (uint64_t)v78);
  operator delete(v75);
  v79 = v98;
  if (v98)
  {
    v80 = v99;
    v81 = v98;
    if (v99 != v98)
    {
      v82 = v99;
      do
      {
        v84 = (void *)*((_QWORD *)v82 - 3);
        v82 -= 24;
        v83 = v84;
        if (v84)
        {
          *((_QWORD *)v80 - 2) = v83;
          operator delete(v83);
        }
        v80 = v82;
      }
      while (v82 != v79);
      v81 = v98;
    }
    v99 = v79;
    operator delete(v81);
  }
}

void sub_19C0AB5D0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  sub_19C0830E8((void **)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_19C0AB5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C0830E8((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_19C0AB600(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C0830E8((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_19C0AB614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  if (__p)
  {
    operator delete(__p);
    sub_19C0830E8((void **)(v25 - 112));
    _Unwind_Resume(a1);
  }
  sub_19C0830E8((void **)(v25 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_19C0AB6A0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C07DA0C();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19C0AB748(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_19C2555A8((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_19C0AB768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;

  *(_DWORD *)(a1 + 12) = a8;
  v19 = *a4;
  if (*(_BYTE *)(a1 + 16))
    v20 = a4[1] == v19;
  else
    v20 = 1;
  if (!v20)
  {
    (*(void (**)(_QWORD, uint64_t *, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 112) - 8)
                                                                        + 216))(*(_QWORD *)(*(_QWORD *)(a1 + 112) - 8), a4, a3, a8, a9);
    v19 = *a4;
  }
  v21 = *(_QWORD *)(a1 + 40);
  if (a4[1] == v19)
  {
    if ((int)a8 >= 0x2000000)
      v24 = a8 & 0xFF000000;
    else
      v24 = 0x1000000;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 304))(v21, a2, a3, v24 & 0xFF000000 | a8 & 0xFFFFFF, a10, a11, a12);
  }
  else
  {
    v22 = atomic_load((unsigned __int8 *)&qword_1EE419190);
    if ((v22 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_1EE419190))
      {
        qword_1EE419178 = 0;
        unk_1EE419180 = 0;
        qword_1EE419188 = 0;
        __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419178, &dword_19C079000);
        __cxa_guard_release(&qword_1EE419190);
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v21 + 304))(v21, a2, a3, a8, a10, a11, &qword_1EE419178);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 344))(v21, a4, v23, a8, a5, a6);
    *a7 = (*(float (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v21 + 352))(v21, a4, a8);
  }
}

void sub_19C0AB94C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  void *v56;
  void *v57;
  int v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  uint64_t v61;
  const void *v62;
  void *v63;
  uint64_t v64;
  int v65;
  char *v66;
  char *v67;
  void *v68;
  char *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  void *__p;
  char *v79;

  (***(void (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v5 = *a2;
  v4 = a2[1];
  v6 = *(_DWORD *)(a1 + 220);
  if (dword_1EE418968 < v6 || !*(_BYTE *)(a1 + 188))
  {
    sub_19C0A61A8(a1);
    *(_BYTE *)(a1 + 188) = 0;
    dword_1EE418968 = *(_DWORD *)(a1 + 220);
    *(_DWORD *)(a1 + 224) = v6;
    v7 = *(_QWORD *)(a1 + 120);
    if (!v7)
      sub_19C2210D4(37);
    if (*(_BYTE *)(a1 + 216))
      (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 40) + 184))(*(_QWORD *)(v7 + 40));
    sub_19C0A66BC(a1);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 200))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
    *(_BYTE *)(a1 + 188) = 1;
  }
  v8 = v4 - v5;
  v9 = (unint64_t)(v4 - v5) >> 2;
  if ((int)v9 >= 1)
  {
    v10 = 0;
    do
    {
      sub_19C0AAC0C(a1, (int *)(*a2 + v10));
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
      v10 += 4;
    }
    while ((v8 & 0x3FFFFFFFCLL) != v10);
  }
  v11 = *(uint64_t **)(a1 + 128);
  sub_19C0AB6A0(&__p, (int)(v8 >> 2));
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) == 4)
    sub_19C0A64EC((_QWORD *)a1, v9);
  v12 = *(_QWORD *)*v11;
  if (*(_QWORD *)(*v11 + 8) != v12)
  {
    v13 = 0;
    do
    {
      v14 = **(_QWORD **)(*(_QWORD *)(a1 + 120) + 104);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 264))(v14);
      bzero(*(void **)(v12 + 8 * v13++), 4 * v15);
      v12 = *(_QWORD *)*v11;
    }
    while (v13 < (*(_QWORD *)(*v11 + 8) - v12) >> 3);
  }
  v73 = v8;
  v74 = v11;
  v72 = v9;
  if ((int)v9 >= 1)
  {
    v16 = 0;
    v75 = ((unint64_t)v8 >> 2);
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) == 1)
      {
        v18 = (char *)__p + 24 * v16;
        v19 = *a2;
        v21 = (char *)*((_QWORD *)v18 + 1);
        v20 = *((_QWORD *)v18 + 2);
        if ((unint64_t)v21 >= v20)
        {
          v22 = *(char **)v18;
          v23 = (uint64_t)&v21[-*(_QWORD *)v18];
          v24 = v23 >> 2;
          v25 = (v23 >> 2) + 1;
          if (v25 >> 62)
            goto LABEL_79;
          v26 = v20 - (_QWORD)v22;
          if (v26 >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            if (v27 >> 62)
              goto LABEL_80;
            v28 = operator new(4 * v27);
            v29 = &v28[4 * v24];
            *v29 = *(_DWORD *)(v19 + 4 * v16);
            v17 = (uint64_t)(v29 + 1);
            if (v21 == v22)
              goto LABEL_59;
          }
          else
          {
            v28 = 0;
            v29 = (_DWORD *)(4 * v24);
            *(_DWORD *)(4 * v24) = *(_DWORD *)(v19 + 4 * v16);
            v17 = 4 * v24 + 4;
            if (v21 == v22)
              goto LABEL_59;
          }
          v35 = v21 - 4 - v22;
          if (v35 < 0x2C)
            goto LABEL_88;
          if ((unint64_t)(v21 - &v28[v23]) < 0x20)
            goto LABEL_88;
          v36 = (v35 >> 2) + 1;
          v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
          v38 = &v21[-v37];
          v29 = (_DWORD *)((char *)v29 - v37);
          v39 = &v28[4 * v24 - 16];
          v40 = v21 - 16;
          v41 = v36 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *v39 = v42;
            v39 -= 2;
            v40 -= 32;
            v41 -= 8;
          }
          while (v41);
          v21 = v38;
          if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_88:
            do
            {
              v43 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *--v29 = v43;
            }
            while (v21 != v22);
          }
          goto LABEL_59;
        }
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) != 4)
          goto LABEL_19;
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8), *(unsigned int *)(*a2 + 4 * v16), *(_QWORD *)*v74 + 8 * v16);
        v18 = (char *)__p + 24 * v16;
        v19 = *a2;
        v21 = (char *)*((_QWORD *)v18 + 1);
        v30 = *((_QWORD *)v18 + 2);
        if ((unint64_t)v21 >= v30)
        {
          v22 = *(char **)v18;
          v31 = (uint64_t)&v21[-*(_QWORD *)v18];
          v32 = v31 >> 2;
          v33 = (v31 >> 2) + 1;
          if (v33 >> 62)
LABEL_79:
            sub_19C07DA0C();
          v34 = v30 - (_QWORD)v22;
          if (v34 >> 1 > v33)
            v33 = v34 >> 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v33;
          if (v27)
          {
            if (v27 >> 62)
LABEL_80:
              sub_19C07C7FC();
            v28 = operator new(4 * v27);
            v29 = &v28[4 * v32];
            *v29 = *(_DWORD *)(v19 + 4 * v16);
            v17 = (uint64_t)(v29 + 1);
            if (v21 == v22)
              goto LABEL_59;
LABEL_53:
            v44 = v21 - 4 - v22;
            if (v44 < 0x2C)
              goto LABEL_89;
            if ((unint64_t)(v21 - &v28[v31]) < 0x20)
              goto LABEL_89;
            v45 = (v44 >> 2) + 1;
            v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
            v47 = &v21[-v46];
            v29 = (_DWORD *)((char *)v29 - v46);
            v48 = &v28[4 * v32 - 16];
            v49 = v21 - 16;
            v50 = v45 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 8;
            }
            while (v50);
            v21 = v47;
            if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_89:
              do
              {
                v52 = *((_DWORD *)v21 - 1);
                v21 -= 4;
                *--v29 = v52;
              }
              while (v21 != v22);
            }
          }
          else
          {
            v28 = 0;
            v29 = (_DWORD *)(4 * v32);
            *(_DWORD *)(4 * v32) = *(_DWORD *)(v19 + 4 * v16);
            v17 = 4 * v32 + 4;
            if (v21 != v22)
              goto LABEL_53;
          }
LABEL_59:
          *(_QWORD *)v18 = v29;
          *((_QWORD *)v18 + 1) = v17;
          *((_QWORD *)v18 + 2) = &v28[4 * v27];
          if (v22)
            operator delete(v22);
          goto LABEL_18;
        }
      }
      *(_DWORD *)v21 = *(_DWORD *)(v19 + 4 * v16);
      v17 = (uint64_t)(v21 + 4);
LABEL_18:
      *((_QWORD *)v18 + 1) = v17;
LABEL_19:
      ++v16;
    }
    while (v16 != v75);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) != 1)
  {
    v54 = (char *)__p;
    v53 = v79;
    if (v79 != __p)
    {
      v55 = v79;
      do
      {
        v57 = (void *)*((_QWORD *)v55 - 3);
        v55 -= 24;
        v56 = v57;
        if (v57)
        {
          *((_QWORD *)v53 - 2) = v56;
          operator delete(v56);
        }
        v53 = v55;
      }
      while (v55 != v54);
    }
    v79 = v54;
  }
  v58 = *(unsigned __int8 *)(a1 + 152);
  v77 = 0;
  v76 = 0;
  v59 = atomic_load((unsigned __int8 *)&qword_1EE419EE8);
  if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419EE8))
  {
    qword_1EE419F30 = 0;
    unk_1EE419F38 = 0;
    qword_1EE419F28 = 0;
    __cxa_atexit((void (*)(void *))sub_19C0A4884, &qword_1EE419F28, &dword_19C079000);
    __cxa_guard_release(&qword_1EE419EE8);
  }
  v60 = atomic_load((unsigned __int8 *)&qword_1EE419EF0);
  if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419EF0))
  {
    qword_1EE419F48 = 0;
    unk_1EE419F50 = 0;
    qword_1EE419F40 = 0;
    __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419F40, &dword_19C079000);
    __cxa_guard_release(&qword_1EE419EF0);
  }
  sub_19C0AB768(*(_QWORD *)(a1 + 120), *v74, (uint64_t)&__p, &qword_1EE419F28, (uint64_t)&v77, 0, (float *)&v77 + 1, v72, v58 == 0, 0, (uint64_t)&v76, (uint64_t)&qword_1EE419F40);
  v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v62 = *(const void **)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61)
                       + (((v73 << 30) - 0x100000000) >> 29));
  v63 = *(void **)(a1 + 168);
  v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 272))(v64);
  memcpy(v63, v62, 4 * v65);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 192))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
  v66 = (char *)__p;
  if (__p)
  {
    v67 = v79;
    v68 = __p;
    if (v79 != __p)
    {
      v69 = v79;
      do
      {
        v71 = (void *)*((_QWORD *)v69 - 3);
        v69 -= 24;
        v70 = v71;
        if (v71)
        {
          *((_QWORD *)v67 - 2) = v70;
          operator delete(v70);
        }
        v67 = v69;
      }
      while (v69 != v66);
      v68 = __p;
    }
    v79 = v66;
    operator delete(v68);
  }
}

void sub_19C0AC024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C0830E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C0AC038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C0830E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C0AC04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C0830E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C0AC060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C0830E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C0AC074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C0830E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C0AC088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C0830E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C0AC09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  size_t v13;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  void *v32;
  int v33;
  uint64_t v34;
  void *__p;
  char *v36;
  uint64_t v37;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 184))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
  v6 = *(_DWORD *)(a1 + 220);
  if (dword_1EE418968 < v6 || !*(_BYTE *)(a1 + 188))
  {
    sub_19C0A61A8(a1);
    *(_BYTE *)(a1 + 188) = 0;
    dword_1EE418968 = *(_DWORD *)(a1 + 220);
    *(_DWORD *)(a1 + 224) = v6;
    v7 = *(_QWORD *)(a1 + 120);
    if (!v7)
      sub_19C2210D4(37);
    if (*(_BYTE *)(a1 + 216))
      (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 40) + 184))(*(_QWORD *)(v7 + 40));
    sub_19C0A66BC(a1);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 200))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
    *(_BYTE *)(a1 + 188) = 1;
  }
  v8 = *(uint64_t **)(a1 + 128);
  v9 = (int)a3;
  if ((int)a3 > (unint64_t)((uint64_t)(*(_QWORD *)(*v8 + 8) - *(_QWORD *)*v8) >> 3))
    sub_19C0A64EC((_QWORD *)a1, a3);
  __p = 0;
  v36 = 0;
  v37 = 0;
  v10 = **(_QWORD **)(*(_QWORD *)(a1 + 120) + 104);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 264))(v10);
  if ((int)a3 >= 1)
  {
    v12 = 0;
    v13 = 4 * v11;
    do
    {
      bzero(*(void **)(*(_QWORD *)*v8 + v12), v13);
      memcpy(*(void **)(*(_QWORD *)*v8 + v12), *(const void **)(a2 + v12), v13);
      v12 += 8;
    }
    while (8 * a3 != v12);
  }
  v14 = *(unsigned __int8 *)(a1 + 152);
  v34 = 0;
  v33 = 0;
  v15 = atomic_load((unsigned __int8 *)&qword_1EE419EF8);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419EF8))
  {
    qword_1EE419F60 = 0;
    unk_1EE419F68 = 0;
    qword_1EE419F58 = 0;
    __cxa_atexit((void (*)(void *))sub_19C0A4884, &qword_1EE419F58, &dword_19C079000);
    __cxa_guard_release(&qword_1EE419EF8);
  }
  v16 = atomic_load((unsigned __int8 *)&qword_1EE419F00);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EE419F00))
  {
    qword_1EE419F78 = 0;
    unk_1EE419F80 = 0;
    qword_1EE419F70 = 0;
    __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419F70, &dword_19C079000);
    __cxa_guard_release(&qword_1EE419F00);
  }
  sub_19C0AB768(*(_QWORD *)(a1 + 120), *v8, (uint64_t)&__p, &qword_1EE419F58, (uint64_t)&v34, 0, (float *)&v34 + 1, a3, v14 == 0, 0, (uint64_t)&v33, (uint64_t)&qword_1EE419F70);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v20 = *(const void **)v18;
  v19 = *(_QWORD *)(v18 + 8);
  v21 = v19 - *(_QWORD *)v18;
  if (v19 == *(_QWORD *)v18)
  {
    v22 = 0;
  }
  else
  {
    if (v21 < 0)
      sub_19C07DA0C();
    v22 = operator new(v19 - *(_QWORD *)v18);
    memcpy(v22, v20, v21 & 0xFFFFFFFFFFFFFFF8);
  }
  v23 = *(void **)(a1 + 168);
  v24 = (const void *)*((_QWORD *)v22 + v9 - 1);
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 272))(v25);
  memcpy(v23, v24, 4 * v26);
  dword_1EE418968 = 2;
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 40) + 192))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 40));
  operator delete(v22);
  v27 = (char *)__p;
  if (__p)
  {
    v28 = v36;
    v29 = __p;
    if (v36 != __p)
    {
      v30 = v36;
      do
      {
        v32 = (void *)*((_QWORD *)v30 - 3);
        v30 -= 24;
        v31 = v32;
        if (v32)
        {
          *((_QWORD *)v28 - 2) = v31;
          operator delete(v31);
        }
        v28 = v30;
      }
      while (v30 != v27);
      v29 = __p;
    }
    v36 = v27;
    operator delete(v29);
  }
}

void sub_19C0AC40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C0830E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C0AC420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C0830E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C0AC434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C0830E8((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C0AC448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (__p)
    operator delete(__p);
  sub_19C0830E8(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0AC478(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_19C0AC480(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(result + 120);
  if (!v2)
    sub_19C2210D4(36);
  if (a2)
  {
    v3 = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(v2 + 40) + 152))(*(_QWORD *)(v2 + 40), a2, &v3);
  }
  return result;
}

uint64_t sub_19C0AC4C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t *v11;
  int8x16_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint8x16_t v15;
  uint64_t v16;
  int8x8_t v17;
  float32x4_t *v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float *v23;
  float v24;

  if (!*(_QWORD *)(a1 + 120))
    sub_19C2210D4(36);
  if (a2)
  {
    v2 = *a2;
    v3 = a2[1];
    v4 = v3 - *a2;
    if (v3 != *a2)
    {
      v5 = 0;
      v6 = v4 >> 4;
      if (v6 <= 1)
        v6 = 1;
      LOBYTE(v7) = 1;
      while (1)
      {
        if ((v7 & 1) != 0)
        {
          v8 = *(unsigned int *)(v2 + 16 * v5);
          if ((int)v8 >= 1)
          {
            v9 = **(float32x4_t ***)(v2 + 8 + 16 * v5);
            if (v8 < 8)
            {
              v10 = 0;
              LOBYTE(v7) = 1;
LABEL_23:
              v22 = v8 - v10;
              v23 = &v9->f32[v10];
              do
              {
                v24 = *v23++;
                LOBYTE(v7) = (v24 == 0.0) & v7;
                --v22;
              }
              while (v22);
              goto LABEL_8;
            }
            if (v8 >= 0x20)
            {
              v10 = v8 & 0x7FFFFFE0;
              v11 = v9 + 4;
              v12.i64[0] = 0x101010101010101;
              v12.i64[1] = 0x101010101010101;
              v13 = v8 & 0xFFFFFFE0;
              v14.i64[0] = 0x101010101010101;
              v14.i64[1] = 0x101010101010101;
              do
              {
                v12 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(v11[-4]), (int16x8_t)vceqzq_f32(v11[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(v11[-2]), (int16x8_t)vceqzq_f32(v11[-1]))), v12);
                v14 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(*v11), (int16x8_t)vceqzq_f32(v11[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_f32(v11[2]), (int16x8_t)vceqzq_f32(v11[3]))), v14);
                v11 += 8;
                v13 -= 32;
              }
              while (v13);
              v15 = (uint8x16_t)vcltzq_s8(vshlq_n_s8(vmvnq_s8(vandq_s8(v12, v14)), 7uLL));
              v15.i8[0] = vmaxvq_u8(v15);
              v7 = v15.i32[0] ^ 1;
              if (v10 == v8)
                goto LABEL_8;
              if ((v8 & 0x18) == 0)
                goto LABEL_23;
            }
            else
            {
              v10 = 0;
              v7 = 1;
            }
            v16 = v10;
            v10 = v8 & 0xFFFFFFF8;
            v17 = vdup_n_s8(v7);
            v18 = (float32x4_t *)((char *)v9 + 4 * v16);
            v19 = v16 - v10;
            do
            {
              v20 = *v18;
              v21 = v18[1];
              v18 += 2;
              v17 = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqzq_f32(v20), (int16x8_t)vceqzq_f32(v21))), v17);
              v19 += 8;
            }
            while (v19);
            LOBYTE(v7) = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmvn_s8(v17), 7uLL))) ^ 1;
            if (v10 == v8)
              goto LABEL_8;
            goto LABEL_23;
          }
          LOBYTE(v7) = 1;
        }
        else
        {
          LOBYTE(v7) = 0;
        }
LABEL_8:
        if (++v5 == v6)
          return v7 & 1;
      }
    }
    return 1;
  }
  else
  {
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
}

uint64_t sub_19C0AC698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;

  v3 = *(_QWORD *)(a1 + 120);
  if (!v3)
    sub_19C2210D4(36);
  if (!a2)
    sub_19C2210D4(37);
  v5 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, int *))(**(_QWORD **)(v3 + 40) + 136))(*(_QWORD *)(v3 + 40), a2, a3, &v5);
}

uint64_t sub_19C0AC6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
    sub_19C2210D4(38);
  if (!a2)
    sub_19C2210D4(39);
  v4 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, int *))(**(_QWORD **)(v2 + 40) + 144))(*(_QWORD *)(v2 + 40), a2, 0, &v4);
}

uint64_t sub_19C0AC734(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

uint64_t sub_19C0AC73C(uint64_t a1, char *a2, int a3)
{
  char *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;

  if (!a2)
    sub_19C2210D4(103);
  v4 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  if (a3 >= 1)
  {
    v10 = (_QWORD *)v9;
    v11 = 0;
    v12 = 4 * v7;
    v13 = 8 * a3;
    do
    {
      memcpy(v4, *(const void **)(*v10 + v11), v12);
      v4 += v12;
      v11 += 8;
    }
    while (v13 != v11);
  }
  return 1;
}

uint64_t sub_19C0AC7F0(uint64_t a1, float32x4_t *a2, float32x4_t *a3, int a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float **v22;
  float *v23;
  float *v25;
  float32x4_t *v26;
  uint64_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float *v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float32x4_t *v37;
  float *v38;
  uint64_t v39;
  __int32 *v40;
  __int32 *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v48;
  BOOL v49;
  const float *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  const float *v54;
  uint64_t v55;
  uint64_t v56;
  float **v57;
  float *v58;
  float *v59;
  float *v60;
  _DWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  float *v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float32x4_t *v73;
  float **v74;
  float *v75;
  float *v77;
  float32x4_t *v78;
  uint64_t v79;
  int32x4_t v80;
  float32x4_t v81;
  float *v82;
  uint64_t v83;
  float *v84;
  float *v85;
  float *v86;
  uint64_t v88;
  uint64_t v89;
  unsigned int v91;
  _QWORD *v92;
  uint64_t v93;
  char v95;
  float32x4x2_t v96;
  float32x4x2_t v97;
  float32x4x2_t v98;
  float32x4x2_t v99;

  if (!a2 || !a3)
    sub_19C2210D4(103);
  LODWORD(v6) = a4;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v92 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  if ((int)a5 >= 1)
  {
    v11 = v9;
    v12 = (int)v6;
    v13 = 126 - 2 * __clz((int)v6);
    if (!(_DWORD)v6)
      v13 = 0;
    v93 = v13;
    if ((int)v9 >= (int)v6)
      v6 = v6;
    else
      v6 = v9;
    v91 = v9;
    if ((int)v6 >= 1)
    {
      v14 = 0;
      v15 = 0;
      v16 = 4 * v12;
      v88 = 2 * v6;
      v17 = a2 + 1;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      v19.i64[0] = 0x800000008;
      v19.i64[1] = 0x800000008;
      v20 = a3 + 1;
      v89 = a5;
      while (1)
      {
        v21 = *(float32x4_t **)(*v92 + 8 * v15);
        v22 = *(float ***)(a1 + 160);
        v23 = *v22;
        if (v11 < 8)
          break;
        if (v23 + 1 < &v21->f32[v9] && v21 < (float32x4_t *)&v23[2 * v9])
          break;
        v25 = v23 + 8;
        v26 = v21 + 1;
        v27 = v9 & 0xFFFFFFF8;
        v28 = (int32x4_t)xmmword_19C276E70;
        do
        {
          v97.val[0] = (float32x4_t)vaddq_s32(v28, v18);
          v29 = v26[-1];
          v97.val[1] = *v26;
          v30 = v25 - 8;
          vst2q_f32(v30, *(float32x4x2_t *)v28.i8);
          vst2q_f32(v25, v97);
          v28 = vaddq_s32(v28, v19);
          v25 += 16;
          v26 += 2;
          v27 -= 8;
        }
        while (v27);
        v31 = v9 & 0xFFFFFFF8;
        if (v31 != v9)
          goto LABEL_23;
LABEL_25:
        v33 = &v23[2 * v12];
        v34 = v22[1];
        if (v33 != v34)
        {
          sub_19C16B3A4(v23, v33, v34);
          v23 = *v22;
        }
        sub_19C16B874(v23, (char *)&v23[2 * v12], (uint64_t)&v95, v93, 1);
        v35 = *v22;
        if (v6 >= 8)
        {
          v36 = 0;
          v37 = a3;
          v44 = 4 * v6 + v16 * v15;
          v45 = (unint64_t)a3 + v44;
          v46 = (unint64_t)a2 + v44;
          v48 = (char *)a2 + v16 * v15 < (char *)&v35[v88] && (unint64_t)(v35 + 1) < v46;
          v49 = (unint64_t)v35 >= v45 || (char *)a3 + v16 * v15 >= (char *)&v35[v88 - 1];
          v18.i64[0] = 0x400000004;
          v18.i64[1] = 0x400000004;
          v19.i64[0] = 0x800000008;
          v19.i64[1] = 0x800000008;
          if (v49)
          {
            v11 = v9;
            if (!v48)
            {
              v50 = v35 + 8;
              v51 = v20;
              v52 = v17;
              v53 = v6 & 0xFFFFFFF8;
              do
              {
                v54 = v50 - 8;
                v96 = vld2q_f32(v54);
                v98 = vld2q_f32(v50);
                v51[-1] = v96.val[0];
                *v51 = v98.val[0];
                v52[-1] = v96.val[1];
                *v52 = v98.val[1];
                v50 += 16;
                v52 += 2;
                v51 += 2;
                v53 -= 8;
              }
              while (v53);
              v36 = v6 & 0x7FFFFFF8;
              if ((v6 & 0xFFFFFFF8) == v6)
                goto LABEL_11;
            }
          }
          else
          {
            v11 = v9;
          }
        }
        else
        {
          v36 = 0;
          v37 = a3;
          v11 = v9;
          v18.i64[0] = 0x400000004;
          v18.i64[1] = 0x400000004;
          v19.i64[0] = 0x800000008;
          v19.i64[1] = 0x800000008;
        }
        v38 = &v35[2 * v36 + 1];
        v39 = 4 * (v36 + v14);
        v40 = (__int32 *)((char *)v37 + v39);
        v41 = (__int32 *)((char *)a2 + v39);
        v42 = v6 - v36;
        do
        {
          *v40++ = *((_DWORD *)v38 - 1);
          v43 = *(_DWORD *)v38;
          v38 += 2;
          *v41++ = v43;
          --v42;
        }
        while (v42);
LABEL_11:
        ++v15;
        v17 = (float32x4_t *)((char *)v17 + v16);
        v20 = (float32x4_t *)((char *)v20 + v16);
        v14 += v12;
        if (v15 == v89)
          return 1;
      }
      v31 = 0;
LABEL_23:
      v32 = &v23[2 * v31 + 1];
      do
      {
        *((_DWORD *)v32 - 1) = v31;
        *v32 = v21->f32[v31];
        v32 += 2;
        ++v31;
      }
      while (v9 != v31);
      goto LABEL_25;
    }
    if ((int)v9 > 0)
    {
      v55 = a5;
      if (v9 < 8)
      {
        v56 = 0;
        do
        {
          v61 = *(_DWORD **)(*v92 + v56);
          v62 = *(uint64_t **)(a1 + 160);
          v63 = *v62;
          *(_DWORD *)v63 = 0;
          *(_DWORD *)(v63 + 4) = *v61;
          if (v11 != 1)
          {
            *(_DWORD *)(v63 + 8) = 1;
            *(_DWORD *)(v63 + 12) = v61[1];
            if (v11 != 2)
            {
              *(_DWORD *)(v63 + 16) = 2;
              *(_DWORD *)(v63 + 20) = v61[2];
              if (v11 != 3)
              {
                *(_DWORD *)(v63 + 24) = 3;
                *(_DWORD *)(v63 + 28) = v61[3];
                if (v11 != 4)
                {
                  *(_DWORD *)(v63 + 32) = 4;
                  *(_DWORD *)(v63 + 36) = v61[4];
                  if (v11 != 5)
                  {
                    *(_DWORD *)(v63 + 40) = 5;
                    *(_DWORD *)(v63 + 44) = v61[5];
                    if (v11 != 6)
                    {
                      *(_DWORD *)(v63 + 48) = 6;
                      *(_DWORD *)(v63 + 52) = v61[6];
                    }
                  }
                }
              }
            }
          }
          v64 = (float *)(v63 + 8 * v12);
          v65 = (float *)v62[1];
          if (v64 != v65)
          {
            sub_19C16B3A4((float *)v63, v64, v65);
            v63 = *v62;
          }
          sub_19C16B874((float *)v63, (char *)(v63 + 8 * v12), (uint64_t)&v95, v93, 1);
          v56 += 8;
          v11 = v91;
        }
        while (8 * a5 != v56);
        return 1;
      }
      v66 = 0;
      v67 = v11;
      v68 = 2 * v11;
      v69 = v11;
      v70 = v11 & 0xFFFFFFF8;
      v71.i64[0] = 0x400000004;
      v71.i64[1] = 0x400000004;
      v72.i64[0] = 0x800000008;
      for (v72.i64[1] = 0x800000008; ; v72.i64[1] = 0x800000008)
      {
        v73 = *(float32x4_t **)(*v92 + 8 * v66);
        v74 = *(float ***)(a1 + 160);
        v75 = *v74;
        if (*v74 + 1 >= &v73->f32[v69] || v73 >= (float32x4_t *)&(*v74)[v68])
        {
          v77 = v75 + 8;
          v78 = v73 + 1;
          v79 = v70;
          v80 = (int32x4_t)xmmword_19C276E70;
          do
          {
            v99.val[0] = (float32x4_t)vaddq_s32(v80, v71);
            v81 = v78[-1];
            v99.val[1] = *v78;
            v82 = v77 - 8;
            vst2q_f32(v82, *(float32x4x2_t *)v80.i8);
            vst2q_f32(v77, v99);
            v80 = vaddq_s32(v80, v72);
            v77 += 16;
            v78 += 2;
            v79 -= 8;
          }
          while (v79);
          v83 = v70;
          if (v70 == v67)
            goto LABEL_76;
        }
        else
        {
          v83 = 0;
        }
        v84 = &v75[2 * v83 + 1];
        do
        {
          *((_DWORD *)v84 - 1) = v83;
          *v84 = v73->f32[v83];
          v84 += 2;
          ++v83;
        }
        while (v67 != v83);
LABEL_76:
        v85 = &v75[2 * v12];
        v86 = v74[1];
        if (v85 != v86)
        {
          sub_19C16B3A4(v75, v85, v86);
          v75 = *v74;
        }
        sub_19C16B874(v75, (char *)&v75[2 * v12], (uint64_t)&v95, v93, 1);
        ++v66;
        v71.i64[0] = 0x400000004;
        v71.i64[1] = 0x400000004;
        v72.i64[0] = 0x800000008;
        if (v66 == v55)
          return 1;
      }
    }
    do
    {
      v57 = *(float ***)(a1 + 160);
      v58 = *v57;
      v59 = v57[1];
      v60 = &(*v57)[2 * v12];
      if (v60 != v59)
      {
        sub_19C16B3A4(v58, v60, v59);
        v58 = *v57;
      }
      sub_19C16B874(v58, (char *)&v58[2 * v12], (uint64_t)&v95, v93, 1);
      --a5;
    }
    while (a5);
  }
  return 1;
}

uint64_t sub_19C0ACD9C(uint64_t a1, float32x4_t *a2, unint64_t a3, signed int a4, int a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  float **v15;
  float *v16;
  float32x4_t *v17;
  BOOL v18;
  uint64_t v19;
  float *v20;
  int32x4_t v21;
  float32x4_t *v22;
  int32x4_t v23;
  int32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v38;
  const float *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  uint64_t v43;
  const float *v44;
  __int32 *v45;
  __int32 *v46;
  _DWORD *v47;
  uint64_t v48;
  __int32 v49;
  char v51;
  float32x4x2_t v52;
  float32x4x2_t v53;
  float32x4x2_t v54;

  if (!a2 || !a3)
    sub_19C2210D4(103);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 272))(v10);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v13 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  if (a5 <= 1)
    v14 = 1;
  else
    v14 = a5;
  v15 = *(float ***)(a1 + 160);
  v16 = *v15;
  if ((int)v11 >= 1)
  {
    v17 = *(float32x4_t **)(*v13 + 8 * (v14 - 1));
    if (v11 < 8 || (v16 + 1 < &v17->f32[v11] ? (v18 = v17 >= (float32x4_t *)&v16[2 * v11]) : (v18 = 1), !v18))
    {
      v19 = 0;
LABEL_18:
      v28 = &v16[2 * v19 + 1];
      do
      {
        *((_DWORD *)v28 - 1) = v19;
        *v28 = v17->f32[v19];
        v28 += 2;
        ++v19;
      }
      while (v11 != v19);
      goto LABEL_20;
    }
    v19 = v11 & 0x7FFFFFF8;
    v20 = v16 + 8;
    v21 = (int32x4_t)xmmword_19C276E70;
    v22 = v17 + 1;
    v23.i64[0] = 0x400000004;
    v23.i64[1] = 0x400000004;
    v24.i64[0] = 0x800000008;
    v24.i64[1] = 0x800000008;
    v25 = v11 & 0xFFFFFFF8;
    do
    {
      v54.val[0] = (float32x4_t)vaddq_s32(v21, v23);
      v26 = v22[-1];
      v54.val[1] = *v22;
      v27 = v20 - 8;
      vst2q_f32(v27, *(float32x4x2_t *)v21.i8);
      vst2q_f32(v20, v54);
      v21 = vaddq_s32(v21, v24);
      v20 += 16;
      v22 += 2;
      v25 -= 8;
    }
    while (v25);
    if (v19 != v11)
      goto LABEL_18;
  }
LABEL_20:
  v29 = &v16[2 * a4];
  v30 = v15[1];
  if (v29 != v30)
  {
    sub_19C16B3A4(v16, v29, v30);
    v16 = *v15;
  }
  v31 = 126 - 2 * __clz(a4);
  if (a4)
    v32 = v31;
  else
    v32 = 0;
  sub_19C16B874(v16, (char *)&v16[2 * a4], (uint64_t)&v51, v32, 1);
  if ((int)v11 >= a4)
    v33 = a4;
  else
    v33 = v11;
  if ((int)v33 >= 1)
  {
    v34 = (unint64_t)*v15;
    if (v33 < 0xC)
    {
      v35 = 0;
LABEL_45:
      v45 = (__int32 *)(v34 + 8 * v35 + 4);
      v46 = &a2->i32[v35];
      v47 = (_DWORD *)(a3 + 4 * v35);
      v48 = v33 - v35;
      do
      {
        *v47++ = *(v45 - 1);
        v49 = *v45;
        v45 += 2;
        *v46++ = v49;
        --v48;
      }
      while (v48);
      return 1;
    }
    v35 = 0;
    v36 = v34 + 8 * v33;
    v38 = v36 > (unint64_t)a2 && v34 + 4 < (unint64_t)a2->u64 + 4 * v33;
    if (v34 < a3 + 4 * v33 && v36 - 4 > a3)
      goto LABEL_45;
    if (v38)
      goto LABEL_45;
    v35 = v33 & 0x7FFFFFF8;
    v40 = (const float *)(v34 + 32);
    v41 = (float32x4_t *)(a3 + 16);
    v42 = a2 + 1;
    v43 = v33 & 0xFFFFFFF8;
    do
    {
      v44 = v40 - 8;
      v52 = vld2q_f32(v44);
      v53 = vld2q_f32(v40);
      v41[-1] = v52.val[0];
      *v41 = v53.val[0];
      v42[-1] = v52.val[1];
      *v42 = v53.val[1];
      v40 += 16;
      v41 += 2;
      v42 += 2;
      v43 -= 8;
    }
    while (v43);
    if (v35 != v33)
      goto LABEL_45;
  }
  return 1;
}

uint64_t sub_19C0AD000(uint64_t a1, uint64_t a2, int a3, char a4, float a5, float a6, float a7)
{
  uint64_t v14;
  int v15;
  unsigned int v16;
  double v17;
  uint64_t v18;

  v14 = operator new();
  sub_19C227C44(v14, a2, sub_19C0AD0FC, 0);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15)
  {
    v16 = 0;
    v17 = a7;
    do
    {
      v18 = sub_19C227DD8(v14, v16);
      sub_19C0A48CC(v18, *(_QWORD *)(a1 + 120), *(_DWORD *)a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(uint64_t (****)(_QWORD))(a1 + 8), *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), a5, a6, v17, a3, a4);
      ++v16;
    }
    while (v15 != v16);
  }
  return v14;
}

void sub_19C0AD0E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0AD0FC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  sub_19C227A78(v6, a1, a2, a3);
  *(_QWORD *)v6 = off_1E3D1E1F8;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_QWORD *)(v6 + 128) = 0;
  return v6;
}

void sub_19C0AD174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0AD188(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

uint64_t sub_19C0AD1A0(uint64_t result, _QWORD *a2, _QWORD *a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12, char a13)
{
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  unsigned int v34;
  uint64_t v35;
  std::locale v36;

  v35 = result;
  v18 = 0;
  v34 = *(_DWORD *)(a10 + 8);
  while (1)
  {
    v19 = (int)v34 >= (int)a4 ? a4 : v34;
    if ((_DWORD)v19)
    {
      v20 = 0;
      do
      {
        v21 = sub_19C227DD8(a10, v20);
        *(_DWORD *)(v21 + 168) = a5;
        *(_QWORD *)(v21 + 176) = a7;
        *(_QWORD *)(v21 + 192) = *a2 + 24 * (v18 + v20);
        *(_QWORD *)(v21 + 200) = *a3 + 24 * (v18 + v20);
        *(_BYTE *)(v21 + 208) = 0;
        ++v20;
      }
      while ((_DWORD)v19 != v20);
      v18 += v20;
      if ((a12 & 1) != 0)
      {
        v22 = 0;
        do
        {
          v23 = sub_19C227DD8(a10, v22);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
          ++v22;
        }
        while ((_DWORD)v19 != v22);
      }
      else
      {
        result = sub_19C227E18(a10, v19);
        if ((_DWORD)result)
          goto LABEL_35;
      }
    }
    else if ((a12 & 1) == 0)
    {
      result = sub_19C227E18(a10, v19);
      if ((_DWORD)result)
      {
LABEL_35:
        v30 = sub_19C07DCDC(MEMORY[0x1E0DE4A60], (uint64_t)"***Error executing ThreadPool.run()", 35);
        std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
        v31 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
        goto LABEL_37;
      }
    }
    if ((a13 & 1) != 0)
      break;
    if ((_DWORD)v19)
    {
      v27 = 0;
      do
      {
        v28 = sub_19C227DD8(a10, v27);
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, float, float))(**(_QWORD **)(*(_QWORD *)(v35 + 120)
                                                                                               + 40)
                                                                                 + 336))(*(_QWORD *)(*(_QWORD *)(v35 + 120) + 40), *(_QWORD *)(*(_QWORD *)(v28 + 56) + 40), *(unsigned int *)(*(_QWORD *)(v28 + 56) + 12), *(float *)(*(_QWORD *)(*(_QWORD *)(v35 + 120) + 40) + 32), *(float *)(*(_QWORD *)(*(_QWORD *)(v35 + 120) + 40) + 36));
        ++v27;
      }
      while ((_DWORD)v19 != v27);
LABEL_31:
      if ((_DWORD)v19)
      {
        v29 = 0;
        do
          result = sub_19C227DD8(a10, v29++);
        while ((_DWORD)v19 != v29);
      }
    }
LABEL_2:
    a4 -= v19;
    if (!a4)
      return result;
  }
  if (!(_DWORD)v19)
  {
    if ((a12 & 1) == 0)
      goto LABEL_30;
    goto LABEL_2;
  }
  v24 = 0;
  do
    *(_BYTE *)(sub_19C227DD8(a10, v24++) + 208) = 1;
  while ((_DWORD)v19 != v24);
  if ((a12 & 1) != 0)
  {
    v25 = 0;
    do
    {
      v26 = sub_19C227DD8(a10, v25);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      ++v25;
    }
    while ((_DWORD)v19 != v25);
    goto LABEL_31;
  }
LABEL_30:
  result = sub_19C227E18(a10, v19);
  if (!(_DWORD)result)
    goto LABEL_31;
  v32 = sub_19C07DCDC(MEMORY[0x1E0DE4A60], (uint64_t)"***Error execuring ThreadPool.run()", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
  v33 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
LABEL_37:
  std::locale::~locale(&v36);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_19C0AD49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

void sub_19C0AD4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

void sub_19C0AD4C4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5, _QWORD *a6, uint64_t *a7, uint64_t a8, int a9, int a10, uint64_t a11, _DWORD **a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float v21;
  float v22;
  int *v24;
  _DWORD *v25;
  int v26;
  void *__p;
  void *v28;
  char *v29;

  v15 = a10;
  v17 = *a7;
  v16 = a7[1];
  __p = 0;
  v28 = 0;
  v29 = 0;
  if (a10)
  {
    if (a10 < 0)
      sub_19C07DA0C();
    __p = operator new(8 * a10);
    v29 = (char *)__p + 8 * a10;
    bzero(__p, 8 * a10);
    v28 = v29;
  }
  v18 = (((v16 - v17) << 30) - 0x100000000) >> 32;
  if (a5 < 1)
  {
    v19 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 1.1755e-38;
    do
    {
      v22 = *(float *)(*(_QWORD *)(*a3 + 8 * v18) + 4 * v20);
      if (v22 > v21)
        v19 = v20;
      v21 = fmaxf(v22, v21);
      ++v20;
    }
    while (a5 != v20);
  }
  sub_19C0AD650(*a6 + 8 * v18, (float32x4_t **)(*a6 + 8 * v18), a5, &__p, a10);
  if (v19 >= 1 && a10 >= 1)
  {
    v24 = (int *)__p;
    v25 = *a12;
    do
    {
      v26 = *v24;
      v24 += 2;
      if (v26 == v19)
        ++*v25;
      ++v25;
      --v15;
    }
    while (v15);
  }
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
}

void sub_19C0AD630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C0AD650(uint64_t a1, float32x4_t **a2, int a3, void **a4, int a5)
{
  int v6;
  unint64_t v7;
  size_t v9;
  float *v10;
  float *v11;
  float32x4_t *v12;
  uint64_t v13;
  float *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v29;
  __int128 *v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  float *v38;
  int32x4_t v39;
  float32x4_t *v40;
  int32x4_t v41;
  int32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  float *v45;
  float *__p;
  char v47;
  float32x4x2_t v48;

  if (a5 <= a3)
    v6 = a3;
  else
    v6 = a5;
  v7 = v6;
  __p = 0;
  if (!v6)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_14;
  }
  if (v6 < 0)
    sub_19C07DA0C();
  v9 = 2 * v6;
  v10 = (float *)operator new(v9 * 4);
  __p = v10;
  bzero(v10, 8 * v7);
  v11 = &v10[v9];
  v12 = *a2;
  if (v7 < 8 || v10 + 1 < &v12->f32[v7] && v12 < (float32x4_t *)&v10[2 * v7])
  {
    v13 = 0;
LABEL_10:
    v14 = &v10[2 * v13 + 1];
    do
    {
      *((_DWORD *)v14 - 1) = v13;
      *v14 = v12->f32[v13];
      v14 += 2;
      ++v13;
    }
    while (v7 != v13);
    goto LABEL_14;
  }
  v13 = v7 & 0xFFFFFFF8;
  v38 = v10 + 8;
  v39 = (int32x4_t)xmmword_19C276E70;
  v40 = v12 + 1;
  v41.i64[0] = 0x400000004;
  v41.i64[1] = 0x400000004;
  v42.i64[0] = 0x800000008;
  v42.i64[1] = 0x800000008;
  v43 = v13;
  do
  {
    v48.val[0] = (float32x4_t)vaddq_s32(v39, v41);
    v44 = v40[-1];
    v48.val[1] = *v40;
    v45 = v38 - 8;
    vst2q_f32(v45, *(float32x4x2_t *)v39.i8);
    vst2q_f32(v38, v48);
    v39 = vaddq_s32(v39, v42);
    v38 += 16;
    v40 += 2;
    v43 -= 8;
  }
  while (v43);
  if (v13 != v7)
    goto LABEL_10;
LABEL_14:
  if (&v10[2 * v7] != v11)
    sub_19C16B3A4(v10, &v10[2 * v7], v11);
  v15 = 126 - 2 * __clz(v7);
  if ((_DWORD)v7)
    v16 = v15;
  else
    v16 = 0;
  sub_19C16B874(v10, (char *)&v10[2 * v7], (uint64_t)&v47, v16, 1);
  v17 = ((_BYTE *)a4[1] - (_BYTE *)*a4) >> 3;
  if (v7 <= v17)
  {
    if (v7 < v17)
      a4[1] = (char *)*a4 + 8 * v7;
  }
  else
  {
    sub_19C098930(a4, v7 - v17);
  }
  if ((_DWORD)v7)
  {
    v18 = (char *)*a4;
    if (v7 >= 0xC)
    {
      v19 = 0;
      v25 = (unint64_t)&v18[8 * v7];
      v26 = (unint64_t)&__p[2 * v7];
      v27 = v26 - 4;
      v29 = (unint64_t)(v18 + 4) < v26 && (unint64_t)(__p + 1) < v25;
      if (((unint64_t)__p >= v25 - 4 || (unint64_t)v18 >= v27) && !v29)
      {
        v19 = v7 & 0xFFFFFFF8;
        v31 = (__int128 *)(__p + 8);
        v32 = v18 + 32;
        v33 = v19;
        do
        {
          v35 = *(v31 - 2);
          v34 = *(v31 - 1);
          v37 = *v31;
          v36 = v31[1];
          v31 += 4;
          *(v32 - 2) = v35;
          *(v32 - 1) = v34;
          *v32 = v37;
          v32[1] = v36;
          v32 += 4;
          v33 -= 8;
        }
        while (v33);
        if (v19 == v7)
          goto LABEL_46;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = (8 * v19) | 4;
    v21 = &v18[v20];
    v22 = (int *)((char *)__p + v20);
    v23 = v7 - v19;
    do
    {
      *((_DWORD *)v21 - 1) = *(v22 - 1);
      v24 = *v22;
      v22 += 2;
      *(_DWORD *)v21 = v24;
      v21 += 8;
      --v23;
    }
    while (v23);
LABEL_46:
    operator delete(__p);
    return;
  }
  if (__p)
    goto LABEL_46;
}

void sub_19C0AD8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C0AD908(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;
  void *v28;
  void *v29;
  size_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  int v34;
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _DWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  char *v86;
  char *v87;
  char *v88;
  void *v89;
  void *v90;
  float v91;
  char *v92;
  char *v93;
  void *v94;
  char *v95;
  void *v96;
  void *v97;
  void **v98;
  void **v99;
  void **v100;
  void **v101;
  void *v102;
  void *v103;
  int v104;
  uint64_t v105;
  int *v106;
  int v109;
  uint64_t v110;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  int v117;
  void *__p;
  char *v119;
  void *v120;
  char *v121;
  uint64_t v122;
  void **v123;
  void **v124;
  uint64_t v125;
  float v126;
  _DWORD *v127[3];
  int v128[3];

  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  (***(void (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v110 = a1;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) - 8);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 272))(v14);
  v128[0] = 0;
  v16 = operator new(4uLL);
  *v16 = 0;
  v127[1] = v16 + 1;
  v127[2] = v16 + 1;
  v127[0] = v16;
  v126 = 0.0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_19C167E70((uint64_t)&v123, 1uLL);
  sub_19C167E70((uint64_t)&v120, 1uLL);
  v17 = dword_1EE418968;
  v18 = dword_1EE418968;
  v19 = ((_BYTE *)v123[1] - (_BYTE *)*v123) >> 3;
  if (dword_1EE418968 <= v19)
  {
    if (dword_1EE418968 < v19)
      v123[1] = (char *)*v123 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930(v123, dword_1EE418968 - v19);
    v17 = dword_1EE418968;
    v18 = dword_1EE418968;
  }
  v20 = (uint64_t)(*((_QWORD *)v120 + 1) - *(_QWORD *)v120) >> 3;
  v109 = v13;
  if (v18 <= v20)
  {
    if (v18 < v20)
      *((_QWORD *)v120 + 1) = *(_QWORD *)v120 + 8 * v18;
  }
  else
  {
    sub_19C098930((void **)v120, v18 - v20);
    v17 = dword_1EE418968;
  }
  if (v17 >= 1)
  {
    v21 = 0;
    do
    {
      v22 = **(_QWORD **)(*(_QWORD *)(v110 + 120) + 104);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 264))(v22);
      v24 = (void *)operator new[]();
      v25 = v24;
      if (v23 >= 1)
        bzero(v24, 4 * v23);
      *((_QWORD *)*v123 + v21) = v25;
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v110 + 120) + 112) - 8);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 272))(v26);
      v28 = (void *)operator new[]();
      v29 = v28;
      if (v27 >= 1)
        bzero(v28, 4 * v27);
      *(_QWORD *)(*(_QWORD *)v120 + 8 * v21++) = v29;
    }
    while (v21 < dword_1EE418968);
  }
  v106 = v16;
  if (a4 >= 1)
  {
    v30 = 4 * v15;
    v31 = 0;
    v32 = 0.0;
    v33 = v110;
    v34 = v13;
    v111 = v30;
    while (1)
    {
      v36 = (*(_QWORD *)(*a2 + 24 * v31 + 8) - *(_QWORD *)(*a2 + 24 * v31)) >> 2;
      if (dword_1EE418968 >= (int)v36)
        v36 = v36;
      else
        v36 = dword_1EE418968;
      v128[0] = 0;
      v126 = 0.0;
      v113 = v36;
      sub_19C0AB6A0(&__p, (int)v36);
      if (v34 != 1)
      {
        v38 = (char *)__p;
        v37 = v119;
        if (v119 != __p)
        {
          v39 = v119;
          do
          {
            v41 = (void *)*((_QWORD *)v39 - 3);
            v39 -= 24;
            v40 = v41;
            if (v41)
            {
              *((_QWORD *)v37 - 2) = v40;
              operator delete(v40);
            }
            v37 = v39;
          }
          while (v39 != v38);
        }
        v119 = v38;
      }
      if ((int)v113 >= 1)
        break;
LABEL_59:
      v117 = 0;
      v114 = 0;
      v115 = 0;
      v116 = 0;
      sub_19C0AB768(*(_QWORD *)(v33 + 120), (uint64_t)v123, (uint64_t)&__p, (uint64_t *)v120, (uint64_t)v128, a6, &v126, v113, 0, 0, (uint64_t)&v117, (uint64_t)&v114);
      v76 = v120;
      v77 = **(_QWORD **)(*(_QWORD *)(v33 + 120) + 104);
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 264))(v77);
      v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 120) + 112) - 8);
      v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 272))(v78);
      v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 120) + 112) - 8);
      v81 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80);
      sub_19C0AD4C4((uint64_t)v81, v82, v76, v83, v79, v81, (uint64_t *)(*a2 + 24 * v31), v84, v104, 1, v105, v127);
      v85 = v126;
      if (v114)
      {
        v115 = v114;
        operator delete(v114);
      }
      v86 = (char *)__p;
      v34 = v109;
      if (__p)
      {
        v87 = v119;
        v35 = __p;
        if (v119 != __p)
        {
          v88 = v119;
          do
          {
            v90 = (void *)*((_QWORD *)v88 - 3);
            v88 -= 24;
            v89 = v90;
            if (v90)
            {
              *((_QWORD *)v87 - 2) = v89;
              operator delete(v89);
            }
            v87 = v88;
          }
          while (v88 != v86);
          v35 = __p;
        }
        v119 = v86;
        operator delete(v35);
      }
      v32 = v85 + v32;
      if (++v31 == a4)
        goto LABEL_68;
    }
    v42 = 0;
    v112 = v31;
    while (1)
    {
      v44 = (void **)*v123;
      v45 = **(_QWORD **)(*(_QWORD *)(v33 + 120) + 104);
      v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 264))(v45);
      bzero(v44[v42], 4 * v46);
      v47 = *(_QWORD *)v120;
      v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 120) + 112) - 8);
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 272))(v48);
      bzero(*(void **)(v47 + 8 * v42), 4 * v49);
      (*(void (**)(_QWORD, _QWORD, char *))(**(_QWORD **)(v33 + 8) + 8))(*(_QWORD *)(v33 + 8), *(unsigned int *)(*(_QWORD *)(*a2 + 24 * v31) + 4 * v42), (char *)*v123 + 8 * v42);
      v50 = *(int *)(*(_QWORD *)(*a3 + 24 * v31) + 4 * v42);
      v51 = *(_QWORD *)v120;
      bzero(*(void **)(*(_QWORD *)v120 + 8 * v42), v30);
      *(_DWORD *)(*(_QWORD *)(v51 + 8 * v42) + 4 * v50) = 1065353216;
      if (v34 != 1)
        goto LABEL_35;
      v52 = (char *)__p + 24 * v42;
      v53 = *(_QWORD *)(*a2 + 24 * v31);
      v55 = (char *)*((_QWORD *)v52 + 1);
      v54 = *((_QWORD *)v52 + 2);
      if ((unint64_t)v55 >= v54)
        break;
      *(_DWORD *)v55 = *(_DWORD *)(v53 + 4 * v42);
      v43 = (uint64_t)(v55 + 4);
LABEL_34:
      *((_QWORD *)v52 + 1) = v43;
      v30 = v111;
      v31 = v112;
LABEL_35:
      if (++v42 == v113)
        goto LABEL_59;
    }
    v56 = *(char **)v52;
    v57 = (uint64_t)&v55[-*(_QWORD *)v52];
    v58 = v57 >> 2;
    v59 = (v57 >> 2) + 1;
    if (v59 >> 62)
      sub_19C07DA0C();
    v60 = a2;
    v61 = a3;
    v62 = v54 - (_QWORD)v56;
    if (v62 >> 1 > v59)
      v59 = v62 >> 1;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
      v63 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v63 = v59;
    if (v63)
    {
      if (v63 >> 62)
        sub_19C07C7FC();
      v64 = operator new(4 * v63);
      v65 = &v64[4 * v58];
      *v65 = *(_DWORD *)(v53 + 4 * v42);
      v43 = (uint64_t)(v65 + 1);
      if (v55 != v56)
        goto LABEL_47;
    }
    else
    {
      v64 = 0;
      v65 = (_DWORD *)(4 * v58);
      *(_DWORD *)(4 * v58) = *(_DWORD *)(v53 + 4 * v42);
      v43 = 4 * v58 + 4;
      if (v55 != v56)
      {
LABEL_47:
        v66 = v55 - 4 - v56;
        if (v66 >= 0x2C)
        {
          v67 = v55 - &v64[v57];
          v34 = v109;
          if (v67 >= 0x20)
          {
            v68 = (v66 >> 2) + 1;
            v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
            v70 = &v55[-v69];
            v65 = (_DWORD *)((char *)v65 - v69);
            v71 = &v64[4 * v58 - 16];
            v72 = v55 - 16;
            v73 = v68 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v74 = *(_OWORD *)v72;
              *(v71 - 1) = *((_OWORD *)v72 - 1);
              *v71 = v74;
              v71 -= 2;
              v72 -= 32;
              v73 -= 8;
            }
            while (v73);
            v55 = v70;
            if (v68 == (v68 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_56;
          }
        }
        else
        {
          v34 = v109;
        }
        do
        {
          v75 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *--v65 = v75;
        }
        while (v55 != v56);
LABEL_56:
        *(_QWORD *)v52 = v65;
        *((_QWORD *)v52 + 1) = v43;
        *((_QWORD *)v52 + 2) = &v64[4 * v63];
        if (v56)
          operator delete(v56);
        a3 = v61;
        a2 = v60;
        v33 = v110;
        goto LABEL_34;
      }
    }
    v34 = v109;
    goto LABEL_56;
  }
  v32 = 0.0;
LABEL_68:
  v91 = (float)*v106;
  *(float *)(a10 + 8) = v32;
  *(float *)(a10 + 12) = v32 / (float)a4;
  *(float *)(a10 + 4) = 100.0 - (float)((float)(v91 * 100.0) / (float)a4);
  *(_DWORD *)a10 = (int)(float)((float)a4 - v91);
  *(_DWORD *)(a10 + 16) = a4;
  v92 = (char *)v120;
  if (v120)
  {
    v93 = v121;
    v94 = v120;
    if (v121 != v120)
    {
      v95 = v121;
      do
      {
        v97 = (void *)*((_QWORD *)v95 - 3);
        v95 -= 24;
        v96 = v97;
        if (v97)
        {
          *((_QWORD *)v93 - 2) = v96;
          operator delete(v96);
        }
        v93 = v95;
      }
      while (v95 != v92);
      v94 = v120;
    }
    v121 = v92;
    operator delete(v94);
  }
  v98 = v123;
  if (v123)
  {
    v99 = v124;
    v100 = v123;
    if (v124 != v123)
    {
      v101 = v124;
      do
      {
        v103 = *(v101 - 3);
        v101 -= 3;
        v102 = v103;
        if (v103)
        {
          *(v99 - 2) = v102;
          operator delete(v102);
        }
        v99 = v101;
      }
      while (v101 != v98);
      v100 = v123;
    }
    v124 = v98;
    operator delete(v100);
  }
  operator delete(v106);
}

void sub_19C0AE164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;
  uint64_t v30;

  sub_19C0830E8(&a29);
  sub_19C0830E8((void **)(v30 - 168));
  operator delete(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0AE1D4(uint64_t a1, int a2, void **a3)
{
  bzero(*a3, 4 * *(int *)(a1 + 8));
  *((_DWORD *)*a3 + a2) = 1065353216;
  return 0;
}

uint64_t sub_19C0AE218(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 120);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 160))(*(_QWORD *)(v1 + 40));
  return result;
}

uint64_t sub_19C0AE234(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19C0AE264(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19C0AE294(uint64_t a1)
{
  void *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  char *v8;
  const char *v9;
  int v10;
  int v11;
  int v13;

  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 68))
    {
      v3 = (char *)operator new(0x28uLL);
      v4 = v3;
      strcpy(v3, "do-not-us-this-path,from-raw-buffer");
      v5 = *(unsigned __int8 *)(a1 + 39);
      if ((v5 & 0x80u) == 0)
        v6 = *(unsigned __int8 *)(a1 + 39);
      else
        v6 = *(_QWORD *)(a1 + 24);
      if (v6 != 35)
      {
LABEL_20:
        operator delete(v3);
LABEL_21:
        munmap(*(void **)a1, *(_QWORD *)(a1 + 8));
        goto LABEL_22;
      }
      v7 = (const void **)(a1 + 16);
      if ((v5 & 0x80) == 0)
      {
        if (!*(_BYTE *)(a1 + 39))
        {
LABEL_12:
          operator delete(v3);
          goto LABEL_22;
        }
        v8 = v3;
        while (*(unsigned __int8 *)v7 == *v8)
        {
          v7 = (const void **)((char *)v7 + 1);
          ++v8;
          if (!--v5)
            goto LABEL_12;
        }
        goto LABEL_20;
      }
      v13 = memcmp(*v7, v3, *(_QWORD *)(a1 + 24));
      operator delete(v4);
      if (v13)
        goto LABEL_21;
    }
    else
    {
      if (*(_DWORD *)(a1 + 64) != 2)
        goto LABEL_19;
      v9 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v9 = *(const char **)v9;
      v10 = open(v9, 2);
      v11 = v10;
      v2 = *(void **)a1;
      if ((v10 & 0x80000000) == 0)
      {
        write(v10, v2, *(_QWORD *)(a1 + 8));
        close(v11);
        v2 = *(void **)a1;
      }
      if (v2)
LABEL_19:
        operator delete[](v2);
    }
  }
LABEL_22:
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_19C0AE418(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_19C0AE420()
{
  return 1;
}

uint64_t sub_19C0AE428()
{
  return 1;
}

uint64_t sub_19C0AE438(uint64_t result, uint64_t a2)
{
  if (result != a2)
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_19C0AE44C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v4;

  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 56) = a3;
  *(_OWORD *)(a1 + 64) = xmmword_19C277530;
  *(_QWORD *)(a1 + 80) = 0x100000001;
  *(_DWORD *)(a1 + 88) = 32;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 48) = a2[4];
  *(_DWORD *)(a1 + 32) = a2[17];
  v4 = a2[12];
  if (v4 == 8)
  {
    sub_19C0C38FC(a1);
  }
  else if (v4 == 16)
  {
    sub_19C0AE4FC(a1);
  }
  else
  {
    sub_19C0D8CFC(a1);
  }
  return a1;
}

void sub_19C0AE4DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 112) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

#error "19C0AE4FC: too big function (funcsize=0)"

void sub_19C0C1CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  operator delete(v19);
  v22 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v22;
    operator delete(v22);
  }
  v23 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v23;
    operator delete(v23);
    v24 = (void *)STACK[0x278];
    if (!STACK[0x278])
    {
LABEL_5:
      v25 = (void *)STACK[0x290];
      if (!STACK[0x290])
      {
LABEL_10:
        v26 = (void *)STACK[0x2D8];
        if (STACK[0x2D8])
        {
          STACK[0x2E0] = (unint64_t)v26;
          operator delete(v26);
          v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0])
            goto LABEL_16;
        }
        else
        {
          v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0])
          {
LABEL_16:
            v28 = (void *)STACK[0x9C8];
            if (!STACK[0x9C8])
              goto LABEL_18;
            goto LABEL_17;
          }
        }
        STACK[0x2F8] = (unint64_t)v27;
        operator delete(v27);
        v28 = (void *)STACK[0x9C8];
        if (!STACK[0x9C8])
          goto LABEL_18;
LABEL_17:
        STACK[0x9D0] = (unint64_t)v28;
        operator delete(v28);
LABEL_18:
        v29 = *(void **)(v20 - 208);
        if (v29)
        {
          *(_QWORD *)(v20 - 200) = v29;
          operator delete(v29);
        }
        v30 = *(void **)(v20 - 136);
        if (v30)
        {
          *(_QWORD *)(v20 - 128) = v30;
          operator delete(v30);
        }
        operator delete(a18);
        operator delete(a19);
        _Unwind_Resume(a1);
      }
LABEL_9:
      STACK[0x298] = (unint64_t)v25;
      operator delete(v25);
      goto LABEL_10;
    }
  }
  else
  {
    v24 = (void *)STACK[0x278];
    if (!STACK[0x278])
      goto LABEL_5;
  }
  STACK[0x280] = (unint64_t)v24;
  operator delete(v24);
  v25 = (void *)STACK[0x290];
  if (!STACK[0x290])
    goto LABEL_10;
  goto LABEL_9;
}

#error "19C0C38FC: too big function (funcsize=0)"

void sub_19C0D70AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  operator delete(v19);
  v22 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v22;
    operator delete(v22);
  }
  v23 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v23;
    operator delete(v23);
    v24 = (void *)STACK[0x278];
    if (!STACK[0x278])
    {
LABEL_5:
      v25 = (void *)STACK[0x290];
      if (!STACK[0x290])
      {
LABEL_10:
        v26 = (void *)STACK[0x2D8];
        if (STACK[0x2D8])
        {
          STACK[0x2E0] = (unint64_t)v26;
          operator delete(v26);
          v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0])
            goto LABEL_16;
        }
        else
        {
          v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0])
          {
LABEL_16:
            v28 = (void *)STACK[0x9C8];
            if (!STACK[0x9C8])
              goto LABEL_18;
            goto LABEL_17;
          }
        }
        STACK[0x2F8] = (unint64_t)v27;
        operator delete(v27);
        v28 = (void *)STACK[0x9C8];
        if (!STACK[0x9C8])
          goto LABEL_18;
LABEL_17:
        STACK[0x9D0] = (unint64_t)v28;
        operator delete(v28);
LABEL_18:
        v29 = *(void **)(v20 - 208);
        if (v29)
        {
          *(_QWORD *)(v20 - 200) = v29;
          operator delete(v29);
        }
        v30 = *(void **)(v20 - 136);
        if (v30)
        {
          *(_QWORD *)(v20 - 128) = v30;
          operator delete(v30);
        }
        operator delete(a18);
        operator delete(a19);
        _Unwind_Resume(a1);
      }
LABEL_9:
      STACK[0x298] = (unint64_t)v25;
      operator delete(v25);
      goto LABEL_10;
    }
  }
  else
  {
    v24 = (void *)STACK[0x278];
    if (!STACK[0x278])
      goto LABEL_5;
  }
  STACK[0x280] = (unint64_t)v24;
  operator delete(v24);
  v25 = (void *)STACK[0x290];
  if (!STACK[0x290])
    goto LABEL_10;
  goto LABEL_9;
}

#error "19C0D8CFC: too big function (funcsize=0)"

void sub_19C0EC4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  operator delete(v19);
  v22 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v22;
    operator delete(v22);
  }
  v23 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v23;
    operator delete(v23);
    v24 = (void *)STACK[0x278];
    if (!STACK[0x278])
    {
LABEL_5:
      v25 = (void *)STACK[0x290];
      if (!STACK[0x290])
      {
LABEL_10:
        v26 = (void *)STACK[0x2D8];
        if (STACK[0x2D8])
        {
          STACK[0x2E0] = (unint64_t)v26;
          operator delete(v26);
          v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0])
            goto LABEL_16;
        }
        else
        {
          v27 = (void *)STACK[0x2F0];
          if (!STACK[0x2F0])
          {
LABEL_16:
            v28 = (void *)STACK[0x9C8];
            if (!STACK[0x9C8])
              goto LABEL_18;
            goto LABEL_17;
          }
        }
        STACK[0x2F8] = (unint64_t)v27;
        operator delete(v27);
        v28 = (void *)STACK[0x9C8];
        if (!STACK[0x9C8])
          goto LABEL_18;
LABEL_17:
        STACK[0x9D0] = (unint64_t)v28;
        operator delete(v28);
LABEL_18:
        v29 = *(void **)(v20 - 208);
        if (v29)
        {
          *(_QWORD *)(v20 - 200) = v29;
          operator delete(v29);
        }
        v30 = *(void **)(v20 - 136);
        if (v30)
        {
          *(_QWORD *)(v20 - 128) = v30;
          operator delete(v30);
        }
        operator delete(a18);
        operator delete(a19);
        _Unwind_Resume(a1);
      }
LABEL_9:
      STACK[0x298] = (unint64_t)v25;
      operator delete(v25);
      goto LABEL_10;
    }
  }
  else
  {
    v24 = (void *)STACK[0x278];
    if (!STACK[0x278])
      goto LABEL_5;
  }
  STACK[0x280] = (unint64_t)v24;
  operator delete(v24);
  v25 = (void *)STACK[0x290];
  if (!STACK[0x290])
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_19C0EE0FC(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  float v18;
  int v19;
  double v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  char *v60;
  void *v61[2];
  char v62;
  __int128 v63;
  char v64;
  __int128 v65;
  char v66;
  __int128 v67;
  char v68;
  __int128 __p;
  char v70;
  __int128 v71;
  char v72;
  __int128 v73;
  char v74;
  __int128 v75;
  char v76;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1FBC8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_BYTE *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_QWORD *)(a1 + 1688) = 0;
  sub_19C22CB44(a1 + 1704);
  sub_19C22CB44(a1 + 1776);
  sub_19C22CB44(a1 + 1848);
  sub_19C22CB44(a1 + 1920);
  sub_19C22CB44(a1 + 1992);
  sub_19C22CB44(a1 + 2064);
  sub_19C22CB44(a1 + 2136);
  sub_19C22CB44(a1 + 2208);
  sub_19C22CB44(a1 + 2280);
  sub_19C22CB44(a1 + 2352);
  sub_19C22CB44(a1 + 2424);
  *(_DWORD *)(a1 + 2496) = a5;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v14 = *(unsigned __int8 *)(a7 + 45);
  *(_BYTE *)(a1 + 2692) = v14 ^ 1;
  *(_BYTE *)(a1 + 2672) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2680) = a9;
  if (a9)
  {
    v15 = *(unsigned __int8 *)(a9 + 376);
    *(_DWORD *)(a1 + 2688) = *(_DWORD *)(a9 + 28);
    nullsub_171("LSTM constructor");
    v16 = v15 ^ 1;
    a8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2680) + 376);
    *(_BYTE *)(a1 + 40) = a8;
    v14 = *(unsigned __int8 *)(a7 + 45);
  }
  else
  {
    v16 = 1;
    *(_DWORD *)(a1 + 2688) = 1;
    *(_BYTE *)(a1 + 40) = a8;
  }
  *(_BYTE *)(a1 + 1696) = v14;
  *(_BYTE *)(a1 + 1697) = *(_BYTE *)(a7 + 46);
  v17 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v17[1];
  *(_DWORD *)(a1 + 744) = v17[2];
  if (!a8)
    v16 = 0;
  *(_DWORD *)(a1 + 48) = v16 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_BYTE *)(a1 + 2672) = 1;
    v14 = *(unsigned __int8 *)(a1 + 1696);
  }
  v18 = *(float *)(a7 + 16);
  v19 = *(_DWORD *)(a7 + 20);
  v20 = *(double *)(a7 + 24);
  *(float *)(a1 + 32) = v18;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_QWORD *)(a1 + 1632) = 0;
  if (!v14)
  {
    v21 = *(_DWORD *)(a7 + 32);
    if (v21 == 2)
    {
      v30 = operator new();
      *(_QWORD *)v30 = &unk_1E3D1E968;
      *(float *)(v30 + 24) = v18;
      *(_DWORD *)(v30 + 28) = v19;
      *(_DWORD *)(v30 + 32) = 841731191;
      v31 = v20;
      *(_WORD *)(v30 + 143) = 259;
      *(_QWORD *)(v30 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v30 + 8) = 0;
      *(_BYTE *)(v30 + 12) = 0;
      *(float *)(v30 + 36) = v31;
      *(_DWORD *)(v30 + 40) = v19;
      *(float *)(v30 + 44) = v31;
      *(_OWORD *)(v30 + 48) = 0u;
      *(_OWORD *)(v30 + 64) = 0u;
      *(_OWORD *)(v30 + 80) = 0u;
      *(_OWORD *)(v30 + 96) = 0u;
      *(_QWORD *)(v30 + 112) = 0;
      *(_QWORD *)(v30 + 120) = 4802391;
      *(_QWORD *)(a1 + 1552) = v30;
      v32 = operator new();
      *(_QWORD *)v32 = &unk_1E3D1E968;
      *(float *)(v32 + 24) = v18;
      *(_DWORD *)(v32 + 28) = v19;
      *(_DWORD *)(v32 + 32) = 841731191;
      *(_WORD *)(v32 + 143) = 259;
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v32 + 8) = 0;
      *(_BYTE *)(v32 + 12) = 0;
      *(float *)(v32 + 36) = v31;
      *(_DWORD *)(v32 + 40) = v19;
      *(float *)(v32 + 44) = v31;
      *(_OWORD *)(v32 + 48) = 0u;
      *(_OWORD *)(v32 + 64) = 0u;
      *(_OWORD *)(v32 + 80) = 0u;
      *(_OWORD *)(v32 + 96) = 0u;
      *(_QWORD *)(v32 + 112) = 0;
      *(_QWORD *)(v32 + 120) = 5195607;
      *(_QWORD *)(a1 + 1568) = v32;
      v33 = operator new();
      *(_QWORD *)v33 = &unk_1E3D1E968;
      *(float *)(v33 + 24) = v18;
      *(_DWORD *)(v33 + 28) = v19;
      *(_DWORD *)(v33 + 32) = 841731191;
      *(_WORD *)(v33 + 143) = 259;
      *(_QWORD *)(v33 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v33 + 8) = 0;
      *(_BYTE *)(v33 + 12) = 0;
      *(float *)(v33 + 36) = v31;
      *(_DWORD *)(v33 + 40) = v19;
      *(float *)(v33 + 44) = v31;
      *(_OWORD *)(v33 + 48) = 0u;
      *(_OWORD *)(v33 + 64) = 0u;
      *(_OWORD *)(v33 + 80) = 0u;
      *(_OWORD *)(v33 + 96) = 0u;
      *(_QWORD *)(v33 + 112) = 0;
      *(_QWORD *)(v33 + 120) = 4605783;
      *(_QWORD *)(a1 + 1560) = v33;
      v34 = operator new();
      *(_QWORD *)v34 = &unk_1E3D1E968;
      *(float *)(v34 + 24) = v18;
      *(_DWORD *)(v34 + 28) = v19;
      *(_DWORD *)(v34 + 32) = 841731191;
      *(_WORD *)(v34 + 143) = 259;
      *(_QWORD *)(v34 + 16) = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v34 + 8) = 0;
      *(_BYTE *)(v34 + 12) = 0;
      *(float *)(v34 + 36) = v31;
      *(_DWORD *)(v34 + 40) = v19;
      *(float *)(v34 + 44) = v31;
      *(_OWORD *)(v34 + 48) = 0u;
      *(_OWORD *)(v34 + 64) = 0u;
      *(_OWORD *)(v34 + 80) = 0u;
      *(_OWORD *)(v34 + 96) = 0u;
      *(_QWORD *)(v34 + 112) = 0;
      *(_QWORD *)(v34 + 120) = 4801367;
      *(_QWORD *)(a1 + 1576) = v34;
      v35 = operator new();
      v36 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v35 = &unk_1E3D1E968;
      *(float *)(v35 + 24) = v18;
      *(_DWORD *)(v35 + 28) = v19;
      *(_DWORD *)(v35 + 32) = 841731191;
      *(_DWORD *)(v35 + 16) = v36;
      *(_DWORD *)(v35 + 20) = v36;
      *(_WORD *)(v35 + 143) = 260;
      *(_DWORD *)(v35 + 8) = 0;
      *(_BYTE *)(v35 + 12) = 0;
      *(float *)(v35 + 36) = v31;
      *(_DWORD *)(v35 + 40) = v19;
      *(float *)(v35 + 44) = v31;
      *(_OWORD *)(v35 + 48) = 0u;
      *(_OWORD *)(v35 + 64) = 0u;
      *(_OWORD *)(v35 + 80) = 0u;
      *(_OWORD *)(v35 + 96) = 0u;
      *(_QWORD *)(v35 + 112) = 0;
      *(_QWORD *)(v35 + 120) = 843663191;
      *(_QWORD *)(a1 + 1584) = v35;
      v37 = operator new();
      v38 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v37 = &unk_1E3D1E968;
      *(float *)(v37 + 24) = v18;
      *(_DWORD *)(v37 + 28) = v19;
      *(_DWORD *)(v37 + 32) = 841731191;
      *(_WORD *)(v37 + 143) = 260;
      *(_DWORD *)(v37 + 16) = v38;
      *(_DWORD *)(v37 + 20) = v38;
      *(_DWORD *)(v37 + 8) = 0;
      *(_BYTE *)(v37 + 12) = 0;
      *(float *)(v37 + 36) = v31;
      *(_DWORD *)(v37 + 40) = v19;
      *(float *)(v37 + 44) = v31;
      *(_OWORD *)(v37 + 48) = 0u;
      *(_OWORD *)(v37 + 64) = 0u;
      *(_OWORD *)(v37 + 80) = 0u;
      *(_OWORD *)(v37 + 96) = 0u;
      *(_QWORD *)(v37 + 112) = 0;
      *(_QWORD *)(v37 + 120) = 844056407;
      *(_QWORD *)(a1 + 1600) = v37;
      v39 = operator new();
      v40 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v39 = &unk_1E3D1E968;
      *(float *)(v39 + 24) = v18;
      *(_DWORD *)(v39 + 28) = v19;
      *(_DWORD *)(v39 + 32) = 841731191;
      *(_DWORD *)(v39 + 16) = v40;
      *(_DWORD *)(v39 + 20) = v40;
      *(_WORD *)(v39 + 143) = 260;
      *(_DWORD *)(v39 + 8) = 0;
      *(_BYTE *)(v39 + 12) = 0;
      *(float *)(v39 + 36) = v31;
      *(_DWORD *)(v39 + 40) = v19;
      *(float *)(v39 + 44) = v31;
      *(_OWORD *)(v39 + 48) = 0u;
      *(_OWORD *)(v39 + 64) = 0u;
      *(_OWORD *)(v39 + 80) = 0u;
      *(_OWORD *)(v39 + 96) = 0u;
      *(_QWORD *)(v39 + 112) = 0;
      *(_QWORD *)(v39 + 120) = 843466583;
      *(_QWORD *)(a1 + 1592) = v39;
      v41 = operator new();
      v42 = *(_DWORD *)(a1 + 52);
      *(_QWORD *)v41 = &unk_1E3D1E968;
      *(float *)(v41 + 24) = v18;
      *(_DWORD *)(v41 + 28) = v19;
      *(_DWORD *)(v41 + 32) = 841731191;
      *(_WORD *)(v41 + 143) = 260;
      *(_DWORD *)(v41 + 16) = v42;
      *(_DWORD *)(v41 + 20) = v42;
      *(_DWORD *)(v41 + 8) = 0;
      *(_BYTE *)(v41 + 12) = 0;
      *(float *)(v41 + 36) = v31;
      *(_DWORD *)(v41 + 40) = v19;
      *(float *)(v41 + 44) = v31;
      *(_OWORD *)(v41 + 48) = 0u;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_QWORD *)(v41 + 112) = 0;
      *(_QWORD *)(v41 + 120) = 843662167;
    }
    else
    {
      if (v21 != 1)
      {
        if (!v21)
        {
          v22 = operator new();
          v76 = 3;
          LODWORD(v75) = 4802391;
          sub_19C0FCB2C(v22, &v75, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1552) = v22;
          if (v76 < 0)
            operator delete((void *)v75);
          v23 = operator new();
          v74 = 3;
          LODWORD(v73) = 5195607;
          sub_19C0FCB2C(v23, &v73, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1560) = v23;
          if (v74 < 0)
            operator delete((void *)v73);
          v24 = operator new();
          v72 = 3;
          LODWORD(v71) = 4605783;
          sub_19C0FCB2C(v24, &v71, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1568) = v24;
          if (v72 < 0)
            operator delete((void *)v71);
          v25 = operator new();
          v70 = 3;
          LODWORD(__p) = 4801367;
          sub_19C0FCB2C(v25, &__p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1, v18);
          *(_QWORD *)(a1 + 1576) = v25;
          if (v70 < 0)
            operator delete((void *)__p);
          v26 = operator new();
          v68 = 3;
          LODWORD(v67) = 4802391;
          sub_19C0FCB2C(v26, &v67, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1584) = v26;
          if (v68 < 0)
            operator delete((void *)v67);
          v27 = operator new();
          v66 = 3;
          LODWORD(v65) = 4605783;
          sub_19C0FCB2C(v27, &v65, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1592) = v27;
          if (v66 < 0)
            operator delete((void *)v65);
          v28 = operator new();
          v64 = 3;
          LODWORD(v63) = 5195607;
          sub_19C0FCB2C(v28, &v63, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1600) = v28;
          if (v64 < 0)
            operator delete((void *)v63);
          v29 = operator new();
          v62 = 4;
          strcpy((char *)v61, "WCI2");
          sub_19C0FCB2C(v29, (__int128 *)v61, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1, v18);
          *(_QWORD *)(a1 + 1608) = v29;
          if (v62 < 0)
            operator delete(v61[0]);
        }
        goto LABEL_31;
      }
      v43 = operator new();
      *(float *)(v43 + 20) = v18;
      *(_DWORD *)(v43 + 24) = v19;
      *(_DWORD *)(v43 + 28) = 841731191;
      *(double *)(v43 + 32) = v20;
      *(_WORD *)(v43 + 159) = 259;
      v44 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v43 = &unk_1E3D1E270;
      *(_QWORD *)(v43 + 8) = 0;
      *(_BYTE *)(v43 + 16) = 0;
      *(_DWORD *)(v43 + 40) = v19;
      *(double *)(v43 + 48) = v20;
      *(_QWORD *)(v43 + 56) = v44;
      *(_DWORD *)(v43 + 164) = 0;
      *(_OWORD *)(v43 + 64) = 0u;
      *(_OWORD *)(v43 + 80) = 0u;
      *(_OWORD *)(v43 + 96) = 0u;
      *(_OWORD *)(v43 + 112) = 0u;
      *(_QWORD *)(v43 + 128) = 0;
      *(_QWORD *)(v43 + 136) = 4802391;
      *(_QWORD *)(a1 + 1552) = v43;
      v45 = operator new();
      *(float *)(v45 + 20) = v18;
      *(_DWORD *)(v45 + 24) = v19;
      *(_DWORD *)(v45 + 28) = 841731191;
      *(double *)(v45 + 32) = v20;
      *(_WORD *)(v45 + 159) = 259;
      v46 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v45 = &unk_1E3D1E270;
      *(_QWORD *)(v45 + 8) = 0;
      *(_BYTE *)(v45 + 16) = 0;
      *(_DWORD *)(v45 + 40) = v19;
      *(double *)(v45 + 48) = v20;
      *(_QWORD *)(v45 + 56) = v46;
      *(_DWORD *)(v45 + 164) = 0;
      *(_OWORD *)(v45 + 64) = 0u;
      *(_OWORD *)(v45 + 80) = 0u;
      *(_OWORD *)(v45 + 96) = 0u;
      *(_OWORD *)(v45 + 112) = 0u;
      *(_QWORD *)(v45 + 128) = 0;
      *(_QWORD *)(v45 + 136) = 5195607;
      *(_QWORD *)(a1 + 1568) = v45;
      v47 = operator new();
      *(float *)(v47 + 20) = v18;
      *(_DWORD *)(v47 + 24) = v19;
      *(_DWORD *)(v47 + 28) = 841731191;
      *(double *)(v47 + 32) = v20;
      *(_WORD *)(v47 + 159) = 259;
      v48 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v47 = &unk_1E3D1E270;
      *(_QWORD *)(v47 + 8) = 0;
      *(_BYTE *)(v47 + 16) = 0;
      *(_DWORD *)(v47 + 40) = v19;
      *(double *)(v47 + 48) = v20;
      *(_QWORD *)(v47 + 56) = v48;
      *(_DWORD *)(v47 + 164) = 0;
      *(_OWORD *)(v47 + 64) = 0u;
      *(_OWORD *)(v47 + 80) = 0u;
      *(_OWORD *)(v47 + 96) = 0u;
      *(_OWORD *)(v47 + 112) = 0u;
      *(_QWORD *)(v47 + 128) = 0;
      *(_QWORD *)(v47 + 136) = 4605783;
      *(_QWORD *)(a1 + 1560) = v47;
      v49 = operator new();
      *(float *)(v49 + 20) = v18;
      *(_DWORD *)(v49 + 24) = v19;
      *(_DWORD *)(v49 + 28) = 841731191;
      *(double *)(v49 + 32) = v20;
      *(_WORD *)(v49 + 159) = 259;
      v50 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)v49 = &unk_1E3D1E270;
      *(_QWORD *)(v49 + 8) = 0;
      *(_BYTE *)(v49 + 16) = 0;
      *(_DWORD *)(v49 + 40) = v19;
      *(double *)(v49 + 48) = v20;
      *(_QWORD *)(v49 + 56) = v50;
      *(_DWORD *)(v49 + 164) = 0;
      *(_OWORD *)(v49 + 64) = 0u;
      *(_OWORD *)(v49 + 80) = 0u;
      *(_OWORD *)(v49 + 96) = 0u;
      *(_OWORD *)(v49 + 112) = 0u;
      *(_QWORD *)(v49 + 128) = 0;
      *(_QWORD *)(v49 + 136) = 4801367;
      *(_QWORD *)(a1 + 1576) = v49;
      v51 = operator new();
      v52 = *(_DWORD *)(a1 + 52);
      *(float *)(v51 + 20) = v18;
      *(_DWORD *)(v51 + 24) = v19;
      *(_DWORD *)(v51 + 28) = 841731191;
      *(double *)(v51 + 32) = v20;
      *(_DWORD *)(v51 + 56) = v52;
      *(_DWORD *)(v51 + 60) = v52;
      *(_WORD *)(v51 + 159) = 260;
      *(_QWORD *)v51 = &unk_1E3D1E270;
      *(_QWORD *)(v51 + 8) = 0;
      *(_BYTE *)(v51 + 16) = 0;
      *(_DWORD *)(v51 + 40) = v19;
      *(double *)(v51 + 48) = v20;
      *(_DWORD *)(v51 + 164) = 0;
      *(_OWORD *)(v51 + 64) = 0u;
      *(_OWORD *)(v51 + 80) = 0u;
      *(_OWORD *)(v51 + 96) = 0u;
      *(_OWORD *)(v51 + 112) = 0u;
      *(_QWORD *)(v51 + 128) = 0;
      *(_QWORD *)(v51 + 136) = 843663191;
      *(_QWORD *)(a1 + 1584) = v51;
      v53 = operator new();
      v54 = *(_DWORD *)(a1 + 52);
      *(float *)(v53 + 20) = v18;
      *(_DWORD *)(v53 + 24) = v19;
      *(_DWORD *)(v53 + 28) = 841731191;
      *(double *)(v53 + 32) = v20;
      *(_WORD *)(v53 + 159) = 260;
      *(_DWORD *)(v53 + 56) = v54;
      *(_DWORD *)(v53 + 60) = v54;
      *(_QWORD *)v53 = &unk_1E3D1E270;
      *(_QWORD *)(v53 + 8) = 0;
      *(_BYTE *)(v53 + 16) = 0;
      *(_DWORD *)(v53 + 40) = v19;
      *(double *)(v53 + 48) = v20;
      *(_DWORD *)(v53 + 164) = 0;
      *(_OWORD *)(v53 + 64) = 0u;
      *(_OWORD *)(v53 + 80) = 0u;
      *(_OWORD *)(v53 + 96) = 0u;
      *(_OWORD *)(v53 + 112) = 0u;
      *(_QWORD *)(v53 + 128) = 0;
      *(_QWORD *)(v53 + 136) = 844056407;
      *(_QWORD *)(a1 + 1600) = v53;
      v55 = operator new();
      v56 = *(_DWORD *)(a1 + 52);
      *(float *)(v55 + 20) = v18;
      *(_DWORD *)(v55 + 24) = v19;
      *(_DWORD *)(v55 + 28) = 841731191;
      *(double *)(v55 + 32) = v20;
      *(_DWORD *)(v55 + 56) = v56;
      *(_DWORD *)(v55 + 60) = v56;
      *(_WORD *)(v55 + 159) = 260;
      *(_QWORD *)v55 = &unk_1E3D1E270;
      *(_QWORD *)(v55 + 8) = 0;
      *(_BYTE *)(v55 + 16) = 0;
      *(_DWORD *)(v55 + 40) = v19;
      *(double *)(v55 + 48) = v20;
      *(_DWORD *)(v55 + 164) = 0;
      *(_OWORD *)(v55 + 64) = 0u;
      *(_OWORD *)(v55 + 80) = 0u;
      *(_OWORD *)(v55 + 96) = 0u;
      *(_OWORD *)(v55 + 112) = 0u;
      *(_QWORD *)(v55 + 128) = 0;
      *(_QWORD *)(v55 + 136) = 843466583;
      *(_QWORD *)(a1 + 1592) = v55;
      v41 = operator new();
      v57 = *(_DWORD *)(a1 + 52);
      *(float *)(v41 + 20) = v18;
      *(_DWORD *)(v41 + 24) = v19;
      *(_DWORD *)(v41 + 28) = 841731191;
      *(double *)(v41 + 32) = v20;
      *(_WORD *)(v41 + 159) = 260;
      *(_DWORD *)(v41 + 56) = v57;
      *(_DWORD *)(v41 + 60) = v57;
      *(_QWORD *)v41 = &unk_1E3D1E270;
      *(_QWORD *)(v41 + 8) = 0;
      *(_BYTE *)(v41 + 16) = 0;
      *(_DWORD *)(v41 + 40) = v19;
      *(double *)(v41 + 48) = v20;
      *(_DWORD *)(v41 + 164) = 0;
      *(_OWORD *)(v41 + 64) = 0u;
      *(_OWORD *)(v41 + 80) = 0u;
      *(_OWORD *)(v41 + 96) = 0u;
      *(_OWORD *)(v41 + 112) = 0u;
      *(_QWORD *)(v41 + 128) = 0;
      *(_QWORD *)(v41 + 136) = 843662167;
    }
    *(_QWORD *)(a1 + 1608) = v41;
  }
LABEL_31:
  v60 = (char *)operator new(0x20uLL);
  strcpy(v60, "LSTM alloc, from constructor");
  sub_19C0EF2EC(a1);
  operator delete(v60);
  return a1;
}

void sub_19C0EEDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, _QWORD *a16, _QWORD *a17, _QWORD *a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void **v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void **v97;
  void *v98;

  if (a32 < 0)
    operator delete(__p);
  operator delete(v57);
  v97 = (void **)(v56 + 328);
  v98 = (void *)v56[331];
  if (v98)
  {
    v56[332] = v98;
    operator delete(v98);
    v64 = *v97;
    if (!*v97)
    {
LABEL_6:
      sub_19C22CB78(v62);
      sub_19C22CB78(v58);
      sub_19C22CB78(a10);
      sub_19C22CB78(a11);
      sub_19C22CB78(a12);
      sub_19C22CB78(a13);
      sub_19C22CB78(a20);
      sub_19C22CB78(v61);
      sub_19C22CB78(v60);
      sub_19C22CB78(v59);
      sub_19C22CB78(a14);
      sub_19C101AC4(a16);
      sub_19C101AC4(a17);
      sub_19C101AC4(a15);
      sub_19C101AC4(a18);
      v65 = (void *)v56[120];
      if (v65)
      {
        v56[121] = v65;
        operator delete(v65);
        v66 = (void *)v56[117];
        if (!v66)
        {
LABEL_8:
          v67 = (void *)v56[114];
          if (!v67)
            goto LABEL_9;
          goto LABEL_40;
        }
      }
      else
      {
        v66 = (void *)v56[117];
        if (!v66)
          goto LABEL_8;
      }
      v56[118] = v66;
      operator delete(v66);
      v67 = (void *)v56[114];
      if (!v67)
      {
LABEL_9:
        v68 = (void *)v56[111];
        if (!v68)
          goto LABEL_10;
        goto LABEL_41;
      }
LABEL_40:
      v56[115] = v67;
      operator delete(v67);
      v68 = (void *)v56[111];
      if (!v68)
      {
LABEL_10:
        v69 = (void *)v56[108];
        if (!v69)
          goto LABEL_11;
        goto LABEL_42;
      }
LABEL_41:
      v56[112] = v68;
      operator delete(v68);
      v69 = (void *)v56[108];
      if (!v69)
      {
LABEL_11:
        v70 = (void *)v56[105];
        if (!v70)
          goto LABEL_12;
        goto LABEL_43;
      }
LABEL_42:
      v56[109] = v69;
      operator delete(v69);
      v70 = (void *)v56[105];
      if (!v70)
      {
LABEL_12:
        v71 = (void *)v56[102];
        if (!v71)
          goto LABEL_13;
        goto LABEL_44;
      }
LABEL_43:
      v56[106] = v70;
      operator delete(v70);
      v71 = (void *)v56[102];
      if (!v71)
      {
LABEL_13:
        v72 = (void *)v56[99];
        if (!v72)
          goto LABEL_14;
        goto LABEL_45;
      }
LABEL_44:
      v56[103] = v71;
      operator delete(v71);
      v72 = (void *)v56[99];
      if (!v72)
      {
LABEL_14:
        v73 = (void *)v56[89];
        if (!v73)
          goto LABEL_15;
        goto LABEL_46;
      }
LABEL_45:
      v56[100] = v72;
      operator delete(v72);
      v73 = (void *)v56[89];
      if (!v73)
      {
LABEL_15:
        v74 = (void *)v56[86];
        if (!v74)
          goto LABEL_16;
        goto LABEL_47;
      }
LABEL_46:
      v56[90] = v73;
      operator delete(v73);
      v74 = (void *)v56[86];
      if (!v74)
      {
LABEL_16:
        v75 = (void *)v56[83];
        if (!v75)
          goto LABEL_17;
        goto LABEL_48;
      }
LABEL_47:
      v56[87] = v74;
      operator delete(v74);
      v75 = (void *)v56[83];
      if (!v75)
      {
LABEL_17:
        v76 = (void *)v56[80];
        if (!v76)
          goto LABEL_18;
        goto LABEL_49;
      }
LABEL_48:
      v56[84] = v75;
      operator delete(v75);
      v76 = (void *)v56[80];
      if (!v76)
      {
LABEL_18:
        v77 = (void *)v56[77];
        if (!v77)
          goto LABEL_19;
        goto LABEL_50;
      }
LABEL_49:
      v56[81] = v76;
      operator delete(v76);
      v77 = (void *)v56[77];
      if (!v77)
      {
LABEL_19:
        v78 = (void *)v56[74];
        if (!v78)
          goto LABEL_20;
        goto LABEL_51;
      }
LABEL_50:
      v56[78] = v77;
      operator delete(v77);
      v78 = (void *)v56[74];
      if (!v78)
      {
LABEL_20:
        v79 = (void *)v56[71];
        if (!v79)
          goto LABEL_21;
        goto LABEL_52;
      }
LABEL_51:
      v56[75] = v78;
      operator delete(v78);
      v79 = (void *)v56[71];
      if (!v79)
      {
LABEL_21:
        v80 = (void *)v56[68];
        if (!v80)
          goto LABEL_22;
        goto LABEL_53;
      }
LABEL_52:
      v56[72] = v79;
      operator delete(v79);
      v80 = (void *)v56[68];
      if (!v80)
      {
LABEL_22:
        v81 = (void *)v56[65];
        if (!v81)
          goto LABEL_23;
        goto LABEL_54;
      }
LABEL_53:
      v56[69] = v80;
      operator delete(v80);
      v81 = (void *)v56[65];
      if (!v81)
      {
LABEL_23:
        v82 = (void *)v56[62];
        if (!v82)
          goto LABEL_24;
        goto LABEL_55;
      }
LABEL_54:
      v56[66] = v81;
      operator delete(v81);
      v82 = (void *)v56[62];
      if (!v82)
      {
LABEL_24:
        v83 = (void *)v56[59];
        if (!v83)
          goto LABEL_25;
        goto LABEL_56;
      }
LABEL_55:
      v56[63] = v82;
      operator delete(v82);
      v83 = (void *)v56[59];
      if (!v83)
      {
LABEL_25:
        v84 = (void *)v56[56];
        if (!v84)
          goto LABEL_26;
        goto LABEL_57;
      }
LABEL_56:
      v56[60] = v83;
      operator delete(v83);
      v84 = (void *)v56[56];
      if (!v84)
      {
LABEL_26:
        v85 = (void *)v56[53];
        if (!v85)
          goto LABEL_27;
        goto LABEL_58;
      }
LABEL_57:
      v56[57] = v84;
      operator delete(v84);
      v85 = (void *)v56[53];
      if (!v85)
      {
LABEL_27:
        v86 = (void *)v56[50];
        if (!v86)
          goto LABEL_28;
        goto LABEL_59;
      }
LABEL_58:
      v56[54] = v85;
      operator delete(v85);
      v86 = (void *)v56[50];
      if (!v86)
      {
LABEL_28:
        v87 = (void **)(v56 + 26);
        v88 = (void *)v56[47];
        if (!v88)
          goto LABEL_29;
        goto LABEL_60;
      }
LABEL_59:
      v56[51] = v86;
      operator delete(v86);
      v87 = (void **)(v56 + 26);
      v88 = (void *)v56[47];
      if (!v88)
      {
LABEL_29:
        v89 = (void *)v56[44];
        if (!v89)
          goto LABEL_30;
        goto LABEL_61;
      }
LABEL_60:
      v56[48] = v88;
      operator delete(v88);
      v89 = (void *)v56[44];
      if (!v89)
      {
LABEL_30:
        sub_19C0830E8(v87);
        v90 = (void *)v56[23];
        if (!v90)
          goto LABEL_31;
        goto LABEL_62;
      }
LABEL_61:
      v56[45] = v89;
      operator delete(v89);
      sub_19C0830E8(v87);
      v90 = (void *)v56[23];
      if (!v90)
      {
LABEL_31:
        v91 = (void *)v56[20];
        if (!v91)
          goto LABEL_32;
        goto LABEL_63;
      }
LABEL_62:
      v56[24] = v90;
      operator delete(v90);
      v91 = (void *)v56[20];
      if (!v91)
      {
LABEL_32:
        v92 = (void *)v56[17];
        if (!v92)
          goto LABEL_33;
        goto LABEL_64;
      }
LABEL_63:
      v56[21] = v91;
      operator delete(v91);
      v92 = (void *)v56[17];
      if (!v92)
      {
LABEL_33:
        v93 = (void *)v56[14];
        if (!v93)
          goto LABEL_34;
        goto LABEL_65;
      }
LABEL_64:
      v56[18] = v92;
      operator delete(v92);
      v93 = (void *)v56[14];
      if (!v93)
      {
LABEL_34:
        v94 = (void *)v56[11];
        if (!v94)
          goto LABEL_35;
        goto LABEL_66;
      }
LABEL_65:
      v56[15] = v93;
      operator delete(v93);
      v94 = (void *)v56[11];
      if (!v94)
      {
LABEL_35:
        v95 = *a19;
        if (!*a19)
          goto LABEL_36;
        goto LABEL_67;
      }
LABEL_66:
      v56[12] = v94;
      operator delete(v94);
      v95 = *a19;
      if (!*a19)
      {
LABEL_36:
        *v56 = &unk_1E3D1E2D8;
        v96 = (void *)v56[1];
        if (!v96)
          goto LABEL_37;
        goto LABEL_68;
      }
LABEL_67:
      v56[9] = v95;
      operator delete(v95);
      *v56 = &unk_1E3D1E2D8;
      v96 = (void *)v56[1];
      if (!v96)
LABEL_37:
        _Unwind_Resume(a1);
LABEL_68:
      v56[2] = v96;
      operator delete(v96);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v64 = *v97;
    if (!*v97)
      goto LABEL_6;
  }
  v56[329] = v64;
  operator delete(v64);
  goto LABEL_6;
}

void sub_19C0EF2EC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  char **v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  _QWORD *v116;
  char *v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  _QWORD *v141;
  char *v142;
  char *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _OWORD *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  _QWORD *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _OWORD *v173;
  char *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  BOOL v187;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  int v195;
  uint64_t v196;
  char **v197;
  char *v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  char **v203;
  char *v204;
  unint64_t v205;
  _QWORD *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _BYTE *v213;
  _QWORD *v214;
  char *v215;
  char *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _BYTE *v224;
  _QWORD *v225;
  char *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  _OWORD *v231;
  char *v232;
  uint64_t v233;
  __int128 v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  _QWORD *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  _QWORD *v248;
  char *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  _OWORD *v254;
  char *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  char *v261;
  unint64_t v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _BYTE *v270;
  _QWORD *v271;
  char *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  _OWORD *v277;
  char *v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  _QWORD *v282;
  int v283;
  uint64_t v284;
  char **v285;
  char *v286;
  unint64_t v287;
  _QWORD *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _BYTE *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  _OWORD *v300;
  char *v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  char *v307;
  unint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  _BYTE *v316;
  _QWORD *v317;
  char *v318;
  char *v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  _OWORD *v325;
  char *v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  char *v332;
  unint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  _BYTE *v341;
  _QWORD *v342;
  char *v343;
  char *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  _OWORD *v350;
  char *v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  _BYTE *v366;
  _QWORD *v367;
  char *v368;
  char *v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  _OWORD *v375;
  char *v376;
  uint64_t v377;
  __int128 v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  _BYTE *v391;
  _QWORD *v392;
  char *v393;
  char *v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  _OWORD *v400;
  char *v401;
  uint64_t v402;
  __int128 v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  char *v407;
  unint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  _BYTE *v416;
  _QWORD *v417;
  char *v418;
  char *v419;
  unint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  _OWORD *v425;
  char *v426;
  uint64_t v427;
  __int128 v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  char *v432;
  unint64_t v433;
  uint64_t v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  _BYTE *v441;
  _QWORD *v442;
  char *v443;
  char *v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  _OWORD *v450;
  char *v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  char *v457;
  unint64_t v458;
  _QWORD *v459;
  char *v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  _BYTE *v466;
  _QWORD *v467;
  char *v468;
  unint64_t v469;
  char **v470;
  uint64_t v471;
  uint64_t v472;
  char *v473;
  _OWORD *v474;
  char *v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  _QWORD *v479;
  char *v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  _OWORD *v485;
  char *v486;
  uint64_t v487;
  __int128 v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  char *v492;
  unint64_t v493;
  _QWORD *v494;
  char *v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  uint64_t v499;
  unint64_t v500;
  _BYTE *v501;
  _QWORD *v502;
  char *v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  char *v507;
  _OWORD *v508;
  char *v509;
  uint64_t v510;
  __int128 v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  char *v515;
  unint64_t v516;
  _QWORD *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  _BYTE *v524;
  _QWORD *v525;
  char *v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  char *v530;
  _OWORD *v531;
  char *v532;
  uint64_t v533;
  __int128 v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  char *v538;
  unint64_t v539;
  _QWORD *v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  _BYTE *v547;
  _QWORD *v548;
  char *v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  char *v553;
  _OWORD *v554;
  char *v555;
  uint64_t v556;
  __int128 v557;
  uint64_t v558;
  uint64_t v559;
  void *v560;
  void *v561;
  char *v562;
  unint64_t v563;
  uint64_t v564;
  char *v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  _BYTE *v571;
  _QWORD *v572;
  char *v573;
  char *v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  char *v578;
  _OWORD *v579;
  char *v580;
  uint64_t v581;
  __int128 v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  void *v586;
  char *v587;
  unint64_t v588;
  uint64_t v589;
  char *v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  _BYTE *v596;
  _QWORD *v597;
  char *v598;
  char *v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  _OWORD *v604;
  char *v605;
  uint64_t v606;
  __int128 v607;
  uint64_t v608;
  int v609;
  void *v610;
  char *v611;
  unint64_t v612;
  uint64_t v613;
  void **p_vtable;
  char *v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  unint64_t v620;
  _BYTE *v621;
  _QWORD *v622;
  char *v623;
  char *v624;
  unint64_t v625;
  uint64_t v626;
  uint64_t v627;
  char *v628;
  _OWORD *v629;
  char *v630;
  uint64_t v631;
  __int128 v632;
  uint64_t v633;
  int v634;
  int v635;
  void *v636;
  char *v637;
  unint64_t v638;
  uint64_t v639;
  char *v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  _BYTE *v646;
  _QWORD *v647;
  char *v648;
  char *v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  char *v653;
  _OWORD *v654;
  char *v655;
  uint64_t v656;
  __int128 v657;
  uint64_t v658;
  int v659;
  void *v660;
  char *v661;
  unint64_t v662;
  uint64_t v663;
  char *v664;
  uint64_t v665;
  uint64_t v666;
  unint64_t v667;
  uint64_t v668;
  unint64_t v669;
  _BYTE *v670;
  _QWORD *v671;
  char *v672;
  char *v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  char *v677;
  _OWORD *v678;
  char *v679;
  uint64_t v680;
  __int128 v681;
  uint64_t v682;
  int v683;
  void *v684;
  char *v685;
  unint64_t v686;
  uint64_t v687;
  char *v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v693;
  _BYTE *v694;
  _QWORD *v695;
  char *v696;
  char *v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  char *v701;
  _OWORD *v702;
  char *v703;
  uint64_t v704;
  __int128 v705;
  uint64_t v706;
  int v707;
  void *v708;
  char *v709;
  unint64_t v710;
  char *v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t v715;
  unint64_t v716;
  _BYTE *v717;
  _QWORD *v718;
  char *v719;
  uint64_t v720;
  char *v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  char *v725;
  _OWORD *v726;
  char *v727;
  uint64_t v728;
  __int128 v729;
  uint64_t v730;
  unsigned int v731;
  void *v732;
  char *v733;
  unint64_t v734;
  uint64_t v735;
  char *v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  unint64_t v741;
  _BYTE *v742;
  _QWORD *v743;
  char *v744;
  char *v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t v748;
  char *v749;
  _OWORD *v750;
  char *v751;
  uint64_t v752;
  __int128 v753;
  uint64_t v754;
  unsigned int v755;
  void *v756;
  char *v757;
  unint64_t v758;
  uint64_t v759;
  char *v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  _BYTE *v766;
  _QWORD *v767;
  char *v768;
  char *v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  char *v773;
  _OWORD *v774;
  char *v775;
  uint64_t v776;
  __int128 v777;
  uint64_t v778;
  unsigned int v779;
  void *v780;
  char *v781;
  unint64_t v782;
  uint64_t v783;
  char *v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  unint64_t v789;
  _BYTE *v790;
  _QWORD *v791;
  char *v792;
  char *v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  char *v797;
  _OWORD *v798;
  char *v799;
  uint64_t v800;
  __int128 v801;
  uint64_t v802;
  unsigned int v803;
  void *v804;
  char *v805;
  unint64_t v806;
  uint64_t v807;
  char *v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  unint64_t v813;
  _BYTE *v814;
  _QWORD *v815;
  char *v816;
  char *v817;
  unint64_t v818;
  uint64_t v819;
  uint64_t v820;
  char *v821;
  _OWORD *v822;
  char *v823;
  uint64_t v824;
  __int128 v825;
  uint64_t v826;
  uint64_t v827;
  void *v828;
  void *v829;
  char *v830;
  unint64_t v831;
  uint64_t v832;
  char *v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  unint64_t v838;
  _BYTE *v839;
  _QWORD *v840;
  char *v841;
  char *v842;
  unint64_t v843;
  uint64_t v844;
  uint64_t v845;
  char *v846;
  _OWORD *v847;
  char *v848;
  uint64_t v849;
  __int128 v850;
  uint64_t v851;
  uint64_t v852;
  void *v853;
  void *v854;
  char *v855;
  unint64_t v856;
  uint64_t v857;
  char *v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  unint64_t v863;
  _BYTE *v864;
  _QWORD *v865;
  char *v866;
  char *v867;
  unint64_t v868;
  uint64_t v869;
  uint64_t v870;
  char *v871;
  _OWORD *v872;
  char *v873;
  uint64_t v874;
  __int128 v875;
  uint64_t v876;
  uint64_t v877;
  void *v878;
  void *v879;
  char *v880;
  unint64_t v881;
  uint64_t v882;
  char *v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  uint64_t v887;
  unint64_t v888;
  _BYTE *v889;
  _QWORD *v890;
  char *v891;
  char *v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  char *v896;
  _OWORD *v897;
  char *v898;
  uint64_t v899;
  __int128 v900;
  uint64_t v901;
  unint64_t v902;
  unint64_t v903;
  uint64_t v904;
  unint64_t v905;
  uint64_t v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t v909;
  uint64_t v910;
  unint64_t v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  void *v922;
  void *v923;
  unint64_t v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  unint64_t v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  unint64_t v936;
  uint64_t v937;
  unint64_t v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  unint64_t v944;
  uint64_t v945;
  unint64_t v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  unint64_t v950;
  uint64_t v951;
  unint64_t v952;
  uint64_t v953;
  unint64_t v954;
  uint64_t v955;
  unint64_t v956;
  unint64_t v957;
  uint64_t v958;
  unint64_t v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  unint64_t v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  unint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  void *v975;
  void *v976;
  char *v977;
  unint64_t v978;
  uint64_t v979;
  char *v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  uint64_t v984;
  unint64_t v985;
  _BYTE *v986;
  _QWORD *v987;
  unint64_t v988;
  uint64_t v989;
  uint64_t v990;
  char *v991;
  _OWORD *v992;
  char *v993;
  uint64_t v994;
  __int128 v995;
  uint64_t v996;
  int v997;
  void *v998;
  char *v999;
  unint64_t v1000;
  char *v1001;
  uint64_t v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  _BYTE *v1007;
  _QWORD *v1008;
  unint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  char *v1012;
  _OWORD *v1013;
  char *v1014;
  uint64_t v1015;
  __int128 v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  void *v1021;
  void *v1022;
  char *v1023;
  unint64_t v1024;
  uint64_t v1025;
  char *v1026;
  uint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  unint64_t v1031;
  _BYTE *v1032;
  _QWORD *v1033;
  unint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  char *v1037;
  _OWORD *v1038;
  char *v1039;
  uint64_t v1040;
  __int128 v1041;
  uint64_t v1042;
  uint64_t v1043;
  void *v1044;
  void *v1045;
  char *v1046;
  unint64_t v1047;
  uint64_t v1048;
  char *v1049;
  uint64_t v1050;
  uint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  unint64_t v1054;
  _BYTE *v1055;
  _QWORD *v1056;
  unint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  char *v1060;
  _OWORD *v1061;
  char *v1062;
  uint64_t v1063;
  __int128 v1064;
  uint64_t v1065;
  uint64_t v1066;
  void *v1067;
  void *v1068;
  char *v1069;
  unint64_t v1070;
  uint64_t v1071;
  char *v1072;
  uint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  unint64_t v1077;
  _BYTE *v1078;
  _QWORD *v1079;
  unint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  char *v1083;
  _OWORD *v1084;
  char *v1085;
  uint64_t v1086;
  __int128 v1087;
  uint64_t v1088;
  uint64_t v1089;
  void *v1090;
  void *v1091;
  char *v1092;
  unint64_t v1093;
  uint64_t v1094;
  char *v1095;
  uint64_t v1096;
  uint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  unint64_t v1100;
  _BYTE *v1101;
  _QWORD *v1102;
  unint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  char *v1106;
  _OWORD *v1107;
  char *v1108;
  uint64_t v1109;
  __int128 v1110;
  uint64_t v1111;
  uint64_t v1112;
  void *v1113;
  void *v1114;
  char *v1115;
  unint64_t v1116;
  uint64_t v1117;
  char *v1118;
  uint64_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  uint64_t v1122;
  unint64_t v1123;
  _BYTE *v1124;
  _QWORD *v1125;
  unint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  char *v1129;
  _OWORD *v1130;
  char *v1131;
  uint64_t v1132;
  __int128 v1133;
  uint64_t v1134;
  uint64_t v1135;
  void *v1136;
  void *v1137;
  char *v1138;
  unint64_t v1139;
  uint64_t v1140;
  char *v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  _BYTE *v1147;
  _QWORD *v1148;
  unint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  char *v1152;
  _OWORD *v1153;
  char *v1154;
  uint64_t v1155;
  __int128 v1156;
  uint64_t v1157;
  uint64_t v1158;
  void *v1159;
  void *v1160;
  char *v1161;
  unint64_t v1162;
  uint64_t v1163;
  char *v1164;
  uint64_t v1165;
  uint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  unint64_t v1169;
  _BYTE *v1170;
  _QWORD *v1171;
  unint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  char *v1175;
  _OWORD *v1176;
  char *v1177;
  uint64_t v1178;
  __int128 v1179;
  uint64_t v1180;
  uint64_t v1181;
  void *v1182;
  void *v1183;
  char *v1184;
  unint64_t v1185;
  uint64_t v1186;
  char *v1187;
  uint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  unint64_t v1192;
  _BYTE *v1193;
  _QWORD *v1194;
  unint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  char *v1198;
  _OWORD *v1199;
  char *v1200;
  uint64_t v1201;
  __int128 v1202;
  uint64_t v1203;
  int v1204;
  void *v1205;
  char *v1206;
  unint64_t v1207;
  uint64_t v1208;
  char *v1209;
  uint64_t v1210;
  uint64_t v1211;
  unint64_t v1212;
  uint64_t v1213;
  unint64_t v1214;
  _BYTE *v1215;
  _QWORD *v1216;
  unint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  char *v1220;
  _OWORD *v1221;
  char *v1222;
  uint64_t v1223;
  __int128 v1224;
  uint64_t v1225;
  int v1226;
  void *v1227;
  char *v1228;
  unint64_t v1229;
  uint64_t v1230;
  char *v1231;
  uint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  unint64_t v1236;
  _BYTE *v1237;
  _QWORD *v1238;
  unint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  char *v1242;
  _OWORD *v1243;
  char *v1244;
  uint64_t v1245;
  __int128 v1246;
  uint64_t v1247;
  int v1248;
  void *v1249;
  char *v1250;
  unint64_t v1251;
  uint64_t v1252;
  char *v1253;
  uint64_t v1254;
  uint64_t v1255;
  unint64_t v1256;
  uint64_t v1257;
  unint64_t v1258;
  _BYTE *v1259;
  _QWORD *v1260;
  unint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  char *v1264;
  _OWORD *v1265;
  char *v1266;
  uint64_t v1267;
  __int128 v1268;
  uint64_t v1269;
  int v1270;
  void *v1271;
  char *v1272;
  unint64_t v1273;
  uint64_t v1274;
  char *v1275;
  uint64_t v1276;
  uint64_t v1277;
  unint64_t v1278;
  uint64_t v1279;
  unint64_t v1280;
  _BYTE *v1281;
  _QWORD *v1282;
  unint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  char *v1286;
  _OWORD *v1287;
  char *v1288;
  uint64_t v1289;
  __int128 v1290;
  uint64_t v1291;
  int v1292;
  void *v1293;
  char *v1294;
  unint64_t v1295;
  uint64_t v1296;
  char *v1297;
  uint64_t v1298;
  uint64_t v1299;
  unint64_t v1300;
  uint64_t v1301;
  unint64_t v1302;
  _BYTE *v1303;
  _QWORD *v1304;
  unint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  char *v1308;
  _OWORD *v1309;
  char *v1310;
  uint64_t v1311;
  __int128 v1312;
  uint64_t v1313;
  int v1314;
  void *v1315;
  char *v1316;
  unint64_t v1317;
  uint64_t v1318;
  char *v1319;
  uint64_t v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  _BYTE *v1325;
  _QWORD *v1326;
  unint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  char *v1330;
  _OWORD *v1331;
  char *v1332;
  uint64_t v1333;
  __int128 v1334;
  uint64_t v1335;
  int v1336;
  void *v1337;
  char *v1338;
  unint64_t v1339;
  uint64_t v1340;
  char *v1341;
  uint64_t v1342;
  uint64_t v1343;
  unint64_t v1344;
  uint64_t v1345;
  unint64_t v1346;
  _BYTE *v1347;
  _QWORD *v1348;
  unint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  char *v1352;
  _OWORD *v1353;
  char *v1354;
  uint64_t v1355;
  __int128 v1356;
  uint64_t v1357;
  int v1358;
  void *v1359;
  char *v1360;
  unint64_t v1361;
  char *v1362;
  uint64_t v1363;
  uint64_t v1364;
  unint64_t v1365;
  uint64_t v1366;
  unint64_t v1367;
  _BYTE *v1368;
  _QWORD *v1369;
  unint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  char *v1373;
  _OWORD *v1374;
  char *v1375;
  uint64_t v1376;
  __int128 v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  void **v1381;
  _QWORD *v1382;
  unint64_t v1383;
  unint64_t v1384;
  uint64_t v1385;
  void *v1386;
  void *v1387;
  char *v1388;
  unint64_t v1389;
  uint64_t v1390;
  char *v1391;
  uint64_t v1392;
  uint64_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  _BYTE *v1397;
  _QWORD *v1398;
  unint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  char *v1402;
  _OWORD *v1403;
  char *v1404;
  uint64_t v1405;
  __int128 v1406;
  uint64_t v1407;
  uint64_t v1408;
  void *v1409;
  void *v1410;
  char *v1411;
  unint64_t v1412;
  uint64_t v1413;
  char *v1414;
  uint64_t v1415;
  uint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  _BYTE *v1420;
  _QWORD *v1421;
  unint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  char *v1425;
  _OWORD *v1426;
  char *v1427;
  uint64_t v1428;
  __int128 v1429;
  uint64_t v1430;
  int v1431;
  void *v1432;
  char *v1433;
  unint64_t v1434;
  uint64_t v1435;
  char *v1436;
  uint64_t v1437;
  uint64_t v1438;
  unint64_t v1439;
  uint64_t v1440;
  unint64_t v1441;
  _BYTE *v1442;
  _QWORD *v1443;
  unint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  char *v1447;
  _OWORD *v1448;
  char *v1449;
  uint64_t v1450;
  __int128 v1451;
  uint64_t v1452;
  int v1453;
  void *v1454;
  char *v1455;
  unint64_t v1456;
  uint64_t v1457;
  char *v1458;
  uint64_t v1459;
  uint64_t v1460;
  unint64_t v1461;
  uint64_t v1462;
  unint64_t v1463;
  _BYTE *v1464;
  _QWORD *v1465;
  unint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  char *v1469;
  _OWORD *v1470;
  char *v1471;
  uint64_t v1472;
  __int128 v1473;
  uint64_t v1474;
  uint64_t v1475;
  void *v1476;
  void *v1477;
  char *v1478;
  unint64_t v1479;
  uint64_t v1480;
  char *v1481;
  uint64_t v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  unint64_t v1486;
  _BYTE *v1487;
  _QWORD *v1488;
  unint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  char *v1492;
  _OWORD *v1493;
  char *v1494;
  uint64_t v1495;
  __int128 v1496;
  uint64_t v1497;
  uint64_t v1498;
  void *v1499;
  void *v1500;
  char *v1501;
  unint64_t v1502;
  uint64_t v1503;
  char *v1504;
  uint64_t v1505;
  uint64_t v1506;
  unint64_t v1507;
  uint64_t v1508;
  unint64_t v1509;
  _BYTE *v1510;
  _QWORD *v1511;
  unint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  char *v1515;
  _OWORD *v1516;
  char *v1517;
  uint64_t v1518;
  __int128 v1519;
  uint64_t v1520;
  uint64_t v1521;
  void *v1522;
  void *v1523;
  char *v1524;
  unint64_t v1525;
  uint64_t v1526;
  char *v1527;
  uint64_t v1528;
  uint64_t v1529;
  unint64_t v1530;
  uint64_t v1531;
  unint64_t v1532;
  _BYTE *v1533;
  _QWORD *v1534;
  unint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  char *v1538;
  _OWORD *v1539;
  char *v1540;
  uint64_t v1541;
  __int128 v1542;
  uint64_t v1543;
  uint64_t v1544;
  void *v1545;
  void *v1546;
  char *v1547;
  unint64_t v1548;
  uint64_t v1549;
  char *v1550;
  uint64_t v1551;
  uint64_t v1552;
  unint64_t v1553;
  uint64_t v1554;
  unint64_t v1555;
  _BYTE *v1556;
  _QWORD *v1557;
  unint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  char *v1561;
  _OWORD *v1562;
  char *v1563;
  uint64_t v1564;
  __int128 v1565;
  uint64_t v1566;
  uint64_t v1567;
  void *v1568;
  void *v1569;
  char *v1570;
  unint64_t v1571;
  uint64_t v1572;
  char *v1573;
  uint64_t v1574;
  uint64_t v1575;
  unint64_t v1576;
  uint64_t v1577;
  unint64_t v1578;
  _BYTE *v1579;
  _QWORD *v1580;
  unint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  char *v1584;
  _OWORD *v1585;
  char *v1586;
  uint64_t v1587;
  __int128 v1588;
  uint64_t v1589;
  uint64_t v1590;
  void *v1591;
  void *v1592;
  char *v1593;
  unint64_t v1594;
  uint64_t v1595;
  char *v1596;
  uint64_t v1597;
  uint64_t v1598;
  unint64_t v1599;
  uint64_t v1600;
  unint64_t v1601;
  _BYTE *v1602;
  _QWORD *v1603;
  unint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  char *v1607;
  _OWORD *v1608;
  char *v1609;
  uint64_t v1610;
  __int128 v1611;
  uint64_t v1612;
  uint64_t v1613;
  void *v1614;
  void *v1615;
  char *v1616;
  unint64_t v1617;
  char *v1618;
  uint64_t v1619;
  uint64_t v1620;
  unint64_t v1621;
  uint64_t v1622;
  unint64_t v1623;
  _BYTE *v1624;
  _QWORD *v1625;
  unint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  char *v1629;
  _OWORD *v1630;
  char *v1631;
  uint64_t v1632;
  __int128 v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  __int128 v1637[7];

  v2 = *(unsigned int *)(a1 + 52);
  v3 = (void *)operator new[]();
  v4 = v3;
  if ((int)v2 >= 1)
    bzero(v3, 4 * v2);
  *(_QWORD *)(a1 + 1640) = v4;
  v5 = (char **)(a1 + 2624);
  v6 = *(char **)(a1 + 2632);
  v7 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v6 < v7)
  {
    *(_QWORD *)v6 = v4;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_25;
  }
  v9 = *v5;
  v10 = v6 - *v5;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    goto LABEL_1698;
  v13 = v7 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      goto LABEL_1699;
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v4;
    v8 = (uint64_t)(v16 + 1);
    v18 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_23;
    goto LABEL_16;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v4;
  v8 = 8 * v11 + 8;
  v18 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_16:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_1704;
    if ((unint64_t)(v6 - &v15[v10]) < 0x20)
      goto LABEL_1704;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v6[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v23 = &v15[8 * v11 - 16];
    v24 = v6 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v6 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1704:
      do
      {
        v27 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v16 = v27;
      }
      while (v6 != v9);
    }
    v6 = *v5;
  }
LABEL_23:
  *(_QWORD *)(a1 + 2624) = v16;
  *(_QWORD *)(a1 + 2632) = v8;
  *(_QWORD *)(a1 + 2640) = v17;
  if (v6)
    operator delete(v6);
LABEL_25:
  *(_QWORD *)(a1 + 2632) = v8;
  v28 = *(unsigned int *)(a1 + 52);
  v29 = (void *)operator new[]();
  v30 = v29;
  if ((int)v28 >= 1)
    bzero(v29, 4 * v28);
  *(_QWORD *)(a1 + 1648) = v30;
  v31 = *(char **)(a1 + 2632);
  v32 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v31 < v32)
  {
    *(_QWORD *)v31 = v30;
    v33 = (uint64_t)(v31 + 8);
    goto LABEL_49;
  }
  v34 = *v5;
  v35 = v31 - *v5;
  v36 = v35 >> 3;
  v37 = (v35 >> 3) + 1;
  if (v37 >> 61)
    goto LABEL_1698;
  v38 = v32 - (_QWORD)v34;
  if (v38 >> 2 > v37)
    v37 = v38 >> 2;
  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
    v39 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v39 = v37;
  if (v39)
  {
    if (v39 >> 61)
      goto LABEL_1699;
    v40 = operator new(8 * v39);
    v41 = &v40[8 * v36];
    v42 = &v40[8 * v39];
    *v41 = v30;
    v33 = (uint64_t)(v41 + 1);
    v43 = (char *)(v31 - v34);
    if (v31 == v34)
      goto LABEL_47;
    goto LABEL_40;
  }
  v40 = 0;
  v41 = (_QWORD *)(8 * v36);
  v42 = 0;
  *(_QWORD *)(8 * v36) = v30;
  v33 = 8 * v36 + 8;
  v43 = (char *)(v31 - v34);
  if (v31 != v34)
  {
LABEL_40:
    v44 = (unint64_t)(v43 - 8);
    if (v44 < 0x58)
      goto LABEL_1705;
    if ((unint64_t)(v31 - v40 - v35) < 0x20)
      goto LABEL_1705;
    v45 = (v44 >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v47 = &v31[-v46];
    v41 = (_QWORD *)((char *)v41 - v46);
    v48 = &v40[8 * v36 - 16];
    v49 = v31 - 16;
    v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *(_OWORD *)v49;
      *(v48 - 1) = *((_OWORD *)v49 - 1);
      *v48 = v51;
      v48 -= 2;
      v49 -= 32;
      v50 -= 4;
    }
    while (v50);
    v31 = v47;
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1705:
      do
      {
        v52 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *--v41 = v52;
      }
      while (v31 != v34);
    }
    v31 = *v5;
  }
LABEL_47:
  *(_QWORD *)(a1 + 2624) = v41;
  *(_QWORD *)(a1 + 2632) = v33;
  *(_QWORD *)(a1 + 2640) = v42;
  if (v31)
    operator delete(v31);
LABEL_49:
  *(_QWORD *)(a1 + 2632) = v33;
  v53 = *(unsigned int *)(a1 + 52);
  v54 = (void *)operator new[]();
  v55 = v54;
  if ((int)v53 >= 1)
    bzero(v54, 4 * v53);
  *(_QWORD *)(a1 + 1656) = v55;
  v56 = *(char **)(a1 + 2632);
  v57 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v56 < v57)
  {
    *(_QWORD *)v56 = v55;
    v58 = (uint64_t)(v56 + 8);
    goto LABEL_73;
  }
  v59 = *v5;
  v60 = v56 - *v5;
  v61 = v60 >> 3;
  v62 = (v60 >> 3) + 1;
  if (v62 >> 61)
    goto LABEL_1698;
  v63 = v57 - (_QWORD)v59;
  if (v63 >> 2 > v62)
    v62 = v63 >> 2;
  if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
    v64 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v64 = v62;
  if (v64)
  {
    if (v64 >> 61)
      goto LABEL_1699;
    v65 = operator new(8 * v64);
    v66 = &v65[8 * v61];
    v67 = &v65[8 * v64];
    *v66 = v55;
    v58 = (uint64_t)(v66 + 1);
    v68 = (char *)(v56 - v59);
    if (v56 == v59)
      goto LABEL_71;
    goto LABEL_64;
  }
  v65 = 0;
  v66 = (_QWORD *)(8 * v61);
  v67 = 0;
  *(_QWORD *)(8 * v61) = v55;
  v58 = 8 * v61 + 8;
  v68 = (char *)(v56 - v59);
  if (v56 != v59)
  {
LABEL_64:
    v69 = (unint64_t)(v68 - 8);
    if (v69 < 0x58)
      goto LABEL_1706;
    if ((unint64_t)(v56 - v65 - v60) < 0x20)
      goto LABEL_1706;
    v70 = (v69 >> 3) + 1;
    v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
    v72 = &v56[-v71];
    v66 = (_QWORD *)((char *)v66 - v71);
    v73 = &v65[8 * v61 - 16];
    v74 = v56 - 16;
    v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v76 = *(_OWORD *)v74;
      *(v73 - 1) = *((_OWORD *)v74 - 1);
      *v73 = v76;
      v73 -= 2;
      v74 -= 32;
      v75 -= 4;
    }
    while (v75);
    v56 = v72;
    if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1706:
      do
      {
        v77 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *--v66 = v77;
      }
      while (v56 != v59);
    }
    v56 = *v5;
  }
LABEL_71:
  *(_QWORD *)(a1 + 2624) = v66;
  *(_QWORD *)(a1 + 2632) = v58;
  *(_QWORD *)(a1 + 2640) = v67;
  if (v56)
    operator delete(v56);
LABEL_73:
  *(_QWORD *)(a1 + 2632) = v58;
  v78 = *(unsigned int *)(a1 + 52);
  v79 = (void *)operator new[]();
  v80 = v79;
  if ((int)v78 >= 1)
    bzero(v79, 4 * v78);
  *(_QWORD *)(a1 + 1664) = v80;
  v81 = *(char **)(a1 + 2632);
  v82 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v81 < v82)
  {
    *(_QWORD *)v81 = v80;
    v83 = (uint64_t)(v81 + 8);
    goto LABEL_97;
  }
  v84 = *v5;
  v85 = v81 - *v5;
  v86 = v85 >> 3;
  v87 = (v85 >> 3) + 1;
  if (v87 >> 61)
    goto LABEL_1698;
  v88 = v82 - (_QWORD)v84;
  if (v88 >> 2 > v87)
    v87 = v88 >> 2;
  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
    v89 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
  {
    if (v89 >> 61)
      goto LABEL_1699;
    v90 = operator new(8 * v89);
    v91 = &v90[8 * v86];
    v92 = &v90[8 * v89];
    *v91 = v80;
    v83 = (uint64_t)(v91 + 1);
    v93 = (char *)(v81 - v84);
    if (v81 == v84)
      goto LABEL_95;
    goto LABEL_88;
  }
  v90 = 0;
  v91 = (_QWORD *)(8 * v86);
  v92 = 0;
  *(_QWORD *)(8 * v86) = v80;
  v83 = 8 * v86 + 8;
  v93 = (char *)(v81 - v84);
  if (v81 != v84)
  {
LABEL_88:
    v94 = (unint64_t)(v93 - 8);
    if (v94 < 0x58)
      goto LABEL_1707;
    if ((unint64_t)(v81 - v90 - v85) < 0x20)
      goto LABEL_1707;
    v95 = (v94 >> 3) + 1;
    v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
    v97 = &v81[-v96];
    v91 = (_QWORD *)((char *)v91 - v96);
    v98 = &v90[8 * v86 - 16];
    v99 = v81 - 16;
    v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v101 = *(_OWORD *)v99;
      *(v98 - 1) = *((_OWORD *)v99 - 1);
      *v98 = v101;
      v98 -= 2;
      v99 -= 32;
      v100 -= 4;
    }
    while (v100);
    v81 = v97;
    if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1707:
      do
      {
        v102 = *((_QWORD *)v81 - 1);
        v81 -= 8;
        *--v91 = v102;
      }
      while (v81 != v84);
    }
    v81 = *v5;
  }
LABEL_95:
  *(_QWORD *)(a1 + 2624) = v91;
  *(_QWORD *)(a1 + 2632) = v83;
  *(_QWORD *)(a1 + 2640) = v92;
  if (v81)
    operator delete(v81);
LABEL_97:
  *(_QWORD *)(a1 + 2632) = v83;
  v103 = *(unsigned int *)(a1 + 52);
  v104 = (void *)operator new[]();
  v105 = v104;
  if ((int)v103 >= 1)
    bzero(v104, 4 * v103);
  *(_QWORD *)(a1 + 1672) = v105;
  v106 = *(char **)(a1 + 2632);
  v107 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v106 < v107)
  {
    *(_QWORD *)v106 = v105;
    v108 = (uint64_t)(v106 + 8);
    goto LABEL_121;
  }
  v109 = *v5;
  v110 = v106 - *v5;
  v111 = v110 >> 3;
  v112 = (v110 >> 3) + 1;
  if (v112 >> 61)
    goto LABEL_1698;
  v113 = v107 - (_QWORD)v109;
  if (v113 >> 2 > v112)
    v112 = v113 >> 2;
  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
    v114 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v114 = v112;
  if (v114)
  {
    if (v114 >> 61)
      goto LABEL_1699;
    v115 = operator new(8 * v114);
    v116 = &v115[8 * v111];
    v117 = &v115[8 * v114];
    *v116 = v105;
    v108 = (uint64_t)(v116 + 1);
    v118 = (char *)(v106 - v109);
    if (v106 == v109)
      goto LABEL_119;
    goto LABEL_112;
  }
  v115 = 0;
  v116 = (_QWORD *)(8 * v111);
  v117 = 0;
  *(_QWORD *)(8 * v111) = v105;
  v108 = 8 * v111 + 8;
  v118 = (char *)(v106 - v109);
  if (v106 != v109)
  {
LABEL_112:
    v119 = (unint64_t)(v118 - 8);
    if (v119 < 0x58)
      goto LABEL_1708;
    if ((unint64_t)(v106 - v115 - v110) < 0x20)
      goto LABEL_1708;
    v120 = (v119 >> 3) + 1;
    v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
    v122 = &v106[-v121];
    v116 = (_QWORD *)((char *)v116 - v121);
    v123 = &v115[8 * v111 - 16];
    v124 = v106 - 16;
    v125 = v120 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v126 = *(_OWORD *)v124;
      *(v123 - 1) = *((_OWORD *)v124 - 1);
      *v123 = v126;
      v123 -= 2;
      v124 -= 32;
      v125 -= 4;
    }
    while (v125);
    v106 = v122;
    if (v120 != (v120 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1708:
      do
      {
        v127 = *((_QWORD *)v106 - 1);
        v106 -= 8;
        *--v116 = v127;
      }
      while (v106 != v109);
    }
    v106 = *v5;
  }
LABEL_119:
  *(_QWORD *)(a1 + 2624) = v116;
  *(_QWORD *)(a1 + 2632) = v108;
  *(_QWORD *)(a1 + 2640) = v117;
  if (v106)
    operator delete(v106);
LABEL_121:
  *(_QWORD *)(a1 + 2632) = v108;
  v128 = *(unsigned int *)(a1 + 52);
  v129 = (void *)operator new[]();
  v130 = v129;
  if ((int)v128 >= 1)
    bzero(v129, 4 * v128);
  *(_QWORD *)(a1 + 1680) = v130;
  v131 = *(char **)(a1 + 2632);
  v132 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v131 < v132)
  {
    *(_QWORD *)v131 = v130;
    v133 = (uint64_t)(v131 + 8);
    goto LABEL_145;
  }
  v134 = *v5;
  v135 = v131 - *v5;
  v136 = v135 >> 3;
  v137 = (v135 >> 3) + 1;
  if (v137 >> 61)
    goto LABEL_1698;
  v138 = v132 - (_QWORD)v134;
  if (v138 >> 2 > v137)
    v137 = v138 >> 2;
  if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
    v139 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v139 = v137;
  if (v139)
  {
    if (v139 >> 61)
      goto LABEL_1699;
    v140 = operator new(8 * v139);
    v141 = &v140[8 * v136];
    v142 = &v140[8 * v139];
    *v141 = v130;
    v133 = (uint64_t)(v141 + 1);
    v143 = (char *)(v131 - v134);
    if (v131 == v134)
      goto LABEL_143;
    goto LABEL_136;
  }
  v140 = 0;
  v141 = (_QWORD *)(8 * v136);
  v142 = 0;
  *(_QWORD *)(8 * v136) = v130;
  v133 = 8 * v136 + 8;
  v143 = (char *)(v131 - v134);
  if (v131 != v134)
  {
LABEL_136:
    v144 = (unint64_t)(v143 - 8);
    if (v144 < 0x58)
      goto LABEL_1709;
    if ((unint64_t)(v131 - v140 - v135) < 0x20)
      goto LABEL_1709;
    v145 = (v144 >> 3) + 1;
    v146 = 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
    v147 = &v131[-v146];
    v141 = (_QWORD *)((char *)v141 - v146);
    v148 = &v140[8 * v136 - 16];
    v149 = v131 - 16;
    v150 = v145 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v151 = *(_OWORD *)v149;
      *(v148 - 1) = *((_OWORD *)v149 - 1);
      *v148 = v151;
      v148 -= 2;
      v149 -= 32;
      v150 -= 4;
    }
    while (v150);
    v131 = v147;
    if (v145 != (v145 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1709:
      do
      {
        v152 = *((_QWORD *)v131 - 1);
        v131 -= 8;
        *--v141 = v152;
      }
      while (v131 != v134);
    }
    v131 = *v5;
  }
LABEL_143:
  *(_QWORD *)(a1 + 2624) = v141;
  *(_QWORD *)(a1 + 2632) = v133;
  *(_QWORD *)(a1 + 2640) = v142;
  if (v131)
    operator delete(v131);
LABEL_145:
  *(_QWORD *)(a1 + 2632) = v133;
  v153 = *(unsigned int *)(a1 + 52);
  v154 = (void *)operator new[]();
  v155 = v154;
  if ((int)v153 >= 1)
    bzero(v154, 4 * v153);
  *(_QWORD *)(a1 + 1688) = v155;
  v156 = *(char **)(a1 + 2632);
  v157 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v156 < v157)
  {
    *(_QWORD *)v156 = v155;
    v158 = (uint64_t)(v156 + 8);
    goto LABEL_169;
  }
  v159 = *v5;
  v160 = v156 - *v5;
  v161 = v160 >> 3;
  v162 = (v160 >> 3) + 1;
  if (v162 >> 61)
    goto LABEL_1698;
  v163 = v157 - (_QWORD)v159;
  if (v163 >> 2 > v162)
    v162 = v163 >> 2;
  if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
    v164 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v164 = v162;
  if (v164)
  {
    if (v164 >> 61)
      goto LABEL_1699;
    v165 = operator new(8 * v164);
    v166 = &v165[8 * v161];
    v167 = &v165[8 * v164];
    *v166 = v155;
    v158 = (uint64_t)(v166 + 1);
    v168 = (char *)(v156 - v159);
    if (v156 == v159)
      goto LABEL_167;
    goto LABEL_160;
  }
  v165 = 0;
  v166 = (_QWORD *)(8 * v161);
  v167 = 0;
  *(_QWORD *)(8 * v161) = v155;
  v158 = 8 * v161 + 8;
  v168 = (char *)(v156 - v159);
  if (v156 != v159)
  {
LABEL_160:
    v169 = (unint64_t)(v168 - 8);
    if (v169 < 0x58)
      goto LABEL_1710;
    if ((unint64_t)(v156 - v165 - v160) < 0x20)
      goto LABEL_1710;
    v170 = (v169 >> 3) + 1;
    v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
    v172 = &v156[-v171];
    v166 = (_QWORD *)((char *)v166 - v171);
    v173 = &v165[8 * v161 - 16];
    v174 = v156 - 16;
    v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v176 = *(_OWORD *)v174;
      *(v173 - 1) = *((_OWORD *)v174 - 1);
      *v173 = v176;
      v173 -= 2;
      v174 -= 32;
      v175 -= 4;
    }
    while (v175);
    v156 = v172;
    if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1710:
      do
      {
        v177 = *((_QWORD *)v156 - 1);
        v156 -= 8;
        *--v166 = v177;
      }
      while (v156 != v159);
    }
    v156 = *v5;
  }
LABEL_167:
  *(_QWORD *)(a1 + 2624) = v166;
  *(_QWORD *)(a1 + 2632) = v158;
  *(_QWORD *)(a1 + 2640) = v167;
  if (v156)
    operator delete(v156);
LABEL_169:
  *(_QWORD *)(a1 + 2632) = v158;
  v178 = *(_QWORD *)(a1 + 2680);
  if (v178)
  {
    v179 = *(_DWORD *)(v178 + 40) / 2;
    v180 = 4 * *(unsigned __int8 *)(v178 + 244);
    if (*(_BYTE *)(v178 + 384))
      v181 = 3;
    else
      v181 = 0;
    v182 = *(unsigned __int8 *)(a1 + 42);
    if (*(_BYTE *)(a1 + 42))
    {
LABEL_174:
      if (*(_BYTE *)(a1 + 2672))
        v183 = v179;
      else
        v183 = 0;
      if (*(_BYTE *)(a1 + 2672))
        v184 = v180;
      else
        v184 = 0;
      if (*(_BYTE *)(a1 + 2672))
        v185 = v181;
      else
        v185 = 0;
      if (*(int *)(a1 + 56) >= 1)
        goto LABEL_184;
      goto LABEL_187;
    }
  }
  else
  {
    v180 = 0;
    v181 = 0;
    v179 = 8;
    v182 = *(unsigned __int8 *)(a1 + 42);
    if (*(_BYTE *)(a1 + 42))
      goto LABEL_174;
  }
  v184 = 0;
  v183 = 0;
  v185 = 0;
  if (*(int *)(a1 + 56) >= 1)
  {
LABEL_184:
    v186 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v182 = *(unsigned __int8 *)(a1 + 42);
    goto LABEL_188;
  }
LABEL_187:
  v186 = 0;
LABEL_188:
  v187 = v182 == 0;
  v188 = v182 != 0;
  if (v187)
    v189 = dword_1EE418968;
  else
    v189 = 2;
  if ((v188 & v186) != 0)
    v190 = 2;
  else
    v190 = dword_1EE418968;
  v1635 = v189;
  v1636 = v190;
  if (!*(_DWORD *)(a1 + 2496))
  {
    v191 = *(_QWORD *)(a1 + 2680);
    if (v191 && *(int *)(v191 + 40) >= 1)
    {
      v192 = (_QWORD *)(v191 + 8 * v183);
      *(_QWORD *)(a1 + 232) = v192[14];
      *(_QWORD *)(a1 + 240) = v192[15];
      *(_QWORD *)(a1 + 256) = v192[16];
      *(_QWORD *)(a1 + 248) = v192[17];
      *(_QWORD *)(a1 + 264) = v192[18];
      *(_QWORD *)(a1 + 272) = v192[19];
      *(_QWORD *)(a1 + 288) = v192[20];
      *(_QWORD *)(a1 + 280) = v192[21];
      if (*(_BYTE *)(a1 + 1697))
        goto LABEL_548;
      goto LABEL_201;
    }
    if (*(_BYTE *)(a1 + 1697))
      goto LABEL_548;
    v195 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
    *(_QWORD *)&v1637[0] = operator new[]();
    bzero(*(void **)&v1637[0], 2 * v195);
    sub_19C100F64(v1637, v195, 0.1);
    v196 = *(_QWORD *)&v1637[0];
    *(_QWORD *)(a1 + 232) = *(_QWORD *)&v1637[0];
    v197 = (char **)(a1 + 2648);
    v198 = *(char **)(a1 + 2656);
    v199 = *(_QWORD *)(a1 + 2664);
    if ((unint64_t)v198 < v199)
    {
      *(_QWORD *)v198 = v196;
      v200 = (uint64_t)(v198 + 8);
      goto LABEL_307;
    }
    v207 = *v197;
    v208 = v198 - *v197;
    v209 = v208 >> 3;
    v210 = (v208 >> 3) + 1;
    if (v210 >> 61)
      goto LABEL_1700;
    v211 = v199 - (_QWORD)v207;
    if (v211 >> 2 > v210)
      v210 = v211 >> 2;
    if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFF8)
      v212 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v212 = v210;
    if (v212)
    {
      if (v212 >> 61)
        goto LABEL_1699;
      v213 = operator new(8 * v212);
      v214 = &v213[8 * v209];
      v215 = &v213[8 * v212];
      *v214 = v196;
      v200 = (uint64_t)(v214 + 1);
      v216 = (char *)(v198 - v207);
      if (v198 != v207)
      {
LABEL_217:
        v217 = (unint64_t)(v216 - 8);
        if (v217 >= 0x58)
        {
          v296 = v198 - v213 - v208;
          v197 = (char **)(a1 + 2648);
          if (v296 >= 0x20)
          {
            v297 = (v217 >> 3) + 1;
            v298 = 8 * (v297 & 0x3FFFFFFFFFFFFFFCLL);
            v299 = &v198[-v298];
            v214 = (_QWORD *)((char *)v214 - v298);
            v300 = &v213[8 * v209 - 16];
            v301 = v198 - 16;
            v302 = v297 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v303 = *(_OWORD *)v301;
              *(v300 - 1) = *((_OWORD *)v301 - 1);
              *v300 = v303;
              v300 -= 2;
              v301 -= 32;
              v302 -= 4;
            }
            while (v302);
            v198 = v299;
            if (v297 == (v297 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_304;
          }
        }
        else
        {
          v197 = (char **)(a1 + 2648);
        }
        do
        {
          v304 = *((_QWORD *)v198 - 1);
          v198 -= 8;
          *--v214 = v304;
        }
        while (v198 != v207);
LABEL_304:
        v198 = *v197;
LABEL_305:
        *(_QWORD *)(a1 + 2648) = v214;
        *(_QWORD *)(a1 + 2656) = v200;
        *(_QWORD *)(a1 + 2664) = v215;
        if (v198)
          operator delete(v198);
LABEL_307:
        *(_QWORD *)(a1 + 2656) = v200;
        v305 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
        *(_QWORD *)&v1637[0] = operator new[]();
        bzero(*(void **)&v1637[0], 2 * v305);
        sub_19C100F64(v1637, v305, 0.1);
        v306 = *(_QWORD *)&v1637[0];
        *(_QWORD *)(a1 + 240) = *(_QWORD *)&v1637[0];
        v307 = *(char **)(a1 + 2656);
        v308 = *(_QWORD *)(a1 + 2664);
        if ((unint64_t)v307 < v308)
        {
          *(_QWORD *)v307 = v306;
          v309 = (uint64_t)(v307 + 8);
          goto LABEL_330;
        }
        v310 = *v197;
        v311 = v307 - *v197;
        v312 = v311 >> 3;
        v313 = (v311 >> 3) + 1;
        if (v313 >> 61)
          goto LABEL_1700;
        v314 = v308 - (_QWORD)v310;
        if (v314 >> 2 > v313)
          v313 = v314 >> 2;
        if ((unint64_t)v314 >= 0x7FFFFFFFFFFFFFF8)
          v315 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v315 = v313;
        if (v315)
        {
          if (v315 >> 61)
            goto LABEL_1699;
          v316 = operator new(8 * v315);
          v317 = &v316[8 * v312];
          v318 = &v316[8 * v315];
          *v317 = v306;
          v309 = (uint64_t)(v317 + 1);
          v319 = (char *)(v307 - v310);
          if (v307 != v310)
          {
LABEL_318:
            v320 = (unint64_t)(v319 - 8);
            if (v320 >= 0x58)
            {
              v321 = v307 - &v316[v311];
              v197 = (char **)(a1 + 2648);
              if (v321 >= 0x20)
              {
                v322 = (v320 >> 3) + 1;
                v323 = 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
                v324 = &v307[-v323];
                v317 = (_QWORD *)((char *)v317 - v323);
                v325 = &v316[8 * v312 - 16];
                v326 = v307 - 16;
                v327 = v322 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v328 = *(_OWORD *)v326;
                  *(v325 - 1) = *((_OWORD *)v326 - 1);
                  *v325 = v328;
                  v325 -= 2;
                  v326 -= 32;
                  v327 -= 4;
                }
                while (v327);
                v307 = v324;
                if (v322 == (v322 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_327;
              }
            }
            else
            {
              v197 = (char **)(a1 + 2648);
            }
            do
            {
              v329 = *((_QWORD *)v307 - 1);
              v307 -= 8;
              *--v317 = v329;
            }
            while (v307 != v310);
LABEL_327:
            v307 = *v197;
LABEL_328:
            *(_QWORD *)(a1 + 2648) = v317;
            *(_QWORD *)(a1 + 2656) = v309;
            *(_QWORD *)(a1 + 2664) = v318;
            if (v307)
              operator delete(v307);
LABEL_330:
            *(_QWORD *)(a1 + 2656) = v309;
            v330 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
            *(_QWORD *)&v1637[0] = operator new[]();
            bzero(*(void **)&v1637[0], 2 * v330);
            sub_19C100F64(v1637, v330, 0.1);
            v331 = *(_QWORD *)&v1637[0];
            *(_QWORD *)(a1 + 248) = *(_QWORD *)&v1637[0];
            v332 = *(char **)(a1 + 2656);
            v333 = *(_QWORD *)(a1 + 2664);
            if ((unint64_t)v332 < v333)
            {
              *(_QWORD *)v332 = v331;
              v334 = (uint64_t)(v332 + 8);
              goto LABEL_353;
            }
            v335 = *v197;
            v336 = v332 - *v197;
            v337 = v336 >> 3;
            v338 = (v336 >> 3) + 1;
            if (v338 >> 61)
              goto LABEL_1700;
            v339 = v333 - (_QWORD)v335;
            if (v339 >> 2 > v338)
              v338 = v339 >> 2;
            if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8)
              v340 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v340 = v338;
            if (v340)
            {
              if (v340 >> 61)
                goto LABEL_1699;
              v341 = operator new(8 * v340);
              v342 = &v341[8 * v337];
              v343 = &v341[8 * v340];
              *v342 = v331;
              v334 = (uint64_t)(v342 + 1);
              v344 = (char *)(v332 - v335);
              if (v332 != v335)
              {
LABEL_341:
                v345 = (unint64_t)(v344 - 8);
                if (v345 >= 0x58)
                {
                  v346 = v332 - &v341[v336];
                  v197 = (char **)(a1 + 2648);
                  if (v346 >= 0x20)
                  {
                    v347 = (v345 >> 3) + 1;
                    v348 = 8 * (v347 & 0x3FFFFFFFFFFFFFFCLL);
                    v349 = &v332[-v348];
                    v342 = (_QWORD *)((char *)v342 - v348);
                    v350 = &v341[8 * v337 - 16];
                    v351 = v332 - 16;
                    v352 = v347 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v353 = *(_OWORD *)v351;
                      *(v350 - 1) = *((_OWORD *)v351 - 1);
                      *v350 = v353;
                      v350 -= 2;
                      v351 -= 32;
                      v352 -= 4;
                    }
                    while (v352);
                    v332 = v349;
                    if (v347 == (v347 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_350;
                  }
                }
                else
                {
                  v197 = (char **)(a1 + 2648);
                }
                do
                {
                  v354 = *((_QWORD *)v332 - 1);
                  v332 -= 8;
                  *--v342 = v354;
                }
                while (v332 != v335);
LABEL_350:
                v332 = *v197;
LABEL_351:
                *(_QWORD *)(a1 + 2648) = v342;
                *(_QWORD *)(a1 + 2656) = v334;
                *(_QWORD *)(a1 + 2664) = v343;
                if (v332)
                  operator delete(v332);
LABEL_353:
                *(_QWORD *)(a1 + 2656) = v334;
                v355 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
                *(_QWORD *)&v1637[0] = operator new[]();
                bzero(*(void **)&v1637[0], 2 * v355);
                sub_19C100F64(v1637, v355, 0.1);
                v356 = *(_QWORD *)&v1637[0];
                *(_QWORD *)(a1 + 256) = *(_QWORD *)&v1637[0];
                v357 = *(char **)(a1 + 2656);
                v358 = *(_QWORD *)(a1 + 2664);
                if ((unint64_t)v357 < v358)
                {
                  *(_QWORD *)v357 = v356;
                  v359 = (uint64_t)(v357 + 8);
                  goto LABEL_376;
                }
                v360 = *v197;
                v361 = v357 - *v197;
                v362 = v361 >> 3;
                v363 = (v361 >> 3) + 1;
                if (v363 >> 61)
                  goto LABEL_1700;
                v364 = v358 - (_QWORD)v360;
                if (v364 >> 2 > v363)
                  v363 = v364 >> 2;
                if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFF8)
                  v365 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v365 = v363;
                if (v365)
                {
                  if (v365 >> 61)
                    goto LABEL_1699;
                  v366 = operator new(8 * v365);
                  v367 = &v366[8 * v362];
                  v368 = &v366[8 * v365];
                  *v367 = v356;
                  v359 = (uint64_t)(v367 + 1);
                  v369 = (char *)(v357 - v360);
                  if (v357 != v360)
                  {
LABEL_364:
                    v370 = (unint64_t)(v369 - 8);
                    if (v370 >= 0x58)
                    {
                      v371 = v357 - &v366[v361];
                      v197 = (char **)(a1 + 2648);
                      if (v371 >= 0x20)
                      {
                        v372 = (v370 >> 3) + 1;
                        v373 = 8 * (v372 & 0x3FFFFFFFFFFFFFFCLL);
                        v374 = &v357[-v373];
                        v367 = (_QWORD *)((char *)v367 - v373);
                        v375 = &v366[8 * v362 - 16];
                        v376 = v357 - 16;
                        v377 = v372 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v378 = *(_OWORD *)v376;
                          *(v375 - 1) = *((_OWORD *)v376 - 1);
                          *v375 = v378;
                          v375 -= 2;
                          v376 -= 32;
                          v377 -= 4;
                        }
                        while (v377);
                        v357 = v374;
                        if (v372 == (v372 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_373;
                      }
                    }
                    else
                    {
                      v197 = (char **)(a1 + 2648);
                    }
                    do
                    {
                      v379 = *((_QWORD *)v357 - 1);
                      v357 -= 8;
                      *--v367 = v379;
                    }
                    while (v357 != v360);
LABEL_373:
                    v357 = *v197;
LABEL_374:
                    *(_QWORD *)(a1 + 2648) = v367;
                    *(_QWORD *)(a1 + 2656) = v359;
                    *(_QWORD *)(a1 + 2664) = v368;
                    if (v357)
                      operator delete(v357);
LABEL_376:
                    *(_QWORD *)(a1 + 2656) = v359;
                    v380 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
                    *(_QWORD *)&v1637[0] = operator new[]();
                    bzero(*(void **)&v1637[0], (2 * v380));
                    sub_19C100F64(v1637, v380, 0.1);
                    v381 = *(_QWORD *)&v1637[0];
                    *(_QWORD *)(a1 + 264) = *(_QWORD *)&v1637[0];
                    v382 = *(char **)(a1 + 2656);
                    v383 = *(_QWORD *)(a1 + 2664);
                    if ((unint64_t)v382 < v383)
                    {
                      *(_QWORD *)v382 = v381;
                      v384 = (uint64_t)(v382 + 8);
                      goto LABEL_399;
                    }
                    v385 = *v197;
                    v386 = v382 - *v197;
                    v387 = v386 >> 3;
                    v388 = (v386 >> 3) + 1;
                    if (v388 >> 61)
                      goto LABEL_1700;
                    v389 = v383 - (_QWORD)v385;
                    if (v389 >> 2 > v388)
                      v388 = v389 >> 2;
                    if ((unint64_t)v389 >= 0x7FFFFFFFFFFFFFF8)
                      v390 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v390 = v388;
                    if (v390)
                    {
                      if (v390 >> 61)
                        goto LABEL_1699;
                      v391 = operator new(8 * v390);
                      v392 = &v391[8 * v387];
                      v393 = &v391[8 * v390];
                      *v392 = v381;
                      v384 = (uint64_t)(v392 + 1);
                      v394 = (char *)(v382 - v385);
                      if (v382 != v385)
                      {
LABEL_387:
                        v395 = (unint64_t)(v394 - 8);
                        if (v395 >= 0x58)
                        {
                          v396 = v382 - v391 - v386;
                          v197 = (char **)(a1 + 2648);
                          if (v396 >= 0x20)
                          {
                            v397 = (v395 >> 3) + 1;
                            v398 = 8 * (v397 & 0x3FFFFFFFFFFFFFFCLL);
                            v399 = &v382[-v398];
                            v392 = (_QWORD *)((char *)v392 - v398);
                            v400 = &v391[8 * v387 - 16];
                            v401 = v382 - 16;
                            v402 = v397 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v403 = *(_OWORD *)v401;
                              *(v400 - 1) = *((_OWORD *)v401 - 1);
                              *v400 = v403;
                              v400 -= 2;
                              v401 -= 32;
                              v402 -= 4;
                            }
                            while (v402);
                            v382 = v399;
                            if (v397 == (v397 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_396;
                          }
                        }
                        else
                        {
                          v197 = (char **)(a1 + 2648);
                        }
                        do
                        {
                          v404 = *((_QWORD *)v382 - 1);
                          v382 -= 8;
                          *--v392 = v404;
                        }
                        while (v382 != v385);
LABEL_396:
                        v382 = *v197;
LABEL_397:
                        *(_QWORD *)(a1 + 2648) = v392;
                        *(_QWORD *)(a1 + 2656) = v384;
                        *(_QWORD *)(a1 + 2664) = v393;
                        if (v382)
                          operator delete(v382);
LABEL_399:
                        *(_QWORD *)(a1 + 2656) = v384;
                        v405 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
                        *(_QWORD *)&v1637[0] = operator new[]();
                        bzero(*(void **)&v1637[0], (2 * v405));
                        sub_19C100F64(v1637, v405, 0.1);
                        v406 = *(_QWORD *)&v1637[0];
                        *(_QWORD *)(a1 + 272) = *(_QWORD *)&v1637[0];
                        v407 = *(char **)(a1 + 2656);
                        v408 = *(_QWORD *)(a1 + 2664);
                        if ((unint64_t)v407 < v408)
                        {
                          *(_QWORD *)v407 = v406;
                          v409 = (uint64_t)(v407 + 8);
                          goto LABEL_422;
                        }
                        v410 = *v197;
                        v411 = v407 - *v197;
                        v412 = v411 >> 3;
                        v413 = (v411 >> 3) + 1;
                        if (v413 >> 61)
                          goto LABEL_1700;
                        v414 = v408 - (_QWORD)v410;
                        if (v414 >> 2 > v413)
                          v413 = v414 >> 2;
                        if ((unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8)
                          v415 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v415 = v413;
                        if (v415)
                        {
                          if (v415 >> 61)
                            goto LABEL_1699;
                          v416 = operator new(8 * v415);
                          v417 = &v416[8 * v412];
                          v418 = &v416[8 * v415];
                          *v417 = v406;
                          v409 = (uint64_t)(v417 + 1);
                          v419 = (char *)(v407 - v410);
                          if (v407 != v410)
                          {
LABEL_410:
                            v420 = (unint64_t)(v419 - 8);
                            if (v420 >= 0x58)
                            {
                              v421 = v407 - v416 - v411;
                              v197 = (char **)(a1 + 2648);
                              if (v421 >= 0x20)
                              {
                                v422 = (v420 >> 3) + 1;
                                v423 = 8 * (v422 & 0x3FFFFFFFFFFFFFFCLL);
                                v424 = &v407[-v423];
                                v417 = (_QWORD *)((char *)v417 - v423);
                                v425 = &v416[8 * v412 - 16];
                                v426 = v407 - 16;
                                v427 = v422 & 0x3FFFFFFFFFFFFFFCLL;
                                do
                                {
                                  v428 = *(_OWORD *)v426;
                                  *(v425 - 1) = *((_OWORD *)v426 - 1);
                                  *v425 = v428;
                                  v425 -= 2;
                                  v426 -= 32;
                                  v427 -= 4;
                                }
                                while (v427);
                                v407 = v424;
                                if (v422 == (v422 & 0x3FFFFFFFFFFFFFFCLL))
                                  goto LABEL_419;
                              }
                            }
                            else
                            {
                              v197 = (char **)(a1 + 2648);
                            }
                            do
                            {
                              v429 = *((_QWORD *)v407 - 1);
                              v407 -= 8;
                              *--v417 = v429;
                            }
                            while (v407 != v410);
LABEL_419:
                            v407 = *v197;
LABEL_420:
                            *(_QWORD *)(a1 + 2648) = v417;
                            *(_QWORD *)(a1 + 2656) = v409;
                            *(_QWORD *)(a1 + 2664) = v418;
                            if (v407)
                              operator delete(v407);
LABEL_422:
                            *(_QWORD *)(a1 + 2656) = v409;
                            v430 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
                            *(_QWORD *)&v1637[0] = operator new[]();
                            bzero(*(void **)&v1637[0], (2 * v430));
                            sub_19C100F64(v1637, v430, 0.1);
                            v431 = *(_QWORD *)&v1637[0];
                            *(_QWORD *)(a1 + 280) = *(_QWORD *)&v1637[0];
                            v432 = *(char **)(a1 + 2656);
                            v433 = *(_QWORD *)(a1 + 2664);
                            if ((unint64_t)v432 < v433)
                            {
                              *(_QWORD *)v432 = v431;
                              v434 = (uint64_t)(v432 + 8);
                              goto LABEL_445;
                            }
                            v435 = *v197;
                            v436 = v432 - *v197;
                            v437 = v436 >> 3;
                            v438 = (v436 >> 3) + 1;
                            if (v438 >> 61)
                              goto LABEL_1700;
                            v439 = v433 - (_QWORD)v435;
                            if (v439 >> 2 > v438)
                              v438 = v439 >> 2;
                            if ((unint64_t)v439 >= 0x7FFFFFFFFFFFFFF8)
                              v440 = 0x1FFFFFFFFFFFFFFFLL;
                            else
                              v440 = v438;
                            if (v440)
                            {
                              if (v440 >> 61)
                                goto LABEL_1699;
                              v441 = operator new(8 * v440);
                              v442 = &v441[8 * v437];
                              v443 = &v441[8 * v440];
                              *v442 = v431;
                              v434 = (uint64_t)(v442 + 1);
                              v444 = (char *)(v432 - v435);
                              if (v432 != v435)
                              {
LABEL_433:
                                v445 = (unint64_t)(v444 - 8);
                                if (v445 >= 0x58)
                                {
                                  v446 = v432 - v441 - v436;
                                  v197 = (char **)(a1 + 2648);
                                  if (v446 >= 0x20)
                                  {
                                    v447 = (v445 >> 3) + 1;
                                    v448 = 8 * (v447 & 0x3FFFFFFFFFFFFFFCLL);
                                    v449 = &v432[-v448];
                                    v442 = (_QWORD *)((char *)v442 - v448);
                                    v450 = &v441[8 * v437 - 16];
                                    v451 = v432 - 16;
                                    v452 = v447 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v453 = *(_OWORD *)v451;
                                      *(v450 - 1) = *((_OWORD *)v451 - 1);
                                      *v450 = v453;
                                      v450 -= 2;
                                      v451 -= 32;
                                      v452 -= 4;
                                    }
                                    while (v452);
                                    v432 = v449;
                                    if (v447 == (v447 & 0x3FFFFFFFFFFFFFFCLL))
                                      goto LABEL_442;
                                  }
                                }
                                else
                                {
                                  v197 = (char **)(a1 + 2648);
                                }
                                do
                                {
                                  v454 = *((_QWORD *)v432 - 1);
                                  v432 -= 8;
                                  *--v442 = v454;
                                }
                                while (v432 != v435);
LABEL_442:
                                v432 = *v197;
LABEL_443:
                                *(_QWORD *)(a1 + 2648) = v442;
                                *(_QWORD *)(a1 + 2656) = v434;
                                *(_QWORD *)(a1 + 2664) = v443;
                                if (v432)
                                  operator delete(v432);
LABEL_445:
                                *(_QWORD *)(a1 + 2656) = v434;
                                v455 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
                                *(_QWORD *)&v1637[0] = operator new[]();
                                bzero(*(void **)&v1637[0], (2 * v455));
                                sub_19C100F64(v1637, v455, 0.1);
                                v456 = *(_QWORD *)&v1637[0];
                                *(_QWORD *)(a1 + 288) = *(_QWORD *)&v1637[0];
                                v457 = *(char **)(a1 + 2656);
                                v458 = *(_QWORD *)(a1 + 2664);
                                if ((unint64_t)v457 < v458)
                                {
                                  *(_QWORD *)v457 = v456;
                                  v459 = v457 + 8;
                                  goto LABEL_468;
                                }
                                v460 = *v197;
                                v461 = v457 - *v197;
                                v462 = v461 >> 3;
                                v463 = (v461 >> 3) + 1;
                                if (!(v463 >> 61))
                                {
                                  v464 = v458 - (_QWORD)v460;
                                  if (v464 >> 2 > v463)
                                    v463 = v464 >> 2;
                                  if ((unint64_t)v464 >= 0x7FFFFFFFFFFFFFF8)
                                    v465 = 0x1FFFFFFFFFFFFFFFLL;
                                  else
                                    v465 = v463;
                                  if (v465)
                                  {
                                    if (v465 >> 61)
                                      goto LABEL_1699;
                                    v466 = operator new(8 * v465);
                                  }
                                  else
                                  {
                                    v466 = 0;
                                  }
                                  v467 = &v466[8 * v462];
                                  v468 = &v466[8 * v465];
                                  *v467 = v456;
                                  v459 = v467 + 1;
                                  if (v457 == v460)
                                    goto LABEL_466;
                                  v469 = v457 - v460 - 8;
                                  if (v469 >= 0x58)
                                  {
                                    v470 = (char **)(a1 + 2648);
                                    if ((unint64_t)(v457 - v466 - v461) >= 0x20)
                                    {
                                      v471 = (v469 >> 3) + 1;
                                      v472 = 8 * (v471 & 0x3FFFFFFFFFFFFFFCLL);
                                      v473 = &v457[-v472];
                                      v467 = (_QWORD *)((char *)v467 - v472);
                                      v474 = &v466[8 * v462 - 16];
                                      v475 = v457 - 16;
                                      v476 = v471 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v477 = *(_OWORD *)v475;
                                        *(v474 - 1) = *((_OWORD *)v475 - 1);
                                        *v474 = v477;
                                        v474 -= 2;
                                        v475 -= 32;
                                        v476 -= 4;
                                      }
                                      while (v476);
                                      v457 = v473;
                                      if (v471 == (v471 & 0x3FFFFFFFFFFFFFFCLL))
                                        goto LABEL_465;
                                    }
                                  }
                                  else
                                  {
                                    v470 = (char **)(a1 + 2648);
                                  }
                                  do
                                  {
                                    v478 = *((_QWORD *)v457 - 1);
                                    v457 -= 8;
                                    *--v467 = v478;
                                  }
                                  while (v457 != v460);
LABEL_465:
                                  v457 = *v470;
LABEL_466:
                                  *(_QWORD *)(a1 + 2648) = v467;
                                  *(_QWORD *)(a1 + 2656) = v459;
                                  *(_QWORD *)(a1 + 2664) = v468;
                                  if (v457)
                                    operator delete(v457);
LABEL_468:
                                  *(_QWORD *)(a1 + 2656) = v459;
                                  if (*(_BYTE *)(a1 + 1697))
                                    goto LABEL_548;
LABEL_201:
                                  v193 = *(_QWORD *)(a1 + 2680);
                                  if (v193 && *(_BYTE *)(v193 + 384))
                                  {
                                    v194 = (_QWORD *)(v193 + 8 * v185);
                                    *(_QWORD *)(a1 + 296) = v194[49];
                                    *(_QWORD *)(a1 + 304) = v194[50];
                                    *(_QWORD *)(a1 + 312) = v194[51];
                                    goto LABEL_286;
                                  }
                                  v201 = *(_DWORD *)(a1 + 52);
                                  *(_QWORD *)&v1637[0] = operator new[]();
                                  sub_19C100F64(v1637, v201, 0.1);
                                  v202 = *(_QWORD *)&v1637[0];
                                  *(_QWORD *)(a1 + 296) = *(_QWORD *)&v1637[0];
                                  v203 = (char **)(a1 + 2648);
                                  v204 = *(char **)(a1 + 2656);
                                  v205 = *(_QWORD *)(a1 + 2664);
                                  if ((unint64_t)v204 >= v205)
                                  {
                                    v218 = *v203;
                                    v219 = v204 - *v203;
                                    v220 = v219 >> 3;
                                    v221 = (v219 >> 3) + 1;
                                    if (v221 >> 61)
                                      goto LABEL_1701;
                                    v222 = v205 - (_QWORD)v218;
                                    if (v222 >> 2 > v221)
                                      v221 = v222 >> 2;
                                    if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8)
                                      v223 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v223 = v221;
                                    if (v223)
                                    {
                                      if (v223 >> 61)
                                        goto LABEL_1699;
                                      v224 = operator new(8 * v223);
                                    }
                                    else
                                    {
                                      v224 = 0;
                                    }
                                    v225 = &v224[8 * v220];
                                    v226 = &v224[8 * v223];
                                    *v225 = v202;
                                    v206 = v225 + 1;
                                    if (v204 != v218)
                                    {
                                      v227 = v204 - v218 - 8;
                                      if (v227 < 0x58)
                                        goto LABEL_1711;
                                      if ((unint64_t)(v204 - v224 - v219) < 0x20)
                                        goto LABEL_1711;
                                      v228 = (v227 >> 3) + 1;
                                      v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
                                      v230 = &v204[-v229];
                                      v225 = (_QWORD *)((char *)v225 - v229);
                                      v231 = &v224[8 * v220 - 16];
                                      v232 = v204 - 16;
                                      v233 = v228 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v234 = *(_OWORD *)v232;
                                        *(v231 - 1) = *((_OWORD *)v232 - 1);
                                        *v231 = v234;
                                        v231 -= 2;
                                        v232 -= 32;
                                        v233 -= 4;
                                      }
                                      while (v233);
                                      v204 = v230;
                                      if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_1711:
                                        do
                                        {
                                          v235 = *((_QWORD *)v204 - 1);
                                          v204 -= 8;
                                          *--v225 = v235;
                                        }
                                        while (v204 != v218);
                                      }
                                      v204 = *v203;
                                    }
                                    *(_QWORD *)(a1 + 2648) = v225;
                                    *(_QWORD *)(a1 + 2656) = v206;
                                    *(_QWORD *)(a1 + 2664) = v226;
                                    if (v204)
                                      operator delete(v204);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v204 = v202;
                                    v206 = v204 + 8;
                                  }
                                  *(_QWORD *)(a1 + 2656) = v206;
                                  v236 = *(_DWORD *)(a1 + 52);
                                  *(_QWORD *)&v1637[0] = operator new[]();
                                  sub_19C100F64(v1637, v236, 0.1);
                                  v237 = *(_QWORD *)&v1637[0];
                                  *(_QWORD *)(a1 + 304) = *(_QWORD *)&v1637[0];
                                  v238 = *(char **)(a1 + 2656);
                                  v239 = *(_QWORD *)(a1 + 2664);
                                  if ((unint64_t)v238 >= v239)
                                  {
                                    v241 = *v203;
                                    v242 = v238 - *v203;
                                    v243 = v242 >> 3;
                                    v244 = (v242 >> 3) + 1;
                                    if (v244 >> 61)
                                      goto LABEL_1701;
                                    v245 = v239 - (_QWORD)v241;
                                    if (v245 >> 2 > v244)
                                      v244 = v245 >> 2;
                                    if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
                                      v246 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v246 = v244;
                                    if (v246)
                                    {
                                      if (v246 >> 61)
                                        goto LABEL_1699;
                                      v247 = operator new(8 * v246);
                                    }
                                    else
                                    {
                                      v247 = 0;
                                    }
                                    v248 = &v247[8 * v243];
                                    v249 = &v247[8 * v246];
                                    *v248 = v237;
                                    v240 = v248 + 1;
                                    if (v238 != v241)
                                    {
                                      v250 = v238 - v241 - 8;
                                      if (v250 < 0x58)
                                        goto LABEL_1712;
                                      if ((unint64_t)(v238 - v247 - v242) < 0x20)
                                        goto LABEL_1712;
                                      v251 = (v250 >> 3) + 1;
                                      v252 = 8 * (v251 & 0x3FFFFFFFFFFFFFFCLL);
                                      v253 = &v238[-v252];
                                      v248 = (_QWORD *)((char *)v248 - v252);
                                      v254 = &v247[8 * v243 - 16];
                                      v255 = v238 - 16;
                                      v256 = v251 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v257 = *(_OWORD *)v255;
                                        *(v254 - 1) = *((_OWORD *)v255 - 1);
                                        *v254 = v257;
                                        v254 -= 2;
                                        v255 -= 32;
                                        v256 -= 4;
                                      }
                                      while (v256);
                                      v238 = v253;
                                      if (v251 != (v251 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_1712:
                                        do
                                        {
                                          v258 = *((_QWORD *)v238 - 1);
                                          v238 -= 8;
                                          *--v248 = v258;
                                        }
                                        while (v238 != v241);
                                      }
                                      v238 = *v203;
                                    }
                                    *(_QWORD *)(a1 + 2648) = v248;
                                    *(_QWORD *)(a1 + 2656) = v240;
                                    *(_QWORD *)(a1 + 2664) = v249;
                                    if (v238)
                                      operator delete(v238);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v238 = v237;
                                    v240 = v238 + 8;
                                  }
                                  *(_QWORD *)(a1 + 2656) = v240;
                                  v259 = *(_DWORD *)(a1 + 52);
                                  *(_QWORD *)&v1637[0] = operator new[]();
                                  sub_19C100F64(v1637, v259, 0.1);
                                  v260 = *(_QWORD *)&v1637[0];
                                  *(_QWORD *)(a1 + 312) = *(_QWORD *)&v1637[0];
                                  v261 = *(char **)(a1 + 2656);
                                  v262 = *(_QWORD *)(a1 + 2664);
                                  if ((unint64_t)v261 >= v262)
                                  {
                                    v264 = *v203;
                                    v265 = v261 - *v203;
                                    v266 = v265 >> 3;
                                    v267 = (v265 >> 3) + 1;
                                    if (v267 >> 61)
                                      goto LABEL_1701;
                                    v268 = v262 - (_QWORD)v264;
                                    if (v268 >> 2 > v267)
                                      v267 = v268 >> 2;
                                    if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
                                      v269 = 0x1FFFFFFFFFFFFFFFLL;
                                    else
                                      v269 = v267;
                                    if (v269)
                                    {
                                      if (v269 >> 61)
                                        goto LABEL_1699;
                                      v270 = operator new(8 * v269);
                                    }
                                    else
                                    {
                                      v270 = 0;
                                    }
                                    v271 = &v270[8 * v266];
                                    v272 = &v270[8 * v269];
                                    *v271 = v260;
                                    v263 = v271 + 1;
                                    if (v261 != v264)
                                    {
                                      v273 = v261 - v264 - 8;
                                      if (v273 < 0x58)
                                        goto LABEL_1713;
                                      if ((unint64_t)(v261 - v270 - v265) < 0x20)
                                        goto LABEL_1713;
                                      v274 = (v273 >> 3) + 1;
                                      v275 = 8 * (v274 & 0x3FFFFFFFFFFFFFFCLL);
                                      v276 = &v261[-v275];
                                      v271 = (_QWORD *)((char *)v271 - v275);
                                      v277 = &v270[8 * v266 - 16];
                                      v278 = v261 - 16;
                                      v279 = v274 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        v280 = *(_OWORD *)v278;
                                        *(v277 - 1) = *((_OWORD *)v278 - 1);
                                        *v277 = v280;
                                        v277 -= 2;
                                        v278 -= 32;
                                        v279 -= 4;
                                      }
                                      while (v279);
                                      v261 = v276;
                                      if (v274 != (v274 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_1713:
                                        do
                                        {
                                          v281 = *((_QWORD *)v261 - 1);
                                          v261 -= 8;
                                          *--v271 = v281;
                                        }
                                        while (v261 != v264);
                                      }
                                      v261 = *v203;
                                    }
                                    *(_QWORD *)(a1 + 2648) = v271;
                                    *(_QWORD *)(a1 + 2656) = v263;
                                    *(_QWORD *)(a1 + 2664) = v272;
                                    if (v261)
                                      operator delete(v261);
                                  }
                                  else
                                  {
                                    *(_QWORD *)v261 = v260;
                                    v263 = v261 + 8;
                                  }
                                  *(_QWORD *)(a1 + 2656) = v263;
                                  v193 = *(_QWORD *)(a1 + 2680);
                                  if (v193)
                                  {
LABEL_286:
                                    if (*(_BYTE *)(v193 + 244))
                                    {
                                      v282 = (_QWORD *)(v193 + 8 * v184);
                                      *(_QWORD *)(a1 + 320) = v282[31];
                                      *(_QWORD *)(a1 + 328) = v282[32];
                                      *(_QWORD *)(a1 + 336) = v282[33];
                                      *(_QWORD *)(a1 + 344) = v282[34];
                                      goto LABEL_548;
                                    }
                                    v283 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C100F64(v1637, v283, 0.1);
                                    v284 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 320) = *(_QWORD *)&v1637[0];
                                    v285 = (char **)(a1 + 2648);
                                    v286 = *(char **)(a1 + 2656);
                                    v287 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v286 >= v287)
                                    {
                                      v289 = *v285;
                                      v290 = v286 - *v285;
                                      v291 = v290 >> 3;
                                      v292 = (v290 >> 3) + 1;
                                      if (v292 >> 61)
                                        goto LABEL_1701;
                                      v293 = v287 - (_QWORD)v289;
                                      if (v293 >> 2 > v292)
                                        v292 = v293 >> 2;
                                      if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
                                        v294 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v294 = v292;
                                      if (v294)
                                      {
                                        if (v294 >> 61)
                                          goto LABEL_1699;
                                        v295 = operator new(8 * v294);
                                      }
                                      else
                                      {
                                        v295 = 0;
                                      }
                                      v479 = &v295[8 * v291];
                                      v480 = &v295[8 * v294];
                                      *v479 = v284;
                                      v288 = v479 + 1;
                                      if (v286 != v289)
                                      {
                                        v481 = v286 - v289 - 8;
                                        if (v481 < 0x58)
                                          goto LABEL_1714;
                                        if ((unint64_t)(v286 - v295 - v290) < 0x20)
                                          goto LABEL_1714;
                                        v482 = (v481 >> 3) + 1;
                                        v483 = 8 * (v482 & 0x3FFFFFFFFFFFFFFCLL);
                                        v484 = &v286[-v483];
                                        v479 = (_QWORD *)((char *)v479 - v483);
                                        v485 = &v295[8 * v291 - 16];
                                        v486 = v286 - 16;
                                        v487 = v482 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v488 = *(_OWORD *)v486;
                                          *(v485 - 1) = *((_OWORD *)v486 - 1);
                                          *v485 = v488;
                                          v485 -= 2;
                                          v486 -= 32;
                                          v487 -= 4;
                                        }
                                        while (v487);
                                        v286 = v484;
                                        if (v482 != (v482 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1714:
                                          do
                                          {
                                            v489 = *((_QWORD *)v286 - 1);
                                            v286 -= 8;
                                            *--v479 = v489;
                                          }
                                          while (v286 != v289);
                                        }
                                        v286 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v479;
                                      *(_QWORD *)(a1 + 2656) = v288;
                                      *(_QWORD *)(a1 + 2664) = v480;
                                      if (v286)
                                        operator delete(v286);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v286 = v284;
                                      v288 = v286 + 8;
                                    }
                                    *(_QWORD *)(a1 + 2656) = v288;
                                    v490 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C100F64(v1637, v490, 0.1);
                                    v491 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 328) = *(_QWORD *)&v1637[0];
                                    v492 = *(char **)(a1 + 2656);
                                    v493 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v492 >= v493)
                                    {
                                      v495 = *v285;
                                      v496 = v492 - *v285;
                                      v497 = v496 >> 3;
                                      v498 = (v496 >> 3) + 1;
                                      if (v498 >> 61)
                                        goto LABEL_1701;
                                      v499 = v493 - (_QWORD)v495;
                                      if (v499 >> 2 > v498)
                                        v498 = v499 >> 2;
                                      if ((unint64_t)v499 >= 0x7FFFFFFFFFFFFFF8)
                                        v500 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v500 = v498;
                                      if (v500)
                                      {
                                        if (v500 >> 61)
                                          goto LABEL_1699;
                                        v501 = operator new(8 * v500);
                                      }
                                      else
                                      {
                                        v501 = 0;
                                      }
                                      v502 = &v501[8 * v497];
                                      v503 = &v501[8 * v500];
                                      *v502 = v491;
                                      v494 = v502 + 1;
                                      if (v492 != v495)
                                      {
                                        v504 = v492 - v495 - 8;
                                        if (v504 < 0x58)
                                          goto LABEL_1715;
                                        if ((unint64_t)(v492 - v501 - v496) < 0x20)
                                          goto LABEL_1715;
                                        v505 = (v504 >> 3) + 1;
                                        v506 = 8 * (v505 & 0x3FFFFFFFFFFFFFFCLL);
                                        v507 = &v492[-v506];
                                        v502 = (_QWORD *)((char *)v502 - v506);
                                        v508 = &v501[8 * v497 - 16];
                                        v509 = v492 - 16;
                                        v510 = v505 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v511 = *(_OWORD *)v509;
                                          *(v508 - 1) = *((_OWORD *)v509 - 1);
                                          *v508 = v511;
                                          v508 -= 2;
                                          v509 -= 32;
                                          v510 -= 4;
                                        }
                                        while (v510);
                                        v492 = v507;
                                        if (v505 != (v505 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1715:
                                          do
                                          {
                                            v512 = *((_QWORD *)v492 - 1);
                                            v492 -= 8;
                                            *--v502 = v512;
                                          }
                                          while (v492 != v495);
                                        }
                                        v492 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v502;
                                      *(_QWORD *)(a1 + 2656) = v494;
                                      *(_QWORD *)(a1 + 2664) = v503;
                                      if (v492)
                                        operator delete(v492);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v492 = v491;
                                      v494 = v492 + 8;
                                    }
                                    *(_QWORD *)(a1 + 2656) = v494;
                                    v513 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C100F64(v1637, v513, 0.1);
                                    v514 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 336) = *(_QWORD *)&v1637[0];
                                    v515 = *(char **)(a1 + 2656);
                                    v516 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v515 >= v516)
                                    {
                                      v518 = *v285;
                                      v519 = v515 - *v285;
                                      v520 = v519 >> 3;
                                      v521 = (v519 >> 3) + 1;
                                      if (v521 >> 61)
                                        goto LABEL_1701;
                                      v522 = v516 - (_QWORD)v518;
                                      if (v522 >> 2 > v521)
                                        v521 = v522 >> 2;
                                      if ((unint64_t)v522 >= 0x7FFFFFFFFFFFFFF8)
                                        v523 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v523 = v521;
                                      if (v523)
                                      {
                                        if (v523 >> 61)
                                          goto LABEL_1699;
                                        v524 = operator new(8 * v523);
                                      }
                                      else
                                      {
                                        v524 = 0;
                                      }
                                      v525 = &v524[8 * v520];
                                      v526 = &v524[8 * v523];
                                      *v525 = v514;
                                      v517 = v525 + 1;
                                      if (v515 != v518)
                                      {
                                        v527 = v515 - v518 - 8;
                                        if (v527 < 0x58)
                                          goto LABEL_1716;
                                        if ((unint64_t)(v515 - v524 - v519) < 0x20)
                                          goto LABEL_1716;
                                        v528 = (v527 >> 3) + 1;
                                        v529 = 8 * (v528 & 0x3FFFFFFFFFFFFFFCLL);
                                        v530 = &v515[-v529];
                                        v525 = (_QWORD *)((char *)v525 - v529);
                                        v531 = &v524[8 * v520 - 16];
                                        v532 = v515 - 16;
                                        v533 = v528 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v534 = *(_OWORD *)v532;
                                          *(v531 - 1) = *((_OWORD *)v532 - 1);
                                          *v531 = v534;
                                          v531 -= 2;
                                          v532 -= 32;
                                          v533 -= 4;
                                        }
                                        while (v533);
                                        v515 = v530;
                                        if (v528 != (v528 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1716:
                                          do
                                          {
                                            v535 = *((_QWORD *)v515 - 1);
                                            v515 -= 8;
                                            *--v525 = v535;
                                          }
                                          while (v515 != v518);
                                        }
                                        v515 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v525;
                                      *(_QWORD *)(a1 + 2656) = v517;
                                      *(_QWORD *)(a1 + 2664) = v526;
                                      if (v515)
                                        operator delete(v515);
                                    }
                                    else
                                    {
                                      *(_QWORD *)v515 = v514;
                                      v517 = v515 + 8;
                                    }
                                    *(_QWORD *)(a1 + 2656) = v517;
                                    v536 = *(_DWORD *)(a1 + 52);
                                    *(_QWORD *)&v1637[0] = operator new[]();
                                    sub_19C100F64(v1637, v536, 0.1);
                                    v537 = *(_QWORD *)&v1637[0];
                                    *(_QWORD *)(a1 + 344) = *(_QWORD *)&v1637[0];
                                    v538 = *(char **)(a1 + 2656);
                                    v539 = *(_QWORD *)(a1 + 2664);
                                    if ((unint64_t)v538 < v539)
                                    {
                                      *(_QWORD *)v538 = v537;
                                      v540 = v538 + 8;
LABEL_547:
                                      *(_QWORD *)(a1 + 2656) = v540;
                                      goto LABEL_548;
                                    }
                                    v541 = *v285;
                                    v542 = v538 - *v285;
                                    v543 = v542 >> 3;
                                    v544 = (v542 >> 3) + 1;
                                    if (!(v544 >> 61))
                                    {
                                      v545 = v539 - (_QWORD)v541;
                                      if (v545 >> 2 > v544)
                                        v544 = v545 >> 2;
                                      if ((unint64_t)v545 >= 0x7FFFFFFFFFFFFFF8)
                                        v546 = 0x1FFFFFFFFFFFFFFFLL;
                                      else
                                        v546 = v544;
                                      if (v546)
                                      {
                                        if (v546 >> 61)
                                          goto LABEL_1699;
                                        v547 = operator new(8 * v546);
                                      }
                                      else
                                      {
                                        v547 = 0;
                                      }
                                      v548 = &v547[8 * v543];
                                      v549 = &v547[8 * v546];
                                      *v548 = v537;
                                      v540 = v548 + 1;
                                      if (v538 != v541)
                                      {
                                        v550 = v538 - v541 - 8;
                                        if (v550 < 0x58)
                                          goto LABEL_1717;
                                        if ((unint64_t)(v538 - v547 - v542) < 0x20)
                                          goto LABEL_1717;
                                        v551 = (v550 >> 3) + 1;
                                        v552 = 8 * (v551 & 0x3FFFFFFFFFFFFFFCLL);
                                        v553 = &v538[-v552];
                                        v548 = (_QWORD *)((char *)v548 - v552);
                                        v554 = &v547[8 * v543 - 16];
                                        v555 = v538 - 16;
                                        v556 = v551 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v557 = *(_OWORD *)v555;
                                          *(v554 - 1) = *((_OWORD *)v555 - 1);
                                          *v554 = v557;
                                          v554 -= 2;
                                          v555 -= 32;
                                          v556 -= 4;
                                        }
                                        while (v556);
                                        v538 = v553;
                                        if (v551 != (v551 & 0x3FFFFFFFFFFFFFFCLL))
                                        {
LABEL_1717:
                                          do
                                          {
                                            v558 = *((_QWORD *)v538 - 1);
                                            v538 -= 8;
                                            *--v548 = v558;
                                          }
                                          while (v538 != v541);
                                        }
                                        v538 = *v285;
                                      }
                                      *(_QWORD *)(a1 + 2648) = v548;
                                      *(_QWORD *)(a1 + 2656) = v540;
                                      *(_QWORD *)(a1 + 2664) = v549;
                                      if (v538)
                                        operator delete(v538);
                                      goto LABEL_547;
                                    }
LABEL_1701:
                                    sub_19C07DA0C();
                                  }
LABEL_548:
                                  *(_QWORD *)(a1 + 2504) = a1 + 232;
                                  *(_QWORD *)(a1 + 2512) = a1 + 240;
                                  *(_QWORD *)(a1 + 2520) = a1 + 248;
                                  *(_QWORD *)(a1 + 2528) = a1 + 256;
                                  *(_QWORD *)(a1 + 2536) = a1 + 264;
                                  *(_QWORD *)(a1 + 2544) = a1 + 272;
                                  *(_QWORD *)(a1 + 2552) = a1 + 280;
                                  *(_QWORD *)(a1 + 2560) = a1 + 288;
                                  *(_QWORD *)(a1 + 2568) = a1 + 296;
                                  *(_QWORD *)(a1 + 2576) = a1 + 304;
                                  *(_QWORD *)(a1 + 2584) = a1 + 312;
                                  *(_QWORD *)(a1 + 2592) = a1 + 320;
                                  *(_QWORD *)(a1 + 2600) = a1 + 328;
                                  *(_QWORD *)(a1 + 2608) = a1 + 336;
                                  *(_QWORD *)(a1 + 2616) = a1 + 344;
                                  goto LABEL_549;
                                }
LABEL_1700:
                                sub_19C07DA0C();
                              }
                            }
                            else
                            {
                              v441 = 0;
                              v442 = (_QWORD *)(8 * v437);
                              v443 = 0;
                              *(_QWORD *)(8 * v437) = v431;
                              v434 = 8 * v437 + 8;
                              v444 = (char *)(v432 - v435);
                              if (v432 != v435)
                                goto LABEL_433;
                            }
                            v197 = (char **)(a1 + 2648);
                            goto LABEL_443;
                          }
                        }
                        else
                        {
                          v416 = 0;
                          v417 = (_QWORD *)(8 * v412);
                          v418 = 0;
                          *(_QWORD *)(8 * v412) = v406;
                          v409 = 8 * v412 + 8;
                          v419 = (char *)(v407 - v410);
                          if (v407 != v410)
                            goto LABEL_410;
                        }
                        v197 = (char **)(a1 + 2648);
                        goto LABEL_420;
                      }
                    }
                    else
                    {
                      v391 = 0;
                      v392 = (_QWORD *)(8 * v387);
                      v393 = 0;
                      *(_QWORD *)(8 * v387) = v381;
                      v384 = 8 * v387 + 8;
                      v394 = (char *)(v382 - v385);
                      if (v382 != v385)
                        goto LABEL_387;
                    }
                    v197 = (char **)(a1 + 2648);
                    goto LABEL_397;
                  }
                }
                else
                {
                  v366 = 0;
                  v367 = (_QWORD *)(8 * v362);
                  v368 = 0;
                  *(_QWORD *)(8 * v362) = v356;
                  v359 = 8 * v362 + 8;
                  v369 = (char *)(v357 - v360);
                  if (v357 != v360)
                    goto LABEL_364;
                }
                v197 = (char **)(a1 + 2648);
                goto LABEL_374;
              }
            }
            else
            {
              v341 = 0;
              v342 = (_QWORD *)(8 * v337);
              v343 = 0;
              *(_QWORD *)(8 * v337) = v331;
              v334 = 8 * v337 + 8;
              v344 = (char *)(v332 - v335);
              if (v332 != v335)
                goto LABEL_341;
            }
            v197 = (char **)(a1 + 2648);
            goto LABEL_351;
          }
        }
        else
        {
          v316 = 0;
          v317 = (_QWORD *)(8 * v312);
          v318 = 0;
          *(_QWORD *)(8 * v312) = v306;
          v309 = 8 * v312 + 8;
          v319 = (char *)(v307 - v310);
          if (v307 != v310)
            goto LABEL_318;
        }
        v197 = (char **)(a1 + 2648);
        goto LABEL_328;
      }
    }
    else
    {
      v213 = 0;
      v214 = (_QWORD *)(8 * v209);
      v215 = 0;
      *(_QWORD *)(8 * v209) = v196;
      v200 = 8 * v209 + 8;
      v216 = (char *)(v198 - v207);
      if (v198 != v207)
        goto LABEL_217;
    }
    v197 = (char **)(a1 + 2648);
    goto LABEL_305;
  }
LABEL_549:
  v559 = *(unsigned int *)(a1 + 52);
  v560 = (void *)operator new[]();
  v561 = v560;
  if ((int)v559 >= 1)
    bzero(v560, 4 * v559);
  *(_QWORD *)(a1 + 760) = v561;
  v562 = *(char **)(a1 + 2632);
  v563 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v562 < v563)
  {
    *(_QWORD *)v562 = v561;
    v564 = (uint64_t)(v562 + 8);
    goto LABEL_573;
  }
  v565 = *v5;
  v566 = v562 - *v5;
  v567 = v566 >> 3;
  v568 = (v566 >> 3) + 1;
  if (v568 >> 61)
    goto LABEL_1698;
  v569 = v563 - (_QWORD)v565;
  if (v569 >> 2 > v568)
    v568 = v569 >> 2;
  if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFF8)
    v570 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v570 = v568;
  if (v570)
  {
    if (v570 >> 61)
      goto LABEL_1699;
    v571 = operator new(8 * v570);
    v572 = &v571[8 * v567];
    v573 = &v571[8 * v570];
    *v572 = v561;
    v564 = (uint64_t)(v572 + 1);
    v574 = (char *)(v562 - v565);
    if (v562 == v565)
      goto LABEL_571;
    goto LABEL_564;
  }
  v571 = 0;
  v572 = (_QWORD *)(8 * v567);
  v573 = 0;
  *(_QWORD *)(8 * v567) = v561;
  v564 = 8 * v567 + 8;
  v574 = (char *)(v562 - v565);
  if (v562 != v565)
  {
LABEL_564:
    v575 = (unint64_t)(v574 - 8);
    if (v575 < 0x58)
      goto LABEL_1718;
    if ((unint64_t)(v562 - v571 - v566) < 0x20)
      goto LABEL_1718;
    v576 = (v575 >> 3) + 1;
    v577 = 8 * (v576 & 0x3FFFFFFFFFFFFFFCLL);
    v578 = &v562[-v577];
    v572 = (_QWORD *)((char *)v572 - v577);
    v579 = &v571[8 * v567 - 16];
    v580 = v562 - 16;
    v581 = v576 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v582 = *(_OWORD *)v580;
      *(v579 - 1) = *((_OWORD *)v580 - 1);
      *v579 = v582;
      v579 -= 2;
      v580 -= 32;
      v581 -= 4;
    }
    while (v581);
    v562 = v578;
    if (v576 != (v576 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1718:
      do
      {
        v583 = *((_QWORD *)v562 - 1);
        v562 -= 8;
        *--v572 = v583;
      }
      while (v562 != v565);
    }
    v562 = *v5;
  }
LABEL_571:
  *(_QWORD *)(a1 + 2624) = v572;
  *(_QWORD *)(a1 + 2632) = v564;
  *(_QWORD *)(a1 + 2640) = v573;
  if (v562)
    operator delete(v562);
LABEL_573:
  *(_QWORD *)(a1 + 2632) = v564;
  v584 = *(unsigned int *)(a1 + 52);
  v585 = (void *)operator new[]();
  v586 = v585;
  if ((int)v584 >= 1)
    bzero(v585, 4 * v584);
  *(_QWORD *)(a1 + 768) = v586;
  v587 = *(char **)(a1 + 2632);
  v588 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v587 < v588)
  {
    *(_QWORD *)v587 = v586;
    v589 = (uint64_t)(v587 + 8);
    goto LABEL_597;
  }
  v590 = *v5;
  v591 = v587 - *v5;
  v592 = v591 >> 3;
  v593 = (v591 >> 3) + 1;
  if (v593 >> 61)
    goto LABEL_1698;
  v594 = v588 - (_QWORD)v590;
  if (v594 >> 2 > v593)
    v593 = v594 >> 2;
  if ((unint64_t)v594 >= 0x7FFFFFFFFFFFFFF8)
    v595 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v595 = v593;
  if (v595)
  {
    if (v595 >> 61)
      goto LABEL_1699;
    v596 = operator new(8 * v595);
    v597 = &v596[8 * v592];
    v598 = &v596[8 * v595];
    *v597 = v586;
    v589 = (uint64_t)(v597 + 1);
    v599 = (char *)(v587 - v590);
    if (v587 == v590)
      goto LABEL_595;
    goto LABEL_588;
  }
  v596 = 0;
  v597 = (_QWORD *)(8 * v592);
  v598 = 0;
  *(_QWORD *)(8 * v592) = v586;
  v589 = 8 * v592 + 8;
  v599 = (char *)(v587 - v590);
  if (v587 != v590)
  {
LABEL_588:
    v600 = (unint64_t)(v599 - 8);
    if (v600 < 0x58)
      goto LABEL_1719;
    if ((unint64_t)(v587 - v596 - v591) < 0x20)
      goto LABEL_1719;
    v601 = (v600 >> 3) + 1;
    v602 = 8 * (v601 & 0x3FFFFFFFFFFFFFFCLL);
    v603 = &v587[-v602];
    v597 = (_QWORD *)((char *)v597 - v602);
    v604 = &v596[8 * v592 - 16];
    v605 = v587 - 16;
    v606 = v601 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v607 = *(_OWORD *)v605;
      *(v604 - 1) = *((_OWORD *)v605 - 1);
      *v604 = v607;
      v604 -= 2;
      v605 -= 32;
      v606 -= 4;
    }
    while (v606);
    v587 = v603;
    if (v601 != (v601 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1719:
      do
      {
        v608 = *((_QWORD *)v587 - 1);
        v587 -= 8;
        *--v597 = v608;
      }
      while (v587 != v590);
    }
    v587 = *v5;
  }
LABEL_595:
  *(_QWORD *)(a1 + 2624) = v597;
  *(_QWORD *)(a1 + 2632) = v589;
  *(_QWORD *)(a1 + 2640) = v598;
  if (v587)
    operator delete(v587);
LABEL_597:
  *(_QWORD *)(a1 + 2632) = v589;
  v609 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
  v610 = (void *)operator new[]();
  bzero(v610, 4 * v609);
  *(_QWORD *)(a1 + 752) = v610;
  v611 = *(char **)(a1 + 2632);
  v612 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v611 < v612)
  {
    *(_QWORD *)v611 = v610;
    v613 = (uint64_t)(v611 + 8);
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    goto LABEL_616;
  }
  v615 = *v5;
  v616 = v611 - *v5;
  v617 = v616 >> 3;
  v618 = (v616 >> 3) + 1;
  if (v618 >> 61)
    goto LABEL_1698;
  v619 = v612 - (_QWORD)v615;
  if (v619 >> 2 > v618)
    v618 = v619 >> 2;
  if ((unint64_t)v619 >= 0x7FFFFFFFFFFFFFF8)
    v620 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v620 = v618;
  if (v620)
  {
    if (v620 >> 61)
      goto LABEL_1699;
    v621 = operator new(8 * v620);
    v622 = &v621[8 * v617];
    v623 = &v621[8 * v620];
    *v622 = v610;
    v613 = (uint64_t)(v622 + 1);
    v624 = (char *)(v611 - v615);
    if (v611 != v615)
    {
LABEL_608:
      v625 = (unint64_t)(v624 - 8);
      p_vtable = MLPNDArrayLossLabels.vtable;
      if (v625 < 0x58)
        goto LABEL_1720;
      if ((unint64_t)(v611 - v621 - v616) < 0x20)
        goto LABEL_1720;
      v626 = (v625 >> 3) + 1;
      v627 = 8 * (v626 & 0x3FFFFFFFFFFFFFFCLL);
      v628 = &v611[-v627];
      v622 = (_QWORD *)((char *)v622 - v627);
      v629 = &v621[8 * v617 - 16];
      v630 = v611 - 16;
      v631 = v626 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v632 = *(_OWORD *)v630;
        *(v629 - 1) = *((_OWORD *)v630 - 1);
        *v629 = v632;
        v629 -= 2;
        v630 -= 32;
        v631 -= 4;
      }
      while (v631);
      v611 = v628;
      if (v626 != (v626 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1720:
        do
        {
          v633 = *((_QWORD *)v611 - 1);
          v611 -= 8;
          *--v622 = v633;
        }
        while (v611 != v615);
      }
      v611 = *v5;
      *(_QWORD *)(a1 + 2624) = v622;
      *(_QWORD *)(a1 + 2632) = v613;
      *(_QWORD *)(a1 + 2640) = v623;
      if (v611)
        goto LABEL_615;
      goto LABEL_616;
    }
  }
  else
  {
    v621 = 0;
    v622 = (_QWORD *)(8 * v617);
    v623 = 0;
    *(_QWORD *)(8 * v617) = v610;
    v613 = 8 * v617 + 8;
    v624 = (char *)(v611 - v615);
    if (v611 != v615)
      goto LABEL_608;
  }
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
  *(_QWORD *)(a1 + 2624) = v622;
  *(_QWORD *)(a1 + 2632) = v613;
  *(_QWORD *)(a1 + 2640) = v623;
  if (v611)
LABEL_615:
    operator delete(v611);
LABEL_616:
  *(_QWORD *)(a1 + 2632) = v613;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_870;
  if (*(_DWORD *)(a1 + 56))
  {
    v634 = *(unsigned __int8 *)(a1 + 40) + 1;
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 984), v1637);
    sub_19C101AC4(v1637);
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 1104), v1637);
    sub_19C101AC4(v1637);
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 1224), v1637);
    sub_19C101AC4(v1637);
    sub_19C100764((uint64_t)v1637, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *((_DWORD *)p_vtable + 602), v634);
    sub_19C1007E8((unsigned int *)(a1 + 1344), v1637);
    sub_19C101AC4(v1637);
    goto LABEL_711;
  }
  v635 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v636 = (void *)operator new[]();
  bzero(v636, 4 * v635);
  *(_QWORD *)(a1 + 1464) = v636;
  v637 = *(char **)(a1 + 2632);
  v638 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v637 < v638)
  {
    *(_QWORD *)v637 = v636;
    v639 = (uint64_t)(v637 + 8);
    goto LABEL_644;
  }
  v640 = *v5;
  v641 = v637 - *v5;
  v642 = v641 >> 3;
  v643 = (v641 >> 3) + 1;
  if (v643 >> 61)
    goto LABEL_1698;
  v644 = v638 - (_QWORD)v640;
  if (v644 >> 2 > v643)
    v643 = v644 >> 2;
  if ((unint64_t)v644 >= 0x7FFFFFFFFFFFFFF8)
    v645 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v645 = v643;
  if (v645)
  {
    if (v645 >> 61)
      goto LABEL_1699;
    v646 = operator new(8 * v645);
    v647 = &v646[8 * v642];
    v648 = &v646[8 * v645];
    *v647 = v636;
    v639 = (uint64_t)(v647 + 1);
    v649 = (char *)(v637 - v640);
    if (v637 == v640)
      goto LABEL_642;
    goto LABEL_635;
  }
  v646 = 0;
  v647 = (_QWORD *)(8 * v642);
  v648 = 0;
  *(_QWORD *)(8 * v642) = v636;
  v639 = 8 * v642 + 8;
  v649 = (char *)(v637 - v640);
  if (v637 != v640)
  {
LABEL_635:
    v650 = (unint64_t)(v649 - 8);
    if (v650 < 0x58)
      goto LABEL_1721;
    if ((unint64_t)(v637 - v646 - v641) < 0x20)
      goto LABEL_1721;
    v651 = (v650 >> 3) + 1;
    v652 = 8 * (v651 & 0x3FFFFFFFFFFFFFFCLL);
    v653 = &v637[-v652];
    v647 = (_QWORD *)((char *)v647 - v652);
    v654 = &v646[8 * v642 - 16];
    v655 = v637 - 16;
    v656 = v651 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v657 = *(_OWORD *)v655;
      *(v654 - 1) = *((_OWORD *)v655 - 1);
      *v654 = v657;
      v654 -= 2;
      v655 -= 32;
      v656 -= 4;
    }
    while (v656);
    v637 = v653;
    if (v651 != (v651 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1721:
      do
      {
        v658 = *((_QWORD *)v637 - 1);
        v637 -= 8;
        *--v647 = v658;
      }
      while (v637 != v640);
    }
    v637 = *v5;
  }
LABEL_642:
  *(_QWORD *)(a1 + 2624) = v647;
  *(_QWORD *)(a1 + 2632) = v639;
  *(_QWORD *)(a1 + 2640) = v648;
  if (v637)
    operator delete(v637);
LABEL_644:
  *(_QWORD *)(a1 + 2632) = v639;
  v659 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v660 = (void *)operator new[]();
  bzero(v660, 4 * v659);
  *(_QWORD *)(a1 + 1472) = v660;
  v661 = *(char **)(a1 + 2632);
  v662 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v661 < v662)
  {
    *(_QWORD *)v661 = v660;
    v663 = (uint64_t)(v661 + 8);
    goto LABEL_666;
  }
  v664 = *v5;
  v665 = v661 - *v5;
  v666 = v665 >> 3;
  v667 = (v665 >> 3) + 1;
  if (v667 >> 61)
    goto LABEL_1698;
  v668 = v662 - (_QWORD)v664;
  if (v668 >> 2 > v667)
    v667 = v668 >> 2;
  if ((unint64_t)v668 >= 0x7FFFFFFFFFFFFFF8)
    v669 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v669 = v667;
  if (v669)
  {
    if (v669 >> 61)
      goto LABEL_1699;
    v670 = operator new(8 * v669);
    v671 = &v670[8 * v666];
    v672 = &v670[8 * v669];
    *v671 = v660;
    v663 = (uint64_t)(v671 + 1);
    v673 = (char *)(v661 - v664);
    if (v661 == v664)
      goto LABEL_664;
    goto LABEL_657;
  }
  v670 = 0;
  v671 = (_QWORD *)(8 * v666);
  v672 = 0;
  *(_QWORD *)(8 * v666) = v660;
  v663 = 8 * v666 + 8;
  v673 = (char *)(v661 - v664);
  if (v661 != v664)
  {
LABEL_657:
    v674 = (unint64_t)(v673 - 8);
    if (v674 < 0x58)
      goto LABEL_1722;
    if ((unint64_t)(v661 - v670 - v665) < 0x20)
      goto LABEL_1722;
    v675 = (v674 >> 3) + 1;
    v676 = 8 * (v675 & 0x3FFFFFFFFFFFFFFCLL);
    v677 = &v661[-v676];
    v671 = (_QWORD *)((char *)v671 - v676);
    v678 = &v670[8 * v666 - 16];
    v679 = v661 - 16;
    v680 = v675 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v681 = *(_OWORD *)v679;
      *(v678 - 1) = *((_OWORD *)v679 - 1);
      *v678 = v681;
      v678 -= 2;
      v679 -= 32;
      v680 -= 4;
    }
    while (v680);
    v661 = v677;
    if (v675 != (v675 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1722:
      do
      {
        v682 = *((_QWORD *)v661 - 1);
        v661 -= 8;
        *--v671 = v682;
      }
      while (v661 != v664);
    }
    v661 = *v5;
  }
LABEL_664:
  *(_QWORD *)(a1 + 2624) = v671;
  *(_QWORD *)(a1 + 2632) = v663;
  *(_QWORD *)(a1 + 2640) = v672;
  if (v661)
    operator delete(v661);
LABEL_666:
  *(_QWORD *)(a1 + 2632) = v663;
  v683 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v684 = (void *)operator new[]();
  bzero(v684, 4 * v683);
  *(_QWORD *)(a1 + 1480) = v684;
  v685 = *(char **)(a1 + 2632);
  v686 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v685 < v686)
  {
    *(_QWORD *)v685 = v684;
    v687 = (uint64_t)(v685 + 8);
    goto LABEL_688;
  }
  v688 = *v5;
  v689 = v685 - *v5;
  v690 = v689 >> 3;
  v691 = (v689 >> 3) + 1;
  if (v691 >> 61)
    goto LABEL_1698;
  v692 = v686 - (_QWORD)v688;
  if (v692 >> 2 > v691)
    v691 = v692 >> 2;
  if ((unint64_t)v692 >= 0x7FFFFFFFFFFFFFF8)
    v693 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v693 = v691;
  if (v693)
  {
    if (v693 >> 61)
      goto LABEL_1699;
    v694 = operator new(8 * v693);
    v695 = &v694[8 * v690];
    v696 = &v694[8 * v693];
    *v695 = v684;
    v687 = (uint64_t)(v695 + 1);
    v697 = (char *)(v685 - v688);
    if (v685 == v688)
      goto LABEL_686;
    goto LABEL_679;
  }
  v694 = 0;
  v695 = (_QWORD *)(8 * v690);
  v696 = 0;
  *(_QWORD *)(8 * v690) = v684;
  v687 = 8 * v690 + 8;
  v697 = (char *)(v685 - v688);
  if (v685 != v688)
  {
LABEL_679:
    v698 = (unint64_t)(v697 - 8);
    if (v698 < 0x58)
      goto LABEL_1723;
    if ((unint64_t)(v685 - v694 - v689) < 0x20)
      goto LABEL_1723;
    v699 = (v698 >> 3) + 1;
    v700 = 8 * (v699 & 0x3FFFFFFFFFFFFFFCLL);
    v701 = &v685[-v700];
    v695 = (_QWORD *)((char *)v695 - v700);
    v702 = &v694[8 * v690 - 16];
    v703 = v685 - 16;
    v704 = v699 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v705 = *(_OWORD *)v703;
      *(v702 - 1) = *((_OWORD *)v703 - 1);
      *v702 = v705;
      v702 -= 2;
      v703 -= 32;
      v704 -= 4;
    }
    while (v704);
    v685 = v701;
    if (v699 != (v699 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1723:
      do
      {
        v706 = *((_QWORD *)v685 - 1);
        v685 -= 8;
        *--v695 = v706;
      }
      while (v685 != v688);
    }
    v685 = *v5;
  }
LABEL_686:
  *(_QWORD *)(a1 + 2624) = v695;
  *(_QWORD *)(a1 + 2632) = v687;
  *(_QWORD *)(a1 + 2640) = v696;
  if (v685)
    operator delete(v685);
LABEL_688:
  *(_QWORD *)(a1 + 2632) = v687;
  v707 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
  v708 = (void *)operator new[]();
  bzero(v708, 4 * v707);
  *(_QWORD *)(a1 + 1488) = v708;
  v709 = *(char **)(a1 + 2632);
  v710 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v709 < v710)
  {
    *(_QWORD *)v709 = v708;
    *(_QWORD *)(a1 + 2632) = v709 + 8;
    goto LABEL_711;
  }
  v711 = *v5;
  v712 = v709 - *v5;
  v713 = v712 >> 3;
  v714 = (v712 >> 3) + 1;
  if (v714 >> 61)
    goto LABEL_1698;
  v715 = v710 - (_QWORD)v711;
  if (v715 >> 2 > v714)
    v714 = v715 >> 2;
  if ((unint64_t)v715 >= 0x7FFFFFFFFFFFFFF8)
    v716 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v716 = v714;
  if (v716)
  {
    if (v716 >> 61)
      goto LABEL_1699;
    v717 = operator new(8 * v716);
    v718 = &v717[8 * v713];
    v719 = &v717[8 * v716];
    *v718 = v708;
    v720 = (uint64_t)(v718 + 1);
    v721 = (char *)(v709 - v711);
    if (v709 == v711)
      goto LABEL_708;
    goto LABEL_701;
  }
  v717 = 0;
  v718 = (_QWORD *)(8 * v713);
  v719 = 0;
  *(_QWORD *)(8 * v713) = v708;
  v720 = 8 * v713 + 8;
  v721 = (char *)(v709 - v711);
  if (v709 != v711)
  {
LABEL_701:
    v722 = (unint64_t)(v721 - 8);
    if (v722 < 0x58)
      goto LABEL_1724;
    if ((unint64_t)(v709 - v717 - v712) < 0x20)
      goto LABEL_1724;
    v723 = (v722 >> 3) + 1;
    v724 = 8 * (v723 & 0x3FFFFFFFFFFFFFFCLL);
    v725 = &v709[-v724];
    v718 = (_QWORD *)((char *)v718 - v724);
    v726 = &v717[8 * v713 - 16];
    v727 = v709 - 16;
    v728 = v723 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v729 = *(_OWORD *)v727;
      *(v726 - 1) = *((_OWORD *)v727 - 1);
      *v726 = v729;
      v726 -= 2;
      v727 -= 32;
      v728 -= 4;
    }
    while (v728);
    v709 = v725;
    if (v723 != (v723 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1724:
      do
      {
        v730 = *((_QWORD *)v709 - 1);
        v709 -= 8;
        *--v718 = v730;
      }
      while (v709 != v711);
    }
    v709 = *v5;
  }
LABEL_708:
  *(_QWORD *)(a1 + 2624) = v718;
  *(_QWORD *)(a1 + 2632) = v720;
  *(_QWORD *)(a1 + 2640) = v719;
  if (v709)
    operator delete(v709);
  *(_QWORD *)(a1 + 2632) = v720;
LABEL_711:
  v731 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v732 = (void *)operator new[]();
  bzero(v732, 4 * v731);
  *(_QWORD *)(a1 + 1496) = v732;
  v733 = *(char **)(a1 + 2632);
  v734 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v733 < v734)
  {
    *(_QWORD *)v733 = v732;
    v735 = (uint64_t)(v733 + 8);
    goto LABEL_733;
  }
  v736 = *v5;
  v737 = v733 - *v5;
  v738 = v737 >> 3;
  v739 = (v737 >> 3) + 1;
  if (v739 >> 61)
    goto LABEL_1698;
  v740 = v734 - (_QWORD)v736;
  if (v740 >> 2 > v739)
    v739 = v740 >> 2;
  if ((unint64_t)v740 >= 0x7FFFFFFFFFFFFFF8)
    v741 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v741 = v739;
  if (v741)
  {
    if (v741 >> 61)
      goto LABEL_1699;
    v742 = operator new(8 * v741);
    v743 = &v742[8 * v738];
    v744 = &v742[8 * v741];
    *v743 = v732;
    v735 = (uint64_t)(v743 + 1);
    v745 = (char *)(v733 - v736);
    if (v733 == v736)
      goto LABEL_731;
    goto LABEL_724;
  }
  v742 = 0;
  v743 = (_QWORD *)(8 * v738);
  v744 = 0;
  *(_QWORD *)(8 * v738) = v732;
  v735 = 8 * v738 + 8;
  v745 = (char *)(v733 - v736);
  if (v733 != v736)
  {
LABEL_724:
    v746 = (unint64_t)(v745 - 8);
    if (v746 < 0x58)
      goto LABEL_1725;
    if ((unint64_t)(v733 - v742 - v737) < 0x20)
      goto LABEL_1725;
    v747 = (v746 >> 3) + 1;
    v748 = 8 * (v747 & 0x3FFFFFFFFFFFFFFCLL);
    v749 = &v733[-v748];
    v743 = (_QWORD *)((char *)v743 - v748);
    v750 = &v742[8 * v738 - 16];
    v751 = v733 - 16;
    v752 = v747 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v753 = *(_OWORD *)v751;
      *(v750 - 1) = *((_OWORD *)v751 - 1);
      *v750 = v753;
      v750 -= 2;
      v751 -= 32;
      v752 -= 4;
    }
    while (v752);
    v733 = v749;
    if (v747 != (v747 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1725:
      do
      {
        v754 = *((_QWORD *)v733 - 1);
        v733 -= 8;
        *--v743 = v754;
      }
      while (v733 != v736);
    }
    v733 = *v5;
  }
LABEL_731:
  *(_QWORD *)(a1 + 2624) = v743;
  *(_QWORD *)(a1 + 2632) = v735;
  *(_QWORD *)(a1 + 2640) = v744;
  if (v733)
    operator delete(v733);
LABEL_733:
  *(_QWORD *)(a1 + 2632) = v735;
  v755 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v756 = (void *)operator new[]();
  bzero(v756, 4 * v755);
  *(_QWORD *)(a1 + 1504) = v756;
  v757 = *(char **)(a1 + 2632);
  v758 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v757 < v758)
  {
    *(_QWORD *)v757 = v756;
    v759 = (uint64_t)(v757 + 8);
    goto LABEL_755;
  }
  v760 = *v5;
  v761 = v757 - *v5;
  v762 = v761 >> 3;
  v763 = (v761 >> 3) + 1;
  if (v763 >> 61)
    goto LABEL_1698;
  v764 = v758 - (_QWORD)v760;
  if (v764 >> 2 > v763)
    v763 = v764 >> 2;
  if ((unint64_t)v764 >= 0x7FFFFFFFFFFFFFF8)
    v765 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v765 = v763;
  if (v765)
  {
    if (v765 >> 61)
      goto LABEL_1699;
    v766 = operator new(8 * v765);
    v767 = &v766[8 * v762];
    v768 = &v766[8 * v765];
    *v767 = v756;
    v759 = (uint64_t)(v767 + 1);
    v769 = (char *)(v757 - v760);
    if (v757 == v760)
      goto LABEL_753;
    goto LABEL_746;
  }
  v766 = 0;
  v767 = (_QWORD *)(8 * v762);
  v768 = 0;
  *(_QWORD *)(8 * v762) = v756;
  v759 = 8 * v762 + 8;
  v769 = (char *)(v757 - v760);
  if (v757 != v760)
  {
LABEL_746:
    v770 = (unint64_t)(v769 - 8);
    if (v770 < 0x58)
      goto LABEL_1726;
    if ((unint64_t)(v757 - v766 - v761) < 0x20)
      goto LABEL_1726;
    v771 = (v770 >> 3) + 1;
    v772 = 8 * (v771 & 0x3FFFFFFFFFFFFFFCLL);
    v773 = &v757[-v772];
    v767 = (_QWORD *)((char *)v767 - v772);
    v774 = &v766[8 * v762 - 16];
    v775 = v757 - 16;
    v776 = v771 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v777 = *(_OWORD *)v775;
      *(v774 - 1) = *((_OWORD *)v775 - 1);
      *v774 = v777;
      v774 -= 2;
      v775 -= 32;
      v776 -= 4;
    }
    while (v776);
    v757 = v773;
    if (v771 != (v771 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1726:
      do
      {
        v778 = *((_QWORD *)v757 - 1);
        v757 -= 8;
        *--v767 = v778;
      }
      while (v757 != v760);
    }
    v757 = *v5;
  }
LABEL_753:
  *(_QWORD *)(a1 + 2624) = v767;
  *(_QWORD *)(a1 + 2632) = v759;
  *(_QWORD *)(a1 + 2640) = v768;
  if (v757)
    operator delete(v757);
LABEL_755:
  *(_QWORD *)(a1 + 2632) = v759;
  v779 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v780 = (void *)operator new[]();
  bzero(v780, 4 * v779);
  *(_QWORD *)(a1 + 1512) = v780;
  v781 = *(char **)(a1 + 2632);
  v782 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v781 < v782)
  {
    *(_QWORD *)v781 = v780;
    v783 = (uint64_t)(v781 + 8);
    goto LABEL_777;
  }
  v784 = *v5;
  v785 = v781 - *v5;
  v786 = v785 >> 3;
  v787 = (v785 >> 3) + 1;
  if (v787 >> 61)
    goto LABEL_1698;
  v788 = v782 - (_QWORD)v784;
  if (v788 >> 2 > v787)
    v787 = v788 >> 2;
  if ((unint64_t)v788 >= 0x7FFFFFFFFFFFFFF8)
    v789 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v789 = v787;
  if (v789)
  {
    if (v789 >> 61)
      goto LABEL_1699;
    v790 = operator new(8 * v789);
    v791 = &v790[8 * v786];
    v792 = &v790[8 * v789];
    *v791 = v780;
    v783 = (uint64_t)(v791 + 1);
    v793 = (char *)(v781 - v784);
    if (v781 == v784)
      goto LABEL_775;
    goto LABEL_768;
  }
  v790 = 0;
  v791 = (_QWORD *)(8 * v786);
  v792 = 0;
  *(_QWORD *)(8 * v786) = v780;
  v783 = 8 * v786 + 8;
  v793 = (char *)(v781 - v784);
  if (v781 != v784)
  {
LABEL_768:
    v794 = (unint64_t)(v793 - 8);
    if (v794 < 0x58)
      goto LABEL_1727;
    if ((unint64_t)(v781 - v790 - v785) < 0x20)
      goto LABEL_1727;
    v795 = (v794 >> 3) + 1;
    v796 = 8 * (v795 & 0x3FFFFFFFFFFFFFFCLL);
    v797 = &v781[-v796];
    v791 = (_QWORD *)((char *)v791 - v796);
    v798 = &v790[8 * v786 - 16];
    v799 = v781 - 16;
    v800 = v795 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v801 = *(_OWORD *)v799;
      *(v798 - 1) = *((_OWORD *)v799 - 1);
      *v798 = v801;
      v798 -= 2;
      v799 -= 32;
      v800 -= 4;
    }
    while (v800);
    v781 = v797;
    if (v795 != (v795 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1727:
      do
      {
        v802 = *((_QWORD *)v781 - 1);
        v781 -= 8;
        *--v791 = v802;
      }
      while (v781 != v784);
    }
    v781 = *v5;
  }
LABEL_775:
  *(_QWORD *)(a1 + 2624) = v791;
  *(_QWORD *)(a1 + 2632) = v783;
  *(_QWORD *)(a1 + 2640) = v792;
  if (v781)
    operator delete(v781);
LABEL_777:
  *(_QWORD *)(a1 + 2632) = v783;
  v803 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
  v804 = (void *)operator new[]();
  bzero(v804, 4 * v803);
  *(_QWORD *)(a1 + 1520) = v804;
  v805 = *(char **)(a1 + 2632);
  v806 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v805 < v806)
  {
    *(_QWORD *)v805 = v804;
    v807 = (uint64_t)(v805 + 8);
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    goto LABEL_796;
  }
  v808 = *v5;
  v809 = v805 - *v5;
  v810 = v809 >> 3;
  v811 = (v809 >> 3) + 1;
  if (v811 >> 61)
    goto LABEL_1698;
  v812 = v806 - (_QWORD)v808;
  if (v812 >> 2 > v811)
    v811 = v812 >> 2;
  if ((unint64_t)v812 >= 0x7FFFFFFFFFFFFFF8)
    v813 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v813 = v811;
  if (v813)
  {
    if (v813 >> 61)
      goto LABEL_1699;
    v814 = operator new(8 * v813);
    v815 = &v814[8 * v810];
    v816 = &v814[8 * v813];
    *v815 = v804;
    v807 = (uint64_t)(v815 + 1);
    v817 = (char *)(v805 - v808);
    if (v805 != v808)
    {
LABEL_788:
      v818 = (unint64_t)(v817 - 8);
      p_vtable = (void **)(MLPNDArrayLossLabels + 24);
      if (v818 < 0x58)
        goto LABEL_1728;
      if ((unint64_t)(v805 - v814 - v809) < 0x20)
        goto LABEL_1728;
      v819 = (v818 >> 3) + 1;
      v820 = 8 * (v819 & 0x3FFFFFFFFFFFFFFCLL);
      v821 = &v805[-v820];
      v815 = (_QWORD *)((char *)v815 - v820);
      v822 = &v814[8 * v810 - 16];
      v823 = v805 - 16;
      v824 = v819 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v825 = *(_OWORD *)v823;
        *(v822 - 1) = *((_OWORD *)v823 - 1);
        *v822 = v825;
        v822 -= 2;
        v823 -= 32;
        v824 -= 4;
      }
      while (v824);
      v805 = v821;
      if (v819 != (v819 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1728:
        do
        {
          v826 = *((_QWORD *)v805 - 1);
          v805 -= 8;
          *--v815 = v826;
        }
        while (v805 != v808);
      }
      v805 = *v5;
      *(_QWORD *)(a1 + 2624) = v815;
      *(_QWORD *)(a1 + 2632) = v807;
      *(_QWORD *)(a1 + 2640) = v816;
      if (v805)
        goto LABEL_795;
      goto LABEL_796;
    }
  }
  else
  {
    v814 = 0;
    v815 = (_QWORD *)(8 * v810);
    v816 = 0;
    *(_QWORD *)(8 * v810) = v804;
    v807 = 8 * v810 + 8;
    v817 = (char *)(v805 - v808);
    if (v805 != v808)
      goto LABEL_788;
  }
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
  *(_QWORD *)(a1 + 2624) = v815;
  *(_QWORD *)(a1 + 2632) = v807;
  *(_QWORD *)(a1 + 2640) = v816;
  if (v805)
LABEL_795:
    operator delete(v805);
LABEL_796:
  *(_QWORD *)(a1 + 2632) = v807;
  if (*(_BYTE *)(a1 + 1696))
    goto LABEL_870;
  v827 = *(unsigned int *)(a1 + 52);
  v828 = (void *)operator new[]();
  v829 = v828;
  if ((int)v827 >= 1)
    bzero(v828, 4 * v827);
  *(_QWORD *)(a1 + 1528) = v829;
  v830 = *(char **)(a1 + 2632);
  v831 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v830 < v831)
  {
    *(_QWORD *)v830 = v829;
    v832 = (uint64_t)(v830 + 8);
    goto LABEL_824;
  }
  v833 = *v5;
  v834 = v830 - *v5;
  v835 = v834 >> 3;
  v836 = (v834 >> 3) + 1;
  if (v836 >> 61)
    goto LABEL_1698;
  v837 = v831 - (_QWORD)v833;
  if (v837 >> 2 > v836)
    v836 = v837 >> 2;
  if ((unint64_t)v837 >= 0x7FFFFFFFFFFFFFF8)
    v838 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v838 = v836;
  if (v838)
  {
    if (v838 >> 61)
      goto LABEL_1699;
    v839 = operator new(8 * v838);
    v840 = &v839[8 * v835];
    v841 = &v839[8 * v838];
    *v840 = v829;
    v832 = (uint64_t)(v840 + 1);
    v842 = (char *)(v830 - v833);
    if (v830 == v833)
      goto LABEL_822;
    goto LABEL_815;
  }
  v839 = 0;
  v840 = (_QWORD *)(8 * v835);
  v841 = 0;
  *(_QWORD *)(8 * v835) = v829;
  v832 = 8 * v835 + 8;
  v842 = (char *)(v830 - v833);
  if (v830 != v833)
  {
LABEL_815:
    v843 = (unint64_t)(v842 - 8);
    if (v843 < 0x58)
      goto LABEL_1729;
    if ((unint64_t)(v830 - v839 - v834) < 0x20)
      goto LABEL_1729;
    v844 = (v843 >> 3) + 1;
    v845 = 8 * (v844 & 0x3FFFFFFFFFFFFFFCLL);
    v846 = &v830[-v845];
    v840 = (_QWORD *)((char *)v840 - v845);
    v847 = &v839[8 * v835 - 16];
    v848 = v830 - 16;
    v849 = v844 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v850 = *(_OWORD *)v848;
      *(v847 - 1) = *((_OWORD *)v848 - 1);
      *v847 = v850;
      v847 -= 2;
      v848 -= 32;
      v849 -= 4;
    }
    while (v849);
    v830 = v846;
    if (v844 != (v844 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1729:
      do
      {
        v851 = *((_QWORD *)v830 - 1);
        v830 -= 8;
        *--v840 = v851;
      }
      while (v830 != v833);
    }
    v830 = *v5;
  }
LABEL_822:
  *(_QWORD *)(a1 + 2624) = v840;
  *(_QWORD *)(a1 + 2632) = v832;
  *(_QWORD *)(a1 + 2640) = v841;
  if (v830)
    operator delete(v830);
LABEL_824:
  *(_QWORD *)(a1 + 2632) = v832;
  v852 = *(unsigned int *)(a1 + 52);
  v853 = (void *)operator new[]();
  v854 = v853;
  if ((int)v852 >= 1)
    bzero(v853, 4 * v852);
  *(_QWORD *)(a1 + 1536) = v854;
  v855 = *(char **)(a1 + 2632);
  v856 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v855 < v856)
  {
    *(_QWORD *)v855 = v854;
    v857 = (uint64_t)(v855 + 8);
    goto LABEL_848;
  }
  v858 = *v5;
  v859 = v855 - *v5;
  v860 = v859 >> 3;
  v861 = (v859 >> 3) + 1;
  if (v861 >> 61)
    goto LABEL_1698;
  v862 = v856 - (_QWORD)v858;
  if (v862 >> 2 > v861)
    v861 = v862 >> 2;
  if ((unint64_t)v862 >= 0x7FFFFFFFFFFFFFF8)
    v863 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v863 = v861;
  if (v863)
  {
    if (v863 >> 61)
      goto LABEL_1699;
    v864 = operator new(8 * v863);
    v865 = &v864[8 * v860];
    v866 = &v864[8 * v863];
    *v865 = v854;
    v857 = (uint64_t)(v865 + 1);
    v867 = (char *)(v855 - v858);
    if (v855 == v858)
      goto LABEL_846;
    goto LABEL_839;
  }
  v864 = 0;
  v865 = (_QWORD *)(8 * v860);
  v866 = 0;
  *(_QWORD *)(8 * v860) = v854;
  v857 = 8 * v860 + 8;
  v867 = (char *)(v855 - v858);
  if (v855 != v858)
  {
LABEL_839:
    v868 = (unint64_t)(v867 - 8);
    if (v868 < 0x58)
      goto LABEL_1730;
    if ((unint64_t)(v855 - v864 - v859) < 0x20)
      goto LABEL_1730;
    v869 = (v868 >> 3) + 1;
    v870 = 8 * (v869 & 0x3FFFFFFFFFFFFFFCLL);
    v871 = &v855[-v870];
    v865 = (_QWORD *)((char *)v865 - v870);
    v872 = &v864[8 * v860 - 16];
    v873 = v855 - 16;
    v874 = v869 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v875 = *(_OWORD *)v873;
      *(v872 - 1) = *((_OWORD *)v873 - 1);
      *v872 = v875;
      v872 -= 2;
      v873 -= 32;
      v874 -= 4;
    }
    while (v874);
    v855 = v871;
    if (v869 != (v869 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1730:
      do
      {
        v876 = *((_QWORD *)v855 - 1);
        v855 -= 8;
        *--v865 = v876;
      }
      while (v855 != v858);
    }
    v855 = *v5;
  }
LABEL_846:
  *(_QWORD *)(a1 + 2624) = v865;
  *(_QWORD *)(a1 + 2632) = v857;
  *(_QWORD *)(a1 + 2640) = v866;
  if (v855)
    operator delete(v855);
LABEL_848:
  *(_QWORD *)(a1 + 2632) = v857;
  v877 = *(unsigned int *)(a1 + 52);
  v878 = (void *)operator new[]();
  v879 = v878;
  if ((int)v877 >= 1)
    bzero(v878, 4 * v877);
  *(_QWORD *)(a1 + 1544) = v879;
  v880 = *(char **)(a1 + 2632);
  v881 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v880 >= v881)
  {
    v883 = *v5;
    v884 = v880 - *v5;
    v885 = v884 >> 3;
    v886 = (v884 >> 3) + 1;
    if (!(v886 >> 61))
    {
      v887 = v881 - (_QWORD)v883;
      if (v887 >> 2 > v886)
        v886 = v887 >> 2;
      if ((unint64_t)v887 >= 0x7FFFFFFFFFFFFFF8)
        v888 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v888 = v886;
      if (!v888)
      {
        v889 = 0;
        v890 = (_QWORD *)(8 * v885);
        v891 = 0;
        *(_QWORD *)(8 * v885) = v879;
        v882 = 8 * v885 + 8;
        v892 = (char *)(v880 - v883);
        if (v880 != v883)
          goto LABEL_861;
        goto LABEL_1696;
      }
      if (!(v888 >> 61))
      {
        v889 = operator new(8 * v888);
        v890 = &v889[8 * v885];
        v891 = &v889[8 * v888];
        *v890 = v879;
        v882 = (uint64_t)(v890 + 1);
        v892 = (char *)(v880 - v883);
        if (v880 != v883)
        {
LABEL_861:
          v893 = (unint64_t)(v892 - 8);
          p_vtable = MLPNDArrayLossLabels.vtable;
          if (v893 < 0x58)
            goto LABEL_1731;
          if ((unint64_t)(v880 - v889 - v884) < 0x20)
            goto LABEL_1731;
          v894 = (v893 >> 3) + 1;
          v895 = 8 * (v894 & 0x3FFFFFFFFFFFFFFCLL);
          v896 = &v880[-v895];
          v890 = (_QWORD *)((char *)v890 - v895);
          v897 = &v889[8 * v885 - 16];
          v898 = v880 - 16;
          v899 = v894 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v900 = *(_OWORD *)v898;
            *(v897 - 1) = *((_OWORD *)v898 - 1);
            *v897 = v900;
            v897 -= 2;
            v898 -= 32;
            v899 -= 4;
          }
          while (v899);
          v880 = v896;
          if (v894 != (v894 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1731:
            do
            {
              v901 = *((_QWORD *)v880 - 1);
              v880 -= 8;
              *--v890 = v901;
            }
            while (v880 != v883);
          }
          v880 = *v5;
          *(_QWORD *)(a1 + 2624) = v890;
          *(_QWORD *)(a1 + 2632) = v882;
          *(_QWORD *)(a1 + 2640) = v891;
          if (!v880)
            goto LABEL_869;
LABEL_868:
          operator delete(v880);
          goto LABEL_869;
        }
LABEL_1696:
        p_vtable = (void **)(MLPNDArrayLossLabels + 24);
        *(_QWORD *)(a1 + 2624) = v890;
        *(_QWORD *)(a1 + 2632) = v882;
        *(_QWORD *)(a1 + 2640) = v891;
        if (!v880)
          goto LABEL_869;
        goto LABEL_868;
      }
LABEL_1699:
      sub_19C07C7FC();
    }
LABEL_1698:
    sub_19C07DA0C();
  }
  *(_QWORD *)v880 = v879;
  v882 = (uint64_t)(v880 + 8);
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
LABEL_869:
  *(_QWORD *)(a1 + 2632) = v882;
LABEL_870:
  LODWORD(v902) = *((_DWORD *)p_vtable + 602);
  if (*(_BYTE *)(a1 + 2692))
  {
    v903 = (int)v902;
    v904 = *(_QWORD *)(a1 + 88);
    v905 = (*(_QWORD *)(a1 + 96) - v904) >> 3;
    if ((int)v902 <= v905)
    {
      if ((int)v902 < v905)
        *(_QWORD *)(a1 + 96) = v904 + 8 * (int)v902;
    }
    else
    {
      sub_19C098930((void **)(a1 + 88), (int)v902 - v905);
      LODWORD(v902) = *((_DWORD *)p_vtable + 602);
      v903 = (int)v902;
    }
    v906 = *(_QWORD *)(a1 + 112);
    v907 = (*(_QWORD *)(a1 + 120) - v906) >> 3;
    if (v903 <= v907)
    {
      if (v903 < v907)
        *(_QWORD *)(a1 + 120) = v906 + 8 * v903;
    }
    else
    {
      sub_19C098930((void **)(a1 + 112), v903 - v907);
      LODWORD(v902) = *((_DWORD *)p_vtable + 602);
    }
  }
  v908 = *(_QWORD *)(a1 + 184);
  v902 = (int)v902;
  v909 = (*(_QWORD *)(a1 + 192) - v908) >> 3;
  if ((int)v902 <= v909)
  {
    if ((int)v902 < v909)
      *(_QWORD *)(a1 + 192) = v908 + 8 * (int)v902;
  }
  else
  {
    sub_19C098930((void **)(a1 + 184), (int)v902 - v909);
    v902 = *((int *)p_vtable + 602);
  }
  v910 = *(_QWORD *)(a1 + 160);
  v911 = (*(_QWORD *)(a1 + 168) - v910) >> 3;
  if (v902 <= v911)
  {
    if (v902 < v911)
      *(_QWORD *)(a1 + 168) = v910 + 8 * v902;
  }
  else
  {
    sub_19C098930((void **)(a1 + 160), v902 - v911);
  }
  v912 = *(_QWORD *)(a1 + 64);
  v913 = (*(_QWORD *)(a1 + 72) - v912) >> 3;
  if ((int)v1636 <= v913)
  {
    if ((int)v1636 < v913)
      *(_QWORD *)(a1 + 72) = v912 + 8 * (int)v1636;
  }
  else
  {
    sub_19C098930((void **)(a1 + 64), (int)v1636 - v913);
  }
  v914 = *(_QWORD *)(a1 + 136);
  v915 = (*(_QWORD *)(a1 + 144) - v914) >> 3;
  if ((int)v1636 <= v915)
  {
    if ((int)v1636 < v915)
      *(_QWORD *)(a1 + 144) = v914 + 8 * (int)v1636;
  }
  else
  {
    sub_19C098930((void **)(a1 + 136), (int)v1636 - v915);
  }
  v917 = *(_QWORD *)(a1 + 208);
  v916 = *(_QWORD *)(a1 + 216);
  v918 = *((int *)p_vtable + 602);
  v919 = 0xAAAAAAAAAAAAAAABLL * ((v916 - v917) >> 3);
  if (v918 <= v919)
  {
    if (v918 < v919)
    {
      v920 = v917 + 24 * (int)v918;
      if (v916 != v920)
      {
        v921 = *(_QWORD *)(a1 + 216);
        do
        {
          v923 = *(void **)(v921 - 24);
          v921 -= 24;
          v922 = v923;
          if (v923)
          {
            *(_QWORD *)(v916 - 16) = v922;
            operator delete(v922);
          }
          v916 = v921;
        }
        while (v921 != v920);
      }
      *(_QWORD *)(a1 + 216) = v920;
      p_vtable = MLPNDArrayLossLabels.vtable;
    }
  }
  else
  {
    sub_19C167E70(a1 + 208, v918 - v919);
  }
  if (*(_BYTE *)(a1 + 2692))
  {
    v924 = (int)v1635;
    v925 = *(_QWORD *)(a1 + 640);
    v926 = (*(_QWORD *)(a1 + 648) - v925) >> 3;
    if ((int)v1635 <= v926)
    {
      if ((int)v1635 < v926)
        *(_QWORD *)(a1 + 648) = v925 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 640), (int)v1635 - v926);
    }
    v927 = *(_QWORD *)(a1 + 664);
    v928 = (*(_QWORD *)(a1 + 672) - v927) >> 3;
    if ((int)v1635 <= v928)
    {
      if ((int)v1635 < v928)
        *(_QWORD *)(a1 + 672) = v927 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 664), (int)v1635 - v928);
    }
    v929 = *(_QWORD *)(a1 + 688);
    v930 = (*(_QWORD *)(a1 + 696) - v929) >> 3;
    if ((int)v1635 <= v930)
    {
      if ((int)v1635 < v930)
        *(_QWORD *)(a1 + 696) = v929 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 688), (int)v1635 - v930);
    }
    v931 = *(_QWORD *)(a1 + 712);
    v932 = (*(_QWORD *)(a1 + 720) - v931) >> 3;
    if ((int)v1635 <= v932)
    {
      if ((int)v1635 < v932)
        *(_QWORD *)(a1 + 720) = v931 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 712), (int)v1635 - v932);
    }
    v933 = *(_QWORD *)(a1 + 544);
    v934 = (*(_QWORD *)(a1 + 552) - v933) >> 3;
    if ((int)v1635 <= v934)
    {
      if ((int)v1635 < v934)
        *(_QWORD *)(a1 + 552) = v933 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 544), (int)v1635 - v934);
    }
    v935 = *(_QWORD *)(a1 + 568);
    v936 = (*(_QWORD *)(a1 + 576) - v935) >> 3;
    if ((int)v1635 <= v936)
    {
      if ((int)v1635 < v936)
        *(_QWORD *)(a1 + 576) = v935 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 568), (int)v1635 - v936);
    }
    v937 = *(_QWORD *)(a1 + 592);
    v938 = (*(_QWORD *)(a1 + 600) - v937) >> 3;
    if ((int)v1635 <= v938)
    {
      if ((int)v1635 < v938)
        *(_QWORD *)(a1 + 600) = v937 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 592), (int)v1635 - v938);
    }
    v939 = *(_QWORD *)(a1 + 616);
    v940 = (*(_QWORD *)(a1 + 624) - v939) >> 3;
    if ((int)v1635 <= v940)
    {
      if ((int)v1635 < v940)
        *(_QWORD *)(a1 + 624) = v939 + 8 * (int)v1635;
    }
    else
    {
      sub_19C098930((void **)(a1 + 616), (int)v1635 - v940);
    }
  }
  else
  {
    v924 = (int)v1635;
  }
  v941 = *(_QWORD *)(a1 + 448);
  v942 = (*(_QWORD *)(a1 + 456) - v941) >> 3;
  if (v924 <= v942)
  {
    if (v924 < v942)
      *(_QWORD *)(a1 + 456) = v941 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 448), v924 - v942);
  }
  v943 = *(_QWORD *)(a1 + 472);
  v944 = (*(_QWORD *)(a1 + 480) - v943) >> 3;
  if (v924 <= v944)
  {
    if (v924 < v944)
      *(_QWORD *)(a1 + 480) = v943 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 472), v924 - v944);
  }
  v945 = *(_QWORD *)(a1 + 496);
  v946 = (*(_QWORD *)(a1 + 504) - v945) >> 3;
  if (v924 <= v946)
  {
    if (v924 < v946)
      *(_QWORD *)(a1 + 504) = v945 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 496), v924 - v946);
  }
  v947 = *(_QWORD *)(a1 + 520);
  v948 = (*(_QWORD *)(a1 + 528) - v947) >> 3;
  if (v924 <= v948)
  {
    if (v924 < v948)
      *(_QWORD *)(a1 + 528) = v947 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 520), v924 - v948);
  }
  v949 = *(_QWORD *)(a1 + 352);
  v950 = (*(_QWORD *)(a1 + 360) - v949) >> 3;
  if (v924 <= v950)
  {
    if (v924 < v950)
      *(_QWORD *)(a1 + 360) = v949 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 352), v924 - v950);
  }
  v951 = *(_QWORD *)(a1 + 376);
  v952 = (*(_QWORD *)(a1 + 384) - v951) >> 3;
  if (v924 <= v952)
  {
    if (v924 < v952)
      *(_QWORD *)(a1 + 384) = v951 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 376), v924 - v952);
  }
  v953 = *(_QWORD *)(a1 + 400);
  v954 = (*(_QWORD *)(a1 + 408) - v953) >> 3;
  if (v924 <= v954)
  {
    if (v924 < v954)
      *(_QWORD *)(a1 + 408) = v953 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 400), v924 - v954);
  }
  v955 = *(_QWORD *)(a1 + 424);
  v956 = (*(_QWORD *)(a1 + 432) - v955) >> 3;
  if (v924 <= v956)
  {
    if (v924 < v956)
      *(_QWORD *)(a1 + 432) = v955 + 8 * v924;
  }
  else
  {
    sub_19C098930((void **)(a1 + 424), v924 - v956);
  }
  if (!*(_BYTE *)(a1 + 1696))
  {
    v957 = *((int *)p_vtable + 602);
    v958 = *(_QWORD *)(a1 + 960);
    v959 = (*(_QWORD *)(a1 + 968) - v958) >> 3;
    if (v957 <= v959)
    {
      if (v957 < v959)
        *(_QWORD *)(a1 + 968) = v958 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 960), v957 - v959);
      v957 = *((int *)p_vtable + 602);
    }
    v960 = *(_QWORD *)(a1 + 840);
    v961 = (*(_QWORD *)(a1 + 848) - v960) >> 3;
    if (v957 <= v961)
    {
      if (v957 < v961)
        *(_QWORD *)(a1 + 848) = v960 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 840), v957 - v961);
      v957 = *((int *)p_vtable + 602);
    }
    v962 = *(_QWORD *)(a1 + 816);
    v963 = (*(_QWORD *)(a1 + 824) - v962) >> 3;
    if (v957 <= v963)
    {
      if (v957 < v963)
        *(_QWORD *)(a1 + 824) = v962 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 816), v957 - v963);
      v957 = *((int *)p_vtable + 602);
    }
    v964 = *(_QWORD *)(a1 + 912);
    v965 = (*(_QWORD *)(a1 + 920) - v964) >> 3;
    if (v957 <= v965)
    {
      if (v957 < v965)
        *(_QWORD *)(a1 + 920) = v964 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 912), v957 - v965);
      v957 = *((int *)p_vtable + 602);
    }
    v966 = *(_QWORD *)(a1 + 888);
    v967 = (*(_QWORD *)(a1 + 896) - v966) >> 3;
    if (v957 <= v967)
    {
      if (v957 < v967)
        *(_QWORD *)(a1 + 896) = v966 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 888), v957 - v967);
      v957 = *((int *)p_vtable + 602);
    }
    v968 = *(_QWORD *)(a1 + 864);
    v969 = (*(_QWORD *)(a1 + 872) - v968) >> 3;
    if (v957 <= v969)
    {
      if (v957 < v969)
        *(_QWORD *)(a1 + 872) = v968 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 864), v957 - v969);
      v957 = *((int *)p_vtable + 602);
    }
    v970 = *(_QWORD *)(a1 + 936);
    v971 = (*(_QWORD *)(a1 + 944) - v970) >> 3;
    if (v957 <= v971)
    {
      if (v957 < v971)
        *(_QWORD *)(a1 + 944) = v970 + 8 * v957;
    }
    else
    {
      sub_19C098930((void **)(a1 + 936), v957 - v971);
    }
  }
  if ((int)v1636 >= 1)
  {
    v972 = 0;
    while (1)
    {
      v974 = *(unsigned int *)(a1 + 48);
      v975 = (void *)operator new[]();
      v976 = v975;
      if ((int)v974 >= 1)
        bzero(v975, 4 * v974);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v972) = v976;
      v977 = *(char **)(a1 + 2632);
      v978 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v977 < v978)
      {
        *(_QWORD *)v977 = v976;
        v979 = (uint64_t)(v977 + 8);
        goto LABEL_1027;
      }
      v980 = *v5;
      v981 = v977 - *v5;
      v982 = v981 >> 3;
      v983 = (v981 >> 3) + 1;
      if (v983 >> 61)
        goto LABEL_1698;
      v984 = v978 - (_QWORD)v980;
      if (v984 >> 2 > v983)
        v983 = v984 >> 2;
      v985 = (unint64_t)v984 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v983;
      if (v985)
        break;
      v986 = 0;
      v987 = (_QWORD *)(8 * v982);
      *(_QWORD *)(8 * v982) = v976;
      v979 = 8 * v982 + 8;
      if (v977 != v980)
        goto LABEL_1018;
LABEL_1025:
      *(_QWORD *)(a1 + 2624) = v987;
      *(_QWORD *)(a1 + 2632) = v979;
      *(_QWORD *)(a1 + 2640) = &v986[8 * v985];
      if (v977)
        operator delete(v977);
LABEL_1027:
      *(_QWORD *)(a1 + 2632) = v979;
      v997 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 2688);
      v998 = (void *)operator new[]();
      bzero(v998, 4 * v997);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v972) = v998;
      v999 = *(char **)(a1 + 2632);
      v1000 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v999 >= v1000)
      {
        v1001 = *v5;
        v1002 = v999 - *v5;
        v1003 = v1002 >> 3;
        v1004 = (v1002 >> 3) + 1;
        if (v1004 >> 61)
          goto LABEL_1698;
        v1005 = v1000 - (_QWORD)v1001;
        if (v1005 >> 2 > v1004)
          v1004 = v1005 >> 2;
        if ((unint64_t)v1005 >= 0x7FFFFFFFFFFFFFF8)
          v1006 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1006 = v1004;
        if (v1006)
        {
          if (v1006 >> 61)
            goto LABEL_1699;
          v1007 = operator new(8 * v1006);
          v1008 = &v1007[8 * v1003];
          *v1008 = v998;
          v973 = (uint64_t)(v1008 + 1);
          if (v999 == v1001)
            goto LABEL_1046;
LABEL_1039:
          v1009 = v999 - 8 - v1001;
          if (v1009 < 0x58)
            goto LABEL_1732;
          if ((unint64_t)(v999 - &v1007[v1002]) < 0x20)
            goto LABEL_1732;
          v1010 = (v1009 >> 3) + 1;
          v1011 = 8 * (v1010 & 0x3FFFFFFFFFFFFFFCLL);
          v1012 = &v999[-v1011];
          v1008 = (_QWORD *)((char *)v1008 - v1011);
          v1013 = &v1007[8 * v1003 - 16];
          v1014 = v999 - 16;
          v1015 = v1010 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1016 = *(_OWORD *)v1014;
            *(v1013 - 1) = *((_OWORD *)v1014 - 1);
            *v1013 = v1016;
            v1013 -= 2;
            v1014 -= 32;
            v1015 -= 4;
          }
          while (v1015);
          v999 = v1012;
          if (v1010 != (v1010 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1732:
            do
            {
              v1017 = *((_QWORD *)v999 - 1);
              v999 -= 8;
              *--v1008 = v1017;
            }
            while (v999 != v1001);
          }
          v999 = *v5;
        }
        else
        {
          v1007 = 0;
          v1008 = (_QWORD *)(8 * v1003);
          *(_QWORD *)(8 * v1003) = v998;
          v973 = 8 * v1003 + 8;
          if (v999 != v1001)
            goto LABEL_1039;
        }
LABEL_1046:
        *(_QWORD *)(a1 + 2624) = v1008;
        *(_QWORD *)(a1 + 2632) = v973;
        *(_QWORD *)(a1 + 2640) = &v1007[8 * v1006];
        if (v999)
          operator delete(v999);
        goto LABEL_1002;
      }
      *(_QWORD *)v999 = v998;
      v973 = (uint64_t)(v999 + 8);
LABEL_1002:
      *(_QWORD *)(a1 + 2632) = v973;
      if (++v972 == v1636)
        goto LABEL_1048;
    }
    if (v985 >> 61)
      goto LABEL_1699;
    v986 = operator new(8 * v985);
    v987 = &v986[8 * v982];
    *v987 = v976;
    v979 = (uint64_t)(v987 + 1);
    if (v977 == v980)
      goto LABEL_1025;
LABEL_1018:
    v988 = v977 - 8 - v980;
    if (v988 < 0x58)
      goto LABEL_1733;
    if ((unint64_t)(v977 - &v986[v981]) < 0x20)
      goto LABEL_1733;
    v989 = (v988 >> 3) + 1;
    v990 = 8 * (v989 & 0x3FFFFFFFFFFFFFFCLL);
    v991 = &v977[-v990];
    v987 = (_QWORD *)((char *)v987 - v990);
    v992 = &v986[8 * v982 - 16];
    v993 = v977 - 16;
    v994 = v989 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v995 = *(_OWORD *)v993;
      *(v992 - 1) = *((_OWORD *)v993 - 1);
      *v992 = v995;
      v992 -= 2;
      v993 -= 32;
      v994 -= 4;
    }
    while (v994);
    v977 = v991;
    if (v989 != (v989 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1733:
      do
      {
        v996 = *((_QWORD *)v977 - 1);
        v977 -= 8;
        *--v987 = v996;
      }
      while (v977 != v980);
    }
    v977 = *v5;
    goto LABEL_1025;
  }
LABEL_1048:
  if ((int)v1635 >= 1)
  {
    v1018 = 0;
    while (1)
    {
      if (!*(_BYTE *)(a1 + 2692))
        goto LABEL_1246;
      v1020 = *(unsigned int *)(a1 + 52);
      v1021 = (void *)operator new[]();
      v1022 = v1021;
      if ((int)v1020 >= 1)
        bzero(v1021, 4 * v1020);
      *(_QWORD *)(*(_QWORD *)(a1 + 544) + 8 * v1018) = v1022;
      v1023 = *(char **)(a1 + 2632);
      v1024 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1023 < v1024)
      {
        *(_QWORD *)v1023 = v1022;
        v1025 = (uint64_t)(v1023 + 8);
        goto LABEL_1077;
      }
      v1026 = *v5;
      v1027 = v1023 - *v5;
      v1028 = v1027 >> 3;
      v1029 = (v1027 >> 3) + 1;
      if (v1029 >> 61)
        goto LABEL_1698;
      v1030 = v1024 - (_QWORD)v1026;
      if (v1030 >> 2 > v1029)
        v1029 = v1030 >> 2;
      v1031 = (unint64_t)v1030 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v1029;
      if (v1031)
        break;
      v1032 = 0;
      v1033 = (_QWORD *)(8 * v1028);
      *(_QWORD *)(8 * v1028) = v1022;
      v1025 = 8 * v1028 + 8;
      if (v1023 != v1026)
        goto LABEL_1068;
LABEL_1075:
      *(_QWORD *)(a1 + 2624) = v1033;
      *(_QWORD *)(a1 + 2632) = v1025;
      *(_QWORD *)(a1 + 2640) = &v1032[8 * v1031];
      if (v1023)
        operator delete(v1023);
LABEL_1077:
      *(_QWORD *)(a1 + 2632) = v1025;
      v1043 = *(unsigned int *)(a1 + 52);
      v1044 = (void *)operator new[]();
      v1045 = v1044;
      if ((int)v1043 >= 1)
        bzero(v1044, 4 * v1043);
      *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * v1018) = v1045;
      v1046 = *(char **)(a1 + 2632);
      v1047 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1046 < v1047)
      {
        *(_QWORD *)v1046 = v1045;
        v1048 = (uint64_t)(v1046 + 8);
        goto LABEL_1101;
      }
      v1049 = *v5;
      v1050 = v1046 - *v5;
      v1051 = v1050 >> 3;
      v1052 = (v1050 >> 3) + 1;
      if (v1052 >> 61)
        goto LABEL_1698;
      v1053 = v1047 - (_QWORD)v1049;
      if (v1053 >> 2 > v1052)
        v1052 = v1053 >> 2;
      if ((unint64_t)v1053 >= 0x7FFFFFFFFFFFFFF8)
        v1054 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1054 = v1052;
      if (v1054)
      {
        if (v1054 >> 61)
          goto LABEL_1699;
        v1055 = operator new(8 * v1054);
        v1056 = &v1055[8 * v1051];
        *v1056 = v1045;
        v1048 = (uint64_t)(v1056 + 1);
        if (v1046 == v1049)
          goto LABEL_1099;
LABEL_1092:
        v1057 = v1046 - 8 - v1049;
        if (v1057 < 0x58)
          goto LABEL_1734;
        if ((unint64_t)(v1046 - &v1055[v1050]) < 0x20)
          goto LABEL_1734;
        v1058 = (v1057 >> 3) + 1;
        v1059 = 8 * (v1058 & 0x3FFFFFFFFFFFFFFCLL);
        v1060 = &v1046[-v1059];
        v1056 = (_QWORD *)((char *)v1056 - v1059);
        v1061 = &v1055[8 * v1051 - 16];
        v1062 = v1046 - 16;
        v1063 = v1058 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1064 = *(_OWORD *)v1062;
          *(v1061 - 1) = *((_OWORD *)v1062 - 1);
          *v1061 = v1064;
          v1061 -= 2;
          v1062 -= 32;
          v1063 -= 4;
        }
        while (v1063);
        v1046 = v1060;
        if (v1058 != (v1058 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1734:
          do
          {
            v1065 = *((_QWORD *)v1046 - 1);
            v1046 -= 8;
            *--v1056 = v1065;
          }
          while (v1046 != v1049);
        }
        v1046 = *v5;
        goto LABEL_1099;
      }
      v1055 = 0;
      v1056 = (_QWORD *)(8 * v1051);
      *(_QWORD *)(8 * v1051) = v1045;
      v1048 = 8 * v1051 + 8;
      if (v1046 != v1049)
        goto LABEL_1092;
LABEL_1099:
      *(_QWORD *)(a1 + 2624) = v1056;
      *(_QWORD *)(a1 + 2632) = v1048;
      *(_QWORD *)(a1 + 2640) = &v1055[8 * v1054];
      if (v1046)
        operator delete(v1046);
LABEL_1101:
      *(_QWORD *)(a1 + 2632) = v1048;
      v1066 = *(unsigned int *)(a1 + 52);
      v1067 = (void *)operator new[]();
      v1068 = v1067;
      if ((int)v1066 >= 1)
        bzero(v1067, 4 * v1066);
      *(_QWORD *)(*(_QWORD *)(a1 + 592) + 8 * v1018) = v1068;
      v1069 = *(char **)(a1 + 2632);
      v1070 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1069 < v1070)
      {
        *(_QWORD *)v1069 = v1068;
        v1071 = (uint64_t)(v1069 + 8);
        goto LABEL_1125;
      }
      v1072 = *v5;
      v1073 = v1069 - *v5;
      v1074 = v1073 >> 3;
      v1075 = (v1073 >> 3) + 1;
      if (v1075 >> 61)
        goto LABEL_1698;
      v1076 = v1070 - (_QWORD)v1072;
      if (v1076 >> 2 > v1075)
        v1075 = v1076 >> 2;
      if ((unint64_t)v1076 >= 0x7FFFFFFFFFFFFFF8)
        v1077 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1077 = v1075;
      if (v1077)
      {
        if (v1077 >> 61)
          goto LABEL_1699;
        v1078 = operator new(8 * v1077);
        v1079 = &v1078[8 * v1074];
        *v1079 = v1068;
        v1071 = (uint64_t)(v1079 + 1);
        if (v1069 == v1072)
          goto LABEL_1123;
LABEL_1116:
        v1080 = v1069 - 8 - v1072;
        if (v1080 < 0x58)
          goto LABEL_1735;
        if ((unint64_t)(v1069 - &v1078[v1073]) < 0x20)
          goto LABEL_1735;
        v1081 = (v1080 >> 3) + 1;
        v1082 = 8 * (v1081 & 0x3FFFFFFFFFFFFFFCLL);
        v1083 = &v1069[-v1082];
        v1079 = (_QWORD *)((char *)v1079 - v1082);
        v1084 = &v1078[8 * v1074 - 16];
        v1085 = v1069 - 16;
        v1086 = v1081 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1087 = *(_OWORD *)v1085;
          *(v1084 - 1) = *((_OWORD *)v1085 - 1);
          *v1084 = v1087;
          v1084 -= 2;
          v1085 -= 32;
          v1086 -= 4;
        }
        while (v1086);
        v1069 = v1083;
        if (v1081 != (v1081 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1735:
          do
          {
            v1088 = *((_QWORD *)v1069 - 1);
            v1069 -= 8;
            *--v1079 = v1088;
          }
          while (v1069 != v1072);
        }
        v1069 = *v5;
        goto LABEL_1123;
      }
      v1078 = 0;
      v1079 = (_QWORD *)(8 * v1074);
      *(_QWORD *)(8 * v1074) = v1068;
      v1071 = 8 * v1074 + 8;
      if (v1069 != v1072)
        goto LABEL_1116;
LABEL_1123:
      *(_QWORD *)(a1 + 2624) = v1079;
      *(_QWORD *)(a1 + 2632) = v1071;
      *(_QWORD *)(a1 + 2640) = &v1078[8 * v1077];
      if (v1069)
        operator delete(v1069);
LABEL_1125:
      *(_QWORD *)(a1 + 2632) = v1071;
      v1089 = *(unsigned int *)(a1 + 52);
      v1090 = (void *)operator new[]();
      v1091 = v1090;
      if ((int)v1089 >= 1)
        bzero(v1090, 4 * v1089);
      *(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * v1018) = v1091;
      v1092 = *(char **)(a1 + 2632);
      v1093 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1092 < v1093)
      {
        *(_QWORD *)v1092 = v1091;
        v1094 = (uint64_t)(v1092 + 8);
        goto LABEL_1149;
      }
      v1095 = *v5;
      v1096 = v1092 - *v5;
      v1097 = v1096 >> 3;
      v1098 = (v1096 >> 3) + 1;
      if (v1098 >> 61)
        goto LABEL_1698;
      v1099 = v1093 - (_QWORD)v1095;
      if (v1099 >> 2 > v1098)
        v1098 = v1099 >> 2;
      if ((unint64_t)v1099 >= 0x7FFFFFFFFFFFFFF8)
        v1100 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1100 = v1098;
      if (v1100)
      {
        if (v1100 >> 61)
          goto LABEL_1699;
        v1101 = operator new(8 * v1100);
        v1102 = &v1101[8 * v1097];
        *v1102 = v1091;
        v1094 = (uint64_t)(v1102 + 1);
        if (v1092 == v1095)
          goto LABEL_1147;
LABEL_1140:
        v1103 = v1092 - 8 - v1095;
        if (v1103 < 0x58)
          goto LABEL_1736;
        if ((unint64_t)(v1092 - &v1101[v1096]) < 0x20)
          goto LABEL_1736;
        v1104 = (v1103 >> 3) + 1;
        v1105 = 8 * (v1104 & 0x3FFFFFFFFFFFFFFCLL);
        v1106 = &v1092[-v1105];
        v1102 = (_QWORD *)((char *)v1102 - v1105);
        v1107 = &v1101[8 * v1097 - 16];
        v1108 = v1092 - 16;
        v1109 = v1104 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1110 = *(_OWORD *)v1108;
          *(v1107 - 1) = *((_OWORD *)v1108 - 1);
          *v1107 = v1110;
          v1107 -= 2;
          v1108 -= 32;
          v1109 -= 4;
        }
        while (v1109);
        v1092 = v1106;
        if (v1104 != (v1104 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1736:
          do
          {
            v1111 = *((_QWORD *)v1092 - 1);
            v1092 -= 8;
            *--v1102 = v1111;
          }
          while (v1092 != v1095);
        }
        v1092 = *v5;
        goto LABEL_1147;
      }
      v1101 = 0;
      v1102 = (_QWORD *)(8 * v1097);
      *(_QWORD *)(8 * v1097) = v1091;
      v1094 = 8 * v1097 + 8;
      if (v1092 != v1095)
        goto LABEL_1140;
LABEL_1147:
      *(_QWORD *)(a1 + 2624) = v1102;
      *(_QWORD *)(a1 + 2632) = v1094;
      *(_QWORD *)(a1 + 2640) = &v1101[8 * v1100];
      if (v1092)
        operator delete(v1092);
LABEL_1149:
      *(_QWORD *)(a1 + 2632) = v1094;
      v1112 = *(unsigned int *)(a1 + 52);
      v1113 = (void *)operator new[]();
      v1114 = v1113;
      if ((int)v1112 >= 1)
        bzero(v1113, 4 * v1112);
      *(_QWORD *)(*(_QWORD *)(a1 + 640) + 8 * v1018) = v1114;
      v1115 = *(char **)(a1 + 2632);
      v1116 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1115 < v1116)
      {
        *(_QWORD *)v1115 = v1114;
        v1117 = (uint64_t)(v1115 + 8);
        goto LABEL_1173;
      }
      v1118 = *v5;
      v1119 = v1115 - *v5;
      v1120 = v1119 >> 3;
      v1121 = (v1119 >> 3) + 1;
      if (v1121 >> 61)
        goto LABEL_1698;
      v1122 = v1116 - (_QWORD)v1118;
      if (v1122 >> 2 > v1121)
        v1121 = v1122 >> 2;
      if ((unint64_t)v1122 >= 0x7FFFFFFFFFFFFFF8)
        v1123 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1123 = v1121;
      if (v1123)
      {
        if (v1123 >> 61)
          goto LABEL_1699;
        v1124 = operator new(8 * v1123);
        v1125 = &v1124[8 * v1120];
        *v1125 = v1114;
        v1117 = (uint64_t)(v1125 + 1);
        if (v1115 == v1118)
          goto LABEL_1171;
LABEL_1164:
        v1126 = v1115 - 8 - v1118;
        if (v1126 < 0x58)
          goto LABEL_1737;
        if ((unint64_t)(v1115 - &v1124[v1119]) < 0x20)
          goto LABEL_1737;
        v1127 = (v1126 >> 3) + 1;
        v1128 = 8 * (v1127 & 0x3FFFFFFFFFFFFFFCLL);
        v1129 = &v1115[-v1128];
        v1125 = (_QWORD *)((char *)v1125 - v1128);
        v1130 = &v1124[8 * v1120 - 16];
        v1131 = v1115 - 16;
        v1132 = v1127 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1133 = *(_OWORD *)v1131;
          *(v1130 - 1) = *((_OWORD *)v1131 - 1);
          *v1130 = v1133;
          v1130 -= 2;
          v1131 -= 32;
          v1132 -= 4;
        }
        while (v1132);
        v1115 = v1129;
        if (v1127 != (v1127 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1737:
          do
          {
            v1134 = *((_QWORD *)v1115 - 1);
            v1115 -= 8;
            *--v1125 = v1134;
          }
          while (v1115 != v1118);
        }
        v1115 = *v5;
        goto LABEL_1171;
      }
      v1124 = 0;
      v1125 = (_QWORD *)(8 * v1120);
      *(_QWORD *)(8 * v1120) = v1114;
      v1117 = 8 * v1120 + 8;
      if (v1115 != v1118)
        goto LABEL_1164;
LABEL_1171:
      *(_QWORD *)(a1 + 2624) = v1125;
      *(_QWORD *)(a1 + 2632) = v1117;
      *(_QWORD *)(a1 + 2640) = &v1124[8 * v1123];
      if (v1115)
        operator delete(v1115);
LABEL_1173:
      *(_QWORD *)(a1 + 2632) = v1117;
      v1135 = *(unsigned int *)(a1 + 52);
      v1136 = (void *)operator new[]();
      v1137 = v1136;
      if ((int)v1135 >= 1)
        bzero(v1136, 4 * v1135);
      *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * v1018) = v1137;
      v1138 = *(char **)(a1 + 2632);
      v1139 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1138 < v1139)
      {
        *(_QWORD *)v1138 = v1137;
        v1140 = (uint64_t)(v1138 + 8);
        goto LABEL_1197;
      }
      v1141 = *v5;
      v1142 = v1138 - *v5;
      v1143 = v1142 >> 3;
      v1144 = (v1142 >> 3) + 1;
      if (v1144 >> 61)
        goto LABEL_1698;
      v1145 = v1139 - (_QWORD)v1141;
      if (v1145 >> 2 > v1144)
        v1144 = v1145 >> 2;
      if ((unint64_t)v1145 >= 0x7FFFFFFFFFFFFFF8)
        v1146 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1146 = v1144;
      if (v1146)
      {
        if (v1146 >> 61)
          goto LABEL_1699;
        v1147 = operator new(8 * v1146);
        v1148 = &v1147[8 * v1143];
        *v1148 = v1137;
        v1140 = (uint64_t)(v1148 + 1);
        if (v1138 == v1141)
          goto LABEL_1195;
LABEL_1188:
        v1149 = v1138 - 8 - v1141;
        if (v1149 < 0x58)
          goto LABEL_1738;
        if ((unint64_t)(v1138 - &v1147[v1142]) < 0x20)
          goto LABEL_1738;
        v1150 = (v1149 >> 3) + 1;
        v1151 = 8 * (v1150 & 0x3FFFFFFFFFFFFFFCLL);
        v1152 = &v1138[-v1151];
        v1148 = (_QWORD *)((char *)v1148 - v1151);
        v1153 = &v1147[8 * v1143 - 16];
        v1154 = v1138 - 16;
        v1155 = v1150 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1156 = *(_OWORD *)v1154;
          *(v1153 - 1) = *((_OWORD *)v1154 - 1);
          *v1153 = v1156;
          v1153 -= 2;
          v1154 -= 32;
          v1155 -= 4;
        }
        while (v1155);
        v1138 = v1152;
        if (v1150 != (v1150 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1738:
          do
          {
            v1157 = *((_QWORD *)v1138 - 1);
            v1138 -= 8;
            *--v1148 = v1157;
          }
          while (v1138 != v1141);
        }
        v1138 = *v5;
        goto LABEL_1195;
      }
      v1147 = 0;
      v1148 = (_QWORD *)(8 * v1143);
      *(_QWORD *)(8 * v1143) = v1137;
      v1140 = 8 * v1143 + 8;
      if (v1138 != v1141)
        goto LABEL_1188;
LABEL_1195:
      *(_QWORD *)(a1 + 2624) = v1148;
      *(_QWORD *)(a1 + 2632) = v1140;
      *(_QWORD *)(a1 + 2640) = &v1147[8 * v1146];
      if (v1138)
        operator delete(v1138);
LABEL_1197:
      *(_QWORD *)(a1 + 2632) = v1140;
      v1158 = *(unsigned int *)(a1 + 52);
      v1159 = (void *)operator new[]();
      v1160 = v1159;
      if ((int)v1158 >= 1)
        bzero(v1159, 4 * v1158);
      *(_QWORD *)(*(_QWORD *)(a1 + 688) + 8 * v1018) = v1160;
      v1161 = *(char **)(a1 + 2632);
      v1162 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1161 < v1162)
      {
        *(_QWORD *)v1161 = v1160;
        v1163 = (uint64_t)(v1161 + 8);
        goto LABEL_1221;
      }
      v1164 = *v5;
      v1165 = v1161 - *v5;
      v1166 = v1165 >> 3;
      v1167 = (v1165 >> 3) + 1;
      if (v1167 >> 61)
        goto LABEL_1698;
      v1168 = v1162 - (_QWORD)v1164;
      if (v1168 >> 2 > v1167)
        v1167 = v1168 >> 2;
      if ((unint64_t)v1168 >= 0x7FFFFFFFFFFFFFF8)
        v1169 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1169 = v1167;
      if (v1169)
      {
        if (v1169 >> 61)
          goto LABEL_1699;
        v1170 = operator new(8 * v1169);
        v1171 = &v1170[8 * v1166];
        *v1171 = v1160;
        v1163 = (uint64_t)(v1171 + 1);
        if (v1161 == v1164)
          goto LABEL_1219;
LABEL_1212:
        v1172 = v1161 - 8 - v1164;
        if (v1172 < 0x58)
          goto LABEL_1739;
        if ((unint64_t)(v1161 - &v1170[v1165]) < 0x20)
          goto LABEL_1739;
        v1173 = (v1172 >> 3) + 1;
        v1174 = 8 * (v1173 & 0x3FFFFFFFFFFFFFFCLL);
        v1175 = &v1161[-v1174];
        v1171 = (_QWORD *)((char *)v1171 - v1174);
        v1176 = &v1170[8 * v1166 - 16];
        v1177 = v1161 - 16;
        v1178 = v1173 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1179 = *(_OWORD *)v1177;
          *(v1176 - 1) = *((_OWORD *)v1177 - 1);
          *v1176 = v1179;
          v1176 -= 2;
          v1177 -= 32;
          v1178 -= 4;
        }
        while (v1178);
        v1161 = v1175;
        if (v1173 != (v1173 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1739:
          do
          {
            v1180 = *((_QWORD *)v1161 - 1);
            v1161 -= 8;
            *--v1171 = v1180;
          }
          while (v1161 != v1164);
        }
        v1161 = *v5;
        goto LABEL_1219;
      }
      v1170 = 0;
      v1171 = (_QWORD *)(8 * v1166);
      *(_QWORD *)(8 * v1166) = v1160;
      v1163 = 8 * v1166 + 8;
      if (v1161 != v1164)
        goto LABEL_1212;
LABEL_1219:
      *(_QWORD *)(a1 + 2624) = v1171;
      *(_QWORD *)(a1 + 2632) = v1163;
      *(_QWORD *)(a1 + 2640) = &v1170[8 * v1169];
      if (v1161)
        operator delete(v1161);
LABEL_1221:
      *(_QWORD *)(a1 + 2632) = v1163;
      v1181 = *(unsigned int *)(a1 + 52);
      v1182 = (void *)operator new[]();
      v1183 = v1182;
      if ((int)v1181 >= 1)
        bzero(v1182, 4 * v1181);
      *(_QWORD *)(*(_QWORD *)(a1 + 712) + 8 * v1018) = v1183;
      v1184 = *(char **)(a1 + 2632);
      v1185 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1184 >= v1185)
      {
        v1187 = *v5;
        v1188 = v1184 - *v5;
        v1189 = v1188 >> 3;
        v1190 = (v1188 >> 3) + 1;
        if (v1190 >> 61)
          goto LABEL_1698;
        v1191 = v1185 - (_QWORD)v1187;
        if (v1191 >> 2 > v1190)
          v1190 = v1191 >> 2;
        if ((unint64_t)v1191 >= 0x7FFFFFFFFFFFFFF8)
          v1192 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1192 = v1190;
        if (v1192)
        {
          if (v1192 >> 61)
            goto LABEL_1699;
          v1193 = operator new(8 * v1192);
          v1194 = &v1193[8 * v1189];
          *v1194 = v1183;
          v1186 = (uint64_t)(v1194 + 1);
          if (v1184 == v1187)
            goto LABEL_1243;
LABEL_1236:
          v1195 = v1184 - 8 - v1187;
          if (v1195 < 0x58)
            goto LABEL_1740;
          if ((unint64_t)(v1184 - &v1193[v1188]) < 0x20)
            goto LABEL_1740;
          v1196 = (v1195 >> 3) + 1;
          v1197 = 8 * (v1196 & 0x3FFFFFFFFFFFFFFCLL);
          v1198 = &v1184[-v1197];
          v1194 = (_QWORD *)((char *)v1194 - v1197);
          v1199 = &v1193[8 * v1189 - 16];
          v1200 = v1184 - 16;
          v1201 = v1196 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1202 = *(_OWORD *)v1200;
            *(v1199 - 1) = *((_OWORD *)v1200 - 1);
            *v1199 = v1202;
            v1199 -= 2;
            v1200 -= 32;
            v1201 -= 4;
          }
          while (v1201);
          v1184 = v1198;
          if (v1196 != (v1196 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1740:
            do
            {
              v1203 = *((_QWORD *)v1184 - 1);
              v1184 -= 8;
              *--v1194 = v1203;
            }
            while (v1184 != v1187);
          }
          v1184 = *v5;
        }
        else
        {
          v1193 = 0;
          v1194 = (_QWORD *)(8 * v1189);
          *(_QWORD *)(8 * v1189) = v1183;
          v1186 = 8 * v1189 + 8;
          if (v1184 != v1187)
            goto LABEL_1236;
        }
LABEL_1243:
        *(_QWORD *)(a1 + 2624) = v1194;
        *(_QWORD *)(a1 + 2632) = v1186;
        *(_QWORD *)(a1 + 2640) = &v1193[8 * v1192];
        if (v1184)
          operator delete(v1184);
        goto LABEL_1245;
      }
      *(_QWORD *)v1184 = v1183;
      v1186 = (uint64_t)(v1184 + 8);
LABEL_1245:
      *(_QWORD *)(a1 + 2632) = v1186;
LABEL_1246:
      v1204 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1205 = (void *)operator new[]();
      bzero(v1205, 4 * v1204);
      *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v1018) = v1205;
      v1206 = *(char **)(a1 + 2632);
      v1207 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1206 < v1207)
      {
        *(_QWORD *)v1206 = v1205;
        v1208 = (uint64_t)(v1206 + 8);
        goto LABEL_1268;
      }
      v1209 = *v5;
      v1210 = v1206 - *v5;
      v1211 = v1210 >> 3;
      v1212 = (v1210 >> 3) + 1;
      if (v1212 >> 61)
        goto LABEL_1698;
      v1213 = v1207 - (_QWORD)v1209;
      if (v1213 >> 2 > v1212)
        v1212 = v1213 >> 2;
      if ((unint64_t)v1213 >= 0x7FFFFFFFFFFFFFF8)
        v1214 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1214 = v1212;
      if (v1214)
      {
        if (v1214 >> 61)
          goto LABEL_1699;
        v1215 = operator new(8 * v1214);
        v1216 = &v1215[8 * v1211];
        *v1216 = v1205;
        v1208 = (uint64_t)(v1216 + 1);
        if (v1206 == v1209)
          goto LABEL_1266;
LABEL_1259:
        v1217 = v1206 - 8 - v1209;
        if (v1217 < 0x58)
          goto LABEL_1741;
        if ((unint64_t)(v1206 - &v1215[v1210]) < 0x20)
          goto LABEL_1741;
        v1218 = (v1217 >> 3) + 1;
        v1219 = 8 * (v1218 & 0x3FFFFFFFFFFFFFFCLL);
        v1220 = &v1206[-v1219];
        v1216 = (_QWORD *)((char *)v1216 - v1219);
        v1221 = &v1215[8 * v1211 - 16];
        v1222 = v1206 - 16;
        v1223 = v1218 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1224 = *(_OWORD *)v1222;
          *(v1221 - 1) = *((_OWORD *)v1222 - 1);
          *v1221 = v1224;
          v1221 -= 2;
          v1222 -= 32;
          v1223 -= 4;
        }
        while (v1223);
        v1206 = v1220;
        if (v1218 != (v1218 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1741:
          do
          {
            v1225 = *((_QWORD *)v1206 - 1);
            v1206 -= 8;
            *--v1216 = v1225;
          }
          while (v1206 != v1209);
        }
        v1206 = *v5;
        goto LABEL_1266;
      }
      v1215 = 0;
      v1216 = (_QWORD *)(8 * v1211);
      *(_QWORD *)(8 * v1211) = v1205;
      v1208 = 8 * v1211 + 8;
      if (v1206 != v1209)
        goto LABEL_1259;
LABEL_1266:
      *(_QWORD *)(a1 + 2624) = v1216;
      *(_QWORD *)(a1 + 2632) = v1208;
      *(_QWORD *)(a1 + 2640) = &v1215[8 * v1214];
      if (v1206)
        operator delete(v1206);
LABEL_1268:
      *(_QWORD *)(a1 + 2632) = v1208;
      v1226 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1227 = (void *)operator new[]();
      bzero(v1227, 4 * v1226);
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v1018) = v1227;
      v1228 = *(char **)(a1 + 2632);
      v1229 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1228 < v1229)
      {
        *(_QWORD *)v1228 = v1227;
        v1230 = (uint64_t)(v1228 + 8);
        goto LABEL_1290;
      }
      v1231 = *v5;
      v1232 = v1228 - *v5;
      v1233 = v1232 >> 3;
      v1234 = (v1232 >> 3) + 1;
      if (v1234 >> 61)
        goto LABEL_1698;
      v1235 = v1229 - (_QWORD)v1231;
      if (v1235 >> 2 > v1234)
        v1234 = v1235 >> 2;
      if ((unint64_t)v1235 >= 0x7FFFFFFFFFFFFFF8)
        v1236 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1236 = v1234;
      if (v1236)
      {
        if (v1236 >> 61)
          goto LABEL_1699;
        v1237 = operator new(8 * v1236);
        v1238 = &v1237[8 * v1233];
        *v1238 = v1227;
        v1230 = (uint64_t)(v1238 + 1);
        if (v1228 == v1231)
          goto LABEL_1288;
LABEL_1281:
        v1239 = v1228 - 8 - v1231;
        if (v1239 < 0x58)
          goto LABEL_1742;
        if ((unint64_t)(v1228 - &v1237[v1232]) < 0x20)
          goto LABEL_1742;
        v1240 = (v1239 >> 3) + 1;
        v1241 = 8 * (v1240 & 0x3FFFFFFFFFFFFFFCLL);
        v1242 = &v1228[-v1241];
        v1238 = (_QWORD *)((char *)v1238 - v1241);
        v1243 = &v1237[8 * v1233 - 16];
        v1244 = v1228 - 16;
        v1245 = v1240 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1246 = *(_OWORD *)v1244;
          *(v1243 - 1) = *((_OWORD *)v1244 - 1);
          *v1243 = v1246;
          v1243 -= 2;
          v1244 -= 32;
          v1245 -= 4;
        }
        while (v1245);
        v1228 = v1242;
        if (v1240 != (v1240 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1742:
          do
          {
            v1247 = *((_QWORD *)v1228 - 1);
            v1228 -= 8;
            *--v1238 = v1247;
          }
          while (v1228 != v1231);
        }
        v1228 = *v5;
        goto LABEL_1288;
      }
      v1237 = 0;
      v1238 = (_QWORD *)(8 * v1233);
      *(_QWORD *)(8 * v1233) = v1227;
      v1230 = 8 * v1233 + 8;
      if (v1228 != v1231)
        goto LABEL_1281;
LABEL_1288:
      *(_QWORD *)(a1 + 2624) = v1238;
      *(_QWORD *)(a1 + 2632) = v1230;
      *(_QWORD *)(a1 + 2640) = &v1237[8 * v1236];
      if (v1228)
        operator delete(v1228);
LABEL_1290:
      *(_QWORD *)(a1 + 2632) = v1230;
      v1248 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1249 = (void *)operator new[]();
      bzero(v1249, 4 * v1248);
      *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v1018) = v1249;
      v1250 = *(char **)(a1 + 2632);
      v1251 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1250 < v1251)
      {
        *(_QWORD *)v1250 = v1249;
        v1252 = (uint64_t)(v1250 + 8);
        goto LABEL_1312;
      }
      v1253 = *v5;
      v1254 = v1250 - *v5;
      v1255 = v1254 >> 3;
      v1256 = (v1254 >> 3) + 1;
      if (v1256 >> 61)
        goto LABEL_1698;
      v1257 = v1251 - (_QWORD)v1253;
      if (v1257 >> 2 > v1256)
        v1256 = v1257 >> 2;
      if ((unint64_t)v1257 >= 0x7FFFFFFFFFFFFFF8)
        v1258 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1258 = v1256;
      if (v1258)
      {
        if (v1258 >> 61)
          goto LABEL_1699;
        v1259 = operator new(8 * v1258);
        v1260 = &v1259[8 * v1255];
        *v1260 = v1249;
        v1252 = (uint64_t)(v1260 + 1);
        if (v1250 == v1253)
          goto LABEL_1310;
LABEL_1303:
        v1261 = v1250 - 8 - v1253;
        if (v1261 < 0x58)
          goto LABEL_1743;
        if ((unint64_t)(v1250 - &v1259[v1254]) < 0x20)
          goto LABEL_1743;
        v1262 = (v1261 >> 3) + 1;
        v1263 = 8 * (v1262 & 0x3FFFFFFFFFFFFFFCLL);
        v1264 = &v1250[-v1263];
        v1260 = (_QWORD *)((char *)v1260 - v1263);
        v1265 = &v1259[8 * v1255 - 16];
        v1266 = v1250 - 16;
        v1267 = v1262 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1268 = *(_OWORD *)v1266;
          *(v1265 - 1) = *((_OWORD *)v1266 - 1);
          *v1265 = v1268;
          v1265 -= 2;
          v1266 -= 32;
          v1267 -= 4;
        }
        while (v1267);
        v1250 = v1264;
        if (v1262 != (v1262 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1743:
          do
          {
            v1269 = *((_QWORD *)v1250 - 1);
            v1250 -= 8;
            *--v1260 = v1269;
          }
          while (v1250 != v1253);
        }
        v1250 = *v5;
        goto LABEL_1310;
      }
      v1259 = 0;
      v1260 = (_QWORD *)(8 * v1255);
      *(_QWORD *)(8 * v1255) = v1249;
      v1252 = 8 * v1255 + 8;
      if (v1250 != v1253)
        goto LABEL_1303;
LABEL_1310:
      *(_QWORD *)(a1 + 2624) = v1260;
      *(_QWORD *)(a1 + 2632) = v1252;
      *(_QWORD *)(a1 + 2640) = &v1259[8 * v1258];
      if (v1250)
        operator delete(v1250);
LABEL_1312:
      *(_QWORD *)(a1 + 2632) = v1252;
      v1270 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1271 = (void *)operator new[]();
      bzero(v1271, 4 * v1270);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v1018) = v1271;
      v1272 = *(char **)(a1 + 2632);
      v1273 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1272 < v1273)
      {
        *(_QWORD *)v1272 = v1271;
        v1274 = (uint64_t)(v1272 + 8);
        goto LABEL_1334;
      }
      v1275 = *v5;
      v1276 = v1272 - *v5;
      v1277 = v1276 >> 3;
      v1278 = (v1276 >> 3) + 1;
      if (v1278 >> 61)
        goto LABEL_1698;
      v1279 = v1273 - (_QWORD)v1275;
      if (v1279 >> 2 > v1278)
        v1278 = v1279 >> 2;
      if ((unint64_t)v1279 >= 0x7FFFFFFFFFFFFFF8)
        v1280 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1280 = v1278;
      if (v1280)
      {
        if (v1280 >> 61)
          goto LABEL_1699;
        v1281 = operator new(8 * v1280);
        v1282 = &v1281[8 * v1277];
        *v1282 = v1271;
        v1274 = (uint64_t)(v1282 + 1);
        if (v1272 == v1275)
          goto LABEL_1332;
LABEL_1325:
        v1283 = v1272 - 8 - v1275;
        if (v1283 < 0x58)
          goto LABEL_1744;
        if ((unint64_t)(v1272 - &v1281[v1276]) < 0x20)
          goto LABEL_1744;
        v1284 = (v1283 >> 3) + 1;
        v1285 = 8 * (v1284 & 0x3FFFFFFFFFFFFFFCLL);
        v1286 = &v1272[-v1285];
        v1282 = (_QWORD *)((char *)v1282 - v1285);
        v1287 = &v1281[8 * v1277 - 16];
        v1288 = v1272 - 16;
        v1289 = v1284 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1290 = *(_OWORD *)v1288;
          *(v1287 - 1) = *((_OWORD *)v1288 - 1);
          *v1287 = v1290;
          v1287 -= 2;
          v1288 -= 32;
          v1289 -= 4;
        }
        while (v1289);
        v1272 = v1286;
        if (v1284 != (v1284 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1744:
          do
          {
            v1291 = *((_QWORD *)v1272 - 1);
            v1272 -= 8;
            *--v1282 = v1291;
          }
          while (v1272 != v1275);
        }
        v1272 = *v5;
        goto LABEL_1332;
      }
      v1281 = 0;
      v1282 = (_QWORD *)(8 * v1277);
      *(_QWORD *)(8 * v1277) = v1271;
      v1274 = 8 * v1277 + 8;
      if (v1272 != v1275)
        goto LABEL_1325;
LABEL_1332:
      *(_QWORD *)(a1 + 2624) = v1282;
      *(_QWORD *)(a1 + 2632) = v1274;
      *(_QWORD *)(a1 + 2640) = &v1281[8 * v1280];
      if (v1272)
        operator delete(v1272);
LABEL_1334:
      *(_QWORD *)(a1 + 2632) = v1274;
      v1292 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1293 = (void *)operator new[]();
      bzero(v1293, 4 * v1292);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v1018) = v1293;
      v1294 = *(char **)(a1 + 2632);
      v1295 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1294 < v1295)
      {
        *(_QWORD *)v1294 = v1293;
        v1296 = (uint64_t)(v1294 + 8);
        goto LABEL_1356;
      }
      v1297 = *v5;
      v1298 = v1294 - *v5;
      v1299 = v1298 >> 3;
      v1300 = (v1298 >> 3) + 1;
      if (v1300 >> 61)
        goto LABEL_1698;
      v1301 = v1295 - (_QWORD)v1297;
      if (v1301 >> 2 > v1300)
        v1300 = v1301 >> 2;
      if ((unint64_t)v1301 >= 0x7FFFFFFFFFFFFFF8)
        v1302 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1302 = v1300;
      if (v1302)
      {
        if (v1302 >> 61)
          goto LABEL_1699;
        v1303 = operator new(8 * v1302);
        v1304 = &v1303[8 * v1299];
        *v1304 = v1293;
        v1296 = (uint64_t)(v1304 + 1);
        if (v1294 == v1297)
          goto LABEL_1354;
LABEL_1347:
        v1305 = v1294 - 8 - v1297;
        if (v1305 < 0x58)
          goto LABEL_1745;
        if ((unint64_t)(v1294 - &v1303[v1298]) < 0x20)
          goto LABEL_1745;
        v1306 = (v1305 >> 3) + 1;
        v1307 = 8 * (v1306 & 0x3FFFFFFFFFFFFFFCLL);
        v1308 = &v1294[-v1307];
        v1304 = (_QWORD *)((char *)v1304 - v1307);
        v1309 = &v1303[8 * v1299 - 16];
        v1310 = v1294 - 16;
        v1311 = v1306 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1312 = *(_OWORD *)v1310;
          *(v1309 - 1) = *((_OWORD *)v1310 - 1);
          *v1309 = v1312;
          v1309 -= 2;
          v1310 -= 32;
          v1311 -= 4;
        }
        while (v1311);
        v1294 = v1308;
        if (v1306 != (v1306 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1745:
          do
          {
            v1313 = *((_QWORD *)v1294 - 1);
            v1294 -= 8;
            *--v1304 = v1313;
          }
          while (v1294 != v1297);
        }
        v1294 = *v5;
        goto LABEL_1354;
      }
      v1303 = 0;
      v1304 = (_QWORD *)(8 * v1299);
      *(_QWORD *)(8 * v1299) = v1293;
      v1296 = 8 * v1299 + 8;
      if (v1294 != v1297)
        goto LABEL_1347;
LABEL_1354:
      *(_QWORD *)(a1 + 2624) = v1304;
      *(_QWORD *)(a1 + 2632) = v1296;
      *(_QWORD *)(a1 + 2640) = &v1303[8 * v1302];
      if (v1294)
        operator delete(v1294);
LABEL_1356:
      *(_QWORD *)(a1 + 2632) = v1296;
      v1314 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1315 = (void *)operator new[]();
      bzero(v1315, 4 * v1314);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v1018) = v1315;
      v1316 = *(char **)(a1 + 2632);
      v1317 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1316 < v1317)
      {
        *(_QWORD *)v1316 = v1315;
        v1318 = (uint64_t)(v1316 + 8);
        goto LABEL_1378;
      }
      v1319 = *v5;
      v1320 = v1316 - *v5;
      v1321 = v1320 >> 3;
      v1322 = (v1320 >> 3) + 1;
      if (v1322 >> 61)
        goto LABEL_1698;
      v1323 = v1317 - (_QWORD)v1319;
      if (v1323 >> 2 > v1322)
        v1322 = v1323 >> 2;
      if ((unint64_t)v1323 >= 0x7FFFFFFFFFFFFFF8)
        v1324 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1324 = v1322;
      if (v1324)
      {
        if (v1324 >> 61)
          goto LABEL_1699;
        v1325 = operator new(8 * v1324);
        v1326 = &v1325[8 * v1321];
        *v1326 = v1315;
        v1318 = (uint64_t)(v1326 + 1);
        if (v1316 == v1319)
          goto LABEL_1376;
LABEL_1369:
        v1327 = v1316 - 8 - v1319;
        if (v1327 < 0x58)
          goto LABEL_1746;
        if ((unint64_t)(v1316 - &v1325[v1320]) < 0x20)
          goto LABEL_1746;
        v1328 = (v1327 >> 3) + 1;
        v1329 = 8 * (v1328 & 0x3FFFFFFFFFFFFFFCLL);
        v1330 = &v1316[-v1329];
        v1326 = (_QWORD *)((char *)v1326 - v1329);
        v1331 = &v1325[8 * v1321 - 16];
        v1332 = v1316 - 16;
        v1333 = v1328 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1334 = *(_OWORD *)v1332;
          *(v1331 - 1) = *((_OWORD *)v1332 - 1);
          *v1331 = v1334;
          v1331 -= 2;
          v1332 -= 32;
          v1333 -= 4;
        }
        while (v1333);
        v1316 = v1330;
        if (v1328 != (v1328 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1746:
          do
          {
            v1335 = *((_QWORD *)v1316 - 1);
            v1316 -= 8;
            *--v1326 = v1335;
          }
          while (v1316 != v1319);
        }
        v1316 = *v5;
        goto LABEL_1376;
      }
      v1325 = 0;
      v1326 = (_QWORD *)(8 * v1321);
      *(_QWORD *)(8 * v1321) = v1315;
      v1318 = 8 * v1321 + 8;
      if (v1316 != v1319)
        goto LABEL_1369;
LABEL_1376:
      *(_QWORD *)(a1 + 2624) = v1326;
      *(_QWORD *)(a1 + 2632) = v1318;
      *(_QWORD *)(a1 + 2640) = &v1325[8 * v1324];
      if (v1316)
        operator delete(v1316);
LABEL_1378:
      *(_QWORD *)(a1 + 2632) = v1318;
      v1336 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1337 = (void *)operator new[]();
      bzero(v1337, 4 * v1336);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v1018) = v1337;
      v1338 = *(char **)(a1 + 2632);
      v1339 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1338 < v1339)
      {
        *(_QWORD *)v1338 = v1337;
        v1340 = (uint64_t)(v1338 + 8);
        goto LABEL_1400;
      }
      v1341 = *v5;
      v1342 = v1338 - *v5;
      v1343 = v1342 >> 3;
      v1344 = (v1342 >> 3) + 1;
      if (v1344 >> 61)
        goto LABEL_1698;
      v1345 = v1339 - (_QWORD)v1341;
      if (v1345 >> 2 > v1344)
        v1344 = v1345 >> 2;
      if ((unint64_t)v1345 >= 0x7FFFFFFFFFFFFFF8)
        v1346 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1346 = v1344;
      if (v1346)
      {
        if (v1346 >> 61)
          goto LABEL_1699;
        v1347 = operator new(8 * v1346);
        v1348 = &v1347[8 * v1343];
        *v1348 = v1337;
        v1340 = (uint64_t)(v1348 + 1);
        if (v1338 == v1341)
          goto LABEL_1398;
LABEL_1391:
        v1349 = v1338 - 8 - v1341;
        if (v1349 < 0x58)
          goto LABEL_1747;
        if ((unint64_t)(v1338 - &v1347[v1342]) < 0x20)
          goto LABEL_1747;
        v1350 = (v1349 >> 3) + 1;
        v1351 = 8 * (v1350 & 0x3FFFFFFFFFFFFFFCLL);
        v1352 = &v1338[-v1351];
        v1348 = (_QWORD *)((char *)v1348 - v1351);
        v1353 = &v1347[8 * v1343 - 16];
        v1354 = v1338 - 16;
        v1355 = v1350 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1356 = *(_OWORD *)v1354;
          *(v1353 - 1) = *((_OWORD *)v1354 - 1);
          *v1353 = v1356;
          v1353 -= 2;
          v1354 -= 32;
          v1355 -= 4;
        }
        while (v1355);
        v1338 = v1352;
        if (v1350 != (v1350 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1747:
          do
          {
            v1357 = *((_QWORD *)v1338 - 1);
            v1338 -= 8;
            *--v1348 = v1357;
          }
          while (v1338 != v1341);
        }
        v1338 = *v5;
        goto LABEL_1398;
      }
      v1347 = 0;
      v1348 = (_QWORD *)(8 * v1343);
      *(_QWORD *)(8 * v1343) = v1337;
      v1340 = 8 * v1343 + 8;
      if (v1338 != v1341)
        goto LABEL_1391;
LABEL_1398:
      *(_QWORD *)(a1 + 2624) = v1348;
      *(_QWORD *)(a1 + 2632) = v1340;
      *(_QWORD *)(a1 + 2640) = &v1347[8 * v1346];
      if (v1338)
        operator delete(v1338);
LABEL_1400:
      *(_QWORD *)(a1 + 2632) = v1340;
      v1358 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1359 = (void *)operator new[]();
      bzero(v1359, 4 * v1358);
      *(_QWORD *)(*(_QWORD *)(a1 + 520) + 8 * v1018) = v1359;
      v1360 = *(char **)(a1 + 2632);
      v1361 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1360 >= v1361)
      {
        v1362 = *v5;
        v1363 = v1360 - *v5;
        v1364 = v1363 >> 3;
        v1365 = (v1363 >> 3) + 1;
        if (v1365 >> 61)
          goto LABEL_1698;
        v1366 = v1361 - (_QWORD)v1362;
        if (v1366 >> 2 > v1365)
          v1365 = v1366 >> 2;
        if ((unint64_t)v1366 >= 0x7FFFFFFFFFFFFFF8)
          v1367 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1367 = v1365;
        if (v1367)
        {
          if (v1367 >> 61)
            goto LABEL_1699;
          v1368 = operator new(8 * v1367);
          v1369 = &v1368[8 * v1364];
          *v1369 = v1359;
          v1019 = (uint64_t)(v1369 + 1);
          if (v1360 == v1362)
            goto LABEL_1419;
LABEL_1412:
          v1370 = v1360 - 8 - v1362;
          if (v1370 < 0x58)
            goto LABEL_1748;
          if ((unint64_t)(v1360 - &v1368[v1363]) < 0x20)
            goto LABEL_1748;
          v1371 = (v1370 >> 3) + 1;
          v1372 = 8 * (v1371 & 0x3FFFFFFFFFFFFFFCLL);
          v1373 = &v1360[-v1372];
          v1369 = (_QWORD *)((char *)v1369 - v1372);
          v1374 = &v1368[8 * v1364 - 16];
          v1375 = v1360 - 16;
          v1376 = v1371 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1377 = *(_OWORD *)v1375;
            *(v1374 - 1) = *((_OWORD *)v1375 - 1);
            *v1374 = v1377;
            v1374 -= 2;
            v1375 -= 32;
            v1376 -= 4;
          }
          while (v1376);
          v1360 = v1373;
          if (v1371 != (v1371 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1748:
            do
            {
              v1378 = *((_QWORD *)v1360 - 1);
              v1360 -= 8;
              *--v1369 = v1378;
            }
            while (v1360 != v1362);
          }
          v1360 = *v5;
        }
        else
        {
          v1368 = 0;
          v1369 = (_QWORD *)(8 * v1364);
          *(_QWORD *)(8 * v1364) = v1359;
          v1019 = 8 * v1364 + 8;
          if (v1360 != v1362)
            goto LABEL_1412;
        }
LABEL_1419:
        *(_QWORD *)(a1 + 2624) = v1369;
        *(_QWORD *)(a1 + 2632) = v1019;
        *(_QWORD *)(a1 + 2640) = &v1368[8 * v1367];
        if (v1360)
          operator delete(v1360);
        goto LABEL_1051;
      }
      *(_QWORD *)v1360 = v1359;
      v1019 = (uint64_t)(v1360 + 8);
LABEL_1051:
      *(_QWORD *)(a1 + 2632) = v1019;
      if (++v1018 == v1635)
        goto LABEL_1421;
    }
    if (v1031 >> 61)
      goto LABEL_1699;
    v1032 = operator new(8 * v1031);
    v1033 = &v1032[8 * v1028];
    *v1033 = v1022;
    v1025 = (uint64_t)(v1033 + 1);
    if (v1023 == v1026)
      goto LABEL_1075;
LABEL_1068:
    v1034 = v1023 - 8 - v1026;
    if (v1034 < 0x58)
      goto LABEL_1749;
    if ((unint64_t)(v1023 - &v1032[v1027]) < 0x20)
      goto LABEL_1749;
    v1035 = (v1034 >> 3) + 1;
    v1036 = 8 * (v1035 & 0x3FFFFFFFFFFFFFFCLL);
    v1037 = &v1023[-v1036];
    v1033 = (_QWORD *)((char *)v1033 - v1036);
    v1038 = &v1032[8 * v1028 - 16];
    v1039 = v1023 - 16;
    v1040 = v1035 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v1041 = *(_OWORD *)v1039;
      *(v1038 - 1) = *((_OWORD *)v1039 - 1);
      *v1038 = v1041;
      v1038 -= 2;
      v1039 -= 32;
      v1040 -= 4;
    }
    while (v1040);
    v1023 = v1037;
    if (v1035 != (v1035 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1749:
      do
      {
        v1042 = *((_QWORD *)v1023 - 1);
        v1023 -= 8;
        *--v1033 = v1042;
      }
      while (v1023 != v1026);
    }
    v1023 = *v5;
    goto LABEL_1075;
  }
LABEL_1421:
  if (dword_1EE418968 >= 1)
  {
    v1379 = 0;
    while (1)
    {
      v1382 = (_QWORD *)(*(_QWORD *)(a1 + 208) + 24 * v1379);
      v1383 = 1;
      if (*(_BYTE *)(a1 + 40))
        v1383 = 2;
      v1384 = (uint64_t)(v1382[1] - *v1382) >> 2;
      if (v1383 <= v1384)
      {
        if (v1383 < v1384)
          v1382[1] = *v1382 + 4 * v1383;
      }
      else
      {
        sub_19C101928((uint64_t)v1382, v1383 - v1384);
      }
      if (*(_BYTE *)(a1 + 2692))
        break;
LABEL_1482:
      v1431 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1432 = (void *)operator new[]();
      bzero(v1432, 4 * v1431);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v1379) = v1432;
      v1433 = *(char **)(a1 + 2632);
      v1434 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1433 < v1434)
      {
        *(_QWORD *)v1433 = v1432;
        v1435 = (uint64_t)(v1433 + 8);
        goto LABEL_1504;
      }
      v1436 = *v5;
      v1437 = v1433 - *v5;
      v1438 = v1437 >> 3;
      v1439 = (v1437 >> 3) + 1;
      if (v1439 >> 61)
        goto LABEL_1698;
      v1440 = v1434 - (_QWORD)v1436;
      if (v1440 >> 2 > v1439)
        v1439 = v1440 >> 2;
      if ((unint64_t)v1440 >= 0x7FFFFFFFFFFFFFF8)
        v1441 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1441 = v1439;
      if (v1441)
      {
        if (v1441 >> 61)
          goto LABEL_1699;
        v1442 = operator new(8 * v1441);
        v1443 = &v1442[8 * v1438];
        *v1443 = v1432;
        v1435 = (uint64_t)(v1443 + 1);
        if (v1433 == v1436)
          goto LABEL_1502;
LABEL_1495:
        v1444 = v1433 - 8 - v1436;
        if (v1444 < 0x58)
          goto LABEL_1750;
        if ((unint64_t)(v1433 - &v1442[v1437]) < 0x20)
          goto LABEL_1750;
        v1445 = (v1444 >> 3) + 1;
        v1446 = 8 * (v1445 & 0x3FFFFFFFFFFFFFFCLL);
        v1447 = &v1433[-v1446];
        v1443 = (_QWORD *)((char *)v1443 - v1446);
        v1448 = &v1442[8 * v1438 - 16];
        v1449 = v1433 - 16;
        v1450 = v1445 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1451 = *(_OWORD *)v1449;
          *(v1448 - 1) = *((_OWORD *)v1449 - 1);
          *v1448 = v1451;
          v1448 -= 2;
          v1449 -= 32;
          v1450 -= 4;
        }
        while (v1450);
        v1433 = v1447;
        if (v1445 != (v1445 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1750:
          do
          {
            v1452 = *((_QWORD *)v1433 - 1);
            v1433 -= 8;
            *--v1443 = v1452;
          }
          while (v1433 != v1436);
        }
        v1433 = *v5;
        goto LABEL_1502;
      }
      v1442 = 0;
      v1443 = (_QWORD *)(8 * v1438);
      *(_QWORD *)(8 * v1438) = v1432;
      v1435 = 8 * v1438 + 8;
      if (v1433 != v1436)
        goto LABEL_1495;
LABEL_1502:
      *(_QWORD *)(a1 + 2624) = v1443;
      *(_QWORD *)(a1 + 2632) = v1435;
      *(_QWORD *)(a1 + 2640) = &v1442[8 * v1441];
      if (v1433)
        operator delete(v1433);
LABEL_1504:
      *(_QWORD *)(a1 + 2632) = v1435;
      v1453 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 2688);
      v1454 = (void *)operator new[]();
      bzero(v1454, 4 * v1453);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v1379) = v1454;
      v1455 = *(char **)(a1 + 2632);
      v1456 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1455 < v1456)
      {
        *(_QWORD *)v1455 = v1454;
        v1457 = (uint64_t)(v1455 + 8);
        v1381 = (void **)(MLPNDArrayLossLabels + 24);
        goto LABEL_1523;
      }
      v1458 = *v5;
      v1459 = v1455 - *v5;
      v1460 = v1459 >> 3;
      v1461 = (v1459 >> 3) + 1;
      if (v1461 >> 61)
        goto LABEL_1698;
      v1462 = v1456 - (_QWORD)v1458;
      if (v1462 >> 2 > v1461)
        v1461 = v1462 >> 2;
      if ((unint64_t)v1462 >= 0x7FFFFFFFFFFFFFF8)
        v1463 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1463 = v1461;
      if (v1463)
      {
        if (v1463 >> 61)
          goto LABEL_1699;
        v1464 = operator new(8 * v1463);
        v1465 = &v1464[8 * v1460];
        *v1465 = v1454;
        v1457 = (uint64_t)(v1465 + 1);
        if (v1455 == v1458)
        {
LABEL_1539:
          v1381 = (void **)(MLPNDArrayLossLabels + 24);
          *(_QWORD *)(a1 + 2624) = v1465;
          *(_QWORD *)(a1 + 2632) = v1457;
          *(_QWORD *)(a1 + 2640) = &v1464[8 * v1463];
          if (v1455)
            goto LABEL_1522;
          goto LABEL_1523;
        }
      }
      else
      {
        v1464 = 0;
        v1465 = (_QWORD *)(8 * v1460);
        *(_QWORD *)(8 * v1460) = v1454;
        v1457 = 8 * v1460 + 8;
        if (v1455 == v1458)
          goto LABEL_1539;
      }
      v1466 = v1455 - 8 - v1458;
      v1381 = (void **)(MLPNDArrayLossLabels + 24);
      if (v1466 < 0x58)
        goto LABEL_1751;
      if ((unint64_t)(v1455 - &v1464[v1459]) < 0x20)
        goto LABEL_1751;
      v1467 = (v1466 >> 3) + 1;
      v1468 = 8 * (v1467 & 0x3FFFFFFFFFFFFFFCLL);
      v1469 = &v1455[-v1468];
      v1465 = (_QWORD *)((char *)v1465 - v1468);
      v1470 = &v1464[8 * v1460 - 16];
      v1471 = v1455 - 16;
      v1472 = v1467 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1473 = *(_OWORD *)v1471;
        *(v1470 - 1) = *((_OWORD *)v1471 - 1);
        *v1470 = v1473;
        v1470 -= 2;
        v1471 -= 32;
        v1472 -= 4;
      }
      while (v1472);
      v1455 = v1469;
      if (v1467 != (v1467 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1751:
        do
        {
          v1474 = *((_QWORD *)v1455 - 1);
          v1455 -= 8;
          *--v1465 = v1474;
        }
        while (v1455 != v1458);
      }
      v1455 = *v5;
      *(_QWORD *)(a1 + 2624) = v1465;
      *(_QWORD *)(a1 + 2632) = v1457;
      *(_QWORD *)(a1 + 2640) = &v1464[8 * v1463];
      if (v1455)
LABEL_1522:
        operator delete(v1455);
LABEL_1523:
      *(_QWORD *)(a1 + 2632) = v1457;
      if (*(_BYTE *)(a1 + 1696))
        goto LABEL_1425;
      v1475 = *(unsigned int *)(a1 + 52);
      v1476 = (void *)operator new[]();
      v1477 = v1476;
      if ((int)v1475 >= 1)
        bzero(v1476, 4 * v1475);
      *(_QWORD *)(*(_QWORD *)(a1 + 960) + 8 * v1379) = v1477;
      v1478 = *(char **)(a1 + 2632);
      v1479 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1478 < v1479)
      {
        *(_QWORD *)v1478 = v1477;
        v1480 = (uint64_t)(v1478 + 8);
        goto LABEL_1551;
      }
      v1481 = *v5;
      v1482 = v1478 - *v5;
      v1483 = v1482 >> 3;
      v1484 = (v1482 >> 3) + 1;
      if (v1484 >> 61)
        goto LABEL_1698;
      v1485 = v1479 - (_QWORD)v1481;
      if (v1485 >> 2 > v1484)
        v1484 = v1485 >> 2;
      if ((unint64_t)v1485 >= 0x7FFFFFFFFFFFFFF8)
        v1486 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1486 = v1484;
      if (v1486)
      {
        if (v1486 >> 61)
          goto LABEL_1699;
        v1487 = operator new(8 * v1486);
        v1488 = &v1487[8 * v1483];
        *v1488 = v1477;
        v1480 = (uint64_t)(v1488 + 1);
        if (v1478 == v1481)
          goto LABEL_1549;
LABEL_1542:
        v1489 = v1478 - 8 - v1481;
        if (v1489 < 0x58)
          goto LABEL_1752;
        if ((unint64_t)(v1478 - &v1487[v1482]) < 0x20)
          goto LABEL_1752;
        v1490 = (v1489 >> 3) + 1;
        v1491 = 8 * (v1490 & 0x3FFFFFFFFFFFFFFCLL);
        v1492 = &v1478[-v1491];
        v1488 = (_QWORD *)((char *)v1488 - v1491);
        v1493 = &v1487[8 * v1483 - 16];
        v1494 = v1478 - 16;
        v1495 = v1490 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1496 = *(_OWORD *)v1494;
          *(v1493 - 1) = *((_OWORD *)v1494 - 1);
          *v1493 = v1496;
          v1493 -= 2;
          v1494 -= 32;
          v1495 -= 4;
        }
        while (v1495);
        v1478 = v1492;
        if (v1490 != (v1490 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1752:
          do
          {
            v1497 = *((_QWORD *)v1478 - 1);
            v1478 -= 8;
            *--v1488 = v1497;
          }
          while (v1478 != v1481);
        }
        v1478 = *v5;
        goto LABEL_1549;
      }
      v1487 = 0;
      v1488 = (_QWORD *)(8 * v1483);
      *(_QWORD *)(8 * v1483) = v1477;
      v1480 = 8 * v1483 + 8;
      if (v1478 != v1481)
        goto LABEL_1542;
LABEL_1549:
      *(_QWORD *)(a1 + 2624) = v1488;
      *(_QWORD *)(a1 + 2632) = v1480;
      *(_QWORD *)(a1 + 2640) = &v1487[8 * v1486];
      if (v1478)
        operator delete(v1478);
LABEL_1551:
      *(_QWORD *)(a1 + 2632) = v1480;
      v1498 = *(unsigned int *)(a1 + 52);
      v1499 = (void *)operator new[]();
      v1500 = v1499;
      if ((int)v1498 >= 1)
        bzero(v1499, 4 * v1498);
      *(_QWORD *)(*(_QWORD *)(a1 + 840) + 8 * v1379) = v1500;
      v1501 = *(char **)(a1 + 2632);
      v1502 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1501 < v1502)
      {
        *(_QWORD *)v1501 = v1500;
        v1503 = (uint64_t)(v1501 + 8);
        goto LABEL_1575;
      }
      v1504 = *v5;
      v1505 = v1501 - *v5;
      v1506 = v1505 >> 3;
      v1507 = (v1505 >> 3) + 1;
      if (v1507 >> 61)
        goto LABEL_1698;
      v1508 = v1502 - (_QWORD)v1504;
      if (v1508 >> 2 > v1507)
        v1507 = v1508 >> 2;
      if ((unint64_t)v1508 >= 0x7FFFFFFFFFFFFFF8)
        v1509 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1509 = v1507;
      if (v1509)
      {
        if (v1509 >> 61)
          goto LABEL_1699;
        v1510 = operator new(8 * v1509);
        v1511 = &v1510[8 * v1506];
        *v1511 = v1500;
        v1503 = (uint64_t)(v1511 + 1);
        if (v1501 == v1504)
          goto LABEL_1573;
LABEL_1566:
        v1512 = v1501 - 8 - v1504;
        if (v1512 < 0x58)
          goto LABEL_1753;
        if ((unint64_t)(v1501 - &v1510[v1505]) < 0x20)
          goto LABEL_1753;
        v1513 = (v1512 >> 3) + 1;
        v1514 = 8 * (v1513 & 0x3FFFFFFFFFFFFFFCLL);
        v1515 = &v1501[-v1514];
        v1511 = (_QWORD *)((char *)v1511 - v1514);
        v1516 = &v1510[8 * v1506 - 16];
        v1517 = v1501 - 16;
        v1518 = v1513 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1519 = *(_OWORD *)v1517;
          *(v1516 - 1) = *((_OWORD *)v1517 - 1);
          *v1516 = v1519;
          v1516 -= 2;
          v1517 -= 32;
          v1518 -= 4;
        }
        while (v1518);
        v1501 = v1515;
        if (v1513 != (v1513 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1753:
          do
          {
            v1520 = *((_QWORD *)v1501 - 1);
            v1501 -= 8;
            *--v1511 = v1520;
          }
          while (v1501 != v1504);
        }
        v1501 = *v5;
        goto LABEL_1573;
      }
      v1510 = 0;
      v1511 = (_QWORD *)(8 * v1506);
      *(_QWORD *)(8 * v1506) = v1500;
      v1503 = 8 * v1506 + 8;
      if (v1501 != v1504)
        goto LABEL_1566;
LABEL_1573:
      *(_QWORD *)(a1 + 2624) = v1511;
      *(_QWORD *)(a1 + 2632) = v1503;
      *(_QWORD *)(a1 + 2640) = &v1510[8 * v1509];
      if (v1501)
        operator delete(v1501);
LABEL_1575:
      *(_QWORD *)(a1 + 2632) = v1503;
      v1521 = *(unsigned int *)(a1 + 48);
      v1522 = (void *)operator new[]();
      v1523 = v1522;
      if ((int)v1521 >= 1)
        bzero(v1522, 4 * v1521);
      *(_QWORD *)(*(_QWORD *)(a1 + 816) + 8 * v1379) = v1523;
      v1524 = *(char **)(a1 + 2632);
      v1525 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1524 < v1525)
      {
        *(_QWORD *)v1524 = v1523;
        v1526 = (uint64_t)(v1524 + 8);
        goto LABEL_1599;
      }
      v1527 = *v5;
      v1528 = v1524 - *v5;
      v1529 = v1528 >> 3;
      v1530 = (v1528 >> 3) + 1;
      if (v1530 >> 61)
        goto LABEL_1698;
      v1531 = v1525 - (_QWORD)v1527;
      if (v1531 >> 2 > v1530)
        v1530 = v1531 >> 2;
      if ((unint64_t)v1531 >= 0x7FFFFFFFFFFFFFF8)
        v1532 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1532 = v1530;
      if (v1532)
      {
        if (v1532 >> 61)
          goto LABEL_1699;
        v1533 = operator new(8 * v1532);
        v1534 = &v1533[8 * v1529];
        *v1534 = v1523;
        v1526 = (uint64_t)(v1534 + 1);
        if (v1524 == v1527)
          goto LABEL_1597;
LABEL_1590:
        v1535 = v1524 - 8 - v1527;
        if (v1535 < 0x58)
          goto LABEL_1754;
        if ((unint64_t)(v1524 - &v1533[v1528]) < 0x20)
          goto LABEL_1754;
        v1536 = (v1535 >> 3) + 1;
        v1537 = 8 * (v1536 & 0x3FFFFFFFFFFFFFFCLL);
        v1538 = &v1524[-v1537];
        v1534 = (_QWORD *)((char *)v1534 - v1537);
        v1539 = &v1533[8 * v1529 - 16];
        v1540 = v1524 - 16;
        v1541 = v1536 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1542 = *(_OWORD *)v1540;
          *(v1539 - 1) = *((_OWORD *)v1540 - 1);
          *v1539 = v1542;
          v1539 -= 2;
          v1540 -= 32;
          v1541 -= 4;
        }
        while (v1541);
        v1524 = v1538;
        if (v1536 != (v1536 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1754:
          do
          {
            v1543 = *((_QWORD *)v1524 - 1);
            v1524 -= 8;
            *--v1534 = v1543;
          }
          while (v1524 != v1527);
        }
        v1524 = *v5;
        goto LABEL_1597;
      }
      v1533 = 0;
      v1534 = (_QWORD *)(8 * v1529);
      *(_QWORD *)(8 * v1529) = v1523;
      v1526 = 8 * v1529 + 8;
      if (v1524 != v1527)
        goto LABEL_1590;
LABEL_1597:
      *(_QWORD *)(a1 + 2624) = v1534;
      *(_QWORD *)(a1 + 2632) = v1526;
      *(_QWORD *)(a1 + 2640) = &v1533[8 * v1532];
      if (v1524)
        operator delete(v1524);
LABEL_1599:
      *(_QWORD *)(a1 + 2632) = v1526;
      v1544 = *(unsigned int *)(a1 + 52);
      v1545 = (void *)operator new[]();
      v1546 = v1545;
      if ((int)v1544 >= 1)
        bzero(v1545, 4 * v1544);
      *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v1379) = v1546;
      v1547 = *(char **)(a1 + 2632);
      v1548 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1547 < v1548)
      {
        *(_QWORD *)v1547 = v1546;
        v1549 = (uint64_t)(v1547 + 8);
        goto LABEL_1623;
      }
      v1550 = *v5;
      v1551 = v1547 - *v5;
      v1552 = v1551 >> 3;
      v1553 = (v1551 >> 3) + 1;
      if (v1553 >> 61)
        goto LABEL_1698;
      v1554 = v1548 - (_QWORD)v1550;
      if (v1554 >> 2 > v1553)
        v1553 = v1554 >> 2;
      if ((unint64_t)v1554 >= 0x7FFFFFFFFFFFFFF8)
        v1555 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1555 = v1553;
      if (v1555)
      {
        if (v1555 >> 61)
          goto LABEL_1699;
        v1556 = operator new(8 * v1555);
        v1557 = &v1556[8 * v1552];
        *v1557 = v1546;
        v1549 = (uint64_t)(v1557 + 1);
        if (v1547 == v1550)
          goto LABEL_1621;
LABEL_1614:
        v1558 = v1547 - 8 - v1550;
        if (v1558 < 0x58)
          goto LABEL_1755;
        if ((unint64_t)(v1547 - &v1556[v1551]) < 0x20)
          goto LABEL_1755;
        v1559 = (v1558 >> 3) + 1;
        v1560 = 8 * (v1559 & 0x3FFFFFFFFFFFFFFCLL);
        v1561 = &v1547[-v1560];
        v1557 = (_QWORD *)((char *)v1557 - v1560);
        v1562 = &v1556[8 * v1552 - 16];
        v1563 = v1547 - 16;
        v1564 = v1559 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1565 = *(_OWORD *)v1563;
          *(v1562 - 1) = *((_OWORD *)v1563 - 1);
          *v1562 = v1565;
          v1562 -= 2;
          v1563 -= 32;
          v1564 -= 4;
        }
        while (v1564);
        v1547 = v1561;
        if (v1559 != (v1559 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1755:
          do
          {
            v1566 = *((_QWORD *)v1547 - 1);
            v1547 -= 8;
            *--v1557 = v1566;
          }
          while (v1547 != v1550);
        }
        v1547 = *v5;
        goto LABEL_1621;
      }
      v1556 = 0;
      v1557 = (_QWORD *)(8 * v1552);
      *(_QWORD *)(8 * v1552) = v1546;
      v1549 = 8 * v1552 + 8;
      if (v1547 != v1550)
        goto LABEL_1614;
LABEL_1621:
      *(_QWORD *)(a1 + 2624) = v1557;
      *(_QWORD *)(a1 + 2632) = v1549;
      *(_QWORD *)(a1 + 2640) = &v1556[8 * v1555];
      if (v1547)
        operator delete(v1547);
LABEL_1623:
      *(_QWORD *)(a1 + 2632) = v1549;
      v1567 = *(unsigned int *)(a1 + 52);
      v1568 = (void *)operator new[]();
      v1569 = v1568;
      if ((int)v1567 >= 1)
        bzero(v1568, 4 * v1567);
      *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8 * v1379) = v1569;
      v1570 = *(char **)(a1 + 2632);
      v1571 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1570 < v1571)
      {
        *(_QWORD *)v1570 = v1569;
        v1572 = (uint64_t)(v1570 + 8);
        goto LABEL_1647;
      }
      v1573 = *v5;
      v1574 = v1570 - *v5;
      v1575 = v1574 >> 3;
      v1576 = (v1574 >> 3) + 1;
      if (v1576 >> 61)
        goto LABEL_1698;
      v1577 = v1571 - (_QWORD)v1573;
      if (v1577 >> 2 > v1576)
        v1576 = v1577 >> 2;
      if ((unint64_t)v1577 >= 0x7FFFFFFFFFFFFFF8)
        v1578 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1578 = v1576;
      if (v1578)
      {
        if (v1578 >> 61)
          goto LABEL_1699;
        v1579 = operator new(8 * v1578);
        v1580 = &v1579[8 * v1575];
        *v1580 = v1569;
        v1572 = (uint64_t)(v1580 + 1);
        if (v1570 == v1573)
          goto LABEL_1645;
LABEL_1638:
        v1581 = v1570 - 8 - v1573;
        if (v1581 < 0x58)
          goto LABEL_1756;
        if ((unint64_t)(v1570 - &v1579[v1574]) < 0x20)
          goto LABEL_1756;
        v1582 = (v1581 >> 3) + 1;
        v1583 = 8 * (v1582 & 0x3FFFFFFFFFFFFFFCLL);
        v1584 = &v1570[-v1583];
        v1580 = (_QWORD *)((char *)v1580 - v1583);
        v1585 = &v1579[8 * v1575 - 16];
        v1586 = v1570 - 16;
        v1587 = v1582 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1588 = *(_OWORD *)v1586;
          *(v1585 - 1) = *((_OWORD *)v1586 - 1);
          *v1585 = v1588;
          v1585 -= 2;
          v1586 -= 32;
          v1587 -= 4;
        }
        while (v1587);
        v1570 = v1584;
        if (v1582 != (v1582 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1756:
          do
          {
            v1589 = *((_QWORD *)v1570 - 1);
            v1570 -= 8;
            *--v1580 = v1589;
          }
          while (v1570 != v1573);
        }
        v1570 = *v5;
        goto LABEL_1645;
      }
      v1579 = 0;
      v1580 = (_QWORD *)(8 * v1575);
      *(_QWORD *)(8 * v1575) = v1569;
      v1572 = 8 * v1575 + 8;
      if (v1570 != v1573)
        goto LABEL_1638;
LABEL_1645:
      *(_QWORD *)(a1 + 2624) = v1580;
      *(_QWORD *)(a1 + 2632) = v1572;
      *(_QWORD *)(a1 + 2640) = &v1579[8 * v1578];
      if (v1570)
        operator delete(v1570);
LABEL_1647:
      *(_QWORD *)(a1 + 2632) = v1572;
      v1590 = *(unsigned int *)(a1 + 52);
      v1591 = (void *)operator new[]();
      v1592 = v1591;
      if ((int)v1590 >= 1)
        bzero(v1591, 4 * v1590);
      *(_QWORD *)(*(_QWORD *)(a1 + 864) + 8 * v1379) = v1592;
      v1593 = *(char **)(a1 + 2632);
      v1594 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1593 < v1594)
      {
        *(_QWORD *)v1593 = v1592;
        v1595 = (uint64_t)(v1593 + 8);
        goto LABEL_1671;
      }
      v1596 = *v5;
      v1597 = v1593 - *v5;
      v1598 = v1597 >> 3;
      v1599 = (v1597 >> 3) + 1;
      if (v1599 >> 61)
        goto LABEL_1698;
      v1600 = v1594 - (_QWORD)v1596;
      if (v1600 >> 2 > v1599)
        v1599 = v1600 >> 2;
      if ((unint64_t)v1600 >= 0x7FFFFFFFFFFFFFF8)
        v1601 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v1601 = v1599;
      if (v1601)
      {
        if (v1601 >> 61)
          goto LABEL_1699;
        v1602 = operator new(8 * v1601);
        v1603 = &v1602[8 * v1598];
        *v1603 = v1592;
        v1595 = (uint64_t)(v1603 + 1);
        if (v1593 == v1596)
          goto LABEL_1669;
LABEL_1662:
        v1604 = v1593 - 8 - v1596;
        if (v1604 < 0x58)
          goto LABEL_1757;
        if ((unint64_t)(v1593 - &v1602[v1597]) < 0x20)
          goto LABEL_1757;
        v1605 = (v1604 >> 3) + 1;
        v1606 = 8 * (v1605 & 0x3FFFFFFFFFFFFFFCLL);
        v1607 = &v1593[-v1606];
        v1603 = (_QWORD *)((char *)v1603 - v1606);
        v1608 = &v1602[8 * v1598 - 16];
        v1609 = v1593 - 16;
        v1610 = v1605 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1611 = *(_OWORD *)v1609;
          *(v1608 - 1) = *((_OWORD *)v1609 - 1);
          *v1608 = v1611;
          v1608 -= 2;
          v1609 -= 32;
          v1610 -= 4;
        }
        while (v1610);
        v1593 = v1607;
        if (v1605 != (v1605 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1757:
          do
          {
            v1612 = *((_QWORD *)v1593 - 1);
            v1593 -= 8;
            *--v1603 = v1612;
          }
          while (v1593 != v1596);
        }
        v1593 = *v5;
        goto LABEL_1669;
      }
      v1602 = 0;
      v1603 = (_QWORD *)(8 * v1598);
      *(_QWORD *)(8 * v1598) = v1592;
      v1595 = 8 * v1598 + 8;
      if (v1593 != v1596)
        goto LABEL_1662;
LABEL_1669:
      *(_QWORD *)(a1 + 2624) = v1603;
      *(_QWORD *)(a1 + 2632) = v1595;
      *(_QWORD *)(a1 + 2640) = &v1602[8 * v1601];
      if (v1593)
        operator delete(v1593);
LABEL_1671:
      *(_QWORD *)(a1 + 2632) = v1595;
      v1613 = *(unsigned int *)(a1 + 52);
      v1614 = (void *)operator new[]();
      v1615 = v1614;
      if ((int)v1613 >= 1)
        bzero(v1614, 4 * v1613);
      *(_QWORD *)(*(_QWORD *)(a1 + 936) + 8 * v1379) = v1615;
      v1616 = *(char **)(a1 + 2632);
      v1617 = *(_QWORD *)(a1 + 2640);
      if ((unint64_t)v1616 < v1617)
      {
        *(_QWORD *)v1616 = v1615;
        v1380 = (uint64_t)(v1616 + 8);
        v1381 = MLPNDArrayLossLabels.vtable;
      }
      else
      {
        v1618 = *v5;
        v1619 = v1616 - *v5;
        v1620 = v1619 >> 3;
        v1621 = (v1619 >> 3) + 1;
        if (v1621 >> 61)
          goto LABEL_1698;
        v1622 = v1617 - (_QWORD)v1618;
        if (v1622 >> 2 > v1621)
          v1621 = v1622 >> 2;
        if ((unint64_t)v1622 >= 0x7FFFFFFFFFFFFFF8)
          v1623 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1623 = v1621;
        if (v1623)
        {
          if (v1623 >> 61)
            goto LABEL_1699;
          v1624 = operator new(8 * v1623);
          v1625 = &v1624[8 * v1620];
          *v1625 = v1615;
          v1380 = (uint64_t)(v1625 + 1);
          if (v1616 != v1618)
          {
LABEL_1683:
            v1626 = v1616 - 8 - v1618;
            v1381 = (void **)(MLPNDArrayLossLabels + 24);
            if (v1626 < 0x58)
              goto LABEL_1758;
            if ((unint64_t)(v1616 - &v1624[v1619]) < 0x20)
              goto LABEL_1758;
            v1627 = (v1626 >> 3) + 1;
            v1628 = 8 * (v1627 & 0x3FFFFFFFFFFFFFFCLL);
            v1629 = &v1616[-v1628];
            v1625 = (_QWORD *)((char *)v1625 - v1628);
            v1630 = &v1624[8 * v1620 - 16];
            v1631 = v1616 - 16;
            v1632 = v1627 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v1633 = *(_OWORD *)v1631;
              *(v1630 - 1) = *((_OWORD *)v1631 - 1);
              *v1630 = v1633;
              v1630 -= 2;
              v1631 -= 32;
              v1632 -= 4;
            }
            while (v1632);
            v1616 = v1629;
            if (v1627 != (v1627 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1758:
              do
              {
                v1634 = *((_QWORD *)v1616 - 1);
                v1616 -= 8;
                *--v1625 = v1634;
              }
              while (v1616 != v1618);
            }
            v1616 = *v5;
            *(_QWORD *)(a1 + 2624) = v1625;
            *(_QWORD *)(a1 + 2632) = v1380;
            *(_QWORD *)(a1 + 2640) = &v1624[8 * v1623];
            if (!v1616)
              goto LABEL_1424;
LABEL_1693:
            operator delete(v1616);
            goto LABEL_1424;
          }
        }
        else
        {
          v1624 = 0;
          v1625 = (_QWORD *)(8 * v1620);
          *(_QWORD *)(8 * v1620) = v1615;
          v1380 = 8 * v1620 + 8;
          if (v1616 != v1618)
            goto LABEL_1683;
        }
        v1381 = (void **)(MLPNDArrayLossLabels + 24);
        *(_QWORD *)(a1 + 2624) = v1625;
        *(_QWORD *)(a1 + 2632) = v1380;
        *(_QWORD *)(a1 + 2640) = &v1624[8 * v1623];
        if (v1616)
          goto LABEL_1693;
      }
LABEL_1424:
      *(_QWORD *)(a1 + 2632) = v1380;
LABEL_1425:
      if (++v1379 >= *((int *)v1381 + 602))
        return;
    }
    v1385 = *(unsigned int *)(a1 + 52);
    v1386 = (void *)operator new[]();
    v1387 = v1386;
    if ((int)v1385 >= 1)
      bzero(v1386, 4 * v1385);
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v1379) = v1387;
    v1388 = *(char **)(a1 + 2632);
    v1389 = *(_QWORD *)(a1 + 2640);
    if ((unint64_t)v1388 < v1389)
    {
      *(_QWORD *)v1388 = v1387;
      v1390 = (uint64_t)(v1388 + 8);
      goto LABEL_1457;
    }
    v1391 = *v5;
    v1392 = v1388 - *v5;
    v1393 = v1392 >> 3;
    v1394 = (v1392 >> 3) + 1;
    if (v1394 >> 61)
      goto LABEL_1698;
    v1395 = v1389 - (_QWORD)v1391;
    if (v1395 >> 2 > v1394)
      v1394 = v1395 >> 2;
    if ((unint64_t)v1395 >= 0x7FFFFFFFFFFFFFF8)
      v1396 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v1396 = v1394;
    if (v1396)
    {
      if (v1396 >> 61)
        goto LABEL_1699;
      v1397 = operator new(8 * v1396);
      v1398 = &v1397[8 * v1393];
      *v1398 = v1387;
      v1390 = (uint64_t)(v1398 + 1);
      if (v1388 == v1391)
        goto LABEL_1455;
    }
    else
    {
      v1397 = 0;
      v1398 = (_QWORD *)(8 * v1393);
      *(_QWORD *)(8 * v1393) = v1387;
      v1390 = 8 * v1393 + 8;
      if (v1388 == v1391)
      {
LABEL_1455:
        *(_QWORD *)(a1 + 2624) = v1398;
        *(_QWORD *)(a1 + 2632) = v1390;
        *(_QWORD *)(a1 + 2640) = &v1397[8 * v1396];
        if (v1388)
          operator delete(v1388);
LABEL_1457:
        *(_QWORD *)(a1 + 2632) = v1390;
        v1408 = *(unsigned int *)(a1 + 52);
        v1409 = (void *)operator new[]();
        v1410 = v1409;
        if ((int)v1408 >= 1)
          bzero(v1409, 4 * v1408);
        *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v1379) = v1410;
        v1411 = *(char **)(a1 + 2632);
        v1412 = *(_QWORD *)(a1 + 2640);
        if ((unint64_t)v1411 < v1412)
        {
          *(_QWORD *)v1411 = v1410;
          v1413 = (uint64_t)(v1411 + 8);
LABEL_1481:
          *(_QWORD *)(a1 + 2632) = v1413;
          goto LABEL_1482;
        }
        v1414 = *v5;
        v1415 = v1411 - *v5;
        v1416 = v1415 >> 3;
        v1417 = (v1415 >> 3) + 1;
        if (v1417 >> 61)
          goto LABEL_1698;
        v1418 = v1412 - (_QWORD)v1414;
        if (v1418 >> 2 > v1417)
          v1417 = v1418 >> 2;
        if ((unint64_t)v1418 >= 0x7FFFFFFFFFFFFFF8)
          v1419 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1419 = v1417;
        if (v1419)
        {
          if (v1419 >> 61)
            goto LABEL_1699;
          v1420 = operator new(8 * v1419);
          v1421 = &v1420[8 * v1416];
          *v1421 = v1410;
          v1413 = (uint64_t)(v1421 + 1);
          if (v1411 == v1414)
            goto LABEL_1479;
        }
        else
        {
          v1420 = 0;
          v1421 = (_QWORD *)(8 * v1416);
          *(_QWORD *)(8 * v1416) = v1410;
          v1413 = 8 * v1416 + 8;
          if (v1411 == v1414)
          {
LABEL_1479:
            *(_QWORD *)(a1 + 2624) = v1421;
            *(_QWORD *)(a1 + 2632) = v1413;
            *(_QWORD *)(a1 + 2640) = &v1420[8 * v1419];
            if (v1411)
              operator delete(v1411);
            goto LABEL_1481;
          }
        }
        v1422 = v1411 - 8 - v1414;
        if (v1422 < 0x58)
          goto LABEL_1759;
        if ((unint64_t)(v1411 - &v1420[v1415]) < 0x20)
          goto LABEL_1759;
        v1423 = (v1422 >> 3) + 1;
        v1424 = 8 * (v1423 & 0x3FFFFFFFFFFFFFFCLL);
        v1425 = &v1411[-v1424];
        v1421 = (_QWORD *)((char *)v1421 - v1424);
        v1426 = &v1420[8 * v1416 - 16];
        v1427 = v1411 - 16;
        v1428 = v1423 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1429 = *(_OWORD *)v1427;
          *(v1426 - 1) = *((_OWORD *)v1427 - 1);
          *v1426 = v1429;
          v1426 -= 2;
          v1427 -= 32;
          v1428 -= 4;
        }
        while (v1428);
        v1411 = v1425;
        if (v1423 != (v1423 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1759:
          do
          {
            v1430 = *((_QWORD *)v1411 - 1);
            v1411 -= 8;
            *--v1421 = v1430;
          }
          while (v1411 != v1414);
        }
        v1411 = *v5;
        goto LABEL_1479;
      }
    }
    v1399 = v1388 - 8 - v1391;
    if (v1399 < 0x58)
      goto LABEL_1760;
    if ((unint64_t)(v1388 - &v1397[v1392]) < 0x20)
      goto LABEL_1760;
    v1400 = (v1399 >> 3) + 1;
    v1401 = 8 * (v1400 & 0x3FFFFFFFFFFFFFFCLL);
    v1402 = &v1388[-v1401];
    v1398 = (_QWORD *)((char *)v1398 - v1401);
    v1403 = &v1397[8 * v1393 - 16];
    v1404 = v1388 - 16;
    v1405 = v1400 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v1406 = *(_OWORD *)v1404;
      *(v1403 - 1) = *((_OWORD *)v1404 - 1);
      *v1403 = v1406;
      v1403 -= 2;
      v1404 -= 32;
      v1405 -= 4;
    }
    while (v1405);
    v1388 = v1402;
    if (v1400 != (v1400 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1760:
      do
      {
        v1407 = *((_QWORD *)v1388 - 1);
        v1388 -= 8;
        *--v1398 = v1407;
      }
      while (v1388 != v1391);
    }
    v1388 = *v5;
    goto LABEL_1455;
  }
}

void sub_19C0F6328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C0F633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C0F6350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C0F6364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0F6378(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

uint64_t sub_19C0F6380(uint64_t result)
{
  *(_BYTE *)(result + 41) = 1;
  return result;
}

void sub_19C0F638C()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C0F639C(uint64_t a1)
{
  return a1 + 64;
}

uint64_t *sub_19C0F63A4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1 + 99;
  v3 = a1[20];
  v4 = a1[21];
  v5 = (v4 - v3) >> 3;
  v6 = a1[99];
  v7 = (a1[100] - v6) >> 3;
  if (v5 <= v7)
  {
    if (v5 < v7)
      a1[100] = v6 + 8 * v5;
  }
  else
  {
    sub_19C098930((void **)a1 + 99, v5 - v7);
    v3 = a1[20];
    v4 = a1[21];
    v5 = (v4 - v3) >> 3;
  }
  if (v4 != v3)
  {
    v8 = *v2;
    if (v5 <= 1)
      v9 = 1;
    else
      v9 = v5;
    if (v9 < 4)
    {
      v10 = 0;
LABEL_14:
      v15 = (_QWORD *)(v8 + 8 * v10);
      v16 = (uint64_t *)(v3 + 8 * v10);
      v17 = v9 - v10;
      do
      {
        v18 = *v16++;
        *v15++ = v18;
        --v17;
      }
      while (v17);
      return v2;
    }
    v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = (__int128 *)(v3 + 16);
    v12 = (_OWORD *)(v8 + 16);
    v13 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v9 != v10)
      goto LABEL_14;
  }
  return v2;
}

void sub_19C0F6484()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C0F6494(uint64_t a1)
{
  return a1 + 816;
}

uint64_t sub_19C0F649C()
{
  return 0;
}

_BYTE *sub_19C0F64A4(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  _BYTE *v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  int v43;
  int v44;
  _BYTE *v45;
  int v46;
  int v47;
  int v48;
  _BYTE *v49;
  int v50;
  int v51;
  int v52;
  _BYTE *v53;
  int v54;
  int v55;
  int v56;
  _BYTE *v57;
  int v58;
  int v59;
  int v60;
  _BYTE *v61;
  int v62;
  int v63;
  int v64;

  if (!a2)
LABEL_19:
    sub_19C2210D4(3);
  v7 = *(_DWORD *)(a2 + 72);
  v8 = *(_QWORD *)a2;
  v9 = (int *)(*(_QWORD *)a2 + v7);
  v10 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v9 <= v10)
  {
    v11 = *v9;
    v7 += 4;
    *(_DWORD *)(a2 + 72) = v7;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
    {
LABEL_4:
      v13 = *v12;
      v7 += 4;
      *(_DWORD *)(a2 + 72) = v7;
      if (a4 < 1)
        goto LABEL_16;
LABEL_8:
      v14 = v7;
      v15 = (int *)(v8 + v7);
      if ((unint64_t)v15 <= v10)
      {
        v19 = *v15;
        v7 += 4;
        *(_DWORD *)(a2 + 72) = v7;
        v14 = v7;
        *(_DWORD *)(a1 + 736) = v19;
        v20 = (int *)(v8 + v7);
        if ((unint64_t)v20 <= v10)
        {
          v16 = *v20;
          v7 += 4;
          *(_DWORD *)(a2 + 72) = v7;
          *(_DWORD *)(a1 + 740) = v16;
          v17 = (int *)(v8 + v7);
          if ((unint64_t)v17 > v10)
          {
LABEL_14:
            v18 = 0;
            goto LABEL_15;
          }
LABEL_11:
          v18 = *v17;
          *(_DWORD *)(a2 + 72) = v7 + 4;
LABEL_15:
          *(_DWORD *)(a1 + 744) = v18;
          goto LABEL_16;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 736) = 0;
      }
      *(_DWORD *)(a1 + 740) = 0;
      v17 = (int *)(v8 + v14);
      if ((unint64_t)v17 > v10)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = 0;
    v12 = (int *)(v8 + v7);
    if ((unint64_t)v12 <= v10)
      goto LABEL_4;
  }
  v13 = 0;
  if (a4 >= 1)
    goto LABEL_8;
LABEL_16:
  if (*(_DWORD *)(a1 + 52) != v11 || *(_DWORD *)(a1 + 48) != v13)
    goto LABEL_19;
  v21 = *(_BYTE **)(a1 + 2568);
  v22 = *a3;
  v23 = *(unsigned __int8 *)(a1 + 1697);
  v24 = sub_19C2210AC();
  sub_19C101BB8(v21, (uint64_t *)a2, v22, v23, v24, *(_DWORD *)(a1 + 52));
  v25 = *(_BYTE **)(a1 + 2576);
  v26 = *a3;
  v27 = *(unsigned __int8 *)(a1 + 1697);
  v28 = sub_19C2210AC();
  sub_19C101BB8(v25, (uint64_t *)a2, v26, v27, v28, *(_DWORD *)(a1 + 52));
  v29 = *(_BYTE **)(a1 + 2584);
  v30 = *a3;
  v31 = *(unsigned __int8 *)(a1 + 1697);
  v32 = sub_19C2210AC();
  sub_19C101BB8(v29, (uint64_t *)a2, v30, v31, v32, *(_DWORD *)(a1 + 52));
  v33 = *(_BYTE **)(a1 + 2504);
  v34 = *a3;
  v35 = *(unsigned __int8 *)(a1 + 1697);
  v36 = sub_19C2210AC();
  sub_19C101DB0(v33, (uint64_t *)a2, v34, v35, v36, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v37 = *(_BYTE **)(a1 + 2512);
  v38 = *a3;
  v39 = *(unsigned __int8 *)(a1 + 1697);
  v40 = sub_19C2210AC();
  sub_19C101DB0(v37, (uint64_t *)a2, v38, v39, v40, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v41 = *(_BYTE **)(a1 + 2520);
  v42 = *a3;
  v43 = *(unsigned __int8 *)(a1 + 1697);
  v44 = sub_19C2210AC();
  sub_19C101DB0(v41, (uint64_t *)a2, v42, v43, v44, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v45 = *(_BYTE **)(a1 + 2528);
  v46 = *a3;
  v47 = *(unsigned __int8 *)(a1 + 1697);
  v48 = sub_19C2210AC();
  sub_19C101DB0(v45, (uint64_t *)a2, v46, v47, v48, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v49 = *(_BYTE **)(a1 + 2536);
  v50 = *a3;
  v51 = *(unsigned __int8 *)(a1 + 1697);
  v52 = sub_19C2210AC();
  sub_19C101DB0(v49, (uint64_t *)a2, v50, v51, v52, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v53 = *(_BYTE **)(a1 + 2544);
  v54 = *a3;
  v55 = *(unsigned __int8 *)(a1 + 1697);
  v56 = sub_19C2210AC();
  sub_19C101DB0(v53, (uint64_t *)a2, v54, v55, v56, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v57 = *(_BYTE **)(a1 + 2552);
  v58 = *a3;
  v59 = *(unsigned __int8 *)(a1 + 1697);
  v60 = sub_19C2210AC();
  sub_19C101DB0(v57, (uint64_t *)a2, v58, v59, v60, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v61 = *(_BYTE **)(a1 + 2560);
  v62 = *a3;
  v63 = *(unsigned __int8 *)(a1 + 1697);
  v64 = sub_19C2210AC();
  return sub_19C101DB0(v61, (uint64_t *)a2, v62, v63, v64, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

void sub_19C0F6818(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  int16x4_t **v11;
  int v12;
  int16x4_t **v13;
  int v14;
  int16x4_t **v15;
  int v16;
  int16x4_t **v17;
  int v18;
  int16x4_t **v19;
  int v20;
  int16x4_t **v21;
  int v22;
  int16x4_t **v23;
  int v24;
  int16x4_t **v25;
  int v26;
  int16x4_t **v27;
  int v28;
  int16x4_t **v29;
  int v30;
  int16x4_t **v31;
  int v32;
  int __ptr;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 48);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 52));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
  {
    __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    *a3 += 12;
  }
  v11 = *(int16x4_t ***)(a1 + 2568);
  v12 = sub_19C2210AC();
  sub_19C101FB0(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 52));
  v13 = *(int16x4_t ***)(a1 + 2576);
  v14 = sub_19C2210AC();
  sub_19C101FB0(v13, __stream, a3, 3, v14, a5, *(_DWORD *)(a1 + 52));
  v15 = *(int16x4_t ***)(a1 + 2584);
  v16 = sub_19C2210AC();
  sub_19C101FB0(v15, __stream, a3, 3, v16, a5, *(_DWORD *)(a1 + 52));
  v17 = *(int16x4_t ***)(a1 + 2504);
  v18 = sub_19C2210AC();
  sub_19C102074(v17, __stream, a3, 3, v18, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v19 = *(int16x4_t ***)(a1 + 2512);
  v20 = sub_19C2210AC();
  sub_19C102074(v19, __stream, a3, 3, v20, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v21 = *(int16x4_t ***)(a1 + 2520);
  v22 = sub_19C2210AC();
  sub_19C102074(v21, __stream, a3, 3, v22, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v23 = *(int16x4_t ***)(a1 + 2528);
  v24 = sub_19C2210AC();
  sub_19C102074(v23, __stream, a3, 3, v24, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
  v25 = *(int16x4_t ***)(a1 + 2536);
  v26 = sub_19C2210AC();
  sub_19C102074(v25, __stream, a3, 3, v26, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v27 = *(int16x4_t ***)(a1 + 2544);
  v28 = sub_19C2210AC();
  sub_19C102074(v27, __stream, a3, 3, v28, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v29 = *(int16x4_t ***)(a1 + 2552);
  v30 = sub_19C2210AC();
  sub_19C102074(v29, __stream, a3, 3, v30, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
  v31 = *(int16x4_t ***)(a1 + 2560);
  v32 = sub_19C2210AC();
  sub_19C102074(v31, __stream, a3, 3, v32, a5, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
}

_QWORD **sub_19C0F6AE4(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD **v5;
  _QWORD **result;
  uint64_t v7;
  int16x8_t *v8;
  int16x8_t *v9;
  int16x8_t *v10;
  uint64_t v11;
  int16x8_t *v12;
  int16x8_t *v13;
  int16x8_t *v14;
  uint64_t v15;
  int16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  __int16 *v20;
  __int16 *v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  int16x8_t *v25;
  int16x8_t *v26;
  int16x8_t *v27;
  uint64_t v28;
  int16x8_t *v29;
  int16x8_t *v30;
  int16x8_t *v31;
  uint64_t v32;
  int16x8_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  __int16 *v37;
  __int16 *v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  int16x8_t *v42;
  int16x8_t *v43;
  int16x8_t *v44;
  uint64_t v45;
  int16x8_t *v46;
  int16x8_t *v47;
  int16x8_t *v48;
  uint64_t v49;
  int16x8_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 *v53;
  __int16 *v54;
  __int16 *v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  uint64_t v59;
  int16x8_t *v60;
  int16x8_t *v61;
  int16x8_t *v62;
  uint64_t v63;
  int16x8_t *v64;
  int16x8_t *v65;
  int16x8_t *v66;
  uint64_t v67;
  int16x8_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 *v71;
  __int16 *v72;
  __int16 *v73;
  __int16 v74;
  __int16 v75;
  __int16 v76;
  int16x8_t *v77;
  int16x8_t *v78;
  int16x8_t *v79;
  uint64_t v80;
  int16x8_t *v81;
  int16x8_t *v82;
  int16x8_t *v83;
  uint64_t v84;
  int16x8_t v85;
  uint64_t v86;
  uint64_t v87;
  __int16 *v88;
  __int16 *v89;
  __int16 *v90;
  __int16 v91;
  __int16 v92;
  __int16 v93;
  int16x8_t *v94;
  int16x8_t *v95;
  int16x8_t *v96;
  uint64_t v97;
  int16x8_t *v98;
  int16x8_t *v99;
  int16x8_t *v100;
  uint64_t v101;
  int16x8_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 *v105;
  __int16 *v106;
  __int16 *v107;
  __int16 v108;
  __int16 v109;
  __int16 v110;
  int16x8_t *v111;
  int16x8_t *v112;
  int16x8_t *v113;
  uint64_t v114;
  int16x8_t *v115;
  int16x8_t *v116;
  int16x8_t *v117;
  uint64_t v118;
  int16x8_t v119;
  uint64_t v120;
  uint64_t v121;
  __int16 *v122;
  __int16 *v123;
  __int16 *v124;
  __int16 v125;
  __int16 v126;
  __int16 v127;
  uint64_t v128;
  int16x8_t *v129;
  int16x8_t *v130;
  int16x8_t *v131;
  uint64_t v132;
  int16x8_t *v133;
  int16x8_t *v134;
  int16x8_t *v135;
  uint64_t v136;
  int16x8_t v137;
  uint64_t v138;
  uint64_t v139;
  __int16 *v140;
  __int16 *v141;
  __int16 *v142;
  __int16 v143;
  __int16 v144;
  __int16 v145;
  int16x8_t *v146;
  int16x8_t *v147;
  int16x8_t *v148;
  uint64_t v149;
  int16x8_t *v150;
  int16x8_t *v151;
  int16x8_t *v152;
  uint64_t v153;
  int16x8_t v154;
  uint64_t v155;
  uint64_t v156;
  __int16 *v157;
  __int16 *v158;
  __int16 *v159;
  __int16 v160;
  __int16 v161;
  __int16 v162;
  int16x8_t *v163;
  int16x8_t *v164;
  int16x8_t *v165;
  uint64_t v166;
  int16x8_t *v167;
  int16x8_t *v168;
  int16x8_t *v169;
  uint64_t v170;
  int16x8_t v171;
  uint64_t v172;
  uint64_t v173;
  __int16 *v174;
  __int16 *v175;
  __int16 *v176;
  __int16 v177;
  __int16 v178;
  __int16 v179;
  int16x8_t *v180;
  int16x8_t *v181;
  int16x8_t *v182;
  uint64_t v183;
  int16x8_t *v184;
  int16x8_t *v185;
  int16x8_t *v186;
  uint64_t v187;
  int16x8_t v188;
  uint64_t v189;
  uint64_t v190;
  __int16 *v191;
  __int16 *v192;
  __int16 *v193;
  __int16 v194;
  __int16 v195;
  __int16 v196;

  if (lpsrc)
  {
    v5 = (_QWORD **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D008, 0);
    if (a3)
      goto LABEL_3;
LABEL_6:
    result = 0;
    v7 = *(unsigned int *)(a1 + 52);
    if ((int)v7 < 1)
      goto LABEL_34;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  result = (_QWORD **)__dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D008, 0);
  v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 < 1)
    goto LABEL_34;
LABEL_7:
  v8 = (int16x8_t *)*result[321];
  v9 = (int16x8_t *)*v5[321];
  v10 = **(int16x8_t ***)(a1 + 2568);
  if (v7 < 0x10)
  {
    v11 = 0;
LABEL_14:
    v17 = v7 - v11;
    v18 = v11;
    v19 = &v10->i16[v18];
    v20 = &v9->i16[v18];
    v21 = &v8->i16[v18];
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = *v20++;
      *v19++ = v22 - v24;
      --v17;
    }
    while (v17);
    goto LABEL_16;
  }
  v11 = 0;
  if ((unint64_t)((char *)v10 - (char *)v8) < 0x20)
    goto LABEL_14;
  if ((unint64_t)((char *)v10 - (char *)v9) < 0x20)
    goto LABEL_14;
  v11 = v7 & 0x7FFFFFF0;
  v12 = v8 + 1;
  v13 = v9 + 1;
  v14 = v10 + 1;
  v15 = v7 & 0xFFFFFFF0;
  do
  {
    v16 = vsubq_s16(*v12, *v13);
    v14[-1] = vsubq_s16(v12[-1], v13[-1]);
    *v14 = v16;
    v12 += 2;
    v13 += 2;
    v14 += 2;
    v15 -= 16;
  }
  while (v15);
  if (v11 != v7)
    goto LABEL_14;
LABEL_16:
  v25 = (int16x8_t *)*result[322];
  v26 = (int16x8_t *)*v5[322];
  v27 = **(int16x8_t ***)(a1 + 2576);
  if (v7 < 0x10)
  {
    v28 = 0;
LABEL_23:
    v34 = v7 - v28;
    v35 = v28;
    v36 = &v27->i16[v35];
    v37 = &v26->i16[v35];
    v38 = &v25->i16[v35];
    do
    {
      v40 = *v38++;
      v39 = v40;
      v41 = *v37++;
      *v36++ = v39 - v41;
      --v34;
    }
    while (v34);
    goto LABEL_25;
  }
  v28 = 0;
  if ((unint64_t)((char *)v27 - (char *)v25) < 0x20)
    goto LABEL_23;
  if ((unint64_t)((char *)v27 - (char *)v26) < 0x20)
    goto LABEL_23;
  v28 = v7 & 0x7FFFFFF0;
  v29 = v25 + 1;
  v30 = v26 + 1;
  v31 = v27 + 1;
  v32 = v7 & 0xFFFFFFF0;
  do
  {
    v33 = vsubq_s16(*v29, *v30);
    v31[-1] = vsubq_s16(v29[-1], v30[-1]);
    *v31 = v33;
    v29 += 2;
    v30 += 2;
    v31 += 2;
    v32 -= 16;
  }
  while (v32);
  if (v28 != v7)
    goto LABEL_23;
LABEL_25:
  v42 = (int16x8_t *)*result[323];
  v43 = (int16x8_t *)*v5[323];
  v44 = **(int16x8_t ***)(a1 + 2584);
  if (v7 < 0x10)
  {
    v45 = 0;
LABEL_32:
    v51 = v7 - v45;
    v52 = v45;
    v53 = &v44->i16[v52];
    v54 = &v43->i16[v52];
    v55 = &v42->i16[v52];
    do
    {
      v57 = *v55++;
      v56 = v57;
      v58 = *v54++;
      *v53++ = v56 - v58;
      --v51;
    }
    while (v51);
    goto LABEL_34;
  }
  v45 = 0;
  if ((unint64_t)((char *)v44 - (char *)v42) < 0x20)
    goto LABEL_32;
  if ((unint64_t)((char *)v44 - (char *)v43) < 0x20)
    goto LABEL_32;
  v45 = v7 & 0x7FFFFFF0;
  v46 = v42 + 1;
  v47 = v43 + 1;
  v48 = v44 + 1;
  v49 = v7 & 0xFFFFFFF0;
  do
  {
    v50 = vsubq_s16(*v46, *v47);
    v48[-1] = vsubq_s16(v46[-1], v47[-1]);
    *v48 = v50;
    v46 += 2;
    v47 += 2;
    v48 += 2;
    v49 -= 16;
  }
  while (v49);
  if (v45 != v7)
    goto LABEL_32;
LABEL_34:
  v59 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v59 < 1)
    goto LABEL_71;
  v60 = (int16x8_t *)*result[313];
  v61 = (int16x8_t *)*v5[313];
  v62 = **(int16x8_t ***)(a1 + 2504);
  if (v59 < 0x10)
  {
    v63 = 0;
LABEL_42:
    v69 = v59 - v63;
    v70 = v63;
    v71 = &v62->i16[v70];
    v72 = &v61->i16[v70];
    v73 = &v60->i16[v70];
    do
    {
      v75 = *v73++;
      v74 = v75;
      v76 = *v72++;
      *v71++ = v74 - v76;
      --v69;
    }
    while (v69);
    goto LABEL_44;
  }
  v63 = 0;
  if ((unint64_t)((char *)v62 - (char *)v60) < 0x20)
    goto LABEL_42;
  if ((unint64_t)((char *)v62 - (char *)v61) < 0x20)
    goto LABEL_42;
  v63 = v59 & 0x7FFFFFF0;
  v64 = v60 + 1;
  v65 = v61 + 1;
  v66 = v62 + 1;
  v67 = v59 & 0xFFFFFFF0;
  do
  {
    v68 = vsubq_s16(*v64, *v65);
    v66[-1] = vsubq_s16(v64[-1], v65[-1]);
    *v66 = v68;
    v64 += 2;
    v65 += 2;
    v66 += 2;
    v67 -= 16;
  }
  while (v67);
  if (v63 != v59)
    goto LABEL_42;
LABEL_44:
  v77 = (int16x8_t *)*result[315];
  v78 = (int16x8_t *)*v5[315];
  v79 = **(int16x8_t ***)(a1 + 2520);
  if (v59 < 0x10)
  {
    v80 = 0;
LABEL_51:
    v86 = v59 - v80;
    v87 = v80;
    v88 = &v79->i16[v87];
    v89 = &v78->i16[v87];
    v90 = &v77->i16[v87];
    do
    {
      v92 = *v90++;
      v91 = v92;
      v93 = *v89++;
      *v88++ = v91 - v93;
      --v86;
    }
    while (v86);
    goto LABEL_53;
  }
  v80 = 0;
  if ((unint64_t)((char *)v79 - (char *)v77) < 0x20)
    goto LABEL_51;
  if ((unint64_t)((char *)v79 - (char *)v78) < 0x20)
    goto LABEL_51;
  v80 = v59 & 0x7FFFFFF0;
  v81 = v77 + 1;
  v82 = v78 + 1;
  v83 = v79 + 1;
  v84 = v59 & 0xFFFFFFF0;
  do
  {
    v85 = vsubq_s16(*v81, *v82);
    v83[-1] = vsubq_s16(v81[-1], v82[-1]);
    *v83 = v85;
    v81 += 2;
    v82 += 2;
    v83 += 2;
    v84 -= 16;
  }
  while (v84);
  if (v80 != v59)
    goto LABEL_51;
LABEL_53:
  v94 = (int16x8_t *)*result[314];
  v95 = (int16x8_t *)*v5[314];
  v96 = **(int16x8_t ***)(a1 + 2512);
  if (v59 < 0x10)
  {
    v97 = 0;
LABEL_60:
    v103 = v59 - v97;
    v104 = v97;
    v105 = &v96->i16[v104];
    v106 = &v95->i16[v104];
    v107 = &v94->i16[v104];
    do
    {
      v109 = *v107++;
      v108 = v109;
      v110 = *v106++;
      *v105++ = v108 - v110;
      --v103;
    }
    while (v103);
    goto LABEL_62;
  }
  v97 = 0;
  if ((unint64_t)((char *)v96 - (char *)v94) < 0x20)
    goto LABEL_60;
  if ((unint64_t)((char *)v96 - (char *)v95) < 0x20)
    goto LABEL_60;
  v97 = v59 & 0x7FFFFFF0;
  v98 = v94 + 1;
  v99 = v95 + 1;
  v100 = v96 + 1;
  v101 = v59 & 0xFFFFFFF0;
  do
  {
    v102 = vsubq_s16(*v98, *v99);
    v100[-1] = vsubq_s16(v98[-1], v99[-1]);
    *v100 = v102;
    v98 += 2;
    v99 += 2;
    v100 += 2;
    v101 -= 16;
  }
  while (v101);
  if (v97 != v59)
    goto LABEL_60;
LABEL_62:
  v111 = (int16x8_t *)*result[316];
  v112 = (int16x8_t *)*v5[316];
  v113 = **(int16x8_t ***)(a1 + 2528);
  if (v59 < 0x10)
  {
    v114 = 0;
LABEL_69:
    v120 = v59 - v114;
    v121 = v114;
    v122 = &v113->i16[v121];
    v123 = &v112->i16[v121];
    v124 = &v111->i16[v121];
    do
    {
      v126 = *v124++;
      v125 = v126;
      v127 = *v123++;
      *v122++ = v125 - v127;
      --v120;
    }
    while (v120);
    goto LABEL_71;
  }
  v114 = 0;
  if ((unint64_t)((char *)v113 - (char *)v111) < 0x20)
    goto LABEL_69;
  if ((unint64_t)((char *)v113 - (char *)v112) < 0x20)
    goto LABEL_69;
  v114 = v59 & 0x7FFFFFF0;
  v115 = v111 + 1;
  v116 = v112 + 1;
  v117 = v113 + 1;
  v118 = v59 & 0xFFFFFFF0;
  do
  {
    v119 = vsubq_s16(*v115, *v116);
    v117[-1] = vsubq_s16(v115[-1], v116[-1]);
    *v117 = v119;
    v115 += 2;
    v116 += 2;
    v117 += 2;
    v118 -= 16;
  }
  while (v118);
  if (v114 != v59)
    goto LABEL_69;
LABEL_71:
  if (!(_DWORD)v7)
    return result;
  v128 = (v7 * v7);
  v129 = (int16x8_t *)*result[317];
  v130 = (int16x8_t *)*v5[317];
  v131 = **(int16x8_t ***)(a1 + 2536);
  if (v128 < 0x10)
  {
    v132 = 0;
LABEL_79:
    v138 = v128 - v132;
    v139 = v132;
    v140 = &v131->i16[v139];
    v141 = &v130->i16[v139];
    v142 = &v129->i16[v139];
    do
    {
      v144 = *v142++;
      v143 = v144;
      v145 = *v141++;
      *v140++ = v143 - v145;
      --v138;
    }
    while (v138);
    goto LABEL_81;
  }
  v132 = 0;
  if ((unint64_t)((char *)v131 - (char *)v129) < 0x20)
    goto LABEL_79;
  if ((unint64_t)((char *)v131 - (char *)v130) < 0x20)
    goto LABEL_79;
  v132 = v128 & 0x7FFFFFF0;
  v133 = v129 + 1;
  v134 = v130 + 1;
  v135 = v131 + 1;
  v136 = v132;
  do
  {
    v137 = vsubq_s16(*v133, *v134);
    v135[-1] = vsubq_s16(v133[-1], v134[-1]);
    *v135 = v137;
    v133 += 2;
    v134 += 2;
    v135 += 2;
    v136 -= 16;
  }
  while (v136);
  if (v132 != v128)
    goto LABEL_79;
LABEL_81:
  v146 = (int16x8_t *)*result[319];
  v147 = (int16x8_t *)*v5[319];
  v148 = **(int16x8_t ***)(a1 + 2552);
  if (v128 < 0x10)
  {
    v149 = 0;
LABEL_88:
    v155 = v128 - v149;
    v156 = v149;
    v157 = &v148->i16[v156];
    v158 = &v147->i16[v156];
    v159 = &v146->i16[v156];
    do
    {
      v161 = *v159++;
      v160 = v161;
      v162 = *v158++;
      *v157++ = v160 - v162;
      --v155;
    }
    while (v155);
    goto LABEL_90;
  }
  v149 = 0;
  if ((unint64_t)((char *)v148 - (char *)v146) < 0x20)
    goto LABEL_88;
  if ((unint64_t)((char *)v148 - (char *)v147) < 0x20)
    goto LABEL_88;
  v149 = v128 & 0x7FFFFFF0;
  v150 = v146 + 1;
  v151 = v147 + 1;
  v152 = v148 + 1;
  v153 = v149;
  do
  {
    v154 = vsubq_s16(*v150, *v151);
    v152[-1] = vsubq_s16(v150[-1], v151[-1]);
    *v152 = v154;
    v150 += 2;
    v151 += 2;
    v152 += 2;
    v153 -= 16;
  }
  while (v153);
  if (v149 != v128)
    goto LABEL_88;
LABEL_90:
  v163 = (int16x8_t *)*result[318];
  v164 = (int16x8_t *)*v5[318];
  v165 = **(int16x8_t ***)(a1 + 2544);
  if (v128 < 0x10)
  {
    v166 = 0;
LABEL_97:
    v172 = v128 - v166;
    v173 = v166;
    v174 = &v165->i16[v173];
    v175 = &v164->i16[v173];
    v176 = &v163->i16[v173];
    do
    {
      v178 = *v176++;
      v177 = v178;
      v179 = *v175++;
      *v174++ = v177 - v179;
      --v172;
    }
    while (v172);
    goto LABEL_99;
  }
  v166 = 0;
  if ((unint64_t)((char *)v165 - (char *)v163) < 0x20)
    goto LABEL_97;
  if ((unint64_t)((char *)v165 - (char *)v164) < 0x20)
    goto LABEL_97;
  v166 = v128 & 0x7FFFFFF0;
  v167 = v163 + 1;
  v168 = v164 + 1;
  v169 = v165 + 1;
  v170 = v166;
  do
  {
    v171 = vsubq_s16(*v167, *v168);
    v169[-1] = vsubq_s16(v167[-1], v168[-1]);
    *v169 = v171;
    v167 += 2;
    v168 += 2;
    v169 += 2;
    v170 -= 16;
  }
  while (v170);
  if (v166 != v128)
    goto LABEL_97;
LABEL_99:
  v180 = (int16x8_t *)*result[320];
  v181 = (int16x8_t *)*v5[320];
  v182 = **(int16x8_t ***)(a1 + 2560);
  if (v128 < 0x10)
  {
    v183 = 0;
LABEL_106:
    v189 = v128 - v183;
    v190 = v183;
    v191 = &v182->i16[v190];
    v192 = &v181->i16[v190];
    v193 = &v180->i16[v190];
    do
    {
      v195 = *v193++;
      v194 = v195;
      v196 = *v192++;
      *v191++ = v194 - v196;
      --v189;
    }
    while (v189);
    return result;
  }
  v183 = 0;
  if ((unint64_t)((char *)v182 - (char *)v180) < 0x20)
    goto LABEL_106;
  if ((unint64_t)((char *)v182 - (char *)v181) < 0x20)
    goto LABEL_106;
  v183 = v128 & 0x7FFFFFF0;
  v184 = v180 + 1;
  v185 = v181 + 1;
  v186 = v182 + 1;
  v187 = v183;
  do
  {
    v188 = vsubq_s16(*v184, *v185);
    v186[-1] = vsubq_s16(v184[-1], v185[-1]);
    *v186 = v188;
    v184 += 2;
    v185 += 2;
    v186 += 2;
    v187 -= 16;
  }
  while (v187);
  if (v183 != v128)
    goto LABEL_106;
  return result;
}

void *sub_19C0F7350(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D008, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D008, 0);
  return result;
}

void *sub_19C0F73B8(uint64_t a1, void *lpsrc)
{
  void *result;
  float32x4_t **v4;
  float32x4_t **v5;
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t *v8;
  int v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  unint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int16x8_t *v19;
  int16x8_t *v20;
  unint64_t v21;
  int16x8_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t *v26;
  __int16 v27;
  float32x4_t **v28;
  float32x4_t **v29;
  uint64_t v30;
  float32x4_t *v31;
  float32x4_t *v32;
  int v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  unint64_t v37;
  float32x4_t *v38;
  float32x4_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int16x8_t *v43;
  int16x8_t *v44;
  unint64_t v45;
  int16x8_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  __int16 v51;
  float32x4_t **v52;
  float32x4_t **v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  int v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  unint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int16x8_t *v67;
  int16x8_t *v68;
  unint64_t v69;
  int16x8_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *v73;
  float32x4_t *v74;
  __int16 v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  uint64_t v81;
  int16x8_t *v82;
  int16x8_t *v83;
  uint64_t v84;
  int16x8_t v85;
  uint64_t v86;
  uint64_t v87;
  __int16 *v88;
  _WORD *v89;
  __int16 v90;
  unint64_t v91;
  unint64_t v92;
  BOOL v93;
  uint64_t v94;
  int16x8_t *v95;
  int16x8_t *v96;
  uint64_t v97;
  int16x8_t v98;
  uint64_t v99;
  uint64_t v100;
  __int16 *v101;
  _WORD *v102;
  __int16 v103;
  unint64_t v104;
  unint64_t v105;
  BOOL v106;
  uint64_t v107;
  int16x8_t *v108;
  int16x8_t *v109;
  uint64_t v110;
  int16x8_t v111;
  uint64_t v112;
  uint64_t v113;
  __int16 *v114;
  _WORD *v115;
  __int16 v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v119;
  uint64_t v120;
  int16x8_t *v121;
  int16x8_t *v122;
  uint64_t v123;
  int16x8_t v124;
  uint64_t v125;
  uint64_t v126;
  __int16 *v127;
  _WORD *v128;
  __int16 v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  BOOL v133;
  uint64_t v134;
  int16x8_t *v135;
  int16x8_t *v136;
  uint64_t v137;
  int16x8_t v138;
  uint64_t v139;
  uint64_t v140;
  __int16 *v141;
  _WORD *v142;
  __int16 v143;
  unint64_t v144;
  unint64_t v145;
  BOOL v146;
  uint64_t v147;
  int16x8_t *v148;
  int16x8_t *v149;
  uint64_t v150;
  int16x8_t v151;
  uint64_t v152;
  uint64_t v153;
  __int16 *v154;
  _WORD *v155;
  __int16 v156;
  unint64_t v157;
  unint64_t v158;
  BOOL v159;
  uint64_t v160;
  int16x8_t *v161;
  int16x8_t *v162;
  uint64_t v163;
  int16x8_t v164;
  uint64_t v165;
  uint64_t v166;
  __int16 *v167;
  _WORD *v168;
  __int16 v169;
  unint64_t v170;
  unint64_t v171;
  BOOL v172;
  uint64_t v173;
  int16x8_t *v174;
  int16x8_t *v175;
  uint64_t v176;
  int16x8_t v177;
  uint64_t v178;
  uint64_t v179;
  __int16 *v180;
  _WORD *v181;
  __int16 v182;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D008, 0);
  else
    result = 0;
  v4 = *(float32x4_t ***)(a1 + 2568);
  v5 = (float32x4_t **)*((_QWORD *)result + 321);
  v6 = *(int *)(a1 + 52);
  if ((int)v6 >= 8)
  {
    v7 = *v4;
    v8 = *v5;
    v9 = (int)v6 / 8;
    do
    {
      v10 = *v8;
      v11 = v8[1];
      v8 += 2;
      v12 = vaddq_f32(v7[1], v11);
      *v7 = vaddq_f32(*v7, v10);
      v7[1] = v12;
      v7 += 2;
      --v9;
    }
    while (v9);
  }
  LODWORD(v13) = 8 * ((int)v6 / 8);
  if ((int)v13 < (int)v6)
  {
    v14 = *v5;
    v15 = *v4;
    v13 = (int)v13;
    v16 = v6 - (int)v13;
    if (v16 < 0x10)
      goto LABEL_14;
    v17 = 2 * (int)v13;
    if ((char *)v15 + v17 < (char *)v14 + 2 * v6 && (char *)v14 + v17 < (char *)v15 + 2 * v6)
      goto LABEL_14;
    v13 = (v16 & 0xFFFFFFFFFFFFFFF0) + (int)v13;
    v18 = v17 + 16;
    v19 = (int16x8_t *)((char *)&v14[1] + v17);
    v20 = (int16x8_t *)((char *)v15 + v18);
    v21 = v16 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v22 = vaddq_s16(*v20, *v19);
      v20[-1] = vaddq_s16(v20[-1], v19[-1]);
      *v20 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_14:
      v23 = v6 - v13;
      v24 = 2 * v13;
      v25 = (float32x4_t *)((char *)v15 + v24);
      v26 = (float32x4_t *)((char *)v14 + v24);
      do
      {
        v27 = v26->i16[0];
        v26 = (float32x4_t *)((char *)v26 + 2);
        v25->i16[0] += v27;
        v25 = (float32x4_t *)((char *)v25 + 2);
        --v23;
      }
      while (v23);
    }
  }
  v28 = *(float32x4_t ***)(a1 + 2576);
  v29 = (float32x4_t **)*((_QWORD *)result + 322);
  v30 = *(int *)(a1 + 52);
  if ((int)v30 >= 8)
  {
    v31 = *v28;
    v32 = *v29;
    v33 = (int)v30 / 8;
    do
    {
      v34 = *v32;
      v35 = v32[1];
      v32 += 2;
      v36 = vaddq_f32(v31[1], v35);
      *v31 = vaddq_f32(*v31, v34);
      v31[1] = v36;
      v31 += 2;
      --v33;
    }
    while (v33);
  }
  LODWORD(v37) = 8 * ((int)v30 / 8);
  if ((int)v37 < (int)v30)
  {
    v38 = *v29;
    v39 = *v28;
    v37 = (int)v37;
    v40 = v30 - (int)v37;
    if (v40 < 0x10)
      goto LABEL_26;
    v41 = 2 * (int)v37;
    if ((char *)v39 + v41 < (char *)v38 + 2 * v30 && (char *)v38 + v41 < (char *)v39 + 2 * v30)
      goto LABEL_26;
    v37 = (v40 & 0xFFFFFFFFFFFFFFF0) + (int)v37;
    v42 = v41 + 16;
    v43 = (int16x8_t *)((char *)&v38[1] + v41);
    v44 = (int16x8_t *)((char *)v39 + v42);
    v45 = v40 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v46 = vaddq_s16(*v44, *v43);
      v44[-1] = vaddq_s16(v44[-1], v43[-1]);
      *v44 = v46;
      v43 += 2;
      v44 += 2;
      v45 -= 16;
    }
    while (v45);
    if (v40 != (v40 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_26:
      v47 = v30 - v37;
      v48 = 2 * v37;
      v49 = (float32x4_t *)((char *)v39 + v48);
      v50 = (float32x4_t *)((char *)v38 + v48);
      do
      {
        v51 = v50->i16[0];
        v50 = (float32x4_t *)((char *)v50 + 2);
        v49->i16[0] += v51;
        v49 = (float32x4_t *)((char *)v49 + 2);
        --v47;
      }
      while (v47);
    }
  }
  v52 = *(float32x4_t ***)(a1 + 2584);
  v53 = (float32x4_t **)*((_QWORD *)result + 323);
  v54 = *(int *)(a1 + 52);
  if ((int)v54 >= 8)
  {
    v55 = *v52;
    v56 = *v53;
    v57 = (int)v54 / 8;
    do
    {
      v58 = *v56;
      v59 = v56[1];
      v56 += 2;
      v60 = vaddq_f32(v55[1], v59);
      *v55 = vaddq_f32(*v55, v58);
      v55[1] = v60;
      v55 += 2;
      --v57;
    }
    while (v57);
  }
  LODWORD(v61) = 8 * ((int)v54 / 8);
  if ((int)v61 < (int)v54)
  {
    v62 = *v53;
    v63 = *v52;
    v61 = (int)v61;
    v64 = v54 - (int)v61;
    if (v64 < 0x10)
      goto LABEL_38;
    v65 = 2 * (int)v61;
    if ((char *)v63 + v65 < (char *)v62 + 2 * v54 && (char *)v62 + v65 < (char *)v63 + 2 * v54)
      goto LABEL_38;
    v61 = (v64 & 0xFFFFFFFFFFFFFFF0) + (int)v61;
    v66 = v65 + 16;
    v67 = (int16x8_t *)((char *)&v62[1] + v65);
    v68 = (int16x8_t *)((char *)v63 + v66);
    v69 = v64 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v70 = vaddq_s16(*v68, *v67);
      v68[-1] = vaddq_s16(v68[-1], v67[-1]);
      *v68 = v70;
      v67 += 2;
      v68 += 2;
      v69 -= 16;
    }
    while (v69);
    if (v64 != (v64 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_38:
      v71 = v54 - v61;
      v72 = 2 * v61;
      v73 = (float32x4_t *)((char *)v63 + v72);
      v74 = (float32x4_t *)((char *)v62 + v72);
      do
      {
        v75 = v74->i16[0];
        v74 = (float32x4_t *)((char *)v74 + 2);
        v73->i16[0] += v75;
        v73 = (float32x4_t *)((char *)v73 + 2);
        --v71;
      }
      while (v71);
    }
  }
  v76 = *(_DWORD *)(a1 + 52);
  v77 = (*(_DWORD *)(a1 + 48) * v76);
  if ((int)v77 < 1)
    goto LABEL_93;
  v78 = **(_QWORD **)(a1 + 2504);
  v79 = **((_QWORD **)result + 313);
  if (v77 >= 0x10 && (v78 < v79 + 2 * v77 ? (v80 = v79 >= v78 + 2 * v77) : (v80 = 1), v80))
  {
    v81 = v77 & 0x7FFFFFF0;
    v82 = (int16x8_t *)(v78 + 16);
    v83 = (int16x8_t *)(v79 + 16);
    v84 = v77 & 0xFFFFFFF0;
    do
    {
      v85 = vaddq_s16(*v83, *v82);
      v82[-1] = vaddq_s16(v83[-1], v82[-1]);
      *v82 = v85;
      v82 += 2;
      v83 += 2;
      v84 -= 16;
    }
    while (v84);
    if (v81 == v77)
      goto LABEL_54;
  }
  else
  {
    v81 = 0;
  }
  v86 = v77 - v81;
  v87 = 2 * v81;
  v88 = (__int16 *)(v79 + v87);
  v89 = (_WORD *)(v78 + v87);
  do
  {
    v90 = *v88++;
    *v89++ += v90;
    --v86;
  }
  while (v86);
LABEL_54:
  v91 = **(_QWORD **)(a1 + 2512);
  v92 = **((_QWORD **)result + 314);
  if (v77 >= 0x10 && (v91 < v92 + 2 * v77 ? (v93 = v92 >= v91 + 2 * v77) : (v93 = 1), v93))
  {
    v94 = v77 & 0x7FFFFFF0;
    v95 = (int16x8_t *)(v91 + 16);
    v96 = (int16x8_t *)(v92 + 16);
    v97 = v77 & 0xFFFFFFF0;
    do
    {
      v98 = vaddq_s16(*v96, *v95);
      v95[-1] = vaddq_s16(v96[-1], v95[-1]);
      *v95 = v98;
      v95 += 2;
      v96 += 2;
      v97 -= 16;
    }
    while (v97);
    if (v94 == v77)
      goto LABEL_67;
  }
  else
  {
    v94 = 0;
  }
  v99 = v77 - v94;
  v100 = 2 * v94;
  v101 = (__int16 *)(v92 + v100);
  v102 = (_WORD *)(v91 + v100);
  do
  {
    v103 = *v101++;
    *v102++ += v103;
    --v99;
  }
  while (v99);
LABEL_67:
  v104 = **(_QWORD **)(a1 + 2520);
  v105 = **((_QWORD **)result + 315);
  if (v77 < 0x10 || (v104 < v105 + 2 * v77 ? (v106 = v105 >= v104 + 2 * v77) : (v106 = 1), !v106))
  {
    v107 = 0;
LABEL_78:
    v112 = v77 - v107;
    v113 = 2 * v107;
    v114 = (__int16 *)(v105 + v113);
    v115 = (_WORD *)(v104 + v113);
    do
    {
      v116 = *v114++;
      *v115++ += v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  v107 = v77 & 0x7FFFFFF0;
  v108 = (int16x8_t *)(v104 + 16);
  v109 = (int16x8_t *)(v105 + 16);
  v110 = v77 & 0xFFFFFFF0;
  do
  {
    v111 = vaddq_s16(*v109, *v108);
    v108[-1] = vaddq_s16(v109[-1], v108[-1]);
    *v108 = v111;
    v108 += 2;
    v109 += 2;
    v110 -= 16;
  }
  while (v110);
  if (v107 != v77)
    goto LABEL_78;
LABEL_80:
  v117 = **(_QWORD **)(a1 + 2528);
  v118 = **((_QWORD **)result + 316);
  if (v77 < 0x10 || (v117 < v118 + 2 * v77 ? (v119 = v118 >= v117 + 2 * v77) : (v119 = 1), !v119))
  {
    v120 = 0;
LABEL_91:
    v125 = v77 - v120;
    v126 = 2 * v120;
    v127 = (__int16 *)(v118 + v126);
    v128 = (_WORD *)(v117 + v126);
    do
    {
      v129 = *v127++;
      *v128++ += v129;
      --v125;
    }
    while (v125);
    goto LABEL_93;
  }
  v120 = v77 & 0x7FFFFFF0;
  v121 = (int16x8_t *)(v117 + 16);
  v122 = (int16x8_t *)(v118 + 16);
  v123 = v77 & 0xFFFFFFF0;
  do
  {
    v124 = vaddq_s16(*v122, *v121);
    v121[-1] = vaddq_s16(v122[-1], v121[-1]);
    *v121 = v124;
    v121 += 2;
    v122 += 2;
    v123 -= 16;
  }
  while (v123);
  if (v120 != v77)
    goto LABEL_91;
LABEL_93:
  if (!v76)
    return result;
  v130 = (v76 * v76);
  v131 = **(_QWORD **)(a1 + 2536);
  v132 = **((_QWORD **)result + 317);
  if (v130 >= 0x10 && (v131 < v132 + 2 * v130 ? (v133 = v132 >= v131 + 2 * v130) : (v133 = 1), v133))
  {
    v134 = v130 & 0x7FFFFFF0;
    v135 = (int16x8_t *)(v131 + 16);
    v136 = (int16x8_t *)(v132 + 16);
    v137 = v134;
    do
    {
      v138 = vaddq_s16(*v136, *v135);
      v135[-1] = vaddq_s16(v136[-1], v135[-1]);
      *v135 = v138;
      v135 += 2;
      v136 += 2;
      v137 -= 16;
    }
    while (v137);
    if (v134 == v130)
      goto LABEL_107;
  }
  else
  {
    v134 = 0;
  }
  v139 = v130 - v134;
  v140 = 2 * v134;
  v141 = (__int16 *)(v132 + v140);
  v142 = (_WORD *)(v131 + v140);
  do
  {
    v143 = *v141++;
    *v142++ += v143;
    --v139;
  }
  while (v139);
LABEL_107:
  v144 = **(_QWORD **)(a1 + 2544);
  v145 = **((_QWORD **)result + 318);
  if (v130 >= 0x10 && (v144 < v145 + 2 * v130 ? (v146 = v145 >= v144 + 2 * v130) : (v146 = 1), v146))
  {
    v147 = v130 & 0x7FFFFFF0;
    v148 = (int16x8_t *)(v144 + 16);
    v149 = (int16x8_t *)(v145 + 16);
    v150 = v147;
    do
    {
      v151 = vaddq_s16(*v149, *v148);
      v148[-1] = vaddq_s16(v149[-1], v148[-1]);
      *v148 = v151;
      v148 += 2;
      v149 += 2;
      v150 -= 16;
    }
    while (v150);
    if (v147 == v130)
      goto LABEL_120;
  }
  else
  {
    v147 = 0;
  }
  v152 = v130 - v147;
  v153 = 2 * v147;
  v154 = (__int16 *)(v145 + v153);
  v155 = (_WORD *)(v144 + v153);
  do
  {
    v156 = *v154++;
    *v155++ += v156;
    --v152;
  }
  while (v152);
LABEL_120:
  v157 = **(_QWORD **)(a1 + 2552);
  v158 = **((_QWORD **)result + 319);
  if (v130 >= 0x10 && (v157 < v158 + 2 * v130 ? (v159 = v158 >= v157 + 2 * v130) : (v159 = 1), v159))
  {
    v160 = v130 & 0x7FFFFFF0;
    v161 = (int16x8_t *)(v157 + 16);
    v162 = (int16x8_t *)(v158 + 16);
    v163 = v160;
    do
    {
      v164 = vaddq_s16(*v162, *v161);
      v161[-1] = vaddq_s16(v162[-1], v161[-1]);
      *v161 = v164;
      v161 += 2;
      v162 += 2;
      v163 -= 16;
    }
    while (v163);
    if (v160 == v130)
      goto LABEL_133;
  }
  else
  {
    v160 = 0;
  }
  v165 = v130 - v160;
  v166 = 2 * v160;
  v167 = (__int16 *)(v158 + v166);
  v168 = (_WORD *)(v157 + v166);
  do
  {
    v169 = *v167++;
    *v168++ += v169;
    --v165;
  }
  while (v165);
LABEL_133:
  v170 = **(_QWORD **)(a1 + 2560);
  v171 = **((_QWORD **)result + 320);
  if (v130 < 0x10 || (v170 < v171 + 2 * v130 ? (v172 = v171 >= v170 + 2 * v130) : (v172 = 1), !v172))
  {
    v173 = 0;
LABEL_144:
    v178 = v130 - v173;
    v179 = 2 * v173;
    v180 = (__int16 *)(v171 + v179);
    v181 = (_WORD *)(v170 + v179);
    do
    {
      v182 = *v180++;
      *v181++ += v182;
      --v178;
    }
    while (v178);
    return result;
  }
  v173 = v130 & 0x7FFFFFF0;
  v174 = (int16x8_t *)(v170 + 16);
  v175 = (int16x8_t *)(v171 + 16);
  v176 = v173;
  do
  {
    v177 = vaddq_s16(*v175, *v174);
    v174[-1] = vaddq_s16(v175[-1], v174[-1]);
    *v174 = v177;
    v174 += 2;
    v175 += 2;
    v176 -= 16;
  }
  while (v176);
  if (v173 != v130)
    goto LABEL_144;
  return result;
}

void sub_19C0F7C04(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CFF0, 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 64))(*(_QWORD *)(a1 + 1552));
  sub_19C2210D4(23);
}

uint64_t sub_19C0F7C60(uint64_t result, float a2, double a3, double a4)
{
  float v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  float v8;
  BOOL v9;
  _WORD *v10;
  uint64_t v11;
  float v12;
  _WORD *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  float v19;
  _WORD *v20;
  uint64_t v21;
  float v22;
  _WORD *v23;
  uint64_t v24;
  float v25;
  _WORD *v26;
  float v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  float v31;
  _WORD *v32;
  uint64_t v33;
  float v34;
  _WORD *v35;
  uint64_t v36;
  float v37;
  _WORD *v38;
  float v39;

  v4 = -a2;
  v5 = *(unsigned int *)(result + 52);
  if ((int)v5 >= 1)
  {
    v6 = **(_WORD ***)(result + 2568);
    v7 = *(unsigned int *)(result + 52);
    do
    {
      LOWORD(a4) = *v6;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v8 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v8 > a2))
        *v6 = (int)*(float *)&a4;
      ++v6;
      --v7;
    }
    while (v7);
    v10 = **(_WORD ***)(result + 2576);
    v11 = v5;
    do
    {
      LOWORD(a4) = *v10;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v12 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v12 > a2))
        *v10 = (int)*(float *)&a4;
      ++v10;
      --v11;
    }
    while (v11);
    v13 = **(_WORD ***)(result + 2584);
    v14 = v5;
    do
    {
      LOWORD(a4) = *v13;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v15 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v15 > a2))
        *v13 = (int)*(float *)&a4;
      ++v13;
      --v14;
    }
    while (v14);
  }
  v16 = (*(_DWORD *)(result + 48) * v5);
  if ((int)v16 >= 1)
  {
    v17 = **(_WORD ***)(result + 2504);
    v18 = (*(_DWORD *)(result + 48) * v5);
    do
    {
      LOWORD(a4) = *v17;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v19 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v19 > a2))
        *v17 = (int)*(float *)&a4;
      ++v17;
      --v18;
    }
    while (v18);
    v20 = **(_WORD ***)(result + 2512);
    v21 = v16;
    do
    {
      LOWORD(a4) = *v20;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v22 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v22 > a2))
        *v20 = (int)*(float *)&a4;
      ++v20;
      --v21;
    }
    while (v21);
    v23 = **(_WORD ***)(result + 2520);
    v24 = v16;
    do
    {
      LOWORD(a4) = *v23;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v25 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v25 > a2))
        *v23 = (int)*(float *)&a4;
      ++v23;
      --v24;
    }
    while (v24);
    v26 = **(_WORD ***)(result + 2528);
    do
    {
      LOWORD(a4) = *v26;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v27 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v27 > a2))
        *v26 = (int)*(float *)&a4;
      ++v26;
      --v16;
    }
    while (v16);
  }
  if ((_DWORD)v5)
  {
    v28 = (v5 * v5);
    v29 = **(_WORD ***)(result + 2536);
    v30 = v28;
    do
    {
      LOWORD(a4) = *v29;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v31 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v31 > a2))
        *v29 = (int)*(float *)&a4;
      ++v29;
      --v30;
    }
    while (v30);
    v32 = **(_WORD ***)(result + 2544);
    v33 = v28;
    do
    {
      LOWORD(a4) = *v32;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v34 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v34 > a2))
        *v32 = (int)*(float *)&a4;
      ++v32;
      --v33;
    }
    while (v33);
    v35 = **(_WORD ***)(result + 2552);
    v36 = v28;
    do
    {
      LOWORD(a4) = *v35;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v37 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v37 > a2))
        *v35 = (int)*(float *)&a4;
      ++v35;
      --v36;
    }
    while (v36);
    v38 = **(_WORD ***)(result + 2560);
    do
    {
      LOWORD(a4) = *v38;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v39 = (float)SLODWORD(a4);
      v9 = (float)SLODWORD(a4) < v4;
      *(float *)&a4 = -a2;
      if (v9 || (*(float *)&a4 = a2, v39 > a2))
        *v38 = (int)*(float *)&a4;
      ++v38;
      --v28;
    }
    while (v28);
  }
  return result;
}

uint64_t sub_19C0F7FC8(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3;
  int16x4_t *v4;
  uint64_t v5;
  int16x4_t *v6;
  uint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int16x4_t *v11;
  uint64_t v12;
  int16x4_t *v13;
  uint64_t v14;
  int16x8_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int16x4_t *v18;
  uint64_t v19;
  int16x4_t *v20;
  uint64_t v21;
  int16x8_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int16x4_t *v26;
  uint64_t v27;
  int16x4_t *v28;
  uint64_t v29;
  int16x8_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  int16x4_t *v33;
  uint64_t v34;
  int16x4_t *v35;
  uint64_t v36;
  int16x8_t v37;
  uint64_t v38;
  unsigned __int16 *v39;
  int16x4_t *v40;
  uint64_t v41;
  int16x4_t *v42;
  uint64_t v43;
  int16x8_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  int16x4_t *v47;
  uint64_t v48;
  int16x4_t *v49;
  uint64_t v50;
  int16x8_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  int16x4_t *v55;
  uint64_t v56;
  int16x4_t *v57;
  uint64_t v58;
  int16x8_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  int16x4_t *v62;
  uint64_t v63;
  int16x4_t *v64;
  uint64_t v65;
  int16x8_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  int16x4_t *v69;
  uint64_t v70;
  int16x4_t *v71;
  uint64_t v72;
  int16x8_t v73;
  uint64_t v74;
  unsigned __int16 *v75;
  int16x4_t *v76;
  uint64_t v77;
  int16x4_t *v78;
  uint64_t v79;
  int16x8_t v80;
  uint64_t v81;
  unsigned __int16 *v82;

  v3 = *(unsigned int *)(result + 52);
  if ((int)v3 < 1)
    goto LABEL_23;
  v4 = **(int16x4_t ***)(result + 2568);
  if (v3 < 0x10)
  {
    v5 = 0;
LABEL_7:
    v9 = v3 - v5;
    v10 = (unsigned __int16 *)v4 + v5;
    do
    {
      a3.n128_u16[0] = *v10;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v10++ = (int)a3.n128_f32[0];
      --v9;
    }
    while (v9);
    goto LABEL_9;
  }
  v5 = v3 & 0x7FFFFFF0;
  v6 = v4 + 2;
  v7 = v3 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v6[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v6[-2].i8)), a2)));
    v8 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v6)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v6->i8)), a2)));
    *(__n128 *)v6[-2].i8 = a3;
    *(int16x8_t *)v6->i8 = v8;
    v6 += 4;
    v7 -= 16;
  }
  while (v7);
  if (v5 != v3)
    goto LABEL_7;
LABEL_9:
  v11 = **(int16x4_t ***)(result + 2576);
  if (v3 >= 0x10)
  {
    v12 = v3 & 0x7FFFFFF0;
    v13 = v11 + 2;
    v14 = v3 & 0xFFFFFFF0;
    do
    {
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v13[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13[-2].i8)), a2)));
      v15 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v13)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13->i8)), a2)));
      *(__n128 *)v13[-2].i8 = a3;
      *(int16x8_t *)v13->i8 = v15;
      v13 += 4;
      v14 -= 16;
    }
    while (v14);
    if (v12 == v3)
      goto LABEL_16;
  }
  else
  {
    v12 = 0;
  }
  v16 = v3 - v12;
  v17 = (unsigned __int16 *)v11 + v12;
  do
  {
    a3.n128_u16[0] = *v17;
    a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
    a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
    *v17++ = (int)a3.n128_f32[0];
    --v16;
  }
  while (v16);
LABEL_16:
  v18 = **(int16x4_t ***)(result + 2584);
  if (v3 < 0x10)
  {
    v19 = 0;
LABEL_21:
    v23 = v3 - v19;
    v24 = (unsigned __int16 *)v18 + v19;
    do
    {
      a3.n128_u16[0] = *v24;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v24++ = (int)a3.n128_f32[0];
      --v23;
    }
    while (v23);
    goto LABEL_23;
  }
  v19 = v3 & 0x7FFFFFF0;
  v20 = v18 + 2;
  v21 = v3 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v20[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v20[-2].i8)), a2)));
    v22 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v20)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v20->i8)), a2)));
    *(__n128 *)v20[-2].i8 = a3;
    *(int16x8_t *)v20->i8 = v22;
    v20 += 4;
    v21 -= 16;
  }
  while (v21);
  if (v19 != v3)
    goto LABEL_21;
LABEL_23:
  v25 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v25 < 1)
    goto LABEL_52;
  v26 = **(int16x4_t ***)(result + 2504);
  if (v25 < 0x10)
  {
    v27 = 0;
LABEL_29:
    v31 = v25 - v27;
    v32 = (unsigned __int16 *)v26 + v27;
    do
    {
      a3.n128_u16[0] = *v32;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v32++ = (int)a3.n128_f32[0];
      --v31;
    }
    while (v31);
    goto LABEL_31;
  }
  v27 = v25 & 0x7FFFFFF0;
  v28 = v26 + 2;
  v29 = v25 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v28[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v28[-2].i8)), a2)));
    v30 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v28)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v28->i8)), a2)));
    *(__n128 *)v28[-2].i8 = a3;
    *(int16x8_t *)v28->i8 = v30;
    v28 += 4;
    v29 -= 16;
  }
  while (v29);
  if (v27 != v25)
    goto LABEL_29;
LABEL_31:
  v33 = **(int16x4_t ***)(result + 2512);
  if (v25 < 0x10)
  {
    v34 = 0;
LABEL_36:
    v38 = v25 - v34;
    v39 = (unsigned __int16 *)v33 + v34;
    do
    {
      a3.n128_u16[0] = *v39;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v39++ = (int)a3.n128_f32[0];
      --v38;
    }
    while (v38);
    goto LABEL_38;
  }
  v34 = v25 & 0x7FFFFFF0;
  v35 = v33 + 2;
  v36 = v25 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v35[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v35[-2].i8)), a2)));
    v37 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v35)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v35->i8)), a2)));
    *(__n128 *)v35[-2].i8 = a3;
    *(int16x8_t *)v35->i8 = v37;
    v35 += 4;
    v36 -= 16;
  }
  while (v36);
  if (v34 != v25)
    goto LABEL_36;
LABEL_38:
  v40 = **(int16x4_t ***)(result + 2520);
  if (v25 < 0x10)
  {
    v41 = 0;
LABEL_43:
    v45 = v25 - v41;
    v46 = (unsigned __int16 *)v40 + v41;
    do
    {
      a3.n128_u16[0] = *v46;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v46++ = (int)a3.n128_f32[0];
      --v45;
    }
    while (v45);
    goto LABEL_45;
  }
  v41 = v25 & 0x7FFFFFF0;
  v42 = v40 + 2;
  v43 = v25 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v42[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v42[-2].i8)), a2)));
    v44 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v42)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v42->i8)), a2)));
    *(__n128 *)v42[-2].i8 = a3;
    *(int16x8_t *)v42->i8 = v44;
    v42 += 4;
    v43 -= 16;
  }
  while (v43);
  if (v41 != v25)
    goto LABEL_43;
LABEL_45:
  v47 = **(int16x4_t ***)(result + 2528);
  if (v25 < 0x10)
  {
    v48 = 0;
LABEL_50:
    v52 = v25 - v48;
    v53 = (unsigned __int16 *)v47 + v48;
    do
    {
      a3.n128_u16[0] = *v53;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v53++ = (int)a3.n128_f32[0];
      --v52;
    }
    while (v52);
    goto LABEL_52;
  }
  v48 = v25 & 0x7FFFFFF0;
  v49 = v47 + 2;
  v50 = v25 & 0xFFFFFFF0;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v49[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v49[-2].i8)), a2)));
    v51 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v49)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v49->i8)), a2)));
    *(__n128 *)v49[-2].i8 = a3;
    *(int16x8_t *)v49->i8 = v51;
    v49 += 4;
    v50 -= 16;
  }
  while (v50);
  if (v48 != v25)
    goto LABEL_50;
LABEL_52:
  if (!(_DWORD)v3)
    return result;
  v54 = (v3 * v3);
  v55 = **(int16x4_t ***)(result + 2536);
  if (v54 < 0x10)
  {
    v56 = 0;
LABEL_58:
    v60 = v54 - v56;
    v61 = (unsigned __int16 *)v55 + v56;
    do
    {
      a3.n128_u16[0] = *v61;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v61++ = (int)a3.n128_f32[0];
      --v60;
    }
    while (v60);
    goto LABEL_60;
  }
  v56 = v54 & 0x7FFFFFF0;
  v57 = v55 + 2;
  v58 = v56;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v57[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v57[-2].i8)), a2)));
    v59 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v57)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v57->i8)), a2)));
    *(__n128 *)v57[-2].i8 = a3;
    *(int16x8_t *)v57->i8 = v59;
    v57 += 4;
    v58 -= 16;
  }
  while (v58);
  if (v56 != v54)
    goto LABEL_58;
LABEL_60:
  v62 = **(int16x4_t ***)(result + 2544);
  if (v54 < 0x10)
  {
    v63 = 0;
LABEL_65:
    v67 = v54 - v63;
    v68 = (unsigned __int16 *)v62 + v63;
    do
    {
      a3.n128_u16[0] = *v68;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v68++ = (int)a3.n128_f32[0];
      --v67;
    }
    while (v67);
    goto LABEL_67;
  }
  v63 = v54 & 0x7FFFFFF0;
  v64 = v62 + 2;
  v65 = v63;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v64[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v64[-2].i8)), a2)));
    v66 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v64)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v64->i8)), a2)));
    *(__n128 *)v64[-2].i8 = a3;
    *(int16x8_t *)v64->i8 = v66;
    v64 += 4;
    v65 -= 16;
  }
  while (v65);
  if (v63 != v54)
    goto LABEL_65;
LABEL_67:
  v69 = **(int16x4_t ***)(result + 2552);
  if (v54 < 0x10)
  {
    v70 = 0;
LABEL_72:
    v74 = v54 - v70;
    v75 = (unsigned __int16 *)v69 + v70;
    do
    {
      a3.n128_u16[0] = *v75;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v75++ = (int)a3.n128_f32[0];
      --v74;
    }
    while (v74);
    goto LABEL_74;
  }
  v70 = v54 & 0x7FFFFFF0;
  v71 = v69 + 2;
  v72 = v70;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v71[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v71[-2].i8)), a2)));
    v73 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v71)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v71->i8)), a2)));
    *(__n128 *)v71[-2].i8 = a3;
    *(int16x8_t *)v71->i8 = v73;
    v71 += 4;
    v72 -= 16;
  }
  while (v72);
  if (v70 != v54)
    goto LABEL_72;
LABEL_74:
  v76 = **(int16x4_t ***)(result + 2560);
  if (v54 < 0x10)
  {
    v77 = 0;
LABEL_79:
    v81 = v54 - v77;
    v82 = (unsigned __int16 *)v76 + v77;
    do
    {
      a3.n128_u16[0] = *v82;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
      *v82++ = (int)a3.n128_f32[0];
      --v81;
    }
    while (v81);
    return result;
  }
  v77 = v54 & 0x7FFFFFF0;
  v78 = v76 + 2;
  v79 = v77;
  do
  {
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v78[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v78[-2].i8)), a2)));
    v80 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v78)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v78->i8)), a2)));
    *(__n128 *)v78[-2].i8 = a3;
    *(int16x8_t *)v78->i8 = v80;
    v78 += 4;
    v79 -= 16;
  }
  while (v79);
  if (v77 != v54)
    goto LABEL_79;
  return result;
}

void sub_19C0F8780(uint64_t a1, uint64_t *a2)
{
  int i;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  if (*(int *)(a1 + 2688) >= 1)
  {
    for (i = 0; i < *(_DWORD *)(a1 + 2688); ++i)
    {
      v6 = (_QWORD *)operator new();
      v7 = *(unsigned int *)(a1 + 52);
      v8 = (void *)operator new[]();
      *v6 = v8;
      if ((int)v7 >= 1)
        bzero(v8, 4 * v7);
      v9 = *(_DWORD *)(a1 + 52);
      v11 = (char *)a2[1];
      v10 = a2[2];
      if ((unint64_t)v11 < v10)
      {
        *(_DWORD *)v11 = v9;
        *((_QWORD *)v11 + 1) = v6;
        v12 = v11 + 16;
        goto LABEL_24;
      }
      v13 = (char *)*a2;
      v14 = (uint64_t)&v11[-*a2] >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        goto LABEL_43;
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 60)
          goto LABEL_44;
        v18 = (char *)operator new(16 * v17);
        v19 = (uint64_t)&v18[16 * v14];
        *(_DWORD *)v19 = v9;
        *(_QWORD *)(v19 + 8) = v6;
        v20 = v19;
        if (v11 == v13)
          goto LABEL_22;
      }
      else
      {
        v18 = 0;
        v19 = 16 * v14;
        *(_DWORD *)v19 = v9;
        *(_QWORD *)(v19 + 8) = v6;
        v20 = 16 * v14;
        if (v11 == v13)
          goto LABEL_22;
      }
      do
      {
        *(_OWORD *)(v20 - 16) = *((_OWORD *)v11 - 1);
        v20 -= 16;
        v11 -= 16;
      }
      while (v11 != v13);
      v11 = (char *)*a2;
LABEL_22:
      v12 = (char *)(v19 + 16);
      *a2 = v20;
      a2[1] = v19 + 16;
      a2[2] = (uint64_t)&v18[16 * v17];
      if (v11)
        operator delete(v11);
LABEL_24:
      a2[1] = (uint64_t)v12;
      v21 = (_QWORD *)operator new();
      v22 = *(unsigned int *)(a1 + 52);
      v23 = (void *)operator new[]();
      *v21 = v23;
      if ((int)v22 >= 1)
        bzero(v23, 4 * v22);
      v24 = *(_DWORD *)(a1 + 52);
      v26 = (_QWORD *)a2[1];
      v25 = a2[2];
      if ((unint64_t)v26 >= v25)
      {
        v27 = (_QWORD *)*a2;
        v28 = ((uint64_t)v26 - *a2) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
LABEL_43:
          sub_19C07DA0C();
        v30 = v25 - (_QWORD)v27;
        if (v30 >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 60)
LABEL_44:
            sub_19C07C7FC();
          v32 = (char *)operator new(16 * v31);
          v33 = (uint64_t)&v32[16 * v28];
          *(_DWORD *)v33 = v24;
          *(_QWORD *)(v33 + 8) = v21;
          v34 = v33;
          if (v26 == v27)
            goto LABEL_40;
          do
          {
LABEL_38:
            *(_OWORD *)(v34 - 16) = *((_OWORD *)v26 - 1);
            v34 -= 16;
            v26 -= 2;
          }
          while (v26 != v27);
          v26 = (_QWORD *)*a2;
        }
        else
        {
          v32 = 0;
          v33 = 16 * v28;
          *(_DWORD *)v33 = v24;
          *(_QWORD *)(v33 + 8) = v21;
          v34 = 16 * v28;
          if (v26 != v27)
            goto LABEL_38;
        }
LABEL_40:
        v5 = (_QWORD *)(v33 + 16);
        *a2 = v34;
        a2[1] = v33 + 16;
        a2[2] = (uint64_t)&v32[16 * v31];
        if (v26)
          operator delete(v26);
        goto LABEL_4;
      }
      *(_DWORD *)v26 = v24;
      v26[1] = v21;
      v5 = v26 + 2;
LABEL_4:
      a2[1] = (uint64_t)v5;
    }
  }
}

void sub_19C0F8A84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0F8A98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_19C0F8AAC(int *result, uint64_t *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = *a4;
    v9 = 8 * a3;
    do
    {
      v10 = v6[13];
      v11 = *(_QWORD *)(*((_QWORD *)v6 + 20) + v9);
      v12 = 4 * (int)v10 * v7;
      v13 = *a2;
      *(_DWORD *)(v13 + 16 * v8) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v11 + v12), 4 * v10);
      v14 = *a4;
      *a4 = v14 + 1;
      v15 = (const void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + v9) + v12);
      v16 = v6[13];
      v17 = *a2;
      *(_DWORD *)(*a2 + 16 * v14 + 16) = v16;
      result = (int *)memmove(**(void ***)(v17 + 16 * *a4 + 8), v15, 4 * v16);
      v8 = *a4 + 1;
      *a4 = v8;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *sub_19C0F8B94(int *result, _QWORD *a2, int a3, int *a4)
{
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (result[672] >= 1)
  {
    v6 = result;
    v7 = 0;
    v8 = 8 * a3;
    do
    {
      v9 = 4 * v6[13] * v7;
      v10 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 20) + v8) + v9);
      v11 = (void *)(*(_QWORD *)(*((_QWORD *)v6 + 23) + v8) + v9);
      v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      v13 = *a4;
      *a4 = v13 + 1;
      result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

void sub_19C0F8C68(uint64_t a1, _QWORD *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t v8;

  if (*(int *)(a1 + 2688) >= 1)
  {
    v6 = 0;
    v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      v8 = *a3;
      *a3 = v8 + 1;
      bzero(**(void ***)(*a2 + 16 * v8 + 24), 4 * *(int *)(*a2 + 16 * v8 + 16));
      v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

void sub_19C0F8D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[3];

  if (*(_BYTE *)(a1 + 2692))
  {
    v2 = *(_QWORD *)(a1 + 1552);
    BYTE7(v18[2]) = 18;
    strcpy((char *)v18, "LSTM before reseLSTM before reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 40))(v2, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v3 = *(_QWORD *)(a1 + 1560);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 40))(v3, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v4 = *(_QWORD *)(a1 + 1568);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 40))(v4, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v5 = *(_QWORD *)(a1 + 1576);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 40))(v5, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v6 = *(_QWORD *)(a1 + 1584);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 40))(v6, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v7 = *(_QWORD *)(a1 + 1592);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 40))(v7, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v8 = *(_QWORD *)(a1 + 1600);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 40))(v8, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v9 = *(_QWORD *)(a1 + 1608);
    BYTE7(v18[2]) = 18;
    strcpy((char *)&v18[2], "t ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v9 + 40))(v9, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1552) + 16))(*(_QWORD *)(a1 + 1552));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1560) + 16))(*(_QWORD *)(a1 + 1560));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1568) + 16))(*(_QWORD *)(a1 + 1568));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1576) + 16))(*(_QWORD *)(a1 + 1576));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1584) + 16))(*(_QWORD *)(a1 + 1584));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1592) + 16))(*(_QWORD *)(a1 + 1592));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1600) + 16))(*(_QWORD *)(a1 + 1600));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 1608) + 16))(*(_QWORD *)(a1 + 1608));
    v10 = *(_QWORD *)(a1 + 1552);
    BYTE7(v18[2]) = 17;
    strcpy((char *)v18, "LSTM AFTER resetLSTM AFTER reset ");
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 40))(v10, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v11 = *(_QWORD *)(a1 + 1560);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v11 + 40))(v11, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v12 = *(_QWORD *)(a1 + 1568);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 40))(v12, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v13 = *(_QWORD *)(a1 + 1576);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v13 + 40))(v13, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v14 = *(_QWORD *)(a1 + 1584);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 40))(v14, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v15 = *(_QWORD *)(a1 + 1592);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v15 + 40))(v15, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v16 = *(_QWORD *)(a1 + 1600);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 40))(v16, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
    v17 = *(_QWORD *)(a1 + 1608);
    BYTE7(v18[2]) = 17;
    strcpy((char *)&v18[2], " ");
    v18[1] = v18[0];
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v17 + 40))(v17, &v18[1]);
    if (SBYTE7(v18[2]) < 0)
      operator delete(*(void **)&v18[1]);
  }
}

void sub_19C0F91B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C0F920C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;

  v4 = **(_QWORD **)(a1 + 2504);
  v6 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 52);
  v8 = *(_QWORD **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)a2;
    v11 = (uint64_t)v8 - *(_QWORD *)a2;
    v12 = (v11 >> 4) + 1;
    if (v12 >> 60)
      goto LABEL_134;
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
    v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (v15 >> 60)
      goto LABEL_135;
    v16 = 16 * v15;
    v17 = (char *)operator new(16 * v15);
    v18 = &v17[16 * (v11 >> 4)];
    *(_QWORD *)v18 = v4;
    v9 = v18 + 16;
    v19 = &v17[v11];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v6; v8 != v10; *((_QWORD *)v18 + 1) = v8[1])
    {
      v20 = *(v8 - 2);
      v8 -= 2;
      *((_QWORD *)v18 - 2) = v20;
      v18 -= 16;
    }
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = &v17[v16];
    if (v10)
    {
      operator delete(v10);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v8 = v4;
    v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v5;
    *((_DWORD *)v8 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v9;
  v21 = **(_QWORD **)(a1 + 2512);
  v22 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v9 >= v22)
  {
    v24 = *(_QWORD **)a2;
    v25 = (uint64_t)v9 - *(_QWORD *)a2;
    v26 = (v25 >> 4) + 1;
    if (v26 >> 60)
      goto LABEL_134;
    v27 = v22 - (_QWORD)v24;
    if (v27 >> 3 > v26)
      v26 = v27 >> 3;
    v14 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0;
    v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v28 = v26;
    if (v28 >> 60)
      goto LABEL_135;
    v29 = 16 * v28;
    v30 = (char *)operator new(16 * v28);
    v31 = &v30[16 * (v25 >> 4)];
    *(_QWORD *)v31 = v21;
    v23 = v31 + 16;
    v32 = &v30[v25];
    *((_DWORD *)v32 + 2) = v5;
    for (*((_DWORD *)v32 + 3) = v6; v9 != v24; *((_QWORD *)v31 + 1) = v9[1])
    {
      v33 = *(v9 - 2);
      v9 -= 2;
      *((_QWORD *)v31 - 2) = v33;
      v31 -= 16;
    }
    *(_QWORD *)a2 = v31;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = &v30[v29];
    if (v24)
    {
      operator delete(v24);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v9 = v21;
    v23 = v9 + 2;
    *((_DWORD *)v9 + 2) = v5;
    *((_DWORD *)v9 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v23;
  v34 = **(_QWORD **)(a1 + 2528);
  v35 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v23 >= v35)
  {
    v37 = *(_QWORD **)a2;
    v38 = (uint64_t)v23 - *(_QWORD *)a2;
    v39 = (v38 >> 4) + 1;
    if (v39 >> 60)
      goto LABEL_134;
    v40 = v35 - (_QWORD)v37;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    v14 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v41 = v39;
    if (v41 >> 60)
      goto LABEL_135;
    v42 = 16 * v41;
    v43 = (char *)operator new(16 * v41);
    v44 = &v43[16 * (v38 >> 4)];
    *(_QWORD *)v44 = v34;
    v36 = v44 + 16;
    v45 = &v43[v38];
    *((_DWORD *)v45 + 2) = v5;
    for (*((_DWORD *)v45 + 3) = v6; v23 != v37; *((_QWORD *)v44 + 1) = v23[1])
    {
      v46 = *(v23 - 2);
      v23 -= 2;
      *((_QWORD *)v44 - 2) = v46;
      v44 -= 16;
    }
    *(_QWORD *)a2 = v44;
    *(_QWORD *)(a2 + 8) = v36;
    *(_QWORD *)(a2 + 16) = &v43[v42];
    if (v37)
    {
      operator delete(v37);
      v6 = *(_DWORD *)(a1 + 48);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v23 = v34;
    v36 = v23 + 2;
    *((_DWORD *)v23 + 2) = v5;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v36;
  v47 = **(_QWORD **)(a1 + 2520);
  v48 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v36 >= v48)
  {
    v50 = *(_QWORD **)a2;
    v51 = (uint64_t)v36 - *(_QWORD *)a2;
    v52 = (v51 >> 4) + 1;
    if (v52 >> 60)
      goto LABEL_134;
    v53 = v48 - (_QWORD)v50;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    v14 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
    v54 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v54 = v52;
    if (v54 >> 60)
      goto LABEL_135;
    v55 = 16 * v54;
    v56 = (char *)operator new(16 * v54);
    v57 = &v56[16 * (v51 >> 4)];
    *(_QWORD *)v57 = v47;
    v49 = v57 + 16;
    v58 = &v56[v51];
    *((_DWORD *)v58 + 2) = v5;
    for (*((_DWORD *)v58 + 3) = v6; v36 != v50; *((_QWORD *)v57 + 1) = v36[1])
    {
      v59 = *(v36 - 2);
      v36 -= 2;
      *((_QWORD *)v57 - 2) = v59;
      v57 -= 16;
    }
    *(_QWORD *)a2 = v57;
    *(_QWORD *)(a2 + 8) = v49;
    *(_QWORD *)(a2 + 16) = &v56[v55];
    if (v50)
    {
      operator delete(v50);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v36 = v47;
    v49 = v36 + 2;
    *((_DWORD *)v36 + 2) = v5;
    *((_DWORD *)v36 + 3) = v6;
  }
  *(_QWORD *)(a2 + 8) = v49;
  v60 = **(_QWORD **)(a1 + 2536);
  v61 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v49 >= v61)
  {
    v63 = *(_QWORD **)a2;
    v64 = (uint64_t)v49 - *(_QWORD *)a2;
    v65 = (v64 >> 4) + 1;
    if (v65 >> 60)
      goto LABEL_134;
    v66 = v61 - (_QWORD)v63;
    if (v66 >> 3 > v65)
      v65 = v66 >> 3;
    v14 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0;
    v67 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v67 = v65;
    if (v67 >> 60)
      goto LABEL_135;
    v68 = 16 * v67;
    v69 = (char *)operator new(16 * v67);
    v70 = &v69[16 * (v64 >> 4)];
    *(_QWORD *)v70 = v60;
    v62 = v70 + 16;
    for (*(int32x2_t *)&v69[v64 + 8] = vdup_n_s32(v5); v49 != v63; *((_QWORD *)v70 + 1) = v49[1])
    {
      v71 = *(v49 - 2);
      v49 -= 2;
      *((_QWORD *)v70 - 2) = v71;
      v70 -= 16;
    }
    *(_QWORD *)a2 = v70;
    *(_QWORD *)(a2 + 8) = v62;
    *(_QWORD *)(a2 + 16) = &v69[v68];
    if (v63)
    {
      operator delete(v63);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v49 = v60;
    v62 = v49 + 2;
    *((_DWORD *)v49 + 2) = v5;
    *((_DWORD *)v49 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v62;
  v72 = **(_QWORD **)(a1 + 2544);
  v73 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v62 >= v73)
  {
    v75 = *(_QWORD **)a2;
    v76 = (uint64_t)v62 - *(_QWORD *)a2;
    v77 = (v76 >> 4) + 1;
    if (v77 >> 60)
      goto LABEL_134;
    v78 = v73 - (_QWORD)v75;
    if (v78 >> 3 > v77)
      v77 = v78 >> 3;
    v14 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0;
    v79 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v79 = v77;
    if (v79 >> 60)
      goto LABEL_135;
    v80 = 16 * v79;
    v81 = (char *)operator new(16 * v79);
    v82 = &v81[16 * (v76 >> 4)];
    *(_QWORD *)v82 = v72;
    v74 = v82 + 16;
    for (*(int32x2_t *)&v81[v76 + 8] = vdup_n_s32(v5); v62 != v75; *((_QWORD *)v82 + 1) = v62[1])
    {
      v83 = *(v62 - 2);
      v62 -= 2;
      *((_QWORD *)v82 - 2) = v83;
      v82 -= 16;
    }
    *(_QWORD *)a2 = v82;
    *(_QWORD *)(a2 + 8) = v74;
    *(_QWORD *)(a2 + 16) = &v81[v80];
    if (v75)
    {
      operator delete(v75);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v62 = v72;
    v74 = v62 + 2;
    *((_DWORD *)v62 + 2) = v5;
    *((_DWORD *)v62 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v74;
  v84 = **(_QWORD **)(a1 + 2560);
  v85 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v74 >= v85)
  {
    v87 = *(_QWORD **)a2;
    v88 = (uint64_t)v74 - *(_QWORD *)a2;
    v89 = (v88 >> 4) + 1;
    if (v89 >> 60)
      goto LABEL_134;
    v90 = v85 - (_QWORD)v87;
    if (v90 >> 3 > v89)
      v89 = v90 >> 3;
    v14 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0;
    v91 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v91 = v89;
    if (v91 >> 60)
      goto LABEL_135;
    v92 = 16 * v91;
    v93 = (char *)operator new(16 * v91);
    v94 = &v93[16 * (v88 >> 4)];
    *(_QWORD *)v94 = v84;
    v86 = v94 + 16;
    for (*(int32x2_t *)&v93[v88 + 8] = vdup_n_s32(v5); v74 != v87; *((_QWORD *)v94 + 1) = v74[1])
    {
      v95 = *(v74 - 2);
      v74 -= 2;
      *((_QWORD *)v94 - 2) = v95;
      v94 -= 16;
    }
    *(_QWORD *)a2 = v94;
    *(_QWORD *)(a2 + 8) = v86;
    *(_QWORD *)(a2 + 16) = &v93[v92];
    if (v87)
    {
      operator delete(v87);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v74 = v84;
    v86 = v74 + 2;
    *((_DWORD *)v74 + 2) = v5;
    *((_DWORD *)v74 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v86;
  v96 = **(_QWORD **)(a1 + 2552);
  v97 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v86 >= v97)
  {
    v99 = *(_QWORD **)a2;
    v100 = (uint64_t)v86 - *(_QWORD *)a2;
    v101 = (v100 >> 4) + 1;
    if (v101 >> 60)
      goto LABEL_134;
    v102 = v97 - (_QWORD)v99;
    if (v102 >> 3 > v101)
      v101 = v102 >> 3;
    v14 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0;
    v103 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v103 = v101;
    if (v103 >> 60)
      goto LABEL_135;
    v104 = 16 * v103;
    v105 = (char *)operator new(16 * v103);
    v106 = &v105[16 * (v100 >> 4)];
    *(_QWORD *)v106 = v96;
    v98 = v106 + 16;
    for (*(int32x2_t *)&v105[v100 + 8] = vdup_n_s32(v5); v86 != v99; *((_QWORD *)v106 + 1) = v86[1])
    {
      v107 = *(v86 - 2);
      v86 -= 2;
      *((_QWORD *)v106 - 2) = v107;
      v106 -= 16;
    }
    *(_QWORD *)a2 = v106;
    *(_QWORD *)(a2 + 8) = v98;
    *(_QWORD *)(a2 + 16) = &v105[v104];
    if (v99)
    {
      operator delete(v99);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v86 = v96;
    v98 = v86 + 2;
    *((_DWORD *)v86 + 2) = v5;
    *((_DWORD *)v86 + 3) = v5;
  }
  *(_QWORD *)(a2 + 8) = v98;
  v108 = **(_QWORD **)(a1 + 2568);
  v109 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v98 >= v109)
  {
    v111 = *(_QWORD **)a2;
    v112 = (uint64_t)v98 - *(_QWORD *)a2;
    v113 = (v112 >> 4) + 1;
    if (v113 >> 60)
      goto LABEL_134;
    v114 = v109 - (_QWORD)v111;
    if (v114 >> 3 > v113)
      v113 = v114 >> 3;
    v14 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0;
    v115 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14)
      v115 = v113;
    if (v115 >> 60)
      goto LABEL_135;
    v116 = 16 * v115;
    v117 = (char *)operator new(16 * v115);
    v118 = &v117[16 * (v112 >> 4)];
    *(_QWORD *)v118 = v108;
    v110 = v118 + 16;
    v119 = &v117[v112];
    *((_DWORD *)v119 + 2) = v5;
    for (*((_DWORD *)v119 + 3) = 0; v98 != v111; *((_QWORD *)v118 + 1) = v98[1])
    {
      v120 = *(v98 - 2);
      v98 -= 2;
      *((_QWORD *)v118 - 2) = v120;
      v118 -= 16;
    }
    *(_QWORD *)a2 = v118;
    *(_QWORD *)(a2 + 8) = v110;
    *(_QWORD *)(a2 + 16) = &v117[v116];
    if (v111)
    {
      operator delete(v111);
      v5 = *(_DWORD *)(a1 + 52);
    }
  }
  else
  {
    *v98 = v108;
    v110 = v98 + 2;
    *((_DWORD *)v98 + 2) = v5;
    *((_DWORD *)v98 + 3) = 0;
  }
  *(_QWORD *)(a2 + 8) = v110;
  v121 = **(_QWORD **)(a1 + 2576);
  v122 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v110 < v122)
  {
    *v110 = v121;
    v123 = v110 + 2;
    *((_DWORD *)v110 + 2) = v5;
    *((_DWORD *)v110 + 3) = 0;
    goto LABEL_121;
  }
  v124 = *(_QWORD **)a2;
  v125 = (uint64_t)v110 - *(_QWORD *)a2;
  v126 = (v125 >> 4) + 1;
  if (v126 >> 60)
    goto LABEL_134;
  v127 = v122 - (_QWORD)v124;
  if (v127 >> 3 > v126)
    v126 = v127 >> 3;
  v14 = (unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0;
  v128 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v128 = v126;
  if (v128 >> 60)
LABEL_135:
    sub_19C07C7FC();
  v129 = 16 * v128;
  v130 = (char *)operator new(16 * v128);
  v131 = &v130[16 * (v125 >> 4)];
  v132 = &v130[v129];
  *(_QWORD *)v131 = v121;
  v123 = v131 + 16;
  v133 = &v130[v125];
  *((_DWORD *)v133 + 2) = v5;
  for (*((_DWORD *)v133 + 3) = 0; v110 != v124; *((_QWORD *)v131 + 1) = v110[1])
  {
    v134 = *(v110 - 2);
    v110 -= 2;
    *((_QWORD *)v131 - 2) = v134;
    v131 -= 16;
  }
  *(_QWORD *)a2 = v131;
  *(_QWORD *)(a2 + 8) = v123;
  *(_QWORD *)(a2 + 16) = v132;
  if (v124)
  {
    operator delete(v124);
    v5 = *(_DWORD *)(a1 + 52);
  }
LABEL_121:
  *(_QWORD *)(a2 + 8) = v123;
  v135 = **(_QWORD **)(a1 + 2584);
  v136 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v123 < v136)
  {
    *v123 = v135;
    v137 = v123 + 2;
    *((_DWORD *)v123 + 2) = v5;
    *((_DWORD *)v123 + 3) = 0;
    goto LABEL_133;
  }
  v138 = *(_QWORD **)a2;
  v139 = (uint64_t)v123 - *(_QWORD *)a2;
  v140 = (v139 >> 4) + 1;
  if (v140 >> 60)
LABEL_134:
    sub_19C07DA0C();
  v141 = v136 - (_QWORD)v138;
  if (v141 >> 3 > v140)
    v140 = v141 >> 3;
  v14 = (unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0;
  v142 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14)
    v142 = v140;
  if (v142 >> 60)
    goto LABEL_135;
  v143 = 16 * v142;
  v144 = (char *)operator new(16 * v142);
  v145 = &v144[16 * (v139 >> 4)];
  v146 = &v144[v143];
  *(_QWORD *)v145 = v135;
  v137 = v145 + 16;
  v147 = &v144[v139];
  *((_DWORD *)v147 + 2) = v5;
  for (*((_DWORD *)v147 + 3) = 0; v123 != v138; *((_QWORD *)v145 + 1) = v123[1])
  {
    v148 = *(v123 - 2);
    v123 -= 2;
    *((_QWORD *)v145 - 2) = v148;
    v145 -= 16;
  }
  *(_QWORD *)a2 = v145;
  *(_QWORD *)(a2 + 8) = v137;
  *(_QWORD *)(a2 + 16) = v146;
  if (v138)
    operator delete(v138);
LABEL_133:
  *(_QWORD *)(a2 + 8) = v137;
}

__n128 sub_19C0F9AD4(_QWORD *a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;

  v2 = *(_OWORD **)(a2 + 8);
  v3 = *((_QWORD *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(_QWORD *)(a2 + 8) = v2;
  *v2 = *(v2 - 1);
  a1[30] = *(_QWORD *)v2;
  a1[314] = a1 + 30;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4 - 16;
  *v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(_QWORD *)v2;
  a1[316] = a1 + 32;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5 - 16;
  *v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(_QWORD *)v2;
  v6 = a1 + 31;
  v6[284] = v6;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7 - 16;
  *v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(_QWORD *)v2;
  v6[286] = v6 + 2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v8 - 16;
  *v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(_QWORD *)v2;
  v6[287] = v6 + 3;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9 - 16;
  *v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(_QWORD *)v2;
  v6[289] = v6 + 5;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10 - 16;
  *v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(_QWORD *)v2;
  v6[288] = v6 + 4;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v11 - 16;
  *v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(_QWORD *)v2;
  v6[290] = v6 + 6;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v12 - 16;
  *v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(_QWORD *)v2;
  v6[291] = v6 + 7;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v13 - 16;
  result = *(__n128 *)(v13 - 32);
  *v2 = result;
  v6[8] = *(_QWORD *)v2;
  v6[292] = v6 + 8;
  *(_QWORD *)(a2 + 8) -= 16;
  return result;
}

uint64_t sub_19C0F9C54(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C0F9C60(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C0F9C68(uint64_t a1)
{
  char *__p;

  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "LSTM alloc, from allocAll");
  sub_19C0EF2EC(a1);
  operator delete(__p);
}

void sub_19C0F9CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C0F9D08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;

  v2 = a1[329];
  v3 = a1[328];
  if (v2 == v3)
  {
    v3 = a1[329];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[329];
        v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v6 = a1[332];
  v7 = a1[331];
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v7 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[332];
        v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    a1[329] = a1[328];
    a1[332] = v7;
    v10 = a1[136];
    v11 = a1[135];
    if (v10 != v11)
      goto LABEL_13;
LABEL_18:
    v11 = v10;
    goto LABEL_19;
  }
  a1[329] = v3;
  a1[332] = v6;
  v10 = a1[136];
  v11 = a1[135];
  if (v10 == v11)
    goto LABEL_18;
LABEL_13:
  v12 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      v10 = a1[136];
      v11 = a1[135];
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  a1[136] = v11;
  v14 = (void *)a1[133];
  if (v14)
  {
    operator delete(v14);
    a1[133] = 0;
  }
  v15 = (void *)a1[132];
  if (v15)
  {
    operator delete(v15);
    a1[132] = 0;
  }
  v16 = a1[166];
  v17 = a1[165];
  if (v16 == v17)
  {
    v17 = a1[166];
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *(void **)(v17 + 8 * v18);
      if (v19)
      {
        operator delete[](v19);
        v16 = a1[166];
        v17 = a1[165];
      }
      ++v18;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  a1[166] = v17;
  v20 = (void *)a1[163];
  if (v20)
  {
    operator delete(v20);
    a1[163] = 0;
  }
  v21 = (void *)a1[162];
  if (v21)
  {
    operator delete(v21);
    a1[162] = 0;
  }
  v22 = a1[151];
  v23 = a1[150];
  if (v22 == v23)
  {
    v23 = a1[151];
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = *(void **)(v23 + 8 * v24);
      if (v25)
      {
        operator delete[](v25);
        v22 = a1[151];
        v23 = a1[150];
      }
      ++v24;
    }
    while (v24 < (v22 - v23) >> 3);
  }
  a1[151] = v23;
  v26 = (void *)a1[148];
  if (v26)
  {
    operator delete(v26);
    a1[148] = 0;
  }
  v27 = (void *)a1[147];
  if (v27)
  {
    operator delete(v27);
    a1[147] = 0;
  }
  v28 = a1[181];
  v29 = a1[180];
  if (v28 == v29)
  {
    v29 = a1[181];
  }
  else
  {
    v30 = 0;
    do
    {
      v31 = *(void **)(v29 + 8 * v30);
      if (v31)
      {
        operator delete[](v31);
        v28 = a1[181];
        v29 = a1[180];
      }
      ++v30;
    }
    while (v30 < (v28 - v29) >> 3);
  }
  a1[181] = v29;
  v32 = (void *)a1[178];
  if (v32)
  {
    operator delete(v32);
    a1[178] = 0;
  }
  v33 = (void *)a1[177];
  if (v33)
  {
    operator delete(v33);
    a1[177] = 0;
  }
}

void sub_19C0F9F74()
{
  sub_19C2210D4(101);
}

uint64_t sub_19C0F9F94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C0F9F9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19C0F9FA8(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  int16x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float *v17;
  unsigned __int16 *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  int16x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float *v29;
  unsigned __int16 *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;
  int16x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  float *v41;
  unsigned __int16 *v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t *v48;
  int16x4_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  float *v53;
  unsigned __int16 *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v62;
  int16x4_t *v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  float *v67;
  unsigned __int16 *v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t *v74;
  int16x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  float *v79;
  unsigned __int16 *v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float32x4_t *v86;
  int16x4_t *v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  float *v91;
  unsigned __int16 *v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t *v98;
  int16x4_t *v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t v102;
  float *v103;
  unsigned __int16 *v104;
  float v105;
  uint64_t v106;
  float32x4_t *v107;
  int16x8_t *v108;
  uint64_t v109;
  float32x4_t *v110;
  int16x8_t *v111;
  uint64_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int16x8_t v117;
  int16x8_t v118;
  uint64_t v119;
  __int16 *v120;
  float *v121;
  float v122;
  float32x4_t *v123;
  int16x8_t *v124;
  uint64_t v125;
  float32x4_t *v126;
  int16x8_t *v127;
  uint64_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int16x8_t v133;
  int16x8_t v134;
  uint64_t v135;
  __int16 *v136;
  float *v137;
  float v138;
  float32x4_t *v139;
  int16x8_t *v140;
  uint64_t v141;
  float32x4_t *v142;
  int16x8_t *v143;
  uint64_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int16x8_t v149;
  int16x8_t v150;
  uint64_t v151;
  __int16 *v152;
  float *v153;
  float v154;

  v3 = result;
  v4 = *(_DWORD *)(result + 52);
  v5 = (int)a2;
  if (*(int *)(result + 56) >= 1)
  {
    sub_19C1029D4(result + 984, (float)v5, result + 232, v4);
    sub_19C1029D4(v3 + 1224, (float)v5, v3 + 248, *(_DWORD *)(v3 + 52));
    sub_19C1029D4(v3 + 1104, (float)v5, v3 + 240, *(_DWORD *)(v3 + 52));
    result = sub_19C1029D4(v3 + 1344, (float)v5, v3 + 256, *(_DWORD *)(v3 + 52));
    goto LABEL_32;
  }
  v6 = v4 * *(_DWORD *)(result + 48);
  if ((int)v6 < 1)
    goto LABEL_32;
  v7 = *(_QWORD *)(result + 232);
  v8 = *(_QWORD *)(result + 1464);
  v9 = (float)v5;
  if (v6 < 8)
  {
    v10 = 0;
LABEL_9:
    v16 = v6 - v10;
    v17 = (float *)(v8 + 4 * v10);
    v18 = (unsigned __int16 *)(v7 + 2 * v10);
    do
    {
      a3.n128_u16[0] = *v18;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v19 = *v17++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v19 * v9);
      *v18++ = (int)a3.n128_f32[0];
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  v10 = v6 & 0x7FFFFFF8;
  v11 = v6 & 0xFFFFFFF8;
  v12 = *(float32x4_t **)(result + 1464);
  v13 = *(int16x4_t **)(result + 232);
  do
  {
    v14 = *v12;
    v15 = v12[1];
    v12 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v13)), v14, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v13->i8)), v15, v9)));
    *(__n128 *)v13->i8 = a3;
    v13 += 2;
    v11 -= 8;
  }
  while (v11);
  if (v10 != v6)
    goto LABEL_9;
LABEL_11:
  v20 = *(_QWORD *)(result + 248);
  v21 = *(_QWORD *)(result + 1480);
  if (v6 < 8)
  {
    v22 = 0;
LABEL_16:
    v28 = v6 - v22;
    v29 = (float *)(v21 + 4 * v22);
    v30 = (unsigned __int16 *)(v20 + 2 * v22);
    do
    {
      a3.n128_u16[0] = *v30;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v31 = *v29++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v31 * v9);
      *v30++ = (int)a3.n128_f32[0];
      --v28;
    }
    while (v28);
    goto LABEL_18;
  }
  v22 = v6 & 0x7FFFFFF8;
  v23 = v6 & 0xFFFFFFF8;
  v24 = *(float32x4_t **)(result + 1480);
  v25 = *(int16x4_t **)(result + 248);
  do
  {
    v26 = *v24;
    v27 = v24[1];
    v24 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v25)), v26, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v25->i8)), v27, v9)));
    *(__n128 *)v25->i8 = a3;
    v25 += 2;
    v23 -= 8;
  }
  while (v23);
  if (v22 != v6)
    goto LABEL_16;
LABEL_18:
  v32 = *(_QWORD *)(result + 240);
  v33 = *(_QWORD *)(result + 1472);
  if (v6 >= 8)
  {
    v34 = v6 & 0x7FFFFFF8;
    v35 = v6 & 0xFFFFFFF8;
    v36 = *(float32x4_t **)(result + 1472);
    v37 = *(int16x4_t **)(result + 240);
    do
    {
      v38 = *v36;
      v39 = v36[1];
      v36 += 2;
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v37)), v38, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v37->i8)), v39, v9)));
      *(__n128 *)v37->i8 = a3;
      v37 += 2;
      v35 -= 8;
    }
    while (v35);
    if (v34 == v6)
      goto LABEL_25;
  }
  else
  {
    v34 = 0;
  }
  v40 = v6 - v34;
  v41 = (float *)(v33 + 4 * v34);
  v42 = (unsigned __int16 *)(v32 + 2 * v34);
  do
  {
    a3.n128_u16[0] = *v42;
    a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
    v43 = *v41++;
    a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v43 * v9);
    *v42++ = (int)a3.n128_f32[0];
    --v40;
  }
  while (v40);
LABEL_25:
  v44 = *(_QWORD *)(result + 256);
  v45 = *(_QWORD *)(result + 1488);
  if (v6 < 8)
  {
    v46 = 0;
LABEL_30:
    v52 = v6 - v46;
    v53 = (float *)(v45 + 4 * v46);
    v54 = (unsigned __int16 *)(v44 + 2 * v46);
    do
    {
      a3.n128_u16[0] = *v54;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v55 = *v53++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v55 * v9);
      *v54++ = (int)a3.n128_f32[0];
      --v52;
    }
    while (v52);
    goto LABEL_32;
  }
  v46 = v6 & 0x7FFFFFF8;
  v47 = v6 & 0xFFFFFFF8;
  v48 = *(float32x4_t **)(result + 1488);
  v49 = *(int16x4_t **)(result + 256);
  do
  {
    v50 = *v48;
    v51 = v48[1];
    v48 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v49)), v50, v9)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v49->i8)), v51, v9)));
    *(__n128 *)v49->i8 = a3;
    v49 += 2;
    v47 -= 8;
  }
  while (v47);
  if (v46 != v6)
    goto LABEL_30;
LABEL_32:
  if (!v4)
  {
    v59 = (float)v5;
    goto LABEL_62;
  }
  v56 = v4 * v4;
  v57 = *(_QWORD *)(v3 + 264);
  v58 = *(_QWORD *)(v3 + 1496);
  v59 = (float)v5;
  if (v56 < 8)
  {
    v60 = 0;
LABEL_39:
    v66 = v56 - v60;
    v67 = (float *)(v58 + 4 * v60);
    v68 = (unsigned __int16 *)(v57 + 2 * v60);
    do
    {
      a3.n128_u16[0] = *v68;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v69 = *v67++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v69 * v59);
      *v68++ = (int)a3.n128_f32[0];
      --v66;
    }
    while (v66);
    goto LABEL_41;
  }
  v60 = v56 & 0x7FFFFFF8;
  v61 = v60;
  v62 = *(float32x4_t **)(v3 + 1496);
  v63 = *(int16x4_t **)(v3 + 264);
  do
  {
    v64 = *v62;
    v65 = v62[1];
    v62 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v63)), v64, v59)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v63->i8)), v65, v59)));
    *(__n128 *)v63->i8 = a3;
    v63 += 2;
    v61 -= 8;
  }
  while (v61);
  if (v60 != v56)
    goto LABEL_39;
LABEL_41:
  v70 = *(_QWORD *)(v3 + 280);
  v71 = *(_QWORD *)(v3 + 1512);
  if (v56 < 8)
  {
    v72 = 0;
LABEL_46:
    v78 = v56 - v72;
    v79 = (float *)(v71 + 4 * v72);
    v80 = (unsigned __int16 *)(v70 + 2 * v72);
    do
    {
      a3.n128_u16[0] = *v80;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v81 = *v79++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v81 * v59);
      *v80++ = (int)a3.n128_f32[0];
      --v78;
    }
    while (v78);
    goto LABEL_48;
  }
  v72 = v56 & 0x7FFFFFF8;
  v73 = v72;
  v74 = *(float32x4_t **)(v3 + 1512);
  v75 = *(int16x4_t **)(v3 + 280);
  do
  {
    v76 = *v74;
    v77 = v74[1];
    v74 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v75)), v76, v59)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v75->i8)), v77, v59)));
    *(__n128 *)v75->i8 = a3;
    v75 += 2;
    v73 -= 8;
  }
  while (v73);
  if (v72 != v56)
    goto LABEL_46;
LABEL_48:
  v82 = *(_QWORD *)(v3 + 272);
  v83 = *(_QWORD *)(v3 + 1504);
  if (v56 < 8)
  {
    v84 = 0;
LABEL_53:
    v90 = v56 - v84;
    v91 = (float *)(v83 + 4 * v84);
    v92 = (unsigned __int16 *)(v82 + 2 * v84);
    do
    {
      a3.n128_u16[0] = *v92;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v93 = *v91++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v93 * v59);
      *v92++ = (int)a3.n128_f32[0];
      --v90;
    }
    while (v90);
    goto LABEL_55;
  }
  v84 = v56 & 0x7FFFFFF8;
  v85 = v84;
  v86 = *(float32x4_t **)(v3 + 1504);
  v87 = *(int16x4_t **)(v3 + 272);
  do
  {
    v88 = *v86;
    v89 = v86[1];
    v86 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v87)), v88, v59)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v87->i8)), v89, v59)));
    *(__n128 *)v87->i8 = a3;
    v87 += 2;
    v85 -= 8;
  }
  while (v85);
  if (v84 != v56)
    goto LABEL_53;
LABEL_55:
  v94 = *(_QWORD *)(v3 + 288);
  v95 = *(_QWORD *)(v3 + 1520);
  if (v56 < 8)
  {
    v96 = 0;
LABEL_60:
    v102 = v56 - v96;
    v103 = (float *)(v95 + 4 * v96);
    v104 = (unsigned __int16 *)(v94 + 2 * v96);
    do
    {
      a3.n128_u16[0] = *v104;
      a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
      v105 = *v103++;
      a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v105 * v59);
      *v104++ = (int)a3.n128_f32[0];
      --v102;
    }
    while (v102);
    goto LABEL_62;
  }
  v96 = v56 & 0x7FFFFFF8;
  v97 = v96;
  v98 = *(float32x4_t **)(v3 + 1520);
  v99 = *(int16x4_t **)(v3 + 288);
  do
  {
    v100 = *v98;
    v101 = v98[1];
    v98 += 2;
    a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v99)), v100, v59)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v99->i8)), v101, v59)));
    *(__n128 *)v99->i8 = a3;
    v99 += 2;
    v97 -= 8;
  }
  while (v97);
  if (v96 != v56)
    goto LABEL_60;
LABEL_62:
  v106 = *(unsigned int *)(v3 + 52);
  if ((int)v106 < 1)
    return result;
  v107 = *(float32x4_t **)(v3 + 1528);
  v108 = *(int16x8_t **)(v3 + 296);
  if (v106 < 0x10)
  {
    v109 = 0;
LABEL_68:
    v119 = v106 - v109;
    v120 = &v108->i16[v109];
    v121 = &v107->f32[v109];
    do
    {
      v122 = *v121++;
      *v120++ += (int)(float)(v122 * v59);
      --v119;
    }
    while (v119);
    goto LABEL_70;
  }
  v109 = v106 & 0x7FFFFFF0;
  v110 = v107 + 2;
  v111 = v108 + 1;
  v112 = v106 & 0xFFFFFFF0;
  do
  {
    v114 = v110[-2];
    v113 = v110[-1];
    v116 = *v110;
    v115 = v110[1];
    v110 += 4;
    v117 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v114, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v113, v59)));
    v118 = vaddq_s16(*v111, vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v116, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v115, v59))));
    v111[-1] = vaddq_s16(v111[-1], v117);
    *v111 = v118;
    v111 += 2;
    v112 -= 16;
  }
  while (v112);
  if (v109 != v106)
    goto LABEL_68;
LABEL_70:
  v123 = *(float32x4_t **)(v3 + 1544);
  v124 = *(int16x8_t **)(v3 + 312);
  if (v106 < 0x10)
  {
    v125 = 0;
LABEL_75:
    v135 = v106 - v125;
    v136 = &v124->i16[v125];
    v137 = &v123->f32[v125];
    do
    {
      v138 = *v137++;
      *v136++ += (int)(float)(v138 * v59);
      --v135;
    }
    while (v135);
    goto LABEL_77;
  }
  v125 = v106 & 0x7FFFFFF0;
  v126 = v123 + 2;
  v127 = v124 + 1;
  v128 = v106 & 0xFFFFFFF0;
  do
  {
    v130 = v126[-2];
    v129 = v126[-1];
    v132 = *v126;
    v131 = v126[1];
    v126 += 4;
    v133 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v130, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v129, v59)));
    v134 = vaddq_s16(*v127, vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v132, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v131, v59))));
    v127[-1] = vaddq_s16(v127[-1], v133);
    *v127 = v134;
    v127 += 2;
    v128 -= 16;
  }
  while (v128);
  if (v125 != v106)
    goto LABEL_75;
LABEL_77:
  v139 = *(float32x4_t **)(v3 + 1536);
  v140 = *(int16x8_t **)(v3 + 304);
  if (v106 < 0x10)
  {
    v141 = 0;
LABEL_82:
    v151 = v106 - v141;
    v152 = &v140->i16[v141];
    v153 = &v139->f32[v141];
    do
    {
      v154 = *v153++;
      *v152++ += (int)(float)(v154 * v59);
      --v151;
    }
    while (v151);
    return result;
  }
  v141 = v106 & 0x7FFFFFF0;
  v142 = v139 + 2;
  v143 = v140 + 1;
  v144 = v106 & 0xFFFFFFF0;
  do
  {
    v146 = v142[-2];
    v145 = v142[-1];
    v148 = *v142;
    v147 = v142[1];
    v142 += 4;
    v149 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v146, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v145, v59)));
    v150 = vaddq_s16(*v143, vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v148, v59)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v147, v59))));
    v143[-1] = vaddq_s16(v143[-1], v149);
    *v143 = v150;
    v143 += 2;
    v144 -= 16;
  }
  while (v144);
  if (v141 != v106)
    goto LABEL_82;
  return result;
}

void sub_19C0FA728(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void **v6;
  int v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  int v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t v59;
  uint64_t v60;
  float *v61;
  float *v62;
  float *v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  float32x4_t *v75;
  float32x4_t *v76;
  int v77;
  float32x4_t *v78;
  float32x4_t *v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  BOOL v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  uint64_t v103;
  uint64_t v104;
  float32x4_t *v105;
  float32x4_t *v106;
  float32x4_t *v107;
  float32x4_t *v108;
  float32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  float *v112;
  float *v113;
  float *v114;
  float *v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  int16x4_t *v124;
  unint64_t v125;
  float32x4_t *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  int v132;
  BOOL v133;
  float32x4_t *v134;
  int16x4_t *v135;
  float32x4_t *v136;
  uint64_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int16x8_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  uint64_t v146;
  float *v147;
  __int16 *v148;
  float *v149;
  float v150;
  float v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  int16x4_t *v155;
  BOOL v156;
  uint64_t v157;
  float32x4_t *v158;
  int16x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  int16x8_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  uint64_t v170;
  float *v171;
  __int16 *v172;
  float *v173;
  float v174;
  float v175;
  int v176;
  unint64_t v177;
  int16x4_t *v178;
  BOOL v179;
  uint64_t v180;
  float32x4_t *v181;
  int16x4_t *v182;
  float32x4_t *v183;
  uint64_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  int16x8_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  uint64_t v193;
  float *v194;
  __int16 *v195;
  float *v196;
  float v197;
  float v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  float32x4_t *v202;
  float32x4_t *v203;
  float32x4_t *v204;
  float32x4_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  BOOL v213;
  BOOL v214;
  uint64_t v216;
  uint64_t v217;
  float32x4_t *v218;
  float32x4_t *v219;
  float32x4_t *v220;
  float32x4_t v221;
  uint64_t v222;
  float *v223;
  float *v224;
  float *v225;
  float v226;
  float v227;
  float v228;
  uint64_t v229;
  size_t v230;
  int v231;
  float32x4_t *v232;
  float32x4_t *v233;
  int v234;
  float32x4_t *v235;
  float32x4_t *v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  int v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  BOOL v255;
  BOOL v256;
  BOOL v257;
  BOOL v258;
  uint64_t v260;
  uint64_t v261;
  float32x4_t *v262;
  float32x4_t *v263;
  float32x4_t *v264;
  float32x4_t *v265;
  float32x4_t v266;
  uint64_t v267;
  float *v268;
  float *v269;
  float *v270;
  float *v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  float32x4_t *v283;
  float32x4_t *v284;
  int v285;
  float32x4_t *v286;
  float32x4_t *v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  BOOL v307;
  BOOL v308;
  BOOL v309;
  BOOL v310;
  uint64_t v312;
  uint64_t v313;
  float32x4_t *v314;
  float32x4_t *v315;
  float32x4_t *v316;
  float32x4_t *v317;
  float32x4_t v318;
  uint64_t v319;
  float *v320;
  float *v321;
  float *v322;
  float *v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  float32x4_t *v334;
  float32x4_t *v335;
  float32x4_t *v336;
  int v337;
  float32x4_t *v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  int v348;
  char *v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  BOOL v358;
  BOOL v359;
  BOOL v360;
  BOOL v361;
  uint64_t v363;
  uint64_t v364;
  float32x4_t *v365;
  float32x4_t *v366;
  float32x4_t *v367;
  float32x4_t *v368;
  float32x4_t v369;
  uint64_t v370;
  float *v371;
  float *v372;
  float *v373;
  float *v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  uint64_t v380;
  size_t v381;
  float32x4_t **v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  NSObject *global_queue;
  const void *v388;
  uint64_t v389;
  uint64_t v390;
  size_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  size_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  size_t v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  float32x4_t *v409;
  float32x4_t *v410;
  int v411;
  float32x4_t *v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  BOOL v426;
  BOOL v427;
  uint64_t v429;
  uint64_t v430;
  float32x4_t *v431;
  float32x4_t *v432;
  float32x4_t *v433;
  float32x4_t v434;
  uint64_t v435;
  float *v436;
  float *v437;
  float *v438;
  float v439;
  float v440;
  float v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  float32x4_t *v446;
  float32x4_t *v447;
  int v448;
  float32x4_t *v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  float32x4_t *v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t v462;
  BOOL v463;
  BOOL v464;
  uint64_t v466;
  uint64_t v467;
  float32x4_t *v468;
  float32x4_t *v469;
  float32x4_t *v470;
  float32x4_t v471;
  uint64_t v472;
  float *v473;
  float *v474;
  float *v475;
  float v476;
  float v477;
  float v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  int v482;
  uint64_t v483;
  NSObject *v484;
  int v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  _BYTE *v489;
  _BYTE *v490;
  size_t v491;
  void *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  size_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  __int128 *v502;
  _OWORD *v503;
  uint64_t v504;
  __int128 v505;
  uint64_t v506;
  uint64_t v507;
  _DWORD *v508;
  int *v509;
  int v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  NSObject *v514;
  const void *v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  size_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  size_t v524;
  uint64_t v525;
  int v526;
  int v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  uint64_t v533;
  float32x4_t *v534;
  float32x4_t *v535;
  int v536;
  float32x4_t *v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  float32x4_t v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  float32x4_t *v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  unint64_t v550;
  BOOL v551;
  BOOL v552;
  uint64_t v554;
  uint64_t v555;
  float32x4_t *v556;
  float32x4_t *v557;
  float32x4_t *v558;
  float32x4_t v559;
  uint64_t v560;
  float *v561;
  float *v562;
  float *v563;
  float v564;
  float v565;
  float v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  _BYTE *v571;
  _BYTE *v572;
  size_t v573;
  void *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  int v578;
  size_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  __int128 *v583;
  _OWORD *v584;
  uint64_t v585;
  __int128 v586;
  uint64_t v587;
  uint64_t v588;
  _DWORD *v589;
  int *v590;
  int v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  _BYTE *v595;
  _BYTE *v596;
  size_t v597;
  void *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  __int128 *v603;
  _OWORD *v604;
  uint64_t v605;
  __int128 v606;
  uint64_t v607;
  uint64_t v608;
  _DWORD *v609;
  int *v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  _BYTE *v615;
  _BYTE *v616;
  size_t v617;
  void *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  __int128 *v623;
  _OWORD *v624;
  uint64_t v625;
  __int128 v626;
  uint64_t v627;
  uint64_t v628;
  _DWORD *v629;
  int *v630;
  int v631;
  uint64_t v632;
  uint64_t v633;
  void **v634;
  int v636;
  void **v637;
  int v639;
  int v640;
  void **v641;
  void **v642;
  void **v643;
  float32x4_t **v644;
  void **v645;
  uint64_t v646;
  void **v647;
  float32x4_t **v648;
  _BOOL4 v650;
  int v651;
  int v652;
  int v653;
  const void *v654;
  const void *v655;
  const void *v656;
  const void *block;
  uint64_t v658;
  void (*v659)(uint64_t, uint64_t);
  void *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;

  v653 = a5 - 1;
  if (a5 >= 1)
  {
    v637 = (void **)(a1 + 1648);
    v6 = (void **)(a1 + 1656);
    v645 = (void **)(a1 + 1672);
    v647 = (void **)(a1 + 1640);
    v642 = (void **)(a1 + 1680);
    v643 = (void **)(a1 + 1664);
    v641 = (void **)(a1 + 1688);
    v7 = a5 - 1;
    v634 = (void **)(a1 + 1656);
    while (1)
    {
      v8 = v653 - v7;
      v640 = v7;
      if (*(_BYTE *)(a1 + 2672))
      {
        v9 = v8 < v653;
      }
      else
      {
        v8 = v7;
        v9 = v7 > 0;
      }
      v650 = v9;
      if (*(_BYTE *)(a1 + 2672))
        v10 = v8 > 0;
      else
        v10 = v8 < v653;
      if (*(_BYTE *)(a1 + 2672))
        v11 = v8 - 1;
      else
        v11 = v8 + 1;
      if (*(_BYTE *)(a1 + 2672))
        v12 = v8 + 1;
      else
        v12 = v8 - 1;
      v636 = v12;
      v13 = v8;
      memmove(*(void **)(*(_QWORD *)(a1 + 840) + 8 * v8), *(const void **)(*a4 + 8 * v8), 4 * *(int *)(a1 + 52));
      v14 = v13;
      v15 = 8 * v13;
      if (v10)
      {
        v16 = 8 * v11;
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 840) + v15), (uint64_t *)(*(_QWORD *)(a1 + 936) + v16), *(__int16 ***)(a1 + 2560), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 840) + v15), (uint64_t *)(*(_QWORD *)(a1 + 912) + v16), *(__int16 ***)(a1 + 2536), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 840) + v15), (uint64_t *)(*(_QWORD *)(a1 + 888) + v16), *(__int16 ***)(a1 + 2544), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 840) + v15), (uint64_t *)(*(_QWORD *)(a1 + 864) + v16), *(__int16 ***)(a1 + 2552), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0);
      }
      v639 = v11;
      block = *(const void **)(*(_QWORD *)(a1 + 352) + v15);
      v656 = *(const void **)(*(_QWORD *)(a1 + 376) + v15);
      v655 = *(const void **)(*(_QWORD *)(a1 + 424) + v15);
      v654 = *(const void **)(*(_QWORD *)(a1 + 400) + v15);
      v17 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + v15);
      v18 = *(float32x4_t **)(*(_QWORD *)(a1 + 496) + v15);
      sub_19C102BD8(v647, &v654, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C102BD8(v637, &v656, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C102BD8(v6, &block, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      sub_19C102E84(v645, &v655, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19C102BD8(v643, &v655, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      sub_19C102E84(v642, (const void **)(*(_QWORD *)(a1 + 88) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      sub_19C102BD8(v641, (const void **)(*(_QWORD *)(a1 + 88) + v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      v19 = *(_QWORD *)(a1 + 864);
      v20 = *(_QWORD *)(a1 + 840);
      v21 = *(int *)(a1 + 52);
      v22 = 4 * v21;
      bzero(*(void **)(v19 + v15), 4 * v21);
      v23 = (int)v21 / 8;
      if ((int)v21 >= 8)
      {
        v24 = *(float32x4_t **)(v19 + v15);
        v25 = *(float32x4_t **)(v20 + v15);
        v26 = (float32x4_t *)*v642;
        v27 = (int)v21 / 8;
        v28 = (float32x4_t *)*v647;
        do
        {
          v29 = *v28;
          v30 = v28[1];
          v28 += 2;
          v31 = *v26;
          v32 = v26[1];
          v26 += 2;
          v33 = vmulq_f32(v32, v30);
          v34 = vmulq_f32(v31, v29);
          v36 = *v25;
          v35 = v25[1];
          v25 += 2;
          v37 = vmlaq_f32(v24[1], v33, v35);
          *v24 = vmlaq_f32(*v24, v34, v36);
          v24[1] = v37;
          v24 += 2;
          --v27;
        }
        while (v27);
      }
      v38 = 8 * v23;
      if (8 * v23 < (int)v21)
      {
        v39 = (char *)*v647;
        v40 = *(_QWORD *)(v20 + v15);
        v41 = (char *)*v642;
        v42 = *(_QWORD *)(v19 + v15);
        v43 = v38;
        v44 = v21 - v38;
        if (v44 < 8)
          goto LABEL_46;
        v45 = 4 * v38;
        v46 = v42 + v45;
        v47 = v42 + v22;
        v48 = v42 + v45 >= (unint64_t)&v41[v22] || (unint64_t)&v41[v45] >= v47;
        v49 = !v48;
        v50 = v46 >= v40 + v22 || v40 + 4 * v43 >= v47;
        v51 = !v50;
        if ((unint64_t)&v39[v45] < v47 && v46 < (unint64_t)&v39[v22])
          goto LABEL_46;
        if (v49)
          goto LABEL_46;
        if (v51)
          goto LABEL_46;
        v53 = v44 - (v21 & 7) + v43;
        v54 = v43 + (v21 & 7) - v21;
        v55 = (float32x4_t *)(v42 + v45 + 16);
        v56 = (float32x4_t *)&v39[v45 + 16];
        v57 = (float32x4_t *)(v40 + v45 + 16);
        v58 = (float32x4_t *)&v41[v45 + 16];
        do
        {
          v59 = vmlaq_f32(*v55, vmulq_f32(*v58, *v56), *v57);
          v55[-1] = vmlaq_f32(v55[-1], vmulq_f32(v58[-1], v56[-1]), v57[-1]);
          *v55 = v59;
          v55 += 2;
          v56 += 2;
          v57 += 2;
          v58 += 2;
          v54 += 8;
        }
        while (v54);
        v43 = v53;
        if ((v21 & 7) != 0)
        {
LABEL_46:
          v60 = v21 - v43;
          v61 = (float *)(v42 + 4 * v43);
          v62 = (float *)(v40 + 4 * v43);
          v63 = (float *)&v41[4 * v43];
          v64 = (float *)&v39[4 * v43];
          do
          {
            v65 = *v64++;
            v66 = v65;
            v67 = *v63++;
            v68 = v67;
            v69 = *v62++;
            *v61 = *v61 + (float)((float)(v68 * v66) * v69);
            ++v61;
            --v60;
          }
          while (v60);
        }
      }
      v70 = *(_QWORD *)(a1 + 960);
      v71 = *(_QWORD *)(a1 + 840);
      v72 = *(int *)(a1 + 52);
      v73 = 4 * v72;
      bzero(*(void **)(v70 + 8 * v14), 4 * v72);
      v74 = (int)v72 / 8;
      if ((int)v72 >= 8)
      {
        v75 = *(float32x4_t **)(v70 + v15);
        v76 = *(float32x4_t **)(v71 + v15);
        v77 = (int)v72 / 8;
        v78 = v18;
        v79 = (float32x4_t *)*v641;
        do
        {
          v80 = *v79;
          v81 = v79[1];
          v79 += 2;
          v82 = *v78;
          v83 = v78[1];
          v78 += 2;
          v84 = vmulq_f32(v83, v81);
          v85 = vmulq_f32(v82, v80);
          v87 = *v76;
          v86 = v76[1];
          v76 += 2;
          v88 = vmlaq_f32(v75[1], v84, v86);
          *v75 = vmlaq_f32(*v75, v85, v87);
          v75[1] = v88;
          v75 += 2;
          --v77;
        }
        while (v77);
      }
      v89 = 8 * v74;
      if (8 * v74 < (int)v72)
      {
        v90 = *(_QWORD *)(v71 + v15);
        v91 = (char *)*v641;
        v92 = *(_QWORD *)(v70 + v15);
        v93 = v89;
        v94 = v72 - v89;
        if (v94 < 8)
          goto LABEL_75;
        v95 = 4 * v89;
        v96 = v92 + v95;
        v97 = v92 + v73;
        v98 = v92 + v95 >= (unint64_t)v18 + v73 || (unint64_t)v18 + v95 >= v97;
        v99 = !v98;
        v100 = v96 >= v90 + v73 || v90 + 4 * v93 >= v97;
        v101 = !v100;
        if ((unint64_t)&v91[v95] < v97 && v96 < (unint64_t)&v91[v73])
          goto LABEL_75;
        if (v99)
          goto LABEL_75;
        if (v101)
          goto LABEL_75;
        v103 = v94 - (v72 & 7) + v93;
        v104 = v93 + (v72 & 7) - v72;
        v105 = (float32x4_t *)(v92 + v95 + 16);
        v106 = (float32x4_t *)&v91[v95 + 16];
        v107 = (float32x4_t *)(v90 + v95 + 16);
        v108 = (float32x4_t *)((char *)v18 + v95 + 16);
        do
        {
          v109 = vmlaq_f32(*v105, vmulq_f32(*v108, *v106), *v107);
          v105[-1] = vmlaq_f32(v105[-1], vmulq_f32(v108[-1], v106[-1]), v107[-1]);
          *v105 = v109;
          v105 += 2;
          v106 += 2;
          v107 += 2;
          v108 += 2;
          v104 += 8;
        }
        while (v104);
        v93 = v103;
        if ((v72 & 7) != 0)
        {
LABEL_75:
          v110 = v72 - v93;
          v111 = 4 * v93;
          v112 = (float *)(v92 + v111);
          v113 = (float *)(v90 + v111);
          v114 = &v18->f32[(unint64_t)v111 / 4];
          v115 = (float *)&v91[v111];
          do
          {
            v116 = *v115++;
            v117 = v116;
            v118 = *v114++;
            v119 = v118;
            v120 = *v113++;
            *v112 = *v112 + (float)((float)(v119 * v117) * v120);
            ++v112;
            --v110;
          }
          while (v110);
        }
      }
      v121 = *(_QWORD *)(a1 + 960);
      v122 = *(unsigned int *)(a1 + 52);
      if ((int)v122 >= 1)
        break;
      v126 = v17;
      if (v10)
      {
        v129 = 8 * v639;
        v130 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + v129);
        v131 = (uint64_t *)(v121 + v129);
        v132 = -(-(int)v122 >> 3);
        v128 = v640;
        goto LABEL_124;
      }
      v128 = v640;
LABEL_144:
      v229 = *(_QWORD *)(a1 + 936);
      v230 = 4 * (int)v122;
      bzero(*(void **)(v229 + 8 * v14), v230);
      v231 = (int)v122 / 8;
      if ((int)v122 >= 8)
      {
        v232 = *(float32x4_t **)(v229 + v15);
        v233 = *(float32x4_t **)(v121 + v15);
        v234 = (int)v122 / 8;
        v235 = v126;
        v236 = (float32x4_t *)*v643;
        do
        {
          v237 = *v236;
          v238 = v236[1];
          v236 += 2;
          v239 = *v233;
          v240 = v233[1];
          v233 += 2;
          v241 = vmulq_f32(v240, v238);
          v242 = vmulq_f32(v239, v237);
          v244 = *v235;
          v243 = v235[1];
          v235 += 2;
          v245 = vmlaq_f32(v232[1], v241, v243);
          *v232 = vmlaq_f32(*v232, v242, v244);
          v232[1] = v245;
          v232 += 2;
          --v234;
        }
        while (v234);
      }
      v246 = 8 * v231;
      if (8 * v231 < (int)v122)
      {
        v247 = *(_QWORD *)(v121 + v15);
        v248 = (char *)*v643;
        v249 = *(_QWORD *)(v229 + v15);
        v250 = v246;
        v251 = (int)v122 - (uint64_t)v246;
        if (v251 < 8)
          goto LABEL_171;
        v252 = 4 * v246;
        v253 = v249 + v252;
        v254 = v249 + v230;
        v255 = v249 + v252 >= v247 + v230 || v247 + v252 >= v254;
        v256 = !v255;
        v257 = v253 >= (unint64_t)v126 + v230 || (unint64_t)v126->u64 + 4 * v250 >= v254;
        v258 = !v257;
        if ((unint64_t)&v248[v252] < v254 && v253 < (unint64_t)&v248[v230])
          goto LABEL_171;
        if (v256)
          goto LABEL_171;
        if (v258)
          goto LABEL_171;
        v260 = v251 - (v122 & 7) + v250;
        v261 = v250 + (v122 & 7) - (int)v122;
        v262 = (float32x4_t *)(v249 + v252 + 16);
        v263 = (float32x4_t *)&v248[v252 + 16];
        v264 = (float32x4_t *)((char *)v126 + v252 + 16);
        v265 = (float32x4_t *)(v247 + v252 + 16);
        do
        {
          v266 = vmlaq_f32(*v262, vmulq_f32(*v265, *v263), *v264);
          v262[-1] = vmlaq_f32(v262[-1], vmulq_f32(v265[-1], v263[-1]), v264[-1]);
          *v262 = v266;
          v262 += 2;
          v263 += 2;
          v264 += 2;
          v265 += 2;
          v261 += 8;
        }
        while (v261);
        v250 = v260;
        if ((v122 & 7) != 0)
        {
LABEL_171:
          v267 = (int)v122 - v250;
          v268 = (float *)(v249 + 4 * v250);
          v269 = &v126->f32[v250];
          v270 = (float *)(v247 + 4 * v250);
          v271 = (float *)&v248[4 * v250];
          do
          {
            v272 = *v271++;
            v273 = v272;
            v274 = *v270++;
            v275 = v274;
            v276 = *v269++;
            *v268 = *v268 + (float)((float)(v275 * v273) * v276);
            ++v268;
            --v267;
          }
          while (v267);
        }
      }
      if (v650)
      {
        v277 = *(_QWORD *)(a1 + 888);
        v278 = *(_QWORD *)(a1 + 960);
        v279 = *(_QWORD *)(a1 + 88);
        v280 = *(int *)(a1 + 52);
        v281 = 4 * v280;
        bzero(*(void **)(v277 + 8 * v14), 4 * v280);
        v282 = (int)v280 / 8;
        if ((int)v280 >= 8)
        {
          v283 = *(float32x4_t **)(v277 + v15);
          v284 = *(float32x4_t **)(v279 + 8 * v636);
          v285 = (int)v280 / 8;
          v286 = *(float32x4_t **)(v278 + v15);
          v287 = (float32x4_t *)*v637;
          do
          {
            v288 = *v287;
            v289 = v287[1];
            v287 += 2;
            v290 = *v286;
            v291 = v286[1];
            v286 += 2;
            v292 = vmulq_f32(v291, v289);
            v293 = vmulq_f32(v290, v288);
            v295 = *v284;
            v294 = v284[1];
            v284 += 2;
            v296 = vmlaq_f32(v283[1], v292, v294);
            *v283 = vmlaq_f32(*v283, v293, v295);
            v283[1] = v296;
            v283 += 2;
            --v285;
          }
          while (v285);
        }
        v297 = 8 * v282;
        if (8 * v282 < (int)v280)
        {
          v298 = *(_QWORD *)(v278 + v15);
          v299 = *(_QWORD *)(v279 + 8 * v636);
          v300 = (char *)*v637;
          v301 = *(_QWORD *)(v277 + v15);
          v302 = v297;
          v303 = v280 - v297;
          if (v303 < 8)
            goto LABEL_201;
          v304 = 4 * v297;
          v305 = v301 + v304;
          v306 = v301 + v281;
          v307 = v301 + v304 >= (unint64_t)(v298 + v281) || v298 + v304 >= v306;
          v308 = !v307;
          v309 = v305 >= v299 + v281 || v299 + 4 * v302 >= v306;
          v310 = !v309;
          if ((unint64_t)&v300[v304] < v306 && v305 < (unint64_t)&v300[v281])
            goto LABEL_201;
          if (v308)
            goto LABEL_201;
          if (v310)
            goto LABEL_201;
          v312 = v303 - (v280 & 7) + v302;
          v313 = v302 + (v280 & 7) - v280;
          v314 = (float32x4_t *)(v301 + v304 + 16);
          v315 = (float32x4_t *)&v300[v304 + 16];
          v316 = (float32x4_t *)(v299 + v304 + 16);
          v317 = (float32x4_t *)(v298 + v304 + 16);
          do
          {
            v318 = vmlaq_f32(*v314, vmulq_f32(*v317, *v315), *v316);
            v314[-1] = vmlaq_f32(v314[-1], vmulq_f32(v317[-1], v315[-1]), v316[-1]);
            *v314 = v318;
            v314 += 2;
            v315 += 2;
            v316 += 2;
            v317 += 2;
            v313 += 8;
          }
          while (v313);
          v302 = v312;
          if ((v280 & 7) != 0)
          {
LABEL_201:
            v319 = v280 - v302;
            v320 = (float *)(v301 + 4 * v302);
            v321 = (float *)(v299 + 4 * v302);
            v322 = (float *)(v298 + 4 * v302);
            v323 = (float *)&v300[4 * v302];
            do
            {
              v324 = *v323++;
              v325 = v324;
              v326 = *v322++;
              v327 = v326;
              v328 = *v321++;
              *v320 = *v320 + (float)((float)(v327 * v325) * v328);
              ++v320;
              --v319;
            }
            while (v319);
          }
        }
      }
      v329 = *(_QWORD *)(a1 + 912);
      v330 = *(_QWORD *)(a1 + 960);
      v331 = *(int *)(a1 + 52);
      v332 = 4 * v331;
      bzero(*(void **)(v329 + 8 * v14), 4 * v331);
      v333 = (int)v331 / 8;
      v6 = v634;
      if ((int)v331 >= 8)
      {
        v334 = *(float32x4_t **)(v329 + v15);
        v335 = (float32x4_t *)*v645;
        v336 = *(float32x4_t **)(v330 + v15);
        v337 = (int)v331 / 8;
        v338 = (float32x4_t *)*v634;
        do
        {
          v339 = *v338;
          v340 = v338[1];
          v338 += 2;
          v341 = *v336;
          v342 = v336[1];
          v336 += 2;
          v343 = vmulq_f32(v342, v340);
          v344 = vmulq_f32(v341, v339);
          v346 = *v335;
          v345 = v335[1];
          v335 += 2;
          v347 = vmlaq_f32(v334[1], v343, v345);
          *v334 = vmlaq_f32(*v334, v344, v346);
          v334[1] = v347;
          v334 += 2;
          --v337;
        }
        while (v337);
      }
      v348 = 8 * v333;
      if (8 * v333 < (int)v331)
      {
        v349 = (char *)*v634;
        v350 = *(_QWORD *)(v330 + v15);
        v351 = (char *)*v645;
        v352 = *(_QWORD *)(v329 + v15);
        v353 = v348;
        v354 = v331 - v348;
        if (v354 < 8)
          goto LABEL_230;
        v355 = 4 * v348;
        v356 = v352 + v355;
        v357 = v352 + v332;
        v358 = v352 + v355 >= (unint64_t)(v350 + v332) || v350 + v355 >= v357;
        v359 = !v358;
        v360 = v356 >= (unint64_t)&v351[v332] || (unint64_t)&v351[4 * v353] >= v357;
        v361 = !v360;
        if ((unint64_t)&v349[v355] < v357 && v356 < (unint64_t)&v349[v332])
          goto LABEL_230;
        if (v359)
          goto LABEL_230;
        if (v361)
          goto LABEL_230;
        v363 = v354 - (v331 & 7) + v353;
        v364 = v353 + (v331 & 7) - v331;
        v365 = (float32x4_t *)(v352 + v355 + 16);
        v366 = (float32x4_t *)&v349[v355 + 16];
        v367 = (float32x4_t *)&v351[v355 + 16];
        v368 = (float32x4_t *)(v350 + v355 + 16);
        do
        {
          v369 = vmlaq_f32(*v365, vmulq_f32(*v368, *v366), *v367);
          v365[-1] = vmlaq_f32(v365[-1], vmulq_f32(v368[-1], v366[-1]), v367[-1]);
          *v365 = v369;
          v365 += 2;
          v366 += 2;
          v367 += 2;
          v368 += 2;
          v364 += 8;
        }
        while (v364);
        v353 = v363;
        if ((v331 & 7) != 0)
        {
LABEL_230:
          v370 = v331 - v353;
          v371 = (float *)(v352 + 4 * v353);
          v372 = (float *)&v351[4 * v353];
          v373 = (float *)(v350 + 4 * v353);
          v374 = (float *)&v349[4 * v353];
          do
          {
            v375 = *v374++;
            v376 = v375;
            v377 = *v373++;
            v378 = v377;
            v379 = *v372++;
            *v371 = *v371 + (float)((float)(v378 * v376) * v379);
            ++v371;
            --v370;
          }
          while (v370);
        }
      }
      if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 816) + v15), 4 * *(int *)(a1 + 48));
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 816) + v15), (uint64_t *)(*(_QWORD *)(a1 + 912) + v15), *(__int16 ***)(a1 + 2504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0.0);
        if (v650)
          sub_19C1032B4((void **)(*(_QWORD *)(a1 + 816) + v15), (uint64_t *)(*(_QWORD *)(a1 + 888) + v15), *(__int16 ***)(a1 + 2512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 816) + v15), (uint64_t *)(*(_QWORD *)(a1 + 864) + v15), *(__int16 ***)(a1 + 2520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 816) + v15), (uint64_t *)(*(_QWORD *)(a1 + 936) + v15), *(__int16 ***)(a1 + 2528), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0);
      }
      v7 = v128 - 1;
      if (v128 <= 0)
        goto LABEL_235;
    }
    v123 = *(_QWORD *)(*(_QWORD *)(a1 + 864) + v15);
    v124 = **(int16x4_t ***)(a1 + 2584);
    v125 = *(_QWORD *)(v121 + v15);
    v126 = v17;
    if (v122 >= 0x10)
    {
      v133 = v125 >= v123 + 4 * v122 || v123 >= v125 + 4 * v122;
      v128 = v640;
      if (v133)
      {
        v127 = v122 & 0x7FFFFFF0;
        v134 = (float32x4_t *)(v123 + 32);
        v135 = v124 + 2;
        v136 = (float32x4_t *)(v125 + 32);
        v137 = v122 & 0xFFFFFFF0;
        do
        {
          v138 = v134[-2];
          v139 = v134[-1];
          v140 = *v134;
          v141 = v134[1];
          v134 += 4;
          v142 = *(int16x8_t *)v135[-2].i8;
          v143 = vmlaq_f32(v136[-1], v139, vcvtq_f32_s32(vmovl_high_s16(v142)));
          v144 = vmlaq_f32(*v136, v140, vcvtq_f32_s32(vmovl_s16(*v135)));
          v145 = vmlaq_f32(v136[1], v141, vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v135->i8)));
          v136[-2] = vmlaq_f32(v136[-2], v138, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v142.i8)));
          v136[-1] = v143;
          *v136 = v144;
          v136[1] = v145;
          v136 += 4;
          v135 += 4;
          v137 -= 16;
        }
        while (v137);
        if (v127 == v122)
        {
LABEL_94:
          if (!v10)
            goto LABEL_143;
          v153 = 8 * v639;
          v130 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + v153);
          v154 = *(_QWORD *)(*(_QWORD *)(a1 + 888) + v153);
          v155 = **(int16x4_t ***)(a1 + 2576);
          if (v122 >= 0x10
            && (v125 < v154 + 4 * v122 ? (v156 = v154 >= v125 + 4 * v122) : (v156 = 1), v156))
          {
            v157 = v122 & 0x7FFFFFF0;
            v158 = (float32x4_t *)(v154 + 32);
            v159 = v155 + 2;
            v160 = (float32x4_t *)(v125 + 32);
            v161 = v122 & 0xFFFFFFF0;
            do
            {
              v162 = v158[-2];
              v163 = v158[-1];
              v164 = *v158;
              v165 = v158[1];
              v158 += 4;
              v166 = *(int16x8_t *)v159[-2].i8;
              v167 = vmlaq_f32(v160[-1], v163, vcvtq_f32_s32(vmovl_high_s16(v166)));
              v168 = vmlaq_f32(*v160, v164, vcvtq_f32_s32(vmovl_s16(*v159)));
              v169 = vmlaq_f32(v160[1], v165, vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v159->i8)));
              v160[-2] = vmlaq_f32(v160[-2], v162, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v166.i8)));
              v160[-1] = v167;
              *v160 = v168;
              v160[1] = v169;
              v160 += 4;
              v159 += 4;
              v161 -= 16;
            }
            while (v161);
            if (v157 == v122)
              goto LABEL_108;
          }
          else
          {
            v157 = 0;
          }
          v170 = v122 - v157;
          v171 = (float *)(v125 + 4 * v157);
          v172 = (__int16 *)v155 + v157;
          v173 = (float *)(v154 + 4 * v157);
          do
          {
            v174 = *v173++;
            v175 = v174;
            v176 = *v172++;
            *v171 = *v171 + (float)(v175 * (float)v176);
            ++v171;
            --v170;
          }
          while (v170);
LABEL_108:
          v177 = *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8 * v639);
          v178 = **(int16x4_t ***)(a1 + 2568);
          if (v122 >= 0x10
            && (v125 < v177 + 4 * v122 ? (v179 = v177 >= v125 + 4 * v122) : (v179 = 1), v179))
          {
            v180 = v122 & 0x7FFFFFF0;
            v181 = (float32x4_t *)(v177 + 32);
            v182 = v178 + 2;
            v183 = (float32x4_t *)(v125 + 32);
            v184 = v122 & 0xFFFFFFF0;
            do
            {
              v185 = v181[-2];
              v186 = v181[-1];
              v187 = *v181;
              v188 = v181[1];
              v181 += 4;
              v189 = *(int16x8_t *)v182[-2].i8;
              v190 = vmlaq_f32(v183[-1], v186, vcvtq_f32_s32(vmovl_high_s16(v189)));
              v191 = vmlaq_f32(*v183, v187, vcvtq_f32_s32(vmovl_s16(*v182)));
              v192 = vmlaq_f32(v183[1], v188, vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v182->i8)));
              v183[-2] = vmlaq_f32(v183[-2], v185, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v189.i8)));
              v183[-1] = v190;
              *v183 = v191;
              v183[1] = v192;
              v183 += 4;
              v182 += 4;
              v184 -= 16;
            }
            while (v184);
            if (v180 == v122)
              goto LABEL_121;
          }
          else
          {
            v180 = 0;
          }
          v193 = v122 - v180;
          v194 = (float *)(v125 + 4 * v180);
          v195 = (__int16 *)v178 + v180;
          v196 = (float *)(v177 + 4 * v180);
          do
          {
            v197 = *v196++;
            v198 = v197;
            v199 = *v195++;
            *v194 = *v194 + (float)(v198 * (float)v199);
            ++v194;
            --v193;
          }
          while (v193);
LABEL_121:
          v131 = (uint64_t *)(v121 + 8 * v639);
          v132 = (int)v122 >> 3;
          if ((int)v122 > 7)
          {
            v200 = 0;
            v201 = *v131;
            do
            {
              v202 = (float32x4_t *)(v125 + 32 * v200);
              v203 = (float32x4_t *)(v130 + 32 * v200);
              v204 = (float32x4_t *)(v201 + 32 * v200);
              v205 = vmlaq_f32(v202[1], v203[1], v204[1]);
              *v202 = vmlaq_f32(*v202, *v203, *v204);
              v202[1] = v205;
              ++v200;
            }
            while (v132 != (_DWORD)v200);
          }
LABEL_124:
          v206 = 8 * v132;
          if (8 * v132 < (int)v122)
          {
            v207 = *v131;
            v208 = *(_QWORD *)(v121 + 8 * v14);
            v209 = v206;
            v210 = (int)v122 - (uint64_t)v206;
            if (v210 < 8)
              goto LABEL_141;
            v211 = 4 * v206;
            v212 = v208 + 4 * (int)v122;
            v213 = v208 + v211 >= (unint64_t)(v130 + 4 * (int)v122) || v130 + 4 * v206 >= v212;
            v214 = !v213;
            if (v207 + v211 < v212 && v208 + v211 < (unint64_t)(v207 + 4 * (int)v122))
              goto LABEL_141;
            if (v214)
              goto LABEL_141;
            v216 = v210 - (v122 & 7) + v209;
            v217 = v209 + (v122 & 7) - (int)v122;
            v218 = (float32x4_t *)(v208 + v211 + 16);
            v219 = (float32x4_t *)(v207 + v211 + 16);
            v220 = (float32x4_t *)(v130 + v211 + 16);
            do
            {
              v221 = vmlaq_f32(*v218, *v220, *v219);
              v218[-1] = vmlaq_f32(v218[-1], v220[-1], v219[-1]);
              *v218 = v221;
              v218 += 2;
              v219 += 2;
              v220 += 2;
              v217 += 8;
            }
            while (v217);
            v209 = v216;
            if ((v122 & 7) != 0)
            {
LABEL_141:
              v222 = (int)v122 - v209;
              v223 = (float *)(v208 + 4 * v209);
              v224 = (float *)(v130 + 4 * v209);
              v225 = (float *)(v207 + 4 * v209);
              do
              {
                v226 = *v225++;
                v227 = v226;
                v228 = *v224++;
                *v223 = *v223 + (float)(v228 * v227);
                ++v223;
                --v222;
              }
              while (v222);
            }
          }
LABEL_143:
          LODWORD(v122) = *(_DWORD *)(a1 + 52);
          v121 = *(_QWORD *)(a1 + 960);
          goto LABEL_144;
        }
      }
      else
      {
        v127 = 0;
      }
    }
    else
    {
      v127 = 0;
      v128 = v640;
    }
    v146 = v122 - v127;
    v147 = (float *)(v125 + 4 * v127);
    v148 = (__int16 *)v124 + v127;
    v149 = (float *)(v123 + 4 * v127);
    do
    {
      v150 = *v149++;
      v151 = v150;
      v152 = *v148++;
      *v147 = *v147 + (float)(v151 * (float)v152);
      ++v147;
      --v146;
    }
    while (v146);
    goto LABEL_94;
  }
LABEL_235:
  v380 = *(unsigned int *)(a1 + 52);
  if ((int)v380 > 0)
  {
    v381 = 4 * v380;
    bzero(*(void **)(a1 + 1528), 4 * v380);
    v382 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v381);
    v648 = (float32x4_t **)(a1 + 1544);
    bzero(*(void **)(a1 + 1544), v381);
    if (*(int *)(a1 + 56) <= 0)
      goto LABEL_238;
    goto LABEL_237;
  }
  v382 = (float32x4_t **)(a1 + 1536);
  v648 = (float32x4_t **)(a1 + 1544);
  if (*(int *)(a1 + 56) > 0)
  {
LABEL_237:
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
LABEL_238:
  if (a5 > 1)
  {
    v383 = (a5 - 2);
    v384 = 1;
    v644 = v382;
    do
    {
      while (1)
      {
        v401 = v653 - v384;
        v651 = v384;
        if (!*(_BYTE *)(a1 + 2672))
          v401 = v384;
        v402 = v401;
        if (*(_BYTE *)(a1 + 2672))
          v403 = v383;
        else
          v403 = 1;
        if (*(_BYTE *)(a1 + 2672))
          v404 = v402 + 1;
        else
          v404 = v402 - 1;
        v405 = *(_QWORD *)(a1 + 912);
        v406 = *(_QWORD *)(a1 + 88);
        v407 = *(int *)(a1 + 52);
        v408 = (int)v407 / 8;
        if ((int)v407 >= 8)
        {
          v409 = *(float32x4_t **)(a1 + 1528);
          v410 = *(float32x4_t **)(v406 + 8 * v404);
          v411 = (int)v407 / 8;
          v412 = *(float32x4_t **)(v405 + 8 * v402);
          do
          {
            v414 = *v412;
            v413 = v412[1];
            v412 += 2;
            v416 = *v410;
            v415 = v410[1];
            v410 += 2;
            v417 = vmlaq_f32(v409[1], v415, v413);
            *v409 = vmlaq_f32(*v409, v416, v414);
            v409[1] = v417;
            v409 += 2;
            --v411;
          }
          while (v411);
        }
        v418 = 8 * v408;
        if (8 * v408 < (int)v407)
        {
          v419 = *(_QWORD *)(v405 + 8 * v402);
          v420 = *(_QWORD *)(v406 + 8 * v404);
          v421 = *(_QWORD *)(a1 + 1528);
          v422 = v418;
          v423 = v407 - v418;
          if (v423 < 8)
            goto LABEL_269;
          v424 = 4 * v418;
          v425 = v421 + 4 * v407;
          v426 = v421 + v424 >= (unint64_t)(v420 + 4 * v407) || v420 + 4 * v418 >= v425;
          v427 = !v426;
          if (v419 + v424 < v425 && v421 + v424 < (unint64_t)(v419 + 4 * v407))
            goto LABEL_269;
          if (v427)
            goto LABEL_269;
          v429 = v423 - (v407 & 7) + v422;
          v430 = v422 + (v407 & 7) - v407;
          v431 = (float32x4_t *)(v421 + v424 + 16);
          v432 = (float32x4_t *)(v419 + v424 + 16);
          v433 = (float32x4_t *)(v420 + v424 + 16);
          do
          {
            v434 = vmlaq_f32(*v431, *v433, *v432);
            v431[-1] = vmlaq_f32(v431[-1], v433[-1], v432[-1]);
            *v431 = v434;
            v431 += 2;
            v432 += 2;
            v433 += 2;
            v430 += 8;
          }
          while (v430);
          v422 = v429;
          if ((v407 & 7) != 0)
          {
LABEL_269:
            v435 = v407 - v422;
            v436 = (float *)(v421 + 4 * v422);
            v437 = (float *)(v420 + 4 * v422);
            v438 = (float *)(v419 + 4 * v422);
            do
            {
              v439 = *v438++;
              v440 = v439;
              v441 = *v437++;
              *v436 = *v436 + (float)(v441 * v440);
              ++v436;
              --v435;
            }
            while (v435);
          }
        }
        v442 = *(_QWORD *)(a1 + 888);
        v443 = *(_QWORD *)(a1 + 88);
        v444 = *(int *)(a1 + 52);
        v445 = (int)v444 / 8;
        if ((int)v444 >= 8)
        {
          v446 = *v382;
          v447 = *(float32x4_t **)(v443 + 8 * v404);
          v448 = (int)v444 / 8;
          v449 = *(float32x4_t **)(v442 + 8 * v402);
          do
          {
            v451 = *v449;
            v450 = v449[1];
            v449 += 2;
            v453 = *v447;
            v452 = v447[1];
            v447 += 2;
            v454 = vmlaq_f32(v446[1], v452, v450);
            *v446 = vmlaq_f32(*v446, v453, v451);
            v446[1] = v454;
            v446 += 2;
            --v448;
          }
          while (v448);
        }
        v455 = 8 * v445;
        if (8 * v445 < (int)v444)
        {
          v456 = *(_QWORD *)(v442 + 8 * v402);
          v457 = *(_QWORD *)(v443 + 8 * v404);
          v458 = *v382;
          v459 = v455;
          v460 = v444 - v455;
          if (v460 < 8)
            goto LABEL_291;
          v461 = 4 * v455;
          v462 = (unint64_t)v458->u64 + 4 * v444;
          v463 = (unint64_t)v458 + v461 >= v457 + 4 * v444 || v457 + 4 * v455 >= v462;
          v464 = !v463;
          if (v456 + v461 < v462 && (unint64_t)v458 + v461 < v456 + 4 * v444)
            goto LABEL_291;
          if (v464)
            goto LABEL_291;
          v466 = v460 - (v444 & 7) + v459;
          v467 = v459 + (v444 & 7) - v444;
          v468 = (float32x4_t *)((char *)v458 + v461 + 16);
          v469 = (float32x4_t *)(v456 + v461 + 16);
          v470 = (float32x4_t *)(v457 + v461 + 16);
          do
          {
            v471 = vmlaq_f32(*v468, *v470, *v469);
            v468[-1] = vmlaq_f32(v468[-1], v470[-1], v469[-1]);
            *v468 = v471;
            v468 += 2;
            v469 += 2;
            v470 += 2;
            v467 += 8;
          }
          while (v467);
          v459 = v466;
          if ((v444 & 7) != 0)
          {
LABEL_291:
            v472 = v444 - v459;
            v473 = &v458->f32[v459];
            v474 = (float *)(v457 + 4 * v459);
            v475 = (float *)(v456 + 4 * v459);
            do
            {
              v476 = *v475++;
              v477 = v476;
              v478 = *v474++;
              *v473 = *v473 + (float)(v478 * v477);
              ++v473;
              --v472;
            }
            while (v472);
          }
        }
        v479 = *(_QWORD *)(a1 + 912) + 8 * v402;
        v480 = *(_QWORD *)(a1 + 112) + 8 * v404;
        v481 = *(_DWORD *)(a1 + 52);
        if ((_DWORD)v402 == v403)
          break;
        v646 = v402;
        v385 = v383;
        v386 = *(_QWORD *)(a1 + 1496);
        global_queue = dispatch_get_global_queue(0, 0);
        v388 = (const void *)MEMORY[0x1E0C809B0];
        block = (const void *)MEMORY[0x1E0C809B0];
        v658 = 0x40000000;
        v659 = sub_19C103680;
        v660 = &unk_1E3D25490;
        v664 = v481;
        v661 = v386;
        v662 = v479;
        v383 = v385;
        v663 = v480;
        dispatch_apply(v481, global_queue, &block);
        v389 = *(_QWORD *)(a1 + 888) + 8 * v646;
        v390 = *(_QWORD *)(a1 + 112) + 8 * v404;
        v391 = *(int *)(a1 + 52);
        v392 = *(_QWORD *)(a1 + 1504);
        block = v388;
        v658 = 0x40000000;
        v659 = sub_19C103680;
        v660 = &unk_1E3D25490;
        v664 = v391;
        v661 = v392;
        v662 = v389;
        v663 = v390;
        dispatch_apply(v391, global_queue, &block);
        v393 = *(_QWORD *)(a1 + 864) + 8 * v646;
        v394 = *(_QWORD *)(a1 + 112) + 8 * v404;
        v395 = *(int *)(a1 + 52);
        v396 = *(_QWORD *)(a1 + 1512);
        block = v388;
        v658 = 0x40000000;
        v659 = sub_19C103680;
        v660 = &unk_1E3D25490;
        v664 = v395;
        v661 = v396;
        v662 = v393;
        v663 = v394;
        dispatch_apply(v395, global_queue, &block);
        v397 = *(_QWORD *)(a1 + 936) + 8 * v646;
        v398 = *(_QWORD *)(a1 + 112) + 8 * v404;
        v399 = *(int *)(a1 + 52);
        v400 = *(_QWORD *)(a1 + 1520);
        block = v388;
        v382 = v644;
        v658 = 0x40000000;
        v659 = sub_19C103680;
        v660 = &unk_1E3D25490;
        v664 = v399;
        v661 = v400;
        v662 = v397;
        v663 = v398;
        dispatch_apply(v399, global_queue, &block);
        v384 = v651 + 1;
        if (v651 + 1 == a5)
          goto LABEL_295;
      }
      bzero(*(void **)(a1 + 1496), 4 * (v481 * v481));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1504), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1512), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      bzero(*(void **)(a1 + 1520), 4 * (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52)));
      cblas_sger_NEWLAPACK();
      v384 = v651 + 1;
    }
    while (v651 + 1 != a5);
LABEL_295:
    v482 = 1;
    while (1)
    {
      if (*(_BYTE *)(a1 + 2672))
        v485 = v653 - v482;
      else
        v485 = v482;
      if (*(_BYTE *)(a1 + 2672))
        v486 = v383;
      else
        v486 = 1;
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        v494 = 8 * v485;
        v495 = *(_QWORD *)(a1 + 888) + v494;
        v496 = *(_QWORD *)(a1 + 64) + v494;
        v497 = *(_DWORD *)(a1 + 48);
        v498 = *(int *)(a1 + 52);
        if (v485 == v486)
        {
          bzero(*(void **)(a1 + 1472), 4 * v497 * (int)v498);
          cblas_sger_NEWLAPACK();
        }
        else
        {
          v483 = *(_QWORD *)(a1 + 1472);
          v484 = dispatch_get_global_queue(0, 0);
          block = (const void *)MEMORY[0x1E0C809B0];
          v658 = 0x40000000;
          v659 = sub_19C103680;
          v660 = &unk_1E3D25490;
          v664 = v497;
          v661 = v483;
          v662 = v495;
          v663 = v496;
          dispatch_apply(v498, v484, &block);
        }
        goto LABEL_297;
      }
      v487 = *(_QWORD *)(a1 + 888);
      v488 = *(_QWORD *)(a1 + 208) + 24 * v485;
      v490 = *(_BYTE **)v488;
      v489 = *(_BYTE **)(v488 + 8);
      v491 = v489 - v490;
      if (v489 == v490)
        break;
      if ((v491 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v492 = operator new(v489 - v490);
      memcpy(v492, v490, v491);
      v493 = *(unsigned int *)(a1 + 52);
      if ((int)v493 >= 1)
        goto LABEL_314;
LABEL_321:
      if (*(int *)(a1 + 1116) >= 1)
      {
        v511 = 0;
        v512 = *(_QWORD *)(a1 + 1152);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v512 + 24 * *(int *)(a1 + 1120)) + 4 * v511) = *((_DWORD *)v492 + v511);
          ++v511;
        }
        while (v511 < *(int *)(a1 + 1116));
        ++*(_DWORD *)(a1 + 1120);
LABEL_326:
        operator delete(v492);
        goto LABEL_297;
      }
      ++*(_DWORD *)(a1 + 1120);
      if (v492)
        goto LABEL_326;
LABEL_297:
      if (++v482 == a5)
        goto LABEL_327;
    }
    v492 = 0;
    v493 = *(unsigned int *)(a1 + 52);
    if ((int)v493 < 1)
      goto LABEL_321;
LABEL_314:
    v499 = 0;
    v500 = *(_QWORD *)(v487 + 8 * v485);
    v501 = *(_QWORD *)(*(_QWORD *)(a1 + 1128) + 8 * *(int *)(a1 + 1120));
    if (v493 < 8)
      goto LABEL_319;
    if ((unint64_t)(v501 - v500) < 0x20)
      goto LABEL_319;
    v499 = v493 & 0x7FFFFFF8;
    v502 = (__int128 *)(v500 + 16);
    v503 = (_OWORD *)(v501 + 16);
    v504 = v493 & 0xFFFFFFF8;
    do
    {
      v505 = *v502;
      *(v503 - 1) = *(v502 - 1);
      *v503 = v505;
      v502 += 2;
      v503 += 2;
      v504 -= 8;
    }
    while (v504);
    if (v499 != v493)
    {
LABEL_319:
      v506 = v493 - v499;
      v507 = 4 * v499;
      v508 = (_DWORD *)(v501 + 4 * v499);
      v509 = (int *)(v500 + v507);
      do
      {
        v510 = *v509++;
        *v508++ = v510;
        --v506;
      }
      while (v506);
    }
    goto LABEL_321;
  }
LABEL_327:
  if (a5 >= 1)
  {
    v652 = 0;
    while (1)
    {
      v526 = v653 - v652;
      if (*(_BYTE *)(a1 + 2672))
      {
        v527 = v653;
      }
      else
      {
        v526 = v652;
        v527 = 0;
      }
      v528 = v526;
      v529 = *(_QWORD *)(a1 + 864);
      v530 = *(_QWORD *)(a1 + 88);
      v531 = *(int *)(a1 + 52);
      v532 = (int)v531 / 8;
      v533 = 8 * v528;
      if ((int)v531 >= 8)
      {
        v534 = *v648;
        v535 = *(float32x4_t **)(v530 + 8 * v528);
        v536 = (int)v531 / 8;
        v537 = *(float32x4_t **)(v529 + 8 * v528);
        do
        {
          v539 = *v537;
          v538 = v537[1];
          v537 += 2;
          v541 = *v535;
          v540 = v535[1];
          v535 += 2;
          v542 = vmlaq_f32(v534[1], v540, v538);
          *v534 = vmlaq_f32(*v534, v541, v539);
          v534[1] = v542;
          v534 += 2;
          --v536;
        }
        while (v536);
      }
      v543 = 8 * v532;
      if (8 * v532 < (int)v531)
      {
        v544 = *(_QWORD *)(v529 + 8 * v528);
        v545 = *(_QWORD *)(v530 + 8 * v528);
        v546 = *v648;
        v547 = v543;
        v548 = v531 - v543;
        if (v548 < 8)
          goto LABEL_354;
        v549 = 4 * v543;
        v550 = (unint64_t)v546->u64 + 4 * v531;
        v551 = (unint64_t)v546 + v549 >= v545 + 4 * v531 || v545 + 4 * v543 >= v550;
        v552 = !v551;
        if (v544 + v549 < v550 && (unint64_t)v546 + v549 < v544 + 4 * v531)
          goto LABEL_354;
        if (v552)
          goto LABEL_354;
        v554 = v548 - (v531 & 7) + v547;
        v555 = v547 + (v531 & 7) - v531;
        v556 = (float32x4_t *)((char *)v546 + v549 + 16);
        v557 = (float32x4_t *)(v544 + v549 + 16);
        v558 = (float32x4_t *)(v545 + v549 + 16);
        do
        {
          v559 = vmlaq_f32(*v556, *v558, *v557);
          v556[-1] = vmlaq_f32(v556[-1], v558[-1], v557[-1]);
          *v556 = v559;
          v556 += 2;
          v557 += 2;
          v558 += 2;
          v555 += 8;
        }
        while (v555);
        v547 = v554;
        if ((v531 & 7) != 0)
        {
LABEL_354:
          v560 = v531 - v547;
          v561 = &v546->f32[v547];
          v562 = (float *)(v545 + 4 * v547);
          v563 = (float *)(v544 + 4 * v547);
          do
          {
            v564 = *v563++;
            v565 = v564;
            v566 = *v562++;
            *v561 = *v561 + (float)(v566 * v565);
            ++v561;
            --v560;
          }
          while (v560);
        }
      }
      if (a3[1] == *a3)
      {
        v567 = *(_QWORD *)(a1 + 912);
LABEL_363:
        v576 = v567 + v533;
        v577 = *(_QWORD *)(a1 + 64) + v533;
        v578 = *(_DWORD *)(a1 + 48);
        v579 = *(int *)(a1 + 52);
        if ((_DWORD)v528 == v527)
        {
          bzero(*(void **)(a1 + 1464), 4 * v578 * (int)v579);
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1480), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
          bzero(*(void **)(a1 + 1488), 4 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
          cblas_sger_NEWLAPACK();
        }
        else
        {
          v513 = *(_QWORD *)(a1 + 1464);
          v514 = dispatch_get_global_queue(0, 0);
          v515 = (const void *)MEMORY[0x1E0C809B0];
          block = (const void *)MEMORY[0x1E0C809B0];
          v658 = 0x40000000;
          v659 = sub_19C103680;
          v660 = &unk_1E3D25490;
          v664 = v578;
          v661 = v513;
          v662 = v576;
          v663 = v577;
          dispatch_apply(v579, v514, &block);
          v516 = *(_QWORD *)(a1 + 864) + v533;
          v517 = *(_QWORD *)(a1 + 64) + v533;
          v518 = *(_DWORD *)(a1 + 48);
          v519 = *(int *)(a1 + 52);
          v520 = *(_QWORD *)(a1 + 1480);
          block = v515;
          v658 = 0x40000000;
          v659 = sub_19C103680;
          v660 = &unk_1E3D25490;
          v664 = v518;
          v661 = v520;
          v662 = v516;
          v663 = v517;
          dispatch_apply(v519, v514, &block);
          v521 = *(_QWORD *)(a1 + 936) + v533;
          v522 = *(_QWORD *)(a1 + 64) + v533;
          v523 = *(_DWORD *)(a1 + 48);
          v524 = *(int *)(a1 + 52);
          v525 = *(_QWORD *)(a1 + 1488);
          block = v515;
          v658 = 0x40000000;
          v659 = sub_19C103680;
          v660 = &unk_1E3D25490;
          v664 = v523;
          v661 = v525;
          v662 = v521;
          v663 = v522;
          dispatch_apply(v524, v514, &block);
        }
        goto LABEL_330;
      }
      v567 = *(_QWORD *)(a1 + 912);
      if (*(int *)(a1 + 56) < 1)
        goto LABEL_363;
      v568 = *(_QWORD *)(a1 + 208);
      v569 = 24 * v528;
      v570 = v568 + 24 * v528;
      v572 = *(_BYTE **)v570;
      v571 = *(_BYTE **)(v570 + 8);
      v573 = v571 - v572;
      if (v571 == v572)
        break;
      if ((v573 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v574 = operator new(v571 - v572);
      memcpy(v574, v572, v573);
      v569 = 24 * v528;
      v575 = *(unsigned int *)(a1 + 52);
      if ((int)v575 >= 1)
        goto LABEL_366;
LABEL_373:
      if (*(int *)(a1 + 996) < 1)
      {
        ++*(_DWORD *)(a1 + 1000);
        if (!v574)
          goto LABEL_379;
      }
      else
      {
        v592 = 0;
        v593 = *(_QWORD *)(a1 + 1032);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v593 + 24 * *(int *)(a1 + 1000)) + 4 * v592) = *((_DWORD *)v574 + v592);
          ++v592;
        }
        while (v592 < *(int *)(a1 + 996));
        ++*(_DWORD *)(a1 + 1000);
      }
      operator delete(v574);
      v568 = *(_QWORD *)(a1 + 208);
LABEL_379:
      v594 = *(_QWORD *)(a1 + 864);
      v595 = *(_BYTE **)(v568 + 24 * (int)v528);
      v596 = *(_BYTE **)(v568 + v569 + 8);
      v597 = v596 - v595;
      if (v596 == v595)
      {
        v598 = 0;
        v599 = *(unsigned int *)(a1 + 52);
        if ((int)v599 < 1)
          goto LABEL_391;
LABEL_384:
        v600 = 0;
        v601 = *(_QWORD *)(v594 + 8 * v528);
        v602 = *(_QWORD *)(*(_QWORD *)(a1 + 1248) + 8 * *(int *)(a1 + 1240));
        if (v599 < 8)
          goto LABEL_389;
        if ((unint64_t)(v602 - v601) < 0x20)
          goto LABEL_389;
        v600 = v599 & 0x7FFFFFF8;
        v603 = (__int128 *)(v601 + 16);
        v604 = (_OWORD *)(v602 + 16);
        v605 = v599 & 0xFFFFFFF8;
        do
        {
          v606 = *v603;
          *(v604 - 1) = *(v603 - 1);
          *v604 = v606;
          v603 += 2;
          v604 += 2;
          v605 -= 8;
        }
        while (v605);
        if (v600 != v599)
        {
LABEL_389:
          v607 = v599 - v600;
          v608 = 4 * v600;
          v609 = (_DWORD *)(v602 + 4 * v600);
          v610 = (int *)(v601 + v608);
          do
          {
            v611 = *v610++;
            *v609++ = v611;
            --v607;
          }
          while (v607);
        }
        goto LABEL_391;
      }
      if ((v597 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v598 = operator new(v596 - v595);
      memcpy(v598, v595, v597);
      v599 = *(unsigned int *)(a1 + 52);
      if ((int)v599 >= 1)
        goto LABEL_384;
LABEL_391:
      if (*(int *)(a1 + 1236) < 1)
      {
        ++*(_DWORD *)(a1 + 1240);
        if (!v598)
          goto LABEL_397;
      }
      else
      {
        v612 = 0;
        v613 = *(_QWORD *)(a1 + 1272);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v613 + 24 * *(int *)(a1 + 1240)) + 4 * v612) = *((_DWORD *)v598 + v612);
          ++v612;
        }
        while (v612 < *(int *)(a1 + 1236));
        ++*(_DWORD *)(a1 + 1240);
      }
      operator delete(v598);
      v568 = *(_QWORD *)(a1 + 208);
LABEL_397:
      v614 = *(_QWORD *)(a1 + 936);
      v615 = *(_BYTE **)(v568 + 24 * (int)v528);
      v616 = *(_BYTE **)(v568 + v569 + 8);
      v617 = v616 - v615;
      if (v616 == v615)
      {
        v618 = 0;
        v619 = *(unsigned int *)(a1 + 52);
        if ((int)v619 < 1)
          goto LABEL_409;
LABEL_402:
        v620 = 0;
        v621 = *(_QWORD *)(v614 + 8 * v528);
        v622 = *(_QWORD *)(*(_QWORD *)(a1 + 1368) + 8 * *(int *)(a1 + 1360));
        if (v619 < 8)
          goto LABEL_407;
        if ((unint64_t)(v622 - v621) < 0x20)
          goto LABEL_407;
        v620 = v619 & 0x7FFFFFF8;
        v623 = (__int128 *)(v621 + 16);
        v624 = (_OWORD *)(v622 + 16);
        v625 = v619 & 0xFFFFFFF8;
        do
        {
          v626 = *v623;
          *(v624 - 1) = *(v623 - 1);
          *v624 = v626;
          v623 += 2;
          v624 += 2;
          v625 -= 8;
        }
        while (v625);
        if (v620 != v619)
        {
LABEL_407:
          v627 = v619 - v620;
          v628 = 4 * v620;
          v629 = (_DWORD *)(v622 + 4 * v620);
          v630 = (int *)(v621 + v628);
          do
          {
            v631 = *v630++;
            *v629++ = v631;
            --v627;
          }
          while (v627);
        }
        goto LABEL_409;
      }
      if ((v617 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v618 = operator new(v616 - v615);
      memcpy(v618, v615, v617);
      v619 = *(unsigned int *)(a1 + 52);
      if ((int)v619 >= 1)
        goto LABEL_402;
LABEL_409:
      if (*(int *)(a1 + 1356) >= 1)
      {
        v632 = 0;
        v633 = *(_QWORD *)(a1 + 1392);
        do
        {
          *(_DWORD *)(*(_QWORD *)(v633 + 24 * *(int *)(a1 + 1360)) + 4 * v632) = *((_DWORD *)v618 + v632);
          ++v632;
        }
        while (v632 < *(int *)(a1 + 1356));
        ++*(_DWORD *)(a1 + 1360);
LABEL_414:
        operator delete(v618);
        goto LABEL_330;
      }
      ++*(_DWORD *)(a1 + 1360);
      if (v618)
        goto LABEL_414;
LABEL_330:
      if (++v652 == a5)
        return;
    }
    v574 = 0;
    v575 = *(unsigned int *)(a1 + 52);
    if ((int)v575 < 1)
      goto LABEL_373;
LABEL_366:
    v580 = 0;
    v581 = *(_QWORD *)(v567 + 8 * v528);
    v582 = *(_QWORD *)(*(_QWORD *)(a1 + 1008) + 8 * *(int *)(a1 + 1000));
    if (v575 < 8)
      goto LABEL_371;
    if ((unint64_t)(v582 - v581) < 0x20)
      goto LABEL_371;
    v580 = v575 & 0x7FFFFFF8;
    v583 = (__int128 *)(v581 + 16);
    v584 = (_OWORD *)(v582 + 16);
    v585 = v575 & 0xFFFFFFF8;
    do
    {
      v586 = *v583;
      *(v584 - 1) = *(v583 - 1);
      *v584 = v586;
      v583 += 2;
      v584 += 2;
      v585 -= 8;
    }
    while (v585);
    if (v580 != v575)
    {
LABEL_371:
      v587 = v575 - v580;
      v588 = 4 * v580;
      v589 = (_DWORD *)(v582 + 4 * v580);
      v590 = (int *)(v581 + v588);
      do
      {
        v591 = *v590++;
        *v589++ = v591;
        --v587;
      }
      while (v587);
    }
    goto LABEL_373;
  }
}

void sub_19C0FC7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0FC818(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[2672] = 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE419068);
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EE419068);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      qword_1EE419050 = 0;
      *(_QWORD *)algn_1EE419058 = 0;
      qword_1EE419060 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419050, &dword_19C079000);
      __cxa_guard_release(&qword_1EE419068);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE419050);
  a1[2672] = 0;
  return result;
}

uint64_t sub_19C0FC8E4(_BYTE *a1)
{
  uint64_t result;

  a1[2672] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

char *sub_19C0FC918(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 2496) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D008, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 2504) = result + 232;
  *(_QWORD *)(a1 + 2520) = result + 248;
  *(_QWORD *)(a1 + 2512) = result + 240;
  *(_QWORD *)(a1 + 2528) = result + 256;
  *(_QWORD *)(a1 + 2536) = result + 264;
  *(_QWORD *)(a1 + 2552) = result + 280;
  *(_QWORD *)(a1 + 2544) = result + 272;
  *(_QWORD *)(a1 + 2560) = result + 288;
  *(_QWORD *)(a1 + 2568) = result + 296;
  *(_QWORD *)(a1 + 2576) = result + 304;
  *(_QWORD *)(a1 + 2584) = result + 312;
  *(_QWORD *)(a1 + 2592) = result + 320;
  *(_QWORD *)(a1 + 2600) = result + 328;
  *(_QWORD *)(a1 + 2608) = result + 336;
  *(_QWORD *)(a1 + 2616) = result + 344;
  return result;
}

void sub_19C0FC9E8(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2496))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D008, 0))__cxa_bad_cast();
    sub_19C2210D4(34);
  }
  sub_19C2210D4(1);
}

void sub_19C0FCA30()
{
  sub_19C2210D4(1);
}

void sub_19C0FCA40()
{
  sub_19C2210D4(0);
}

void sub_19C0FCA54(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C105000(a1);
  operator delete(v1);
}

uint64_t sub_19C0FCA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = atomic_load((unsigned __int8 *)&qword_1EE419048);
  if ((v6 & 1) == 0)
  {
    v14 = a6;
    v15 = a1;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v8 = __cxa_guard_acquire(&qword_1EE419048);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    v9 = v8;
    a6 = v14;
    a1 = v15;
    if (v9)
    {
      qword_1EE419030 = 0;
      *(_QWORD *)algn_1EE419038 = 0;
      qword_1EE419040 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419030, &dword_19C079000);
      __cxa_guard_release(&qword_1EE419048);
      a6 = v14;
      a1 = v15;
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE419030);
}

uint64_t sub_19C0FCB20(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
}

uint64_t sub_19C0FCB2C(uint64_t a1, __int128 *a2, int a3, int a4, char a5, float a6)
{
  __int128 v8;
  _QWORD *v9;
  int v10;
  void *v11;

  *(_QWORD *)a1 = &unk_1E3D1E9D0;
  *(float *)(a1 + 8) = a6;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19C07C6E8((_BYTE *)(a1 + 32), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v8;
  }
  *(_BYTE *)(a1 + 56) = a5;
  v9 = (_QWORD *)operator new();
  v10 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
  v11 = (void *)operator new[]();
  *v9 = v11;
  bzero(v11, 4 * v10);
  *(_QWORD *)(a1 + 24) = v9;
  return a1;
}

void sub_19C0FCC10(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;

  operator delete(v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_19C0FCC3C(uint64_t a1, const float **a2, const float **a3, float a4)
{
  vDSP_Length v4;
  float __B;

  if (a4 == 0.0)
    a4 = *(float *)(a1 + 8);
  else
    *(float *)(a1 + 8) = a4;
  v4 = *(int *)(a1 + 16) * (uint64_t)*(int *)(a1 + 12);
  __B = a4;
  vDSP_vsma(*a3, 1, &__B, *a2, 1, (float *)*a2, 1, v4);
}

void sub_19C0FCC94(uint64_t a1, uint64_t *a2, uint64_t a3, float a4)
{
  if (a4 != 0.0)
    *(float *)(a1 + 8) = a4;
  sub_19C0FD1E4(a3, a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), a1);
}

float sub_19C0FCCC8(uint64_t a1, float a2)
{
  return *(float *)(a1 + 8) * a2;
}

float32_t sub_19C0FCCD4(uint64_t a1, float32x4_t a2, uint64_t a3, float32x4_t *a4, unint64_t a5, unsigned int a6)
{
  const float *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v10;
  float32x4_t *v12;
  float32x4_t *v13;
  uint64_t v14;
  float32x4_t v15;
  _DWORD *v16;
  float *v17;
  uint64_t v18;
  float v19;

  if ((int)a6 >= 1)
  {
    v6 = (const float *)(a1 + 8);
    if (a6 < 8)
    {
      v7 = 0;
LABEL_18:
      v16 = (_DWORD *)(a5 + 4 * v7);
      v17 = &a4->f32[v7];
      v18 = a6 - v7;
      do
      {
        v19 = *v17++;
        a2.f32[0] = *v6 * v19;
        *v16++ = a2.i32[0];
        --v18;
      }
      while (v18);
      return a2.f32[0];
    }
    v7 = 0;
    v8 = a5 + 4 * a6;
    v10 = a1 + 12 > a5 && (unint64_t)v6 < v8;
    if (v8 > (unint64_t)a4 && (unint64_t)a4->u64 + 4 * a6 > a5)
      goto LABEL_18;
    if (v10)
      goto LABEL_18;
    v7 = a6 & 0x7FFFFFF8;
    a2 = vld1q_dup_f32(v6);
    v12 = a4 + 1;
    v13 = (float32x4_t *)(a5 + 16);
    v14 = a6 & 0xFFFFFFF8;
    do
    {
      v15 = vmulq_f32(a2, *v12);
      v13[-1] = vmulq_f32(a2, v12[-1]);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    if (v7 != a6)
      goto LABEL_18;
  }
  return a2.f32[0];
}

char *sub_19C0FCD90@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[55] < 0)
    return (char *)sub_19C07C6E8((_BYTE *)a2, *((void **)result + 4), *((_QWORD *)result + 5));
  *(_OWORD *)a2 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 6);
  return result;
}

uint64_t sub_19C0FCDBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

float sub_19C0FCDC4(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t sub_19C0FCDCC(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_1E3D1E9D0;
  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    if (!*v2 || (operator delete[](*v2), (v2 = *(void ***)(a1 + 24)) != 0))
      operator delete(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_19C0FCE44(char *__p)
{
  void **v2;

  *(_QWORD *)__p = &unk_1E3D1E9D0;
  v2 = (void **)*((_QWORD *)__p + 3);
  if (v2)
  {
    if (!*v2 || (operator delete[](*v2), (v2 = (void **)*((_QWORD *)__p + 3)) != 0))
      operator delete(v2);
    *((_QWORD *)__p + 3) = 0;
  }
  if (__p[55] < 0)
    operator delete(*((void **)__p + 4));
  operator delete(__p);
}

_QWORD *sub_19C0FCEBC(_QWORD *result, int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  unsigned __int8 v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;

  if (a2 >= 1)
  {
    v3 = 0;
    v4 = a2;
    v5 = a3 * 4.6566e-10;
    do
    {
      v6 = atomic_load((unsigned __int8 *)&qword_1EE419F08);
      if ((v6 & 1) == 0)
      {
        v34 = result;
        v30 = a3;
        v32 = v5;
        v26 = v4;
        v28 = v3;
        v13 = __cxa_guard_acquire(&qword_1EE419F08);
        v4 = v26;
        v3 = v28;
        v5 = v32;
        a3 = v30;
        v14 = v13;
        result = v34;
        if (v14)
        {
          v15 = 5489;
          dword_1EE419FB0[0] = 5489;
          v16 = 55;
          v17 = 1;
          do
          {
            v18 = 1812433253 * (v15 ^ (v15 >> 30));
            v15 = v18 + v17;
            dword_1EE419ED8[v16] = v16 + v18 - 54;
            ++v17;
            ++v16;
          }
          while (v16 != 678);
          qword_1EE41A970 = 0;
          __cxa_guard_release(&qword_1EE419F08);
          a3 = v30;
          result = v34;
          v4 = v26;
          v3 = v28;
          v5 = v32;
        }
      }
      v7 = (qword_1EE41A970 + 1) % 0x270uLL;
      v8 = dword_1EE419FB0[v7];
      v9 = dword_1EE419FB0[(qword_1EE41A970 + 397) % 0x270uLL] ^ ((v8 & 0x7FFFFFFE | dword_1EE419FB0[qword_1EE41A970] & 0x80000000) >> 1);
      v10 = v9 ^ (v8 << 31 >> 31) & 0x9908B0DF;
      dword_1EE419FB0[qword_1EE41A970] = v10;
      qword_1EE41A970 = v7;
      v11 = atomic_load((unsigned __int8 *)&qword_1EE419F08);
      if ((v11 & 1) == 0)
      {
        v35 = result;
        v31 = a3;
        v33 = v5;
        v27 = v4;
        v29 = v3;
        v25 = v9 ^ (v8 << 31 >> 31) & 0x9908B0DF;
        v19 = __cxa_guard_acquire(&qword_1EE419F08);
        v10 = v25;
        v4 = v27;
        v3 = v29;
        v5 = v33;
        a3 = v31;
        v20 = v19;
        result = v35;
        if (v20)
        {
          v21 = 5489;
          dword_1EE419FB0[0] = 5489;
          v22 = 55;
          v23 = 1;
          do
          {
            v24 = 1812433253 * (v21 ^ (v21 >> 30));
            v21 = v24 + v23;
            dword_1EE419ED8[v22] = v22 + v24 - 54;
            ++v23;
            ++v22;
          }
          while (v22 != 678);
          qword_1EE41A970 = 0;
          __cxa_guard_release(&qword_1EE419F08);
          a3 = v31;
          result = v35;
          v4 = v27;
          v3 = v29;
          v5 = v33;
          v10 = v25;
        }
      }
      v12 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
      *(float *)(*result + 4 * v3++) = -(float)(a3
                                              - (float)(v5
                                                      * (float)((v12 << 15) & 0xEFC60000 ^ v12 ^ (((v12 << 15) & 0xEFC60000 ^ v12) >> 18))));
    }
    while (v3 != v4);
  }
  return result;
}

void sub_19C0FD1E4(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD **v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD **v17;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t **v39;
  int v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  uint64_t **v56;
  uint64_t *v57;
  _DWORD *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _BYTE *v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD **v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _OWORD *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t **v102;
  uint64_t **v103;
  int v104;
  _DWORD *v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _BYTE *v114;
  char *v115;
  unint64_t v116;
  char *v117;
  int v118;
  _QWORD *v119;
  _QWORD **v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t j;
  int *v131;
  float *v132;
  uint64_t v133;
  int v134;
  int v135;
  float *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  float32x4_t *v144;
  uint64_t v145;
  float32x4_t *v146;
  float32x4_t v147;
  uint64_t v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  float32x2_t *v163;
  uint64_t v164;
  uint64_t v165;
  float32x2_t v166;
  int8x8_t v167;
  int8x8_t v168;
  int8x8_t v169;
  int8x8_t v170;
  uint64_t v171;
  uint64_t v172;
  float *v173;
  float *v174;
  float v175;
  float v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v180;
  char *v182;
  int v184;
  uint64_t v185;
  uint64_t i;
  int v187;
  char *__p;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t **v194;
  uint64_t *v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;

  v198 = 0;
  v199 = 0;
  v197 = &v198;
  v195 = 0;
  v196 = 0;
  v194 = &v195;
  v5 = *(_DWORD *)(a1 + 16);
  v184 = a3;
  v185 = a1;
  if (v5 < 1 || (v6 = *(_DWORD *)(a1 + 12), v6 < 1))
  {
    v76 = &v198;
    goto LABEL_145;
  }
  v7 = 0;
  v8 = 0;
  for (i = 0; i < v5; ++i)
  {
    if (v6 >= 1)
    {
      v9 = 0;
      while (1)
      {
        while (1)
        {
          v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24 * i) + 4 * v9);
          v11 = v198;
          v12 = &v198;
          v13 = &v198;
          if (v198)
          {
            v14 = &v198;
            v15 = v198;
            do
            {
              v16 = v15;
              v17 = v14;
              v18 = *((_DWORD *)v15 + 7);
              if (v18 >= v10)
                v14 = (_QWORD **)v15;
              else
                ++v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
            if (v14 == &v198)
              goto LABEL_26;
            if (v18 < v10)
              v16 = v17;
            if (v10 < *((_DWORD *)v16 + 7))
            {
LABEL_26:
              while (1)
              {
                while (1)
                {
                  v13 = (_QWORD **)v11;
                  v19 = *((_DWORD *)v11 + 7);
                  if (v10 >= v19)
                    break;
                  v11 = *v13;
                  v12 = v13;
                  if (!*v13)
                    goto LABEL_29;
                }
                if (v19 >= v10)
                  break;
                v11 = v13[1];
                if (!v11)
                {
                  v12 = v13 + 1;
                  goto LABEL_29;
                }
              }
            }
          }
          else
          {
LABEL_29:
            v20 = operator new(0x20uLL);
            *((_DWORD *)v20 + 7) = v10;
            *v20 = 0;
            v20[1] = 0;
            v20[2] = v13;
            *v12 = v20;
            if (*v197)
            {
              v197 = (_QWORD *)*v197;
              v20 = (_QWORD *)*v12;
            }
            v21 = v198;
            *((_BYTE *)v20 + 24) = v20 == v198;
            if (v20 != v21)
            {
              do
              {
                v22 = v20[2];
                if (*(_BYTE *)(v22 + 24))
                  break;
                v23 = *(_QWORD **)(v22 + 16);
                v24 = *v23;
                if (*v23 == v22)
                {
                  v27 = v23[1];
                  if (!v27 || (v28 = *(unsigned __int8 *)(v27 + 24), v25 = (_BYTE *)(v27 + 24), v28))
                  {
                    if (*(_QWORD **)v22 == v20)
                    {
                      *(_BYTE *)(v22 + 24) = 1;
                      *((_BYTE *)v23 + 24) = 0;
                      v31 = *(_QWORD *)(v22 + 8);
                      *v23 = v31;
                      if (v31)
                        goto LABEL_45;
                    }
                    else
                    {
                      v29 = *(uint64_t **)(v22 + 8);
                      v30 = *v29;
                      *(_QWORD *)(v22 + 8) = *v29;
                      if (v30)
                      {
                        *(_QWORD *)(v30 + 16) = v22;
                        v23 = *(_QWORD **)(v22 + 16);
                      }
                      v29[2] = (uint64_t)v23;
                      *(_QWORD *)(*(_QWORD *)(v22 + 16) + 8 * (**(_QWORD **)(v22 + 16) != v22)) = v29;
                      *v29 = v22;
                      *(_QWORD *)(v22 + 16) = v29;
                      v23 = (_QWORD *)v29[2];
                      v22 = *v23;
                      *((_BYTE *)v29 + 24) = 1;
                      *((_BYTE *)v23 + 24) = 0;
                      v31 = *(_QWORD *)(v22 + 8);
                      *v23 = v31;
                      if (v31)
LABEL_45:
                        *(_QWORD *)(v31 + 16) = v23;
                    }
                    *(_QWORD *)(v22 + 16) = v23[2];
                    *(_QWORD *)(v23[2] + 8 * (*(_QWORD *)v23[2] != (_QWORD)v23)) = v22;
                    *(_QWORD *)(v22 + 8) = v23;
LABEL_51:
                    v23[2] = v22;
                    break;
                  }
                }
                else if (!v24 || (v26 = *(unsigned __int8 *)(v24 + 24), v25 = (_BYTE *)(v24 + 24), v26))
                {
                  if (*(_QWORD **)v22 == v20)
                  {
                    v72 = v20[1];
                    *(_QWORD *)v22 = v72;
                    if (v72)
                    {
                      *(_QWORD *)(v72 + 16) = v22;
                      v23 = *(_QWORD **)(v22 + 16);
                    }
                    v20[2] = v23;
                    *(_QWORD *)(*(_QWORD *)(v22 + 16) + 8 * (**(_QWORD **)(v22 + 16) != v22)) = v20;
                    v20[1] = v22;
                    *(_QWORD *)(v22 + 16) = v20;
                    v23 = (_QWORD *)v20[2];
                    *((_BYTE *)v20 + 24) = 1;
                    *((_BYTE *)v23 + 24) = 0;
                    v22 = v23[1];
                    v32 = *(_QWORD **)v22;
                    v23[1] = *(_QWORD *)v22;
                    if (v32)
LABEL_49:
                      v32[2] = v23;
                  }
                  else
                  {
                    *(_BYTE *)(v22 + 24) = 1;
                    *((_BYTE *)v23 + 24) = 0;
                    v22 = v23[1];
                    v32 = *(_QWORD **)v22;
                    v23[1] = *(_QWORD *)v22;
                    if (v32)
                      goto LABEL_49;
                  }
                  *(_QWORD *)(v22 + 16) = v23[2];
                  *(_QWORD *)(v23[2] + 8 * (*(_QWORD *)v23[2] != (_QWORD)v23)) = v22;
                  *(_QWORD *)v22 = v23;
                  goto LABEL_51;
                }
                *(_BYTE *)(v22 + 24) = 1;
                v20 = v23;
                *((_BYTE *)v23 + 24) = v23 == v21;
                *v25 = 1;
              }
              while (v23 != v21);
            }
            v199 = ++v8;
          }
          v33 = v195;
          v34 = &v195;
          v35 = &v195;
          if (v195)
            break;
LABEL_69:
          v42 = (uint64_t *)operator new(0x28uLL);
          *((_DWORD *)v42 + 7) = v10;
          *((_DWORD *)v42 + 8) = 1;
          *v42 = 0;
          v42[1] = 0;
          v42[2] = (uint64_t)v35;
          *v34 = v42;
          if (*v194)
          {
            v194 = (uint64_t **)*v194;
            v42 = *v34;
          }
          v43 = v195;
          v157 = v42 == v195;
          *((_BYTE *)v42 + 24) = v42 == v195;
          if (!v157)
          {
            do
            {
              v44 = v42[2];
              if (*(_BYTE *)(v44 + 24))
                break;
              v45 = *(uint64_t **)(v44 + 16);
              v46 = *v45;
              if (*v45 == v44)
              {
                v49 = v45[1];
                if (!v49 || (v50 = *(unsigned __int8 *)(v49 + 24), v47 = (_BYTE *)(v49 + 24), v50))
                {
                  if (*(uint64_t **)v44 == v42)
                  {
                    *(_BYTE *)(v44 + 24) = 1;
                    *((_BYTE *)v45 + 24) = 0;
                    v53 = *(_QWORD *)(v44 + 8);
                    *v45 = v53;
                    if (v53)
                      goto LABEL_86;
                  }
                  else
                  {
                    v51 = *(uint64_t **)(v44 + 8);
                    v52 = *v51;
                    *(_QWORD *)(v44 + 8) = *v51;
                    if (v52)
                    {
                      *(_QWORD *)(v52 + 16) = v44;
                      v45 = *(uint64_t **)(v44 + 16);
                    }
                    v51[2] = (uint64_t)v45;
                    *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v51;
                    *v51 = v44;
                    *(_QWORD *)(v44 + 16) = v51;
                    v45 = (uint64_t *)v51[2];
                    v44 = *v45;
                    *((_BYTE *)v51 + 24) = 1;
                    *((_BYTE *)v45 + 24) = 0;
                    v53 = *(_QWORD *)(v44 + 8);
                    *v45 = v53;
                    if (v53)
LABEL_86:
                      *(_QWORD *)(v53 + 16) = v45;
                  }
                  *(_QWORD *)(v44 + 16) = v45[2];
                  *(_QWORD *)(v45[2] + 8 * (*(_QWORD *)v45[2] != (_QWORD)v45)) = v44;
                  *(_QWORD *)(v44 + 8) = v45;
LABEL_10:
                  v45[2] = v44;
                  break;
                }
              }
              else if (!v46 || (v48 = *(unsigned __int8 *)(v46 + 24), v47 = (_BYTE *)(v46 + 24), v48))
              {
                if (*(uint64_t **)v44 == v42)
                {
                  v73 = v42[1];
                  *(_QWORD *)v44 = v73;
                  if (v73)
                  {
                    *(_QWORD *)(v73 + 16) = v44;
                    v45 = *(uint64_t **)(v44 + 16);
                  }
                  v42[2] = (uint64_t)v45;
                  *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v42;
                  v42[1] = v44;
                  *(_QWORD *)(v44 + 16) = v42;
                  v45 = (uint64_t *)v42[2];
                  *((_BYTE *)v42 + 24) = 1;
                  *((_BYTE *)v45 + 24) = 0;
                  v44 = v45[1];
                  v57 = *(uint64_t **)v44;
                  v45[1] = *(_QWORD *)v44;
                  if (!v57)
                    goto LABEL_9;
                }
                else
                {
                  *(_BYTE *)(v44 + 24) = 1;
                  *((_BYTE *)v45 + 24) = 0;
                  v44 = v45[1];
                  v57 = *(uint64_t **)v44;
                  v45[1] = *(_QWORD *)v44;
                  if (!v57)
                    goto LABEL_9;
                }
                v57[2] = (uint64_t)v45;
LABEL_9:
                *(_QWORD *)(v44 + 16) = v45[2];
                *(_QWORD *)(v45[2] + 8 * (*(_QWORD *)v45[2] != (_QWORD)v45)) = v44;
                *(_QWORD *)v44 = v45;
                goto LABEL_10;
              }
              *(_BYTE *)(v44 + 24) = 1;
              v42 = v45;
              *((_BYTE *)v45 + 24) = v45 == v43;
              *v47 = 1;
            }
            while (v45 != v43);
          }
          v196 = ++v7;
LABEL_12:
          a1 = v185;
          if (++v9 >= v6)
            goto LABEL_4;
        }
        v36 = &v195;
        v37 = v195;
        do
        {
          v38 = v37;
          v39 = v36;
          v40 = *((_DWORD *)v37 + 7);
          if (v40 >= v10)
            v36 = (uint64_t **)v37;
          else
            ++v37;
          v37 = (uint64_t *)*v37;
        }
        while (v37);
        if (v36 == &v195)
          goto LABEL_66;
        if (v40 < v10)
          v38 = (uint64_t *)v39;
        if (v10 < *((_DWORD *)v38 + 7))
        {
LABEL_66:
          while (1)
          {
            while (1)
            {
              v35 = (uint64_t **)v33;
              v41 = *((_DWORD *)v33 + 7);
              if (v10 >= v41)
                break;
              v33 = *v35;
              v34 = v35;
              if (!*v35)
                goto LABEL_69;
            }
            if (v41 >= v10)
              goto LABEL_12;
            v33 = v35[1];
            if (!v33)
            {
              v34 = v35 + 1;
              goto LABEL_69;
            }
          }
        }
        do
        {
          while (1)
          {
            v54 = v33;
            v55 = *((_DWORD *)v33 + 7);
            if (v10 < v55)
              break;
            if (v55 >= v10)
            {
              v71 = *((_DWORD *)v54 + 8);
              v58 = v54;
              goto LABEL_135;
            }
            v33 = (uint64_t *)v54[1];
            if (!v33)
            {
              v56 = (uint64_t **)(v54 + 1);
              goto LABEL_97;
            }
          }
          v33 = (uint64_t *)*v54;
        }
        while (*v54);
        v56 = (uint64_t **)v54;
LABEL_97:
        v58 = operator new(0x28uLL);
        v58[7] = v10;
        v58[8] = 0;
        *(_QWORD *)v58 = 0;
        *((_QWORD *)v58 + 1) = 0;
        *((_QWORD *)v58 + 2) = v54;
        *v56 = (uint64_t *)v58;
        v59 = (uint64_t *)v58;
        if (*v194)
        {
          v194 = (uint64_t **)*v194;
          v59 = *v56;
        }
        v60 = v195;
        v157 = v59 == v195;
        *((_BYTE *)v59 + 24) = v59 == v195;
        if (!v157)
        {
          do
          {
            v61 = v59[2];
            if (*(_BYTE *)(v61 + 24))
              break;
            v62 = *(uint64_t **)(v61 + 16);
            v63 = *v62;
            if (*v62 == v61)
            {
              v66 = v62[1];
              if (!v66 || (v67 = *(unsigned __int8 *)(v66 + 24), v64 = (_BYTE *)(v66 + 24), v67))
              {
                if (*(uint64_t **)v61 == v59)
                {
                  *(_BYTE *)(v61 + 24) = 1;
                  *((_BYTE *)v62 + 24) = 0;
                  v70 = *(_QWORD *)(v61 + 8);
                  *v62 = v70;
                  if (v70)
                    goto LABEL_114;
                }
                else
                {
                  v68 = *(uint64_t **)(v61 + 8);
                  v69 = *v68;
                  *(_QWORD *)(v61 + 8) = *v68;
                  if (v69)
                  {
                    *(_QWORD *)(v69 + 16) = v61;
                    v62 = *(uint64_t **)(v61 + 16);
                  }
                  v68[2] = (uint64_t)v62;
                  *(_QWORD *)(*(_QWORD *)(v61 + 16) + 8 * (**(_QWORD **)(v61 + 16) != v61)) = v68;
                  *v68 = v61;
                  *(_QWORD *)(v61 + 16) = v68;
                  v62 = (uint64_t *)v68[2];
                  v61 = *v62;
                  *((_BYTE *)v68 + 24) = 1;
                  *((_BYTE *)v62 + 24) = 0;
                  v70 = *(_QWORD *)(v61 + 8);
                  *v62 = v70;
                  if (v70)
LABEL_114:
                    *(_QWORD *)(v70 + 16) = v62;
                }
                *(_QWORD *)(v61 + 16) = v62[2];
                *(_QWORD *)(v62[2] + 8 * (*(_QWORD *)v62[2] != (_QWORD)v62)) = v61;
                *(_QWORD *)(v61 + 8) = v62;
LABEL_133:
                v62[2] = v61;
                break;
              }
            }
            else if (!v63 || (v65 = *(unsigned __int8 *)(v63 + 24), v64 = (_BYTE *)(v63 + 24), v65))
            {
              if (*(uint64_t **)v61 == v59)
              {
                v75 = v59[1];
                *(_QWORD *)v61 = v75;
                if (v75)
                {
                  *(_QWORD *)(v75 + 16) = v61;
                  v62 = *(uint64_t **)(v61 + 16);
                }
                v59[2] = (uint64_t)v62;
                *(_QWORD *)(*(_QWORD *)(v61 + 16) + 8 * (**(_QWORD **)(v61 + 16) != v61)) = v59;
                v59[1] = v61;
                *(_QWORD *)(v61 + 16) = v59;
                v62 = (uint64_t *)v59[2];
                *((_BYTE *)v59 + 24) = 1;
                *((_BYTE *)v62 + 24) = 0;
                v61 = v62[1];
                v74 = *(uint64_t **)v61;
                v62[1] = *(_QWORD *)v61;
                if (v74)
LABEL_131:
                  v74[2] = (uint64_t)v62;
              }
              else
              {
                *(_BYTE *)(v61 + 24) = 1;
                *((_BYTE *)v62 + 24) = 0;
                v61 = v62[1];
                v74 = *(uint64_t **)v61;
                v62[1] = *(_QWORD *)v61;
                if (v74)
                  goto LABEL_131;
              }
              *(_QWORD *)(v61 + 16) = v62[2];
              *(_QWORD *)(v62[2] + 8 * (*(_QWORD *)v62[2] != (_QWORD)v62)) = v61;
              *(_QWORD *)v61 = v62;
              goto LABEL_133;
            }
            *(_BYTE *)(v61 + 24) = 1;
            v59 = v62;
            *((_BYTE *)v62 + 24) = v62 == v60;
            *v64 = 1;
          }
          while (v62 != v60);
        }
        v71 = 0;
        v196 = ++v7;
LABEL_135:
        v58[8] = v71 + 1;
        a1 = v185;
        v6 = *(_DWORD *)(v185 + 12);
        if (++v9 >= v6)
        {
LABEL_4:
          v5 = *(_DWORD *)(a1 + 16);
          break;
        }
      }
    }
  }
  v76 = (_QWORD **)v197;
  a3 = v184;
LABEL_145:
  v191 = 0;
  v192 = 0;
  v193 = 0;
  __p = 0;
  v189 = 0;
  v190 = 0;
  v77 = **(_QWORD **)(a1 + 80);
  if (v76 != &v198)
  {
    v78 = 0;
    v79 = 0;
    v180 = 4 * a3;
    while (1)
    {
      v80 = *((_DWORD *)v76 + 7);
      v81 = v192;
      if (v192 < v193)
      {
        *(_DWORD *)v192 = v80;
        v82 = (uint64_t)(v192 + 4);
        goto LABEL_170;
      }
      v182 = v78;
      v83 = v191;
      v84 = (v192 - v191) >> 2;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62)
        goto LABEL_288;
      v86 = v193 - v191;
      if ((v193 - v191) >> 1 > v85)
        v85 = v86 >> 1;
      v87 = (unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v85;
      if (v87)
      {
        if (v87 >> 62)
          goto LABEL_287;
        v88 = v87;
        v89 = operator new(4 * v87);
        v87 = v88;
        v90 = &v89[4 * v84];
        *(_DWORD *)v90 = v80;
        v82 = (uint64_t)(v90 + 4);
        if (v192 == v191)
        {
LABEL_162:
          v78 = v182;
          goto LABEL_168;
        }
      }
      else
      {
        v89 = 0;
        v90 = (char *)(4 * v84);
        *(_DWORD *)(4 * v84) = v80;
        v82 = 4 * v84 + 4;
        if (v192 == v191)
          goto LABEL_162;
      }
      v91 = v192 - 4 - v191;
      if (v91 < 0x2C)
        break;
      v78 = v182;
      if ((unint64_t)(v191 - v89) < 0x20)
        goto LABEL_167;
      v92 = (v91 >> 2) + 1;
      v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
      v94 = &v192[-v93];
      v90 -= v93;
      v95 = &v89[4 * v84 - 16];
      v96 = v192 - 16;
      v97 = v92 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v98 = *(_OWORD *)v96;
        *(v95 - 1) = *((_OWORD *)v96 - 1);
        *v95 = v98;
        v95 -= 2;
        v96 -= 32;
        v97 -= 8;
      }
      while (v97);
      v81 = v94;
      if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_167;
LABEL_168:
      v191 = v90;
      v193 = &v89[4 * v87];
      if (v83)
      {
        v100 = v82;
        operator delete(v83);
        v82 = v100;
      }
LABEL_170:
      v192 = (char *)v82;
      v101 = v195;
      v102 = &v195;
      v103 = &v195;
      if (v195)
      {
        while (1)
        {
          while (1)
          {
            v103 = (uint64_t **)v101;
            v104 = *((_DWORD *)v101 + 7);
            if (v80 >= v104)
              break;
            v101 = *v103;
            v102 = v103;
            if (!*v103)
              goto LABEL_177;
          }
          if (v104 >= v80)
            break;
          v101 = v103[1];
          if (!v101)
          {
            v102 = v103 + 1;
            goto LABEL_177;
          }
        }
        v107 = (char *)v79;
        v105 = v103;
        if (v107 < v78)
        {
LABEL_180:
          *(_DWORD *)v107 = v105[8];
          v79 = (uint64_t)(v107 + 4);
          goto LABEL_196;
        }
      }
      else
      {
LABEL_177:
        v105 = operator new(0x28uLL);
        v105[7] = v80;
        v105[8] = 0;
        *(_QWORD *)v105 = 0;
        *((_QWORD *)v105 + 1) = 0;
        *((_QWORD *)v105 + 2) = v103;
        *v102 = (uint64_t *)v105;
        v106 = (uint64_t *)v105;
        if (*v194)
        {
          v194 = (uint64_t **)*v194;
          v106 = *v102;
        }
        sub_19C07CC40(v195, v106);
        ++v196;
        v107 = v189;
        v78 = v190;
        if (v189 < v190)
          goto LABEL_180;
      }
      v108 = __p;
      v109 = v107 - __p;
      v110 = (v107 - __p) >> 2;
      v111 = v110 + 1;
      if ((unint64_t)(v110 + 1) >> 62)
LABEL_288:
        sub_19C07DA0C();
      if ((v78 - __p) >> 1 > v111)
        v111 = (v78 - __p) >> 1;
      if ((unint64_t)(v78 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
        v112 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v112 = v111;
      if (v112)
      {
        if (v112 >> 62)
LABEL_287:
          sub_19C07C7FC();
        v113 = v112;
        v114 = operator new(4 * v112);
        v112 = v113;
        v109 = v107 - __p;
        v115 = &v114[4 * v110];
        *(_DWORD *)v115 = v105[8];
        v79 = (uint64_t)(v115 + 4);
        if (v107 == __p)
        {
LABEL_205:
          v78 = &v114[4 * v112];
          __p = v115;
          v190 = v78;
          if (!v108)
            goto LABEL_196;
LABEL_195:
          operator delete(v108);
          goto LABEL_196;
        }
      }
      else
      {
        v114 = 0;
        v115 = (char *)(4 * v110);
        *(_DWORD *)(4 * v110) = v105[8];
        v79 = 4 * v110 + 4;
        if (v107 == __p)
          goto LABEL_205;
      }
      v116 = v107 - 4 - __p;
      if (v116 < 0xBC)
      {
        v117 = v107;
        goto LABEL_193;
      }
      if (&v114[v109 - 4 - (v116 & 0xFFFFFFFFFFFFFFFCLL)] > &v114[v109 - 4])
      {
        v117 = v107;
        do
        {
LABEL_193:
          v118 = *((_DWORD *)v117 - 1);
          v117 -= 4;
          *((_DWORD *)v115 - 1) = v118;
          v115 -= 4;
        }
        while (v117 != __p);
        goto LABEL_194;
      }
      if (&v107[-(v116 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v107 - 4)
      {
        v117 = v107;
        goto LABEL_193;
      }
      if ((unint64_t)(v107 - v114 - v109) < 0x20)
      {
        v117 = v107;
        goto LABEL_193;
      }
      v121 = (v116 >> 2) + 1;
      v122 = 4 * (v121 & 0x7FFFFFFFFFFFFFF8);
      v117 = &v107[-v122];
      v115 -= v122;
      v123 = &v114[4 * v110 - 16];
      v124 = v107 - 16;
      v125 = v121 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v126 = *(_OWORD *)v124;
        *(v123 - 1) = *((_OWORD *)v124 - 1);
        *v123 = v126;
        v123 -= 2;
        v124 -= 32;
        v125 -= 8;
      }
      while (v125);
      if (v121 != (v121 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_193;
LABEL_194:
      v78 = &v114[4 * v112];
      __p = v115;
      v190 = v78;
      if (v108)
        goto LABEL_195;
LABEL_196:
      v189 = (char *)v79;
      if (v184 >= 1)
        bzero((void *)(v77 + 4 * v80 * v184), v180);
      v119 = v76[1];
      if (v119)
      {
        do
        {
          v120 = (_QWORD **)v119;
          v119 = (_QWORD *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          v120 = (_QWORD **)v76[2];
          v157 = *v120 == v76;
          v76 = v120;
        }
        while (!v157);
      }
      v76 = v120;
      if (v120 == &v198)
      {
        a3 = v184;
        v5 = *(_DWORD *)(v185 + 16);
        goto LABEL_218;
      }
    }
    v78 = v182;
    do
    {
LABEL_167:
      v99 = *((_DWORD *)v81 - 1);
      v81 -= 4;
      *((_DWORD *)v90 - 1) = v99;
      v90 -= 4;
    }
    while (v81 != v191);
    goto LABEL_168;
  }
LABEL_218:
  if (v5 >= 1)
  {
    v127 = *(unsigned int *)(v185 + 12);
    if ((int)v127 >= 1 && (int)a3 >= 1)
    {
      v128 = *(_QWORD *)(v185 + 48);
      v129 = *(_QWORD *)(v185 + 24);
      if (a3 < 8)
      {
        for (j = 0; j != v5; ++j)
        {
          v131 = *(int **)(v128 + 24 * j);
          v132 = *(float **)(v129 + 8 * j);
          v133 = v127;
          do
          {
            v134 = *v131++;
            v135 = v134 * a3;
            *(float *)(v77 + 4 * (int)(v134 * a3)) = *(float *)(v77 + 4 * (int)(v134 * a3)) + *v132;
            if (a3 != 1)
            {
              v136 = (float *)(v77 + 4 * v135);
              v136[1] = v136[1] + v132[1];
              if (a3 != 2)
              {
                v136[2] = v136[2] + v132[2];
                if (a3 != 3)
                {
                  v136[3] = v136[3] + v132[3];
                  if (a3 != 4)
                  {
                    v136[4] = v136[4] + v132[4];
                    if (a3 != 5)
                    {
                      v136[5] = v136[5] + v132[5];
                      if (a3 != 6)
                        v136[6] = v136[6] + v132[6];
                    }
                  }
                }
              }
            }
            --v133;
          }
          while (v133);
        }
        goto LABEL_248;
      }
      v137 = 0;
      v138 = 4 * a3;
LABEL_235:
      v139 = 0;
      v140 = *(_QWORD *)(v128 + 24 * v137);
      v141 = *(_QWORD *)(v129 + 8 * v137);
      while (1)
      {
        v142 = *(int *)(v140 + 4 * v139) * (uint64_t)(int)a3;
        if (v77 + 4 * v142 >= v141 + v138 || v141 >= v77 + v138 + 4 * v142)
        {
          v144 = (float32x4_t *)(v77 + 16 + 4 * v142);
          v145 = a3 & 0xFFFFFFF8;
          v146 = (float32x4_t *)(v141 + 16);
          do
          {
            v147 = vaddq_f32(*v144, *v146);
            v144[-1] = vaddq_f32(v144[-1], v146[-1]);
            *v144 = v147;
            v144 += 2;
            v146 += 2;
            v145 -= 8;
          }
          while (v145);
          v148 = a3 & 0xFFFFFFF8;
          if (v148 == a3)
            goto LABEL_236;
        }
        else
        {
          v148 = 0;
        }
        v149 = (float *)(v141 + 4 * v148);
        v150 = (float *)(v77 + 4 * (v148 + v142));
        v151 = a3 - v148;
        do
        {
          v152 = *v149++;
          *v150 = *v150 + v152;
          ++v150;
          --v151;
        }
        while (v151);
LABEL_236:
        if (++v139 == v127)
        {
          if (++v137 == v5)
            break;
          goto LABEL_235;
        }
      }
    }
  }
LABEL_248:
  if (v192 != v191)
  {
    v153 = **(_QWORD **)(v185 + 72);
    v154 = (v192 - v191) >> 2;
    if (v184 > 0)
    {
      v155 = 0;
      v156 = 4 * v184;
      v157 = v184 >= 6 && a4 == 1;
      v158 = !v157;
      v187 = v158;
      while (1)
      {
        v159 = *(int *)&v191[4 * v155];
        (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)a5 + 32))(a5, (v159 * v184), v77 + 4 * (int)v159 * v184, v153);
        v153 = **(_QWORD **)(v185 + 72);
        v160 = *a2;
        if (!v187)
        {
          v161 = v160 + 4 * v159;
          if (v161 >= v153 + v156 || v153 >= v161 + v156)
            break;
        }
        v171 = 0;
LABEL_272:
        v172 = v184 - v171;
        v173 = (float *)(v153 + 4 * v171);
        v174 = (float *)(v160 + 4 * (v159 + a4 * v171));
        do
        {
          v175 = *v174 + *v173;
          *v174 = v175;
          v176 = 2.0;
          if (v175 > 2.0 || (v176 = -2.0, v175 < -2.0))
            *v174 = v176;
          ++v173;
          v174 += a4;
          --v172;
        }
        while (v172);
LABEL_257:
        if (v154 <= ++v155)
          goto LABEL_282;
      }
      v163 = **(float32x2_t ***)(v185 + 72);
      v164 = *a2;
      v165 = v184 & 0xFFFFFFFE;
      while (1)
      {
        v166 = vadd_f32(*(float32x2_t *)(v164 + 4 * v159), *v163);
        *(float32x2_t *)(v164 + 4 * v159) = v166;
        v167 = (int8x8_t)vcgt_f32(v166, (float32x2_t)0x4000000040000000);
        v168 = (int8x8_t)vcgt_f32((float32x2_t)0xC0000000C0000000, v166);
        v169 = vbsl_s8(vand_s8((int8x8_t)vcge_f32((float32x2_t)0x4000000040000000, v166), v168), (int8x8_t)0xC0000000C0000000, (int8x8_t)0x4000000040000000);
        v170 = vorr_s8(v168, v167);
        if ((v170.i8[0] & 1) != 0)
        {
          *(_DWORD *)(v164 + 4 * v159) = v169.i32[0];
          if ((v170.i8[4] & 1) != 0)
            goto LABEL_270;
        }
        else if ((v170.i8[4] & 1) != 0)
        {
LABEL_270:
          *(_DWORD *)(v164 + 4 * (a4 + v159)) = v169.i32[1];
        }
        v164 += 8 * a4;
        ++v163;
        v165 -= 2;
        if (!v165)
        {
          v171 = v184 & 0xFFFFFFFE;
          if (v171 == v184)
            goto LABEL_257;
          goto LABEL_272;
        }
      }
    }
    v177 = 0;
    do
    {
      v178 = (*(_DWORD *)&v191[4 * v177] * v184);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)a5 + 32))(a5, v178, v77 + 4 * (int)v178, v153);
      v153 = **(_QWORD **)(v185 + 72);
      ++v177;
    }
    while (v154 > v177);
  }
LABEL_282:
  if (__p)
    operator delete(__p);
  if (v191)
    operator delete(v191);
  sub_19C07C924((uint64_t)&v194, v195);
  sub_19C07C924((uint64_t)&v197, v198);
}

void sub_19C0FE2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25)
{
  uint64_t v25;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  sub_19C07C924((uint64_t)&a24, a25);
  sub_19C07C924(v25 - 128, *(_QWORD **)(v25 - 120));
  _Unwind_Resume(a1);
}

void sub_19C0FE308(uint64_t a1, float a2)
{
  if (a2 != 0.0)
    *(float *)(a1 + 20) = a2;
  if (!*(_BYTE *)(a1 + 16))
    sub_19C0FE700(a1);
}

double sub_19C0FE324(uint64_t a1, uint64_t *a2, uint64_t a3, float a4)
{
  unsigned int v7;
  int v8;
  double result;

  if (a4 != 0.0)
    *(float *)(a1 + 20) = a4;
  if (!*(_BYTE *)(a1 + 16))
  {
    sub_19C0FE700(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
      goto LABEL_5;
LABEL_7:
    v7 = *(_DWORD *)(a1 + 56);
    v8 = *(_DWORD *)(a1 + 60);
    goto LABEL_8;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
    goto LABEL_7;
LABEL_5:
  v8 = *(_DWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 60);
LABEL_8:
  sub_19C0FD1E4(a3, a2, v7, v8, a1);
  *(float *)(a1 + 40) = *(float *)(a1 + 40) * *(float *)(a1 + 24);
  result = *(double *)(a1 + 48) * *(double *)(a1 + 32);
  *(double *)(a1 + 48) = result;
  ++*(_QWORD *)(a1 + 8);
  return result;
}

void sub_19C0FE3E4(uint64_t a1)
{
  void **v2;
  void **v3;

  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 32);
  bzero(**(void ***)(a1 + 72), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 80), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 88), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 96), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 120), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  v2 = *(void ***)(a1 + 128);
  if (v2)
    bzero(*v2, 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  v3 = *(void ***)(a1 + 64);
  if (v3)
    bzero(*v3, 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
}

float sub_19C0FE4CC(uint64_t a1, int a2, float a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float result;

  v4 = *(_QWORD **)(a1 + 88);
  v3 = *(_QWORD **)(a1 + 96);
  v5 = 4 * a2;
  v6 = **(_QWORD **)(a1 + 80);
  *(float *)(v6 + v5) = a3 + (float)((float)(*(float *)(**(_QWORD **)(a1 + 72) + v5) - a3) * *(float *)(a1 + 24));
  v7 = a3 * a3 + (*(float *)(*v4 + v5) - a3 * a3) * *(double *)(a1 + 32);
  *(float *)(*v3 + v5) = v7;
  v8 = v7 / (1.0 - *(double *)(a1 + 48));
  v9 = sqrtf(v8);
  result = (float)(*(float *)(a1 + 20) * *(float *)(v6 + v5))
         / (float)((float)(v9 + *(float *)(a1 + 28)) - (float)(*(float *)(a1 + 40) * (float)(v9 + *(float *)(a1 + 28))));
  *(float *)(**(_QWORD **)(a1 + 120) + v5) = result;
  return result;
}

void sub_19C0FE570(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(int *)(a1 + 164) < 2)
      goto LABEL_3;
  }
  else
  {
    sub_19C0FE700(a1);
    if (*(int *)(a1 + 164) < 2)
    {
LABEL_3:
      if (*(int *)(a1 + 164) < 2)
        return;
      goto LABEL_4;
    }
  }
  sub_19C0FEB88(*(float ***)(a1 + 72), "prevM=", *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), 6, 10);
  if (*(int *)(a1 + 164) >= 2)
LABEL_4:
    sub_19C0FEB88(*(float ***)(a1 + 80), "M=", *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), 6, 10);
}

char *sub_19C0FE60C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[159] < 0)
    return (char *)sub_19C07C6E8((_BYTE *)a2, *((void **)result + 17), *((_QWORD *)result + 18));
  *(_OWORD *)a2 = *(_OWORD *)(result + 136);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 19);
  return result;
}

uint64_t sub_19C0FE638(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 160);
}

float sub_19C0FE640(uint64_t a1)
{
  return *(float *)(a1 + 20);
}

uint64_t sub_19C0FE648(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E3D1E270;
  sub_19C0FF784(a1);
  *(_BYTE *)(a1 + 16) = 0;
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  return a1;
}

void sub_19C0FE6A4(void **a1)
{
  *a1 = &unk_1E3D1E270;
  sub_19C0FF784((uint64_t)a1);
  *((_BYTE *)a1 + 16) = 0;
  if (*((char *)a1 + 159) < 0)
    operator delete(a1[17]);
  operator delete(a1);
}

void sub_19C0FE700(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  void *v4;
  _QWORD *v5;
  int v6;
  void *v7;
  _QWORD *v8;
  int v9;
  void *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  _QWORD *v17;
  int v18;
  void *v19;
  _QWORD *v20;
  int v21;
  void *v22;
  _QWORD *v23;
  int v24;
  void *v25;
  _QWORD *v26;
  int v27;
  void *v28;

  v2 = (_QWORD *)operator new();
  v3 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v4 = (void *)operator new[]();
  *v2 = v4;
  bzero(v4, 4 * v3);
  *(_QWORD *)(a1 + 72) = v2;
  v5 = (_QWORD *)operator new();
  v6 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v7 = (void *)operator new[]();
  *v5 = v7;
  bzero(v7, 4 * v6);
  *(_QWORD *)(a1 + 80) = v5;
  v8 = (_QWORD *)operator new();
  v9 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v10 = (void *)operator new[]();
  *v8 = v10;
  bzero(v10, 4 * v9);
  *(_QWORD *)(a1 + 88) = v8;
  v11 = (_QWORD *)operator new();
  v12 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v13 = (void *)operator new[]();
  *v11 = v13;
  bzero(v13, 4 * v12);
  *(_QWORD *)(a1 + 96) = v11;
  v14 = (_QWORD *)operator new();
  v15 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v16 = (void *)operator new[]();
  *v14 = v16;
  bzero(v16, 4 * v15);
  *(_QWORD *)(a1 + 104) = v14;
  v17 = (_QWORD *)operator new();
  v18 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v19 = (void *)operator new[]();
  *v17 = v19;
  bzero(v19, 4 * v18);
  *(_QWORD *)(a1 + 112) = v17;
  v20 = (_QWORD *)operator new();
  v21 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v22 = (void *)operator new[]();
  *v20 = v22;
  bzero(v22, 4 * v21);
  *(_QWORD *)(a1 + 120) = v20;
  v23 = (_QWORD *)operator new();
  v24 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v25 = (void *)operator new[]();
  *v23 = v25;
  bzero(v25, 4 * v24);
  *(_QWORD *)(a1 + 64) = v23;
  v26 = (_QWORD *)operator new();
  v27 = *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
  v28 = (void *)operator new[]();
  *v26 = v28;
  bzero(v28, 4 * v27);
  *(_QWORD *)(a1 + 128) = v26;
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_19C0FEAD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0FEAE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0FEAFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0FEB10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0FEB24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0FEB38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0FEB4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0FEB60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0FEB74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C0FEB88(float **a1, const char *a2, int a3, int a4, int a5, int a6)
{
  size_t v11;
  std::string::size_type v12;
  std::string *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  float *v21;
  char v22;
  uint64_t v23;
  float v24;
  BOOL v25;
  const char *v26;
  size_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  size_t v32;
  std::string::size_type v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  std::string::size_type v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  uint64_t v65;
  _BYTE v66[56];
  void *__p;
  char v68;
  uint64_t v69;
  std::string v70;
  std::string __dst;
  __int128 v72;
  int64_t v73;
  char __s[100];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  sprintf(__s, "0x%lx", *a1);
  v11 = strlen(__s);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v12;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11;
  p_dst = &__dst;
  if (v11)
LABEL_8:
    memcpy(p_dst, __s, v12);
  p_dst->__r_.__value_.__s.__data_[v12] = 0;
  v16 = std::string::insert(&__dst, 0, " (");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v64, ") ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v73 = v18->__r_.__value_.__r.__words[2];
  v72 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_22:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (a4 * a3 >= a6)
      v20 = a6;
    else
      v20 = (a4 * a3);
    if ((int)v20 > 0)
      goto LABEL_15;
LABEL_26:
    v22 = 1;
    goto LABEL_27;
  }
  operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_22;
LABEL_11:
  if (a4 * a3 >= a6)
    v20 = a6;
  else
    v20 = (a4 * a3);
  if ((int)v20 <= 0)
    goto LABEL_26;
LABEL_15:
  v21 = *a1;
  v22 = 1;
  v23 = v20;
  do
  {
    v24 = *v21++;
    v25 = v24 >= -1.0;
    if (v24 > 1.0)
      v25 = 0;
    v22 &= v25;
    --v23;
  }
  while (v23);
  if ((v22 & 1) == 0)
  {
    v26 = "no";
    goto LABEL_28;
  }
LABEL_27:
  v26 = "yes";
LABEL_28:
  if ((v22 & 1) != 0)
    v27 = 3;
  else
    v27 = 2;
  *((_BYTE *)&v70.__r_.__value_.__s + 23) = v27;
  memcpy(&v70, v26, v27);
  *(_BYTE *)((unint64_t)&v70 | v27) = 0;
  v28 = std::string::insert(&v70, 0, " (");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v64, ") ");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
  }
  else if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
LABEL_33:
  sub_19C0FF394((uint64_t)&v64);
  v32 = strlen(a2);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    sub_19C07C774();
  v33 = v32;
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    v61.__r_.__value_.__l.__size_ = v33;
    v61.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    goto LABEL_40;
  }
  *((_BYTE *)&v61.__r_.__value_.__s + 23) = v32;
  v34 = &v61;
  if (v32)
LABEL_40:
    memcpy(v34, a2, v33);
  *((_BYTE *)v34 + v33) = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &__dst;
  else
    v37 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v39 = std::string::append(&v61, (const std::string::value_type *)v37, size);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (v73 >= 0)
    v41 = (const std::string::value_type *)&v72;
  else
    v41 = (const std::string::value_type *)v72;
  if (v73 >= 0)
    v42 = HIBYTE(v73);
  else
    v42 = *((_QWORD *)&v72 + 1);
  v43 = std::string::append(&v62, v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  v45 = std::string::append(&v63, "[");
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v63.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
LABEL_62:
      operator delete(v61.__r_.__value_.__l.__data_);
      if ((int)v20 < 1)
        goto LABEL_89;
      goto LABEL_63;
    }
  }
  else if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_55;
  }
  operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_62;
LABEL_56:
  if ((int)v20 >= 1)
  {
LABEL_63:
    v47 = 0;
    v48 = a5;
    v49 = 4 * v20;
    while (1)
    {
      memset(&v63, 0, sizeof(v63));
      std::ios_base::clear((std::ios_base *)((char *)&v64 + *(_QWORD *)(v64.__r_.__value_.__r.__words[0] - 24)), 0);
      *(_QWORD *)&v66[*(_QWORD *)(v64.__r_.__value_.__r.__words[2] - 24)] = v48;
      std::ostream::operator<<();
      sub_19C0FF4CC((uint64_t *)&v64, (uint64_t)&v63);
      v50 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      else
        v51 = v63.__r_.__value_.__l.__size_;
      v52 = v51 + 1;
      if (v51 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_19C07C774();
      if (v52 >= 0x17)
        break;
      memset(&v62, 0, sizeof(v62));
      v53 = (char *)&v62;
      *((_BYTE *)&v62.__r_.__value_.__s + 23) = v51 + 1;
      if (v51)
        goto LABEL_76;
LABEL_80:
      *(_WORD *)&v53[v51] = 32;
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v62;
      else
        v57 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v58 = v62.__r_.__value_.__l.__size_;
      std::string::append(&v70, (const std::string::value_type *)v57, v58);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v62.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_65;
LABEL_88:
        operator delete(v63.__r_.__value_.__l.__data_);
        v47 += 4;
        if (v49 == v47)
          goto LABEL_89;
      }
      else
      {
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_88;
LABEL_65:
        v47 += 4;
        if (v49 == v47)
          goto LABEL_89;
      }
    }
    v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v54 = v52 | 7;
    v55 = v54 + 1;
    v53 = (char *)operator new(v54 + 1);
    v62.__r_.__value_.__l.__size_ = v51 + 1;
    v62.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
LABEL_76:
    if (v50 >= 0)
      v56 = &v63;
    else
      v56 = (std::string *)v63.__r_.__value_.__r.__words[0];
    memmove(v53, v56, v51);
    goto LABEL_80;
  }
LABEL_89:
  std::string::append(&v70, " ]");
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  v64.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v59 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + *(_QWORD *)(v64.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v64.__r_.__value_.__r.__words[2] = v59;
  v65 = MEMORY[0x1E0DE4FB8] + 16;
  if (v68 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD1C08](&v69);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      return;
LABEL_97:
    operator delete((void *)v72);
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73) < 0)
    goto LABEL_97;
}

void sub_19C0FF200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a66;
  char a71;
  uint64_t v71;

  if (a64 < 0)
    operator delete(__p);
  sub_19C0FF6FC((uint64_t)&a23);
  if (a71 < 0)
    operator delete(a66);
  if (*(char *)(v71 - 217) < 0)
    operator delete(*(void **)(v71 - 240));
  _Unwind_Resume(a1);
}

uint64_t sub_19C0FF394(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19C0FF498(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD1C08](v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C0FF4CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x1A1AD1A94](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_16;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_19C0FF684(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19C0FF650);
  }
  __cxa_rethrow();
}

void sub_19C0FF6E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C0FF6FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD1C08](a1 + 128);
  return a1;
}

double sub_19C0FF784(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  void **v12;
  void *v13;
  void **v14;
  void *v15;
  void **v16;
  void **v17;
  void **v18;
  void *v19;
  double result;

  v2 = *(void ***)(a1 + 72);
  if (v2)
  {
    if (*v2)
    {
      operator delete[](*v2);
      v3 = *(void **)(a1 + 72);
      if (v3)
        operator delete(v3);
    }
  }
  v4 = *(void ***)(a1 + 80);
  if (v4)
  {
    if (*v4)
    {
      operator delete[](*v4);
      v5 = *(void **)(a1 + 80);
      if (v5)
        operator delete(v5);
    }
  }
  v6 = *(void ***)(a1 + 88);
  if (v6)
  {
    if (*v6)
    {
      operator delete[](*v6);
      v7 = *(void **)(a1 + 88);
      if (v7)
        operator delete(v7);
    }
  }
  v8 = *(void ***)(a1 + 96);
  if (v8)
  {
    if (*v8)
    {
      operator delete[](*v8);
      v9 = *(void **)(a1 + 96);
      if (v9)
        operator delete(v9);
    }
  }
  v10 = *(void ***)(a1 + 104);
  if (v10)
  {
    if (*v10)
    {
      operator delete[](*v10);
      v11 = *(void **)(a1 + 104);
      if (v11)
        operator delete(v11);
    }
  }
  v12 = *(void ***)(a1 + 112);
  if (v12)
  {
    if (*v12)
    {
      operator delete[](*v12);
      v13 = *(void **)(a1 + 112);
      if (v13)
        operator delete(v13);
    }
  }
  v14 = *(void ***)(a1 + 120);
  if (v14)
  {
    if (*v14)
    {
      operator delete[](*v14);
      v15 = *(void **)(a1 + 120);
      if (v15)
        operator delete(v15);
    }
  }
  v17 = (void **)(a1 + 64);
  v16 = *(void ***)(a1 + 64);
  if (v16)
  {
    if (*v16)
    {
      operator delete[](*v16);
      if (*v17)
        operator delete(*v17);
    }
  }
  v18 = *(void ***)(a1 + 128);
  if (v18)
  {
    if (*v18)
    {
      operator delete[](*v18);
      v19 = *(void **)(a1 + 128);
      if (v19)
        operator delete(v19);
    }
  }
  *(_BYTE *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

float32x2_t sub_19C0FF8D8(uint64_t a1, const float **a2, _QWORD *a3, float a4)
{
  if (a4 != 0.0)
    *(float *)(a1 + 24) = a4;
  if (!*(_BYTE *)(a1 + 12))
    sub_19C100064(a1);
  return sub_19C1004EC(a1, a2, a3, a4);
}

float32x2_t sub_19C0FF93C(uint64_t a1, uint64_t *a2, uint64_t a3, float a4)
{
  unsigned int v7;
  int v8;
  const void **v9;
  void **v10;
  float32x2_t v11;
  float32x2_t result;

  if (a4 != 0.0)
    *(float *)(a1 + 24) = a4;
  if (!*(_BYTE *)(a1 + 12))
  {
    sub_19C100064(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
      goto LABEL_5;
LABEL_7:
    v7 = *(_DWORD *)(a1 + 16);
    v8 = *(_DWORD *)(a1 + 20);
    goto LABEL_8;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
    goto LABEL_7;
LABEL_5:
  v8 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
LABEL_8:
  sub_19C0FD1E4(a3, a2, v7, v8, a1);
  v10 = *(void ***)(a1 + 72);
  v9 = *(const void ***)(a1 + 80);
  memmove(**(void ***)(a1 + 56), **(const void ***)(a1 + 64), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  memmove(*v10, *v9, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  v11.i32[0] = *(_DWORD *)(a1 + 28);
  v11.i32[1] = *(_DWORD *)(a1 + 36);
  result = vmul_f32(*(float32x2_t *)(a1 + 40), v11);
  *(float32x2_t *)(a1 + 40) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_19C0FFA2C(uint64_t a1)
{
  int v2;
  void **v3;
  void **v4;

  *(_DWORD *)(a1 + 8) = 0;
  v2 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 44) = v2;
  bzero(**(void ***)(a1 + 56), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 64), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 72), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 80), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 104), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  v3 = *(void ***)(a1 + 112);
  if (v3)
    bzero(*v3, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  v4 = *(void ***)(a1 + 48);
  if (v4)
    bzero(*v4, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
}

float sub_19C0FFB10(uint64_t a1, int a2, float a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float result;

  v4 = *(_QWORD **)(a1 + 72);
  v3 = *(_QWORD **)(a1 + 80);
  v5 = 4 * a2;
  v6 = **(_QWORD **)(a1 + 64);
  *(float *)(v6 + v5) = a3 + (float)((float)(*(float *)(**(_QWORD **)(a1 + 56) + v5) - a3) * *(float *)(a1 + 28));
  v7 = fmaxf(*(float *)(*v4 + v5) * *(float *)(a1 + 36), fabsf(a3));
  *(float *)(*v3 + v5) = v7;
  result = (float)(*(float *)(v6 + v5) * *(float *)(a1 + 24))
         / (float)((float)(*(float *)(a1 + 32) + v7) - (float)(*(float *)(a1 + 40) * (float)(*(float *)(a1 + 32) + v7)));
  *(float *)(**(_QWORD **)(a1 + 104) + v5) = result;
  return result;
}

uint64_t sub_19C0FFB88(uint64_t result, int a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5, double a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int8 *v24;
  __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v48;
  BOOL v50;
  BOOL v52;
  BOOL v54;
  BOOL v56;
  BOOL v58;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  BOOL v66;
  BOOL v68;
  BOOL v70;
  BOOL v72;
  BOOL v74;
  BOOL v76;
  BOOL v78;
  BOOL v80;
  BOOL v82;
  BOOL v84;
  BOOL v86;
  BOOL v88;
  BOOL v89;
  const float *v90;
  float32x4_t v91;
  const float *v92;
  float32x4_t v93;
  const float *v94;
  float32x4_t v95;
  const float *v100;
  float32x4_t *v101;
  float32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;
  float32x4_t v105;
  float32x4_t *v106;
  uint64_t v107;
  float32x4_t *v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  BOOL v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;

  if ((int)a5 < 1)
    return result;
  v9 = **(_QWORD **)(result + 56);
  v10 = **(_QWORD **)(result + 64);
  v11 = **(_QWORD **)(result + 72);
  v12 = **(_QWORD **)(result + 80);
  v13 = **(_QWORD **)(result + 104);
  v14 = a2;
  v15 = a5;
  if (a5 < 0x14)
  {
    v16 = 0;
    goto LABEL_4;
  }
  v16 = 0;
  v31 = result + 24;
  v124 = a2;
  v32 = 4 * a2;
  v33 = v10 + v32;
  v125 = a5;
  v34 = v32 + 4 * a5;
  v35 = v10 + v34;
  v36 = v12 + 4 * v14;
  v37 = v12 + v34;
  v38 = v13 + 4 * v14;
  v39 = v13 + v34;
  v40 = &a4->i8[4 * v15];
  v41 = &a3->i8[4 * v15];
  v42 = result + 44;
  v43 = v9 + 4 * v14;
  v44 = v9 + v34;
  v45 = v11 + 4 * v14;
  v46 = v11 + v34;
  v48 = v10 + v32 < (unint64_t)(v13 + v34) && v38 < v35;
  v50 = v33 < (unint64_t)v40 && v35 > (unint64_t)a4;
  v122 = v50;
  v123 = v48;
  v52 = v33 < (unint64_t)v41 && v35 > (unint64_t)a3;
  v54 = v33 < v42 && v31 < v35;
  v120 = v54;
  v121 = v52;
  v56 = v33 < v44 && v43 < v35;
  v58 = v33 < v46 && v45 < v35;
  v118 = v58;
  v119 = v56;
  v60 = v36 < v39 && v38 < v37;
  v62 = v36 < (unint64_t)v40 && v37 > (unint64_t)a4;
  v64 = v36 < (unint64_t)v41 && v37 > (unint64_t)a3;
  v66 = v36 < v42 && v31 < v37;
  v68 = v36 < v44 && v43 < v37;
  v70 = v36 < v46 && v45 < v37;
  v72 = v38 < (unint64_t)v40 && v39 > (unint64_t)a4;
  v74 = v38 < (unint64_t)v41 && v39 > (unint64_t)a3;
  v76 = v38 < v42 && v31 < v39;
  v78 = v38 < v44 && v43 < v39;
  v80 = v38 < v46 && v45 < v39;
  v82 = v41 > (char *)a4 && v40 > (char *)a3;
  v84 = v42 > (unint64_t)a4 && v31 < (unint64_t)v40;
  v86 = v44 > (unint64_t)a4 && v43 < (unint64_t)v40;
  v88 = v46 > (unint64_t)a4 && v45 < (unint64_t)v40;
  v89 = v36 >= v35 || v33 >= v37;
  if (!v89 || v123 || v122 || v121 || v120 || v119 || v118 || v60 || v62)
  {
    v12 = **(_QWORD **)(result + 80);
    v15 = v125;
    v11 = **(_QWORD **)(result + 72);
    v13 = **(_QWORD **)(result + 104);
    v9 = **(_QWORD **)(result + 56);
    v10 = **(_QWORD **)(result + 64);
    v14 = v124;
LABEL_4:
    v17 = 0;
    v18 = 4 * (v16 + v14);
    v19 = v9 + v18;
    v20 = v10 + v18;
    v21 = v11 + v18;
    v22 = v12 + v18;
    v23 = v13 + v18;
    v24 = &a4->i8[4 * v16];
    v25 = &a3->i8[4 * v16];
    v26 = v15 - v16;
    do
    {
      v27 = 4 * v17;
      v28 = *(float *)&v25[4 * v17];
      *(float *)(v20 + v27) = v28 + (float)((float)(*(float *)(v19 + 4 * v17) - v28) * *(float *)(result + 28));
      v29 = fmaxf(*(float *)(v21 + 4 * v17) * *(float *)(result + 36), fabsf(v28));
      *(float *)(v22 + v27) = v29;
      v30 = (float)(*(float *)(v20 + 4 * v17) * *(float *)(result + 24))
          / (float)((float)(*(float *)(result + 32) + v29)
                  - (float)(*(float *)(result + 40) * (float)(*(float *)(result + 32) + v29)));
      *(float *)(v23 + v27) = v30;
      *(float *)&v24[v27] = v30;
      ++v17;
    }
    while (v26 != v17);
    return result;
  }
  v9 = **(_QWORD **)(result + 56);
  if (v64 || v66 || v68 || v70)
  {
    v12 = **(_QWORD **)(result + 80);
    v15 = v125;
    v11 = **(_QWORD **)(result + 72);
    v13 = **(_QWORD **)(result + 104);
    goto LABEL_164;
  }
  v11 = **(_QWORD **)(result + 72);
  if (v72 || v74 || v76 || v78 || v80 || v82 || v84)
  {
    v12 = **(_QWORD **)(result + 80);
    v15 = v125;
    v13 = **(_QWORD **)(result + 104);
LABEL_164:
    v10 = **(_QWORD **)(result + 64);
    v14 = v124;
    goto LABEL_4;
  }
  v12 = **(_QWORD **)(result + 80);
  v15 = v125;
  v13 = **(_QWORD **)(result + 104);
  v10 = **(_QWORD **)(result + 64);
  v14 = v124;
  if (v86)
    goto LABEL_4;
  if (v88)
    goto LABEL_4;
  v90 = (const float *)(result + 28);
  v91 = vld1q_dup_f32(v90);
  v92 = (const float *)(result + 36);
  v93 = vld1q_dup_f32(v92);
  v16 = v125 & 0xFFFFFFFC;
  v94 = (const float *)(result + 24);
  v95 = vld1q_dup_f32(v94);
  a9.i32[0] = *(_DWORD *)(result + 40);
  __asm { FMOV            V4.4S, #1.0 }
  a9.i32[0] = vsubq_f32(_Q4, a9).u32[0];
  v100 = (const float *)(result + 32);
  v101 = (float32x4_t *)(**(_QWORD **)(result + 104) + v32);
  v102 = (float32x4_t *)(**(_QWORD **)(result + 80) + v32);
  v103 = (float32x4_t *)(**(_QWORD **)(result + 72) + v32);
  v104 = (float32x4_t *)(**(_QWORD **)(result + 64) + v32);
  v105 = vld1q_dup_f32(v100);
  v106 = (float32x4_t *)(**(_QWORD **)(result + 56) + v32);
  v107 = v16;
  v108 = a4;
  v109 = a3;
  do
  {
    v110 = *v109++;
    v111 = v110;
    v112 = *v106++;
    v113 = vabsq_f32(v111);
    v114 = vmlaq_f32(v111, vsubq_f32(v112, v111), v91);
    *v104++ = v114;
    v115 = *v103++;
    v116 = vmaxnmq_f32(vmulq_f32(v115, v93), v113);
    *v102++ = v116;
    v117 = vdivq_f32(vmulq_f32(v114, v95), vmulq_n_f32(vaddq_f32(v105, v116), a9.f32[0]));
    *v101++ = v117;
    *v108++ = v117;
    v107 -= 4;
  }
  while (v107);
  if (v16 != v125)
    goto LABEL_4;
  return result;
}

void sub_19C0FFF60(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 12))
    sub_19C100064(a1);
}

char *sub_19C0FFF70@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[143] < 0)
    return (char *)sub_19C07C6E8((_BYTE *)a2, *((void **)result + 15), *((_QWORD *)result + 16));
  *(_OWORD *)a2 = *(_OWORD *)(result + 120);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 17);
  return result;
}

uint64_t sub_19C0FFF9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

float sub_19C0FFFA4(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

uint64_t sub_19C0FFFAC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E3D1E968;
  sub_19C100620((_QWORD *)a1);
  *(_BYTE *)(a1 + 12) = 0;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  return a1;
}

void sub_19C100008(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E3D1E968;
  sub_19C100620((_QWORD *)a1);
  *(_BYTE *)(a1 + 12) = 0;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  operator delete((void *)a1);
}

void sub_19C100064(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  void *v4;
  _QWORD *v5;
  int v6;
  void *v7;
  _QWORD *v8;
  int v9;
  void *v10;
  _QWORD *v11;
  int v12;
  void *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  _QWORD *v17;
  int v18;
  void *v19;
  _QWORD *v20;
  int v21;
  void *v22;
  _QWORD *v23;
  int v24;
  void *v25;
  _QWORD *v26;
  int v27;
  void *v28;

  v2 = (_QWORD *)operator new();
  v3 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v4 = (void *)operator new[]();
  *v2 = v4;
  bzero(v4, 4 * v3);
  *(_QWORD *)(a1 + 56) = v2;
  v5 = (_QWORD *)operator new();
  v6 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v7 = (void *)operator new[]();
  *v5 = v7;
  bzero(v7, 4 * v6);
  *(_QWORD *)(a1 + 64) = v5;
  v8 = (_QWORD *)operator new();
  v9 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v10 = (void *)operator new[]();
  *v8 = v10;
  bzero(v10, 4 * v9);
  *(_QWORD *)(a1 + 72) = v8;
  v11 = (_QWORD *)operator new();
  v12 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v13 = (void *)operator new[]();
  *v11 = v13;
  bzero(v13, 4 * v12);
  *(_QWORD *)(a1 + 80) = v11;
  v14 = (_QWORD *)operator new();
  v15 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v16 = (void *)operator new[]();
  *v14 = v16;
  bzero(v16, 4 * v15);
  *(_QWORD *)(a1 + 88) = v14;
  v17 = (_QWORD *)operator new();
  v18 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v19 = (void *)operator new[]();
  *v17 = v19;
  bzero(v19, 4 * v18);
  *(_QWORD *)(a1 + 96) = v17;
  v20 = (_QWORD *)operator new();
  v21 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v22 = (void *)operator new[]();
  *v20 = v22;
  bzero(v22, 4 * v21);
  *(_QWORD *)(a1 + 104) = v20;
  v23 = (_QWORD *)operator new();
  v24 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v25 = (void *)operator new[]();
  *v23 = v25;
  bzero(v25, 4 * v24);
  *(_QWORD *)(a1 + 48) = v23;
  v26 = (_QWORD *)operator new();
  v27 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  v28 = (void *)operator new[]();
  *v26 = v28;
  bzero(v28, 4 * v27);
  *(_QWORD *)(a1 + 112) = v26;
  *(_BYTE *)(a1 + 12) = 1;
}

void sub_19C100438(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C10044C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C100460(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C100474(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C100488(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C10049C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C1004B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C1004C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C1004D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float32x2_t sub_19C1004EC(uint64_t a1, const float **a2, _QWORD *a3, float a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t i;
  const void **v11;
  void **v12;
  const float **v13;
  vDSP_Length v14;
  float32x2_t v15;
  float32x2_t result;
  float __B;

  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 20);
  if (a4 != 0.0)
    *(float *)(a1 + 24) = a4;
  v9 = (v8 * v7);
  if (*(_BYTE *)(a1 + 12))
  {
    if ((int)v9 < 1)
      goto LABEL_9;
  }
  else
  {
    sub_19C100064(a1);
    if ((int)v9 < 1)
      goto LABEL_9;
  }
  for (i = 0; i != v9; ++i)
    *(float *)(**(_QWORD **)(a1 + 104) + 4 * i) = (*(float (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 24))(a1, i, *(float *)(*a3 + 4 * i));
LABEL_9:
  v12 = *(void ***)(a1 + 72);
  v11 = *(const void ***)(a1 + 80);
  memmove(**(void ***)(a1 + 56), **(const void ***)(a1 + 64), 4 * (int)v9);
  memmove(*v12, *v11, 4 * (int)v9);
  v13 = *(const float ***)(a1 + 104);
  v14 = *(int *)(a1 + 20) * (uint64_t)*(int *)(a1 + 16);
  __B = 1.0;
  vDSP_vsma(*v13, 1, &__B, *a2, 1, (float *)*a2, 1, v14);
  v15.i32[0] = *(_DWORD *)(a1 + 28);
  v15.i32[1] = *(_DWORD *)(a1 + 36);
  result = vmul_f32(*(float32x2_t *)(a1 + 40), v15);
  *(float32x2_t *)(a1 + 40) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_19C100620(_QWORD *a1)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  void **v12;
  void *v13;
  void **v14;
  void *v15;
  void **v16;
  void *v17;
  void **v18;
  void *v19;

  v2 = (void **)a1[7];
  if (v2)
  {
    if (*v2)
    {
      operator delete[](*v2);
      v3 = (void *)a1[7];
      if (v3)
        operator delete(v3);
    }
  }
  v4 = (void **)a1[8];
  if (v4)
  {
    if (*v4)
    {
      operator delete[](*v4);
      v5 = (void *)a1[8];
      if (v5)
        operator delete(v5);
    }
  }
  v6 = (void **)a1[9];
  if (v6)
  {
    if (*v6)
    {
      operator delete[](*v6);
      v7 = (void *)a1[9];
      if (v7)
        operator delete(v7);
    }
  }
  v8 = (void **)a1[10];
  if (v8)
  {
    if (*v8)
    {
      operator delete[](*v8);
      v9 = (void *)a1[10];
      if (v9)
        operator delete(v9);
    }
  }
  v10 = (void **)a1[11];
  if (v10)
  {
    if (*v10)
    {
      operator delete[](*v10);
      v11 = (void *)a1[11];
      if (v11)
        operator delete(v11);
    }
  }
  v12 = (void **)a1[12];
  if (v12)
  {
    if (*v12)
    {
      operator delete[](*v12);
      v13 = (void *)a1[12];
      if (v13)
        operator delete(v13);
    }
  }
  v14 = (void **)a1[13];
  if (v14)
  {
    if (*v14)
    {
      operator delete[](*v14);
      v15 = (void *)a1[13];
      if (v15)
        operator delete(v15);
    }
  }
  v16 = (void **)a1[6];
  if (v16)
  {
    if (*v16)
    {
      operator delete[](*v16);
      v17 = (void *)a1[6];
      if (v17)
        operator delete(v17);
    }
  }
  v18 = (void **)a1[14];
  if (v18 && *v18)
  {
    operator delete[](*v18);
    v19 = (void *)a1[14];
    if (v19)
      operator delete(v19);
  }
}

uint64_t sub_19C100764(uint64_t a1, int a2, int a3, int a4, int a5)
{
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  sub_19C101290((unsigned int *)a1);
  return a1;
}

void sub_19C1007B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 104) = v5;
    operator delete(v5);
  }
  sub_19C25560C((void **)(v1 + 48), (void **)(v1 + 24), v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_19C1007E8(unsigned int *a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  _QWORD *v34;
  int v35;
  void *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _OWORD *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  int v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char **v105;

  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  a1[4] = *((_DWORD *)a2 + 4);
  v105 = (char **)(a1 + 24);
  *((_QWORD *)a1 + 13) = *((_QWORD *)a1 + 12);
  v5 = (void **)*((_QWORD *)a1 + 9);
  if (v5)
  {
    v6 = v4;
    goto LABEL_28;
  }
  v7 = (_QWORD *)operator new();
  v8 = *a1;
  v9 = (void *)operator new[]();
  v10 = v9;
  *v7 = v9;
  if ((int)v8 >= 1)
    bzero(v9, 4 * v8);
  *((_QWORD *)a1 + 9) = v7;
  v12 = (char *)*((_QWORD *)a1 + 13);
  v11 = *((_QWORD *)a1 + 14);
  if ((unint64_t)v12 >= v11)
  {
    v14 = *v105;
    v15 = v12 - *v105;
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      goto LABEL_105;
    v18 = v11 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        goto LABEL_106;
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v10;
      v13 = (uint64_t)(v21 + 1);
      v23 = (char *)(v12 - v14);
      if (v12 == v14)
        goto LABEL_25;
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      v22 = 0;
      *(_QWORD *)(8 * v16) = v10;
      v13 = 8 * v16 + 8;
      v23 = (char *)(v12 - v14);
      if (v12 == v14)
      {
LABEL_25:
        *((_QWORD *)a1 + 12) = v21;
        *((_QWORD *)a1 + 13) = v13;
        *((_QWORD *)a1 + 14) = v22;
        if (v12)
          operator delete(v12);
        goto LABEL_27;
      }
    }
    v24 = (unint64_t)(v23 - 8);
    if (v24 < 0x58)
      goto LABEL_109;
    if ((unint64_t)(v12 - v20 - v15) < 0x20)
      goto LABEL_109;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v12[-v26];
    v21 = (_QWORD *)((char *)v21 - v26);
    v28 = &v20[8 * v16 - 16];
    v29 = v12 - 16;
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    v12 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_109:
      do
      {
        v32 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v21 = v32;
      }
      while (v12 != v14);
    }
    v12 = *v105;
    goto LABEL_25;
  }
  *(_QWORD *)v12 = v10;
  v13 = (uint64_t)(v12 + 8);
LABEL_27:
  *((_QWORD *)a1 + 13) = v13;
  v5 = (void **)*((_QWORD *)a1 + 9);
  v6 = *a1;
LABEL_28:
  memmove(*v5, **((const void ***)a2 + 9), 4 * v6);
  v33 = (void **)*((_QWORD *)a1 + 10);
  if (v33)
    goto LABEL_52;
  v34 = (_QWORD *)operator new();
  v35 = *a1 * a1[1];
  v36 = (void *)operator new[]();
  *v34 = v36;
  bzero(v36, 4 * v35);
  *((_QWORD *)a1 + 10) = v34;
  v38 = (char *)*((_QWORD *)a1 + 13);
  v37 = *((_QWORD *)a1 + 14);
  if ((unint64_t)v38 >= v37)
  {
    v40 = *v105;
    v41 = v38 - *v105;
    v42 = v41 >> 3;
    v43 = (v41 >> 3) + 1;
    if (!(v43 >> 61))
    {
      v44 = v37 - (_QWORD)v40;
      if (v44 >> 2 > v43)
        v43 = v44 >> 2;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      if (!v45)
      {
        v46 = 0;
        v47 = (_QWORD *)(8 * v42);
        v48 = 0;
        *(_QWORD *)(8 * v42) = v36;
        v39 = 8 * v42 + 8;
        v49 = (char *)(v38 - v40);
        if (v38 == v40)
          goto LABEL_49;
        goto LABEL_42;
      }
      if (!(v45 >> 61))
      {
        v46 = operator new(8 * v45);
        v47 = &v46[8 * v42];
        v48 = &v46[8 * v45];
        *v47 = v36;
        v39 = (uint64_t)(v47 + 1);
        v49 = (char *)(v38 - v40);
        if (v38 == v40)
        {
LABEL_49:
          *((_QWORD *)a1 + 12) = v47;
          *((_QWORD *)a1 + 13) = v39;
          *((_QWORD *)a1 + 14) = v48;
          if (v38)
            operator delete(v38);
          goto LABEL_51;
        }
LABEL_42:
        v50 = (unint64_t)(v49 - 8);
        if (v50 < 0x58)
          goto LABEL_110;
        if ((unint64_t)(v38 - v46 - v41) < 0x20)
          goto LABEL_110;
        v51 = (v50 >> 3) + 1;
        v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
        v53 = &v38[-v52];
        v47 = (_QWORD *)((char *)v47 - v52);
        v54 = &v46[8 * v42 - 16];
        v55 = v38 - 16;
        v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 4;
        }
        while (v56);
        v38 = v53;
        if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_110:
          do
          {
            v58 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v47 = v58;
          }
          while (v38 != v40);
        }
        v38 = *v105;
        goto LABEL_49;
      }
LABEL_106:
      sub_19C07C7FC();
    }
LABEL_105:
    sub_19C07DA0C();
  }
  *(_QWORD *)v38 = v36;
  v39 = (uint64_t)(v38 + 8);
LABEL_51:
  *((_QWORD *)a1 + 13) = v39;
  v33 = (void **)*((_QWORD *)a1 + 10);
LABEL_52:
  memmove(*v33, **((const void ***)a2 + 10), 4 * (int)(a1[1] * *a1));
  v59 = *((_QWORD *)a1 + 3);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  v60 = a1[2];
  v61 = (*((_QWORD *)a1 + 4) - v59) >> 3;
  if (v60 <= v61)
  {
    if (v60 < v61)
      *((_QWORD *)a1 + 4) = v59 + 8 * v60;
  }
  else
  {
    sub_19C098930((void **)a1 + 3, v60 - v61);
    v60 = a1[2];
  }
  if (v60 > 0)
  {
    v62 = 0;
    while (1)
    {
      v65 = *a1;
      v66 = (void *)operator new[]();
      v67 = v66;
      if ((int)v65 >= 1)
        bzero(v66, 4 * v65);
      v68 = *((_QWORD *)a1 + 3);
      *(_QWORD *)(v68 + 8 * v62) = v67;
      memmove(v67, *(const void **)(*((_QWORD *)a2 + 3) + 8 * v62), 4 * (int)*a1);
      v69 = *(_QWORD *)(v68 + 8 * v62);
      v71 = (char *)*((_QWORD *)a1 + 13);
      v70 = *((_QWORD *)a1 + 14);
      if ((unint64_t)v71 >= v70)
        break;
      *(_QWORD *)v71 = v69;
      v63 = (uint64_t)(v71 + 8);
LABEL_59:
      *((_QWORD *)a1 + 13) = v63;
      ++v62;
      v64 = (int)a1[2];
      if (v62 >= (uint64_t)v64)
        goto LABEL_84;
    }
    v72 = *v105;
    v73 = v71 - *v105;
    v74 = v73 >> 3;
    v75 = (v73 >> 3) + 1;
    if (v75 >> 61)
      goto LABEL_105;
    v76 = v70 - (_QWORD)v72;
    if (v76 >> 2 > v75)
      v75 = v76 >> 2;
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
      v77 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v77 = v75;
    if (v77)
    {
      if (v77 >> 61)
        goto LABEL_106;
      v78 = operator new(8 * v77);
      v79 = &v78[8 * v74];
      *v79 = v69;
      v63 = (uint64_t)(v79 + 1);
      if (v71 == v72)
        goto LABEL_81;
    }
    else
    {
      v78 = 0;
      v79 = (_QWORD *)(8 * v74);
      *(_QWORD *)(8 * v74) = v69;
      v63 = 8 * v74 + 8;
      if (v71 == v72)
      {
LABEL_81:
        *((_QWORD *)a1 + 12) = v79;
        *((_QWORD *)a1 + 13) = v63;
        *((_QWORD *)a1 + 14) = &v78[8 * v77];
        if (v71)
          operator delete(v71);
        goto LABEL_59;
      }
    }
    v80 = v71 - 8 - v72;
    if (v80 < 0x58)
      goto LABEL_111;
    if ((unint64_t)(v71 - &v78[v73]) < 0x20)
      goto LABEL_111;
    v81 = (v80 >> 3) + 1;
    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
    v83 = &v71[-v82];
    v79 = (_QWORD *)((char *)v79 - v82);
    v84 = &v78[8 * v74 - 16];
    v85 = (__int128 *)(v71 - 16);
    v86 = v81 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v87 = *v85;
      *(v84 - 1) = *(v85 - 1);
      *v84 = v87;
      v84 -= 2;
      v85 -= 2;
      v86 -= 4;
    }
    while (v86);
    v71 = v83;
    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_111:
      do
      {
        v88 = *((_QWORD *)v71 - 1);
        v71 -= 8;
        *--v79 = v88;
      }
      while (v71 != v72);
    }
    v71 = *v105;
    goto LABEL_81;
  }
  v64 = v60;
LABEL_84:
  v90 = *((_QWORD *)a1 + 6);
  v89 = *((_QWORD *)a1 + 7);
  v91 = a1 + 12;
  v92 = 0xAAAAAAAAAAAAAAABLL * ((v89 - v90) >> 3);
  if (v64 <= v92)
  {
    if (v64 < v92)
    {
      v93 = v90 + 24 * (int)v64;
      if (v89 != v93)
      {
        v94 = *((_QWORD *)a1 + 7);
        do
        {
          v96 = *(void **)(v94 - 24);
          v94 -= 24;
          v95 = v96;
          if (v96)
          {
            *(_QWORD *)(v89 - 16) = v95;
            operator delete(v95);
          }
          v89 = v94;
        }
        while (v94 != v93);
      }
      *((_QWORD *)a1 + 7) = v93;
    }
  }
  else
  {
    sub_19C167E70((uint64_t)(a1 + 12), v64 - v92);
  }
  if ((int)a1[2] >= 1)
  {
    v97 = 0;
    v98 = a1[3];
    do
    {
      v99 = (_QWORD *)(*v91 + 24 * v97);
      v100 = (uint64_t)(v99[1] - *v99) >> 2;
      if (v98 <= v100)
      {
        if (v98 < v100)
          v99[1] = *v99 + 4 * v98;
      }
      else
      {
        sub_19C101928((uint64_t)v99, v98 - v100);
        v98 = a1[3];
      }
      if (v98 >= 1)
      {
        v101 = 0;
        v102 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 24 * v97);
        v103 = *(_QWORD *)(*v91 + 24 * v97);
        do
        {
          *(_DWORD *)(v103 + 4 * v101) = *(_DWORD *)(v102 + 4 * v101);
          ++v101;
        }
        while (v101 < (int)a1[3]);
        v98 = a1[3];
      }
      ++v97;
    }
    while (v97 < (int)a1[2]);
  }
  return a1;
}

void sub_19C100F3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C100F50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C100F64(_QWORD *result, int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  unsigned __int8 v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;

  if (a2 >= 1)
  {
    v3 = 0;
    v4 = a2;
    v5 = a3 * 4.6566e-10;
    do
    {
      v6 = atomic_load((unsigned __int8 *)&qword_1EE419F08);
      if ((v6 & 1) == 0)
      {
        v34 = result;
        v30 = a3;
        v32 = v5;
        v26 = v4;
        v28 = v3;
        v13 = __cxa_guard_acquire(&qword_1EE419F08);
        v4 = v26;
        v3 = v28;
        v5 = v32;
        a3 = v30;
        v14 = v13;
        result = v34;
        if (v14)
        {
          v15 = 5489;
          dword_1EE419FB0[0] = 5489;
          v16 = 55;
          v17 = 1;
          do
          {
            v18 = 1812433253 * (v15 ^ (v15 >> 30));
            v15 = v18 + v17;
            dword_1EE419ED8[v16] = v16 + v18 - 54;
            ++v17;
            ++v16;
          }
          while (v16 != 678);
          qword_1EE41A970 = 0;
          __cxa_guard_release(&qword_1EE419F08);
          a3 = v30;
          result = v34;
          v4 = v26;
          v3 = v28;
          v5 = v32;
        }
      }
      v7 = (qword_1EE41A970 + 1) % 0x270uLL;
      v8 = dword_1EE419FB0[v7];
      v9 = dword_1EE419FB0[(qword_1EE41A970 + 397) % 0x270uLL] ^ ((v8 & 0x7FFFFFFE | dword_1EE419FB0[qword_1EE41A970] & 0x80000000) >> 1);
      v10 = v9 ^ (v8 << 31 >> 31) & 0x9908B0DF;
      dword_1EE419FB0[qword_1EE41A970] = v10;
      qword_1EE41A970 = v7;
      v11 = atomic_load((unsigned __int8 *)&qword_1EE419F08);
      if ((v11 & 1) == 0)
      {
        v35 = result;
        v31 = a3;
        v33 = v5;
        v27 = v4;
        v29 = v3;
        v25 = v9 ^ (v8 << 31 >> 31) & 0x9908B0DF;
        v19 = __cxa_guard_acquire(&qword_1EE419F08);
        v10 = v25;
        v4 = v27;
        v3 = v29;
        v5 = v33;
        a3 = v31;
        v20 = v19;
        result = v35;
        if (v20)
        {
          v21 = 5489;
          dword_1EE419FB0[0] = 5489;
          v22 = 55;
          v23 = 1;
          do
          {
            v24 = 1812433253 * (v21 ^ (v21 >> 30));
            v21 = v24 + v23;
            dword_1EE419ED8[v22] = v22 + v24 - 54;
            ++v23;
            ++v22;
          }
          while (v22 != 678);
          qword_1EE41A970 = 0;
          __cxa_guard_release(&qword_1EE419F08);
          a3 = v31;
          result = v35;
          v4 = v27;
          v3 = v29;
          v5 = v33;
          v10 = v25;
        }
      }
      v12 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
      *(_WORD *)(*result + 2 * v3++) = (int)(float)-(float)(a3
                                                          - (float)(v5
                                                                  * (float)((v12 << 15) & 0xEFC60000 ^ v12 ^ (((v12 << 15) & 0xEFC60000 ^ v12) >> 18))));
    }
    while (v3 != v4);
  }
  return result;
}

void sub_19C101290(unsigned int *a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int64_t v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  int v40;
  uint64_t v41;
  uint64_t i;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  int v50;
  void *v51;
  char **v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  _QWORD *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;

  v4 = *((_QWORD *)a1 + 3);
  v2 = a1 + 6;
  v3 = v4;
  v5 = *(v2 - 4);
  v6 = (*((_QWORD *)v2 + 1) - v4) >> 3;
  if (v5 <= v6)
  {
    if (v5 < v6)
      *((_QWORD *)a1 + 4) = v3 + 8 * v5;
  }
  else
  {
    sub_19C098930((void **)v2, v5 - v6);
    v5 = a1[2];
  }
  if (v5 > 0)
  {
    v7 = 0;
    v8 = (char **)(a1 + 24);
    while (1)
    {
      v11 = *a1;
      v12 = (void *)operator new[]();
      v13 = v12;
      if ((int)v11 >= 1)
        bzero(v12, 4 * v11);
      *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v7) = v13;
      v15 = (char *)*((_QWORD *)a1 + 13);
      v14 = *((_QWORD *)a1 + 14);
      if ((unint64_t)v15 >= v14)
        break;
      *(_QWORD *)v15 = v13;
      v9 = (uint64_t)(v15 + 8);
LABEL_8:
      *((_QWORD *)a1 + 13) = v9;
      ++v7;
      v10 = (int)a1[2];
      if (v7 >= (uint64_t)v10)
        goto LABEL_33;
    }
    v16 = *v8;
    v17 = v15 - *v8;
    v18 = v17 >> 3;
    v19 = (v17 >> 3) + 1;
    if (v19 >> 61)
      sub_19C07DA0C();
    v20 = v14 - (_QWORD)v16;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        goto LABEL_100;
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      *v23 = v13;
      v9 = (uint64_t)(v23 + 1);
      if (v15 == v16)
        goto LABEL_30;
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      *(_QWORD *)(8 * v18) = v13;
      v9 = 8 * v18 + 8;
      if (v15 == v16)
      {
LABEL_30:
        *((_QWORD *)a1 + 12) = v23;
        *((_QWORD *)a1 + 13) = v9;
        *((_QWORD *)a1 + 14) = &v22[8 * v21];
        if (v15)
          operator delete(v15);
        goto LABEL_8;
      }
    }
    v24 = v15 - 8 - v16;
    if (v24 < 0x58)
      goto LABEL_104;
    if ((unint64_t)(v15 - &v22[v17]) < 0x20)
      goto LABEL_104;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v15[-v26];
    v23 = (_QWORD *)((char *)v23 - v26);
    v28 = &v22[8 * v18 - 16];
    v29 = (__int128 *)(v15 - 16);
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *v29;
      *(v28 - 1) = *(v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 2;
      v30 -= 4;
    }
    while (v30);
    v15 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_104:
      do
      {
        v32 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v23 = v32;
      }
      while (v15 != v16);
    }
    v15 = *v8;
    goto LABEL_30;
  }
  v10 = v5;
LABEL_33:
  v34 = *((_QWORD *)a1 + 6);
  v33 = *((_QWORD *)a1 + 7);
  v35 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v34) >> 3);
  if (v10 <= v35)
  {
    if (v10 < v35)
    {
      v36 = v34 + 24 * (int)v10;
      if (v33 != v36)
      {
        v37 = *((_QWORD *)a1 + 7);
        do
        {
          v39 = *(void **)(v37 - 24);
          v37 -= 24;
          v38 = v39;
          if (v39)
          {
            *(_QWORD *)(v33 - 16) = v38;
            operator delete(v38);
          }
          v33 = v37;
        }
        while (v37 != v36);
      }
      *((_QWORD *)a1 + 7) = v36;
    }
  }
  else
  {
    sub_19C167E70((uint64_t)(a1 + 12), v10 - v35);
  }
  v40 = a1[2];
  if (v40 >= 1)
  {
    v41 = 0;
    for (i = 0; i < v40; ++i)
    {
      v43 = (_QWORD *)(*((_QWORD *)a1 + 6) + v41);
      v44 = (int)a1[3];
      v45 = (uint64_t)(v43[1] - *v43) >> 2;
      if (v44 > v45)
      {
        sub_19C101928((uint64_t)v43, v44 - v45);
        v40 = a1[2];
      }
      else if (v44 < v45)
      {
        v43[1] = *v43 + 4 * v44;
      }
      v41 += 24;
    }
  }
  *((_QWORD *)a1 + 9) = 0;
  *((_QWORD *)a1 + 10) = 0;
  if (!*((_BYTE *)a1 + 88))
  {
    v46 = (_QWORD *)operator new();
    v47 = *a1;
    v48 = (void *)operator new[]();
    *v46 = v48;
    if ((int)v47 >= 1)
      bzero(v48, 4 * v47);
    *((_QWORD *)a1 + 9) = v46;
    v49 = (_QWORD *)operator new();
    v50 = *a1 * a1[1];
    v51 = (void *)operator new[]();
    *v49 = v51;
    bzero(v51, 4 * v50);
    *((_QWORD *)a1 + 10) = v49;
    v52 = (char **)(a1 + 24);
    v53 = **((_QWORD **)a1 + 9);
    v55 = (char *)*((_QWORD *)a1 + 13);
    v54 = *((_QWORD *)a1 + 14);
    if ((unint64_t)v55 < v54)
    {
      *(_QWORD *)v55 = v53;
      v56 = v55 + 8;
      goto LABEL_74;
    }
    v57 = *v52;
    v58 = v55 - *v52;
    v59 = v58 >> 3;
    v60 = (v58 >> 3) + 1;
    if (v60 >> 61)
      goto LABEL_101;
    v61 = v54 - (_QWORD)v57;
    if (v61 >> 2 > v60)
      v60 = v61 >> 2;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v62 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      if (v62 >> 61)
        goto LABEL_100;
      v63 = operator new(8 * v62);
      v64 = &v63[8 * v59];
      v65 = &v63[8 * v62];
      *v64 = v53;
      v56 = (char *)(v64 + 1);
      v66 = (char *)(v55 - v57);
      if (v55 == v57)
        goto LABEL_72;
    }
    else
    {
      v63 = 0;
      v64 = (_QWORD *)(8 * v59);
      v65 = 0;
      *(_QWORD *)(8 * v59) = v53;
      v56 = (char *)(8 * v59 + 8);
      v66 = (char *)(v55 - v57);
      if (v55 == v57)
      {
LABEL_72:
        *((_QWORD *)a1 + 12) = v64;
        *((_QWORD *)a1 + 13) = v56;
        *((_QWORD *)a1 + 14) = v65;
        if (v55)
          operator delete(v55);
LABEL_74:
        *((_QWORD *)a1 + 13) = v56;
        v76 = **((_QWORD **)a1 + 10);
        v77 = *((_QWORD *)a1 + 14);
        if ((unint64_t)v56 < v77)
        {
          *(_QWORD *)v56 = v76;
          v78 = (uint64_t)(v56 + 8);
LABEL_97:
          *((_QWORD *)a1 + 13) = v78;
          return;
        }
        v79 = *v52;
        v80 = v56 - *v52;
        v81 = v80 >> 3;
        v82 = (v80 >> 3) + 1;
        if (!(v82 >> 61))
        {
          v83 = v77 - (_QWORD)v79;
          if (v83 >> 2 > v82)
            v82 = v83 >> 2;
          if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
            v84 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v84 = v82;
          if (!v84)
          {
            v85 = 0;
            v86 = (_QWORD *)(8 * v81);
            v87 = 0;
            *(_QWORD *)(8 * v81) = v76;
            v78 = 8 * v81 + 8;
            v88 = (char *)(v56 - v79);
            if (v56 != v79)
            {
LABEL_85:
              v89 = (unint64_t)(v88 - 8);
              if (v89 >= 0x58)
              {
                if ((unint64_t)(v56 - v85 - v80) >= 0x20)
                {
                  v91 = (v89 >> 3) + 1;
                  v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                  v90 = &v56[-v92];
                  v86 = (_QWORD *)((char *)v86 - v92);
                  v93 = &v85[8 * v81 - 16];
                  v94 = v56 - 16;
                  v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v96 = *(_OWORD *)v94;
                    *(v93 - 1) = *((_OWORD *)v94 - 1);
                    *v93 = v96;
                    v93 -= 2;
                    v94 -= 32;
                    v95 -= 4;
                  }
                  while (v95);
                  if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_95:
                    v56 = (char *)*((_QWORD *)a1 + 12);
                    *((_QWORD *)a1 + 12) = v86;
                    *((_QWORD *)a1 + 13) = v78;
                    *((_QWORD *)a1 + 14) = v87;
                    if (!v56)
                      goto LABEL_97;
LABEL_96:
                    operator delete(v56);
                    goto LABEL_97;
                  }
                }
                else
                {
                  v90 = v56;
                }
              }
              else
              {
                v90 = v56;
              }
              do
              {
                v97 = *((_QWORD *)v90 - 1);
                v90 -= 8;
                *--v86 = v97;
              }
              while (v90 != v79);
              goto LABEL_95;
            }
LABEL_88:
            *((_QWORD *)a1 + 12) = v86;
            *((_QWORD *)a1 + 13) = v78;
            *((_QWORD *)a1 + 14) = v87;
            goto LABEL_96;
          }
          if (!(v84 >> 61))
          {
            v85 = operator new(8 * v84);
            v86 = &v85[8 * v81];
            v87 = &v85[8 * v84];
            *v86 = v76;
            v78 = (uint64_t)(v86 + 1);
            v88 = (char *)(v56 - v79);
            if (v56 != v79)
              goto LABEL_85;
            goto LABEL_88;
          }
LABEL_100:
          sub_19C07C7FC();
        }
LABEL_101:
        sub_19C07DA0C();
      }
    }
    v67 = (unint64_t)(v66 - 8);
    if (v67 < 0x58)
      goto LABEL_105;
    if ((unint64_t)(v55 - &v63[v58]) < 0x20)
      goto LABEL_105;
    v68 = (v67 >> 3) + 1;
    v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
    v70 = &v55[-v69];
    v64 = (_QWORD *)((char *)v64 - v69);
    v71 = &v63[8 * v59 - 16];
    v72 = v55 - 16;
    v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v74 = *(_OWORD *)v72;
      *(v71 - 1) = *((_OWORD *)v72 - 1);
      *v71 = v74;
      v71 -= 2;
      v72 -= 32;
      v73 -= 4;
    }
    while (v73);
    v55 = v70;
    if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_105:
      do
      {
        v75 = *((_QWORD *)v55 - 1);
        v55 -= 8;
        *--v64 = v75;
      }
      while (v55 != v57);
    }
    v55 = *v52;
    goto LABEL_72;
  }
}

void sub_19C101900(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C101914(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C101928(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_19C07DA0C();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_19C07C7FC();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *sub_19C101AC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  v3 = a1[12];
  v2 = a1[13];
  if (v2 == v3)
  {
    v3 = a1[13];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v3 = a1[12];
        v2 = a1[13];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[13] = v3;
  v6 = (void *)a1[10];
  if (v6)
  {
    operator delete(v6);
    a1[10] = 0;
  }
  v7 = (void *)a1[9];
  if (v7)
  {
    operator delete(v7);
    a1[9] = 0;
  }
  v8 = (void *)a1[12];
  if (v8)
  {
    a1[13] = v8;
    operator delete(v8);
  }
  v9 = a1[6];
  if (v9)
  {
    v10 = a1[7];
    v11 = (void *)a1[6];
    if (v10 != v9)
    {
      v12 = a1[7];
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)a1[6];
    }
    a1[7] = v9;
    operator delete(v11);
  }
  v15 = (void *)a1[3];
  if (v15)
  {
    a1[4] = v15;
    operator delete(v15);
  }
  return a1;
}

_BYTE *sub_19C101BB8(_BYTE *result, uint64_t *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  int v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  __int16 *v28;
  __int16 v29;

  if (!a2)
    goto LABEL_41;
  if (a3 == 3)
  {
    v6 = *((int *)a2 + 18);
    v7 = *a2;
    v8 = (unsigned __int8 *)(*a2 + v6);
    v9 = *a2 + a2[1] - 1;
    if ((unint64_t)v8 <= v9)
    {
      v10 = *v8;
      LODWORD(v6) = v6 + 1;
      for (*((_DWORD *)a2 + 18) = v6; v10; --v10)
      {
        if (v7 + (int)v6 <= v9)
        {
          LODWORD(v6) = v6 + 1;
          *((_DWORD *)a2 + 18) = v6;
        }
      }
    }
    if ((v6 & 0xF) != 0)
LABEL_6:
      sub_19C2210D4(19);
  }
  else if ((*result & 0xF) != 0)
  {
    goto LABEL_6;
  }
  if (a4)
  {
    *(_QWORD *)result = 0;
    if (a5 != 8)
    {
      if (a5 == 16)
      {
        a6 *= 2;
      }
      else
      {
        if (a5 != 32)
          sub_19C2210D4(46);
        a6 *= 4;
      }
    }
    v19 = *((int *)a2 + 18);
    v11 = (_WORD *)(*a2 + v19);
    *(_QWORD *)result = v11;
    *((_DWORD *)a2 + 18) = v19 + a6;
    goto LABEL_26;
  }
  if (a5 != 8)
  {
    if (a5 == 16)
    {
      v11 = *(_WORD **)result;
      v12 = 2 * a6;
      if (a6 >= 1)
      {
        v24 = *a2;
        v25 = *a2 + a2[1] - 4;
        v26 = *((_DWORD *)a2 + 18);
        v27 = a6;
        while (1)
        {
          v28 = (__int16 *)(v24 + v26);
          if ((unint64_t)v28 > v25)
            break;
          v29 = *v28;
          *((_DWORD *)a2 + 18) = ++v26;
          *v11++ = v29;
          if (!--v27)
            goto LABEL_27;
        }
LABEL_40:
        sub_19C2210D4(25);
      }
    }
    else
    {
      if (a5 != 32)
        sub_19C2210D4(45);
      v11 = *(_WORD **)result;
      v12 = 4 * a6;
      if (a6 >= 1)
      {
        v13 = *a2;
        v14 = *a2 + a2[1] - 4;
        v15 = *((_DWORD *)a2 + 18);
        v16 = a6;
        while (1)
        {
          v17 = (int *)(v13 + v15);
          if ((unint64_t)v17 > v14)
            goto LABEL_40;
          v18 = *v17;
          v15 += 4;
          *((_DWORD *)a2 + 18) = v15;
          *(_DWORD *)v11 = v18;
          v11 += 2;
          if (!--v16)
            goto LABEL_27;
        }
      }
    }
    a6 = v12;
    goto LABEL_26;
  }
  v11 = *(_WORD **)result;
  if (a6 >= 1)
  {
    v20 = a6;
    do
    {
      v21 = *((int *)a2 + 18);
      v22 = (char *)(*a2 + v21);
      if ((unint64_t)v22 > *a2 + a2[1] - 1)
        goto LABEL_40;
      v23 = *v22;
      *((_DWORD *)a2 + 18) = v21 + 1;
      *(_BYTE *)v11 = v23;
      v11 = (_WORD *)((char *)v11 + 1);
      --v20;
    }
    while (v20);
    v11 = *(_WORD **)result;
  }
LABEL_26:
  v12 = a6;
  if (!v11)
    goto LABEL_41;
LABEL_27:
  if (!v12)
LABEL_41:
    sub_19C2210D4(9);
  return result;
}

_BYTE *sub_19C101DB0(_BYTE *result, uint64_t *a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  int v11;
  int v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  __int16 *v29;
  __int16 v30;

  if (!a2)
    goto LABEL_41;
  if (a3 == 3)
  {
    v7 = *((int *)a2 + 18);
    v8 = *a2;
    v9 = (unsigned __int8 *)(*a2 + v7);
    v10 = *a2 + a2[1] - 1;
    if ((unint64_t)v9 <= v10)
    {
      v11 = *v9;
      LODWORD(v7) = v7 + 1;
      for (*((_DWORD *)a2 + 18) = v7; v11; --v11)
      {
        if (v8 + (int)v7 <= v10)
        {
          LODWORD(v7) = v7 + 1;
          *((_DWORD *)a2 + 18) = v7;
        }
      }
    }
    if ((v7 & 0xF) != 0)
LABEL_6:
      sub_19C2210D4(18);
  }
  else if ((*result & 0xF) != 0)
  {
    goto LABEL_6;
  }
  if (a4)
  {
    *(_QWORD *)result = 0;
    switch(a5)
    {
      case 8:
        v12 = a7 * a6;
        break;
      case 16:
        v12 = 2 * a7 * a6;
        break;
      case 32:
        v12 = 4 * a7 * a6;
        break;
      default:
        sub_19C2210D4(46);
    }
    v20 = *((int *)a2 + 18);
    v13 = (_WORD *)(*a2 + v20);
    *(_QWORD *)result = v13;
    *((_DWORD *)a2 + 18) = v20 + v12;
    goto LABEL_27;
  }
  switch(a5)
  {
    case 8:
      v13 = *(_WORD **)result;
      v12 = a7 * a6;
      if (a7 * a6 >= 1)
      {
        v21 = (a7 * a6);
        do
        {
          v22 = *((int *)a2 + 18);
          v23 = (char *)(*a2 + v22);
          if ((unint64_t)v23 > *a2 + a2[1] - 1)
            goto LABEL_40;
          v24 = *v23;
          *((_DWORD *)a2 + 18) = v22 + 1;
          *(_BYTE *)v13 = v24;
          v13 = (_WORD *)((char *)v13 + 1);
          --v21;
        }
        while (v21);
        v13 = *(_WORD **)result;
      }
      break;
    case 16:
      v13 = *(_WORD **)result;
      v25 = (a7 * a6);
      v12 = 2 * v25;
      if ((int)v25 < 1)
        break;
      v26 = *a2;
      v27 = *a2 + a2[1] - 4;
      v28 = *((_DWORD *)a2 + 18);
      while (1)
      {
        v29 = (__int16 *)(v26 + v28);
        if ((unint64_t)v29 > v27)
          break;
        v30 = *v29;
        *((_DWORD *)a2 + 18) = ++v28;
        *v13++ = v30;
        if (!--v25)
          goto LABEL_28;
      }
LABEL_40:
      sub_19C2210D4(25);
    case 32:
      v13 = *(_WORD **)result;
      v14 = (a7 * a6);
      v12 = 4 * v14;
      if ((int)v14 >= 1)
      {
        v15 = *a2;
        v16 = *a2 + a2[1] - 4;
        v17 = *((_DWORD *)a2 + 18);
        while (1)
        {
          v18 = (int *)(v15 + v17);
          if ((unint64_t)v18 > v16)
            goto LABEL_40;
          v19 = *v18;
          v17 += 4;
          *((_DWORD *)a2 + 18) = v17;
          *(_DWORD *)v13 = v19;
          v13 += 2;
          if (!--v14)
            goto LABEL_28;
        }
      }
      break;
    default:
      sub_19C2210D4(45);
  }
LABEL_27:
  if (!v13)
    goto LABEL_41;
LABEL_28:
  if (!v12)
LABEL_41:
    sub_19C2210D4(9);
  return result;
}

void sub_19C101FB0(int16x4_t **a1, FILE *a2, int *a3, int a4, int a5, unsigned int a6, int a7)
{
  int v7;

  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0)
    sub_19C2210D4(23);
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
        v7 = a7;
        goto LABEL_8;
      }
      goto LABEL_18;
    case 16:
      if (a6 == 32)
      {
        v7 = a7;
        goto LABEL_8;
      }
LABEL_18:
      sub_19C2210D4(45);
    case 32:
      switch(a6)
      {
        case 0x20u:
          v7 = a7;
LABEL_8:
          sub_19C10214C(a1, a2, a3, a4, v7);
          return;
        case 8u:
          sub_19C10232C((int)a1, a2, a3, a4);
        case 0x10u:
          sub_19C102260((int)a1, a2, a3, a4);
      }
      break;
  }
}

void sub_19C102074(int16x4_t **a1, FILE *a2, int *a3, int a4, int a5, unsigned int a6, int a7, int a8)
{
  int v8;
  int v9;

  if (a6 > 0x20 || ((1 << a6) & 0x100010100) == 0)
    sub_19C2210D4(23);
  switch(a5)
  {
    case 8:
      if (a6 == 32)
      {
        v8 = a7;
        v9 = a8;
        goto LABEL_8;
      }
      goto LABEL_18;
    case 16:
      if (a6 == 32)
      {
        v8 = a7;
        v9 = a8;
        goto LABEL_8;
      }
LABEL_18:
      sub_19C2210D4(45);
    case 32:
      switch(a6)
      {
        case 0x20u:
          v8 = a7;
          v9 = a8;
LABEL_8:
          sub_19C10271C(a1, a2, a3, a4, v8, v9);
          return;
        case 8u:
          sub_19C102904((int)a1, a2, a3, a4);
        case 0x10u:
          sub_19C10282C((int)a1, a2, a3, a4);
      }
      break;
  }
}

void sub_19C10214C(int16x4_t **a1, FILE *__stream, int *a3, int a4, int a5)
{
  int v9;
  int v10;
  int8x16_t *v11;
  int8x16_t *v12;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v9 = *a3 & 0xF;
    if (*a3 <= 0)
      v9 = -(-*a3 & 0xF);
    if (v9 >= 15)
      v10 = 16;
    else
      v10 = 15 - v9;
    sub_19C221368(__stream, a3, v10);
    sub_19C2213F8((size_t)__stream, a3, 85, v10);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(17);
  }
  v11 = (int8x16_t *)operator new[]();
  v12 = v11;
  if (a5 >= 1)
    bzero(v11, 4 * a5);
  sub_19C221844(__stream, a3, *a1, v12, a5);
  operator delete[](v12);
}

void sub_19C102260(int a1, FILE *__stream, int *a3, int a4)
{
  int v6;
  int v7;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v6 = *a3 & 0xF;
    if (*a3 <= 0)
      v6 = -(-*a3 & 0xF);
    if (v6 >= 15)
      v7 = 16;
    else
      v7 = 15 - v6;
    sub_19C221368(__stream, a3, v7);
    sub_19C2213F8((size_t)__stream, a3, 85, v7);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(17);
  }
  operator new[]();
  sub_19C2210D4(67);
}

void sub_19C10232C(int a1, FILE *__stream, int *a3, int a4)
{
  int v6;
  int v7;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v6 = *a3 & 0xF;
    if (*a3 <= 0)
      v6 = -(-*a3 & 0xF);
    if (v6 >= 15)
      v7 = 16;
    else
      v7 = 15 - v6;
    sub_19C221368(__stream, a3, v7);
    sub_19C2213F8((size_t)__stream, a3, 85, v7);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(17);
  }
  operator new[]();
  sub_19C2210D4(67);
}

_QWORD *sub_19C1023F0(_QWORD *result, int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  unsigned __int8 v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;

  if (a2 >= 1)
  {
    v3 = 0;
    v4 = a2;
    v5 = a3 * 4.6566e-10;
    do
    {
      v6 = atomic_load((unsigned __int8 *)&qword_1EE419F08);
      if ((v6 & 1) == 0)
      {
        v34 = result;
        v30 = a3;
        v32 = v5;
        v26 = v4;
        v28 = v3;
        v13 = __cxa_guard_acquire(&qword_1EE419F08);
        v4 = v26;
        v3 = v28;
        v5 = v32;
        a3 = v30;
        v14 = v13;
        result = v34;
        if (v14)
        {
          v15 = 5489;
          dword_1EE419FB0[0] = 5489;
          v16 = 55;
          v17 = 1;
          do
          {
            v18 = 1812433253 * (v15 ^ (v15 >> 30));
            v15 = v18 + v17;
            dword_1EE419ED8[v16] = v16 + v18 - 54;
            ++v17;
            ++v16;
          }
          while (v16 != 678);
          qword_1EE41A970 = 0;
          __cxa_guard_release(&qword_1EE419F08);
          a3 = v30;
          result = v34;
          v4 = v26;
          v3 = v28;
          v5 = v32;
        }
      }
      v7 = (qword_1EE41A970 + 1) % 0x270uLL;
      v8 = dword_1EE419FB0[v7];
      v9 = dword_1EE419FB0[(qword_1EE41A970 + 397) % 0x270uLL] ^ ((v8 & 0x7FFFFFFE | dword_1EE419FB0[qword_1EE41A970] & 0x80000000) >> 1);
      v10 = v9 ^ (v8 << 31 >> 31) & 0x9908B0DF;
      dword_1EE419FB0[qword_1EE41A970] = v10;
      qword_1EE41A970 = v7;
      v11 = atomic_load((unsigned __int8 *)&qword_1EE419F08);
      if ((v11 & 1) == 0)
      {
        v35 = result;
        v31 = a3;
        v33 = v5;
        v27 = v4;
        v29 = v3;
        v25 = v9 ^ (v8 << 31 >> 31) & 0x9908B0DF;
        v19 = __cxa_guard_acquire(&qword_1EE419F08);
        v10 = v25;
        v4 = v27;
        v3 = v29;
        v5 = v33;
        a3 = v31;
        v20 = v19;
        result = v35;
        if (v20)
        {
          v21 = 5489;
          dword_1EE419FB0[0] = 5489;
          v22 = 55;
          v23 = 1;
          do
          {
            v24 = 1812433253 * (v21 ^ (v21 >> 30));
            v21 = v24 + v23;
            dword_1EE419ED8[v22] = v22 + v24 - 54;
            ++v23;
            ++v22;
          }
          while (v22 != 678);
          qword_1EE41A970 = 0;
          __cxa_guard_release(&qword_1EE419F08);
          a3 = v31;
          result = v35;
          v4 = v27;
          v3 = v29;
          v5 = v33;
          v10 = v25;
        }
      }
      v12 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
      *(_BYTE *)(*result + v3++) = (int)(float)-(float)(a3
                                                      - (float)(v5
                                                              * (float)((v12 << 15) & 0xEFC60000 ^ v12 ^ (((v12 << 15) & 0xEFC60000 ^ v12) >> 18))));
    }
    while (v3 != v4);
  }
  return result;
}

void sub_19C10271C(int16x4_t **a1, FILE *__stream, int *a3, int a4, int a5, int a6)
{
  int v11;
  int v12;
  int v13;
  int8x16_t *v14;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v11 = *a3 & 0xF;
    if (*a3 <= 0)
      v11 = -(-*a3 & 0xF);
    if (v11 >= 15)
      v12 = 16;
    else
      v12 = 15 - v11;
    sub_19C221368(__stream, a3, v12);
    sub_19C2213F8((size_t)__stream, a3, 85, v12);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(18);
  }
  v13 = a6 * a5;
  v14 = (int8x16_t *)operator new[]();
  bzero(v14, 4 * v13);
  sub_19C221844(__stream, a3, *a1, v14, v13);
  operator delete[](v14);
}

void sub_19C10282C(int a1, FILE *__stream, int *a3, int a4)
{
  int v6;
  int v7;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v6 = *a3 & 0xF;
    if (*a3 <= 0)
      v6 = -(-*a3 & 0xF);
    if (v6 >= 15)
      v7 = 16;
    else
      v7 = 15 - v6;
    sub_19C221368(__stream, a3, v7);
    sub_19C2213F8((size_t)__stream, a3, 85, v7);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(18);
  }
  operator new[]();
  sub_19C2210D4(67);
}

void sub_19C102904(int a1, FILE *__stream, int *a3, int a4)
{
  int v6;
  int v7;

  if (!__stream)
    sub_19C2210D4(9);
  if (a4 == 3)
  {
    v6 = *a3 & 0xF;
    if (*a3 <= 0)
      v6 = -(-*a3 & 0xF);
    if (v6 >= 15)
      v7 = 16;
    else
      v7 = 15 - v6;
    sub_19C221368(__stream, a3, v7);
    sub_19C2213F8((size_t)__stream, a3, 85, v7);
    if ((*(_BYTE *)a3 & 0xF) != 0)
      sub_19C2210D4(18);
  }
  operator new[]();
  sub_19C2210D4(67);
}

uint64_t sub_19C1029D4(uint64_t result, float a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  float **v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  float32x4_t v10;
  float *v11;
  uint64_t i;
  float32x4_t *v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  void *v23;

  v4 = *(unsigned int *)(result + 16);
  if ((int)v4 >= 1)
  {
    if ((int)a4 >= 1)
    {
      v5 = *(float ***)(result + 24);
      if (a4 <= 7)
      {
        do
        {
          v11 = *v5;
          **v5 = **v5 * a2;
          if (a4 != 1)
          {
            v11[1] = v11[1] * a2;
            if (a4 != 2)
            {
              v11[2] = v11[2] * a2;
              if (a4 != 3)
              {
                v11[3] = v11[3] * a2;
                if (a4 != 4)
                {
                  v11[4] = v11[4] * a2;
                  if (a4 != 5)
                  {
                    v11[5] = v11[5] * a2;
                    if (a4 != 6)
                      v11[6] = v11[6] * a2;
                  }
                }
              }
            }
          }
          ++v5;
          --v4;
        }
        while (v4);
      }
      else
      {
        v6 = a4 & 0xFFFFFFF8;
        v7 = a4 - v6;
        if (a4 == v6)
        {
          do
          {
            v8 = (float32x4_t *)(v5[v7] + 4);
            v9 = a4 & 0xFFFFFFF8;
            do
            {
              v10 = vmulq_n_f32(*v8, a2);
              v8[-1] = vmulq_n_f32(v8[-1], a2);
              *v8 = v10;
              v8 += 2;
              v9 -= 8;
            }
            while (v9);
            ++v7;
          }
          while (v7 != v4);
        }
        else
        {
          for (i = 0; i != v4; ++i)
          {
            v13 = (float32x4_t *)v5[i];
            v14 = v13 + 1;
            v15 = a4 & 0xFFFFFFF8;
            do
            {
              v16 = vmulq_n_f32(*v14, a2);
              v14[-1] = vmulq_n_f32(v14[-1], a2);
              *v14 = v16;
              v14 += 2;
              v15 -= 8;
            }
            while (v15);
            v17 = (float *)((char *)v13->f32 + ((4 * a4) & 0x3FFFFFFE0));
            v18 = a4 - v6;
            do
            {
              *v17 = *v17 * a2;
              ++v17;
              --v18;
            }
            while (v18);
          }
        }
      }
    }
    v19 = *(_QWORD *)(result + 48);
    v21 = *(_BYTE **)v19;
    v20 = *(_BYTE **)(v19 + 8);
    v22 = v20 - v21;
    if (v20 != v21)
    {
      if ((v22 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v23 = operator new(v20 - v21);
      memcpy(v23, v21, v22);
    }
    sub_19C2210D4(67);
  }
  return result;
}

void sub_19C102BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C102BD8(void **a1, const void **a2, int a3, int a4)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  float *v24;
  float *v25;
  float v26;
  float v27;
  float *v28;
  float *v29;
  uint64_t v30;
  float v31;
  float v32;
  float *v33;
  float *v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  float32x4_t *v39;
  int8x16_t *v40;
  float32x4_t *v41;
  int8x16_t *v42;
  uint64_t v44;
  int8x16_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  float *v49;
  float v50;
  float v51;
  float32x4_t v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;

  switch(a4)
  {
    case 0:
      memmove(*a1, *a2, 4 * a3);
      break;
    case 1:
      if (a3 >= 1)
      {
        v4 = 0;
        v5 = *a2;
        v6 = *a1;
        v7 = a3;
        if (a3 < 4)
          goto LABEL_9;
        if ((unint64_t)(v6 - v5) < 0x10)
          goto LABEL_9;
        v4 = a3 & 0x7FFFFFFC;
        __asm { FMOV            V0.4S, #1.0 }
        v52 = _Q0;
        v13 = a3 & 0xFFFFFFFC;
        v14 = (float32x4_t *)*a1;
        v15 = (float32x4_t *)*a2;
        do
        {
          v16 = *v15++;
          v56 = vnegq_f32(v16);
          v53 = expf(v56.f32[1]);
          v17.f32[0] = expf(v56.f32[0]);
          v17.f32[1] = v53;
          v54 = v17;
          v18 = expf(v56.f32[2]);
          v19 = v54;
          v19.f32[2] = v18;
          v55 = v19;
          v20 = expf(v56.f32[3]);
          v21 = v55;
          v21.f32[3] = v20;
          v22 = vdivq_f32(v52, vaddq_f32(v21, v52));
          *v14++ = vmlsq_f32(v22, v22, v22);
          v13 -= 4;
        }
        while (v13);
        if (v4 != v7)
        {
LABEL_9:
          v23 = v7 - v4;
          v24 = (float *)&v6[4 * v4];
          v25 = (float *)&v5[4 * v4];
          do
          {
            v26 = *v25++;
            v27 = expf(-v26);
            *v24++ = (float)(1.0 / (float)(v27 + 1.0))
                   - (float)((float)(1.0 / (float)(v27 + 1.0)) * (float)(1.0 / (float)(v27 + 1.0)));
            --v23;
          }
          while (v23);
        }
      }
      break;
    case 2:
      if (a3 >= 1)
      {
        v28 = (float *)*a2;
        v29 = (float *)*a1;
        v30 = a3;
        do
        {
          v31 = *v28++;
          v32 = tanhf(v31);
          *v29++ = 1.0 - (float)(v32 * v32);
          --v30;
        }
        while (v30);
      }
      break;
    case 3:
      if (a3 >= 1)
      {
        v33 = (float *)*a2;
        v34 = (float *)*a1;
        v35 = a3;
        do
        {
          v36 = *v33++;
          v37 = tanhf(v36 * 0.66667);
          *v34++ = 1.1439 - (float)((float)(v37 * v37) * 1.1439);
          --v35;
        }
        while (v35);
      }
      break;
    case 4:
      if (a3 >= 1)
      {
        v38 = 0;
        v39 = (float32x4_t *)*a2;
        v40 = (int8x16_t *)*a1;
        if (a3 < 8)
          goto LABEL_26;
        if ((unint64_t)((char *)v40 - (char *)v39) < 0x20)
          goto LABEL_26;
        v38 = a3 & 0x7FFFFFF8;
        v41 = v39 + 1;
        v42 = v40 + 1;
        __asm { FMOV            V0.4S, #1.0 }
        v44 = a3 & 0xFFFFFFF8;
        do
        {
          v45 = vbicq_s8(_Q0, (int8x16_t)vclezq_f32(*v41));
          v42[-1] = vbicq_s8(_Q0, (int8x16_t)vclezq_f32(v41[-1]));
          *v42 = v45;
          v41 += 2;
          v42 += 2;
          v44 -= 8;
        }
        while (v44);
        if (v38 != a3)
        {
LABEL_26:
          v46 = a3 - v38;
          v47 = v38;
          v48 = (float *)&v40->i32[v47];
          v49 = &v39->f32[v47];
          do
          {
            v50 = *v49++;
            if (v50 > 0.0)
              v51 = 1.0;
            else
              v51 = 0.0;
            *v48++ = v51;
            --v46;
          }
          while (v46);
        }
      }
      break;
    default:
      return;
  }
}

void sub_19C102E84(void **a1, const void **a2, int a3, int a4)
{
  float32x4_t *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  float v37;
  char *v38;
  char *v39;
  float64x2_t v41;
  uint64_t v42;
  uint64_t v45;
  float32x2_t *v46;
  float32x2_t *v47;
  float32x2_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  int8x8_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float32x4_t *v59;
  int v60;
  int v61;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float v71;
  float __B;
  vDSP_Length __N;

  switch(a4)
  {
    case 0:
      memmove(*a1, *a2, 4 * a3);
      return;
    case 1:
      v5 = (float32x4_t *)*a1;
      if (((unint64_t)*a1 & 0xF) != 0)
      {
        if (a3 >= 1)
        {
          v6 = 0;
          v7 = *a2;
          v8 = a3;
          if (a3 < 4)
            goto LABEL_10;
          if ((unint64_t)((char *)v5 - v7) < 0x10)
            goto LABEL_10;
          v6 = a3 & 0x7FFFFFFC;
          __asm { FMOV            V0.4S, #1.0 }
          v65 = _Q0;
          v13 = a3 & 0xFFFFFFFC;
          v14 = (float32x4_t *)*a1;
          v15 = (float32x4_t *)*a2;
          do
          {
            v16 = *v15++;
            v69 = vnegq_f32(v16);
            v66 = expf(v69.f32[1]);
            v17.f32[0] = expf(v69.f32[0]);
            v17.f32[1] = v66;
            v67 = v17;
            v18 = expf(v69.f32[2]);
            v19 = v67;
            v19.f32[2] = v18;
            v68 = v19;
            v20 = expf(v69.f32[3]);
            v21 = v68;
            v21.f32[3] = v20;
            *v14++ = vdivq_f32(v65, vaddq_f32(v21, v65));
            v13 -= 4;
          }
          while (v13);
          if (v6 != v8)
          {
LABEL_10:
            v22 = v8 - v6;
            v23 = &v5->f32[v6];
            v24 = (float *)&v7[4 * v6];
            do
            {
              v25 = *v24++;
              *v23++ = 1.0 / (float)(expf(-v25) + 1.0);
              --v22;
            }
            while (v22);
          }
        }
      }
      else if (a3 >= -2)
      {
        v59 = (float32x4_t *)*a2;
        v60 = a3 - 1;
        if (a3 < 1)
          v60 = a3 + 2;
        v61 = (v60 >> 2) + 1;
        __asm { FMOV            V0.4S, #1.0 }
        v70 = _Q0;
        do
        {
          v63 = *v59++;
          *(double *)v64.i64 = MEMORY[0x1A1AD26E8]((__n128)vnegq_f32(v63));
          *v5++ = vdivq_f32(v70, vaddq_f32(v64, v70));
          --v61;
        }
        while (v61);
      }
      return;
    case 2:
      LODWORD(__N) = a3;
      vvtanhf((float *)*a1, (const float *)*a2, (const int *)&__N);
      return;
    case 3:
      __B = 0.66667;
      LODWORD(__N) = a3;
      v71 = 1.7159;
      vDSP_vsmul((const float *)*a2, 1, &__B, (float *)*a1, 1, a3);
      vvtanhf((float *)*a1, (const float *)*a1, (const int *)&__N);
      vDSP_vsmul((const float *)*a1, 1, &v71, (float *)*a1, 1, (int)__N);
      return;
    case 4:
      if (a3 >= 1)
      {
        v26 = 0;
        v27 = (float32x4_t *)*a2;
        v28 = (float32x4_t *)*a1;
        if (a3 < 8)
          goto LABEL_21;
        if ((unint64_t)((char *)v28 - (char *)v27) < 0x20)
          goto LABEL_21;
        v26 = a3 & 0xFFFFFFF8;
        v29 = v27 + 1;
        v30 = v28 + 1;
        v31 = v26;
        do
        {
          v32 = vmaxnmq_f32(*v29, (float32x4_t)0);
          v30[-1] = vmaxnmq_f32(v29[-1], (float32x4_t)0);
          *v30 = v32;
          v29 += 2;
          v30 += 2;
          v31 -= 8;
        }
        while (v31);
        if (v26 != a3)
        {
LABEL_21:
          v33 = a3 - v26;
          v34 = v26;
          v35 = &v28->f32[v34];
          v36 = &v27->f32[v34];
          do
          {
            v37 = *v36++;
            *v35++ = fmaxf(v37, 0.0);
            --v33;
          }
          while (v33);
        }
      }
      return;
    case 5:
      if (a3 < 1)
        return;
      v38 = (char *)*a2;
      v39 = (char *)*a1;
      if (a3 < 4 || (v39 < &v38[4 * a3] ? (_CF = v38 >= &v39[4 * a3]) : (_CF = 1), !_CF))
      {
        v42 = 0;
        goto LABEL_39;
      }
      v41 = (float64x2_t)vdupq_n_s64(0x3FC999999999999AuLL);
      v42 = a3 & 0xFFFFFFFE;
      __asm
      {
        FMOV            V1.2D, #0.5
        FMOV            V2.2S, #1.0
      }
      v45 = v42;
      v46 = (float32x2_t *)*a2;
      v47 = (float32x2_t *)*a1;
      break;
    default:
      sub_19C2210D4(4);
  }
  do
  {
    v48 = vcvt_f32_f64(vmlaq_f64(_Q1, vcvtq_f64_f32(*v46), v41));
    *v47 = v48;
    v49 = (int8x8_t)vcltz_f32(v48);
    v50 = (int8x8_t)vcgt_f32(v48, _D2);
    v51 = vand_s8(vand_s8((int8x8_t)_D2, (int8x8_t)vcgez_f32(v48)), v50);
    v52 = vorr_s8(v50, v49);
    if ((v52.i8[0] & 1) != 0)
    {
      v47->i32[0] = v51.i32[0];
      if ((v52.i8[4] & 1) == 0)
        goto LABEL_32;
    }
    else if ((v52.i8[4] & 1) == 0)
    {
      goto LABEL_32;
    }
    v47->i32[1] = v51.i32[1];
LABEL_32:
    ++v47;
    ++v46;
    v45 -= 2;
  }
  while (v45);
  if (v42 == a3)
    return;
LABEL_39:
  v53 = a3 - v42;
  v54 = 4 * v42;
  v55 = (float *)&v39[v54];
  v56 = (float *)&v38[v54];
  do
  {
    v57 = *v56 * 0.2 + 0.5;
    *v55 = v57;
    v58 = 0.0;
    if (v57 < 0.0 || (v58 = 1.0, v57 > 1.0))
      *v55 = v58;
    ++v55;
    ++v56;
    --v53;
  }
  while (v53);
}

void sub_19C1032B4(void **a1, uint64_t *a2, __int16 **a3, int a4, unsigned int a5, float a6)
{
  float v12;
  float v13;
  __int16 *v14;
  __int16 *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  __int16 *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  int v27;
  float v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 *v34;
  __int16 *v35;
  float v36;
  uint64_t v37;
  __int16 *v38;
  uint64_t v39;
  __int16 *v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 *v45;
  __int16 *v46;
  uint64_t v47;
  __int16 *v48;
  __int16 *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  __int16 *v55;
  uint64_t v56;
  __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 *v61;
  __int16 *v62;
  uint64_t v63;
  __int16 *v64;
  __int16 *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  float v70;

  v12 = sub_19C2210C8();
  v13 = sub_19C2210C8();
  v14 = (__int16 *)operator new[]();
  v15 = v14;
  if ((int)a5 < 1)
  {
    if (a4 >= 1 && a6 == 0.0)
      bzero(*a1, 4 * a4);
  }
  else
  {
    v16 = (float)(v13 * v12);
    bzero(v14, 2 * a5);
    v17 = 0;
    v18 = *a2;
    do
    {
      v20 = *(float *)(v18 + 4 * v17);
      if (v20 <= -5.0)
      {
        LOWORD(v19) = -32767;
      }
      else if (v20 < 5.0 && (v19 = llroundf(v20 * 6553.6), v19 < 0x8000))
      {
        if (v19 <= -32767)
          LOWORD(v19) = -32767;
      }
      else
      {
        LOWORD(v19) = 0x7FFF;
      }
      v15[v17++] = v19;
    }
    while (a5 != v17);
    if (a4 > 0)
    {
      v21 = *a3;
      v22 = (float *)*a1;
      v23 = a4;
      v24 = a5 & 0xFFFFFFFE;
      if (a6 == 0.0)
      {
        if (a5 > 1)
        {
          v29 = a5 - v24;
          if (a5 == v24)
          {
            v30 = v21 + 1;
            do
            {
              v31 = 0;
              v32 = 0;
              v33 = a5 & 0xFFFFFFFE;
              v34 = v15 + 1;
              v35 = v30;
              do
              {
                v31 += *(v35 - 1) * (uint64_t)*(v34 - 1);
                v32 += *v35 * (uint64_t)*v34;
                v35 += 2;
                v34 += 2;
                v33 -= 2;
              }
              while (v33);
              v36 = (double)(v32 + v31) * v16;
              v22[v29++] = v36;
              v30 += a5;
            }
            while (v29 != a4);
          }
          else
          {
            v54 = 0;
            v55 = v21 + 1;
            v56 = 2 * a5;
            v57 = (__int16 *)((char *)v21 + (v56 & 0x1FFFFFFFCLL));
            do
            {
              v58 = 0;
              v59 = 0;
              v60 = a5 & 0xFFFFFFFE;
              v61 = v15 + 1;
              v62 = v55;
              do
              {
                v58 += *(v62 - 1) * (uint64_t)*(v61 - 1);
                v59 += *v62 * (uint64_t)*v61;
                v62 += 2;
                v61 += 2;
                v60 -= 2;
              }
              while (v60);
              v63 = v59 + v58;
              v64 = (__int16 *)((char *)v15 + (v56 & 0x1FFFFFFFCLL));
              v65 = v57;
              v66 = a5 - v24;
              do
              {
                v68 = *v64++;
                v67 = v68;
                v69 = *v65++;
                v63 += v69 * (uint64_t)v67;
                --v66;
              }
              while (v66);
              v70 = (double)v63 * v16;
              v22[v54++] = v70;
              v55 = (__int16 *)((char *)v55 + v56);
              v57 = (__int16 *)((char *)v57 + v56);
            }
            while (v54 != a4);
          }
        }
        else
        {
          v25 = *v15;
          do
          {
            v26 = (double)(*v21 * (uint64_t)v25) * v16;
            *v22++ = v26;
            v21 += a5;
            --v23;
          }
          while (v23);
        }
      }
      else if (a5 >= 2)
      {
        v37 = 0;
        v38 = v21 + 1;
        v39 = 2 * a5;
        v40 = (__int16 *)((char *)v21 + (v39 & 0x1FFFFFFFCLL));
        do
        {
          v42 = 0;
          v43 = 0;
          v44 = a5 & 0xFFFFFFFE;
          v45 = v15 + 1;
          v46 = v38;
          do
          {
            v42 += *(v46 - 1) * (uint64_t)*(v45 - 1);
            v43 += *v46 * (uint64_t)*v45;
            v46 += 2;
            v45 += 2;
            v44 -= 2;
          }
          while (v44);
          v47 = v43 + v42;
          if (a5 != v24)
          {
            v48 = (__int16 *)((char *)v15 + (v39 & 0x1FFFFFFFCLL));
            v49 = v40;
            v50 = a5 - v24;
            do
            {
              v52 = *v48++;
              v51 = v52;
              v53 = *v49++;
              v47 += v53 * (uint64_t)v51;
              --v50;
            }
            while (v50);
          }
          v41 = v22[v37] + (double)v47 * v16;
          v22[v37++] = v41;
          v38 = (__int16 *)((char *)v38 + v39);
          v40 = (__int16 *)((char *)v40 + v39);
        }
        while (v37 != a4);
      }
      else
      {
        v27 = *v15;
        do
        {
          v28 = *v22 + (double)(*v21 * (uint64_t)v27) * v16;
          *v22++ = v28;
          v21 += a5;
          --v23;
        }
        while (v23);
      }
    }
  }
  operator delete[](v15);
}

void sub_19C103680(uint64_t a1, uint64_t a2)
{
  vDSP_Length v2;
  float *v3;
  float __B;

  v2 = *(int *)(a1 + 56);
  v3 = (float *)(*(_QWORD *)(a1 + 32) + 4 * v2 * a2);
  __B = *(float *)(**(_QWORD **)(a1 + 40) + 4 * (int)a2);
  vDSP_vsma(**(const float ***)(a1 + 48), 1, &__B, v3, 1, v3, 1, v2);
}

void sub_19C1036D8(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  unsigned int v12;
  unsigned int v14;
  int16x4_t v15;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  BOOL v35;
  char v36;
  _BOOL4 v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  float *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  int16x4_t *v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  float32x4_t *v63;
  float32x4_t *v64;
  int16x4_t *v65;
  uint64_t v66;
  float32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  float *v71;
  __int16 *v72;
  float v73;
  int v74;
  int v75;
  float v76;
  float *v77;
  int v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  int16x4_t *v86;
  float32x4_t *v87;
  float32x4_t *v88;
  float32x4_t *v89;
  float32x4_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  float32x4_t *v95;
  float32x4_t *v96;
  int16x4_t *v97;
  uint64_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  float *v102;
  float *v103;
  __int16 *v104;
  float v105;
  int v106;
  int v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  float32x4_t *v111;
  uint64_t v112;
  float32x4_t *v113;
  uint64_t v114;
  float32x4_t v116;
  uint64_t v117;
  float *v118;
  uint64_t *v119;
  uint64_t v120;
  float *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float32x4_t *v127;
  float32x4_t *v128;
  int v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  float32x4_t *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  float32x4_t v147;
  unint64_t v148;
  float *v149;
  float *v150;
  float *v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t *v157;
  float32x4_t *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  float32x4_t *v164;
  float32x4_t *v165;
  int v166;
  float32x4_t *v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  BOOL v181;
  BOOL v182;
  uint64_t v184;
  uint64_t v185;
  float32x4_t *v186;
  float32x4_t *v187;
  float32x4_t *v188;
  float32x4_t v189;
  uint64_t v190;
  float *v191;
  float *v192;
  float *v193;
  float v194;
  float v195;
  float v196;
  unint64_t v197;
  BOOL v199;
  float32x4_t *v201;
  float32x4_t *v202;
  float32x4_t *v203;
  uint64_t v204;
  float32x4_t v205;
  uint64_t v206;
  uint64_t v207;
  float *v208;
  float *v209;
  float *v210;
  float v211;
  float v212;
  float v213;
  int v214;
  uint64_t v215;
  float *v216;
  float v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  float32x4_t *v222;
  int16x4_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  float32x4_t *v227;
  float32x4_t *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  float32x4_t *v234;
  float32x4_t *v235;
  int16x4_t *v236;
  uint64_t v237;
  float32x4_t v238;
  uint64_t v239;
  uint64_t v240;
  float *v241;
  float *v242;
  __int16 *v243;
  float v244;
  int v245;
  int v246;
  float v247;
  uint64_t v248;
  float *v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  float32x4_t *v255;
  float32x4_t *v256;
  int v257;
  float32x2_t *v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  int v263;
  uint64_t v264;
  float32x2_t *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  float32x4_t *v272;
  float32x4_t *v273;
  float32x4_t *v274;
  float32x4_t v275;
  unint64_t v276;
  float *v277;
  float *v278;
  float *v279;
  float v280;
  float v281;
  float v282;
  BOOL v283;
  int v284;
  float32x2_t **v285;
  int v286;
  int v289;
  unsigned int v290;
  int v291;
  _BOOL4 v292;
  int8x16_t v293;
  int8x16_t v294;
  float32x4_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD v299[4];

  if (a4 < 0x2000000)
    v8 = 1;
  else
    v8 = HIBYTE(a4);
  v9 = *(_QWORD *)(a1 + 2680);
  if (v9)
  {
    v283 = *(_BYTE *)(v9 + 464) != 0;
    if (a3[1] == *a3)
      goto LABEL_11;
  }
  else
  {
    v283 = 0;
    if (a3[1] == *a3)
      goto LABEL_11;
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    v10 = (**(uint64_t (***)(uint64_t))a1)(a1);
    v9 = *(_QWORD *)(a1 + 2680);
    if (!v9)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_11:
  v10 = 0;
  if (!v9)
  {
LABEL_13:
    v11 = 50.0;
    goto LABEL_14;
  }
LABEL_12:
  v11 = *(float *)(v9 + 468);
  if (v11 <= 0.0)
    goto LABEL_13;
LABEL_14:
  if (a5 && *(_BYTE *)(a1 + 2672))
LABEL_277:
    sub_19C2210D4(34);
  v12 = a4 & 0xFFFFFF;
  if (a5)
    _ZF = *(_BYTE *)(a1 + 42) == 0;
  else
    _ZF = 0;
  v14 = _ZF;
  if (v12 > v14)
  {
    v286 = v12 - 1;
    v285 = (float32x2_t **)(a1 + 752);
    v15 = vdup_n_s16(0x8001u);
    __asm
    {
      FMOV            V5.4S, #-5.0
      FMOV            V6.4S, #5.0
    }
    v289 = v10;
    v284 = a4 & 0xFFFFFF;
    v294 = _Q5;
    v295 = (float32x4_t)vdupq_n_s32(0x39200000u);
    v293 = _Q6;
    while (1)
    {
      v290 = v14;
      v20 = *(_BYTE *)(a1 + 2672) ? v12 + ~v14 : v14;
      v21 = *(_BYTE *)(a1 + 2672) ? 1 : -1;
      v296 = v21;
      v22 = *(_BYTE *)(a1 + 2672) ? v20 < v286 : v20 > 0;
      v292 = v22;
      v23 = *(unsigned __int8 *)(a1 + 42);
      v24 = ((*(_BYTE *)(a1 + 42) != 0) & v10) != 0 ? 1 : v20;
      v25 = *(_QWORD *)(a1 + 64);
      v297 = v24;
      v298 = v20;
      if (v10)
        break;
      memmove(*(void **)(v25 + 8 * v24), *(const void **)(*a2 + 8 * v24), 4 * *(int *)(a1 + 44));
      v26 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        goto LABEL_41;
LABEL_42:
      if (v10)
      {
        v27 = *(_DWORD *)(a1 + 48);
        v28 = *(_DWORD **)(*(_QWORD *)(a1 + 208) + 24 * v20);
        *v28 = **(_DWORD **)(*a3 + 24 * v20);
        if (v26)
          v28[1] = v27 - 1;
      }
      v29 = *(_QWORD *)(a1 + 136);
      if ((_DWORD)v8 == 1)
        memcpy(*(void **)(v29 + 8 * v24), *(const void **)(*(_QWORD *)(a1 + 64) + 8 * v24), 4 * *(int *)(a1 + 48));
      else
        memmove(*(void **)(v29 + 8 * v24), *(const void **)(*a2 + 8 * v24), 4 * *(_DWORD *)(a1 + 44) * (int)v8);
      if ((int)v8 > *(_DWORD *)(a1 + 2688))
        sub_19C2210D4(83724);
      if (v23)
        v30 = 1;
      else
        v30 = v20;
      v31 = 8 * v30;
      if (*(_BYTE *)(a1 + 2692))
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 544) + 8 * v30), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 568) + 8 * v30), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 616) + 8 * v30), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(_QWORD *)(a1 + 592) + 8 * v30), 4 * *(int *)(a1 + 52));
      }
      v291 = v20 + v296;
      bzero(*(void **)(*(_QWORD *)(a1 + 352) + 8 * v30), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 376) + 8 * v30), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 400) + 8 * v30), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      bzero(*(void **)(*(_QWORD *)(a1 + 424) + 8 * v30), 4 * *(_DWORD *)(a1 + 52) * (int)v8);
      v32 = *(_QWORD *)(a1 + 2680);
      if (!v32)
        goto LABEL_69;
      v33 = *(_DWORD *)(v32 + 40);
      if (!*(_BYTE *)(v32 + 20) && (v33 == 5 || v33 == 2))
      {
        v34 = *(_DWORD *)(v32 + 44) == 6;
        if (v33 == 5)
          goto LABEL_62;
      }
      else
      {
        v34 = 0;
        if (v33 == 5)
          goto LABEL_62;
      }
      if (v33 != 2)
      {
        if (v34)
LABEL_68:
          sub_19C104CF4(a1, 0, *(_QWORD *)(a1 + 352) + v31, *(_QWORD *)(a1 + 376) + v31, *(_QWORD *)(a1 + 424) + v31, *(_QWORD *)(a1 + 400) + v31, *(_QWORD *)(a1 + 136) + 8 * v297, *(_QWORD *)(a1 + 2504), *(_QWORD *)(a1 + 208) + 24 * (int)v298, v8, *(_DWORD *)(a1 + 52));
LABEL_69:
        v36 = 0;
        v38 = !v292;
        goto LABEL_70;
      }
LABEL_62:
      v35 = *(_DWORD *)(v32 + 60) == 22;
      v36 = v35;
      if (v34)
        goto LABEL_68;
      v37 = v292;
      v38 = !v292;
      if (!v35)
        v37 = 0;
      if (v37)
      {
        memset(v299, 0, 24);
        sub_19C104CF4(a1, 0, *(_QWORD *)(a1 + 352) + v31, *(_QWORD *)(a1 + 376) + v31, *(_QWORD *)(a1 + 424) + v31, *(_QWORD *)(a1 + 400) + v31, *(_QWORD *)(a1 + 160) + 8 * v291, *(_QWORD *)(a1 + 2536), (uint64_t)v299, v8, *(_DWORD *)(a1 + 52));
      }
LABEL_70:
      sub_19C104ED0(a1, v289, (const float **)(*(_QWORD *)(a1 + 424) + 8 * v30), *(_QWORD *)(a1 + 136) + 8 * v297, *(uint64_t **)(a1 + 2528), *(_QWORD *)(a1 + 208) + 24 * (int)v298, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      if (!v38 && (v36 & 1) == 0)
        goto LABEL_277;
      v39 = *(_QWORD *)(a1 + 2680);
      if (v39 && *(_BYTE *)(v39 + 244))
        goto LABEL_276;
      v40 = *(unsigned int *)(a1 + 52);
      v41 = (uint64_t *)(*(_QWORD *)(a1 + 424) + 8 * v30);
      v42 = (v40 * v8);
      if ((int)v42 >= 1)
      {
        v43 = (float *)*v41;
        do
        {
          v44 = -1035468800;
          if (*v43 < -50.0 || (v44 = 1112014848, *v43 > 50.0))
            *(_DWORD *)v43 = v44;
          ++v43;
          --v42;
        }
        while (v42);
      }
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 520) + 8 * v30), v41, v8, v40, *(_DWORD *)(a1 + 740));
      sub_19C104ED0(a1, v289, (const float **)(*(_QWORD *)(a1 + 352) + 8 * v30), *(_QWORD *)(a1 + 136) + 8 * v297, *(uint64_t **)(a1 + 2504), *(_QWORD *)(a1 + 208) + 24 * (int)v298, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      v45 = *(_QWORD *)(a1 + 2680);
      if (v45)
      {
        if (*(_BYTE *)(v45 + 244))
LABEL_276:
          sub_19C2210D4(200);
      }
      if (!v292)
      {
        v46 = *(_QWORD *)(a1 + 352);
        v47 = *(unsigned int *)(a1 + 52);
LABEL_90:
        v48 = (uint64_t *)(v46 + 8 * v30);
        v49 = (v47 * v8);
        if ((int)v49 >= 1)
          goto LABEL_113;
        goto LABEL_119;
      }
      if ((v36 & 1) == 0)
        goto LABEL_277;
      v46 = *(_QWORD *)(a1 + 352);
      v47 = *(unsigned int *)(a1 + 52);
      if (v45)
      {
        v36 = 1;
        if (!(_DWORD)v8 || !*(_BYTE *)(v45 + 384))
          goto LABEL_90;
      }
      else if (!(_DWORD)v8)
      {
        goto LABEL_112;
      }
      if ((int)v47 >= 1)
      {
        v50 = 0;
        v51 = *(float32x4_t **)(v46 + 8 * v30);
        v52 = *(float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v291);
        v53 = 4 * v47;
        v54 = **(int16x4_t ***)(a1 + 2568);
        v55 = v51 + 1;
        v56 = v52 + 1;
        v57 = v52;
        v58 = v51;
        while (v47 >= 8)
        {
          v59 = v53 + v53 * v50;
          v60 = (unint64_t)v52 + v59;
          v61 = (unint64_t)v51 + v59;
          if ((unint64_t)v51 + v53 * v50 < v60 && (unint64_t)v52 + v53 * v50 < v61)
            break;
          v63 = v56;
          v64 = v55;
          v65 = v54 + 1;
          v66 = v47 & 0xFFFFFFF8;
          do
          {
            v67 = vmlaq_f32(*v64, *v63, (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(*v65, (int16x4_t)0x8000800080008000)), v293, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(*v65, v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(*v65)), v295), v294)));
            v64[-1] = vmlaq_f32(v64[-1], v63[-1], (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v65[-1], (int16x4_t)0x8000800080008000)), v293, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v65[-1], v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v65[-1])), v295), v294)));
            *v64 = v67;
            v65 += 2;
            v64 += 2;
            v63 += 2;
            v66 -= 8;
          }
          while (v66);
          v68 = v47 & 0xFFFFFFF8;
          if (v68 != v47)
            goto LABEL_107;
LABEL_95:
          ++v50;
          v55 = (float32x4_t *)((char *)v55 + v53);
          v56 = (float32x4_t *)((char *)v56 + v53);
          v58 = (float32x4_t *)((char *)v58 + v53);
          v57 = (float32x4_t *)((char *)v57 + v53);
          if (v50 == v8)
            goto LABEL_112;
        }
        v68 = 0;
LABEL_107:
        v69 = v47 - v68;
        v70 = &v58->f32[v68];
        v71 = &v57->f32[v68];
        v72 = (__int16 *)v54 + v68;
        do
        {
          v75 = *v72++;
          v74 = v75;
          v76 = -5.0;
          if (v75 >= -32766)
          {
            v76 = 5.0;
            if (v74 != 0x7FFF)
              v76 = (float)v74 * 0.00015259;
          }
          v73 = *v71++;
          *v70 = *v70 + (float)(v73 * v76);
          ++v70;
          --v69;
        }
        while (v69);
        goto LABEL_95;
      }
LABEL_112:
      v36 = 1;
      v48 = (uint64_t *)(v46 + 8 * v30);
      v49 = (v47 * v8);
      if ((int)v49 >= 1)
      {
LABEL_113:
        v77 = (float *)*v48;
        do
        {
          v78 = -1035468800;
          if (*v77 < -50.0 || (v78 = 1112014848, *v77 > 50.0))
            *(_DWORD *)v77 = v78;
          ++v77;
          --v49;
        }
        while (v49);
      }
LABEL_119:
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 448) + 8 * v30), v48, v8, v47, *(_DWORD *)(a1 + 736));
      sub_19C104ED0(a1, v289, (const float **)(*(_QWORD *)(a1 + 376) + 8 * v30), *(_QWORD *)(a1 + 136) + 8 * v297, *(uint64_t **)(a1 + 2512), *(_QWORD *)(a1 + 208) + 24 * (int)v298, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1);
      v79 = *(_BYTE **)(a1 + 2680);
      if (v79 && v79[244])
        goto LABEL_276;
      if (v292)
      {
        if ((v36 & 1) == 0)
          goto LABEL_277;
        v80 = *(unsigned int *)(a1 + 52);
        v81 = v298;
        if (v79)
        {
          if (!(_DWORD)v8 || !v79[384])
            goto LABEL_148;
        }
        else if (!(_DWORD)v8)
        {
          goto LABEL_152;
        }
        if ((int)v80 >= 1)
        {
          v82 = 0;
          v83 = *(float32x4_t **)(*(_QWORD *)(a1 + 376) + 8 * v30);
          v84 = *(float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v291);
          v85 = 4 * v80;
          v86 = **(int16x4_t ***)(a1 + 2576);
          v87 = v83 + 1;
          v88 = v84 + 1;
          v89 = v84;
          v90 = v83;
          while (v80 >= 8)
          {
            v91 = v85 + v85 * v82;
            v92 = (unint64_t)v84 + v91;
            v93 = (unint64_t)v83 + v91;
            if ((unint64_t)v83 + v85 * v82 < v92 && (unint64_t)v84 + v85 * v82 < v93)
              break;
            v95 = v88;
            v96 = v87;
            v97 = v86 + 1;
            v98 = v80 & 0xFFFFFFF8;
            do
            {
              v99 = vmlaq_f32(*v96, *v95, (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(*v97, (int16x4_t)0x8000800080008000)), v293, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(*v97, v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(*v97)), v295), v294)));
              v96[-1] = vmlaq_f32(v96[-1], v95[-1], (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v97[-1], (int16x4_t)0x8000800080008000)), v293, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v97[-1], v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v97[-1])), v295), v294)));
              *v96 = v99;
              v97 += 2;
              v96 += 2;
              v95 += 2;
              v98 -= 8;
            }
            while (v98);
            v100 = v80 & 0xFFFFFFF8;
            if (v100 != v80)
              goto LABEL_142;
LABEL_130:
            ++v82;
            v87 = (float32x4_t *)((char *)v87 + v85);
            v88 = (float32x4_t *)((char *)v88 + v85);
            v90 = (float32x4_t *)((char *)v90 + v85);
            v89 = (float32x4_t *)((char *)v89 + v85);
            if (v82 == v8)
              goto LABEL_147;
          }
          v100 = 0;
LABEL_142:
          v101 = v80 - v100;
          v102 = &v90->f32[v100];
          v103 = &v89->f32[v100];
          v104 = (__int16 *)v86 + v100;
          do
          {
            v107 = *v104++;
            v106 = v107;
            v108 = -5.0;
            if (v107 >= -32766)
            {
              v108 = 5.0;
              if (v106 != 0x7FFF)
                v108 = (float)v106 * 0.00015259;
            }
            v105 = *v103++;
            *v102 = *v102 + (float)(v105 * v108);
            ++v102;
            --v101;
          }
          while (v101);
          goto LABEL_130;
        }
      }
LABEL_147:
      v81 = v298;
      if (!v79)
      {
LABEL_152:
        v109 = *(unsigned int *)(a1 + 52);
        goto LABEL_158;
      }
LABEL_148:
      v109 = *(unsigned int *)(a1 + 52);
      if (v79[465])
      {
        v110 = (v109 * v8);
        if ((int)v110 >= 1)
        {
          v111 = *(float32x4_t **)(*(_QWORD *)(a1 + 376) + 8 * v30);
          if (v110 < 8)
          {
            v112 = 0;
LABEL_156:
            v117 = v110 - v112;
            v118 = &v111->f32[v112];
            do
            {
              *v118 = *v118 + 1.0;
              ++v118;
              --v117;
            }
            while (v117);
            goto LABEL_158;
          }
          v112 = v110 & 0xFFFFFFF8;
          v113 = v111 + 1;
          v114 = v112;
          do
          {
            __asm { FMOV            V2.4S, #1.0 }
            v116 = vaddq_f32(*v113, _Q2);
            v113[-1] = vaddq_f32(v113[-1], _Q2);
            *v113 = v116;
            v113 += 2;
            v114 -= 8;
          }
          while (v114);
          if (v112 != v110)
            goto LABEL_156;
        }
      }
LABEL_158:
      v119 = (uint64_t *)(*(_QWORD *)(a1 + 376) + 8 * v30);
      v120 = (v109 * v8);
      if ((int)v120 >= 1)
      {
        v121 = (float *)*v119;
        do
        {
          v122 = -1035468800;
          if (*v121 < -50.0 || (v122 = 1112014848, *v121 > 50.0))
            *(_DWORD *)v121 = v122;
          ++v121;
          --v120;
        }
        while (v120);
      }
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 472) + 8 * v30), v119, v8, v109, *(_DWORD *)(a1 + 736));
      v123 = *(_QWORD *)(a1 + 184);
      v124 = *(_QWORD *)(a1 + 520);
      v125 = *(_QWORD *)(a1 + 448);
      v126 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
      if ((int)v126 >= 8)
      {
        v127 = *(float32x4_t **)(v123 + 8 * v81);
        v128 = *(float32x4_t **)(v125 + 8 * v30);
        v129 = (int)v126 / 8;
        v130 = *(float32x4_t **)(v124 + 8 * v30);
        do
        {
          v132 = *v130;
          v131 = v130[1];
          v130 += 2;
          v134 = *v128;
          v133 = v128[1];
          v128 += 2;
          *v127 = vmulq_f32(v134, v132);
          v127[1] = vmulq_f32(v133, v131);
          v127 += 2;
          --v129;
        }
        while (v129);
      }
      v135 = 8 * ((int)v126 / 8);
      if (v135 < (int)v126)
      {
        v136 = *(_QWORD *)(v124 + 8 * v30);
        v137 = *(_QWORD *)(v125 + 8 * v30);
        v138 = *(_QWORD *)(v123 + 8 * v81);
        v139 = v135;
        v140 = v126 - v135;
        if (v140 < 0xC)
          goto LABEL_175;
        v141 = 4 * v135;
        if ((unint64_t)(v138 - v136) < 0x20)
          goto LABEL_175;
        if ((unint64_t)(v138 - v137) < 0x20)
          goto LABEL_175;
        v142 = v140 - (v126 & 7) + v135;
        v143 = v135 + (unint64_t)(v126 & 7) - v126;
        v144 = (float32x4_t *)(v138 + v141 + 16);
        v145 = (float32x4_t *)(v136 + v141 + 16);
        v146 = (float32x4_t *)(v137 + v141 + 16);
        do
        {
          v147 = vmulq_f32(*v146, *v145);
          v144[-1] = vmulq_f32(v146[-1], v145[-1]);
          *v144 = v147;
          v144 += 2;
          v145 += 2;
          v146 += 2;
          v143 += 8;
        }
        while (v143);
        v139 = v142;
        if ((v126 & 7) != 0)
        {
LABEL_175:
          v148 = v126 - v139;
          v149 = (float *)(v138 + 4 * v139);
          v150 = (float *)(v137 + 4 * v139);
          v151 = (float *)(v136 + 4 * v139);
          do
          {
            v152 = *v151++;
            v153 = v152;
            v154 = *v150++;
            *v149++ = v154 * v153;
            --v148;
          }
          while (v148);
        }
      }
      if (v292)
      {
        if (v283)
        {
          v155 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v155 < 1)
            goto LABEL_222;
          v156 = *(_QWORD *)(a1 + 184);
          v157 = *(float32x4_t **)(v156 + 8 * v291);
          v158 = *(float32x4_t **)(*(_QWORD *)(a1 + 448) + 8 * v30);
          v159 = *(_QWORD *)(v156 + 8 * v81);
          if (v155 < 8)
          {
            v160 = 0;
LABEL_220:
            v206 = v155 - v160;
            v207 = v160;
            v208 = (float *)(v159 + v207 * 4);
            v209 = &v158->f32[v207];
            v210 = &v157->f32[v207];
            do
            {
              v211 = *v210++;
              v212 = v211;
              v213 = *v209++;
              *v208 = (float)(v212 - (float)(v213 * v212)) + *v208;
              ++v208;
              --v206;
            }
            while (v206);
            goto LABEL_222;
          }
          v160 = 0;
          v197 = v159 + 4 * v155;
          v199 = v159 < (unint64_t)v158->u64 + 4 * v155 && (unint64_t)v158 < v197;
          if ((unint64_t)v157 < v197 && v159 < (unint64_t)v157->u64 + 4 * v155)
            goto LABEL_220;
          if (v199)
            goto LABEL_220;
          v160 = v155 & 0xFFFFFFF8;
          v201 = v157 + 1;
          v202 = v158 + 1;
          v203 = (float32x4_t *)(v159 + 16);
          v204 = v160;
          do
          {
            v205 = vaddq_f32(vmlsq_f32(*v201, *v201, *v202), *v203);
            v203[-1] = vaddq_f32(vmlsq_f32(v201[-1], v201[-1], v202[-1]), v203[-1]);
            *v203 = v205;
            v201 += 2;
            v202 += 2;
            v203 += 2;
            v204 -= 8;
          }
          while (v204);
          if (v160 != v155)
            goto LABEL_220;
        }
        else
        {
          v161 = *(_QWORD *)(a1 + 184);
          v162 = *(_QWORD *)(a1 + 472);
          v163 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
          if ((int)v163 >= 8)
          {
            v164 = *(float32x4_t **)(v161 + 8 * v81);
            v165 = *(float32x4_t **)(v161 + 8 * v291);
            v166 = (int)v163 / 8;
            v167 = *(float32x4_t **)(v162 + 8 * v30);
            do
            {
              v169 = *v167;
              v168 = v167[1];
              v167 += 2;
              v171 = *v165;
              v170 = v165[1];
              v165 += 2;
              v172 = vmlaq_f32(v164[1], v170, v168);
              *v164 = vmlaq_f32(*v164, v171, v169);
              v164[1] = v172;
              v164 += 2;
              --v166;
            }
            while (v166);
          }
          v173 = 8 * ((int)v163 / 8);
          if (v173 < (int)v163)
          {
            v174 = *(_QWORD *)(v162 + 8 * v30);
            v175 = *(_QWORD *)(v161 + 8 * v291);
            v176 = *(_QWORD *)(v161 + 8 * v81);
            v177 = v173;
            v178 = v163 - v173;
            if (v178 < 8)
              goto LABEL_202;
            v179 = 4 * v173;
            v180 = v176 + 4 * v163;
            v181 = v176 + v179 >= (unint64_t)(v175 + 4 * v163) || v175 + 4 * v173 >= v180;
            v182 = !v181;
            if (v174 + v179 < v180 && v176 + v179 < (unint64_t)(v174 + 4 * v163))
              goto LABEL_202;
            if (v182)
              goto LABEL_202;
            v184 = v178 - (v163 & 7) + v177;
            v185 = v177 + (v163 & 7) - v163;
            v186 = (float32x4_t *)(v176 + v179 + 16);
            v187 = (float32x4_t *)(v174 + v179 + 16);
            v188 = (float32x4_t *)(v175 + v179 + 16);
            do
            {
              v189 = vmlaq_f32(*v186, *v188, *v187);
              v186[-1] = vmlaq_f32(v186[-1], v188[-1], v187[-1]);
              *v186 = v189;
              v186 += 2;
              v187 += 2;
              v188 += 2;
              v185 += 8;
            }
            while (v185);
            v177 = v184;
            if ((v163 & 7) != 0)
            {
LABEL_202:
              v190 = v163 - v177;
              v191 = (float *)(v176 + 4 * v177);
              v192 = (float *)(v175 + 4 * v177);
              v193 = (float *)(v174 + 4 * v177);
              do
              {
                v194 = *v193++;
                v195 = v194;
                v196 = *v192++;
                *v191 = *v191 + (float)(v196 * v195);
                ++v191;
                --v190;
              }
              while (v190);
            }
          }
        }
      }
LABEL_222:
      v214 = *(_DWORD *)(a1 + 52);
      v215 = (v214 * v8);
      if ((int)v215 >= 1)
      {
        v216 = *(float **)(*(_QWORD *)(a1 + 184) + 8 * v81);
        do
        {
          v217 = -v11;
          if (*v216 < (float)-v11 || (v217 = v11, *v216 > v11))
            *v216 = v217;
          ++v216;
          --v215;
        }
        while (v215);
      }
      sub_19C104ED0(a1, v289, (const float **)(*(_QWORD *)(a1 + 400) + 8 * v30), *(_QWORD *)(a1 + 136) + 8 * v297, *(uint64_t **)(a1 + 2520), *(_QWORD *)(a1 + 208) + 24 * (int)v81, v8, v214, *(_DWORD *)(a1 + 48), 1);
      v218 = *(_QWORD *)(a1 + 2680);
      if (v218)
      {
        if (*(_BYTE *)(v218 + 244))
          goto LABEL_276;
        v219 = (uint64_t *)(*(_QWORD *)(a1 + 400) + 8 * v30);
        v220 = *(unsigned int *)(a1 + 52);
        if (!(_DWORD)v8 || !*(_BYTE *)(v218 + 384))
          goto LABEL_254;
      }
      else
      {
        v219 = (uint64_t *)(*(_QWORD *)(a1 + 400) + 8 * v30);
        v220 = *(unsigned int *)(a1 + 52);
        if (!(_DWORD)v8)
          goto LABEL_254;
      }
      if ((int)v220 >= 1)
      {
        v221 = 0;
        v222 = *(float32x4_t **)(*(_QWORD *)(a1 + 184) + 8 * v81);
        v223 = **(int16x4_t ***)(a1 + 2584);
        v224 = 4 * v220;
        v225 = *v219;
        v226 = *v219 + 16;
        v227 = v222 + 1;
        v228 = v222;
        v229 = *v219;
        while (v220 >= 8)
        {
          v230 = v224 + v224 * v221;
          v231 = (unint64_t)v222 + v230;
          v232 = v225 + v230;
          if (v225 + v224 * v221 < v231 && (unint64_t)v222 + v224 * v221 < v232)
            break;
          v234 = v227;
          v235 = (float32x4_t *)v226;
          v236 = v223 + 1;
          v237 = v220 & 0xFFFFFFF8;
          do
          {
            v238 = vmlaq_f32(*v235, *v234, (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(*v236, (int16x4_t)0x8000800080008000)), v293, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(*v236, v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(*v236)), v295), v294)));
            v235[-1] = vmlaq_f32(v235[-1], v234[-1], (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vceq_s16(v236[-1], (int16x4_t)0x8000800080008000)), v293, vbslq_s8((int8x16_t)vmovl_s16(vcgt_s16(v236[-1], v15)), (int8x16_t)vmulq_f32(vcvtq_f32_s32(vmovl_s16(v236[-1])), v295), v294)));
            *v235 = v238;
            v236 += 2;
            v235 += 2;
            v234 += 2;
            v237 -= 8;
          }
          while (v237);
          v239 = v220 & 0xFFFFFFF8;
          if (v239 != v220)
            goto LABEL_249;
LABEL_237:
          ++v221;
          v226 += v224;
          v227 = (float32x4_t *)((char *)v227 + v224);
          v229 += v224;
          v228 = (float32x4_t *)((char *)v228 + v224);
          if (v221 == v8)
            goto LABEL_254;
        }
        v239 = 0;
LABEL_249:
        v240 = v220 - v239;
        v241 = (float *)(v229 + 4 * v239);
        v242 = &v228->f32[v239];
        v243 = (__int16 *)v223 + v239;
        do
        {
          v246 = *v243++;
          v245 = v246;
          v247 = -5.0;
          if (v246 >= -32766)
          {
            v247 = 5.0;
            if (v245 != 0x7FFF)
              v247 = (float)v245 * 0.00015259;
          }
          v244 = *v242++;
          *v241 = *v241 + (float)(v244 * v247);
          ++v241;
          --v240;
        }
        while (v240);
        goto LABEL_237;
      }
LABEL_254:
      v248 = (v220 * v8);
      if ((int)v248 >= 1)
      {
        v249 = (float *)*v219;
        do
        {
          v250 = -1035468800;
          if (*v249 < -50.0 || (v250 = 1112014848, *v249 > 50.0))
            *(_DWORD *)v249 = v250;
          ++v249;
          --v248;
        }
        while (v248);
      }
      sub_19C0A3DD8((float32x2_t **)(*(_QWORD *)(a1 + 496) + 8 * v30), v219, v8, v220, *(_DWORD *)(a1 + 736));
      sub_19C0A3DD8(v285, (uint64_t *)(*(_QWORD *)(a1 + 184) + 8 * v81), v8, *(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 744));
      v251 = *(_QWORD *)(a1 + 160);
      v252 = *(_QWORD *)(a1 + 496);
      v253 = *(int *)(a1 + 52) * (uint64_t)(int)v8;
      v254 = (int)v253 / 8;
      if ((int)v253 >= 8)
      {
        v255 = *(float32x4_t **)(v251 + 8 * v81);
        v256 = *(float32x4_t **)(v252 + 8 * v30);
        v257 = (int)v253 / 8;
        v258 = *v285;
        do
        {
          v260 = *(float32x4_t *)v258->f32;
          v259 = *(float32x4_t *)v258[2].f32;
          v258 += 4;
          v262 = *v256;
          v261 = v256[1];
          v256 += 2;
          *v255 = vmulq_f32(v262, v260);
          v255[1] = vmulq_f32(v261, v259);
          v255 += 2;
          --v257;
        }
        while (v257);
      }
      v263 = 8 * v254;
      if (8 * v254 < (int)v253)
      {
        v264 = *(_QWORD *)(v252 + 8 * v30);
        v265 = *v285;
        v266 = *(_QWORD *)(v251 + 8 * v81);
        v267 = v263;
        v268 = v253 - v263;
        if (v268 < 0xC)
          goto LABEL_271;
        v269 = 4 * v263;
        if ((unint64_t)(v266 - (_QWORD)v265) < 0x20)
          goto LABEL_271;
        if ((unint64_t)(v266 - v264) < 0x20)
          goto LABEL_271;
        v270 = v268 - (v253 & 7) + v263;
        v271 = v263 + (unint64_t)(v253 & 7) - v253;
        v272 = (float32x4_t *)(v266 + v269 + 16);
        v273 = (float32x4_t *)((char *)&v265[2] + v269);
        v274 = (float32x4_t *)(v264 + v269 + 16);
        do
        {
          v275 = vmulq_f32(*v274, *v273);
          v272[-1] = vmulq_f32(v274[-1], v273[-1]);
          *v272 = v275;
          v272 += 2;
          v273 += 2;
          v274 += 2;
          v271 += 8;
        }
        while (v271);
        v267 = v270;
        if ((v253 & 7) != 0)
        {
LABEL_271:
          v276 = v253 - v267;
          v277 = (float *)(v266 + 4 * v267);
          v278 = (float *)(v264 + 4 * v267);
          v279 = (float *)v265 + v267;
          do
          {
            v280 = *v279++;
            v281 = v280;
            v282 = *v278++;
            *v277++ = v282 * v281;
            --v276;
          }
          while (v276);
        }
      }
      if (*(_BYTE *)(a1 + 2692))
      {
        memcpy(*(void **)(*(_QWORD *)(a1 + 112) + 8 * v81), *(const void **)(*(_QWORD *)(a1 + 160) + 8 * v81), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(_QWORD *)(a1 + 88) + 8 * v81), *(const void **)(*(_QWORD *)(a1 + 184) + 8 * v81), 4 * *(int *)(a1 + 52));
      }
      v10 = v289;
      v14 = v290 + 1;
      v12 = v284;
      if (v290 + 1 == v284)
        return;
    }
    bzero(*(void **)(v25 + 8 * v24), 4 * *(int *)(a1 + 48));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v24) + 4 * **(int **)(*a3 + 24 * v20)) = 1065353216;
    v26 = *(unsigned __int8 *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_42;
LABEL_41:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v24) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    goto LABEL_42;
  }
}

void sub_19C104AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 160);
  if (v3)
  {
    *(_QWORD *)(v1 - 152) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C104ADC(void **a1, int **a2, uint64_t *a3, int a4, int a5)
{
  float v10;
  double v11;
  double v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  uint64_t v28;
  float v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float v42;

  v10 = sub_19C2210C8();
  v11 = (float)(sub_19C2210C8() * v10);
  v13 = *a2;
  v14 = a2[1];
  v15 = (char *)v14 - (char *)*a2;
  if (v15 == 8)
  {
    if (a4 < 1)
      return;
    v17 = *v13;
    v16 = v13[1];
    v18 = v11 * 6554.0;
    v19 = *a3;
    v20 = (char *)*a1;
    v21 = 2 * a5;
    if (a4 == 1)
    {
      v22 = 0;
      v23 = 0;
LABEL_16:
      v38 = a4 - v22;
      v39 = v23 + v17;
      v40 = v23 + v16;
      v41 = (float *)&v20[4 * v22];
      do
      {
        v42 = v18 * (float)(*(__int16 *)(v19 + 2 * v40) + *(__int16 *)(v19 + 2 * v39));
        *v41++ = v42;
        v19 += v21;
        --v38;
      }
      while (v38);
      return;
    }
    v22 = a4 & 0xFFFFFFFE;
    v23 = v22 * a5;
    v33 = (float *)(v20 + 4);
    v34 = v22;
    v35 = *a3;
    do
    {
      v36 = v18 * (float)(*(__int16 *)(v35 + 2 * v16) + *(__int16 *)(v35 + 2 * v17));
      v37 = v18 * (float)(*(__int16 *)(v35 + v21 + 2 * v16) + *(__int16 *)(v35 + v21 + 2 * v17));
      *(v33 - 1) = v36;
      *v33 = v37;
      v35 += 4 * a5;
      v33 += 2;
      v34 -= 2;
    }
    while (v34);
    if (v22 != a4)
      goto LABEL_16;
  }
  else if (a4 >= 1)
  {
    v24 = *a1;
    if (v14 == v13)
    {
      bzero(v24, 4 * a4);
    }
    else
    {
      v25 = 0;
      v26 = v15 >> 2;
      v27 = v11 * 6554.0;
      v28 = *a3;
      if (v26 <= 1)
        v26 = 1;
      do
      {
        v29 = 0.0;
        v30 = v26;
        v31 = v13;
        do
        {
          v32 = *v31++;
          LOWORD(v12) = *(_WORD *)(v28 + 2 * (v25 * a5 + v32));
          v12 = (double)vmovl_s16(*(int16x4_t *)&v12).i32[0];
          v29 = v29 + v27 * v12;
          --v30;
        }
        while (v30);
        *((float *)v24 + v25++) = v29;
      }
      while (v25 != a4);
    }
  }
}

void sub_19C104CF4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v12;
  void *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  if (a2)
    sub_19C2210D4(545);
  if (*(_QWORD *)(a1 + 784))
LABEL_7:
    sub_19C2210D4(34);
  v12 = 4 * a11 * *(_DWORD *)(a1 + 2688);
  v13 = (void *)operator new[]();
  bzero(v13, 4 * v12);
  *(_QWORD *)(a1 + 784) = v13;
  v14 = *(char **)(a1 + 2632);
  v15 = *(_QWORD *)(a1 + 2640);
  if ((unint64_t)v14 < v15)
  {
    *(_QWORD *)v14 = v13;
    v16 = (uint64_t)(v14 + 8);
LABEL_6:
    *(_QWORD *)(a1 + 2632) = v16;
    goto LABEL_7;
  }
  v17 = *(char **)(a1 + 2624);
  v18 = (v14 - v17) >> 3;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 61)
    sub_19C07DA0C();
  v20 = v15 - (_QWORD)v17;
  if (v20 >> 2 > v19)
    v19 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (v21 >> 61)
      sub_19C07C7FC();
    v22 = (char *)operator new(8 * v21);
    v23 = &v22[8 * v18];
    v24 = &v22[8 * v21];
    *(_QWORD *)v23 = v13;
    v16 = (uint64_t)(v23 + 8);
    v25 = (char *)(v14 - v17);
    if (v14 == v17)
      goto LABEL_28;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(8 * v18);
    v24 = 0;
    *(_QWORD *)(8 * v18) = v13;
    v16 = 8 * v18 + 8;
    v25 = (char *)(v14 - v17);
    if (v14 == v17)
    {
LABEL_28:
      *(_QWORD *)(a1 + 2624) = v23;
      *(_QWORD *)(a1 + 2632) = v16;
      *(_QWORD *)(a1 + 2640) = v24;
      if (v14)
        operator delete(v14);
      goto LABEL_6;
    }
  }
  v26 = (unint64_t)(v25 - 8);
  if (v26 < 0x58)
    goto LABEL_32;
  if ((unint64_t)(v17 - v22) < 0x20)
    goto LABEL_32;
  v27 = (v26 >> 3) + 1;
  v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
  v29 = &v14[-v28];
  v23 -= v28;
  v30 = &v22[8 * v18 - 16];
  v31 = v14 - 16;
  v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v33 = *(_OWORD *)v31;
    *((_OWORD *)v30 - 1) = *((_OWORD *)v31 - 1);
    *(_OWORD *)v30 = v33;
    v30 -= 32;
    v31 -= 32;
    v32 -= 4;
  }
  while (v32);
  v14 = v29;
  if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_32:
    do
    {
      v34 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *((_QWORD *)v23 - 1) = v34;
      v23 -= 8;
    }
    while (v14 != v17);
  }
  v14 = *(char **)(a1 + 2624);
  goto LABEL_28;
}

void sub_19C104ED0(uint64_t a1, int a2, const float **a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, int a8, int a9, char a10)
{
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  void **v19;
  void *__p;
  void *v21;
  char *v22;

  if ((a10 & 1) == 0)
  {
    if (a2)
      sub_19C2210D4(456);
LABEL_12:
    sub_19C2210D4(34);
  }
  if (!a2)
    goto LABEL_12;
  if (a7 != 1)
    sub_19C2210D4(502);
  __p = 0;
  v21 = 0;
  v22 = 0;
  v15 = *(const void **)a6;
  v14 = *(_QWORD *)(a6 + 8);
  v16 = v14 - *(_QWORD *)a6;
  if (v14 != *(_QWORD *)a6)
  {
    if (v16 < 0)
      sub_19C07DA0C();
    v17 = (char *)operator new(v14 - *(_QWORD *)a6);
    v18 = &v17[4 * (v16 >> 2)];
    __p = v17;
    v22 = v18;
    memcpy(v17, v15, v16);
    v21 = v18;
  }
  v19 = (void **)(a1 + 760);
  sub_19C104ADC(v19, (int **)&__p, a5, a8, a9);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  vDSP_vadd((const float *)*v19, 1, *a3, 1, (float *)*a3, 1, a8);
}

void sub_19C104FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C105000(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  *a1 = &unk_1E3D1FBC8;
  sub_19C0F9D08(a1);
  v2 = a1[194];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    a1[194] = 0;
    v3 = a1[195];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
    a1[195] = 0;
    v4 = a1[196];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
    a1[196] = 0;
    v5 = a1[197];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    a1[197] = 0;
    v6 = a1[198];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
    a1[198] = 0;
    v7 = a1[199];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7);
    a1[199] = 0;
    v8 = a1[200];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8);
    a1[200] = 0;
    v9 = a1[201];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9);
    a1[201] = 0;
  }
  v10 = (void *)a1[331];
  if (v10)
  {
    a1[332] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[328];
  if (v11)
  {
    a1[329] = v11;
    operator delete(v11);
  }
  sub_19C22CB78((uint64_t)(a1 + 303));
  sub_19C22CB78((uint64_t)(a1 + 294));
  sub_19C22CB78((uint64_t)(a1 + 285));
  sub_19C22CB78((uint64_t)(a1 + 276));
  sub_19C22CB78((uint64_t)(a1 + 267));
  sub_19C22CB78((uint64_t)(a1 + 258));
  sub_19C22CB78((uint64_t)(a1 + 249));
  sub_19C22CB78((uint64_t)(a1 + 240));
  sub_19C22CB78((uint64_t)(a1 + 231));
  sub_19C22CB78((uint64_t)(a1 + 222));
  sub_19C22CB78((uint64_t)(a1 + 213));
  sub_19C101AC4(a1 + 168);
  sub_19C101AC4(a1 + 153);
  sub_19C101AC4(a1 + 138);
  sub_19C101AC4(a1 + 123);
  v12 = (void *)a1[120];
  if (v12)
  {
    a1[121] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[117];
  if (v13)
  {
    a1[118] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[114];
  if (v14)
  {
    a1[115] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[111];
  if (v15)
  {
    a1[112] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[108];
  if (v16)
  {
    a1[109] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[105];
  if (v17)
  {
    a1[106] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[102];
  if (v18)
  {
    a1[103] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[99];
  if (v19)
  {
    a1[100] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[89];
  if (v20)
  {
    a1[90] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[86];
  if (v21)
  {
    a1[87] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[83];
  if (v22)
  {
    a1[84] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[80];
  if (v23)
  {
    a1[81] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[77];
  if (v24)
  {
    a1[78] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[74];
  if (v25)
  {
    a1[75] = v25;
    operator delete(v25);
  }
  v26 = (void *)a1[71];
  if (v26)
  {
    a1[72] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[68];
  if (v27)
  {
    a1[69] = v27;
    operator delete(v27);
  }
  v28 = (void *)a1[65];
  if (v28)
  {
    a1[66] = v28;
    operator delete(v28);
  }
  v29 = (void *)a1[62];
  if (v29)
  {
    a1[63] = v29;
    operator delete(v29);
  }
  v30 = (void *)a1[59];
  if (v30)
  {
    a1[60] = v30;
    operator delete(v30);
  }
  v31 = (void *)a1[56];
  if (v31)
  {
    a1[57] = v31;
    operator delete(v31);
  }
  v32 = (void *)a1[53];
  if (v32)
  {
    a1[54] = v32;
    operator delete(v32);
  }
  v33 = (void *)a1[50];
  if (v33)
  {
    a1[51] = v33;
    operator delete(v33);
  }
  v34 = (void *)a1[47];
  if (v34)
  {
    a1[48] = v34;
    operator delete(v34);
  }
  v35 = (void *)a1[44];
  if (v35)
  {
    a1[45] = v35;
    operator delete(v35);
  }
  v36 = a1[26];
  if (v36)
  {
    v37 = a1[27];
    v38 = (void *)a1[26];
    if (v37 != v36)
    {
      v39 = a1[27];
      do
      {
        v41 = *(void **)(v39 - 24);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *(_QWORD *)(v37 - 16) = v40;
          operator delete(v40);
        }
        v37 = v39;
      }
      while (v39 != v36);
      v38 = (void *)a1[26];
    }
    a1[27] = v36;
    operator delete(v38);
  }
  v42 = (void *)a1[23];
  if (v42)
  {
    a1[24] = v42;
    operator delete(v42);
  }
  v43 = (void *)a1[20];
  if (v43)
  {
    a1[21] = v43;
    operator delete(v43);
  }
  v44 = (void *)a1[17];
  if (v44)
  {
    a1[18] = v44;
    operator delete(v44);
  }
  v45 = (void *)a1[14];
  if (v45)
  {
    a1[15] = v45;
    operator delete(v45);
  }
  v46 = (void *)a1[11];
  if (v46)
  {
    a1[12] = v46;
    operator delete(v46);
  }
  v47 = (void *)a1[8];
  if (v47)
  {
    a1[9] = v47;
    operator delete(v47);
  }
  *a1 = &unk_1E3D1E2D8;
  v48 = (void *)a1[1];
  if (v48)
  {
    a1[2] = v48;
    operator delete(v48);
  }
  return a1;
}

uint64_t sub_19C1053E0(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 48))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C1053F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 8))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105400(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105410(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105420(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105430(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105440(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105450(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105460(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105470(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105480(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  if (lpsrc)
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D058, 0);
  else
    v5 = 0;
  v6 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D058, 0);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48), v5[6], v6[6]);
}

uint64_t sub_19C10550C(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  if (lpsrc)
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D058, 0);
  else
    v5 = 0;
  v6 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D058, 0);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), v5[6], v6[6]);
}

uint64_t sub_19C105598(uint64_t a1, void *lpsrc)
{
  uint64_t v3;

  v3 = *((_QWORD *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D058, 0)+ 6);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 96))(*(_QWORD *)(a1 + 48), v3);
}

uint64_t sub_19C1055E8(uint64_t a1, void *lpsrc)
{
  uint64_t v3;

  v3 = *((_QWORD *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D058, 0)+ 6);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 104))(*(_QWORD *)(a1 + 48), v3);
}

uint64_t sub_19C105638(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 112))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105648(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 120))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105658(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 128))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105668(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105678(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 144))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105688(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 152))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105698(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 160))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C1056A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 168))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C1056B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 176))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C1056C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 184))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C1056D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 192))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C1056E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 200))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C1056F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 208))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105708(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 264))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C105718(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 272))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C10572C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 288))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C10573C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 320))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C10574C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 312))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C10575C(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;

  v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D058, 0);
  if (!v3)
    __cxa_bad_cast();
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 328))(*(_QWORD *)(a1 + 48), v3[6]);
}

uint64_t sub_19C1057B4(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  _QWORD *v9;

  v9 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D058, 0);
  if (!v9)
    __cxa_bad_cast();
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, float, float))(**(_QWORD **)(a1 + 48) + 336))(*(_QWORD *)(a1 + 48), v9[6], a3, a4, a5);
}

uint64_t sub_19C10582C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 344))(*(_QWORD *)(a1 + 48));
}

uint64_t sub_19C10583C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 352))(*(_QWORD *)(a1 + 48));
}

_QWORD *sub_19C10584C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &unk_1E3D1FF00;
  v2 = a1[6];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2);
  *a1 = &unk_1E3D1E2D8;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_19C1058B0(_QWORD *__p)
{
  uint64_t v2;
  void *v3;

  *__p = &unk_1E3D1FF00;
  v2 = __p[6];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2);
  *__p = &unk_1E3D1E2D8;
  v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

uint64_t sub_19C105914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v8;
  char *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D20708;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a2;
  v6 = v4 - *(_QWORD *)a2;
  if (v6 < 0)
    sub_19C07DA0C();
  v8 = (char *)operator new(v4 - *(_QWORD *)a2);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v8;
  v9 = &v8[8 * (v6 >> 3)];
  *(_QWORD *)(a1 + 96) = v9;
  memcpy(v8, v5, v6);
  v10 = 0;
  *(_QWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a3;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  do
  {
    (*(void (**)(_QWORD))(**(_QWORD **)&v8[8 * v10] + 192))(*(_QWORD *)&v8[8 * v10]);
    ++v10;
    v8 = *(char **)(a1 + 80);
    v11 = *(_BYTE **)(a1 + 88);
  }
  while (v10 < (v11 - v8) >> 3);
  *(_DWORD *)(a1 + 72) = 0;
  if (v11 != v8)
  {
    v12 = 0;
    do
    {
      *(_DWORD *)(a1 + 72) += (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v8[8 * v12] + 272))(*(_QWORD *)&v8[8 * v12]);
      ++v12;
      v8 = *(char **)(a1 + 80);
    }
    while (v12 < (uint64_t)(*(_QWORD *)(a1 + 88) - (_QWORD)v8) >> 3);
  }
  *(_BYTE *)(a1 + 41) = 0;
  if (*(_BYTE *)(*(_QWORD *)v8 + 40))
    *(_BYTE *)(a1 + 40) = 1;
  sub_19C105B84(a1);
  return a1;
}

void sub_19C105A90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v10 = (void *)v1[32];
  if (v10)
  {
    v1[33] = v10;
    operator delete(v10);
  }
  v11 = *v8;
  if (*v8)
  {
    v1[30] = v11;
    operator delete(v11);
  }
  sub_19C0830E8(v5);
  sub_19C0830E8(v4);
  sub_19C0830E8(v3);
  v12 = (void *)v1[16];
  if (v12)
  {
    v1[17] = v12;
    operator delete(v12);
    v13 = *v7;
    if (!*v7)
    {
LABEL_7:
      v14 = *v2;
      if (!*v2)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else
  {
    v13 = *v7;
    if (!*v7)
      goto LABEL_7;
  }
  v1[14] = v13;
  operator delete(v13);
  v14 = *v2;
  if (!*v2)
  {
LABEL_8:
    v15 = *v6;
    if (!*v6)
      goto LABEL_9;
    goto LABEL_14;
  }
LABEL_13:
  v1[11] = v14;
  operator delete(v14);
  v15 = *v6;
  if (!*v6)
  {
LABEL_9:
    *v1 = &unk_1E3D1E2D8;
    v16 = (void *)v1[1];
    if (!v16)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v1[7] = v15;
  operator delete(v15);
  *v1 = &unk_1E3D1E2D8;
  v16 = (void *)v1[1];
  if (!v16)
LABEL_10:
    _Unwind_Resume(a1);
LABEL_15:
  v1[2] = v16;
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_19C105B84(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **p_vtable;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _DWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  _DWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  void **v137;
  uint64_t v138;
  unint64_t v139;
  void **v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t i;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  void *v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  _OWORD *v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _BYTE *v180;
  _QWORD *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  _OWORD *v186;
  char *v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  unint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  _BYTE *v202;
  _QWORD *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  _OWORD *v208;
  char *v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  void **v213;
  _QWORD *v214;
  _QWORD *v215;
  void **v216;
  char **v217;

  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v2 = (void **)(a1 + 104);
  p_vtable = MLPNDArrayLossLabels.vtable;
  v6 = dword_1EE418968;
  v7 = dword_1EE418968;
  v8 = (v4 - v3) >> 3;
  if (dword_1EE418968 <= v8)
  {
    if (dword_1EE418968 < v8)
      *(_QWORD *)(a1 + 112) = v3 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930(v2, dword_1EE418968 - v8);
    v6 = dword_1EE418968;
    v7 = dword_1EE418968;
  }
  v9 = *(_QWORD *)(a1 + 128);
  v10 = (*(_QWORD *)(a1 + 136) - v9) >> 3;
  if (v7 <= v10)
  {
    if (v7 < v10)
      *(_QWORD *)(a1 + 136) = v9 + 8 * v7;
  }
  else
  {
    sub_19C098930((void **)(a1 + 128), v7 - v10);
    v6 = dword_1EE418968;
  }
  if (v6 >= 1)
  {
    v11 = 0;
    v12 = (char **)(a1 + 48);
    do
    {
      v14 = *(unsigned int *)(a1 + 72);
      v15 = (void *)operator new[]();
      v16 = v15;
      if ((int)v14 >= 1)
        bzero(v15, 4 * v14);
      *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v11) = v16;
      v18 = *(char **)(a1 + 56);
      v17 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v18 < v17)
      {
        *(_QWORD *)v18 = v16;
        v19 = (uint64_t)(v18 + 8);
        goto LABEL_38;
      }
      v20 = *v12;
      v21 = v18 - *v12;
      v22 = v21 >> 3;
      v23 = (v21 >> 3) + 1;
      if (v23 >> 61)
        goto LABEL_229;
      v24 = v17 - (_QWORD)v20;
      if (v24 >> 2 > v23)
        v23 = v24 >> 2;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 61)
          goto LABEL_228;
        v26 = operator new(8 * v25);
        v27 = &v26[8 * v22];
        *v27 = v16;
        v19 = (uint64_t)(v27 + 1);
        if (v18 != v20)
        {
LABEL_26:
          v28 = v18 - 8 - v20;
          if (v28 < 0x58)
          {
            p_vtable = (void **)(MLPNDArrayLossLabels + 24);
            goto LABEL_35;
          }
          v29 = v18 - &v26[v21];
          p_vtable = MLPNDArrayLossLabels.vtable;
          if (v29 < 0x20)
            goto LABEL_234;
          v30 = (v28 >> 3) + 1;
          v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          v32 = &v18[-v31];
          v27 = (_QWORD *)((char *)v27 - v31);
          v33 = &v26[8 * v22 - 16];
          v34 = v18 - 16;
          v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 4;
          }
          while (v35);
          v18 = v32;
          if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_234:
            do
            {
LABEL_35:
              v37 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *--v27 = v37;
            }
            while (v18 != v20);
          }
          v18 = *v12;
          *(_QWORD *)(a1 + 48) = v27;
          *(_QWORD *)(a1 + 56) = v19;
          *(_QWORD *)(a1 + 64) = &v26[8 * v25];
          if (!v18)
            goto LABEL_38;
LABEL_37:
          operator delete(v18);
          goto LABEL_38;
        }
      }
      else
      {
        v26 = 0;
        v27 = (_QWORD *)(8 * v22);
        *(_QWORD *)(8 * v22) = v16;
        v19 = 8 * v22 + 8;
        if (v18 != v20)
          goto LABEL_26;
      }
      p_vtable = (void **)(MLPNDArrayLossLabels + 24);
      *(_QWORD *)(a1 + 48) = v27;
      *(_QWORD *)(a1 + 56) = v19;
      *(_QWORD *)(a1 + 64) = &v26[8 * v25];
      if (v18)
        goto LABEL_37;
LABEL_38:
      *(_QWORD *)(a1 + 56) = v19;
      v38 = *(unsigned int *)(a1 + 72);
      v39 = (void *)operator new[]();
      v40 = v39;
      if ((int)v38 >= 1)
        bzero(v39, 4 * v38);
      *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v11) = v40;
      v42 = *(char **)(a1 + 56);
      v41 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v42 < v41)
      {
        *(_QWORD *)v42 = v40;
        v13 = (uint64_t)(v42 + 8);
        goto LABEL_12;
      }
      v43 = *v12;
      v44 = v42 - *v12;
      v45 = v44 >> 3;
      v46 = (v44 >> 3) + 1;
      if (v46 >> 61)
LABEL_229:
        sub_19C07DA0C();
      v47 = v41 - (_QWORD)v43;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        if (v48 >> 61)
LABEL_228:
          sub_19C07C7FC();
        v49 = operator new(8 * v48);
        v50 = &v49[8 * v45];
        *v50 = v40;
        v13 = (uint64_t)(v50 + 1);
        if (v42 == v43)
        {
LABEL_53:
          p_vtable = (void **)(MLPNDArrayLossLabels + 24);
          *(_QWORD *)(a1 + 48) = v50;
          *(_QWORD *)(a1 + 56) = v13;
          *(_QWORD *)(a1 + 64) = &v49[8 * v48];
          if (!v42)
            goto LABEL_12;
LABEL_61:
          operator delete(v42);
          goto LABEL_12;
        }
      }
      else
      {
        v49 = 0;
        v50 = (_QWORD *)(8 * v45);
        *(_QWORD *)(8 * v45) = v40;
        v13 = 8 * v45 + 8;
        if (v42 == v43)
          goto LABEL_53;
      }
      v51 = v42 - 8 - v43;
      if (v51 < 0x58)
      {
        p_vtable = (void **)(MLPNDArrayLossLabels + 24);
        do
        {
LABEL_59:
          v60 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *--v50 = v60;
        }
        while (v42 != v43);
        goto LABEL_60;
      }
      v52 = v42 - &v49[v44];
      p_vtable = (void **)(MLPNDArrayLossLabels + 24);
      if (v52 < 0x20)
        goto LABEL_59;
      v53 = (v51 >> 3) + 1;
      v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
      v55 = &v42[-v54];
      v50 = (_QWORD *)((char *)v50 - v54);
      v56 = &v49[8 * v45 - 16];
      v57 = v42 - 16;
      v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v59 = *(_OWORD *)v57;
        *(v56 - 1) = *((_OWORD *)v57 - 1);
        *v56 = v59;
        v56 -= 2;
        v57 -= 32;
        v58 -= 4;
      }
      while (v58);
      v42 = v55;
      if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_59;
LABEL_60:
      v42 = *v12;
      *(_QWORD *)(a1 + 48) = v50;
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = &v49[8 * v48];
      if (v42)
        goto LABEL_61;
LABEL_12:
      *(_QWORD *)(a1 + 56) = v13;
      ++v11;
    }
    while (v11 < *((int *)p_vtable + 602));
  }
  v61 = *(_QWORD *)(a1 + 176);
  v62 = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
  v63 = *(_QWORD *)(a1 + 184);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v63 - v61) >> 3);
  if (v62 <= v64)
  {
    if (v62 < v64)
    {
      v65 = v61 + 24 * v62;
      if (v63 != v65)
      {
        v66 = *(_QWORD *)(a1 + 184);
        do
        {
          v68 = *(void **)(v66 - 24);
          v66 -= 24;
          v67 = v68;
          if (v68)
          {
            *(_QWORD *)(v63 - 16) = v67;
            operator delete(v67);
          }
          v63 = v66;
        }
        while (v66 != v65);
      }
      *(_QWORD *)(a1 + 184) = v65;
    }
  }
  else
  {
    sub_19C167E70(a1 + 176, v62 - v64);
  }
  v69 = *(_QWORD *)(a1 + 152);
  v70 = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
  v71 = *(_QWORD *)(a1 + 160);
  v72 = 0xAAAAAAAAAAAAAAABLL * ((v71 - v69) >> 3);
  v215 = (_QWORD *)(a1 + 152);
  if (v70 <= v72)
  {
    if (v70 < v72)
    {
      v73 = v69 + 24 * v70;
      if (v71 != v73)
      {
        v74 = *(_QWORD *)(a1 + 160);
        do
        {
          v76 = *(void **)(v74 - 24);
          v74 -= 24;
          v75 = v76;
          if (v76)
          {
            *(_QWORD *)(v71 - 16) = v75;
            operator delete(v75);
          }
          v71 = v74;
        }
        while (v74 != v73);
      }
      *(_QWORD *)(a1 + 160) = v73;
    }
  }
  else
  {
    sub_19C167E70(a1 + 152, v70 - v72);
  }
  v77 = *(_QWORD *)(a1 + 200);
  v78 = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3;
  v79 = *(_QWORD *)(a1 + 208);
  v80 = 0xAAAAAAAAAAAAAAABLL * ((v79 - v77) >> 3);
  v214 = (_QWORD *)(a1 + 200);
  if (v78 <= v80)
  {
    if (v78 < v80)
    {
      v81 = v77 + 24 * v78;
      if (v79 != v81)
      {
        v82 = *(_QWORD *)(a1 + 208);
        do
        {
          v84 = *(void **)(v82 - 24);
          v82 -= 24;
          v83 = v84;
          if (v84)
          {
            *(_QWORD *)(v79 - 16) = v83;
            operator delete(v83);
          }
          v79 = v82;
        }
        while (v82 != v81);
      }
      *(_QWORD *)(a1 + 208) = v81;
    }
  }
  else
  {
    sub_19C167E70(a1 + 200, v78 - v80);
  }
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232);
  v216 = (void **)(a1 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 256);
  v85 = *(_QWORD *)(a1 + 80);
  v213 = (void **)(a1 + 232);
  if (*(_QWORD *)(a1 + 88) != v85)
  {
    v86 = 0;
    v217 = (char **)(a1 + 48);
    while (1)
    {
      v87 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v85 + 8 * v86) + 272))(*(_QWORD *)(v85 + 8 * v86));
      v88 = v87;
      v90 = *(char **)(a1 + 264);
      v89 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v90 < v89)
      {
        *(_DWORD *)v90 = v87;
        v91 = (uint64_t)(v90 + 4);
        goto LABEL_114;
      }
      v92 = (char *)*v216;
      v93 = v90 - (_BYTE *)*v216;
      v94 = v93 >> 2;
      v95 = (v93 >> 2) + 1;
      if (v95 >> 62)
        sub_19C07DA0C();
      v96 = v89 - (_QWORD)v92;
      if (v96 >> 1 > v95)
        v95 = v96 >> 1;
      v97 = (unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v95;
      if (v97)
        break;
      v98 = 0;
      v99 = (_DWORD *)(4 * v94);
      *(_DWORD *)(4 * v94) = v88;
      v91 = 4 * v94 + 4;
      if (v90 != v92)
        goto LABEL_105;
LABEL_111:
      *(_QWORD *)(a1 + 256) = v99;
      *(_QWORD *)(a1 + 264) = v91;
      *(_QWORD *)(a1 + 272) = &v98[4 * v97];
      if (v92)
        operator delete(v92);
      p_vtable = (void **)(MLPNDArrayLossLabels + 24);
LABEL_114:
      *(_QWORD *)(a1 + 264) = v91;
      v109 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v86);
      v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 264))(v109);
      v111 = v110;
      v113 = *(char **)(a1 + 240);
      v112 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v113 < v112)
      {
        *(_DWORD *)v113 = v110;
        v114 = (uint64_t)(v113 + 4);
        goto LABEL_136;
      }
      v115 = (char *)*v213;
      v116 = v113 - (_BYTE *)*v213;
      v117 = v116 >> 2;
      v118 = (v116 >> 2) + 1;
      if (v118 >> 62)
        sub_19C07DA0C();
      v119 = v112 - (_QWORD)v115;
      if (v119 >> 1 > v118)
        v118 = v119 >> 1;
      if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
        v120 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v120 = v118;
      if (v120)
      {
        if (v120 >> 62)
          goto LABEL_228;
        v121 = operator new(4 * v120);
        v122 = &v121[4 * v117];
        *v122 = v111;
        v114 = (uint64_t)(v122 + 1);
        if (v113 == v115)
          goto LABEL_133;
LABEL_127:
        v123 = v113 - 4 - v115;
        if (v123 < 0x2C)
          goto LABEL_235;
        if ((unint64_t)(v113 - &v121[v116]) < 0x20)
          goto LABEL_235;
        v124 = (v123 >> 2) + 1;
        v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
        v126 = &v113[-v125];
        v122 = (_DWORD *)((char *)v122 - v125);
        v127 = &v121[4 * v117 - 16];
        v128 = v113 - 16;
        v129 = v124 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v130 = *(_OWORD *)v128;
          *(v127 - 1) = *((_OWORD *)v128 - 1);
          *v127 = v130;
          v127 -= 2;
          v128 -= 32;
          v129 -= 8;
        }
        while (v129);
        v113 = v126;
        if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_235:
          do
          {
            v131 = *((_DWORD *)v113 - 1);
            v113 -= 4;
            *--v122 = v131;
          }
          while (v113 != v115);
        }
        goto LABEL_133;
      }
      v121 = 0;
      v122 = (_DWORD *)(4 * v117);
      *(_DWORD *)(4 * v117) = v111;
      v114 = 4 * v117 + 4;
      if (v113 != v115)
        goto LABEL_127;
LABEL_133:
      *(_QWORD *)(a1 + 232) = v122;
      *(_QWORD *)(a1 + 240) = v114;
      *(_QWORD *)(a1 + 248) = &v121[4 * v120];
      if (v115)
        operator delete(v115);
      p_vtable = MLPNDArrayLossLabels.vtable;
LABEL_136:
      *(_QWORD *)(a1 + 240) = v114;
      v132 = 24 * v86;
      v133 = *(_QWORD *)(a1 + 176) + 24 * v86;
      v134 = *((_DWORD *)p_vtable + 602);
      v135 = v134;
      v136 = (uint64_t)(*(_QWORD *)(v133 + 8) - *(_QWORD *)v133) >> 3;
      if (v134 <= v136)
      {
        if (v134 < v136)
          *(_QWORD *)(v133 + 8) = *(_QWORD *)v133 + 8 * v134;
      }
      else
      {
        sub_19C098930((void **)v133, v134 - v136);
        v134 = *((_DWORD *)p_vtable + 602);
        v135 = v134;
      }
      v137 = (void **)(*v215 + 24 * v86);
      v138 = *v215 + v132;
      v139 = (uint64_t)(*(_QWORD *)(v138 + 8) - (_QWORD)*v137) >> 3;
      if (v135 <= v139)
      {
        if (v135 < v139)
          *(_QWORD *)(v138 + 8) = (char *)*v137 + 8 * v135;
      }
      else
      {
        sub_19C098930(v137, v135 - v139);
        v134 = *((_DWORD *)p_vtable + 602);
        v135 = v134;
      }
      v140 = (void **)(*v214 + 24 * v86);
      v141 = *v214 + v132;
      v142 = (uint64_t)(*(_QWORD *)(v141 + 8) - (_QWORD)*v140) >> 3;
      if (v135 <= v142)
      {
        if (v135 < v142)
          *(_QWORD *)(v141 + 8) = (char *)*v140 + 8 * v135;
      }
      else
      {
        sub_19C098930(v140, v135 - v142);
        v134 = *((_DWORD *)p_vtable + 602);
      }
      if (v134 >= 1)
      {
        for (i = 0; i < dword_1EE418968; ++i)
        {
          v145 = *((unsigned int *)*v216 + v86);
          v146 = (void *)operator new[]();
          v147 = v146;
          if ((int)v145 >= 1)
            bzero(v146, 4 * v145);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 24 * v86) + 8 * i) = v147;
          v149 = *(char **)(a1 + 56);
          v148 = *(_QWORD *)(a1 + 64);
          if ((unint64_t)v149 < v148)
          {
            *(_QWORD *)v149 = v147;
            v150 = (uint64_t)(v149 + 8);
            goto LABEL_177;
          }
          v151 = *v217;
          v152 = v149 - *v217;
          v153 = v152 >> 3;
          v154 = (v152 >> 3) + 1;
          if (v154 >> 61)
            goto LABEL_227;
          v155 = v148 - (_QWORD)v151;
          if (v155 >> 2 > v154)
            v154 = v155 >> 2;
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
            v156 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v156 = v154;
          if (v156)
          {
            if (v156 >> 61)
              goto LABEL_228;
            v157 = operator new(8 * v156);
            v158 = &v157[8 * v153];
            *v158 = v147;
            v150 = (uint64_t)(v158 + 1);
            if (v149 == v151)
            {
LABEL_168:
              *(_QWORD *)(a1 + 48) = v158;
              *(_QWORD *)(a1 + 56) = v150;
              *(_QWORD *)(a1 + 64) = &v157[8 * v156];
              if (v149)
                goto LABEL_176;
              goto LABEL_177;
            }
          }
          else
          {
            v157 = 0;
            v158 = (_QWORD *)(8 * v153);
            *(_QWORD *)(8 * v153) = v147;
            v150 = 8 * v153 + 8;
            if (v149 == v151)
              goto LABEL_168;
          }
          v159 = v149 - 8 - v151;
          if (v159 < 0x58)
            goto LABEL_236;
          if ((unint64_t)(v149 - &v157[v152]) < 0x20)
            goto LABEL_236;
          v160 = (v159 >> 3) + 1;
          v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
          v162 = &v149[-v161];
          v158 = (_QWORD *)((char *)v158 - v161);
          v163 = &v157[8 * v153 - 16];
          v164 = v149 - 16;
          v165 = v160 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v166 = *(_OWORD *)v164;
            *(v163 - 1) = *((_OWORD *)v164 - 1);
            *v163 = v166;
            v163 -= 2;
            v164 -= 32;
            v165 -= 4;
          }
          while (v165);
          v149 = v162;
          if (v160 != (v160 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_236:
            do
            {
              v167 = *((_QWORD *)v149 - 1);
              v149 -= 8;
              *--v158 = v167;
            }
            while (v149 != v151);
          }
          v149 = *v217;
          *(_QWORD *)(a1 + 48) = v158;
          *(_QWORD *)(a1 + 56) = v150;
          *(_QWORD *)(a1 + 64) = &v157[8 * v156];
          if (v149)
LABEL_176:
            operator delete(v149);
LABEL_177:
          *(_QWORD *)(a1 + 56) = v150;
          v168 = *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v86);
          v169 = (void *)operator new[]();
          v170 = v169;
          if ((int)v168 >= 1)
            bzero(v169, 4 * v168);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 24 * v86) + 8 * i) = v170;
          v172 = *(char **)(a1 + 56);
          v171 = *(_QWORD *)(a1 + 64);
          if ((unint64_t)v172 < v171)
          {
            *(_QWORD *)v172 = v170;
            v173 = (uint64_t)(v172 + 8);
            goto LABEL_202;
          }
          v174 = *v217;
          v175 = v172 - *v217;
          v176 = v175 >> 3;
          v177 = (v175 >> 3) + 1;
          if (v177 >> 61)
            goto LABEL_227;
          v178 = v171 - (_QWORD)v174;
          if (v178 >> 2 > v177)
            v177 = v178 >> 2;
          if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFF8)
            v179 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v179 = v177;
          if (v179)
          {
            if (v179 >> 61)
              goto LABEL_228;
            v180 = operator new(8 * v179);
            v181 = &v180[8 * v176];
            *v181 = v170;
            v173 = (uint64_t)(v181 + 1);
            if (v172 == v174)
            {
LABEL_193:
              *(_QWORD *)(a1 + 48) = v181;
              *(_QWORD *)(a1 + 56) = v173;
              *(_QWORD *)(a1 + 64) = &v180[8 * v179];
              if (v172)
                goto LABEL_201;
              goto LABEL_202;
            }
          }
          else
          {
            v180 = 0;
            v181 = (_QWORD *)(8 * v176);
            *(_QWORD *)(8 * v176) = v170;
            v173 = 8 * v176 + 8;
            if (v172 == v174)
              goto LABEL_193;
          }
          v182 = v172 - 8 - v174;
          if (v182 < 0x58)
            goto LABEL_237;
          if ((unint64_t)(v172 - &v180[v175]) < 0x20)
            goto LABEL_237;
          v183 = (v182 >> 3) + 1;
          v184 = 8 * (v183 & 0x3FFFFFFFFFFFFFFCLL);
          v185 = &v172[-v184];
          v181 = (_QWORD *)((char *)v181 - v184);
          v186 = &v180[8 * v176 - 16];
          v187 = v172 - 16;
          v188 = v183 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v189 = *(_OWORD *)v187;
            *(v186 - 1) = *((_OWORD *)v187 - 1);
            *v186 = v189;
            v186 -= 2;
            v187 -= 32;
            v188 -= 4;
          }
          while (v188);
          v172 = v185;
          if (v183 != (v183 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_237:
            do
            {
              v190 = *((_QWORD *)v172 - 1);
              v172 -= 8;
              *--v181 = v190;
            }
            while (v172 != v174);
          }
          v172 = *v217;
          *(_QWORD *)(a1 + 48) = v181;
          *(_QWORD *)(a1 + 56) = v173;
          *(_QWORD *)(a1 + 64) = &v180[8 * v179];
          if (v172)
LABEL_201:
            operator delete(v172);
LABEL_202:
          *(_QWORD *)(a1 + 56) = v173;
          v191 = *(unsigned int *)(*(_QWORD *)(a1 + 256) + 4 * v86);
          v192 = (void *)operator new[]();
          v193 = v192;
          if ((int)v191 >= 1)
            bzero(v192, 4 * v191);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 24 * v86) + 8 * i) = v193;
          v195 = *(char **)(a1 + 56);
          v194 = *(_QWORD *)(a1 + 64);
          if ((unint64_t)v195 >= v194)
          {
            v196 = *v217;
            v197 = v195 - *v217;
            v198 = v197 >> 3;
            v199 = (v197 >> 3) + 1;
            if (v199 >> 61)
LABEL_227:
              sub_19C07DA0C();
            v200 = v194 - (_QWORD)v196;
            if (v200 >> 2 > v199)
              v199 = v200 >> 2;
            if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8)
              v201 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v201 = v199;
            if (v201)
            {
              if (v201 >> 61)
                goto LABEL_228;
              v202 = operator new(8 * v201);
              v203 = &v202[8 * v198];
              *v203 = v193;
              v144 = (uint64_t)(v203 + 1);
              if (v195 != v196)
                goto LABEL_214;
LABEL_217:
              *(_QWORD *)(a1 + 48) = v203;
              *(_QWORD *)(a1 + 56) = v144;
              *(_QWORD *)(a1 + 64) = &v202[8 * v201];
              if (!v195)
                goto LABEL_151;
            }
            else
            {
              v202 = 0;
              v203 = (_QWORD *)(8 * v198);
              *(_QWORD *)(8 * v198) = v193;
              v144 = 8 * v198 + 8;
              if (v195 == v196)
                goto LABEL_217;
LABEL_214:
              v204 = v195 - 8 - v196;
              if (v204 < 0x58)
                goto LABEL_238;
              if ((unint64_t)(v195 - &v202[v197]) < 0x20)
                goto LABEL_238;
              v205 = (v204 >> 3) + 1;
              v206 = 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
              v207 = &v195[-v206];
              v203 = (_QWORD *)((char *)v203 - v206);
              v208 = &v202[8 * v198 - 16];
              v209 = v195 - 16;
              v210 = v205 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v211 = *(_OWORD *)v209;
                *(v208 - 1) = *((_OWORD *)v209 - 1);
                *v208 = v211;
                v208 -= 2;
                v209 -= 32;
                v210 -= 4;
              }
              while (v210);
              v195 = v207;
              if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_238:
                do
                {
                  v212 = *((_QWORD *)v195 - 1);
                  v195 -= 8;
                  *--v203 = v212;
                }
                while (v195 != v196);
              }
              v195 = *v217;
              *(_QWORD *)(a1 + 48) = v203;
              *(_QWORD *)(a1 + 56) = v144;
              *(_QWORD *)(a1 + 64) = &v202[8 * v201];
              if (!v195)
                goto LABEL_151;
            }
            operator delete(v195);
            goto LABEL_151;
          }
          *(_QWORD *)v195 = v193;
          v144 = (uint64_t)(v195 + 8);
LABEL_151:
          *(_QWORD *)(a1 + 56) = v144;
          p_vtable = MLPNDArrayLossLabels.vtable;
        }
      }
      ++v86;
      v85 = *(_QWORD *)(a1 + 80);
      if (v86 >= (*(_QWORD *)(a1 + 88) - v85) >> 3)
        return;
    }
    if (v97 >> 62)
      goto LABEL_228;
    v98 = operator new(4 * v97);
    v99 = &v98[4 * v94];
    *v99 = v88;
    v91 = (uint64_t)(v99 + 1);
    if (v90 == v92)
      goto LABEL_111;
LABEL_105:
    v100 = v90 - 4 - v92;
    if (v100 < 0x2C)
      goto LABEL_239;
    if ((unint64_t)(v90 - &v98[v93]) < 0x20)
      goto LABEL_239;
    v101 = (v100 >> 2) + 1;
    v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
    v103 = &v90[-v102];
    v99 = (_DWORD *)((char *)v99 - v102);
    v104 = &v98[4 * v94 - 16];
    v105 = v90 - 16;
    v106 = v101 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v107 = *(_OWORD *)v105;
      *(v104 - 1) = *((_OWORD *)v105 - 1);
      *v104 = v107;
      v104 -= 2;
      v105 -= 32;
      v106 -= 8;
    }
    while (v106);
    v90 = v103;
    if (v101 != (v101 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_239:
      do
      {
        v108 = *((_DWORD *)v90 - 1);
        v90 -= 4;
        *--v99 = v108;
      }
      while (v90 != v92);
    }
    goto LABEL_111;
  }
}

uint64_t sub_19C106A74(uint64_t a1)
{
  return (****(uint64_t (*****)(_QWORD))(a1 + 80))(**(_QWORD **)(a1 + 80));
}

uint64_t sub_19C106A88(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 8))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19C106AD8()
{
  sub_19C2210D4(1);
}

void sub_19C106AE8()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C106AF8(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_19C106B00(uint64_t a1)
{
  return a1 + 128;
}

uint64_t sub_19C106B08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 88) - 8) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 88) - 8));
}

uint64_t sub_19C106B1C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v3 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t sub_19C106B80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19C106BF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v5)
  {
    v10 = result;
    v11 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 80);
    }
    while (v11 < (*(_QWORD *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

_QWORD *sub_19C106C78(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0D0, 0);
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0D0, 0);
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 80))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *sub_19C106D40(_QWORD *result, void *lpsrc, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = a3;
  v4 = (uint64_t)result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0D0, 0);
    v5 = (uint64_t)result;
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a3)
  {
LABEL_3:
    result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0D0, 0);
    v3 = result;
  }
LABEL_4:
  v6 = *(_QWORD *)(v4 + 80);
  if (*(_QWORD *)(v4 + 88) != v6)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 8 * v7) + 88))(*(_QWORD *)(v6 + 8 * v7), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v7), *(_QWORD *)(v3[10] + 8 * v7));
      ++v7;
      v6 = *(_QWORD *)(v4 + 80);
    }
    while (v7 < (*(_QWORD *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

_QWORD *sub_19C106E08(_QWORD *result, void *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0D0, 0);
    v3 = result;
    v4 = v2[10];
    if (v2[11] == v4)
      return result;
  }
  else
  {
    v3 = 0;
    v4 = result[10];
    if (result[11] == v4)
      return result;
  }
  v5 = 0;
  do
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 96))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(v3[10] + 8 * v5));
    ++v5;
    v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

_QWORD *sub_19C106EA8(_QWORD *result, void *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result;
  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0D0, 0);
    v3 = result;
    v4 = v2[10];
    if (v2[11] == v4)
      return result;
  }
  else
  {
    v3 = 0;
    v4 = result[10];
    if (result[11] == v4)
      return result;
  }
  v5 = 0;
  do
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v5) + 104))(*(_QWORD *)(v4 + 8 * v5), *(_QWORD *)(v3[10] + 8 * v5));
    ++v5;
    v4 = v2[10];
  }
  while (v5 < (v2[11] - v4) >> 3);
  return result;
}

uint64_t sub_19C106F48(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C106FA8(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C107008(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 128))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C107068(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 136))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19C1070E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 144))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 80);
    }
    while (v9 < (*(_QWORD *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19C107158(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v3)
  {
    v6 = result;
    v7 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 152))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      ++v7;
      v3 = *(_QWORD *)(v6 + 80);
    }
    while (v7 < (*(_QWORD *)(v6 + 88) - v3) >> 3);
  }
  return result;
}

uint64_t sub_19C1071C0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19C107210(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 168))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C107270(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 176))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C1072D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 184))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19C107320(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 192))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 80);
    }
    while (v3 < (*(_QWORD *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

void sub_19C107370(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  sub_19C105B84(a1);
  v2 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 200))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = *(_QWORD *)(a1 + 80);
    }
    while (v3 < (*(_QWORD *)(a1 + 88) - v2) >> 3);
  }
}

void sub_19C1073C4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;

  v2 = a1[10];
  if (a1[11] != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 208))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = a1[10];
    }
    while (v3 < (a1[11] - v2) >> 3);
  }
  v5 = a1[6];
  v4 = a1[7];
  if (v4 == v5)
  {
    v5 = a1[7];
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *(void **)(v5 + 8 * v6);
      if (v7)
      {
        operator delete[](v7);
        v5 = a1[6];
        v4 = a1[7];
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  a1[7] = v5;
}

uint64_t sub_19C107454(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 80) + 264))(**(_QWORD **)(a1 + 80));
}

uint64_t sub_19C107468(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) == v1)
    return 0;
  v3 = 0;
  LODWORD(v4) = 0;
  do
  {
    v4 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 272))(*(_QWORD *)(v1 + 8 * v3))
       + v4;
    ++v3;
    v1 = *(_QWORD *)(a1 + 80);
  }
  while (v3 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return v4;
}

uint64_t sub_19C1074E4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 80);
    }
    while (v5 < (*(_QWORD *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C107544(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v3)
  {
    v6 = result;
    v7 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float, float))(**(_QWORD **)(v3 + 8 * v7) + 288))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      ++v7;
      v3 = *(_QWORD *)(v6 + 80);
    }
    while (v7 < (*(_QWORD *)(v6 + 88) - v3) >> 3);
  }
  return result;
}

void sub_19C1075AC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  unsigned int *v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int *v32;
  int v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char *v43;
  unint64_t v45;
  uint64_t v46;

  v10 = (_BYTE *)a1[10];
  v9 = (_BYTE *)a1[11];
  v11 = v9 - v10;
  if (v9 == v10)
  {
    v12 = 0;
    v13 = 0;
    v15 = (_BYTE *)a1[32];
    v18 = (_BYTE *)a1[33];
    v16 = v18 - v15;
    if (v18 != v15)
      goto LABEL_4;
  }
  else
  {
    if (v11 < 0)
      sub_19C07DA0C();
    v12 = (char *)operator new(v9 - v10);
    v13 = &v12[8 * (v11 >> 3)];
    memcpy(v12, v10, v11);
    v15 = (_BYTE *)a1[32];
    v14 = (_BYTE *)a1[33];
    v16 = v14 - v15;
    if (v14 != v15)
    {
LABEL_4:
      if ((v16 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v17 = (unsigned int *)operator new(v16);
      memcpy(v17, v15, v16);
      if ((int)a5 < 1 || v13 == v12)
      {
LABEL_28:
        operator delete(v17);
        goto LABEL_29;
      }
      goto LABEL_12;
    }
  }
  if ((int)a5 >= 1 && v13 != v12)
  {
    v17 = 0;
LABEL_12:
    v41 = a3;
    v19 = 0;
    v20 = 0;
    v42 = a5;
    v21 = a5;
    v43 = v12;
    v45 = (v13 - v12) >> 3;
    while (1)
    {
      v22 = 0;
      v23 = v20;
      v46 = 4 * v20;
      do
      {
        v24 = *(_QWORD *)(a1[22] + 24 * v19);
        v25 = *a4;
        v26 = v17[v19];
        (*(void (**)(_QWORD *))(*a1 + 272))(a1);
        if ((int)v26 < 1)
          goto LABEL_15;
        v27 = *(_QWORD *)(v25 + 8 * v22);
        v28 = *(_QWORD *)(v24 + 8 * v22);
        if (v26 < 8 || (unint64_t)(v28 - (v46 + v27)) < 0x20)
        {
          v29 = 0;
LABEL_20:
          v30 = v26 - v29;
          v31 = (_DWORD *)(v28 + 4 * v29);
          v32 = (int *)(v27 + 4 * (v23 + v29));
          do
          {
            v33 = *v32++;
            *v31++ = v33;
            --v30;
          }
          while (v30);
          goto LABEL_15;
        }
        v29 = v26 & 0x7FFFFFF8;
        v34 = (__int128 *)(v27 + v46 + 16);
        v35 = (_OWORD *)(v28 + 16);
        v36 = v26 & 0xFFFFFFF8;
        do
        {
          v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 8;
        }
        while (v36);
        if (v29 != v26)
          goto LABEL_20;
LABEL_15:
        ++v22;
      }
      while (v22 != v21);
      v20 = v17[v19++] + v23;
      if (v45 <= v19)
      {
        a5 = v42;
        a3 = v41;
        v12 = v43;
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v12)
    operator delete(v12);
  v38 = (a1[11] - a1[10]) >> 3;
  if ((int)v38 - 1 >= 0)
  {
    v39 = 8 * (v38 - 1);
    v40 = 24 * (v38 - 1);
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1[10] + v39) + 296))(*(_QWORD *)(a1[10] + v39), a2, a3, a1[22] + v40, a5);
      v39 -= 8;
      v40 -= 24;
      LODWORD(v38) = v38 - 1;
    }
    while ((_DWORD)v38);
  }
}

void sub_19C107868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  if (__p)
    operator delete(__p);
  if (v19)
    operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_19C1078BC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  _QWORD **v6;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  _QWORD **v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  unsigned int *v21;
  _BYTE *v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int *v39;
  int v40;
  __int128 *v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  _BYTE *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  _OWORD *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;

  v5 = a4 & 0xFFFFFF;
  v6 = (_QWORD **)a1[11];
  if (v6 == (_QWORD **)a1[10])
  {
    v17 = 0;
    v9 = (_BYTE *)a1[11];
    v19 = (_BYTE *)a1[32];
    v18 = (_BYTE *)a1[33];
    v20 = v18 - v19;
    if (v18 == v19)
      goto LABEL_26;
LABEL_15:
    if ((v20 & 0x8000000000000000) != 0)
      sub_19C07DA0C();
    v21 = (unsigned int *)operator new(v20);
    memcpy(v21, v19, v20);
    if ((_DWORD)v5 && v9 != (_BYTE *)v6)
      goto LABEL_29;
LABEL_45:
    operator delete(v21);
    goto LABEL_46;
  }
  v8 = 0;
  v6 = (_QWORD **)a1[10];
  do
  {
    v10 = a1[28];
    if (v10)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a2);
      v6 = (_QWORD **)a1[10];
    }
    (*(void (**)(_QWORD *))(*v6[v8] + 304))(v6[v8]);
    ++v8;
    v6 = (_QWORD **)a1[10];
    v9 = (_BYTE *)a1[11];
  }
  while (v8 < (v9 - (_BYTE *)v6) >> 3);
  if (v9 == (_BYTE *)v6)
  {
    v17 = 0;
    v19 = (_BYTE *)a1[32];
    v22 = (_BYTE *)a1[33];
    v20 = v22 - v19;
    if (v22 == v19)
      goto LABEL_26;
    goto LABEL_15;
  }
  if (!(_DWORD)v5)
  {
    v23 = 0;
    do
    {
      (*(void (**)(_QWORD *))(*v6[v23] + 32))(v6[v23]);
      ++v23;
      v6 = (_QWORD **)a1[10];
      v9 = (_BYTE *)a1[11];
      v13 = v9 - (_BYTE *)v6;
    }
    while ((v9 - (_BYTE *)v6) >> 3 > v23);
    goto LABEL_23;
  }
  if (v5 >= 4)
  {
    v46 = 0;
    while (1)
    {
      v47 = *(_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6[v46] + 32))(v6[v46]);
      v48 = *(_QWORD *)(a1[19] + 24 * v46);
      if ((unint64_t)(v48 - v47) >= 0x20)
      {
        v50 = (__int128 *)(v47 + 16);
        v51 = (_OWORD *)(v48 + 16);
        v52 = v5 & 0xFFFFFC;
        do
        {
          v53 = *v50;
          *(v51 - 1) = *(v50 - 1);
          *v51 = v53;
          v50 += 2;
          v51 += 2;
          v52 -= 4;
        }
        while (v52);
        v49 = v5 & 0xFFFFFC;
        if ((v5 & 0xFFFFFC) == v5)
          goto LABEL_52;
      }
      else
      {
        v49 = 0;
      }
      v54 = (uint64_t *)(v47 + 8 * v49);
      v55 = (_QWORD *)(v48 + 8 * v49);
      v56 = v5 - v49;
      do
      {
        v57 = *v54++;
        *v55++ = v57;
        --v56;
      }
      while (v56);
LABEL_52:
      ++v46;
      v6 = (_QWORD **)a1[10];
      v9 = (_BYTE *)a1[11];
      v13 = v9 - (_BYTE *)v6;
      if ((v9 - (_BYTE *)v6) >> 3 <= v46)
        goto LABEL_23;
    }
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v14 = (_QWORD **)(*(uint64_t (**)(_QWORD *))(*v6[v12] + 32))(v6[v12]);
    v15 = *v14;
    v16 = *(_QWORD **)(a1[19] + v11);
    *v16 = **v14;
    if ((_DWORD)v5 != 1)
    {
      v16[1] = v15[1];
      if ((_DWORD)v5 != 2)
        v16[2] = v15[2];
    }
    ++v12;
    v6 = (_QWORD **)a1[10];
    v9 = (_BYTE *)a1[11];
    v13 = v9 - (_BYTE *)v6;
    v11 += 24;
  }
  while ((v9 - (_BYTE *)v6) >> 3 > v12);
LABEL_23:
  if (v9 == (_BYTE *)v6)
  {
    v17 = 0;
    v19 = (_BYTE *)a1[32];
    v45 = (_BYTE *)a1[33];
    v20 = v45 - v19;
    if (v45 == v19)
      goto LABEL_26;
    goto LABEL_15;
  }
  if ((v13 & 0x8000000000000000) != 0)
    sub_19C07DA0C();
  v17 = operator new(v13);
  memcpy(v17, v6, v13);
  v19 = (_BYTE *)a1[32];
  v24 = (_BYTE *)a1[33];
  v20 = v24 - v19;
  if (v24 != v19)
    goto LABEL_15;
LABEL_26:
  if ((_DWORD)v5 && v9 != (_BYTE *)v6)
  {
    v21 = 0;
LABEL_29:
    v58 = v17;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = 0;
      v28 = v26;
      v29 = 4 * v26;
      do
      {
        v30 = v5;
        v31 = a1[13];
        v32 = *(_QWORD *)(a1[19] + 24 * v25);
        v33 = v21[v25];
        (*(void (**)(_QWORD *))(*a1 + 272))(a1);
        if ((int)v33 < 1)
          goto LABEL_32;
        v34 = *(_QWORD *)(v32 + 8 * v27);
        v35 = *(_QWORD *)(v31 + 8 * v27);
        if (v33 < 8 || (unint64_t)(v29 + v35 - v34) < 0x20)
        {
          v36 = 0;
LABEL_37:
          v37 = v33 - v36;
          v38 = (_DWORD *)(v35 + 4 * (v28 + v36));
          v39 = (int *)(v34 + 4 * v36);
          do
          {
            v40 = *v39++;
            *v38++ = v40;
            --v37;
          }
          while (v37);
          goto LABEL_32;
        }
        v36 = v33 & 0x7FFFFFF8;
        v41 = (__int128 *)(v34 + 16);
        v42 = (_OWORD *)(v35 + v29 + 16);
        v43 = v33 & 0xFFFFFFF8;
        do
        {
          v44 = *v41;
          *(v42 - 1) = *(v41 - 1);
          *v42 = v44;
          v41 += 2;
          v42 += 2;
          v43 -= 8;
        }
        while (v43);
        if (v36 != v33)
          goto LABEL_37;
LABEL_32:
        ++v27;
        v5 = v30;
      }
      while (v27 != v30);
      v26 = v21[v25++] + v28;
      if (v25 >= (uint64_t)(a1[11] - a1[10]) >> 3)
      {
        v17 = v58;
        goto LABEL_45;
      }
    }
  }
LABEL_46:
  if (v17)
    operator delete(v17);
}

void sub_19C107D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_19C107D90(uint64_t a1, void *lpsrc)
{
  void *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0D0, 0);
  if (!result)
    __cxa_bad_cast();
  v4 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v4)
  {
    v5 = (uint64_t)result;
    v6 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v6) + 328))(*(_QWORD *)(v4 + 8 * v6), *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v6));
      ++v6;
      v4 = *(_QWORD *)(a1 + 80);
    }
    while (v6 < (*(_QWORD *)(a1 + 88) - v4) >> 3);
  }
  return result;
}

void *sub_19C107E20(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  void *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0D0, 0);
  if (!result)
    __cxa_bad_cast();
  v10 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) != v10)
  {
    v11 = (uint64_t)result;
    v12 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, float, float))(**(_QWORD **)(v10 + 8 * v12)
                                                                                        + 336))(*(_QWORD *)(v10 + 8 * v12), *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v12), a3, a4, a5);
      ++v12;
      v10 = *(_QWORD *)(a1 + 80);
    }
    while (v12 < (*(_QWORD *)(a1 + 88) - v10) >> 3);
  }
  return result;
}

void sub_19C107ED0(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  unsigned int *v18;
  BOOL v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int *v35;
  int v36;
  __int128 *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  _BYTE *v41;
  _QWORD **v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  int v46;
  _BYTE *v47;
  _BYTE *v48;
  size_t v49;
  char v50;
  unsigned int *v51;
  _BYTE *v52;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  int *v67;
  int v68;
  __int128 *v69;
  _OWORD *v70;
  uint64_t v71;
  __int128 v72;
  unsigned int v73;
  BOOL v74;
  unsigned int v75;
  char *v76;
  void *v77;
  unint64_t v79;
  uint64_t v80;

  v11 = (_BYTE *)a1[10];
  v10 = (_BYTE *)a1[11];
  v12 = v10 - v11;
  if (v10 == v11)
  {
    v13 = 0;
    v14 = 0;
    v16 = (_BYTE *)a1[32];
    v20 = (_BYTE *)a1[33];
    v17 = v20 - v16;
    if (v20 != v16)
      goto LABEL_4;
  }
  else
  {
    if (v12 < 0)
      sub_19C07DA0C();
    v13 = (char *)operator new(v10 - v11);
    v14 = &v13[8 * (v12 >> 3)];
    memcpy(v13, v11, v12);
    v16 = (_BYTE *)a1[32];
    v15 = (_BYTE *)a1[33];
    v17 = v15 - v16;
    if (v15 != v16)
    {
LABEL_4:
      if ((v17 & 0x8000000000000000) != 0)
        sub_19C07DA0C();
      v18 = (unsigned int *)operator new(v17);
      memcpy(v18, v16, v17);
      v19 = (int)a4 > 0;
      if ((int)a4 < 1 || v14 == v13)
      {
LABEL_28:
        operator delete(v18);
        goto LABEL_29;
      }
      goto LABEL_12;
    }
  }
  v19 = (int)a4 > 0;
  if ((int)a4 >= 1)
  {
    v21 = a5;
    if (v14 == v13)
      goto LABEL_30;
    v18 = 0;
LABEL_12:
    v73 = a6;
    v74 = v19;
    v22 = 0;
    v23 = 0;
    v75 = a4;
    v24 = a4;
    v76 = v13;
    v79 = (v14 - v13) >> 3;
    while (1)
    {
      v25 = 0;
      v26 = v23;
      v80 = 4 * v23;
      do
      {
        v27 = *(_QWORD *)(a1[25] + 24 * v22);
        v28 = *a2;
        v29 = v18[v22];
        (*(void (**)(_QWORD *))(*a1 + 272))(a1);
        if ((int)v29 < 1)
          goto LABEL_15;
        v30 = *(_QWORD *)(v28 + 8 * v25);
        v31 = *(_QWORD *)(v27 + 8 * v25);
        if (v29 < 8 || (unint64_t)(v31 - (v80 + v30)) < 0x20)
        {
          v32 = 0;
LABEL_20:
          v33 = v29 - v32;
          v34 = (_DWORD *)(v31 + 4 * v32);
          v35 = (int *)(v30 + 4 * (v26 + v32));
          do
          {
            v36 = *v35++;
            *v34++ = v36;
            --v33;
          }
          while (v33);
          goto LABEL_15;
        }
        v32 = v29 & 0x7FFFFFF8;
        v37 = (__int128 *)(v30 + v80 + 16);
        v38 = (_OWORD *)(v31 + 16);
        v39 = v29 & 0xFFFFFFF8;
        do
        {
          v40 = *v37;
          *(v38 - 1) = *(v37 - 1);
          *v38 = v40;
          v37 += 2;
          v38 += 2;
          v39 -= 8;
        }
        while (v39);
        if (v32 != v29)
          goto LABEL_20;
LABEL_15:
        ++v25;
      }
      while (v25 != v24);
      v23 = v18[v22++] + v26;
      if (v79 <= v22)
      {
        v13 = v76;
        v19 = v74;
        a4 = v75;
        a6 = v73;
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  v21 = a5;
LABEL_30:
  if (v13)
    operator delete(v13);
  v42 = (_QWORD **)a1[10];
  v41 = (_BYTE *)a1[11];
  if (v41 == (_BYTE *)v42)
    goto LABEL_42;
  v43 = 0;
  v44 = 0;
  do
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v42[v44] + 344))(v42[v44], a1[25] + v43, a1[22] + v43, a4, v21, a6);
    ++v44;
    v42 = (_QWORD **)a1[10];
    v41 = (_BYTE *)a1[11];
    v43 += 24;
  }
  while (v44 < (v41 - (_BYTE *)v42) >> 3);
  if (v41 == (_BYTE *)v42)
  {
LABEL_42:
    v46 = a4;
    v45 = 0;
    v48 = (_BYTE *)a1[32];
    v52 = (_BYTE *)a1[33];
    v49 = v52 - v48;
    if (v52 == v48)
      goto LABEL_38;
LABEL_43:
    if ((v49 & 0x8000000000000000) != 0)
      sub_19C07DA0C();
    v51 = (unsigned int *)operator new(v49);
    memcpy(v51, v48, v49);
    if (v41 != (_BYTE *)v42 && v19)
      goto LABEL_48;
LABEL_64:
    operator delete(v51);
    goto LABEL_65;
  }
  if (v41 - (_BYTE *)v42 < 0)
    sub_19C07DA0C();
  v45 = operator new(v41 - (_BYTE *)v42);
  v46 = a4;
  memcpy(v45, v42, v41 - (_BYTE *)v42);
  v48 = (_BYTE *)a1[32];
  v47 = (_BYTE *)a1[33];
  v49 = v47 - v48;
  if (v47 != v48)
    goto LABEL_43;
LABEL_38:
  v50 = !v19;
  if (v41 == (_BYTE *)v42)
    v50 = 1;
  if ((v50 & 1) == 0)
  {
    v51 = 0;
LABEL_48:
    v77 = v45;
    v54 = 0;
    v55 = 0;
    while (1)
    {
      v56 = 0;
      v57 = v55;
      v58 = 4 * v55;
      do
      {
        v59 = *a3;
        v60 = *(_QWORD *)(a1[22] + 24 * v54);
        v61 = v51[v54];
        (*(void (**)(_QWORD *))(*a1 + 272))(a1);
        if ((int)v61 < 1)
          goto LABEL_51;
        v62 = *(_QWORD *)(v60 + 8 * v56);
        v63 = *(_QWORD *)(v59 + 8 * v56);
        if (v61 < 8 || (unint64_t)(v58 + v63 - v62) < 0x20)
        {
          v64 = 0;
LABEL_56:
          v65 = v61 - v64;
          v66 = (_DWORD *)(v63 + 4 * (v57 + v64));
          v67 = (int *)(v62 + 4 * v64);
          do
          {
            v68 = *v67++;
            *v66++ = v68;
            --v65;
          }
          while (v65);
          goto LABEL_51;
        }
        v64 = v61 & 0x7FFFFFF8;
        v69 = (__int128 *)(v62 + 16);
        v70 = (_OWORD *)(v63 + v58 + 16);
        v71 = v61 & 0xFFFFFFF8;
        do
        {
          v72 = *v69;
          *(v70 - 1) = *(v69 - 1);
          *v70 = v72;
          v69 += 2;
          v70 += 2;
          v71 -= 8;
        }
        while (v71);
        if (v64 != v61)
          goto LABEL_56;
LABEL_51:
        ++v56;
      }
      while (v56 != v46);
      v55 = v51[v54++] + v57;
      if (v54 >= (uint64_t)(a1[11] - a1[10]) >> 3)
      {
        v45 = v77;
        goto LABEL_64;
      }
    }
  }
LABEL_65:
  if (v45)
    operator delete(v45);
}

void sub_19C1083AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_19C108450(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  float v8;

  v3 = a1[10];
  if (a1[11] == v3)
    return 0.0;
  v6 = 0;
  v7 = 0;
  v8 = 0.0;
  do
  {
    v8 = (*(float (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 352))(*(_QWORD *)(v3 + 8 * v7), a1[25] + v6, a3)+ v8;
    ++v7;
    v3 = a1[10];
    v6 += 24;
  }
  while (v7 < (a1[11] - v3) >> 3);
  return v8;
}

void sub_19C1084F4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C10850C(a1);
  operator delete(v1);
}

_QWORD *sub_19C10850C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  *a1 = &unk_1E3D20708;
  v3 = a1[6];
  v2 = a1[7];
  if (v2 == v3)
  {
    v3 = a1[7];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v3 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v3 = a1[6];
        v2 = a1[7];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[7] = v3;
  v7 = a1[10];
  v6 = a1[11];
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 368))(v9);
        v7 = a1[10];
        v6 = a1[11];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  v10 = (void *)a1[32];
  if (v10)
  {
    a1[33] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[29];
  if (v11)
  {
    a1[30] = v11;
    operator delete(v11);
  }
  v12 = a1[25];
  if (v12)
  {
    v13 = a1[26];
    v14 = (void *)a1[25];
    if (v13 != v12)
    {
      v15 = a1[26];
      do
      {
        v17 = *(void **)(v15 - 24);
        v15 -= 24;
        v16 = v17;
        if (v17)
        {
          *(_QWORD *)(v13 - 16) = v16;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v12);
      v14 = (void *)a1[25];
    }
    a1[26] = v12;
    operator delete(v14);
  }
  v18 = a1[22];
  if (v18)
  {
    v19 = a1[23];
    v20 = (void *)a1[22];
    if (v19 != v18)
    {
      v21 = a1[23];
      do
      {
        v23 = *(void **)(v21 - 24);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *(_QWORD *)(v19 - 16) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = (void *)a1[22];
    }
    a1[23] = v18;
    operator delete(v20);
  }
  v24 = a1[19];
  if (v24)
  {
    v25 = a1[20];
    v26 = (void *)a1[19];
    if (v25 != v24)
    {
      v27 = a1[20];
      do
      {
        v29 = *(void **)(v27 - 24);
        v27 -= 24;
        v28 = v29;
        if (v29)
        {
          *(_QWORD *)(v25 - 16) = v28;
          operator delete(v28);
        }
        v25 = v27;
      }
      while (v27 != v24);
      v26 = (void *)a1[19];
    }
    a1[20] = v24;
    operator delete(v26);
  }
  v30 = (void *)a1[16];
  if (v30)
  {
    a1[17] = v30;
    operator delete(v30);
  }
  v31 = (void *)a1[13];
  if (v31)
  {
    a1[14] = v31;
    operator delete(v31);
  }
  v32 = (void *)a1[10];
  if (v32)
  {
    a1[11] = v32;
    operator delete(v32);
  }
  v33 = (void *)a1[6];
  if (v33)
  {
    a1[7] = v33;
    operator delete(v33);
  }
  *a1 = &unk_1E3D1E2D8;
  v34 = (void *)a1[1];
  if (v34)
  {
    a1[2] = v34;
    operator delete(v34);
  }
  return a1;
}

uint64_t sub_19C108728(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, uint64_t a9)
{
  float v15;
  int v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  int32x2_t v22;
  __int128 v24;
  char v25;
  void *__p[2];
  char v27;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D20BE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  sub_19C22CB44(a1 + 432);
  *(_DWORD *)(a1 + 504) = a5;
  *(_DWORD *)(a1 + 112) = a6;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a7 + 68);
  *(_QWORD *)(a1 + 528) = a9;
  if (a9)
  {
    nullsub_171("FullLayer constructor");
    a8 = *(_BYTE *)(*(_QWORD *)(a1 + 528) + 376);
  }
  *(_BYTE *)(a1 + 40) = a8;
  *(_BYTE *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a7 + 45);
  v27 = 9;
  strcpy((char *)__p, "FullLayer");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, __p, 0, -0.44);
  if (v27 < 0)
  {
    operator delete(__p[0]);
    v15 = *(float *)(a7 + 16);
    v16 = *(_DWORD *)(a7 + 20);
    v17 = *(double *)(a7 + 24);
    *(float *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 424) = 0;
    if (*(_BYTE *)(a1 + 116))
      return a1;
  }
  else
  {
    v15 = *(float *)(a7 + 16);
    v16 = *(_DWORD *)(a7 + 20);
    v17 = *(double *)(a7 + 24);
    *(float *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 424) = 0;
    if (*(_BYTE *)(a1 + 116))
      return a1;
  }
  v18 = *(_DWORD *)(a7 + 32);
  switch(v18)
  {
    case 2:
      v20 = operator new();
      *(_QWORD *)v20 = &unk_1E3D1E968;
      *(float *)(v20 + 24) = v15;
      *(_DWORD *)(v20 + 28) = v16;
      *(_DWORD *)(v20 + 32) = 841731191;
      v21 = v17;
      *(_QWORD *)(v20 + 128) = 114;
      *(_WORD *)(v20 + 143) = 265;
      *(int32x2_t *)(v20 + 16) = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_DWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 12) = 0;
      *(float *)(v20 + 36) = v21;
      *(_DWORD *)(v20 + 40) = v16;
      *(float *)(v20 + 44) = v21;
      *(_OWORD *)(v20 + 48) = 0u;
      *(_OWORD *)(v20 + 64) = 0u;
      *(_OWORD *)(v20 + 80) = 0u;
      *(_OWORD *)(v20 + 96) = 0u;
      *(_QWORD *)(v20 + 112) = 0;
      *(_QWORD *)(v20 + 120) = 0x6579614C6C6C7546;
LABEL_14:
      *(_QWORD *)(a1 + 424) = v20;
      return a1;
    case 1:
      v20 = operator new();
      *(float *)(v20 + 20) = v15;
      *(_DWORD *)(v20 + 24) = v16;
      *(_DWORD *)(v20 + 28) = 841731191;
      *(double *)(v20 + 32) = v17;
      *(_QWORD *)(v20 + 144) = 114;
      *(_WORD *)(v20 + 159) = 265;
      v22 = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_QWORD *)v20 = &unk_1E3D1E270;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      *(_DWORD *)(v20 + 40) = v16;
      *(double *)(v20 + 48) = v17;
      *(int32x2_t *)(v20 + 56) = v22;
      *(_DWORD *)(v20 + 164) = 0;
      *(_OWORD *)(v20 + 64) = 0u;
      *(_OWORD *)(v20 + 80) = 0u;
      *(_OWORD *)(v20 + 96) = 0u;
      *(_OWORD *)(v20 + 112) = 0u;
      *(_QWORD *)(v20 + 128) = 0;
      *(_QWORD *)(v20 + 136) = 0x6579614C6C6C7546;
      goto LABEL_14;
    case 0:
      v19 = operator new();
      v25 = 9;
      strcpy((char *)&v24, "FullLayer");
      sub_19C0FCB2C(v19, &v24, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1, v15);
      *(_QWORD *)(a1 + 424) = v19;
      if (v25 < 0)
        operator delete((void *)v24);
      break;
  }
  return a1;
}

void sub_19C108A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void **v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (a14 < 0)
    operator delete(__p);
  operator delete(v23);
  sub_19C22CB78(v22);
  v26 = *(void **)(v20 + 384);
  if (v26)
  {
    *(_QWORD *)(v20 + 392) = v26;
    operator delete(v26);
    sub_19C0830E8((void **)(v20 + 360));
    v27 = *(void **)(v20 + 336);
    if (!v27)
    {
LABEL_5:
      v28 = *(void **)(v20 + 312);
      if (!v28)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else
  {
    sub_19C0830E8((void **)(v20 + 360));
    v27 = *(void **)(v20 + 336);
    if (!v27)
      goto LABEL_5;
  }
  *(_QWORD *)(v20 + 344) = v27;
  operator delete(v27);
  v28 = *(void **)(v20 + 312);
  if (!v28)
  {
LABEL_6:
    v29 = *(void **)(v20 + 288);
    if (!v29)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v20 + 320) = v28;
  operator delete(v28);
  v29 = *(void **)(v20 + 288);
  if (!v29)
  {
LABEL_7:
    v30 = *(void **)(v20 + 264);
    if (!v30)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v20 + 296) = v29;
  operator delete(v29);
  v30 = *(void **)(v20 + 264);
  if (!v30)
  {
LABEL_8:
    sub_19C101AC4(v21);
    v31 = *(void **)(v20 + 72);
    if (!v31)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v20 + 272) = v30;
  operator delete(v30);
  sub_19C101AC4(v21);
  v31 = *(void **)(v20 + 72);
  if (!v31)
  {
LABEL_9:
    v32 = *v24;
    if (!*v24)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  *(_QWORD *)(v20 + 80) = v31;
  operator delete(v31);
  v32 = *v24;
  if (!*v24)
  {
LABEL_10:
    *(_QWORD *)v20 = &unk_1E3D1E2D8;
    v33 = *(void **)(v20 + 8);
    if (!v33)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v20 + 56) = v32;
  operator delete(v32);
  *(_QWORD *)v20 = &unk_1E3D1E2D8;
  v33 = *(void **)(v20 + 8);
  if (!v33)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_19:
  *(_QWORD *)(v20 + 16) = v33;
  operator delete(v33);
  _Unwind_Resume(a1);
}

void sub_19C108BCC()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C108BDC(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19C108BE4(uint64_t a1)
{
  return a1 + 288;
}

uint64_t sub_19C108BEC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t sub_19C108BF8(uint64_t a1)
{
  return a1 + 312;
}

uint64_t sub_19C108C00()
{
  return 0;
}

_BYTE *sub_19C108C08(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;

  if (!a2)
LABEL_15:
    sub_19C2210D4(3);
  v6 = *(_DWORD *)(a2 + 72);
  v7 = *(_QWORD *)a2;
  v8 = (int *)(*(_QWORD *)a2 + v6);
  v9 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    v10 = 0;
    v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9)
      goto LABEL_4;
LABEL_7:
    v12 = 0;
    if (a4 < 1)
      goto LABEL_12;
    goto LABEL_8;
  }
  v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9)
    goto LABEL_7;
LABEL_4:
  v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1)
    goto LABEL_12;
LABEL_8:
  v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)(a1 + 408) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 100) != v10 || *(_DWORD *)(a1 + 104) != v12)
    goto LABEL_15;
  v15 = *(_BYTE **)(a1 + 512);
  v16 = *a3;
  v17 = *(unsigned __int8 *)(a1 + 117);
  v18 = sub_19C2210AC();
  return sub_19C101DB0(v15, (uint64_t *)a2, v16, v17, v18, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
}

void sub_19C108D1C(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  int16x4_t **v11;
  int v12;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 104);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 100));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
    sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 408));
  v11 = *(int16x4_t ***)(a1 + 512);
  v12 = sub_19C2210AC();
  sub_19C102074(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
}

_QWORD *sub_19C108DC4(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  int16x8_t *v8;
  int16x8_t *v9;
  int16x8_t *v10;
  uint64_t v11;
  int16x8_t *v12;
  int16x8_t *v13;
  int16x8_t *v14;
  uint64_t v15;
  int16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  __int16 *v20;
  __int16 *v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D128, 0);
    if (a3)
      goto LABEL_3;
LABEL_6:
    result = 0;
    v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v7 < 1)
      return result;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D128, 0);
  v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v7 < 1)
    return result;
LABEL_7:
  v8 = (int16x8_t *)result[16];
  v9 = (int16x8_t *)v5[16];
  v10 = **(int16x8_t ***)(a1 + 512);
  if (v7 < 0x10)
  {
    v11 = 0;
LABEL_14:
    v17 = v7 - v11;
    v18 = v11;
    v19 = &v10->i16[v18];
    v20 = &v9->i16[v18];
    v21 = &v8->i16[v18];
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = *v20++;
      *v19++ = v22 - v24;
      --v17;
    }
    while (v17);
    return result;
  }
  v11 = 0;
  if ((unint64_t)((char *)v10 - (char *)v8) < 0x20)
    goto LABEL_14;
  if ((unint64_t)((char *)v10 - (char *)v9) < 0x20)
    goto LABEL_14;
  v11 = v7 & 0x7FFFFFF0;
  v12 = v8 + 1;
  v13 = v9 + 1;
  v14 = v10 + 1;
  v15 = v7 & 0xFFFFFFF0;
  do
  {
    v16 = vsubq_s16(*v12, *v13);
    v14[-1] = vsubq_s16(v12[-1], v13[-1]);
    *v14 = v16;
    v12 += 2;
    v13 += 2;
    v14 += 2;
    v15 -= 16;
  }
  while (v15);
  if (v11 != v7)
    goto LABEL_14;
  return result;
}

void *sub_19C108F10(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D128, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D128, 0);
  return result;
}

_QWORD *sub_19C108F78(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int16x8_t *v9;
  int16x8_t *v10;
  uint64_t v11;
  int16x8_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  _WORD *v16;
  __int16 v17;

  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D128, 0);
    v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v4 < 1)
      return result;
  }
  else
  {
    result = 0;
    v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
    if ((int)v4 < 1)
      return result;
  }
  v5 = **(_QWORD **)(a1 + 512);
  v6 = result[16];
  if (v4 < 0x10 || (v5 < v6 + 2 * v4 ? (v7 = v6 >= v5 + 2 * v4) : (v7 = 1), !v7))
  {
    v8 = 0;
LABEL_16:
    v13 = v4 - v8;
    v14 = 2 * v8;
    v15 = (__int16 *)(v6 + v14);
    v16 = (_WORD *)(v5 + v14);
    do
    {
      v17 = *v15++;
      *v16++ += v17;
      --v13;
    }
    while (v13);
    return result;
  }
  v8 = v4 & 0x7FFFFFF0;
  v9 = (int16x8_t *)(v5 + 16);
  v10 = (int16x8_t *)(v6 + 16);
  v11 = v4 & 0xFFFFFFF0;
  do
  {
    v12 = vaddq_s16(*v10, *v9);
    v9[-1] = vaddq_s16(v10[-1], v9[-1]);
    *v9 = v12;
    v9 += 2;
    v10 += 2;
    v11 -= 16;
  }
  while (v11);
  if (v8 != v4)
    goto LABEL_16;
  return result;
}

void sub_19C109078(uint64_t a1, void *lpsrc)
{
  if (lpsrc)
    __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D110, 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 64))(*(_QWORD *)(a1 + 424));
  sub_19C2210D4(23);
}

uint64_t sub_19C1090C4(uint64_t result, float a2, double a3, double a4)
{
  uint64_t v4;
  _WORD *v5;
  float v6;
  BOOL v7;

  v4 = *(unsigned int *)(result + 108);
  if ((int)v4 >= 1)
  {
    v5 = **(_WORD ***)(result + 512);
    do
    {
      LOWORD(a4) = *v5;
      *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
      v6 = (float)SLODWORD(a4);
      v7 = (float)SLODWORD(a4) < (float)-a2;
      *(float *)&a4 = -a2;
      if (v7 || (*(float *)&a4 = a2, v6 > a2))
        *v5 = (int)*(float *)&a4;
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_19C109120(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3;
  int16x4_t *v4;
  uint64_t v5;
  int16x4_t *v6;
  uint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  unsigned __int16 *v10;

  v3 = *(unsigned int *)(result + 108);
  if ((int)v3 >= 1)
  {
    v4 = **(int16x4_t ***)(result + 512);
    if (v3 < 0x10)
    {
      v5 = 0;
LABEL_7:
      v9 = v3 - v5;
      v10 = (unsigned __int16 *)v4 + v5;
      do
      {
        a3.n128_u16[0] = *v10;
        a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
        a3.n128_f32[0] = (float)a3.n128_i32[0] * a2;
        *v10++ = (int)a3.n128_f32[0];
        --v9;
      }
      while (v9);
      return result;
    }
    v5 = v3 & 0x7FFFFFF0;
    v6 = v4 + 2;
    v7 = v3 & 0xFFFFFFF0;
    do
    {
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(v6[-2])), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v6[-2].i8)), a2)));
      v8 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*v6)), a2)), (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v6->i8)), a2)));
      *(__n128 *)v6[-2].i8 = a3;
      *(int16x8_t *)v6->i8 = v8;
      v6 += 4;
      v7 -= 16;
    }
    while (v7);
    if (v5 != v3)
      goto LABEL_7;
  }
  return result;
}

uint64_t sub_19C1091F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424));
}

void sub_19C109200(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v3 = **(_QWORD **)(a1 + 512);
  v5 = *(_DWORD *)(a1 + 100);
  v4 = *(_DWORD *)(a1 + 104);
  v7 = *(_QWORD **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)a2;
    v10 = (uint64_t)v7 - *(_QWORD *)a2;
    v11 = (v10 >> 4) + 1;
    if (v11 >> 60)
      sub_19C07DA0C();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14 >> 60)
      sub_19C07C7FC();
    v15 = 16 * v14;
    v16 = (char *)operator new(16 * v14);
    v17 = &v16[16 * (v10 >> 4)];
    v18 = &v16[v15];
    *(_QWORD *)v17 = v3;
    v8 = v17 + 16;
    v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((_QWORD *)v17 + 1) = v7[1])
    {
      v20 = *(v7 - 2);
      v7 -= 2;
      *((_QWORD *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v18;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = v3;
    v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(_QWORD *)(a2 + 8) = v8;
}

uint64_t sub_19C10930C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 128) = v3;
  result = a1 + 128;
  *(_QWORD *)(result + 384) = result;
  return result;
}

uint64_t sub_19C109324(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C109330(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C109338(uint64_t a1)
{
  void *__p;
  __int128 v3;

  __p = operator new(0x20uLL);
  v3 = xmmword_19C277590;
  strcpy((char *)__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 400))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0)
    operator delete(__p);
}

void sub_19C1093D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C1093F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 == v2)
  {
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = *(_QWORD *)(a1 + 48);
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7 != v6)
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = *(_QWORD *)(a1 + 72);
        v7 = *(_QWORD *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 80) = v6;
    v11 = *(_QWORD *)(a1 + 240);
    v10 = *(_QWORD *)(a1 + 248);
    if (v10 != v11)
      goto LABEL_13;
LABEL_18:
    v11 = v10;
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 80) = v7;
  v11 = *(_QWORD *)(a1 + 240);
  v10 = *(_QWORD *)(a1 + 248);
  if (v10 == v11)
    goto LABEL_18;
LABEL_13:
  v12 = 0;
  do
  {
    v13 = *(void **)(v11 + 8 * v12);
    if (v13)
    {
      operator delete[](v13);
      v11 = *(_QWORD *)(a1 + 240);
      v10 = *(_QWORD *)(a1 + 248);
    }
    ++v12;
  }
  while (v12 < (v10 - v11) >> 3);
LABEL_19:
  *(_QWORD *)(a1 + 248) = v11;
  v14 = *(void **)(a1 + 224);
  if (v14)
  {
    operator delete(v14);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v15 = *(void **)(a1 + 216);
  if (v15)
  {
    operator delete(v15);
    *(_QWORD *)(a1 + 216) = 0;
  }
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a1 + 384);
  v17 = *(_QWORD *)(a1 + 360);
  v16 = *(_QWORD *)(a1 + 368);
  if (v16 != v17)
  {
    v18 = *(_QWORD *)(a1 + 368);
    do
    {
      v20 = *(void **)(v18 - 24);
      v18 -= 24;
      v19 = v20;
      if (v20)
      {
        *(_QWORD *)(v16 - 16) = v19;
        operator delete(v19);
      }
      v16 = v18;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 368) = v17;
  if (!*(_BYTE *)(a1 + 116))
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
  }
}

float sub_19C109584(uint64_t a1, _QWORD *a2, float *a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float result;

  v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    v10 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 1.1755e-38;
    do
    {
      v9 = *(float *)(*(_QWORD *)(*a2 + 8 * a4) + 4 * v7);
      if (v9 > v8)
        v6 = v7;
      v8 = fmaxf(v9, v8);
      ++v7;
    }
    while (v5 != v7);
    v10 = v6;
  }
  v11 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10)
  {
    result = 99.0;
    *a3 = 99.0;
  }
  else
  {
    result = -log2f(v11);
    *a3 = result;
  }
  return result;
}

float32_t sub_19C109634(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, _DWORD *a5, float32x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t **v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  __int32 *v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;

  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    v14 = *a2;
    v15 = (float32x4_t **)(*a2 + 8 * a4);
    v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3))
      return a6.f32[0];
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 1.1755e-38;
    do
    {
      v11 = *(float *)(*(_QWORD *)(v6 + 8 * a4) + 4 * v9);
      if (v11 > v10)
        v8 = v9;
      v10 = fmaxf(v11, v10);
      ++v9;
    }
    while (v7 != v9);
    v12 = 0;
    v13 = 0;
    v14 = *a2;
    v15 = (float32x4_t **)(*a2 + 8 * a4);
    a6.i32[0] = 0x800000;
    do
    {
      v16 = (*v15)->f32[v13];
      if (v16 > a6.f32[0])
        v12 = v13;
      a6.f32[0] = fmaxf(v16, a6.f32[0]);
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12)
      ++*a5;
    v17 = *a3;
    if (a4 >= (unint64_t)((a3[1] - *a3) >> 3))
      return a6.f32[0];
  }
  if (a4 < (unint64_t)((a2[1] - v14) >> 3) && a4 < (unint64_t)((*(_QWORD *)(a1 + 296) - v6) >> 3))
  {
    v18 = *(unsigned int *)(a1 + 100);
    if ((int)v18 >= 1)
    {
      v19 = *v15;
      v20 = *(float32x4_t **)(v6 + 8 * a4);
      v21 = *(float32x4_t **)(v17 + 8 * a4);
      if (v18 >= 8)
      {
        v22 = 0;
        if ((unint64_t)((char *)v21 - (char *)v19) >= 0x20
          && (unint64_t)((char *)v21 - (char *)v20) >= 0x20)
        {
          v22 = v18 & 0x7FFFFFF8;
          v23 = v19 + 1;
          v24 = v20 + 1;
          v25 = v21 + 1;
          v26 = v18 & 0xFFFFFFF8;
          do
          {
            a6 = vsubq_f32(v23[-1], v24[-1]);
            v27 = vsubq_f32(*v23, *v24);
            v25[-1] = a6;
            *v25 = v27;
            v23 += 2;
            v24 += 2;
            v25 += 2;
            v26 -= 8;
          }
          while (v26);
          if (v22 == v18)
            return a6.f32[0];
        }
      }
      else
      {
        v22 = 0;
      }
      v28 = &v21->i32[v22];
      v29 = &v20->f32[v22];
      v30 = &v19->f32[v22];
      v31 = v18 - v22;
      do
      {
        v32 = *v30++;
        v33 = v32;
        v34 = *v29++;
        a6.f32[0] = v33 - v34;
        *v28++ = a6.i32[0];
        --v31;
      }
      while (v31);
    }
  }
  return a6.f32[0];
}

void sub_19C1097CC(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4)
{
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  size_t v23;
  uint64_t v24;
  NSObject *global_queue;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD block[7];
  int v41;

  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    v9 = 8 * a4;
    sub_19C10B530((void **)(a1 + 416), (float32x4_t **)(*(_QWORD *)(a1 + 384) + v9), (const void **)(*a2 + v9), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408), v8);
    sub_19C1032B4((void **)(*(_QWORD *)(a1 + 312) + v9), (uint64_t *)(a1 + 416), *(__int16 ***)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
    v10 = *(unsigned int *)(a1 + 104);
    if ((int)v10 >= 1)
    {
      v11 = *(int **)(*(_QWORD *)(a1 + 312) + 8 * a4);
      do
      {
        v12 = -1035468800;
        if (*(float *)v11 < -50.0 || (v12 = 1112014848, *(float *)v11 > 50.0))
          *v11 = v12;
        ++v11;
        --v10;
      }
      while (v10);
    }
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    v20 = *(_QWORD *)(a1 + 264) + 8 * a4;
    v21 = a1 + 416;
    v22 = *(_DWORD *)(a1 + 104);
    v23 = *(int *)(a1 + 100);
    v24 = *(_QWORD *)(a1 + 136);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_19C103680;
    block[3] = &unk_1E3D25490;
    v41 = v22;
    block[4] = v24;
    block[5] = v21;
    block[6] = v20;
    dispatch_apply(v23, global_queue, block);
    return;
  }
  v13 = *a2;
  v14 = *(_QWORD *)(a1 + 360) + 24 * a4;
  v16 = *(_BYTE **)v14;
  v15 = *(_BYTE **)(v14 + 8);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if ((v17 & 0x8000000000000000) != 0)
      sub_19C07DA0C();
    v18 = operator new(v15 - v16);
    memcpy(v18, v16, v17);
    v19 = *(unsigned int *)(a1 + 100);
    if ((int)v19 < 1)
      goto LABEL_26;
    goto LABEL_19;
  }
  v18 = 0;
  v19 = *(unsigned int *)(a1 + 100);
  if ((int)v19 >= 1)
  {
LABEL_19:
    v26 = 0;
    v27 = *(_QWORD *)(v13 + 8 * a4);
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * *(int *)(a1 + 160));
    if (v19 < 8)
      goto LABEL_24;
    if ((unint64_t)(v28 - v27) < 0x20)
      goto LABEL_24;
    v26 = v19 & 0x7FFFFFF8;
    v29 = (__int128 *)(v27 + 16);
    v30 = (_OWORD *)(v28 + 16);
    v31 = v19 & 0xFFFFFFF8;
    do
    {
      v32 = *v29;
      *(v30 - 1) = *(v29 - 1);
      *v30 = v32;
      v29 += 2;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v26 != v19)
    {
LABEL_24:
      v33 = v19 - v26;
      v34 = 4 * v26;
      v35 = (_DWORD *)(v28 + 4 * v26);
      v36 = (int *)(v27 + v34);
      do
      {
        v37 = *v36++;
        *v35++ = v37;
        --v33;
      }
      while (v33);
    }
  }
LABEL_26:
  if (*(int *)(a1 + 156) >= 1)
  {
    v38 = 0;
    v39 = *(_QWORD *)(a1 + 192);
    do
    {
      *(_DWORD *)(*(_QWORD *)(v39 + 24 * *(int *)(a1 + 160)) + 4 * v38) = *((_DWORD *)v18 + v38);
      ++v38;
    }
    while (v38 < *(int *)(a1 + 156));
    ++*(_DWORD *)(a1 + 160);
    goto LABEL_31;
  }
  ++*(_DWORD *)(a1 + 160);
  if (v18)
LABEL_31:
    operator delete(v18);
}

void sub_19C109AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C109AD0(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 116))
  {
    if (!*(_DWORD *)(a1 + 112))
    {
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
      v4 = *(_QWORD *)(a1 + 264);
      if (*(_QWORD *)(a1 + 272) == v4)
        goto LABEL_7;
      goto LABEL_5;
    }
    *(_DWORD *)(a1 + 160) = 0;
  }
  v4 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)(a1 + 272) == v4)
    goto LABEL_7;
LABEL_5:
  v5 = 0;
  do
  {
    bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
    v4 = *(_QWORD *)(a1 + 264);
  }
  while (v5 < (*(_QWORD *)(a1 + 272) - v4) >> 3);
LABEL_7:
  v6 = *(_QWORD *)(a1 + 288);
  if (*(_QWORD *)(a1 + 296) != v6)
  {
    v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      v6 = *(_QWORD *)(a1 + 288);
    }
    while (v7 < (*(_QWORD *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1 && !*(_BYTE *)(a1 + 116))
  {
    v8 = 0;
    v9 = 8 * a2 - 8;
LABEL_14:
    bzero(*(void **)(*(_QWORD *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
    bzero(*(void **)(*(_QWORD *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
    while (v9 != v8)
    {
      v8 += 8;
      if (!*(_BYTE *)(a1 + 116))
        goto LABEL_14;
    }
  }
}

uint64_t sub_19C109BF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_19C109BFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

void sub_19C109C08(uint64_t a1)
{
  if (*(int *)(a1 + 112) >= 1)
    sub_19C2210D4(33);
  sub_19C2210D4(23);
}

void sub_19C109C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (*(int *)(a1 + 112) < 1)
  {
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
    v10 = __OFSUB__(a5, 1);
    v9 = a5 - 1;
    if (v9 < 0 != v10)
      return;
  }
  else
  {
    *(_DWORD *)(a1 + 160) = 0;
    v9 = a5 - 1;
    if (a5 < 1)
      return;
  }
  v11 = 0;
  do
  {
    if (*(_BYTE *)(a1 + 520))
      v12 = v11;
    else
      v12 = v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
    --v9;
    ++v11;
  }
  while (v9 != -1);
}

void sub_19C109CD8(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  const void **v30;
  int v31;
  float *v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  int *v37;
  int *v38;
  int *v39;

  v7 = a3;
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1)
  {
    v9 = 0;
    if (!a5)
      goto LABEL_7;
  }
  else
  {
    v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
    if (!a5)
      goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 520))
    sub_19C2210D4(34);
LABEL_7:
  v10 = a4 & 0xFFFFFF;
  v11 = a5 != 0;
  if (v10 > v11)
  {
    while (1)
    {
      v12 = *(_BYTE *)(a1 + 520) ? v10 + ~v11 : v11;
      v13 = v12;
      v14 = *(_BYTE *)(a1 + 42) ? 1 : v12;
      v15 = ((*(_BYTE *)(a1 + 42) != 0) & v9) != 0 ? 1 : v12;
      v16 = *(_QWORD *)(a1 + 264);
      if ((_DWORD)v9)
        break;
      memmove(*(void **)(v16 + 8 * v15), *(const void **)(*a2 + 8 * v15), 4 * *(int *)(a1 + 96));
      v17 = *(unsigned __int8 *)(a1 + 40);
      if (*(_BYTE *)(a1 + 40))
        goto LABEL_23;
LABEL_24:
      if ((_DWORD)v9)
      {
        v36 = v13;
        v18 = *(_QWORD *)(a1 + 360);
        v19 = (_QWORD *)(v18 + 24 * v13);
        v20 = (_DWORD *)*v19;
        *(_DWORD *)*v19 = **(_DWORD **)(*v7 + 24 * v13);
        if (v17)
          v20[1] = *(_DWORD *)(a1 + 104) - 1;
        v21 = *(_QWORD *)(a1 + 384);
        v38 = 0;
        v39 = 0;
        v37 = 0;
        v22 = (_DWORD *)*v19;
        v23 = *(_QWORD *)(v18 + 24 * (int)v36 + 8);
        v24 = v23 - *v19;
        if (v23 != *v19)
        {
          if (v24 < 0)
            sub_19C07DA0C();
          v25 = v9;
          v26 = v10;
          v27 = v7;
          v37 = (int *)operator new(v23 - *v19);
          v38 = v37;
          v28 = &v37[v24 >> 2];
          v39 = v28;
          memcpy(v37, v22, v24);
          v38 = v28;
          v7 = v27;
          v10 = v26;
          v9 = v25;
        }
        sub_19C104ADC((void **)(v21 + 8 * v14), &v37, *(uint64_t **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
        v29 = v14;
        v13 = v36;
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
      }
      else
      {
        v29 = v14;
        sub_19C1032B4((void **)(*(_QWORD *)(a1 + 384) + 8 * v14), (uint64_t *)(*(_QWORD *)(a1 + 264) + 8 * v15), *(__int16 ***)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 0.0);
      }
      v30 = (const void **)(*(_QWORD *)(a1 + 384) + 8 * v29);
      v31 = *(_DWORD *)(a1 + 100);
      if (v31 >= 1)
      {
        v32 = (float *)*v30;
        v33 = *(unsigned int *)(a1 + 100);
        do
        {
          v34 = -1035468800;
          if (*v32 < -50.0 || (v34 = 1112014848, *v32 > 50.0))
            *(_DWORD *)v32 = v34;
          ++v32;
          --v33;
        }
        while (v33);
      }
      sub_19C102E84((void **)(*(_QWORD *)(a1 + 288) + 8 * v13), v30, v31, *(_DWORD *)(a1 + 408));
      if (++v11 == (_DWORD)v10)
        return;
    }
    bzero(*(void **)(v16 + 8 * v15), 4 * *(int *)(a1 + 104));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v15) + 4 * **(int **)(*v7 + 24 * (int)v13)) = 1065353216;
    v17 = *(unsigned __int8 *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_24;
LABEL_23:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v15) + 4 * *(int *)(a1 + 104) - 4) = 1065353216;
    goto LABEL_24;
  }
}

void sub_19C109FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C109FE4(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  a1[520] = 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE419088);
  if ((v7 & 1) == 0)
  {
    v14 = a6;
    v13 = a5;
    v12 = a4;
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EE419088);
    a2 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
    a6 = v14;
    if (v9)
    {
      qword_1EE419070 = 0;
      *(_QWORD *)algn_1EE419078 = 0;
      qword_1EE419080 = 0;
      __cxa_atexit((void (*)(void *))sub_19C082E80, &qword_1EE419070, &dword_19C079000);
      __cxa_guard_release(&qword_1EE419088);
      a2 = v10;
      a3 = v11;
      a4 = v12;
      a5 = v13;
      a6 = v14;
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, a2, a3, a4, a5, a6, &qword_1EE419070);
  a1[520] = 0;
  return result;
}

uint64_t sub_19C10A0B0(_BYTE *a1)
{
  uint64_t result;

  a1[520] = 1;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

char *sub_19C10A0E4(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 504) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D128, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 512) = result + 128;
  return result;
}

void sub_19C10A144(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D128, 0))__cxa_bad_cast();
    sub_19C22CBE0(a1 + 432);
    if (!*(_DWORD *)(a1 + 112))
      sub_19C2210D4(23);
    sub_19C2210D4(33);
  }
  sub_19C2210D4(1);
}

_DWORD *sub_19C10A1AC(_DWORD *result)
{
  if (!result[30])
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 392))(result);
  return result;
}

float sub_19C10A1C4(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  float **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = *(unsigned int *)(a1 + 100);
  v4 = *(float ***)(a1 + 288);
  v5 = a3;
  if ((int)v3 <= 0)
  {
    v8 = 0.0;
    do
    {
      while (1)
      {
        v14 = **v4;
        if (v14 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    v8 = 0.0;
    do
    {
      while (1)
      {
        v9 = 0;
        v10 = 0;
        v11 = 1.1755e-38;
        do
        {
          v12 = *(float *)(*(_QWORD *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11)
            v9 = v10;
          v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        v13 = v4[v6][v9];
        if (v13 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v13);
        if (++v6 == v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19C10A304(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C10B95C(a1);
  operator delete(v1);
}

uint64_t sub_19C10A318(uint64_t a1)
{
  return a1 + 336;
}

float sub_19C10A320(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * a2) + 4 * a3);
}

uint64_t sub_19C10A330(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  unint64_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float *v29;
  float *v30;
  float *v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;

  v5 = (a4 - 1);
  if (a4 >= 1)
  {
    v6 = *(unsigned int *)(result + 100);
    if ((int)v6 >= 1)
    {
      v7 = *(_QWORD *)(result + 288);
      v8 = *a2;
      v9 = *a3;
      v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          v12 = 0;
          v13 = 0;
          v14 = 1.1755e-38;
          do
          {
            v15 = *(float *)(*(_QWORD *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14)
              v12 = v13;
            v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          v16 = 0;
          v17 = 0;
          v18 = 1.1755e-38;
          do
          {
            v19 = *(float *)(*(_QWORD *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18)
              v16 = v17;
            v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            v6 = *(unsigned int *)(result + 100);
            if ((int)v6 < 1)
              continue;
          }
          v20 = *(float32x4_t **)(v8 + 8 * v5);
          v21 = *(float32x4_t **)(v7 + 8 * v5);
          v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              v23 = v6 & 0x7FFFFFF8;
              v24 = v20 + 1;
              v25 = v21 + 1;
              v26 = v22 + 1;
              v27 = v6 & 0xFFFFFFF8;
              do
              {
                v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6)
                continue;
            }
          }
          else
          {
            v23 = 0;
          }
          v29 = &v22->f32[v23];
          v30 = &v21->f32[v23];
          v31 = &v20->f32[v23];
          v32 = v6 - v23;
          do
          {
            v33 = *v31++;
            v34 = v33;
            v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

void sub_19C10A4B0(uint64_t a1, float a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  void **p_vtable;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  char **v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  void *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _OWORD *v127;
  __int128 *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  char **v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  _QWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  _OWORD *v152;
  __int128 *v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _BYTE *v173;
  _QWORD *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  _OWORD *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  void *v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _BYTE *v196;
  _QWORD *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  _OWORD *v202;
  char *v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  void *v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  _OWORD *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  _QWORD *v230;
  unint64_t v231;
  int v232;
  char **v233;
  uint64_t v234;
  unint64_t v235;
  __int128 v236[8];

  v4 = *(_QWORD *)(a1 + 528);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 376);
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    if (*(_BYTE *)(a1 + 40))
    {
LABEL_3:
      v6 = *(_DWORD *)(a1 + 96) + (v5 ^ 1);
      v7 = *(_DWORD *)(a1 + 100) * v6;
      *(_DWORD *)(a1 + 104) = v6;
      *(_DWORD *)(a1 + 108) = v7;
      if (*(_DWORD *)(a1 + 504))
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  v10 = *(_DWORD *)(a1 + 96);
  v7 = *(_DWORD *)(a1 + 100) * v10;
  *(_DWORD *)(a1 + 104) = v10;
  *(_DWORD *)(a1 + 108) = v7;
  if (*(_DWORD *)(a1 + 504))
  {
LABEL_4:
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    if (*(_BYTE *)(a1 + 116))
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_9:
  if (!*(_BYTE *)(a1 + 117))
  {
    if (v4 && *(_DWORD *)(v4 + 40) == 1)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(v4 + 112);
    }
    else
    {
      *(_QWORD *)&v236[0] = operator new[]();
      bzero(*(void **)&v236[0], 2 * v7);
      sub_19C100F64(v236, v7, a2);
      v11 = *(_QWORD *)&v236[0];
      *(_QWORD *)(a1 + 128) = *(_QWORD *)&v236[0];
      v13 = *(char **)(a1 + 80);
      v12 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(char **)(a1 + 72);
        v16 = (v13 - v15) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_19C07DA0C();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            goto LABEL_264;
          v20 = (char *)operator new(8 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        v22 = &v20[8 * v19];
        *(_QWORD *)v21 = v11;
        v14 = v21 + 8;
        if (v13 != v15)
        {
          v23 = v13 - v15 - 8;
          if (v23 < 0x58)
            goto LABEL_269;
          if ((unint64_t)(v15 - v20) < 0x20)
            goto LABEL_269;
          v24 = (v23 >> 3) + 1;
          v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
          v26 = &v13[-v25];
          v21 -= v25;
          v27 = &v20[8 * v16 - 16];
          v28 = (__int128 *)(v13 - 16);
          v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *v28;
            *((_OWORD *)v27 - 1) = *(v28 - 1);
            *(_OWORD *)v27 = v30;
            v27 -= 32;
            v28 -= 2;
            v29 -= 4;
          }
          while (v29);
          v13 = v26;
          if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_269:
            do
            {
              v31 = *((_QWORD *)v13 - 1);
              v13 -= 8;
              *((_QWORD *)v21 - 1) = v31;
              v21 -= 8;
            }
            while (v13 != v15);
          }
          v13 = *(char **)(a1 + 72);
        }
        *(_QWORD *)(a1 + 72) = v21;
        *(_QWORD *)(a1 + 80) = v14;
        *(_QWORD *)(a1 + 88) = v22;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v13 = v11;
        v14 = v13 + 8;
      }
      *(_QWORD *)(a1 + 80) = v14;
    }
  }
  *(_QWORD *)(a1 + 512) = a1 + 128;
  p_vtable = (void **)(MLPNDArrayLossLabels + 24);
  if (!*(_BYTE *)(a1 + 116))
  {
LABEL_37:
    v32 = *(unsigned int *)(a1 + 100);
    v33 = (void *)operator new[]();
    v34 = v33;
    if ((int)v32 >= 1)
      bzero(v33, 4 * v32);
    *(_QWORD *)(a1 + 416) = v34;
    v35 = (char **)(a1 + 48);
    v37 = *(char **)(a1 + 56);
    v36 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v37 < v36)
    {
      *(_QWORD *)v37 = v34;
      v38 = (uint64_t)(v37 + 8);
      goto LABEL_62;
    }
    v39 = *v35;
    v40 = v37 - *v35;
    v41 = v40 >> 3;
    v42 = (v40 >> 3) + 1;
    if (v42 >> 61)
      goto LABEL_263;
    v43 = v36 - (_QWORD)v39;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
        goto LABEL_264;
      v45 = operator new(8 * v44);
      v46 = &v45[8 * v41];
      v47 = &v45[8 * v44];
      *v46 = v34;
      v38 = (uint64_t)(v46 + 1);
      v48 = (char *)(v37 - v39);
      if (v37 != v39)
      {
LABEL_50:
        v49 = (unint64_t)(v48 - 8);
        if (v49 >= 0x58)
        {
          v50 = v37 - &v45[v40];
          p_vtable = MLPNDArrayLossLabels.vtable;
          if (v50 >= 0x20)
          {
            v51 = (v49 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v53 = &v37[-v52];
            v46 = (_QWORD *)((char *)v46 - v52);
            v54 = &v45[8 * v41 - 16];
            v55 = v37 - 16;
            v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v57 = *(_OWORD *)v55;
              *(v54 - 1) = *((_OWORD *)v55 - 1);
              *v54 = v57;
              v54 -= 2;
              v55 -= 32;
              v56 -= 4;
            }
            while (v56);
            v37 = v53;
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_60:
              v37 = *v35;
              *(_QWORD *)(a1 + 48) = v46;
              *(_QWORD *)(a1 + 56) = v38;
              *(_QWORD *)(a1 + 64) = v47;
              if (!v37)
                goto LABEL_62;
              goto LABEL_61;
            }
          }
        }
        else
        {
          p_vtable = (void **)(MLPNDArrayLossLabels + 24);
        }
        do
        {
          v58 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v46 = v58;
        }
        while (v37 != v39);
        goto LABEL_60;
      }
    }
    else
    {
      v45 = 0;
      v46 = (_QWORD *)(8 * v41);
      v47 = 0;
      *(_QWORD *)(8 * v41) = v34;
      v38 = 8 * v41 + 8;
      v48 = (char *)(v37 - v39);
      if (v37 != v39)
        goto LABEL_50;
    }
    p_vtable = (void **)(MLPNDArrayLossLabels + 24);
    *(_QWORD *)(a1 + 48) = v46;
    *(_QWORD *)(a1 + 56) = v38;
    *(_QWORD *)(a1 + 64) = v47;
    if (!v37)
    {
LABEL_62:
      *(_QWORD *)(a1 + 56) = v38;
      if (*(int *)(a1 + 112) >= 1)
      {
        sub_19C100764((uint64_t)v236, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), *((_DWORD *)p_vtable + 602), *(unsigned __int8 *)(a1 + 40) + 1);
        sub_19C1007E8((unsigned int *)(a1 + 144), v236);
        sub_19C101AC4(v236);
      }
      v59 = *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100);
      v60 = (void *)operator new[]();
      bzero(v60, 4 * v59);
      *(_QWORD *)(a1 + 136) = v60;
      v62 = *(char **)(a1 + 56);
      v61 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v62 < v61)
      {
        *(_QWORD *)v62 = v60;
        v63 = (uint64_t)(v62 + 8);
        goto LABEL_87;
      }
      v64 = *v35;
      v65 = v62 - *v35;
      v66 = v65 >> 3;
      v67 = (v65 >> 3) + 1;
      if (!(v67 >> 61))
      {
        v68 = v61 - (_QWORD)v64;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (!v69)
        {
          v70 = 0;
          v71 = (_QWORD *)(8 * v66);
          v72 = 0;
          *(_QWORD *)(8 * v66) = v60;
          v63 = 8 * v66 + 8;
          v73 = (char *)(v62 - v64);
          if (v62 != v64)
          {
LABEL_75:
            v74 = (unint64_t)(v73 - 8);
            if (v74 >= 0x58)
            {
              v75 = v62 - &v70[v65];
              p_vtable = MLPNDArrayLossLabels.vtable;
              if (v75 >= 0x20)
              {
                v76 = (v74 >> 3) + 1;
                v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                v78 = &v62[-v77];
                v71 = (_QWORD *)((char *)v71 - v77);
                v79 = &v70[8 * v66 - 16];
                v80 = v62 - 16;
                v81 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v82 = *(_OWORD *)v80;
                  *(v79 - 1) = *((_OWORD *)v80 - 1);
                  *v79 = v82;
                  v79 -= 2;
                  v80 -= 32;
                  v81 -= 4;
                }
                while (v81);
                v62 = v78;
                if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_85:
                  v62 = *v35;
                  *(_QWORD *)(a1 + 48) = v71;
                  *(_QWORD *)(a1 + 56) = v63;
                  *(_QWORD *)(a1 + 64) = v72;
                  if (!v62)
                    goto LABEL_87;
                  goto LABEL_86;
                }
              }
            }
            else
            {
              p_vtable = (void **)(MLPNDArrayLossLabels + 24);
            }
            do
            {
              v83 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *--v71 = v83;
            }
            while (v62 != v64);
            goto LABEL_85;
          }
LABEL_78:
          p_vtable = (void **)(MLPNDArrayLossLabels + 24);
          *(_QWORD *)(a1 + 48) = v71;
          *(_QWORD *)(a1 + 56) = v63;
          *(_QWORD *)(a1 + 64) = v72;
          if (!v62)
          {
LABEL_87:
            *(_QWORD *)(a1 + 56) = v63;
            if (*(int *)(a1 + 112) >= 1)
              goto LABEL_6;
            goto LABEL_88;
          }
LABEL_86:
          operator delete(v62);
          goto LABEL_87;
        }
        if (!(v69 >> 61))
        {
          v70 = operator new(8 * v69);
          v71 = &v70[8 * v66];
          v72 = &v70[8 * v69];
          *v71 = v60;
          v63 = (uint64_t)(v71 + 1);
          v73 = (char *)(v62 - v64);
          if (v62 != v64)
            goto LABEL_75;
          goto LABEL_78;
        }
LABEL_264:
        sub_19C07C7FC();
      }
LABEL_263:
      sub_19C07DA0C();
    }
LABEL_61:
    operator delete(v37);
    goto LABEL_62;
  }
LABEL_5:
  if (*(int *)(a1 + 112) >= 1)
  {
LABEL_6:
    v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
    goto LABEL_89;
  }
LABEL_88:
  v9 = 0;
LABEL_89:
  if (*(_BYTE *)(a1 + 42))
    v84 = 2;
  else
    v84 = *((unsigned int *)p_vtable + 602);
  v234 = v84;
  if (((*(_BYTE *)(a1 + 42) != 0) & v9) != 0)
    v85 = 2;
  else
    v85 = *((_DWORD *)p_vtable + 602);
  v86 = v85;
  v87 = *(_QWORD *)(a1 + 264);
  v88 = (*(_QWORD *)(a1 + 272) - v87) >> 3;
  if (v86 <= v88)
  {
    if (v86 < v88)
      *(_QWORD *)(a1 + 272) = v87 + 8 * v86;
  }
  else
  {
    sub_19C098930((void **)(a1 + 264), v86 - v88);
  }
  v89 = *(_QWORD *)(a1 + 384);
  v90 = (*(_QWORD *)(a1 + 392) - v89) >> 3;
  if ((int)v234 <= v90)
  {
    if ((int)v234 < v90)
      *(_QWORD *)(a1 + 392) = v89 + 8 * (int)v234;
  }
  else
  {
    sub_19C098930((void **)(a1 + 384), (int)v234 - v90);
  }
  v91 = *((_DWORD *)p_vtable + 602);
  v92 = *(_QWORD *)(a1 + 288);
  v93 = (*(_QWORD *)(a1 + 296) - v92) >> 3;
  if (v91 <= v93)
  {
    if (v91 < v93)
      *(_QWORD *)(a1 + 296) = v92 + 8 * v91;
  }
  else
  {
    sub_19C098930((void **)(a1 + 288), v91 - v93);
    v91 = *((_DWORD *)p_vtable + 602);
  }
  if (!*(_BYTE *)(a1 + 116))
  {
    v94 = v91;
    v95 = *(_QWORD *)(a1 + 312);
    v96 = (*(_QWORD *)(a1 + 320) - v95) >> 3;
    if (v91 <= v96)
    {
      if (v91 < v96)
        *(_QWORD *)(a1 + 320) = v95 + 8 * v91;
    }
    else
    {
      sub_19C098930((void **)(a1 + 312), v91 - v96);
      v91 = *((_DWORD *)p_vtable + 602);
      v94 = v91;
    }
    v97 = *(_QWORD *)(a1 + 336);
    v98 = (*(_QWORD *)(a1 + 344) - v97) >> 3;
    if (v94 <= v98)
    {
      if (v94 < v98)
        *(_QWORD *)(a1 + 344) = v97 + 8 * v94;
    }
    else
    {
      sub_19C098930((void **)(a1 + 336), v94 - v98);
      v91 = *((_DWORD *)p_vtable + 602);
    }
  }
  v99 = v91;
  v101 = *(_QWORD *)(a1 + 360);
  v100 = *(_QWORD *)(a1 + 368);
  v102 = 0xAAAAAAAAAAAAAAABLL * ((v100 - v101) >> 3);
  if (v99 <= v102)
  {
    if (v99 < v102)
    {
      v103 = v101 + 24 * (int)v99;
      if (v100 != v103)
      {
        v104 = *(_QWORD *)(a1 + 368);
        do
        {
          v106 = *(void **)(v104 - 24);
          v104 -= 24;
          v105 = v106;
          if (v106)
          {
            *(_QWORD *)(v100 - 16) = v105;
            operator delete(v105);
          }
          v100 = v104;
        }
        while (v104 != v103);
      }
      *(_QWORD *)(a1 + 368) = v103;
    }
  }
  else
  {
    sub_19C167E70(a1 + 360, v99 - v102);
  }
  v232 = *(unsigned __int8 *)(a1 + 40);
  if ((int)v86 >= 1)
  {
    v107 = 0;
    v233 = (char **)(a1 + 48);
    v108 = v86;
    while (1)
    {
      v110 = *(unsigned int *)(a1 + 104);
      v111 = (void *)operator new[]();
      v112 = v111;
      if ((int)v110 >= 1)
        bzero(v111, 4 * v110);
      *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v107) = v112;
      v114 = *(char **)(a1 + 56);
      v113 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v114 >= v113)
        break;
      *(_QWORD *)v114 = v112;
      v109 = (uint64_t)(v114 + 8);
LABEL_128:
      *(_QWORD *)(a1 + 56) = v109;
      if (++v107 == v108)
        goto LABEL_152;
    }
    v115 = *v233;
    v116 = v114 - *v233;
    v117 = v116 >> 3;
    v118 = (v116 >> 3) + 1;
    if (v118 >> 61)
      sub_19C07DA0C();
    v119 = v113 - (_QWORD)v115;
    if (v119 >> 2 > v118)
      v118 = v119 >> 2;
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
      v120 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v120 = v118;
    if (v120)
    {
      if (v120 >> 61)
        goto LABEL_264;
      v121 = operator new(8 * v120);
      v122 = &v121[8 * v117];
      *v122 = v112;
      v109 = (uint64_t)(v122 + 1);
      if (v114 == v115)
        goto LABEL_150;
    }
    else
    {
      v121 = 0;
      v122 = (_QWORD *)(8 * v117);
      *(_QWORD *)(8 * v117) = v112;
      v109 = 8 * v117 + 8;
      if (v114 == v115)
      {
LABEL_150:
        *(_QWORD *)(a1 + 48) = v122;
        *(_QWORD *)(a1 + 56) = v109;
        *(_QWORD *)(a1 + 64) = &v121[8 * v120];
        if (v114)
          operator delete(v114);
        goto LABEL_128;
      }
    }
    v123 = v114 - 8 - v115;
    if (v123 < 0x58)
      goto LABEL_270;
    if ((unint64_t)(v114 - &v121[v116]) < 0x20)
      goto LABEL_270;
    v124 = (v123 >> 3) + 1;
    v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
    v126 = &v114[-v125];
    v122 = (_QWORD *)((char *)v122 - v125);
    v127 = &v121[8 * v117 - 16];
    v128 = (__int128 *)(v114 - 16);
    v129 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v130 = *v128;
      *(v127 - 1) = *(v128 - 1);
      *v127 = v130;
      v127 -= 2;
      v128 -= 2;
      v129 -= 4;
    }
    while (v129);
    v114 = v126;
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_270:
      do
      {
        v131 = *((_QWORD *)v114 - 1);
        v114 -= 8;
        *--v122 = v131;
      }
      while (v114 != v115);
    }
    v114 = *v233;
    goto LABEL_150;
  }
LABEL_152:
  if ((int)v234 >= 1)
  {
    v132 = 0;
    v133 = (char **)(a1 + 48);
    while (1)
    {
      v135 = *(unsigned int *)(a1 + 100);
      v136 = (void *)operator new[]();
      v137 = v136;
      if ((int)v135 >= 1)
        bzero(v136, 4 * v135);
      *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * v132) = v137;
      v139 = *(char **)(a1 + 56);
      v138 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v139 >= v138)
        break;
      *(_QWORD *)v139 = v137;
      v134 = (uint64_t)(v139 + 8);
LABEL_155:
      *(_QWORD *)(a1 + 56) = v134;
      if (++v132 == v234)
        goto LABEL_179;
    }
    v140 = *v133;
    v141 = v139 - *v133;
    v142 = v141 >> 3;
    v143 = (v141 >> 3) + 1;
    if (v143 >> 61)
      goto LABEL_263;
    v144 = v138 - (_QWORD)v140;
    if (v144 >> 2 > v143)
      v143 = v144 >> 2;
    if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
      v145 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v145 = v143;
    if (v145)
    {
      if (v145 >> 61)
        goto LABEL_264;
      v146 = operator new(8 * v145);
      v147 = &v146[8 * v142];
      *v147 = v137;
      v134 = (uint64_t)(v147 + 1);
      if (v139 == v140)
        goto LABEL_177;
    }
    else
    {
      v146 = 0;
      v147 = (_QWORD *)(8 * v142);
      *(_QWORD *)(8 * v142) = v137;
      v134 = 8 * v142 + 8;
      if (v139 == v140)
      {
LABEL_177:
        *(_QWORD *)(a1 + 48) = v147;
        *(_QWORD *)(a1 + 56) = v134;
        *(_QWORD *)(a1 + 64) = &v146[8 * v145];
        if (v139)
          operator delete(v139);
        goto LABEL_155;
      }
    }
    v148 = v139 - 8 - v140;
    if (v148 < 0x58)
      goto LABEL_271;
    if ((unint64_t)(v139 - &v146[v141]) < 0x20)
      goto LABEL_271;
    v149 = (v148 >> 3) + 1;
    v150 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
    v151 = &v139[-v150];
    v147 = (_QWORD *)((char *)v147 - v150);
    v152 = &v146[8 * v142 - 16];
    v153 = (__int128 *)(v139 - 16);
    v154 = v149 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v155 = *v153;
      *(v152 - 1) = *(v153 - 1);
      *v152 = v155;
      v152 -= 2;
      v153 -= 2;
      v154 -= 4;
    }
    while (v154);
    v139 = v151;
    if (v149 != (v149 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_271:
      do
      {
        v156 = *((_QWORD *)v139 - 1);
        v139 -= 8;
        *--v147 = v156;
      }
      while (v139 != v140);
    }
    v139 = *v133;
    goto LABEL_177;
  }
LABEL_179:
  v157 = MLPNDArrayLossLabels.vtable;
  if (dword_1EE418968 >= 1)
  {
    v158 = 0;
    v159 = (char **)(a1 + 48);
    v160 = 1;
    if (v232)
      v160 = 2;
    v235 = v160;
    while (1)
    {
      if (*(_BYTE *)(a1 + 116))
        goto LABEL_235;
      v161 = *(unsigned int *)(a1 + 104);
      v162 = (void *)operator new[]();
      v163 = v162;
      if ((int)v161 >= 1)
        bzero(v162, 4 * v161);
      *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v158) = v163;
      v165 = *(char **)(a1 + 56);
      v164 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v165 < v164)
      {
        *(_QWORD *)v165 = v163;
        v166 = (uint64_t)(v165 + 8);
        goto LABEL_210;
      }
      v167 = *v159;
      v168 = v165 - *v159;
      v169 = v168 >> 3;
      v170 = (v168 >> 3) + 1;
      if (v170 >> 61)
        goto LABEL_263;
      v171 = v164 - (_QWORD)v167;
      if (v171 >> 2 > v170)
        v170 = v171 >> 2;
      v172 = (unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v170;
      if (v172)
        break;
      v173 = 0;
      v174 = (_QWORD *)(8 * v169);
      *(_QWORD *)(8 * v169) = v163;
      v166 = 8 * v169 + 8;
      if (v165 != v167)
        goto LABEL_201;
LABEL_208:
      *(_QWORD *)(a1 + 48) = v174;
      *(_QWORD *)(a1 + 56) = v166;
      *(_QWORD *)(a1 + 64) = &v173[8 * v172];
      v157 = (void **)(MLPNDArrayLossLabels + 24);
      if (v165)
        operator delete(v165);
LABEL_210:
      *(_QWORD *)(a1 + 56) = v166;
      v184 = *(unsigned int *)(a1 + 100);
      v185 = (void *)operator new[]();
      v186 = v185;
      if ((int)v184 >= 1)
        bzero(v185, 4 * v184);
      *(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * v158) = v186;
      v188 = *(char **)(a1 + 56);
      v187 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v188 >= v187)
      {
        v190 = *v159;
        v191 = v188 - *v159;
        v192 = v191 >> 3;
        v193 = (v191 >> 3) + 1;
        if (v193 >> 61)
          goto LABEL_263;
        v194 = v187 - (_QWORD)v190;
        if (v194 >> 2 > v193)
          v193 = v194 >> 2;
        if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8)
          v195 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v195 = v193;
        if (v195)
        {
          if (v195 >> 61)
            goto LABEL_264;
          v196 = operator new(8 * v195);
          v197 = &v196[8 * v192];
          *v197 = v186;
          v189 = (uint64_t)(v197 + 1);
          if (v188 == v190)
            goto LABEL_232;
LABEL_225:
          v198 = v188 - 8 - v190;
          if (v198 < 0x58)
            goto LABEL_272;
          if ((unint64_t)(v188 - &v196[v191]) < 0x20)
            goto LABEL_272;
          v199 = (v198 >> 3) + 1;
          v200 = 8 * (v199 & 0x3FFFFFFFFFFFFFFCLL);
          v201 = &v188[-v200];
          v197 = (_QWORD *)((char *)v197 - v200);
          v202 = &v196[8 * v192 - 16];
          v203 = v188 - 16;
          v204 = v199 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v205 = *(_OWORD *)v203;
            *(v202 - 1) = *((_OWORD *)v203 - 1);
            *v202 = v205;
            v202 -= 2;
            v203 -= 32;
            v204 -= 4;
          }
          while (v204);
          v188 = v201;
          if (v199 != (v199 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_272:
            do
            {
              v206 = *((_QWORD *)v188 - 1);
              v188 -= 8;
              *--v197 = v206;
            }
            while (v188 != v190);
          }
          v188 = *v159;
        }
        else
        {
          v196 = 0;
          v197 = (_QWORD *)(8 * v192);
          *(_QWORD *)(8 * v192) = v186;
          v189 = 8 * v192 + 8;
          if (v188 != v190)
            goto LABEL_225;
        }
LABEL_232:
        *(_QWORD *)(a1 + 48) = v197;
        *(_QWORD *)(a1 + 56) = v189;
        *(_QWORD *)(a1 + 64) = &v196[8 * v195];
        v157 = (void **)(MLPNDArrayLossLabels + 24);
        if (v188)
          operator delete(v188);
        goto LABEL_234;
      }
      *(_QWORD *)v188 = v186;
      v189 = (uint64_t)(v188 + 8);
LABEL_234:
      *(_QWORD *)(a1 + 56) = v189;
LABEL_235:
      v207 = *(unsigned int *)(a1 + 100);
      v208 = (void *)operator new[]();
      v209 = v208;
      if ((int)v207 >= 1)
        bzero(v208, 4 * v207);
      *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v158) = v209;
      v211 = *(char **)(a1 + 56);
      v210 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v211 >= v210)
      {
        v213 = *v159;
        v214 = v211 - *v159;
        v215 = v214 >> 3;
        v216 = (v214 >> 3) + 1;
        if (v216 >> 61)
          goto LABEL_263;
        v217 = v210 - (_QWORD)v213;
        if (v217 >> 2 > v216)
          v216 = v217 >> 2;
        if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v216;
        if (v218)
        {
          if (v218 >> 61)
            goto LABEL_264;
          v219 = operator new(8 * v218);
          v220 = &v219[8 * v215];
          *v220 = v209;
          v212 = (uint64_t)(v220 + 1);
          if (v211 == v213)
            goto LABEL_257;
LABEL_250:
          v221 = v211 - 8 - v213;
          if (v221 < 0x58)
            goto LABEL_273;
          if ((unint64_t)(v211 - &v219[v214]) < 0x20)
            goto LABEL_273;
          v222 = (v221 >> 3) + 1;
          v223 = 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
          v224 = &v211[-v223];
          v220 = (_QWORD *)((char *)v220 - v223);
          v225 = &v219[8 * v215 - 16];
          v226 = v211 - 16;
          v227 = v222 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v228 = *(_OWORD *)v226;
            *(v225 - 1) = *((_OWORD *)v226 - 1);
            *v225 = v228;
            v225 -= 2;
            v226 -= 32;
            v227 -= 4;
          }
          while (v227);
          v211 = v224;
          if (v222 != (v222 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_273:
            do
            {
              v229 = *((_QWORD *)v211 - 1);
              v211 -= 8;
              *--v220 = v229;
            }
            while (v211 != v213);
          }
          v211 = *v159;
        }
        else
        {
          v219 = 0;
          v220 = (_QWORD *)(8 * v215);
          *(_QWORD *)(8 * v215) = v209;
          v212 = 8 * v215 + 8;
          if (v211 != v213)
            goto LABEL_250;
        }
LABEL_257:
        *(_QWORD *)(a1 + 48) = v220;
        *(_QWORD *)(a1 + 56) = v212;
        *(_QWORD *)(a1 + 64) = &v219[8 * v218];
        v157 = MLPNDArrayLossLabels.vtable;
        if (v211)
          operator delete(v211);
        goto LABEL_259;
      }
      *(_QWORD *)v211 = v209;
      v212 = (uint64_t)(v211 + 8);
LABEL_259:
      *(_QWORD *)(a1 + 56) = v212;
      v230 = (_QWORD *)(*(_QWORD *)(a1 + 360) + 24 * v158);
      v231 = (uint64_t)(v230[1] - *v230) >> 2;
      if (v235 > v231)
      {
        sub_19C101928((uint64_t)v230, v235 - v231);
      }
      else if (v235 < v231)
      {
        v230[1] = *v230 + 4 * v235;
      }
      if (++v158 >= *((int *)v157 + 602))
        return;
    }
    if (v172 >> 61)
      goto LABEL_264;
    v173 = operator new(8 * v172);
    v174 = &v173[8 * v169];
    *v174 = v163;
    v166 = (uint64_t)(v174 + 1);
    if (v165 == v167)
      goto LABEL_208;
LABEL_201:
    v175 = v165 - 8 - v167;
    if (v175 < 0x58)
      goto LABEL_274;
    if ((unint64_t)(v165 - &v173[v168]) < 0x20)
      goto LABEL_274;
    v176 = (v175 >> 3) + 1;
    v177 = 8 * (v176 & 0x3FFFFFFFFFFFFFFCLL);
    v178 = &v165[-v177];
    v174 = (_QWORD *)((char *)v174 - v177);
    v179 = &v173[8 * v169 - 16];
    v180 = v165 - 16;
    v181 = v176 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v182 = *(_OWORD *)v180;
      *(v179 - 1) = *((_OWORD *)v180 - 1);
      *v179 = v182;
      v179 -= 2;
      v180 -= 32;
      v181 -= 4;
    }
    while (v181);
    v165 = v178;
    if (v176 != (v176 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_274:
      do
      {
        v183 = *((_QWORD *)v165 - 1);
        v165 -= 8;
        *--v174 = v183;
      }
      while (v165 != v167);
    }
    v165 = *v159;
    goto LABEL_208;
  }
}

void sub_19C10B51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C101AC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

float32_t sub_19C10B530(void **a1, float32x4_t **a2, const void **a3, unsigned int a4, int a5, float32x4_t a6)
{
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t *v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  uint64_t v17;
  int8x16_t *v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  int8x16_t *v22;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float32x4_t *v35;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t *v39;
  uint64_t v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float *v45;
  float v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;
  uint64_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  float *v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float32x4_t *v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  float32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  float *v83;
  float *v84;
  float v85;
  float v86;
  float v87;
  float v88;

  switch(a5)
  {
    case 0:
      memmove(*a1, *a3, 4 * (int)a4);
      return a6.f32[0];
    case 1:
      if ((int)a4 < 1)
        return a6.f32[0];
      v6 = *a2;
      v7 = (float32x4_t *)*a3;
      v8 = (float32x4_t *)*a1;
      if (a4 < 8)
      {
        v9 = 0;
LABEL_42:
        v52 = a4 - v9;
        v53 = v9;
        v54 = (char *)v8 + v53 * 4;
        v55 = &v7->f32[v53];
        v56 = &v6->f32[v53];
        do
        {
          v57 = *v56++;
          v58 = v57 - (float)(v57 * v57);
          v59 = *v55++;
          a6.f32[0] = v58 * v59;
          *(_DWORD *)v54 = a6.i32[0];
          v54 += 4;
          --v52;
        }
        while (v52);
        return a6.f32[0];
      }
      v9 = 0;
      if ((unint64_t)((char *)v8 - (char *)v6) < 0x20)
        goto LABEL_42;
      if ((unint64_t)((char *)v8 - (char *)v7) < 0x20)
        goto LABEL_42;
      v9 = a4 & 0x7FFFFFF8;
      v47 = v6 + 1;
      v48 = v7 + 1;
      v49 = v8 + 1;
      v50 = a4 & 0xFFFFFFF8;
      do
      {
        a6 = vmulq_f32(vmlsq_f32(v47[-1], v47[-1], v47[-1]), v48[-1]);
        v51 = vmulq_f32(vmlsq_f32(*v47, *v47, *v47), *v48);
        v49[-1] = a6;
        *v49 = v51;
        v47 += 2;
        v48 += 2;
        v49 += 2;
        v50 -= 8;
      }
      while (v50);
      if (v9 != a4)
        goto LABEL_42;
      return a6.f32[0];
    case 2:
      if ((int)a4 < 1)
        return a6.f32[0];
      v10 = *a2;
      v11 = (float32x4_t *)*a3;
      v12 = (float32x4_t *)*a1;
      if (a4 < 8)
      {
        v13 = 0;
LABEL_50:
        v65 = a4 - v13;
        v66 = v13;
        v67 = (char *)v12 + v66 * 4;
        v68 = &v11->f32[v66];
        v69 = &v10->f32[v66];
        do
        {
          v70 = *v69++;
          v71 = v70 * v70;
          v72 = *v68++;
          a6.f32[0] = v72 - (float)(v71 * v72);
          *(_DWORD *)v67 = a6.i32[0];
          v67 += 4;
          --v65;
        }
        while (v65);
        return a6.f32[0];
      }
      v13 = 0;
      if ((unint64_t)((char *)v12 - (char *)v10) < 0x20)
        goto LABEL_50;
      if ((unint64_t)((char *)v12 - (char *)v11) < 0x20)
        goto LABEL_50;
      v13 = a4 & 0xFFFFFFF8;
      v60 = v10 + 1;
      v61 = v11 + 1;
      v62 = v12 + 1;
      v63 = v13;
      do
      {
        a6 = vmulq_f32(v60[-1], v60[-1]);
        v64 = vmlsq_f32(*v61, *v61, vmulq_f32(*v60, *v60));
        v62[-1] = vmlsq_f32(v61[-1], v61[-1], a6);
        *v62 = v64;
        v60 += 2;
        v61 += 2;
        v62 += 2;
        v63 -= 8;
      }
      while (v63);
      if (v13 != a4)
        goto LABEL_50;
      return a6.f32[0];
    case 3:
      if ((int)a4 < 1)
        return a6.f32[0];
      v14 = *a2;
      v15 = (float32x4_t *)*a3;
      v16 = (float32x4_t *)*a1;
      if (a4 < 8)
      {
        v17 = 0;
LABEL_58:
        v80 = a4 - v17;
        v81 = v17;
        v82 = (char *)v16 + v81 * 4;
        v83 = &v15->f32[v81];
        v84 = &v14->f32[v81];
        do
        {
          v85 = *v84++;
          v86 = v85;
          v87 = (float)(v85 * -0.38853) + 0.66667;
          v88 = *v83++;
          a6.f32[0] = (float)(v88 * (float)(v86 + 1.7159)) * v87;
          *(_DWORD *)v82 = a6.i32[0];
          v82 += 4;
          --v80;
        }
        while (v80);
        return a6.f32[0];
      }
      v17 = 0;
      if ((unint64_t)((char *)v16 - (char *)v14) < 0x20)
        goto LABEL_58;
      if ((unint64_t)((char *)v16 - (char *)v15) < 0x20)
        goto LABEL_58;
      v17 = a4 & 0xFFFFFFF8;
      v73 = v14 + 1;
      v74 = v15 + 1;
      v75 = v16 + 1;
      a6 = (float32x4_t)vdupq_n_s32(0x3EC6ECC0u);
      v76 = (float32x4_t)vdupq_n_s32(0x3F2AAAE3u);
      v77 = (float32x4_t)vdupq_n_s32(0x3FDBA29Cu);
      v78 = v17;
      do
      {
        v79 = vmulq_f32(vmulq_f32(*v74, vmlsq_f32(v76, *v73, a6)), vaddq_f32(*v73, v77));
        v75[-1] = vmulq_f32(vmulq_f32(v74[-1], vmlsq_f32(v76, v73[-1], a6)), vaddq_f32(v73[-1], v77));
        *v75 = v79;
        v73 += 2;
        v74 += 2;
        v75 += 2;
        v78 -= 8;
      }
      while (v78);
      if (v17 != a4)
        goto LABEL_58;
      return a6.f32[0];
    case 4:
      v18 = (int8x16_t *)*a1;
      *(_DWORD *)*a1 = -971227136;
      if ((int)a4 < 1)
        return a6.f32[0];
      v19 = 0;
      v20 = *a2;
      if (a4 < 8)
        goto LABEL_18;
      if ((unint64_t)((char *)v18 - (char *)v20) < 0x20)
        goto LABEL_18;
      v19 = a4 & 0xFFFFFFF8;
      v21 = v20 + 1;
      v22 = v18 + 1;
      __asm { FMOV            V0.4S, #1.0 }
      v27 = v19;
      do
      {
        v28 = vbicq_s8(_Q0, (int8x16_t)vclezq_f32(*v21));
        v22[-1] = vbicq_s8(_Q0, (int8x16_t)vclezq_f32(v21[-1]));
        *v22 = v28;
        v21 += 2;
        v22 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v19 != a4)
      {
LABEL_18:
        v29 = a4 - v19;
        v30 = v19;
        v31 = (float *)&v18->i32[v19];
        v32 = &v20->f32[v30];
        do
        {
          v33 = *v32++;
          if (v33 > 0.0)
            v34 = 1.0;
          else
            v34 = 0.0;
          *v31++ = v34;
          --v29;
        }
        while (v29);
      }
      v35 = (float32x4_t *)*a3;
      if (a4 < 8
        || (v18 < (int8x16_t *)&v35->f32[a4] ? (_CF = v35 >= (float32x4_t *)((char *)v18 + 4 * a4)) : (_CF = 1), !_CF))
      {
        v37 = 0;
LABEL_34:
        v42 = a4 - v37;
        v43 = v37;
        v44 = &v35->f32[v43];
        v45 = (float *)&v18->i32[v43];
        do
        {
          v46 = *v44++;
          a6.f32[0] = v46 * *v45;
          *v45++ = a6.f32[0];
          --v42;
        }
        while (v42);
        return a6.f32[0];
      }
      v37 = a4 & 0xFFFFFFF8;
      v38 = (float32x4_t *)&v18[1];
      v39 = v35 + 1;
      v40 = v37;
      do
      {
        a6 = vmulq_f32(v39[-1], v38[-1]);
        v41 = vmulq_f32(*v39, *v38);
        v38[-1] = a6;
        *v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 8;
      }
      while (v40);
      if (v37 != a4)
        goto LABEL_34;
      return a6.f32[0];
    default:
      return a6.f32[0];
  }
}

_QWORD *sub_19C10B95C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  *a1 = &unk_1E3D20BE8;
  sub_19C1093F0((uint64_t)a1);
  v2 = a1[53];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    a1[53] = 0;
  }
  sub_19C22CB78((uint64_t)(a1 + 54));
  v3 = (void *)a1[48];
  if (v3)
  {
    a1[49] = v3;
    operator delete(v3);
  }
  v4 = a1[45];
  if (v4)
  {
    v5 = a1[46];
    v6 = (void *)a1[45];
    if (v5 != v4)
    {
      v7 = a1[46];
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)a1[45];
    }
    a1[46] = v4;
    operator delete(v6);
  }
  v10 = (void *)a1[42];
  if (v10)
  {
    a1[43] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[39];
  if (v11)
  {
    a1[40] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[36];
  if (v12)
  {
    a1[37] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[33];
  if (v13)
  {
    a1[34] = v13;
    operator delete(v13);
  }
  sub_19C101AC4(a1 + 18);
  v14 = (void *)a1[9];
  if (v14)
  {
    a1[10] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[6];
  if (v15)
  {
    a1[7] = v15;
    operator delete(v15);
  }
  *a1 = &unk_1E3D1E2D8;
  v16 = (void *)a1[1];
  if (v16)
  {
    a1[2] = v16;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_19C10BA9C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_1E3D20580;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v5 = (const void *)*a2;
  v4 = a2[1];
  v6 = v4 - *a2;
  if (v4 == *a2)
  {
    *(_BYTE *)(a1 + 41) = 0;
  }
  else
  {
    if (v6 < 0)
      sub_19C07DA0C();
    v7 = (char *)operator new(v4 - *a2);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 64) = v8;
    memcpy(v7, v5, v6);
    v9 = 0;
    *(_QWORD *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 41) = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v7[8 * v9] + 192))(*(_QWORD *)&v7[8 * v9]);
      ++v9;
      v7 = *(char **)(a1 + 48);
    }
    while (v9 < (uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v7) >> 3);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(*(_QWORD *)*a2 + 40);
  return a1;
}

void sub_19C10BB88(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
    *v1 = &unk_1E3D1E2D8;
    v5 = (void *)v1[1];
    if (!v5)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    *v1 = &unk_1E3D1E2D8;
    v5 = (void *)v1[1];
    if (!v5)
      goto LABEL_3;
  }
  v1[2] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C10BBE8(uint64_t a1)
{
  return (****(uint64_t (*****)(_QWORD))(a1 + 48))(**(_QWORD **)(a1 + 48));
}

uint64_t sub_19C10BBFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 48) + 8))(**(_QWORD **)(a1 + 48));
}

uint64_t sub_19C10BC10(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) - 8) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8));
}

uint64_t sub_19C10BC24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 48) + 24))(**(_QWORD **)(a1 + 48));
}

uint64_t sub_19C10BC38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) - 8) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8));
}

uint64_t sub_19C10BC4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) - 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8));
}

uint64_t sub_19C10BC60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) - 8) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8));
}

uint64_t sub_19C10BC74(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 56))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *(_QWORD *)(a1 + 48);
  }
  while (v3 < (*(_QWORD *)(a1 + 56) - v1) >> 3);
  return result;
}

uint64_t sub_19C10BCD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 64))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 48);
    }
    while (v9 < (*(_QWORD *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19C10BD50(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v5)
  {
    v10 = result;
    v11 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11) + 72))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *(_QWORD *)(v10 + 48);
    }
    while (v11 < (*(_QWORD *)(v10 + 56) - v5) >> 3);
  }
  return result;
}

uint64_t sub_19C10BDD0(uint64_t result, void *lpsrc, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v3)
  {
    v6 = result;
    if (lpsrc)
    {
      v7 = 0;
      do
      {
        v8 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
        v9 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * v7) + 80))(*(_QWORD *)(v3 + 8 * v7), *(_QWORD *)(v8[6] + 8 * v7), *(_QWORD *)(v9[6] + 8 * v7));
        ++v7;
        v3 = *(_QWORD *)(v6 + 48);
      }
      while (v7 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
    }
    else
    {
      v10 = 0;
      do
      {
        v11 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * v10) + 80))(*(_QWORD *)(v3 + 8 * v10), *(_QWORD *)(MEMORY[0x30] + 8 * v10), *(_QWORD *)(v11[6] + 8 * v10));
        ++v10;
        v3 = *(_QWORD *)(v6 + 48);
      }
      while (v10 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
    }
  }
  return result;
}

uint64_t sub_19C10BF04(uint64_t result, void *lpsrc, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v3)
  {
    v6 = result;
    if (lpsrc)
    {
      v7 = 0;
      do
      {
        v8 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
        v9 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * v7) + 88))(*(_QWORD *)(v3 + 8 * v7), *(_QWORD *)(v8[6] + 8 * v7), *(_QWORD *)(v9[6] + 8 * v7));
        ++v7;
        v3 = *(_QWORD *)(v6 + 48);
      }
      while (v7 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
    }
    else
    {
      v10 = 0;
      do
      {
        v11 = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * v10) + 88))(*(_QWORD *)(v3 + 8 * v10), *(_QWORD *)(MEMORY[0x30] + 8 * v10), *(_QWORD *)(v11[6] + 8 * v10));
        ++v10;
        v3 = *(_QWORD *)(v6 + 48);
      }
      while (v10 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
    }
  }
  return result;
}

uint64_t sub_19C10C038(uint64_t result, void *lpsrc)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      v6 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * v5) + 96))(*(_QWORD *)(v2 + 8 * v5), *(_QWORD *)(v6[6] + 8 * v5));
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C10C0D0(uint64_t result, void *lpsrc)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      v6 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8 * v5) + 104))(*(_QWORD *)(v2 + 8 * v5), *(_QWORD *)(v6[6] + 8 * v5));
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C10C168(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 112))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C10C1C8(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float))(**(_QWORD **)(v2 + 8 * v5) + 120))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C10C228(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 128))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C10C288(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 136))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 48);
    }
    while (v9 < (*(_QWORD *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19C10C300(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v4)
  {
    v8 = result;
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v4 + 8 * v9) + 144))(*(_QWORD *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      v4 = *(_QWORD *)(v8 + 48);
    }
    while (v9 < (*(_QWORD *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t sub_19C10C378(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v3)
  {
    v6 = result;
    v7 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 8 * v7) + 152))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      ++v7;
      v3 = *(_QWORD *)(v6 + 48);
    }
    while (v7 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
  }
  return result;
}

uint64_t sub_19C10C3E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 160))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19C10C430(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 168))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C10C490(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 176))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C10C4F0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 184))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19C10C540(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 192))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19C10C590(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 200))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19C10C5E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v1)
  {
    v2 = result;
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 208))(*(_QWORD *)(v1 + 8 * v3));
      ++v3;
      v1 = *(_QWORD *)(v2 + 48);
    }
    while (v3 < (*(_QWORD *)(v2 + 56) - v1) >> 3);
  }
  return result;
}

uint64_t sub_19C10C630(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 48) + 264))(**(_QWORD **)(a1 + 48));
}

uint64_t sub_19C10C644(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) - 8) + 272))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8));
}

uint64_t sub_19C10C658(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8 * v5) + 280))(*(_QWORD *)(v2 + 8 * v5), a2);
      ++v5;
      v2 = *(_QWORD *)(v4 + 48);
    }
    while (v5 < (*(_QWORD *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t sub_19C10C6B8(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 56) != v3)
  {
    v6 = result;
    v7 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD, float, float))(**(_QWORD **)(v3 + 8 * v7) + 288))(*(_QWORD *)(v3 + 8 * v7), a2, a3);
      ++v7;
      v3 = *(_QWORD *)(v6 + 48);
    }
    while (v7 < (*(_QWORD *)(v6 + 56) - v3) >> 3);
  }
  return result;
}

uint64_t sub_19C10C720(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(result + 48);
  v6 = (unint64_t)(*(_QWORD *)(result + 56) - v5) >> 3;
  v7 = (v6 - 1);
  if ((int)v6 - 1 >= 0)
  {
    v11 = result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8 * v7) + 296))(*(_QWORD *)(v5 + 8 * v7));
    if ((_DWORD)v7)
    {
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7 - 8);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 296))(v14, a2, a3, v13, a5);
      }
      while (v7-- > 1);
    }
  }
  return result;
}

uint64_t sub_19C10C7C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v7 = *(_QWORD **)(result + 48);
  if (*(_QWORD **)(result + 56) != v7)
  {
    v13 = result;
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 304))(*v7);
    v14 = *(_QWORD *)(v13 + 48);
    if ((unint64_t)(*(_QWORD *)(v13 + 56) - v14) >= 9)
    {
      v15 = 0;
      do
      {
        v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 8 * v15) + 32))(*(_QWORD *)(v14 + 8 * v15));
        v17 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v15 + 8);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 304))(v17, v16, a3, a4, a5, a6, a7);
        v14 = *(_QWORD *)(v13 + 48);
        v18 = v15 + 2;
        ++v15;
      }
      while (v18 < (*(_QWORD *)(v13 + 56) - v14) >> 3);
    }
  }
  return result;
}

uint64_t sub_19C10C89C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = *(_QWORD **)(result + 48);
  if (*(_QWORD **)(result + 56) != v6)
  {
    v11 = result;
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 312))(*v6);
    v12 = *(_QWORD *)(v11 + 48);
    if ((unint64_t)(*(_QWORD *)(v11 + 56) - v12) >= 9)
    {
      v13 = 0;
      do
      {
        v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 8 * v13) + 32))(*(_QWORD *)(v12 + 8 * v13));
        v15 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v13 + 8);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 312))(v15, v14, a3, a4, a5, a6);
        v12 = *(_QWORD *)(v11 + 48);
        v16 = v13 + 2;
        ++v13;
      }
      while (v16 < (*(_QWORD *)(v11 + 56) - v12) >> 3);
    }
  }
  return result;
}

uint64_t sub_19C10C968(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(result + 48);
  v6 = (unint64_t)(*(_QWORD *)(result + 56) - v5) >> 3;
  v7 = (v6 - 1);
  if ((int)v6 - 1 >= 0)
  {
    v11 = result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8 * v7) + 320))(*(_QWORD *)(v5 + 8 * v7));
    if ((_DWORD)v7)
    {
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
        v14 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7 - 8);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 320))(v14, a2, a3, v13, a5);
      }
      while (v7-- > 1);
    }
  }
  return result;
}

void *sub_19C10CA10(uint64_t a1, void *lpsrc)
{
  void *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
  if (!result)
    __cxa_bad_cast();
  v4 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v4)
  {
    v5 = (uint64_t)result;
    v6 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 8 * v6) + 328))(*(_QWORD *)(v4 + 8 * v6), *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v6));
      ++v6;
      v4 = *(_QWORD *)(a1 + 48);
    }
    while (v6 < (*(_QWORD *)(a1 + 56) - v4) >> 3);
  }
  return result;
}

void *sub_19C10CAA0(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  void *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1D0B8, 0);
  if (!result)
    __cxa_bad_cast();
  v11 = (uint64_t)result;
  if (*(float *)(a1 + 32) != a4)
    *(float *)(a1 + 32) = a4;
  if (*((float *)lpsrc + 8) != a4)
    *((float *)lpsrc + 8) = a4;
  v12 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 56) != v12)
  {
    v13 = 0;
    do
    {
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, float, float))(**(_QWORD **)(v12 + 8 * v13)
                                                                                        + 336))(*(_QWORD *)(v12 + 8 * v13), *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v13), a3, a4, a5);
      ++v13;
      v12 = *(_QWORD *)(a1 + 48);
    }
    while (v13 < (*(_QWORD *)(a1 + 56) - v12) >> 3);
  }
  return result;
}

uint64_t sub_19C10CB70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) - 8) + 344))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8));
}

uint64_t sub_19C10CB84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) - 8) + 352))(*(_QWORD *)(*(_QWORD *)(a1 + 56) - 8));
}

_QWORD *sub_19C10CB98(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  *a1 = &unk_1E3D20580;
  v4 = a1 + 6;
  v2 = (_QWORD *)a1[6];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v6 + 368))(v2[v5]);
        v2 = (_QWORD *)a1[6];
        v3 = (_QWORD *)a1[7];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1E3D1E2D8;
  v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_19C10CC3C(char *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)__p = &unk_1E3D20580;
  v4 = __p + 48;
  v2 = (_QWORD *)*((_QWORD *)__p + 6);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v6 + 368))(v2[v5]);
        v2 = (_QWORD *)*((_QWORD *)__p + 6);
        v3 = (_QWORD *)*((_QWORD *)__p + 7);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    *((_QWORD *)__p + 7) = v2;
    operator delete(v2);
  }
  *(_QWORD *)__p = &unk_1E3D1E2D8;
  v7 = (void *)*((_QWORD *)__p + 1);
  if (v7)
  {
    *((_QWORD *)__p + 2) = v7;
    operator delete(v7);
  }
  operator delete(__p);
}

uint64_t sub_19C10CCE0(uint64_t a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8, uint64_t a9)
{
  void *__p;
  __int128 v17;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1E7C8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  sub_19C22CB44(a1 + 296);
  *(_DWORD *)(a1 + 368) = a5;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(_QWORD *)(a1 + 240) = a9;
  *(_BYTE *)(a1 + 40) = a8;
  *(_BYTE *)(a1 + 60) = a6;
  *(_BYTE *)(a1 + 61) = a7;
  __p = operator new(0x20uLL);
  v17 = xmmword_19C2775A0;
  strcpy((char *)__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  return a1;
}

void sub_19C10CE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a15 < 0)
    operator delete(__p);
  sub_19C22CB78(v16);
  v19 = (void *)v15[34];
  if (v19)
  {
    v15[35] = v19;
    operator delete(v19);
    v20 = *v17;
    if (!*v17)
    {
LABEL_5:
      v21 = (void *)v15[23];
      if (!v21)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else
  {
    v20 = *v17;
    if (!*v17)
      goto LABEL_5;
  }
  v15[32] = v20;
  operator delete(v20);
  v21 = (void *)v15[23];
  if (!v21)
  {
LABEL_6:
    v22 = (void *)v15[20];
    if (!v22)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v15[24] = v21;
  operator delete(v21);
  v22 = (void *)v15[20];
  if (!v22)
  {
LABEL_7:
    v23 = (void *)v15[17];
    if (!v23)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v15[21] = v22;
  operator delete(v22);
  v23 = (void *)v15[17];
  if (!v23)
  {
LABEL_8:
    v24 = (void *)v15[14];
    if (!v24)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v15[18] = v23;
  operator delete(v23);
  v24 = (void *)v15[14];
  if (!v24)
  {
LABEL_9:
    v25 = (void *)v15[11];
    if (!v25)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v15[15] = v24;
  operator delete(v24);
  v25 = (void *)v15[11];
  if (!v25)
  {
LABEL_10:
    *v15 = &unk_1E3D1E2D8;
    v26 = (void *)v15[1];
    if (!v26)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v15[12] = v25;
  operator delete(v25);
  *v15 = &unk_1E3D1E2D8;
  v26 = (void *)v15[1];
  if (!v26)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_19:
  v15[2] = v26;
  operator delete(v26);
  _Unwind_Resume(a1);
}

void sub_19C10CF3C()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C10CF4C(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_19C10CF54(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_19C10CF5C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t sub_19C10CF68(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_19C10CF70()
{
  return 0;
}

_BYTE *sub_19C10CF78(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;

  if (!a2)
LABEL_15:
    sub_19C2210D4(3);
  v6 = *(_DWORD *)(a2 + 72);
  v7 = *(_QWORD *)a2;
  v8 = (int *)(*(_QWORD *)a2 + v6);
  v9 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8) - 4;
  if ((unint64_t)v8 > v9)
  {
    v10 = 0;
    v11 = (int *)(v7 + v6);
    if ((unint64_t)v11 <= v9)
      goto LABEL_4;
LABEL_7:
    v12 = 0;
    if (a4 < 1)
      goto LABEL_12;
    goto LABEL_8;
  }
  v10 = *v8;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  v11 = (int *)(v7 + v6);
  if ((unint64_t)v11 > v9)
    goto LABEL_7;
LABEL_4:
  v12 = *v11;
  v6 += 4;
  *(_DWORD *)(a2 + 72) = v6;
  if (a4 < 1)
    goto LABEL_12;
LABEL_8:
  v13 = (int *)(v7 + v6);
  if ((unint64_t)v13 <= v9)
  {
    v14 = *v13;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)(a1 + 208) = v14;
LABEL_12:
  if (*(_DWORD *)(a1 + 48) != v10 || *(_DWORD *)(a1 + 52) != v12)
    goto LABEL_15;
  v15 = *(_BYTE **)(a1 + 376);
  v16 = *a3;
  v17 = *(unsigned __int8 *)(a1 + 61);
  v18 = sub_19C2210AC();
  return sub_19C101DB0(v15, (uint64_t *)a2, v16, v17, v18, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

void sub_19C10D08C(uint64_t a1, FILE *__stream, int *a3, int a4, unsigned int a5)
{
  int v10;
  int16x4_t **v11;
  int v12;

  if (!__stream)
    sub_19C2210D4(3);
  v10 = *(_DWORD *)(a1 + 52);
  sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 48));
  sub_19C2213B0(__stream, a3, v10);
  if (a4 >= 1)
    sub_19C2213B0(__stream, a3, *(_DWORD *)(a1 + 208));
  v11 = *(int16x4_t ***)(a1 + 376);
  v12 = sub_19C2210AC();
  sub_19C102074(v11, __stream, a3, 3, v12, a5, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

_QWORD *sub_19C10D134(uint64_t a1, void *lpsrc, const void *a3)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  int16x8_t *v8;
  int16x8_t *v9;
  int16x8_t *v10;
  uint64_t v11;
  int16x8_t *v12;
  int16x8_t *v13;
  int16x8_t *v14;
  uint64_t v15;
  int16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  __int16 *v20;
  __int16 *v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;

  if (lpsrc)
  {
    v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE68, 0);
    if (a3)
      goto LABEL_3;
LABEL_6:
    result = 0;
    v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v7 < 1)
      return result;
    goto LABEL_7;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_6;
LABEL_3:
  result = __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE68, 0);
  v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v7 < 1)
    return result;
LABEL_7:
  v8 = (int16x8_t *)result[8];
  v9 = (int16x8_t *)v5[8];
  v10 = **(int16x8_t ***)(a1 + 376);
  if (v7 < 0x10)
  {
    v11 = 0;
LABEL_14:
    v17 = v7 - v11;
    v18 = v11;
    v19 = &v10->i16[v18];
    v20 = &v9->i16[v18];
    v21 = &v8->i16[v18];
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = *v20++;
      *v19++ = v22 - v24;
      --v17;
    }
    while (v17);
    return result;
  }
  v11 = 0;
  if ((unint64_t)((char *)v10 - (char *)v8) < 0x20)
    goto LABEL_14;
  if ((unint64_t)((char *)v10 - (char *)v9) < 0x20)
    goto LABEL_14;
  v11 = v7 & 0x7FFFFFF0;
  v12 = v8 + 1;
  v13 = v9 + 1;
  v14 = v10 + 1;
  v15 = v7 & 0xFFFFFFF0;
  do
  {
    v16 = vsubq_s16(*v12, *v13);
    v14[-1] = vsubq_s16(v12[-1], v13[-1]);
    *v14 = v16;
    v12 += 2;
    v13 += 2;
    v14 += 2;
    v15 -= 16;
  }
  while (v15);
  if (v11 != v7)
    goto LABEL_14;
  return result;
}

void *sub_19C10D280(int a1, void *lpsrc, const void *a3)
{
  void *result;

  if (lpsrc)
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE68, 0);
  if (a3)
    return __dynamic_cast(a3, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE68, 0);
  return result;
}

_QWORD *sub_19C10D2E8(uint64_t a1, void *lpsrc)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int16x8_t *v9;
  int16x8_t *v10;
  uint64_t v11;
  int16x8_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  _WORD *v16;
  __int16 v17;

  if (lpsrc)
  {
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE68, 0);
    v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v4 < 1)
      return result;
  }
  else
  {
    result = 0;
    v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
    if ((int)v4 < 1)
      return result;
  }
  v5 = **(_QWORD **)(a1 + 376);
  v6 = result[8];
  if (v4 < 0x10 || (v5 < v6 + 2 * v4 ? (v7 = v6 >= v5 + 2 * v4) : (v7 = 1), !v7))
  {
    v8 = 0;
LABEL_16:
    v13 = v4 - v8;
    v14 = 2 * v8;
    v15 = (__int16 *)(v6 + v14);
    v16 = (_WORD *)(v5 + v14);
    do
    {
      v17 = *v15++;
      *v16++ += v17;
      --v13;
    }
    while (v13);
    return result;
  }
  v8 = v4 & 0x7FFFFFF0;
  v9 = (int16x8_t *)(v5 + 16);
  v10 = (int16x8_t *)(v6 + 16);
  v11 = v4 & 0xFFFFFFF0;
  do
  {
    v12 = vaddq_s16(*v10, *v9);
    v9[-1] = vaddq_s16(v10[-1], v9[-1]);
    *v9 = v12;
    v9 += 2;
    v10 += 2;
    v11 -= 16;
  }
  while (v11);
  if (v8 != v4)
    goto LABEL_16;
  return result;
}

void sub_19C10D3F4(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v4 = (_QWORD *)operator new();
  v5 = *(unsigned int *)(a1 + 48);
  v6 = (void *)operator new[]();
  *v4 = v6;
  if ((int)v5 >= 1)
    bzero(v6, 4 * v5);
  v7 = *(_DWORD *)(a1 + 48);
  v9 = a2[1];
  v8 = (unint64_t)a2[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = *a2;
    v12 = (v9 - *a2) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_19C07DA0C();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        sub_19C07C7FC();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    *(_DWORD *)v17 = v7;
    *((_QWORD *)v17 + 1) = v4;
    v10 = v17 + 16;
    if (v9 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
        v17 -= 16;
        v9 -= 16;
      }
      while (v9 != v11);
      v9 = *a2;
    }
    *a2 = v17;
    a2[1] = v10;
    a2[2] = &v16[16 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v9 = v7;
    *((_QWORD *)v9 + 1) = v4;
    v10 = v9 + 16;
  }
  a2[1] = v10;
}

void sub_19C10D568(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19C10D57C(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *result;

  v5 = *(int *)(a1 + 48);
  v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(_QWORD *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void *sub_19C10D5DC(uint64_t a1, _QWORD *a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *a4;
  *a4 = v5 + 1;
  return memmove(*(void **)(v4 + 8 * a3), **(const void ***)(*a2 + 16 * v5 + 8), 4 * *(int *)(a1 + 48));
}

void sub_19C10D610(uint64_t a1, _QWORD *a2, int *a3)
{
  int *v4;

  v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

void sub_19C10D65C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v3 = **(_QWORD **)(a1 + 376);
  v5 = *(_DWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)a2;
    v10 = (uint64_t)v7 - *(_QWORD *)a2;
    v11 = (v10 >> 4) + 1;
    if (v11 >> 60)
      sub_19C07DA0C();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14 >> 60)
      sub_19C07C7FC();
    v15 = 16 * v14;
    v16 = (char *)operator new(16 * v14);
    v17 = &v16[16 * (v10 >> 4)];
    v18 = &v16[v15];
    *(_QWORD *)v17 = v3;
    v8 = v17 + 16;
    v19 = &v16[v10];
    *((_DWORD *)v19 + 2) = v5;
    for (*((_DWORD *)v19 + 3) = v4; v7 != v9; *((_QWORD *)v17 + 1) = v7[1])
    {
      v20 = *(v7 - 2);
      v7 -= 2;
      *((_QWORD *)v17 - 2) = v20;
      v17 -= 16;
    }
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v18;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = v3;
    v8 = v7 + 2;
    *((_DWORD *)v7 + 2) = v5;
    *((_DWORD *)v7 + 3) = v4;
  }
  *(_QWORD *)(a2 + 8) = v8;
}

uint64_t sub_19C10D768(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(a2 + 8) = v2 - 16;
  *(_QWORD *)(a1 + 64) = v3;
  result = a1 + 64;
  *(_QWORD *)(result + 312) = result;
  return result;
}

uint64_t sub_19C10D780(uint64_t result)
{
  *(_BYTE *)(result + 42) = 1;
  return result;
}

uint64_t sub_19C10D78C(uint64_t result)
{
  *(_BYTE *)(result + 42) = 0;
  return result;
}

void sub_19C10D794(uint64_t a1)
{
  void *__p;
  __int128 v3;

  __p = operator new(0x20uLL);
  v3 = xmmword_19C277570;
  strcpy((char *)__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, _QWORD, float))(*(_QWORD *)a1 + 392))(a1, &__p, 0, -0.44);
  if (SHIBYTE(v3) < 0)
    operator delete(__p);
}

void sub_19C10D830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C10D84C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;

  v2 = a1[31];
  v3 = a1[32];
  if (v3 == v2)
  {
    v2 = a1[32];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[31];
        v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = a1[34];
  v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[34];
        v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
  }
}

uint64_t sub_19C10D8FC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_19C10D90C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C10D918(uint64_t result, float a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  int16x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float *v14;
  unsigned __int16 *v15;
  float v16;

  v3 = *(unsigned int *)(result + 56);
  if ((int)v3 >= 1)
  {
    v4 = *(_QWORD *)(result + 64);
    v5 = *(_QWORD *)(result + 80);
    v6 = truncf(a2);
    if (v3 < 8)
    {
      v7 = 0;
LABEL_7:
      v13 = v3 - v7;
      v14 = (float *)(v5 + 4 * v7);
      v15 = (unsigned __int16 *)(v4 + 2 * v7);
      do
      {
        a3.n128_u16[0] = *v15;
        a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
        v16 = *v14++;
        a3.n128_f32[0] = (float)a3.n128_i32[0] + (float)(v16 * v6);
        *v15++ = (int)a3.n128_f32[0];
        --v13;
      }
      while (v13);
      return result;
    }
    v7 = v3 & 0x7FFFFFF8;
    v8 = v3 & 0xFFFFFFF8;
    v9 = *(float32x4_t **)(result + 80);
    v10 = *(int16x4_t **)(result + 64);
    do
    {
      v11 = *v9;
      v12 = v9[1];
      v9 += 2;
      a3 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v10)), v11, v6)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v10->i8)), v12, v6)));
      *(__n128 *)v10->i8 = a3;
      v10 += 2;
      v8 -= 8;
    }
    while (v8);
    if (v7 != v3)
      goto LABEL_7;
  }
  return result;
}

void sub_19C10D9C4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  char v8;
  float32x4_t v9;
  int v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  NSObject *global_queue;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  _QWORD v26[7];
  int v27;

  v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (a5 >= 1 && (v8 & 1) == 0)
  {
    v10 = a5 - 1;
    do
    {
      if (*(_BYTE *)(a1 + 232))
        v12 = a5 - 1 - v10;
      else
        v12 = v10;
      v13 = 8 * v12;
      sub_19C10B530((void **)(a1 + 216), (float32x4_t **)(*(_QWORD *)(a1 + 184) + v13), (const void **)(*a4 + v13), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208), v9);
      sub_19C1032B4((void **)(*(_QWORD *)(a1 + 136) + v13), (uint64_t *)(a1 + 216), *(__int16 ***)(a1 + 376), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 0.0);
      v14 = *(unsigned int *)(a1 + 52);
      if ((int)v14 >= 1)
      {
        v15 = *(float **)(*(_QWORD *)(a1 + 136) + 8 * v12);
        do
        {
          v9.i32[0] = -1035468800;
          if (*v15 < -50.0 || (v9.i32[0] = 1112014848, *v15 > 50.0))
            *v15 = v9.f32[0];
          ++v15;
          --v14;
        }
        while (v14);
      }
    }
    while (v10-- > 0);
  }
  bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
  if (a5 >= 1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v17 = 0;
    v18 = MEMORY[0x1E0C809B0];
    do
    {
      --a5;
      if (*(_BYTE *)(a1 + 232))
        v19 = v17;
      else
        v19 = a5;
      v20 = 8 * v19;
      v21 = *(_QWORD *)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 88) + v20;
      v23 = *a4 + v20;
      v24 = *(_DWORD *)(a1 + 52);
      v25 = *(int *)(a1 + 48);
      v26[0] = v18;
      v26[1] = 0x40000000;
      v26[2] = sub_19C103680;
      v26[3] = &unk_1E3D25490;
      v27 = v24;
      v26[4] = v21;
      v26[5] = v23;
      v26[6] = v22;
      dispatch_apply(v25, global_queue, v26);
      if (*(_BYTE *)(a1 + 40))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v19) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      ++v17;
    }
    while (a5 > 0);
  }
}

uint64_t sub_19C10DBC8(uint64_t result, _QWORD *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  _BOOL4 v6;
  int v7;
  int v8;
  unsigned int v9;
  signed int v11;
  _BOOL4 v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int *v39;
  int v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  _BOOL4 v46;

  v5 = *(_QWORD *)(result + 240);
  if (v5)
  {
    if (*(_BYTE *)(v5 + 20) || *(_DWORD *)(v5 + 40) != 1)
    {
      v6 = 0;
      v7 = *(unsigned __int8 *)(result + 232);
      if (!a5)
        goto LABEL_10;
    }
    else
    {
      v6 = *(_DWORD *)(v5 + 44) == 1;
      v7 = *(unsigned __int8 *)(result + 232);
      if (!a5)
        goto LABEL_10;
    }
  }
  else
  {
    v6 = 1;
    v7 = *(unsigned __int8 *)(result + 232);
    if (!a5)
      goto LABEL_10;
  }
  if (v7)
    sub_19C2210D4(34);
LABEL_10:
  v8 = a4 & 0xFFFFFF;
  v9 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v9)
  {
    v46 = v6;
    if (v7)
      v11 = v8 + ~v9;
    else
      v11 = a5 != 0;
    v12 = v11 < v8 - 1;
    if (v7)
      v13 = 1;
    else
      v13 = -1;
    if (v7)
      v14 = v12;
    else
      v14 = a5 != 0;
    v15 = 8 * v11;
    v16 = result;
    bzero(*(void **)(*(_QWORD *)(result + 88) + v15), 4 * *(int *)(result + 52));
    v17 = (uint64_t *)(*(_QWORD *)(v16 + 88) + v15);
    v18 = *(unsigned int *)(v16 + 44);
    if ((int)v18 >= 1)
    {
      v19 = 0;
      v20 = *(_QWORD *)(*a2 + 8 * v11);
      v21 = *v17;
      if (v18 < 8)
        goto LABEL_28;
      if ((unint64_t)(v21 - v20) < 0x20)
        goto LABEL_28;
      v19 = v18 & 0x7FFFFFF8;
      v22 = (__int128 *)(v20 + 16);
      v23 = (_OWORD *)(v21 + 16);
      v24 = v18 & 0xFFFFFFF8;
      do
      {
        v25 = *v22;
        *(v23 - 1) = *(v22 - 1);
        *v23 = v25;
        v22 += 2;
        v23 += 2;
        v24 -= 8;
      }
      while (v24);
      if (v19 != v18)
      {
LABEL_28:
        v26 = v18 - v19;
        v27 = 4 * v19;
        v28 = (_DWORD *)(v21 + 4 * v19);
        v29 = (int *)(v20 + v27);
        do
        {
          v30 = *v29++;
          *v28++ = v30;
          --v26;
        }
        while (v26);
      }
    }
    v31 = v11 + v13;
    if (v46 && v14)
    {
      v32 = *(unsigned int *)(v16 + 48);
      if ((int)v32 >= 1)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v16 + 112) + 8 * v31);
        v34 = *v17;
        if (v32 < 8 || (v35 = 4 * (int)v18 + v34, (unint64_t)(v35 - v33) < 0x20))
        {
          v36 = 0;
LABEL_35:
          v37 = v32 - v36;
          v38 = (_DWORD *)(v34 + 4 * (v36 + (int)v18));
          v39 = (int *)(v33 + 4 * v36);
          do
          {
            v40 = *v39++;
            *v38++ = v40;
            --v37;
          }
          while (v37);
          goto LABEL_37;
        }
        v36 = v32 & 0x7FFFFFF8;
        v42 = (__int128 *)(v33 + 16);
        v43 = (_OWORD *)(v35 + 16);
        v44 = v32 & 0xFFFFFFF8;
        do
        {
          v45 = *v42;
          *(v43 - 1) = *(v42 - 1);
          *v43 = v45;
          v42 += 2;
          v43 += 2;
          v44 -= 8;
        }
        while (v44);
        if (v36 != v32)
          goto LABEL_35;
      }
    }
LABEL_37:
    v41 = *(int *)(v16 + 52);
    if (*(_BYTE *)(v16 + 40))
      *(_DWORD *)(*v17 + 4 * v41 - 4) = 1065353216;
    sub_19C1032B4((void **)(v16 + 216), v17, *(__int16 ***)(v16 + 376), *(_DWORD *)(v16 + 48), v41, 0.0);
    if (!v46 && v14)
      sub_19C1032B4((void **)(v16 + 216), (uint64_t *)(*(_QWORD *)(v16 + 112) + 8 * v31), *(__int16 ***)(v16 + 384), *(_DWORD *)(v16 + 48), *(_DWORD *)(v16 + 48), 1.0);
    sub_19C2210D4(76);
  }
  return result;
}

char *sub_19C10DE80(uint64_t a1, void *lpsrc)
{
  char *result;

  if (*(_DWORD *)(a1 + 368) != 1)
    sub_19C2210D4(1);
  result = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE68, 0);
  if (!result)
    __cxa_bad_cast();
  *(_QWORD *)(a1 + 376) = result + 64;
  return result;
}

uint64_t sub_19C10DEE0(uint64_t a1, void *lpsrc, float a3)
{
  void *v5;
  void *v6;
  int16x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  int16x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float *v19;
  __int16 *v20;
  float v21;

  if (*(_DWORD *)(a1 + 368))
    sub_19C2210D4(1);
  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E3D1CE18, (const struct __class_type_info *)&unk_1E3D1CE68, 0);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  sub_19C22CBE0(a1 + 296);
  v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *((_QWORD *)v6 + 10);
    v11 = truncf(a3);
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = (float *)(v10 + 4 * v12);
      v20 = (__int16 *)(v9 + 2 * v12);
      do
      {
        v7.i16[0] = *v20;
        v7.i64[0] = vmovl_s16(*(int16x4_t *)v7.i8).u64[0];
        v21 = *v19++;
        *(float *)v7.i32 = (float)v7.i32[0] + (float)(v21 * v11);
        *v20++ = (int)*(float *)v7.i32;
        --v18;
      }
      while (v18);
      return sub_19C22CBE8(a1 + 296);
    }
    v12 = v8 & 0x7FFFFFF8;
    v13 = v8 & 0xFFFFFFF8;
    v14 = (float32x4_t *)*((_QWORD *)v6 + 10);
    v15 = *(int16x4_t **)(a1 + 64);
    do
    {
      v16 = *v14;
      v17 = v14[1];
      v14 += 2;
      v7 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_s16(*v15)), v16, v11)), (int16x8_t)vcvtq_s32_f32(vmlaq_n_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v15->i8)), v17, v11)));
      *(int16x8_t *)v15->i8 = v7;
      v15 += 2;
      v13 -= 8;
    }
    while (v13);
    if (v12 != v8)
      goto LABEL_9;
  }
  return sub_19C22CBE8(a1 + 296);
}

uint64_t sub_19C10E004(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  uint64_t v13;
  float v14;
  float v15;
  int v16;
  uint64_t v17;
  float v18;
  float v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  unint64_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float *v29;
  float *v30;
  float *v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;

  v5 = (a4 - 1);
  if (a4 >= 1)
  {
    v6 = *(unsigned int *)(result + 48);
    if ((int)v6 >= 1)
    {
      v7 = *(_QWORD *)(result + 112);
      v8 = *a2;
      v9 = *a3;
      v10 = *a5;
      do
      {
        if ((int)v6 >= 1)
        {
          v12 = 0;
          v13 = 0;
          v14 = 1.1755e-38;
          do
          {
            v15 = *(float *)(*(_QWORD *)(v7 + 8 * v5) + 4 * v13);
            if (v15 > v14)
              v12 = v13;
            v14 = fmaxf(v15, v14);
            ++v13;
          }
          while (v6 != v13);
          v16 = 0;
          v17 = 0;
          v18 = 1.1755e-38;
          do
          {
            v19 = *(float *)(*(_QWORD *)(v8 + 8 * v5) + 4 * v17);
            if (v19 > v18)
              v16 = v17;
            v18 = fmaxf(v19, v18);
            ++v17;
          }
          while (v6 != v17);
          if (v12 == v16)
          {
            v6 = v6;
          }
          else
          {
            *a5 = ++v10;
            v6 = *(unsigned int *)(result + 48);
            if ((int)v6 < 1)
              continue;
          }
          v20 = *(float32x4_t **)(v8 + 8 * v5);
          v21 = *(float32x4_t **)(v7 + 8 * v5);
          v22 = *(float32x4_t **)(v9 + 8 * v5);
          if (v6 >= 8)
          {
            v23 = 0;
            if ((unint64_t)((char *)v22 - (char *)v20) >= 0x20
              && (unint64_t)((char *)v22 - (char *)v21) >= 0x20)
            {
              v23 = v6 & 0x7FFFFFF8;
              v24 = v20 + 1;
              v25 = v21 + 1;
              v26 = v22 + 1;
              v27 = v6 & 0xFFFFFFF8;
              do
              {
                v28 = vsubq_f32(*v24, *v25);
                v26[-1] = vsubq_f32(v24[-1], v25[-1]);
                *v26 = v28;
                v24 += 2;
                v25 += 2;
                v26 += 2;
                v27 -= 8;
              }
              while (v27);
              if (v23 == v6)
                continue;
            }
          }
          else
          {
            v23 = 0;
          }
          v29 = &v22->f32[v23];
          v30 = &v21->f32[v23];
          v31 = &v20->f32[v23];
          v32 = v6 - v23;
          do
          {
            v33 = *v31++;
            v34 = v33;
            v35 = *v30++;
            *v29++ = v34 - v35;
            --v32;
          }
          while (v32);
        }
      }
      while (v5-- > 0);
    }
  }
  return result;
}

float sub_19C10E184(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  float **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;

  if (a3 < 1)
    return 0.0;
  v3 = *(unsigned int *)(a1 + 48);
  v4 = *(float ***)(a1 + 112);
  v5 = a3;
  if ((int)v3 <= 0)
  {
    v8 = 0.0;
    do
    {
      while (1)
      {
        v14 = **v4;
        if (v14 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v14);
        ++v4;
        if (!--v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v4;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    v8 = 0.0;
    do
    {
      while (1)
      {
        v9 = 0;
        v10 = 0;
        v11 = 1.1755e-38;
        do
        {
          v12 = *(float *)(*(_QWORD *)(v7 + 8 * v6) + 4 * v10);
          if (v12 > v11)
            v9 = v10;
          v11 = fmaxf(v12, v11);
          ++v10;
        }
        while (v3 != v10);
        v13 = v4[v6][v9];
        if (v13 <= 1.0e-10)
          break;
        v8 = v8 - log2f(v13);
        if (++v6 == v5)
          return v8;
      }
      v8 = v8 + 99.0;
      ++v6;
    }
    while (v6 != v5);
  }
  return v8;
}

void sub_19C10E2C4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C10F1F8(a1);
  operator delete(v1);
}

uint64_t sub_19C10E2D8(uint64_t a1)
{
  return a1 + 160;
}

float sub_19C10E2E0(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2) + 4 * a3);
}

void sub_19C10E2F0(uint64_t a1, float a2)
{
  uint64_t v4;
  _BOOL4 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  char **v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  void *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  int v53;
  void *v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _OWORD *v99;
  char *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _OWORD *v122;
  char *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _BYTE *v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _OWORD *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  _OWORD *v168;
  char *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BYTE *v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  _OWORD *v190;
  char *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  __int128 *v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  void *v212;

  v4 = *(_QWORD *)(a1 + 240);
  if (!v4)
  {
    v5 = 1;
    if (!*(_BYTE *)(a1 + 42))
      goto LABEL_24;
LABEL_7:
    v6 = 2;
    v7 = 2;
    v8 = *(unsigned int *)(a1 + 48);
    v9 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)(a1 + 52) = v9;
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_BYTE *)(v4 + 20) || *(_DWORD *)(v4 + 40) != 1)
  {
    v5 = 0;
    if (!*(_BYTE *)(a1 + 42))
      goto LABEL_24;
    goto LABEL_7;
  }
  v5 = *(_DWORD *)(v4 + 44) == 1;
  if (*(_BYTE *)(a1 + 42))
    goto LABEL_7;
LABEL_24:
  v6 = 2 * (*(_BYTE *)(a1 + 232) != 0);
  v7 = 2 * *(unsigned __int8 *)(a1 + 232);
  v8 = *(unsigned int *)(a1 + 48);
  v9 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v9;
  if (v5)
  {
LABEL_8:
    v9 += v8;
    *(_DWORD *)(a1 + 52) = v9;
  }
LABEL_9:
  *(_DWORD *)(a1 + 56) = v8 * v9;
  v10 = (void *)operator new[]();
  v11 = v10;
  if ((int)v8 >= 1)
    bzero(v10, 4 * v8);
  *(_QWORD *)(a1 + 216) = v11;
  v12 = (char **)(a1 + 248);
  v14 = *(char **)(a1 + 256);
  v13 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v14 < v13)
  {
    *(_QWORD *)v14 = v11;
    v15 = (uint64_t)(v14 + 8);
    goto LABEL_36;
  }
  v16 = *v12;
  v17 = v14 - *v12;
  v18 = v17 >> 3;
  v19 = (v17 >> 3) + 1;
  if (v19 >> 61)
    goto LABEL_236;
  v20 = v13 - (_QWORD)v16;
  if (v20 >> 2 > v19)
    v19 = v20 >> 2;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    if (v21 >> 61)
      goto LABEL_237;
    v22 = operator new(8 * v21);
    v23 = &v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v11;
    v15 = (uint64_t)(v23 + 1);
    v25 = (char *)(v14 - v16);
    if (v14 == v16)
      goto LABEL_34;
    goto LABEL_27;
  }
  v22 = 0;
  v23 = (_QWORD *)(8 * v18);
  v24 = 0;
  *(_QWORD *)(8 * v18) = v11;
  v15 = 8 * v18 + 8;
  v25 = (char *)(v14 - v16);
  if (v14 != v16)
  {
LABEL_27:
    v26 = (unint64_t)(v25 - 8);
    if (v26 < 0x58)
      goto LABEL_241;
    if ((unint64_t)(v14 - v22 - v17) < 0x20)
      goto LABEL_241;
    v27 = (v26 >> 3) + 1;
    v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v14[-v28];
    v23 = (_QWORD *)((char *)v23 - v28);
    v30 = &v22[8 * v18 - 16];
    v31 = v14 - 16;
    v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 4;
    }
    while (v32);
    v14 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_241:
      do
      {
        v34 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v23 = v34;
      }
      while (v14 != v16);
    }
    v14 = *v12;
  }
LABEL_34:
  *(_QWORD *)(a1 + 248) = v23;
  *(_QWORD *)(a1 + 256) = v15;
  *(_QWORD *)(a1 + 264) = v24;
  if (v14)
    operator delete(v14);
LABEL_36:
  *(_QWORD *)(a1 + 256) = v15;
  if (!*(_DWORD *)(a1 + 368))
  {
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    v40 = *(_QWORD *)(a1 + 240);
    if (v40 && (v41 = *(_DWORD *)(v40 + 40), v41 >= 1))
    {
      v42 = v40 + 8 * v6;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(v42 + 112);
      *(_QWORD *)(a1 + 376) = a1 + 64;
      if (v41 == 2)
      {
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(v42 + 120);
        *(_QWORD *)(a1 + 384) = a1 + 72;
      }
      if (*(_BYTE *)(v40 + 244))
      {
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(v40 + 8 * v7 + 248);
        *(_QWORD *)(a1 + 392) = a1 + 224;
      }
    }
    else if (*(_BYTE *)(a1 + 61))
    {
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
    else
    {
      v53 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48);
      v212 = (void *)operator new[]();
      bzero(v212, 2 * v53);
      sub_19C100F64(&v212, v53, a2);
      v54 = v212;
      *(_QWORD *)(a1 + 64) = v212;
      v56 = *(char **)(a1 + 280);
      v55 = *(_QWORD *)(a1 + 288);
      if ((unint64_t)v56 >= v55)
      {
        v195 = *(char **)(a1 + 272);
        v196 = (v56 - v195) >> 3;
        v197 = v196 + 1;
        if ((unint64_t)(v196 + 1) >> 61)
          sub_19C07DA0C();
        v198 = v55 - (_QWORD)v195;
        if (v198 >> 2 > v197)
          v197 = v198 >> 2;
        if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8)
          v199 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v199 = v197;
        if (v199)
        {
          if (v199 >> 61)
            goto LABEL_237;
          v200 = (char *)operator new(8 * v199);
        }
        else
        {
          v200 = 0;
        }
        v201 = &v200[8 * v196];
        v202 = &v200[8 * v199];
        *(_QWORD *)v201 = v54;
        v57 = v201 + 8;
        if (v56 != v195)
        {
          v203 = v56 - v195 - 8;
          if (v203 < 0x58)
            goto LABEL_242;
          if ((unint64_t)(v195 - v200) < 0x20)
            goto LABEL_242;
          v204 = (v203 >> 3) + 1;
          v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
          v206 = &v56[-v205];
          v201 -= v205;
          v207 = &v200[8 * v196 - 16];
          v208 = (__int128 *)(v56 - 16);
          v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v210 = *v208;
            *((_OWORD *)v207 - 1) = *(v208 - 1);
            *(_OWORD *)v207 = v210;
            v207 -= 32;
            v208 -= 2;
            v209 -= 4;
          }
          while (v209);
          v56 = v206;
          if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_242:
            do
            {
              v211 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *((_QWORD *)v201 - 1) = v211;
              v201 -= 8;
            }
            while (v56 != v195);
          }
          v56 = *(char **)(a1 + 272);
        }
        *(_QWORD *)(a1 + 272) = v201;
        *(_QWORD *)(a1 + 280) = v57;
        *(_QWORD *)(a1 + 288) = v202;
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_QWORD *)v56 = v54;
        v57 = v56 + 8;
      }
      *(_QWORD *)(a1 + 280) = v57;
      *(_QWORD *)(a1 + 376) = a1 + 64;
    }
  }
  if (*(_BYTE *)(a1 + 60))
    goto LABEL_71;
  v35 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48);
  v36 = (void *)operator new[]();
  bzero(v36, 4 * v35);
  *(_QWORD *)(a1 + 80) = v36;
  v38 = *(char **)(a1 + 256);
  v37 = *(_QWORD *)(a1 + 264);
  if ((unint64_t)v38 >= v37)
  {
    v43 = *v12;
    v44 = v38 - *v12;
    v45 = v44 >> 3;
    v46 = (v44 >> 3) + 1;
    if (!(v46 >> 61))
    {
      v47 = v37 - (_QWORD)v43;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (!v48)
      {
        v49 = 0;
        v50 = (_QWORD *)(8 * v45);
        v51 = 0;
        *(_QWORD *)(8 * v45) = v36;
        v39 = 8 * v45 + 8;
        v52 = (char *)(v38 - v43);
        if (v38 == v43)
          goto LABEL_68;
        goto LABEL_61;
      }
      if (!(v48 >> 61))
      {
        v49 = operator new(8 * v48);
        v50 = &v49[8 * v45];
        v51 = &v49[8 * v48];
        *v50 = v36;
        v39 = (uint64_t)(v50 + 1);
        v52 = (char *)(v38 - v43);
        if (v38 == v43)
        {
LABEL_68:
          *(_QWORD *)(a1 + 248) = v50;
          *(_QWORD *)(a1 + 256) = v39;
          *(_QWORD *)(a1 + 264) = v51;
          if (v38)
            operator delete(v38);
          goto LABEL_70;
        }
LABEL_61:
        v58 = (unint64_t)(v52 - 8);
        if (v58 < 0x58)
          goto LABEL_243;
        if ((unint64_t)(v38 - v49 - v44) < 0x20)
          goto LABEL_243;
        v59 = (v58 >> 3) + 1;
        v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
        v61 = &v38[-v60];
        v50 = (_QWORD *)((char *)v50 - v60);
        v62 = &v49[8 * v45 - 16];
        v63 = v38 - 16;
        v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *(_OWORD *)v63;
          *(v62 - 1) = *((_OWORD *)v63 - 1);
          *v62 = v65;
          v62 -= 2;
          v63 -= 32;
          v64 -= 4;
        }
        while (v64);
        v38 = v61;
        if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_243:
          do
          {
            v66 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v50 = v66;
          }
          while (v38 != v43);
        }
        v38 = *v12;
        goto LABEL_68;
      }
LABEL_237:
      sub_19C07C7FC();
    }
LABEL_236:
    sub_19C07DA0C();
  }
  *(_QWORD *)v38 = v36;
  v39 = (uint64_t)(v38 + 8);
LABEL_70:
  *(_QWORD *)(a1 + 256) = v39;
LABEL_71:
  v67 = *(_QWORD *)(a1 + 88);
  v68 = dword_1EE418968;
  v69 = dword_1EE418968;
  v70 = (*(_QWORD *)(a1 + 96) - v67) >> 3;
  if (dword_1EE418968 <= v70)
  {
    if (dword_1EE418968 < v70)
      *(_QWORD *)(a1 + 96) = v67 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 88), dword_1EE418968 - v70);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v71 = *(_QWORD *)(a1 + 112);
  v72 = (*(_QWORD *)(a1 + 120) - v71) >> 3;
  if (v69 <= v72)
  {
    if (v69 < v72)
      *(_QWORD *)(a1 + 120) = v71 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 112), v69 - v72);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v73 = *(_QWORD *)(a1 + 136);
  v74 = (*(_QWORD *)(a1 + 144) - v73) >> 3;
  if (v69 <= v74)
  {
    if (v69 < v74)
      *(_QWORD *)(a1 + 144) = v73 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 136), v69 - v74);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v75 = *(_QWORD *)(a1 + 160);
  v76 = (*(_QWORD *)(a1 + 168) - v75) >> 3;
  if (v69 <= v76)
  {
    if (v69 < v76)
      *(_QWORD *)(a1 + 168) = v75 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 160), v69 - v76);
    v68 = dword_1EE418968;
    v69 = dword_1EE418968;
  }
  v77 = *(_QWORD *)(a1 + 184);
  v78 = (*(_QWORD *)(a1 + 192) - v77) >> 3;
  if (v69 <= v78)
  {
    if (v69 < v78)
      *(_QWORD *)(a1 + 192) = v77 + 8 * v69;
  }
  else
  {
    sub_19C098930((void **)(a1 + 184), v69 - v78);
    v68 = dword_1EE418968;
  }
  if (v68 >= 1)
  {
    v79 = 0;
    while (1)
    {
      v81 = *(unsigned int *)(a1 + 52);
      v82 = (void *)operator new[]();
      v83 = v82;
      if ((int)v81 >= 1)
        bzero(v82, 4 * v81);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v79) = v83;
      v85 = *(char **)(a1 + 256);
      v84 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v85 < v84)
      {
        *(_QWORD *)v85 = v83;
        v86 = (uint64_t)(v85 + 8);
        goto LABEL_119;
      }
      v87 = *v12;
      v88 = v85 - *v12;
      v89 = v88 >> 3;
      v90 = (v88 >> 3) + 1;
      if (v90 >> 61)
        goto LABEL_236;
      v91 = v84 - (_QWORD)v87;
      if (v91 >> 2 > v90)
        v90 = v91 >> 2;
      v92 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v90;
      if (v92)
        break;
      v93 = 0;
      v94 = (_QWORD *)(8 * v89);
      *(_QWORD *)(8 * v89) = v83;
      v86 = 8 * v89 + 8;
      if (v85 != v87)
        goto LABEL_110;
LABEL_117:
      *(_QWORD *)(a1 + 248) = v94;
      *(_QWORD *)(a1 + 256) = v86;
      *(_QWORD *)(a1 + 264) = &v93[8 * v92];
      if (v85)
        operator delete(v85);
LABEL_119:
      *(_QWORD *)(a1 + 256) = v86;
      v104 = *(unsigned int *)(a1 + 52);
      v105 = (void *)operator new[]();
      v106 = v105;
      if ((int)v104 >= 1)
        bzero(v105, 4 * v104);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v79) = v106;
      v108 = *(char **)(a1 + 256);
      v107 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v108 < v107)
      {
        *(_QWORD *)v108 = v106;
        v109 = (uint64_t)(v108 + 8);
        goto LABEL_143;
      }
      v110 = *v12;
      v111 = v108 - *v12;
      v112 = v111 >> 3;
      v113 = (v111 >> 3) + 1;
      if (v113 >> 61)
        goto LABEL_236;
      v114 = v107 - (_QWORD)v110;
      if (v114 >> 2 > v113)
        v113 = v114 >> 2;
      if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
        v115 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v115 = v113;
      if (v115)
      {
        if (v115 >> 61)
          goto LABEL_237;
        v116 = operator new(8 * v115);
        v117 = &v116[8 * v112];
        *v117 = v106;
        v109 = (uint64_t)(v117 + 1);
        if (v108 == v110)
          goto LABEL_141;
LABEL_134:
        v118 = v108 - 8 - v110;
        if (v118 < 0x58)
          goto LABEL_244;
        if ((unint64_t)(v108 - &v116[v111]) < 0x20)
          goto LABEL_244;
        v119 = (v118 >> 3) + 1;
        v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
        v121 = &v108[-v120];
        v117 = (_QWORD *)((char *)v117 - v120);
        v122 = &v116[8 * v112 - 16];
        v123 = v108 - 16;
        v124 = v119 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v125 = *(_OWORD *)v123;
          *(v122 - 1) = *((_OWORD *)v123 - 1);
          *v122 = v125;
          v122 -= 2;
          v123 -= 32;
          v124 -= 4;
        }
        while (v124);
        v108 = v121;
        if (v119 != (v119 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_244:
          do
          {
            v126 = *((_QWORD *)v108 - 1);
            v108 -= 8;
            *--v117 = v126;
          }
          while (v108 != v110);
        }
        v108 = *v12;
        goto LABEL_141;
      }
      v116 = 0;
      v117 = (_QWORD *)(8 * v112);
      *(_QWORD *)(8 * v112) = v106;
      v109 = 8 * v112 + 8;
      if (v108 != v110)
        goto LABEL_134;
LABEL_141:
      *(_QWORD *)(a1 + 248) = v117;
      *(_QWORD *)(a1 + 256) = v109;
      *(_QWORD *)(a1 + 264) = &v116[8 * v115];
      if (v108)
        operator delete(v108);
LABEL_143:
      *(_QWORD *)(a1 + 256) = v109;
      v127 = *(unsigned int *)(a1 + 48);
      v128 = (void *)operator new[]();
      v129 = v128;
      if ((int)v127 >= 1)
        bzero(v128, 4 * v127);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v79) = v129;
      v131 = *(char **)(a1 + 256);
      v130 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v131 < v130)
      {
        *(_QWORD *)v131 = v129;
        v132 = (uint64_t)(v131 + 8);
        goto LABEL_167;
      }
      v133 = *v12;
      v134 = v131 - *v12;
      v135 = v134 >> 3;
      v136 = (v134 >> 3) + 1;
      if (v136 >> 61)
        goto LABEL_236;
      v137 = v130 - (_QWORD)v133;
      if (v137 >> 2 > v136)
        v136 = v137 >> 2;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
        v138 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (v138)
      {
        if (v138 >> 61)
          goto LABEL_237;
        v139 = operator new(8 * v138);
        v140 = &v139[8 * v135];
        *v140 = v129;
        v132 = (uint64_t)(v140 + 1);
        if (v131 == v133)
          goto LABEL_165;
LABEL_158:
        v141 = v131 - 8 - v133;
        if (v141 < 0x58)
          goto LABEL_245;
        if ((unint64_t)(v131 - &v139[v134]) < 0x20)
          goto LABEL_245;
        v142 = (v141 >> 3) + 1;
        v143 = 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
        v144 = &v131[-v143];
        v140 = (_QWORD *)((char *)v140 - v143);
        v145 = &v139[8 * v135 - 16];
        v146 = v131 - 16;
        v147 = v142 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v148 = *(_OWORD *)v146;
          *(v145 - 1) = *((_OWORD *)v146 - 1);
          *v145 = v148;
          v145 -= 2;
          v146 -= 32;
          v147 -= 4;
        }
        while (v147);
        v131 = v144;
        if (v142 != (v142 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_245:
          do
          {
            v149 = *((_QWORD *)v131 - 1);
            v131 -= 8;
            *--v140 = v149;
          }
          while (v131 != v133);
        }
        v131 = *v12;
        goto LABEL_165;
      }
      v139 = 0;
      v140 = (_QWORD *)(8 * v135);
      *(_QWORD *)(8 * v135) = v129;
      v132 = 8 * v135 + 8;
      if (v131 != v133)
        goto LABEL_158;
LABEL_165:
      *(_QWORD *)(a1 + 248) = v140;
      *(_QWORD *)(a1 + 256) = v132;
      *(_QWORD *)(a1 + 264) = &v139[8 * v138];
      if (v131)
        operator delete(v131);
LABEL_167:
      *(_QWORD *)(a1 + 256) = v132;
      v150 = *(unsigned int *)(a1 + 48);
      v151 = (void *)operator new[]();
      v152 = v151;
      if ((int)v150 >= 1)
        bzero(v151, 4 * v150);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v79) = v152;
      v154 = *(char **)(a1 + 256);
      v153 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v154 < v153)
      {
        *(_QWORD *)v154 = v152;
        v155 = (uint64_t)(v154 + 8);
        goto LABEL_191;
      }
      v156 = *v12;
      v157 = v154 - *v12;
      v158 = v157 >> 3;
      v159 = (v157 >> 3) + 1;
      if (v159 >> 61)
        goto LABEL_236;
      v160 = v153 - (_QWORD)v156;
      if (v160 >> 2 > v159)
        v159 = v160 >> 2;
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8)
        v161 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v161 = v159;
      if (v161)
      {
        if (v161 >> 61)
          goto LABEL_237;
        v162 = operator new(8 * v161);
        v163 = &v162[8 * v158];
        *v163 = v152;
        v155 = (uint64_t)(v163 + 1);
        if (v154 == v156)
          goto LABEL_189;
LABEL_182:
        v164 = v154 - 8 - v156;
        if (v164 < 0x58)
          goto LABEL_246;
        if ((unint64_t)(v154 - &v162[v157]) < 0x20)
          goto LABEL_246;
        v165 = (v164 >> 3) + 1;
        v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
        v167 = &v154[-v166];
        v163 = (_QWORD *)((char *)v163 - v166);
        v168 = &v162[8 * v158 - 16];
        v169 = v154 - 16;
        v170 = v165 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v171 = *(_OWORD *)v169;
          *(v168 - 1) = *((_OWORD *)v169 - 1);
          *v168 = v171;
          v168 -= 2;
          v169 -= 32;
          v170 -= 4;
        }
        while (v170);
        v154 = v167;
        if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_246:
          do
          {
            v172 = *((_QWORD *)v154 - 1);
            v154 -= 8;
            *--v163 = v172;
          }
          while (v154 != v156);
        }
        v154 = *v12;
        goto LABEL_189;
      }
      v162 = 0;
      v163 = (_QWORD *)(8 * v158);
      *(_QWORD *)(8 * v158) = v152;
      v155 = 8 * v158 + 8;
      if (v154 != v156)
        goto LABEL_182;
LABEL_189:
      *(_QWORD *)(a1 + 248) = v163;
      *(_QWORD *)(a1 + 256) = v155;
      *(_QWORD *)(a1 + 264) = &v162[8 * v161];
      if (v154)
        operator delete(v154);
LABEL_191:
      *(_QWORD *)(a1 + 256) = v155;
      v173 = *(unsigned int *)(a1 + 48);
      v174 = (void *)operator new[]();
      v175 = v174;
      if ((int)v173 >= 1)
        bzero(v174, 4 * v173);
      *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v79) = v175;
      v177 = *(char **)(a1 + 256);
      v176 = *(_QWORD *)(a1 + 264);
      if ((unint64_t)v177 >= v176)
      {
        v178 = *v12;
        v179 = v177 - *v12;
        v180 = v179 >> 3;
        v181 = (v179 >> 3) + 1;
        if (v181 >> 61)
          goto LABEL_236;
        v182 = v176 - (_QWORD)v178;
        if (v182 >> 2 > v181)
          v181 = v182 >> 2;
        if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
          v183 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v183 = v181;
        if (v183)
        {
          if (v183 >> 61)
            goto LABEL_237;
          v184 = operator new(8 * v183);
          v185 = &v184[8 * v180];
          *v185 = v175;
          v80 = (uint64_t)(v185 + 1);
          if (v177 == v178)
            goto LABEL_212;
LABEL_205:
          v186 = v177 - 8 - v178;
          if (v186 < 0x58)
            goto LABEL_247;
          if ((unint64_t)(v177 - &v184[v179]) < 0x20)
            goto LABEL_247;
          v187 = (v186 >> 3) + 1;
          v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
          v189 = &v177[-v188];
          v185 = (_QWORD *)((char *)v185 - v188);
          v190 = &v184[8 * v180 - 16];
          v191 = v177 - 16;
          v192 = v187 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v193 = *(_OWORD *)v191;
            *(v190 - 1) = *((_OWORD *)v191 - 1);
            *v190 = v193;
            v190 -= 2;
            v191 -= 32;
            v192 -= 4;
          }
          while (v192);
          v177 = v189;
          if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_247:
            do
            {
              v194 = *((_QWORD *)v177 - 1);
              v177 -= 8;
              *--v185 = v194;
            }
            while (v177 != v178);
          }
          v177 = *v12;
        }
        else
        {
          v184 = 0;
          v185 = (_QWORD *)(8 * v180);
          *(_QWORD *)(8 * v180) = v175;
          v80 = 8 * v180 + 8;
          if (v177 != v178)
            goto LABEL_205;
        }
LABEL_212:
        *(_QWORD *)(a1 + 248) = v185;
        *(_QWORD *)(a1 + 256) = v80;
        *(_QWORD *)(a1 + 264) = &v184[8 * v183];
        if (v177)
          operator delete(v177);
        goto LABEL_94;
      }
      *(_QWORD *)v177 = v175;
      v80 = (uint64_t)(v177 + 8);
LABEL_94:
      *(_QWORD *)(a1 + 256) = v80;
      if (++v79 >= dword_1EE418968)
        return;
    }
    if (v92 >> 61)
      goto LABEL_237;
    v93 = operator new(8 * v92);
    v94 = &v93[8 * v89];
    *v94 = v83;
    v86 = (uint64_t)(v94 + 1);
    if (v85 == v87)
      goto LABEL_117;
LABEL_110:
    v95 = v85 - 8 - v87;
    if (v95 < 0x58)
      goto LABEL_248;
    if ((unint64_t)(v85 - &v93[v88]) < 0x20)
      goto LABEL_248;
    v96 = (v95 >> 3) + 1;
    v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
    v98 = &v85[-v97];
    v94 = (_QWORD *)((char *)v94 - v97);
    v99 = &v93[8 * v89 - 16];
    v100 = v85 - 16;
    v101 = v96 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v102 = *(_OWORD *)v100;
      *(v99 - 1) = *((_OWORD *)v100 - 1);
      *v99 = v102;
      v99 -= 2;
      v100 -= 32;
      v101 -= 4;
    }
    while (v101);
    v85 = v98;
    if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_248:
      do
      {
        v103 = *((_QWORD *)v85 - 1);
        v85 -= 8;
        *--v94 = v103;
      }
      while (v85 != v87);
    }
    v85 = *v12;
    goto LABEL_117;
  }
}

_QWORD *sub_19C10F1F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  *a1 = &unk_1E3D1E7C8;
  v2 = a1[31];
  v3 = a1[32];
  if (v3 == v2)
  {
    v2 = a1[32];
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(v2 + 8 * v4);
      if (v5)
      {
        operator delete[](v5);
        v2 = a1[31];
        v3 = a1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  v6 = a1[34];
  v7 = a1[35];
  if (v7 == v6)
  {
    a1[32] = v2;
    a1[35] = v7;
    sub_19C22CB78((uint64_t)(a1 + 37));
    v10 = (void *)a1[34];
    if (v10)
    {
LABEL_13:
      a1[35] = v10;
      operator delete(v10);
    }
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(void **)(v6 + 8 * v8);
      if (v9)
      {
        operator delete[](v9);
        v6 = a1[34];
        v7 = a1[35];
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    a1[32] = a1[31];
    a1[35] = v6;
    sub_19C22CB78((uint64_t)(a1 + 37));
    v10 = (void *)a1[34];
    if (v10)
      goto LABEL_13;
  }
  v11 = (void *)a1[31];
  if (v11)
  {
    a1[32] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[23];
  if (v12)
  {
    a1[24] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[20];
  if (v13)
  {
    a1[21] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[17];
  if (v14)
  {
    a1[18] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[14];
  if (v15)
  {
    a1[15] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[11];
  if (v16)
  {
    a1[12] = v16;
    operator delete(v16);
  }
  *a1 = &unk_1E3D1E2D8;
  v17 = (void *)a1[1];
  if (v17)
  {
    a1[2] = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_19C10F35C(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  void **v8;
  void **v9;
  void **v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  void **v116;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D1FD50;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = a4;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 64) = 0u;
  v8 = (void **)(a1 + 64);
  v9 = (void **)(a1 + 88);
  *(_OWORD *)(a1 + 112) = 0u;
  v10 = (void **)(a1 + 136);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v116 = (void **)(a1 + 112);
  sub_19C22CB44(a1 + 160);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v11 = (char **)(a1 + 232);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 44) + a6;
  *(_BYTE *)(a1 + 41) = 0;
  v12 = dword_1EE418968;
  v13 = dword_1EE418968;
  v14 = *(_QWORD *)(a1 + 64);
  v15 = (*(_QWORD *)(a1 + 72) - v14) >> 3;
  if (dword_1EE418968 <= v15)
  {
    if (dword_1EE418968 < v15)
      *(_QWORD *)(a1 + 72) = v14 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930(v8, dword_1EE418968 - v15);
    v12 = dword_1EE418968;
    v13 = dword_1EE418968;
  }
  v16 = *(_QWORD *)(a1 + 88);
  v17 = (*(_QWORD *)(a1 + 96) - v16) >> 3;
  if (v13 <= v17)
  {
    if (v13 < v17)
      *(_QWORD *)(a1 + 96) = v16 + 8 * v13;
  }
  else
  {
    sub_19C098930(v9, v13 - v17);
    v12 = dword_1EE418968;
    v13 = dword_1EE418968;
  }
  v18 = *(_QWORD *)(a1 + 112);
  v19 = (*(_QWORD *)(a1 + 120) - v18) >> 3;
  if (v13 <= v19)
  {
    if (v13 < v19)
      *(_QWORD *)(a1 + 120) = v18 + 8 * v13;
  }
  else
  {
    sub_19C098930(v116, v13 - v19);
    v12 = dword_1EE418968;
    v13 = dword_1EE418968;
  }
  v20 = *(_QWORD *)(a1 + 136);
  v21 = (*(_QWORD *)(a1 + 144) - v20) >> 3;
  if (v13 <= v21)
  {
    if (v13 < v21)
      *(_QWORD *)(a1 + 144) = v20 + 8 * v13;
  }
  else
  {
    sub_19C098930(v10, v13 - v21);
    v12 = dword_1EE418968;
  }
  if (v12 >= 1)
  {
    for (i = 0; i < dword_1EE418968; ++i)
    {
      v24 = *(unsigned int *)(a1 + 60);
      v25 = (void *)operator new[]();
      v26 = v25;
      if ((int)v24 >= 1)
        bzero(v25, 4 * v24);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * i) = v26;
      v28 = *(char **)(a1 + 240);
      v27 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v28 < v27)
      {
        *(_QWORD *)v28 = v26;
        v29 = (uint64_t)(v28 + 8);
        goto LABEL_36;
      }
      v30 = *v11;
      v31 = v28 - *v11;
      v32 = v31 >> 3;
      v33 = (v31 >> 3) + 1;
      if (v33 >> 61)
        sub_19C07DA0C();
      v34 = v27 - (_QWORD)v30;
      if (v34 >> 2 > v33)
        v33 = v34 >> 2;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        if (v35 >> 61)
          sub_19C07C7FC();
        v36 = operator new(8 * v35);
        v37 = &v36[8 * v32];
        *v37 = v26;
        v29 = (uint64_t)(v37 + 1);
        if (v28 == v30)
        {
LABEL_34:
          *(_QWORD *)(a1 + 232) = v37;
          *(_QWORD *)(a1 + 240) = v29;
          *(_QWORD *)(a1 + 248) = &v36[8 * v35];
          if (!v28)
            goto LABEL_36;
LABEL_35:
          operator delete(v28);
          goto LABEL_36;
        }
      }
      else
      {
        v36 = 0;
        v37 = (_QWORD *)(8 * v32);
        *(_QWORD *)(8 * v32) = v26;
        v29 = 8 * v32 + 8;
        if (v28 == v30)
          goto LABEL_34;
      }
      v79 = v28 - 8 - v30;
      if (v79 < 0x58)
        goto LABEL_127;
      if ((unint64_t)(v28 - &v36[v31]) < 0x20)
        goto LABEL_127;
      v80 = (v79 >> 3) + 1;
      v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
      v82 = &v28[-v81];
      v37 = (_QWORD *)((char *)v37 - v81);
      v83 = &v36[8 * v32 - 16];
      v84 = v28 - 16;
      v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v86 = *(_OWORD *)v84;
        *(v83 - 1) = *((_OWORD *)v84 - 1);
        *v83 = v86;
        v83 -= 2;
        v84 -= 32;
        v85 -= 4;
      }
      while (v85);
      v28 = v82;
      if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_127:
        do
        {
          v87 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *--v37 = v87;
        }
        while (v28 != v30);
      }
      v28 = *v11;
      *(_QWORD *)(a1 + 232) = v37;
      *(_QWORD *)(a1 + 240) = v29;
      *(_QWORD *)(a1 + 248) = &v36[8 * v35];
      if (v28)
        goto LABEL_35;
LABEL_36:
      *(_QWORD *)(a1 + 240) = v29;
      v38 = *(unsigned int *)(a1 + 60);
      v39 = (void *)operator new[]();
      v40 = v39;
      if ((int)v38 >= 1)
        bzero(v39, 4 * v38);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * i) = v40;
      v42 = *(char **)(a1 + 240);
      v41 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v42 < v41)
      {
        *(_QWORD *)v42 = v40;
        v43 = (uint64_t)(v42 + 8);
        goto LABEL_51;
      }
      v44 = *v11;
      v45 = v42 - *v11;
      v46 = v45 >> 3;
      v47 = (v45 >> 3) + 1;
      if (v47 >> 61)
        sub_19C07DA0C();
      v48 = v41 - (_QWORD)v44;
      if (v48 >> 2 > v47)
        v47 = v48 >> 2;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v47;
      if (v49)
      {
        if (v49 >> 61)
          sub_19C07C7FC();
        v50 = operator new(8 * v49);
        v51 = &v50[8 * v46];
        *v51 = v40;
        v43 = (uint64_t)(v51 + 1);
        if (v42 == v44)
        {
LABEL_49:
          *(_QWORD *)(a1 + 232) = v51;
          *(_QWORD *)(a1 + 240) = v43;
          *(_QWORD *)(a1 + 248) = &v50[8 * v49];
          if (!v42)
            goto LABEL_51;
LABEL_50:
          operator delete(v42);
          goto LABEL_51;
        }
      }
      else
      {
        v50 = 0;
        v51 = (_QWORD *)(8 * v46);
        *(_QWORD *)(8 * v46) = v40;
        v43 = 8 * v46 + 8;
        if (v42 == v44)
          goto LABEL_49;
      }
      v88 = v42 - 8 - v44;
      if (v88 < 0x58)
        goto LABEL_128;
      if ((unint64_t)(v42 - &v50[v45]) < 0x20)
        goto LABEL_128;
      v89 = (v88 >> 3) + 1;
      v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
      v91 = &v42[-v90];
      v51 = (_QWORD *)((char *)v51 - v90);
      v92 = &v50[8 * v46 - 16];
      v93 = v42 - 16;
      v94 = v89 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v95 = *(_OWORD *)v93;
        *(v92 - 1) = *((_OWORD *)v93 - 1);
        *v92 = v95;
        v92 -= 2;
        v93 -= 32;
        v94 -= 4;
      }
      while (v94);
      v42 = v91;
      if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_128:
        do
        {
          v96 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *--v51 = v96;
        }
        while (v42 != v44);
      }
      v42 = *v11;
      *(_QWORD *)(a1 + 232) = v51;
      *(_QWORD *)(a1 + 240) = v43;
      *(_QWORD *)(a1 + 248) = &v50[8 * v49];
      if (v42)
        goto LABEL_50;
LABEL_51:
      *(_QWORD *)(a1 + 240) = v43;
      v52 = *(unsigned int *)(a1 + 48);
      v53 = (void *)operator new[]();
      v54 = v53;
      if ((int)v52 >= 1)
        bzero(v53, 4 * v52);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * i) = v54;
      v56 = *(char **)(a1 + 240);
      v55 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v56 < v55)
      {
        *(_QWORD *)v56 = v54;
        v57 = (uint64_t)(v56 + 8);
        goto LABEL_66;
      }
      v58 = *v11;
      v59 = v56 - *v11;
      v60 = v59 >> 3;
      v61 = (v59 >> 3) + 1;
      if (v61 >> 61)
        sub_19C07DA0C();
      v62 = v55 - (_QWORD)v58;
      if (v62 >> 2 > v61)
        v61 = v62 >> 2;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        if (v63 >> 61)
          sub_19C07C7FC();
        v64 = operator new(8 * v63);
        v65 = &v64[8 * v60];
        *v65 = v54;
        v57 = (uint64_t)(v65 + 1);
        if (v56 == v58)
        {
LABEL_64:
          *(_QWORD *)(a1 + 232) = v65;
          *(_QWORD *)(a1 + 240) = v57;
          *(_QWORD *)(a1 + 248) = &v64[8 * v63];
          if (!v56)
            goto LABEL_66;
LABEL_65:
          operator delete(v56);
          goto LABEL_66;
        }
      }
      else
      {
        v64 = 0;
        v65 = (_QWORD *)(8 * v60);
        *(_QWORD *)(8 * v60) = v54;
        v57 = 8 * v60 + 8;
        if (v56 == v58)
          goto LABEL_64;
      }
      v97 = v56 - 8 - v58;
      if (v97 < 0x58)
        goto LABEL_129;
      if ((unint64_t)(v56 - &v64[v59]) < 0x20)
        goto LABEL_129;
      v98 = (v97 >> 3) + 1;
      v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
      v100 = &v56[-v99];
      v65 = (_QWORD *)((char *)v65 - v99);
      v101 = &v64[8 * v60 - 16];
      v102 = v56 - 16;
      v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v104 = *(_OWORD *)v102;
        *(v101 - 1) = *((_OWORD *)v102 - 1);
        *v101 = v104;
        v101 -= 2;
        v102 -= 32;
        v103 -= 4;
      }
      while (v103);
      v56 = v100;
      if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_129:
        do
        {
          v105 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *--v65 = v105;
        }
        while (v56 != v58);
      }
      v56 = *v11;
      *(_QWORD *)(a1 + 232) = v65;
      *(_QWORD *)(a1 + 240) = v57;
      *(_QWORD *)(a1 + 248) = &v64[8 * v63];
      if (v56)
        goto LABEL_65;
LABEL_66:
      *(_QWORD *)(a1 + 240) = v57;
      v66 = *(unsigned int *)(a1 + 48);
      v67 = (void *)operator new[]();
      v68 = v67;
      if ((int)v66 >= 1)
        bzero(v67, 4 * v66);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * i) = v68;
      v70 = *(char **)(a1 + 240);
      v69 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v70 >= v69)
      {
        v71 = *v11;
        v72 = v70 - *v11;
        v73 = v72 >> 3;
        v74 = (v72 >> 3) + 1;
        if (v74 >> 61)
          sub_19C07DA0C();
        v75 = v69 - (_QWORD)v71;
        if (v75 >> 2 > v74)
          v74 = v75 >> 2;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
          v76 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          if (v76 >> 61)
            sub_19C07C7FC();
          v77 = operator new(8 * v76);
          v78 = &v77[8 * v73];
          *v78 = v68;
          v23 = (uint64_t)(v78 + 1);
          if (v70 == v71)
            goto LABEL_78;
LABEL_108:
          v106 = v70 - 8 - v71;
          if (v106 < 0x58)
            goto LABEL_130;
          if ((unint64_t)(v70 - &v77[v72]) < 0x20)
            goto LABEL_130;
          v107 = (v106 >> 3) + 1;
          v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
          v109 = &v70[-v108];
          v78 = (_QWORD *)((char *)v78 - v108);
          v110 = &v77[8 * v73 - 16];
          v111 = v70 - 16;
          v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v113 = *(_OWORD *)v111;
            *(v110 - 1) = *((_OWORD *)v111 - 1);
            *v110 = v113;
            v110 -= 2;
            v111 -= 32;
            v112 -= 4;
          }
          while (v112);
          v70 = v109;
          if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_130:
            do
            {
              v114 = *((_QWORD *)v70 - 1);
              v70 -= 8;
              *--v78 = v114;
            }
            while (v70 != v71);
          }
          v70 = *v11;
          *(_QWORD *)(a1 + 232) = v78;
          *(_QWORD *)(a1 + 240) = v23;
          *(_QWORD *)(a1 + 248) = &v77[8 * v76];
          if (!v70)
            goto LABEL_20;
        }
        else
        {
          v77 = 0;
          v78 = (_QWORD *)(8 * v73);
          *(_QWORD *)(8 * v73) = v68;
          v23 = 8 * v73 + 8;
          if (v70 != v71)
            goto LABEL_108;
LABEL_78:
          *(_QWORD *)(a1 + 232) = v78;
          *(_QWORD *)(a1 + 240) = v23;
          *(_QWORD *)(a1 + 248) = &v77[8 * v76];
          if (!v70)
            goto LABEL_20;
        }
        operator delete(v70);
        goto LABEL_20;
      }
      *(_QWORD *)v70 = v68;
      v23 = (uint64_t)(v70 + 8);
LABEL_20:
      *(_QWORD *)(a1 + 240) = v23;
    }
  }
  return a1;
}

void sub_19C10FBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  _QWORD *v14;
  void **v15;
  void **v16;
  void **v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v19 = *v17;
  if (*v17)
  {
    v14[18] = v19;
    operator delete(v19);
    v20 = *a14;
    if (!*a14)
    {
LABEL_3:
      v21 = *v16;
      if (!*v16)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v20 = *a14;
    if (!*a14)
      goto LABEL_3;
  }
  v14[15] = v20;
  operator delete(v20);
  v21 = *v16;
  if (!*v16)
  {
LABEL_4:
    v22 = *v15;
    if (!*v15)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  v14[12] = v21;
  operator delete(v21);
  v22 = *v15;
  if (!*v15)
  {
LABEL_5:
    *v14 = &unk_1E3D1E2D8;
    v23 = (void *)v14[1];
    if (!v23)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  v14[9] = v22;
  operator delete(v22);
  *v14 = &unk_1E3D1E2D8;
  v23 = (void *)v14[1];
  if (!v23)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  v14[2] = v23;
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_19C10FCF0()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C10FD00(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_19C10FD08(uint64_t a1)
{
  return a1 + 88;
}

void sub_19C10FD10()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C10FD20(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_19C10FD28()
{
  return 0;
}

uint64_t sub_19C10FD78(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_19C10FD80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C10FD90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = *a4;
    v7 = *(_QWORD *)(result + 112);
    if (a5 < 4)
      goto LABEL_7;
    if ((unint64_t)(v7 - v6) < 0x20)
      goto LABEL_7;
    v5 = a5 & 0x7FFFFFFC;
    v8 = (__int128 *)(v6 + 16);
    v9 = (_OWORD *)(v7 + 16);
    v10 = a5 & 0xFFFFFFFC;
    do
    {
      v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v5 != a5)
    {
LABEL_7:
      v12 = (uint64_t *)(v6 + 8 * v5);
      v13 = (_QWORD *)(v7 + 8 * v5);
      v14 = a5 - v5;
      do
      {
        v15 = *v12++;
        *v13++ = v15;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

int *sub_19C10FE10(int *result, _QWORD *a2, uint64_t a3, int a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;

  if ((a4 & 0xFFFFFF) != 0)
  {
    v5 = result;
    v6 = 0;
    v7 = 8 * (a4 & 0xFFFFFF);
    do
    {
      memmove(*(void **)(*((_QWORD *)v5 + 8) + v6), *(const void **)(*a2 + v6), 4 * v5[11]);
      if (*((_BYTE *)v5 + 40))
        *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + v6) + 4 * v5[11]) = 1065353216;
      result = (int *)memmove(*(void **)(*((_QWORD *)v5 + 11) + v6), *(const void **)(*a2 + v6), 4 * v5[12]);
      v6 += 8;
    }
    while (v7 != v6);
  }
  return result;
}

void sub_19C10FEC0()
{
  sub_19C2210D4(5);
}

void sub_19C10FED0()
{
  sub_19C2210D4(5);
}

void sub_19C10FEE4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C10FF08(a1);
  operator delete(v1);
}

void sub_19C10FEF8()
{
  sub_19C2210D4(1);
}

_QWORD *sub_19C10FF08(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *a1 = &unk_1E3D1FD50;
  v4 = a1 + 29;
  v2 = (void **)a1[29];
  v3 = (void **)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        operator delete[](v2[v5]);
        v2 = (void **)a1[29];
        v3 = (void **)a1[30];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  sub_19C22CB78((uint64_t)(a1 + 20));
  v6 = (void *)a1[17];
  if (v6)
  {
    a1[18] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[14];
  if (v7)
  {
    a1[15] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[11];
  if (v8)
  {
    a1[12] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[8];
  if (v9)
  {
    a1[9] = v9;
    operator delete(v9);
  }
  *a1 = &unk_1E3D1E2D8;
  v10 = (void *)a1[1];
  if (v10)
  {
    a1[2] = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_19C10FFEC(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v15;
  float v16;
  int v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t v22;
  float v23;
  void *v25[2];
  char v26;
  char __p[23];
  char v28;

  v15 = sub_19C110338(a1, a5);
  *(_QWORD *)v15 = &unk_1E3D203D8;
  *(_WORD *)(v15 + 41) = 0;
  *(_DWORD *)(v15 + 112) = 0;
  *(_DWORD *)(v15 + 408) = a4;
  *(_QWORD *)(v15 + 528) = a8;
  *(_DWORD *)(v15 + 120) = *(_DWORD *)(a6 + 68);
  if (a8)
    a7 = *(_BYTE *)(a8 + 376);
  *(_BYTE *)(a1 + 40) = a7;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 528) = a8;
  if (a2 < 1 || a3 <= 0)
    sub_19C2210D4(34);
  v28 = 7;
  strcpy(__p, "SoftMax");
  sub_19C10A4B0(a1, -0.215);
  v16 = *(float *)(a6 + 16);
  v17 = *(_DWORD *)(a6 + 20);
  v18 = *(double *)(a6 + 24);
  *(float *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 116))
  {
    v19 = *(_DWORD *)(a6 + 32);
    if (v19 == 2)
    {
      v21 = operator new();
      *(_QWORD *)v21 = &unk_1E3D1E968;
      *(float *)(v21 + 24) = v16;
      *(_DWORD *)(v21 + 28) = v17;
      *(_DWORD *)(v21 + 32) = 841731191;
      v23 = v18;
      *(_WORD *)(v21 + 143) = 263;
      *(int32x2_t *)(v21 + 16) = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_DWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 12) = 0;
      *(float *)(v21 + 36) = v23;
      *(_DWORD *)(v21 + 40) = v17;
      *(float *)(v21 + 44) = v23;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 80) = 0u;
      *(_OWORD *)(v21 + 96) = 0u;
      *(_QWORD *)(v21 + 112) = 0;
      *(_QWORD *)(v21 + 120) = 0x78616D74666F53;
    }
    else
    {
      if (v19 != 1)
      {
        if (!v19)
        {
          v20 = operator new();
          v26 = 7;
          strcpy((char *)v25, "Softmax");
          sub_19C0FCB2C(v20, (__int128 *)v25, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1, v16);
          *(_QWORD *)(a1 + 424) = v20;
          if (v26 < 0)
            operator delete(v25[0]);
        }
        return a1;
      }
      v21 = operator new();
      *(float *)(v21 + 20) = v16;
      *(_DWORD *)(v21 + 24) = v17;
      *(_DWORD *)(v21 + 28) = 841731191;
      *(double *)(v21 + 32) = v18;
      *(_WORD *)(v21 + 159) = 263;
      v22 = vrev64_s32(*(int32x2_t *)(a1 + 100));
      *(_QWORD *)v21 = &unk_1E3D1E270;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      *(_DWORD *)(v21 + 40) = v17;
      *(double *)(v21 + 48) = v18;
      *(int32x2_t *)(v21 + 56) = v22;
      *(_DWORD *)(v21 + 164) = 0;
      *(_OWORD *)(v21 + 64) = 0u;
      *(_OWORD *)(v21 + 80) = 0u;
      *(_OWORD *)(v21 + 96) = 0u;
      *(_OWORD *)(v21 + 112) = 0u;
      *(_QWORD *)(v21 + 128) = 0;
      *(_QWORD *)(v21 + 136) = 0x78616D74666F53;
    }
    *(_QWORD *)(a1 + 424) = v21;
  }
  return a1;
}

void sub_19C1102D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  operator delete(v15);
  sub_19C10B95C(v14);
  _Unwind_Resume(a1);
}

void sub_19C1102FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  sub_19C10B95C(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_19C110338(uint64_t a1, int a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E3D20BE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  sub_19C22CB44(a1 + 432);
  *(_DWORD *)(a1 + 504) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return a1;
}

void sub_19C110410(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v5 = v3;
  sub_19C22CB78(v5);
  v7 = *(void **)(v1 + 384);
  if (v7)
  {
    *(_QWORD *)(v1 + 392) = v7;
    operator delete(v7);
    sub_19C0830E8((void **)(v1 + 360));
    v8 = *(void **)(v1 + 336);
    if (!v8)
    {
LABEL_3:
      v9 = *(void **)(v1 + 312);
      if (!v9)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    sub_19C0830E8((void **)(v1 + 360));
    v8 = *(void **)(v1 + 336);
    if (!v8)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 344) = v8;
  operator delete(v8);
  v9 = *(void **)(v1 + 312);
  if (!v9)
  {
LABEL_4:
    v10 = *(void **)(v1 + 288);
    if (!v10)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v1 + 320) = v9;
  operator delete(v9);
  v10 = *(void **)(v1 + 288);
  if (!v10)
  {
LABEL_5:
    v11 = *(void **)(v1 + 264);
    if (!v11)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v1 + 296) = v10;
  operator delete(v10);
  v11 = *(void **)(v1 + 264);
  if (!v11)
  {
LABEL_6:
    sub_19C101AC4(v2);
    v12 = *(void **)(v1 + 72);
    if (!v12)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v1 + 272) = v11;
  operator delete(v11);
  sub_19C101AC4(v2);
  v12 = *(void **)(v1 + 72);
  if (!v12)
  {
LABEL_7:
    v13 = *v4;
    if (!*v4)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  *(_QWORD *)(v1 + 80) = v12;
  operator delete(v12);
  v13 = *v4;
  if (!*v4)
  {
LABEL_8:
    *(_QWORD *)v1 = &unk_1E3D1E2D8;
    v14 = *(void **)(v1 + 8);
    if (!v14)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  *(_QWORD *)(v1 + 56) = v13;
  operator delete(v13);
  *(_QWORD *)v1 = &unk_1E3D1E2D8;
  v14 = *(void **)(v1 + 8);
  if (!v14)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_17:
  *(_QWORD *)(v1 + 16) = v14;
  operator delete(v14);
  _Unwind_Resume(a1);
}

void sub_19C110534()
{
  sub_19C2210D4(1);
}

uint64_t sub_19C110544(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_19C11054C(uint64_t a1)
{
  return a1 + 288;
}

void sub_19C110554(uint64_t a1)
{
  void *__p[4];

  strcpy((char *)__p, "SoftMax, from allocAll");
  sub_19C10A4B0(a1, -0.44);
}

void sub_19C1105CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C1105E8(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4, _QWORD *a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  _QWORD *result;
  float *v26;
  float v27;
  float __B;
  float __C;
  vDSP_Length __N;

  v9 = *((unsigned __int8 *)a1 + 42);
  v10 = a4;
  v11 = *((unsigned int *)a1 + 25);
  v12 = *((int *)a1 + 24);
  v13 = (__int16 **)a1[64];
  v14 = *((int *)a1 + 26);
  v15 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  memmove(*(void **)(*v15 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v12);
  if (*((_BYTE *)a1 + 40))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1) + 8 * v10) + 4 * v14 - 4) = 1065353216;
  if (a5[1] != *a5)
  {
    (*(void (**)(_QWORD *))(*a1 + 24))(a1);
    sub_19C2210D4(65);
  }
  if (v9)
    v16 = 1;
  else
    v16 = v10;
  v17 = (void **)(a1[48] + 8 * v16);
  v18 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  sub_19C1032B4(v17, (uint64_t *)(*v18 + 8 * v10), v13, v11, v14, 0.0);
  if ((int)v11 >= 1)
  {
    v19 = *(int **)(a1[48] + 8 * v16);
    v20 = v11;
    do
    {
      v21 = -1035468800;
      if (*(float *)v19 < -50.0 || (v21 = 1112014848, *(float *)v19 > 50.0))
        *v19 = v21;
      ++v19;
      --v20;
    }
    while (v20);
  }
  v22 = *(_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v23 = a1[48];
  __C = 0.0;
  LODWORD(__N) = v11;
  vvexpf(*(float **)(v22 + 8 * v10), *(const float **)(v23 + 8 * v16), (const int *)&__N);
  vDSP_sve(*(const float **)(v22 + 8 * v10), 1, &__C, (int)__N);
  if (__C <= 0.0)
    v24 = 0.001;
  else
    v24 = __C + 0.001;
  __B = v24;
  vDSP_vsdiv(*(const float **)(v22 + 8 * v10), 1, &__B, *(float **)(v22 + 8 * v10), 1, (int)__N);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if ((int)v11 >= 1)
  {
    v26 = *(float **)(*result + 8 * v10);
    do
    {
      v27 = -5.0;
      if (*v26 < -5.0 || (v27 = 5.0, *v26 > 5.0))
        *v26 = v27;
      ++v26;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_19C110830(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  int v11;
  uint64_t v12;

  v10 = result;
  if (a5 && *(_BYTE *)(result + 520))
    sub_19C2210D4(34);
  v11 = a4 & 0xFFFFFF;
  v12 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v12)
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 224))(v10, a2, a3, v12, a7);
      v12 = (v12 + 1);
    }
    while (v11 != (_DWORD)v12);
  }
  return result;
}

void sub_19C1108C0(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_19C10B95C(a1);
  operator delete(v1);
}

uint64_t sub_19C1108D4(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, char a10)
{
  int v14;
  int v15;
  _DWORD *v16;
  char *__p;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E3D1F730;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a6;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_BYTE *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 956) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  sub_19C22CB44(a1 + 1192);
  sub_19C22CB44(a1 + 1264);
  sub_19C22CB44(a1 + 1336);
  sub_19C22CB44(a1 + 1408);
  sub_19C22CB44(a1 + 1480);
  sub_19C22CB44(a1 + 1552);
  sub_19C22CB44(a1 + 1624);
  sub_19C22CB44(a1 + 1696);
  sub_19C22CB44(a1 + 1768);
  sub_19C22CB44(a1 + 1840);
  sub_19C22CB44(a1 + 1912);
  *(_DWORD *)(a1 + 1988) = a5;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  *(_BYTE *)(a1 + 2040) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 2048) = a9;
  if (a9)
  {
    v14 = *(unsigned __int8 *)(a9 + 376);
    nullsub_171("GRU constructor");
    v15 = v14 ^ 1;
    a8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2048) + 376);
  }
  else
  {
    v15 = 1;
  }
  *(_BYTE *)(a1 + 40) = a8;
  *(_WORD *)(a1 + 1984) = *(_WORD *)(a7 + 45);
  v16 = *a4;
  *(_DWORD *)(a1 + 520) = **a4;
  *(_DWORD *)(a1 + 524) = v16[1];
  *(_DWORD *)(a1 + 528) = v16[2];
  if (!a8)
    v15 = 0;
  *(_DWORD *)(a1 + 48) = v15 + *(_DWORD *)(a1 + 44);
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_BYTE *)(a1 + 2040) = 1;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "GRU alloc, from constructor");
  sub_19C110F0C(a1);
  operator delete(__p);
  return a1;
}

void sub_19C110BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, void **a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  void **v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;

  if (a27 < 0)
  {
    operator delete(__p);
    v36 = (void *)v27[252];
    if (!v36)
    {
LABEL_3:
      v37 = *v32;
      if (!*v32)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v36 = (void *)v27[252];
    if (!v36)
      goto LABEL_3;
  }
  v27[253] = v36;
  operator delete(v36);
  v37 = *v32;
  if (!*v32)
  {
LABEL_5:
    sub_19C22CB78(v33);
    sub_19C22CB78(v34);
    sub_19C22CB78(a10);
    sub_19C22CB78(a11);
    sub_19C22CB78(a12);
    sub_19C22CB78(a13);
    sub_19C22CB78(a14);
    sub_19C22CB78(a15);
    sub_19C22CB78(a16);
    sub_19C22CB78(a17);
    sub_19C22CB78(a18);
    sub_19C101AC4(v31);
    sub_19C101AC4(v29);
    sub_19C101AC4(a19);
    v38 = (void *)v27[85];
    if (v38)
    {
      v27[86] = v38;
      operator delete(v38);
      v39 = (void *)v27[82];
      if (!v39)
      {
LABEL_7:
        v40 = (void *)v27[79];
        if (!v40)
          goto LABEL_8;
        goto LABEL_27;
      }
    }
    else
    {
      v39 = (void *)v27[82];
      if (!v39)
        goto LABEL_7;
    }
    v27[83] = v39;
    operator delete(v39);
    v40 = (void *)v27[79];
    if (!v40)
    {
LABEL_8:
      v41 = (void *)v27[76];
      if (!v41)
        goto LABEL_9;
      goto LABEL_28;
    }
LABEL_27:
    v27[80] = v40;
    operator delete(v40);
    v41 = (void *)v27[76];
    if (!v41)
    {
LABEL_9:
      v42 = (void *)v27[73];
      if (!v42)
        goto LABEL_10;
      goto LABEL_29;
    }
LABEL_28:
    v27[77] = v41;
    operator delete(v41);
    v42 = (void *)v27[73];
    if (!v42)
    {
LABEL_10:
      v43 = (void *)v27[70];
      if (!v43)
        goto LABEL_11;
      goto LABEL_30;
    }
LABEL_29:
    v27[74] = v42;
    operator delete(v42);
    v43 = (void *)v27[70];
    if (!v43)
    {
LABEL_11:
      v44 = (void *)v27[62];
      if (!v44)
        goto LABEL_12;
      goto LABEL_31;
    }
LABEL_30:
    v27[71] = v43;
    operator delete(v43);
    v44 = (void *)v27[62];
    if (!v44)
    {
LABEL_12:
      v45 = (void *)v27[59];
      if (!v45)
        goto LABEL_13;
      goto LABEL_32;
    }
LABEL_31:
    v27[63] = v44;
    operator delete(v44);
    v45 = (void *)v27[59];
    if (!v45)
    {
LABEL_13:
      v46 = (void *)v27[56];
      if (!v46)
        goto LABEL_14;
      goto LABEL_33;
    }
LABEL_32:
    v27[60] = v45;
    operator delete(v45);
    v46 = (void *)v27[56];
    if (!v46)
    {
LABEL_14:
      v47 = (void *)v27[53];
      if (!v47)
        goto LABEL_15;
      goto LABEL_34;
    }
LABEL_33:
    v27[57] = v46;
    operator delete(v46);
    v47 = (void *)v27[53];
    if (!v47)
    {
LABEL_15:
      v48 = (void *)v27[50];
      if (!v48)
        goto LABEL_16;
      goto LABEL_35;
    }
LABEL_34:
    v27[54] = v47;
    operator delete(v47);
    v48 = (void *)v27[50];
    if (!v48)
    {
LABEL_16:
      v49 = *v30;
      if (!*v30)
        goto LABEL_17;
      goto LABEL_36;
    }
LABEL_35:
    v27[51] = v48;
    operator delete(v48);
    v49 = *v30;
    if (!*v30)
    {
LABEL_17:
      sub_19C0830E8(v28);
      v50 = (void *)v27[23];
      if (!v50)
        goto LABEL_18;
      goto LABEL_37;
    }
LABEL_36:
    v27[48] = v49;
    operator delete(v49);
    sub_19C0830E8(v28);
    v50 = (void *)v27[23];
    if (!v50)
    {
LABEL_18:
      v51 = (void *)v27[20];
      if (!v51)
        goto LABEL_19;
      goto LABEL_38;
    }
LABEL_37:
    v27[24] = v50;
    operator delete(v50);
    v51 = (void *)v27[20];
    if (!v51)
    {
LABEL_19:
      v52 = (void *)v27[17];
      if (!v52)
        goto LABEL_20;
      goto LABEL_39;
    }
LABEL_38:
    v27[21] = v51;
    operator delete(v51);
    v52 = (void *)v27[17];
    if (!v52)
    {
LABEL_20:
      v53 = (void *)v27[14];
      if (!v53)
        goto LABEL_21;
      goto LABEL_40;
    }
LABEL_39:
    v27[18] = v52;
    operator delete(v52);
    v53 = (void *)v27[14];
    if (!v53)
    {
LABEL_21:
      v54 = (void *)v27[11];
      if (!v54)
        goto LABEL_22;
      goto LABEL_41;
    }
LABEL_40:
    v27[15] = v53;
    operator delete(v53);
    v54 = (void *)v27[11];
    if (!v54)
    {
LABEL_22:
      v55 = *a20;
      if (!*a20)
        goto LABEL_23;
      goto LABEL_42;
    }
LABEL_41:
    v27[12] = v54;
    operator delete(v54);
    v55 = *a20;
    if (!*a20)
    {
LABEL_23:
      *v27 = &unk_1E3D1E2D8;
      v56 = (void *)v27[1];
      if (!v56)
        goto LABEL_24;
      goto LABEL_43;
    }
LABEL_42:
    v27[9] = v55;
    operator delete(v55);
    *v27 = &unk_1E3D1E2D8;
    v56 = (void *)v27[1];
    if (!v56)
LABEL_24:
      _Unwind_Resume(a1);
LABEL_43:
    v27[2] = v56;
    operator delete(v56);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v27[250] = v37;
  operator delete(v37);
  goto LABEL_5;
}

void sub_19C110F0C(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  void *v8;
  char **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _BYTE *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  _OWORD *v138;
  char *v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  _OWORD *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _BYTE *v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  _OWORD *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  void *v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  _BYTE *v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  _OWORD *v207;
  char *v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  void *v214;
  char *v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _BYTE *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  _OWORD *v230;
  char *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  void *v237;
  char *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _BYTE *v247;
  _QWORD *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  _OWORD *v253;
  char *v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  void *v260;
  char *v261;
  unint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _BYTE *v270;
  _QWORD *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  _OWORD *v276;
  char *v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  void *v283;
  char *v284;
  unint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  _BYTE *v292;
  _QWORD *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  _OWORD *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  _QWORD *v310;
  char *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  _OWORD *v316;
  char *v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  int v321;
  void *v322;
  char *v323;
  unint64_t v324;
  _QWORD *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  _BYTE *v332;
  _QWORD *v333;
  char *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  _OWORD *v339;
  char *v340;
  uint64_t v341;
  __int128 v342;
  uint64_t v343;
  int v344;
  void *v345;
  char *v346;
  unint64_t v347;
  _QWORD *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _BYTE *v355;
  _QWORD *v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  _OWORD *v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  int v367;
  void *v368;
  char *v369;
  unint64_t v370;
  _QWORD *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  _BYTE *v378;
  _QWORD *v379;
  char *v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  _OWORD *v385;
  char *v386;
  uint64_t v387;
  __int128 v388;
  uint64_t v389;
  int v390;
  void *v391;
  char *v392;
  unint64_t v393;
  _QWORD *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  _BYTE *v401;
  _QWORD *v402;
  char *v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  _OWORD *v408;
  char *v409;
  uint64_t v410;
  __int128 v411;
  uint64_t v412;
  int v413;
  void *v414;
  char *v415;
  unint64_t v416;
  _QWORD *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  _BYTE *v424;
  _QWORD *v425;
  char *v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  _OWORD *v431;
  char *v432;
  uint64_t v433;
  __int128 v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  int v438;
  void *v439;
  char **v440;
  char *v441;
  unint64_t v442;
  _QWORD *v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  _BYTE *v450;
  _QWORD *v451;
  char *v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  _OWORD *v457;
  char *v458;
  uint64_t v459;
  __int128 v460;
  uint64_t v461;
  int v462;
  void *v463;
  char *v464;
  unint64_t v465;
  _QWORD *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  _BYTE *v473;
  _QWORD *v474;
  char *v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  _OWORD *v480;
  char *v481;
  uint64_t v482;
  __int128 v483;
  uint64_t v484;
  int v485;
  void *v486;
  char *v487;
  unint64_t v488;
  _QWORD *v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  _BYTE *v496;
  _QWORD *v497;
  char *v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  _OWORD *v503;
  char *v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  void *v508;

  v2 = 3;
  v3 = 6;
  if (*(_BYTE *)(a1 + 42))
  {
    if (*(_DWORD *)(a1 + 1988))
      goto LABEL_23;
LABEL_11:
    v4 = *(_QWORD *)(a1 + 2048);
    if (v4 && (v5 = *(_DWORD *)(v4 + 40), v5 >= 1))
    {
      v6 = (_QWORD *)(v4 + 8 * v3);
      if (v5 == 6)
      {
        *(_QWORD *)(a1 + 232) = v6[14];
        *(_QWORD *)(a1 + 240) = v6[15];
        *(_QWORD *)(a1 + 248) = v6[16];
      }
      else
      {
        if (v5 != 4)
          sub_19C2210D4(45);
        *(_QWORD *)(a1 + 232) = v6[14];
      }
      *(_QWORD *)(a1 + 256) = v6[17];
      *(_QWORD *)(a1 + 264) = v6[18];
      *(_QWORD *)(a1 + 272) = v6[19];
    }
    else if (!*(_BYTE *)(a1 + 1985))
    {
      v7 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, 2 * v7);
      sub_19C100F64(&v508, v7, 0.1);
      v8 = v508;
      *(_QWORD *)(a1 + 232) = v508;
      v9 = (char **)(a1 + 2016);
      v10 = *(char **)(a1 + 2024);
      v11 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v10 >= v11)
      {
        v303 = *v9;
        v304 = v10 - *v9;
        v305 = v304 >> 3;
        v306 = (v304 >> 3) + 1;
        if (v306 >> 61)
          goto LABEL_545;
        v307 = v11 - (_QWORD)v303;
        if (v307 >> 2 > v306)
          v306 = v307 >> 2;
        if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8)
          v308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v308 = v306;
        if (v308)
        {
          if (v308 >> 61)
            goto LABEL_544;
          v309 = operator new(8 * v308);
        }
        else
        {
          v309 = 0;
        }
        v310 = &v309[8 * v305];
        v311 = &v309[8 * v308];
        *v310 = v8;
        v12 = v310 + 1;
        if (v10 != v303)
        {
          v312 = v10 - v303 - 8;
          if (v312 < 0x58)
            goto LABEL_549;
          if ((unint64_t)(v10 - v309 - v304) < 0x20)
            goto LABEL_549;
          v313 = (v312 >> 3) + 1;
          v314 = 8 * (v313 & 0x3FFFFFFFFFFFFFFCLL);
          v315 = &v10[-v314];
          v310 = (_QWORD *)((char *)v310 - v314);
          v316 = &v309[8 * v305 - 16];
          v317 = v10 - 16;
          v318 = v313 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v319 = *(_OWORD *)v317;
            *(v316 - 1) = *((_OWORD *)v317 - 1);
            *v316 = v319;
            v316 -= 2;
            v317 -= 32;
            v318 -= 4;
          }
          while (v318);
          v10 = v315;
          if (v313 != (v313 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_549:
            do
            {
              v320 = *((_QWORD *)v10 - 1);
              v10 -= 8;
              *--v310 = v320;
            }
            while (v10 != v303);
          }
          v10 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v310;
        *(_QWORD *)(a1 + 2024) = v12;
        *(_QWORD *)(a1 + 2032) = v311;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_QWORD *)v10 = v8;
        v12 = v10 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v12;
      v321 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, 2 * v321);
      sub_19C100F64(&v508, v321, 0.1);
      v322 = v508;
      *(_QWORD *)(a1 + 240) = v508;
      v323 = *(char **)(a1 + 2024);
      v324 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v323 >= v324)
      {
        v326 = *v9;
        v327 = v323 - *v9;
        v328 = v327 >> 3;
        v329 = (v327 >> 3) + 1;
        if (v329 >> 61)
          goto LABEL_545;
        v330 = v324 - (_QWORD)v326;
        if (v330 >> 2 > v329)
          v329 = v330 >> 2;
        if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFF8)
          v331 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v331 = v329;
        if (v331)
        {
          if (v331 >> 61)
            goto LABEL_544;
          v332 = operator new(8 * v331);
        }
        else
        {
          v332 = 0;
        }
        v333 = &v332[8 * v328];
        v334 = &v332[8 * v331];
        *v333 = v322;
        v325 = v333 + 1;
        if (v323 != v326)
        {
          v335 = v323 - v326 - 8;
          if (v335 < 0x58)
            goto LABEL_550;
          if ((unint64_t)(v323 - &v332[v327]) < 0x20)
            goto LABEL_550;
          v336 = (v335 >> 3) + 1;
          v337 = 8 * (v336 & 0x3FFFFFFFFFFFFFFCLL);
          v338 = &v323[-v337];
          v333 = (_QWORD *)((char *)v333 - v337);
          v339 = &v332[8 * v328 - 16];
          v340 = v323 - 16;
          v341 = v336 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v342 = *(_OWORD *)v340;
            *(v339 - 1) = *((_OWORD *)v340 - 1);
            *v339 = v342;
            v339 -= 2;
            v340 -= 32;
            v341 -= 4;
          }
          while (v341);
          v323 = v338;
          if (v336 != (v336 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_550:
            do
            {
              v343 = *((_QWORD *)v323 - 1);
              v323 -= 8;
              *--v333 = v343;
            }
            while (v323 != v326);
          }
          v323 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v333;
        *(_QWORD *)(a1 + 2024) = v325;
        *(_QWORD *)(a1 + 2032) = v334;
        if (v323)
          operator delete(v323);
      }
      else
      {
        *(_QWORD *)v323 = v322;
        v325 = v323 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v325;
      v344 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, 2 * v344);
      sub_19C100F64(&v508, v344, 0.1);
      v345 = v508;
      *(_QWORD *)(a1 + 248) = v508;
      v346 = *(char **)(a1 + 2024);
      v347 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v346 >= v347)
      {
        v349 = *v9;
        v350 = v346 - *v9;
        v351 = v350 >> 3;
        v352 = (v350 >> 3) + 1;
        if (v352 >> 61)
          goto LABEL_545;
        v353 = v347 - (_QWORD)v349;
        if (v353 >> 2 > v352)
          v352 = v353 >> 2;
        if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
          v354 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v354 = v352;
        if (v354)
        {
          if (v354 >> 61)
            goto LABEL_544;
          v355 = operator new(8 * v354);
        }
        else
        {
          v355 = 0;
        }
        v356 = &v355[8 * v351];
        v357 = &v355[8 * v354];
        *v356 = v345;
        v348 = v356 + 1;
        if (v346 != v349)
        {
          v358 = v346 - v349 - 8;
          if (v358 < 0x58)
            goto LABEL_551;
          if ((unint64_t)(v346 - &v355[v350]) < 0x20)
            goto LABEL_551;
          v359 = (v358 >> 3) + 1;
          v360 = 8 * (v359 & 0x3FFFFFFFFFFFFFFCLL);
          v361 = &v346[-v360];
          v356 = (_QWORD *)((char *)v356 - v360);
          v362 = &v355[8 * v351 - 16];
          v363 = v346 - 16;
          v364 = v359 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v365 = *(_OWORD *)v363;
            *(v362 - 1) = *((_OWORD *)v363 - 1);
            *v362 = v365;
            v362 -= 2;
            v363 -= 32;
            v364 -= 4;
          }
          while (v364);
          v346 = v361;
          if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_551:
            do
            {
              v366 = *((_QWORD *)v346 - 1);
              v346 -= 8;
              *--v356 = v366;
            }
            while (v346 != v349);
          }
          v346 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v356;
        *(_QWORD *)(a1 + 2024) = v348;
        *(_QWORD *)(a1 + 2032) = v357;
        if (v346)
          operator delete(v346);
      }
      else
      {
        *(_QWORD *)v346 = v345;
        v348 = v346 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v348;
      v367 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, (2 * v367));
      sub_19C100F64(&v508, v367, 0.1);
      v368 = v508;
      *(_QWORD *)(a1 + 256) = v508;
      v369 = *(char **)(a1 + 2024);
      v370 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v369 >= v370)
      {
        v372 = *v9;
        v373 = v369 - *v9;
        v374 = v373 >> 3;
        v375 = (v373 >> 3) + 1;
        if (v375 >> 61)
          goto LABEL_545;
        v376 = v370 - (_QWORD)v372;
        if (v376 >> 2 > v375)
          v375 = v376 >> 2;
        if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF8)
          v377 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v377 = v375;
        if (v377)
        {
          if (v377 >> 61)
            goto LABEL_544;
          v378 = operator new(8 * v377);
        }
        else
        {
          v378 = 0;
        }
        v379 = &v378[8 * v374];
        v380 = &v378[8 * v377];
        *v379 = v368;
        v371 = v379 + 1;
        if (v369 != v372)
        {
          v381 = v369 - v372 - 8;
          if (v381 < 0x58)
            goto LABEL_552;
          if ((unint64_t)(v369 - v378 - v373) < 0x20)
            goto LABEL_552;
          v382 = (v381 >> 3) + 1;
          v383 = 8 * (v382 & 0x3FFFFFFFFFFFFFFCLL);
          v384 = &v369[-v383];
          v379 = (_QWORD *)((char *)v379 - v383);
          v385 = &v378[8 * v374 - 16];
          v386 = v369 - 16;
          v387 = v382 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v388 = *(_OWORD *)v386;
            *(v385 - 1) = *((_OWORD *)v386 - 1);
            *v385 = v388;
            v385 -= 2;
            v386 -= 32;
            v387 -= 4;
          }
          while (v387);
          v369 = v384;
          if (v382 != (v382 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_552:
            do
            {
              v389 = *((_QWORD *)v369 - 1);
              v369 -= 8;
              *--v379 = v389;
            }
            while (v369 != v372);
          }
          v369 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v379;
        *(_QWORD *)(a1 + 2024) = v371;
        *(_QWORD *)(a1 + 2032) = v380;
        if (v369)
          operator delete(v369);
      }
      else
      {
        *(_QWORD *)v369 = v368;
        v371 = v369 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v371;
      v390 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, (2 * v390));
      sub_19C100F64(&v508, v390, 0.1);
      v391 = v508;
      *(_QWORD *)(a1 + 264) = v508;
      v392 = *(char **)(a1 + 2024);
      v393 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v392 >= v393)
      {
        v395 = *v9;
        v396 = v392 - *v9;
        v397 = v396 >> 3;
        v398 = (v396 >> 3) + 1;
        if (v398 >> 61)
          goto LABEL_545;
        v399 = v393 - (_QWORD)v395;
        if (v399 >> 2 > v398)
          v398 = v399 >> 2;
        if ((unint64_t)v399 >= 0x7FFFFFFFFFFFFFF8)
          v400 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v400 = v398;
        if (v400)
        {
          if (v400 >> 61)
            goto LABEL_544;
          v401 = operator new(8 * v400);
        }
        else
        {
          v401 = 0;
        }
        v402 = &v401[8 * v397];
        v403 = &v401[8 * v400];
        *v402 = v391;
        v394 = v402 + 1;
        if (v392 != v395)
        {
          v404 = v392 - v395 - 8;
          if (v404 < 0x58)
            goto LABEL_553;
          if ((unint64_t)(v392 - v401 - v396) < 0x20)
            goto LABEL_553;
          v405 = (v404 >> 3) + 1;
          v406 = 8 * (v405 & 0x3FFFFFFFFFFFFFFCLL);
          v407 = &v392[-v406];
          v402 = (_QWORD *)((char *)v402 - v406);
          v408 = &v401[8 * v397 - 16];
          v409 = v392 - 16;
          v410 = v405 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v411 = *(_OWORD *)v409;
            *(v408 - 1) = *((_OWORD *)v409 - 1);
            *v408 = v411;
            v408 -= 2;
            v409 -= 32;
            v410 -= 4;
          }
          while (v410);
          v392 = v407;
          if (v405 != (v405 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_553:
            do
            {
              v412 = *((_QWORD *)v392 - 1);
              v392 -= 8;
              *--v402 = v412;
            }
            while (v392 != v395);
          }
          v392 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v402;
        *(_QWORD *)(a1 + 2024) = v394;
        *(_QWORD *)(a1 + 2032) = v403;
        if (v392)
          operator delete(v392);
      }
      else
      {
        *(_QWORD *)v392 = v391;
        v394 = v392 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v394;
      v413 = *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      bzero(v508, (2 * v413));
      sub_19C100F64(&v508, v413, 0.1);
      v414 = v508;
      *(_QWORD *)(a1 + 272) = v508;
      v415 = *(char **)(a1 + 2024);
      v416 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v415 >= v416)
      {
        v418 = *v9;
        v419 = v415 - *v9;
        v420 = v419 >> 3;
        v421 = (v419 >> 3) + 1;
        if (v421 >> 61)
          goto LABEL_545;
        v422 = v416 - (_QWORD)v418;
        if (v422 >> 2 > v421)
          v421 = v422 >> 2;
        if ((unint64_t)v422 >= 0x7FFFFFFFFFFFFFF8)
          v423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v423 = v421;
        if (v423)
        {
          if (v423 >> 61)
            goto LABEL_544;
          v424 = operator new(8 * v423);
        }
        else
        {
          v424 = 0;
        }
        v425 = &v424[8 * v420];
        v426 = &v424[8 * v423];
        *v425 = v414;
        v417 = v425 + 1;
        if (v415 != v418)
        {
          v427 = v415 - v418 - 8;
          if (v427 < 0x58)
            goto LABEL_554;
          if ((unint64_t)(v415 - v424 - v419) < 0x20)
            goto LABEL_554;
          v428 = (v427 >> 3) + 1;
          v429 = 8 * (v428 & 0x3FFFFFFFFFFFFFFCLL);
          v430 = &v415[-v429];
          v425 = (_QWORD *)((char *)v425 - v429);
          v431 = &v424[8 * v420 - 16];
          v432 = v415 - 16;
          v433 = v428 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v434 = *(_OWORD *)v432;
            *(v431 - 1) = *((_OWORD *)v432 - 1);
            *v431 = v434;
            v431 -= 2;
            v432 -= 32;
            v433 -= 4;
          }
          while (v433);
          v415 = v430;
          if (v428 != (v428 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_554:
            do
            {
              v435 = *((_QWORD *)v415 - 1);
              v415 -= 8;
              *--v425 = v435;
            }
            while (v415 != v418);
          }
          v415 = *v9;
        }
        *(_QWORD *)(a1 + 2016) = v425;
        *(_QWORD *)(a1 + 2024) = v417;
        *(_QWORD *)(a1 + 2032) = v426;
        if (v415)
          operator delete(v415);
      }
      else
      {
        *(_QWORD *)v415 = v414;
        v417 = v415 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v417;
      if (*(_BYTE *)(a1 + 1985))
        goto LABEL_22;
LABEL_473:
      v436 = *(_QWORD *)(a1 + 2048);
      if (!v436)
        goto LABEL_22;
      if (*(_BYTE *)(v436 + 244))
      {
        v437 = (_QWORD *)(v436 + 8 * v2);
        *(_QWORD *)(a1 + 280) = v437[31];
        *(_QWORD *)(a1 + 288) = v437[32];
        *(_QWORD *)(a1 + 296) = v437[33];
        goto LABEL_22;
      }
      v438 = *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      sub_19C100F64(&v508, v438, 0.1);
      v439 = v508;
      *(_QWORD *)(a1 + 280) = v508;
      v440 = (char **)(a1 + 2016);
      v441 = *(char **)(a1 + 2024);
      v442 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v441 >= v442)
      {
        v444 = *v440;
        v445 = v441 - *v440;
        v446 = v445 >> 3;
        v447 = (v445 >> 3) + 1;
        if (v447 >> 61)
          goto LABEL_545;
        v448 = v442 - (_QWORD)v444;
        if (v448 >> 2 > v447)
          v447 = v448 >> 2;
        if ((unint64_t)v448 >= 0x7FFFFFFFFFFFFFF8)
          v449 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v449 = v447;
        if (v449)
        {
          if (v449 >> 61)
            goto LABEL_544;
          v450 = operator new(8 * v449);
        }
        else
        {
          v450 = 0;
        }
        v451 = &v450[8 * v446];
        v452 = &v450[8 * v449];
        *v451 = v439;
        v443 = v451 + 1;
        if (v441 != v444)
        {
          v453 = v441 - v444 - 8;
          if (v453 < 0x58)
            goto LABEL_555;
          if ((unint64_t)(v441 - &v450[v445]) < 0x20)
            goto LABEL_555;
          v454 = (v453 >> 3) + 1;
          v455 = 8 * (v454 & 0x3FFFFFFFFFFFFFFCLL);
          v456 = &v441[-v455];
          v451 = (_QWORD *)((char *)v451 - v455);
          v457 = &v450[8 * v446 - 16];
          v458 = v441 - 16;
          v459 = v454 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v460 = *(_OWORD *)v458;
            *(v457 - 1) = *((_OWORD *)v458 - 1);
            *v457 = v460;
            v457 -= 2;
            v458 -= 32;
            v459 -= 4;
          }
          while (v459);
          v441 = v456;
          if (v454 != (v454 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_555:
            do
            {
              v461 = *((_QWORD *)v441 - 1);
              v441 -= 8;
              *--v451 = v461;
            }
            while (v441 != v444);
          }
          v441 = *v440;
        }
        *(_QWORD *)(a1 + 2016) = v451;
        *(_QWORD *)(a1 + 2024) = v443;
        *(_QWORD *)(a1 + 2032) = v452;
        if (v441)
          operator delete(v441);
      }
      else
      {
        *(_QWORD *)v441 = v439;
        v443 = v441 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v443;
      v462 = *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      sub_19C100F64(&v508, v462, 0.1);
      v463 = v508;
      *(_QWORD *)(a1 + 288) = v508;
      v464 = *(char **)(a1 + 2024);
      v465 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v464 >= v465)
      {
        v467 = *v440;
        v468 = v464 - *v440;
        v469 = v468 >> 3;
        v470 = (v468 >> 3) + 1;
        if (v470 >> 61)
          goto LABEL_545;
        v471 = v465 - (_QWORD)v467;
        if (v471 >> 2 > v470)
          v470 = v471 >> 2;
        if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFF8)
          v472 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v472 = v470;
        if (v472)
        {
          if (v472 >> 61)
            goto LABEL_544;
          v473 = operator new(8 * v472);
        }
        else
        {
          v473 = 0;
        }
        v474 = &v473[8 * v469];
        v475 = &v473[8 * v472];
        *v474 = v463;
        v466 = v474 + 1;
        if (v464 != v467)
        {
          v476 = v464 - v467 - 8;
          if (v476 < 0x58)
            goto LABEL_556;
          if ((unint64_t)(v464 - v473 - v468) < 0x20)
            goto LABEL_556;
          v477 = (v476 >> 3) + 1;
          v478 = 8 * (v477 & 0x3FFFFFFFFFFFFFFCLL);
          v479 = &v464[-v478];
          v474 = (_QWORD *)((char *)v474 - v478);
          v480 = &v473[8 * v469 - 16];
          v481 = v464 - 16;
          v482 = v477 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v483 = *(_OWORD *)v481;
            *(v480 - 1) = *((_OWORD *)v481 - 1);
            *v480 = v483;
            v480 -= 2;
            v481 -= 32;
            v482 -= 4;
          }
          while (v482);
          v464 = v479;
          if (v477 != (v477 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_556:
            do
            {
              v484 = *((_QWORD *)v464 - 1);
              v464 -= 8;
              *--v474 = v484;
            }
            while (v464 != v467);
          }
          v464 = *v440;
        }
        *(_QWORD *)(a1 + 2016) = v474;
        *(_QWORD *)(a1 + 2024) = v466;
        *(_QWORD *)(a1 + 2032) = v475;
        if (v464)
          operator delete(v464);
      }
      else
      {
        *(_QWORD *)v464 = v463;
        v466 = v464 + 8;
      }
      *(_QWORD *)(a1 + 2024) = v466;
      v485 = *(_DWORD *)(a1 + 52);
      v508 = (void *)operator new[]();
      sub_19C100F64(&v508, v485, 0.1);
      v486 = v508;
      *(_QWORD *)(a1 + 296) = v508;
      v487 = *(char **)(a1 + 2024);
      v488 = *(_QWORD *)(a1 + 2032);
      if ((unint64_t)v487 < v488)
      {
        *(_QWORD *)v487 = v486;
        v489 = v487 + 8;
LABEL_542:
        *(_QWORD *)(a1 + 2024) = v489;
        goto LABEL_22;
      }
      v490 = *v440;
      v491 = v487 - *v440;
      v492 = v491 >> 3;
      v493 = (v491 >> 3) + 1;
      if (!(v493 >> 61))
      {
        v494 = v488 - (_QWORD)v490;
        if (v494 >> 2 > v493)
          v493 = v494 >> 2;
        if ((unint64_t)v494 >= 0x7FFFFFFFFFFFFFF8)
          v495 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v495 = v493;
        if (v495)
        {
          if (v495 >> 61)
            goto LABEL_544;
          v496 = operator new(8 * v495);
        }
        else
        {
          v496 = 0;
        }
        v497 = &v496[8 * v492];
        v498 = &v496[8 * v495];
        *v497 = v486;
        v489 = v497 + 1;
        if (v487 != v490)
        {
          v499 = v487 - v490 - 8;
          if (v499 < 0x58)
            goto LABEL_557;
          if ((unint64_t)(v487 - v496 - v491) < 0x20)
            goto LABEL_557;
          v500 = (v499 >> 3) + 1;
          v501 = 8 * (v500 & 0x3FFFFFFFFFFFFFFCLL);
          v502 = &v487[-v501];
          v497 = (_QWORD *)((char *)v497 - v501);
          v503 = &v496[8 * v492 - 16];
          v504 = v487 - 16;
          v505 = v500 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v506 = *(_OWORD *)v504;
            *(v503 - 1) = *((_OWORD *)v504 - 1);
            *v503 = v506;
            v503 -= 2;
            v504 -= 32;
            v505 -= 4;
          }
          while (v505);
          v487 = v502;
          if (v500 != (v500 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_557:
            do
            {
              v507 = *((_QWORD *)v487 - 1);
              v487 -= 8;
              *--v497 = v507;
            }
            while (v487 != v490);
          }
          v487 = *v440;
        }
        *(_QWORD *)(a1 + 2016) = v497;
        *(_QWORD *)(a1 + 2024) = v489;
        *(_QWORD *)(a1 + 2032) = v498;
        if (v487)
          operator delete(v487);
        goto LABEL_542;
      }
LABEL_545:
      sub_19C07DA0C();
    }
    if (*(_BYTE *)(a1 + 1985))
    {
LABEL_22:
      *(_QWORD *)(a1 + 304) = a1 + 232;
      *(_QWORD *)(a1 + 312) = a1 + 240;
      *(_QWORD *)(a1 + 320) = a1 + 248;
      *(_QWORD *)(a1 + 328) = a1 + 256;
      *(_QWORD *)(a1 + 336) = a1 + 264;
      *(_QWORD *)(a1 + 344) = a1 + 272;
      *(_QWORD *)(a1 + 352) = a1 + 280;
      *(_QWORD *)(a1 + 360) = a1 + 288;
      *(_QWORD *)(a1 + 368) = a1 + 296;
      goto LABEL_23;
    }
    goto LABEL_473;
  }
  if (*(_BYTE *)(a1 + 2040))
    v3 = 6;
  else
    v3 = 0;
  if (*(_BYTE *)(a1 + 2040))
    v2 = 3;
  else
    v2 = 0;
  if (!*(_DWORD *)(a1 + 1988))
    goto LABEL_11;
LABEL_23:
  v13 = *(unsigned int *)(a1 + 52);
  v14 = (void *)operator new[]();
  v15 = v14;
  if ((int)v13 >= 1)
    bzero(v14, 4 * v13);
  *(_QWORD *)(a1 + 536) = v15;
  v16 = (char **)(a1 + 1992);
  v17 = *(char **)(a1 + 2000);
  v18 = *(_QWORD *)(a1 + 2008);
  if ((unint64_t)v17 < v18)
  {
    *(_QWORD *)v17 = v15;
    v19 = (uint64_t)(v17 + 8);
    goto LABEL_47;
  }
  v20 = *v16;
  v21 = v17 - *v16;
  v22 = v21 >> 3;
  v23 = (v21 >> 3) + 1;
  if (v23 >> 61)
    goto LABEL_543;
  v24 = v18 - (_QWORD)v20;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      goto LABEL_544;
    v26 = operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v15;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)(v17 - v20);
    if (v17 == v20)
      goto LABEL_45;
    goto LABEL_38;
  }
  v26 = 0;
  v27 = (_QWORD *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v15;
  v19 = 8 * v22 + 8;
  v29 = (char *)(v17 - v20);
  if (v17 != v20)
  {
LABEL_38:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_558;
    if ((unint64_t)(v17 - v26 - v21) < 0x20)
      goto LABEL_558;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v17[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v17 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v17 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_558:
      do
      {
        v38 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v27 = v38;
      }
      while (v17 != v20);
    }
    v17 = *v16;
  }
LABEL_45:
  *(_QWORD *)(a1 + 1992) = v27;
  *(_QWORD *)(a1 + 2000) = v19;
  *(_QWORD *)(a1 + 2008) = v28;
  if (v17)
    operator delete(v17);
LABEL_47:
  *(_QWORD *)(a1 + 2000) = v19;
  v39 = *(unsigned int *)(a1 + 52);
  v40 = (void *)operator new[]();
  v41 = v40;
  if ((int)v39 >= 1)
    bzero(v40, 4 * v39);
  *(_QWORD *)(a1 + 544) = v41;
  v42 = *(char **)(a1 + 2000);
  v43 = *(_QWORD *)(a1 + 2008);
  if ((unint64_t)v42 < v43)
  {
    *(_QWORD *)v42 = v41;
    v44 = (uint64_t)(v42 + 8);
    goto LABEL_71;
  }
  v45 = *v16;
  v46 = v42 - *v16;
  v47 = v46 >> 3;
  v48 = (v46 >> 3) + 1;
  if (v48 >> 61)
LABEL_543:
    sub_19C07DA0C();
  v49 = v43 - (_QWORD)v45;
  if (v49 >> 2 > v48)
    v48 = v49 >> 2;
  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
    v50 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v50 = v48;
  if (!v50)
  {
    v51 = 0;
    v52 = (_QWORD *)(8 * v47);
    v53 = 0;
    *(_QWORD *)(8 * v47) = v41;
    v44 = 8 * v47 + 8;
    v54 = (char *)(v42 - v45);
    if (v42 == v45)
      goto LABEL_69;
LABEL_62:
    v55 = (unint64_t)(v54 - 8);
    if (v55 < 0x58)
      goto LABEL_559;
    if ((unint64_t)(v42 - v51 - v46) < 0x20)
      goto LABEL_559;
    v56 = (v55 >> 3) + 1;
    v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    v58 = &v42[-v57];
    v52 = (_QWORD *)((char *)v52 - v57);
    v59 = &v51[8 * v47 - 16];
    v60 = v42 - 16;
    v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 4;
    }
    while (v61);
    v42 = v58;
    if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_559:
      do
      {
        v63 = *((_QWORD *)v42 - 1);
        v42 -= 8;
        *--v52 = v63;
      }
      while (v42 != v45);
    }
    v42 = *v16;
    goto LABEL_69;
  }
  if (v50 >> 61)
LABEL_544:
    sub_19C07C7FC();
  v51 = operator new(8 * v50);
  v52 = &v51[8 * v47];
  v53 = &v51[8 * v50];
  *v52 = v41;
  v44 = (uint64_t)(v52 + 1);
  v54 = (char *)(v42 - v45);
  if (v42 != v45)
    goto LABEL_62;
LABEL_69:
  *(_QWORD *)(a1 + 1992) = v52;
  *(_QWORD *)(a1 + 2000) = v44;
  *(_QWORD *)(a1 + 2008) = v53;
  if (v42)
    operator delete(v42);
LABEL_71:
  v64 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 2000) = v44;
  v65 = dword_1EE418968;
  v66 = (*(_QWORD *)(a1 + 96) - v64) >> 3;
  if (dword_1EE418968 <= v66)
  {
    if (dword_1EE418968 < v66)
      *(_QWORD *)(a1 + 96) = v64 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 88), dword_1EE418968 - v66);
    v65 = dword_1EE418968;
  }
  v67 = *(_QWORD *)(a1 + 112);
  v68 = (*(_QWORD *)(a1 + 120) - v67) >> 3;
  if (v65 <= v68)
  {
    if (v65 < v68)
      *(_QWORD *)(a1 + 120) = v67 + 8 * v65;
  }
  else
  {
    sub_19C098930((void **)(a1 + 112), v65 - v68);
    v65 = dword_1EE418968;
  }
  v69 = *(_QWORD *)(a1 + 64);
  v70 = (*(_QWORD *)(a1 + 72) - v69) >> 3;
  if (v65 <= v70)
  {
    if (v65 < v70)
      *(_QWORD *)(a1 + 72) = v69 + 8 * v65;
  }
  else
  {
    sub_19C098930((void **)(a1 + 64), v65 - v70);
    v65 = dword_1EE418968;
  }
  v72 = *(_QWORD *)(a1 + 208);
  v71 = *(_QWORD *)(a1 + 216);
  v73 = 0xAAAAAAAAAAAAAAABLL * ((v71 - v72) >> 3);
  if (v65 <= v73)
  {
    if (v65 < v73)
    {
      v74 = v72 + 24 * (int)v65;
      if (v71 != v74)
      {
        v75 = *(_QWORD *)(a1 + 216);
        do
        {
          v77 = *(void **)(v75 - 24);
          v75 -= 24;
          v76 = v77;
          if (v77)
          {
            *(_QWORD *)(v71 - 16) = v76;
            operator delete(v76);
          }
          v71 = v75;
        }
        while (v75 != v74);
      }
      *(_QWORD *)(a1 + 216) = v74;
    }
  }
  else
  {
    sub_19C167E70(a1 + 208, v65 - v73);
  }
  v78 = dword_1EE418968;
  v79 = dword_1EE418968;
  v80 = *(_QWORD *)(a1 + 448);
  v81 = (*(_QWORD *)(a1 + 456) - v80) >> 3;
  if (dword_1EE418968 <= v81)
  {
    if (dword_1EE418968 < v81)
      *(_QWORD *)(a1 + 456) = v80 + 8 * dword_1EE418968;
  }
  else
  {
    sub_19C098930((void **)(a1 + 448), dword_1EE418968 - v81);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v82 = *(_QWORD *)(a1 + 472);
  v83 = (*(_QWORD *)(a1 + 480) - v82) >> 3;
  if (v79 <= v83)
  {
    if (v79 < v83)
      *(_QWORD *)(a1 + 480) = v82 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 472), v79 - v83);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v84 = *(_QWORD *)(a1 + 496);
  v85 = (*(_QWORD *)(a1 + 504) - v84) >> 3;
  if (v79 <= v85)
  {
    if (v79 < v85)
      *(_QWORD *)(a1 + 504) = v84 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 496), v79 - v85);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v86 = *(_QWORD *)(a1 + 376);
  v87 = (*(_QWORD *)(a1 + 384) - v86) >> 3;
  if (v79 <= v87)
  {
    if (v79 < v87)
      *(_QWORD *)(a1 + 384) = v86 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 376), v79 - v87);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v88 = *(_QWORD *)(a1 + 400);
  v89 = (*(_QWORD *)(a1 + 408) - v88) >> 3;
  if (v79 <= v89)
  {
    if (v79 < v89)
      *(_QWORD *)(a1 + 408) = v88 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 400), v79 - v89);
    v78 = dword_1EE418968;
    v79 = dword_1EE418968;
  }
  v90 = *(_QWORD *)(a1 + 424);
  v91 = (*(_QWORD *)(a1 + 432) - v90) >> 3;
  if (v79 <= v91)
  {
    if (v79 < v91)
      *(_QWORD *)(a1 + 432) = v90 + 8 * v79;
  }
  else
  {
    sub_19C098930((void **)(a1 + 424), v79 - v91);
    v78 = dword_1EE418968;
  }
  if (v78 >= 1)
  {
    v92 = 0;
    while (1)
    {
      v94 = *(unsigned int *)(a1 + 48);
      v95 = (void *)operator new[]();
      v96 = v95;
      if ((int)v94 >= 1)
        bzero(v95, 4 * v94);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v92) = v96;
      v97 = *(char **)(a1 + 2000);
      v98 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v97 < v98)
      {
        *(_QWORD *)v97 = v96;
        v99 = (uint64_t)(v97 + 8);
        goto LABEL_144;
      }
      v100 = *v16;
      v101 = v97 - *v16;
      v102 = v101 >> 3;
      v103 = (v101 >> 3) + 1;
      if (v103 >> 61)
        goto LABEL_543;
      v104 = v98 - (_QWORD)v100;
      if (v104 >> 2 > v103)
        v103 = v104 >> 2;
      v105 = (unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v103;
      if (v105)
        break;
      v106 = 0;
      v107 = (_QWORD *)(8 * v102);
      *(_QWORD *)(8 * v102) = v96;
      v99 = 8 * v102 + 8;
      if (v97 != v100)
        goto LABEL_135;
LABEL_142:
      *(_QWORD *)(a1 + 1992) = v107;
      *(_QWORD *)(a1 + 2000) = v99;
      *(_QWORD *)(a1 + 2008) = &v106[8 * v105];
      if (v97)
        operator delete(v97);
LABEL_144:
      *(_QWORD *)(a1 + 2000) = v99;
      v117 = (_QWORD *)(*(_QWORD *)(a1 + 208) + 24 * v92);
      v118 = 1;
      if (*(_BYTE *)(a1 + 40))
        v118 = 2;
      v119 = (uint64_t)(v117[1] - *v117) >> 2;
      if (v118 <= v119)
      {
        if (v118 < v119)
          v117[1] = *v117 + 4 * v118;
      }
      else
      {
        sub_19C101928((uint64_t)v117, v118 - v119);
      }
      v120 = *(unsigned int *)(a1 + 52);
      v121 = (void *)operator new[]();
      v122 = v121;
      if ((int)v120 >= 1)
        bzero(v121, 4 * v120);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v92) = v122;
      v123 = *(char **)(a1 + 2000);
      v124 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v123 < v124)
      {
        *(_QWORD *)v123 = v122;
        v125 = (uint64_t)(v123 + 8);
        goto LABEL_174;
      }
      v126 = *v16;
      v127 = v123 - *v16;
      v128 = v127 >> 3;
      v129 = (v127 >> 3) + 1;
      if (v129 >> 61)
        goto LABEL_543;
      v130 = v124 - (_QWORD)v126;
      if (v130 >> 2 > v129)
        v129 = v130 >> 2;
      if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8)
        v131 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v131 = v129;
      if (v131)
      {
        if (v131 >> 61)
          goto LABEL_544;
        v132 = operator new(8 * v131);
        v133 = &v132[8 * v128];
        *v133 = v122;
        v125 = (uint64_t)(v133 + 1);
        if (v123 == v126)
          goto LABEL_172;
LABEL_165:
        v134 = v123 - 8 - v126;
        if (v134 < 0x58)
          goto LABEL_560;
        if ((unint64_t)(v123 - &v132[v127]) < 0x20)
          goto LABEL_560;
        v135 = (v134 >> 3) + 1;
        v136 = 8 * (v135 & 0x3FFFFFFFFFFFFFFCLL);
        v137 = &v123[-v136];
        v133 = (_QWORD *)((char *)v133 - v136);
        v138 = &v132[8 * v128 - 16];
        v139 = v123 - 16;
        v140 = v135 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v141 = *(_OWORD *)v139;
          *(v138 - 1) = *((_OWORD *)v139 - 1);
          *v138 = v141;
          v138 -= 2;
          v139 -= 32;
          v140 -= 4;
        }
        while (v140);
        v123 = v137;
        if (v135 != (v135 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_560:
          do
          {
            v142 = *((_QWORD *)v123 - 1);
            v123 -= 8;
            *--v133 = v142;
          }
          while (v123 != v126);
        }
        v123 = *v16;
        goto LABEL_172;
      }
      v132 = 0;
      v133 = (_QWORD *)(8 * v128);
      *(_QWORD *)(8 * v128) = v122;
      v125 = 8 * v128 + 8;
      if (v123 != v126)
        goto LABEL_165;
LABEL_172:
      *(_QWORD *)(a1 + 1992) = v133;
      *(_QWORD *)(a1 + 2000) = v125;
      *(_QWORD *)(a1 + 2008) = &v132[8 * v131];
      if (v123)
        operator delete(v123);
LABEL_174:
      *(_QWORD *)(a1 + 2000) = v125;
      v143 = *(unsigned int *)(a1 + 52);
      v144 = (void *)operator new[]();
      v145 = v144;
      if ((int)v143 >= 1)
        bzero(v144, 4 * v143);
      *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * v92) = v145;
      v146 = *(char **)(a1 + 2000);
      v147 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v146 < v147)
      {
        *(_QWORD *)v146 = v145;
        v148 = (uint64_t)(v146 + 8);
        goto LABEL_198;
      }
      v149 = *v16;
      v150 = v146 - *v16;
      v151 = v150 >> 3;
      v152 = (v150 >> 3) + 1;
      if (v152 >> 61)
        goto LABEL_543;
      v153 = v147 - (_QWORD)v149;
      if (v153 >> 2 > v152)
        v152 = v153 >> 2;
      if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
        v154 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v154 = v152;
      if (v154)
      {
        if (v154 >> 61)
          goto LABEL_544;
        v155 = operator new(8 * v154);
        v156 = &v155[8 * v151];
        *v156 = v145;
        v148 = (uint64_t)(v156 + 1);
        if (v146 == v149)
          goto LABEL_196;
LABEL_189:
        v157 = v146 - 8 - v149;
        if (v157 < 0x58)
          goto LABEL_561;
        if ((unint64_t)(v146 - &v155[v150]) < 0x20)
          goto LABEL_561;
        v158 = (v157 >> 3) + 1;
        v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
        v160 = &v146[-v159];
        v156 = (_QWORD *)((char *)v156 - v159);
        v161 = &v155[8 * v151 - 16];
        v162 = v146 - 16;
        v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v164 = *(_OWORD *)v162;
          *(v161 - 1) = *((_OWORD *)v162 - 1);
          *v161 = v164;
          v161 -= 2;
          v162 -= 32;
          v163 -= 4;
        }
        while (v163);
        v146 = v160;
        if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_561:
          do
          {
            v165 = *((_QWORD *)v146 - 1);
            v146 -= 8;
            *--v156 = v165;
          }
          while (v146 != v149);
        }
        v146 = *v16;
        goto LABEL_196;
      }
      v155 = 0;
      v156 = (_QWORD *)(8 * v151);
      *(_QWORD *)(8 * v151) = v145;
      v148 = 8 * v151 + 8;
      if (v146 != v149)
        goto LABEL_189;
LABEL_196:
      *(_QWORD *)(a1 + 1992) = v156;
      *(_QWORD *)(a1 + 2000) = v148;
      *(_QWORD *)(a1 + 2008) = &v155[8 * v154];
      if (v146)
        operator delete(v146);
LABEL_198:
      *(_QWORD *)(a1 + 2000) = v148;
      v166 = *(unsigned int *)(a1 + 52);
      v167 = (void *)operator new[]();
      v168 = v167;
      if ((int)v166 >= 1)
        bzero(v167, 4 * v166);
      *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * v92) = v168;
      v169 = *(char **)(a1 + 2000);
      v170 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v169 < v170)
      {
        *(_QWORD *)v169 = v168;
        v171 = (uint64_t)(v169 + 8);
        goto LABEL_222;
      }
      v172 = *v16;
      v173 = v169 - *v16;
      v174 = v173 >> 3;
      v175 = (v173 >> 3) + 1;
      if (v175 >> 61)
        goto LABEL_543;
      v176 = v170 - (_QWORD)v172;
      if (v176 >> 2 > v175)
        v175 = v176 >> 2;
      if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8)
        v177 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v177 = v175;
      if (v177)
      {
        if (v177 >> 61)
          goto LABEL_544;
        v178 = operator new(8 * v177);
        v179 = &v178[8 * v174];
        *v179 = v168;
        v171 = (uint64_t)(v179 + 1);
        if (v169 == v172)
          goto LABEL_220;
LABEL_213:
        v180 = v169 - 8 - v172;
        if (v180 < 0x58)
          goto LABEL_562;
        if ((unint64_t)(v169 - &v178[v173]) < 0x20)
          goto LABEL_562;
        v181 = (v180 >> 3) + 1;
        v182 = 8 * (v181 & 0x3FFFFFFFFFFFFFFCLL);
        v183 = &v169[-v182];
        v179 = (_QWORD *)((char *)v179 - v182);
        v184 = &v178[8 * v174 - 16];
        v185 = v169 - 16;
        v186 = v181 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v187 = *(_OWORD *)v185;
          *(v184 - 1) = *((_OWORD *)v185 - 1);
          *v184 = v187;
          v184 -= 2;
          v185 -= 32;
          v186 -= 4;
        }
        while (v186);
        v169 = v183;
        if (v181 != (v181 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_562:
          do
          {
            v188 = *((_QWORD *)v169 - 1);
            v169 -= 8;
            *--v179 = v188;
          }
          while (v169 != v172);
        }
        v169 = *v16;
        goto LABEL_220;
      }
      v178 = 0;
      v179 = (_QWORD *)(8 * v174);
      *(_QWORD *)(8 * v174) = v168;
      v171 = 8 * v174 + 8;
      if (v169 != v172)
        goto LABEL_213;
LABEL_220:
      *(_QWORD *)(a1 + 1992) = v179;
      *(_QWORD *)(a1 + 2000) = v171;
      *(_QWORD *)(a1 + 2008) = &v178[8 * v177];
      if (v169)
        operator delete(v169);
LABEL_222:
      *(_QWORD *)(a1 + 2000) = v171;
      v189 = *(unsigned int *)(a1 + 52);
      v190 = (void *)operator new[]();
      v191 = v190;
      if ((int)v189 >= 1)
        bzero(v190, 4 * v189);
      *(_QWORD *)(*(_QWORD *)(a1 + 424) + 8 * v92) = v191;
      v192 = *(char **)(a1 + 2000);
      v193 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v192 < v193)
      {
        *(_QWORD *)v192 = v191;
        v194 = (uint64_t)(v192 + 8);
        goto LABEL_246;
      }
      v195 = *v16;
      v196 = v192 - *v16;
      v197 = v196 >> 3;
      v198 = (v196 >> 3) + 1;
      if (v198 >> 61)
        goto LABEL_543;
      v199 = v193 - (_QWORD)v195;
      if (v199 >> 2 > v198)
        v198 = v199 >> 2;
      if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8)
        v200 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v200 = v198;
      if (v200)
      {
        if (v200 >> 61)
          goto LABEL_544;
        v201 = operator new(8 * v200);
        v202 = &v201[8 * v197];
        *v202 = v191;
        v194 = (uint64_t)(v202 + 1);
        if (v192 == v195)
          goto LABEL_244;
LABEL_237:
        v203 = v192 - 8 - v195;
        if (v203 < 0x58)
          goto LABEL_563;
        if ((unint64_t)(v192 - &v201[v196]) < 0x20)
          goto LABEL_563;
        v204 = (v203 >> 3) + 1;
        v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
        v206 = &v192[-v205];
        v202 = (_QWORD *)((char *)v202 - v205);
        v207 = &v201[8 * v197 - 16];
        v208 = v192 - 16;
        v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v210 = *(_OWORD *)v208;
          *(v207 - 1) = *((_OWORD *)v208 - 1);
          *v207 = v210;
          v207 -= 2;
          v208 -= 32;
          v209 -= 4;
        }
        while (v209);
        v192 = v206;
        if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_563:
          do
          {
            v211 = *((_QWORD *)v192 - 1);
            v192 -= 8;
            *--v202 = v211;
          }
          while (v192 != v195);
        }
        v192 = *v16;
        goto LABEL_244;
      }
      v201 = 0;
      v202 = (_QWORD *)(8 * v197);
      *(_QWORD *)(8 * v197) = v191;
      v194 = 8 * v197 + 8;
      if (v192 != v195)
        goto LABEL_237;
LABEL_244:
      *(_QWORD *)(a1 + 1992) = v202;
      *(_QWORD *)(a1 + 2000) = v194;
      *(_QWORD *)(a1 + 2008) = &v201[8 * v200];
      if (v192)
        operator delete(v192);
LABEL_246:
      *(_QWORD *)(a1 + 2000) = v194;
      v212 = *(unsigned int *)(a1 + 52);
      v213 = (void *)operator new[]();
      v214 = v213;
      if ((int)v212 >= 1)
        bzero(v213, 4 * v212);
      *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8 * v92) = v214;
      v215 = *(char **)(a1 + 2000);
      v216 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v215 < v216)
      {
        *(_QWORD *)v215 = v214;
        v217 = (uint64_t)(v215 + 8);
        goto LABEL_270;
      }
      v218 = *v16;
      v219 = v215 - *v16;
      v220 = v219 >> 3;
      v221 = (v219 >> 3) + 1;
      if (v221 >> 61)
        goto LABEL_543;
      v222 = v216 - (_QWORD)v218;
      if (v222 >> 2 > v221)
        v221 = v222 >> 2;
      if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8)
        v223 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v223 = v221;
      if (v223)
      {
        if (v223 >> 61)
          goto LABEL_544;
        v224 = operator new(8 * v223);
        v225 = &v224[8 * v220];
        *v225 = v214;
        v217 = (uint64_t)(v225 + 1);
        if (v215 == v218)
          goto LABEL_268;
LABEL_261:
        v226 = v215 - 8 - v218;
        if (v226 < 0x58)
          goto LABEL_564;
        if ((unint64_t)(v215 - &v224[v219]) < 0x20)
          goto LABEL_564;
        v227 = (v226 >> 3) + 1;
        v228 = 8 * (v227 & 0x3FFFFFFFFFFFFFFCLL);
        v229 = &v215[-v228];
        v225 = (_QWORD *)((char *)v225 - v228);
        v230 = &v224[8 * v220 - 16];
        v231 = v215 - 16;
        v232 = v227 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v233 = *(_OWORD *)v231;
          *(v230 - 1) = *((_OWORD *)v231 - 1);
          *v230 = v233;
          v230 -= 2;
          v231 -= 32;
          v232 -= 4;
        }
        while (v232);
        v215 = v229;
        if (v227 != (v227 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_564:
          do
          {
            v234 = *((_QWORD *)v215 - 1);
            v215 -= 8;
            *--v225 = v234;
          }
          while (v215 != v218);
        }
        v215 = *v16;
        goto LABEL_268;
      }
      v224 = 0;
      v225 = (_QWORD *)(8 * v220);
      *(_QWORD *)(8 * v220) = v214;
      v217 = 8 * v220 + 8;
      if (v215 != v218)
        goto LABEL_261;
LABEL_268:
      *(_QWORD *)(a1 + 1992) = v225;
      *(_QWORD *)(a1 + 2000) = v217;
      *(_QWORD *)(a1 + 2008) = &v224[8 * v223];
      if (v215)
        operator delete(v215);
LABEL_270:
      *(_QWORD *)(a1 + 2000) = v217;
      v235 = *(unsigned int *)(a1 + 52);
      v236 = (void *)operator new[]();
      v237 = v236;
      if ((int)v235 >= 1)
        bzero(v236, 4 * v235);
      *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8 * v92) = v237;
      v238 = *(char **)(a1 + 2000);
      v239 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v238 < v239)
      {
        *(_QWORD *)v238 = v237;
        v240 = (uint64_t)(v238 + 8);
        goto LABEL_294;
      }
      v241 = *v16;
      v242 = v238 - *v16;
      v243 = v242 >> 3;
      v244 = (v242 >> 3) + 1;
      if (v244 >> 61)
        goto LABEL_543;
      v245 = v239 - (_QWORD)v241;
      if (v245 >> 2 > v244)
        v244 = v245 >> 2;
      if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
        v246 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v246 = v244;
      if (v246)
      {
        if (v246 >> 61)
          goto LABEL_544;
        v247 = operator new(8 * v246);
        v248 = &v247[8 * v243];
        *v248 = v237;
        v240 = (uint64_t)(v248 + 1);
        if (v238 == v241)
          goto LABEL_292;
LABEL_285:
        v249 = v238 - 8 - v241;
        if (v249 < 0x58)
          goto LABEL_565;
        if ((unint64_t)(v238 - &v247[v242]) < 0x20)
          goto LABEL_565;
        v250 = (v249 >> 3) + 1;
        v251 = 8 * (v250 & 0x3FFFFFFFFFFFFFFCLL);
        v252 = &v238[-v251];
        v248 = (_QWORD *)((char *)v248 - v251);
        v253 = &v247[8 * v243 - 16];
        v254 = v238 - 16;
        v255 = v250 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v256 = *(_OWORD *)v254;
          *(v253 - 1) = *((_OWORD *)v254 - 1);
          *v253 = v256;
          v253 -= 2;
          v254 -= 32;
          v255 -= 4;
        }
        while (v255);
        v238 = v252;
        if (v250 != (v250 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_565:
          do
          {
            v257 = *((_QWORD *)v238 - 1);
            v238 -= 8;
            *--v248 = v257;
          }
          while (v238 != v241);
        }
        v238 = *v16;
        goto LABEL_292;
      }
      v247 = 0;
      v248 = (_QWORD *)(8 * v243);
      *(_QWORD *)(8 * v243) = v237;
      v240 = 8 * v243 + 8;
      if (v238 != v241)
        goto LABEL_285;
LABEL_292:
      *(_QWORD *)(a1 + 1992) = v248;
      *(_QWORD *)(a1 + 2000) = v240;
      *(_QWORD *)(a1 + 2008) = &v247[8 * v246];
      if (v238)
        operator delete(v238);
LABEL_294:
      *(_QWORD *)(a1 + 2000) = v240;
      v258 = *(unsigned int *)(a1 + 52);
      v259 = (void *)operator new[]();
      v260 = v259;
      if ((int)v258 >= 1)
        bzero(v259, 4 * v258);
      *(_QWORD *)(*(_QWORD *)(a1 + 496) + 8 * v92) = v260;
      v261 = *(char **)(a1 + 2000);
      v262 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v261 < v262)
      {
        *(_QWORD *)v261 = v260;
        v263 = (uint64_t)(v261 + 8);
        goto LABEL_318;
      }
      v264 = *v16;
      v265 = v261 - *v16;
      v266 = v265 >> 3;
      v267 = (v265 >> 3) + 1;
      if (v267 >> 61)
        goto LABEL_543;
      v268 = v262 - (_QWORD)v264;
      if (v268 >> 2 > v267)
        v267 = v268 >> 2;
      if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8)
        v269 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v269 = v267;
      if (v269)
      {
        if (v269 >> 61)
          goto LABEL_544;
        v270 = operator new(8 * v269);
        v271 = &v270[8 * v266];
        *v271 = v260;
        v263 = (uint64_t)(v271 + 1);
        if (v261 == v264)
          goto LABEL_316;
LABEL_309:
        v272 = v261 - 8 - v264;
        if (v272 < 0x58)
          goto LABEL_566;
        if ((unint64_t)(v261 - &v270[v265]) < 0x20)
          goto LABEL_566;
        v273 = (v272 >> 3) + 1;
        v274 = 8 * (v273 & 0x3FFFFFFFFFFFFFFCLL);
        v275 = &v261[-v274];
        v271 = (_QWORD *)((char *)v271 - v274);
        v276 = &v270[8 * v266 - 16];
        v277 = v261 - 16;
        v278 = v273 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v279 = *(_OWORD *)v277;
          *(v276 - 1) = *((_OWORD *)v277 - 1);
          *v276 = v279;
          v276 -= 2;
          v277 -= 32;
          v278 -= 4;
        }
        while (v278);
        v261 = v275;
        if (v273 != (v273 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_566:
          do
          {
            v280 = *((_QWORD *)v261 - 1);
            v261 -= 8;
            *--v271 = v280;
          }
          while (v261 != v264);
        }
        v261 = *v16;
        goto LABEL_316;
      }
      v270 = 0;
      v271 = (_QWORD *)(8 * v266);
      *(_QWORD *)(8 * v266) = v260;
      v263 = 8 * v266 + 8;
      if (v261 != v264)
        goto LABEL_309;
LABEL_316:
      *(_QWORD *)(a1 + 1992) = v271;
      *(_QWORD *)(a1 + 2000) = v263;
      *(_QWORD *)(a1 + 2008) = &v270[8 * v269];
      if (v261)
        operator delete(v261);
LABEL_318:
      *(_QWORD *)(a1 + 2000) = v263;
      v281 = *(unsigned int *)(a1 + 52);
      v282 = (void *)operator new[]();
      v283 = v282;
      if ((int)v281 >= 1)
        bzero(v282, 4 * v281);
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v92) = v283;
      v284 = *(char **)(a1 + 2000);
      v285 = *(_QWORD *)(a1 + 2008);
      if ((unint64_t)v284 >= v285)
      {
        v286 = *v16;
        v287 = v284 - *v16;
        v288 = v287 >> 3;
        v289 = (v287 >> 3) + 1;
        if (v289 >> 61)
          goto LABEL_543;
        v290 = v285 - (_QWORD)v286;
        if (v290 >> 2 > v289)
          v289 = v290 >> 2;
        if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v289;
        if (v291)
        {
          if (v291 >> 61)
            goto LABEL_544;
          v292 = operator new(8 * v291);
          v293 = &v292[8 * v288];
          *v293 = v283;
          v93 = (uint64_t)(v293 + 1);
          if (v284 == v286)
            goto LABEL_339;
LABEL_332:
          v294 = v284 - 8 - v286;
          if (v294 < 0x58)
            goto LABEL_567;
          if ((unint64_t)(v284 - &v292[v287]) < 0x20)
            goto LABEL_567;
          v295 = (v294 >> 3) + 1;
          v296 = 8 * (v295 & 0x3FFFFFFFFFFFFFFCLL);
          v297 = &v284[-v296];
          v293 = (_QWORD *)((char *)v293 - v296);
          v298 = &v292[8 * v288 - 16];
          v299 = v284 - 16;
          v300 = v295 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v301 = *(_OWORD *)v299;
            *(v298 - 1) = *((_OWORD *)v299 - 1);
            *v298 = v301;
            v298 -= 2;
            v299 -= 32;
            v300 -= 4;
          }
          while (v300);
          v284 = v297;
          if (v295 != (v295 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_567:
            do
            {
              v302 = *((_QWORD *)v284 - 1);
              v284 -= 8;
              *--v293 = v302;
            }
            while (v284 != v286);
          }
          v284 = *v16;
        }
        else
        {
          v292 = 0;
          v293 = (_QWORD *)(8 * v288);
          *(_QWORD *)(8 * v288) = v283;
          v93 = 8 * v288 + 8;
          if (v284 != v286)
            goto LABEL_332;
        }
LABEL_339:
        *(_QWORD *)(a1 + 1992) = v293;
        *(_QWORD *)(a1 + 2000) = v93;
        *(_QWORD *)(a1 + 2008) = &v292[8 * v291];
        if (v284)
          operator delete(v284);
        goto LABEL_119;
      }
      *(_QWORD *)v284 = v283;
      v93 = (uint64_t)(v284 + 8);
LABEL_119:
      *(_QWORD *)(a1 + 2000) = v93;
      if (++v92 >= dword_1EE418968)
        return;
    }
    if (v105 >> 61)
      goto LABEL_544;
    v106 = operator new(8 * v105);
    v107 = &v106[8 * v102];
    *v107 = v96;
    v99 = (uint64_t)(v107 + 1);
    if (v97 == v100)
      goto LABEL_142;
LABEL_135:
    v108 = v97 - 8 - v100;
    if (v108 < 0x58)
      goto LABEL_568;
    if ((unint64_t)(v97 - &v106[v101]) < 0x20)
      goto LABEL_568;
    v109 = (v108 >> 3) + 1;
    v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
    v111 = &v97[-v110];
    v107 = (_QWORD *)((char *)v107 - v110);
    v112 = &v106[8 * v102 - 16];
    v113 = v97 - 16;
    v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v115 = *(_OWORD *)v113;
      *(v112 - 1) = *((_OWORD *)v113 - 1);
      *v112 = v115;
      v112 -= 2;
      v113 -= 32;
      v114 -= 4;
    }
    while (v114);
    v97 = v111;
    if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_568:
      do
      {
        v116 = *((_QWORD *)v97 - 1);
        v97 -= 8;
        *--v107 = v116;
      }
      while (v97 != v100);
    }
    v97 = *v16;
    goto LABEL_142;
  }
}

